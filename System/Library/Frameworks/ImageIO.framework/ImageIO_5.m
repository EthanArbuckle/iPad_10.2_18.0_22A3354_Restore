uint64_t _cg_RadReadRGB_float(FILE *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  _QWORD v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  result = 4294967246;
  if (a1 && a2)
  {
    v10 = 0;
    memset(v11, 0, sizeof(v11));
    v12 = 0;
    if (RGBE_ReadHeader(a1, (uint64_t)&v10 + 4, (uint64_t)&v10, (uint64_t)v11)
      || SHIDWORD(v10) < 1
      || HIDWORD(v10) > 0x4000
      || (v10 - 16385) < 0xFFFFC000)
    {
      return 4294967246;
    }
    v7 = 4 * (3 * HIDWORD(v10) * v10);
    v8 = v7 <= a3 && v7 >= HIDWORD(v10);
    if (!v8 || v7 < v10)
      return 4294967246;
    if ((v11[0] & 8) != 0)
    {
      if (!RGBE_ReadPixels_RLE(a1, a2, HIDWORD(v10), v10))
        return 0;
    }
    else if ((v11[0] & 0x10) != 0 && !ReadFloatPixels(a1, a2, SHIDWORD(v10), v10))
    {
      return 0;
    }
    return 4294967246;
  }
  return result;
}

uint64_t ReadFloatPixels(FILE *__stream, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  result = 0xFFFFFFFFLL;
  if (__stream)
  {
    v6 = a2;
    if (a2)
    {
      v7 = a4;
      if (a4)
      {
        while (1)
        {
          v12 = 0;
          v11 = 0;
          if (a3)
            break;
LABEL_9:
          result = 0;
          if (!--v7)
            return result;
        }
        v9 = a3;
        while (fread(&v11, 0xCuLL, 1uLL, __stream))
        {
          *(_QWORD *)v6 = v11;
          v10 = v6 + 12;
          *(_DWORD *)(v6 + 8) = v12;
          v6 += 12;
          if (!--v9)
          {
            v6 = v10;
            goto LABEL_9;
          }
        }
        return 0xFFFFFFFFLL;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t _cg_RadReadRGB_fp16(FILE *a1, void *a2, unsigned int a3)
{
  void *v3;
  uint64_t v4;
  unint64_t v9;
  vImageConverter *v12;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  vImage_Error error;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;

  v3 = 0;
  v21 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v4 = 4294967246;
  if (a1 && a2)
  {
    if (RGBE_ReadHeader(a1, (uint64_t)&v18 + 4, (uint64_t)&v18, (uint64_t)v19))
    {
LABEL_4:
      v3 = 0;
      goto LABEL_5;
    }
    v3 = 0;
    if (HIDWORD(v18) <= 0x4000 && v18 <= 0x4000)
    {
      v3 = 0;
      if (HIDWORD(v18))
      {
        if ((_DWORD)v18)
        {
          v9 = 2 * (3 * HIDWORD(v18) * v18);
          if (v9 > a3 || v9 < SHIDWORD(v18) || v9 < (int)v18)
            goto LABEL_4;
          v3 = malloc_type_malloc(4 * (4 * HIDWORD(v18) * v18), 0x100004052888210uLL);
          if (!v3)
            goto LABEL_5;
          if ((v19[0] & 8) != 0)
          {
            if (RGBE_ReadPixels_RLE(a1, (uint64_t)v3, HIDWORD(v18), v18))
              goto LABEL_5;
LABEL_24:
            memset(&srcFormat.colorSpace, 0, 32);
            *(_QWORD *)&srcFormat.bitsPerComponent = 0x8000000020;
            srcFormat.bitmapInfo = 8453;
            memset(&destFormat.colorSpace, 0, 32);
            *(_QWORD *)&destFormat.bitsPerComponent = 0x4000000010;
            destFormat.bitmapInfo = 4357;
            error = 0;
            v12 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0, &error);
            srcs.data = v3;
            srcs.height = (int)v18;
            srcs.width = SHIDWORD(v18);
            srcs.rowBytes = 16 * SHIDWORD(v18);
            dests.data = a2;
            dests.height = (int)v18;
            dests.width = SHIDWORD(v18);
            dests.rowBytes = 8 * SHIDWORD(v18);
            error = vImageConvert_AnyToAny(v12, &srcs, &dests, 0, 0x10u);
            vImageConverter_Release(v12);
            v4 = 0;
            goto LABEL_5;
          }
          if ((v19[0] & 0x10) != 0 && !ReadFloatPixels(a1, (uint64_t)v3, SHIDWORD(v18), v18))
            goto LABEL_24;
        }
      }
    }
  }
LABEL_5:
  free(v3);
  return v4;
}

float *TIFFCIELabToXYZ(float *a1, int a2, int a3, int a4, float *a5, float *a6, float *a7)
{
  return TIFFCIELab16ToXYZ(a1, 257 * a2, a3 << 8, a4 << 8, a5, a6, a7);
}

float *TIFFCIELab16ToXYZ(float *result, unsigned int a2, int a3, int a4, float *a5, float *a6, float *a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v7 = (float)((float)a2 * 100.0) / 65535.0;
  if (v7 >= 8.856)
  {
    v9 = (float)(v7 + 16.0) / 116.0;
    *a6 = v9 * (float)(v9 * (float)(v9 * result[5]));
  }
  else
  {
    v8 = (float)(v7 * result[5]) / 903.29;
    *a6 = v8;
    v9 = (float)((float)(v8 / result[5]) * 7.787) + 0.13793;
  }
  v10 = (float)((float)((float)a3 * 0.0039062) / 500.0) + v9;
  v11 = result[4];
  if (v10 >= 0.2069)
    v12 = v10 * (float)(v10 * (float)(v10 * v11));
  else
    v12 = (float)((float)(v10 + -0.13793) * v11) / 7.787;
  *a5 = v12;
  v13 = v9 + (float)((float)((float)a4 * -0.0039062) / 200.0);
  v14 = result[6];
  if (v13 >= 0.2069)
    v15 = v13 * (float)(v13 * (float)(v13 * v14));
  else
    v15 = (float)((float)(v13 + -0.13793) * v14) / 7.787;
  *a7 = v15;
  return result;
}

uint64_t TIFFXYZToRGB(uint64_t result, int *a2, int *a3, int *a4, float a5, float a6, float a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  double v16;
  int v17;
  float v18;
  double v19;
  double v20;
  int v21;
  float v22;
  double v23;
  double v24;
  int v25;
  int v26;
  int v27;

  v7 = (float)((float)(*(float *)(result + 32) * a6) + (float)(*(float *)(result + 28) * a5))
     + (float)(*(float *)(result + 36) * a7);
  v8 = (float)((float)(*(float *)(result + 44) * a6) + (float)(*(float *)(result + 40) * a5))
     + (float)(*(float *)(result + 48) * a7);
  v9 = (float)((float)(*(float *)(result + 56) * a6) + (float)(*(float *)(result + 52) * a5))
     + (float)(*(float *)(result + 60) * a7);
  v10 = *(float *)(result + 88);
  v11 = *(float *)(result + 92);
  if (v7 <= v10)
    v7 = *(float *)(result + 88);
  if (v8 <= v11)
    v8 = *(float *)(result + 92);
  v12 = *(float *)(result + 96);
  if (v9 <= v12)
    v9 = *(float *)(result + 96);
  if (v7 >= *(float *)(result + 64))
    v7 = *(float *)(result + 64);
  if (v8 >= *(float *)(result + 68))
    v8 = *(float *)(result + 68);
  if (v9 >= *(float *)(result + 72))
    v9 = *(float *)(result + 72);
  v13 = *(float *)(result + 8);
  v14 = (int)(float)((float)(v7 - v10) / *(float *)(result + 4));
  if (*(_DWORD *)result < v14)
    v14 = *(_DWORD *)result;
  v15 = *(float *)(result + 4 * v14 + 112);
  if (v15 <= 0.0)
    v16 = -0.5;
  else
    v16 = 0.5;
  *a2 = (v16 + v15);
  v17 = (int)(float)((float)(v8 - v11) / v13);
  if (*(_DWORD *)result < v17)
    v17 = *(_DWORD *)result;
  v18 = *(float *)(result + 4 * v17 + 6116);
  v19 = v18;
  if (v18 <= 0.0)
    v20 = -0.5;
  else
    v20 = 0.5;
  *a3 = (v20 + v19);
  v21 = (int)(float)((float)(v9 - v12) / *(float *)(result + 12));
  if (*(_DWORD *)result < v21)
    v21 = *(_DWORD *)result;
  v22 = *(float *)(result + 4 * v21 + 12120);
  v23 = v22;
  if (v22 <= 0.0)
    v24 = -0.5;
  else
    v24 = 0.5;
  *a4 = (v24 + v23);
  v25 = *a2;
  if (*a2 >= *(_DWORD *)(result + 76))
    v25 = *(_DWORD *)(result + 76);
  *a2 = v25;
  v26 = *a3;
  if (*a3 >= *(_DWORD *)(result + 80))
    v26 = *(_DWORD *)(result + 80);
  *a3 = v26;
  v27 = *a4;
  if (*a4 >= *(_DWORD *)(result + 84))
    v27 = *(_DWORD *)(result + 84);
  *a4 = v27;
  return result;
}

uint64_t TIFFCIELabToRGBInit(float *a1, const void *a2, unsigned int *a3)
{
  float v5;
  unint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  int64x2_t v14;
  long double v15;
  long double v16;
  uint64_t v17;
  double v18;
  float v19;
  float *v20;
  double v21;
  int64x2_t v22;
  long double v23;
  long double v24;
  uint64_t v25;
  double v26;
  float v27;
  uint64_t v28;
  int64x2_t v29;
  double v30;
  float *v31;
  long double v32;
  long double v33;
  char v35;
  char v36;
  char v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  uint64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64x2_t v45;

  *(_DWORD *)a1 = 1500;
  _TIFFmemcpy(a1 + 7, a2, 0x54uLL);
  v5 = a1[25];
  v6 = *(unsigned int *)a1;
  v7 = (float)(a1[16] - a1[22]) / (float)(int)v6;
  a1[1] = v7;
  if ((v6 & 0x80000000) != 0)
  {
    a1[2] = v7;
    a1[3] = v7;
  }
  else
  {
    v8 = 0;
    v9 = (double)(int)v6;
    v10 = (float)*((unsigned int *)a1 + 19);
    v11 = v6 + 1;
    v12 = (v6 + 2) & 0x1FFFFFFFELL;
    v38 = vdupq_n_s64(2uLL);
    v41 = (uint64x2_t)vdupq_n_s64(v6);
    v13 = 1.0 / v5;
    v14 = (int64x2_t)xmmword_18820C490;
    do
    {
      v15 = COERCE_DOUBLE(vmovn_s64((int64x2_t)vcgeq_u64(v41, (uint64x2_t)v14)));
      v44 = v14;
      if ((LOBYTE(v15) & 1) != 0)
      {
        v35 = BYTE4(v15);
        v15 = pow((double)(int)v8 / v9, v13);
        v14 = v44;
        *(float *)&v15 = v15;
        a1[v8 + 28] = *(float *)&v15 * v10;
        BYTE4(v15) = v35;
      }
      if ((BYTE4(v15) & 1) != 0)
      {
        v16 = pow((double)((int)v8 + 1) / v9, v13);
        v14 = v44;
        *(float *)&v16 = v16;
        a1[v8 + 29] = *(float *)&v16 * v10;
      }
      v8 += 2;
      v14 = vaddq_s64(v14, v38);
    }
    while (v12 != v8);
    v17 = 0;
    v18 = a1[26];
    a1[2] = v7;
    v19 = (float)*((unsigned int *)a1 + 20);
    v45 = (uint64x2_t)vdupq_n_s64(v11 - 1);
    v39 = vdupq_n_s64(2uLL);
    v20 = a1 + 1530;
    v21 = 1.0 / v18;
    v22 = (int64x2_t)xmmword_18820C490;
    do
    {
      v23 = COERCE_DOUBLE(vmovn_s64((int64x2_t)vcgeq_u64(v45, (uint64x2_t)v22)));
      v42 = v22;
      if ((LOBYTE(v23) & 1) != 0)
      {
        v36 = BYTE4(v23);
        v23 = pow((double)(int)v17 / v9, v21);
        v22 = v42;
        *(float *)&v23 = v23;
        *(v20 - 1) = *(float *)&v23 * v19;
        BYTE4(v23) = v36;
      }
      if ((BYTE4(v23) & 1) != 0)
      {
        v24 = pow((double)((int)v17 + 1) / v9, v21);
        v22 = v42;
        *(float *)&v24 = v24;
        *v20 = *(float *)&v24 * v19;
      }
      v17 += 2;
      v22 = vaddq_s64(v22, v39);
      v20 += 2;
    }
    while (v12 != v17);
    v25 = 0;
    v26 = a1[27];
    a1[3] = v7;
    v27 = (float)*((unsigned int *)a1 + 21);
    v28 = (v11 + 1) & 0x1FFFFFFFELL;
    v29 = (int64x2_t)xmmword_18820C490;
    v30 = 1.0 / v26;
    v40 = vdupq_n_s64(2uLL);
    v31 = a1 + 3031;
    do
    {
      v32 = COERCE_DOUBLE(vmovn_s64((int64x2_t)vcgeq_u64(v45, (uint64x2_t)v29)));
      v43 = v29;
      if ((LOBYTE(v32) & 1) != 0)
      {
        v37 = BYTE4(v32);
        v32 = pow((double)(int)v25 / v9, v30);
        v29 = v43;
        *(float *)&v32 = v32;
        *(v31 - 1) = *(float *)&v32 * v27;
        BYTE4(v32) = v37;
      }
      if ((BYTE4(v32) & 1) != 0)
      {
        v33 = pow((double)((int)v25 + 1) / v9, v30);
        v29 = v43;
        *(float *)&v33 = v33;
        *v31 = *(float *)&v33 * v27;
      }
      v25 += 2;
      v29 = vaddq_s64(v29, v40);
      v31 += 2;
    }
    while (v28 != v25);
  }
  *((_DWORD *)a1 + 4) = *a3;
  *((_DWORD *)a1 + 5) = a3[1];
  *((_DWORD *)a1 + 6) = a3[2];
  return 0;
}

_QWORD *TIFFYCbCrtoRGB(_QWORD *result, unsigned int a2, int a3, int a4, int *a5, int *a6, int *a7)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;

  if (a2 >= 0xFF)
    v7 = 255;
  else
    v7 = a2;
  if (a3 >= 255)
    v8 = 255;
  else
    v8 = a3;
  if (a4 >= 255)
    v9 = 255;
  else
    v9 = a4;
  v10 = v9 & ~(v9 >> 31);
  v11 = result[5];
  v12 = result[2];
  v13 = *(_DWORD *)(result[1] + 4 * v10) + *(_DWORD *)(v11 + 4 * v7);
  v14 = v8 & ~(v8 >> 31);
  if (v13 >= 255)
    v13 = 255;
  *a5 = v13 & ~(v13 >> 31);
  v15 = *(_DWORD *)(v11 + 4 * v7) + ((*(_DWORD *)(result[3] + 4 * v10) + *(_DWORD *)(result[4] + 4 * v14)) >> 16);
  if (v15 >= 255)
    v15 = 255;
  *a6 = v15 & ~(v15 >> 31);
  v16 = *(_DWORD *)(v12 + 4 * v14) + *(_DWORD *)(v11 + 4 * v7);
  if (v16 >= 255)
    v17 = 255;
  else
    v17 = v16;
  *a7 = v17 & ~(v17 >> 31);
  return result;
}

uint64_t TIFFYCbCrToRGBInit(_QWORD *a1, float *a2, float *a3)
{
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  float v12;
  unsigned int v13;
  float v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  float v23;
  unsigned int v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  float v33;
  double v34;
  int32x4_t v35;
  unsigned int v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t *v58;
  float32x4_t v59;

  _TIFFmemset(a1 + 6, 0, 0x100uLL);
  v6 = 0;
  *a1 = a1 + 38;
  v7 = (int8x16_t)xmmword_18820EE20;
  v8.i64[0] = 0x1010101010101010;
  v8.i64[1] = 0x1010101010101010;
  do
  {
    *(int8x16_t *)&a1[v6 + 38] = v7;
    v6 += 2;
    v7 = vaddq_s8(v7, v8);
  }
  while (v6 != 32);
  _TIFFmemset(a1 + 70, 255, 0x200uLL);
  a1[1] = a1 + 134;
  a1[2] = a1 + 262;
  a1[3] = a1 + 390;
  a1[4] = a1 + 518;
  if ((float)(a3[1] - *a3) == 0.0)
    *(float *)v11.i32 = 1.0;
  else
    *(float *)v11.i32 = a3[1] - *a3;
  v12 = a3[2] + -128.0;
  if ((float)((float)(a3[3] + -128.0) - v12) == 0.0)
    *(float *)v10.i32 = 1.0;
  else
    *(float *)v10.i32 = (float)(a3[3] + -128.0) - v12;
  v13 = (int)v12;
  v14 = a3[4] + -128.0;
  *(float *)v9.i32 = (float)(a3[5] + -128.0) - v14;
  if (*(float *)v9.i32 == 0.0)
    *(float *)v9.i32 = 1.0;
  v15 = (int)v14;
  v17 = a2[1];
  v16 = a2[2];
  v18 = (float)(v16 * -2.0) + 2.0;
  v19 = *a2;
  v20 = (float)(v16 * v18) / v17;
  v21 = v20 * 65536.0;
  if (v20 > 2.0)
    v21 = 131070.0;
  v22 = v20 < 0.0;
  v23 = 0.0;
  if (v22)
    v21 = 0.0;
  v24 = (int)(v21 + 0.5);
  v25 = v18 * 65536.0;
  if (v18 > 2.0)
    v25 = 131070.0;
  if (v18 < 0.0)
    v26 = 0.0;
  else
    v26 = v25;
  v27 = (int)(v26 + 0.5);
  v28 = (float)(v19 * -2.0) + 2.0;
  v29 = (float)(v19 * v28) / v17;
  v30 = v29 * 65536.0;
  if (v29 > 2.0)
    v30 = 131070.0;
  if (v29 < 0.0)
    v31 = 0.0;
  else
    v31 = v30;
  v32 = (int)(v31 + 0.5);
  if (v28 <= 2.0)
    v33 = v28 * 65536.0;
  else
    v33 = 131070.0;
  if (v28 >= 0.0)
    v23 = v33;
  v34 = v23 + 0.5;
  v35 = vdupq_n_s32(v15);
  v36 = (int)v34;
  v37 = (float32x4_t)vdupq_lane_s32(v9, 0);
  v38 = vdupq_n_s32(v13);
  v39 = (float32x4_t)vdupq_lane_s32(v10, 0);
  v40 = vdupq_n_s32(v36);
  v41 = vdupq_n_s32(v27);
  v42 = vdupq_n_s32(v32);
  v43 = vdupq_n_s32(v24);
  v44 = vdupq_n_s32((int)*a3);
  a1[5] = a1 + 646;
  v45 = (float32x4_t)vdupq_lane_s32(v11, 0);
  v46 = (int32x4_t)xmmword_18822DE60;
  v47 = 262;
  v48.i64[0] = 0x8000000080;
  v48.i64[1] = 0x8000000080;
  v49.i64[0] = 0x400000004;
  v49.i64[1] = 0x400000004;
  do
  {
    v50 = (float32x4_t)vdupq_n_s32(0x42FE0000u);
    v51 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(vsubq_s32(v46, v35)), v50), v37);
    v52 = (float32x4_t)vdupq_n_s32(0xC5800000);
    v53 = (float32x4_t)vdupq_n_s32(0x45800000u);
    v54 = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v51), (int8x16_t)v52, vbslq_s8((int8x16_t)vcgtq_f32(v51, v53), (int8x16_t)v53, (int8x16_t)v51)));
    v55 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(vsubq_s32(v46, v38)), v50), v39);
    v56 = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v55), (int8x16_t)v52, vbslq_s8((int8x16_t)vcgtq_f32(v55, v53), (int8x16_t)v53, (int8x16_t)v55)));
    v57.i64[0] = 0x800000008000;
    v57.i64[1] = 0x800000008000;
    v58 = (int32x4_t *)&a1[v47];
    *(int32x4_t *)&a1[v47 - 128] = vshrq_n_s32(vmlaq_s32(v57, v40, v54), 0x10uLL);
    v57.i64[0] = 0x800000008000;
    v57.i64[1] = 0x800000008000;
    *v58 = vshrq_n_s32(vmlaq_s32(v57, v41, v56), 0x10uLL);
    v58[64] = vnegq_s32(vmulq_s32(v42, v54));
    v54.i64[0] = 0x800000008000;
    v54.i64[1] = 0x800000008000;
    v58[128] = vmlsq_s32(v54, v43, v56);
    v59 = vdivq_f32(vmulq_f32(vcvtq_f32_s32(vaddq_s32(vsubq_s32(v46, v44), v48)), (float32x4_t)vdupq_n_s32(0x437F0000u)), v45);
    v58[192] = vcvtq_s32_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v59), (int8x16_t)v52, vbslq_s8((int8x16_t)vcgtq_f32(v59, v53), (int8x16_t)v53, (int8x16_t)v59)));
    v46 = vaddq_s32(v46, v49);
    v47 += 2;
  }
  while (v47 != 390);
  return 0;
}

const char *IIOCMErrorString(int a1)
{
  const char *result;
  uint64_t v2;

  if (a1 > -15475)
  {
    if (a1 <= -12849)
    {
      switch(a1)
      {
        case -12912:
          result = "kVTVideoEncoderMalfunctionErr";
          break;
        case -12911:
          result = "kVTVideoDecoderMalfunctionErr";
          break;
        case -12910:
          result = "kVTVideoDecoderUnsupportedDataFormatErr";
          break;
        case -12909:
          result = "kVTVideoDecoderBadDataErr";
          break;
        case -12908:
          result = "kVTCouldNotFindVideoEncoderErr";
          break;
        case -12907:
          result = "kVTCouldNotCreateInstanceErr";
          break;
        case -12906:
          result = "kVTCouldNotFindVideoDecoderErr";
          break;
        case -12905:
        case -12904:
        case -12903:
          goto LABEL_65;
        case -12902:
          result = "kVTParameterErr";
          break;
        default:
          switch(a1)
          {
            case -15474:
              result = "kCMPhotoError_SubsamplingOrBitDepthNotSupported";
              break;
            case -15473:
              result = "kCMPhotoError_SequenceFrameEncodeFailed";
              break;
            case -15472:
              result = "kCMPhotoError_AsyncAuxiliaryEncodeFailed";
              break;
            case -15471:
              result = "kCMPhotoError_PixelTransferNotAllowed";
              break;
            case -15470:
              result = "kCMPhotoError_XPCError";
              break;
            default:
              goto LABEL_65;
          }
          break;
      }
      return result;
    }
    if (a1 > -6664)
    {
      if (a1 <= -6662)
      {
        if (a1 == -6663)
          return "kCVReturnUnsupported";
        else
          return "kCVReturnAllocationFailed";
      }
      if (a1 == -6661)
        return "kCVReturnInvalidArgument";
      if (a1 == 1100)
        return "BOOTSTRAP_NOT_PRIVILEGED (media server is NOT running)";
    }
    else
    {
      if (a1 > -6685)
      {
        switch(a1)
        {
          case -6684:
            result = "kCVReturnPixelBufferNotMetalCompatible";
            break;
          case -6683:
            result = "kCVReturnPixelBufferNotOpenGLCompatible";
            break;
          case -6682:
            result = "kCVReturnInvalidPixelBufferAttributes";
            break;
          case -6681:
            result = "kCVReturnInvalidSize";
            break;
          case -6680:
            result = "kCVReturnInvalidPixelFormat";
            break;
          default:
            goto LABEL_65;
        }
        return result;
      }
      switch(a1)
      {
        case -12848:
          return "kFigFormatReaderError_ParsingFailure";
        case -12783:
          return "kCMBaseObjectError_ValueNotAvailable";
        case -12782:
          return "kCMBaseObjectError_UnsupportedOperation";
      }
    }
LABEL_65:
    v2 = (a1 & 0x3FFF) - 736;
    if (v2 > 4)
      return "unknown error";
    else
      return off_1E1BCA6D8[v2];
  }
  switch(a1)
  {
    case -17109:
      result = "kCMPhotoError_ThumbnailEncodeFailed";
      break;
    case -17108:
      result = "kCMPhotoError_FileStructureLocked";
      break;
    case -17107:
      result = "kCMPhotoError_TimeoutReached";
      break;
    case -17106:
      result = "kCMPhotoError_DataTooLarge";
      break;
    case -17105:
      result = "kCMPhotoError_RequestCanceled";
      break;
    case -17104:
      result = "kCMPhotoError_FrameDropped";
      break;
    case -17103:
      result = "kCMPhotoError_InvalidCropRect";
      break;
    case -17102:
      result = "kCMPhotoError_InvalidData";
      break;
    case -17101:
      result = "kCMPhotoError_InvalidSession";
      break;
    case -17100:
      result = "kCMPhotoError_UnsupportedQuality";
      break;
    default:
      switch(a1)
      {
        case -16999:
          result = "kCMPhotoError_UnsupportedTiling";
          break;
        case -16998:
          result = "kCMPhotoError_UnsupportedCodec";
          break;
        case -16997:
          result = "kCMPhotoError_UnsupportedSourceType";
          break;
        case -16996:
          result = "kCMPhotoError_UnsupportedImageType";
          break;
        case -16995:
          result = "kCMPhotoError_UnsupportedPixelFormat";
          break;
        case -16994:
          result = "kCMPhotoError_UnsupportedOperation";
          break;
        case -16993:
          result = "kCMPhotoError_ValueNotAvailable";
          break;
        case -16992:
          result = "kCMPhotoError_InternalFailure";
          break;
        case -16991:
          result = "kCMPhotoError_AllocationFailed";
          break;
        case -16990:
          result = "kCMPhotoError_InvalidParameter";
          break;
        default:
          if (a1 != -19092)
            goto LABEL_65;
          result = "kVTParavirtualizationTimeoutErr";
          break;
      }
      break;
  }
  return result;
}

void HEIFExif::HEIFExif (HEIFExif *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BB2B00;
  v2 = HEIFExif::readFromStream((UInt8 *)this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFExif::readFromStream(UInt8 *this, CFReadStreamRef stream)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) == 4
    && (*(_DWORD *)buffer != 1179211845 || CFReadStreamRead(stream, this + 8, 16) == 16))
  {
    return 0;
  }
  else
  {
    return 4294967246;
  }
}

void HEIFItem::HEIFItem(HEIFItem *this, const __CFDictionary *a2)
{
  IIODictionary *v3;
  const __CFDictionary *ObjectForKeyGroup;
  uint64_t v5;
  IIOArray *v6;
  const __CFDictionary *v7;
  IIOArray *v8;
  const __CFDictionary *v9;
  IIOArray *v10;
  const __CFString *v11;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  *(_QWORD *)this = &off_1E1BB2B20;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  memset(v18, 0, sizeof(v18));
  v3 = IIODictionary::IIODictionary((IIODictionary *)v18, a2);
  if (IIODictionary::containsKeyGroup(v3, CFSTR("CoordinateSystemID"), CFSTR("CameraExtrinsics")))
  {
    *((_DWORD *)this + 2) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v18, CFSTR("CoordinateSystemID"), CFSTR("CameraExtrinsics"));
    *((_BYTE *)this + 184) = 1;
  }
  ObjectForKeyGroup = IIODictionary::getObjectForKeyGroup((IIODictionary *)v18, CFSTR("Position"), CFSTR("CameraExtrinsics"));
  v5 = MEMORY[0x1E0C809B0];
  if (ObjectForKeyGroup)
  {
    *((_BYTE *)this + 185) = 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v6 = IIOArray::IIOArray((IIOArray *)&v15, ObjectForKeyGroup);
    v14[0] = v5;
    v14[1] = 0x40000000;
    v14[2] = ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke;
    v14[3] = &__block_descriptor_tmp_57;
    v14[4] = this;
    IIOArray::enumerate((uint64_t)v6, (uint64_t)v14);
    IIOArray::~IIOArray((IIOArray *)&v15);
  }
  v7 = IIODictionary::getObjectForKeyGroup((IIODictionary *)v18, CFSTR("Rotation"), CFSTR("CameraExtrinsics"));
  if (v7)
  {
    *((_BYTE *)this + 186) = 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v8 = IIOArray::IIOArray((IIOArray *)&v15, v7);
    v13[0] = v5;
    v13[1] = 0x40000000;
    v13[2] = ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke_2;
    v13[3] = &__block_descriptor_tmp_58;
    v13[4] = this;
    IIOArray::enumerate((uint64_t)v8, (uint64_t)v13);
    IIOArray::~IIOArray((IIOArray *)&v15);
  }
  v9 = IIODictionary::getObjectForKeyGroup((IIODictionary *)v18, CFSTR("Intrinsics"), CFSTR("CameraModel"));
  if (v9)
  {
    *((_BYTE *)this + 187) = 1;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v10 = IIOArray::IIOArray((IIOArray *)&v15, v9);
    v12[0] = v5;
    v12[1] = 0x40000000;
    v12[2] = ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke_3;
    v12[3] = &__block_descriptor_tmp_59_0;
    v12[4] = this;
    IIOArray::enumerate((uint64_t)v10, (uint64_t)v12);
    IIOArray::~IIOArray((IIOArray *)&v15);
  }
  v11 = (const __CFString *)IIODictionary::getObjectForKeyGroup((IIODictionary *)v18, CFSTR("ModelType"), CFSTR("CameraModel"));
  if (v11)
    *((_QWORD *)this + 24) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11);
  IIODictionary::~IIODictionary((IIODictionary *)v18);
}

void sub_188068648(_Unwind_Exception *a1)
{
  uint64_t v1;

  IIOArray::~IIOArray((IIOArray *)(v1 - 80));
  IIODictionary::~IIODictionary((IIODictionary *)(v1 - 56));
  _Unwind_Resume(a1);
}

void ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v5;
  CFTypeID v6;
  _BYTE v7[24];

  if (cf && a3 <= 2)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = CFGetTypeID(cf);
    if (v6 == CFNumberGetTypeID())
    {
      IIONumber::IIONumber((IIONumber *)v7, (const __CFNumber *)cf);
      *(double *)(v5 + 8 * a3 + 16) = IIONumber::doubleNum((IIONumber *)v7);
      IIONumber::~IIONumber((IIONumber *)v7);
    }
  }
}

void sub_18806870C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIONumber::~IIONumber((IIONumber *)va);
  _Unwind_Resume(a1);
}

void ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke_2(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v5;
  CFTypeID v6;
  _BYTE v7[24];

  if (cf && a3 <= 8)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = CFGetTypeID(cf);
    if (v6 == CFNumberGetTypeID())
    {
      IIONumber::IIONumber((IIONumber *)v7, (const __CFNumber *)cf);
      *(double *)(v5 + 8 * a3 + 40) = IIONumber::doubleNum((IIONumber *)v7);
      IIONumber::~IIONumber((IIONumber *)v7);
    }
  }
}

void sub_18806879C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIONumber::~IIONumber((IIONumber *)va);
  _Unwind_Resume(a1);
}

void ___ZN8HEIFItemC2EPK14__CFDictionary_block_invoke_3(uint64_t a1, CFTypeRef cf, uint64_t a3)
{
  uint64_t v5;
  CFTypeID v6;
  _BYTE v7[24];

  if (cf && a3 <= 8)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = CFGetTypeID(cf);
    if (v6 == CFNumberGetTypeID())
    {
      IIONumber::IIONumber((IIONumber *)v7, (const __CFNumber *)cf);
      *(double *)(v5 + 8 * a3 + 112) = IIONumber::doubleNum((IIONumber *)v7);
      IIONumber::~IIONumber((IIONumber *)v7);
    }
  }
}

void sub_18806882C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIONumber::~IIONumber((IIONumber *)va);
  _Unwind_Resume(a1);
}

void HEIFItem::HEIFItem(HEIFItem *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BB2B20;
  v2 = HEIFItem::readFromStream(this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFItem::readFromStream(HEIFItem *this, CFReadStreamRef stream)
{
  uint64_t result;
  UInt8 *v5;
  CFIndex v6;
  UInt8 v7[4];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  CFReadStreamRead(stream, buffer, 4);
  result = 0;
  if (*(_DWORD *)buffer == 1835365449)
  {
    if (CFReadStreamRead(stream, (UInt8 *)this + 8, 192) == 192)
    {
      *((_QWORD *)this + 24) = 0;
      *(_DWORD *)v7 = 0;
      if (CFReadStreamRead(stream, v7, 4) == 4)
      {
        if (!*(_DWORD *)v7)
          return 0;
        v5 = (UInt8 *)malloc_type_malloc(*(unsigned int *)v7, 0x641818AEuLL);
        v6 = CFReadStreamRead(stream, v5, *(unsigned int *)v7);
        if (v6 == *(unsigned int *)v7)
        {
          *((_QWORD *)this + 24) = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, v6, 0x8000100u, 1u);
          free(v5);
          return 0;
        }
        free(v5);
      }
    }
    return 4294967246;
  }
  return result;
}

void HEIFItem::~HEIFItem(HEIFItem *this)
{
  const void *v2;

  *(_QWORD *)this = &off_1E1BB2B20;
  v2 = (const void *)*((_QWORD *)this + 24);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 24) = 0;
  }
}

{
  HEIFItem::~HEIFItem(this);
  JUMPOUT(0x18D761C30);
}

void HEIFItem::updateProperties(HEIFItem *this, IIODictionary *a2)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  const void *v7;
  _BYTE v8[24];
  _BYTE v9[24];
  _BYTE v10[24];
  CFMutableArrayRef v11;
  void *v12;
  void *value;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;

  v17 = 0;
  v18 = 0;
  v19 = 0;
  IIODictionary::IIODictionary((IIODictionary *)&v17);
  IIODictionary::setObjectForKey(a2, v18, CFSTR("{HEIF}"));
  if (*((_WORD *)this + 92) || *((_BYTE *)this + 186))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    IIODictionary::IIODictionary((IIODictionary *)&v14);
    IIODictionary::setObjectForKey((IIODictionary *)&v17, v15, CFSTR("CameraExtrinsics"));
    if (*((_BYTE *)this + 184))
    {
      IIONumber::IIONumber((IIONumber *)&v11, *((_DWORD *)this + 2));
      IIODictionary::setObjectForKey((IIODictionary *)&v14, value, CFSTR("CoordinateSystemID"));
      IIONumber::~IIONumber((IIONumber *)&v11);
    }
    if (*((_BYTE *)this + 185))
    {
      v11 = 0;
      v12 = 0;
      value = 0;
      IIOArray::IIOArray((IIOArray *)&v11);
      for (i = 0; i != 24; i += 8)
      {
        IIONumber::IIONumber((IIONumber *)v10, *(double *)((char *)this + i + 16));
        IIOArray::addObject(&v11, (uint64_t)v10);
        IIONumber::~IIONumber((IIONumber *)v10);
      }
      IIODictionary::setObjectForKey((IIODictionary *)&v14, v12, CFSTR("Position"));
      IIOArray::~IIOArray((IIOArray *)&v11);
    }
    if (*((_BYTE *)this + 186))
    {
      v11 = 0;
      v12 = 0;
      value = 0;
      IIOArray::IIOArray((IIOArray *)&v11);
      for (j = 40; j != 112; j += 8)
      {
        IIONumber::IIONumber((IIONumber *)v9, *(double *)((char *)this + j));
        IIOArray::addObject(&v11, (uint64_t)v9);
        IIONumber::~IIONumber((IIONumber *)v9);
      }
      IIODictionary::setObjectForKey((IIODictionary *)&v14, v12, CFSTR("Rotation"));
      IIOArray::~IIOArray((IIOArray *)&v11);
    }
    IIODictionary::~IIODictionary((IIODictionary *)&v14);
  }
  if (*((_BYTE *)this + 187) || *((_QWORD *)this + 24))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    IIODictionary::IIODictionary((IIODictionary *)&v14);
    IIODictionary::setObjectForKey((IIODictionary *)&v17, v15, CFSTR("CameraModel"));
    if (*((_BYTE *)this + 187))
    {
      v11 = 0;
      v12 = 0;
      value = 0;
      IIOArray::IIOArray((IIOArray *)&v11);
      for (k = 0; k != 72; k += 8)
      {
        IIONumber::IIONumber((IIONumber *)v8, *(double *)((char *)this + k + 112));
        IIOArray::addObject(&v11, (uint64_t)v8);
        IIONumber::~IIONumber((IIONumber *)v8);
      }
      IIODictionary::setObjectForKey((IIODictionary *)&v14, v12, CFSTR("Intrinsics"));
      IIOArray::~IIOArray((IIOArray *)&v11);
    }
    v7 = (const void *)*((_QWORD *)this + 24);
    if (v7)
      IIODictionary::setObjectForKey((IIODictionary *)&v14, v7, CFSTR("ModelType"));
    IIODictionary::~IIODictionary((IIODictionary *)&v14);
  }
  IIODictionary::~IIODictionary((IIODictionary *)&v17);
}

void sub_188068C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  IIOArray::~IIOArray((IIOArray *)va);
  IIODictionary::~IIODictionary((IIODictionary *)(v10 - 80));
  IIODictionary::~IIODictionary((IIODictionary *)(v10 - 56));
  _Unwind_Resume(a1);
}

uint64_t HEIFItem::writeToStream(HEIFItem *this, CFWriteStreamRef stream)
{
  const __CFString *v4;
  const char *CStringPtr;
  BOOL v6;
  UInt8 *v7;
  CFIndex v8;
  __CFWriteStream *v9;
  UInt8 *v10;
  UInt8 v12[4];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 1835365449;
  CFWriteStreamWrite(stream, buffer, 4);
  CFWriteStreamWrite(stream, (const UInt8 *)this + 8, 192);
  *(_DWORD *)v12 = 0;
  v4 = (const __CFString *)*((_QWORD *)this + 24);
  if (!v4)
  {
    v10 = v12;
    v9 = stream;
    v8 = 4;
    goto LABEL_8;
  }
  *(_DWORD *)v12 = CFStringGetLength(v4);
  CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)this + 24), 0x8000100u);
  if (CStringPtr)
    v6 = *(_DWORD *)v12 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = (UInt8 *)CStringPtr;
    CFWriteStreamWrite(stream, v12, 4);
    v8 = *(unsigned int *)v12;
    v9 = stream;
    v10 = v7;
LABEL_8:
    CFWriteStreamWrite(v9, v10, v8);
  }
  return 0;
}

void HEIFXMP::HEIFXMP(HEIFXMP *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BB29A0;
  v2 = HEIFXMP::readFromStream((UInt8 *)this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFXMP::readFromStream(UInt8 *this, CFReadStreamRef stream)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) == 4
    && (*(_DWORD *)buffer != 542133592 || CFReadStreamRead(stream, this + 8, 16) == 16))
  {
    return 0;
  }
  else
  {
    return 4294967246;
  }
}

void HEIFXMP::~HEIFXMP(HEIFXMP *this)
{
  *(_QWORD *)this = &off_1E1BB29A0;
}

{
  *(_QWORD *)this = &off_1E1BB29A0;
  JUMPOUT(0x18D761C30);
}

void HEIFStereoAggressor::HEIFStereoAggressor(HEIFStereoAggressor *this, const __CFDictionary *a2)
{
  CFTypeRef *v3;
  const __CFDictionary *ObjectForKey;
  const __CFDictionary *v5;
  unsigned int v6;
  float FloatForKey;
  _QWORD v8[3];

  *((_QWORD *)this + 1) = 0;
  v3 = (CFTypeRef *)((char *)this + 8);
  *(_QWORD *)this = &off_1E1B817E0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  memset(v8, 0, sizeof(v8));
  IIODictionary::IIODictionary((IIODictionary *)v8, a2);
  if (IIODictionary::containsKey((IIODictionary *)v8, CFSTR("Type")))
  {
    ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v8, CFSTR("Type"));
    *v3 = CFRetain(ObjectForKey);
  }
  if (IIODictionary::containsKey((IIODictionary *)v8, CFSTR("SubTypeURI")))
  {
    v5 = IIODictionary::getObjectForKey((IIODictionary *)v8, CFSTR("SubTypeURI"));
    *((_QWORD *)this + 2) = CFRetain(v5);
  }
  v6 = IIODictionary::containsKey((IIODictionary *)v8, CFSTR("Severity"));
  FloatForKey = -1.0;
  if (v6)
    FloatForKey = IIODictionary::getFloatForKey((IIODictionary *)v8, CFSTR("Severity"));
  *((float *)this + 6) = FloatForKey;
  IIODictionary::~IIODictionary((IIODictionary *)v8);
}

void sub_188068FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

void HEIFStereoAggressor::HEIFStereoAggressor(HEIFStereoAggressor *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1B817E0;
  v2 = HEIFStereoAggressor::readFromStream((UInt8 *)this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFStereoAggressor::readFromStream(UInt8 *this, CFReadStreamRef stream)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) == 4
    && (*(_DWORD *)buffer != 1195463763 || CFReadStreamRead(stream, this + 8, 24) == 24))
  {
    return 0;
  }
  else
  {
    return 4294967246;
  }
}

void HEIFStereoAggressor::~HEIFStereoAggressor(HEIFStereoAggressor *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_1E1B817E0;
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
}

{
  HEIFStereoAggressor::~HEIFStereoAggressor(this);
  JUMPOUT(0x18D761C30);
}

BOOL HEIFStereoAggressor::hasSeverity(HEIFStereoAggressor *this)
{
  return *((float *)this + 6) >= 0.0;
}

float HEIFStereoAggressor::getSeverity(HEIFStereoAggressor *this)
{
  return *((float *)this + 6);
}

void HEIFGroupItem::HEIFGroupItem(HEIFGroupItem *this, const __CFDictionary *a2, const __CFDictionary *a3, int a4)
{
  _DWORD *v7;
  IIODictionary *v8;
  const __CFDictionary *ObjectForKey;
  IIOArray *v10;
  uint64_t v11;
  const __CFDictionary *v12;
  _QWORD v13[5];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[5];
  _QWORD v17[3];
  _QWORD v18[3];

  *(_QWORD *)this = &off_1E1BACC48;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 1) = 0;
  v7 = (_DWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  memset(v18, 0, sizeof(v18));
  v8 = IIODictionary::IIODictionary((IIODictionary *)v18, a2);
  *((_DWORD *)this + 3) = a4;
  *v7 = IIODictionary::getUint32ForKey(v8, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Group_Type);
  ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Group_PictureIndexList);
  memset(v17, 0, sizeof(v17));
  v10 = IIOArray::IIOArray((IIOArray *)v17, ObjectForKey);
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = ___ZN13HEIFGroupItemC2EPK14__CFDictionaryS2_j_block_invoke;
  v16[3] = &__block_descriptor_tmp_79_0;
  v16[4] = this;
  IIOArray::enumerate((uint64_t)v10, (uint64_t)v16);
  if (a3)
  {
    memset(v15, 0, sizeof(v15));
    IIODictionary::IIODictionary((IIODictionary *)v15, a3);
    if (IIODictionary::containsKey((IIODictionary *)v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_GroupProperty_DisparityAdjustment))
    {
      *((_BYTE *)this + 20) = 1;
      *((_DWORD *)this + 4) = IIODictionary::getUint32ForKey((IIODictionary *)v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_GroupProperty_DisparityAdjustment);
    }
    v12 = IIODictionary::getObjectForKey((IIODictionary *)v18, CFSTR("StereoAggressors"));
    memset(v14, 0, sizeof(v14));
    IIOArray::IIOArray((IIOArray *)v14, v12);
    v13[0] = v11;
    v13[1] = 0x40000000;
    v13[2] = ___ZN13HEIFGroupItemC2EPK14__CFDictionaryS2_j_block_invoke_2;
    v13[3] = &__block_descriptor_tmp_82_0;
    v13[4] = this;
    IIOArray::enumerate((uint64_t)v14, (uint64_t)v13);
    if (IIODictionary::containsKey((IIODictionary *)v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_GroupProperty_MonoImageLocation))*((_DWORD *)this + 6) = IIODictionary::getUint32ForKey((IIODictionary *)v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_GroupProperty_MonoImageLocation);
    IIOArray::~IIOArray((IIOArray *)v14);
    IIODictionary::~IIODictionary((IIODictionary *)v15);
  }
  IIOArray::~IIOArray((IIOArray *)v17);
  IIODictionary::~IIODictionary((IIODictionary *)v18);
}

void sub_188069318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a9);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  IIOArray::~IIOArray((IIOArray *)(v11 - 112));
  IIODictionary::~IIODictionary((IIODictionary *)(v11 - 88));
  v13 = (void *)v9[7];
  if (v13)
  {
    v9[8] = v13;
    operator delete(v13);
  }
  v14 = *v10;
  if (*v10)
  {
    v9[5] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void ___ZN13HEIFGroupItemC2EPK14__CFDictionaryS2_j_block_invoke(uint64_t a1, const __CFNumber *a2)
{
  _QWORD *v2;
  int v3;
  int v4;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  _QWORD v17[3];

  v2 = *(_QWORD **)(a1 + 32);
  memset(v17, 0, sizeof(v17));
  IIONumber::IIONumber((IIONumber *)v17, a2);
  v3 = IIONumber::uint32Num((IIONumber *)v17);
  v4 = v3;
  v5 = v2[6];
  v6 = (char *)v2[5];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)v2[4];
    v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v2 + 6), v12);
      v8 = (char *)v2[4];
      v6 = (char *)v2[5];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = v4;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    v2[4] = v14;
    v2[5] = v7;
    v2[6] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v6 = v3;
    v7 = v6 + 4;
  }
  v2[5] = v7;
  IIONumber::~IIONumber((IIONumber *)v17);
}

void sub_1880694A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIONumber::~IIONumber((IIONumber *)va);
  _Unwind_Resume(a1);
}

void ___ZN13HEIFGroupItemC2EPK14__CFDictionaryS2_j_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  _QWORD *v3;
  HEIFStereoAggressor *v4;
  unint64_t v5;
  HEIFStereoAggressor **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  HEIFStereoAggressor **v14;
  char *v15;
  char *v16;
  char *v17;
  HEIFStereoAggressor *v18;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = (HEIFStereoAggressor *)operator new();
  HEIFStereoAggressor::HEIFStereoAggressor(v4, a2);
  v5 = v3[9];
  v6 = (HEIFStereoAggressor **)v3[8];
  if ((unint64_t)v6 >= v5)
  {
    v8 = v3[7];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(v3 + 9), v12);
    else
      v13 = 0;
    v14 = (HEIFStereoAggressor **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)v3[7];
    v16 = (char *)v3[8];
    if (v16 != v17)
    {
      do
      {
        v18 = (HEIFStereoAggressor *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)v3[7];
    }
    v3[7] = v14;
    v3[8] = v7;
    v3[9] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  v3[8] = v7;
}

void sub_1880695B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10E1C4038959712);
  _Unwind_Resume(a1);
}

void HEIFGroupItem::HEIFGroupItem(HEIFGroupItem *this, __CFReadStream *a2)
{
  int v2;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BACC48;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v2 = HEIFGroupItem::readFromStream(this, a2);
  if (v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = v2;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

void sub_188069650(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[7];
  if (v4)
  {
    v1[8] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[5] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HEIFGroupItem::readFromStream(HEIFGroupItem *this, CFReadStreamRef stream)
{
  void **v4;
  char **v5;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _DWORD *v16;
  int v17;
  unsigned int v18;
  HEIFStereoAggressor *v19;
  unint64_t v20;
  HEIFStereoAggressor **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  HEIFStereoAggressor **v28;
  char *v29;
  char *v30;
  HEIFStereoAggressor *v31;
  UInt8 v33[4];
  UInt8 v34[4];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4)
    return 4294967246;
  if (*(_DWORD *)buffer == 542134855)
  {
    if (CFReadStreamRead(stream, (UInt8 *)this + 8, 20) == 20)
    {
      v4 = (void **)((char *)this + 32);
      *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
      v5 = (char **)((char *)this + 56);
      *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
      *(_DWORD *)v34 = 0;
      if (CFReadStreamRead(stream, v34, 4) == 4)
      {
        if (*(_DWORD *)v34)
        {
          v6 = 0;
          do
          {
            *(_DWORD *)v33 = 0;
            if (CFReadStreamRead(stream, v33, 4) != 4)
              return 4294967246;
            v8 = (char *)*((_QWORD *)this + 5);
            v7 = *((_QWORD *)this + 6);
            if ((unint64_t)v8 >= v7)
            {
              v9 = (char *)*v4;
              v10 = (v8 - (_BYTE *)*v4) >> 2;
              v11 = v10 + 1;
              if ((unint64_t)(v10 + 1) >> 62)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v12 = v7 - (_QWORD)v9;
              if (v12 >> 1 > v11)
                v11 = v12 >> 1;
              if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
                v13 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v13 = v11;
              if (v13)
              {
                v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 48, v13);
                v9 = (char *)*((_QWORD *)this + 4);
                v8 = (char *)*((_QWORD *)this + 5);
              }
              else
              {
                v14 = 0;
              }
              v15 = &v14[4 * v10];
              *(_DWORD *)v15 = *(_DWORD *)v33;
              v16 = v15 + 4;
              while (v8 != v9)
              {
                v17 = *((_DWORD *)v8 - 1);
                v8 -= 4;
                *((_DWORD *)v15 - 1) = v17;
                v15 -= 4;
              }
              *((_QWORD *)this + 4) = v15;
              *((_QWORD *)this + 5) = v16;
              *((_QWORD *)this + 6) = &v14[4 * v13];
              if (v9)
                operator delete(v9);
              *((_QWORD *)this + 5) = v16;
            }
            else
            {
              *(_DWORD *)v8 = *(_DWORD *)v33;
              *((_QWORD *)this + 5) = v8 + 4;
            }
          }
          while (++v6 < *(_DWORD *)v34);
        }
        if (CFReadStreamRead(stream, v34, 4) == 4)
        {
          if (*(_DWORD *)v34)
          {
            v18 = 0;
            do
            {
              v19 = (HEIFStereoAggressor *)operator new();
              HEIFStereoAggressor::HEIFStereoAggressor(v19, stream);
              v21 = (HEIFStereoAggressor **)*((_QWORD *)this + 8);
              v20 = *((_QWORD *)this + 9);
              if ((unint64_t)v21 >= v20)
              {
                v23 = ((char *)v21 - *v5) >> 3;
                if ((unint64_t)(v23 + 1) >> 61)
                  std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
                v24 = v20 - (_QWORD)*v5;
                v25 = v24 >> 2;
                if (v24 >> 2 <= (unint64_t)(v23 + 1))
                  v25 = v23 + 1;
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                  v26 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v26 = v25;
                if (v26)
                  v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 72, v26);
                else
                  v27 = 0;
                v28 = (HEIFStereoAggressor **)&v27[8 * v23];
                *v28 = v19;
                v22 = v28 + 1;
                v30 = (char *)*((_QWORD *)this + 7);
                v29 = (char *)*((_QWORD *)this + 8);
                if (v29 != v30)
                {
                  do
                  {
                    v31 = (HEIFStereoAggressor *)*((_QWORD *)v29 - 1);
                    v29 -= 8;
                    *--v28 = v31;
                  }
                  while (v29 != v30);
                  v29 = *v5;
                }
                *((_QWORD *)this + 7) = v28;
                *((_QWORD *)this + 8) = v22;
                *((_QWORD *)this + 9) = &v27[8 * v26];
                if (v29)
                  operator delete(v29);
              }
              else
              {
                *v21 = v19;
                v22 = v21 + 1;
              }
              *((_QWORD *)this + 8) = v22;
              ++v18;
            }
            while (v18 < *(_DWORD *)v34);
          }
          return 0;
        }
      }
    }
    return 4294967246;
  }
  return 0;
}

void sub_188069948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10E1C4038959712);
  _Unwind_Resume(a1);
}

void HEIFGroupItem::~HEIFGroupItem(HEIFGroupItem *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)this = &off_1E1BACC48;
  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  v4 = (char *)this + 56;
  v2 = (_QWORD *)*((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v2[v5];
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v2 = (_QWORD *)*((_QWORD *)this + 7);
        v3 = (_QWORD *)*((_QWORD *)this + 8);
      }
      v5 = v6++;
    }
    while (v5 < v3 - v2);
  }
  *((_QWORD *)this + 8) = v2;
  if (v2)
    operator delete(v2);
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
}

{
  HEIFGroupItem::~HEIFGroupItem(this);
  JUMPOUT(0x18D761C30);
}

uint64_t HEIFGroupItem::getGroupPictureIndexListCount(HEIFGroupItem *this)
{
  return (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2;
}

uint64_t HEIFGroupItem::getDisparityAdjustment(HEIFGroupItem *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t HEIFGroupItem::hasDisparityAdjustment(HEIFGroupItem *this)
{
  return *((unsigned __int8 *)this + 20);
}

__CFString *HEIFGroupItem::getMonoscopicImageLocationString(HEIFGroupItem *this)
{
  unsigned int v1;
  __CFString **v2;

  v1 = *((_DWORD *)this + 6) - 1;
  if (v1 > 2)
    v2 = kIIOMonoscopicImageLocation_Unspecified;
  else
    v2 = off_1E1BCA700[v1];
  return *v2;
}

uint64_t HEIFGroupItem::getGroupPictureIndexAtIndex(HEIFGroupItem *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 4) + 4 * a2);
}

uint64_t HEIFGroupItem::getStereoAggressorCount(HEIFGroupItem *this)
{
  return (*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
}

uint64_t HEIFGroupItem::getStereoAggressorAtIndex(HEIFGroupItem *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 7) + 8 * a2);
}

uint64_t HEIFGroupItem::writeToStream(HEIFGroupItem *this, CFWriteStreamRef stream)
{
  unint64_t v4;
  uint64_t v5;
  UInt8 buffer[4];
  UInt8 v8[4];
  UInt8 v9[4];

  *(_DWORD *)buffer = 542134855;
  CFWriteStreamWrite(stream, buffer, 4);
  CFWriteStreamWrite(stream, (const UInt8 *)this + 8, 20);
  *(_DWORD *)v8 = (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2;
  CFWriteStreamWrite(stream, v8, 4);
  CFWriteStreamWrite(stream, *((const UInt8 **)this + 4), 4 * *(unsigned int *)v8);
  *(_DWORD *)v8 = (*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
  CFWriteStreamWrite(stream, v8, 4);
  if (*(_DWORD *)v8)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v4);
      *(_DWORD *)v9 = 1195463763;
      CFWriteStreamWrite(stream, v9, 4);
      CFWriteStreamWrite(stream, (const UInt8 *)(v5 + 8), 24);
      ++v4;
    }
    while (v4 < *(unsigned int *)v8);
  }
  return 0;
}

void HEIFThumbnailImage::HEIFThumbnailImage(HEIFThumbnailImage *this, const __CFDictionary *a2)
{
  const __CFDictionary *ObjectForKey;
  _QWORD v4[3];
  _QWORD v5[3];

  *(_QWORD *)this = &off_1E1BB14D0;
  memset(v5, 0, sizeof(v5));
  IIODictionary::IIODictionary((IIODictionary *)v5, a2);
  *((_DWORD *)this + 2) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v5, CFSTR("Width"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
  *((_DWORD *)this + 3) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v5, CFSTR("Height"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
  *((_DWORD *)this + 5) = IIODictionary::getUint32ForKey((IIODictionary *)v5, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataLength);
  *((_DWORD *)this + 6) = IIODictionary::getUint32ForKey((IIODictionary *)v5, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataOffset);
  *((_DWORD *)this + 4) = 8;
  if (IIODictionary::containsKey((IIODictionary *)v5, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth))
  {
    ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v5, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth);
    memset(v4, 0, sizeof(v4));
    IIOArray::IIOArray((IIOArray *)v4, ObjectForKey);
    if (IIOArray::getCount((IIOArray *)v4))
      *((_DWORD *)this + 4) = IIOArray::getUint32AtIndex((IIOArray *)v4, 0);
    IIOArray::~IIOArray((IIOArray *)v4);
  }
  IIODictionary::~IIODictionary((IIODictionary *)v5);
}

void sub_188069CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

void HEIFThumbnailImage::HEIFThumbnailImage(HEIFThumbnailImage *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BB14D0;
  v2 = HEIFThumbnailImage::readFromStream((UInt8 *)this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFThumbnailImage::readFromStream(UInt8 *this, CFReadStreamRef stream)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) == 4
    && (*(_DWORD *)buffer != 1297434708 || CFReadStreamRead(stream, this + 8, 20) == 20))
  {
    return 0;
  }
  else
  {
    return 4294967246;
  }
}

void HEIFThumbnailImage::~HEIFThumbnailImage(HEIFThumbnailImage *this)
{
  *(_QWORD *)this = &off_1E1BB14D0;
}

{
  *(_QWORD *)this = &off_1E1BB14D0;
  JUMPOUT(0x18D761C30);
}

uint64_t HEIFThumbnailImage::dataLength(HEIFThumbnailImage *this)
{
  return *((unsigned int *)this + 5);
}

void HEIFAuxImage::HEIFAuxImage(HEIFAuxImage *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1BAC1F0;
  v2 = HEIFAuxImage::readFromStream((UInt8 *)this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFAuxImage::readFromStream(UInt8 *this, CFReadStreamRef stream)
{
  UInt8 *v4;
  CFIndex v5;
  UInt8 v7[4];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4)
    return 4294967246;
  if (*(_DWORD *)buffer == 542659905)
  {
    if (CFReadStreamRead(stream, this + 8, 56) != 56)
      return 4294967246;
    *((_QWORD *)this + 7) = 0;
    *(_DWORD *)v7 = 0;
    if (CFReadStreamRead(stream, v7, 4) != 4)
      return 4294967246;
    if (*(_DWORD *)v7)
    {
      v4 = (UInt8 *)malloc_type_malloc(*(unsigned int *)v7, 0xB2F6074EuLL);
      v5 = CFReadStreamRead(stream, v4, *(unsigned int *)v7);
      if (v5 == *(unsigned int *)v7)
      {
        *((_QWORD *)this + 7) = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v5, 0x8000100u, 1u);
        free(v4);
        return 0;
      }
      free(v4);
      return 4294967246;
    }
  }
  return 0;
}

float HEIFAuxImage::meteorHeadroomFromMakerNote(HEIFAuxImage *this)
{
  return *((float *)this + 11);
}

float HEIFAuxImage::meteorHeadroomFromProperties(HEIFAuxImage *this)
{
  return *((float *)this + 12);
}

uint64_t HEIFAuxImage::payloadIndex(HEIFAuxImage *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t HEIFAuxImage::writeToStream(HEIFAuxImage *this, CFWriteStreamRef stream)
{
  const __CFString *v4;
  const char *CStringPtr;
  BOOL v6;
  UInt8 *v7;
  CFIndex v8;
  __CFWriteStream *v9;
  UInt8 *v10;
  UInt8 v12[4];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 542659905;
  CFWriteStreamWrite(stream, buffer, 4);
  CFWriteStreamWrite(stream, (const UInt8 *)this + 8, 56);
  *(_DWORD *)v12 = 0;
  v4 = (const __CFString *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v10 = v12;
    v9 = stream;
    v8 = 4;
    goto LABEL_8;
  }
  *(_DWORD *)v12 = CFStringGetLength(v4);
  CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)this + 7), 0x8000100u);
  if (CStringPtr)
    v6 = *(_DWORD *)v12 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = (UInt8 *)CStringPtr;
    CFWriteStreamWrite(stream, v12, 4);
    v8 = *(unsigned int *)v12;
    v9 = stream;
    v10 = v7;
LABEL_8:
    CFWriteStreamWrite(v9, v10, v8);
  }
  return 0;
}

void HEIFAlternateImage::HEIFAlternateImage(HEIFAlternateImage *this, const __CFDictionary *a2, const __CFDictionary *a3)
{
  _DWORD *v4;
  unsigned int Uint32ForKey;
  unsigned int v6;
  CGColorSpace *ObjectForKey;
  const __CFDictionary *v8;
  float DoubleFromRationalForKey;
  float v10;
  const __CFDictionary *v11;
  unsigned int Count;
  unint64_t v13;
  double *v14;
  const __CFDictionary *ObjectAtIndex;
  const __CFDictionary *v17;
  _QWORD v18[3];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  *(_QWORD *)this = &off_1E1B817C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (_DWORD *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  memset(v23, 0, sizeof(v23));
  IIODictionary::IIODictionary((IIODictionary *)v23, a2);
  *v4 = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_CodecType);
  *((_DWORD *)this + 11) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionOption_AlternateIndex);
  *((_DWORD *)this + 12) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_AuxiliaryImageCount);
  Uint32ForKey = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ItemType);
  *((_DWORD *)this + 3) = Uint32ForKey;
  if (!Uint32ForKey)
  {
    Uint32ForKey = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_CodecType);
    *((_DWORD *)this + 3) = Uint32ForKey;
  }
  if (Uint32ForKey == 1953325424)
  {
    if (gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapPixelFormat)
      *((_DWORD *)this + 4) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapPixelFormat);
    if (gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapDimension)
    {
      *((_DWORD *)this + 5) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v23, CFSTR("Width"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapDimension);
      *((_DWORD *)this + 6) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v23, CFSTR("Height"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapDimension);
    }
    if (gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapOrientation)
    {
      v6 = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationGainMapOrientation);
      *((_DWORD *)this + 7) = v6;
      if (v6)
        goto LABEL_13;
    }
    else if (*((_DWORD *)this + 7))
    {
      goto LABEL_13;
    }
    *((_DWORD *)this + 7) = IIODictionary::getUint32ForKey((IIODictionary *)v23, CFSTR("Orientation"));
LABEL_13:
    ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerConstituent_FlexRangeColorSpace);
    *((_QWORD *)this + 24) = CGColorSpaceRetain(ObjectForKey);
    *((_DWORD *)this + 9) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataLength);
    *((_DWORD *)this + 10) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataOffset);
    *((_DWORD *)this + 13) = IIODictionary::getUint32ForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ThumbnailImageCount);
    if (IIODictionary::containsKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationDetails))
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v8 = IIODictionary::getObjectForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DerivationDetails);
      IIODictionary::IIODictionary((IIODictionary *)&v20, v8);
      if (gIIO_kCMPhotoMetadata_TonemapAlternateHDRHeadroom)
      {
        DoubleFromRationalForKey = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)&v20, *(const __CFString **)gIIO_kCMPhotoMetadata_TonemapAlternateHDRHeadroom);
        *((float *)this + 14) = DoubleFromRationalForKey;
      }
      if (gIIO_kCMPhotoMetadata_TonemapBaseHDRHeadroom)
      {
        v10 = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)&v20, *(const __CFString **)gIIO_kCMPhotoMetadata_TonemapBaseHDRHeadroom);
        *((float *)this + 15) = v10;
      }
      if (gIIO_kCMPhotoMetadata_TonemapBaseColorIsWorkingColor)
        *((_BYTE *)this + 64) = IIODictionary::getBoolForKey((IIODictionary *)&v20, *(const __CFString **)gIIO_kCMPhotoMetadata_TonemapBaseColorIsWorkingColor);
      v11 = IIODictionary::getObjectForKey((IIODictionary *)&v20, CFSTR("TonemapChannelMetadata"));
      memset(v19, 0, sizeof(v19));
      IIOArray::IIOArray((IIOArray *)v19, v11);
      Count = IIOArray::getCount((IIOArray *)v19);
      v13 = 0;
      *((_BYTE *)this + 65) = Count == 3;
      v14 = (double *)((char *)this + 104);
      do
      {
        ObjectAtIndex = IIOArray::getObjectAtIndex((IIOArray *)v19, v13);
        memset(v18, 0, sizeof(v18));
        IIODictionary::IIODictionary((IIODictionary *)v18, ObjectAtIndex);
        if (gIIO_kCMPhotoMetadataTonemapChannel_AlternateOffset)
          *v14 = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoMetadataTonemapChannel_AlternateOffset);
        if (gIIO_kCMPhotoMetadataTonemapChannel_BaseOffset)
          *(v14 - 1) = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoMetadataTonemapChannel_BaseOffset);
        if (gIIO_kCMPhotoMetadataTonemapChannel_GainMapMin)
          *(v14 - 4) = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoMetadataTonemapChannel_GainMapMin);
        if (gIIO_kCMPhotoMetadataTonemapChannel_GainMapMax)
          *(v14 - 3) = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoMetadataTonemapChannel_GainMapMax);
        if (gIIO_kCMPhotoMetadataTonemapChannel_Gamma)
          *(v14 - 2) = IIODictionary::getDoubleFromRationalForKey((IIODictionary *)v18, *(const __CFString **)gIIO_kCMPhotoMetadataTonemapChannel_Gamma);
        IIODictionary::~IIODictionary((IIODictionary *)v18);
        if (Count != 3)
          break;
        v14 += 5;
      }
      while (v13++ < 2);
      IIOArray::~IIOArray((IIOArray *)v19);
      IIODictionary::~IIODictionary((IIODictionary *)&v20);
    }
  }
  *((_DWORD *)this + 8) = 8;
  if (IIODictionary::containsKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth))
  {
    v17 = IIODictionary::getObjectForKey((IIODictionary *)v23, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth);
    v20 = 0;
    v21 = 0;
    v22 = 0;
    IIOArray::IIOArray((IIOArray *)&v20, v17);
    if (IIOArray::getCount((IIOArray *)&v20))
      *((_DWORD *)this + 8) = IIOArray::getUint32AtIndex((IIOArray *)&v20, 0);
    IIOArray::~IIOArray((IIOArray *)&v20);
  }
  IIODictionary::~IIODictionary((IIODictionary *)v23);
}

void sub_18806A510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  IIOArray::~IIOArray((IIOArray *)va);
  IIODictionary::~IIODictionary((IIODictionary *)va1);
  IIODictionary::~IIODictionary((IIODictionary *)va2);
  _Unwind_Resume(a1);
}

void HEIFAlternateImage::HEIFAlternateImage(HEIFAlternateImage *this, __CFReadStream *a2)
{
  int v2;
  int v3;
  _DWORD *exception;

  *(_QWORD *)this = &off_1E1B817C0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  v2 = HEIFAlternateImage::readFromStream(this, a2);
  if (v2)
  {
    v3 = v2;
    exception = __cxa_allocate_exception(4uLL);
    *exception = v3;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

uint64_t HEIFAlternateImage::readFromStream(HEIFAlternateImage *this, CFReadStreamRef stream)
{
  CGColorSpaceRef v4;
  uint64_t result;
  UInt8 buffer[4];

  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4)
    return 4294967246;
  if (*(_DWORD *)buffer == 1480936518)
  {
    if (CFReadStreamRead(stream, (UInt8 *)this + 8, 192) == 192)
    {
      v4 = IIO_ColorSpaceCreateFromStream(stream);
      result = 0;
      *((_QWORD *)this + 24) = v4;
      return result;
    }
    return 4294967246;
  }
  return 0;
}

void HEIFAlternateImage::~HEIFAlternateImage(HEIFAlternateImage *this)
{
  CGColorSpace *v2;

  *(_QWORD *)this = &off_1E1B817C0;
  v2 = (CGColorSpace *)*((_QWORD *)this + 24);
  if (v2)
    CGColorSpaceRelease(v2);
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
}

{
  HEIFAlternateImage::~HEIFAlternateImage(this);
  JUMPOUT(0x18D761C30);
}

uint64_t HEIFAlternateImage::writeToStream(HEIFAlternateImage *this, CFWriteStreamRef stream)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 1480936518;
  CFWriteStreamWrite(stream, buffer, 4);
  CFWriteStreamWrite(stream, (const UInt8 *)this + 8, 192);
  return IIO_ColorSpaceAddToStream(*((CGColorSpace **)this + 24), stream);
}

void HEIFAlternateImage::addInfoToProperties(HEIFAlternateImage *this, IIODictionary *a2)
{
  const void **v4;
  unint64_t v5;
  double *v6;
  int v7;
  _BYTE v9[16];
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  void *v15;
  void *value;

  IIONumber::IIONumber((IIONumber *)&v14, *((float *)this + 14));
  IIODictionary::setObjectForKey(a2, value, CFSTR("TonemapAlternateHDRHeadroom"));
  IIONumber::~IIONumber((IIONumber *)&v14);
  IIONumber::IIONumber((IIONumber *)&v14, *((float *)this + 15));
  IIODictionary::setObjectForKey(a2, value, CFSTR("TonemapBaseHDRHeadroom"));
  IIONumber::~IIONumber((IIONumber *)&v14);
  v4 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*((_BYTE *)this + 64))
    v4 = (const void **)MEMORY[0x1E0C9AE40];
  IIODictionary::setObjectForKey(a2, *v4, CFSTR("TonemapBaseColorIsWorkingColor"));
  v14 = 0;
  v15 = 0;
  value = 0;
  IIOArray::IIOArray((IIOArray *)&v14);
  IIODictionary::setObjectForKey(a2, v15, CFSTR("TonemapChannelMetadata"));
  v5 = 0;
  v6 = (double *)((char *)this + 104);
  v7 = *((unsigned __int8 *)this + 65);
  do
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    IIODictionary::IIODictionary((IIODictionary *)&v11);
    IIONumber::IIONumber((IIONumber *)v9, *(v6 - 4));
    IIODictionary::setObjectForKey((IIODictionary *)&v11, v10, CFSTR("GainMapMin"));
    IIONumber::~IIONumber((IIONumber *)v9);
    IIONumber::IIONumber((IIONumber *)v9, *(v6 - 3));
    IIODictionary::setObjectForKey((IIODictionary *)&v11, v10, CFSTR("GainMapMax"));
    IIONumber::~IIONumber((IIONumber *)v9);
    IIONumber::IIONumber((IIONumber *)v9, *(v6 - 2));
    IIODictionary::setObjectForKey((IIODictionary *)&v11, v10, CFSTR("Gamma"));
    IIONumber::~IIONumber((IIONumber *)v9);
    IIONumber::IIONumber((IIONumber *)v9, *(v6 - 1));
    IIODictionary::setObjectForKey((IIODictionary *)&v11, v10, CFSTR("BaseOffset"));
    IIONumber::~IIONumber((IIONumber *)v9);
    IIONumber::IIONumber((IIONumber *)v9, *v6);
    IIODictionary::setObjectForKey((IIODictionary *)&v11, v10, CFSTR("AlternateOffset"));
    IIONumber::~IIONumber((IIONumber *)v9);
    IIOArray::addObject(&v14, v12);
    IIODictionary::~IIODictionary((IIODictionary *)&v11);
    if (!v7)
      break;
    v6 += 5;
  }
  while (v5++ < 2);
  IIOArray::~IIOArray((IIOArray *)&v14);
}

void sub_18806A9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  IIOArray::~IIOArray((IIOArray *)va);
  _Unwind_Resume(a1);
}

void HEIFAlternateImage::addAsAuxImageToProperties(HEIFAlternateImage *this, IIODictionary *a2)
{
  _BYTE v4[16];
  void *value;

  IIODictionary::setObjectForKey(a2, CFSTR("kCGImageAuxiliaryDataTypeISOGainMap"), CFSTR("AuxiliaryDataType"));
  IIONumber::IIONumber((IIONumber *)v4, 1953325424);
  IIODictionary::setObjectForKey(a2, value, CFSTR("PixelFormat"));
  IIONumber::~IIONumber((IIONumber *)v4);
  IIONumber::IIONumber((IIONumber *)v4, *((_DWORD *)this + 5));
  IIODictionary::setObjectForKey(a2, value, CFSTR("Width"));
  IIONumber::~IIONumber((IIONumber *)v4);
  IIONumber::IIONumber((IIONumber *)v4, *((_DWORD *)this + 6));
  IIODictionary::setObjectForKey(a2, value, CFSTR("Height"));
  IIONumber::~IIONumber((IIONumber *)v4);
  IIONumber::IIONumber((IIONumber *)v4, *((_DWORD *)this + 7));
  IIODictionary::setObjectForKey(a2, value, CFSTR("Orientation"));
  IIONumber::~IIONumber((IIONumber *)v4);
  IIONumber::IIONumber((IIONumber *)v4, *((_DWORD *)this + 4));
  IIODictionary::setObjectForKey(a2, value, CFSTR("PixelFormat"));
  IIONumber::~IIONumber((IIONumber *)v4);
}

void sub_18806AB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIONumber::~IIONumber((IIONumber *)va);
  _Unwind_Resume(a1);
}

uint64_t HEIFMainImage::HEIFMainImage(uint64_t a1, uint64_t a2, int a3, __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6, int a7)
{
  char **v11;
  IIODictionary *v12;
  unsigned int *v13;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *ObjectForKey;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CFTypeRef v18;
  const __CFDictionary *v19;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *v23;
  HEIFThumbnailImage *v24;
  unint64_t v25;
  HEIFThumbnailImage **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  HEIFThumbnailImage **v33;
  char *v34;
  char *v35;
  HEIFThumbnailImage *v36;
  const __CFDictionary *v37;
  const __CFArray *v38;
  CFIndex v39;
  CFIndex j;
  const __CFDictionary *v41;
  HEIFAuxImage *v42;
  unint64_t v43;
  HEIFAuxImage **v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  HEIFAuxImage **v51;
  char *v52;
  char *v53;
  HEIFAuxImage *v54;
  const __CFDictionary *v55;
  const __CFArray *v56;
  CFIndex v57;
  CFIndex k;
  const __CFDictionary *v59;
  HEIFAuxImage *v60;
  unint64_t v61;
  HEIFAuxImage **v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  HEIFAuxImage **v69;
  char *v70;
  char *v71;
  HEIFAuxImage *v72;
  const __CFDictionary *v73;
  const __CFArray *v74;
  CFIndex v75;
  CFIndex m;
  const __CFDictionary *v77;
  unsigned int Uint32ForKey;
  HEIFAlternateImage *v79;
  const __CFDictionary *v80;
  unint64_t v81;
  HEIFAlternateImage **v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  HEIFAlternateImage **v89;
  char *v90;
  char *v91;
  HEIFAlternateImage *v92;
  BOOL v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  HEIFItem *v110;
  unint64_t v111;
  HEIFItem **v112;
  _QWORD *v113;
  CGColorSpace *v114;
  CGColorSpace *v115;
  CFStringRef v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  HEIFItem **v122;
  char *v123;
  char *v124;
  char *v125;
  HEIFItem *v126;
  BOOL v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char **v145;
  char **v148;
  char **v149;
  char **v150;
  char **v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  void *value;
  _QWORD v157[3];

  *(_QWORD *)a1 = &off_1E1BACC68;
  *(_OWORD *)(a1 + 8) = 0u;
  v149 = (char **)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v148 = (char **)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v11 = (char **)(a1 + 104);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v150 = (char **)(a1 + 32);
  v151 = (char **)(a1 + 80);
  v145 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 136) = 0u;
  memset(v157, 0, sizeof(v157));
  v12 = IIODictionary::IIODictionary((IIODictionary *)v157, a4);
  *(_OWORD *)(a1 + 160) = 0u;
  v13 = (unsigned int *)(a1 + 160);
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 160) = a3;
  *(_DWORD *)(a1 + 172) = 8;
  if (a6)
  {
    value = 0;
    CFDictionaryGetValueIfPresent(a6, *(const void **)gIIO_kCMPhotoDecompressionContainerDescription_MainImages, (const void **)&value);
    if (value && CFArrayGetCount((CFArrayRef)value))
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)value, 0);
      v154 = 0uLL;
      v155 = 0;
      IIODictionary::IIODictionary((IIODictionary *)&v154, ValueAtIndex);
      *(_DWORD *)(a1 + 164) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)&v154, CFSTR("Width"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
      *(_DWORD *)(a1 + 168) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)&v154, CFSTR("Height"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
      IIODictionary::~IIODictionary((IIODictionary *)&v154);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 164) = IIODictionary::getUint32ForKeyGroup(v12, CFSTR("Width"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
    *(_DWORD *)(a1 + 168) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v157, CFSTR("Height"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_Dimensions);
    if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth))
    {
      ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_BitDepth);
      v154 = 0uLL;
      v155 = 0;
      IIOArray::IIOArray((IIOArray *)&v154, ObjectForKey);
      if (IIOArray::getCount((IIOArray *)&v154))
        *(_DWORD *)(a1 + 172) = IIOArray::getUint32AtIndex((IIOArray *)&v154, 0);
      IIOArray::~IIOArray((IIOArray *)&v154);
    }
  }
  *(_DWORD *)(a1 + 200) = IIODictionary::getUint32ForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ItemID);
  *(_DWORD *)(a1 + 180) = IIODictionary::getUint32ForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataLength);
  *(_DWORD *)(a1 + 184) = IIODictionary::getUint32ForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_DataOffset);
  *(_DWORD *)(a1 + 196) = a7;
  if ((a7 & 0x80000000) == 0)
  {
    *(_BYTE *)(a1 + 280) = IIODictionary::getBoolForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_SequenceSampleDependsOnOthers);
    v16 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_SequenceSampleDuration);
    v154 = 0uLL;
    v155 = 0;
    gFunc_CMTimeMakeFromDictionary(&v154, v16);
    v152 = v154;
    v153 = v155;
    *(double *)(a1 + 272) = gFunc_CMTimeGetSeconds(&v152);
  }
  *(_QWORD *)(a1 + 296) = 0;
  v17 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_NamedColorSpace);
  *(_QWORD *)(a1 + 288) = v17;
  if (v17)
  {
    v18 = CFRetain(v17);
LABEL_13:
    *(_QWORD *)(a1 + 288) = v18;
    goto LABEL_14;
  }
  v114 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ColorSpace);
  v115 = v114;
  if (!v114)
  {
    v18 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9DA10]);
    goto LABEL_13;
  }
  v116 = CGColorSpaceCopyName(v114);
  *(_QWORD *)(a1 + 288) = v116;
  if (!v116)
    *(_QWORD *)(a1 + 296) = CGColorSpaceRetain(v115);
LABEL_14:
  *(_DWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_TileDimensions))
  {
    *(_DWORD *)(a1 + 188) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v157, CFSTR("Width"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_TileDimensions);
    *(_DWORD *)(a1 + 192) = IIODictionary::getUint32ForKeyGroup((IIODictionary *)v157, CFSTR("Height"), *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_TileDimensions);
  }
  if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ThumbnailImages))
  {
    v19 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ThumbnailImages);
    v20 = v19;
    if (v19)
    {
      Count = CFArrayGetCount(v19);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v20, i);
          if (v23)
          {
            v24 = (HEIFThumbnailImage *)operator new();
            HEIFThumbnailImage::HEIFThumbnailImage(v24, v23);
            v26 = *(HEIFThumbnailImage ***)(a1 + 16);
            v25 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v26 >= v25)
            {
              v28 = ((char *)v26 - *v149) >> 3;
              if ((unint64_t)(v28 + 1) >> 61)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v29 = v25 - (_QWORD)*v149;
              v30 = v29 >> 2;
              if (v29 >> 2 <= (unint64_t)(v28 + 1))
                v30 = v28 + 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              if (v31)
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 24, v31);
              else
                v32 = 0;
              v33 = (HEIFThumbnailImage **)&v32[8 * v28];
              *v33 = v24;
              v27 = v33 + 1;
              v35 = *(char **)(a1 + 8);
              v34 = *(char **)(a1 + 16);
              if (v34 != v35)
              {
                do
                {
                  v36 = (HEIFThumbnailImage *)*((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v33 = v36;
                }
                while (v34 != v35);
                v34 = *v149;
              }
              *(_QWORD *)(a1 + 8) = v33;
              *(_QWORD *)(a1 + 16) = v27;
              *(_QWORD *)(a1 + 24) = &v32[8 * v31];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v26 = v24;
              v27 = v26 + 1;
            }
            *(_QWORD *)(a1 + 16) = v27;
          }
        }
      }
    }
  }
  if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_AuxiliaryImages))
  {
    v37 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_AuxiliaryImages);
    v38 = v37;
    if (v37)
    {
      v39 = CFArrayGetCount(v37);
      if (v39 >= 1)
      {
        for (j = 0; j != v39; ++j)
        {
          v41 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, j);
          if (v41)
          {
            v42 = (HEIFAuxImage *)operator new();
            HEIFAuxImage::HEIFAuxImage(v42, v41, a6, j);
            v44 = *(HEIFAuxImage ***)(a1 + 40);
            v43 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              v46 = ((char *)v44 - *v150) >> 3;
              if ((unint64_t)(v46 + 1) >> 61)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v47 = v43 - (_QWORD)*v150;
              v48 = v47 >> 2;
              if (v47 >> 2 <= (unint64_t)(v46 + 1))
                v48 = v46 + 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v48;
              if (v49)
                v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 48, v49);
              else
                v50 = 0;
              v51 = (HEIFAuxImage **)&v50[8 * v46];
              *v51 = v42;
              v45 = v51 + 1;
              v53 = *(char **)(a1 + 32);
              v52 = *(char **)(a1 + 40);
              if (v52 != v53)
              {
                do
                {
                  v54 = (HEIFAuxImage *)*((_QWORD *)v52 - 1);
                  v52 -= 8;
                  *--v51 = v54;
                }
                while (v52 != v53);
                v52 = *v150;
              }
              *(_QWORD *)(a1 + 32) = v51;
              *(_QWORD *)(a1 + 40) = v45;
              *(_QWORD *)(a1 + 48) = &v50[8 * v49];
              if (v52)
                operator delete(v52);
            }
            else
            {
              *v44 = v42;
              v45 = v44 + 1;
            }
            *(_QWORD *)(a1 + 40) = v45;
          }
        }
      }
    }
  }
  if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_CustomMetadataPayloads))
  {
    v55 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_CustomMetadataPayloads);
    v56 = v55;
    if (v55)
    {
      v57 = CFArrayGetCount(v55);
      if (v57 >= 1)
      {
        for (k = 0; k != v57; ++k)
        {
          v59 = (const __CFDictionary *)CFArrayGetValueAtIndex(v56, k);
          if (v59)
          {
            v60 = (HEIFAuxImage *)operator new();
            HEIFAuxImage::HEIFAuxImage(v60, v59, a6, k);
            v62 = *(HEIFAuxImage ***)(a1 + 40);
            v61 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v62 >= v61)
            {
              v64 = ((char *)v62 - *v150) >> 3;
              if ((unint64_t)(v64 + 1) >> 61)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v65 = v61 - (_QWORD)*v150;
              v66 = v65 >> 2;
              if (v65 >> 2 <= (unint64_t)(v64 + 1))
                v66 = v64 + 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
                v67 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v67 = v66;
              if (v67)
                v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 48, v67);
              else
                v68 = 0;
              v69 = (HEIFAuxImage **)&v68[8 * v64];
              *v69 = v60;
              v63 = v69 + 1;
              v71 = *(char **)(a1 + 32);
              v70 = *(char **)(a1 + 40);
              if (v70 != v71)
              {
                do
                {
                  v72 = (HEIFAuxImage *)*((_QWORD *)v70 - 1);
                  v70 -= 8;
                  *--v69 = v72;
                }
                while (v70 != v71);
                v70 = *v150;
              }
              *(_QWORD *)(a1 + 32) = v69;
              *(_QWORD *)(a1 + 40) = v63;
              *(_QWORD *)(a1 + 48) = &v68[8 * v67];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *v62 = v60;
              v63 = v62 + 1;
            }
            *(_QWORD *)(a1 + 40) = v63;
          }
        }
      }
    }
  }
  if (IIODictionary::containsKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_AlternateImages))
  {
    v73 = IIODictionary::getObjectForKey((IIODictionary *)v157, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_AlternateImages);
    v74 = v73;
    if (v73)
    {
      v75 = CFArrayGetCount(v73);
      if (v75 >= 1)
      {
        for (m = 0; m != v75; ++m)
        {
          v77 = (const __CFDictionary *)CFArrayGetValueAtIndex(v74, m);
          v154 = 0uLL;
          v155 = 0;
          IIODictionary::IIODictionary((IIODictionary *)&v154, v77);
          Uint32ForKey = IIODictionary::getUint32ForKey((IIODictionary *)&v154, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_ItemType);
          if (!Uint32ForKey)
            Uint32ForKey = IIODictionary::getUint32ForKey((IIODictionary *)&v154, *(const __CFString **)gIIO_kCMPhotoDecompressionContainerDescription_CodecType);
          if (Uint32ForKey == 1953325424)
          {
            v79 = (HEIFAlternateImage *)operator new();
            HEIFAlternateImage::HEIFAlternateImage(v79, v77, v80);
            v82 = *(HEIFAlternateImage ***)(a1 + 64);
            v81 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v82 >= v81)
            {
              v84 = ((char *)v82 - *v148) >> 3;
              if ((unint64_t)(v84 + 1) >> 61)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v85 = v81 - (_QWORD)*v148;
              v86 = v85 >> 2;
              if (v85 >> 2 <= (unint64_t)(v84 + 1))
                v86 = v84 + 1;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v86;
              if (v87)
                v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 72, v87);
              else
                v88 = 0;
              v89 = (HEIFAlternateImage **)&v88[8 * v84];
              *v89 = v79;
              v83 = v89 + 1;
              v91 = *(char **)(a1 + 56);
              v90 = *(char **)(a1 + 64);
              if (v90 != v91)
              {
                do
                {
                  v92 = (HEIFAlternateImage *)*((_QWORD *)v90 - 1);
                  v90 -= 8;
                  *--v89 = v92;
                }
                while (v90 != v91);
                v90 = *v148;
              }
              *(_QWORD *)(a1 + 56) = v89;
              *(_QWORD *)(a1 + 64) = v83;
              *(_QWORD *)(a1 + 72) = &v88[8 * v87];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *v82 = v79;
              v83 = v82 + 1;
            }
            *(_QWORD *)(a1 + 64) = v83;
          }
          IIODictionary::~IIODictionary((IIODictionary *)&v154);
        }
      }
    }
  }
  *(_QWORD *)&v154 = 0;
  if (gFunc_CMPhotoDecompressionContainerGetExifCountForIndexWithOptions(a2, *v13, 0, &v154))
    v93 = 1;
  else
    v93 = (uint64_t)v154 < 1;
  if (!v93)
  {
    v94 = 0;
    do
    {
      v95 = (_QWORD *)operator new();
      v96 = v95;
      v97 = *(unsigned int *)(a1 + 160);
      *v95 = &off_1E1BB2B00;
      v95[1] = v97;
      v95[2] = v94;
      v99 = *(_QWORD **)(a1 + 88);
      v98 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v99 >= v98)
      {
        v101 = ((char *)v99 - *v151) >> 3;
        if ((unint64_t)(v101 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v102 = v98 - (_QWORD)*v151;
        v103 = v102 >> 2;
        if (v102 >> 2 <= (unint64_t)(v101 + 1))
          v103 = v101 + 1;
        if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
          v104 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v104 = v103;
        if (v104)
          v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 96, v104);
        else
          v105 = 0;
        v106 = &v105[8 * v101];
        *(_QWORD *)v106 = v96;
        v100 = v106 + 8;
        v108 = *(char **)(a1 + 80);
        v107 = *(char **)(a1 + 88);
        if (v107 != v108)
        {
          do
          {
            v109 = *((_QWORD *)v107 - 1);
            v107 -= 8;
            *((_QWORD *)v106 - 1) = v109;
            v106 -= 8;
          }
          while (v107 != v108);
          v107 = *v151;
        }
        *(_QWORD *)(a1 + 80) = v106;
        *(_QWORD *)(a1 + 88) = v100;
        *(_QWORD *)(a1 + 96) = &v105[8 * v104];
        if (v107)
          operator delete(v107);
      }
      else
      {
        *v99 = v95;
        v100 = v99 + 1;
      }
      *(_QWORD *)(a1 + 88) = v100;
      ++v94;
    }
    while (v94 < (uint64_t)v154);
  }
  if (a5)
  {
    v110 = (HEIFItem *)operator new();
    HEIFItem::HEIFItem(v110, a5);
    v111 = *(_QWORD *)(a1 + 144);
    v112 = *(HEIFItem ***)(a1 + 136);
    if ((unint64_t)v112 >= v111)
    {
      v117 = ((char *)v112 - *v145) >> 3;
      if ((unint64_t)(v117 + 1) >> 61)
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v118 = v111 - (_QWORD)*v145;
      v119 = v118 >> 2;
      if (v118 >> 2 <= (unint64_t)(v117 + 1))
        v119 = v117 + 1;
      if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
        v120 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v120 = v119;
      if (v120)
        v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 144, v120);
      else
        v121 = 0;
      v122 = (HEIFItem **)&v121[8 * v117];
      v123 = &v121[8 * v120];
      *v122 = v110;
      v113 = v122 + 1;
      v125 = *(char **)(a1 + 128);
      v124 = *(char **)(a1 + 136);
      if (v124 != v125)
      {
        do
        {
          v126 = (HEIFItem *)*((_QWORD *)v124 - 1);
          v124 -= 8;
          *--v122 = v126;
        }
        while (v124 != v125);
        v124 = *v145;
      }
      *(_QWORD *)(a1 + 128) = v122;
      *(_QWORD *)(a1 + 136) = v113;
      *(_QWORD *)(a1 + 144) = v123;
      if (v124)
        operator delete(v124);
    }
    else
    {
      *v112 = v110;
      v113 = v112 + 1;
    }
    *(_QWORD *)(a1 + 136) = v113;
  }
  value = 0;
  if (gFunc_CMPhotoDecompressionContainerGetXMPCountForIndexWithOptions(a2, *v13, 0, &value))
    v127 = 1;
  else
    v127 = (uint64_t)value < 1;
  if (!v127)
  {
    v128 = 0;
    do
    {
      v129 = (_QWORD *)operator new();
      v130 = v129;
      v131 = *(unsigned int *)(a1 + 160);
      *v129 = &off_1E1BB29A0;
      v129[1] = v131;
      v129[2] = v128;
      v133 = *(_QWORD **)(a1 + 112);
      v132 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v133 >= v132)
      {
        v135 = ((char *)v133 - *v11) >> 3;
        if ((unint64_t)(v135 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v136 = v132 - (_QWORD)*v11;
        v137 = v136 >> 2;
        if (v136 >> 2 <= (unint64_t)(v135 + 1))
          v137 = v135 + 1;
        if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
          v138 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v138 = v137;
        if (v138)
          v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 120, v138);
        else
          v139 = 0;
        v140 = &v139[8 * v135];
        *(_QWORD *)v140 = v130;
        v134 = v140 + 8;
        v142 = *(char **)(a1 + 104);
        v141 = *(char **)(a1 + 112);
        if (v141 != v142)
        {
          do
          {
            v143 = *((_QWORD *)v141 - 1);
            v141 -= 8;
            *((_QWORD *)v140 - 1) = v143;
            v140 -= 8;
          }
          while (v141 != v142);
          v141 = *v11;
        }
        *(_QWORD *)(a1 + 104) = v140;
        *(_QWORD *)(a1 + 112) = v134;
        *(_QWORD *)(a1 + 120) = &v139[8 * v138];
        if (v141)
          operator delete(v141);
      }
      else
      {
        *v133 = v129;
        v134 = v133 + 1;
      }
      *(_QWORD *)(a1 + 112) = v134;
      ++v128;
    }
    while (v128 < (uint64_t)value);
  }
  HEIFMainImage::extractISO5Metadata((HEIFMainImage *)a1, (IIODictionary *)v157);
  IIODictionary::~IIODictionary((IIODictionary *)v157);
  return a1;
}

void sub_18806B870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16)
{
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  IIODictionary::~IIODictionary((IIODictionary *)(v18 - 104));
  v20 = *a10;
  if (*a10)
  {
    v16[17] = v20;
    operator delete(v20);
  }
  v21 = *v17;
  if (*v17)
  {
    v16[14] = v21;
    operator delete(v21);
  }
  v22 = *a16;
  if (*a16)
  {
    v16[11] = v22;
    operator delete(v22);
  }
  v23 = *a13;
  if (*a13)
  {
    v16[8] = v23;
    operator delete(v23);
  }
  v24 = *a15;
  if (*a15)
  {
    v16[5] = v24;
    operator delete(v24);
  }
  v25 = *a14;
  if (*a14)
  {
    v16[2] = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

void HEIFMainImage::extractISO5Metadata(HEIFMainImage *this, IIODictionary *a2)
{
  const __CFDictionary *ObjectForKey;
  const __CFDictionary *v5;
  float v6;
  const __CFDictionary *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  ObjectForKey = IIODictionary::getObjectForKey(a2, CFSTR("AmbientViewingEnvironment"));
  if (ObjectForKey)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    IIODictionary::IIODictionary((IIODictionary *)&v11, ObjectForKey);
    *((float *)this + 51) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("AmbientIlluminance"))/ 10000.0;
    *((float *)this + 52) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("AmbientLightX"))/ 50000.0;
    *((float *)this + 53) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("AmbientLightY"))/ 50000.0;
    IIODictionary::~IIODictionary((IIODictionary *)&v11);
  }
  v5 = IIODictionary::getObjectForKey(a2, CFSTR("ContentLightLevelInfo"));
  if (!v5)
  {
    IIODictionary::getObjectForKey(a2, CFSTR("MasteringDisplayColorVolume"));
    v10 = 0.0;
LABEL_12:
    *((float *)this + 66) = v10;
    return;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  IIODictionary::IIODictionary((IIODictionary *)&v11, v5);
  *((float *)this + 54) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("MaxContentLightLevel"));
  *((float *)this + 55) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("MaxPicAverageLightLevel"));
  v6 = *((float *)this + 54);
  IIODictionary::~IIODictionary((IIODictionary *)&v11);
  v7 = IIODictionary::getObjectForKey(a2, CFSTR("MasteringDisplayColorVolume"));
  v11 = 0;
  v12 = 0;
  v13 = 0;
  IIODictionary::IIODictionary((IIODictionary *)&v11, v7);
  *((float *)this + 56) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesXB"))/ 50000.0;
  *((float *)this + 57) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesXG"))/ 50000.0;
  *((float *)this + 58) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesXR"))/ 50000.0;
  *((float *)this + 59) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesYB"))/ 50000.0;
  *((float *)this + 60) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesYG"))/ 50000.0;
  *((float *)this + 61) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("DisplayPrimariesYR"))/ 50000.0;
  *((float *)this + 62) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("MaxDisplayMasteringLuminance"))/ 10000.0;
  *((float *)this + 63) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("MinDisplayMasteringLuminance"))/ 10000.0;
  *((float *)this + 64) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("WhitePointX"))/ 50000.0;
  *((float *)this + 65) = (float)IIODictionary::getUint32ForKey((IIODictionary *)&v11, CFSTR("WhitePointY"))/ 50000.0;
  v8 = *((float *)this + 62);
  IIODictionary::~IIODictionary((IIODictionary *)&v11);
  if (v8 >= v6)
    v9 = v6;
  else
    v9 = v8;
  if (v9 > 0.0)
  {
    v10 = v9 / 203.0;
    if (v10 < 1.0)
      v10 = 1.0;
    goto LABEL_12;
  }
}

void sub_18806BCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

void HEIFMainImage::HEIFMainImage(HEIFMainImage *this, __CFReadStream *a2)
{
  int v2;
  _DWORD *exception;

  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E1BACC68;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  v2 = HEIFMainImage::readFromStream(this, a2);
  if (v2)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = v2;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
}

void sub_18806BDB4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = (void *)v1[16];
  if (v4)
  {
    v1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[13];
  if (v5)
  {
    v1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[10];
  if (v6)
  {
    v1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[7];
  if (v7)
  {
    v1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)v1[4];
  if (v8)
  {
    v1[5] = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    v1[2] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HEIFMainImage::readFromStream(HEIFMainImage *this, CFReadStreamRef stream)
{
  char **v5;
  uint64_t v6;
  HEIFThumbnailImage *v7;
  unint64_t v8;
  HEIFThumbnailImage **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  HEIFThumbnailImage **v16;
  char *v17;
  char *v18;
  HEIFThumbnailImage *v19;
  char **v20;
  uint64_t v21;
  HEIFAuxImage *v22;
  unint64_t v23;
  HEIFAuxImage **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  HEIFAuxImage **v31;
  char *v32;
  char *v33;
  HEIFAuxImage *v34;
  char **v35;
  uint64_t v36;
  HEIFAlternateImage *v37;
  unint64_t v38;
  HEIFAlternateImage **v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  HEIFAlternateImage **v46;
  char *v47;
  char *v48;
  HEIFAlternateImage *v49;
  char **v50;
  uint64_t v51;
  HEIFExif *v52;
  unint64_t v53;
  HEIFExif **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  HEIFExif **v61;
  char *v62;
  char *v63;
  HEIFExif *v64;
  char **v65;
  uint64_t v66;
  HEIFItem *v67;
  unint64_t v68;
  HEIFItem **v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  HEIFItem **v76;
  char *v77;
  char *v78;
  HEIFItem *v79;
  char **v80;
  uint64_t v81;
  HEIFXMP *v82;
  unint64_t v83;
  HEIFXMP **v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  HEIFXMP **v91;
  char *v92;
  char *v93;
  HEIFXMP *v94;
  UInt8 buffer[4];
  UInt8 v97[8];

  *(_QWORD *)v97 = 0;
  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1313423693)
  {
    _cg_jpeg_mem_term("readFromStream", 2314, "*** ERROR: missing 'MAIN' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1297434708)
  {
    _cg_jpeg_mem_term("readFromStream", 2318, "*** ERROR: missing 'THUM' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v5 = (char **)((char *)this + 8);
  std::vector<_MPEntry *>::reserve((void **)this + 1, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v6) = 0;
    do
    {
      v7 = (HEIFThumbnailImage *)operator new();
      HEIFThumbnailImage::HEIFThumbnailImage(v7, stream);
      v9 = (HEIFThumbnailImage **)*((_QWORD *)this + 2);
      v8 = *((_QWORD *)this + 3);
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((char *)v9 - *v5) >> 3;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v12 = v8 - (_QWORD)*v5;
        v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1))
          v13 = v11 + 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 24, v14);
        else
          v15 = 0;
        v16 = (HEIFThumbnailImage **)&v15[8 * v11];
        *v16 = v7;
        v10 = v16 + 1;
        v18 = (char *)*((_QWORD *)this + 1);
        v17 = (char *)*((_QWORD *)this + 2);
        if (v17 != v18)
        {
          do
          {
            v19 = (HEIFThumbnailImage *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v16 = v19;
          }
          while (v17 != v18);
          v17 = *v5;
        }
        *((_QWORD *)this + 1) = v16;
        *((_QWORD *)this + 2) = v10;
        *((_QWORD *)this + 3) = &v15[8 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v9 = v7;
        v10 = v9 + 1;
      }
      *((_QWORD *)this + 2) = v10;
      v6 = (v6 + 1);
    }
    while (*(uint64_t *)v97 > v6);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1230525761)
  {
    _cg_jpeg_mem_term("readFromStream", 2336, "*** ERROR: missing 'AUXI' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v20 = (char **)((char *)this + 32);
  std::vector<_MPEntry *>::reserve((void **)this + 4, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v21) = 0;
    do
    {
      v22 = (HEIFAuxImage *)operator new();
      HEIFAuxImage::HEIFAuxImage(v22, stream);
      v24 = (HEIFAuxImage **)*((_QWORD *)this + 5);
      v23 = *((_QWORD *)this + 6);
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - *v20) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v27 = v23 - (_QWORD)*v20;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 48, v29);
        else
          v30 = 0;
        v31 = (HEIFAuxImage **)&v30[8 * v26];
        *v31 = v22;
        v25 = v31 + 1;
        v33 = (char *)*((_QWORD *)this + 4);
        v32 = (char *)*((_QWORD *)this + 5);
        if (v32 != v33)
        {
          do
          {
            v34 = (HEIFAuxImage *)*((_QWORD *)v32 - 1);
            v32 -= 8;
            *--v31 = v34;
          }
          while (v32 != v33);
          v32 = *v20;
        }
        *((_QWORD *)this + 4) = v31;
        *((_QWORD *)this + 5) = v25;
        *((_QWORD *)this + 6) = &v30[8 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v24 = v22;
        v25 = v24 + 1;
      }
      *((_QWORD *)this + 5) = v25;
      v21 = (v21 + 1);
    }
    while (*(uint64_t *)v97 > v21);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1230261313)
  {
    _cg_jpeg_mem_term("readFromStream", 2354, "*** ERROR: missing 'ALTI' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v35 = (char **)((char *)this + 56);
  std::vector<_MPEntry *>::reserve((void **)this + 7, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v36) = 0;
    do
    {
      v37 = (HEIFAlternateImage *)operator new();
      HEIFAlternateImage::HEIFAlternateImage(v37, stream);
      v39 = (HEIFAlternateImage **)*((_QWORD *)this + 8);
      v38 = *((_QWORD *)this + 9);
      if ((unint64_t)v39 >= v38)
      {
        v41 = ((char *)v39 - *v35) >> 3;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v42 = v38 - (_QWORD)*v35;
        v43 = v42 >> 2;
        if (v42 >> 2 <= (unint64_t)(v41 + 1))
          v43 = v41 + 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 72, v44);
        else
          v45 = 0;
        v46 = (HEIFAlternateImage **)&v45[8 * v41];
        *v46 = v37;
        v40 = v46 + 1;
        v48 = (char *)*((_QWORD *)this + 7);
        v47 = (char *)*((_QWORD *)this + 8);
        if (v47 != v48)
        {
          do
          {
            v49 = (HEIFAlternateImage *)*((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v46 = v49;
          }
          while (v47 != v48);
          v47 = *v35;
        }
        *((_QWORD *)this + 7) = v46;
        *((_QWORD *)this + 8) = v40;
        *((_QWORD *)this + 9) = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v39 = v37;
        v40 = v39 + 1;
      }
      *((_QWORD *)this + 8) = v40;
      v36 = (v36 + 1);
    }
    while (*(uint64_t *)v97 > v36);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1179211845)
  {
    _cg_jpeg_mem_term("readFromStream", 2373, "*** ERROR: missing 'EXIF' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v50 = (char **)((char *)this + 80);
  std::vector<_MPEntry *>::reserve((void **)this + 10, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v51) = 0;
    do
    {
      v52 = (HEIFExif *)operator new();
      HEIFExif::HEIFExif (v52, stream);
      v54 = (HEIFExif **)*((_QWORD *)this + 11);
      v53 = *((_QWORD *)this + 12);
      if ((unint64_t)v54 >= v53)
      {
        v56 = ((char *)v54 - *v50) >> 3;
        if ((unint64_t)(v56 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v57 = v53 - (_QWORD)*v50;
        v58 = v57 >> 2;
        if (v57 >> 2 <= (unint64_t)(v56 + 1))
          v58 = v56 + 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v59 = v58;
        if (v59)
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 96, v59);
        else
          v60 = 0;
        v61 = (HEIFExif **)&v60[8 * v56];
        *v61 = v52;
        v55 = v61 + 1;
        v63 = (char *)*((_QWORD *)this + 10);
        v62 = (char *)*((_QWORD *)this + 11);
        if (v62 != v63)
        {
          do
          {
            v64 = (HEIFExif *)*((_QWORD *)v62 - 1);
            v62 -= 8;
            *--v61 = v64;
          }
          while (v62 != v63);
          v62 = *v50;
        }
        *((_QWORD *)this + 10) = v61;
        *((_QWORD *)this + 11) = v55;
        *((_QWORD *)this + 12) = &v60[8 * v59];
        if (v62)
          operator delete(v62);
      }
      else
      {
        *v54 = v52;
        v55 = v54 + 1;
      }
      *((_QWORD *)this + 11) = v55;
      v51 = (v51 + 1);
    }
    while (*(uint64_t *)v97 > v51);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1296389193)
  {
    _cg_jpeg_mem_term("readFromStream", 2391, "*** ERROR: missing 'ITEM' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v65 = (char **)((char *)this + 128);
  std::vector<_MPEntry *>::reserve((void **)this + 16, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v66) = 0;
    do
    {
      v67 = (HEIFItem *)operator new();
      HEIFItem::HEIFItem(v67, stream);
      v69 = (HEIFItem **)*((_QWORD *)this + 17);
      v68 = *((_QWORD *)this + 18);
      if ((unint64_t)v69 >= v68)
      {
        v71 = ((char *)v69 - *v65) >> 3;
        if ((unint64_t)(v71 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v72 = v68 - (_QWORD)*v65;
        v73 = v72 >> 2;
        if (v72 >> 2 <= (unint64_t)(v71 + 1))
          v73 = v71 + 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 144, v74);
        else
          v75 = 0;
        v76 = (HEIFItem **)&v75[8 * v71];
        *v76 = v67;
        v70 = v76 + 1;
        v78 = (char *)*((_QWORD *)this + 16);
        v77 = (char *)*((_QWORD *)this + 17);
        if (v77 != v78)
        {
          do
          {
            v79 = (HEIFItem *)*((_QWORD *)v77 - 1);
            v77 -= 8;
            *--v76 = v79;
          }
          while (v77 != v78);
          v77 = *v65;
        }
        *((_QWORD *)this + 16) = v76;
        *((_QWORD *)this + 17) = v70;
        *((_QWORD *)this + 18) = &v75[8 * v74];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *v69 = v67;
        v70 = v69 + 1;
      }
      *((_QWORD *)this + 17) = v70;
      v66 = (v66 + 1);
    }
    while (*(uint64_t *)v97 > v66);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 542133592)
  {
    _cg_jpeg_mem_term("readFromStream", 2409, "*** ERROR: missing 'XMP ' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, v97, 8) != 8)
    return 4294967246;
  v80 = (char **)((char *)this + 104);
  std::vector<_MPEntry *>::reserve((void **)this + 13, *(unint64_t *)v97);
  if (*(uint64_t *)v97 >= 1)
  {
    LODWORD(v81) = 0;
    do
    {
      v82 = (HEIFXMP *)operator new();
      HEIFXMP::HEIFXMP(v82, stream);
      v84 = (HEIFXMP **)*((_QWORD *)this + 14);
      v83 = *((_QWORD *)this + 15);
      if ((unint64_t)v84 >= v83)
      {
        v86 = ((char *)v84 - *v80) >> 3;
        if ((unint64_t)(v86 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v87 = v83 - (_QWORD)*v80;
        v88 = v87 >> 2;
        if (v87 >> 2 <= (unint64_t)(v86 + 1))
          v88 = v86 + 1;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v88;
        if (v89)
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 120, v89);
        else
          v90 = 0;
        v91 = (HEIFXMP **)&v90[8 * v86];
        *v91 = v82;
        v85 = v91 + 1;
        v93 = (char *)*((_QWORD *)this + 13);
        v92 = (char *)*((_QWORD *)this + 14);
        if (v92 != v93)
        {
          do
          {
            v94 = (HEIFXMP *)*((_QWORD *)v92 - 1);
            v92 -= 8;
            *--v91 = v94;
          }
          while (v92 != v93);
          v92 = *v80;
        }
        *((_QWORD *)this + 13) = v91;
        *((_QWORD *)this + 14) = v85;
        *((_QWORD *)this + 15) = &v90[8 * v89];
        if (v92)
          operator delete(v92);
      }
      else
      {
        *v84 = v82;
        v85 = v84 + 1;
      }
      *((_QWORD *)this + 14) = v85;
      v81 = (v81 + 1);
    }
    while (*(uint64_t *)v97 > v81);
  }
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1096040772)
  {
    _cg_jpeg_mem_term("readFromStream", 2427, "*** ERROR: missing 'DATA' marker\n");
    return 4294967246;
  }
  if (CFReadStreamRead(stream, (UInt8 *)this + 160, 144) != 144)
    return 4294967246;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1313623875)
  {
    _cg_jpeg_mem_term("readFromStream", 2435, "*** ERROR: missing 'COLN' marker\n");
    return 4294967246;
  }
  *((_QWORD *)this + 36) = IIO_ColorSpaceNameCreateFromStream(stream);
  if (CFReadStreamRead(stream, buffer, 4) != 4 || *(_DWORD *)buffer != 1397509955)
  {
    _cg_jpeg_mem_term("readFromStream", 2440, "*** ERROR: missing 'COLS' marker\n");
    return 4294967246;
  }
  *((_QWORD *)this + 37) = IIO_ColorSpaceCreateFromStream(stream);
  if (!*((_DWORD *)this + 41))
  {
    _cg_jpeg_mem_term("readFromStream", 2443, "*** ERROR: mainImage - bad dimension: %d x %d\n");
    return 4294967246;
  }
  if (!*((_DWORD *)this + 42))
  {
    _cg_jpeg_mem_term("readFromStream", 2444, "*** ERROR: mainImage - bad dimension: %d x %d\n");
    return 4294967246;
  }
  return 0;
}

void sub_18806C874(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18806C824);
}

BOOL HEIFMainImage::hasISO5Headroom(HEIFMainImage *this)
{
  return *((float *)this + 66) != 0.0;
}

float HEIFMainImage::getISO5Headroom(HEIFMainImage *this)
{
  return *((float *)this + 66);
}

double HEIFMainImage::getFrameDuration(HEIFMainImage *this)
{
  return *((double *)this + 34);
}

uint64_t HEIFMainImage::getColorSpace(HEIFMainImage *this)
{
  return *((_QWORD *)this + 37);
}

uint64_t HEIFMainImage::getHEIFThumbnailImageAtIndex(HEIFMainImage *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 2) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t HEIFMainImage::getHEIFAlternateImageAtIndex(HEIFMainImage *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 7);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 8) - v2) >> 3))
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

uint64_t HEIFMainImage::writeToStream(HEIFMainImage *this, CFWriteStreamRef stream)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  UInt8 buffer[4];
  UInt8 v24[8];
  UInt8 v25[4];

  *(_DWORD *)buffer = 1313423693;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_DWORD *)buffer = 1297434708;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 >= 1)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v4);
      *(_DWORD *)v25 = 1297434708;
      CFWriteStreamWrite(stream, v25, 4);
      CFWriteStreamWrite(stream, (const UInt8 *)(v6 + 8), 20);
      v4 = v5;
      v7 = *(_QWORD *)v24 <= (uint64_t)v5++;
    }
    while (!v7);
  }
  *(_DWORD *)buffer = 1230525761;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 >= 1)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      HEIFAuxImage::writeToStream(*(HEIFAuxImage **)(*((_QWORD *)this + 4) + 8 * v8), stream);
      v8 = v9;
      v7 = *(_QWORD *)v24 <= (uint64_t)v9++;
    }
    while (!v7);
  }
  *(_DWORD *)buffer = 1230261313;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 < 1)
  {
    v13 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    do
    {
      v12 = HEIFAlternateImage::writeToStream(*(HEIFAlternateImage **)(*((_QWORD *)this + 7) + 8 * v10), stream);
      v10 = v11;
      v7 = *(_QWORD *)v24 <= (uint64_t)v11++;
    }
    while (!v7);
    v13 = v12;
  }
  *(_DWORD *)buffer = 1179211845;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 >= 1)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v14);
      *(_DWORD *)v25 = 1179211845;
      CFWriteStreamWrite(stream, v25, 4);
      CFWriteStreamWrite(stream, (const UInt8 *)(v16 + 8), 16);
      v14 = v15;
      v7 = *(_QWORD *)v24 <= (uint64_t)v15++;
    }
    while (!v7);
    v13 = 0;
  }
  *(_DWORD *)buffer = 1296389193;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 >= 1)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      HEIFItem::writeToStream(*(HEIFItem **)(*((_QWORD *)this + 16) + 8 * v17), stream);
      v17 = v18;
      v7 = *(_QWORD *)v24 <= (uint64_t)v18++;
    }
    while (!v7);
    v13 = 0;
  }
  *(_DWORD *)buffer = 542133592;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v24 = (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
  CFWriteStreamWrite(stream, v24, 8);
  if (*(uint64_t *)v24 >= 1)
  {
    v19 = 0;
    v20 = 1;
    do
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v19);
      *(_DWORD *)v25 = 542133592;
      CFWriteStreamWrite(stream, v25, 4);
      CFWriteStreamWrite(stream, (const UInt8 *)(v21 + 8), 16);
      v19 = v20;
      v7 = *(_QWORD *)v24 <= (uint64_t)v20++;
    }
    while (!v7);
    v13 = 0;
  }
  *(_DWORD *)buffer = 1096040772;
  CFWriteStreamWrite(stream, buffer, 4);
  CFWriteStreamWrite(stream, (const UInt8 *)this + 160, 144);
  *(_DWORD *)buffer = 1313623875;
  CFWriteStreamWrite(stream, buffer, 4);
  IIO_ColorSpaceNameAddToStream(*((const __CFString **)this + 36), stream);
  *(_DWORD *)buffer = 1397509955;
  CFWriteStreamWrite(stream, buffer, 4);
  IIO_ColorSpaceAddToStream(*((CGColorSpace **)this + 37), stream);
  if (*((_DWORD *)this + 41))
  {
    if (!*((_DWORD *)this + 42))
      _cg_jpeg_mem_term("writeToStream", 2299, "*** ERROR: mainImage - bad dimension: %d x %d\n");
  }
  else
  {
    _cg_jpeg_mem_term("writeToStream", 2298, "*** ERROR: mainImage - bad dimension: %d x %d\n");
  }
  return v13;
}

void GlobalHEIFInfo::GlobalHEIFInfo(GlobalHEIFInfo *this, unsigned __int8 *a2, CFIndex a3)
{
  char *v6;
  __CFReadStream *v7;
  __CFReadStream *v8;
  const void *v9;

  *(_QWORD *)this = &off_1E1BAE118;
  *(_OWORD *)((char *)this + 8) = 0u;
  v6 = (char *)this + 32;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::vector<_APPx *>::resize((uint64_t)this + 8, 0);
  std::vector<_APPx *>::resize((uint64_t)v6, 0);
  *((_QWORD *)this + 7) = 0;
  v7 = CFReadStreamCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v8 = v7;
  if (v7)
  {
    if (CFReadStreamOpen(v7))
    {
      if (GlobalHEIFInfo::readFromStream(this, v8))
      {
        *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
        *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
        *((_QWORD *)this + 8) = 0;
        v9 = (const void *)*((_QWORD *)this + 7);
        if (v9)
        {
          CFRelease(v9);
          *((_QWORD *)this + 7) = 0;
        }
      }
      CFReadStreamClose(v8);
    }
    CFRelease(v8);
  }
}

void sub_18806CEE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GlobalHEIFInfo::readFromStream(GlobalHEIFInfo *this, CFReadStreamRef stream)
{
  char **v4;
  uint64_t v5;
  HEIFMainImage *v6;
  unint64_t v7;
  HEIFMainImage **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  HEIFMainImage **v15;
  char *v16;
  char *v17;
  HEIFMainImage *v18;
  char **v19;
  uint64_t v20;
  HEIFGroupItem *v21;
  unint64_t v22;
  HEIFGroupItem **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  HEIFGroupItem **v30;
  char *v31;
  char *v32;
  HEIFGroupItem *v33;
  uint64_t result;
  UInt8 *v35;
  UInt8 buffer[4];
  UInt8 v37[8];

  *(_QWORD *)v37 = 0;
  *(_DWORD *)buffer = 0;
  if (CFReadStreamRead(stream, buffer, 4) != 4)
    return 4294967246;
  if (*(_DWORD *)buffer != 1112493127)
    return 0;
  if (CFReadStreamRead(stream, v37, 8) != 8)
    return 4294967246;
  v4 = (char **)((char *)this + 8);
  std::vector<_MPEntry *>::reserve((void **)this + 1, *(unint64_t *)v37);
  if (*(uint64_t *)v37 >= 1)
  {
    LODWORD(v5) = 0;
    do
    {
      v6 = (HEIFMainImage *)operator new();
      HEIFMainImage::HEIFMainImage(v6, stream);
      v8 = (HEIFMainImage **)*((_QWORD *)this + 2);
      v7 = *((_QWORD *)this + 3);
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - *v4) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*v4;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 24, v13);
        else
          v14 = 0;
        v15 = (HEIFMainImage **)&v14[8 * v10];
        *v15 = v6;
        v9 = v15 + 1;
        v17 = (char *)*((_QWORD *)this + 1);
        v16 = (char *)*((_QWORD *)this + 2);
        if (v16 != v17)
        {
          do
          {
            v18 = (HEIFMainImage *)*((_QWORD *)v16 - 1);
            v16 -= 8;
            *--v15 = v18;
          }
          while (v16 != v17);
          v16 = *v4;
        }
        *((_QWORD *)this + 1) = v15;
        *((_QWORD *)this + 2) = v9;
        *((_QWORD *)this + 3) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      *((_QWORD *)this + 2) = v9;
      v5 = (v5 + 1);
    }
    while (*(uint64_t *)v37 > v5);
  }
  if (CFReadStreamRead(stream, v37, 8) != 8)
    return 4294967246;
  v19 = (char **)((char *)this + 32);
  std::vector<_MPEntry *>::reserve((void **)this + 4, *(unint64_t *)v37);
  if (*(uint64_t *)v37 >= 1)
  {
    LODWORD(v20) = 0;
    do
    {
      v21 = (HEIFGroupItem *)operator new();
      HEIFGroupItem::HEIFGroupItem(v21, stream);
      v23 = (HEIFGroupItem **)*((_QWORD *)this + 5);
      v22 = *((_QWORD *)this + 6);
      if ((unint64_t)v23 >= v22)
      {
        v25 = ((char *)v23 - *v19) >> 3;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v26 = v22 - (_QWORD)*v19;
        v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1))
          v27 = v25 + 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)this + 48, v28);
        else
          v29 = 0;
        v30 = (HEIFGroupItem **)&v29[8 * v25];
        *v30 = v21;
        v24 = v30 + 1;
        v32 = (char *)*((_QWORD *)this + 4);
        v31 = (char *)*((_QWORD *)this + 5);
        if (v31 != v32)
        {
          do
          {
            v33 = (HEIFGroupItem *)*((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v30 = v33;
          }
          while (v31 != v32);
          v31 = *v19;
        }
        *((_QWORD *)this + 4) = v30;
        *((_QWORD *)this + 5) = v24;
        *((_QWORD *)this + 6) = &v29[8 * v28];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v23 = v21;
        v24 = v23 + 1;
      }
      *((_QWORD *)this + 5) = v24;
      v20 = (v20 + 1);
    }
    while (*(uint64_t *)v37 > v20);
  }
  if (CFReadStreamRead(stream, (UInt8 *)this + 64, 8) != 8 || CFReadStreamRead(stream, v37, 8) != 8)
    return 4294967246;
  result = *(_QWORD *)v37;
  if (!*(_QWORD *)v37)
    return result;
  v35 = (UInt8 *)malloc_type_malloc(*(size_t *)v37, 0x94AD2C6CuLL);
  if (CFReadStreamRead(stream, v35, 8) == 8)
    *((_QWORD *)this + 7) = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v35, *(CFIndex *)v37);
  free(v35);
  return 0;
}

void sub_18806D31C()
{
  __cxa_end_catch();
  JUMPOUT(0x18806D324);
}

uint64_t GlobalHEIFInfo::setHasHEIFSequence(uint64_t this, char a2)
{
  *(_BYTE *)(this + 69) = a2;
  return this;
}

void GlobalHEIFInfo::addHEIFGroupItem(GlobalHEIFInfo *this, HEIFGroupItem *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 6);
  v4 = (char *)this + 48;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 4);
    v18 = (char *)*((_QWORD *)this + 5);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 4) = v16;
    *((_QWORD *)this + 5) = v8;
    *((_QWORD *)this + 6) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 5) = v8;
}

uint64_t GlobalHEIFInfo::writeToStream(GlobalHEIFInfo *this, CFWriteStreamRef stream)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  HEIFMainImage *v7;
  uint64_t result;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  HEIFGroupItem *v13;
  const __CFData *Length;
  const UInt8 *BytePtr;
  UInt8 v16[8];
  UInt8 buffer[4];

  *(_DWORD *)buffer = 1112493127;
  CFWriteStreamWrite(stream, buffer, 4);
  *(_QWORD *)v16 = (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
  CFWriteStreamWrite(stream, v16, 8);
  v4 = *(_DWORD *)v16;
  if (*(uint64_t *)v16 >= 1)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *(HEIFMainImage **)(*((_QWORD *)this + 1) + 8 * v5);
      if (v7)
      {
        result = HEIFMainImage::writeToStream(v7, stream);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        LogError("writeToStream", 2691, "*** ERROR: count=%d --> _mainImages[%d] is NULL?\n", v4, v6 - 1);
      }
      v5 = v6;
      v4 = *(_DWORD *)v16;
      v9 = *(_QWORD *)v16 <= (uint64_t)v6++;
    }
    while (!v9);
  }
  *(_QWORD *)v16 = (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3;
  CFWriteStreamWrite(stream, v16, 8);
  v10 = *(_DWORD *)v16;
  if (*(uint64_t *)v16 >= 1)
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = *(HEIFGroupItem **)(*((_QWORD *)this + 4) + 8 * v11);
      if (v13)
        HEIFGroupItem::writeToStream(v13, stream);
      else
        LogError("writeToStream", 2708, "*** ERROR: count=%d --> _groupsList[%d] is NULL?\n", v10, v12 - 1);
      v11 = v12;
      v10 = *(_DWORD *)v16;
      v9 = *(_QWORD *)v16 <= (uint64_t)v12++;
    }
    while (!v9);
  }
  CFWriteStreamWrite(stream, (const UInt8 *)this + 64, 8);
  Length = (const __CFData *)*((_QWORD *)this + 7);
  if (Length)
    Length = (const __CFData *)CFDataGetLength(Length);
  *(_QWORD *)v16 = Length;
  CFWriteStreamWrite(stream, v16, 8);
  result = 0;
  if (*((_QWORD *)this + 7))
  {
    if (*(_QWORD *)v16)
    {
      BytePtr = CFDataGetBytePtr(*((CFDataRef *)this + 7));
      CFWriteStreamWrite(stream, BytePtr, *(CFIndex *)v16);
      return 0;
    }
  }
  return result;
}

CFTypeRef GlobalHEIFInfo::createDataRepresentation(GlobalHEIFInfo *this)
{
  __CFWriteStream *v2;
  __CFWriteStream *v3;
  CFTypeRef v4;

  v2 = CFWriteStreamCreateWithAllocatedBuffers((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    GlobalHEIFInfo::writeToStream(this, v3);
    v4 = CFWriteStreamCopyProperty(v3, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
    CFWriteStreamClose(v3);
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

uint64_t IIOCreateCMPhotoDecompressionSession(uint64_t a1)
{
  return gFunc_CMPhotoDecompressionSessionCreate(*MEMORY[0x1E0C9AE00], 0, a1);
}

double PSDReadPlugin::PSDReadPlugin(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  double result;

  v5 = IIOReadPlugin::IIOReadPlugin(a1, a2, a3, a4, a5);
  *(_QWORD *)v5 = &off_1E1BAD8D8;
  result = 0.0;
  *(_OWORD *)(v5 + 440) = 0u;
  *(_OWORD *)(v5 + 456) = 0u;
  *(_QWORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 461) = 1;
  return result;
}

double PSDReadPlugin::PSDReadPlugin(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  double result;

  v3 = IIOReadPlugin::IIOReadPlugin(a1, a2, a3);
  *(_QWORD *)v3 = &off_1E1BAD8D8;
  result = 0.0;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_OWORD *)(v3 + 456) = 0u;
  *(_QWORD *)(v3 + 472) = 0;
  *(_BYTE *)(v3 + 461) = 1;
  return result;
}

void PSDReadPlugin::~PSDReadPlugin(PSDReadPlugin *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E1BAD8D8;
  v2 = (void *)*((_QWORD *)this + 59);
  if (v2)
    free(v2);
  IIOReadPlugin::~IIOReadPlugin(this);
}

{
  PSDReadPlugin::~PSDReadPlugin(this);
  JUMPOUT(0x18D761C30);
}

uint64_t PSDReadPlugin::loadDataFromXPCObject(PSDReadPlugin *this, void *a2)
{
  uint64_t result;
  _OWORD *data;
  __int128 v6;
  const void *v7;
  void *v8;
  size_t size;
  size_t length;

  result = IIOReadPlugin::loadDataFromXPCObject(this, a2);
  if (!(_DWORD)result)
  {
    length = 0;
    data = xpc_dictionary_get_data(a2, "iio_xpc_plugin_data_psd", &length);
    if (length == 40)
    {
      v6 = data[1];
      *(_OWORD *)((char *)this + 440) = *data;
      *(_OWORD *)((char *)this + 456) = v6;
      *((_QWORD *)this + 59) = 0;
      if (*((_WORD *)this + 233))
      {
        size = 0;
        v7 = xpc_dictionary_get_data(a2, "iio_xpc_plugin_data_psd_layer", &size);
        if (size == 440 * *((unsigned __int16 *)this + 233))
        {
          v8 = malloc_type_malloc(size, 0x29EB2149uLL);
          *((_QWORD *)this + 59) = v8;
          memcpy(v8, v7, size);
        }
        else
        {
          *((_WORD *)this + 233) = 0;
        }
      }
      return 0;
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t PSDReadPlugin::saveDataToXPCObject(void **this, void *a2)
{
  uint64_t v4;

  v4 = IIOReadPlugin::saveDataToXPCObject((IIOReadPlugin *)this, a2);
  if (!(_DWORD)v4)
  {
    iio_xpc_dictionary_add_databuffer(a2, "iio_xpc_plugin_data_psd", this + 55, 0x28uLL);
    iio_xpc_dictionary_add_databuffer(a2, "iio_xpc_plugin_data_psd_layer", this[59], 440 * *((unsigned __int16 *)this + 233));
  }
  return v4;
}

uint64_t PSDReadPlugin::readHeader(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v16;

  if (IIOImageReadSession::getBytes(*(IIOImageReadSession **)(a1 + 24), a2, 0x1AuLL) != 26)
  {
    _cg_jpeg_mem_term("readHeader", 180, "*** ERROR: can't read PSD header\n");
    return 4294967246;
  }
  v4 = *a2;
  *a2 = bswap32(*a2);
  v5 = *((unsigned __int16 *)a2 + 2);
  v6 = __rev16(v5);
  *((_WORD *)a2 + 2) = v6;
  v7 = bswap32(*((unsigned __int16 *)a2 + 6));
  *((_WORD *)a2 + 6) = HIWORD(v7);
  v8 = *(unsigned int *)((char *)a2 + 14);
  v9 = bswap32(v8);
  *(unsigned int *)((char *)a2 + 14) = v9;
  v10 = *(unsigned int *)((char *)a2 + 18);
  v11 = bswap32(v10);
  *(unsigned int *)((char *)a2 + 18) = v11;
  v12 = *((unsigned __int16 *)a2 + 11);
  v13 = __rev16(v12);
  *((_WORD *)a2 + 11) = v13;
  v14 = bswap32(*((unsigned __int16 *)a2 + 12)) >> 16;
  *((_WORD *)a2 + 12) = v14;
  if (v4 != 1397768760)
  {
    _cg_jpeg_mem_term("readHeader", 190, "*** ERROR: bad signature\n");
    return 4294967246;
  }
  if ((unsigned __int16)(v6 - 1) >= 2u)
  {
    _cg_jpeg_mem_term("readHeader", 191, "*** ERROR: bad header version\n");
    return 4294967246;
  }
  if (v5 == 256)
  {
    if (!v8 || v9 >= 0x7531)
    {
      _cg_jpeg_mem_term("readHeader", 195, "*** ERROR: unsupported height (%d)\n");
      return 4294967246;
    }
    if (!v10 || v11 >= 0x7531)
    {
      _cg_jpeg_mem_term("readHeader", 196, "*** ERROR: unsupported width (%d)\n");
      return 4294967246;
    }
  }
  else
  {
    if (!v8 || v9 >= 0x493E1)
    {
      _cg_jpeg_mem_term("readHeader", 200, "*** ERROR: unsupported height (%d)\n");
      return 4294967246;
    }
    if (!v10 || v11 > 0x493E0)
    {
      _cg_jpeg_mem_term("readHeader", 201, "*** ERROR: unsupported width (%d)\n");
      return 4294967246;
    }
    *(_BYTE *)(a1 + 463) = 1;
  }
  if (v14 > 9)
    goto LABEL_29;
  if (((1 << v14) & 0x31E) != 0)
  {
    if (v13 > 0x20 || ((1 << v13) & 0x100010100) == 0)
    {
      _cg_jpeg_mem_term("readHeader", 218, "*** ERROR: unsupported bitsPerComp\n");
      return 4294967246;
    }
    v16 = v7 >> 16;
    if (v16 > 24 || modeChans[v14] > v16)
    {
      _cg_jpeg_mem_term("readHeader", 219, "*** ERROR: unsupported numChannels for mode\n");
      return 4294967246;
    }
    return 0;
  }
  if (v14)
  {
LABEL_29:
    _cg_jpeg_mem_term("readHeader", 210, "*** ERROR: unsupported mode (%d)\n");
    return 4294967246;
  }
  if (v12 != 256 || *((_WORD *)a2 + 6) != 1)
  {
    _cg_jpeg_mem_term("readHeader", 214, "*** ERROR: unsupported bitsPerComp/numChannels\n");
    return 4294967246;
  }
  return 0;
}

uint64_t PSDReadPlugin::initThumbnail(PSDReadPlugin *this)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  BOOL v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 v13;
  unsigned __int16 v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  __int16 v19;
  _OWORD v20[16];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v17[1] = 0;
  v19 = 0;
  v18 = 0;
  v16 = 0;
  result = PSDReadPlugin::readHeader((uint64_t)this, (unsigned int *)v17);
  if (!(_DWORD)result)
  {
    if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), (_BYTE *)&v16 + 4, 4uLL) == 4)
    {
      v3 = HIDWORD(v16);
      v4 = bswap32(HIDWORD(v16));
      HIDWORD(v16) = v4;
      if (HIWORD(v18) == 32
        || (v3 == 196608 ? (v5 = v19 == 2) : (v5 = 0), !v5 ? (v6 = 0) : (v6 = 1), !v3 || (v6 & 1) != 0 || v19 == 8))
      {
        if (IIOImageReadSession::seek(*((IIOImageReadSession **)this + 3), v4 + 30, 0) == v4 + 30
          && IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v16, 4uLL) == 4)
        {
          v15 = 0;
          LODWORD(v16) = bswap32(v16);
          if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v15, 4uLL) == 4)
          {
            while (1)
            {
              v7 = v15;
              v15 = bswap32(v15);
              if (v7 != 1296646712)
                break;
              v14 = 0;
              if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v14, 2uLL) != 2)
                break;
              v14 = bswap32(v14) >> 16;
              v13 = 0;
              if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v13, 1uLL) != 1)
                break;
              if (v13 > 0xFDu)
                break;
              v8 = v13 | 1;
              memset(v20, 0, sizeof(v20));
              if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), v20, v8) != v8)
                break;
              *((_BYTE *)v20 + v13) = 0;
              v12 = 0;
              if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v12, 4uLL) != 4)
                break;
              v9 = bswap32(v12);
              v12 = v9;
              if ((v9 & 0x80000000) != 0)
                break;
              if (v14 == 1036)
              {
                v10 = IIO_Reader::minimumFileSize(*((IIO_Reader **)this + 3)) + 28;
                v11 = v12;
                if (IIO_XPCServer())
                {
                  ImageIOLog("*********************************************************************\n");
                  ImageIOLog("**** __FIXME__ -- swapping the IIOReadPlugin\n");
                  ImageIOLog("*********************************************************************\n");
                }
                if (CGImagePluginInitJPEGAtOffset(*((_QWORD *)this + 1), 0, v10, v11, *((_DWORD *)this + 53) != 0, *((unsigned int *)this + 53), 1347634208, 0))
                {
                  return 0;
                }
                else
                {
                  return 4294967246;
                }
              }
              if (IIOImageReadSession::skipBytes(*((IIOImageReadSession **)this + 3), (v9 + 1) & 0xFFFFFFFE) == (IIOImageRead *)((v9 + 1) & 0xFFFFFFFE))
              {
                v15 = 0;
                if (IIOImageReadSession::getBytes(*((IIOImageReadSession **)this + 3), &v15, 4uLL) == 4)
                  continue;
              }
              return 4294967246;
            }
          }
        }
      }
    }
    return 4294967246;
  }
  return result;
}

char *PSDReadPlugin::parseLayers(PSDReadPlugin *this, IIOScanner *a2, __int16 *a3)
{
  unint64_t v6;
  __int16 Val16;
  int v8;
  uint64_t v9;
  char *v10;
  int Val32;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t Val64;
  unsigned int v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  CFStringRef v35;
  const __CFDictionary *ObjectForKeyGroup;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  unsigned __int16 *v47;
  int v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *exception;
  uint64_t v55;
  uint64_t v56;
  const __CFAllocator *allocator;
  __int16 v58;
  __int16 *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  CFMutableArrayRef __dst[3];

  v6 = *((_QWORD *)a2 + 2);
  *a3 = 0;
  Val16 = IIOScanner::getVal16(a2);
  LOWORD(v8) = Val16;
  if (Val16 < 0)
  {
    *((_BYTE *)this + 464) = 1;
    v8 = -Val16;
  }
  if ((__int16)v8 >= 8000)
  {
    _cg_jpeg_mem_term("parseLayers", 369, "*** ERROR: unexpected number of layers: %d\n");
    return 0;
  }
  if (*((_QWORD *)this + 23) <= (unint64_t)(unsigned __int16)v8)
  {
    _cg_jpeg_mem_term("parseLayers", 370, "*** ERROR: unexpected number of layers: %d\n");
    return 0;
  }
  v59 = a3;
  if ((gIIODebugFlags & 0x30000) != 0)
    ImageIOLog("    got %d layers\n", (__int16)v8);
  v61 = (char *)malloc_type_calloc((unsigned __int16)v8, 0x1B8uLL, 0x100004037BD86E4uLL);
  if (!v61)
  {
    _cg_jpeg_mem_term("parseLayers", 380, "*** ERROR: failed to allocate 'layerInfoPtr'\n");
    return 0;
  }
  v58 = v8;
  if ((__int16)v8 < 1)
  {
LABEL_63:
    *v59 = v58;
  }
  else
  {
    v9 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = v61;
    v60 = (__int16)v8;
    do
    {
      Val32 = IIOScanner::getVal32(a2);
      v12 = v9;
      v13 = &v61[440 * v9];
      *(_DWORD *)v13 = Val32;
      v14 = IIOScanner::getVal32(a2);
      *((_DWORD *)v13 + 1) = v14;
      v15 = IIOScanner::getVal32(a2);
      *((_DWORD *)v13 + 2) = v15;
      v16 = IIOScanner::getVal32(a2);
      v17 = v16;
      *((_DWORD *)v13 + 3) = v16;
      if ((gIIODebugFlags & 0x30000) != 0)
        ImageIOLog("    #%d:   {%d, %d, %d, %d}\n", v12, v14, Val32, v16, v15);
      v62 = v12;
      v18 = IIOScanner::getVal16(a2);
      v19 = v18;
      if (v18 >= 0x10)
      {
        _cg_jpeg_mem_term("parseLayers", 415, "*** ERROR: unexpected number of channels: %d (max=%d)\n");
        return v61;
      }
      if (!v18)
      {
        _cg_jpeg_mem_term("parseLayers", 416, "*** ERROR: unexpected number of channels: %d (max=%d)\n");
        return v61;
      }
      if ((gIIODebugFlags & 0x30000) != 0)
        ImageIOLog("       : %d channels\n", v18);
      v20 = &v61[440 * v62];
      v20[18] = 1;
      v21 = v20 + 18;
      *((_WORD *)v21 - 1) = v19;
      if (Val32 >= v15 || v14 >= v17)
      {
        _cg_jpeg_mem_term("parseLayers", 426, "*** ERROR: skipping layer#%d {%d, %d, %d, %d}\n", v62, v14, Val32, v17, v15);
        *v21 = 0;
      }
      if (v15 - (uint64_t)Val32 > *((_QWORD *)a2 + 2))
      {
        _cg_jpeg_mem_term("parseLayers", 431, "*** ERROR: skipping layer#%d {%d, %d, %d, %d}\n", v62, v14, Val32, v17, v15);
        *v21 = 0;
      }
      v22 = 0;
      if (v19 <= 1)
        v23 = 1;
      else
        v23 = v19;
      do
      {
        *(_WORD *)&v10[2 * v22 + 20] = IIOScanner::getVal16(a2);
        if (*((_BYTE *)this + 463))
          Val64 = IIOScanner::getVal64(a2);
        else
          Val64 = IIOScanner::getVal32(a2);
        *(_QWORD *)&v10[8 * v22++ + 56] = Val64;
      }
      while (v23 != v22);
      if (IIOScanner::getVal32(a2) != 943868237)
        return v61;
      if (!IIOScanner::getVal32(a2))
        return v61;
      IIOScanner::skip((uint64_t)a2, 4);
      v25 = IIOScanner::getVal32(a2);
      if (!v25 || *((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 3) <= (unint64_t)v25)
        return v61;
      v26 = v25;
      if (*v21)
      {
        v27 = malloc_type_calloc(v25, 1uLL, 0xDC777311uLL);
        v28 = v62;
        if (!v27)
        {
          _cg_jpeg_mem_term("parseLayers", 485, "*** ERROR: failed to allocate 'tempBuffer'\n", v55, v56);
          return v61;
        }
        v29 = v27;
        if (IIOScanner::getBytes(a2, v27, v26) != v26)
        {
          _cg_jpeg_mem_term("parseLayers", 487, "*** ERROR: can't read layer data\n", v55, v56);
          return v61;
        }
        v30 = memmem(v29, v26, "8BIMluni", 8uLL);
        if (v30)
        {
          v31 = (_BYTE *)v29 - (_BYTE *)v30 + v26;
          if (v31 >= 17)
          {
            v32 = 2 * bswap32(*((_DWORD *)v30 + 3));
            v33 = v31 - 16;
            v34 = v31 - 16;
            if (v33 >= v32)
              v34 = v32;
            if (v34 >= 0x17)
            {
              *((_WORD *)v30 + 7) = -2;
              if (*((_BYTE *)v30 + 16)
                || *((_BYTE *)v30 + 17) != 60
                || *((_BYTE *)v30 + 18)
                || *((_BYTE *)v30 + 19) != 47)
              {
                v35 = CFStringCreateWithBytes(0, (const UInt8 *)v30 + 14, v34 + 2, 0x100u, 1u);
                ObjectForKeyGroup = IIODictionary::getObjectForKeyGroup(*((IIODictionary **)this + 7), CFSTR("LayerNames"), CFSTR("{8BIM}"));
                if (!ObjectForKeyGroup)
                {
                  ObjectForKeyGroup = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                  IIODictionary::setObjectForKeyGroup(*((IIODictionary **)this + 7), ObjectForKeyGroup, CFSTR("LayerNames"), CFSTR("{8BIM}"));
                  CFRelease(ObjectForKeyGroup);
                }
                memset(__dst, 0, sizeof(__dst));
                IIOArray::IIOArray((IIOArray *)__dst, ObjectForKeyGroup);
                IIOArray::addObject(__dst, v35);
                CFRelease(v35);
                IIOArray::~IIOArray((IIOArray *)__dst);
              }
            }
          }
        }
        free(v29);
      }
      else
      {
        IIOScanner::skip((uint64_t)a2, v25);
        v28 = v62;
      }
      v9 = v28 + 1;
      v10 += 440;
    }
    while (v9 != v60);
    v37 = 0;
    v38 = *((_QWORD *)a2 + 3);
    v39 = (unint64_t *)(v61 + 184);
    do
    {
      v40 = *(unsigned __int16 *)&v61[440 * v37 + 16];
      v41 = v39;
      if (*(_WORD *)&v61[440 * v37 + 16])
      {
        do
        {
          *v41 = v38;
          v42 = *(v41 - 16);
          v43 = __CFADD__(v38, v42);
          v38 += v42;
          if (v43 || v38 >= v6)
          {
            _cg_jpeg_mem_term("parseLayers", 553, "*** ERROR: layer offset (%ld) > fileSize (%d)\n", v38, v6);
            exception = __cxa_allocate_exception(4uLL);
            *exception = -1;
            __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
          }
          ++v41;
          --v40;
        }
        while (v40);
      }
      ++v37;
      v39 += 55;
    }
    while (v37 != v60);
    v44 = 0;
    v45 = v61 + 312;
    while (1)
    {
      v46 = &v61[440 * v44];
      v48 = *((unsigned __int16 *)v46 + 8);
      v47 = (unsigned __int16 *)(v46 + 16);
      if (v48)
        break;
LABEL_62:
      ++v44;
      v45 += 55;
      if (v44 == v60)
        goto LABEL_63;
    }
    v49 = 0;
    v50 = v45;
    while (1)
    {
      v51 = *(v50 - 16);
      LOWORD(__dst[0]) = 0;
      if (IIOScanner::getBytesAtOffset(a2, __dst, v51, 2uLL) != 2)
        break;
      v52 = bswap32(LOWORD(__dst[0])) >> 16;
      LOWORD(__dst[0]) = v52;
      *v50 = v52;
      IIOScanner::seek(a2, *(v50 - 32) + v51);
      if (*((_DWORD *)a2 + 16))
        break;
      ++v49;
      ++v50;
      if (v49 >= *v47)
        goto LABEL_62;
    }
  }
  return v61;
}

void sub_18806E4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  IIOArray::~IIOArray((IIOArray *)va);
  _Unwind_Resume(a1);
}

uint64_t PSDReadPlugin::initialize(PSDReadPlugin *this, IIODictionary *a2)
{
  int v3;
  int v4;
  char v5;
  unint64_t v6;
  _BYTE *v7;
  BOOL v8;
  _BOOL4 v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t i;
  CGMutableImageMetadataRef MetadataFromDatabuffer;
  CGImageMetadata *MetadataFromIPTCDatabuffer;
  int Val16;
  int Val8;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  size_t v20;
  int v21;
  _BYTE *v22;
  char v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v28;
  _BYTE *v29;
  CGImageMetadataRef v30;
  unsigned int v31;
  unint64_t Val64;
  int v33;
  char *v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  IIODictionary *v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  IIOImageRead *Size;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  CGColorSpace *v62;
  unsigned int v63;
  int v64;
  char v65;
  char v66;
  PSDReadPlugin *v67;
  int v68;
  __int16 v69;
  int v70;
  int v71;
  unsigned __int16 v72;
  char v73;
  PSDReadPlugin *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  double v78;
  int v79;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  PSDReadPlugin *v84;
  unsigned int v85;
  __int16 v86;
  _BYTE *v87;
  char v88;
  size_t v89;
  void *v90;
  const char *v91;
  const char *v93;
  uint64_t v94;
  unsigned int Uint32ForKey;
  unsigned int v96;
  int Val32;
  const __CFDictionary *data;
  uint64_t v99;
  _BYTE *v100;
  CGImageMetadata *cf;
  PSDReadPlugin *v102;
  _BYTE v103[24];
  _OWORD v104[4];
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int128 v108;
  unsigned __int16 v109;
  unsigned __int8 __dst[264];
  unsigned __int8 colorTable[2];
  _BYTE v112[790];

  *(_QWORD *)&v112[766] = *MEMORY[0x1E0C80C00];
  v107 = 0;
  v108 = 0uLL;
  v109 = 0;
  bzero(colorTable, 0x300uLL);
  v106 = 0;
  v105 = 0;
  memset(v104, 0, sizeof(v104));
  v102 = this;
  IIOScanner::IIOScanner((IIOScanner *)v104, *((IIOImageReadSession **)this + 3));
  GlobalHEIFInfo::setShouldExposeMultiFrameContents((uint64_t)v104, 0);
  data = IIODictionary::getObjectForKey(*((IIODictionary **)this + 6), CFSTR("kCGImageSourceXMPSidecar"));
  v3 = IIOSkipMetadata(*((IIODictionary **)this + 6));
  v4 = IIOSkipXMP_and_IPTC(*((IIODictionary **)this + 6));
  if (*((unsigned __int8 *)this + 216) < 2u)
    v5 = 1;
  else
    v5 = v3;
  if ((v5 & 1) == 0)
  {
    if ((gIIODebugFlags & 0x4000000000000) != 0 && IIO_OSAppleInternalBuild())
      ImageIOLog("••• Ⓜ️  skipping metadata for thumbnail creation\n");
    v3 = 1;
  }
  if (IIODictionary::containsKey(*((IIODictionary **)this + 6), CFSTR("kCGImageSourceSubsampleFactor")))
    Uint32ForKey = IIODictionary::getUint32ForKey(*((IIODictionary **)this + 6), CFSTR("kCGImageSourceSubsampleFactor"));
  else
    Uint32ForKey = 0;
  if (PSDReadPlugin::readHeader((uint64_t)this, (unsigned int *)&v107))
  {
    v58 = 4294967246;
    goto LABEL_237;
  }
  *((_BYTE *)this + 464) = 1;
  v6 = IIO_Reader::minimumFileSize(*((IIO_Reader **)this + 3));
  IIOScanner::seek((IIOScanner *)v104, v6);
  Val32 = IIOScanner::getVal32((IIOScanner *)v104);
  if (v109 == 2 && !Val32)
    goto LABEL_263;
  v7 = 0;
  if (HIWORD(v108) == 16 || HIWORD(v108) == 32)
    goto LABEL_33;
  v8 = Val32 == 768 && v109 == 2;
  v9 = v8;
  if (Val32 && v109 != 8 && !v9)
    goto LABEL_263;
  v7 = 0;
  if (!Val32 || v109 != 2)
    goto LABEL_33;
  if (SWORD2(v108) >= 3)
  {
    _cg_jpeg_mem_term("initialize", 688, "*** ERROR: too many channels (%d) for indexed color image\n", WORD2(v108));
    goto LABEL_263;
  }
  v10 = malloc_type_calloc(3uLL, 0x100uLL, 0xF2487E0EuLL);
  v7 = v10;
  if (!v10)
  {
LABEL_263:
    v58 = 4294967246;
    goto LABEL_238;
  }
  if (IIOScanner::getBytes((IIOScanner *)v104, v10, 0x300uLL) != 768)
  {
    v36 = 0;
    _cg_jpeg_mem_term("initialize", 695, "*** ERROR: can't read PSD color palette\n");
    v58 = 4294967246;
    goto LABEL_235;
  }
  v11 = v112;
  for (i = 256; i != 512; ++i)
  {
    *(v11 - 2) = v7[i - 256];
    *(v11 - 1) = v7[i];
    *v11 = v7[i + 256];
    v11 += 3;
  }
LABEL_33:
  v100 = v7;
  IIOScanner::seek((IIOScanner *)v104, (Val32 + 30));
  v96 = IIOScanner::getVal32((IIOScanner *)v104);
  if (*((_QWORD *)this + 23) <= (unint64_t)v96)
  {
    v36 = 0;
    goto LABEL_261;
  }
  MetadataFromDatabuffer = 0;
  MetadataFromIPTCDatabuffer = 0;
  cf = 0;
  v99 = 0;
  while (1)
  {
    memset(__dst, 0, 256);
    if (IIOScanner::getVal32((IIOScanner *)v104) != 943868237)
      break;
    Val16 = IIOScanner::getVal16((IIOScanner *)v104);
    Val8 = IIOScanner::getVal8((IIOScanner *)v104);
    v17 = Val8 | 1u;
    IIOScanner::copyBytes(v104, __dst, v17);
    IIOScanner::skip((uint64_t)v104, v17);
    __dst[Val8] = 0;
    v18 = IIOScanner::getVal32((IIOScanner *)v104);
    v19 = v18;
    if ((v18 & 0x80000000) != 0)
    {
      v30 = 0;
      if (!MetadataFromDatabuffer)
        goto LABEL_85;
LABEL_84:
      CFRelease(MetadataFromDatabuffer);
      goto LABEL_85;
    }
    v20 = (v18 + 1) & 0xFFFFFFFE;
    if (Val16 == 1082)
    {
      LOBYTE(v99) = 1;
      goto LABEL_50;
    }
    if (Val16 == 1028)
    {
      BYTE4(v99) = 1;
      v21 = v3;
    }
    else
    {
      v21 = 1;
    }
    if (((v21 | v4) & 1) != 0)
    {
      if ((Val16 & 0xFFFE) == 0x422)
      {
        if ((_DWORD)v20)
        {
          v22 = malloc_type_calloc((v18 + 1) & 0xFFFFFFFE, 1uLL, 0xC720A62BuLL);
          if (v22)
          {
            if (IIOScanner::getBytes((IIOScanner *)v104, v22, (v19 + 1) & 0xFFFFFFFE) != v20)
            {
              v24 = v22;
              _cg_jpeg_mem_term("initialize", 786, "*** ERROR: can't read kPhotoshopExif data\n");
              goto LABEL_248;
            }
            v23 = IIOMetadataFlagsFromImageSourceOptions(*((IIODictionary **)this + 6));
            if (MetadataFromDatabuffer)
              CFRelease(MetadataFromDatabuffer);
            v24 = v22;
            MetadataFromDatabuffer = CreateMetadataFromDatabuffer(v22, v19, v23);
            goto LABEL_77;
          }
        }
      }
      else if (Val16 == 1039)
      {
        if ((_DWORD)v20)
        {
          v26 = malloc_type_calloc((v18 + 1) & 0xFFFFFFFE, 1uLL, 0xDA06C7B3uLL);
          if (v26)
          {
            if (IIOScanner::getBytes((IIOScanner *)v104, v26, v20) != v20)
            {
              v24 = v26;
              _cg_jpeg_mem_term("initialize", 809, "*** ERROR: can't read kPhotoshopICC data\n");
              goto LABEL_248;
            }
            *((_QWORD *)this + 20) = CGColorSpaceCreateWithCopyOfData(v26, v20);
            v24 = v26;
            goto LABEL_77;
          }
        }
      }
      else
      {
        if (Val16 == 1060 && data == 0)
          v28 = v3;
        else
          v28 = 1;
        if (((v28 | v4) & 1) != 0)
        {
          if (Val16 == 1057)
          {
            IIOScanner::getVal32((IIOScanner *)v104);
            *((_BYTE *)this + 461) = IIOScanner::getVal8((IIOScanner *)v104) != 0;
            IIOScanner::skip((uint64_t)v104, (v20 - 5));
          }
          else
          {
LABEL_50:
            IIOScanner::skip((uint64_t)v104, (v18 + 1) & 0xFFFFFFFE);
          }
        }
        else if ((_DWORD)v20)
        {
          v29 = malloc_type_calloc((v18 + 1) & 0xFFFFFFFE, 1uLL, 0xE3945338uLL);
          if (v29)
          {
            v24 = v29;
            if (IIOScanner::getBytes((IIOScanner *)v104, v29, (v19 + 1) & 0xFFFFFFFE) != v20)
            {
              _cg_jpeg_mem_term("initialize", 824, "*** ERROR: can't read kPhotoshopXMP data\n");
LABEL_248:
              v34 = 0;
              v36 = 0;
              if (MetadataFromDatabuffer)
                CFRelease(MetadataFromDatabuffer);
              if (MetadataFromIPTCDatabuffer)
                CFRelease(MetadataFromIPTCDatabuffer);
              if (cf)
                CFRelease(cf);
              free(v24);
LABEL_131:
              v58 = 4294967246;
              if (!v34)
                goto LABEL_234;
LABEL_233:
              free(v34);
              goto LABEL_234;
            }
            if (cf)
              CFRelease(cf);
            cf = CreateMetadataFromXMPBuffer(v24, v19);
LABEL_77:
            free(v24);
          }
        }
      }
    }
    else if ((_DWORD)v20)
    {
      v25 = malloc_type_calloc((v18 + 1) & 0xFFFFFFFE, 1uLL, 0xB11DC623uLL);
      if (v25)
      {
        v24 = v25;
        if (IIOScanner::getBytes((IIOScanner *)v104, v25, (v19 + 1) & 0xFFFFFFFE) != v20)
        {
          _cg_jpeg_mem_term("initialize", 764, "*** ERROR: can't read kPhotoshopIPTC data\n");
          goto LABEL_248;
        }
        if (MetadataFromIPTCDatabuffer)
          CFRelease(MetadataFromIPTCDatabuffer);
        MetadataFromIPTCDatabuffer = CreateMetadataFromIPTCDatabuffer(v24, v19);
        goto LABEL_77;
      }
    }
  }
  if (data)
    v30 = CGImageMetadataCreateFromXMPData(data);
  else
    v30 = 0;
  CGImageMetadataMerge(*((_QWORD *)this + 8), (uint64_t)MetadataFromDatabuffer, *((IIODictionary **)this + 6));
  if ((v4 & 1) == 0)
  {
    CGImageMetadataMerge(*((_QWORD *)this + 8), (uint64_t)MetadataFromIPTCDatabuffer, *((IIODictionary **)this + 6));
    CGImageMetadataMerge(*((_QWORD *)this + 8), (uint64_t)cf, *((IIODictionary **)this + 6));
    CGImageMetadataMerge(*((_QWORD *)this + 8), (uint64_t)v30, *((IIODictionary **)this + 6));
  }
  if (MetadataFromDatabuffer)
    goto LABEL_84;
LABEL_85:
  if (MetadataFromIPTCDatabuffer)
    CFRelease(MetadataFromIPTCDatabuffer);
  if (v30)
    CFRelease(v30);
  if (cf)
    CFRelease(cf);
  v31 = Val32 + v96 + 34;
  IIOScanner::seek((IIOScanner *)v104, v31, 0);
  if (!*((_BYTE *)this + 463))
  {
    v35 = IIOScanner::getVal32((IIOScanner *)v104);
    v33 = 0;
    v34 = 0;
    if (v35 < 9)
    {
LABEL_116:
      if ((v3 & 1) != 0)
        goto LABEL_121;
      goto LABEL_117;
    }
    goto LABEL_99;
  }
  Val64 = IIOScanner::getVal64((IIOScanner *)v104);
  v33 = Val64;
  if (Val64 >= 9)
  {
    v36 = 0;
    if (Val64 >= *((_QWORD *)this + 23))
      goto LABEL_261;
    v35 = 0;
LABEL_99:
    if (!*((_BYTE *)this + 463))
    {
      v39 = IIOScanner::getVal32((IIOScanner *)v104);
      if (*((_QWORD *)this + 23) <= (unint64_t)v39)
      {
        v93 = "*** ERROR: unexpected layerBlockSize=%d [0x%X]\n";
        v94 = 936;
LABEL_260:
        v36 = 0;
        _cg_jpeg_mem_term("initialize", v94, v93, v39, v39);
        goto LABEL_261;
      }
LABEL_104:
      if ((_DWORD)v39)
      {
LABEL_114:
        v41 = PSDReadPlugin::parseLayers(this, (IIOScanner *)v104, &v106);
LABEL_115:
        v34 = v41;
        goto LABEL_116;
      }
      v39 = IIOScanner::getVal32((IIOScanner *)v104);
      if (*((_QWORD *)this + 23) > (unint64_t)v39)
      {
        if ((_DWORD)v39)
          IIOScanner::seek((IIOScanner *)v104, v39, 1);
        if (IIOScanner::getVal32((IIOScanner *)v104) == 943868237)
        {
          v40 = IIOScanner::getVal32((IIOScanner *)v104);
          if (v40 == 1282552626 || v40 == 1282552118)
          {
            IIOScanner::getVal32((IIOScanner *)v104);
            v41 = PSDReadPlugin::parseLayers(this, (IIOScanner *)v104, &v106);
            goto LABEL_115;
          }
          if (v40 == 1179480939)
          {
            v34 = 0;
            *((_BYTE *)this + 464) = 0;
            if ((v3 & 1) != 0)
              goto LABEL_121;
            goto LABEL_117;
          }
        }
        v34 = 0;
        if ((v3 & 1) == 0)
          goto LABEL_117;
        goto LABEL_121;
      }
      v93 = "*** ERROR: unexpected maskBlockSize=%d [0x%X]\n";
      v94 = 952;
      goto LABEL_260;
    }
    v37 = IIOScanner::getVal64((IIOScanner *)v104);
    v38 = v37;
    if (v37 < *((_QWORD *)this + 23))
    {
      LODWORD(v39) = 0;
      if (v38)
        goto LABEL_114;
      goto LABEL_104;
    }
    v36 = 0;
    _cg_jpeg_mem_term("initialize", 931, "*** ERROR: unexpected layerBlockSize=%lld [0x%X]\n", v37, v37);
LABEL_261:
    v58 = 4294967246;
    goto LABEL_234;
  }
  v34 = 0;
  v35 = 0;
  if ((v3 & 1) != 0)
    goto LABEL_121;
LABEL_117:
  v42 = (IIODictionary *)*((_QWORD *)this + 7);
  if (*((_BYTE *)this + 463))
    v43 = 2;
  else
    v43 = 1;
  IIONumber::IIONumber((IIONumber *)v103, v43);
  IIODictionary::setObjectForKeyGroup(v42, (uint64_t)v103, CFSTR("Version"), CFSTR("{8BIM}"));
  IIONumber::~IIONumber((IIONumber *)v103);
LABEL_121:
  if (*((_BYTE *)this + 463))
    v44 = 8;
  else
    v44 = 4;
  v45 = v31 + v33 + v35 + v44;
  IIOScanner::seek((IIOScanner *)v104, v45);
  v46 = IIOScanner::getVal16((IIOScanner *)v104);
  *((_WORD *)this + 229) = v46;
  if ((_DWORD)v105)
  {
    v36 = -39;
    goto LABEL_131;
  }
  if (v46 > 1)
  {
    v36 = -4;
    goto LABEL_131;
  }
  if (!v46)
  {
    v47 = v34;
    v48 = *(_DWORD *)((char *)&v108 + 10);
    v49 = *(_DWORD *)((char *)&v108 + 6);
    v50 = SWORD2(v108);
    v51 = SHIWORD(v108);
    Size = IIOImageReadSession::getSize(*((IIOImageReadSession **)v102 + 3));
    v53 = v49 * v48 * v50 * ((v51 + 7) >> 3);
    v34 = v47;
    if ((unint64_t)Size < v53)
    {
      v54 = *(_DWORD *)((char *)&v108 + 10);
      v55 = *(_DWORD *)((char *)&v108 + 6);
      v56 = SWORD2(v108);
      v57 = IIOImageReadSession::getSize(*((IIOImageReadSession **)v102 + 3));
      _cg_jpeg_mem_term("initialize", 1012, "*** ERROR: truncated file? %d x %d x %d  -  fileSize: %d\n", v54, v55, v56, v57);
      v36 = 0;
      v58 = 4294967246;
      v34 = v47;
      if (!v47)
        goto LABEL_234;
      goto LABEL_233;
    }
  }
  v59 = v109;
  v60 = 1196573017;
  switch(v109)
  {
    case 0u:
    case 1u:
    case 8u:
      goto LABEL_141;
    case 2u:
      *((_DWORD *)v102 + 81) = 1380401696;
      v61 = Uint32ForKey;
      if (!v100)
        goto LABEL_135;
      goto LABEL_143;
    case 3u:
      v60 = 1380401696;
      goto LABEL_141;
    case 4u:
      v60 = 1129142603;
      goto LABEL_141;
    case 9u:
      v60 = 1281450528;
LABEL_141:
      *((_DWORD *)v102 + 81) = v60;
      break;
    default:
      break;
  }
  v61 = Uint32ForKey;
  if (v100)
  {
LABEL_143:
    v62 = (CGColorSpace *)*((_QWORD *)v102 + 20);
    if (!v62)
      v62 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (CGColorSpaceGetModel(v62) != kCGColorSpaceModelRGB)
    {
      _cg_jpeg_mem_term("initialize", 1035, "*** ERROR: header says indexed color, but ICC profile is not RGB\n");
      v36 = 0;
      goto LABEL_131;
    }
    *((_QWORD *)v102 + 20) = CGColorSpaceCreateIndexed(v62, 0xFFuLL, colorTable);
    CGColorSpaceRelease(v62);
  }
  else if (v59 == 2)
  {
LABEL_135:
    v36 = 0;
    v100 = 0;
    _cg_jpeg_mem_term("initialize", 1043, "*** ERROR: bad header data: modeIndexed, but no paletteData\n");
    goto LABEL_131;
  }
  v63 = (unsigned __int16)v106;
  v64 = v106;
  if (!*((_BYTE *)v102 + 461) && v106 >= 1)
  {
    v65 = 0;
    v66 = 1;
    v67 = v102;
    *((_BYTE *)v102 + 246) = 1;
    v68 = v109;
    goto LABEL_164;
  }
  *((_BYTE *)v102 + 246) = 0;
  v68 = v109;
  if (modeChans[(__int16)v109] >= SWORD2(v108))
  {
    if (v109 == 3)
    {
      v65 = 0;
      v66 = 5;
      v67 = v102;
      *((_BYTE *)v102 + 246) = 5;
      v68 = 3;
      goto LABEL_164;
    }
    v66 = 0;
    v65 = 1;
    goto LABEL_163;
  }
  v66 = 3;
  *((_BYTE *)v102 + 246) = 3;
  if ((v99 & 0x100000000) == 0)
  {
    v65 = 0;
LABEL_163:
    v67 = v102;
    goto LABEL_164;
  }
  if ((v99 & (HIWORD(v108) == 8)) != 1)
  {
    v65 = 0;
    v66 = 3;
    goto LABEL_163;
  }
  v67 = v102;
  v65 = *((_BYTE *)v102 + 464);
  if (v65)
  {
    v65 = 0;
    v66 = 1;
  }
  else
  {
    v66 = 5;
  }
  *((_BYTE *)v102 + 246) = v66;
LABEL_164:
  *((_BYTE *)v67 + 278) = v66;
  v69 = WORD2(v108);
  v70 = WORD2(v108);
  *((_DWORD *)v67 + 110) = SWORD2(v108);
  *((_WORD *)v67 + 122) = v69;
  v71 = modeChans[(__int16)v68];
  if (v70 - v71 < 2)
  {
    if (v70 - v71 == 1)
      *((_BYTE *)v102 + 465) = 1;
    v72 = v70;
  }
  else
  {
    v72 = v71 + 1;
    *((_WORD *)v67 + 122) = v71 + 1;
    *((_BYTE *)v67 + 465) = 1;
    v70 = (unsigned __int16)(v71 + 1);
  }
  if (v71 == v70)
    v73 = v65;
  else
    v73 = 1;
  if ((v73 & 1) != 0)
  {
    v74 = v102;
  }
  else
  {
    ++v72;
    v74 = v102;
    *((_WORD *)v102 + 122) = v72;
  }
  v75 = *(_DWORD *)((char *)&v108 + 10);
  v76 = *(_DWORD *)((char *)&v108 + 6);
  *((_DWORD *)v74 + 57) = *(_DWORD *)((char *)&v108 + 10);
  *((_DWORD *)v74 + 58) = v76;
  if (!v61)
  {
    v77 = *((_DWORD *)v102 + 53);
    if (v77)
    {
      v78 = (double)v75 / (double)v77;
      if (v78 <= (double)v76 / (double)v77)
        v78 = (double)v76 / (double)v77;
      v61 = v78;
    }
    else
    {
      v61 = 0;
    }
  }
  v79 = HIWORD(v108);
  if (v68 == 2 || HIWORD(v108) == 32)
    v81 = 0;
  else
    v81 = v61;
  if (v75 >= v76)
    v82 = v76;
  else
    v82 = v75;
  if (v81 - 1 >= v82)
  {
    v84 = v102;
    *((_WORD *)v102 + 158) = 0;
LABEL_194:
    *((_DWORD *)v84 + 59) = 0;
    goto LABEL_211;
  }
  if (v81 > 0x7F)
  {
    v83 = 128;
    goto LABEL_209;
  }
  if (v81 > 0x3F)
  {
    v83 = 64;
    goto LABEL_209;
  }
  if (v81 > 0x1F)
  {
    v83 = 32;
    goto LABEL_209;
  }
  if (v81 > 0xF)
  {
    v83 = 16;
    goto LABEL_209;
  }
  if (v81 > 7)
  {
    v83 = 8;
    goto LABEL_209;
  }
  if (v81 < 4)
  {
    v84 = v102;
    *((_WORD *)v102 + 158) = 2 * (v81 > 1);
    if (v81 >= 2)
    {
      v83 = 2;
      goto LABEL_210;
    }
    goto LABEL_194;
  }
  v83 = 4;
LABEL_209:
  v84 = v102;
  *((_WORD *)v102 + 158) = v83;
LABEL_210:
  *((_DWORD *)v84 + 65) = v75 / v83;
  *((_DWORD *)v84 + 66) = v76 / v83;
  v85 = ((v75 * v79 * v72 + 7) >> 3) / v83;
  *((_DWORD *)v84 + 67) = v85;
  *((_DWORD *)v84 + 75) = v85;
LABEL_211:
  v86 = v72 * v79;
  *((_WORD *)v84 + 121) = v72 * v79;
  *((_WORD *)v84 + 120) = v79;
  *((_BYTE *)v84 + 344) = 1;
  *((_BYTE *)v84 + 346) = 0;
  if (v79 == 16)
  {
    v87 = (char *)v102 + 247;
LABEL_215:
    *v87 = 1;
  }
  else if (v79 == 32)
  {
    *((_BYTE *)v102 + 249) = 1;
    v87 = (char *)v102 + 345;
    goto LABEL_215;
  }
  if ((v65 & 1) == 0)
  {
    if (v86 == 32)
    {
      v88 = 0;
LABEL_221:
      *((_BYTE *)v102 + 247) = v88;
    }
    else if (v86 == 64)
    {
      v88 = 1;
      goto LABEL_221;
    }
  }
  if (v64 >= 1 && v34)
  {
    *((_WORD *)v102 + 233) = v64;
    v89 = 440 * v63;
    v90 = malloc_type_calloc(v89, 1uLL, 0x1EB63D19uLL);
    *((_QWORD *)v102 + 59) = v90;
    if (!v90)
    {
      v36 = 0;
      _cg_jpeg_mem_term("initialize", 1182, "*** ERROR: failed to allocate '_psd._layerPtr'\n");
      v58 = 4294967246;
      goto LABEL_233;
    }
    memcpy(v90, v34, v89);
  }
  if ((gIIODebugFlags & 0x30000) != 0)
  {
    v91 = ImageIOLog("    PSD-layers\n");
    PSDReadPlugin::dumpLayers((uint64_t)v91, *((unsigned __int16 *)v102 + 233), *((_QWORD *)v102 + 59));
  }
  *((_DWORD *)v102 + 59) = ((*((unsigned __int16 *)v102 + 121) + 7) >> 3) * *((_DWORD *)v102 + 57);
  *((_QWORD *)v102 + 56) = 0;
  *((_WORD *)v102 + 228) = v109;
  *((_QWORD *)v102 + 24) = v45;
  *((_BYTE *)v102 + 460) = 0;
  *((_QWORD *)v102 + 45) = 1;
  if (*((_DWORD *)v102 + 81) == 1281450528)
    *((_BYTE *)v102 + 462) = 1;
  if (*((_WORD *)v102 + 137) == 32)
    *((_BYTE *)v102 + 350) = 1;
  v58 = 0;
  v36 = 0;
  *((_WORD *)v102 + 188) = 1;
  if (v34)
    goto LABEL_233;
LABEL_234:
  v7 = v100;
  if (v100)
LABEL_235:
    free(v7);
  if (v36)
LABEL_237:
    kdebug_trace();
LABEL_238:
  IIOScanner::~IIOScanner((IIOScanner *)v104);
  return v58;
}

void sub_18806F8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18806F71CLL);
  }
  _Unwind_Resume(exception_object);
}

const char *PSDReadPlugin::dumpLayers(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _WORD *v9;
  int v10;
  const char *result;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v4 = 0;
    v5 = a2;
    v6 = a3 + 20;
    v7 = (uint64_t *)(a3 + 312);
    do
    {
      v8 = a3 + 440 * v4;
      ImageIOLog("#%2d:  {%d, %d, %d, %d}   \n", v4, *(_DWORD *)(v8 + 4), *(_DWORD *)v8, *(_DWORD *)(v8 + 12), *(_DWORD *)(v8 + 8));
      v10 = *(unsigned __int16 *)(v8 + 16);
      v9 = (_WORD *)(v8 + 16);
      result = ImageIOLog("       %d channels:\n", v10);
      if (*v9)
      {
        v12 = 0;
        v13 = v7;
        do
        {
          v14 = *(v13 - 32);
          v15 = *(v13 - 16);
          v16 = *v13++;
          result = ImageIOLog("          id: %2d    size: %8lld    offset: 0x%08X    compression: %d\n", *(__int16 *)(v6 + 2 * v12++), v14, v15, v16);
        }
        while (v12 < (unsigned __int16)*v9);
      }
      ++v4;
      v6 += 440;
      v7 += 55;
    }
    while (v4 != v5);
  }
  return result;
}

void PSDReadPlugin::convertPremulWhiteToBlack8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  char v15;

  v4 = (unint64_t)*(double *)(a2 + 32);
  if (v4)
  {
    v5 = 0;
    v6 = *(double *)(a2 + 24);
    v7 = (unint64_t)v6;
    v9 = *(_BYTE **)(a2 + 40);
    v8 = *(_QWORD *)(a2 + 48);
    v10 = v9 + 1;
    do
    {
      if (a4 == 3)
      {
        if (v7)
        {
          v13 = (unint64_t)v6;
          v14 = v10;
          do
          {
            v15 = ~v14[2];
            *(v14 - 1) += v14[2] + 1;
            *v14 -= v15;
            v14[1] -= v15;
            v14 += a3;
            --v13;
          }
          while (v13);
        }
      }
      else if (a4 == 1)
      {
        v11 = (unint64_t)v6;
        v12 = v9;
        if (v7)
        {
          do
          {
            *v12 += v12[1] + 1;
            v12 += a3;
            --v11;
          }
          while (v11);
        }
      }
      v9 += v8;
      ++v5;
      v10 += v8;
    }
    while (v5 != v4);
  }
}

uint64_t PSDReadPlugin::decode_packbits(PSDReadPlugin *this, const unsigned __int8 *a2, unsigned __int8 *__b, unsigned int a4, unsigned int a5, int a6, char a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  int v35;
  uint64_t v36;

  if (!a5)
    return 0;
  v9 = a8;
  v10 = __b;
  v12 = a5;
  v13 = *((unsigned __int16 *)this + 154);
  v14 = &__b[a5];
  v15 = a4;
  v35 = a8;
  while (2)
  {
    v16 = 0;
    v17 = v15;
    do
    {
      if (v17 < 1)
        return 0;
      v18 = (char)a2[v16];
      if ((v18 & 0x8000000000000000) == 0)
      {
        v36 = v9;
        v26 = a2[v16];
        if (v26 >= v12)
        {
          v27 = v12;
          _cg_jpeg_mem_term("decode_packbits", 1498, "*** ERROR: channel[%d] row[%d] discarding %lld bytes to avoid buffer overrun", v35, a9, a2[v16] - v12 + 1);
          v12 = v27;
          v26 = v27 - 1;
        }
        v28 = v26 + 1;
        if (v17 > v26 + 1)
        {
          v24 = &a2[v16 + 1];
          if (a6 == 1)
          {
            v29 = v12;
            memcpy(v10, &a2[v16 + 1], v26 + 1);
            v10 += v28;
            v12 = v29 - v28;
            v24 = &a2[v26 + 2 + v16];
            v15 = v15 - v26 - v16 - 2;
          }
          else
          {
            v15 += ~v16;
            if ((v26 & 0x8000000000000000) == 0 && v10 < v14)
            {
              v30 = 0;
              do
              {
                *v10 = a2[v16 + 1 + v30] ^ a7;
                v10 += v13;
                v31 = v30 + 1;
                if (v26 <= v30)
                  break;
                ++v30;
              }
              while (v10 < v14);
              v12 -= v31;
              v15 = ~v31 + v17;
              v24 = &a2[v16 + 1 + v31];
            }
          }
          v9 = v36;
          goto LABEL_25;
        }
        v33 = 1501;
        LODWORD(v9) = v36;
LABEL_35:
        _cg_jpeg_mem_term("decode_packbits", v33, "*** ERROR: channel[%d] row[%d] terminating PackBitsDecode due to lack of data\n", v9, a9);
        return 4294967246;
      }
      ++v16;
      --v17;
    }
    while ((_DWORD)v18 == -128);
    v19 = 1 - v18;
    v20 = __OFSUB__(1 - v18, v12);
    v21 = 1 - v18 - v12;
    if (!((v21 < 0) ^ v20 | (v21 == 0)))
    {
      v22 = v12;
      _cg_jpeg_mem_term("decode_packbits", 1475, "*** ERROR: channel[%d] row[%d] discarding %lld bytes to avoid buffer overrun\n", v9, a9, v21);
      v12 = v22;
      v19 = v22;
    }
    if (v15 == v16)
    {
      v33 = 1478;
      goto LABEL_35;
    }
    v12 -= v19;
    v24 = &a2[v16 + 1];
    v23 = a2[v16];
    v15 += ~v16;
    if (a6 == 1)
    {
      if (v19 >= 1)
      {
        v25 = v12;
        memset(v10, v23, v19);
        v12 = v25;
        v10 += v19;
      }
    }
    else if (v19 >= 1 && v10 < v14)
    {
      do
      {
        *v10 = v23 ^ a7;
        v10 += v13;
        if ((unint64_t)v19 < 2)
          break;
        --v19;
      }
      while (v10 < v14);
    }
LABEL_25:
    a2 = v24;
    if (v12 > 0)
      continue;
    return 0;
  }
}

void PSDReadPlugin::decode_32_bit_predictor(PSDReadPlugin *this, unsigned __int8 *a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  unint64_t v14;
  unint64_t v15;

  v5 = 4 * a5;
  if (a4)
  {
    v6 = 0;
    v7 = a2 + 1;
    do
    {
      v8 = a2[v6 * v5];
      v9 = (v5 - 1);
      v10 = v7;
      do
      {
        v8 += *v10;
        *v10++ = v8;
        --v9;
      }
      while (v9);
      ++v6;
      v7 += v5;
    }
    while (v6 != a4);
  }
  v11 = (v5 * a4);
  if ((_DWORD)v11)
  {
    v12 = 0;
    for (i = 0; i < v11; i += v5)
    {
      if (a5)
      {
        v14 = i;
        do
        {
          if ((_DWORD)v5)
          {
            v15 = v14;
            do
            {
              a3[v12++] = a2[v15];
              v15 += a5;
            }
            while (v15 < v14 + v5);
          }
          ++v14;
        }
        while (v14 < i + a5);
      }
    }
  }
}

char *PSDReadPlugin::decodeLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  char *v14;
  int64_t v15;
  _DWORD *v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  _BYTE *v25;
  unint64_t v26;
  size_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _DWORD *v32;
  size_t v33;
  unint64_t v34;
  uint64_t v35;
  Bytef *v36;
  Bytef *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  Bytef *v44;
  int v45;
  Bytef *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  _DWORD *v56;
  unsigned __int16 *v57;
  unsigned int v58;
  size_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  int v66;
  int64_t v67;
  char *v68;
  int64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  PSDReadPlugin *v73;
  uint64_t v74;
  uint64_t v75;
  float *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  size_t count;
  int64_t size;
  vImage_Buffer dest;
  z_stream strm;

  if (*(unsigned __int16 *)(a2 + 16) - 3 >= 2)
  {
    _cg_jpeg_mem_term("decodeLayer", 1603, "*** ERROR: unexpected number of channels: %d\n");
    return 0;
  }
  v3 = a2;
  v4 = *(int *)(a2 + 12);
  v5 = *(int *)(a2 + 4);
  v6 = v4 - v5;
  if ((int)v4 - (int)v5 <= 0)
  {
    _cg_jpeg_mem_term("decodeLayer", 1604, "*** ERROR: width <= 0 - skipping layer decoding\n");
    return 0;
  }
  v7 = (uint64_t)*(double *)(a3 + 24);
  if (v7 <= 0)
  {
    _cg_jpeg_mem_term("decodeLayer", 1605, "*** ERROR: height <= 0 - skipping layer decoding\n");
    return 0;
  }
  if (((*(unsigned __int16 *)(a1 + 306) + 7) & 0x1FFF8) != *(unsigned __int16 *)(a1 + 306))
    return 0;
  size = (((unint64_t)*(unsigned __int16 *)(a1 + 304) + 7) >> 3) * v6;
  if (size <= 0)
  {
    _cg_jpeg_mem_term("decodeLayer", 1612, "*** ERROR: rowBytes <= 0 - skipping layer decoding\n");
    return 0;
  }
  v9 = (double)*(int *)a2;
  v10 = *(double *)(a3 + 8);
  v11 = (uint64_t)(v10 - v9);
  if (v10 <= v9)
    v11 = 0;
  if (v11 < 0)
  {
    _cg_jpeg_mem_term("decodeLayer", 1618, "*** ERROR: layerYOffset: %lld\n");
    return 0;
  }
  v12 = 4 * size;
  if (!is_mul_ok(v7, 4 * size))
  {
    _cg_jpeg_mem_term("decodeLayer", 1621, "*** ERROR: bad layer size %ld x %ld (rb: %ld)\n");
    return 0;
  }
  v13 = malloc_type_calloc(v7 * v12, 1uLL, 0x47A63013uLL);
  v14 = (char *)v13;
  if (!v13)
  {
    _cg_jpeg_mem_term("decodeLayer", 1626, "*** ERROR: failed to allocate 'buffer' (%ld bytes)\n");
    return v14;
  }
  if (*(_WORD *)(v3 + 16) == 3)
  {
    if (*(_WORD *)(a1 + 304) == 32)
    {
      LODWORD(v15) = 0;
      v16 = v13 + 3;
      do
      {
        v17 = 0;
        do
        {
          *v16 = 1065353216;
          v16 += 4;
          ++v17;
        }
        while (v17 < v6);
        v15 = (v15 + 1);
      }
      while (v15 < v7);
    }
    else
    {
      memset(v13, 255, v7 * v12);
    }
  }
  if ((v12 & 0x80000000) == 0)
  {
    v18 = malloc_type_calloc((8 * size), 1uLL, 0x66072EFDuLL);
    if (!v18)
    {
      _cg_jpeg_mem_term("decodeLayer", 1650, "*** ERROR: failed to allocate 'rleRow' (%d bytes)\n");
      return v14;
    }
    v85 = v18;
    count = v7;
    v88 = v14;
    if (!*(_WORD *)(v3 + 16))
    {
LABEL_111:
      free(v85);
      return v88;
    }
    v19 = 0;
    v89 = v6 * count;
    v86 = 2 * count;
    v87 = 4 * count;
    v20 = 2;
    if ((unint64_t)v6 > 2)
      v20 = v4 - v5;
    if (count <= 1)
      v21 = 1;
    else
      v21 = count;
    v84 = v21;
    v82 = 2 * v4 - 2 * v5;
    v83 = v20 - 1;
    v90 = v3;
    while (1)
    {
      v22 = (_QWORD *)(v3 + 8 * v19);
      v23 = v22[39];
      if ((unint64_t)(v23 - 2) < 2)
      {
        v34 = v22[23] + 2;
        v35 = v22[7] - 2;
        v36 = (Bytef *)malloc_type_calloc(v35, 1uLL, 0x428221B0uLL);
        v37 = (Bytef *)malloc_type_calloc(count, size, 0x297104E6uLL);
        if (IIOImageReadSession::getBytesAtOffset(*(IIOImageReadSession **)(a1 + 24), v36, v34, v35) == v35)
        {
          memset(&strm.avail_in, 0, 104);
          strm.next_in = v36;
          strm.avail_in = v35;
          strm.next_out = v37;
          strm.avail_out = size * count;
          if (inflateInit_(&strm, "1.2.12", 112) || inflate(&strm, 4) != 1)
            _cg_jpeg_mem_term("decodeLayer", 1835, "*** ERROR: inflate failed\n");
          else
            inflateEnd(&strm);
          if (v22[39] == 3)
          {
            v42 = *(unsigned __int16 *)(a1 + 304);
            if (v42 == 32)
            {
              v73 = (PSDReadPlugin *)malloc_type_malloc(4 * v6 * count, 0xFF891555uLL);
              PSDReadPlugin::decode_32_bit_predictor(v73, v37, (unsigned __int8 *)v73, count, v6);
              if (v89 >= 1)
              {
                v74 = 0;
                do
                {
                  *((_DWORD *)v73 + v74) = bswap32(*((_DWORD *)v73 + v74));
                  ++v74;
                }
                while (v89 > v74);
                v75 = 0;
                v76 = (float *)&v88[4 * v19];
                do
                {
                  *v76 = (float)bswap32(*((float *)v73 + v75));
                  v76 += 4;
                  ++v75;
                }
                while (v89 > v75);
              }
            }
            else if (v42 == 16)
            {
              dest.data = v37;
              dest.height = count;
              dest.width = v6;
              dest.rowBytes = size;
              vImageByteSwap_Planar16U(&dest, &dest, 0x10u);
              v43 = 0;
              v44 = v37 + 2;
              do
              {
                if (v6 >= 2)
                {
                  v45 = *(unsigned __int16 *)&v37[2 * v6 * v43];
                  v46 = v44;
                  v47 = v83;
                  do
                  {
                    v45 += *(unsigned __int16 *)v46;
                    *(_WORD *)v46 = v45;
                    v46 += 2;
                    --v47;
                  }
                  while (v47);
                }
                ++v43;
                v44 += v82;
              }
              while (v43 != v84);
              if (v89 >= 1)
              {
                v48 = 0;
                v49 = &v88[2 * v19];
                do
                {
                  *(_WORD *)v49 = *(_WORD *)&v37[2 * v48];
                  v49 += 8;
                  ++v48;
                }
                while (v89 > v48);
              }
            }
          }
        }
      }
      else if (v23)
      {
        if (v23 != 1)
        {
          _cg_jpeg_mem_term("decodeLayer", 1887, "*** ERROR: invalid compression: %d\n", v23);
LABEL_114:
          free(v85);
          free(v88);
          return 0;
        }
        v24 = (unint64_t *)malloc_type_calloc(count, 8uLL, 0x100004000313F17uLL);
        v25 = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
        v26 = *(_QWORD *)(v3 + 8 * v19 + 184) + 2;
        if (*(_BYTE *)(a1 + 463))
        {
          v27 = 0;
          if (IIOImageReadSession::getBytesAtOffset(*(IIOImageReadSession **)(a1 + 24), v25, *(_QWORD *)(v3 + 8 * v19 + 184) + 2, v87) == v87&& (_DWORD)count != 0)
          {
            v29 = v26 + v87;
            v30 = count;
            v31 = v24;
            v32 = v25;
            do
            {
              v33 = bswap32(*(unsigned __int16 *)v32) >> 16;
              if (v27 <= v33)
                v27 = v33;
              *v32++ = v33;
              *v31++ = v29;
              v29 += v33;
              --v30;
            }
            while (v30);
          }
        }
        else
        {
          v50 = (unsigned __int16 *)malloc_type_calloc(count, 2uLL, 0x1000040BDFB0063uLL);
          if (!v50)
            goto LABEL_111;
          v51 = v50;
          v27 = 0;
          if (IIOImageReadSession::getBytesAtOffset(*(IIOImageReadSession **)(a1 + 24), v50, v26, v86) == v86
            && (_DWORD)count != 0)
          {
            v53 = v26 + v86;
            v54 = count;
            v55 = v24;
            v56 = v25;
            v57 = v51;
            do
            {
              v58 = *v57++;
              v59 = bswap32(v58) >> 16;
              if (v27 <= v59)
                v27 = v59;
              *v56++ = v59;
              *v55++ = v53;
              v53 += v59;
              --v54;
            }
            while (v54);
          }
          free(v51);
        }
        v60 = (unsigned __int8 *)malloc_type_malloc(v27, 0xEDB386D8uLL);
        v61 = (unsigned __int8 *)malloc_type_malloc(size, 0xE26258CAuLL);
        if ((_DWORD)count)
        {
          v62 = v61;
          v63 = 0;
          v64 = v88;
          do
          {
            v65 = *(unsigned int *)&v25[4 * v63];
            if (IIOImageReadSession::getBytesAtOffset(*(IIOImageReadSession **)(a1 + 24), v60, v24[v63], v65) == v65)
            {
              if (PSDReadPlugin::decode_packbits((PSDReadPlugin *)a1, v60, v62, v65, size, 1, 0, v19, v63))goto LABEL_114;
              v66 = *(unsigned __int16 *)(a1 + 304);
              switch(v66)
              {
                case 32:
                  v69 = 0;
                  v70 = &v64[4 * v19];
                  do
                  {
                    *(_DWORD *)v70 = bswap32(*(_DWORD *)&v62[4 * v69]);
                    v70 += 16;
                    ++v69;
                  }
                  while (v69 < v6);
                  break;
                case 16:
                  v71 = 0;
                  v72 = &v64[2 * v19];
                  do
                  {
                    *(_WORD *)v72 = *(_WORD *)&v62[2 * v71];
                    v72 += 8;
                    ++v71;
                  }
                  while (v71 < v6);
                  break;
                case 8:
                  v67 = 0;
                  v68 = v64;
                  do
                  {
                    v68[v19] = v62[v67++];
                    v68 += 4;
                  }
                  while (v67 < v6);
                  break;
              }
              v64 += 4 * size;
            }
            ++v63;
          }
          while (v63 != count);
        }
      }
      else
      {
        v38 = malloc_type_calloc(count, size, 0x6A5410C0uLL);
        if (IIOImageReadSession::getBytesAtOffset(*(IIOImageReadSession **)(a1 + 24), v38, *(_QWORD *)(v3 + 8 * v19 + 184) + 2, size * count) == size * count)
        {
          v39 = *(unsigned __int16 *)(a1 + 304);
          if (v39 == 32)
          {
            if (v89 >= 1)
            {
              v77 = 0;
              v78 = &v88[4 * v19];
              do
              {
                *(_DWORD *)v78 = bswap32(*(_DWORD *)&v38[4 * v77]);
                v78 += 16;
                ++v77;
              }
              while (v89 > v77);
            }
          }
          else if (v39 == 16)
          {
            if (v89 >= 1)
            {
              v79 = 0;
              v80 = &v88[2 * v19];
              do
              {
                *(_WORD *)v80 = *(_WORD *)&v38[2 * v79];
                v80 += 8;
                ++v79;
              }
              while (v89 > v79);
            }
          }
          else if (v39 == 8 && v89 >= 1)
          {
            v40 = 0;
            v41 = &v88[v19];
            do
            {
              *v41 = v38[v40];
              v41 += 4;
              ++v40;
            }
            while (v89 > v40);
          }
        }
        free(v38);
      }
      ++v19;
      v3 = v90;
      if (v19 >= *(unsigned __int16 *)(v90 + 16))
        goto LABEL_111;
    }
  }
  return v14;
}

__n128 PSDReadPlugin::mergeLayers(PSDReadPlugin *this, IIODecodeFrameParams *a2, __n128 result)
{
  unsigned int v4;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  CGFloat v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  unsigned int v17;
  double v18;
  double y;
  double width;
  double height;
  double v24;
  char *v25;
  char *v26;
  unsigned int v27;
  size_t v28;
  CGFloat r1;
  vImage_Buffer dest;
  vImage_Buffer srcTop;
  _QWORD v32[4];
  _DWORD __dst[112];
  CGRect v34;
  CGRect v35;
  CGRect v36;

  if (!*((_QWORD *)this + 59))
    return _cg_jpeg_mem_term("mergeLayers", 1915, "*** Error: MergeLayers was called with NULL _layerPtr\n");
  v4 = *((unsigned __int16 *)this + 233);
  if (*((_WORD *)this + 233))
  {
    v6 = 0;
    v7 = 0;
    v8 = *((double *)a2 + 1);
    v9 = *((double *)a2 + 2);
    v10 = *((double *)a2 + 4);
    r1 = *((double *)a2 + 3);
    do
    {
      memcpy(__dst, (const void *)(*((_QWORD *)this + 59) + v6), 0x1B8uLL);
      if (BYTE2(__dst[4]))
      {
        v12 = __dst[2];
        v11 = __dst[3];
        v14 = __dst[0];
        v13 = __dst[1];
        v15 = __dst[3] - __dst[1];
        v16 = (double)__dst[1];
        v36.origin.y = (double)__dst[0];
        v36.size.width = (double)(__dst[3] - __dst[1]);
        v36.size.height = (double)(__dst[2] - __dst[0]);
        v34.origin.x = v8;
        v34.origin.y = v9;
        v34.size.width = r1;
        v34.size.height = v10;
        v36.origin.x = (double)__dst[1];
        *(CGRect *)result.n128_u64 = CGRectIntersection(v34, v36);
        v32[0] = result.n128_u64[0];
        v32[1] = *(_QWORD *)&v35.origin.y;
        v32[2] = *(_QWORD *)&v35.size.width;
        v32[3] = *(_QWORD *)&v35.size.height;
        v17 = *((unsigned __int16 *)this + 152);
        if ((v17 & 7) != 0)
          return result;
        v18 = result.n128_f64[0];
        result.n128_u64[0] = *((_QWORD *)a2 + 3);
        if (*((_QWORD *)a2 + 6) >= 4 * (unint64_t)result.n128_f64[0] && v12 > v14 && v11 > v13)
        {
          y = v35.origin.y;
          width = v35.size.width;
          height = v35.size.height;
          v24 = v18;
          if (!CGRectIsEmpty(v35))
          {
            v25 = PSDReadPlugin::decodeLayer((uint64_t)this, (uint64_t)__dst, (uint64_t)v32);
            if (v25)
            {
              v26 = v25;
              v27 = v17 >> 3;
              srcTop.data = &v25[(v17 >> 3) * ((v13 >> 31) & (4 * (int)(v18 - v16)))];
              srcTop.height = (unint64_t)height;
              srcTop.width = (unint64_t)width;
              srcTop.rowBytes = 4 * v15 * (v17 >> 3);
              v28 = *((_QWORD *)a2 + 6);
              dest.data = (void *)(*((_QWORD *)a2 + 5) + v28 * (int)(y - v9) + 4 * (int)(v18 - v8) * (v17 >> 3));
              dest.height = (unint64_t)height;
              dest.width = (unint64_t)width;
              dest.rowBytes = v28;
              if (v17 >> 3 == 4)
              {
                AlphaBlend<unsigned int>((uint64_t *)&srcTop, (uint64_t *)&dest, (uint64_t *)&dest);
              }
              else if (v27 == 2)
              {
                AlphaBlend<unsigned short>((uint64_t *)&srcTop, (uint64_t *)&dest, (uint64_t *)&dest);
              }
              else if (v27 == 1)
              {
                vImageAlphaBlend_ARGB8888(&srcTop, &dest, &dest, 0x10u);
              }
              free(v26);
            }
          }
        }
        v4 = *((unsigned __int16 *)this + 233);
      }
      ++v7;
      v6 += 440;
    }
    while (v7 < v4);
  }
  return result;
}

uint64_t AlphaBlend<unsigned short>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _WORD *v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;

  v3 = a1[1];
  if (v3)
  {
    LODWORD(v4) = 0;
    v5 = *a3;
    v6 = *a2;
    v7 = *a1;
    v8 = a1[2];
    v9 = a1[3];
    v10 = a2[3];
    v11 = a3[3];
    do
    {
      if (v8)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          v14 = (_WORD *)(v5 + v12);
          v15 = *(_WORD *)(v7 + v12);
          v16 = *(_WORD *)(v7 + v12 + 4);
          v17 = *(_WORD *)(v7 + v12 + 6);
          v18 = *(_WORD *)(v6 + v12 + 2);
          v19 = *(_WORD *)(v6 + v12 + 4);
          *v14 = *(_WORD *)(v7 + v12 + 2) + *(_WORD *)(v6 + v12) * ~v15;
          v14[1] = v16 + v18 * ~v15;
          v14[2] = v17 + v19 * ~v15;
          v14[3] = v15;
          v12 += 8;
        }
        while (v8 > v13++);
      }
      v7 += v9;
      v6 += v10;
      v5 += v11;
      v4 = (v4 + 1);
    }
    while (v3 > v4);
  }
  return 0;
}

uint64_t AlphaBlend<unsigned int>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int32x2_t *v14;
  __int32 v15;
  int v16;
  int v17;

  v3 = a1[1];
  if (v3)
  {
    LODWORD(v4) = 0;
    v5 = *a3;
    v6 = *a2;
    v7 = *a1;
    v8 = a1[2];
    v9 = a1[3];
    v10 = a2[3];
    v11 = a3[3];
    do
    {
      if (v8)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          v14 = (int32x2_t *)(v5 + v12);
          v15 = *(_DWORD *)(v7 + v12);
          v16 = *(_DWORD *)(v7 + v12 + 12);
          v17 = *(_DWORD *)(v6 + v12 + 8);
          *v14 = vmla_s32(*(int32x2_t *)(v7 + v12 + 4), *(int32x2_t *)(v6 + v12), vdup_n_s32(~v15));
          v14[1].i32[0] = v16 + v17 * ~v15;
          v14[1].i32[1] = v15;
          v12 += 16;
        }
        while (v8 > v13++);
      }
      v7 += v9;
      v6 += v10;
      v5 += v11;
      v4 = (v4 + 1);
    }
    while (v3 > v4);
  }
  return 0;
}

void PSDReadPlugin::handlePremultiplication(PSDReadPlugin *this, IIODecodeFrameParams *a2, unsigned int a3)
{
  int v3;
  size_t v4;
  int8x16_t v5;
  vImage_Buffer v6;

  if (*((_BYTE *)this + 460) && *((_BYTE *)this + 278))
  {
    v3 = *((unsigned __int16 *)this + 228);
    if (v3 == 1)
    {
      if (*((_WORD *)this + 120) == 8)
        PSDReadPlugin::convertPremulWhiteToBlack8((uint64_t)this, (uint64_t)a2, a3, 1);
    }
    else if (v3 == 3 && *((_WORD *)this + 120) == 8)
    {
      v4 = *((_QWORD *)a2 + 6);
      v6.data = (void *)*((_QWORD *)a2 + 5);
      v5 = (int8x16_t)vcvtq_u64_f64(*(float64x2_t *)((char *)a2 + 24));
      *(int8x16_t *)&v6.height = vextq_s8(v5, v5, 8uLL);
      v6.rowBytes = v4;
      vImagePremultiplyData_RGBA8888(&v6, &v6, 0x10u);
    }
  }
}

uint64_t PSDReadPlugin::readDataSizeTable(PSDReadPlugin *this, unsigned int **a2, unsigned int **a3, unint64_t *a4)
{
  unsigned int v7;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *((_DWORD *)this + 58);
  if (!v7)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2110, "*** ERROR: readDataSizeTable height is 0\n");
LABEL_31:
    v11 = 0;
LABEL_32:
    v12 = 0;
    goto LABEL_33;
  }
  v9 = *((_DWORD *)this + 110);
  if (!v9)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2111, "*** ERROR: readDataSizeTable NumberOfChannels is 0\n");
    goto LABEL_31;
  }
  v10 = v7 * (unint64_t)v9;
  if ((v10 & 0xFFFFFFFF00000000) != 0)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2114, "*** ERROR: bad numValues (%d x %d)\n");
    goto LABEL_31;
  }
  if (v10 >> 30)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2117, "*** ERROR: bad table size %d x %d\n");
    goto LABEL_31;
  }
  v11 = (char *)malloc_type_calloc((4 * v10), 1uLL, 0x97FD4E50uLL);
  if (!v11)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2120, "*** ERROR: failed to allocate 'localDataSizeTable'\n");
    goto LABEL_32;
  }
  v12 = (unsigned int *)malloc_type_calloc((4 * v10), 1uLL, 0x5C3258B9uLL);
  if (!v12)
  {
    _cg_jpeg_mem_term("readDataSizeTable", 2123, "*** ERROR: failed to allocate 'localOffsetsTable'\n");
    goto LABEL_33;
  }
  if (!*((_BYTE *)this + 463))
  {
    v17 = malloc_type_calloc((2 * v10), 1uLL, 0x2DDB12F5uLL);
    if (v17)
    {
      if (IIOImageReadSession::getBytesAtOffset(*((IIOImageReadSession **)this + 3), v17, *((_QWORD *)this + 24) + 2, (2 * v10)) == 2 * (_DWORD)v10)
      {
        if ((_DWORD)v10)
        {
          v18 = 0;
          v14 = 0;
          v19 = *((_QWORD *)this + 24) + 2 * (*((_DWORD *)this + 110) * *((_DWORD *)this + 58)) + 2;
          do
          {
            v20 = bswap32(*(unsigned __int16 *)&v17[2 * v18]);
            v21 = HIWORD(v20);
            *(_DWORD *)&v11[4 * v18] = v21;
            if (v14 <= HIWORD(v20))
              v14 = HIWORD(v20);
            v12[v18] = v19;
            v19 += v21;
            ++v18;
          }
          while (v10 != v18);
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
    else
    {
      _cg_jpeg_mem_term("readDataSizeTable", 2147, "*** ERROR: failed to allocate 'shortDataSizeTable'\n");
    }
LABEL_34:
    free(v17);
    free(v11);
    v14 = 0;
    v22 = 0;
    v11 = 0;
    v17 = v12;
    v12 = 0;
    goto LABEL_26;
  }
  if (IIOImageReadSession::getBytesAtOffset(*((IIOImageReadSession **)this + 3), v11, *((_QWORD *)this + 24) + 2, (4 * v10)) != 4 * (_DWORD)v10)
  {
LABEL_33:
    v17 = 0;
    goto LABEL_34;
  }
  if ((_DWORD)v10)
  {
    v13 = 0;
    v14 = 0;
    v15 = *((_QWORD *)this + 24) + 4 * (*((_DWORD *)this + 110) * *((_DWORD *)this + 58)) + 2;
    do
    {
      v16 = bswap32(*(_DWORD *)&v11[v13 * 4]);
      *(_DWORD *)&v11[v13 * 4] = v16;
      if (v16 > v14)
        v14 = v16;
      v12[v13] = v15;
      v15 += v16;
      ++v13;
    }
    while (v10 != v13);
    v17 = 0;
    goto LABEL_25;
  }
  v17 = 0;
LABEL_24:
  v14 = 0;
LABEL_25:
  v22 = 1;
LABEL_26:
  free(v17);
  *a2 = (unsigned int *)v11;
  *a3 = v12;
  *a4 = v14;
  return v22;
}

uint64_t PSDReadPlugin::decodeBlock(PSDReadPlugin *this, IIODecodeFrameParams *a2, unsigned int a3, unsigned int a4, __n128 a5)
{
  IIODecodeFrameParams *v6;
  double v7;
  double v8;
  int v9;
  int v10;
  unsigned int v12;
  size_t v13;
  malloc_type_id_t v14;
  size_t v15;
  int8x16_t v16;
  int v17;
  unsigned int *v18;
  PSDReadPlugin *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  double v24;
  double v25;
  size_t v26;
  double v27;
  double v28;
  size_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  char *v47;
  unsigned int v48;
  __n128 v49;
  int v50;
  uint64_t v51;
  char *v52;
  int v53;
  char *v54;
  unsigned int *v55;
  char v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int *v62;
  char *v63;
  unsigned int v64;
  double v65;
  uint64_t v66;
  unsigned int *v67;
  double v68;
  uint64_t v69;
  char *v70;
  char *v71;
  size_t v72;
  int8x16_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  size_t count;
  uint64_t v85;
  uint64_t v86;
  PSDReadPlugin *v87;
  unint64_t v88;
  uint64_t v89;
  double *v90;
  char *v91;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  unint64_t v94;
  unsigned int *v95;
  unsigned int *v96;

  v6 = a2;
  v7 = *((double *)a2 + 2);
  v8 = *((double *)a2 + 4);
  v9 = *((_DWORD *)this + 57);
  v10 = *((unsigned __int16 *)this + 120);
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v87 = this;
  if (!*((_BYTE *)this + 461))
  {
    if (*((_BYTE *)this + 246))
    {
      bzero(*((void **)a2 + 5), *((_QWORD *)a2 + 6) * (unint64_t)v8);
      this = v87;
      v10 = *((unsigned __int16 *)v87 + 120);
    }
    if (v10 == 1)
      goto LABEL_111;
    PSDReadPlugin::mergeLayers(v87, v6, a5);
    this = v87;
    v15 = *((_QWORD *)v6 + 6);
    dest.data = (void *)*((_QWORD *)v6 + 5);
    v16 = (int8x16_t)vcvtq_u64_f64(*(float64x2_t *)((char *)v6 + 24));
    *(int8x16_t *)&dest.height = vextq_s8(v16, v16, 8uLL);
    dest.rowBytes = v15;
    if (*((_WORD *)v87 + 152) != 8)
      goto LABEL_111;
    if (*((_BYTE *)v87 + 404) == 1)
    {
      v17 = 66051;
    }
    else
    {
      if (v15 < 4 * v16.i64[0])
      {
        _cg_jpeg_mem_term("decodeBlock", 2435, "*** ERROR: vImagePermuteChannels_ARGB8888 - width: %d  rowBytes: %d\n", v16.i32[0], v15);
LABEL_110:
        this = v87;
LABEL_111:
        v32 = 0;
        v18 = 0;
        v71 = 0;
        v30 = 0;
        v22 = 0;
        goto LABEL_112;
      }
      v17 = 197121;
    }
    *(_DWORD *)permuteMap = v17;
    vImagePermuteChannels_ARGB8888(&dest, &dest, permuteMap, 0x10u);
    goto LABEL_110;
  }
  v12 = v9 * v10 + 7;
  count = v12 >> 3;
  if (*((_WORD *)this + 229) == 1)
  {
    if (PSDReadPlugin::readDataSizeTable(this, &v95, &v96, &v94))
    {
      v13 = v94;
      if (v94)
      {
        v14 = 1863895455;
        goto LABEL_14;
      }
    }
LABEL_127:
    v18 = 0;
    goto LABEL_130;
  }
  if (v12 < 8)
    goto LABEL_127;
  v13 = v12 >> 3;
  v14 = 2817939150;
LABEL_14:
  v18 = (unsigned int *)malloc_type_calloc(v13, 1uLL, v14);
  v19 = v87;
  if (!v18)
  {
    _cg_jpeg_mem_term("decodeBlock", 2223, "*** ERROR: failed to allocate 'scanLineData'\n");
    goto LABEL_130;
  }
  if (*((_WORD *)v87 + 120) == 1)
  {
    v20 = (char *)malloc_type_calloc(*((_QWORD *)v6 + 6), 1uLL, 0x1AD45839uLL);
    if (v20)
    {
      v21 = v20;
      v22 = operator new();
      IIOPixelConverterGray::IIOPixelConverterGray(v22, 6, 1, 1u, *((_BYTE *)v87 + 246) != 0, 6, 8u, 0, 0);
      v19 = v87;
      goto LABEL_19;
    }
    _cg_jpeg_mem_term("decodeBlock", 2229, "*** ERROR: failed to allocate 'tempData'\n");
LABEL_130:
    *((_QWORD *)v6 + 8) = 0;
    v75 = 4294967246;
    goto LABEL_120;
  }
  v21 = 0;
  v22 = 0;
LABEL_19:
  if (*((unsigned __int8 *)v19 + 278) - 5 > 1)
    goto LABEL_26;
  if (!*((_BYTE *)v87 + 345))
  {
LABEL_24:
    memset(*((void **)v6 + 5), 255, (unint64_t)(*((double *)v6 + 4) * (double)*((unint64_t *)v6 + 6)));
    goto LABEL_26;
  }
  v23 = *((unsigned __int16 *)v87 + 136);
  if (v23 != 32)
  {
    if (v23 == 16)
    {
      v25 = *((double *)v6 + 3);
      v24 = *((double *)v6 + 4);
      v26 = *((_QWORD *)v6 + 6);
      dest.data = (void *)*((_QWORD *)v6 + 5);
      dest.height = (unint64_t)v24;
      dest.width = 4 * (unint64_t)v25;
      dest.rowBytes = v26;
      vImageOverwriteChannelsWithScalar_Planar16U(0x3C00u, &dest, 0x10u);
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  v28 = *((double *)v6 + 3);
  v27 = *((double *)v6 + 4);
  v29 = *((_QWORD *)v6 + 6);
  dest.data = (void *)*((_QWORD *)v6 + 5);
  dest.height = (unint64_t)v27;
  dest.width = 4 * (unint64_t)v28;
  dest.rowBytes = v29;
  vImageOverwriteChannelsWithScalar_PlanarF(1.0, &dest, 0x10u);
LABEL_26:
  v91 = v21;
  v30 = (unsigned __int8 *)malloc_type_malloc(*((unsigned int *)v6 + 12), 0xE471BB60uLL);
  v78 = a4;
  if (!a3)
  {
    v32 = 0;
    this = v87;
LABEL_94:
    if (*((_DWORD *)this + 81) == 1380401696)
    {
      a4 = v78;
      v71 = v91;
      if (*((_DWORD *)this + 110) == 4 && *((_BYTE *)this + 278) == 5)
      {
        v72 = *((_QWORD *)v6 + 6);
        dest.data = (void *)*((_QWORD *)v6 + 5);
        v73 = (int8x16_t)vcvtq_u64_f64(*(float64x2_t *)((char *)v6 + 24));
        *(int8x16_t *)&dest.height = vextq_s8(v73, v73, 8uLL);
        dest.rowBytes = v72;
        v74 = *((unsigned __int16 *)this + 152);
        if (v74 == 8)
          vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, &dest, &dest, 1u, 0x10u);
        else
          _cg_jpeg_mem_term("decodeBlock", 2405, "*** RGB-%d: check alpha-one?\n", v74);
        this = v87;
      }
    }
    else
    {
      a4 = v78;
      v71 = v91;
    }
LABEL_112:
    PSDReadPlugin::handlePremultiplication(this, v6, a4);
    v83 = 0;
    goto LABEL_113;
  }
  v31 = 0;
  v32 = 0;
  v33 = a4;
  v80 = (v8 + (double)v7);
  v79 = a3;
  v81 = 2 * a4;
  v82 = 4 * a4;
  v83 = -50;
  this = v87;
  v90 = (double *)v6;
  v86 = v22;
  while (1)
  {
    v34 = v31;
    if (v31 <= 3)
    {
      v34 = v31;
      if (*((_BYTE *)this + 404) == 1)
        v34 = *((_DWORD *)&xmmword_18822B2D0 + v31);
    }
    v35 = *((unsigned __int16 *)this + 228);
    v36 = v35 != 4 || v34 >= 4;
    v37 = !v36 || v35 == 0;
    v38 = v37;
    v39 = v7;
    v40 = *((_WORD *)this + 229) == 1
        ? (*((_DWORD *)this + 58) * v31)
        : *((_QWORD *)this + 24)
        + count * (unint64_t)(*((_DWORD *)this + 58) * v31)
        + 2;
    v88 = v40;
    v85 = v31;
    if (v7 < v80)
      break;
LABEL_91:
    v31 = v85 + 1;
    if (v85 + 1 == v79)
      goto LABEL_94;
  }
  v41 = 0;
  v42 = v38 << 31 >> 31;
  v89 = v34;
  while (1)
  {
    if (*((_WORD *)this + 229) == 1)
    {
      v43 = v96[v88 + v39];
      v44 = v95[v88 + v39];
      if (!v95[v88 + v39])
        goto LABEL_100;
    }
    else
    {
      v44 = count;
      v43 = v88 + v39 * count;
      if (!count)
      {
LABEL_100:
        v49 = _cg_jpeg_mem_term("decodeBlock", 2303, "*** ERROR: corrupt PSD image: row[%d]: srcDataLen==0\n");
        goto LABEL_102;
      }
    }
    v45 = (unsigned __int16 *)this;
    if (IIOImageReadSession::getBytesAtOffset(*((IIOImageReadSession **)this + 3), v18, v43, v44) != v44)
    {
      v49 = _cg_jpeg_mem_term("decodeBlock", 2306, "*** ERROR: failed to read scanline (expected: %d got: %d\n");
      goto LABEL_102;
    }
    v46 = *((_QWORD *)v6 + 6);
    if (v91)
      v47 = v91;
    else
      v47 = (char *)(*((_QWORD *)v6 + 5) + v46 * v41);
    if (v45[229] != 1)
    {
      v53 = v45[120];
      switch(v53)
      {
        case 32:
          if (v44 >= 4)
          {
            v57 = v44 >> 2;
            v58 = v18;
            v59 = (unsigned int *)&v47[4 * v89];
            do
            {
              v60 = *v58++;
              *v59 = bswap32(v60) ^ v42;
              v59 = (unsigned int *)((char *)v59 + v82);
              --v57;
            }
            while (v57);
          }
          break;
        case 16:
          if (v44 >= 2)
          {
            v61 = v44 >> 1;
            v62 = v18;
            v63 = &v47[2 * v89];
            do
            {
              v64 = *(unsigned __int16 *)v62;
              v62 = (unsigned int *)((char *)v62 + 2);
              *(_WORD *)v63 = v42 ^ (bswap32(v64) >> 16);
              v63 += v81;
              --v61;
            }
            while (v61);
          }
          break;
        case 8:
          v54 = &v47[v89];
          v55 = v18;
          do
          {
            v56 = *(_BYTE *)v55;
            v55 = (unsigned int *)((char *)v55 + 1);
            *v54 = v56 ^ v42;
            v54 += v33;
            --v44;
          }
          while (v44);
          break;
      }
      v6 = (IIODecodeFrameParams *)v90;
      v22 = v86;
      if (!v86)
        goto LABEL_78;
      goto LABEL_77;
    }
    v48 = PSDReadPlugin::decode_packbits((PSDReadPlugin *)v45, (const unsigned __int8 *)v18, v30, v44, v46, 1, 0, v85, v39);
    if (v48)
      break;
    v50 = v45[120];
    v22 = v86;
    if (v50 == 32)
    {
      v65 = v90[3];
      if (v65 > 0.0)
      {
        v66 = 0;
        v67 = (unsigned int *)&v47[4 * v89];
        do
        {
          *v67 = bswap32(*(_DWORD *)&v30[4 * v66++]) ^ v42;
          v67 = (unsigned int *)((char *)v67 + v82);
        }
        while (v65 > (double)(int)v66);
      }
LABEL_89:
      v83 = 0;
      v6 = (IIODecodeFrameParams *)v90;
      if (!v86)
        goto LABEL_78;
      goto LABEL_77;
    }
    if (v50 == 16)
    {
      v68 = v90[3];
      if (v68 > 0.0)
      {
        v69 = 0;
        v70 = &v47[2 * v89];
        do
        {
          *(_WORD *)v70 = v42 ^ (bswap32(*(unsigned __int16 *)&v30[2 * v69++]) >> 16);
          v70 += v81;
        }
        while (v68 > (double)(int)v69);
      }
      goto LABEL_89;
    }
    if (v50 != 8 || v90[3] <= 0.0)
      goto LABEL_89;
    v51 = 0;
    v52 = &v47[v89];
    v6 = (IIODecodeFrameParams *)v90;
    do
    {
      *v52 = v30[v51] ^ v42;
      v52 += v33;
      ++v51;
    }
    while (v90[3] > (double)(int)v51);
    v83 = 0;
    if (!v86)
      goto LABEL_78;
LABEL_77:
    (*(void (**)(uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v22 + 24))(v22, v91, *((_QWORD *)v6 + 5) + *((_QWORD *)v6 + 6) * v41 + v89, *((double *)v6 + 3));
LABEL_78:
    if (v32 <= ++v39)
      v32 = v39;
    ++v41;
    this = v87;
    if (v80 - v7 == (_DWORD)v41)
      goto LABEL_91;
  }
  v83 = v48;
  v6 = (IIODecodeFrameParams *)v90;
LABEL_102:
  v22 = v86;
  v71 = v91;
LABEL_113:
  *((_QWORD *)v6 + 8) = v32;
  if (v71)
    free(v71);
  if (v30)
    free(v30);
  if (v22)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v22 + 8))(v22, v49);
  v75 = v83;
LABEL_120:
  v76 = v75;
  if (v18)
  {
    free(v18);
    v75 = v76;
  }
  if (v95)
  {
    free(v95);
    v75 = v76;
  }
  if (v96)
  {
    free(v96);
    return v76;
  }
  return v75;
}

void sub_18807175C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10F1C4050BC5624);
  _Unwind_Resume(a1);
}

uint64_t PSDReadPlugin::decodeBlockSubsampled(PSDReadPlugin *this, IIODecodeFrameParams *a2, int a3, unsigned int a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  unint64_t v20;
  double v21;
  unsigned int v22;
  char v23;
  size_t v24;
  malloc_type_id_t v25;
  PSDReadPlugin *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int8x16_t v31;
  __n128 v32;
  double v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  __n128 v37;
  double v38;
  double v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  char v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int v67;
  double v68;
  uint64_t v69;
  unsigned int v72;
  size_t count;
  unint64_t v75;
  unsigned int v76;
  unsigned __int8 *__b;
  unint64_t v78;
  uint64_t v79;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  unsigned __int8 *src;
  unint64_t src_8;
  unint64_t src_16;
  float64x2_t src_24;
  unsigned __int8 *v87;
  size_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  _BYTE v92[56];
  unint64_t v93;
  unsigned int *v94;
  unsigned int *v95;

  v6 = *((double *)a2 + 1);
  v5 = *((double *)a2 + 2);
  v7 = *((double *)a2 + 3);
  v8 = *((double *)a2 + 4);
  v9 = *((_DWORD *)this + 57);
  v10 = *((unsigned __int16 *)this + 120);
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v11 = *((unsigned __int16 *)this + 158);
  v12 = (double)v11;
  v13 = v7 * (double)v11;
  v14 = v8 * (double)v11;
  v15 = *((_QWORD *)a2 + 6);
  v16 = v15 * v11;
  if ((0x1000000 / (v15 * v11) + v11 - 1) / v11 * v11 >= (unint64_t)v14)
    v17 = (unint64_t)v14;
  else
    v17 = (0x1000000 / (v15 * v11) + v11 - 1) / v11 * v11;
  memset(v92, 0, 48);
  v75 = (unint64_t)v13;
  IIOSubsampler::IIOSubsampler((IIOSubsampler *)v92, (unint64_t)v13, v15 * v11, *((unsigned __int8 *)this + 310), *((_WORD *)this + 152), *((_WORD *)this + 154), v11, 0, v7, v15);
  v18 = v17 * (unint64_t)v16;
  if ((v18 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_113;
  __b = (unsigned __int8 *)malloc_type_calloc(v18, 1uLL, 0xC355889uLL);
  if (!__b)
  {
    _cg_jpeg_mem_term("decodeBlockSubsampled", 2526, "*** ERROR: failed to allocate 'bandBuffer'\n");
LABEL_113:
    v54 = 4294967246;
    goto LABEL_107;
  }
  v19 = v5 * v12;
  v20 = (unint64_t)(v19 + v14);
  v21 = (double)v17;
  if (!*((_BYTE *)this + 461))
  {
    v26 = this;
    if (*((_BYTE *)this + 246))
      bzero(*((void **)a2 + 5), *((_QWORD *)a2 + 6) * (unint64_t)*((double *)a2 + 4));
    if (*((_WORD *)this + 120) == 1 || (v27 = (double)v20, v19 >= (double)v20))
    {
      v35 = 0;
      v36 = 0;
      v79 = 0;
    }
    else
    {
      v28 = v6 * v12;
      v29 = (double)(unint64_t)v13;
      v30 = (double)v17;
      do
      {
        src = 0;
        v90 = 0u;
        src_8 = *(_QWORD *)&v28;
        src_16 = *(_QWORD *)&v19;
        src_24.f64[0] = v29;
        src_24.f64[1] = v30;
        v87 = __b;
        v88 = v16;
        v89 = v16 * (unint64_t)v30;
        DWORD2(v90) = 0;
        v91 = 0;
        PSDReadPlugin::mergeLayers(this, (IIODecodeFrameParams *)&src, (__n128)0);
        dest.data = v87;
        v31 = (int8x16_t)vcvtq_u64_f64(src_24);
        *(int8x16_t *)&dest.height = vextq_s8(v31, v31, 8uLL);
        dest.rowBytes = v88;
        if (*((_BYTE *)this + 404) == 1)
        {
          *(_DWORD *)permuteMap = 66051;
          vImagePermuteChannels_ARGB8888(&dest, &dest, permuteMap, 0x10u);
        }
        else if (v88 >= 4 * v31.i64[0])
        {
          *(_DWORD *)permuteMap = 197121;
          vImagePermuteChannels_ARGB8888(&dest, &dest, permuteMap, 0x10u);
        }
        else
        {
          v32 = _cg_jpeg_mem_term("decodeBlockSubsampled", 2708, "*** ERROR: vImagePermuteChannels_ARGB8888 - width: %d  rowBytes: %d\n", v31.i32[0], v88);
        }
        v32.n128_u16[0] = *((_WORD *)this + 158);
        v33 = (double)v32.n128_u64[0];
        v34 = (v19 / v33 - *((double *)a2 + 2));
        *(_DWORD *)permuteMap = (v30 / v33);
        IIOSubsampler::subsample((IIOSubsampler *)v92, __b, v30, (unsigned __int8 *)(*((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 6) * v34), (unsigned int *)permuteMap);
        v19 = v19 + v21;
        if (v30 + v19 > v27)
          v30 = v27 - v19;
        IIODecodeFrameParams::~IIODecodeFrameParams((IIODecodeFrameParams *)&src);
      }
      while (v19 < v27);
      v35 = 0;
      v36 = 0;
      v79 = 0;
      v26 = this;
    }
    goto LABEL_100;
  }
  v22 = v9 * v10 + 7;
  count = v22 >> 3;
  if (*((_WORD *)this + 229) == 1)
  {
    v23 = PSDReadPlugin::readDataSizeTable(this, &v94, &v95, &v93);
    v24 = v93;
    if (!v93)
      v23 = 0;
    if ((v23 & 1) == 0)
      goto LABEL_115;
    v25 = 2356552657;
  }
  else
  {
    if (v22 < 8)
    {
LABEL_115:
      v35 = 0;
      goto LABEL_116;
    }
    v25 = 3946758401;
    v24 = v22 >> 3;
  }
  v35 = (unsigned __int8 *)malloc_type_calloc(v24, 1uLL, v25);
  if (!v35)
  {
    _cg_jpeg_mem_term("decodeBlockSubsampled", 2545, "*** ERROR: failed to allocate 'scanLineData'\n");
    goto LABEL_115;
  }
  v26 = this;
  if (*((_WORD *)this + 120) != 1)
  {
    v36 = 0;
    v79 = 0;
LABEL_33:
    v38 = (double)v20;
    if (v19 < (double)v20)
    {
      v39 = v21;
      do
      {
        if (*((unsigned __int8 *)v26 + 278) - 5 <= 1)
          memset(__b, 255, (unint64_t)(v39 * (double)v16));
        if (a3)
        {
          v40 = 0;
          v37.n128_f64[0] = v39 + (double)v19;
          v72 = v37.n128_f64[0];
          v76 = v37.n128_f64[0] - v19;
          do
          {
            v41 = v40;
            if (v40 <= 3)
            {
              v41 = v40;
              if (*((_BYTE *)v26 + 404) == 1)
                v41 = *((_DWORD *)&xmmword_18822B2D0 + v40);
            }
            v42 = *((unsigned __int16 *)v26 + 228);
            v45 = v42 == 4 && v41 < 4 || v42 == 0;
            if (*((_WORD *)v26 + 229) == 1)
              v46 = (*((_DWORD *)v26 + 58) * v40);
            else
              v46 = *((_QWORD *)v26 + 24)
                  + count * (unint64_t)(*((_DWORD *)v26 + 58) * v40)
                  + 2;
            v78 = v46;
            if (v19 < v72)
            {
              v47 = 0;
              v48 = v45 << 31 >> 31;
              v49 = v19;
              v50 = v41;
              do
              {
                if (*((_WORD *)this + 229) == 1)
                {
                  v51 = v95[v78 + v49];
                  v52 = v94[v78 + v49];
                }
                else
                {
                  v52 = count;
                  v51 = v78 + v49 * count;
                }
                if (IIOImageReadSession::getBytesAtOffset(*((IIOImageReadSession **)this + 3), v35, v51, v52) != v52)
                  break;
                v53 = v36;
                if (!v36)
                  v53 = &__b[v16 * v47];
                if (*((_WORD *)this + 229) == 1)
                {
                  v54 = PSDReadPlugin::decode_packbits(this, v35, &v53[v50], v52, v16, a4, v48, v40, v49);
                  if ((_DWORD)v54)
                    goto LABEL_101;
                }
                else
                {
                  v55 = *((unsigned __int16 *)this + 120);
                  switch(v55)
                  {
                    case 32:
                      v64 = v52 >> 2;
                      if (v52 >> 2 >= v75)
                        v64 = (unint64_t)v13;
                      if (v64)
                      {
                        v65 = (unsigned int *)&v53[4 * v50];
                        v66 = (unsigned int *)v35;
                        do
                        {
                          v67 = *v66++;
                          *v65 = bswap32(v67) ^ v48;
                          v65 += a4;
                          --v64;
                        }
                        while (v64);
                      }
                      break;
                    case 16:
                      v60 = v52 >> 1;
                      if (v52 >> 1 >= v75)
                        v60 = (unint64_t)v13;
                      if (v60)
                      {
                        v61 = &v53[2 * v50];
                        v62 = v35;
                        do
                        {
                          v63 = *(unsigned __int16 *)v62;
                          v62 += 2;
                          *(_WORD *)v61 = v48 ^ (bswap32(v63) >> 16);
                          v61 += 2 * a4;
                          --v60;
                        }
                        while (v60);
                      }
                      break;
                    case 8:
                      v56 = (unint64_t)v13;
                      if (v52 < v75)
                        v56 = v52;
                      if (v56)
                      {
                        v57 = &v53[v50];
                        v58 = v35;
                        do
                        {
                          v59 = *v58++;
                          *v57 = v59 ^ v48;
                          v57 += a4;
                          --v56;
                        }
                        while (v56);
                      }
                      break;
                  }
                }
                if (v79)
                  (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unint64_t))(*(_QWORD *)v79 + 24))(v79, v36, &__b[v16 * v47 + v50], v75);
                ++v49;
                ++v47;
              }
              while (v76 != (_DWORD)v47);
            }
            ++v40;
            v26 = this;
          }
          while (v40 != a3);
        }
        if (*((_DWORD *)v26 + 81) == 1380401696 && *((_DWORD *)v26 + 110) == 4 && *((_BYTE *)v26 + 278) == 5)
        {
          src = __b;
          src_8 = (unint64_t)v39;
          src_16 = (unint64_t)v13;
          *(_QWORD *)&src_24.f64[0] = v16;
          if (*((_WORD *)v26 + 152) == 8)
            vImageOverwriteChannelsWithScalar_ARGB8888(0xFFu, (const vImage_Buffer *)&src, (const vImage_Buffer *)&src, 1u, 0x10u);
          else
            v37 = _cg_jpeg_mem_term("decodeBlockSubsampled", 2667, "*** RGB-%d: check alpha-one?\n", *((unsigned __int16 *)v26 + 152));
        }
        v37.n128_u16[0] = *((_WORD *)v26 + 158);
        v68 = (double)v37.n128_u64[0];
        v69 = (v19 / v68 - *((double *)a2 + 2));
        LODWORD(src) = (v39 / v68);
        IIOSubsampler::subsample((IIOSubsampler *)v92, __b, v39, (unsigned __int8 *)(*((_QWORD *)a2 + 5) + *((_QWORD *)a2 + 6) * v69), (unsigned int *)&src);
        v19 = v19 + v21;
        v37.n128_f64[0] = v39 + v19;
        if (v39 + v19 > v38)
          v39 = v38 - v19;
      }
      while (v19 < v38);
    }
LABEL_100:
    PSDReadPlugin::handlePremultiplication(v26, a2, a4);
    v54 = 0;
LABEL_101:
    free(__b);
    if (v36)
      free(v36);
    if (v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    if (v35)
      goto LABEL_106;
    goto LABEL_107;
  }
  v36 = (unsigned __int8 *)malloc_type_calloc(v16, 1uLL, 0x15CA43CFuLL);
  if (v36)
  {
    v79 = operator new();
    v26 = this;
    IIOPixelConverterGray::IIOPixelConverterGray(v79, 6, 1, 1u, *((_BYTE *)this + 246) != 0, 6, 8u, 0, 0);
    goto LABEL_33;
  }
  _cg_jpeg_mem_term("decodeBlockSubsampled", 2551, "*** ERROR: failed to allocate 'tempData'\n");
LABEL_116:
  free(__b);
  v54 = 4294967246;
  if (v35)
LABEL_106:
    free(v35);
LABEL_107:
  if (v94)
    free(v94);
  if (v95)
    free(v95);
  IIOSubsampler::~IIOSubsampler((IIOSubsampler *)v92);
  return v54;
}

void sub_188072024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  MEMORY[0x18D761C30](a25, 0x10F1C4050BC5624);
  IIOSubsampler::~IIOSubsampler((IIOSubsampler *)(v25 - 224));
  _Unwind_Resume(a1);
}

uint64_t PSDReadPlugin::decodeImageImp(IIOReadPlugin *this, IIODecodeParameter *a2, int a3)
{
  double v3;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t BlockArray;
  double v22;
  double v23;
  double v24;
  unint64_t v25;
  IIOImageRead **v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  CGRect *v30;
  unsigned int v31;
  double v32;
  double v33;
  double v34;
  memory_object_offset_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  double v63;
  double v64;
  char *v65;
  char *v66;
  double v67;
  BOOL v68;
  int v69;
  char *v70;
  char *v71;
  unint64_t v72;
  const char **v73;
  BOOL v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  size_t v85;
  _QWORD v86[6];
  CGRect v87;

  v84 = 0;
  v85 = 0;
  v82 = 0;
  v83 = 0;
  if ((gIIODebugFlags & 0x20000) != 0)
  {
    v7 = *((_DWORD *)this + 51);
    v8 = v7 >> 24;
    v9 = MEMORY[0x1E0C80978];
    if (v7 < 0)
    {
      v10 = __maskrune(v8, 0x40000uLL);
      v7 = *((_DWORD *)this + 51);
    }
    else
    {
      v10 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x40000;
    }
    if (v10)
      v11 = (v7 >> 24);
    else
      v11 = 46;
    v12 = v7 << 8 >> 24;
    if (v7 << 8 < 0)
    {
      v13 = __maskrune(v12, 0x40000uLL);
      v7 = *((_DWORD *)this + 51);
    }
    else
    {
      v13 = *(_DWORD *)(v9 + 4 * v12 + 60) & 0x40000;
    }
    if (v13)
      v14 = (v7 << 8 >> 24);
    else
      v14 = 46;
    v15 = (__int16)v7 >> 8;
    if (v7 << 16 < 0)
    {
      v16 = __maskrune(v15, 0x40000uLL);
      v7 = *((_DWORD *)this + 51);
    }
    else
    {
      v16 = *(_DWORD *)(v9 + 4 * v15 + 60) & 0x40000;
    }
    if (v16)
      v17 = ((__int16)v7 >> 8);
    else
      v17 = 46;
    if ((v7 << 24) <= 0x7F000000)
    {
      if ((*(_DWORD *)(v9 + 4 * (char)v7 + 60) & 0x40000) != 0)
        goto LABEL_22;
    }
    else if (__maskrune((char)v7, 0x40000uLL))
    {
LABEL_22:
      v18 = *((_DWORD *)this + 51);
LABEL_25:
      ImageIOLog("♦️  '%c%c%c%c' [%s] %s\n", v11, v14, v17, (char)v18, iioTypeStr[a3], "virtual OSStatus PSDReadPlugin::decodeImageImp(IIODecodeParameter *, IIOImageType, IOSurfaceRef *, CVPixelBufferRef *, CGImageBlockSetRef *)");
      goto LABEL_26;
    }
    LOBYTE(v18) = 46;
    goto LABEL_25;
  }
LABEL_26:
  IIOReadPlugin::debugDecodeImage(this, a2);
  if (*((_QWORD *)this + 3))
  {
    v19 = *((_QWORD *)this + 56);
    if (v19)
      *((_DWORD *)this + 75) = v19;
    else
      *((_QWORD *)this + 56) = *((unsigned int *)this + 75);
    if (*((_BYTE *)this + 406) || *((_BYTE *)this + 404) == 1)
      *((_BYTE *)this + 460) = 1;
    v20 = *((unsigned int *)this + 28);
    BlockArray = IIOReadPlugin::allocateBlockArray(this, *((unsigned int *)this + 26));
    if (IIOReadPlugin::getCachedBlocks(this, v22, v23, v24))
    {
      v26 = (IIOImageRead **)*((_QWORD *)this + 3);
      if (v26)
        v27 = IIOImageReadSession::mapData(v26);
      else
        v27 = 0;
      if (*((_WORD *)this + 229) != 1 || (v28 = *((unsigned __int16 *)this + 120), v28 == 8) || v28 == 1)
      {
        v75 = v27;
        v29 = *((unsigned int *)this + 28);
        if (v29 >= *((_DWORD *)this + 29))
        {
LABEL_69:
          PSDReadPlugin::decodeBlocks((uint64_t)this, &v82);
          v27 = v75;
          v65 = v82;
          v66 = v83;
          if (v82 != v83)
          {
            while (1)
            {
              BlockArray = *((unsigned int *)v65 + 18);
              if ((_DWORD)BlockArray)
              {
                *(_QWORD *)&v67 = _cg_jpeg_mem_term("decodeImageImp", 2848, "*** ERROR: (err=%d) when decoding block with index: %d\n", *((_DWORD *)v65 + 18), *(_QWORD *)v65).n128_u64[0];
                if (!*((_QWORD *)v65 + 8))
                  break;
              }
              if ((_DWORD)BlockArray)
                v68 = 1;
              else
                v68 = *((_BYTE *)this + 343) == 0;
              v69 = !v68;
              *(_QWORD *)(*((_QWORD *)this + 12) + 8 * (*(_QWORD *)v65 - v20)) = IIOReadPlugin::createImageBlock(this, *((void **)v65 + 5), *((_QWORD *)v65 + 7), *(CGRect *)(v65 + 8), *((_QWORD *)v65 + 6), v69);
              *((_QWORD *)v65 + 5) = 0;
              v65 += 88;
              if (v65 == v66)
                goto LABEL_79;
            }
            _cg_jpeg_mem_term("decodeImageImp", 2849, "*** ERROR: no valid rows\n", v67);
          }
        }
        else
        {
          v30 = (CGRect *)MEMORY[0x1E0C9D628];
          while (1)
          {
            if (*(_QWORD *)(*((_QWORD *)this + 12) + 8 * (v29 - v20)))
              _cg_jpeg_mem_term("decodeImageImp", 2812, "*** _blockArray[%d] was cached - and already allocated\n", v29 - v20);
            v31 = *((_DWORD *)this + 74);
            v32 = (double)(v31 * v29);
            LODWORD(v3) = *((_DWORD *)this + 73);
            LODWORD(v25) = *((_DWORD *)this + 66);
            v33 = (double)v25;
            v34 = (double)v31 + v32 <= v33 ? (double)v31 : v33 - (double)(v31 * v29);
            v35 = _ImageIO_Malloc(*((unsigned int *)this + 75) * (unint64_t)v31, *((_QWORD *)this + 48), &v85, (uint64_t)kImageMalloc_PSD_Data[0], *((_DWORD *)this + 108), 0, 0);
            if (!v35)
              break;
            v3 = (double)*(unint64_t *)&v3;
            v36 = *((unsigned int *)this + 75);
            v76 = v29;
            *(double *)&v77 = v32;
            *((double *)&v77 + 1) = v3;
            *(double *)&v78 = v34;
            *((_QWORD *)&v78 + 1) = v35;
            *(_QWORD *)&v79 = v36;
            *((_QWORD *)&v79 + 1) = v85;
            *(_QWORD *)&v80 = 0;
            DWORD2(v80) = 0;
            v81 = 0;
            v37 = v83;
            if (v83 >= v84)
            {
              v43 = v82;
              v44 = 0x2E8BA2E8BA2E8BA3 * ((v83 - v82) >> 3);
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) > 0x2E8BA2E8BA2E8BALL)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              if (0x5D1745D1745D1746 * ((v84 - v82) >> 3) > v45)
                v45 = 0x5D1745D1745D1746 * ((v84 - v82) >> 3);
              if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v84 - v82) >> 3)) >= 0x1745D1745D1745DLL)
                v46 = 0x2E8BA2E8BA2E8BALL;
              else
                v46 = v45;
              v86[4] = &v84;
              if (v46)
              {
                v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIODecodeFrameParams>>((uint64_t)&v84, v46);
                v43 = v82;
                v37 = v83;
              }
              else
              {
                v47 = 0;
              }
              v48 = &v47[88 * v44];
              v49 = v77;
              *(_OWORD *)v48 = v76;
              *((_OWORD *)v48 + 1) = v49;
              v50 = v78;
              v51 = v79;
              v52 = v80;
              *((_QWORD *)v48 + 10) = v81;
              *((_OWORD *)v48 + 3) = v51;
              *((_OWORD *)v48 + 4) = v52;
              *((_OWORD *)v48 + 2) = v50;
              if (v37 == (_OWORD *)v43)
              {
                v55 = &v47[88 * v44];
              }
              else
              {
                v53 = v37;
                v54 = &v47[88 * v44];
                do
                {
                  v55 = v54 - 88;
                  v56 = *(_OWORD *)((char *)v53 - 88);
                  *(_OWORD *)(v54 - 72) = *(_OWORD *)((char *)v53 - 72);
                  *(_OWORD *)(v54 - 88) = v56;
                  v57 = *(_OWORD *)((char *)v53 - 56);
                  v58 = *(_OWORD *)((char *)v53 - 40);
                  v59 = *(_OWORD *)((char *)v53 - 24);
                  *((_QWORD *)v54 - 1) = *((_QWORD *)v53 - 1);
                  *(_OWORD *)(v54 - 24) = v59;
                  *(_OWORD *)(v54 - 40) = v58;
                  *(_OWORD *)(v54 - 56) = v57;
                  v53 = (_OWORD *)((char *)v53 - 88);
                  v54 -= 88;
                }
                while (v53 != (_OWORD *)v43);
              }
              v42 = v48 + 88;
              v82 = v55;
              v83 = v48 + 88;
              v60 = v84;
              v84 = &v47[88 * v46];
              v86[2] = v37;
              v86[3] = v60;
              v86[0] = v43;
              v86[1] = v43;
              std::__split_buffer<IIODecodeFrameParams>::~__split_buffer((uint64_t)v86);
            }
            else
            {
              v38 = v77;
              *(_OWORD *)v83 = v76;
              v37[1] = v38;
              v39 = v78;
              v40 = v79;
              v41 = v80;
              *((_QWORD *)v37 + 10) = v81;
              v37[3] = v40;
              v37[4] = v41;
              v37[2] = v39;
              v42 = (char *)v37 + 88;
            }
            v83 = v42;
            IIODecodeFrameParams::~IIODecodeFrameParams((IIODecodeFrameParams *)&v76);
            v61 = CGRectEqualToRect(*(CGRect *)((char *)this + 120), *v30);
            v62 = 0;
            if (!v61)
            {
              v87.origin.x = 0.0;
              v87.origin.y = v32;
              v87.size.width = v3;
              v87.size.height = v34;
              *(CGRect *)(&v25 - 2) = CGRectUnion(*(CGRect *)((char *)this + 120), v87);
              v32 = v63;
              v3 = *(double *)&v25;
              v34 = v64;
            }
            *((_QWORD *)this + 15) = v62;
            *((double *)this + 16) = v32;
            *((double *)this + 17) = v3;
            *((double *)this + 18) = v34;
            if (++v29 >= *((unsigned int *)this + 29))
              goto LABEL_69;
          }
          _cg_jpeg_mem_term("decodeImageImp", 2831, "*** ERROR: failed to allocate 'imageData'\n");
          v27 = v75;
        }
      }
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    BlockArray = 0;
  }
LABEL_79:
  v70 = v82;
  v71 = v83;
  while (v70 != v71)
  {
    v72 = *((_QWORD *)v70 + 5);
    if (v72)
      _ImageIO_Free(v72, *((_QWORD *)v70 + 7));
    v70 += 88;
  }
  if (v27)
  {
    v73 = (const char **)*((_QWORD *)this + 3);
    if (v73)
      IIOImageReadSession::unmapData(v73);
  }
  *(_QWORD *)&v76 = &v82;
  std::vector<IIODecodeFrameParams>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  return BlockArray;
}

void sub_1880726AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a16 = (void **)&a27;
  std::vector<IIODecodeFrameParams>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void PSDReadPlugin::decodeBlocks(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  size_t v5;
  _QWORD block[7];

  v4 = IIO_Reader::testHeaderSize(*(IIO_Reader **)(a1 + 24));
  v5 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2[1] - *a2) >> 3);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN13PSDReadPlugin12decodeBlocksERNSt3__16vectorI20IIODecodeFrameParamsNS0_9allocatorIS2_EEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_55;
  block[4] = a1;
  block[5] = a2;
  block[6] = v4;
  dispatch_apply(v5, 0, block);
}

void ___ZN13PSDReadPlugin12decodeBlocksERNSt3__16vectorI20IIODecodeFrameParamsNS0_9allocatorIS2_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  IIODecodeFrameParams *v6;
  __n128 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD v13[4];

  v4 = *(_QWORD *)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 40);
  v6 = (IIODecodeFrameParams *)(v5 + 88 * a2);
  memset(v13, 0, sizeof(v13));
  IIOImageReadSession::IIOImageReadSession((IIOImageReadSession *)v13, *(IIOImageRead **)(a1 + 48));
  v8 = *(unsigned __int16 *)(v4 + 244);
  if (*(_DWORD *)(v4 + 440) >= v8)
    v9 = *(unsigned __int16 *)(v4 + 244);
  else
    v9 = *(_DWORD *)(v4 + 440);
  if (*(unsigned __int16 *)(v4 + 316) < 2u)
    v10 = PSDReadPlugin::decodeBlock((PSDReadPlugin *)v4, v6, v9, v8, v7);
  else
    v10 = PSDReadPlugin::decodeBlockSubsampled((PSDReadPlugin *)v4, v6, v9, v8);
  v11 = (unint64_t)*(double *)(v5 + 88 * a2 + 32);
  if (v10)
    v11 = 0;
  v12 = **(_QWORD **)(a1 + 40) + 88 * a2;
  *(_QWORD *)(v12 + 64) = v11;
  *(_DWORD *)(v12 + 72) = v10;
  IIOImageReadSession::~IIOImageReadSession((IIOImageReadSession *)v13);
}

void sub_188072858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  IIOImageReadSession::~IIOImageReadSession((IIOImageReadSession *)&a9);
  _Unwind_Resume(a1);
}

unint64_t IIOHashForDataProvider(CGDataProvider *a1, unint64_t a2)
{
  unint64_t SizeOfData;
  uint64_t *BytePointer;
  unint64_t v5;
  char *v6;
  _QWORD *State;
  uint64_t Bytes;
  size_t v9;

  SizeOfData = CGDataProviderGetSizeOfData();
  if (!CGAccessSessionCreate())
    return 0;
  if (SizeOfData == -1
    || (BytePointer = (uint64_t *)CGAccessSessionGetBytePointer()) == 0
    || (v5 = XXH64(BytePointer, SizeOfData, a2)) == 0)
  {
    CGAccessSessionRewind();
    v6 = (char *)malloc_type_malloc(0xF4240uLL, 0xDE93F85uLL);
    State = XXH64_createState();
    XXH64_reset((uint64_t)State, a2);
    Bytes = CGAccessSessionGetBytes();
    if (Bytes)
    {
      v9 = Bytes;
      do
      {
        XXH64_update((uint64_t)State, v6, v9);
        v9 = CGAccessSessionGetBytes();
      }
      while (v9);
    }
    v5 = XXH64_digest(State);
    XXH64_freeState(State);
    free(v6);
  }
  CGAccessSessionRelease();
  return v5;
}

uint64_t TIFFJPEGIsFullStripRequired(uint64_t a1)
{
  uint64_t has_multiple_scans;
  _BYTE v4[40];
  __int128 *v5;
  __int128 v6;
  _QWORD *(*v7)(_QWORD *);
  uint64_t (*v8)(uint64_t *);
  _QWORD *(*v9)(_QWORD *, uint64_t);
  uint64_t (*v10)(_DWORD *, int);
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  bzero(v4, 0x550uLL);
  v12 = a1;
  TIFFjpeg_create_decompress((uint64_t)v4);
  v5 = &v6;
  v7 = std_init_source;
  v8 = std_fill_input_buffer;
  v9 = std_skip_input_data;
  v10 = _cg_jpeg_resync_to_restart;
  v11 = std_term_source;
  v6 = 0u;
  if (TIFFjpeg_read_header((uint64_t)v4, 1) == 1)
    has_multiple_scans = TIFFjpeg_has_multiple_scans((uint64_t)v4);
  else
    has_multiple_scans = 0;
  TIFFjpeg_destroy((uint64_t)v4);
  return has_multiple_scans;
}

uint64_t TIFFjpeg_create_decompress(uint64_t a1)
{
  *(_QWORD *)a1 = _cg_jpeg_std_error(a1 + 672);
  *(_QWORD *)(a1 + 672) = TIFFjpeg_error_exit;
  *(_QWORD *)(a1 + 688) = TIFFjpeg_output_message;
  *(_QWORD *)(a1 + 24) = 0;
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_CreateDecompress((char *)a1, 90, 664);
  return 1;
}

uint64_t TIFFjpeg_read_header(uint64_t a1, int a2)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_read_header(a1, a2);
}

uint64_t TIFFjpeg_destroy(uint64_t a1)
{
  uint64_t result;

  result = setjmp((int *)(a1 + 848));
  if (!(_DWORD)result)
    return _cg_jpeg_destroy(a1);
  return result;
}

uint64_t TIFFjpeg_has_multiple_scans(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  else
    return _cg_jpeg_has_multiple_scans(a1);
}

uint64_t TIFFInitJPEG(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v25;
  char v26;

  if (a2 != 7)
    TIFFInitJPEG_cold_1();
  if (_TIFFMergeFields(a1, jpegFields, 4, a4, a5, a6, a7, a8))
  {
    v15 = _TIFFmallocExt((_QWORD *)a1, 1360, v9, v10, v11, v12, v13, v14);
    *(_QWORD *)(a1 + 1096) = v15;
    if (v15)
    {
      _TIFFmemset(v15, 0, 0x550uLL);
      v22 = *(_QWORD *)(a1 + 1096);
      *(_QWORD *)(v22 + 1280) = *(_QWORD *)(a1 + 1288);
      *(_QWORD *)(v22 + 1288) = *(_QWORD *)(a1 + 1280);
      *(_QWORD *)(v22 + 1296) = *(_QWORD *)(a1 + 1296);
      *(_OWORD *)(v22 + 1304) = *(_OWORD *)(a1 + 1080);
      *(_QWORD *)(v22 + 1168) = a1;
      *(_QWORD *)(v22 + 1320) = 0;
      *(_OWORD *)(v22 + 1328) = xmmword_18822DF80;
      *(_DWORD *)(v22 + 1344) = 0;
      *(_QWORD *)(a1 + 1288) = JPEGVGetField;
      *(_QWORD *)(a1 + 1280) = JPEGVSetField;
      *(_QWORD *)(a1 + 1296) = JPEGPrintDir;
      *(_QWORD *)(a1 + 952) = JPEGFixupTags;
      *(_QWORD *)(a1 + 960) = JPEGSetupDecode;
      *(_QWORD *)(a1 + 968) = JPEGPreDecode;
      *(_QWORD *)(a1 + 1008) = JPEGDecode;
      *(_QWORD *)(a1 + 1024) = JPEGDecode;
      *(_QWORD *)(a1 + 1040) = JPEGDecode;
      *(_QWORD *)(a1 + 976) = JPEGSetupEncode;
      *(_QWORD *)(a1 + 992) = JPEGPreEncode;
      *(_QWORD *)(a1 + 1000) = JPEGPostEncode;
      *(_QWORD *)(a1 + 1016) = JPEGEncode;
      *(_QWORD *)(a1 + 1032) = JPEGEncode;
      *(_QWORD *)(a1 + 1048) = JPEGEncode;
      *(_QWORD *)(a1 + 1072) = JPEGCleanup;
      *(_QWORD *)(a1 + 1080) = JPEGDefaultStripSize;
      *(_QWORD *)(a1 + 1088) = JPEGDefaultTileSize;
      *(_DWORD *)(a1 + 16) |= 0x100u;
      *(_DWORD *)(v22 + 664) = 0;
      if (*(_QWORD *)(a1 + 24))
        return 1;
      *(_DWORD *)(v22 + 1328) = 2000;
      v23 = _TIFFmallocExt((_QWORD *)a1, 2000, v16, v17, v18, v19, v20, v21);
      *(_QWORD *)(v22 + 1320) = v23;
      if (v23)
      {
        _TIFFmemset(v23, 0, 0x7D0uLL);
        return 1;
      }
      v25 = "Failed to allocate memory for JPEG tables";
    }
    else
    {
      v25 = "No space for JPEG state block";
    }
  }
  else
  {
    v25 = "Merging JPEG codec-specific tags failed";
  }
  TIFFErrorExtR(a1, "TIFFInitJPEG", v25, v10, v11, v12, v13, v14, v26);
  return 0;
}

void TIFFjpeg_error_exit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[12];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 24))(a1, v7);
  TIFFErrorExtR(*(_QWORD *)(a1 + 1168), "JPEGLib", "%s", v2, v3, v4, v5, v6, (char)v7);
  _cg_jpeg_abort(a1);
  longjmp((int *)(a1 + 848), 1);
}

uint64_t TIFFjpeg_output_message(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[12];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  (*(void (**)(uint64_t *, _OWORD *))(*a1 + 24))(a1, v8);
  return TIFFWarningExtR(a1[146], "JPEGLib", "%s", v2, v3, v4, v5, v6, (char)v8);
}

_QWORD *std_init_source(_QWORD *result)
{
  uint64_t v1;

  v1 = result[146];
  result[139] = *(_QWORD *)(v1 + 1120);
  result[140] = *(_QWORD *)(v1 + 1160);
  return result;
}

uint64_t std_fill_input_buffer(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *(_DWORD *)(v2 + 40) = 123;
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(a1, 0xFFFFFFFFLL);
  a1[139] = (uint64_t)&std_fill_input_buffer_dummy_EOI;
  a1[140] = 2;
  return 1;
}

_QWORD *std_skip_input_data(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 >= 1)
  {
    v2 = result;
    v3 = result[140];
    v4 = v3 >= a2;
    v5 = v3 - a2;
    if (v4)
    {
      result[139] += a2;
    }
    else
    {
      v6 = *result;
      *(_DWORD *)(v6 + 40) = 123;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(result, 0xFFFFFFFFLL);
      v2[139] = &std_fill_input_buffer_dummy_EOI;
      v5 = 2;
    }
    v2[140] = v5;
  }
  return result;
}

uint64_t JPEGVGetField(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a1 + 1096);
  if (!v3)
    JPEGVGetField_cold_1();
  if (a2 > 65537)
  {
    if (a2 == 65538)
    {
      v4 = *(_DWORD *)(v3 + 1336);
      goto LABEL_11;
    }
    if (a2 == 65539)
    {
      v4 = *(_DWORD *)(v3 + 1340);
      goto LABEL_11;
    }
  }
  else
  {
    if (a2 == 347)
    {
      **(_DWORD **)a3 = *(_DWORD *)(v3 + 1328);
      **(_QWORD **)(a3 + 8) = *(_QWORD *)(v3 + 1320);
      return 1;
    }
    if (a2 == 65537)
    {
      v4 = *(_DWORD *)(v3 + 1332);
LABEL_11:
      **(_DWORD **)a3 = v4;
      return 1;
    }
  }
  return (*(uint64_t (**)(void))(v3 + 1280))();
}

uint64_t JPEGVSetField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v8 = *(_QWORD *)(a1 + 1096);
  if (!v8)
    JPEGVSetField_cold_1();
  if ((int)a2 > 0x10000)
  {
    switch((_DWORD)a2)
    {
      case 0x10001:
        *(_DWORD *)(v8 + 1332) = *(_DWORD *)a3;
        break;
      case 0x10002:
        *(_DWORD *)(v8 + 1336) = *(_DWORD *)a3;
        JPEGResetUpsampled(a1, a2, a3, a4, a5, a6, a7, a8);
        break;
      case 0x10003:
        *(_DWORD *)(v8 + 1340) = *(_DWORD *)a3;
        break;
      default:
        return (*(uint64_t (**)(uint64_t))(v8 + 1288))(a1);
    }
    return 1;
  }
  else if ((_DWORD)a2 == 262)
  {
    v11 = (*(uint64_t (**)(uint64_t))(v8 + 1288))(a1);
    JPEGResetUpsampled(a1, v12, v13, v14, v15, v16, v17, v18);
    return v11;
  }
  else
  {
    if ((_DWORD)a2 != 347)
    {
      if ((_DWORD)a2 == 530)
        *(_DWORD *)(v8 + 1344) = 1;
      return (*(uint64_t (**)(uint64_t))(v8 + 1288))(a1);
    }
    v19 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      _TIFFsetByteArrayExt((_QWORD *)a1, (char **)(v8 + 1320), *(const void **)(a3 + 8), v19, a5, a6, a7, a8);
      *(_DWORD *)(v8 + 1328) = v19;
      *(_DWORD *)(a1 + 80) |= 4u;
      result = (uint64_t)TIFFFieldWithTag((_QWORD *)a1, 347);
      if (result)
      {
        v20 = *(unsigned __int16 *)(result + 24);
        result = 1;
        *(_DWORD *)(a1 + ((v20 >> 3) & 0x1FFC) + 72) |= 1 << v20;
        *(_DWORD *)(a1 + 16) |= 8u;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t JPEGPrintDir(uint64_t result, FILE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, FILE *, uint64_t);

  v3 = *(_QWORD *)(result + 1096);
  if (!v3)
    JPEGPrintDir_cold_1();
  v6 = result;
  if ((*(_BYTE *)(result + 80) & 4) != 0)
    result = fprintf(a2, "  JPEG Tables: (%u bytes)\n", *(_DWORD *)(v3 + 1328));
  v7 = *(uint64_t (**)(uint64_t, FILE *, uint64_t))(v3 + 1296);
  if (v7)
    return v7(v6, a2, a3);
  return result;
}

uint64_t JPEGFixupTags(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  const char *v33;
  const char *v34;
  char v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned __int8 v41;
  unsigned __int16 v42;
  unsigned __int8 v43;

  if (*(_WORD *)(a1 + 122) == 6
    && *(_WORD *)(a1 + 170) == 1
    && *(_WORD *)(a1 + 130) == 3
    && !*(_DWORD *)(*(_QWORD *)(a1 + 1096) + 1344))
  {
    v3 = TIFFGetStrileOffset(a1, 0);
    if (v3)
    {
      v10 = v3;
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = a1;
      LODWORD(v38) = 2048;
      v37 = _TIFFmallocExt((_QWORD *)a1, 2048, v4, v5, v6, v7, v8, v9);
      if (v37)
      {
        *((_QWORD *)&v38 + 1) = 0;
        LODWORD(v39) = 0;
        *((_QWORD *)&v39 + 1) = v10;
        BYTE8(v40) = 0;
        *(_QWORD *)&v40 = TIFFGetStrileByteCount(a1, 0);
        v43 = 0;
        while (JPEGFixupTagsSubsamplingReadByte((uint64_t)&v36, &v43))
        {
          if (v43 == 255)
          {
LABEL_11:
            if (JPEGFixupTagsSubsamplingReadByte((uint64_t)&v36, &v43))
            {
              switch(v43)
              {
                case 0xC0u:
                case 0xC1u:
                case 0xC2u:
                case 0xC9u:
                case 0xCAu:
                  v42 = 0;
                  v41 = 0;
                  if (!JPEGFixupTagsSubsamplingReadWord((uint64_t)&v36, &v42)
                    || 3 * *(unsigned __int16 *)(v36 + 130) + 8 != v42)
                  {
                    goto LABEL_57;
                  }
                  if (v39 >= 7)
                  {
                    *((_QWORD *)&v38 + 1) += 7;
                    LODWORD(v39) = v39 - 7;
                  }
                  else
                  {
                    v23 = 7 - v39;
                    LODWORD(v39) = 0;
                    if ((unint64_t)v40 >= v23)
                    {
                      *((_QWORD *)&v39 + 1) += v23;
                      *(_QWORD *)&v40 = v40 - v23;
                      BYTE8(v40) = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v40 = 0;
                    }
                  }
                  if (!JPEGFixupTagsSubsamplingReadByte((uint64_t)&v36, &v41))
                    goto LABEL_57;
                  if ((_DWORD)v39)
                  {
                    ++*((_QWORD *)&v38 + 1);
                    v24 = v39 - 1;
                  }
                  else
                  {
                    v24 = 0;
                    if ((_QWORD)v40)
                    {
                      ++*((_QWORD *)&v39 + 1);
                      *(_QWORD *)&v40 = v40 - 1;
                      BYTE8(v40) = 0;
                    }
                    else
                    {
                      *(_QWORD *)&v40 = 0;
                    }
                  }
                  v25 = v41;
                  v26 = v36;
                  if (*(unsigned __int16 *)(v36 + 130) < 2u)
                    goto LABEL_50;
                  v27 = 1;
                  break;
                case 0xC4u:
                case 0xDAu:
                case 0xDBu:
                case 0xDDu:
                case 0xE0u:
                case 0xE1u:
                case 0xE2u:
                case 0xE3u:
                case 0xE4u:
                case 0xE5u:
                case 0xE6u:
                case 0xE7u:
                case 0xE8u:
                case 0xE9u:
                case 0xEAu:
                case 0xEBu:
                case 0xECu:
                case 0xEDu:
                case 0xEEu:
                case 0xEFu:
                case 0xFEu:
                  v42 = 0;
                  if (!JPEGFixupTagsSubsamplingReadWord((uint64_t)&v36, &v42))
                    goto LABEL_57;
                  v21 = v42 - 2;
                  if (v42 < 2u)
                    goto LABEL_57;
                  if (v42 != 2)
                  {
                    if (v39 >= v21)
                    {
                      *((_QWORD *)&v38 + 1) += v21;
                      LODWORD(v39) = v39 - (unsigned __int16)(v42 - 2);
                    }
                    else
                    {
                      v22 = v21 - v39;
                      LODWORD(v39) = 0;
                      if ((unint64_t)v40 >= v22)
                      {
                        *((_QWORD *)&v39 + 1) += v22;
                        *(_QWORD *)&v40 = v40 - v22;
                        BYTE8(v40) = 0;
                      }
                      else
                      {
                        *(_QWORD *)&v40 = 0;
                      }
                    }
                  }
                  continue;
                case 0xD8u:
                  continue;
                case 0xFFu:
                  goto LABEL_11;
                default:
                  goto LABEL_57;
              }
              while (1)
              {
                if (v24)
                {
                  ++*((_QWORD *)&v38 + 1);
                  LODWORD(v39) = v24 - 1;
                }
                else
                {
                  LODWORD(v39) = 0;
                  if ((_QWORD)v40)
                  {
                    ++*((_QWORD *)&v39 + 1);
                    *(_QWORD *)&v40 = v40 - 1;
                    BYTE8(v40) = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v40 = 0;
                  }
                }
                if (!JPEGFixupTagsSubsamplingReadByte((uint64_t)&v36, &v41))
                  goto LABEL_57;
                if (v41 != 17)
                  break;
                if ((_DWORD)v39)
                {
                  ++*((_QWORD *)&v38 + 1);
                  v24 = v39 - 1;
                  LODWORD(v39) = v39 - 1;
                }
                else
                {
                  LODWORD(v39) = 0;
                  v24 = 0;
                  if ((_QWORD)v40)
                  {
                    ++*((_QWORD *)&v39 + 1);
                    *(_QWORD *)&v40 = v40 - 1;
                    BYTE8(v40) = 0;
                  }
                  else
                  {
                    *(_QWORD *)&v40 = 0;
                  }
                }
                ++v27;
                v26 = v36;
                if (v27 >= *(unsigned __int16 *)(v36 + 130))
                {
LABEL_50:
                  v28 = v25 >> 4;
                  if (v25 >> 4 <= 4 && ((1 << v28) & 0x16) != 0)
                  {
                    v29 = v25 & 0xF;
                    if (v29 <= 4 && ((1 << v29) & 0x16) != 0)
                    {
                      v30 = *(unsigned __int16 *)(v26 + 336);
                      if (v30 != v28 || *(unsigned __int16 *)(v26 + 338) != v29)
                      {
                        v31 = v26;
                        v32 = v29;
                        TIFFWarningExtR(v26, "JPEGFixupTagsSubsamplingSec", "Auto-corrected former TIFF subsampling values [%hu,%hu] to match subsampling values inside JPEG compressed data [%hhu,%hhu]", v16, v17, v18, v19, v20, v30);
                        *(_WORD *)(v31 + 336) = v28;
                        *(_WORD *)(v31 + 338) = v32;
                      }
                      goto LABEL_59;
                    }
                  }
LABEL_61:
                  v33 = "JPEGFixupTagsSubsamplingSec";
                  v34 = "Subsampling values inside JPEG compressed data have no TIFF equivalent, auto-correction of TIFF "
                        "subsampling values failed";
                  goto LABEL_58;
                }
              }
              v26 = v36;
              goto LABEL_61;
            }
            break;
          }
        }
LABEL_57:
        v33 = "JPEGFixupTagsSubsampling";
        v34 = "Unable to auto-correct subsampling values, likely corrupt JPEG compressed data in first strip/tile; auto-c"
              "orrecting skipped";
        v26 = a1;
LABEL_58:
        TIFFWarningExtR(v26, v33, v34, v16, v17, v18, v19, v20, v35);
LABEL_59:
        _TIFFfreeExt(a1, (char *)v37);
      }
      else
      {
        TIFFWarningExtR(a1, "JPEGFixupTagsSubsampling", "Unable to allocate memory for auto-correcting of subsampling values; auto-correcting skipped",
          v11,
          v12,
          v13,
          v14,
          v15,
          v35);
      }
    }
  }
  return 1;
}

uint64_t JPEGSetupDecode(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  char v11;

  v2 = *(_QWORD *)(a1 + 1096);
  JPEGInitializeLibJPEG(a1, 1);
  if (!v2)
    JPEGSetupDecode_cold_1();
  if (!*(_DWORD *)(v2 + 32))
    JPEGSetupDecode_cold_2();
  if ((*(_BYTE *)(a1 + 80) & 4) != 0
    && (*(_QWORD *)(v2 + 40) = v2 + 1112,
        *(_QWORD *)(v2 + 1136) = std_fill_input_buffer,
        *(_QWORD *)(v2 + 1144) = std_skip_input_data,
        *(_QWORD *)(v2 + 1152) = _cg_jpeg_resync_to_restart,
        *(_QWORD *)(v2 + 1160) = std_term_source,
        *(_OWORD *)(v2 + 1112) = 0u,
        *(_QWORD *)(v2 + 1128) = tables_init_source,
        TIFFjpeg_read_header(v2, 0) != 2))
  {
    TIFFErrorExtR(a1, "JPEGSetupDecode", "Bogus JPEGTables field", v3, v4, v5, v6, v7, v11);
    return 0;
  }
  else
  {
    v8 = *(unsigned __int16 *)(a1 + 122);
    *(_WORD *)(v2 + 1176) = v8;
    if (v8 == 6)
    {
      *(_WORD *)(v2 + 1178) = *(_WORD *)(a1 + 336);
      v9 = *(_WORD *)(a1 + 338);
    }
    else
    {
      v9 = 1;
      *(_WORD *)(v2 + 1178) = 1;
    }
    *(_WORD *)(v2 + 1180) = v9;
    *(_QWORD *)(v2 + 40) = v2 + 1112;
    *(_QWORD *)(v2 + 1128) = std_init_source;
    *(_QWORD *)(v2 + 1136) = std_fill_input_buffer;
    *(_QWORD *)(v2 + 1144) = std_skip_input_data;
    *(_QWORD *)(v2 + 1152) = _cg_jpeg_resync_to_restart;
    *(_QWORD *)(v2 + 1160) = std_term_source;
    *(_OWORD *)(v2 + 1112) = 0u;
    *(_QWORD *)(a1 + 1248) = _TIFFNoPostDecode;
    return 1;
  }
}

uint64_t JPEGPreDecode(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  _DWORD *v34;
  int v35;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  void *v42;
  void *v43;
  int started;
  char v45;

  v2 = *(_QWORD *)(a1 + 1096);
  if (!v2)
    JPEGPreDecode_cold_1();
  if (!*(_DWORD *)(v2 + 32))
  {
    (*(void (**)(uint64_t))(a1 + 960))(a1);
    if (!*(_DWORD *)(v2 + 32))
      JPEGPreDecode_cold_2();
  }
  result = TIFFjpeg_abort(v2);
  if ((_DWORD)result)
  {
    if (TIFFjpeg_read_header(v2, 1) == 1)
    {
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v2 + 1112);
      *(_QWORD *)(a1 + 1160) = *(_QWORD *)(v2 + 1120);
      if ((*(_BYTE *)(a1 + 17) & 4) != 0)
      {
        v13 = *(_DWORD *)(a1 + 100);
        v14 = *(_DWORD *)(a1 + 104);
        v15 = _cg_TIFFTileRowSize(a1, v6, v7, v8, v9, v10, v11, v12);
      }
      else
      {
        v13 = *(_DWORD *)(a1 + 88);
        if ((*(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 876)) >= *(_DWORD *)(a1 + 132))
          v14 = *(_DWORD *)(a1 + 132);
        else
          v14 = *(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 876);
        v15 = _cg_TIFFScanlineSize(a1, v6, v7, v8, v9, v10, v11, v12);
      }
      *(_QWORD *)(v2 + 1184) = v15;
      if (a2 && *(_WORD *)(a1 + 170) == 2)
      {
        v21 = *(unsigned __int16 *)(v2 + 1178);
        if (!*(_WORD *)(v2 + 1178) || (v22 = *(unsigned __int16 *)(v2 + 1180), !*(_WORD *)(v2 + 1180)))
        {
          v26 = "JPEG horizontal or vertical sampling is zero";
          goto LABEL_81;
        }
        v23 = 0;
        if (v13 < -v21)
          v23 = (v13 + v21 - 1) / v21;
        if (v14 >= -v22)
          v14 = 0;
        else
          v14 = (v14 + v22 - 1) / v22;
      }
      else
      {
        v23 = v13;
      }
      v24 = *(_DWORD *)(v2 + 48);
      if (v24 < v23 || *(_DWORD *)(v2 + 52) < v14)
      {
        TIFFWarningExtR(a1, "JPEGPreDecode", "Improper JPEG strip/tile size, expected %ux%u, got %ux%u", v16, v17, v18, v19, v20, v23);
        v24 = *(_DWORD *)(v2 + 48);
      }
      if (v24 == v23
        && *(_DWORD *)(v2 + 52) > v14
        && *(_DWORD *)(a1 + 876) + v14 == *(_DWORD *)(a1 + 92)
        && (*(_BYTE *)(a1 + 17) & 4) == 0)
      {
        TIFFWarningExtR(a1, "JPEGPreDecode", "JPEG strip size exceeds expected dimensions, expected %ux%u, got %ux%u", v16, v17, v18, v19, v20, v23);
LABEL_31:
        if (*(_WORD *)(a1 + 170) == 1)
          v25 = *(unsigned __int16 *)(a1 + 130);
        else
          v25 = 1;
        if (*(_DWORD *)(v2 + 56) == v25)
        {
          if (*(_DWORD *)(v2 + 296) == *(unsigned __int16 *)(a1 + 116))
          {
            if (*(_DWORD *)(v2 + 316) && !*(_DWORD *)(v2 + 1352))
            {
              TIFFWarningExtR(a1, "JPEGPreDecode", "The JPEG strip/tile is encoded with progressive mode, which is normally not legal for JPEG-in-TIFF.\nlibtiff should be able to decode it, but it might cause compatibility issues with other readers", v16, v17, v18, v19, v20, v45);
              *(_DWORD *)(v2 + 1352) = 1;
            }
            if (TIFFjpeg_has_multiple_scans(v2))
            {
              v27 = *(unsigned int *)(v2 + 56);
              if ((int)v27 < 1)
              {
                v29 = 0x100000;
              }
              else
              {
                v28 = (_DWORD *)(*(_QWORD *)(v2 + 304) + 32);
                v29 = 0x100000;
                do
                {
                  v30 = *(v28 - 6);
                  if (v30 >= 1)
                  {
                    v31 = *(v28 - 5);
                    if (v31 >= 1)
                      v29 += ((v30 + *(v28 - 1) - 1)
                            / v30
                            * (unint64_t)((v31 + *v28 - 1) / v31)) << 7;
                  }
                  v28 += 24;
                  --v27;
                }
                while (v27);
              }
              v32 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 88);
              v33 = v32 >= 1 && v29 > v32;
              if (v33 && !getenv("LIBTIFF_ALLOW_LARGE_LIBJPEG_MEM_ALLOC"))
              {
                v45 = v29;
                v26 = "Reading this image would require libjpeg to allocate at least %llu bytes. This is disabled since a"
                      "bove the %ld threshold. You may override this restriction by defining the LIBTIFF_ALLOW_LARGE_LIBJ"
                      "PEG_MEM_ALLOC environment variable, or setting the JPEGMEM environment variable to a value greater"
                      " or equal to '%lluM'";
                goto LABEL_81;
              }
            }
            v34 = *(_DWORD **)(v2 + 304);
            v35 = v34[2];
            if (*(_WORD *)(a1 + 170) == 1)
            {
              if (v35 != *(unsigned __int16 *)(v2 + 1178) || v34[3] != *(unsigned __int16 *)(v2 + 1180))
              {
                TIFFErrorExtR(a1, "JPEGPreDecode", "Improper JPEG sampling factors %d,%d\nApparently should be %hu,%hu.", v16, v17, v18, v19, v20, v35);
                return 0;
              }
              v37 = *(unsigned int *)(v2 + 56);
              if ((int)v37 >= 2)
              {
                v38 = v34 + 27;
                v39 = v37 - 1;
                while (*(v38 - 1) == 1 && *v38 == 1)
                {
                  v38 += 24;
                  if (!--v39)
                    goto LABEL_73;
                }
                goto LABEL_67;
              }
LABEL_73:
              if (*(_WORD *)(v2 + 1176) == 6 && *(_DWORD *)(v2 + 1336) == 1)
              {
                *(_QWORD *)(v2 + 60) = 0x200000003;
                goto LABEL_79;
              }
            }
            else if (v35 != 1 || v34[3] != 1)
            {
LABEL_67:
              v26 = "Improper JPEG sampling factors";
              goto LABEL_81;
            }
            *(_DWORD *)(v2 + 60) = 0;
            *(_DWORD *)(v2 + 64) = 0;
            if (*(_WORD *)(a1 + 170) == 1 && (*(_WORD *)(v2 + 1178) != 1 || *(_WORD *)(v2 + 1180) != 1))
            {
              v41 = 0;
              *(_DWORD *)(v2 + 92) = 1;
              v40 = (_DWORD *)(v2 + 100);
              v43 = JPEGDecodeRaw;
              v42 = DecodeRowError;
              goto LABEL_85;
            }
LABEL_79:
            v40 = (_DWORD *)(v2 + 92);
            v41 = 1;
            v42 = JPEGDecode;
            v43 = JPEGDecode;
LABEL_85:
            *v40 = 0;
            *(_QWORD *)(a1 + 1008) = v42;
            *(_QWORD *)(a1 + 1024) = v43;
            *(_QWORD *)(a1 + 1040) = v43;
            started = TIFFjpeg_start_decompress(v2);
            result = started != 0;
            if ((v41 & 1) == 0 && started)
            {
              result = alloc_downsampled_buffers(a1, *(_QWORD *)(v2 + 304), *(_DWORD *)(v2 + 56));
              if ((_DWORD)result)
              {
                *(_DWORD *)(v2 + 1272) = 8;
                return 1;
              }
            }
            return result;
          }
          v26 = "Improper JPEG data precision";
        }
        else
        {
          v26 = "Improper JPEG component count";
        }
LABEL_81:
        TIFFErrorExtR(a1, "JPEGPreDecode", v26, v16, v17, v18, v19, v20, v45);
        return 0;
      }
      if (v24 <= v23 && *(_DWORD *)(v2 + 52) <= v14)
        goto LABEL_31;
      TIFFErrorExtR(a1, "JPEGPreDecode", "JPEG strip/tile size exceeds expected dimensions, expected %ux%u, got %ux%u", v16, v17, v18, v19, v20, v23);
    }
    return 0;
  }
  return result;
}

BOOL JPEGDecode(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char *v19;

  v8 = a3;
  v10 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(v10 + 1112) = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(v10 + 1120) = *(_QWORD *)(a1 + 1160);
  v11 = *(_QWORD *)(v10 + 1184);
  if (!v11)
  {
LABEL_12:
    bzero(a2, v8);
    return 0;
  }
  v13 = a3 / v11;
  if (a3 % v11)
    TIFFWarningExtR(a1, *(const char **)a1, "fractional scanline not read", a4, a5, a6, a7, a8, v18);
  v14 = *(unsigned int *)(v10 + 52);
  if (v13 < v14)
    v14 = v13;
  if (v14)
  {
    v15 = v14 + 1;
    do
    {
      v19 = a2;
      if (TIFFjpeg_read_scanlines(v10, (uint64_t)&v19) != 1)
        goto LABEL_12;
      ++*(_DWORD *)(a1 + 876);
      v16 = *(_QWORD *)(v10 + 1184);
      a2 += v16;
      v8 -= v16;
    }
    while (--v15 > 1);
  }
  *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v10 + 1112);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(v10 + 1120);
  return *(_DWORD *)(v10 + 168) < *(_DWORD *)(v10 + 140) || TIFFjpeg_finish_decompress(v10) != 0;
}

uint64_t JPEGSetupEncode(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  int v21;
  _QWORD *v22;
  unsigned int v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 1096);
  JPEGInitializeLibJPEG(a1, 0);
  if (!v2)
    JPEGSetupEncode_cold_1();
  if (*(_DWORD *)(v2 + 32))
    JPEGSetupEncode_cold_2();
  v3 = *(unsigned __int16 *)(a1 + 122);
  *(_WORD *)(v2 + 1176) = v3;
  if (*(_WORD *)(a1 + 170) != 1)
  {
    *(_QWORD *)(v2 + 56) = 1;
    goto LABEL_19;
  }
  *(_DWORD *)(v2 + 56) = *(unsigned __int16 *)(a1 + 130);
  if (v3 == 6)
  {
    if (*(_DWORD *)(v2 + 1336) != 1)
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  v5 = *(unsigned __int16 *)(a1 + 122);
  if (v5 > 1)
  {
    if (v5 == 5)
    {
      v4 = *(unsigned __int16 *)(a1 + 130);
      if (v4 == 4)
        goto LABEL_12;
    }
    else if (v5 == 2 && *(_WORD *)(a1 + 130) == 3)
    {
LABEL_6:
      v4 = 2;
LABEL_12:
      *(_DWORD *)(v2 + 60) = v4;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)(a1 + 130);
    if (v4 == 1)
      goto LABEL_12;
  }
  *(_DWORD *)(v2 + 60) = 0;
LABEL_19:
  result = TIFFjpeg_set_defaults(v2);
  if (!(_DWORD)result)
    return result;
  if (*(_DWORD *)(v2 + 272) && (*(_BYTE *)(v2 + 1340) & 2) != 0)
  {
    TIFFWarningExtR(a1, "JPEGSetupEncode", "mozjpeg library likely detected. Disable emission of Huffman tables in JpegTables tag, and use optimize_coding to avoid potential issues", v8, v9, v10, v11, v12, v24);
    *(_DWORD *)(v2 + 1340) &= ~2u;
  }
  *(_DWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 280) = 0;
  v13 = *(unsigned __int16 *)(v2 + 1176);
  if ((v13 - 3) < 2)
  {
    TIFFErrorExtR(a1, "JPEGSetupEncode", "PhotometricInterpretation %hu not allowed for JPEG", v8, v9, v10, v11, v12, *(_WORD *)(v2 + 1176));
    return 0;
  }
  if (v13 == 6)
  {
    v14 = *(unsigned __int16 *)(a1 + 336);
    *(_WORD *)(v2 + 1178) = v14;
    v15 = *(unsigned __int16 *)(a1 + 338);
    *(_WORD *)(v2 + 1180) = v15;
    if (!v14 || !v15)
    {
      v20 = "Invalig horizontal/vertical sampling value";
      goto LABEL_43;
    }
    v16 = *(unsigned __int16 *)(a1 + 116);
    if (v16 >= 0x11)
    {
LABEL_37:
      TIFFErrorExtR(a1, "JPEGSetupEncode", "BitsPerSample %hu not allowed for JPEG", v8, v9, v10, v11, v12, v16);
      return 0;
    }
    v25 = 0;
    if (!_cg_TIFFGetField(a1, 532, v7, v8, v9, v10, v11, v12, (uint64_t)&v25))
    {
      v18 = 1 << *(_WORD *)(a1 + 116);
      v26 = 0;
      v27 = (float)(v18 - 1);
      v28 = (float)(v18 >> 1);
      v29 = v27;
      v30 = v28;
      v31 = v27;
      _cg_TIFFSetField(a1, 532, v17, v8, v9, v10, v11, v12, (uint64_t)&v26);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 1178) = 65537;
  }
  v16 = *(unsigned __int16 *)(a1 + 116);
  if (v16 != 8)
    goto LABEL_37;
  *(_DWORD *)(v2 + 88) = 8;
  if ((*(_BYTE *)(a1 + 17) & 4) != 0)
  {
    if (*(_DWORD *)(a1 + 104) % (8 * *(unsigned __int16 *)(v2 + 1180)))
    {
      TIFFErrorExtR(a1, "JPEGSetupEncode", "JPEG tile height must be multiple of %u", v8, v9, v10, v11, v12, 8 * *(_BYTE *)(v2 + 1180));
      return 0;
    }
    if (!(*(_DWORD *)(a1 + 100) % (8 * *(unsigned __int16 *)(v2 + 1178))))
      goto LABEL_46;
    v24 = 8 * *(_WORD *)(v2 + 1178);
    v20 = "JPEG tile width must be multiple of %u";
LABEL_43:
    TIFFErrorExtR(a1, "JPEGSetupEncode", v20, v8, v9, v10, v11, v12, v24);
    return 0;
  }
  v19 = *(_DWORD *)(a1 + 132);
  if (v19 < *(_DWORD *)(a1 + 92) && v19 % (8 * *(unsigned __int16 *)(v2 + 1180)))
  {
    TIFFErrorExtR(a1, "JPEGSetupEncode", "RowsPerStrip must be multiple of %u for JPEG", v8, v9, v10, v11, v12, 8 * *(_BYTE *)(v2 + 1180));
    return 0;
  }
LABEL_46:
  v21 = *(_DWORD *)(v2 + 1340);
  if ((v21 & 3) == 0)
  {
    v23 = *(_DWORD *)(a1 + 80) & 0xFFFFFFFB;
    goto LABEL_58;
  }
  v22 = *(_QWORD **)(v2 + 1320);
  if (v22 && *v22)
    goto LABEL_59;
  if ((v21 & 2) != 0
    && (!*(_QWORD *)(v2 + 160) || !*(_QWORD *)(v2 + 168) || !*(_QWORD *)(v2 + 192) || !*(_QWORD *)(v2 + 200)))
  {
    TIFF_std_huff_tables(v2);
  }
  result = prepare_JPEGTables((_QWORD *)a1);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 16) |= 8u;
    v23 = *(_DWORD *)(a1 + 80) | 4;
LABEL_58:
    *(_DWORD *)(a1 + 80) = v23;
LABEL_59:
    *(_QWORD *)(v2 + 40) = v2 + 1072;
    *(_QWORD *)(v2 + 1088) = std_init_destination;
    *(_QWORD *)(v2 + 1096) = std_empty_output_buffer;
    *(_QWORD *)(v2 + 1104) = std_term_destination;
    return 1;
  }
  return result;
}

uint64_t JPEGPreEncode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  char *v24;
  uint64_t result;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  v8 = *(_QWORD *)(a1 + 1096);
  if (!v8)
    JPEGPreEncode_cold_1();
  v9 = a2;
  v11 = *(_DWORD *)(v8 + 32);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t))(a1 + 976))(a1);
    v11 = *(_DWORD *)(v8 + 32);
  }
  if (v11)
    JPEGPreEncode_cold_2();
  if ((*(_BYTE *)(a1 + 17) & 4) != 0)
  {
    v12 = *(_DWORD *)(a1 + 100);
    v13 = *(_DWORD *)(a1 + 104);
    v14 = _cg_TIFFTileRowSize(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 88);
    if ((*(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 876)) >= *(_DWORD *)(a1 + 132))
      v13 = *(_DWORD *)(a1 + 132);
    else
      v13 = *(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 876);
    v14 = _cg_TIFFScanlineSize(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(v8 + 1184) = v14;
  if (v9 && *(_WORD *)(a1 + 170) == 2)
  {
    v20 = *(unsigned __int16 *)(v8 + 1178);
    if (!*(_WORD *)(v8 + 1178) || (v21 = *(unsigned __int16 *)(v8 + 1180), !*(_WORD *)(v8 + 1180)))
    {
      v24 = "JPEG horizontal or vertical sampling is zero";
      goto LABEL_28;
    }
    v22 = 0;
    if (v12 < -v20)
      v22 = (v12 + v20 - 1) / v20;
    if (v13 >= -v21)
      v13 = 0;
    else
      v13 = (v13 + v21 - 1) / v21;
  }
  else
  {
    v22 = v12;
  }
  if (HIWORD(v22) || v13 >= 0x10000)
  {
    v24 = "Strip/tile too large for JPEG";
LABEL_28:
    TIFFErrorExtR(a1, "JPEGPreEncode", v24, v15, v16, v17, v18, v19, v36);
    return 0;
  }
  *(_DWORD *)(v8 + 48) = v22;
  *(_DWORD *)(v8 + 52) = v13;
  if (*(_WORD *)(a1 + 170) != 1)
  {
    result = TIFFjpeg_set_colorspace(v8, 0);
    if (!(_DWORD)result)
      return result;
    v23 = 0;
    **(_DWORD **)(v8 + 104) = v9;
    if (v9 && *(_WORD *)(v8 + 1176) == 6)
    {
      v23 = 0;
      *(_DWORD *)(*(_QWORD *)(v8 + 104) + 16) = 1;
      *(_DWORD *)(*(_QWORD *)(v8 + 104) + 20) = 1;
      *(_DWORD *)(*(_QWORD *)(v8 + 104) + 24) = 1;
    }
    goto LABEL_42;
  }
  *(_DWORD *)(v8 + 56) = *(unsigned __int16 *)(a1 + 130);
  if (*(_WORD *)(v8 + 1176) != 6)
  {
    v26 = TIFFjpeg_set_colorspace(v8, *(_DWORD *)(v8 + 60));
    v23 = 0;
    result = 0;
    if (!v26)
      return result;
LABEL_42:
    *(_DWORD *)(v8 + 324) = 0;
    *(_DWORD *)(v8 + 336) = 0;
    result = TIFFjpeg_set_quality(v8, *(_DWORD *)(v8 + 1332));
    if (!(_DWORD)result)
      return result;
    v27 = *(_DWORD *)(v8 + 1340);
    v28 = *(_QWORD *)(v8 + 112);
    if ((v27 & 1) != 0)
    {
      if (v28)
        *(_DWORD *)(v28 + 128) = 1;
      v29 = *(_QWORD *)(v8 + 120);
      if (v29)
      {
        v30 = 1;
        goto LABEL_52;
      }
    }
    else
    {
      if (v28)
        *(_DWORD *)(v28 + 128) = 0;
      v29 = *(_QWORD *)(v8 + 120);
      if (v29)
      {
        v30 = 0;
LABEL_52:
        *(_DWORD *)(v29 + 128) = v30;
      }
    }
    if ((v27 & 2) != 0)
    {
      v32 = *(_QWORD *)(v8 + 160);
      if (v32)
        *(_DWORD *)(v32 + 276) = 1;
      v33 = *(_QWORD *)(v8 + 192);
      if (v33)
        *(_DWORD *)(v33 + 276) = 1;
      v34 = *(_QWORD *)(v8 + 168);
      if (v34)
        *(_DWORD *)(v34 + 276) = 1;
      v35 = *(_QWORD *)(v8 + 200);
      v31 = 0;
      if (v35)
        *(_DWORD *)(v35 + 276) = 1;
    }
    else
    {
      v31 = 1;
    }
    *(_DWORD *)(v8 + 296) = v31;
    if (v23)
    {
      *(_DWORD *)(v8 + 288) = 1;
      *(_QWORD *)(a1 + 1016) = JPEGEncodeRaw;
      *(_QWORD *)(a1 + 1032) = JPEGEncodeRaw;
      *(_QWORD *)(a1 + 1048) = JPEGEncodeRaw;
      result = TIFFjpeg_start_compress(v8);
      if (!(_DWORD)result)
        return result;
      result = alloc_downsampled_buffers(a1, *(_QWORD *)(v8 + 104), *(_DWORD *)(v8 + 92));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      *(_DWORD *)(v8 + 288) = 0;
      *(_QWORD *)(a1 + 1016) = JPEGEncode;
      *(_QWORD *)(a1 + 1032) = JPEGEncode;
      *(_QWORD *)(a1 + 1048) = JPEGEncode;
      result = TIFFjpeg_start_compress(v8);
      if (!(_DWORD)result)
        return result;
    }
    *(_DWORD *)(v8 + 1272) = 0;
    return 1;
  }
  v23 = *(_DWORD *)(v8 + 1336) != 1 && (*(_WORD *)(v8 + 1178) != 1 || *(_WORD *)(v8 + 1180) != 1);
  result = TIFFjpeg_set_colorspace(v8, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(*(_QWORD *)(v8 + 104) + 8) = *(unsigned __int16 *)(v8 + 1178);
    *(_DWORD *)(*(_QWORD *)(v8 + 104) + 12) = *(unsigned __int16 *)(v8 + 1180);
    goto LABEL_42;
  }
  return result;
}

uint64_t JPEGPostEncode(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  size_t v8;
  uint64_t v9;
  int v10;
  void **v11;
  int v12;

  v1 = *(_QWORD *)(a1 + 1096);
  if (*(int *)(v1 + 1272) < 1)
    return TIFFjpeg_finish_compress(v1);
  v3 = *(_DWORD *)(v1 + 92);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v1 + 104);
    do
    {
      v6 = *(_DWORD *)(v5 + 12);
      v7 = *(_DWORD *)(v1 + 1272);
      if (v7 * v6 < 8 * v6)
      {
        v8 = (8 * *(_DWORD *)(v5 + 28));
        v9 = 8 * v7 * v6;
        v10 = v6 * (8 - v7);
        do
        {
          v11 = (void **)(*(_QWORD *)(v1 + 8 * v4 + 1192) + v9);
          _TIFFmemcpy(*v11, *(v11 - 1), v8);
          v9 += 8;
          --v10;
        }
        while (v10);
        v3 = *(_DWORD *)(v1 + 92);
      }
      ++v4;
      v5 += 96;
    }
    while (v4 < v3);
  }
  v12 = *(_DWORD *)(v1 + 356);
  if (TIFFjpeg_write_raw_data(v1, v1 + 1192, 8 * v12) == 8 * v12)
  {
    v1 = *(_QWORD *)(a1 + 1096);
    return TIFFjpeg_finish_compress(v1);
  }
  return 0;
}

uint64_t JPEGEncode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  char v31;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 1096);
  if (!v8)
    JPEGEncode_cold_1();
  v11 = *(_QWORD *)(v8 + 1184);
  v12 = a3 / v11;
  if (a3 % v11)
    TIFFWarningExtR(a1, *(const char **)a1, "fractional scanline discarded", a4, a5, a6, a7, a8, v33[0]);
  if ((*(_BYTE *)(a1 + 17) & 4) == 0)
  {
    v13 = *(unsigned int *)(a1 + 876);
    v14 = v12 + v13;
    v15 = *(unsigned int *)(a1 + 92);
    v16 = (v15 - v13);
    if (v14 > v15)
      v12 = v16;
  }
  if (*(_DWORD *)(v8 + 88) == 12)
  {
    v17 = 2 * *(_QWORD *)(v8 + 1184) / 3;
    v18 = (char *)_TIFFmallocExt((_QWORD *)a1, 2 * (int)v17, a3, a4, a5, a6, a7, a8);
    if (!v18)
    {
      TIFFErrorExtR(a1, "JPEGEncode", "Failed to allocate memory", v19, v20, v21, v22, v23, v33[0]);
      return 0;
    }
    v24 = v18;
  }
  else
  {
    v24 = 0;
    LODWORD(v17) = 0;
  }
  v33[0] = 0;
  if (v12 >= 1)
  {
    if ((int)v17 >= 0)
      v25 = v17;
    else
      v25 = v17 + 1;
    v26 = (v25 >> 1);
    while (1)
    {
      if (*(_DWORD *)(v8 + 88) == 12)
      {
        v33[0] = v24;
        if ((int)v17 >= 2)
        {
          v27 = (char *)(a2 + 2);
          v28 = v26;
          v29 = v24 + 1;
          do
          {
            HIDWORD(v30) = *(v27 - 2);
            LODWORD(v30) = *(v27 - 1) << 24;
            *(v29 - 1) = v30 >> 28;
            v31 = *v27;
            v27 += 3;
            *v29 = v31;
            v29 += 4;
            --v28;
          }
          while (v28);
        }
      }
      else
      {
        v33[0] = a2;
      }
      if (TIFFjpeg_write_scanlines(v8, (uint64_t)v33) != 1)
        return 0;
      if (v12 < 2)
        break;
      --v12;
      ++*(_DWORD *)(a1 + 876);
      a2 += *(_QWORD *)(v8 + 1184);
    }
  }
  if (*(_DWORD *)(v8 + 88) == 12)
    _TIFFfreeExt(a1, v24);
  return 1;
}

uint64_t JPEGCleanup(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v1 = *(_QWORD *)(a1 + 1096);
  if (!v1)
    JPEGCleanup_cold_1();
  *(_QWORD *)(a1 + 1288) = *(_QWORD *)(v1 + 1280);
  *(_QWORD *)(a1 + 1280) = *(_QWORD *)(v1 + 1288);
  *(_QWORD *)(a1 + 1296) = *(_QWORD *)(v1 + 1296);
  if (*(_DWORD *)(v1 + 664))
    TIFFjpeg_destroy(v1);
  v3 = *(char **)(v1 + 1320);
  if (v3)
    _TIFFfreeExt(a1, v3);
  _TIFFfreeExt(a1, *(char **)(a1 + 1096));
  *(_QWORD *)(a1 + 1096) = 0;
  return _TIFFSetDefaultCompressionState(a1);
}

uint64_t JPEGDefaultStripSize(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  unsigned int v5;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 1096) + 1304))();
  if (result < *(_DWORD *)(a1 + 92))
  {
    v3 = 0;
    v4 = *(unsigned __int16 *)(a1 + 338);
    v5 = 8 * v4;
    if (result < -8 * v4)
      v3 = (result + v5 - 1) / v5;
    return v3 * v5;
  }
  return result;
}

uint64_t JPEGDefaultTileSize(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 1096) + 1312))();
  v7 = 0;
  v8 = *(unsigned __int16 *)(a1 + 336);
  v9 = 8 * v8;
  if (*a2 < (-8 * v8))
    v7 = (*a2 + v9 - 1) / v9;
  v10 = 0;
  *a2 = v7 * v9;
  v11 = *(unsigned __int16 *)(a1 + 338);
  v12 = 8 * v11;
  if (*a3 < (-8 * v11))
    v10 = (*a3 + v12 - 1) / v12;
  *a3 = v10 * v12;
  return result;
}

uint64_t JPEGResetUpsampled(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;

  v8 = result;
  v9 = *(_QWORD *)(result + 1096);
  v10 = *(_DWORD *)(result + 16);
  v11 = v10 & 0xBFFF;
  *(_DWORD *)(result + 16) = v10 & 0xFFFFBFFF;
  if (*(_WORD *)(result + 170) == 1 && *(_WORD *)(result + 122) == 6 && *(_DWORD *)(v9 + 1336) == 1)
  {
    v11 = v10 | 0x4000;
    *(_DWORD *)(result + 16) = v10 | 0x4000;
  }
  if (*(uint64_t *)(result + 936) >= 1)
  {
    if ((v11 & 0x400) != 0)
      result = _cg_TIFFTileSize(result, a2, a3, a4, a5, a6, a7, a8);
    else
      result = -1;
    *(_QWORD *)(v8 + 936) = result;
  }
  if (*(uint64_t *)(v8 + 1104) >= 1)
  {
    result = _cg_TIFFScanlineSize(v8, a2, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(v8 + 1104) = result;
  }
  return result;
}

uint64_t JPEGFixupTagsSubsamplingReadByte(uint64_t a1, _BYTE *a2)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 32))
  {
    v4 = *(_BYTE **)(a1 + 24);
LABEL_3:
    *a2 = *v4;
    ++*(_QWORD *)(a1 + 24);
    --*(_DWORD *)(a1 + 32);
    return 1;
  }
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      if ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 1224))(*(_QWORD *)(*(_QWORD *)a1 + 1200), *(_QWORD *)(a1 + 40), 0) == -1)return 0;
      *(_BYTE *)(a1 + 56) = 1;
      v6 = *(_QWORD *)(a1 + 48);
    }
    v7 = *(unsigned int *)(a1 + 16);
    if (v6 >= v7)
      v8 = v7;
    else
      v8 = v6;
    if ((v8 & 0x80000000) != 0)
      JPEGFixupTagsSubsamplingReadByte_cold_1();
    if ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 1208))(*(_QWORD *)(*(_QWORD *)a1 + 1200), *(_QWORD *)(a1 + 8), v8) == v8)
    {
      v4 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 24) = v4;
      *(_DWORD *)(a1 + 32) = v8;
      v9 = *(_QWORD *)(a1 + 48) - v8;
      *(_QWORD *)(a1 + 40) += v8;
      *(_QWORD *)(a1 + 48) = v9;
      goto LABEL_3;
    }
  }
  return 0;
}

uint64_t JPEGFixupTagsSubsamplingReadWord(uint64_t a1, _WORD *a2)
{
  uint64_t result;
  unsigned __int8 v5;
  unsigned __int8 v6;

  v6 = 0;
  result = JPEGFixupTagsSubsamplingReadByte(a1, &v6);
  if ((_DWORD)result)
  {
    v5 = 0;
    result = JPEGFixupTagsSubsamplingReadByte(a1, &v5);
    if ((_DWORD)result)
    {
      *a2 = v5 | (v6 << 8);
      return 1;
    }
  }
  return result;
}

uint64_t JPEGInitializeLibJPEG(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 1096);
  if (*(_DWORD *)(v3 + 664))
  {
    v4 = *(_DWORD *)(v3 + 32);
    if (a2)
    {
      if (v4)
        return result;
    }
    else if (!v4)
    {
      return result;
    }
    TIFFjpeg_destroy(*(_QWORD *)(result + 1096));
    *(_DWORD *)(v3 + 664) = 0;
  }
  if (a2)
  {
    result = TIFFjpeg_create_decompress(v3);
    if (!(_DWORD)result)
      return result;
    goto LABEL_9;
  }
  result = TIFFjpeg_create_compress(v3);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_QWORD *)(v5 + 88);
    if (v6 >= 1)
    {
      result = (uint64_t)getenv("JPEGMEM");
      if ((unint64_t)v6 >> 21 <= 4 && result == 0)
        *(_QWORD *)(v5 + 88) = 10485760;
    }
LABEL_9:
    *(_DWORD *)(v3 + 664) = 1;
  }
  return result;
}

uint64_t TIFFjpeg_create_compress(uint64_t a1)
{
  *(_QWORD *)a1 = _cg_jpeg_std_error(a1 + 672);
  *(_QWORD *)(a1 + 672) = TIFFjpeg_error_exit;
  *(_QWORD *)(a1 + 688) = TIFFjpeg_output_message;
  *(_QWORD *)(a1 + 24) = 0;
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_CreateCompress((char *)a1, 90, 584);
  return 1;
}

uint64_t tables_init_source(uint64_t result)
{
  *(_QWORD *)(result + 1112) = *(_QWORD *)(result + 1320);
  *(_QWORD *)(result + 1120) = *(unsigned int *)(result + 1328);
  return result;
}

uint64_t TIFFjpeg_abort(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_abort(a1);
  return 1;
}

uint64_t DecodeRowError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char vars0;

  TIFFErrorExtR(a1, "TIFFReadScanline", "scanline oriented access is not supported for downsampled JPEG compressed images, consider enabling TIFFTAG_JPEGCOLORMODE as JPEGCOLORMODE_RGB.", a4, a5, a6, a7, a8, vars0);
  return 0;
}

BOOL JPEGDecodeRaw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t i;
  uint64_t v34;
  BOOL v35;
  char *v37;
  char v38;

  v11 = *(_QWORD *)(a1 + 1096);
  v12 = *(_DWORD *)(v11 + 52);
  v13 = *(_DWORD *)(a1 + 92) - *(_DWORD *)(a1 + 876);
  if (v12 <= v13)
  {
    v13 = *(_DWORD *)(v11 + 52);
  }
  else if ((*(_BYTE *)(a1 + 17) & 4) != 0)
  {
    goto LABEL_6;
  }
  v12 = v13;
  if (!v13)
    return *(_DWORD *)(v11 + 168) < *(_DWORD *)(v11 + 140) || TIFFjpeg_finish_decompress(v11) != 0;
LABEL_6:
  v14 = v12;
  v15 = *(_DWORD *)(*(_QWORD *)(v11 + 304) + 140);
  v16 = *(int *)(v11 + 1276);
  v17 = *(_QWORD *)(v11 + 1184);
  while (1)
  {
    if (a3 < v17)
    {
      v37 = "application buffer not large enough for all data.";
      goto LABEL_37;
    }
    v18 = *(_DWORD *)(v11 + 1272);
    if (v18 >= 8)
    {
      v19 = *(_DWORD *)(v11 + 420);
      if (TIFFjpeg_read_raw_data(v11, v11 + 1192, 8 * v19) != 8 * v19)
        return 0;
      v18 = 0;
      *(_DWORD *)(v11 + 1272) = 0;
    }
    v20 = *(_DWORD *)(v11 + 56);
    if (v20 >= 1)
      break;
LABEL_32:
    *(_DWORD *)(v11 + 1272) = v18 + 1;
    v34 = *(unsigned __int16 *)(v11 + 1180);
    *(_DWORD *)(a1 + 876) += v34;
    v17 = *(_QWORD *)(v11 + 1184);
    a2 += v17;
    a3 -= v17;
    v35 = v14 <= v34;
    v14 -= v34;
    if (v35)
      return *(_DWORD *)(v11 + 168) < *(_DWORD *)(v11 + 140) || TIFFjpeg_finish_decompress(v11) != 0;
  }
  v21 = 0;
  LODWORD(v22) = 0;
  v23 = *(_QWORD *)(v11 + 304);
  while (1)
  {
    v24 = *(_DWORD *)(v23 + 12);
    if (v24 >= 1)
      break;
LABEL_30:
    ++v21;
    v23 += 96;
    if (v21 >= v20)
    {
      v18 = *(_DWORD *)(v11 + 1272);
      goto LABEL_32;
    }
  }
  v25 = 0;
  v26 = *(unsigned int *)(v23 + 8);
  v22 = (int)v22;
  while (a3 >= v16 * (v15 - 1) + (int)v26 + v22)
  {
    v27 = *(char **)(*(_QWORD *)(v11 + 8 * v21 + 1192) + 8 * (v25 + *(_DWORD *)(v11 + 1272) * v24));
    if ((_DWORD)v26 == 1)
    {
      if (v15)
      {
        v28 = a2;
        v29 = v15;
        do
        {
          v30 = *v27++;
          *(_BYTE *)(v28 + v22) = v30;
          v28 += v16;
          --v29;
        }
        while (v29);
      }
    }
    else if (v15)
    {
      v31 = a2 + v22;
      v32 = v15;
      do
      {
        if ((int)v26 >= 1)
        {
          for (i = 0; i != v26; ++i)
          {
            a4 = v27[i];
            *(_BYTE *)(v31 + i) = a4;
          }
          v27 += i;
        }
        v31 += v16;
        --v32;
      }
      while (v32);
    }
    v22 += (int)v26;
    if (++v25 == v24)
    {
      v20 = *(_DWORD *)(v11 + 56);
      goto LABEL_30;
    }
  }
  v37 = "application buffer not large enough for all data, possible subsampling issue";
LABEL_37:
  TIFFErrorExtR(a1, "JPEGDecodeRaw", v37, a4, a5, a6, a7, a8, v38);
  return 0;
}

uint64_t TIFFjpeg_start_decompress(uint64_t a1)
{
  char *v2;

  *(_QWORD *)(a1 + 16) = a1 + 1040;
  *(_QWORD *)(a1 + 1040) = TIFFjpeg_progress_monitor;
  *(_DWORD *)(a1 + 1348) = 100;
  v2 = getenv("LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER");
  if (v2)
    *(_DWORD *)(a1 + 1348) = atoi(v2);
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_start_decompress(a1);
  return 1;
}

uint64_t alloc_downsampled_buffers(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 1096);
  if (a3 < 1)
  {
    v5 = 0;
LABEL_7:
    *(_DWORD *)(v3 + 1276) = v5;
    return 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 8 * a3;
    v7 = (_DWORD *)(a2 + 28);
    while (1)
    {
      v8 = *(v7 - 5);
      v9 = *(v7 - 4);
      result = TIFFjpeg_alloc_sarray(v3, (8 * *v7), (8 * v9));
      if (!result)
        break;
      v7 += 24;
      v5 += v9 * v8;
      *(_QWORD *)(v3 + v4 + 1192) = result;
      v4 += 8;
      if (v6 == v4)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t TIFFjpeg_read_raw_data(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_read_raw_data(a1, a2, a3);
}

uint64_t TIFFjpeg_finish_decompress(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_finish_decompress(a1);
}

uint64_t TIFFjpeg_progress_monitor(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (*(_DWORD *)(result + 32))
  {
    if (*(_DWORD *)(result + 172) >= *(_DWORD *)(result + 1348))
    {
      v8 = result;
      TIFFErrorExtR(*(_QWORD *)(result + 1168), "TIFFjpeg_progress_monitor", "Scan number %d exceeds maximum scans (%d). This limit can be raised through the LIBTIFF_JPEG_MAX_ALLOWED_SCAN_NUMBER environment variable.", a4, a5, a6, a7, a8, *(_DWORD *)(result + 172));
      _cg_jpeg_abort(v8);
      longjmp((int *)(v8 + 848), 1);
    }
  }
  return result;
}

uint64_t TIFFjpeg_alloc_sarray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1, 1, a2, a3);
}

uint64_t TIFFjpeg_read_scanlines(uint64_t a1, uint64_t a2)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_read_scanlines(a1, a2, 1);
}

uint64_t TIFFjpeg_set_defaults(uint64_t a1)
{
  double v2;
  int32x2_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __n128 v8;

  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_set_defaults(a1, v2, v3, v4, v5, v6, v7, v8);
  return 1;
}

uint64_t TIFF_std_huff_tables(uint64_t result)
{
  _QWORD *v1;

  v1 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 160))
    result = _cg_jpeg_std_huff_table(result, 1, 0);
  if (!v1[24])
    result = _cg_jpeg_std_huff_table((uint64_t)v1, 0, 0);
  if (!v1[21])
    result = _cg_jpeg_std_huff_table((uint64_t)v1, 1, 1u);
  if (!v1[25])
    return _cg_jpeg_std_huff_table((uint64_t)v1, 0, 1u);
  return result;
}

uint64_t prepare_JPEGTables(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;

  v2 = a1[137];
  if (TIFFjpeg_set_quality(v2, *(_DWORD *)(v2 + 1332)) && TIFFjpeg_suppress_tables(v2))
  {
    v9 = *(_DWORD *)(v2 + 1340);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v2 + 112);
      if (v10)
        *(_DWORD *)(v10 + 128) = 0;
      if (*(_WORD *)(v2 + 1176) == 6)
      {
        v11 = *(_QWORD *)(v2 + 120);
        if (v11)
          *(_DWORD *)(v11 + 128) = 0;
      }
    }
    if ((v9 & 2) != 0)
    {
      v12 = *(_QWORD *)(v2 + 160);
      if (v12)
        *(_DWORD *)(v12 + 276) = 0;
      v13 = *(_QWORD *)(v2 + 192);
      if (v13)
        *(_DWORD *)(v13 + 276) = 0;
      if (*(_WORD *)(v2 + 1176) == 6)
      {
        v14 = *(_QWORD *)(v2 + 168);
        if (v14)
          *(_DWORD *)(v14 + 276) = 0;
        v15 = *(_QWORD *)(v2 + 200);
        if (v15)
          *(_DWORD *)(v15 + 276) = 0;
      }
    }
    v16 = *(char **)(v2 + 1320);
    if (v16)
      _TIFFfreeExt((uint64_t)a1, v16);
    *(_DWORD *)(v2 + 1328) = 1000;
    v17 = _TIFFmallocExt(a1, 1000, v3, v4, v5, v6, v7, v8);
    *(_QWORD *)(v2 + 1320) = v17;
    if (v17)
    {
      *(_QWORD *)(v2 + 40) = v2 + 1072;
      *(_QWORD *)(v2 + 1088) = tables_init_destination;
      *(_QWORD *)(v2 + 1096) = tables_empty_output_buffer;
      *(_QWORD *)(v2 + 1104) = tables_term_destination;
      return TIFFjpeg_write_tables(v2);
    }
    *(_DWORD *)(v2 + 1328) = 0;
    TIFFErrorExtR(*(_QWORD *)(v2 + 1168), "TIFFjpeg_tables_dest", "No space for JPEGTables", v18, v19, v20, v21, v22, v24);
  }
  return 0;
}

uint64_t TIFFjpeg_set_quality(uint64_t a1, int a2)
{
  double v4;
  int32x2_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  __n128 v10;

  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_set_quality(a1, a2, 0, v4, v5, v6, v7, v8, v9, v10);
  return 1;
}

uint64_t TIFFjpeg_suppress_tables(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_suppress_tables(a1, 1);
  return 1;
}

uint64_t TIFFjpeg_write_tables(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_write_tables(a1);
  return 1;
}

uint64_t tables_init_destination(uint64_t result)
{
  *(_QWORD *)(result + 1072) = *(_QWORD *)(result + 1320);
  *(_QWORD *)(result + 1080) = *(unsigned int *)(result + 1328);
  return result;
}

uint64_t tables_empty_output_buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  void (**v10)(uint64_t);
  uint64_t v11;

  v9 = _TIFFreallocExt(*(_QWORD **)(a1 + 1168), *(char **)(a1 + 1320), (*(_DWORD *)(a1 + 1328) + 1000), a4, a5, a6, a7, a8);
  if (!v9)
  {
    v10 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v10 + 10) = 56;
    *((_DWORD *)v10 + 12) = 100;
    (**(void (***)(uint64_t))a1)(a1);
  }
  v11 = *(unsigned int *)(a1 + 1328);
  *(_QWORD *)(a1 + 1072) = (char *)v9 + v11;
  *(_QWORD *)(a1 + 1080) = 1000;
  *(_QWORD *)(a1 + 1320) = v9;
  *(_DWORD *)(a1 + 1328) = v11 + 1000;
  return 1;
}

uint64_t tables_term_destination(uint64_t result)
{
  *(_DWORD *)(result + 1328) -= *(_DWORD *)(result + 1080);
  return result;
}

_QWORD *std_init_destination(_QWORD *result)
{
  uint64_t v1;

  v1 = result[146];
  result[134] = *(_QWORD *)(v1 + 1120);
  result[135] = *(_QWORD *)(v1 + 1128);
  return result;
}

uint64_t std_empty_output_buffer(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t result;

  v9 = (_QWORD *)a1[146];
  v9[145] = v9[141];
  result = TIFFFlushData1((uint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    a1[134] = v9[140];
    a1[135] = v9[141];
    return 1;
  }
  return result;
}

_QWORD *std_term_destination(_QWORD *result)
{
  _QWORD *v1;

  v1 = (_QWORD *)result[146];
  v1[144] = result[134];
  v1[145] = v1[141] - result[135];
  return result;
}

uint64_t TIFFjpeg_set_colorspace(uint64_t a1, int a2)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_set_colorspace(a1, a2);
  return 1;
}

uint64_t JPEGEncodeRaw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  char v44;

  v10 = *(_QWORD *)(a1 + 1096);
  v11 = *(int *)(v10 + 1276);
  v12 = (uint64_t)(*(unsigned int *)(v10 + 48) + (unint64_t)*(unsigned __int16 *)(v10 + 1178) - 1)
      / *(unsigned __int16 *)(v10 + 1178)
      * *(int *)(v10 + 88)
      * (*(unsigned __int16 *)(v10 + 1180) * (unint64_t)*(unsigned __int16 *)(v10 + 1178) + 2);
  v14 = v12 + 7;
  v13 = v12 < -7;
  v15 = v12 + 14;
  if (!v13)
    v15 = v14;
  v16 = v15 >> 3;
  v17 = a3 / (v15 >> 3);
  v18 = v17 * *(unsigned __int16 *)(v10 + 1180);
  if (a3 != v17 * v16)
    TIFFWarningExtR(a1, *(const char **)a1, "fractional scanline discarded", a4, a5, a6, a7, a8, v44);
  if (v18 < 1)
    return 1;
  v19 = *(_DWORD *)(*(_QWORD *)(v10 + 104) + 140);
  while (1)
  {
    v20 = *(_DWORD *)(v10 + 92);
    if (v20 >= 1)
    {
      v21 = 0;
      LODWORD(v22) = 0;
      v23 = *(int **)(v10 + 104);
      do
      {
        v24 = v23[3];
        if (v24 >= 1)
        {
          v25 = 0;
          v26 = v23[2];
          v27 = v23[2];
          v28 = 8 * v23[7];
          v29 = v28 - v26 * v19;
          v22 = (int)v22;
          v30 = v26 * v19 - v28;
          do
          {
            v31 = *(_BYTE **)(*(_QWORD *)(v10 + 8 * v21 + 1192) + 8 * (v25 + *(_DWORD *)(v10 + 1272) * v24));
            if ((_DWORD)v27 == 1)
            {
              if (v19)
              {
                v32 = a2;
                v33 = v19;
                do
                {
                  *v31++ = *(_BYTE *)(v32 + v22);
                  v32 += v11;
                  --v33;
                }
                while (v33);
              }
            }
            else if (v19)
            {
              v34 = a2 + v22;
              v35 = v19;
              do
              {
                if ((int)v26 >= 1)
                {
                  v36 = 0;
                  do
                  {
                    v31[v36] = *(_BYTE *)(v34 + v36);
                    ++v36;
                  }
                  while (v27 != v36);
                  v31 += v36;
                }
                v34 += v11;
                --v35;
              }
              while (v35);
            }
            if (v29 >= 1)
            {
              v37 = *(v31 - 1);
              v38 = v30;
              do
                *v31++ = v37;
              while (!__CFADD__(v38++, 1));
            }
            v22 += v26;
            ++v25;
          }
          while (v25 != v24);
          v20 = *(_DWORD *)(v10 + 92);
        }
        ++v21;
        v23 += 24;
      }
      while (v21 < v20);
    }
    v40 = *(_DWORD *)(v10 + 1272);
    *(_DWORD *)(v10 + 1272) = v40 + 1;
    if (v40 < 7)
      goto LABEL_33;
    v41 = *(_DWORD *)(v10 + 356);
    if (TIFFjpeg_write_raw_data(v10, v10 + 1192, 8 * v41) != 8 * v41)
      return 0;
    *(_DWORD *)(v10 + 1272) = 0;
LABEL_33:
    v42 = *(unsigned __int16 *)(v10 + 1180);
    *(_DWORD *)(a1 + 876) += v42;
    a2 += v16;
    v13 = v18 <= v42;
    v18 -= v42;
    if (v13)
      return 1;
  }
}

uint64_t TIFFjpeg_start_compress(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_start_compress(a1, 0);
  return 1;
}

uint64_t TIFFjpeg_write_raw_data(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_write_raw_data(a1, a2, a3);
}

uint64_t TIFFjpeg_finish_compress(uint64_t a1)
{
  if (setjmp((int *)(a1 + 848)))
    return 0;
  _cg_jpeg_finish_compress(a1);
  return 1;
}

uint64_t TIFFjpeg_write_scanlines(uint64_t a1, uint64_t a2)
{
  if (setjmp((int *)(a1 + 848)))
    return 0xFFFFFFFFLL;
  else
    return _cg_jpeg_write_scanlines(a1, a2, 1u);
}

uint64_t Default_CTor(void)
{
  _QWORD *exception;
  uint64_t v2;
  _OWORD v3[2];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  WXMPFiles_CTor_1(v3);
  if (*(_QWORD *)&v3[0])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v2 = *(_QWORD *)&v3[0];
    *(_DWORD *)exception = v4;
    exception[1] = v2;
    *((_BYTE *)exception + 16) = 0;
  }
  return *((_QWORD *)&v3[0] + 1);
}

void IIOMetadataUpdater::IIOMetadataUpdater(IIOMetadataUpdater *this, IIOImageSource *a2, IIOImageDestination *a3, IIODictionary *a4, char a5)
{
  char BoolForKey;

  *(_QWORD *)this = &off_1E1BB1580;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *((_BYTE *)this + 32) = a5;
  *((_BYTE *)this + 33) = IIODictionary::containsKey(a4, CFSTR("kCGImageDestinationMetadata"));
  *((_BYTE *)this + 34) = 0;
  if ((IIODictionary::containsKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationMergeMetadata")) & 1) != 0)
  {
    BoolForKey = IIODictionary::getBoolForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationMergeMetadata"));
    *((_BYTE *)this + 34) = BoolForKey;
  }
  else
  {
    BoolForKey = *((_BYTE *)this + 34);
  }
  *((_BYTE *)this + 35) = BoolForKey ^ 1;
  *((_BYTE *)this + 39) = IIODictionary::getUint32ForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationOrientation"))- 1 < 8;
  *((_BYTE *)this + 38) = IIODictionary::containsKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationDateTime"));
  *((_BYTE *)this + 40) = IIODictionary::containsKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationICCProfile"));
  *((_BYTE *)this + 36) = IIODictionary::getBoolForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageMetadataShouldExcludeXMP"));
  *((_BYTE *)this + 37) = IIODictionary::getBoolForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageMetadataShouldExcludeGPS"));
}

void IIOMetadataUpdater::~IIOMetadataUpdater(IIOMetadataUpdater *this)
{
  JUMPOUT(0x18D761C30);
}

BOOL IIOMetadataUpdater::copySourceToDestination(IIOImageSource **this)
{
  IIOImageRead *v2;
  const __CFData *v3;
  const __CFData *v4;
  IIOImageWriteSession *v5;
  const UInt8 *BytePtr;
  size_t Length;
  size_t v8;
  uint64_t Ref;
  _BOOL8 v10;

  v2 = (IIOImageRead *)IIOImageSource::imageRead(this[1]);
  v3 = IIOImageRead::copyData(v2);
  if (v3)
  {
    v4 = v3;
    v5 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
    BytePtr = CFDataGetBytePtr(v4);
    Length = CFDataGetLength(v4);
    v8 = IIOImageWriteSession::putBytes(v5, BytePtr, Length);
    if (v8 == CFDataGetLength(v4))
    {
      Ref = IIOImageSource::imageReadRef(this[2]);
      v10 = CGImageWriteSessionFinalize(Ref, 0) == 0;
    }
    else
    {
      v10 = 1;
    }
    CFRelease(v4);
  }
  else
  {
    LogError("copySourceToDestination", 164, "*** ERROR: cannot get src data from CGImageSource\n");
    return 1;
  }
  return v10;
}

CGImageMetadata *IIOMetadataUpdater::createMetadataWithOrientation(IIOImageSource **this, int a2, __CFError **a3)
{
  const CGImageMetadata *v5;
  const CGImageMetadata *v6;
  CGImageMetadata *MutableCopy;
  _BYTE v9[16];
  CFTypeRef value;
  const __CFDictionary *v11[3];

  memset(v11, 0, sizeof(v11));
  IIODictionary::IIODictionary((IIODictionary *)v11);
  v5 = (const CGImageMetadata *)IIOImageSource::copyMetadataAtIndex(this[1], 0, v11);
  v6 = v5;
  if (v5 && (MutableCopy = CGImageMetadataCreateMutableCopy(v5)) != 0
    || (MutableCopy = CGImageMetadataCreateMutable()) != 0)
  {
    IIONumber::IIONumber((IIONumber *)v9, a2);
    CGImageMetadataSetValueMatchingImageProperty(MutableCopy, CFSTR("{TIFF}"), CFSTR("Orientation"), value);
    IIONumber::~IIONumber((IIONumber *)v9);
  }
  if (v6)
    CFRelease(v6);
  IIODictionary::~IIODictionary((IIODictionary *)v11);
  return MutableCopy;
}

void sub_188075C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  IIONumber::~IIONumber((IIONumber *)&a9);
  IIODictionary::~IIODictionary((IIODictionary *)&a12);
  _Unwind_Resume(a1);
}

CGImageMetadata *IIOMetadataUpdater::createMetadataWithDateTime(IIOImageSource **this, const __CFString *a2, __CFError **a3)
{
  const CGImageMetadata *v6;
  const CGImageMetadata *v7;
  CGImageMetadata *Mutable;
  CFTypeID v9;
  const __CFLocale *v10;
  const __CFAllocator *v11;
  __CFDateFormatter *v12;
  __CFDateFormatter *v13;
  CFStringRef StringWithDate;
  CFTypeID v15;
  __CFString *MutableCopy;
  const __CFString *v17;
  const __CFDictionary *v19[3];
  CFRange v20;

  memset(v19, 0, sizeof(v19));
  IIODictionary::IIODictionary((IIODictionary *)v19);
  v6 = (const CGImageMetadata *)IIOImageSource::copyMetadataAtIndex(this[1], 0, v19);
  v7 = v6;
  if (!v6 || (Mutable = CGImageMetadataCreateMutableCopy(v6)) == 0)
  {
    Mutable = CGImageMetadataCreateMutable();
    if (!Mutable)
      goto LABEL_31;
  }
  v9 = CFGetTypeID(a2);
  if (v9 == CFDateGetTypeID())
  {
    v10 = CFLocaleCopyCurrent();
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v12, CFSTR("yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ"));
    v13 = CFDateFormatterCreate(v11, v10, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v13, CFSTR("SSS"));
    if (v13)
    {
      StringWithDate = CFDateFormatterCreateStringWithDate(v11, v13, (CFDateRef)a2);
      if (!v12)
        goto LABEL_19;
    }
    else
    {
      StringWithDate = 0;
      if (!v12)
        goto LABEL_19;
    }
    v17 = CFDateFormatterCreateStringWithDate(v11, v12, (CFDateRef)a2);
    if (v17)
    {
      MutableCopy = CFStringCreateMutableCopy(v11, 32, v17);
      if (MutableCopy)
      {
        v20.length = CFStringGetLength(v17);
        v20.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("GMT"), &stru_1E1BCE100, v20, 0);
      }
      CFRelease(v17);
      if (!v10)
      {
LABEL_21:
        if (v12)
          CFRelease(v12);
        if (v13)
          CFRelease(v13);
        if (MutableCopy)
          goto LABEL_26;
        goto LABEL_28;
      }
LABEL_20:
      CFRelease(v10);
      goto LABEL_21;
    }
LABEL_19:
    MutableCopy = 0;
    if (!v10)
      goto LABEL_21;
    goto LABEL_20;
  }
  v15 = CFGetTypeID(a2);
  if (v15 == CFStringGetTypeID())
  {
    StringWithDate = CreateSubsecTimeFromXMPDateTime(a2);
    if (StringWithDate)
    {
      MutableCopy = (__CFString *)CreateXMPDateFromXMPDateTimeAndSubsecTime(a2, (uint64_t)StringWithDate);
      if (!MutableCopy)
        goto LABEL_28;
    }
    else
    {
      MutableCopy = (__CFString *)CreateXMPDateTimeWithXMPOrExifDateTimeString(a2);
      StringWithDate = 0;
      if (!MutableCopy)
        goto LABEL_28;
    }
LABEL_26:
    CGImageMetadataSetValueWithPath(Mutable, 0, CFSTR("photoshop:DateCreated"), MutableCopy);
    CGImageMetadataSetValueWithPath(Mutable, 0, CFSTR("xmp:CreateDate"), MutableCopy);
    CGImageMetadataSetValueWithPath(Mutable, 0, CFSTR("xmp:ModifyDate"), MutableCopy);
    CFRelease(MutableCopy);
    goto LABEL_29;
  }
  StringWithDate = 0;
LABEL_28:
  CGImageMetadataCreateAndLogUTF8Error("createMetadataWithDateTime", 278, 2, "Could not parse kCGImageDestinationDateTime string - must be a valid EXIF DateTime or ISO8601 string", a3);
LABEL_29:
  if (StringWithDate)
    CFRelease(StringWithDate);
LABEL_31:
  if (v7)
    CFRelease(v7);
  IIODictionary::~IIODictionary((IIODictionary *)v19);
  return Mutable;
}

void sub_188075EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

CGMutableImageMetadataRef IIOMetadataUpdater::createMetadataWithMetadata(IIOImageSource **this, const CGImageMetadata *cf, __CFError **a3)
{
  const CGImageMetadata *v5;
  CGMutableImageMetadataRef MutableCopy;
  _QWORD v8[3];
  const __CFDictionary *v9[3];

  if (cf && *((_BYTE *)this + 34))
  {
    memset(v9, 0, sizeof(v9));
    IIODictionary::IIODictionary((IIODictionary *)v9);
    v5 = (const CGImageMetadata *)IIOImageSource::copyMetadataAtIndex(this[1], 0, v9);
    MutableCopy = CGImageMetadataCreateMutableCopy(v5);
    if (MutableCopy)
    {
      if (!v5)
        goto LABEL_12;
    }
    else
    {
      MutableCopy = CGImageMetadataCreateMutable();
      if (!v5)
      {
LABEL_12:
        if (MutableCopy)
        {
          memset(v8, 0, sizeof(v8));
          IIODictionary::IIODictionary((IIODictionary *)v8);
          IIODictionary::setObjectForKey((IIODictionary *)v8, (const void *)*MEMORY[0x1E0C9AE50], CFSTR("kCGImageMetadataMergeOverwrite"));
          CGImageMetadataMerge((uint64_t)MutableCopy, (uint64_t)cf, (IIODictionary *)v8);
          if (*((_BYTE *)this + 37))
            CGImageMetadataRemoveGPS((uint64_t)MutableCopy);
          IIODictionary::~IIODictionary((IIODictionary *)v8);
        }
        IIODictionary::~IIODictionary((IIODictionary *)v9);
        return MutableCopy;
      }
    }
    CFRelease(v5);
    goto LABEL_12;
  }
  if (!cf)
    return 0;
  if (*((_BYTE *)this + 37))
  {
    MutableCopy = CGImageMetadataCreateMutableCopy(cf);
    CGImageMetadataRemoveGPS((uint64_t)MutableCopy);
    return MutableCopy;
  }
  return (CGMutableImageMetadataRef)CFRetain(cf);
}

void sub_188076038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t IIOMetadataUpdater::isValid(IIOMetadataUpdater *this, __CFError **a2)
{
  const void *Type;
  const __CFDictionary *ObjectForKey;
  unsigned int Uint32ForKey;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  char *v9;
  int v10;
  int v11;
  CFTypeID v12;
  int v13;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;

  if (!*((_BYTE *)this + 32))
    return 1;
  Type = (const void *)IIOImageSource::getType(*((IIO_Reader ***)this + 1));
  if (*((_BYTE *)this + 33))
    ObjectForKey = IIODictionary::getObjectForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationMetadata"));
  else
    ObjectForKey = 0;
  if (*((_BYTE *)this + 39))
    Uint32ForKey = IIODictionary::getUint32ForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationOrientation"));
  else
    Uint32ForKey = 0;
  if (*((_BYTE *)this + 38))
    v7 = IIODictionary::getObjectForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationDateTime"));
  else
    v7 = 0;
  if (*((_BYTE *)this + 40))
    v8 = IIODictionary::getObjectForKey(*((IIODictionary **)this + 3), CFSTR("kCGImageDestinationICCProfile"));
  else
    v8 = 0;
  if (*((_BYTE *)this + 33))
  {
    if (*((_BYTE *)this + 39))
    {
      v9 = "kCGImageDestinationMetadata cannot be used with kCGImageDestinationOrientation";
      v10 = 364;
LABEL_34:
      v13 = 3;
LABEL_35:
      CGImageMetadataCreateAndLogUTF8Error("CGImageDestinationCopyImageSource", v10, v13, v9, a2);
      return 0;
    }
    if (*((_BYTE *)this + 38))
    {
      v9 = "kCGImageDestinationMetadata cannot be used with kCGImageDestinationDateTime";
      v10 = 369;
      goto LABEL_34;
    }
    if (ObjectForKey)
    {
      v12 = CFGetTypeID(ObjectForKey);
      if (v12 != CGImageMetadataGetTypeID())
      {
        v9 = "Invalid type - kCGImageDestinationMetadata value must be a CGImageMetadataRef";
        v10 = 379;
        goto LABEL_51;
      }
    }
  }
  else
  {
    if (!*((_BYTE *)this + 39)
      && !*((_BYTE *)this + 38)
      && !*((_BYTE *)this + 40)
      && !*((_BYTE *)this + 37)
      && !*((_BYTE *)this + 36))
    {
      v9 = "One of kCGImageDestinationMetadata, kCGImageDestinationOrientation, kCGImageDestinationDateTime, kCGImageMeta"
           "dataShouldExcludeXMP, or kCGImageMetadataShouldExcludeGPS is required.";
      v10 = 359;
      goto LABEL_51;
    }
    if (*((_BYTE *)this + 34))
    {
      v11 = *((unsigned __int8 *)this + 38);
      if (!(v11 | *((unsigned __int8 *)this + 39)))
      {
        v9 = "kCGImageDestinationMetadata is required if kCGImageDestinationMergeMetadata is true";
        v10 = 374;
        goto LABEL_34;
      }
      goto LABEL_30;
    }
  }
  v11 = *((unsigned __int8 *)this + 38);
LABEL_30:
  if (*((_BYTE *)this + 37))
  {
    if (v11 || *((_BYTE *)this + 39))
    {
      v9 = "kCGImageDestinationExcludeGPS cannot be used with kCGImageDestinationDateTime or kCGImageDestinationOrientation";
      v10 = 384;
      goto LABEL_34;
    }
  }
  else if (v11)
  {
    if (v7)
    {
      v15 = CFGetTypeID(v7);
      if (v15 != CFStringGetTypeID())
      {
        v16 = CFGetTypeID(v7);
        if (v16 != CFDateGetTypeID())
        {
          v9 = "Invalid type - kCGImageDestinationDateTime value must be a CFStringRef or CFDateRef";
          v10 = 389;
          goto LABEL_51;
        }
      }
    }
  }
  if (*((_BYTE *)this + 39) && Uint32ForKey - 9 <= 0xFFFFFFF7)
  {
    v9 = "Invalid value for kCGImageDestinationOrientation, must be a CFNumber between 1 and 8 inclusive.";
    v10 = 394;
LABEL_51:
    v13 = 2;
    goto LABEL_35;
  }
  if (*((_BYTE *)this + 40))
  {
    v17 = CFGetTypeID(v8);
    if (v17 != CFDataGetTypeID())
    {
      v9 = "Invalid value for kCGImageDestinationICCProfile, must be a CFData";
      v10 = 399;
      goto LABEL_51;
    }
    if (*((_BYTE *)this + 40) && !CFEqual(Type, CFSTR("public.jpeg")))
    {
      v9 = "Setting ICC profile is only supported for JPEG.";
      v10 = 404;
      v13 = 1;
      goto LABEL_35;
    }
  }
  return 1;
}

BOOL IIOMetadataUpdater::updateDestination(IIOImageSource **this, __CFError **a2)
{
  const __CFDictionary *ObjectForKey;
  CFTypeRef v5;
  const void *v7;
  const __CFDictionary **v8;
  CGImageMetadata *Mutable;
  const __CFString *Type;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const char *v15;
  int v16;
  _BOOL8 v17;
  char v18;
  _BOOL8 v19;
  char v20;
  _BOOL8 v21;
  char v22;
  _BOOL8 v23;
  char v24;
  _QWORD v25[3];
  const __CFDictionary *v26[3];

  if ((IIOMetadataUpdater::isValid((IIOMetadataUpdater *)this, a2) & 1) != 0)
  {
    if (!*((_BYTE *)this + 32))
      return IIOMetadataUpdater::copySourceToDestination(this);
    memset(v26, 0, sizeof(v26));
    IIODictionary::IIODictionary((IIODictionary *)v26);
    memset(v25, 0, sizeof(v25));
    IIODictionary::IIODictionary((IIODictionary *)v25, *((const __CFDictionary **)this[3] + 1), 1);
    ObjectForKey = IIODictionary::getObjectForKey((IIODictionary *)v25, CFSTR("kCGImageDestinationMetadata"));
    if (ObjectForKey)
      v5 = CFRetain(ObjectForKey);
    else
      v5 = 0;
    IIODictionary::removeObjectForKey((IIODictionary *)v25, CFSTR("kCGImageDestinationMetadata"));
    if (*((_BYTE *)this + 34))
    {
      v7 = (const void *)IIOImageSource::copyMetadataAtIndex(this[1], 0, v26);
      v8 = IIOImageSource::copyPropertiesAtIndex(this[1], 0, v26);
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    Mutable = CGImageMetadataCreateMutable();
    CGImageMetadataMerge((uint64_t)Mutable, (uint64_t)v7, (IIODictionary *)v26);
    IIODictionary::setObjectForKey((IIODictionary *)v26, (const void *)*MEMORY[0x1E0C9AE50], CFSTR("kCGImageMetadataMergeOverwrite"));
    CGImageMetadataMerge((uint64_t)Mutable, (uint64_t)v5, (IIODictionary *)v26);
    if (*((_BYTE *)this + 37))
      CGImageMetadataRemoveGPS((uint64_t)Mutable);
    Type = (const __CFString *)IIOImageSource::getType((IIO_Reader **)this[1]);
    if (CFStringCompare(Type, CFSTR("public.jpeg"), 0))
    {
      if (CFStringCompare(Type, CFSTR("public.heic"), 0))
      {
        if (CFStringCompare(Type, CFSTR("public.png"), 0))
        {
          if (CFStringCompare(Type, CFSTR("com.adobe.photoshop-image"), 0))
          {
            if (CFStringCompare(Type, CFSTR("public.tiff"), 0))
            {
              v11 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("image type '%@' is not supported for lossless metadata modification at this time.\n"), Type);
              if (v11)
              {
                CGImageMetadataCreateAndLogError("updateDestination", 1, v11, a2);
                CFRelease(v11);
              }
              if ((gIIODebugFlags & 0x800000000000) != 0)
                ImageIOLog("∆∆∆ ISSUE: %s:%d:  %s\n", "updateDestination", 488, "*** ERROR: image type not supported\n");
              goto LABEL_47;
            }
            v23 = IIOMetadataUpdater::modifyTIFF(this, Mutable, a2);
            v13 = v23;
            v24 = (gIIODebugFlags & 0x800000000000) == 0 || v23;
            if ((v24 & 1) != 0)
              goto LABEL_48;
            v15 = "*** ERROR: modifyTIFF failed\n";
            v16 = 477;
          }
          else
          {
            v21 = IIOMetadataUpdater::modifyXMPOnlyFile(this, a2, Mutable, 1347634208);
            v13 = v21;
            v22 = (gIIODebugFlags & 0x800000000000) == 0 || v21;
            if ((v22 & 1) != 0)
              goto LABEL_48;
            v15 = "*** ERROR: modifyPSD failed\n";
            v16 = 471;
          }
        }
        else
        {
          v19 = IIOMetadataUpdater::modifyXMPOnlyFile(this, a2, Mutable, 1347307296);
          v13 = v19;
          v20 = (gIIODebugFlags & 0x800000000000) == 0 || v19;
          if ((v20 & 1) != 0)
            goto LABEL_48;
          v15 = "*** ERROR: modifyPNG failed\n";
          v16 = 465;
        }
      }
      else
      {
        v17 = IIOMetadataUpdater::modifyHEIC(this, Mutable, a2);
        v13 = v17;
        v18 = (gIIODebugFlags & 0x800000000000) == 0 || v17;
        if ((v18 & 1) != 0)
          goto LABEL_48;
        v15 = "*** ERROR: modifyHEIC failed\n";
        v16 = 459;
      }
    }
    else
    {
      v12 = IIOMetadataUpdater::modifyJPEG(this, Mutable, a2);
      v13 = v12;
      if ((gIIODebugFlags & 0x800000000000) != 0)
        v14 = v12;
      else
        v14 = 1;
      if ((v14 & 1) != 0)
        goto LABEL_48;
      v15 = "*** ERROR: modifyJPEG failed\n";
      v16 = 453;
    }
    ImageIOLog("∆∆∆ ISSUE: %s:%d:  %s\n", "updateDestination", v16, v15);
LABEL_47:
    v13 = 0;
LABEL_48:
    IIODictionary::~IIODictionary((IIODictionary *)v25);
    IIODictionary::~IIODictionary((IIODictionary *)v26);
    if (v5)
      CFRelease(v5);
    if (v7)
      CFRelease(v7);
    if (v8)
      CFRelease(v8);
    if (Mutable)
      CFRelease(Mutable);
    return v13;
  }
  _cg_jpeg_mem_term("updateDestination", 420, "*** ERROR: IIOMetadataUpdate - invalid request\n");
  return 0;
}

void sub_1880767A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  IIODictionary::~IIODictionary((IIODictionary *)va1);
  _Unwind_Resume(a1);
}

uint64_t IIOMetadataUpdater::modifyJPEG(IIOImageSource **this, CGImageMetadata *a2, __CFError **a3)
{
  IIOImageRead *v6;
  uint64_t result;
  const void *v8;
  const __CFData *MutableCopy;
  IIOMetadataUpdater *Uint32ForKey;
  IIOImageWriteSession *v11;
  const UInt8 *BytePtr;
  size_t Length;
  size_t v14;
  _BOOL4 v15;
  uint64_t v16;
  __CFError **v17;
  const __CFDictionary *ObjectForKey;
  IIOMetadataUpdater *v19;
  __CFError **v20;
  const __CFData *ModifiedJPEGWithOrientation;
  IIOMetadataUpdater *v22;
  const __CFData *v23;
  IIOImageWriteSession *v24;
  const UInt8 *v25;
  size_t v26;
  size_t v27;

  v6 = (IIOImageRead *)IIOImageSource::imageRead(this[1]);
  result = (uint64_t)IIOImageRead::copyData(v6);
  if (result)
  {
    v8 = (const void *)result;
    MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDataRef)result);
    CFRelease(v8);
    if (!MutableCopy)
      return 0;
    if (IIODictionary::getCount(this[3]) == 1
      && IIODictionary::containsKey(this[3], CFSTR("kCGImageDestinationOrientation"))
      && (Uint32ForKey = IIODictionary::getUint32ForKey(this[3], CFSTR("kCGImageDestinationOrientation")),
          IIOMetadataUpdater::fastUpdateExifOrientationJPEG(Uint32ForKey, MutableCopy, (unsigned __int16)Uint32ForKey)))
    {
      v11 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
      BytePtr = CFDataGetBytePtr(MutableCopy);
      Length = CFDataGetLength(MutableCopy);
      v14 = IIOImageWriteSession::putBytes(v11, BytePtr, Length);
      if (v14 != CFDataGetLength(MutableCopy) || !IIOImageWriteSession::finalize(v11, 0))
      {
        CFRelease(MutableCopy);
        return 1;
      }
      v15 = 1;
    }
    else
    {
      v15 = 0;
    }
    v16 = operator new();
    _JPEGWriter::_JPEGWriter((_JPEGWriter *)v16, 0, MutableCopy, 0, 0, 0, 1);
    *(_BYTE *)(v16 + 65) = 1;
    _JPEGWriter::processInput((_JPEGWriter *)v16);
    if (*((_BYTE *)this + 40))
    {
      ObjectForKey = IIODictionary::getObjectForKey(this[3], CFSTR("kCGImageDestinationICCProfile"));
      _JPEGFile::setICCProfile(*(_JPEGFile **)(v16 + 80), ObjectForKey);
    }
    if (*((_BYTE *)this + 39))
    {
      v19 = IIODictionary::getUint32ForKey(this[3], CFSTR("kCGImageDestinationOrientation"));
      ModifiedJPEGWithOrientation = (const __CFData *)IIOMetadataUpdater::createModifiedJPEGWithOrientation(v19, (_JPEGFile **)v16, (int)v19, v20);
      goto LABEL_23;
    }
    if (*((_BYTE *)this + 38))
    {
      v22 = IIODictionary::getObjectForKey(this[3], CFSTR("kCGImageDestinationDateTime"));
      ModifiedJPEGWithOrientation = (const __CFData *)IIOMetadataUpdater::createModifiedJPEGWithDateTime(v22, (_JPEGFile **)v16, (const __CFString *)v22, a3);
      goto LABEL_23;
    }
    if (!*((_BYTE *)this + 34))
    {
      if (!a2 && *((_BYTE *)this + 40))
      {
        ModifiedJPEGWithOrientation = (const __CFData *)_JPEGWriter::createData((_JPEGWriter *)v16);
LABEL_23:
        v23 = ModifiedJPEGWithOrientation;
        if (ModifiedJPEGWithOrientation)
        {
          v24 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
          v25 = CFDataGetBytePtr(v23);
          v26 = CFDataGetLength(v23);
          v27 = IIOImageWriteSession::putBytes(v24, v25, v26);
          if (v27 == CFDataGetLength(v23))
            v15 = IIOImageWriteSession::finalize(v24, 0) == 0;
          CFRelease(v23);
        }
        goto LABEL_27;
      }
      if (!*((_BYTE *)this + 35))
      {
LABEL_27:
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        CFRelease(MutableCopy);
        return v15;
      }
    }
    ModifiedJPEGWithOrientation = (const __CFData *)IIOMetadataUpdater::createModifiedJPEGWithMetadata((IIOMetadataUpdater *)this, (_JPEGWriter *)v16, a2, v17);
    goto LABEL_23;
  }
  return result;
}

void sub_188076A8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10E1C40FF95427CLL);
  _Unwind_Resume(a1);
}

BOOL IIOMetadataUpdater::modifyHEIC(IIOImageSource **this, CGImageMetadata *a2, __CFError **a3)
{
  IIOImageRead *v6;
  const __CFData *v7;
  const __CFData *v8;
  int v9;
  int v10;
  int v11;
  IIOImageWriteSession *v12;
  const UInt8 *BytePtr;
  size_t Length;
  size_t v15;
  _BOOL8 v16;
  _QWORD v18[7];
  _BYTE v19[16];
  void *value;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeRef v27;
  const __CFData *v28;
  CFTypeRef v29;

  v28 = 0;
  v29 = 0;
  v27 = 0;
  IIO_LoadHEIFSymbols();
  v6 = (IIOImageRead *)IIOImageSource::imageRead(this[1]);
  v7 = IIOImageRead::copyData(v6);
  if (!v7)
  {
    v16 = 0;
    goto LABEL_17;
  }
  v8 = v7;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  IIODictionary::IIODictionary((IIODictionary *)&v24);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  IIODictionary::IIODictionary((IIODictionary *)&v21);
  v9 = gFunc_CMPhotoCompressionSessionCreate(*MEMORY[0x1E0C9AE00], v25, &v27);
  if (v9)
  {
    IIOCMErrorString(v9);
    _cg_jpeg_mem_term("modifyHEIC", 1424, "*** ERROR: CMPhotoCompressionSessionCreate returned %d (%s)\n");
  }
  else
  {
    IIONumber::IIONumber((IIONumber *)v19, 1);
    IIODictionary::setObjectForKey((IIODictionary *)&v21, value, *(const __CFString **)gIIO_kCMPhotoCompressionContainerOption_BackingType);
    IIONumber::~IIONumber((IIONumber *)v19);
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZN18IIOMetadataUpdater10modifyHEICEP15CGImageMetadataPP9__CFError_block_invoke;
    v18[3] = &__block_descriptor_tmp_65_0;
    v18[4] = this;
    v18[5] = a3;
    v18[6] = a2;
    v10 = gFunc_CMPhotoCompressionSessionOpenExistingContainerForModification(v27, v22, v8, &v29, v18);
    if (v10)
    {
      IIOCMErrorString(v10);
      _cg_jpeg_mem_term("modifyHEIC", 1500, "*** ERROR: CMPhotoCompressionSessionOpenExistingContainerForModification returned %d (%s)\n");
    }
    else
    {
      v11 = gFunc_CMPhotoCompressionSessionCloseContainerAndCopyBacking(v27, 0, 0, &v28);
      if (v11)
      {
        IIOCMErrorString(v11);
        _cg_jpeg_mem_term("modifyHEIC", 1504, "*** ERROR: CMPhotoCompressionSessionCloseContainerAndCopyBacking returned %d (%s)\n");
      }
      else if (v28)
      {
        v12 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
        BytePtr = CFDataGetBytePtr(v28);
        Length = CFDataGetLength(v28);
        v15 = IIOImageWriteSession::putBytes(v12, BytePtr, Length);
        if (v15 == CFDataGetLength(v28))
        {
          v16 = IIOImageWriteSession::finalize(v12, 0) == 0;
          goto LABEL_15;
        }
      }
      else
      {
        LogError("modifyHEIC", 1505, "*** ERROR: CMPhotoCompressionSessionCloseContainerAndCopyBacking returned noErr, but data is NULL\n");
      }
    }
  }
  v16 = 0;
LABEL_15:
  IIODictionary::~IIODictionary((IIODictionary *)&v21);
  IIODictionary::~IIODictionary((IIODictionary *)&v24);
  if (v27)
    CFRelease(v27);
LABEL_17:
  if (v28)
    CFRelease(v28);
  if (v29)
    CFRelease(v29);
  return v16;
}

void sub_188076D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  IIODictionary::~IIODictionary((IIODictionary *)(v14 - 96));
  _Unwind_Resume(a1);
}

BOOL IIOMetadataUpdater::modifyTIFF(IIODictionary **this, CGImageMetadata *a2, __CFError **a3)
{
  __CFError **v6;
  int Uint32ForKey;
  __CFError **v8;
  CGImageMetadata *MetadataWithOrientation;
  const __CFString *ObjectForKey;
  CGImageMetadata *v11;
  char v12;
  CGImageMetadataTag *TagWithPath;
  IIOImageRead *v14;
  const __CFData *v15;
  const __CFData *v16;
  CFMutableDataRef MutableCopy;
  _QWORD *SXMPMetaFromMetadata;
  _BOOL8 v19;
  IIOImageWriteSession *v20;
  const UInt8 *BytePtr;
  size_t Length;
  size_t v23;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t (**v27)();
  _DWORD *v28;
  _OWORD v29[2];
  uint64_t v30;
  uint64_t (**v31)();
  _DWORD *v32;

  IIO_InitializeXMPToolkit();
  if (*((_BYTE *)this + 39))
  {
    Uint32ForKey = IIODictionary::getUint32ForKey(this[3], CFSTR("kCGImageDestinationOrientation"));
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithOrientation(this, Uint32ForKey, v8);
  }
  else if (*((_BYTE *)this + 38))
  {
    ObjectForKey = (const __CFString *)IIODictionary::getObjectForKey(this[3], CFSTR("kCGImageDestinationDateTime"));
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithDateTime(this, ObjectForKey, a3);
  }
  else
  {
    v11 = 0;
    v12 = 1;
    if (!a2 || !*((_BYTE *)this + 33))
      goto LABEL_13;
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithMetadata(this, a2, v6);
  }
  v11 = MetadataWithOrientation;
  if (MetadataWithOrientation)
  {
    TagWithPath = (CGImageMetadataTag *)CGImageMetadataGetTagWithPath(MetadataWithOrientation, 0, CFSTR("photoshop:DateCreated"));
    if (TagWithPath)
      CGImageMetadataSetTagWithPath(v11, 0, CFSTR("exif:DateTimeOriginal"), TagWithPath);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
LABEL_13:
  v14 = (IIOImageRead *)IIOImageSource::imageRead(this[1]);
  v15 = IIOImageRead::copyData(v14);
  if (!v15)
  {
    IIO_TerminateXMPToolkit();
    v19 = 0;
    if ((v12 & 1) != 0)
      return v19;
    goto LABEL_35;
  }
  v16 = v15;
  MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v15);
  v31 = &off_1E1BB2FD0;
  v32 = (_DWORD *)Default_CTor();
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  ImageIO_XMP_IO::ImageIO_XMP_IO((ImageIO_XMP_IO *)v29, MutableCopy);
  if (TXMPFiles<std::string>::OpenFile((uint64_t)&v31, (uint64_t)v29, 1414088262, 2))
  {
    SXMPMetaFromMetadata = CreateSXMPMetaFromMetadata((CFDictionaryRef *)v11);
    if (SXMPMetaFromMetadata && TXMPFiles<std::string>::CanPutXMP((uint64_t)&v31, (uint64_t)SXMPMetaFromMetadata))
      TXMPFiles<std::string>::PutXMP((uint64_t)&v31, (uint64_t)SXMPMetaFromMetadata);
    TXMPFiles<std::string>::CloseFile((uint64_t)&v31, 0);
    if (SXMPMetaFromMetadata)
      (*(void (**)(_QWORD *))(*SXMPMetaFromMetadata + 8))(SXMPMetaFromMetadata);
    if (*((_BYTE *)this + 36))
    {
      v27 = &off_1E1BB2FD0;
      v28 = (_DWORD *)Default_CTor();
      v26 = 0;
      memset(v25, 0, sizeof(v25));
      ImageIO_XMP_IO::ImageIO_XMP_IO((ImageIO_XMP_IO *)v25, MutableCopy);
      if (TXMPFiles<std::string>::OpenFile((uint64_t)&v27, (uint64_t)v25, 1414088262, 6)
        && TXMPFiles<std::string>::CanPutXMP((uint64_t)&v27, 0, 0))
      {
        TXMPFiles<std::string>::PutXMP((uint64_t)&v27, 0, 0);
        TXMPFiles<std::string>::CloseFile((uint64_t)&v27, 0);
      }
      ImageIO_XMP_IO::~ImageIO_XMP_IO((ImageIO_XMP_IO *)v25);
      v27 = &off_1E1BB2FD0;
      WXMPFiles_DecrementRefCount_1(v28);
    }
  }
  else
  {
    LogError("modifyTIFF", 1625, "Could not open file for metadata editing\n");
  }
  v20 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
  BytePtr = CFDataGetBytePtr(MutableCopy);
  Length = CFDataGetLength(MutableCopy);
  v23 = IIOImageWriteSession::putBytes(v20, BytePtr, Length);
  if (v23 != CFDataGetLength(MutableCopy))
  {
    v19 = 0;
    if (!MutableCopy)
      goto LABEL_34;
    goto LABEL_33;
  }
  v19 = IIOImageWriteSession::finalize(v20, 0) == 0;
  if (MutableCopy)
LABEL_33:
    CFRelease(MutableCopy);
LABEL_34:
  ImageIO_XMP_IO::~ImageIO_XMP_IO((ImageIO_XMP_IO *)v29);
  v31 = &off_1E1BB2FD0;
  WXMPFiles_DecrementRefCount_1(v32);
  IIO_TerminateXMPToolkit();
  CFRelease(v16);
  if ((v12 & 1) == 0)
LABEL_35:
    CFRelease(v11);
  return v19;
}

CFTypeRef IIOMetadataUpdater::createModifiedJPEGWithOrientation(IIOMetadataUpdater *this, _JPEGFile **a2, int a3, __CFError **a4)
{
  CFTypeRef result;
  unsigned __int16 v7;

  result = (CFTypeRef)_JPEGFile::findApp1ExifMarker(a2[10]);
  if (result)
  {
    if ((a3 - 9) < 0xFFFFFFF8)
      v7 = 1;
    else
      v7 = a3;
    (*(void (**)(CFTypeRef, _QWORD))(*(_QWORD *)result + 152))(result, v7);
    return _JPEGWriter::createData((_JPEGWriter *)a2);
  }
  return result;
}

CFTypeRef IIOMetadataUpdater::createModifiedJPEGWithDateTime(IIOMetadataUpdater *this, _JPEGFile **a2, const __CFString *cf, __CFError **a4)
{
  CFTypeID v7;
  const __CFLocale *v8;
  const __CFAllocator *v9;
  __CFDateFormatter *v10;
  __CFDateFormatter *v11;
  __CFDateFormatter *v12;
  __CFDateFormatter *v13;
  __CFDateFormatter *v14;
  const __CFString *v15;
  const __CFString *v16;
  __CFString *MutableCopy;
  CFTypeID v18;
  const __CFString *EXIFDataTimeStringWithXMPDateTimeString;
  const __CFString *SubsecTimeFromXMPDateTime;
  CFStringRef XMPDateFromXMPDateTimeAndSubsecTime;
  CFStringRef IPTCDateStringWithXMPDateTimeString;
  CFStringRef IPTCTimeStringWithXMPDateTimeString;
  uint64_t App1ExifMarker;
  uint64_t v25;
  int v26;
  char *v27;
  size_t Length;
  void *v29;
  CFIndex v30;
  CGImageMetadata *v31;
  CGImageMetadata *v32;
  IIODictionary *v33;
  IIODictionary *v34;
  CFIndex v35;
  CFIndex v36;
  __CFData *Mutable;
  __CFData *v38;
  unsigned __int8 *MutableBytePtr;
  const void *AppMarker;
  CFTypeRef Data;
  __CFError **v43;
  _JPEGWriter *v44;
  CFStringRef StringWithDate;
  const __CFString *v46;
  CFStringRef v47;
  const __CFString *v48;
  CFRange v49;

  v7 = CFGetTypeID(cf);
  if (v7 == CFDateGetTypeID())
  {
    v43 = a4;
    v44 = (_JPEGWriter *)a2;
    v8 = CFLocaleCopyCurrent();
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = CFDateFormatterCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v10, CFSTR("yyyy-MM-dd'T'HH:mm:ss.SSSZZZZ"));
    v11 = CFDateFormatterCreate(v9, v8, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v11, CFSTR("yyyy:MM:dd HH:mm:ss"));
    v12 = CFDateFormatterCreate(v9, v8, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v12, CFSTR("SSS"));
    v13 = CFDateFormatterCreate(v9, v8, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v13, CFSTR("yyyyMMdd"));
    v14 = CFDateFormatterCreate(v9, v8, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v14, CFSTR("HHmmssZZZ"));
    StringWithDate = CFDateFormatterCreateStringWithDate(v9, v11, (CFDateRef)cf);
    v47 = CFDateFormatterCreateStringWithDate(v9, v12, (CFDateRef)cf);
    v15 = CFDateFormatterCreateStringWithDate(v9, v10, (CFDateRef)cf);
    if (v15)
    {
      v16 = v15;
      MutableCopy = CFStringCreateMutableCopy(v9, 32, v15);
      if (MutableCopy)
      {
        v49.length = CFStringGetLength(v16);
        v49.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("GMT"), &stru_1E1BCE100, v49, 0);
      }
      CFRelease(v16);
    }
    else
    {
      MutableCopy = 0;
    }
    IPTCDateStringWithXMPDateTimeString = CFDateFormatterCreateStringWithDate(v9, v13, (CFDateRef)cf);
    IPTCTimeStringWithXMPDateTimeString = CFDateFormatterCreateStringWithDate(v9, v14, (CFDateRef)cf);
    CFRelease(v8);
    CFRelease(v10);
    CFRelease(v11);
    CFRelease(v12);
    CFRelease(v13);
    CFRelease(v14);
    a2 = (_JPEGFile **)v44;
    EXIFDataTimeStringWithXMPDateTimeString = StringWithDate;
    SubsecTimeFromXMPDateTime = v47;
    a4 = v43;
    if (StringWithDate)
    {
LABEL_18:
      if (!EXIFDataTimeStringWithXMPDateTimeString || (App1ExifMarker = _JPEGFile::findApp1ExifMarker(a2[10])) == 0)
      {
        v27 = 0;
        v29 = 0;
        v26 = 0;
        if (!MutableCopy)
          goto LABEL_33;
        goto LABEL_31;
      }
      v25 = App1ExifMarker;
      v26 = 1;
      v27 = (char *)malloc_type_calloc(1uLL, 0x14uLL, 0x885DA183uLL);
      if (!v27)
      {
        v29 = 0;
        if (!MutableCopy)
          goto LABEL_33;
        goto LABEL_31;
      }
      CFStringGetCString(EXIFDataTimeStringWithXMPDateTimeString, v27, 20, 0x600u);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 136))(v25, v27);
      if (SubsecTimeFromXMPDateTime && CFStringCompare(SubsecTimeFromXMPDateTime, CFSTR("000"), 0))
      {
        Length = CFStringGetLength(SubsecTimeFromXMPDateTime);
        v26 = 1;
        v29 = malloc_type_calloc(1uLL, Length, 0x1E1E7783uLL);
        if (!v29)
        {
          if (!MutableCopy)
            goto LABEL_33;
LABEL_31:
          v31 = _JPEGFile::copyXMPProperties(a2[10]);
          if (v31)
          {
            v32 = v31;
            CGImageMetadataSetValueWithPath(v31, 0, CFSTR("photoshop:DateCreated"), MutableCopy);
            CGImageMetadataSetValueWithPath(v32, 0, CFSTR("xmp:CreateDate"), MutableCopy);
            CGImageMetadataSetValueWithPath(v32, 0, CFSTR("xmp:ModifyDate"), MutableCopy);
            _JPEGFile::setXMPProperties(a2[10], (CFDictionaryRef *)v32);
            CFRelease(v32);
            v26 = 1;
          }
LABEL_33:
          if ((unint64_t)IPTCDateStringWithXMPDateTimeString | (unint64_t)IPTCTimeStringWithXMPDateTimeString
            && (v33 = _JPEGFile::copyIPTCProperties(a2[10])) != 0)
          {
            v34 = v33;
            if (IPTCDateStringWithXMPDateTimeString)
            {
              IIODictionary::setObjectForKey(v33, IPTCDateStringWithXMPDateTimeString, CFSTR("DigitalCreationDate"));
              IIODictionary::setObjectForKey(v34, IPTCDateStringWithXMPDateTimeString, CFSTR("DateCreated"));
            }
            v46 = EXIFDataTimeStringWithXMPDateTimeString;
            v48 = SubsecTimeFromXMPDateTime;
            if (IPTCTimeStringWithXMPDateTimeString)
            {
              IIODictionary::setObjectForKey(v34, IPTCTimeStringWithXMPDateTimeString, CFSTR("TimeCreated"));
              IIODictionary::setObjectForKey(v34, IPTCTimeStringWithXMPDateTimeString, CFSTR("DigitalCreationTime"));
            }
            v35 = SizeOfIPTCData(v34);
            if (v35)
            {
              v36 = v35;
              Mutable = CFDataCreateMutable(0, v35);
              if (Mutable)
              {
                v38 = Mutable;
                CFDataSetLength(Mutable, v36);
                MutableBytePtr = CFDataGetMutableBytePtr(v38);
                if (MutableBytePtr)
                {
                  WriteIPTCData((CFDictionaryRef *)v34, MutableBytePtr);
                  AppMarker = (const void *)_JPEGFile::findAppMarker(a2[10], 65517);
                  if (AppMarker)
                  {
                    _APP13::setIPTCData(AppMarker, v38);
                    CFRelease(v38);
                    (*(void (**)(IIODictionary *))(*(_QWORD *)v34 + 8))(v34);
                    EXIFDataTimeStringWithXMPDateTimeString = v46;
                    SubsecTimeFromXMPDateTime = v48;
                    goto LABEL_45;
                  }
                }
                CFRelease(v38);
              }
            }
            (*(void (**)(IIODictionary *))(*(_QWORD *)v34 + 8))(v34);
            EXIFDataTimeStringWithXMPDateTimeString = v46;
            SubsecTimeFromXMPDateTime = v48;
            if ((v26 & 1) == 0)
            {
LABEL_62:
              Data = 0;
              if (!v27)
              {
LABEL_47:
                if (v29)
                  free(v29);
                if (EXIFDataTimeStringWithXMPDateTimeString)
                  CFRelease(EXIFDataTimeStringWithXMPDateTimeString);
                if (MutableCopy)
                  CFRelease(MutableCopy);
                if (SubsecTimeFromXMPDateTime)
                  goto LABEL_54;
                goto LABEL_55;
              }
LABEL_46:
              free(v27);
              goto LABEL_47;
            }
          }
          else if (!v26)
          {
            goto LABEL_62;
          }
LABEL_45:
          Data = _JPEGWriter::createData((_JPEGWriter *)a2);
          if (!v27)
            goto LABEL_47;
          goto LABEL_46;
        }
        v30 = CFStringGetLength(SubsecTimeFromXMPDateTime);
        CFStringGetCString(SubsecTimeFromXMPDateTime, (char *)v29, v30 + 1, 0x600u);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v25 + 144))(v25, v29);
      }
      else
      {
        v29 = 0;
      }
      v26 = 1;
      if (!MutableCopy)
        goto LABEL_33;
      goto LABEL_31;
    }
  }
  else
  {
    v18 = CFGetTypeID(cf);
    if (v18 == CFStringGetTypeID())
    {
      EXIFDataTimeStringWithXMPDateTimeString = CreateEXIFDataTimeStringWithXMPDateTimeString(cf);
      SubsecTimeFromXMPDateTime = CreateSubsecTimeFromXMPDateTime(cf);
      if (SubsecTimeFromXMPDateTime)
        XMPDateFromXMPDateTimeAndSubsecTime = CreateXMPDateFromXMPDateTimeAndSubsecTime(cf, (uint64_t)SubsecTimeFromXMPDateTime);
      else
        XMPDateFromXMPDateTimeAndSubsecTime = CreateXMPDateTimeWithXMPOrExifDateTimeString(cf);
      MutableCopy = (__CFString *)XMPDateFromXMPDateTimeAndSubsecTime;
      IPTCDateStringWithXMPDateTimeString = CreateIPTCDateStringWithXMPDateTimeString(cf);
      IPTCTimeStringWithXMPDateTimeString = CreateIPTCTimeStringWithXMPDateTimeString(cf);
      if (EXIFDataTimeStringWithXMPDateTimeString)
        goto LABEL_18;
    }
    else
    {
      EXIFDataTimeStringWithXMPDateTimeString = 0;
      MutableCopy = 0;
      IPTCDateStringWithXMPDateTimeString = 0;
      IPTCTimeStringWithXMPDateTimeString = 0;
      SubsecTimeFromXMPDateTime = 0;
    }
  }
  if (MutableCopy || IPTCDateStringWithXMPDateTimeString || IPTCTimeStringWithXMPDateTimeString)
    goto LABEL_18;
  CGImageMetadataCreateAndLogUTF8Error("createModifiedJPEGWithDateTime", 610, 2, "Could not parse kCGImageDestinationDateTime string - must be a valid EXIF DateTime or ISO8601 string", a4);
  Data = 0;
  if (SubsecTimeFromXMPDateTime)
LABEL_54:
    CFRelease(SubsecTimeFromXMPDateTime);
LABEL_55:
  if (IPTCDateStringWithXMPDateTimeString)
    CFRelease(IPTCDateStringWithXMPDateTimeString);
  if (IPTCTimeStringWithXMPDateTimeString)
    CFRelease(IPTCTimeStringWithXMPDateTimeString);
  return Data;
}

CFTypeRef IIOMetadataUpdater::createModifiedJPEGWithMetadata(IIOMetadataUpdater *this, _JPEGWriter *a2, CFTypeRef cf, __CFError **a4)
{
  int v6;
  const __CFDictionary **v7;
  int v8;
  char v9;
  const __CFData *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  uint64_t v13;
  const UInt8 *v14;
  CFIndex v15;
  IIODictionary *v17;
  char *v18;
  BOOL v19;
  unsigned __int8 *v20;
  _APP1Exif *v21;
  const void *AppMarker;
  const __CFDictionary *ObjectForKey;
  CFIndex v24;
  __CFData *Mutable;
  __CFData *v26;
  unsigned __int8 *MutableBytePtr;
  CFTypeRef Data;
  CFDictionaryRef v30[3];
  unint64_t v31;

  v6 = (unsigned __int16)((*(_DWORD *)(*((_QWORD *)a2 + 10) + 80)
                                       - *(_DWORD *)(*((_QWORD *)a2 + 10) + 72)) >> 3);
  if (cf)
  {
    v7 = (const __CFDictionary **)CFRetain(cf);
    if (v6)
    {
LABEL_3:
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        v12 = _JPEGFile::appMarkerAtIndex(*((_JPEGFile **)a2 + 10), v8);
        v13 = v12;
        if (*(_BYTE *)(v12 + 68))
        {
          v14 = *(const UInt8 **)(v12 + 120);
          if (v14)
          {
            v15 = *(unsigned int *)(v12 + 128);
            if ((_DWORD)v15 && v10 == 0)
              v10 = CFDataCreate(v11, v14, v15);
          }
        }
        else if (!*(_BYTE *)(v12 + 69) && !*(_BYTE *)(v12 + 70))
        {
          v9 |= *(__int16 *)(v12 + 56) == -19;
          goto LABEL_15;
        }
        _JPEGFile::removeAppMarker(*((_QWORD *)a2 + 10), v13);
        --v8;
        --v6;
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_15:
        if (++v8 >= v6)
          goto LABEL_20;
      }
    }
  }
  else
  {
    v7 = 0;
    if ((unsigned __int16)((*(_DWORD *)(*((_QWORD *)a2 + 10) + 80)
                                         - *(_DWORD *)(*((_QWORD *)a2 + 10) + 72)) >> 3))
      goto LABEL_3;
  }
  v10 = 0;
  v9 = 0;
LABEL_20:
  v17 = (IIODictionary *)CGImagePropertiesCreateFromMetadata(v7);
  if (!v17)
  {
    v17 = (IIODictionary *)operator new();
    IIODictionary::IIODictionary(v17);
  }
  v31 = 0;
  v18 = CreateExifBufferFromPropertiesJPEG(v17, 0, 0, 0, v10, CFSTR("public.jpeg"), &v31);
  if (v18)
    v19 = v31 == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (unsigned __int8 *)v18;
    v21 = (_APP1Exif *)operator new();
    _APP1Exif::_APP1Exif (v21, v20, v31);
    _JPEGFile::insertAppMarker(*((_JPEGFile **)a2 + 10), v21);
    free(v20);
  }
  if ((v9 & 1) != 0)
  {
    AppMarker = (const void *)_JPEGFile::findAppMarker(*((_JPEGFile **)a2 + 10), 65517);
    ObjectForKey = IIODictionary::getObjectForKey(v17, CFSTR("{IPTC}"));
    if (ObjectForKey)
    {
      memset(v30, 0, sizeof(v30));
      IIODictionary::IIODictionary((IIODictionary *)v30, ObjectForKey);
      v24 = SizeOfIPTCData((IIODictionary *)v30);
      if (v24)
      {
        Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v24);
        v26 = Mutable;
        if (Mutable)
        {
          CFDataSetLength(Mutable, v24);
          MutableBytePtr = CFDataGetMutableBytePtr(v26);
          WriteIPTCData(v30, MutableBytePtr);
          _APP13::setIPTCData(AppMarker, v26);
          CFRelease(v26);
        }
      }
      IIODictionary::~IIODictionary((IIODictionary *)v30);
    }
    else
    {
      _APP13::setIPTCData(AppMarker, 0);
    }
  }
  if (!*((_BYTE *)this + 36))
    _JPEGFile::setXMPProperties(*((_JPEGFile **)a2 + 10), v7);
  Data = _JPEGWriter::createData(a2);
  if (v7)
    CFRelease(v7);
  if (v10)
    CFRelease(v10);
  (*(void (**)(IIODictionary *))(*(_QWORD *)v17 + 8))(v17);
  return Data;
}

void sub_188077A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  IIODictionary::~IIODictionary((IIODictionary *)&a9);
  _Unwind_Resume(a1);
}

uint64_t IIOMetadataUpdater::fastUpdateExifOrientationJPEG(IIOMetadataUpdater *this, CFDataRef theData, unsigned int a3)
{
  unsigned __int8 *BytePtr;
  unsigned int Length;
  uint64_t v7;
  int Val16;
  unsigned int v9;
  uint64_t v11;
  int v12;
  unsigned int Val32;
  int v14;
  BOOL v15;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  IIOScanner::IIOScanner((IIOScanner *)&v21, BytePtr, Length, 0);
  v7 = 0;
  v20 = 0;
  v19 = 0;
  if (IIOScanner::getVal16((IIOScanner *)&v21) != 65496)
    goto LABEL_8;
  while (1)
  {
    Val16 = IIOScanner::getVal16((IIOScanner *)&v21);
    if (Val16 != 65505)
    {
      v9 = IIOScanner::getVal16((IIOScanner *)&v21);
      goto LABEL_6;
    }
    v9 = IIOScanner::getVal16((IIOScanner *)&v21);
    if (!strncmp((const char *)&BytePtr[*((_QWORD *)&v22 + 1)], "Exif", 4uLL))
      break;
LABEL_6:
    IIOScanner::skip((uint64_t)&v21, v9 - 2);
    if (Val16 == 65499)
    {
LABEL_7:
      v7 = 0;
      goto LABEL_8;
    }
  }
  IIOScanner::skip((uint64_t)&v21, 6);
  v11 = *((_QWORD *)&v22 + 1);
  v12 = IIOScanner::getVal16((IIOScanner *)&v21);
  if (v12 == 18761)
    GlobalHEIFInfo::setShouldExposeMultiFrameContents((uint64_t)&v21, 1);
  IIOScanner::skip((uint64_t)&v21, 2);
  Val32 = IIOScanner::getVal32((IIOScanner *)&v21);
  IIOScanner::seek((IIOScanner *)&v21, v11 + Val32);
  v7 = IIOScanner::getVal16((IIOScanner *)&v21);
  if ((_DWORD)v7)
  {
    v14 = 0;
    while (1)
    {
      IIOScanner::getTiffTag((uint64_t)&v21, (uint64_t)&v19);
      v15 = (unsigned __int16)v19 == 274 && WORD1(v19) == 3;
      if (v15 && HIDWORD(v19) == 1)
        break;
      if (v7 <= (unsigned __int16)++v14)
        goto LABEL_7;
    }
    v17 = __rev16(a3);
    if (BYTE4(v25))
      v18 = a3;
    else
      v18 = v17;
    *(_WORD *)&BytePtr[*((_QWORD *)&v22 + 1) - 4] = v18;
    v7 = 1;
  }
LABEL_8:
  IIOScanner::~IIOScanner((IIOScanner *)&v21);
  return v7;
}

void sub_188077CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  IIOScanner::~IIOScanner((IIOScanner *)va);
  _Unwind_Resume(a1);
}

__CFData *IIOMetadataUpdater::createExifChunkData(IIOMetadataUpdater *this, IIODictionary *a2, uint64_t a3, unsigned int a4)
{
  char *ExifBufferFromPropertiesJPEG;
  UInt8 *v5;
  __CFData *Mutable;
  __CFData *v7;
  uLong v8;
  unsigned int v10;
  UInt8 bytes[4];
  CFIndex length;

  length = 0;
  ExifBufferFromPropertiesJPEG = CreateExifBufferFromPropertiesJPEG(a2, a3, a4, 0, 0, CFSTR("public.jpeg"), (unint64_t *)&length);
  if (!ExifBufferFromPropertiesJPEG)
    return 0;
  v5 = (UInt8 *)ExifBufferFromPropertiesJPEG;
  if ((unint64_t)length < 0x1F)
  {
    v7 = 0;
  }
  else
  {
    length -= 2;
    *(_DWORD *)(ExifBufferFromPropertiesJPEG + 2) = 1716082789;
    *(_DWORD *)bytes = bswap32(length - 4);
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v7 = Mutable;
    if (Mutable)
    {
      CFDataAppendBytes(Mutable, bytes, 4);
      CFDataAppendBytes(v7, v5 + 2, length);
      v8 = crc32(0, 0, 0);
      v10 = bswap32(crc32(v8, v5 + 2, length));
      CFDataAppendBytes(v7, (const UInt8 *)&v10, 4);
    }
  }
  free(v5);
  return v7;
}

BOOL IIOMetadataUpdater::updatePNGExifData(IIOMetadataUpdater *this, CFDataRef theData, IIODictionary *a3, int a4, char a5)
{
  unsigned __int8 *BytePtr;
  unsigned int Length;
  _BOOL8 v11;
  _QWORD v13[10];
  char v14;
  char v15;
  _QWORD v16[3];
  int v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;

  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v19 = 0;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2000000000;
  v17 = 0;
  BytePtr = (unsigned __int8 *)CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  if (!a4 || (a5 & 1) != 0)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = ___ZN18IIOMetadataUpdater17updatePNGExifDataEP8__CFDataP13IIODictionarybb_block_invoke;
    v13[3] = &unk_1E1BBD590;
    v13[4] = v18;
    v13[5] = v16;
    v14 = a4;
    v15 = a5;
    v13[8] = BytePtr;
    v13[9] = theData;
    v13[6] = &v20;
    v13[7] = this;
    EnumeratePNGUsingBlock(BytePtr, Length, (uint64_t)v13);
    v11 = *((_BYTE *)v21 + 24) != 0;
  }
  else
  {
    v11 = 0;
  }
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  return v11;
}

void sub_188077F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

unsigned __int8 *EnumeratePNGUsingBlock(unsigned __int8 *result, unsigned int a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[2];
  char v9;

  v9 = 0;
  if (*result == 137)
  {
    v3 = result;
    if (result[1] == 80 && result[2] == 78 && result[3] == 71)
    {
      v5 = a2;
      v6 = 8;
      do
      {
        while (1)
        {
          v8[1] = v6;
          v8[0] = vrev64_s32((int32x2_t)vrev32_s8(*(int8x8_t *)&v3[v6]));
          if (!a3)
            break;
          result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _QWORD *, char *))(a3 + 16))(a3, v8, &v9);
          if ((_DWORD)result != -1)
            break;
          if (LODWORD(v8[0]) == 1229278788)
            return result;
        }
        if (v9)
          break;
        v6 += HIDWORD(v8[0]) + 12;
      }
      while (v6 <= v5 && LODWORD(v8[0]) != 1229278788);
    }
  }
  return result;
}

uint64_t ___ZN18IIOMetadataUpdater17updatePNGExifDataEP8__CFDataP13IIODictionarybb_block_invoke(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;
  IIOMetadataUpdater *v10;
  __CFData *v11;
  const UInt8 *v12;
  unsigned int v13;
  CFIndex v14;
  int v15;
  CGMutableImageMetadataRef MetadataFromDatabuffer;
  const __CFDictionary **v17;
  uint64_t v18;
  IIODictionary *v19;
  int Uint32ForKey;
  IIOMetadataUpdater *Count;
  __CFData *ExifChunkData;
  const UInt8 *BytePtr;
  unsigned int Length;
  _BYTE v25[24];
  _BYTE v26[24];
  _QWORD v27[3];
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;

  result = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)a2;
  if (*(int *)a2 > 1700284741)
  {
    if (v8 == 1700284742)
    {
      v29.location = *(_QWORD *)(a2 + 8);
      v29.length = (*(_DWORD *)(a2 + 4) + 12);
      CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 72), v29, 0, 0);
      return 0xFFFFFFFFLL;
    }
    if (v8 == 1700284774)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 4);
      MetadataFromDatabuffer = CreateMetadataFromDatabuffer((const char *)(*(_QWORD *)(a1 + 64) + v14 + 8), (v15 - 8), 0);
      if (MetadataFromDatabuffer)
      {
        v17 = (const __CFDictionary **)MetadataFromDatabuffer;
        v30.length = (v15 + 12);
        v30.location = v14;
        CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 72), v30, 0, 0);
        v18 = CGImagePropertiesCreateFromMetadata(v17);
        if (v18)
        {
          v19 = (IIODictionary *)v18;
          if (IIODictionary::containsKey(*(IIODictionary **)(v7 + 24), CFSTR("kCGImageDestinationOrientation")))
          {
            Uint32ForKey = IIODictionary::getUint32ForKey(*(IIODictionary **)(v7 + 24), CFSTR("kCGImageDestinationOrientation"));
            IIONumber::IIONumber((IIONumber *)v25, Uint32ForKey);
            IIODictionary::setObjectForKey((uint64_t)v19, (uint64_t)v25, CFSTR("Orientation"));
            IIONumber::~IIONumber((IIONumber *)v25);
          }
          Count = IIODictionary::getCount(v19);
          if ((_DWORD)Count)
          {
            ExifChunkData = IIOMetadataUpdater::createExifChunkData(Count, v19, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
            BytePtr = CFDataGetBytePtr(ExifChunkData);
            Length = CFDataGetLength(ExifChunkData);
            v31.location = *(_QWORD *)(a2 + 8);
            v31.length = 0;
            CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 72), v31, BytePtr, Length);
            CFRelease(ExifChunkData);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          }
          (*(void (**)(IIODictionary *))(*(_QWORD *)v19 + 8))(v19);
        }
        CFRelease(v17);
      }
      goto LABEL_26;
    }
    if (v8 != 1766084436)
      return result;
LABEL_10:
    if (!*(_BYTE *)(a1 + 80) && !*(_BYTE *)(a1 + 81))
    {
      memset(v27, 0, sizeof(v27));
      IIODictionary::IIODictionary((IIODictionary *)v27);
      if (IIODictionary::containsKey(*(IIODictionary **)(v7 + 24), CFSTR("kCGImageDestinationOrientation")))
      {
        v9 = IIODictionary::getUint32ForKey(*(IIODictionary **)(v7 + 24), CFSTR("kCGImageDestinationOrientation"));
        IIONumber::IIONumber((IIONumber *)v26, v9);
        IIODictionary::setObjectForKey((uint64_t)v27, (uint64_t)v26, CFSTR("Orientation"));
        IIONumber::~IIONumber((IIONumber *)v26);
      }
      v10 = IIODictionary::getCount((IIODictionary *)v27);
      if ((_DWORD)v10)
      {
        v11 = IIOMetadataUpdater::createExifChunkData(v10, (IIODictionary *)v27, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
        v12 = CFDataGetBytePtr(v11);
        v13 = CFDataGetLength(v11);
        v28.location = *(_QWORD *)(a2 + 8);
        v28.length = 0;
        CFDataReplaceBytes(*(CFMutableDataRef *)(a1 + 72), v28, v12, v13);
        CFRelease(v11);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      }
      IIODictionary::~IIODictionary((IIODictionary *)v27);
    }
LABEL_26:
    result = 0;
    *a3 = 1;
    return result;
  }
  if (v8 == 1229209940)
    goto LABEL_10;
  if (v8 == 1229472850)
  {
    result = 0;
    if (*(_DWORD *)(a2 + 4) >= 0xDu)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 64)
                                                                              + *(_QWORD *)(a2 + 8)
                                                                              + 8);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(a1 + 64)
                                                                              + *(_QWORD *)(a2 + 8)
                                                                              + 12);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                  + 8)
                                                                                      + 24));
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                                                                                  + 8)
                                                                                      + 24));
    }
  }
  return result;
}

void sub_1880783B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  IIONumber::~IIONumber((IIONumber *)va);
  IIODictionary::~IIODictionary((IIODictionary *)va1);
  _Unwind_Resume(a1);
}

BOOL IIOMetadataUpdater::modifyXMPOnlyFile(IIODictionary **this, __CFError **a2, CGImageMetadata *a3, int a4)
{
  __CFError **v8;
  int Uint32ForKey;
  __CFError **v10;
  CGImageMetadata *MetadataWithOrientation;
  const __CFString *ObjectForKey;
  CGImageMetadata *v13;
  _BOOL4 v14;
  CGImageMetadataTag *TagWithPath;
  IIOImageRead *v16;
  const __CFData *v17;
  const __CFData *MutableCopy;
  unsigned __int8 *BytePtr;
  unsigned int Length;
  IIODictionary *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL8 v24;
  _QWORD *SXMPMetaFromMetadata;
  uint64_t v26;
  int v27;
  IIOImageWriteSession *v28;
  const UInt8 *v29;
  size_t v30;
  size_t v31;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t (**v35)();
  _DWORD *v36;
  _QWORD v37[7];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;

  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2000000000;
  v41 = 0;
  IIO_InitializeXMPToolkit();
  if (*((_BYTE *)this + 39))
  {
    Uint32ForKey = IIODictionary::getUint32ForKey(this[3], CFSTR("kCGImageDestinationOrientation"));
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithOrientation(this, Uint32ForKey, v10);
  }
  else if (*((_BYTE *)this + 38))
  {
    ObjectForKey = (const __CFString *)IIODictionary::getObjectForKey(this[3], CFSTR("kCGImageDestinationDateTime"));
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithDateTime(this, ObjectForKey, a2);
  }
  else
  {
    if (!*((_BYTE *)this + 33))
    {
      v14 = 0;
      v13 = 0;
      goto LABEL_12;
    }
    MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithMetadata(this, a3, v8);
  }
  v13 = MetadataWithOrientation;
  v14 = MetadataWithOrientation != 0;
  if (a4 == 1347634208 && MetadataWithOrientation)
  {
    TagWithPath = (CGImageMetadataTag *)CGImageMetadataGetTagWithPath(MetadataWithOrientation, 0, CFSTR("photoshop:DateCreated"));
    if (TagWithPath)
      CGImageMetadataSetTagWithPath(v13, 0, CFSTR("exif:DateTimeOriginal"), TagWithPath);
    v14 = 1;
  }
LABEL_12:
  v16 = (IIOImageRead *)IIOImageSource::imageRead(this[1]);
  v17 = IIOImageRead::copyData(v16);
  if (!v17)
  {
    v24 = 0;
    goto LABEL_44;
  }
  MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v17);
  if (a4 == 1347307296)
  {
    BytePtr = (unsigned __int8 *)CFDataGetBytePtr(v17);
    Length = CFDataGetLength(v17);
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = ___ZN18IIOMetadataUpdater17modifyXMPOnlyFileEPP9__CFErrorP15CGImageMetadataj_block_invoke;
    v37[3] = &unk_1E1BCA7E0;
    v37[4] = &v42;
    v37[5] = &v38;
    v37[6] = BytePtr;
    EnumeratePNGUsingBlock(BytePtr, Length, (uint64_t)v37);
    if (*((_BYTE *)v43 + 24))
      v22 = *((_BYTE *)v39 + 24) != 0;
    else
      v22 = 1;
    if (*((_BYTE *)v43 + 24))
      v23 = v14;
    else
      v23 = 0;
    if (v23
      && !IIOMetadataUpdater::updatePNGExifData((IIOMetadataUpdater *)this, MutableCopy, v21, *((unsigned __int8 *)v39 + 24) != 0, 1))
    {
      _cg_jpeg_mem_term("modifyXMPOnlyFile", 1313, "*** ERROR: UpdatePNGExifData did not update Exif\n");
    }
    else if (!v22)
    {
      goto LABEL_39;
    }
  }
  else if (a4 != 1347634208)
  {
    goto LABEL_39;
  }
  v35 = &off_1E1BB2FD0;
  v36 = (_DWORD *)Default_CTor();
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  ImageIO_XMP_IO::ImageIO_XMP_IO((ImageIO_XMP_IO *)v33, MutableCopy);
  if (TXMPFiles<std::string>::OpenFile((uint64_t)&v35, (uint64_t)v33, 1414088262, 2))
  {
    SXMPMetaFromMetadata = CreateSXMPMetaFromMetadata((CFDictionaryRef *)v13);
    v26 = (uint64_t)SXMPMetaFromMetadata;
    if (*((_BYTE *)this + 36))
    {
      TXMPFiles<std::string>::PutXMP((uint64_t)&v35, 0, 0);
      v27 = 0;
    }
    else
    {
      if (SXMPMetaFromMetadata && TXMPFiles<std::string>::CanPutXMP((uint64_t)&v35, (uint64_t)SXMPMetaFromMetadata))
        TXMPFiles<std::string>::PutXMP((uint64_t)&v35, v26);
      v27 = 0;
    }
    TXMPFiles<std::string>::CloseFile((uint64_t)&v35, 0);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  }
  else
  {
    LogError("modifyXMPOnlyFile", 1368, "*** ERROR: Could not open file for metadata editing\n");
    v27 = 1;
  }
  ImageIO_XMP_IO::~ImageIO_XMP_IO((ImageIO_XMP_IO *)v33);
  v35 = &off_1E1BB2FD0;
  WXMPFiles_DecrementRefCount_1(v36);
  if (v27)
  {
LABEL_42:
    v24 = 0;
    if (!MutableCopy)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_39:
  v28 = (IIOImageWriteSession *)IIOImageSource::count(this[2]);
  v29 = CFDataGetBytePtr(MutableCopy);
  v30 = CFDataGetLength(MutableCopy);
  v31 = IIOImageWriteSession::putBytes(v28, v29, v30);
  if (v31 != CFDataGetLength(MutableCopy))
    goto LABEL_42;
  v24 = IIOImageWriteSession::finalize(v28, 0) == 0;
  if (MutableCopy)
LABEL_43:
    CFRelease(MutableCopy);
LABEL_44:
  IIO_TerminateXMPToolkit();
  if (v17)
    CFRelease(v17);
  if (v14)
    CFRelease(v13);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  return v24;
}

#error "188078834: call analysis failed (funcsize=29)"

void sub_188078920(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImageIO_XMP_IO::~ImageIO_XMP_IO((ImageIO_XMP_IO *)va);
  JUMPOUT(0x1880788D0);
}

void sub_188078958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18IIOMetadataUpdater17modifyXMPOnlyFileEPP9__CFErrorP15CGImageMetadataj_block_invoke(_QWORD *a1, int *a2)
{
  int v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2 == 1700284742)
    goto LABEL_4;
  if (v3 == 1767135348)
  {
    if (a2[1] >= 0x1E
      && !strncmp((const char *)(a1[6] + *((_QWORD *)a2 + 1) + 8), "XML:com.adobe.xmp", 0x11uLL))
    {
      v4 = a1[5];
      goto LABEL_5;
    }
  }
  else if (v3 == 1700284774)
  {
LABEL_4:
    v4 = a1[4];
LABEL_5:
    *(_BYTE *)(*(_QWORD *)(v4 + 8) + 24) = 1;
  }
  return 0;
}

uint64_t ___ZN18IIOMetadataUpdater10modifyHEICEP15CGImageMetadataPP9__CFError_block_invoke(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v3;
  const __CFArray *Value;
  IIOArray *v5;
  _QWORD v7[5];
  __int128 v8;
  _QWORD v9[3];

  v3 = *(_QWORD *)(a1 + 32);
  memset(v9, 0, sizeof(v9));
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ImageList"));
  v5 = IIOArray::IIOArray((IIOArray *)v9, Value);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = ___ZN18IIOMetadataUpdater10modifyHEICEP15CGImageMetadataPP9__CFError_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_63_1;
  v7[4] = v3;
  v8 = *(_OWORD *)(a1 + 40);
  IIOArray::enumerate((uint64_t)v5, (uint64_t)v7);
  IIOArray::~IIOArray((IIOArray *)v9);
  return 0;
}

void sub_188078AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  IIOArray::~IIOArray((IIOArray *)(v1 - 40));
  _Unwind_Resume(a1);
}

void ___ZN18IIOMetadataUpdater10modifyHEICEP15CGImageMetadataPP9__CFError_block_invoke_2(uint64_t a1, __CFDictionary *a2)
{
  uint64_t v3;
  __CFError **v4;
  int Uint32ForKey;
  __CFError **v6;
  CGImageMetadata *MetadataWithOrientation;
  const __CFString *ObjectForKey;
  CGImageMetadata *MetadataWithDateTime;
  CGImageMetadataTag *TagWithPath;
  char v11;
  const __CFData *XMPWithEXIFFiltered;
  CFDataRef EXIFData;
  CFMutableArrayRef v14;
  void *v15;
  void *value;
  _BYTE v17[24];
  _QWORD v18[3];

  v3 = *(_QWORD *)(a1 + 32);
  memset(v18, 0, sizeof(v18));
  IIODictionary::IIODictionary((IIODictionary *)v18, a2);
  if (!*(_BYTE *)(v3 + 39))
  {
    if (*(_BYTE *)(v3 + 38))
    {
      ObjectForKey = (const __CFString *)IIODictionary::getObjectForKey(*(IIODictionary **)(v3 + 24), CFSTR("kCGImageDestinationDateTime"));
      MetadataWithDateTime = IIOMetadataUpdater::createMetadataWithDateTime((IIOImageSource **)v3, ObjectForKey, *(__CFError ***)(a1 + 40));
    }
    else
    {
      if (!*(_BYTE *)(v3 + 34) && !*(_BYTE *)(v3 + 35))
      {
        MetadataWithOrientation = 0;
        goto LABEL_14;
      }
      MetadataWithDateTime = IIOMetadataUpdater::createMetadataWithMetadata((IIOImageSource **)v3, *(const CGImageMetadata **)(a1 + 48), v4);
    }
    MetadataWithOrientation = MetadataWithDateTime;
    if (MetadataWithDateTime)
      goto LABEL_10;
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
  Uint32ForKey = IIODictionary::getUint32ForKey(*(IIODictionary **)(v3 + 24), CFSTR("kCGImageDestinationOrientation"));
  IIONumber::IIONumber((IIONumber *)v17, Uint32ForKey);
  IIODictionary::setObjectForKey((uint64_t)v18, (uint64_t)v17, *(const void **)gIIO_kCMPhotoCompressionContainerDescription_Orientation);
  IIONumber::~IIONumber((IIONumber *)v17);
  MetadataWithOrientation = IIOMetadataUpdater::createMetadataWithOrientation((IIOImageSource **)v3, Uint32ForKey, v6);
  v14 = 0;
  v15 = 0;
  value = 0;
  IIONumber::IIONumber((IIONumber *)&v14, Uint32ForKey);
  IIODictionary::setObjectForKey((IIODictionary *)v18, value, CFSTR("Orientation"));
  IIODictionary::setObjectForKeyGroup((IIODictionary *)v18, value, CFSTR("Orientation"), CFSTR("{Exif}"));
  IIONumber::~IIONumber((IIONumber *)&v14);
  if (!MetadataWithOrientation)
    goto LABEL_14;
LABEL_10:
  TagWithPath = (CGImageMetadataTag *)CGImageMetadataGetTagWithPath(MetadataWithOrientation, 0, CFSTR("photoshop:DateCreated"));
  if (TagWithPath)
    CGImageMetadataSetTagWithPath(MetadataWithOrientation, 0, CFSTR("exif:DateTimeOriginal"), TagWithPath);
  v11 = 0;
LABEL_15:
  XMPWithEXIFFiltered = CGImageMetadataCreateXMPWithEXIFFiltered(MetadataWithOrientation);
  if (XMPWithEXIFFiltered)
  {
    v14 = 0;
    v15 = 0;
    value = 0;
    IIOArray::IIOArray((IIOArray *)&v14);
    IIOArray::addObject(&v14, XMPWithEXIFFiltered);
    IIODictionary::setObjectForKey((IIODictionary *)v18, v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_XMPMetadata);
    CFRelease(XMPWithEXIFFiltered);
    IIOArray::~IIOArray((IIOArray *)&v14);
  }
  if (*(_BYTE *)(v3 + 35) || *(_BYTE *)(v3 + 36) || *(_BYTE *)(v3 + 37))
  {
    EXIFData = CGImageMetadataCreateEXIFData(MetadataWithOrientation);
    if (EXIFData)
    {
      v14 = 0;
      v15 = 0;
      value = 0;
      IIOArray::IIOArray((IIOArray *)&v14);
      IIOArray::addObject(&v14, EXIFData);
      IIODictionary::setObjectForKey((IIODictionary *)v18, v15, *(const __CFString **)gIIO_kCMPhotoCompressionContainerDescription_EXIFMetadata);
      CFRelease(EXIFData);
      IIOArray::~IIOArray((IIOArray *)&v14);
    }
  }
  if ((v11 & 1) == 0)
    CFRelease(MetadataWithOrientation);
  IIODictionary::~IIODictionary((IIODictionary *)v18);
}

void sub_188078D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  IIODictionary::~IIODictionary((IIODictionary *)va);
  _Unwind_Resume(a1);
}

void IIO_Writer::~IIO_Writer(IIO_Writer *this)
{
  JUMPOUT(0x18D761C30);
}

uint64_t IIO_Writer::canWriteDepth(IIO_Writer *this)
{
  return 0;
}

uint64_t IIO_Writer::matchesExtension(IIO_Writer *this, char *a2)
{
  return 0;
}

void IIO_Writer::addImageWriteFormats(IIO_Writer *this, CFMutableArrayRef theArray)
{
  int v4;

  v4 = *((_DWORD *)this + 10);
  if ((v4 & 1) != 0)
  {
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanRGB"));
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanCMYK"));
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanGray"));
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanLab"));
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanRGBIdx"));
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanICC"));
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan1BPS"));
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan2BPS"));
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_31:
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan4BPS"));
  if ((v4 & 0x800) != 0)
LABEL_11:
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan8BPS"));
LABEL_12:
  if ((v4 & 0x5000) != 0)
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan16BPS"));
  if ((v4 & 0x10000) != 0)
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan16fBPS"));
  if ((v4 & 0xA000) != 0)
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCan32fBPS"));
  if ((v4 & 0x1E000000) != 0)
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanAlpha"));
  if (*((_QWORD *)this + 4) != -1)
  {
    if ((v4 & 0x20000) == 0)
      return;
LABEL_34:
    CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanWriteOrientation"));
    return;
  }
  CFArrayAppendValue(theArray, CFSTR("kCGImageDestinationCanMultiPage"));
  if ((v4 & 0x20000) != 0)
    goto LABEL_34;
}

void IIOGeneric_Writer::~IIOGeneric_Writer(IIOGeneric_Writer *this)
{
  JUMPOUT(0x18D761C30);
}

uint64_t IIO_Writer::write(IIO_Writer *this, void *a2, void *a3)
{
  return 0;
}

uint64_t _cg_png_read_frame_head(uint64_t result, _DWORD *a2)
{
  uLong v2;
  int v4;
  uint64_t chunk_header;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;

  v2 = result;
  if ((*(_BYTE *)(result + 78) & 1) == 0)
  {
    v10 = "attempt to png_read_frame_head() but no acTL present";
    goto LABEL_20;
  }
  if (!*(_DWORD *)(result + 784))
    return result;
  png_read_reset(result);
  v4 = 0;
  *(int8x8_t *)(v2 + 76) = vand_s8(*(int8x8_t *)(v2 + 76), (int8x8_t)0xFFFFFFBFFFFDFFFFLL);
  while (1)
  {
    chunk_header = _cg_png_read_chunk_header(v2);
    v6 = *(_DWORD *)(v2 + 312);
    if (v6 == 1717846356)
      break;
    if (v6 == 1717785676)
    {
      png_handle_fcTL(v2, a2, chunk_header);
      v4 = 1;
    }
    else if (v6 == 1229209940)
    {
      if (v4 || *(_DWORD *)(v2 + 784) >= 2u)
      {
        v10 = "png_read_frame_head(): out of place IDAT";
        goto LABEL_20;
      }
      v8 = v2;
      v7 = chunk_header;
LABEL_15:
      png_crc_finish(v8, v7);
      v4 = 0;
    }
    else
    {
      png_warning(v2, "Skipped (ignored) a chunk between APNG chunks");
      png_crc_finish(v2, chunk_header);
    }
  }
  result = png_ensure_sequence_number(v2, chunk_header);
  if (!v4 && *(_DWORD *)(v2 + 784) >= 2u)
  {
    v7 = (chunk_header - 4);
    v8 = v2;
    goto LABEL_15;
  }
  v9 = *(_DWORD *)(v2 + 76);
  if ((v9 & 0x20000) == 0)
  {
    v10 = "png_read_frame_head(): out of place fdAT";
LABEL_20:
    _cg_png_error((void (**)(void))v2, v10);
  }
  *(_DWORD *)(v2 + 360) = chunk_header - 4;
  *(_DWORD *)(v2 + 76) = v9 | 4;
  return result;
}

_QWORD *RADReadPlugin::RADReadPlugin(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  _QWORD *result;

  result = (_QWORD *)IIOReadPlugin::IIOReadPlugin(a1, a2, a3, a4, a5);
  *result = &off_1E1BADB18;
  return result;
}

_QWORD *RADReadPlugin::RADReadPlugin(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;

  result = (_QWORD *)IIOReadPlugin::IIOReadPlugin(a1, a2, a3);
  *result = &off_1E1BADB18;
  return result;
}

void RADReadPlugin::~RADReadPlugin(RADReadPlugin *this)
{
  IIOReadPlugin::~IIOReadPlugin(this);
  JUMPOUT(0x18D761C30);
}

uint64_t RADReadPlugin::loadDataFromXPCObject(RADReadPlugin *this, void *a2)
{
  uint64_t result;
  _BYTE *data;
  _BYTE *v6;
  size_t length;

  result = IIOReadPlugin::loadDataFromXPCObject(this, a2);
  if (!(_DWORD)result)
  {
    length = 0;
    data = xpc_dictionary_get_data(a2, "iio_xpc_plugin_data_rad", &length);
    if (length == 1)
    {
      v6 = data;
      result = 0;
      *((_BYTE *)this + 436) = *v6;
    }
    else
    {
      return 4294967246;
    }
  }
  return result;
}

uint64_t RADReadPlugin::saveDataToXPCObject(RADReadPlugin *this, void *a2)
{
  uint64_t v4;

  v4 = IIOReadPlugin::saveDataToXPCObject(this, a2);
  if (!(_DWORD)v4)
    iio_xpc_dictionary_add_databuffer(a2, "iio_xpc_plugin_data_rad", (char *)this + 436, 1uLL);
  return v4;
}

uint64_t RADReadPlugin::initialize(IIODictionary **this, IIODictionary *a2)
{
  _BOOL4 BoolForKey;
  _BOOL4 v4;
  FILE *FILE;
  FILE *v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;

  v18 = 0;
  BoolForKey = IIODictionary::getBoolForKey(this[6], CFSTR("kCGImageSourceShouldAllowFloat"));
  if (!*((_BYTE *)this + 341) || (v4 = BoolForKey, (FILE = IIOImageReadSession::createFILE(this[3])) == 0))
  {
    v16 = 4294967246;
LABEL_17:
    kdebug_trace();
    return v16;
  }
  v6 = FILE;
  v7 = _cg_RadReadRGBSize(FILE, (_DWORD *)&v18 + 1, &v18);
  if ((_DWORD)v7)
  {
    v16 = v7;
    fclose(v6);
    goto LABEL_17;
  }
  if (v4)
    v8 = 32;
  else
    v8 = 16;
  if (v4)
    v9 = 2;
  else
    v9 = 1;
  *((_WORD *)this + 120) = v8;
  *((_BYTE *)this + 345) = 1;
  *((_BYTE *)this + 247) = v9;
  v11 = v18;
  v10 = HIDWORD(v18);
  *((_DWORD *)this + 57) = HIDWORD(v18);
  *((_DWORD *)this + 58) = v11;
  *((_WORD *)this + 121) = 4 * v8;
  if (v4)
    v12 = 7;
  else
    v12 = 6;
  v13 = v10 << v12;
  v14 = v13 | 7;
  v15 = v13 | 0xE;
  if (v14 >= 0)
    v15 = v14;
  *((_DWORD *)this + 59) = v15 >> 3;
  *((_DWORD *)this + 81) = 1380401696;
  this[20] = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D958]);
  *((_BYTE *)this + 246) = 5;
  *((_BYTE *)this + 346) = 0;
  *((_BYTE *)this + 344) = 1;
  this[45] = (IIODictionary *)1;
  *((_WORD *)this + 122) = *((_WORD *)this + 121) / *((_WORD *)this + 120);
  *((_WORD *)this + 188) = 1;
  fclose(v6);
  return 0;
}

uint64_t RADReadPlugin::setupCallback(uint64_t a1, CFDictionaryRef *a2)
{
  int v2;

  v2 = *(__int16 *)(a1 + 376);
  if (v2 == 12)
    return IIOReadPlugin::setupImageProviderCallbackV2(a1, a2, (uint64_t)IIO_Reader::CopyImageBlockSetProc, (uint64_t)IIO_Reader::CopyIOSurfaceProc);
  if (v2 == 1)
    return IIOReadPlugin::setupCallback(a1, a2);
  return 4294967246;
}

uint64_t RADReadPlugin::decodeImageImp(uint64_t a1, IIODecodeParameter *a2, int a3, IOSurfaceRef *a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  IIOImageRead **v20;
  _BOOL4 v21;
  void *BaseAddress;
  size_t Height;
  uint64_t BlockArray;
  double v25;
  double v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  const char **v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  unint64_t v37;
  CGRect v38;
  CGRect v39;

  v37 = 0;
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a1 + 268);
  IIOImageReadSession::rewind(*(_QWORD *)(a1 + 24));
  if ((gIIODebugFlags & 0x20000) == 0)
    goto LABEL_26;
  v8 = *(_DWORD *)(a1 + 204);
  v9 = v8 >> 24;
  v10 = MEMORY[0x1E0C80978];
  if (v8 < 0)
  {
    v11 = __maskrune(v9, 0x40000uLL);
    v8 = *(_DWORD *)(a1 + 204);
  }
  else
  {
    v11 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x40000;
  }
  if (v11)
    v12 = (v8 >> 24);
  else
    v12 = 46;
  v13 = v8 << 8 >> 24;
  if (v8 << 8 < 0)
  {
    v14 = __maskrune(v13, 0x40000uLL);
    v8 = *(_DWORD *)(a1 + 204);
  }
  else
  {
    v14 = *(_DWORD *)(v10 + 4 * v13 + 60) & 0x40000;
  }
  if (v14)
    v15 = (v8 << 8 >> 24);
  else
    v15 = 46;
  v16 = (__int16)v8 >> 8;
  if (v8 << 16 < 0)
  {
    v17 = __maskrune(v16, 0x40000uLL);
    v8 = *(_DWORD *)(a1 + 204);
  }
  else
  {
    v17 = *(_DWORD *)(v10 + 4 * v16 + 60) & 0x40000;
  }
  if (v17)
    v18 = ((__int16)v8 >> 8);
  else
    v18 = 46;
  if ((v8 << 24) <= 0x7F000000)
  {
    if ((*(_DWORD *)(v10 + 4 * (char)v8 + 60) & 0x40000) != 0)
      goto LABEL_22;
LABEL_24:
    v19 = 46;
    goto LABEL_25;
  }
  if (!__maskrune((char)v8, 0x40000uLL))
    goto LABEL_24;
LABEL_22:
  v19 = *(char *)(a1 + 204);
LABEL_25:
  ImageIOLog("♦️  '%c%c%c%c' [%s] %s\n", v12, v15, v18, v19, iioTypeStr[a3], "virtual OSStatus RADReadPlugin::decodeImageImp(IIODecodeParameter *, IIOImageType, IOSurfaceRef *, CVPixelBufferRef *, CGImageBlockSetRef *)");
LABEL_26:
  IIOReadPlugin::debugDecodeImage((IIOReadPlugin *)a1, a2);
  v20 = *(IIOImageRead ***)(a1 + 24);
  if (v20)
    v21 = IIOImageReadSession::mapData(v20);
  else
    v21 = 0;
  if (a3 == 3)
  {
    BlockArray = IIOReadPlugin::allocateBlockArray((IIOReadPlugin *)a1, *(unsigned int *)(a1 + 104));
    LODWORD(v27) = *(_DWORD *)(a1 + 292);
    v26 = (double)v27;
    v28 = *(_DWORD *)(a1 + 296);
    v25 = (double)v28;
    BaseAddress = (void *)_ImageIO_Malloc(*(unsigned int *)(a1 + 300) * (unint64_t)v28, *(_QWORD *)(a1 + 384), &v37, (uint64_t)kImageMalloc_RAD_Data[0], *(_DWORD *)(a1 + 432), 0, 0);
  }
  else
  {
    if (a3 != 1 || !a4 || !*a4)
    {
      BlockArray = 4294967243;
      if (!v21)
        return BlockArray;
      goto LABEL_45;
    }
    IOSurfaceLock(*a4, 0, 0);
    BaseAddress = IOSurfaceGetBaseAddress(*a4);
    Height = IOSurfaceGetHeight(*a4);
    v37 = IOSurfaceGetBytesPerRow(*a4) * Height;
    BlockArray = 4294967243;
    v25 = 0.0;
    v26 = 0.0;
  }
  if (!BaseAddress)
    goto LABEL_44;
  v29 = (*(uint64_t (**)(uint64_t, void *, unint64_t))(*(_QWORD *)a1 + 112))(a1, BaseAddress, v37);
  if ((_DWORD)v29)
  {
    BlockArray = v29;
    *(_DWORD *)(a1 + 104) = 0;
    if (a3 == 3)
    {
      _ImageIO_Free((unint64_t)BaseAddress, v37);
      if (!v21)
        return BlockArray;
      goto LABEL_45;
    }
LABEL_44:
    if (!v21)
      return BlockArray;
    goto LABEL_45;
  }
  if (a3 != 3)
  {
    IOSurfaceUnlock(*a4, 0, 0);
    BlockArray = 0;
    goto LABEL_44;
  }
  v32 = 0;
  v38.origin.x = 0.0;
  v38.origin.y = 0.0;
  v38.size.width = v26;
  v38.size.height = v25;
  **(_QWORD **)(a1 + 96) = IIOReadPlugin::createImageBlock((IIOReadPlugin *)a1, BaseAddress, v37, v38, *(unsigned int *)(a1 + 300), *(unsigned __int8 *)(a1 + 343));
  if (CGRectEqualToRect(*(CGRect *)(a1 + 120), *MEMORY[0x1E0C9D628]))
  {
    v33 = 0;
  }
  else
  {
    v39.origin.x = 0.0;
    v39.origin.y = 0.0;
    v39.size.width = v26;
    v39.size.height = v25;
    *(CGRect *)(&v33 - 1) = CGRectUnion(*(CGRect *)(a1 + 120), v39);
    v32 = v34;
    v26 = v35;
    v25 = v36;
  }
  BlockArray = 0;
  *(_QWORD *)(a1 + 120) = v32;
  *(_QWORD *)(a1 + 128) = v33;
  *(double *)(a1 + 136) = v26;
  *(double *)(a1 + 144) = v25;
  if (v21)
  {
LABEL_45:
    v30 = *(const char ***)(a1 + 24);
    if (v30)
      IIOImageReadSession::unmapData(v30);
  }
  return BlockArray;
}

uint64_t RADReadPlugin::decodeImageData(IIOImageReadSession **this, unsigned __int8 *a2, unsigned int a3)
{
  FILE *FILE;
  FILE *v7;
  uint64_t RGB_float;
  uint64_t v9;

  FILE = IIOImageReadSession::createFILE(this[3]);
  if (!FILE)
    return 0;
  v7 = FILE;
  if (*((_WORD *)this + 120) == 32)
    RGB_float = _cg_RadReadRGB_float(FILE, (uint64_t)a2, a3);
  else
    RGB_float = _cg_RadReadRGB_fp16(FILE, a2, a3);
  v9 = RGB_float;
  fclose(v7);
  return v9;
}

uint64_t IIO_Reader_PBM::createReadPlugin(IIO_Reader *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  v5 = IIO_Reader::osType(a1);
  PBMReadPlugin::PBMReadPlugin(v4, a2, v5);
  return v4;
}

void sub_18807982C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10F1C402FEA69AELL);
  _Unwind_Resume(a1);
}

uint64_t IIO_Reader_PBM::createReadPlugin(IIO_Reader *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = operator new();
  v9 = IIO_Reader::osType(a1);
  PBMReadPlugin::PBMReadPlugin(v8, a2, a3, a4, v9);
  return v8;
}

void sub_1880798C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10F1C402FEA69AELL);
  _Unwind_Resume(a1);
}

const char *PixelTypeStr(char a1)
{
  if ((a1 + 1) > 0x11u)
    return "???";
  else
    return (&off_1E1BCA840)[(char)(a1 + 1)];
}

uint64_t ImageIOPixelConverter::convertAnyToAny(ImageIOPixelConverter *this, vImage_Buffer *a2, vImage_Buffer *a3)
{
  size_t rowBytes;
  void *data;
  vImagePixelCount height;
  int v6;
  int v7;
  char *v9;
  int v10;
  unsigned int v11;
  int v12;
  char v13;
  char v14;
  char v16;
  vImagePixelCount v17;
  vImagePixelCount v18;
  vImagePixelCount width;
  unsigned int v20;
  vImagePixelCount v21;
  vImagePixelCount v22;
  size_t v23;
  char *v24;
  int v25;
  unsigned int i;
  unsigned int v27;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  size_t v37;
  unsigned int v38;

  rowBytes = a3->rowBytes;
  data = a3->data;
  height = a3->height;
  v6 = *((unsigned __int8 *)this + 41);
  v7 = *((unsigned __int8 *)this + 56);
  if (v6 != v7 && v6 + 1 != v7)
  {
    _cg_jpeg_mem_term("convertAnyToAny", 278, "*** unsupported src/dst channel combination: src: %d  dst: %d\n", v6, v7);
LABEL_9:
    memset(data, 255, height * rowBytes);
    return -1;
  }
  v9 = (char *)a2->data;
  v10 = *((_DWORD *)this + 13);
  v11 = *((unsigned __int8 *)this + 37);
  v12 = v10 & 0xFF00;
  if (v11 > 8)
  {
    if (v11 > 0x10)
    {
      if (v12 != 0x2000)
        goto LABEL_9;
      v14 = 32;
    }
    else
    {
      if (v12 != 4096)
        goto LABEL_9;
      v14 = 16;
    }
    v13 = *((_BYTE *)this + 37);
  }
  else
  {
    if (v12 != 2048)
      goto LABEL_9;
    v13 = 2 * v11 - 8;
    v14 = 8;
  }
  v16 = v14 - v11;
  if (*((_BYTE *)this + 17) == 4)
  {
    v16 = 0;
    v13 = 0;
  }
  v17 = a2->height;
  if (!v17)
    return 0;
  v18 = 0;
  width = a2->width;
  v20 = *((unsigned __int8 *)this + 41);
  v21 = width;
  do
  {
    if (!v21)
      goto LABEL_58;
    v22 = 0;
    v23 = (size_t)data + a3->rowBytes * v18;
    v24 = &v9[a2->rowBytes * v18];
    v25 = 7;
    do
    {
      if (!v20)
        goto LABEL_56;
      for (i = 0; i < v20; ++i)
      {
        v27 = v20 - 1;
        v29 = v6 == v7 || i != v27;
        if (v11)
        {
          v30 = 0;
          v31 = v11;
          do
          {
            v32 = (*v24 >> v25) & 1 | (2 * v30);
            v33 = __OFSUB__(v25--, 1);
            if (v25 < 0 != v33)
            {
              v25 = 7;
              ++v24;
            }
            v30 = v32;
            --v31;
          }
          while (v31);
        }
        else
        {
          v32 = 0;
        }
        v34 = bswap32(v32) >> 8;
        if (v11 != 24)
          v34 = v32;
        v35 = (v34 << v16 >> v13) | (v34 << v16);
        switch(BYTE1(v10))
        {
          case 0x20u:
            v38 = bswap32(v35);
            if (v11 != 32)
              v38 = v35;
            *(_DWORD *)v23 = v38;
            v37 = v23 + 4;
            if (v29)
              goto LABEL_51;
            *(_DWORD *)(v23 + 4) = -1;
            v23 += 8;
            break;
          case 0x10u:
            v36 = bswap32(v35) >> 16;
            if (v11 != 16)
              LOWORD(v36) = v35;
            *(_WORD *)v23 = v36;
            v37 = v23 + 2;
            if (!v29)
            {
              *(_WORD *)(v23 + 2) = -1;
              v23 += 4;
              break;
            }
LABEL_51:
            v23 = v37;
            break;
          case 8u:
            *(_BYTE *)v23 = v35;
            if (v29)
            {
              ++v23;
            }
            else
            {
              *(_BYTE *)(v23 + 1) = -1;
              v23 += 2;
            }
            break;
        }
        v20 = *((unsigned __int8 *)this + 41);
      }
      width = a2->width;
LABEL_56:
      ++v22;
    }
    while (v22 < width);
    v17 = a2->height;
    v21 = width;
LABEL_58:
    ++v18;
  }
  while (v18 < v17);
  return 0;
}

uint64_t IIOPixelConverterGray::IIOPixelConverterGray(uint64_t a1, char a2, char a3, uint32_t a4, int a5, char a6, uint32_t a7, char a8, uint64_t a9)
{
  return IIOPixelConverterGray::IIOPixelConverterGray(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

{
  uint32_t v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  uint32_t v15;
  CGBitmapInfo v16;
  uint32_t v17;
  CGBitmapInfo v18;
  int v19;
  vImageConverterRef v20;
  const char *v21;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;
  vImage_Error error;

  *(_BYTE *)(a1 + 72) = 0;
  error = 0;
  *(_QWORD *)a1 = &off_1E1BB21F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 49) = a6;
  *(_QWORD *)(a1 + 24) = a9;
  *(_BYTE *)(a1 + 17) = 0;
  *(_BYTE *)(a1 + 65) = a8;
  *(_BYTE *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 36) = a5 | (a4 << 8);
  if (a5)
    v12 = a7;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 52) = v12 | (a7 << 8);
  ImageIOPixelConverter::extractInfo(a1);
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a1 + 49) && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a1 + 52))
  {
    *(_BYTE *)(a1 + 16) = 0;
    return a1;
  }
  *(_BYTE *)(a1 + 16) = 1;
  v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
  v14 = v13;
  v15 = *(unsigned __int8 *)(a1 + 41) * a4;
  srcFormat.bitsPerComponent = a4;
  srcFormat.bitsPerPixel = v15;
  v16 = *(_DWORD *)(a1 + 44);
  srcFormat.colorSpace = v13;
  memset(&srcFormat.version, 0, 20);
  srcFormat.bitmapInfo = v16;
  memset(&destFormat.bitmapInfo, 0, 24);
  v17 = *(unsigned __int8 *)(a1 + 56) * a7;
  destFormat.bitsPerComponent = a7;
  destFormat.bitsPerPixel = v17;
  v18 = *(_DWORD *)(a1 + 60);
  destFormat.bitmapInfo = v18;
  if (a7 == 16)
  {
    v19 = 4096;
  }
  else
  {
    if (a7 != 32)
      goto LABEL_12;
    v19 = 0x2000;
  }
  destFormat.bitmapInfo = v18 | v19;
LABEL_12:
  destFormat.colorSpace = v13;
  v20 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0, &error);
  *(_QWORD *)(a1 + 8) = v20;
  if (!v20 || error)
  {
    v21 = IIO_vImageErrorString(error);
    _cg_jpeg_mem_term("IIOPixelConverterGray", 869, "*** IIOPixelConverterGray could not create vImageConverter '%s'\n", v21);
  }
  CGColorSpaceRelease(v14);
  return a1;
}

uint64_t ImageIOPixelConverter::ExpandRGB888ToARGB8888(ImageIOPixelConverter *this, unint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t result;
  int v8;
  size_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  vImage_Buffer v15;
  vImage_Buffer v16;

  result = 4294967246;
  if (a5 >= 4 * a3)
  {
    v8 = a4;
    if (a5 * a4 <= a2)
    {
      v10 = 3 * a3;
      v11 = malloc_type_malloc(v10, 0x46A4D581uLL);
      if (v11)
      {
        v12 = v11;
        v16.data = v11;
        v16.height = 1;
        v16.width = a3;
        v16.rowBytes = v10;
        v15.height = 1;
        v15.width = a3;
        v15.rowBytes = a5;
        if (v8)
        {
          v13 = (v8 - 1) * a5;
          v14 = (v8 - 1) * v10;
          do
          {
            memcpy(v12, (char *)this + v14, v10);
            v15.data = (char *)this + v13;
            vImageConvert_RGB888toBGRA8888(&v16, 0, 0xFFu, &v15, 0, 0x10u);
            v14 -= v10;
            v13 -= a5;
            --v8;
          }
          while (v8);
        }
        free(v12);
        return 0;
      }
      else
      {
        return 4294967246;
      }
    }
  }
  return result;
}

uint64_t ImageIOPixelConverter::AdjustRowBytes(ImageIOPixelConverter *this, unint64_t a2, int a3, int a4, size_t __len, unsigned int a6)
{
  uint64_t v6;
  int v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = 4294967246;
  if (__len >= 4 * a3 && a6 > __len)
  {
    v7 = a4;
    if (a6 * a4 <= a2)
    {
      if (a4)
      {
        v8 = (char *)this + (a4 - 1) * a6;
        v9 = __len;
        v10 = (char *)this + ((a4 - 1) * __len);
        v11 = -(uint64_t)__len;
        v12 = -(uint64_t)a6;
        do
        {
          memmove(v8, v10, v9);
          v10 += v11;
          v8 += v12;
          --v7;
        }
        while (v7);
      }
      return 0;
    }
  }
  return v6;
}

uint64_t IIOPixelConverterIndexed::IIOPixelConverterIndexed(uint64_t a1, char a2, char a3, uint32_t a4, char a5, uint32_t a6, char a7, uint64_t a8)
{
  _BYTE *v12;
  CGColorSpace *v13;
  uint32_t v14;
  CGBitmapInfo v15;
  uint32_t v16;
  CGBitmapInfo v17;
  vImageConverterRef v18;
  const char *v19;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;
  vImage_Error error;

  *(_BYTE *)(a1 + 72) = 0;
  error = 0;
  *(_QWORD *)a1 = &off_1E1BB2560;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 49) = a5;
  *(_QWORD *)(a1 + 24) = a8;
  *(_BYTE *)(a1 + 17) = 4;
  *(_BYTE *)(a1 + 65) = a7;
  *(_BYTE *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 36) = a4 << 8;
  *(_DWORD *)(a1 + 52) = a6 << 8;
  ImageIOPixelConverter::extractInfo(a1);
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a1 + 49) && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a1 + 52))
  {
    v12 = (_BYTE *)(a1 + 16);
LABEL_5:
    *v12 = 0;
    return a1;
  }
  v12 = (_BYTE *)(a1 + 16);
  if ((a5 & 0xFE) == 0xC)
    goto LABEL_5;
  *v12 = 1;
  v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v14 = *(unsigned __int8 *)(a1 + 41) * a4;
  srcFormat.bitsPerComponent = a4;
  srcFormat.bitsPerPixel = v14;
  v15 = *(_DWORD *)(a1 + 44);
  srcFormat.colorSpace = v13;
  memset(&srcFormat.version, 0, 20);
  srcFormat.bitmapInfo = v15;
  v16 = *(unsigned __int8 *)(a1 + 56) * a6;
  destFormat.bitsPerComponent = a6;
  destFormat.bitsPerPixel = v16;
  v17 = *(_DWORD *)(a1 + 60);
  destFormat.colorSpace = v13;
  memset(&destFormat.version, 0, 20);
  destFormat.bitmapInfo = v17;
  v18 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0, &error);
  *(_QWORD *)(a1 + 8) = v18;
  if (!v18 || error)
  {
    v19 = IIO_vImageErrorString(error);
    _cg_jpeg_mem_term("IIOPixelConverterIndexed", 550, "*** IIOPixelConverterIndexed could not create vImageConverter '%s'\n", v19);
  }
  CGColorSpaceRelease(v13);
  return a1;
}

void sub_188079ECC(_Unwind_Exception *a1)
{
  ImageIOPixelConverter *v1;

  ImageIOPixelConverter::~ImageIOPixelConverter(v1);
  _Unwind_Resume(a1);
}

void IIOPixelConverterIndexed::~IIOPixelConverterIndexed(IIOPixelConverterIndexed *this)
{
  ImageIOPixelConverter::~ImageIOPixelConverter(this);
  JUMPOUT(0x18D761C30);
}

uint64_t IIOPixelConverterIndexed::convert(IIOPixelConverterIndexed *this, vImage_Buffer *a2, vImage_Buffer *a3)
{
  return -1;
}

uint64_t IIOPixelConverterIndexed::convertRow(IIOPixelConverterIndexed *this, unsigned __int8 *a2, unsigned __int8 *__dst, unsigned int a4)
{
  int v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  vImage_Buffer v13;
  vImage_Buffer v14;

  v5 = *((_DWORD *)this + 9);
  HIDWORD(v6) = v5;
  LODWORD(v6) = v5 - 256;
  switch((v6 >> 8))
  {
    case 0u:
      IIOPixelConverterIndexed::expandIndex1to8(this, a2, __dst, a4);
      goto LABEL_15;
    case 1u:
      IIOPixelConverterIndexed::expandIndex2to8(this, a2, __dst, a4);
      goto LABEL_15;
    case 3u:
      if (a4 + 1 >= 2)
      {
        v10 = (a4 + 1) >> 1;
        do
        {
          v11 = *a2++;
          *__dst = v11 >> 4;
          __dst[1] = v11 & 0xF;
          __dst += 2;
          --v10;
        }
        while (v10);
      }
      goto LABEL_15;
    case 7u:
      if (*((_DWORD *)this + 11))
        v12 = 2 * a4;
      else
        v12 = a4;
      memcpy(__dst, a2, v12);
LABEL_15:
      result = 0;
      break;
    default:
      v7 = (BYTE1(v5) * a4 * *((unsigned __int8 *)this + 41)) >> 3;
      v8 = (*((unsigned __int8 *)this + 53) * a4 * *((unsigned __int8 *)this + 56)) >> 3;
      v14.data = a2;
      v14.height = 1;
      v14.width = a4;
      v14.rowBytes = v7;
      v13.data = __dst;
      v13.height = 1;
      v13.width = a4;
      v13.rowBytes = v8;
      if (!*((_BYTE *)this + 72))
      {
        _cg_jpeg_mem_term("convertRow", 607, "🔺  check 'convertAnyToAny' usage: _srcBits: %08X not handled\n", v5);
        *((_BYTE *)this + 72) = 1;
      }
      result = ImageIOPixelConverter::convertAnyToAny(this, &v14, &v13);
      break;
  }
  return result;
}

uint64_t IIOPixelConverterIndexed::expandIndex1to8(IIOPixelConverterIndexed *this, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  v4 = a4 + 3;
  if ((a4 + 3) >= 8)
  {
    v5 = v4 >> 3;
    do
    {
      v6 = *a2++;
      v7 = _LUT_INDEX[v6 & 0xF];
      *(_DWORD *)a3 = *(_DWORD *)((char *)_LUT_INDEX + (((unint64_t)v6 >> 2) & 0x3C));
      *((_DWORD *)a3 + 1) = v7;
      a3 += 8;
      --v5;
    }
    while (v5);
  }
  if ((v4 & 4) != 0)
    *(_DWORD *)a3 = *(_DWORD *)((char *)_LUT_INDEX + (((unint64_t)*a2 >> 2) & 0x3C));
  return 0;
}

uint64_t IIOPixelConverterIndexed::expandIndex2to8(IIOPixelConverterIndexed *this, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;

  if ((a4 + 3) >= 4)
  {
    v4 = (a4 + 3) >> 2;
    do
    {
      v5 = *a2++;
      *a3 = IIOPixelConverterIndexed::expandIndex2to8(unsigned char *,unsigned char *,unsigned int)::_LUT2_4[(unint64_t)v5 >> 6];
      a3[1] = IIOPixelConverterIndexed::expandIndex2to8(unsigned char *,unsigned char *,unsigned int)::_LUT2_4[((unint64_t)v5 >> 4) & 3];
      a3[2] = IIOPixelConverterIndexed::expandIndex2to8(unsigned char *,unsigned char *,unsigned int)::_LUT2_4[((unint64_t)v5 >> 2) & 3];
      a3[3] = IIOPixelConverterIndexed::expandIndex2to8(unsigned char *,unsigned char *,unsigned int)::_LUT2_4[v5 & 3];
      a3 += 4;
      --v4;
    }
    while (v4);
  }
  return 0;
}

void sub_18807A298(_Unwind_Exception *a1)
{
  ImageIOPixelConverter *v1;

  ImageIOPixelConverter::~ImageIOPixelConverter(v1);
  _Unwind_Resume(a1);
}

void IIOPixelConverterGray::~IIOPixelConverterGray(IIOPixelConverterGray *this)
{
  ImageIOPixelConverter::~ImageIOPixelConverter(this);
  JUMPOUT(0x18D761C30);
}

uint64_t IIOPixelConverterGray::convert(IIOPixelConverterGray *this, vImage_Buffer *srcs, vImage_Buffer *dests)
{
  void *data;
  size_t rowBytes;
  vImageConverter *v8;
  vImage_Error v9;
  const char *v10;
  __int128 v11;
  vImage_Buffer dest;

  if (__PAIR64__(*((_DWORD *)this + 9), *((unsigned __int8 *)this + 32)) == __PAIR64__(*((_DWORD *)this + 13), *((unsigned __int8 *)this + 49)))
  {
    data = srcs->data;
    rowBytes = srcs->rowBytes;
    if (rowBytes >= dests->rowBytes)
      rowBytes = dests->rowBytes;
    memcpy(dests->data, data, rowBytes * dests->height);
  }
  else
  {
    v8 = (vImageConverter *)*((_QWORD *)this + 1);
    if (v8)
    {
      v9 = iio_vImageConvert_AnyToAny(v8, srcs, dests, 0, 0);
      if (!v9)
        goto LABEL_9;
      v10 = IIO_vImageErrorString(v9);
      _cg_jpeg_mem_term("convert", 895, "*** vImageConvert_AnyToAny: %s\n", v10);
    }
    _cg_jpeg_mem_term("convert", 899, "   falling back to own convertAnyToAny [Gray]\n");
    ImageIOPixelConverter::convertAnyToAny(this, srcs, dests);
  }
LABEL_9:
  if (*((_BYTE *)this + 65) == 1)
  {
    v11 = *(_OWORD *)&dests->width;
    *(_OWORD *)&dest.data = *(_OWORD *)&dests->data;
    *(_OWORD *)&dest.width = v11;
    vImageByteSwap_Planar16U(&dest, &dest, 0x10u);
  }
  return 0;
}

uint64_t IIOPixelConverterGray::convertRow(IIOPixelConverterGray *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];

  v4 = (*((unsigned __int8 *)this + 37) * a4 * *((unsigned __int8 *)this + 41)) >> 3;
  v5 = (*((unsigned __int8 *)this + 53) * a4 * *((unsigned __int8 *)this + 56)) >> 3;
  v8[0] = a2;
  v8[1] = 1;
  v8[2] = a4;
  v8[3] = v4;
  v7[0] = a3;
  v7[1] = 1;
  v7[2] = a4;
  v7[3] = v5;
  return (*(uint64_t (**)(IIOPixelConverterGray *, _QWORD *, _QWORD *))(*(_QWORD *)this + 16))(this, v8, v7);
}

uint64_t IIOPixelConverterLab::IIOPixelConverterLab(uint64_t a1, char a2, char a3, uint32_t a4, int a5, char a6, uint32_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint32_t v13;
  int v14;
  _BOOL4 v15;
  CGBitmapInfo v16;
  _BOOL4 v17;
  int v18;
  _BOOL4 v20;
  CGBitmapInfo v21;
  vImageConverterRef v22;
  const char *v23;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;
  vImage_Error error;

  *(_BYTE *)(a1 + 72) = 0;
  error = 0;
  *(_QWORD *)a1 = &off_1E1BB1F80;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 49) = a6;
  *(_QWORD *)(a1 + 24) = a10;
  *(_BYTE *)(a1 + 17) = 3;
  *(_BYTE *)(a1 + 65) = a8;
  *(_BYTE *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 36) = (16843008 * a4) | a5;
  if (a5)
    v13 = a7;
  else
    v13 = 0;
  *(_DWORD *)(a1 + 52) = (16843008 * a7) | v13;
  ImageIOPixelConverter::extractInfo(a1);
  *(_BYTE *)(a1 + 16) = 1;
  if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a1 + 49) && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a1 + 52))
  {
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    memset(&srcFormat.colorSpace, 0, 32);
    v14 = *(unsigned __int8 *)(a1 + 41);
    v15 = v14 == 4;
    srcFormat.bitsPerComponent = a4;
    srcFormat.bitsPerPixel = v14 * a4;
    v16 = *(_DWORD *)(a1 + 44);
    v17 = a4 == 8;
    if (v17 && v15)
      v16 |= 0x4000u;
    srcFormat.bitmapInfo = v16;
    memset(&destFormat.colorSpace, 0, 32);
    v18 = *(unsigned __int8 *)(a1 + 56);
    destFormat.bitsPerComponent = a7;
    destFormat.bitsPerPixel = v18 * a7;
    v20 = a7 == 8 && v18 == 4;
    if (v17 && v20)
      v21 = *(_DWORD *)(a1 + 60) | 0x4000;
    else
      v21 = *(_DWORD *)(a1 + 60);
    destFormat.bitmapInfo = v21;
    v22 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0, &error);
    *(_QWORD *)(a1 + 8) = v22;
    if (!v22 || error)
    {
      v23 = IIO_vImageErrorString(error);
      _cg_jpeg_mem_term("IIOPixelConverterLab", 1335, "*** IIOPixelConverterLab could not create vImageConverter '%s'\n", v23);
    }
  }
  return a1;
}

void sub_18807A5E8(_Unwind_Exception *a1)
{
  ImageIOPixelConverter *v1;

  ImageIOPixelConverter::~ImageIOPixelConverter(v1);
  _Unwind_Resume(a1);
}

void IIOPixelConverterLab::~IIOPixelConverterLab(IIOPixelConverterLab *this)
{
  ImageIOPixelConverter::~ImageIOPixelConverter(this);
  JUMPOUT(0x18D761C30);
}

uint64_t IIOPixelConverterLab::convert(IIOPixelConverterLab *this, vImage_Buffer *srcs, vImage_Buffer *dests)
{
  void *data;
  size_t rowBytes;
  vImagePixelCount height;
  uint64_t v9;
  unsigned int v10;
  vImagePixelCount width;
  char *v12;
  unsigned int v13;
  BOOL v14;
  vImageConverter *v15;
  vImage_Error v16;
  const char *v17;
  __int128 v18;
  uint64_t v20;
  vImagePixelCount v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  _WORD *v26;
  vImage_Buffer dest;

  if (__PAIR64__(*((_DWORD *)this + 9), *((unsigned __int8 *)this + 32)) == __PAIR64__(*((_DWORD *)this + 13), *((unsigned __int8 *)this + 49)))
  {
    data = srcs->data;
    rowBytes = srcs->rowBytes;
    if (rowBytes >= dests->rowBytes)
      rowBytes = dests->rowBytes;
    memcpy(dests->data, data, rowBytes * dests->height);
    height = dests->height;
    if (*((_BYTE *)this + 39) == 8)
    {
      if (height)
      {
        v9 = 0;
        v10 = 0;
        width = dests->width;
        do
        {
          if (width)
          {
            v12 = (char *)dests->data + dests->rowBytes * v9;
            v13 = 1;
            do
            {
              v12[1] ^= 0x80u;
              v12[2] ^= 0x80u;
              v12 += *((unsigned __int8 *)this + 56);
              width = dests->width;
              v14 = width > v13++;
            }
            while (v14);
            height = dests->height;
          }
          v9 = ++v10;
        }
        while (height > v10);
      }
    }
    else if (height)
    {
      v20 = 0;
      v21 = dests->width;
      v22 = (char *)dests->data + 4;
      v23 = 2 * dests->rowBytes;
      do
      {
        if (v21)
        {
          v24 = 2 * *((unsigned __int8 *)this + 56);
          v25 = 1;
          v26 = v22;
          do
          {
            *(v26 - 1) ^= 0x8000u;
            *v26 ^= 0x8000u;
            v14 = v21 > v25++;
            v26 = (_WORD *)((char *)v26 + v24);
          }
          while (v14);
        }
        ++v20;
        v22 += v23;
      }
      while (height > v20);
    }
  }
  else
  {
    v15 = (vImageConverter *)*((_QWORD *)this + 1);
    if (v15)
    {
      v16 = iio_vImageConvert_AnyToAny(v15, srcs, dests, 0, 0);
      if (!v16)
        goto LABEL_17;
      v17 = IIO_vImageErrorString(v16);
      _cg_jpeg_mem_term("convert", 1392, "*** vImageConvert_AnyToAny: %s\n", v17);
    }
    _cg_jpeg_mem_term("convert", 1396, "   falling back to own convertAnyToAny [Lab]\n");
    ImageIOPixelConverter::convertAnyToAny(this, srcs, dests);
  }
LABEL_17:
  if (*((_BYTE *)this + 65) == 1)
  {
    v18 = *(_OWORD *)&dests->width;
    *(_OWORD *)&dest.data = *(_OWORD *)&dests->data;
    *(_OWORD *)&dest.width = v18;
    vImageByteSwap_Planar16U(&dest, &dest, 0x10u);
  }
  return 0;
}

uint64_t IIOPixelConverterLab::convertRow(IIOPixelConverterLab *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];

  v4 = (*((unsigned __int8 *)this + 37) * a4 * *((unsigned __int8 *)this + 41)) >> 3;
  v5 = (*((unsigned __int8 *)this + 53) * a4 * *((unsigned __int8 *)this + 56)) >> 3;
  v8[0] = a2;
  v8[1] = 1;
  v8[2] = a4;
  v8[3] = v4;
  v7[0] = a3;
  v7[1] = 1;
  v7[2] = a4;
  v7[3] = v5;
  return (*(uint64_t (**)(IIOPixelConverterLab *, _QWORD *, _QWORD *))(*(_QWORD *)this + 16))(this, v8, v7);
}

uint64_t IIOPixelConverterCMYK::IIOPixelConverterCMYK(uint64_t a1, char a2, char a3, uint32_t a4, int a5, int a6, int a7, uint64_t a8, char a9, unsigned __int8 a10, char a11, uint64_t a12)
{
  CGColorSpace *v14;
  CGColorSpace *v15;
  int v16;
  _BOOL4 v17;
  CGBitmapInfo v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v22;
  CGBitmapInfo v23;
  vImageConverterRef v24;
  const char *v25;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;
  vImage_Error error;

  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)a1 = &off_1E1BB21C8;
  error = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 49) = a9;
  *(_BYTE *)(a1 + 17) = 2;
  *(_QWORD *)(a1 + 24) = a12;
  *(_BYTE *)(a1 + 65) = a11;
  *(_BYTE *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 36) = (a4 << 24) | (a5 << 16) | (a6 << 8) | a7;
  *(_DWORD *)(a1 + 52) = 16843009 * a10;
  ImageIOPixelConverter::extractInfo(a1);
  *(_BYTE *)(a1 + 16) = 1;
  v14 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D968]);
  v15 = v14;
  srcFormat.decode = 0;
  *(_QWORD *)&srcFormat.renderingIntent = 0;
  v16 = *(unsigned __int8 *)(a1 + 41);
  v17 = v16 == 4;
  srcFormat.bitsPerComponent = a4;
  srcFormat.bitsPerPixel = v16 * a4;
  v18 = *(_DWORD *)(a1 + 44);
  v19 = a4 == 8;
  if (v19 && v17)
    v18 |= 0x4000u;
  srcFormat.colorSpace = v14;
  srcFormat.version = 0;
  srcFormat.bitmapInfo = v18;
  destFormat.decode = 0;
  *(_QWORD *)&destFormat.renderingIntent = 0;
  v20 = *(unsigned __int8 *)(a1 + 56);
  destFormat.bitsPerComponent = a10;
  destFormat.bitsPerPixel = v20 * a10;
  v22 = a10 == 8 && v20 == 4;
  if (v19 && v22)
    v23 = *(_DWORD *)(a1 + 60) | 0x4000;
  else
    v23 = *(_DWORD *)(a1 + 60);
  destFormat.colorSpace = v14;
  destFormat.version = 0;
  destFormat.bitmapInfo = v23;
  v24 = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0, &error);
  *(_QWORD *)(a1 + 8) = v24;
  if (!v24 || error)
  {
    v25 = IIO_vImageErrorString(error);
    _cg_jpeg_mem_term("IIOPixelConverterCMYK", 1486, "*** IIOPixelConverterCMYK could not create vImageConverter '%s'\n", v25);
  }
  CGColorSpaceRelease(v15);
  return a1;
}

void sub_18807A9F8(_Unwind_Exception *a1)
{
  ImageIOPixelConverter *v1;

  ImageIOPixelConverter::~ImageIOPixelConverter(v1);
  _Unwind_Resume(a1);
}

void IIOPixelConverterCMYK::~IIOPixelConverterCMYK(IIOPixelConverterCMYK *this)
{
  ImageIOPixelConverter::~ImageIOPixelConverter(this);
  JUMPOUT(0x18D761C30);
}

uint64_t IIOPixelConverterCMYK::convert(IIOPixelConverterCMYK *this, vImage_Buffer *srcs, vImage_Buffer *dests)
{
  vImageConverter *v6;
  vImage_Error v7;
  const char *v8;

  if (*((_BYTE *)this + 16))
  {
    v6 = (vImageConverter *)*((_QWORD *)this + 1);
    if (!v6)
    {
LABEL_5:
      _cg_jpeg_mem_term("convert", 1512, "   falling back to own convertAnyToAny [CMYK]\n");
      ImageIOPixelConverter::convertAnyToAny(this, srcs, dests);
      return 0;
    }
    v7 = iio_vImageConvert_AnyToAny(v6, srcs, dests, 0, 0);
    if (v7)
    {
      v8 = IIO_vImageErrorString(v7);
      _cg_jpeg_mem_term("convert", 1508, "*** vImageConvert_AnyToAny: %s\n", v8);
      goto LABEL_5;
    }
  }
  return 0;
}

uint64_t IIOPixelConverterCMYK::convertRow(IIOPixelConverterCMYK *this, unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  _QWORD v8[4];

  v4 = (*((unsigned __int8 *)this + 37) * a4 * *((unsigned __int8 *)this + 41)) >> 3;
  v5 = (*((unsigned __int8 *)this + 53) * a4 * *((unsigned __int8 *)this + 56)) >> 3;
  v8[0] = a2;
  v8[1] = 1;
  v8[2] = a4;
  v8[3] = v4;
  v7[0] = a3;
  v7[1] = 1;
  v7[2] = a4;
  v7[3] = v5;
  return (*(uint64_t (**)(IIOPixelConverterCMYK *, _QWORD *, _QWORD *))(*(_QWORD *)this + 16))(this, v8, v7);
}

void IIOColorMap::IIOColorMap(IIOColorMap *this, const unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v4;
  void *v6;
  uint64_t v7;
  size_t v8;
  size_t v9;

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  v4 = a3 - 12;
  if (a3 >= 0xC)
  {
    *(_QWORD *)this = *(_QWORD *)a2;
    *((_BYTE *)this + 8) = a2[8];
    v6 = (void *)operator new[]();
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v6;
    if (v7)
    {
      MEMORY[0x18D761C18](v7, 0x1000C8033FC2DF1);
      v6 = (void *)*((_QWORD *)this + 2);
    }
    v8 = 3 * *(unsigned int *)this;
    bzero(v6, v8);
    if (v4 >= v8)
      v9 = v8;
    else
      v9 = v4;
    memcpy(*((void **)this + 2), a2 + 12, v9);
  }
}

void sub_18807AC18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    MEMORY[0x18D761C18](v3, 0x1000C8033FC2DF1);
  _Unwind_Resume(exception_object);
}

void IIOColorMap::IIOColorMap(IIOColorMap *this, CFReadStreamRef stream)
{
  BOOL v4;
  int v5;
  UInt8 *v6;
  uint64_t v7;
  CFIndex v8;
  UInt8 v9[8];
  int v10;
  UInt8 buffer[4];

  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 8) = 0;
  *(_DWORD *)buffer = 0;
  v10 = 0;
  *(_QWORD *)v9 = 0;
  if (CFReadStreamRead(stream, buffer, 4) == 4)
  {
    v4 = *(_DWORD *)buffer != 1885433187 && *(_DWORD *)buffer == 1346456899;
    if (v4 && CFReadStreamRead(stream, v9, 12) == 12 && *(_DWORD *)v9 <= 0x100u)
    {
      v5 = *(_DWORD *)&v9[4];
      *(_DWORD *)this = *(_DWORD *)v9;
      *((_DWORD *)this + 1) = v5;
      *((_BYTE *)this + 8) = v10;
      v6 = (UInt8 *)operator new[]();
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v6;
      if (v7)
      {
        MEMORY[0x18D761C18](v7, 0x1000C8033FC2DF1);
        v6 = (UInt8 *)*((_QWORD *)this + 2);
      }
      v8 = CFReadStreamRead(stream, v6, 3 * *(unsigned int *)this);
      if (v8 != 3 * *(unsigned int *)this)
        _cg_jpeg_mem_term("IIOColorMap", 90, "*** ERROR: failed to read ColorMap - expected %d bytes, got %d\n", 3 * *(_DWORD *)this, v8);
    }
  }
}

void sub_18807AD78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    MEMORY[0x18D761C18](v3, 0x1000C8033FC2DF1);
  _Unwind_Resume(exception_object);
}

char *IIOColorMap::createSerializedData(IIOColorMap *this, unint64_t *a2)
{
  size_t v3;
  char *v4;
  uint64_t v5;

  v3 = 3 * *(unsigned int *)this + 12;
  *a2 = v3;
  v4 = (char *)malloc_type_malloc(v3, 0xEF744ED1uLL);
  v5 = *(_QWORD *)this;
  *(_QWORD *)v4 = *(_QWORD *)this;
  v4[8] = *((_BYTE *)this + 8);
  memcpy(v4 + 12, *((const void **)this + 2), 3 * v5);
  return v4;
}

uint64_t IIOColorMap::writeEmptyPlaceholderToStream(IIOColorMap *this, __CFWriteStream *a2)
{
  UInt8 buffer[4];

  *(_DWORD *)buffer = 1885433187;
  if (CFWriteStreamWrite(this, buffer, 4) == 4)
    return 0;
  else
    return 4294967260;
}

uint64_t IIOColorMap::writeToStream(IIOColorMap *this, CFWriteStreamRef stream)
{
  uint64_t v5;
  int v6;
  UInt8 buffer[4];

  v6 = 0;
  v5 = *(_QWORD *)this;
  LOBYTE(v6) = *((_BYTE *)this + 8);
  *(_DWORD *)buffer = 1346456899;
  if (CFWriteStreamWrite(stream, buffer, 4) != 4 || CFWriteStreamWrite(stream, (const UInt8 *)&v5, 12) != 12)
    return 4294967260;
  if (CFWriteStreamWrite(stream, *((const UInt8 **)this + 2), 3 * *(unsigned int *)this) == 3
                                                                                             * *(unsigned int *)this)
    return 0;
  return 4294967260;
}

unsigned int *IIOColorMap::copyToRGBX(unsigned int *this, unsigned int *a2, unint64_t a3, char a4)
{
  unint64_t v4;
  __int16 *v5;
  unint64_t v6;
  unsigned int *v7;
  __int16 v8;
  vImage_Buffer dest;
  uint8_t permuteMap[4];

  v4 = *this;
  if (a3 >> 2 < v4)
    v4 = a3 >> 2;
  if (v4)
  {
    v5 = (__int16 *)*((_QWORD *)this + 2);
    v6 = v4;
    v7 = a2;
    do
    {
      v8 = *v5;
      *((_BYTE *)v7 + 2) = *((_BYTE *)v5 + 2);
      *(_WORD *)v7 = v8;
      *((_BYTE *)v7 + 3) = -1;
      v5 = (__int16 *)((char *)v5 + 3);
      ++v7;
      --v6;
    }
    while (v6);
  }
  if ((a4 & 1) != 0)
  {
    *(_DWORD *)permuteMap = 50331906;
    dest.data = a2;
    dest.height = 1;
    dest.width = (unsigned __int16)v4;
    dest.rowBytes = 4 * (unsigned __int16)v4;
    return (unsigned int *)vImagePermuteChannels_ARGB8888(&dest, &dest, permuteMap, 0x10u);
  }
  return this;
}

BOOL IIOColorMap::indexForColor(IIOColorMap *this, _DWORD *a2, const unsigned int *a3, _BYTE *a4, unsigned __int8 *a5)
{
  unint64_t v5;
  _BOOL8 result;
  int v7;

  *a4 = 0;
  if (!(_DWORD)a3)
    return 0;
  if (*a2 != (_DWORD)this)
  {
    v5 = 0;
    while (a3 - 1 != v5)
    {
      v7 = a2[++v5];
      if (v7 == (_DWORD)this)
      {
        result = v5 < a3;
        goto LABEL_8;
      }
    }
    return 0;
  }
  LOBYTE(v5) = 0;
  result = 1;
LABEL_8:
  *a4 = v5;
  return result;
}

uint64_t _cg_png_get_next_frame_fcTL(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _WORD *a7, _WORD *a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t result;
  BOOL v12;

  result = 0;
  if (a1 && a2)
  {
    if (a10)
      v12 = a9 == 0;
    else
      v12 = 1;
    if (v12
      || a8 == 0
      || a7 == 0
      || a6 == 0
      || a5 == 0
      || a4 == 0
      || a3 == 0
      || (*(_DWORD *)(a2 + 8) & 0x40000) == 0)
    {
      return 0;
    }
    else
    {
      *a3 = *(_DWORD *)(a2 + 368);
      *a4 = *(_DWORD *)(a2 + 372);
      *a5 = *(_DWORD *)(a2 + 376);
      *a6 = *(_DWORD *)(a2 + 380);
      *a7 = *(_WORD *)(a2 + 384);
      *a8 = *(_WORD *)(a2 + 386);
      *a9 = *(_BYTE *)(a2 + 388);
      *a10 = *(_BYTE *)(a2 + 389);
      return 1;
    }
  }
  return result;
}

uint64_t _cg_png_get_first_frame_is_hidden(uint64_t result)
{
  if (result)
    return *(_BYTE *)(result + 768) & 1;
  return result;
}

uint64_t IIOWritePlugin::writeOne(IIOWritePlugin *this, IIOImagePixelDataProvider *a2, IIODictionary *a3, IIODictionary *a4)
{
  return 4294967240;
}

uint64_t IIOWritePlugin::writeAll(IIOImageDestination **this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  IIOImageSource *PixelProviderAtIndex;
  uint64_t ImagePropertiesAtIndex;
  uint64_t SourceGeomColorSpace;
  uint64_t v8;
  uint64_t Ref;

  v2 = IIOImageDestination::pixelProviderCount(this[3]);
  if (v2)
  {
    v3 = 0;
    v4 = 4294967246;
    while (1)
    {
      PixelProviderAtIndex = (IIOImageSource *)IIOImageDestination::getPixelProviderAtIndex((CFArrayRef *)this[3], v3);
      ImagePropertiesAtIndex = IIOImageDestination::getImagePropertiesAtIndex(this[3], v3);
      SourceGeomColorSpace = IIOImagePlus::getSourceGeomColorSpace(this[3]);
      if (!PixelProviderAtIndex)
        goto LABEL_6;
      v8 = SourceGeomColorSpace;
      if ((*((unsigned int (**)(IIOImageDestination **, IIOImageSource *, uint64_t, uint64_t, unint64_t))*this
            + 3))(this, PixelProviderAtIndex, ImagePropertiesAtIndex, SourceGeomColorSpace, v3))
      {
        break;
      }
LABEL_7:
      v4 = 0;
      if (v2 == ++v3)
        return v4;
    }
    Ref = IIOImageSource::imageReadRef(PixelProviderAtIndex);
    v4 = (*((uint64_t (**)(IIOImageDestination **, uint64_t, uint64_t, uint64_t, unint64_t))*this + 4))(this, Ref, ImagePropertiesAtIndex, v8, v3);
LABEL_6:
    if ((_DWORD)v4)
      return v4;
    goto LABEL_7;
  }
  return 4294967246;
}

uint64_t IIOWritePlugin::getSourceImageAtIndex(IIOImageDestination **this, unint64_t a2)
{
  return IIOImageDestination::getSourceImageAtIndex(this[3], a2);
}

BOOL IIOWritePlugin::createLZFSECompressedData(IIOWritePlugin *this, unsigned __int8 *a2, size_t size, unsigned __int8 **a4, unsigned __int8 **a5)
{
  unsigned __int8 *v9;

  v9 = (unsigned __int8 *)malloc_type_malloc(size, 0xB2477951uLL);
  *a4 = v9;
  if (v9)
    v9 = (unsigned __int8 *)compression_encode_buffer(v9, size, a2, size, 0, COMPRESSION_LZFSE);
  *a5 = v9;
  return v9 != 0;
}

size_t png_default_write_data(size_t result, void *__ptr, size_t a3)
{
  void (**v4)(void);

  if (result)
  {
    v4 = (void (**)(void))result;
    result = fwrite(__ptr, 1uLL, a3, *(FILE **)(result + 40));
    if (result != a3)
      _cg_png_error(v4, "Write Error");
  }
  return result;
}

uint64_t png_default_flush(uint64_t result)
{
  if (result)
    return fflush(*(FILE **)(result + 40));
  return result;
}

const char *AppleJPEGReadPlugin::ColorConvert(IIOColorConverter *this, uint64_t a2, uint64_t a3)
{
  int v4;
  vImagePixelCount v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  const char *result;
  const char *v13;
  int v14;
  vImage_Buffer v15;
  vImage_Buffer v16;

  v4 = *(_DWORD *)(a2 + 40);
  v5 = *(int *)(a2 + 44);
  v6 = *(_DWORD *)(a2 + 120);
  v7 = *(_DWORD *)(a3 + 40);
  v8 = *(_DWORD *)(a3 + 48);
  v9 = *(_DWORD *)(a3 + 120);
  v10 = *(void **)a2;
  v11 = *(void **)a3;
  if (!v6)
  {
    v14 = *(_DWORD *)(a2 + 48);
    if ((v14 - 3) < 2)
    {
      v6 = 4 * v4;
    }
    else if (v14 == 5)
    {
      v6 = *(_DWORD *)(a2 + 40);
    }
    else if (v14)
    {
      _cg_jpeg_mem_term("ColorConvert", 91, "inRowBytes is 0\n");
      v6 = 0;
    }
    else
    {
      v6 = 3 * v4;
    }
  }
  if (!v9)
  {
    if ((v8 - 3) < 2)
    {
      v9 = 4 * v7;
    }
    else if (v8 == 5)
    {
      v9 = v7;
    }
    else if (v8)
    {
      _cg_jpeg_mem_term("ColorConvert", 110, "outRowBytes is 0\n");
      v9 = 0;
    }
    else
    {
      v9 = 3 * v7;
    }
  }
  v16.data = v10;
  v16.height = v5;
  v16.width = v4;
  v16.rowBytes = v6;
  v15.data = v11;
  v15.height = v5;
  v15.width = v7;
  v15.rowBytes = v9;
  result = (const char *)IIOColorConverter::colorConvert(this, &v16, &v15);
  if (result)
  {
    v13 = IIO_vImageErrorString((uint64_t)result);
    return LogError("ColorConvert", 121, "*** vImageConvert_AnyToAny - %s\n", v13);
  }
  return result;
}

BOOL AppleJPEGReadPlugin::IIORecodeAppleJPEG_to_JPEG(AppleJPEGReadPlugin *this, IIOImageDestination *a2, IIOImageSource *a3)
{
  CGImage *Plugin;
  CGImageSource *ColorSpace;
  CGColorSpaceModel Model;
  const __CFString *Name;
  __int16 v9;
  IIODictionary *ImagePropertiesAtIndex;
  const __CFData *Property;
  JPEGWritePlugin *v12;
  int v13;
  IIODictionary *v14;
  float ImageIOCompressionQuality;
  _BOOL4 BoolForKey;
  CGImageMetadata **v17;
  IIODictionary *RecodeProperties;
  int v19;
  int v20;
  _BOOL4 v21;
  IIODictionary *v22;
  const __CFDictionary *ObjectForKey;
  unint64_t v24;
  IIOImageReadSession *Source;
  IIOImageRead *Size;
  int v27;
  unint64_t v28;
  __n128 v29;
  int image_info;
  uint64_t v31;
  int v32;
  unsigned __int16 v33;
  unsigned int v34;
  double v35;
  int v36;
  JPEGWritePlugin *v37;
  char v38;
  CGColorSpace *v39;
  _BOOL4 v40;
  _BOOL8 v41;
  IIOColorConverter *v42;
  CGColorSpace *v43;
  const ColorSyncProfile *v44;
  const __CFDictionary *v45;
  const void *v46;
  float FloatForKey;
  float v48;
  unsigned int v49;
  unsigned int v50;
  BOOL *v51;
  CGColorSpace *v52;
  IIODictionary *v53;
  IIODictionary *v54;
  const __CFDictionary *ObjectForKeyGroup;
  __CFDictionary *v56;
  int OptimizeForSharing;
  int v58;
  CGColorSpace *v59;
  CGColorSpaceModel v60;
  CGColorSpace *InputColorSpaceForOutputPoppyProfile;
  CGColorSpaceRef v62;
  char v63;
  unint64_t v64;
  IIODictionary *v65;
  IIODictionary *v66;
  IIODictionary *v67;
  CGColorSpace *v68;
  unint64_t v69;
  int v70;
  const __CFDictionary *v72;
  CGColorSpace *ResizeSourceColorSpace;
  CGColorSpace *v74;
  CGImageSource *v75;
  CFDataRef v76;
  int CanBeIgnoredOnSRGBDevice;
  CGColorSpaceRef v78;
  const char *v79;
  unsigned __int16 v80;
  _BOOL4 v81;
  unsigned int v82;
  CGColorSpace *v83;
  const __CFString *theString2;
  IIOImageWriteSession *PixelProviderAtIndex;
  CGColorSpace *v86;
  const void **v87;
  IIOImageWriteSession *v88;
  _QWORD *v89;
  CGColorSpace *space;
  IIODictionary *v91;
  CGImage *cf;
  _BYTE v93[28];
  uint64_t __ptr;
  uint64_t v95;
  __int16 v96;
  __int16 v97;
  __int128 v98;
  const char *(*v99)(IIOColorConverter *, uint64_t, uint64_t);
  _BYTE v100[24];
  _BYTE v101[31];
  char v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  CGColorSpaceRef v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  IIOImageReadSession *v111;
  unint64_t v112;
  IIOImageRead *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  IIOImageRead *v121;
  const __CFDictionary **v122;
  UInt8 buffer[8];
  CFRange v124;

  if ((unsigned __int16)gIIODebugFlags >> 14)
    ImageIODebugOptions((unsigned __int16)gIIODebugFlags >> 14, "S", "IIORecodeAppleJPEG_to_JPEG", 0, 0, -1, 0);
  v122 = 0;
  *(_QWORD *)buffer = 0;
  v88 = (IIOImageWriteSession *)IIOImageSource::count(this);
  v121 = 0;
  v119 = 0u;
  v120 = 0u;
  v118 = 0u;
  v117 = 0;
  v115 = 0u;
  v116 = 0u;
  v114 = 0u;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v110 = 0;
  v108 = xmmword_1E1BCA8D0;
  v109 = 0;
  theString2 = (const __CFString *)*MEMORY[0x1E0C9DA10];
  v86 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v83 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
  v107 = 0;
  v91 = this;
  Plugin = (CGImage *)IIOImagePlus::readPlugin(this);
  cf = Plugin;
  if (Plugin)
  {
    CFRetain(Plugin);
    goto LABEL_6;
  }
  ColorSpace = (CGImageSource *)IIOReadPlugin::getColorSpace(this);
  cf = CGImageSourceCreateImageAtIndex(ColorSpace, 0, 0);
  if (cf)
  {
LABEL_6:
    space = CGImageGetColorSpace(cf);
    Model = CGColorSpaceGetModel(space);
    if (Model >= kCGColorSpaceModelCMYK)
    {
      v79 = IIO_ColorModelString(Model);
      _cg_jpeg_mem_term("IIORecodeAppleJPEG_to_JPEG", 186, "*** ERROR: applejpeg_recode_session cannot handle non-RGB data (%s)\n", v79);
    }
    else
    {
      Name = CGColorSpaceGetName(space);
      if (Name)
      {
        if (CFStringCompare(Name, theString2, 0))
          v9 = -1;
        else
          v9 = 1;
      }
      else
      {
        v9 = -1;
      }
      v80 = v9;
      if (a2)
      {
        *(_QWORD *)buffer = IIOImageSource::imageReadRef(a2);
        if (*(_QWORD *)buffer)
          goto LABEL_14;
      }
      else
      {
        Property = (const __CFData *)CGImageGetProperty();
        if (Property)
        {
          v124.location = 0;
          v124.length = 8;
          CFDataGetBytes(Property, v124, buffer);
        }
        if (*(_QWORD *)buffer)
        {
LABEL_14:
          PixelProviderAtIndex = (IIOImageWriteSession *)IIOImageDestination::getPixelProviderAtIndex((CFArrayRef *)this, 0);
          if (a2)
            ImagePropertiesAtIndex = (IIODictionary *)IIOImageSource::getImagePropertiesAtIndex(a2, 0);
          else
            ImagePropertiesAtIndex = 0;
          v12 = (JPEGWritePlugin *)IIOImageDestination::getImagePropertiesAtIndex(this, 0);
          v13 = IIOSkipMetadata(ImagePropertiesAtIndex);
          ImageIOCompressionQuality = JPEGWritePlugin::GetImageIOCompressionQuality(v12, v14);
          BoolForKey = IIODictionary::getBoolForKey(v12, CFSTR("kCGImageSourceCreateThumbnailWithTransform"));
          RecodeProperties = IIOReadPlugin::CreateRecodeProperties(a2, ImagePropertiesAtIndex, v91, (const __CFDictionary **)v12, (IIODictionary *)&v122, v17);
          v82 = IIODictionary::containsKeyGroup(RecodeProperties, CFSTR("IsProgressive"), CFSTR("{JFIF}"));
          v19 = IIOGetExifOrientation(RecodeProperties, 0);
          if (!v19)
            v19 = IIOGetExifOrientation(ImagePropertiesAtIndex, 0);
          if ((unsigned __int16)(v19 - 9) < 0xFFF8u)
            v20 = 1;
          else
            v20 = v19;
          v21 = v20 != 1 && BoolForKey;
          v81 = v21;
          if (IIODictionary::containsKey(RecodeProperties, CFSTR("{MakerApple}"))
            && (ObjectForKey = IIODictionary::getObjectForKey(RecodeProperties, CFSTR("{MakerApple}"))) != 0)
          {
            v87 = (const void **)operator new();
            IIODictionary::IIODictionary((IIODictionary *)v87, ObjectForKey);
          }
          else
          {
            v87 = 0;
          }
          IIOReadPlugin::CleanupRecodeProperties(RecodeProperties, v22);
          if ((gIIODebugFlags & 0x2000000000000) != 0)
          {
            ImageIOLog("%s recode: orientation value from user input:\n", "-o- ");
            if ((gIIODebugFlags & 0x2000000000000) != 0)
              IIODebugOrientation("IIORecodeAppleJPEG_to_JPEG", 267, RecodeProperties);
          }
          v24 = IIOImageDestination::resizeImageMaxPixelSize(v91);
          v89 = CGImageReadSessionCreate(*(const void **)buffer);
          Source = (IIOImageReadSession *)CGImageSourceGetSource((uint64_t)v89);
          Size = IIOImageReadSession::getSize(Source);
          if (a2 && IIOImageSource::isRAWFile(a2))
          {
            v106 = 0;
            v104 = 0u;
            v105 = 0u;
            IIOImageSource::getThumbnailInfoAtIndex((uint64_t)a2, 0, v24, (uint64_t)&v104);
            if (v27)
            {
              v28 = 0;
            }
            else
            {
              Size = (IIOImageRead *)DWORD2(v104);
              v28 = v104;
            }
          }
          else
          {
            v28 = 0;
          }
          v111 = Source;
          v112 = v28;
          v113 = Size;
          v121 = Size;
          *(_QWORD *)&v118 = iioReadCallback;
          *(_QWORD *)&v119 = iioSkipCallback;
          *((_QWORD *)&v119 + 1) = iioRewindCallback;
          *(_QWORD *)&v120 = &v111;
          if (IIOImageReadSession::seek(Source, v28, 0) == v28)
          {
            if (applejpeg_recode_open_file())
            {
              v103 = 0;
              v106 = 0;
              v104 = 0u;
              v105 = 0u;
              v102 = 0;
              image_info = applejpeg_recode_get_image_info();
              v110 = image_info;
              if (image_info)
                ImageIOLog("*** %s: applejpeg_recode_get_image_info err=%d\n", "IIORecodeAppleJPEG_to_JPEG", image_info);
              v31 = HIDWORD(v104);
              v32 = WORD4(v104);
              if (WORD4(v104) <= WORD6(v104))
                v33 = WORD6(v104);
              else
                v33 = WORD4(v104);
              v34 = IIODictionary::containsKey(RecodeProperties, CFSTR("{Exif}"));
              v35 = (double)v24 / (double)v33;
              LODWORD(v24) = llround(v35 * (double)v32);
              LODWORD(v31) = llround(v35 * (double)(unsigned __int16)v31);
              if (v34)
              {
                IIONumber::IIONumber((IIONumber *)v101, v24);
                IIODictionary::setObjectForKeyGroup(RecodeProperties, (uint64_t)v101, CFSTR("PixelXDimension"), CFSTR("{Exif}"));
                IIONumber::~IIONumber((IIONumber *)v101);
                IIONumber::IIONumber((IIONumber *)v100, v31);
                IIODictionary::setObjectForKeyGroup(RecodeProperties, (uint64_t)v100, CFSTR("PixelYDimension"), CFSTR("{Exif}"));
                IIONumber::~IIONumber((IIONumber *)v100);
              }
              applejpeg_recode_clear_options();
              applejpeg_resize_plugin_set_preferred_format();
              if (v110)
                ImageIOLog("*** %s: applejpeg_resize_plugin_set_preferred_format err=%d\n", "IIORecodeAppleJPEG_to_JPEG", v110);
              v36 = applejpeg_recode_set_option_accelerated_resize();
              v110 = v36;
              if (v36)
                ImageIOLog("*** %s: applejpeg_recode_set_option_accelerated_resize err=%d\n", "IIORecodeAppleJPEG_to_JPEG", v36);
              applejpeg_recode_set_option_aspect();
              v37 = (JPEGWritePlugin *)applejpeg_recode_set_option_outsize();
              JPEGWritePlugin::JPEGQualityFromLossyCompressionQuality(v37, ImageIOCompressionQuality);
              v38 = v81;
              applejpeg_recode_set_option_jpeg_quality();
              if (v13)
              {
                v39 = CGImageGetColorSpace(cf);
                v40 = !IIO_CGColorSpaceNameMatchesName(v39, theString2);
              }
              else
              {
                v40 = 1;
              }
              if (v82)
                applejpeg_recode_set_option_jpeg_type();
              applejpeg_recode_set_option_skip_app0();
              if (v81)
              {
                if ((gIIODebugFlags & 0x2000000000000) != 0)
                  ImageIOLog("%s recode: bakeInOrientation: %d\n", "-o- ", v20);
                applejpeg_recode_set_option_orientation();
              }
              else if ((gIIODebugFlags & 0x2000000000000) != 0)
              {
                ImageIOLog("%s recode: not changing orientation : %d\n", "-o- ", v20);
              }
              if (v13)
              {
                if (v40)
                {
                  LOWORD(__ptr) = -9985;
                  iioWriteCallback(&__ptr, 2, v88);
                  LODWORD(v98) = 268493055;
                  *(_QWORD *)((char *)&v98 + 4) = 0x101004649464ALL;
                  HIDWORD(v98) = 1207977984;
                  LOWORD(v99) = 0;
                  iioWriteCallback(&v98, 18, v88);
                  JPEGWritePlugin::WriteICCData(v88, PixelProviderAtIndex, (unint64_t)space, v43);
                }
                v44 = 0;
                goto LABEL_133;
              }
              v98 = 0uLL;
              v99 = 0;
              IIODictionary::IIODictionary((IIODictionary *)&v98);
              IIODictionary::setObjectForKey((IIODictionary *)&v98, (const void *)*MEMORY[0x1E0C9AE50], CFSTR("kCGImageMetadataMergeOverwrite"));
              if (IIODictionary::containsKey(RecodeProperties, CFSTR("{MetaData}")))
              {
                v45 = IIODictionary::getObjectForKey(RecodeProperties, CFSTR("{MetaData}"));
                CGImageMetadataMerge((uint64_t)v122, (uint64_t)v45, (IIODictionary *)&v98);
              }
              v46 = (const void *)CGImageMetadataCreateFromLegacyProps(RecodeProperties);
              if (v46)
              {
                CGImageMetadataMerge((uint64_t)v122, (uint64_t)v46, (IIODictionary *)&v98);
                CFRelease(v46);
              }
              v97 = -9985;
              iioWriteCallback(&v97, 2, v88);
              v96 = 0;
              v95 = 65792;
              __ptr = 0x4649464A1000E0FFLL;
              if (IIODictionary::containsKey(RecodeProperties, CFSTR("DPIHeight"))
                && IIODictionary::containsKey(RecodeProperties, CFSTR("DPIWidth")))
              {
                FloatForKey = IIODictionary::getFloatForKey(RecodeProperties, CFSTR("DPIWidth"));
                v48 = IIODictionary::getFloatForKey(RecodeProperties, CFSTR("DPIHeight"));
                v49 = vcvtmd_s64_f64(FloatForKey + 0.5);
                v50 = vcvtmd_s64_f64(v48 + 0.5);
              }
              else
              {
                v49 = 72;
                v50 = 72;
              }
              WORD2(v95) = __rev16(v49);
              HIWORD(v95) = __rev16(v50);
              v96 = 0;
              iioWriteCallback(&__ptr, 18, v88);
              if (v122)
              {
                v53 = (IIODictionary *)CGImagePropertiesCreateFromMetadata(v122);
                v54 = v53;
                if (v53)
                {
                  if ((IIODictionary::containsKey(v53, CFSTR("Orientation")) & 1) == 0
                    && IIODictionary::containsKeyGroup(v54, CFSTR("Orientation"), CFSTR("{TIFF}")))
                  {
                    ObjectForKeyGroup = IIODictionary::getObjectForKeyGroup(v54, CFSTR("Orientation"), CFSTR("{TIFF}"));
                    IIODictionary::setObjectForKey(v54, ObjectForKeyGroup, CFSTR("Orientation"));
                  }
                  IIODictionary::setObjectForKey(v54, v122, CFSTR("{MetaData}"));
                  if (v81)
                  {
                    CGImageMetadataRemoveTagWithPath((CGMutableImageMetadataRef)v122, 0, CFSTR("tiff:Orientation"));
                    IIODictionary::removeObjectForKey(v54, CFSTR("Orientation"));
                    v56 = IIODictionary::getObjectForKey(v54, CFSTR("{TIFF}"));
                    if (v56)
                      CFDictionaryRemoveValue(v56, CFSTR("Orientation"));
                    v38 = 0;
                  }
                  if (RecodeProperties)
                  {
LABEL_90:
                    OptimizeForSharing = IIOImageDestination::GetOptimizeForSharing(RecodeProperties, (IIODictionary *)&v102, v51);
                    if (PixelProviderAtIndex)
                      v58 = 1;
                    else
                      v58 = OptimizeForSharing;
                    if (v58)
                      v59 = 0;
                    else
                      v59 = space;
                    if (!OptimizeForSharing)
                    {
LABEL_112:
                      v44 = 0;
                      InputColorSpaceForOutputPoppyProfile = 0;
LABEL_113:
                      v63 = 1;
                      goto LABEL_114;
                    }
                    if (v102)
                      v59 = v86;
                    else
                      v59 = space;
                    v60 = CGColorSpaceGetModel(v59);
                    if (IIO_CGColorSpaceNameMatchesName(v59, theString2))
                    {
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL AppleJPEG recoding image - original is sRGB -- falling back to sRGB\n");
                      v44 = 0;
                      InputColorSpaceForOutputPoppyProfile = 0;
                      v80 = 1;
                      goto LABEL_113;
                    }
                    if (CGImageIsOptimizedForSharing())
                    {
                      v62 = CGImageGetColorSpace(cf);
                      v59 = (CGColorSpace *)CFRetain(v62);
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL original image is already poppy - not converting\n");
                      goto LABEL_112;
                    }
                    if (v102)
                    {
                      v107 = CGColorSpaceRetain(v86);
                      InputColorSpaceForOutputPoppyProfile = CGColorSpaceRetain(v86);
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL converting to sRGB\n");
                      v44 = 0;
                      v63 = 0;
                      v80 = 1;
LABEL_114:
                      if ((v38 & 1) != 0)
                      {
                        if (InputColorSpaceForOutputPoppyProfile)
                          v64 = (unint64_t)InputColorSpaceForOutputPoppyProfile;
                        else
                          v64 = (unint64_t)v59;
                        JPEGWritePlugin::WriteICCData(v88, PixelProviderAtIndex, v64, v52);
                        if (!InputColorSpaceForOutputPoppyProfile)
                          goto LABEL_130;
                      }
                      else
                      {
                        IIODictionary::removeObjectForKeyGroup(v54, CFSTR("ColorSpace"), CFSTR("{Exif}"));
                        IIONumber::IIONumber((IIONumber *)v93, v80);
                        IIODictionary::setObjectForKeyGroup(v54, (uint64_t)v93, CFSTR("ColorSpace"), CFSTR("{Exif}"));
                        IIONumber::~IIONumber((IIONumber *)v93);
                        if (v87)
                          IIODictionary::setObjectForKey(v54, v87[1], CFSTR("{MakerApple}"));
                        if ((gIIODebugFlags & 0x2000000000000) != 0)
                        {
                          ImageIOLog("%s recode: writing Exif to destination file:\n", "-o- ");
                          if ((gIIODebugFlags & 0x2000000000000) != 0)
                            IIODebugOrientation("IIORecodeAppleJPEG_to_JPEG", 684, v54);
                        }
                        AppleJPEGWritePlugin::WriteExifData(v88, PixelProviderAtIndex, v54, v65);
                        JPEGWritePlugin::WriteExtendedXMPData(v88, v54, v66);
                        JPEGWritePlugin::WriteIPTCData(v88, PixelProviderAtIndex, v54, v67);
                        if (InputColorSpaceForOutputPoppyProfile)
                          v69 = (unint64_t)InputColorSpaceForOutputPoppyProfile;
                        else
                          v69 = (unint64_t)v59;
                        JPEGWritePlugin::WriteICCData(v88, PixelProviderAtIndex, v69, v68);
                        (*(void (**)(IIODictionary *))(*(_QWORD *)v54 + 8))(v54);
                        if (!InputColorSpaceForOutputPoppyProfile)
                        {
LABEL_130:
                          if (v122)
                            CFRelease(v122);
                          v122 = 0;
                          IIODictionary::~IIODictionary((IIODictionary *)&v98);
                          if ((v63 & 1) == 0)
                          {
                            v72 = IIODictionary::getObjectForKey(RecodeProperties, CFSTR("ColorSpace"));
                            ResizeSourceColorSpace = v72;
                            if (v107)
                              v74 = v107;
                            else
                              v74 = v86;
                            if (!v72)
                              ResizeSourceColorSpace = IIOImageDestination::getResizeSourceColorSpace(v91);
                            v42 = 0;
                            if (ResizeSourceColorSpace)
                            {
                              if (v74)
                              {
                                v42 = (IIOColorConverter *)operator new();
                                IIOColorConverter::IIOColorConverter(v42, ResizeSourceColorSpace, v74);
                                if (*((_QWORD *)v42 + 1))
                                {
                                  *((_QWORD *)&v98 + 1) = v42;
                                  *(_QWORD *)&v98 = 1;
                                  v99 = AppleJPEGReadPlugin::ColorConvert;
                                  applejpeg_recode_set_option_converter();
                                }
                              }
                            }
                            goto LABEL_134;
                          }
LABEL_133:
                          v42 = 0;
LABEL_134:
                          *((_QWORD *)&v114 + 1) = iioWriteCallback;
                          *(_QWORD *)&v116 = v88;
                          v70 = applejpeg_recode_all_file();
                          v110 = v70;
                          v41 = v70 == 0;
                          if (v70)
                            ImageIOLog("*** %s: applejpeg_recode_all_file-err=%d\n", "IIORecodeAppleJPEG_to_JPEG", v70);
                          applejpeg_recode_close();
                          if (v44)
                            CFRelease(v44);
                          goto LABEL_138;
                        }
                      }
                      CGColorSpaceRelease(InputColorSpaceForOutputPoppyProfile);
                      goto LABEL_130;
                    }
                    if (v60 != kCGColorSpaceModelRGB)
                    {
                      if (!v107)
                      {
                        if (v60 == kCGColorSpaceModelCMYK)
                        {
                          v107 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D968]);
                          if ((gIIODebugFlags & 0x8000300000) != 0)
                            ImageIOLog("COL AppleJPEG recoding image - GenericCMYK\n");
                        }
                        else if (v60 == kCGColorSpaceModelMonochrome)
                        {
                          v107 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
                          if ((gIIODebugFlags & 0x8000300000) != 0)
                            ImageIOLog("COL AppleJPEG recoding image - GenericGrayGamma2.2\n");
                        }
                      }
                      InputColorSpaceForOutputPoppyProfile = 0;
                      v44 = 0;
                      goto LABEL_188;
                    }
                    if (a2)
                      v75 = (CGImageSource *)IIOImageSource::cf(a2);
                    else
                      v75 = 0;
                    v44 = IIO_CreateOutputPoppyProfileForImage(v75, cf, &v107);
                    if (v107)
                    {
                      InputColorSpaceForOutputPoppyProfile = (CGColorSpace *)IIO_CreateInputColorSpaceForOutputPoppyProfile();
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL AppleJPEG recoding image - using poppy profile\n");
                      if (v107)
                        goto LABEL_188;
                    }
                    else
                    {
                      InputColorSpaceForOutputPoppyProfile = 0;
                    }
                    v76 = CGColorSpaceCopyICCData(space);
                    if (v76
                      && (CanBeIgnoredOnSRGBDevice = ColorSyncDataCanBeIgnoredOnSRGBDevice(),
                          CFRelease(v76),
                          CanBeIgnoredOnSRGBDevice))
                    {
                      v78 = CGImageGetColorSpace(cf);
                      v107 = (CGColorSpaceRef)CFRetain(v78);
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL AppleJPEG recoding image - resizeSourceImage is Poppy -- using that\n");
                    }
                    else
                    {
                      v107 = CGColorSpaceRetain(v86);
                      if ((gIIODebugFlags & 0x8000300000) != 0)
                        ImageIOLog("COL AppleJPEG recoding image - poppyPCSToDeviceColorSpace is nil -- falling back to sRGB\n");
                      v80 = 1;
                    }
LABEL_188:
                    v63 = 0;
                    v59 = v107;
                    goto LABEL_114;
                  }
LABEL_106:
                  v44 = 0;
                  InputColorSpaceForOutputPoppyProfile = 0;
                  if (PixelProviderAtIndex)
                    v59 = 0;
                  else
                    v59 = space;
                  goto LABEL_113;
                }
              }
              else
              {
                v54 = 0;
              }
              v38 = 1;
              if (RecodeProperties)
                goto LABEL_90;
              goto LABEL_106;
            }
            v29 = _cg_jpeg_mem_term("IIORecodeAppleJPEG_to_JPEG", 305, "applejpeg_recode_open_file: err = %d\n", v110);
          }
          v41 = 0;
          v42 = 0;
LABEL_138:
          if (v87)
            (*((void (**)(const void **, __n128))*v87 + 1))(v87, v29);
          goto LABEL_140;
        }
      }
      _cg_jpeg_mem_term("IIORecodeAppleJPEG_to_JPEG", 208, "*** ERROR: cannot get the 'CGImageReadRef' of the source image...");
    }
    v41 = 0;
    v89 = 0;
    v42 = 0;
    RecodeProperties = 0;
LABEL_140:
    CGImageRelease(cf);
    goto LABEL_141;
  }
  _cg_jpeg_mem_term("IIORecodeAppleJPEG_to_JPEG", 180, "*** ERROR: cannot get the source image...");
  v41 = 0;
  v89 = 0;
  v42 = 0;
  RecodeProperties = 0;
LABEL_141:
  if (v107)
    CGColorSpaceRelease(v107);
  if (v42)
    (*(void (**)(IIOColorConverter *))(*(_QWORD *)v42 + 8))(v42);
  if (RecodeProperties)
    (*(void (**)(IIODictionary *))(*(_QWORD *)RecodeProperties + 8))(RecodeProperties);
  if (v89)
    CFRelease(v89);
  if (v122)
    CFRelease(v122);
  CGColorSpaceRelease(v83);
  CGColorSpaceRelease(v86);
  return v41;
}

void sub_18807C39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CGColorSpaceRef space, uint64_t a17, uint64_t a18, CGColorSpaceRef a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38)
{
  IIODictionary::~IIODictionary((IIODictionary *)&a32);
  CGColorSpaceRelease(space);
  CGColorSpaceRelease(a19);
  _Unwind_Resume(a1);
}

uint64_t IIOBitStream::CreateIIOBitStream(IIOBitStream *this, void *a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t result;
  int v7;
  char v8;

  result = 0;
  if (this && a2 && a3)
  {
    v7 = *a3;
    if (v7 == 119)
    {
      result = operator new();
      *(_QWORD *)(result + 16) = this;
      *(_QWORD *)(result + 24) = a2;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)result = &off_1E1BB1528;
      v8 = 8;
      goto LABEL_8;
    }
    if (v7 == 114)
    {
      result = operator new();
      v8 = 0;
      *(_QWORD *)(result + 16) = this;
      *(_QWORD *)(result + 24) = a2;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 8) = 0;
      *(_QWORD *)result = &off_1E1BB14F0;
LABEL_8:
      *(_BYTE *)(result + 9) = v8;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t IIOBitStream::putBits(IIOBitStream *this)
{
  return 4294967292;
}

uint64_t IIOBitStream::getBits(IIOBitStream *this, unsigned __int16 a2, unsigned int *a3)
{
  return 4294967292;
}

uint64_t IIOBitStream::seek(IIOBitStream *this, unint64_t a2)
{
  uint64_t result;

  if (*((_QWORD *)this + 3) <= a2)
    return 0xFFFFFFFFLL;
  result = 0;
  *((_QWORD *)this + 4) = a2;
  return result;
}

void IIOBitStreamReader::~IIOBitStreamReader(IIOBitStreamReader *this)
{
  *(_QWORD *)this = &off_1E1BB14F0;
  *((_WORD *)this + 4) = 0;
}

{
  *(_QWORD *)this = &off_1E1BB14F0;
  *((_WORD *)this + 4) = 0;
  JUMPOUT(0x18D761C30);
}

uint64_t IIOBitStreamReader::getBits(IIOBitStreamReader *this, signed int a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  signed int v6;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t result;

  if (a2 > 0x20)
    return 4294967293;
  v4 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 4);
  if (a2 != 8)
  {
    if (v3 >= v4)
    {
      if (v3 != v4)
        return 0xFFFFFFFFLL;
      v6 = *((char *)this + 9);
      if (a2 > v6)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v6 = *((char *)this + 9);
    }
    v7 = v6;
    if (v6 >= a2)
    {
      v8 = 0;
      v11 = *((unsigned __int8 *)this + 8);
      v10 = a2;
LABEL_18:
      *((_BYTE *)this + 9) = v7 - a2;
      v5 = (v11 >> (v7 - a2)) & ~(-1 << v10) | v8;
      goto LABEL_19;
    }
    v8 = 0;
    if (v3 <= v4)
      v9 = *((_QWORD *)this + 3);
    else
      v9 = *((_QWORD *)this + 4);
    while (v9 != v3)
    {
      LOWORD(a2) = a2 - v7;
      v10 = a2;
      v8 |= (*((unsigned __int8 *)this + 8) & ~(-1 << v6)) << a2;
      v11 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + v3++);
      *((_QWORD *)this + 4) = v3;
      *((_BYTE *)this + 8) = v11;
      LOBYTE(v6) = 8;
      *((_BYTE *)this + 9) = 8;
      v7 = 8;
      if ((unsigned __int16)a2 <= 8u)
        goto LABEL_18;
    }
    return 0xFFFFFFFFLL;
  }
  if (v3 >= v4)
    return 0xFFFFFFFFLL;
  v5 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + v3);
  *((_QWORD *)this + 4) = v3 + 1;
LABEL_19:
  result = 0;
  if (a3)
    *a3 = v5;
  return result;
}

void IIOBitStreamWriter::~IIOBitStreamWriter(IIOBitStreamWriter *this)
{
  *(_QWORD *)this = &off_1E1BB1528;
  if (*((_QWORD *)this + 4) < *((_QWORD *)this + 3))
    IIOBitStreamWriter::putBits(this, 7u, 0);
}

{
  *(_QWORD *)this = &off_1E1BB1528;
  if (*((_QWORD *)this + 4) < *((_QWORD *)this + 3))
    IIOBitStreamWriter::putBits(this, 7u, 0);
  JUMPOUT(0x18D761C30);
}

uint64_t IIOBitStreamWriter::putBits(IIOBitStreamWriter *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  signed int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;

  if (a2 > 0x20)
    return 4294967293;
  v3 = *((_QWORD *)this + 4);
  if (v3 >= *((_QWORD *)this + 3))
    return 0xFFFFFFFFLL;
  v4 = *((char *)this + 9);
  v5 = *((_BYTE *)this + 9);
  if ((int)a2 >= v4)
  {
    v8 = *((_BYTE *)this + 8);
    do
    {
      LOWORD(a2) = a2 - v5;
      v7 = a2;
      *(_BYTE *)(*((_QWORD *)this + 2) + v3) = v8 | (a3 >> a2) & ~(-1 << v4);
      v3 = *((_QWORD *)this + 4) + 1;
      *((_QWORD *)this + 4) = v3;
      *((_BYTE *)this + 8) = 0;
      LOBYTE(v4) = 8;
      v5 = 8;
      v8 = 0;
    }
    while ((unsigned __int16)a2 > 7u);
    v6 = 0;
  }
  else
  {
    v6 = *((_BYTE *)this + 8);
    v7 = a2;
  }
  v9 = 0;
  v10 = v5 - a2;
  *((_BYTE *)this + 9) = v10;
  *((_BYTE *)this + 8) = v6 | ((a3 & ~(-1 << v7)) << v10);
  return v9;
}

uint64_t _cg_TIFFRGBAImageOK(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned __int16 v22;

  if (!*(_DWORD *)(a1 + 944))
  {
    result = 0;
    strcpy(a2, "Sorry, requested compression method is not configured");
    return result;
  }
  v10 = *(unsigned __int16 *)(a1 + 116);
  if (v10 > 0x10 || ((1 << v10) & 0x10116) == 0)
  {
    snprintf(a2, 0x400uLL, "Sorry, can not handle images with %hu-bit samples");
  }
  else
  {
    if (*(_WORD *)(a1 + 118) == 3)
    {
      result = 0;
      strcpy(a2, "Sorry, can not handle images with IEEE floating-point samples");
      return result;
    }
    v22 = 0;
    v13 = *(unsigned __int16 *)(a1 + 130) - *(unsigned __int16 *)(a1 + 212);
    if (_cg_TIFFGetField(a1, 262, a3, a4, a5, a6, a7, a8, (uint64_t)&v22))
    {
      result = 1;
      switch(v22)
      {
        case 0u:
        case 1u:
        case 3u:
          goto LABEL_17;
        case 2u:
          if (v13 > 2)
            return result;
          snprintf(a2, 0x400uLL, "Sorry, can not handle RGB image with %s=%d");
          return 0;
        case 4u:
        case 7u:
          goto LABEL_29;
        case 5u:
          v21 = 0;
          _cg_TIFFGetFieldDefaulted(a1, 332, v14, v15, v16, v17, v18, v19, (uint64_t)&v21);
          if (v21 == 1)
          {
            if (*(unsigned __int16 *)(a1 + 130) > 3u)
              return 1;
            snprintf(a2, 0x400uLL, "Sorry, can not handle separated image with %s=%hu");
          }
          else
          {
            snprintf(a2, 0x400uLL, "Sorry, can not handle separated image with %s=%d");
          }
          return 0;
        case 6u:
          return result;
        case 8u:
          v20 = *(unsigned __int16 *)(a1 + 116);
          if (*(_WORD *)(a1 + 130) == 3 && v13 == 3 && (v20 == 8 || v20 == 16))
            return result;
          snprintf(a2, 0x400uLL, "Sorry, can not handle image with %s=%hu, %s=%d and %s=%hu", "Samples/pixel");
          return 0;
        default:
          if (v22 == 32844)
          {
            if (*(unsigned __int16 *)(a1 + 120) == 34676)
              return 1;
            snprintf(a2, 0x400uLL, "Sorry, LogL data must have %s=%d");
            return 0;
          }
          if (v22 != 32845)
          {
LABEL_29:
            snprintf(a2, 0x400uLL, "Sorry, can not handle image with %s=%hu");
            return 0;
          }
          if ((*(_WORD *)(a1 + 120) & 0xFFFE) != 0x8774)
          {
            snprintf(a2, 0x400uLL, "Sorry, LogLuv data must have %s=%d or %d");
            return 0;
          }
          if (*(_WORD *)(a1 + 170) != 1)
          {
            snprintf(a2, 0x400uLL, "Sorry, can not handle LogLuv images with %s=%hu");
            return 0;
          }
          if (*(_WORD *)(a1 + 130) != 3 || v13 != 3)
          {
            snprintf(a2, 0x400uLL, "Sorry, can not handle image with %s=%hu, %s=%d");
            return 0;
          }
          break;
      }
      return 1;
    }
    if (v13 == 3)
      return 1;
    if (v13 != 1)
    {
      snprintf(a2, 0x400uLL, "Missing needed %s tag");
      return 0;
    }
    v22 = 1;
LABEL_17:
    if (*(_WORD *)(a1 + 170) != 1 || *(_WORD *)(a1 + 130) == 1 || *(unsigned __int16 *)(a1 + 116) > 7u)
      return 1;
    snprintf(a2, 0x400uLL, "Sorry, can not handle contiguous data with %s=%hu, and %s=%hu and Bits/Sample=%hu");
  }
  return 0;
}

void _cg_TIFFRGBAImageEnd(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;

  v2 = *(char **)(a1 + 80);
  if (v2)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v3 = *(char **)(a1 + 88);
  if (v3)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v3);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v4 = *(char **)(a1 + 96);
  if (v4)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v4);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v5 = *(char **)(a1 + 104);
  if (v5)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v5);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v6 = *(char **)(a1 + 112);
  if (v6)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v6);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v7 = *(char **)(a1 + 120);
  if (v7)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v7);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v8 = *(char **)(a1 + 128);
  if (v8)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v8);
    *(_QWORD *)(a1 + 128) = 0;
  }
  v9 = *(char **)(a1 + 40);
  if (v9)
  {
    _TIFFfreeExt(*(_QWORD *)a1, v9);
    _TIFFfreeExt(*(_QWORD *)a1, *(char **)(a1 + 48));
    _TIFFfreeExt(*(_QWORD *)a1, *(char **)(a1 + 56));
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
}

uint64_t _cg_TIFFRGBAImageBegin(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v115;
  int v116;
  int v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float *v157;
  float v158;
  uint64_t v159;
  char *v160;
  __int16 v161;
  const char *v162;
  __int128 v163;
  int v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  float *v181;
  float v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  uint64_t (*v190)(uint64_t, _DWORD *, uint64_t, uint64_t, int, int, int, int, unsigned __int16 *);
  char v191;
  void *__src;
  unsigned __int16 v193;
  int v194;
  _WORD *v195;
  float *v196;
  unsigned int v197[3];
  uint64_t v198;

  v9 = a3;
  v198 = *MEMORY[0x1E0C80C00];
  result = _cg_TIFFRGBAImageOK((uint64_t)a2, (char *)a4, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v195 = 0;
    v194 = 0;
    v193 = 0;
    __src = 0;
    *((_OWORD *)a1 + 5) = 0u;
    a1[6] = 0;
    a1[7] = 0;
    a1[5] = 0;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 8) = 0u;
    *((_WORD *)a1 + 17) = 4;
    *a1 = a2;
    v19 = (_WORD *)a1 + 14;
    *((_DWORD *)a1 + 2) = v9;
    _cg_TIFFGetFieldDefaulted((uint64_t)a2, 258, v13, v14, v15, v16, v17, v18, (uint64_t)a1 + 28);
    v26 = *((unsigned __int16 *)a1 + 14);
    if (v26 > 0x10 || ((1 << v26) & 0x10116) == 0)
    {
      snprintf((char *)a4, 0x400uLL, "Sorry, can not handle images with %hu-bit samples");
      goto LABEL_187;
    }
    *((_DWORD *)a1 + 4) = 0;
    v27 = (_WORD *)a1 + 15;
    _cg_TIFFGetFieldDefaulted((uint64_t)a2, 277, v20, v21, v22, v23, v24, v25, (uint64_t)a1 + 30);
    _cg_TIFFGetFieldDefaulted((uint64_t)a2, 338, v28, v29, v30, v31, v32, v33, (uint64_t)&v194 + 2);
    if (HIWORD(v194))
    {
      v40 = (unsigned __int16)*v195;
      if ((v40 - 1) < 2)
      {
LABEL_9:
        *((_DWORD *)a1 + 4) = v40;
        goto LABEL_10;
      }
      if (!*v195 && (unsigned __int16)*v27 > 3u)
      {
        v40 = 1;
        goto LABEL_9;
      }
    }
LABEL_10:
    v41 = (__int16 *)a1 + 18;
    if (!_cg_TIFFGetField((uint64_t)a2, 262, v34, v35, v36, v37, v38, v39, (uint64_t)a1 + 36))
      *v41 = 0;
    v48 = HIWORD(v194);
    v49 = (unsigned __int16)*v27;
    if (!HIWORD(v194))
    {
      if (v49 == 4 && *v41 == 2)
      {
        v48 = 1;
        *((_DWORD *)a1 + 4) = 1;
        HIWORD(v194) = 1;
      }
      else
      {
        v48 = 0;
      }
    }
    v50 = v49 - v48;
    _cg_TIFFGetFieldDefaulted((uint64_t)a2, 259, v42, v43, v44, v45, v46, v47, (uint64_t)&v193);
    _cg_TIFFGetFieldDefaulted((uint64_t)a2, 284, v51, v52, v53, v54, v55, v56, (uint64_t)&v194);
    if (_cg_TIFFGetField((uint64_t)a2, 262, v57, v58, v59, v60, v61, v62, (uint64_t)a1 + 36))
    {
      v69 = (unsigned __int16)*v41;
      switch(*v41)
      {
        case 0:
        case 1:
          goto LABEL_26;
        case 2:
          if (v50 > 2)
            goto LABEL_49;
          snprintf((char *)a4, 0x400uLL, "Sorry, can not handle RGB image with %s=%d");
          goto LABEL_187;
        case 3:
          if (_cg_TIFFGetField((uint64_t)a2, 320, v63, v64, v65, v66, v67, v68, (uint64_t)&__src))
          {
            v76 = *((_WORD *)a1 + 14);
            v77 = 2 * (1 << v76);
            a1[5] = _TIFFmallocExt(a2, v77, v70, v71, v72, v73, v74, v75);
            a1[6] = _TIFFmallocExt(a2, v77, v78, v79, v80, v81, v82, v83);
            v90 = _TIFFmallocExt(a2, v77, v84, v85, v86, v87, v88, v89);
            a1[7] = v90;
            v91 = a1[5];
            if (v91 && a1[6] && v90)
            {
              v92 = 2 << v76;
              _TIFFmemcpy(v91, __src, v92);
              _TIFFmemcpy(a1[6], 0, v92);
              _TIFFmemcpy(a1[7], 0, v92);
              goto LABEL_26;
            }
            v162 = "Out of memory for colormap copy";
          }
          else
          {
            v162 = "Missing required \"Colormap\" tag";
          }
          v163 = *((_OWORD *)v162 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v162;
          *(_OWORD *)(a4 + 16) = v163;
          goto LABEL_187;
        case 4:
        case 7:
          goto LABEL_36;
        case 5:
          LOWORD(v197[0]) = 0;
          _cg_TIFFGetFieldDefaulted((uint64_t)a2, 332, v63, v64, v65, v66, v67, v68, (uint64_t)v197);
          if (LOWORD(v197[0]) == 1 && (unsigned __int16)*v27 > 3u)
            goto LABEL_49;
          snprintf((char *)a4, 0x400uLL, "Sorry, can not handle separated image with %s=%hu");
          goto LABEL_187;
        case 6:
          if ((unsigned __int16)v194 != 1 || v193 != 7)
            goto LABEL_49;
          _cg_TIFFSetField((uint64_t)a2, 65538, v63, v64, v65, v66, v67, v68, 1);
          goto LABEL_48;
        case 8:
          goto LABEL_49;
        default:
          if (v69 == 32844)
          {
            if (v193 != 34676)
            {
              snprintf((char *)a4, 0x400uLL, "Sorry, LogL data must have %s=%d");
              goto LABEL_187;
            }
            _cg_TIFFSetField((uint64_t)a2, 65560, v63, v64, v65, v66, v67, v68, 3);
            v161 = 1;
          }
          else
          {
            if (v69 != 32845)
            {
LABEL_36:
              snprintf((char *)a4, 0x400uLL, "Sorry, can not handle image with %s=%hu");
              goto LABEL_187;
            }
            if ((unsigned __int16)(v193 + 30858) <= 0xFFFDu)
            {
              snprintf((char *)a4, 0x400uLL, "Sorry, LogLuv data must have %s=%d or %d");
              goto LABEL_187;
            }
            if ((unsigned __int16)v194 != 1)
            {
              snprintf((char *)a4, 0x400uLL, "Sorry, can not handle LogLuv images with %s=%hu", "Planarconfiguration", (unsigned __int16)v194);
              return 0;
            }
            _cg_TIFFSetField((uint64_t)a2, 65560, v63, v64, v65, v66, v67, v68, 3);
            v161 = 2;
          }
          *v41 = v161;
          *v19 = 8;
          goto LABEL_49;
      }
    }
    if (v50 == 3)
    {
LABEL_48:
      *v41 = 2;
LABEL_49:
      _cg_TIFFGetField((uint64_t)a2, 256, v63, v64, v65, v66, v67, v68, (uint64_t)a1 + 20);
      _cg_TIFFGetField((uint64_t)a2, 257, v93, v94, v95, v96, v97, v98, (uint64_t)(a1 + 3));
      _cg_TIFFGetFieldDefaulted((uint64_t)a2, 274, v99, v100, v101, v102, v103, v104, (uint64_t)(a1 + 4));
      if ((unsigned __int16)v194 == 2)
      {
        v105 = *((unsigned __int16 *)a1 + 15);
        *((_DWORD *)a1 + 3) = v105 < 2;
        if (v105 >= 2)
        {
          v106 = _cg_TIFFIsTiled((uint64_t)*a1);
          v114 = gtTileSeparate;
          if (!v106)
            v114 = gtStripSeparate;
          a1[8] = v114;
          a1[9] = 0;
          v115 = *((unsigned __int16 *)a1 + 18);
          if (v115 >= 3)
          {
            if (v115 == 5)
            {
              if (*v19 != 8 || *v27 != 4)
                goto LABEL_183;
              *((_DWORD *)a1 + 4) = 1;
              v118 = putCMYKseparate8bittile;
            }
            else
            {
              if (v115 != 6)
              {
LABEL_186:
                strcpy((char *)a4, "Sorry, can not handle image");
                goto LABEL_187;
              }
              if (*v19 != 8)
                goto LABEL_183;
              if (*v27 != 3)
                goto LABEL_183;
              if (!initYCbCrConversion((uint64_t *)a1, v107, v108, v109, v110, v111, v112, v113))
                goto LABEL_183;
              LOWORD(v197[0]) = 0;
              LOWORD(v196) = 0;
              _cg_TIFFGetFieldDefaulted((uint64_t)*a1, 530, v128, v129, v130, v131, v132, v133, (uint64_t)v197);
              if (((unsigned __int16)v196 | (16 * LOWORD(v197[0]))) != 0x11)
                goto LABEL_183;
              v118 = putseparate8bitYCbCr11tile;
            }
          }
          else
          {
            v116 = (unsigned __int16)*v19;
            if (v116 != 16)
            {
              if (v116 == 8)
              {
                v117 = *((_DWORD *)a1 + 4);
                if (v117 != 2)
                {
                  if (v117 == 1)
                    v118 = putRGBAAseparate8bittile;
                  else
                    v118 = putRGBseparate8bittile;
                  goto LABEL_182;
                }
                if (BuildMapUaToAa((uint64_t *)a1, v107, v108, v109, v110, v111, v112, v113))
                {
                  v118 = putRGBUAseparate8bittile;
                  goto LABEL_182;
                }
              }
LABEL_183:
              if (a1[8] && a1[9])
                return 1;
              goto LABEL_186;
            }
            v164 = *((_DWORD *)a1 + 4);
            if (v164 == 2)
            {
              if (BuildMapBitdepth16To8((uint64_t *)a1, v107, v108, v109, v110, v111, v112, v113)
                && BuildMapUaToAa((uint64_t *)a1, v174, v175, v176, v177, v178, v179, v180))
              {
                v118 = putRGBUAseparate16bittile;
                goto LABEL_182;
              }
              goto LABEL_183;
            }
            if (v164 != 1)
            {
              if (BuildMapBitdepth16To8((uint64_t *)a1, v107, v108, v109, v110, v111, v112, v113))
              {
                v118 = putRGBseparate16bittile;
                goto LABEL_182;
              }
              goto LABEL_183;
            }
            if (!BuildMapBitdepth16To8((uint64_t *)a1, v107, v108, v109, v110, v111, v112, v113))
              goto LABEL_183;
            v118 = putRGBAAseparate16bittile;
          }
LABEL_182:
          a1[9] = v118;
          goto LABEL_183;
        }
      }
      else
      {
        *((_DWORD *)a1 + 3) = 1;
      }
      v119 = _cg_TIFFIsTiled((uint64_t)*a1);
      v127 = gtTileContig;
      if (!v119)
        v127 = gtStripContig;
      a1[8] = v127;
      a1[9] = 0;
      switch(*((_WORD *)a1 + 18))
      {
        case 0:
        case 1:
          if (!buildMap(a1, v120, v121, v122, v123, v124, v125, v126))
            goto LABEL_183;
          switch(*v19)
          {
            case 1:
              v118 = put1bitbwtile;
              goto LABEL_182;
            case 2:
              v118 = put2bitbwtile;
              goto LABEL_182;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_183;
            case 4:
              v118 = put4bitbwtile;
              goto LABEL_182;
            case 8:
              if (*((_DWORD *)a1 + 4) && *v27 == 2)
                v118 = putagreytile;
              else
                v118 = putgreytile;
              goto LABEL_182;
            default:
              if (*v19 != 16)
                goto LABEL_183;
              v118 = put16bitbwtile;
              break;
          }
          goto LABEL_182;
        case 2:
          v134 = (unsigned __int16)*v19;
          if (v134 != 16)
          {
            if (v134 != 8)
              goto LABEL_183;
            v135 = *((_DWORD *)a1 + 4);
            if (v135 == 1)
            {
              v136 = (unsigned __int16)*v27;
              if (v136 >= 4)
              {
                v118 = putRGBAAcontig8bittile;
                goto LABEL_182;
              }
            }
            else if (v135 == 2)
            {
              v136 = (unsigned __int16)*v27;
              if (v136 >= 4)
              {
                if (!BuildMapUaToAa((uint64_t *)a1, v120, v121, v122, v123, v124, v125, v126))
                  goto LABEL_183;
                v118 = putRGBUAcontig8bittile;
                goto LABEL_182;
              }
            }
            else
            {
              v136 = (unsigned __int16)*v27;
            }
            if (v136 < 3)
              goto LABEL_183;
            v118 = putRGBcontig8bittile;
            goto LABEL_182;
          }
          v165 = *((_DWORD *)a1 + 4);
          if (v165 == 1)
          {
            v166 = (unsigned __int16)*v27;
            if (v166 >= 4)
            {
              if (!BuildMapBitdepth16To8((uint64_t *)a1, v120, v121, v122, v123, v124, v125, v126))
                goto LABEL_183;
              v118 = putRGBAAcontig16bittile;
              goto LABEL_182;
            }
          }
          else if (v165 == 2)
          {
            v166 = (unsigned __int16)*v27;
            if (v166 >= 4)
            {
              if (BuildMapBitdepth16To8((uint64_t *)a1, v120, v121, v122, v123, v124, v125, v126)
                && BuildMapUaToAa((uint64_t *)a1, v167, v168, v169, v170, v171, v172, v173))
              {
                v118 = putRGBUAcontig16bittile;
                goto LABEL_182;
              }
              goto LABEL_183;
            }
          }
          else
          {
            v166 = (unsigned __int16)*v27;
          }
          if (v166 >= 3 && BuildMapBitdepth16To8((uint64_t *)a1, v120, v121, v122, v123, v124, v125, v126))
          {
            v118 = putRGBcontig16bittile;
            goto LABEL_182;
          }
          goto LABEL_183;
        case 3:
          if (buildMap(a1, v120, v121, v122, v123, v124, v125, v126))
          {
            switch(*v19)
            {
              case 1:
                v118 = put1bitcmaptile;
                goto LABEL_182;
              case 2:
                v118 = put2bitcmaptile;
                goto LABEL_182;
              case 4:
                v118 = put4bitcmaptile;
                goto LABEL_182;
              case 8:
                v118 = put8bitcmaptile;
                goto LABEL_182;
              default:
                goto LABEL_183;
            }
          }
          goto LABEL_183;
        case 5:
          if ((unsigned __int16)*v27 < 4u
            || !buildMap(a1, v120, v121, v122, v123, v124, v125, v126)
            || *v19 != 8)
          {
            goto LABEL_183;
          }
          if (a1[10])
            v118 = putRGBcontig8bitCMYKMaptile;
          else
            v118 = putRGBcontig8bitCMYKtile;
          goto LABEL_182;
        case 6:
          if (*v19 != 8 || *v27 != 3 || !initYCbCrConversion((uint64_t *)a1, v120, v121, v122, v123, v124, v125, v126))
            goto LABEL_183;
          LOWORD(v197[0]) = 0;
          LOWORD(v196) = 0;
          _cg_TIFFGetFieldDefaulted((uint64_t)*a1, 530, v137, v138, v139, v140, v141, v142, (uint64_t)v197);
          v143 = (unsigned __int16)v196 | (16 * LOWORD(v197[0]));
          if (v143 <= 33)
          {
            switch(v143)
            {
              case 17:
                v118 = putcontig8bitYCbCr11tile;
                break;
              case 18:
                v118 = putcontig8bitYCbCr12tile;
                break;
              case 33:
                v118 = putcontig8bitYCbCr21tile;
                break;
              default:
                goto LABEL_183;
            }
          }
          else if (v143 > 65)
          {
            if (v143 == 68)
            {
              v118 = putcontig8bitYCbCr44tile;
            }
            else
            {
              if (v143 != 66)
                goto LABEL_183;
              v118 = putcontig8bitYCbCr42tile;
            }
          }
          else if (v143 == 34)
          {
            v118 = putcontig8bitYCbCr22tile;
          }
          else
          {
            if (v143 != 65)
              goto LABEL_183;
            v118 = putcontig8bitYCbCr41tile;
          }
          goto LABEL_182;
        case 8:
          if (*v27 != 3)
            goto LABEL_183;
          if (!buildMap(a1, v120, v121, v122, v123, v124, v125, v126))
            goto LABEL_183;
          v150 = (unsigned __int16)*v19;
          if (v150 != 16 && v150 != 8)
            goto LABEL_183;
          v196 = 0;
          _cg_TIFFGetFieldDefaulted((uint64_t)*a1, 318, v144, v145, v146, v147, v148, v149, (uint64_t)&v196);
          v157 = v196;
          v158 = v196[1];
          if (v158 == 0.0)
          {
            v159 = (uint64_t)*a1;
            v160 = "Invalid value for WhitePoint tag.";
LABEL_102:
            TIFFErrorExtR(v159, "initCIELabConversion", v160, v152, v153, v154, v155, v156, v191);
            goto LABEL_103;
          }
          v181 = (float *)a1[14];
          if (!v181)
          {
            v181 = (float *)_TIFFmallocExt(*a1, 18124, v151, v152, v153, v154, v155, v156);
            a1[14] = v181;
            if (!v181)
            {
              v159 = (uint64_t)*a1;
              v160 = "No space for CIE L*a*b*->RGB conversion state.";
              goto LABEL_102;
            }
            v157 = v196;
            v158 = v196[1];
          }
          v197[1] = 1120403456;
          v182 = (float)(*v157 / v158) * 100.0;
          *(float *)&v183 = (float)((float)((float)(1.0 - *v157) - v158) / v158) * 100.0;
          *(float *)v197 = v182;
          v197[2] = v183;
          if ((TIFFCIELabToRGBInit(v181, &display_sRGB, v197) & 0x80000000) == 0)
          {
            v189 = (unsigned __int16)*v19;
            v190 = putcontig8bitCIELab16;
            if (v189 != 16)
              v190 = 0;
            if (v189 == 8)
              v118 = putcontig8bitCIELab8;
            else
              v118 = v190;
            goto LABEL_182;
          }
          TIFFErrorExtR((uint64_t)*a1, "initCIELabConversion", "Failed to initialize CIE L*a*b*->RGB conversion state.", v184, v185, v186, v187, v188, v191);
          _TIFFfreeExt((uint64_t)*a1, (char *)a1[14]);
LABEL_103:
          v118 = 0;
          goto LABEL_182;
        default:
          goto LABEL_186;
      }
    }
    if (v50 != 1)
    {
      snprintf((char *)a4, 0x400uLL, "Missing needed %s tag");
      goto LABEL_187;
    }
    LOWORD(v197[0]) = 0;
    _cg_TIFFGetField((uint64_t)a2, 259, v63, v64, v65, v66, v67, v68, (uint64_t)v197);
    *v41 = LOWORD(v197[0]) - 2 >= 3 && LOWORD(v197[0]) != 32771;
LABEL_26:
    if ((unsigned __int16)v194 == 1 && *v27 != 1 && (unsigned __int16)*v19 <= 7u)
    {
      snprintf((char *)a4, 0x400uLL, "Sorry, can not handle contiguous data with %s=%hu, and %s=%hu and Bits/Sample=%hu");
LABEL_187:
      _cg_TIFFRGBAImageEnd((uint64_t)a1);
      return 0;
    }
    goto LABEL_49;
  }
  return result;
}

uint64_t _cg_TIFFRGBAImageGet(uint64_t *a1)
{
  uint64_t (*v1)(void);
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;

  v1 = (uint64_t (*)(void))a1[8];
  if (v1)
  {
    if (a1[9])
      return v1();
    v3 = *a1;
    v4 = (const char *)TIFFFileName(*a1);
    v10 = "No \"put\" routine setupl; probably can not handle image format";
  }
  else
  {
    v3 = *a1;
    v4 = (const char *)TIFFFileName(*a1);
    v10 = "No \"get\" routine setup";
  }
  TIFFErrorExtR(v3, v4, v10, v5, v6, v7, v8, v9, v11);
  return 0;
}

uint64_t _cg_TIFFReadRGBAImageOriented(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35[1024];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  bzero(v35, 0x400uLL);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  if (_cg_TIFFRGBAImageOK((uint64_t)a1, v35, v9, v10, v11, v12, v13, v14)
    && _cg_TIFFRGBAImageBegin((_QWORD **)v27, a1, a6, (uint64_t)v35, v15, v16, v17, v18))
  {
    WORD1(v28) = a5;
    v19 = _cg_TIFFRGBAImageGet((uint64_t *)v27);
    _cg_TIFFRGBAImageEnd((uint64_t)v27);
  }
  else
  {
    v20 = (const char *)TIFFFileName((uint64_t)a1);
    TIFFErrorExtR((uint64_t)a1, v20, "%s", v21, v22, v23, v24, v25, (char)v35);
    return 0;
  }
  return v19;
}

uint64_t gtTileContig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v65;
  unsigned int v66;
  uint64_t i;
  unint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  void (*v81)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, char *);
  uint64_t v82;
  unsigned int v83;
  char *v85;
  uint64_t v86;

  v8 = a4;
  v9 = a3;
  v85 = 0;
  v11 = *(_QWORD *)a1;
  v81 = *(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, char *))(a1 + 72);
  v82 = _cg_TIFFTileSize(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v82)
  {
    v28 = (const char *)TIFFFileName(v11);
    v34 = "No space for tile buffer";
LABEL_35:
    TIFFErrorExtR(v11, v28, "%s", v29, v30, v31, v32, v33, (char)v34);
    return 0;
  }
  v86 = 0;
  _cg_TIFFGetField(v11, 322, v12, v13, v14, v15, v16, v17, (uint64_t)&v86 + 4);
  _cg_TIFFGetField(v11, 323, v18, v19, v20, v21, v22, v23, (uint64_t)&v86);
  v24 = setorientation(a1);
  v26 = v24;
  if ((v24 & 1) != 0)
  {
    if ((int)(HIDWORD(v86) + v9) >= 0)
    {
      v83 = v8 - 1;
      v27 = -(HIDWORD(v86) + v9);
      goto LABEL_8;
    }
    goto LABEL_34;
  }
  if (HIDWORD(v86) > v9 + 0x7FFFFFFF)
  {
LABEL_34:
    v28 = (const char *)TIFFFileName(v11);
    v34 = "unsupported tile size (too wide)";
    goto LABEL_35;
  }
  v83 = 0;
  v27 = v9 - HIDWORD(v86);
LABEL_8:
  v79 = v27;
  if (!HIDWORD(v86) || !(_DWORD)v86)
  {
    v58 = (const char *)TIFFFileName(v11);
    TIFFErrorExtR(v11, v58, "tile width or height is zero", v59, v60, v61, v62, v63, v73);
    return 0;
  }
  if (v8)
  {
    v35 = 0;
    v36 = *(_DWORD *)(a1 + 140) % HIDWORD(v86);
    v75 = HIDWORD(v86) - v36;
    v76 = v36;
    v74 = v36 + v79;
    v77 = v24;
    v78 = v8;
    while (1)
    {
      v37 = v86 + (*(_DWORD *)(a1 + 136) + v35) / v86 * v86 - (*(_DWORD *)(a1 + 136) + v35);
      if (v86 + (*(_DWORD *)(a1 + 136) + v35) / v86 * (_DWORD)v86 - *(_DWORD *)(a1 + 136) > v8)
        v37 = v8 - v35;
      v80 = v37;
      if (v9)
        break;
LABEL_29:
      v26 = v77;
      v8 = v78;
      if ((v77 & 1) != 0)
        v56 = -v80;
      else
        v56 = v80;
      v83 += v56;
      v35 += v80;
      if (v35 >= v78)
      {
        v57 = 1;
        goto LABEL_40;
      }
    }
    v38 = 0;
    v39 = *(unsigned int *)(a1 + 140);
    v40 = v74;
    LODWORD(v41) = v75;
    v42 = v76;
    while (_TIFFReadTileAndAllocBuffer(v11, (unsigned __int8 **)&v85, v82, v39, *(_DWORD *)(a1 + 136) + v35, 0, 0, v25) != -1|| v85 && !*(_DWORD *)(a1 + 8))
    {
      v50 = (*(_DWORD *)(a1 + 136) + v35) % v86;
      v51 = _cg_TIFFTileRowSize(v11, v43, v44, v45, v46, v47, v48, v49) * v50
          + *(unsigned __int16 *)(a1 + 30) * (uint64_t)v42;
      v52 = v38 + v41;
      v53 = HIDWORD(v86) - (v9 - v38);
      if ((int)v38 + (int)v41 <= v9)
        v54 = v42;
      else
        v54 = v53;
      if (v52 <= v9)
        v41 = v41;
      else
        v41 = v9 - v38;
      if (v52 <= v9)
        v55 = v40;
      else
        v55 = v53 + v79;
      v81(a1, a2 + 4 * (v9 * (unint64_t)v83 + v38), v38, v83, v41, v80, v54, v55, &v85[v51]);
      v42 = 0;
      v38 = (v41 + v38);
      v39 = (v41 + v39);
      LODWORD(v41) = HIDWORD(v86);
      v40 = v79;
      if (v38 >= v9)
        goto LABEL_29;
    }
    v57 = 0;
    v26 = v77;
    v8 = v78;
LABEL_40:
    v65 = v85;
  }
  else
  {
    v65 = 0;
    v57 = 1;
  }
  _TIFFfreeExt(*(_QWORD *)a1, v65);
  if (v26 >= 2 && v8)
  {
    v66 = 0;
    for (i = 0; i != v8; ++i)
    {
      v68 = a2 + 4 * i * v9;
      v69 = (_DWORD *)(v68 + 4 * v9 - 4);
      if (v68 < (unint64_t)v69)
      {
        v70 = a2 + 4 + 4 * v66;
        do
        {
          v71 = *(_DWORD *)(v70 - 4);
          *(_DWORD *)(v70 - 4) = *v69;
          *v69-- = v71;
          v72 = v70 >= (unint64_t)v69;
          v70 += 4;
        }
        while (!v72);
      }
      v66 += v9;
    }
  }
  return v57;
}

uint64_t gtStripContig(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  _DWORD v17[2];
  void *v18;

  v8 = *a1;
  v18 = 0;
  HIWORD(v17[0]) = 0;
  v17[1] = 0;
  _cg_TIFFGetFieldDefaulted(v8, 530, a3, a4, a5, a6, a7, a8, (uint64_t)v17 + 2);
  v9 = (const char *)TIFFFileName(v8);
  TIFFErrorExtR(v8, v9, "Invalid vertical YCbCr subsampling", v10, v11, v12, v13, v14, v16);
  return 0;
}

uint64_t putRGBAAcontig8bittile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, _DWORD *a9)
{
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    do
    {
      v11 = a5;
      if (a5 >= 8)
      {
        do
        {
          *a2 = *a9;
          v12 = (_DWORD *)((char *)a9 + v10);
          a2[1] = *v12;
          v13 = (_DWORD *)((char *)v12 + v10);
          a2[2] = *v13;
          v14 = (_DWORD *)((char *)v13 + v10);
          a2[3] = *v14;
          v15 = (_DWORD *)((char *)v14 + v10);
          a2[4] = *v15;
          v16 = (_DWORD *)((char *)v15 + v10);
          a2[5] = *v16;
          v17 = (_DWORD *)((char *)v16 + v10);
          a2[6] = *v17;
          v18 = (_DWORD *)((char *)v17 + v10);
          v19 = a2 + 8;
          a2[7] = *v18;
          a9 = (_DWORD *)((char *)v18 + v10);
          v11 -= 8;
          a2 += 8;
        }
        while (v11 > 7);
        a2 = v19;
      }
      switch(v11)
      {
        case 1u:
          goto LABEL_13;
        case 2u:
          goto LABEL_12;
        case 3u:
          goto LABEL_11;
        case 4u:
          goto LABEL_10;
        case 5u:
          goto LABEL_9;
        case 6u:
          goto LABEL_8;
        case 7u:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_8:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_9:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_10:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_11:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_12:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
LABEL_13:
          *a2++ = *a9;
          a9 = (_DWORD *)((char *)a9 + v10);
          break;
        default:
          break;
      }
      a2 += a8;
      a9 = (_DWORD *)((char *)a9 + v10 * a7);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t BuildMapUaToAa(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  int16x8_t v23;
  char v25;

  if (a1[15])
    BuildMapUaToAa_cold_1();
  v9 = _TIFFmallocExt((_QWORD *)*a1, 0x10000, a3, a4, a5, a6, a7, a8);
  a1[15] = (uint64_t)v9;
  if (v9)
  {
    v15 = 0;
    v16 = (uint32x4_t)vdupq_n_s32(0x80808081);
    v17.i64[0] = 0x400000004;
    v17.i64[1] = 0x400000004;
    do
    {
      v18 = 0;
      v19 = vdupq_n_s32(v15);
      v20 = (int32x4_t)xmmword_18820BF90;
      do
      {
        v21.i64[0] = 0x7F0000007FLL;
        v21.i64[1] = 0x7F0000007FLL;
        v22 = (uint32x4_t)vmlaq_s32(v21, v19, v20);
        v23 = (int16x8_t)vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v22.i8, *(uint32x2_t *)v16.i8), (int32x4_t)vmull_high_u32(v22, v16));
        *(uint16x4_t *)v23.i8 = vshr_n_u16((uint16x4_t)vmovn_s32((int32x4_t)v23), 7uLL);
        *(_DWORD *)((char *)v9 + v18) = vmovn_s16(v23).u32[0];
        v18 += 4;
        v20 = vaddq_s32(v20, v17);
      }
      while (v18 != 256);
      ++v15;
      v9 += 32;
    }
    while (v15 != 256);
    return 1;
  }
  else
  {
    TIFFErrorExtR(*a1, "BuildMapUaToAa", "Out of memory", v10, v11, v12, v13, v14, v25);
    return 0;
  }
}

uint64_t putRGBUAcontig8bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    do
    {
      if (a5)
      {
        v11 = *(_QWORD *)(result + 120);
        v12 = a5;
        do
        {
          v13 = v11 + ((unint64_t)a9[3] << 8);
          *a2++ = *(unsigned __int8 *)(v13 + *a9) | (a9[3] << 24) | (*(unsigned __int8 *)(v13 + a9[1]) << 8) | (*(unsigned __int8 *)(v13 + a9[2]) << 16);
          a9 += v10;
          --v12;
        }
        while (v12);
      }
      a2 += a8;
      a9 += v10 * a7;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putRGBcontig8bittile(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  uint64_t v10;
  unsigned int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned int *v19;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    do
    {
      v11 = a5;
      if (a5 >= 8)
      {
        do
        {
          *a2 = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          v12 = (unsigned __int16 *)((char *)a9 + v10);
          a2[1] = *v12 | (*((unsigned __int8 *)v12 + 2) << 16) | 0xFF000000;
          v13 = (unsigned __int16 *)((char *)v12 + v10);
          a2[2] = *v13 | (*((unsigned __int8 *)v13 + 2) << 16) | 0xFF000000;
          v14 = (unsigned __int16 *)((char *)v13 + v10);
          a2[3] = *v14 | (*((unsigned __int8 *)v14 + 2) << 16) | 0xFF000000;
          v15 = (unsigned __int16 *)((char *)v14 + v10);
          a2[4] = *v15 | (*((unsigned __int8 *)v15 + 2) << 16) | 0xFF000000;
          v16 = (unsigned __int16 *)((char *)v15 + v10);
          a2[5] = *v16 | (*((unsigned __int8 *)v16 + 2) << 16) | 0xFF000000;
          v17 = (unsigned __int16 *)((char *)v16 + v10);
          a2[6] = *v17 | (*((unsigned __int8 *)v17 + 2) << 16) | 0xFF000000;
          v18 = (unsigned __int16 *)((char *)v17 + v10);
          v19 = a2 + 8;
          a2[7] = *v18 | (*((unsigned __int8 *)v18 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)v18 + v10);
          v11 -= 8;
          a2 += 8;
        }
        while (v11 > 7);
        a2 = v19;
      }
      switch(v11)
      {
        case 1u:
          goto LABEL_13;
        case 2u:
          goto LABEL_12;
        case 3u:
          goto LABEL_11;
        case 4u:
          goto LABEL_10;
        case 5u:
          goto LABEL_9;
        case 6u:
          goto LABEL_8;
        case 7u:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_8:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_9:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_10:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_11:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_12:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
LABEL_13:
          *a2++ = *a9 | (*((unsigned __int8 *)a9 + 2) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v10);
          break;
        default:
          break;
      }
      a2 += a8;
      a9 = (unsigned __int16 *)((char *)a9 + v10 * a7);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t BuildMapBitdepth16To8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint32x4_t v18;
  int32x4_t v19;
  uint32x4_t v20;
  int16x8_t v21;
  char v23;

  if (a1[16])
    BuildMapBitdepth16To8_cold_1();
  v9 = _TIFFmallocExt((_QWORD *)*a1, 0x10000, a3, a4, a5, a6, a7, a8);
  a1[16] = (uint64_t)v9;
  if (v9)
  {
    v15 = 0;
    v16 = (int32x4_t)xmmword_18820BF90;
    v17.i64[0] = 0x8000000080;
    v17.i64[1] = 0x8000000080;
    v18 = (uint32x4_t)vdupq_n_s32(0xFF00FF01);
    v19.i64[0] = 0x400000004;
    v19.i64[1] = 0x400000004;
    do
    {
      v20 = (uint32x4_t)vaddq_s32(v16, v17);
      v21 = (int16x8_t)vuzp2q_s32((int32x4_t)vmull_u32(*(uint32x2_t *)v20.i8, *(uint32x2_t *)v18.i8), (int32x4_t)vmull_high_u32(v20, v18));
      *(uint16x4_t *)v21.i8 = vshr_n_u16((uint16x4_t)vmovn_s32((int32x4_t)v21), 8uLL);
      *(_DWORD *)((char *)v9 + v15) = vmovn_s16(v21).u32[0];
      v15 += 4;
      v16 = vaddq_s32(v16, v19);
    }
    while (v15 != 0x10000);
    return 1;
  }
  else
  {
    TIFFErrorExtR(*a1, "BuildMapBitdepth16To8", "Out of memory", v10, v11, v12, v13, v14, v23);
    return 0;
  }
}

uint64_t putRGBAAcontig16bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    v11 = (int)v10 * a7;
    v12 = 2 * v10;
    do
    {
      if (a5)
      {
        v13 = *(_QWORD *)(result + 128);
        v14 = a5;
        do
        {
          *a2++ = *(unsigned __int8 *)(v13 + *a9) | (*(unsigned __int8 *)(v13 + a9[1]) << 8) | (*(unsigned __int8 *)(v13 + a9[2]) << 16) | (*(unsigned __int8 *)(v13 + a9[3]) << 24);
          a9 = (unsigned __int16 *)((char *)a9 + v12);
          --v14;
        }
        while (v14);
      }
      a2 += a8;
      a9 += v11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putRGBUAcontig16bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    v11 = (int)v10 * a7;
    v12 = 2 * v10;
    do
    {
      if (a5)
      {
        v14 = *(_QWORD *)(result + 120);
        v13 = *(_QWORD *)(result + 128);
        v15 = a5;
        do
        {
          v16 = v14 + ((unint64_t)*(unsigned __int8 *)(v13 + a9[3]) << 8);
          *a2++ = *(unsigned __int8 *)(v16 + *(unsigned __int8 *)(v13 + *a9)) | (*(unsigned __int8 *)(v13 + a9[3]) << 24) | (*(unsigned __int8 *)(v16 + *(unsigned __int8 *)(v13 + a9[1])) << 8) | (*(unsigned __int8 *)(v16 + *(unsigned __int8 *)(v13 + a9[2])) << 16);
          a9 = (unsigned __int16 *)((char *)a9 + v12);
          --v15;
        }
        while (v15);
      }
      a2 += a8;
      a9 += v11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putRGBcontig16bittile(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    v11 = (int)v10 * a7;
    v12 = 2 * v10;
    do
    {
      if (a5)
      {
        v13 = *(_QWORD *)(result + 128);
        v14 = a5;
        do
        {
          *a2++ = *(unsigned __int8 *)(v13 + *a9) | (*(unsigned __int8 *)(v13 + a9[1]) << 8) | (*(unsigned __int8 *)(v13 + a9[2]) << 16) | 0xFF000000;
          a9 = (unsigned __int16 *)((char *)a9 + v12);
          --v14;
        }
        while (v14);
      }
      a2 += a8;
      a9 += v11;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t buildMap(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unsigned int *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  unint64_t v81;
  unsigned int *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int *v102;
  uint64_t v103;
  char v104;

  v9 = *((unsigned __int16 *)a1 + 18);
  result = 1;
  if (v9 <= 6)
  {
    if (((1 << v9) & 0x64) != 0)
    {
      if (*((_WORD *)a1 + 14) == 8)
        return result;
    }
    else if (((1 << v9) & 3) == 0)
    {
      if (v9 != 3)
        return result;
      v11 = *((_WORD *)a1 + 14);
      v12 = 1 << v11;
      v13 = (unsigned __int16 *)a1[5];
      v14 = (unsigned __int16 *)a1[6];
      v15 = (unsigned __int16 *)a1[7];
      do
      {
        if (v12-- < 1)
        {
          v69 = (uint64_t)*a1;
          v70 = (const char *)TIFFFileName((uint64_t)*a1);
          TIFFWarningExtR(v69, v70, "Assuming 8-bit colormap", v71, v72, v73, v74, v75, v104);
          goto LABEL_45;
        }
        v17 = *v13++;
        if (v17 > 0xFF)
          break;
        if (*v14 > 0xFFu)
          break;
        ++v14;
        v18 = *v15++;
      }
      while (v18 < 0x100);
      v19 = -(-1 << v11);
      v20 = (uint64_t)a1[7] - 2;
      v21 = (uint64_t)a1[6] - 2;
      v22 = (uint64_t)a1[5] - 2;
      do
      {
        *(_WORD *)(v22 + 2 * v19) = *(unsigned __int8 *)(v22 + 2 * v19 + 1);
        *(_WORD *)(v21 + 2 * v19) = *(unsigned __int8 *)(v21 + 2 * v19 + 1);
        *(_WORD *)(v20 + 2 * v19) = *(unsigned __int8 *)(v20 + 2 * v19 + 1);
        --v19;
      }
      while (v19 > 0);
LABEL_45:
      v76 = *((unsigned __int16 *)a1 + 14);
      if (v76 > 8)
        return 1;
      v77 = a1[5];
      v78 = a1[6];
      v79 = a1[7];
      v80 = _TIFFmallocExt(*a1, ((unint64_t)(8u / *((_WORD *)a1 + 14)) << 10) + 2048, a3, a4, a5, a6, a7, a8);
      a1[12] = v80;
      if (v80)
      {
        v81 = 0;
        v82 = (unsigned int *)(v80 + 256);
        do
        {
          a1[12][v81] = v82;
          v83 = 6;
          v84 = 0x3FFFFFFLL;
          v85 = 1;
          v86 = v82;
          v87 = 4;
          v88 = 3;
          v89 = v76;
          v90 = v76;
          v91 = 3;
          v92 = 4;
          v93 = 0xFFFFFFFLL;
          v94 = 1;
          v95 = v82;
          v96 = 15;
          v97 = 2;
          switch((int)v76)
          {
            case 1:
              v98 = *((unsigned __int8 *)v77 + 2 * ((v81 >> 6) & 1)) | (*((_WORD *)v78
                                                                                         + ((v81 >> 6) & 1)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> 6) & 1)) << 16) | 0xFF000000;
              v99 = *((unsigned __int8 *)v77 + 2 * ((v81 >> 5) & 1)) | (*((_WORD *)v78
                                                                                         + ((v81 >> 5) & 1)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> 5) & 1)) << 16) | 0xFF000000;
              v100 = *((unsigned __int8 *)v77 + 2 * ((v81 >> 4) & 1)) | (*((_WORD *)v78
                                                                                          + ((v81 >> 4) & 1)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> 4) & 1)) << 16) | 0xFF000000;
              v86 = v82 + 4;
              v83 = 3;
              *v82 = *((unsigned __int8 *)v77 + 2 * (v81 >> 7)) | (*((_WORD *)v78
                                                                                                  + (v81 >> 7)) << 8) | (*((unsigned __int16 *)v79 + (v81 >> 7)) << 16) | 0xFF000000;
              v82[1] = v98;
              v84 = 1;
              v85 = 5;
              v87 = 2;
              v88 = 1;
              v82[2] = v99;
              v82[3] = v100;
              v89 = 6;
              v90 = 1;
              v91 = 7;
              v92 = 8;
              goto LABEL_50;
            case 2:
LABEL_50:
              v101 = *((unsigned __int8 *)v77 + 2 * ((v81 >> v87) & v88)) | (*((_WORD *)v78
                                                                                              + ((v81 >> v87) & v88)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> v87) & v88)) << 16);
              *v86 = *((unsigned __int8 *)v77 + 2 * ((v81 >> v83) & v84)) | (*((_WORD *)v78
                                                                                              + ((v81 >> v83) & v84)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> v83) & v84)) << 16) | 0xFF000000;
              v95 = &v82[v89];
              v82[v85] = v101 | 0xFF000000;
              v93 = v88;
              v94 = v91;
              v96 = v88;
              v97 = v92;
              goto LABEL_51;
            case 4:
LABEL_51:
              v102 = &v82[v94];
              *v95 = *((unsigned __int8 *)v77 + 2 * ((v81 >> v90) & v93)) | (*((_WORD *)v78
                                                                                              + ((v81 >> v90) & v93)) << 8) | (*((unsigned __int16 *)v79 + ((v81 >> v90) & v93)) << 16) | 0xFF000000;
              v103 = v96 & v81;
              goto LABEL_53;
            case 8:
              v103 = v81;
              v97 = 1;
              v102 = v82;
LABEL_53:
              v82 += v97;
              *v102 = *((unsigned __int8 *)v77 + 2 * v103) | (*((_WORD *)v78 + v103) << 8) | (*((unsigned __int16 *)v79 + v103) << 16) | 0xFF000000;
              break;
            default:
              break;
          }
          ++v81;
        }
        while (v81 != 256);
        return 1;
      }
      v35 = (uint64_t)*a1;
      v36 = (const char *)TIFFFileName(v35);
      v42 = "No space for Palette mapping table";
      goto LABEL_24;
    }
    v23 = *((unsigned __int16 *)a1 + 14);
    if (v23 == 16)
      v24 = 255;
    else
      v24 = ~(-1 << v23);
    v25 = (v24 + 1);
    v26 = _TIFFmallocExt(*a1, (int)v25, a3, a4, a5, a6, a7, a8);
    a1[10] = v26;
    if (v26)
    {
      if (*((_WORD *)a1 + 18))
      {
        if ((v24 & 0x80000000) == 0)
        {
          v33 = 0;
          v34 = 0;
          do
          {
            *((_BYTE *)a1[10] + v34++) = v33 / v24;
            v33 += 255;
          }
          while (v25 != v34);
        }
      }
      else if ((v24 & 0x80000000) == 0)
      {
        v43 = 0;
        v44 = 255 * v24;
        do
        {
          *((_BYTE *)a1[10] + v43++) = v44 / v24;
          v44 -= 255;
        }
        while (v25 != v43);
      }
      v45 = *((unsigned __int16 *)a1 + 14);
      if (v45 > 0x10 || *((unsigned __int16 *)a1 + 18) > 1u)
        return 1;
      v46 = a1[10];
      if (v45 <= 8)
        v47 = ((unint64_t)(8u / *((_WORD *)a1 + 14)) << 10) + 2048;
      else
        v47 = 3072;
      v48 = _TIFFmallocExt(*a1, v47, v27, v28, v29, v30, v31, v32);
      a1[11] = v48;
      if (v48)
      {
        v49 = 0;
        v50 = (unsigned int *)(v48 + 256);
        while (2)
        {
          a1[11][v49] = v50;
          v51 = 6;
          v52 = 0x3FFFFFFLL;
          v53 = 1;
          v54 = v50;
          v55 = 4;
          v56 = 3;
          v57 = v45;
          v58 = v45;
          v59 = 3;
          v60 = 4;
          v61 = 0xFFFFFFFLL;
          v62 = 1;
          v63 = v50;
          v64 = 15;
          v65 = 2;
          switch((int)v45)
          {
            case 1:
              *v50 = (65793 * *((unsigned __int8 *)v46 + (v49 >> 7))) | 0xFF000000;
              v50[1] = (65793 * *((unsigned __int8 *)v46 + ((v49 >> 6) & 1))) | 0xFF000000;
              v50[2] = (65793 * *((unsigned __int8 *)v46 + ((v49 >> 5) & 1))) | 0xFF000000;
              v54 = v50 + 4;
              v50[3] = (65793 * *((unsigned __int8 *)v46 + ((v49 >> 4) & 1))) | 0xFF000000;
              v51 = 3;
              v52 = 1;
              v53 = 5;
              v55 = 2;
              v56 = 1;
              v57 = 6;
              v58 = 1;
              v59 = 7;
              v60 = 8;
              goto LABEL_37;
            case 2:
LABEL_37:
              *v54 = (65793 * *((unsigned __int8 *)v46 + ((v49 >> v51) & v52))) | 0xFF000000;
              v63 = &v50[v57];
              v50[v53] = (65793 * *((unsigned __int8 *)v46 + ((v49 >> v55) & v56))) | 0xFF000000;
              v61 = v56;
              v62 = v59;
              v64 = v56;
              v65 = v60;
              goto LABEL_38;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_42;
            case 4:
LABEL_38:
              v66 = (65793 * *((unsigned __int8 *)v46 + ((v49 >> v58) & v61))) | 0xFF000000;
              v67 = &v50[v62];
              *v63 = v66;
              v68 = v64 & v49;
              goto LABEL_41;
            case 8:
              goto LABEL_40;
            default:
              if ((_DWORD)v45 == 16)
              {
LABEL_40:
                v68 = v49;
                v65 = 1;
                v67 = v50;
LABEL_41:
                v50 += v65;
                *v67 = (65793 * *((unsigned __int8 *)v46 + v68)) | 0xFF000000;
              }
LABEL_42:
              if (++v49 != 256)
                continue;
              _TIFFfreeExt((uint64_t)*a1, (char *)a1[10]);
              a1[10] = 0;
              break;
          }
          return 1;
        }
      }
      v35 = (uint64_t)*a1;
      v36 = (const char *)TIFFFileName(v35);
      v42 = "No space for B&W mapping table";
    }
    else
    {
      v35 = (uint64_t)*a1;
      v36 = (const char *)TIFFFileName(v35);
      v42 = "No space for photometric conversion table";
    }
LABEL_24:
    TIFFErrorExtR(v35, v36, v42, v37, v38, v39, v40, v41, v104);
    return 0;
  }
  return result;
}

uint64_t putRGBcontig8bitCMYKtile(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int *v21;

  if (a6)
  {
    v10 = *(unsigned __int16 *)(result + 30);
    do
    {
      v11 = a5;
      if (a5 >= 8)
      {
        do
        {
          v12 = a9;
          *a2 = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v13 = &a9[v10 + 3];
          a2[1] = ((32897 * (*(v13 - 2) ^ 0xFF) * (*v13 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v13 - 3) ^ 0xFF)
                                                                                     * (*v13 ^ 0xFFu)) >> 23) | ((32897 * (*(v13 - 1) ^ 0xFF) * (*v13 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v14 = &v13[v10];
          a2[2] = ((32897 * (*(v14 - 2) ^ 0xFF) * (*v14 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v14 - 3) ^ 0xFF)
                                                                                     * (*v14 ^ 0xFFu)) >> 23) | ((32897 * (*(v14 - 1) ^ 0xFF) * (*v14 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v15 = &v14[v10];
          v16 = ((32897 * (*(v15 - 2) ^ 0xFF) * (*v15 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                   * (*(v15 - 3) ^ 0xFF)
                                                                                   * (*v15 ^ 0xFFu)) >> 23) | ((32897 * (*(v15 - 1) ^ 0xFF) * (*v15 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v17 = &v15[v10];
          a2[3] = v16;
          a2[4] = ((32897 * (*(v17 - 2) ^ 0xFF) * (*v17 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v17 - 3) ^ 0xFF)
                                                                                     * (*v17 ^ 0xFFu)) >> 23) | ((32897 * (*(v17 - 1) ^ 0xFF) * (*v17 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v18 = &v17[v10];
          a2[5] = ((32897 * (*(v18 - 2) ^ 0xFF) * (*v18 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v18 - 3) ^ 0xFF)
                                                                                     * (*v18 ^ 0xFFu)) >> 23) | ((32897 * (*(v18 - 1) ^ 0xFF) * (*v18 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v19 = &v18[v10];
          a2[6] = ((32897 * (*(v19 - 2) ^ 0xFF) * (*v19 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v19 - 3) ^ 0xFF)
                                                                                     * (*v19 ^ 0xFFu)) >> 23) | ((32897 * (*(v19 - 1) ^ 0xFF) * (*v19 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v20 = &v19[v10];
          v21 = a2 + 8;
          a2[7] = ((32897 * (*(v20 - 2) ^ 0xFF) * (*v20 ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897
                                                                                     * (*(v20 - 3) ^ 0xFF)
                                                                                     * (*v20 ^ 0xFFu)) >> 23) | ((32897 * (*(v20 - 1) ^ 0xFF) * (*v20 ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          v11 -= 8;
          a9 = &v20[v10 - 3];
          a2 += 8;
        }
        while (v11 > 7);
        result = 3 * v10;
        a9 = &v12[3 * v10 + 2 * v10 + 2 * v10 + v10];
        a2 = v21;
      }
      switch(v11)
      {
        case 1u:
          goto LABEL_13;
        case 2u:
          goto LABEL_12;
        case 3u:
          goto LABEL_11;
        case 4u:
          goto LABEL_10;
        case 5u:
          goto LABEL_9;
        case 6u:
          goto LABEL_8;
        case 7u:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_8:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_9:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_10:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_11:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_12:
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * (a9[2] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
LABEL_13:
          result = a9[2] ^ 0xFFu;
          *a2++ = ((32897 * (a9[1] ^ 0xFF) * (a9[3] ^ 0xFFu)) >> 15) & 0x1FF00 | ((32897 * (*a9 ^ 0xFF)
                                                                                         * (a9[3] ^ 0xFFu)) >> 23) | ((32897 * result * (a9[3] ^ 0xFF)) >> 7) & 0xFF0000 | 0xFF000000;
          a9 += v10;
          break;
        default:
          break;
      }
      a2 += a8;
      a9 += v10 * a7;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putRGBcontig8bitCMYKMaptile(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 80);
    v11 = *(unsigned __int16 *)(result + 30);
    do
    {
      if (a5)
      {
        v12 = a5;
        do
        {
          v13 = a9[3] ^ 0xFF;
          result = a9[2] ^ 0xFFu;
          *a2++ = *(unsigned __int8 *)(v10 + ((32897 * (*a9 ^ 0xFFu) * v13) >> 23)) | (*(unsigned __int8 *)(v10 + ((32897 * (a9[1] ^ 0xFFu) * v13) >> 23)) << 8) | (*(unsigned __int8 *)(v10 + ((32897 * result * v13) >> 23)) << 16) | 0xFF000000;
          a9 += v11;
          --v12;
        }
        while (v12);
      }
      a9 += v11 * a7;
      a2 += a8;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put8bitcmaptile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 96);
    v11 = *(unsigned __int16 *)(result + 30);
    do
    {
      if (a5)
      {
        v12 = a5;
        do
        {
          *a2++ = **(_DWORD **)(v10 + 8 * *a9);
          a9 += v11;
          --v12;
        }
        while (v12);
      }
      a2 += a8;
      a9 += a7;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put4bitcmaptile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 96);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 1;
    v12 = (uint64_t)v11 >> 1;
    do
    {
      v13 = a5;
      if (a5 >= 2)
      {
        do
        {
          v14 = *a9++;
          v15 = *(_DWORD **)(v10 + 8 * v14);
          *a2 = *v15;
          v16 = v15[1];
          v17 = a2 + 2;
          a2[1] = v16;
          v13 -= 2;
          a2 += 2;
        }
        while (v13 > 1);
        a2 = v17;
      }
      if (v13)
      {
        v18 = *a9++;
        *a2++ = **(_DWORD **)(v10 + 8 * v18);
      }
      a2 += a8;
      a9 += v12;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put2bitcmaptile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 96);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 3;
    v12 = (uint64_t)v11 >> 2;
    while (1)
    {
      v13 = a5;
      if (a5 >= 4)
      {
        do
        {
          v14 = *a9++;
          v15 = *(int **)(v10 + 8 * v14);
          *a2 = *v15;
          a2[1] = v15[1];
          a2[2] = v15[2];
          v16 = v15[3];
          v17 = a2 + 4;
          a2[3] = v16;
          v13 -= 4;
          a2 += 4;
        }
        while (v13 > 3);
        a2 = v17;
      }
      if (!v13)
        goto LABEL_16;
      v18 = *a9++;
      v19 = *(int **)(v10 + 8 * v18);
      if (v13 == 1)
        goto LABEL_15;
      if (v13 == 2)
        goto LABEL_14;
      if (v13 == 3)
        break;
LABEL_16:
      a2 += a8;
      a9 += v12;
      if (!--a6)
        return result;
    }
    v20 = *v19++;
    *a2++ = v20;
LABEL_14:
    v21 = *v19++;
    *a2++ = v21;
LABEL_15:
    *a2++ = *v19;
    goto LABEL_16;
  }
  return result;
}

uint64_t put1bitcmaptile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 96);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 7;
    v12 = (uint64_t)v11 >> 3;
    do
    {
      v13 = a5;
      if (a5 >= 8)
      {
        do
        {
          v14 = *a9++;
          v15 = *(int **)(v10 + 8 * v14);
          *a2 = *v15;
          a2[1] = v15[1];
          a2[2] = v15[2];
          a2[3] = v15[3];
          a2[4] = v15[4];
          a2[5] = v15[5];
          a2[6] = v15[6];
          v16 = v15[7];
          v17 = a2 + 8;
          a2[7] = v16;
          v13 -= 8;
          a2 += 8;
        }
        while (v13 > 7);
        a2 = v17;
      }
      if (v13)
      {
        v18 = *a9++;
        v19 = v13 - 1;
        v20 = *(int **)(v10 + 8 * v18);
        switch(v19)
        {
          case 0u:
            goto LABEL_17;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_15;
          case 3u:
            goto LABEL_14;
          case 4u:
            goto LABEL_13;
          case 5u:
            goto LABEL_12;
          case 6u:
            v21 = *v20++;
            *a2++ = v21;
LABEL_12:
            v22 = *v20++;
            *a2++ = v22;
LABEL_13:
            v23 = *v20++;
            *a2++ = v23;
LABEL_14:
            v24 = *v20++;
            *a2++ = v24;
LABEL_15:
            v25 = *v20++;
            *a2++ = v25;
LABEL_16:
            v26 = *v20++;
            *a2++ = v26;
LABEL_17:
            *a2++ = *v20;
            break;
          default:
            break;
        }
      }
      a2 += a8;
      a9 += v12;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put16bitbwtile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6)
  {
    v10 = 2 * *(unsigned __int16 *)(result + 30);
    v11 = *(_QWORD *)(result + 88);
    do
    {
      if (a5)
      {
        v12 = a5;
        do
        {
          *a2++ = **(_DWORD **)(v11 + (((unint64_t)*a9 >> 5) & 0x7F8));
          a9 = (unsigned __int16 *)((char *)a9 + v10);
          --v12;
        }
        while (v12);
      }
      a2 += a8;
      a9 = (unsigned __int16 *)((char *)a9 + a7);
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putagreytile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 88);
    v11 = *(unsigned __int16 *)(result + 30);
    do
    {
      if (a5)
      {
        v12 = a5;
        do
        {
          *a2++ = ((a9[1] << 24) | 0xFFFFFF) & **(_DWORD **)(v10 + 8 * *a9);
          a9 += v11;
          --v12;
        }
        while (v12);
      }
      a2 += a8;
      a9 += a7;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t putgreytile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 88);
    v11 = *(unsigned __int16 *)(result + 30);
    do
    {
      if (a5)
      {
        v12 = a5;
        do
        {
          *a2++ = **(_DWORD **)(v10 + 8 * *a9);
          a9 += v11;
          --v12;
        }
        while (v12);
      }
      a2 += a8;
      a9 += a7;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put4bitbwtile(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 88);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 1;
    v12 = (uint64_t)v11 >> 1;
    do
    {
      v13 = a5;
      if (a5 >= 2)
      {
        do
        {
          v14 = *a9++;
          v15 = *(_DWORD **)(v10 + 8 * v14);
          *a2 = *v15;
          v16 = v15[1];
          v17 = a2 + 2;
          a2[1] = v16;
          v13 -= 2;
          a2 += 2;
        }
        while (v13 > 1);
        a2 = v17;
      }
      if (v13)
      {
        v18 = *a9++;
        *a2++ = **(_DWORD **)(v10 + 8 * v18);
      }
      a2 += a8;
      a9 += v12;
      --a6;
    }
    while (a6);
  }
  return result;
}

uint64_t put2bitbwtile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 88);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 3;
    v12 = (uint64_t)v11 >> 2;
    while (1)
    {
      v13 = a5;
      if (a5 >= 4)
      {
        do
        {
          v14 = *a9++;
          v15 = *(int **)(v10 + 8 * v14);
          *a2 = *v15;
          a2[1] = v15[1];
          a2[2] = v15[2];
          v16 = v15[3];
          v17 = a2 + 4;
          a2[3] = v16;
          v13 -= 4;
          a2 += 4;
        }
        while (v13 > 3);
        a2 = v17;
      }
      if (!v13)
        goto LABEL_16;
      v18 = *a9++;
      v19 = *(int **)(v10 + 8 * v18);
      if (v13 == 1)
        goto LABEL_15;
      if (v13 == 2)
        goto LABEL_14;
      if (v13 == 3)
        break;
LABEL_16:
      a2 += a8;
      a9 += v12;
      if (!--a6)
        return result;
    }
    v20 = *v19++;
    *a2++ = v20;
LABEL_14:
    v21 = *v19++;
    *a2++ = v21;
LABEL_15:
    *a2++ = *v19;
    goto LABEL_16;
  }
  return result;
}

uint64_t put1bitbwtile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;

  if (a6)
  {
    v10 = *(_QWORD *)(result + 88);
    if (a7 >= 0)
      v11 = a7;
    else
      v11 = a7 + 7;
    v12 = (uint64_t)v11 >> 3;
    do
    {
      v13 = a5;
      if (a5 >= 8)
      {
        do
        {
          v14 = *a9++;
          v15 = *(int **)(v10 + 8 * v14);
          *a2 = *v15;
          a2[1] = v15[1];
          a2[2] = v15[2];
          a2[3] = v15[3];
          a2[4] = v15[4];
          a2[5] = v15[5];
          a2[6] = v15[6];
          v16 = v15[7];
          v17 = a2 + 8;
          a2[7] = v16;
          v13 -= 8;
          a2 += 8;
        }
        while (v13 > 7);
        a2 = v17;
      }
      if (v13)
      {
        v18 = *a9++;
        v19 = v13 - 1;
        v20 = *(int **)(v10 + 8 * v18);
        switch(v19)
        {
          case 0u:
            goto LABEL_17;
          case 1u:
            goto LABEL_16;
          case 2u:
            goto LABEL_15;
          case 3u:
            goto LABEL_14;
          case 4u:
            goto LABEL_13;
          case 5u:
            goto LABEL_12;
          case 6u:
            v21 = *v20++;
            *a2++ = v21;
LABEL_12:
            v22 = *v20++;
            *a2++ = v22;
LABEL_13:
            v23 = *v20++;
            *a2++ = v23;
LABEL_14:
            v24 = *v20++;
            *a2++ = v24;
LABEL_15:
            v25 = *v20++;
            *a2++ = v25;
LABEL_16:
            v26 = *v20++;
            *a2++ = v26;
LABEL_17:
            *a2++ = *v20;
            break;
          default:
            break;
        }
      }
      a2 += a8;
      a9 += v12;
      --a6;
    }
    while (a6);
  }
  return result;
}

BOOL initYCbCrConversion(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v17;
  float v19;
  float v21;
  float v23;
  float v24;
  uint64_t v26;
  char *v27;
  char v28;
  float *v29;
  float *v30;

  if (a1[13] || (v9 = _TIFFmallocExt((_QWORD *)*a1, 6192, a3, a4, a5, a6, a7, a8), (a1[13] = (uint64_t)v9) != 0))
  {
    v29 = 0;
    v30 = 0;
    _cg_TIFFGetFieldDefaulted(*a1, 529, a3, a4, a5, a6, a7, a8, (uint64_t)&v30);
    _cg_TIFFGetFieldDefaulted(*a1, 532, v10, v11, v12, v13, v14, v15, (uint64_t)&v29);
    if (v30[1] == 0.0)
    {
      v26 = *a1;
      v27 = "Invalid values for YCbCrCoefficients tag";
    }
    else
    {
      if (*v29 > -2147500000.0 && *v29 < 2147500000.0)
      {
        v17 = v29[1];
        if (v17 > -2147500000.0 && v17 < 2147500000.0)
        {
          v19 = v29[2];
          if (v19 > -2147500000.0 && v19 < 2147500000.0)
          {
            v21 = v29[3];
            if (v21 > -2147500000.0 && v21 < 2147500000.0)
            {
              v23 = v29[4];
              if (v23 > -2147500000.0 && v23 < 2147500000.0)
              {
                v24 = v29[5];
                if (v24 > -2147500000.0 && v24 < 2147500000.0)
                  return (int)TIFFYCbCrToRGBInit((_QWORD *)a1[13], v30, v29) >= 0;
              }
            }
          }
        }
      }
      v26 = *a1;
      v27 = "Invalid values for ReferenceBlackWhite tag";
    }
  }
  else
  {
    v26 = *a1;
    v27 = "No space for YCbCr->RGB conversion state";
  }
  TIFFErrorExtR(v26, "initYCbCrConversion", v27, a4, a5, a6, a7, a8, v28);
  return 0;
}

_QWORD *putcontig8bitYCbCr44tile(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, int a8, unsigned __int8 *a9)
{
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v9 = a6;
  v10 = a2;
  v11 = result;
  v13 = a2 + 4 * a5 + 4 * a8;
  v14 = v13 + 4 * a5 + 4 * a8;
  v15 = v14 + 4 * a5 + 4 * a8;
  v16 = 3 * a5 + 4 * a8;
  v34 = 10 * (a7 / 4);
  if (((a6 | a5) & 3) != 0)
  {
    if (a6)
    {
      v37 = v16;
      do
      {
        if (a5)
        {
          v41 = v15;
          v17 = 0;
          v18 = a9 + 18;
          v19 = a5;
          while (1)
          {
            a9 = v18;
            v20 = *(v18 - 2);
            v21 = *(v18 - 1);
            if ((_DWORD)v19 != 1)
            {
              if ((_DWORD)v19 != 2)
              {
                if ((_DWORD)v19 != 3)
                {
                  if (v9 != 1)
                  {
                    if (v9 != 2)
                    {
                      if (v9 != 3)
                      {
                        v44 = 0;
                        v43 = 0;
                        TIFFYCbCrtoRGB((_QWORD *)v11[13], *(v18 - 3), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                        *(_DWORD *)(v41 + v17 + 12) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                      }
                      v44 = 0;
                      v43 = 0;
                      TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 7), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                      *(_DWORD *)(v14 + v17 + 12) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                    }
                    v44 = 0;
                    v43 = 0;
                    TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 11), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                    *(_DWORD *)(v13 + v17 + 12) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                  }
                  v44 = 0;
                  v43 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 15), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                  *(_DWORD *)(v10 + v17 + 12) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                }
                if (v9 != 1)
                {
                  if (v9 != 2)
                  {
                    if (v9 != 3)
                    {
                      v44 = 0;
                      v43 = 0;
                      TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 4), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                      *(_DWORD *)(v41 + v17 + 8) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                    }
                    v44 = 0;
                    v43 = 0;
                    TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 8), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                    *(_DWORD *)(v14 + v17 + 8) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                  }
                  v44 = 0;
                  v43 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 12), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                  *(_DWORD *)(v13 + v17 + 8) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                }
                v44 = 0;
                v43 = 0;
                TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 16), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                *(_DWORD *)(v10 + v17 + 8) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
              }
              if (v9 != 1)
              {
                if (v9 != 2)
                {
                  if (v9 != 3)
                  {
                    v44 = 0;
                    v43 = 0;
                    TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 5), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                    *(_DWORD *)(v41 + v17 + 4) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                  }
                  v44 = 0;
                  v43 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 9), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                  *(_DWORD *)(v14 + v17 + 4) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                }
                v44 = 0;
                v43 = 0;
                TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 13), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                *(_DWORD *)(v13 + v17 + 4) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
              }
              v44 = 0;
              v43 = 0;
              TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 17), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
              *(_DWORD *)(v10 + v17 + 4) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
            }
            if (v9 != 1)
            {
              if (v9 != 2)
              {
                if (v9 != 3)
                {
                  v44 = 0;
                  v43 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 6), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                  *(_DWORD *)(v41 + v17) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
                }
                v44 = 0;
                v43 = 0;
                TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 10), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
                *(_DWORD *)(v14 + v17) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
              }
              v44 = 0;
              v43 = 0;
              TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 14), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
              *(_DWORD *)(v13 + v17) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
            }
            v44 = 0;
            v43 = 0;
            result = TIFFYCbCrtoRGB((_QWORD *)v11[13], *(a9 - 18), v20, v21, (int *)&v44 + 1, (int *)&v44, &v43);
            *(_DWORD *)(v10 + v17) = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
            if (v19 <= 3)
              break;
            v17 += 16;
            v18 = a9 + 18;
            v19 -= 4;
            if (!(_DWORD)v19)
            {
              v10 += v17;
              v15 = v41 + v17;
              v13 += v17;
              v14 += v17;
              goto LABEL_40;
            }
          }
          v10 += v17 + 4 * v19;
          v13 += v17 + 4 * v19;
          v14 += v17 + 4 * v19;
          v15 = v41 + v17 + 4 * v19;
        }
LABEL_40:
        v10 += 4 * v37;
        v13 += 4 * v37;
        v14 += 4 * v37;
        a9 += (int)v34;
        v15 += 4 * v37;
        v22 = v9 >= 4;
        v9 -= 4;
      }
      while (v9 != 0 && v22);
    }
  }
  else if (a6 >= 4)
  {
    v33 = a5 >> 2;
    v32 = 4 * v16;
    do
    {
      v38 = v13;
      v40 = v14;
      v35 = v9;
      v23 = 0;
      v24 = v33;
      v36 = v10;
      v42 = v15;
      do
      {
        v25 = (unsigned int *)(v10 + v23);
        v26 = (unsigned int *)(v15 + v23);
        v27 = (unsigned int *)(v40 + v23);
        v28 = (unsigned int *)(v38 + v23);
        v29 = a9[16];
        v30 = a9[17];
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], *a9, v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        *v25 = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[1], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v25[1] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[2], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v25[2] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[3], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v25[3] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[4], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        *v28 = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[5], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v28[1] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[6], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v28[2] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[7], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v28[3] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v10 = v36;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[8], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        *v27 = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[9], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v27[1] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[10], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v27[2] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[11], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v27[3] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[12], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        *v26 = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[13], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v26[1] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[14], v29, v30, (int *)&v44 + 1, (int *)&v44, &v43);
        v26[2] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        v44 = 0;
        v43 = 0;
        v31 = v30;
        v15 = v42;
        result = TIFFYCbCrtoRGB((_QWORD *)v11[13], a9[15], v29, v31, (int *)&v44 + 1, (int *)&v44, &v43);
        v26[3] = HIDWORD(v44) | ((_DWORD)v44 << 8) | (v43 << 16) | 0xFF000000;
        a9 += 18;
        v23 += 16;
        --v24;
      }
      while (v24);
      v10 = v36 + v32 + v23;
      v13 = v38 + v32 + v23;
      v14 = v40 + v32 + v23;
      v15 = v42 + v32 + v23;
      a9 += v34;
      v9 = v35 - 4;
    }
    while (v35 - 4 > 3);
  }
  return result;
}

_QWORD *putcontig8bitYCbCr42tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, int a8, unsigned __int8 *a9)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;
  unsigned int *v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v30;
  int v31;
  uint64_t v32;

  v9 = a6;
  v10 = a5;
  v11 = a2;
  v12 = result;
  v14 = &a2[a5 + a8];
  v15 = a5 + 2 * a8;
  v16 = 10 * (a7 / 4);
  if (a6 & 1 | a5 & 3)
  {
    if (a6)
    {
      v17 = v15;
      v28 = (int)v16;
      do
      {
        if (v10)
        {
          do
          {
            v18 = a9[8];
            v19 = a9[9];
            if (v10 != 1)
            {
              if (v10 != 2)
              {
                if (v10 != 3)
                {
                  if (v9 != 1)
                  {
                    v32 = 0;
                    v31 = 0;
                    TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[7], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
                    v14[3] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
                  }
                  v32 = 0;
                  v31 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[3], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
                  v11[3] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
                }
                if (v9 != 1)
                {
                  v32 = 0;
                  v31 = 0;
                  TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[6], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
                  v14[2] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
                }
                v32 = 0;
                v31 = 0;
                TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
                v11[2] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
              }
              if (v9 != 1)
              {
                v32 = 0;
                v31 = 0;
                TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[5], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
                v14[1] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
              }
              v32 = 0;
              v31 = 0;
              TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
              v11[1] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
            }
            if (v9 != 1)
            {
              v32 = 0;
              v31 = 0;
              TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[4], v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
              *v14 = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
            }
            v32 = 0;
            v31 = 0;
            v20 = *a9;
            a9 += 10;
            result = TIFFYCbCrtoRGB((_QWORD *)v12[13], v20, v18, v19, (int *)&v32 + 1, (int *)&v32, &v31);
            *v11 = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
            v21 = v10 > 4;
            if (v10 >= 4)
              v22 = 4;
            else
              v22 = v10;
            v14 += v22;
            v11 += v22;
            v10 -= 4;
          }
          while (v21);
        }
        v11 += v17;
        a9 += v28;
        v14 += v17;
        v23 = v9 >= 2;
        v9 -= 2;
        v10 = a5;
      }
      while (v9 != 0 && v23);
    }
  }
  else if (a6 >= 2)
  {
    v30 = a5 >> 2;
    v24 = 4 * v15;
    do
    {
      v25 = v30;
      do
      {
        v26 = a9[8];
        v27 = a9[9];
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        *v11 = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v11[1] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v11[2] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[3], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v11[3] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[4], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        *v14 = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[5], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v14[1] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[6], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v14[2] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v32 = 0;
        v31 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[7], v26, v27, (int *)&v32 + 1, (int *)&v32, &v31);
        v14[3] = HIDWORD(v32) | ((_DWORD)v32 << 8) | (v31 << 16) | 0xFF000000;
        v11 += 4;
        v14 += 4;
        a9 += 10;
        --v25;
      }
      while (v25);
      v11 = (unsigned int *)((char *)v11 + v24);
      v14 = (unsigned int *)((char *)v14 + v24);
      a9 += v16;
      v9 -= 2;
    }
    while (v9 > 1);
  }
  return result;
}

_QWORD *putcontig8bitYCbCr41tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  unsigned int v10;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v25;
  int v26;
  uint64_t v27;

  v10 = a5;
  v12 = result;
  v25 = a5 >> 2;
  v14 = a5 & 3;
  v15 = a8;
  v16 = 6 * (a7 / 4);
  do
  {
    if (v10 >= 4)
    {
      v17 = v16;
      v18 = v15;
      v19 = v25;
      do
      {
        v20 = a9[4];
        v21 = a9[5];
        v27 = 0;
        v26 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v20, v21, (int *)&v27 + 1, (int *)&v27, &v26);
        *a2 = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        v27 = 0;
        v26 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v20, v21, (int *)&v27 + 1, (int *)&v27, &v26);
        a2[1] = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        v27 = 0;
        v26 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v20, v21, (int *)&v27 + 1, (int *)&v27, &v26);
        a2[2] = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        v27 = 0;
        v26 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[3], v20, v21, (int *)&v27 + 1, (int *)&v27, &v26);
        a2[3] = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        a2 += 4;
        a9 += 6;
        --v19;
      }
      while (v19);
      v15 = v18;
      v16 = v17;
      v10 = a5;
    }
    if ((_DWORD)v14)
    {
      v22 = a9[4];
      v23 = a9[5];
      if ((_DWORD)v14 != 1)
      {
        if ((_DWORD)v14 != 2)
        {
          if ((_DWORD)v14 != 3)
          {
LABEL_13:
            a2 += v14;
            a9 += 6;
            goto LABEL_14;
          }
          v27 = 0;
          v26 = 0;
          TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v22, v23, (int *)&v27 + 1, (int *)&v27, &v26);
          a2[2] = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        }
        v27 = 0;
        v26 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v22, v23, (int *)&v27 + 1, (int *)&v27, &v26);
        a2[1] = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
      }
      v27 = 0;
      v26 = 0;
      result = TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v22, v23, (int *)&v27 + 1, (int *)&v27, &v26);
      *a2 = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
      goto LABEL_13;
    }
LABEL_14:
    a2 += v15;
    a9 += v16;
    --a6;
  }
  while (a6);
  return result;
}

_QWORD *putcontig8bitYCbCr22tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, int a8, unsigned __int8 *a9)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  _QWORD *v12;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = a6;
  v10 = a5;
  v11 = a2;
  v12 = result;
  if (a6 >= 2)
  {
    v14 = &a2[a5 + a8];
    if (a7 >= 0)
      v15 = a7;
    else
      v15 = a7 + 1;
    v16 = (int)(a5 + 2 * a8);
    v26 = (int)(2 * ((v15 & 0xFFFFFFFE) + (v15 >> 1)));
    do
    {
      v17 = v10;
      if (v10 >= 2)
      {
        do
        {
          v18 = a9[4];
          v19 = a9[5];
          v28 = 0;
          v27 = 0;
          TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
          *v11 = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
          v28 = 0;
          v27 = 0;
          TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
          v11[1] = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
          v28 = 0;
          v27 = 0;
          TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
          *v14 = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
          v28 = 0;
          v27 = 0;
          result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[3], v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
          v14[1] = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
          v11 += 2;
          v14 += 2;
          a9 += 6;
          v17 -= 2;
        }
        while (v17 > 1);
      }
      if (v17)
      {
        v20 = a9[4];
        v21 = a9[5];
        v28 = 0;
        v27 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v20, v21, (int *)&v28 + 1, (int *)&v28, &v27);
        *v11++ = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        v28 = 0;
        v27 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[2], v20, v21, (int *)&v28 + 1, (int *)&v28, &v27);
        *v14++ = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        a9 += 6;
      }
      v11 += v16;
      v14 += v16;
      a9 += v26;
      v9 -= 2;
    }
    while (v9 > 1);
  }
  if (v9)
  {
    if (v10 >= 2)
    {
      do
      {
        v22 = a9[4];
        v23 = a9[5];
        v28 = 0;
        v27 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v22, v23, (int *)&v28 + 1, (int *)&v28, &v27);
        *v11 = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        v28 = 0;
        v27 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v22, v23, (int *)&v28 + 1, (int *)&v28, &v27);
        v11[1] = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        v11 += 2;
        a9 += 6;
        v10 -= 2;
      }
      while (v10 > 1);
    }
    if (v10)
    {
      v24 = a9[4];
      v25 = a9[5];
      v28 = 0;
      v27 = 0;
      result = TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v24, v25, (int *)&v28 + 1, (int *)&v28, &v27);
      *v11 = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
    }
  }
  return result;
}

_QWORD *putcontig8bitYCbCr21tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  _QWORD *v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;

  v12 = result;
  if (a7 >= 0)
    v14 = a7;
  else
    v14 = a7 + 1;
  v23 = a5 >> 1;
  v15 = a8;
  v16 = (int)((2 * v14) & 0xFFFFFFFC);
  do
  {
    if (a5 >= 2)
    {
      v17 = v23;
      do
      {
        v18 = a9[2];
        v19 = a9[3];
        v25 = 0;
        v24 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *a9, v18, v19, (int *)&v25 + 1, (int *)&v25, &v24);
        *a2 = HIDWORD(v25) | ((_DWORD)v25 << 8) | (v24 << 16) | 0xFF000000;
        v25 = 0;
        v24 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], a9[1], v18, v19, (int *)&v25 + 1, (int *)&v25, &v24);
        a2[1] = HIDWORD(v25) | ((_DWORD)v25 << 8) | (v24 << 16) | 0xFF000000;
        a2 += 2;
        a9 += 4;
        --v17;
      }
      while (v17);
    }
    if ((a5 & 1) != 0)
    {
      v20 = a9[2];
      v21 = a9[3];
      v25 = 0;
      v24 = 0;
      v22 = *a9;
      a9 += 4;
      result = TIFFYCbCrtoRGB((_QWORD *)v12[13], v22, v20, v21, (int *)&v25 + 1, (int *)&v25, &v24);
      *a2++ = HIDWORD(v25) | ((_DWORD)v25 << 8) | (v24 << 16) | 0xFF000000;
    }
    a2 += v15;
    a9 += v16;
    --a6;
  }
  while (a6);
  return result;
}

_QWORD *putcontig8bitYCbCr12tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  unsigned int v9;
  int v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  int v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;

  v9 = a6;
  v10 = a5;
  v11 = a2;
  v12 = result;
  if (a6 >= 2)
  {
    v25 = 4 * a7;
    v23 = a5 + 2 * a8;
    v24 = v23;
    v14 = (uint64_t)&a2[a5 + a8];
    do
    {
      v15 = 0;
      v16 = v11;
      v17 = v10;
      do
      {
        v18 = *(unsigned __int8 *)(a9 + v15 + 2);
        v19 = *(unsigned __int8 *)(a9 + v15 + 3);
        v28 = 0;
        v27 = 0;
        TIFFYCbCrtoRGB((_QWORD *)v12[13], *(unsigned __int8 *)(a9 + v15), v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
        v16[v15 / 4] = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        v28 = 0;
        v27 = 0;
        result = TIFFYCbCrtoRGB((_QWORD *)v12[13], *(unsigned __int8 *)(a9 + v15 + 1), v18, v19, (int *)&v28 + 1, (int *)&v28, &v27);
        *(_DWORD *)(v14 + v15) = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
        v15 += 4;
        --v17;
      }
      while (v17);
      v11 = &v16[v24 + v15 / 4];
      v14 += v24 * 4 + v15;
      a9 += v25 + v15;
      v9 -= 2;
      v10 = a5;
    }
    while (v9 > 1);
    v11 = &v16[v23 + v15 / 4];
  }
  if (v9)
  {
    v20 = (unsigned __int8 *)(a9 + 3);
    do
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      v28 = 0;
      v27 = 0;
      result = TIFFYCbCrtoRGB((_QWORD *)v12[13], *(v20 - 3), v21, v22, (int *)&v28 + 1, (int *)&v28, &v27);
      *v11++ = HIDWORD(v28) | ((_DWORD)v28 << 8) | (v27 << 16) | 0xFF000000;
      v20 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *putcontig8bitYCbCr11tile(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD *result;
  int v21;
  uint64_t v22;

  v14 = 3 * a7;
  v15 = 4 * a8;
  do
  {
    v16 = a5;
    do
    {
      v17 = a9[1];
      v18 = a9[2];
      v22 = 0;
      v21 = 0;
      v19 = *a9;
      a9 += 3;
      result = TIFFYCbCrtoRGB(*(_QWORD **)(a1 + 104), v19, v17, v18, (int *)&v22 + 1, (int *)&v22, &v21);
      *a2++ = HIDWORD(v22) | ((_DWORD)v22 << 8) | (v21 << 16) | 0xFF000000;
      --v16;
    }
    while (v16);
    a2 = (unsigned int *)((char *)a2 + v15);
    a9 += v14;
    --a6;
  }
  while (a6);
  return result;
}

uint64_t setorientation(uint64_t a1)
{
  unsigned int v1;
  unsigned int *v2;
  uint64_t result;

  switch(*(_WORD *)(a1 + 32))
  {
    case 1:
    case 5:
      v1 = *(unsigned __int16 *)(a1 + 34) - 2;
      if (v1 >= 7)
        goto LABEL_11;
      v2 = (unsigned int *)&unk_18822E428;
      goto LABEL_10;
    case 2:
    case 6:
      LOWORD(v1) = *(_WORD *)(a1 + 34) - 1;
      if ((unsigned __int16)v1 >= 8u)
        goto LABEL_11;
      v2 = (unsigned int *)&unk_18822E444;
      goto LABEL_10;
    case 3:
    case 7:
      LOWORD(v1) = *(_WORD *)(a1 + 34) - 1;
      if ((unsigned __int16)v1 >= 8u)
        goto LABEL_11;
      v2 = (unsigned int *)&unk_18822E464;
      goto LABEL_10;
    case 4:
    case 8:
      v1 = *(unsigned __int16 *)(a1 + 34) - 1;
      if (v1 >= 7)
        goto LABEL_11;
      v2 = (unsigned int *)&unk_18822E484;
LABEL_10:
      result = v2[(__int16)v1];
      break;
    default:
LABEL_11:
      result = 0;
      break;
  }
  return result;
}

uint64_t putcontig8bitCIELab8(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9)
{
  int v9;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v17 = 0;
  if (a6)
  {
    v9 = a6;
    v12 = result;
    v14 = a8;
    v15 = 3 * a7;
    do
    {
      if (a5)
      {
        v16 = a5;
        do
        {
          TIFFCIELabToXYZ(*(float **)(v12 + 112), *a9, (char)a9[1], (char)a9[2], (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1);
          result = TIFFXYZToRGB(*(_QWORD *)(v12 + 112), (int *)&v18, (int *)&v17 + 1, (int *)&v17, *((float *)&v19 + 1), *(float *)&v19, *((float *)&v18 + 1));
          *a2++ = v18 | (HIDWORD(v17) << 8) | ((_DWORD)v17 << 16) | 0xFF000000;
          a9 += 3;
          --v16;
        }
        while (v16);
      }
      a2 += v14;
      a9 += v15;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t putcontig8bitCIELab16(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9)
{
  int v9;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v17 = 0;
  if (a6)
  {
    v9 = a6;
    v12 = result;
    v14 = a8;
    v15 = 3 * a7;
    do
    {
      if (a5)
      {
        v16 = a5;
        do
        {
          TIFFCIELab16ToXYZ(*(float **)(v12 + 112), *a9, (__int16)a9[1], (__int16)a9[2], (float *)&v19 + 1, (float *)&v19, (float *)&v18 + 1);
          result = TIFFXYZToRGB(*(_QWORD *)(v12 + 112), (int *)&v18, (int *)&v17 + 1, (int *)&v17, *((float *)&v19 + 1), *(float *)&v19, *((float *)&v18 + 1));
          *a2++ = v18 | (HIDWORD(v17) << 8) | ((_DWORD)v17 << 16) | 0xFF000000;
          a9 += 3;
          --v16;
        }
        while (v16);
      }
      a2 += v14;
      a9 += v15;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t gtTileSeparate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v87;
  uint64_t i;
  unint64_t v89;
  _DWORD *v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  char v94;
  unsigned int v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  void (*v109)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *);
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned int v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  char *v116;
  _QWORD v117[2];

  v8 = a4;
  v9 = a3;
  v11 = *(_QWORD *)a1;
  v109 = *(void (**)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *))(a1 + 72);
  v116 = 0;
  v12 = *(unsigned int *)(a1 + 16);
  v17 = _cg_TIFFTileSize(v11, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v12)
    v18 = 4;
  else
    v18 = 3;
  v104 = _TIFFMultiplySSize(v11, v18, v17, "gtTileSeparate", v13, v14, v15, v16);
  if (!v104)
    return 0;
  v117[0] = 0;
  _cg_TIFFGetField(v11, 322, v19, v20, v21, v22, v23, v24, (uint64_t)v117 + 4);
  _cg_TIFFGetField(v11, 323, v25, v26, v27, v28, v29, v30, (uint64_t)v117);
  v31 = setorientation(a1);
  if ((v31 & 1) == 0)
  {
    if (HIDWORD(v117[0]) <= (v9 + 0x7FFFFFFF))
    {
      v108 = 0;
      v34 = v9 - HIDWORD(v117[0]);
      goto LABEL_10;
    }
LABEL_59:
    v74 = (const char *)TIFFFileName(v11);
    TIFFErrorExtR(v11, v74, "%s", v75, v76, v77, v78, v79, (char)"unsupported tile size (too wide)");
    return 0;
  }
  if (HIDWORD(v117[0]) + (int)v9 < 0)
    goto LABEL_59;
  v108 = v8 - 1;
  v34 = -(HIDWORD(v117[0]) + v9);
LABEL_10:
  v106 = v34;
  v35 = *(unsigned __int16 *)(a1 + 36);
  v36 = 0x1000300010001uLL >> (16 * v35);
  if (v35 >= 4)
    LOWORD(v36) = 3;
  if (!HIDWORD(v117[0]) || !LODWORD(v117[0]))
  {
    v80 = (const char *)TIFFFileName(v11);
    TIFFErrorExtR(v11, v80, "tile width or height is zero", v81, v82, v83, v84, v85, v94);
    return 0;
  }
  if (!v8)
  {
    v73 = 1;
    goto LABEL_73;
  }
  v114 = 0;
  v110 = 0;
  v111 = 0;
  v115 = 0;
  v37 = 0;
  v105 = (v35 < 4) & (0xBu >> (v35 & 0xF));
  v38 = *(_DWORD *)(a1 + 140) % HIDWORD(v117[0]);
  v96 = HIDWORD(v117[0]) - v38;
  v97 = v38;
  v95 = v38 + v106;
  v101 = 3 * v17;
  v102 = v17;
  v98 = v9;
  v103 = (unsigned __int16)v36;
  v99 = v8;
  v100 = v31;
  do
  {
    v39 = LODWORD(v117[0])
        + (*(_DWORD *)(a1 + 136) + v37) / LODWORD(v117[0]) * LODWORD(v117[0])
        - (*(_DWORD *)(a1 + 136)
         + v37);
    if (LODWORD(v117[0]) + (*(_DWORD *)(a1 + 136) + v37) / LODWORD(v117[0]) * LODWORD(v117[0]) - *(_DWORD *)(a1 + 136) > v8)
      v39 = v8 - v37;
    v107 = v39;
    if ((_DWORD)v9)
    {
      v40 = 0;
      v41 = *(unsigned int *)(a1 + 140);
      v42 = v95;
      LODWORD(v43) = v96;
      v44 = v97;
      do
      {
        v113 = v42;
        v45 = *(_DWORD *)(a1 + 136);
        if (v116)
        {
          if (_cg_TIFFReadTile(v11, v115, v41, v45 + v37, 0, 0, v32, v33) == -1 && *(_DWORD *)(a1 + 8))
            goto LABEL_63;
          if ((v105 & 1) != 0)
            goto LABEL_39;
        }
        else
        {
          v53 = _TIFFReadTileAndAllocBuffer(v11, (unsigned __int8 **)&v116, v104, v41, v45 + v37, 0, 0, v33);
          v115 = (unsigned __int8 *)v116;
          if (v53 == -1 && (!v116 || *(_DWORD *)(a1 + 8)))
            goto LABEL_63;
          if (v105)
          {
            v54 = (unsigned __int8 *)&v116[v101];
            if (!(_DWORD)v12)
              v54 = 0;
            v114 = v54;
            v110 = (unsigned __int8 *)v116;
            v111 = (unsigned __int8 *)v116;
            goto LABEL_39;
          }
          v111 = (unsigned __int8 *)&v116[v102];
          v110 = (unsigned __int8 *)&v116[v102 + v102];
          v55 = &v110[v102];
          if (!(_DWORD)v12)
            v55 = 0;
          v114 = v55;
        }
        if (_cg_TIFFReadTile(v11, v111, v41, *(_DWORD *)(a1 + 136) + v37, 0, 1, v51, v52) == -1
          && *(_DWORD *)(a1 + 8)
          || _cg_TIFFReadTile(v11, v110, v41, *(_DWORD *)(a1 + 136) + v37, 0, 2, v56, v57) == -1
          && *(_DWORD *)(a1 + 8))
        {
LABEL_63:
          v73 = 0;
          v71 = v100;
          goto LABEL_64;
        }
LABEL_39:
        if ((_DWORD)v12
          && _cg_TIFFReadTile(v11, v114, v41, *(_DWORD *)(a1 + 136) + v37, 0, v103, v51, v52) == -1
          && *(_DWORD *)(a1 + 8))
        {
          goto LABEL_63;
        }
        v58 = v9;
        v59 = v12;
        v60 = (*(_DWORD *)(a1 + 136) + v37) % LODWORD(v117[0]);
        v61 = _cg_TIFFTileRowSize(v11, v46, v47, v48, v49, v50, v51, v52) * v60;
        v12 = v59;
        v9 = v58;
        v62 = v61 + *(unsigned __int16 *)(a1 + 30) * (uint64_t)v44;
        v63 = HIDWORD(v117[0]) - (v58 - v40);
        v64 = (int)v40 + (int)v43 > v58;
        if ((int)v40 + (int)v43 <= v58)
          v65 = v44;
        else
          v65 = v63;
        if ((int)v40 + (int)v43 <= v58)
          v43 = v43;
        else
          v43 = (v58 - v40);
        if (v64)
          v66 = v63 + v106;
        else
          v66 = v113;
        v67 = &v115[v62];
        v68 = &v111[v62];
        v69 = &v110[v62];
        v70 = &v114[v62];
        if (!(_DWORD)v12)
          v70 = 0;
        v109(a1, a2 + 4 * (v98 * (unint64_t)v108 + v40), v40, v108, v43, v107, v65, v66, v67, v68, v69, v70);
        v44 = 0;
        v40 = (v43 + v40);
        v41 = (v43 + v41);
        LODWORD(v43) = HIDWORD(v117[0]);
        v42 = v106;
      }
      while (v40 < v58);
    }
    v8 = v99;
    v71 = v100;
    if ((v100 & 1) != 0)
      v72 = -v107;
    else
      v72 = v107;
    v108 += v72;
    v37 += v107;
  }
  while (v37 < v99);
  v73 = 1;
LABEL_64:
  if (v71 >= 2)
  {
    v87 = 0;
    for (i = 0; i != v99; ++i)
    {
      v89 = a2 + 4 * (i * v9);
      v90 = (_DWORD *)(v89 + 4 * v98 - 4);
      if (v89 < (unint64_t)v90)
      {
        v91 = a2 + 4 + 4 * v87;
        do
        {
          v92 = *(_DWORD *)(v91 - 4);
          *(_DWORD *)(v91 - 4) = *v90;
          *v90-- = v92;
          v93 = v91 >= (unint64_t)v90;
          v91 += 4;
        }
        while (!v93);
      }
      v87 += v9;
    }
  }
LABEL_73:
  _TIFFfreeExt(*(_QWORD *)a1, v116);
  return v73;
}

uint64_t gtStripSeparate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _DWORD *v103;
  unint64_t v104;
  int v105;
  BOOL v106;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  size_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  void (*v120)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  char *v121;
  char *v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  char *v126;
  uint64_t v127;
  char *v128;
  unsigned int v129;
  char *v130;

  v8 = a4;
  v10 = a2;
  v12 = *(_QWORD *)a1;
  v120 = *(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 72);
  v130 = 0;
  v14 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v15 = _cg_TIFFStripSize(v12, a2, a3, a4, a5, a6, a7, a8);
  if (v14)
    v20 = 4;
  else
    v20 = 3;
  v110 = v15;
  v112 = _TIFFMultiplySSize(v12, v20, v15, "gtStripSeparate", v16, v17, v18, v19);
  if (!v112)
    return 0;
  v119 = setorientation(a1);
  if ((v119 & 1) != 0)
  {
    if ((a3 & 0x80000000) != 0)
    {
      v92 = (const char *)TIFFFileName(v12);
      v98 = "Width overflow";
      goto LABEL_53;
    }
    v123 = v14;
    v27 = v8 - 1;
    v118 = -2 * a3;
  }
  else
  {
    v123 = v14;
    v27 = 0;
    v118 = 0;
  }
  v28 = *(unsigned __int16 *)(a1 + 36);
  if (v28 >= 4)
    v29 = 3;
  else
    v29 = 0x1000300010001uLL >> (16 * v28);
  v129 = 0;
  _cg_TIFFGetFieldDefaulted(v12, 278, v21, v22, v23, v24, v25, v26, (uint64_t)&v129);
  if (!v129)
  {
    v92 = (const char *)TIFFFileName(v12);
    v98 = "rowsperstrip is zero";
LABEL_53:
    TIFFErrorExtR(v12, v92, v98, v93, v94, v95, v96, v97, v108);
    return 0;
  }
  v37 = _cg_TIFFScanlineSize(v12, v30, v31, v32, v33, v34, v35, v36);
  v43 = v13 - a3;
  if (v13 < a3)
    v43 = 0;
  v117 = v43;
  if (!v8)
  {
    v91 = 1;
    goto LABEL_65;
  }
  v44 = v8;
  v125 = v27;
  v45 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v128 = 0;
  v114 = (v28 < 4) & (0xBu >> (v28 & 0xF));
  v109 = v29;
  v46 = a3;
  v111 = 0x7FFFFFFFFFFFFFFFuLL / v37;
  v115 = v12;
  v116 = a3;
  v47 = v123;
  v127 = v37;
  v113 = v8;
  while (1)
  {
    v48 = *(_DWORD *)(a1 + 136) + v45;
    if (v129 - v48 % v129 + v45 <= v44)
      v49 = v129 - v48 % v129;
    else
      v49 = v44 - v45;
    v50 = v49 + v48 % v129;
    if (v37 >= 1 && v111 < v50)
    {
      v92 = (const char *)TIFFFileName(v12);
      v98 = "Integer overflow in gtStripSeparate";
      goto LABEL_53;
    }
    v124 = v49;
    v51 = v44;
    v52 = v10;
    v53 = v46;
    v54 = v130;
    v55 = _cg_TIFFComputeStrip(v12, v48, 0, v38, v39, v40, v41, v42);
    v60 = v127 * v50;
    if (v54)
      break;
    v67 = _TIFFReadEncodedStripAndAllocBuffer(v12, v55, &v130, v112, v60, v57, v58, v59);
    v128 = v130;
    v46 = v53;
    v10 = v52;
    v44 = v51;
    v66 = v116;
    if (v67 == -1 && (!v130 || *(_DWORD *)(a1 + 8)))
    {
      v91 = 0;
      goto LABEL_58;
    }
    if (v114)
    {
      v68 = &v130[3 * v110];
      if (!v47)
        v68 = 0;
      v126 = v68;
      v121 = v130;
      v122 = v130;
      v12 = v115;
      goto LABEL_41;
    }
    v122 = &v130[v110];
    v121 = &v130[v110 + v110];
    v69 = &v121[v110];
    if (!v47)
      v69 = 0;
    v126 = v69;
    v12 = v115;
LABEL_37:
    v70 = _cg_TIFFComputeStrip(v12, v48, 1u, v61, v62, v63, v64, v65);
    if (_cg_TIFFReadEncodedStrip(v12, v70, v122, v60, v71, v72, v73, v74) == -1 && *(_DWORD *)(a1 + 8)
      || (v80 = _cg_TIFFComputeStrip(v12, v48, 2u, v75, v76, v77, v78, v79),
          _cg_TIFFReadEncodedStrip(v12, v80, v121, v60, v81, v82, v83, v84) == -1)
      && *(_DWORD *)(a1 + 8))
    {
LABEL_55:
      v91 = 0;
      v44 = v113;
      goto LABEL_58;
    }
LABEL_41:
    if (v47)
    {
      v85 = _cg_TIFFComputeStrip(v12, v48, v109, v61, v62, v63, v64, v65);
      if (_cg_TIFFReadEncodedStrip(v12, v85, v126, v60, v86, v87, v88, v89) == -1)
      {
        if (*(_DWORD *)(a1 + 8))
          goto LABEL_55;
      }
    }
    v108 = (_BYTE)v128 + v127 * ((*(_DWORD *)(a1 + 136) + v45) % v129) + *(_WORD *)(a1 + 30) * *(_BYTE *)(a1 + 140);
    v120(a1, v10 + 4 * v66 * (unint64_t)v125, 0, v125, v46, v124, v117, v118);
    v37 = v127;
    if ((v119 & 1) != 0)
      v90 = -v124;
    else
      v90 = v124;
    v125 += v90;
    v45 += v124;
    v44 = v113;
    if (v45 >= v113)
    {
      v91 = 1;
      goto LABEL_58;
    }
  }
  if (_cg_TIFFReadEncodedStrip(v12, v55, v128, v60, v56, v57, v58, v59) != -1 || !*(_DWORD *)(a1 + 8))
  {
    v46 = v53;
    v10 = v52;
    v12 = v115;
    v66 = v116;
    if ((v114 & 1) != 0)
      goto LABEL_41;
    goto LABEL_37;
  }
  v91 = 0;
  LODWORD(v46) = v53;
  v10 = v52;
  v44 = v51;
  v66 = v116;
LABEL_58:
  if (v119 >= 2)
  {
    v99 = 0;
    v100 = 0;
    v101 = v44;
    do
    {
      v102 = v10 + 4 * (v100 * v46);
      v103 = (_DWORD *)(v102 + 4 * v66 - 4);
      if (v102 < (unint64_t)v103)
      {
        v104 = v10 + 4 + 4 * v99;
        do
        {
          v105 = *(_DWORD *)(v104 - 4);
          *(_DWORD *)(v104 - 4) = *v103;
          *v103-- = v105;
          v106 = v104 >= (unint64_t)v103;
          v104 += 4;
        }
        while (!v106);
      }
      ++v100;
      v99 += v46;
    }
    while (v100 != v101);
  }
LABEL_65:
  _TIFFfreeExt(*(_QWORD *)a1, v130);
  return v91;
}

void putRGBAAseparate8bittile(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11, unsigned __int8 *a12)
{
  unsigned int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;

  for (; a6; --a6)
  {
    v16 = a5;
    if (a5 >= 8)
    {
      do
      {
        *a2 = *a9 | (*a10 << 8) | (*a11 << 16) | (*a12 << 24);
        a2[1] = a9[1] | (a10[1] << 8) | (a11[1] << 16) | (a12[1] << 24);
        a2[2] = a9[2] | (a10[2] << 8) | (a11[2] << 16) | (a12[2] << 24);
        a2[3] = a9[3] | (a10[3] << 8) | (a11[3] << 16) | (a12[3] << 24);
        a2[4] = a9[4] | (a10[4] << 8) | (a11[4] << 16) | (a12[4] << 24);
        a2[5] = a9[5] | (a10[5] << 8) | (a11[5] << 16) | (a12[5] << 24);
        a2[6] = a9[6] | (a10[6] << 8) | (a11[6] << 16) | (a12[6] << 24);
        v17 = a9 + 8;
        v18 = a9[7] | (a10[7] << 8) | (a11[7] << 16) | (a12[7] << 24);
        v19 = a10 + 8;
        v20 = a11 + 8;
        v21 = a12 + 8;
        v22 = a2 + 8;
        v16 -= 8;
        a12 += 8;
        a11 += 8;
        a2[7] = v18;
        a10 += 8;
        a9 = v17;
        a2 += 8;
      }
      while (v16 > 7);
      a2 = v22;
      a9 = v17;
      a10 = v19;
      a11 = v20;
      a12 = v21;
    }
    switch(v16)
    {
      case 1u:
        goto LABEL_12;
      case 2u:
        goto LABEL_11;
      case 3u:
        goto LABEL_10;
      case 4u:
        goto LABEL_9;
      case 5u:
        goto LABEL_8;
      case 6u:
        goto LABEL_7;
      case 7u:
        v24 = *a9++;
        v23 = v24;
        v25 = *a10++;
        v26 = v23 | (v25 << 8);
        v27 = *a11++;
        v28 = v26 | (v27 << 16);
        v29 = *a12++;
        *a2++ = v28 | (v29 << 24);
LABEL_7:
        v31 = *a9++;
        v30 = v31;
        v32 = *a10++;
        v33 = v30 | (v32 << 8);
        v34 = *a11++;
        v35 = v33 | (v34 << 16);
        v36 = *a12++;
        *a2++ = v35 | (v36 << 24);
LABEL_8:
        v38 = *a9++;
        v37 = v38;
        v39 = *a10++;
        v40 = v37 | (v39 << 8);
        v41 = *a11++;
        v42 = v40 | (v41 << 16);
        v43 = *a12++;
        *a2++ = v42 | (v43 << 24);
LABEL_9:
        v45 = *a9++;
        v44 = v45;
        v46 = *a10++;
        v47 = v44 | (v46 << 8);
        v48 = *a11++;
        v49 = v47 | (v48 << 16);
        v50 = *a12++;
        *a2++ = v49 | (v50 << 24);
LABEL_10:
        v52 = *a9++;
        v51 = v52;
        v53 = *a10++;
        v54 = v51 | (v53 << 8);
        v55 = *a11++;
        v56 = v54 | (v55 << 16);
        v57 = *a12++;
        *a2++ = v56 | (v57 << 24);
LABEL_11:
        v59 = *a9++;
        v58 = v59;
        v60 = *a10++;
        v61 = v58 | (v60 << 8);
        v62 = *a11++;
        v63 = v61 | (v62 << 16);
        v64 = *a12++;
        *a2++ = v63 | (v64 << 24);
LABEL_12:
        v66 = *a9++;
        v65 = v66;
        v67 = *a10++;
        v68 = v65 | (v67 << 8);
        v69 = *a11++;
        v70 = v68 | (v69 << 16);
        v71 = *a12++;
        *a2++ = v70 | (v71 << 24);
        break;
      default:
        break;
    }
    a9 += a7;
    a10 += a7;
    a11 += a7;
    a12 += a7;
    a2 += a8;
  }
}

uint64_t putRGBUAseparate8bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11, unsigned __int8 *a12)
{
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;

  for (; a6; --a6)
  {
    if (a5)
    {
      v16 = *(_QWORD *)(result + 120);
      v17 = a5;
      do
      {
        v19 = *a12++;
        v18 = v19;
        v20 = v16 + ((unint64_t)v19 << 8);
        v21 = *a9++;
        v22 = *(unsigned __int8 *)(v20 + v21);
        v23 = *a10++;
        v24 = *(unsigned __int8 *)(v20 + v23);
        v25 = *a11++;
        *a2++ = v22 | (v18 << 24) | (v24 << 8) | (*(unsigned __int8 *)(v20 + v25) << 16);
        --v17;
      }
      while (v17);
    }
    a9 += a7;
    a10 += a7;
    a11 += a7;
    a12 += a7;
    a2 += a8;
  }
  return result;
}

void putRGBseparate8bittile(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11)
{
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  for (; a6; --a6)
  {
    v14 = a5;
    if (a5 >= 8)
    {
      do
      {
        *a2 = *a9 | (*a10 << 8) | (*a11 << 16) | 0xFF000000;
        a2[1] = a9[1] | (a10[1] << 8) | (a11[1] << 16) | 0xFF000000;
        a2[2] = a9[2] | (a10[2] << 8) | (a11[2] << 16) | 0xFF000000;
        a2[3] = a9[3] | (a10[3] << 8) | (a11[3] << 16) | 0xFF000000;
        a2[4] = a9[4] | (a10[4] << 8) | (a11[4] << 16) | 0xFF000000;
        a2[5] = a9[5] | (a10[5] << 8) | (a11[5] << 16) | 0xFF000000;
        a2[6] = a9[6] | (a10[6] << 8) | (a11[6] << 16) | 0xFF000000;
        v15 = a9 + 8;
        v16 = a10 + 8;
        v17 = a11 + 8;
        v18 = a2 + 8;
        v14 -= 8;
        a2[7] = a9[7] | (a10[7] << 8) | (a11[7] << 16) | 0xFF000000;
        a2 += 8;
        a11 += 8;
        a10 += 8;
        a9 += 8;
      }
      while (v14 > 7);
      a9 = v15;
      a10 = v16;
      a11 = v17;
      a2 = v18;
    }
    switch(v14)
    {
      case 1u:
        goto LABEL_12;
      case 2u:
        goto LABEL_11;
      case 3u:
        goto LABEL_10;
      case 4u:
        goto LABEL_9;
      case 5u:
        goto LABEL_8;
      case 6u:
        goto LABEL_7;
      case 7u:
        v20 = *a9++;
        v19 = v20;
        v22 = *a10++;
        v21 = v22;
        v23 = *a11++;
        *a2++ = v19 | (v21 << 8) | (v23 << 16) | 0xFF000000;
LABEL_7:
        v25 = *a9++;
        v24 = v25;
        v27 = *a10++;
        v26 = v27;
        v28 = *a11++;
        *a2++ = v24 | (v26 << 8) | (v28 << 16) | 0xFF000000;
LABEL_8:
        v30 = *a9++;
        v29 = v30;
        v32 = *a10++;
        v31 = v32;
        v33 = *a11++;
        *a2++ = v29 | (v31 << 8) | (v33 << 16) | 0xFF000000;
LABEL_9:
        v35 = *a9++;
        v34 = v35;
        v37 = *a10++;
        v36 = v37;
        v38 = *a11++;
        *a2++ = v34 | (v36 << 8) | (v38 << 16) | 0xFF000000;
LABEL_10:
        v40 = *a9++;
        v39 = v40;
        v42 = *a10++;
        v41 = v42;
        v43 = *a11++;
        *a2++ = v39 | (v41 << 8) | (v43 << 16) | 0xFF000000;
LABEL_11:
        v45 = *a9++;
        v44 = v45;
        v47 = *a10++;
        v46 = v47;
        v48 = *a11++;
        *a2++ = v44 | (v46 << 8) | (v48 << 16) | 0xFF000000;
LABEL_12:
        v50 = *a9++;
        v49 = v50;
        v52 = *a10++;
        v51 = v52;
        v53 = *a11++;
        *a2++ = v49 | (v51 << 8) | (v53 << 16) | 0xFF000000;
        break;
      default:
        break;
    }
    a9 += a7;
    a10 += a7;
    a11 += a7;
    a2 += a8;
  }
}

uint64_t putRGBAAseparate16bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  int v18;

  for (; a6; --a6)
  {
    if (a5)
    {
      v16 = 0;
      v17 = *(_QWORD *)(result + 128);
      v18 = a5;
      do
      {
        *a2++ = *(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a9 + v16)) | (*(unsigned __int8 *)(v17
                                                                                                  + *(unsigned __int16 *)(a10 + v16)) << 8) | (*(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a11 + v16)) << 16) | (*(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a12 + v16)) << 24);
        v16 += 2;
        --v18;
      }
      while (v18);
      a12 += v16;
      a11 += v16;
      a10 += v16;
      a9 += v16;
    }
    a9 += 2 * a7;
    a10 += 2 * a7;
    a11 += 2 * a7;
    a12 += 2 * a7;
    a2 += a8;
  }
  return result;
}

uint64_t putRGBUAseparate16bittile(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  for (; a6; --a6)
  {
    if (a5)
    {
      v16 = 0;
      v18 = *(_QWORD *)(result + 120);
      v17 = *(_QWORD *)(result + 128);
      v19 = a5;
      do
      {
        v20 = v18 + ((unint64_t)*(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a12 + v16)) << 8);
        *a2++ = *(unsigned __int8 *)(v20 + *(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a9 + v16))) | (*(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a12 + v16)) << 24) | (*(unsigned __int8 *)(v20 + *(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a10 + v16))) << 8) | (*(unsigned __int8 *)(v20 + *(unsigned __int8 *)(v17 + *(unsigned __int16 *)(a11 + v16))) << 16);
        v16 += 2;
        --v19;
      }
      while (v19);
      a12 += v16;
      a11 += v16;
      a10 += v16;
      a9 += v16;
    }
    a9 += 2 * a7;
    a10 += 2 * a7;
    a11 += 2 * a7;
    a12 += 2 * a7;
    a2 += a8;
  }
  return result;
}

uint64_t putRGBseparate16bittile(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int16 *a9, unsigned __int16 *a10, unsigned __int16 *a11)
{
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;

  for (; a6; --a6)
  {
    if (a5)
    {
      v14 = *(_QWORD *)(result + 128);
      v15 = a5;
      do
      {
        v16 = *a9++;
        v17 = *(unsigned __int8 *)(v14 + v16);
        v18 = *a10++;
        v19 = *(unsigned __int8 *)(v14 + v18);
        v20 = *a11++;
        *a2++ = v17 | (v19 << 8) | (*(unsigned __int8 *)(v14 + v20) << 16) | 0xFF000000;
        --v15;
      }
      while (v15);
    }
    a9 += a7;
    a10 += a7;
    a11 += a7;
    a2 += a8;
  }
  return result;
}

uint64_t putCMYKseparate8bittile(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11, unsigned __int8 *a12)
{
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t result;

  for (; a6; --a6)
  {
    if (a5)
    {
      v16 = a5;
      do
      {
        v18 = *a12++;
        v17 = v18;
        v19 = *a9++;
        v17 ^= 0xFFu;
        v20 = 32897 * (v19 ^ 0xFF) * v17;
        v21 = *a10++;
        v22 = 32897 * (v21 ^ 0xFF) * v17;
        v23 = *a11++;
        result = (v22 >> 15) & 0x1FF00;
        *a2++ = result | (v20 >> 23) | ((32897 * (v23 ^ 0xFFu) * v17) >> 7) & 0xFF0000 | 0xFF000000;
        --v16;
      }
      while (v16);
    }
    a9 += a7;
    a10 += a7;
    a11 += a7;
    a12 += a7;
    a2 += a8;
  }
  return result;
}

_QWORD *putseparate8bitYCbCr11tile(_QWORD *result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11)
{
  int v11;
  _QWORD *v14;
  uint64_t v17;
  uint64_t v18;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  if (a6)
  {
    v11 = a6;
    v14 = result;
    v17 = a7;
    v18 = 4 * a8;
    do
    {
      v20 = a5;
      do
      {
        v27 = 0;
        v26 = 0;
        v22 = *a9++;
        v21 = v22;
        v24 = *a10++;
        v23 = v24;
        v25 = *a11++;
        result = TIFFYCbCrtoRGB((_QWORD *)v14[13], v21, v23, v25, (int *)&v27 + 1, (int *)&v27, &v26);
        *a2++ = HIDWORD(v27) | ((_DWORD)v27 << 8) | (v26 << 16) | 0xFF000000;
        --v20;
      }
      while (v20);
      a9 += v17;
      a10 += v17;
      a11 += v17;
      a2 = (unsigned int *)((char *)a2 + v18);
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t IIOScanner::lookupVal8(IIOScanner *this)
{
  unsigned int Val8;
  uint64_t v3;

  Val8 = IIOScanner::getVal8(this);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    LOBYTE(Val8) = *(_BYTE *)(v3 + Val8);
  return (char)Val8;
}

uint64_t IIOScanner::getVal24(IIOScanner *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 3);
  v2 = v1 + 2;
  if ((unint64_t)(v1 + 2) >= *((_QWORD *)this + 2))
  {
    LogError("getVal24", 196, "*** IIOScanner::getVal24 reached EOF\n");
    *((_DWORD *)this + 16) = -39;
    exception = __cxa_allocate_exception(4uLL);
    *exception = -39;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  if (*((_BYTE *)this + 68))
    v3 = *((_QWORD *)this + 3);
  else
    v3 = v1 + 2;
  if (!*((_BYTE *)this + 68))
    v2 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 1) + v3) | (*(unsigned __int8 *)(v1 + *((_QWORD *)this + 1) + 1) << 8) | (*(unsigned __int8 *)(*((_QWORD *)this + 1) + v2) << 16);
  *((_QWORD *)this + 3) = v1 + 3;
  return v4;
}

uint64_t IIOScanner::getOSType(IIOScanner *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 3);
  if ((unint64_t)(v1 + 3) >= *((_QWORD *)this + 2))
  {
    LogError("getOSType", 234, "*** IIOScanner::getOSType reached EOF\n");
    *((_DWORD *)this + 16) = -39;
    exception = __cxa_allocate_exception(4uLL);
    *exception = -39;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  LODWORD(v2) = *(_DWORD *)(*((_QWORD *)this + 1) + v1);
  v3 = bswap32(v2);
  if (*((_BYTE *)this + 68))
    v2 = v3;
  else
    v2 = v2;
  *((_QWORD *)this + 3) = v1 + 4;
  return v2;
}

unint64_t IIOScanner::getVal64(IIOScanner *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _DWORD *exception;

  v1 = *((_QWORD *)this + 3);
  if ((unint64_t)(v1 + 7) >= *((_QWORD *)this + 2))
  {
    LogError("getVal64", 254, "*** IIOScanner::getVal64 reached EOF\n");
    *((_DWORD *)this + 16) = -39;
    exception = __cxa_allocate_exception(4uLL);
    *exception = -39;
    __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
  }
  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + v1);
  v3 = bswap64(v2);
  if (!*((_BYTE *)this + 68))
    v2 = v3;
  *((_QWORD *)this + 3) = v1 + 8;
  return v2;
}

unint64_t IIOScanner::getBigTiffTag(unint64_t this, uint64_t a2)
{
  unint64_t v3;
  IIOScanner *Val64;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _DWORD *exception;

  if (a2)
  {
    v3 = this;
    if ((unint64_t)(*(_QWORD *)(this + 24) + 20) >= *(_QWORD *)(this + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      LogError("getBigTiffTag", 383, "*** IIOScanner::getBigTiffTag reached EOF\n");
      *(_DWORD *)(v3 + 64) = -39;
      exception = __cxa_allocate_exception(4uLL);
      *exception = -39;
      __cxa_throw(exception, MEMORY[0x1E0DE4EF0], 0);
    }
    *(_WORD *)a2 = IIOScanner::getVal16((IIOScanner *)this);
    *(_WORD *)(a2 + 2) = IIOScanner::getVal16((IIOScanner *)v3);
    Val64 = (IIOScanner *)IIOScanner::getVal64((IIOScanner *)v3);
    *(_QWORD *)(a2 + 4) = Val64;
    v5 = IIOScanner::sizeForTypeAndCount(Val64, *(unsigned __int16 *)(a2 + 2), (uint64_t)Val64);
    this = IIOScanner::getVal64((IIOScanner *)v3);
    v6 = v5 - 1;
    if ((unint64_t)(v5 - 1) <= 6)
    {
      v7 = qword_18822E4D0[v6];
      v8 = 56 - 8 * v6;
      if (*(_BYTE *)(v3 + 68))
        v8 = 0;
      this = (this >> v8) & v7;
    }
    *(_QWORD *)(a2 + 12) = this;
  }
  return this;
}

uint64_t IIOScanner::getString(IIOScanner *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 2);
  v1 = *((_QWORD *)this + 3);
  if (v1 >= v2)
    return 0;
  v3 = *((_QWORD *)this + 1);
  v4 = v3 + v1;
  while (*(_BYTE *)(v3 + v1))
  {
    *((_QWORD *)this + 3) = ++v1;
    if (v2 == v1)
    {
      v1 = v2;
      goto LABEL_7;
    }
  }
  if (v2 != v1)
    goto LABEL_9;
LABEL_7:
  if (*(_BYTE *)(v2 + v3 - 1))
    return 0;
LABEL_9:
  *((_QWORD *)this + 3) = v1 + 1;
  return v4;
}

unint64_t IIOScanner::seek(IIOScanner *this, unint64_t a2, int a3)
{
  char *v3;
  unint64_t v4;

  if (a3)
  {
    if (a3 == 2)
    {
      v3 = (char *)this + 16;
    }
    else
    {
      if (a3 != 1)
      {
        a2 = 0;
        goto LABEL_10;
      }
      v3 = (char *)this + 24;
    }
    a2 += *(_QWORD *)v3;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    v4 = 0;
    goto LABEL_12;
  }
LABEL_10:
  v4 = *((_QWORD *)this + 2);
  if (a2 < v4)
    v4 = a2;
LABEL_12:
  *((_QWORD *)this + 3) = v4;
  return v4;
}

size_t IIOScanner::getBytes(IIOScanner *this, void *__dst, size_t a3)
{
  uint64_t v4;
  size_t v5;

  v4 = *((_QWORD *)this + 3);
  if (v4 + a3 <= *((_QWORD *)this + 2))
  {
    v5 = a3;
    memcpy(__dst, (const void *)(*((_QWORD *)this + 1) + v4), a3);
    v4 = *((_QWORD *)this + 3);
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 3) = v4 + v5;
  return v5;
}

uint64_t IIOScanner::validateBuffer(unsigned __int8 **this, const char *a2)
{
  ERROR_ImageIO_DataBufferIsNotReadable(this[1]);
  return ERROR_ImageIO_DataBufferIsNotBigEnough((uint64_t)this[1], (uint64_t)(this[2] - 1));
}

uint64_t ImageIO_XMP_IO::New_ImageIO_XMP_IO(ImageIO_XMP_IO *this, __CFData *a2)
{
  CFTypeID v3;
  uint64_t v4;
  CFTypeRef v5;
  _QWORD *exception;

  if (!this || (v3 = CFGetTypeID(this), v3 != CFDataGetTypeID()))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "New_ImageIO_XMP_IO, data must be a valid non-NULL CFMutableDataRef";
    *((_BYTE *)exception + 16) = 0;
  }
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E1BAF7F8;
  v5 = CFRetain(this);
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = 0;
  return v4;
}

void sub_188082FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10A1C404F4F037ELL);
  _Unwind_Resume(a1);
}

void ImageIO_XMP_IO::ImageIO_XMP_IO(ImageIO_XMP_IO *this, CFTypeRef cf)
{
  CFTypeRef v3;

  *(_QWORD *)this = &off_1E1BAF7F8;
  v3 = CFRetain(cf);
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = 0;
}

size_t ImageIO_XMP_IO::Read(CFDataRef *this, void *a2, int a3)
{
  size_t v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFDataRef v8;

  LODWORD(v3) = a3;
  BytePtr = CFDataGetBytePtr(this[1]);
  Length = CFDataGetLength(this[1]);
  v8 = this[2];
  if ((uint64_t)v8 + v3 <= Length)
    v3 = v3;
  else
    v3 = (Length - (_DWORD)v8);
  memmove(a2, (char *)v8 + (_QWORD)BytePtr, v3);
  this[2] = (CFDataRef)((char *)this[2] + v3);
  return v3;
}

void ImageIO_XMP_IO::Write(ImageIO_XMP_IO *this, const UInt8 *a2, unsigned int a3)
{
  uint64_t v6;
  CFIndex v7;
  const __CFData *v8;
  uint64_t v9;
  CFIndex Length;
  UInt8 *MutableBytePtr;

  v6 = *((_QWORD *)this + 2);
  if (v6 == CFDataGetLength(*((CFDataRef *)this + 1)))
  {
    CFDataAppendBytes(*((CFMutableDataRef *)this + 1), a2, a3);
  }
  else
  {
    v7 = *((_QWORD *)this + 2) + a3;
    if (v7 > CFDataGetLength(*((CFDataRef *)this + 1)))
    {
      v8 = (const __CFData *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2) + a3;
      Length = CFDataGetLength(v8);
      CFDataIncreaseLength(v8, v9 - Length);
    }
    MutableBytePtr = CFDataGetMutableBytePtr(*((CFMutableDataRef *)this + 1));
    memmove(&MutableBytePtr[*((_QWORD *)this + 2)], a2, a3);
  }
  *((_QWORD *)this + 2) += a3;
}

uint64_t ImageIO_XMP_IO::Seek(uint64_t a1, uint64_t a2, int a3)
{
  CFIndex Length;
  const __CFData *v7;
  CFIndex v8;

  Length = CFDataGetLength(*(CFDataRef *)(a1 + 8));
  switch(a3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      a2 += *(_QWORD *)(a1 + 16);
      goto LABEL_6;
    case 2:
      a2 += Length;
LABEL_6:
      *(_QWORD *)(a1 + 16) = a2;
      goto LABEL_8;
  }
  a2 = *(_QWORD *)(a1 + 16);
LABEL_8:
  if (a2 <= Length)
  {
    if (a2 < 0)
    {
      a2 = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    v7 = *(const __CFData **)(a1 + 8);
    v8 = CFDataGetLength(v7);
    CFDataIncreaseLength(v7, a2 - v8);
    return *(_QWORD *)(a1 + 16);
  }
  return a2;
}

CFIndex ImageIO_XMP_IO::Length(CFDataRef *this)
{
  return CFDataGetLength(this[1]);
}

void ImageIO_XMP_IO::Truncate(CFDataRef *this, CFIndex a2)
{
  _QWORD *exception;

  if (CFDataGetLength(this[1]) < a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "ImageIO_XMP_IO::Truncate, new length is longer than current length";
    *((_BYTE *)exception + 16) = 0;
  }
  if ((uint64_t)this[2] > a2)
    this[2] = (CFDataRef)a2;
  CFDataSetLength(this[1], a2);
}

CFDataRef ImageIO_XMP_IO::DeriveTemp(CFDataRef *this)
{
  ImageIO_XMP_IO *MutableCopy;
  __CFData *v3;
  ImageIO_XMP_IO *v4;
  uint64_t v5;

  if (!this[4])
  {
    MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, this[1]);
    if (MutableCopy)
    {
      v4 = MutableCopy;
      v5 = ImageIO_XMP_IO::New_ImageIO_XMP_IO(MutableCopy, v3);
      *(_BYTE *)(v5 + 24) = 1;
      this[4] = (CFDataRef)v5;
      CFRelease(v4);
    }
  }
  return this[4];
}

uint64_t ImageIO_XMP_IO::AbsorbTemp(ImageIO_XMP_IO *this)
{
  _QWORD *v2;
  const __CFData *v3;
  CFIndex v4;
  __CFData *v5;
  const UInt8 *BytePtr;
  _QWORD *exception;
  CFRange v9;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "XMPFiles_IO::AbsorbTemp, no temp to absorb";
    *((_BYTE *)exception + 16) = 0;
  }
  v3 = (const __CFData *)v2[1];
  v4 = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  CFDataSetLength(*((CFMutableDataRef *)this + 1), v4);
  v5 = (__CFData *)*((_QWORD *)this + 1);
  BytePtr = CFDataGetBytePtr(v3);
  v9.location = 0;
  v9.length = v4;
  CFDataReplaceBytes(v5, v9, BytePtr, v4);
  return (*(uint64_t (**)(ImageIO_XMP_IO *))(*(_QWORD *)this + 56))(this);
}

uint64_t ImageIO_XMP_IO::DeleteTemp(ImageIO_XMP_IO *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    *((_QWORD *)this + 4) = 0;
  }
  return result;
}

void ImageIO_XMP_IO::~ImageIO_XMP_IO(ImageIO_XMP_IO *this)
{
  const void *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E1BAF7F8;
  v3 = (_QWORD *)((char *)this + 8);
  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  *v3 = 0;
  v3[1] = 0;
  if (*((_QWORD *)this + 4))
    (*(void (**)(ImageIO_XMP_IO *))(*(_QWORD *)this + 56))(this);
}

{
  ImageIO_XMP_IO::~ImageIO_XMP_IO(this);
  JUMPOUT(0x18D761C30);
}

void IIO_Writer_ICO::~IIO_Writer_ICO(IIO_Writer_ICO *this, uint64_t a2, const char *a3)
{
  _cg_jpeg_mem_term(this, a2, a3);
  JUMPOUT(0x18D761C30);
}

uint64_t IIO_Writer_ICO::write(IIO_Writer_ICO *this, IIOImageWriteSession *a2, IIOImageDestination *a3)
{
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  ICOWritePlugin::ICOWritePlugin((ICOWritePlugin *)v5, a2, a3);
  v3 = ICOWritePlugin::writeAll((IIOImageDestination **)v5);
  ICOWritePlugin::~ICOWritePlugin((ICOWritePlugin *)v5);
  return v3;
}

void sub_1880834D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ICOWritePlugin::~ICOWritePlugin((ICOWritePlugin *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880834BCLL);
}

void JP2WritePlugin::~JP2WritePlugin(JP2WritePlugin *this, uint64_t a2, const char *a3)
{
  _cg_jpeg_mem_term(this, a2, a3);
  JUMPOUT(0x18D761C30);
}

uint64_t JP2WritePlugin::writeOneImage(JP2WritePlugin *this, CGImage *a2, IIODictionary *a3, IIODictionary *a4)
{
  return 4294967240;
}

uint64_t JP2WritePlugin::writeOne(JP2WritePlugin *this, IIOImagePixelDataProvider *a2, IIODictionary *a3, IIODictionary *a4)
{
  uint64_t SourceGeomColorSpace;
  CGColorSpace *v8;
  unsigned int Error;
  unsigned int appleflags;
  size_t NumberOfComponents;
  size_t v12;
  float FloatForKey;
  float v14;
  unsigned int Uint32ForKey;
  uint64_t v16;
  float v17;
  float v18;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24[4];
  __int128 v25;
  __int128 v26;
  CFTypeRef cf[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD v33[4];
  __int128 v34;
  uint64_t v35;

  v35 = 0;
  v34 = 0u;
  memset(v33, 0, sizeof(v33));
  SourceGeomColorSpace = IIOImagePlus::getSourceGeomColorSpace(a2);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v26 = 0u;
  *(_OWORD *)cf = 0u;
  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  v21 = 0;
  if (!SourceGeomColorSpace)
    return 4294967246;
  v8 = (CGColorSpace *)SourceGeomColorSpace;
  v33[1] = *((_QWORD *)this + 2);
  *((_QWORD *)&v34 + 1) = MyWrite;
  *(_QWORD *)&v25 = IIOImageSource::count(a2);
  *((_QWORD *)&v25 + 1) = IIO_Reader::testHeaderSize(a2);
  Error = _cg_GifLastError((uint64_t)a2);
  *(_QWORD *)&v28 = Error;
  appleflags = _cg_png_get_appleflags((uint64_t)a2);
  *(_QWORD *)&v29 = appleflags;
  *((_QWORD *)&v29 + 1) = IIOImagePlus::sourceImageProvider(a2);
  HIDWORD(cf[1]) = IIOImagePixelDataProvider::getAlphaInfo(a2);
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(v8);
  if ((HIDWORD(cf[1]) - 1) >= 4)
    v12 = NumberOfComponents;
  else
    v12 = NumberOfComponents + 1;
  *((_QWORD *)&v26 + 1) = NumberOfComponents;
  *((_QWORD *)&v28 + 1) = v12;
  if (v12 != appleflags / Error)
  {
    _cg_jpeg_mem_term("writeOne", 354, "*** ERROR numChannels != (bpp / bpc)  (%d != (%d / %d)\n", v12, appleflags, Error);
    return 4294967246;
  }
  if (IIODictionary::containsKey(a3, CFSTR("kCGImageDestinationLossyCompressionQuality")))
  {
    FloatForKey = IIODictionary::getFloatForKey(a3, CFSTR("kCGImageDestinationLossyCompressionQuality"));
    v14 = 1.0;
    if (FloatForKey > 1.0)
      FloatForKey = 1.0;
    if (FloatForKey < 0.0)
      FloatForKey = 0.0;
    if (FloatForKey < 1.0)
    {
      if (FloatForKey >= 0.03)
      {
        v20 = logf(1.0 - FloatForKey);
        v14 = 1.0 - exp(v20 * 0.333333333);
      }
      else
      {
        v14 = 0.01;
      }
    }
  }
  else
  {
    v14 = 0.2;
  }
  v23 = 0;
  v22 = 0;
  _cg_JP2InitCompressionSettings((uint64_t)&v22, v14);
  if (IIODictionary::containsKey(a3, CFSTR("kCGImageDestinationRequestedFileSize")))
  {
    Uint32ForKey = IIODictionary::getUint32ForKey(a3, CFSTR("kCGImageDestinationRequestedFileSize"));
    if (Uint32ForKey <= 0x65uLL)
      Uint32ForKey = 101;
    v23 = Uint32ForKey - 100;
  }
  v16 = _cg_JP2CompressorSetup((uint64_t)MyImageSourceReader, (uint64_t)a2, (uint64_t)v33, v24, &v22, &v21);
  if (IIODictionary::containsKey(a3, CFSTR("DPIHeight")))
  {
    if (IIODictionary::containsKey(a3, CFSTR("DPIWidth")))
    {
      v17 = IIODictionary::getFloatForKey(a3, CFSTR("DPIWidth"));
      v18 = IIODictionary::getFloatForKey(a3, CFSTR("DPIHeight"));
      if (v17 != 72.0 || v18 != 72.0)
        _cg_JP2CompressorSetDisplayResolution(v21, v17, v18);
    }
  }
  if (!(_DWORD)v16)
    v16 = _cg_JP2CompressorProcessImage(v21);
  _cg_JP2CompressorTearDown(v21);
  if (cf[0])
    CFRelease(cf[0]);
  return v16;
}

uint64_t JP2WritePlugin::WriteProc(JP2WritePlugin *this, IIOImageDestination *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  IIOWritePlugin::IIOWritePlugin((IIOWritePlugin *)v9, this, a2, 0xEu);
  *(_QWORD *)&v9[0] = &off_1E1BAF858;
  v5 = IIOWritePlugin::writeAll((IIOImageDestination **)v9);
  _cg_jpeg_mem_term(v9, v6, v7);
  return v5;
}

void sub_1880838B0(void *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _cg_jpeg_mem_term(&a9, a2, a3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x18808389CLL);
}

void IIO_Writer_TIFF::~IIO_Writer_TIFF(IIO_Writer_TIFF *this, uint64_t a2, const char *a3)
{
  _cg_jpeg_mem_term(this, a2, a3);
  JUMPOUT(0x18D761C30);
}

uint64_t IIO_Writer_TIFF::write(IIO_Writer_TIFF *this, IIOImageWriteSession *a2, IIOImageDestination *a3)
{
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  TIFFWritePlugin::TIFFWritePlugin((TIFFWritePlugin *)v5, a2, a3);
  v3 = TIFFWritePlugin::writeAll((IIOImageDestination **)v5);
  TIFFWritePlugin::~TIFFWritePlugin((TIFFWritePlugin *)v5);
  return v3;
}

void sub_18808394C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TIFFWritePlugin::~TIFFWritePlugin((TIFFWritePlugin *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188083938);
}

float ASTCBitsPerPixel(int a1, int a2)
{
  float result;
  BOOL v3;

  if (a1 != 4 || (result = 8.0, a2 != 4))
  {
    if (a1 == 5 && a2 == 5)
    {
      return 5.12;
    }
    else if (a1 == 6 && a2 == 6)
    {
      return 3.556;
    }
    else if (a1 != 8 || (result = 2.0, a2 != 8))
    {
      if (a1 == 4 && a2 == 6)
      {
        return 5.333;
      }
      else if (a1 == 8 && a2 == 10)
      {
        return 1.6;
      }
      else
      {
        v3 = a2 == 10 && a1 == 12;
        result = 1.067;
        if (!v3)
          return 8.0;
      }
    }
  }
  return result;
}

_QWORD *IIOTextureHandler::setImp(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), a2);
}

uint64_t CommonASTCReadPlugin::CommonASTCReadPlugin(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  v4 = IIOReadPlugin::IIOReadPlugin(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E1BB1E20;
  v5 = v4 + 472;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 444) = 0;
  *(_QWORD *)(v4 + 452) = 0;
  *(_QWORD *)(v4 + 436) = 0;
  std::allocate_shared[abi:ne180100]<ASTCTextureImp,std::allocator<ASTCTextureImp>,unsigned int &,void>((unsigned int *)(v4 + 208), &v10);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v5, &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(a1 + 464) = 0;
  return a1;
}

void sub_188083AE8(_Unwind_Exception *a1)
{
  IIOReadPlugin *v1;
  uint64_t v2;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v2);
  IIOReadPlugin::~IIOReadPlugin(v1);
  _Unwind_Resume(a1);
}

uint64_t CommonASTCReadPlugin::loadDataFromXPCObject(CommonASTCReadPlugin *this, void *a2)
{
  uint64_t result;
  _QWORD *data;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  size_t length[2];

  result = IIOReadPlugin::loadDataFromXPCObject(this, a2);
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 58) = 0;
  }
  else
  {
    length[0] = 0;
    data = xpc_dictionary_get_data(a2, "iio_xpc_plugin_data_common_astc", length);
    if (length[0] == 24)
    {
      v6 = *(_OWORD *)data;
      *(_QWORD *)((char *)this + 452) = data[2];
      *(_OWORD *)((char *)this + 436) = v6;
      *((_QWORD *)this + 58) = 0;
      std::allocate_shared[abi:ne180100]<ASTCTextureImp,std::allocator<ASTCTextureImp>,unsigned int &,void>((unsigned int *)this + 52, length);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)this + 472, (__int128 *)length);
      v7 = (std::__shared_weak_count *)length[1];
      if (length[1])
      {
        v8 = (unint64_t *)(length[1] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      return 0;
    }
    else
    {
      *((_QWORD *)this + 58) = 0;
      return 4294967246;
    }
  }
  return result;
}

uint64_t CommonASTCReadPlugin::saveDataToXPCObject(CommonASTCReadPlugin *this, void *a2)
{
  uint64_t v4;

  v4 = IIOReadPlugin::saveDataToXPCObject(this, a2);
  if (!(_DWORD)v4)
    iio_xpc_dictionary_add_databuffer(a2, "iio_xpc_plugin_data_common_astc", (char *)this + 436, 0x18uLL);
  return v4;
}

void CommonASTCWritePlugin::CommonASTCWritePlugin(CommonASTCWritePlugin *this, IIOImageWriteSession *a2, IIOImageDestination *a3, unsigned int a4)
{
  uint64_t v4;

  IIOWritePlugin::IIOWritePlugin(this, a2, a3, a4);
  *(_QWORD *)v4 = off_1E1BB2178;
  *(_QWORD *)(v4 + 44) = 0x400000044;
  *(_DWORD *)(v4 + 52) = 4;
  *(_DWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 57) = 0;
  *(_BYTE *)(v4 + 61) = 0;
}

void CommonASTCWritePlugin::~CommonASTCWritePlugin(CommonASTCWritePlugin *this, uint64_t a2, const char *a3)
{
  *(_QWORD *)this = off_1E1BB2178;
  _cg_jpeg_mem_term(this, a2, a3);
}

const __CFDictionary *CommonASTCWritePlugin::handleProperties(const __CFDictionary *this, IIODictionary *a2)
{
  uint64_t v3;
  float FloatForKey;
  float v5;
  float v6;
  unsigned int Uint32ForKey;

  if (a2)
  {
    v3 = (uint64_t)this;
    if (IIODictionary::containsKey(a2, CFSTR("kCGImageDestinationLossyCompressionQuality")))
    {
      FloatForKey = IIODictionary::getFloatForKey(a2, CFSTR("kCGImageDestinationLossyCompressionQuality"));
      v5 = 0.0;
      if (FloatForKey >= 0.0)
      {
        v5 = FloatForKey;
        if (FloatForKey > 1.0)
          v5 = 1.0;
      }
      v6 = (1.0 - v5) * 0.0032;
      *(float *)(v3 + 40) = v6;
    }
    else
    {
      *(_DWORD *)(v3 + 40) = 978433815;
    }
    if ((IIODictionary::containsKey(a2, CFSTR("kCGImagePropertyASTCBlockSize")) & 1) != 0)
    {
      Uint32ForKey = IIODictionary::getUint32ForKey(a2, CFSTR("kCGImagePropertyASTCBlockSize"));
      *(_DWORD *)(v3 + 44) = Uint32ForKey;
    }
    else
    {
      Uint32ForKey = *(_DWORD *)(v3 + 44);
    }
    *(_DWORD *)(v3 + 48) = Uint32ForKey >> 4;
    *(_DWORD *)(v3 + 52) = Uint32ForKey & 0xF;
    *(_BYTE *)(v3 + 56) = IIODictionary::getBoolForKey(a2, CFSTR("kCGImagePropertyASTCUseHDR"));
    *(_BYTE *)(v3 + 57) = IIODictionary::getBoolForKey(a2, CFSTR("kCGImagePropertyASTCUseLZFSE"));
    *(_BYTE *)(v3 + 58) = IIODictionary::getBoolForKey(a2, CFSTR("kCGImagePropertyASTCPreTwiddle"));
    if (IIODictionary::containsKey(a2, CFSTR("kCGImagePropertyASTCFlipVertically")))
      *(_BYTE *)(v3 + 60) = IIODictionary::getBoolForKey(a2, CFSTR("kCGImagePropertyASTCFlipVertically"));
    this = IIODictionary::containsKey(a2, CFSTR("kCGImagePropertyASTCWeightChannelsEqually"));
    if ((_DWORD)this)
    {
      this = (const __CFDictionary *)IIODictionary::getBoolForKey(a2, CFSTR("kCGImagePropertyASTCWeightChannelsEqually"));
      *(_BYTE *)(v3 + 61) = (_BYTE)this;
    }
  }
  return this;
}

_QWORD *std::allocate_shared[abi:ne180100]<ASTCTextureImp,std::allocator<ASTCTextureImp>,unsigned int &,void>@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x110uLL);
  result = std::__shared_ptr_emplace<ASTCTextureImp>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::allocator<ASTCTextureImp>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_188083E74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ASTCTextureImp>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,std::allocator<ASTCTextureImp>,0>(_QWORD *a1, unsigned int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E1BBC2D0;
  ASTCTextureImp::ASTCTextureImp((ASTCTextureImp *)(a1 + 3), *a2);
  return a1;
}

void sub_188083EC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ASTCTextureImp>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BBC2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ASTCTextureImp>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BBC2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

_QWORD *_TIFFcallocExt(_QWORD *a1, int64_t a2, int64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 0;
  if (a2 >= 1 && a3 >= 1)
  {
    if (0x7FFFFFFFFFFFFFFFuLL / a3 < a2)
      return 0;
    if (!a1)
      return _TIFFcalloc(a2, a3);
    v10 = a1[170];
    v11 = a3 * a2;
    if (v10 >= 1 && v11 > v10)
    {
      TIFFErrorExtR((uint64_t)a1, "_TIFFcallocExt", "Memory allocation of %llu bytes is beyond the %llu byte limit defined in open options", a4, a5, a6, a7, a8, v11);
      return 0;
    }
    v12 = a1[171];
    if (v12 < 1)
      return _TIFFcalloc(a2, a3);
    v13 = a1[172];
    if (v11 > 0x7FFFFFFFFFFFFFEFLL || v11 > v12 - v13)
    {
      TIFFErrorExtR((uint64_t)a1, "_TIFFcallocExt", "Cumulated memory allocation of %llu + %llu bytes is beyond the %llu cumulated byte limit defined in open options", a4, a5, a6, a7, a8, v13);
      return 0;
    }
    result = _TIFFcalloc(v11 + 16, 1uLL);
    if (result)
    {
      a1[172] += v11;
      *result = v11;
      result += 2;
    }
  }
  return result;
}

uint64_t _tiffDummyMapProc()
{
  return 0;
}

uint64_t TIFFFileName(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t IIO_Reader_TGA::createReadPlugin(IIO_Reader *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  v4 = operator new();
  v5 = IIO_Reader::osType(a1);
  TGAReadPlugin::TGAReadPlugin(v4, a2, v5);
  return v4;
}

void sub_188084094(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10E1C402E812B4ALL);
  _Unwind_Resume(a1);
}

uint64_t IIO_Reader_TGA::createReadPlugin(IIO_Reader *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;

  v8 = operator new();
  v9 = IIO_Reader::osType(a1);
  TGAReadPlugin::TGAReadPlugin(v8, a2, a3, a4, v9);
  return v8;
}

void sub_188084130(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10E1C402E812B4ALL);
  _Unwind_Resume(a1);
}

__n128 IIOImagePixelDataProvider::srcFormat@<Q0>(IIOImagePixelDataProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)((char *)this + 40);
  v3 = *(_OWORD *)((char *)this + 56);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 9);
  return result;
}

uint64_t IIOImagePixelDataProvider::getDecode(IIOImagePixelDataProvider *this)
{
  return *((_QWORD *)this + 13);
}

unint64_t IIOImagePixelDataProvider::sourceBytesForCoordinates(IIOImagePixelDataProvider *this, CGPoint a2, CGPoint a3, double a4, double a5)
{
  unint64_t v6;
  double y;

  if (a2.x <= 0.0 || a3.y <= a2.y)
  {
    v6 = 0;
    y = a2.y;
  }
  else
  {
    LODWORD(a5) = *((_DWORD *)this + 11);
    v6 = (unint64_t)((double)*((unint64_t *)this + 16) + a2.x * (double)*(unint64_t *)&a5 * -0.125);
    y = a2.y + 1.0;
    a2.x = 0.0;
  }
  if (a3.y > a2.y)
    v6 += *((_QWORD *)this + 16) * (unint64_t)(a3.y - y);
  return v6 + ((*((unsigned int *)this + 11) * (unint64_t)(a3.x - a2.x)) >> 3);
}

uint64_t IIOImagePixelDataProvider::getBytesDataProviderRGB101010(IIOImagePixelDataProvider *this, void *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  CGColorSpace *ColorSpace;
  CGContext *v12;
  CGContext *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  vImage_Buffer src;
  CGRect v22;

  v3 = (unint64_t)a3 / *((_QWORD *)this + 18);
  v4 = *((_QWORD *)this + 16);
  if (!is_mul_ok(v3, v4))
    return 0;
  v5 = a3;
  v8 = v3 * v4;
  v9 = (char *)malloc_type_malloc(v3 * v4, 0x1C1F8BC2uLL);
  if (!v9)
    return 0;
  v10 = v9;
  if (IIOImagePixelDataProvider::getBytesCGAccessSessionNoConvert(this, v9, v8) == v8
    && is_mul_ok(v3, *((_QWORD *)this + 18)))
  {
    ColorSpace = CGImageGetColorSpace(*((CGImageRef *)this + 2));
    if (CGColorSpaceContainsFlexGTCInfo())
    {
      v12 = CGBitmapContextCreate(a2, *((_QWORD *)this + 3), *((_QWORD *)this + 4), *((unsigned int *)this + 20), *((_QWORD *)this + 18), ColorSpace, *((_DWORD *)this + 24));
      if (v12)
      {
        v13 = v12;
        v22.size.width = (double)*((unint64_t *)this + 3);
        v22.size.height = (double)*((unint64_t *)this + 4);
        v22.origin.x = 0.0;
        v22.origin.y = 0.0;
        CGContextDrawImage(v12, v22, *((CGImageRef *)this + 2));
        CGContextFlush(v13);
        CGContextRelease(v13);
      }
    }
    else
    {
      src.data = v10;
      src.height = v3;
      v14 = *((_QWORD *)this + 16);
      src.width = *((_QWORD *)this + 3);
      src.rowBytes = v14;
      dest.data = a2;
      dest.height = v3;
      v15 = *((_QWORD *)this + 18);
      dest.width = src.width;
      dest.rowBytes = v15;
      *(_DWORD *)permuteMap = 197121;
      v16 = *((_DWORD *)this + 20);
      if (v16 == 8)
      {
        vImageConvert_XRGB2101010ToARGB8888(&src, 0xFFu, &dest, 0, 1023, permuteMap, 0);
      }
      else if (v16 == 16)
      {
        v17 = *((_DWORD *)this + 21);
        if (v17 == 64)
        {
          vImageConvert_XRGB2101010ToARGB16U(&src, 0xFFFFu, &dest, 0, 1023, permuteMap, 0);
        }
        else if (v17 == 48)
        {
          iio_convert_XRGB2101010ToRGB16U(&src, &dest, 0);
        }
        else
        {
          LogError("getBytesDataProviderRGB101010", 1202, "*** %s: unhandled bpc: %d  bpp: %d\n");
        }
      }
      else
      {
        LogError("getBytesDataProviderRGB101010", 1211, "*** %s: unhandled bpc: %d  bpp: %d\n");
      }
    }
  }
  else
  {
    v5 = 0;
  }
  free(v10);
  return v5;
}

unint64_t IIOImagePixelDataProvider::getBytesCGAccessSessionNoConvert(IIOImagePixelDataProvider *this, char *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t BytesFromAccessSession;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (*((_QWORD *)this + 30))
  {
    v6 = *((_QWORD *)this + 19);
  }
  else
  {
    if (!CGImageGetDataProvider(*((CGImageRef *)this + 2)))
      return 0;
    v7 = CGAccessSessionCreate();
    *((_QWORD *)this + 30) = v7;
    if (!v7)
      return 0;
    v6 = 0;
    *((_QWORD *)this + 19) = 0;
  }
  v8 = 0;
  if (a2)
  {
    v9 = *((_QWORD *)this + 20);
    if (v9 > v6)
    {
      if (v6 + a3 <= v9)
        v8 = a3;
      else
        v8 = v9 - v6;
      BytesFromAccessSession = IIOImagePixelDataProvider::getBytesFromAccessSession(this, a2, v8);
      v11 = *((_QWORD *)this + 20);
      v12 = *((_QWORD *)this + 19) + BytesFromAccessSession;
      if (v12 >= v11)
        v13 = *((_QWORD *)this + 20);
      else
        v13 = *((_QWORD *)this + 19) + BytesFromAccessSession;
      *((_QWORD *)this + 19) = v13;
      if (BytesFromAccessSession != v8 || v12 >= v11)
      {
        v15 = BytesFromAccessSession;
        _cg_jpeg_mem_term("getBytesCGAccessSessionNoConvert", 1363, "*** ERROR: 'getBytesFromAccessSession' - got %ld bytes, expected: %ld\n", BytesFromAccessSession, v8);
        CGAccessSessionRelease();
        *((_QWORD *)this + 30) = 0;
        return v15;
      }
    }
  }
  return v8;
}

uint64_t IIOImagePixelDataProvider::getBytesDataProviderCIF10(IIOImagePixelDataProvider *this, void *a2, uint64_t a3)
{
  vImagePixelCount v4;
  unint64_t v5;
  char *v8;
  char *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  const __CFString *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  size_t v18;
  size_t v19;
  int32_t v20;
  int32_t v21;
  vImage_Error v22;
  const char *v23;
  char *v24;
  CGColorSpace *space;
  uint8_t permuteMap[4];
  vImage_Buffer v28;
  vImage_Buffer v29;
  vImage_Buffer dest;
  vImage_Buffer src;
  _QWORD v32[2];
  vImage_CGImageFormat v33;
  vImage_CGImageFormat v34;

  v4 = (unint64_t)a3 / *((_QWORD *)this + 18);
  v5 = *((_QWORD *)this + 16);
  if (is_mul_ok(v4, v5))
  {
    v8 = (char *)malloc_type_malloc(v4 * v5, 0x594305B5uLL);
    if (v8)
    {
      v9 = v8;
      IIOImagePixelDataProvider::getBytesCGAccessSessionNoConvert(this, v8, *((_QWORD *)this + 16) * v4);
      v10 = *((_QWORD *)this + 18);
      if (is_mul_ok(v4, v10) && (v11 = malloc_type_malloc(v4 * v10, 0x6B97339AuLL)) != 0)
      {
        v12 = v11;
        if (*((_DWORD *)this + 20) == 16)
        {
          v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
          *(_QWORD *)&v34.bitsPerComponent = 0x4000000010;
          space = v13;
          v34.colorSpace = v13;
          v34.bitmapInfo = 4358;
          memset(&v34.version, 0, 20);
          v14 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
          v15 = (const __CFString *)*MEMORY[0x1E0C9D908];
          v16 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D908]);
          *(_QWORD *)&v33.bitsPerComponent = 0x4000000010;
          v33.colorSpace = v16;
          v33.bitmapInfo = 4358;
          memset(&v33.version, 0, 20);
          v17 = CGColorSpaceCreateWithName(v15);
          v32[0] = 0;
          v32[1] = 0;
          IIOColorConverter::IIOColorConverter((IIOColorConverter *)v32, &v34, &v33, v14, v17);
          src.data = v9;
          src.height = v4;
          v18 = *((_QWORD *)this + 16);
          src.width = *((_QWORD *)this + 3);
          src.rowBytes = v18;
          dest.data = v12;
          dest.height = v4;
          v19 = *((_QWORD *)this + 18);
          dest.width = src.width;
          dest.rowBytes = v19;
          v29.data = a2;
          v29.height = v4;
          v29.width = src.width;
          v29.rowBytes = v19;
          v28.data = a2;
          v28.height = v4;
          v28.width = 4 * src.width;
          v28.rowBytes = v19;
          *(_DWORD *)permuteMap = 50462976;
          v20 = CIF10MIN();
          v21 = CIF10MAX();
          v22 = vImageConvert_XRGB2101010ToARGB16F(&src, 1.0, &dest, v20, v21, permuteMap, 0x810u);
          if (v22
            || (v22 = IIOColorConverter::colorConvert((IIOColorConverter *)v32, &dest, &v29)) != 0
            || (v22 = vImageConvert_16Fto16U(&v28, &v28, 0x10u)) != 0)
          {
            v23 = IIO_vImageErrorString(v22);
            LogError("getBytesDataProviderCIF10", 1280, "*** ERROR: CIF10 to RGB16 failed: %d '%s'\n", v22, v23);
          }
          IIOColorConverter::~IIOColorConverter((IIOColorConverter *)v32);
          CGColorSpaceRelease(v17);
          CGColorSpaceRelease(v16);
          CGColorSpaceRelease(v14);
          CGColorSpaceRelease(space);
        }
        free(v9);
        v24 = (char *)v12;
      }
      else
      {
        v24 = v9;
      }
      free(v24);
    }
  }
  return a3;
}

void sub_1880847A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CGColorSpaceRef space, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  CGColorSpace *v30;
  CGColorSpace *v31;
  CGColorSpace *v32;

  CGColorSpaceRelease(v32);
  CGColorSpaceRelease(v31);
  CGColorSpaceRelease(v30);
  CGColorSpaceRelease(space);
  _Unwind_Resume(a1);
}

uint64_t IIOImagePixelDataProvider::getBytesFromAccessSession(IIOImagePixelDataProvider *this, char *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t Bytes;

  if (!a3)
    return 0;
  v3 = a3;
  v5 = 0;
  while (1)
  {
    Bytes = CGAccessSessionGetBytes();
    if (Bytes - 1 >= v3)
      break;
    v5 += Bytes;
    a2 += Bytes;
    v3 -= Bytes;
    if (!v3)
      return v5;
  }
  if (Bytes)
    _cg_jpeg_mem_term("getBytesFromAccessSession", 1318, "*** CGAccessSessionGetBytes returned unexpected amount of data.");
  else
    _cg_jpeg_mem_term("getBytesFromAccessSession", 1315, "*** CGAccessSessionGetBytes did not return any data.");
  return v5;
}

vImagePixelCount IIOImagePixelDataProvider::getBytesCGAccessSessionConvert(CGImageRef *this, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  CGImageRef v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  double v16;
  size_t v17;
  unint64_t v18;
  int v19;
  char *v20;
  uint64_t BytesFromAccessSession;
  vImagePixelCount v22;
  uint64_t v23;
  CGPoint v25;
  CGPoint v26;
  CGPoint v27;
  CGPoint v28;

  if (!this[30])
  {
    if (!CGImageGetDataProvider(this[2]))
      return 0;
    v23 = CGAccessSessionCreate();
    this[30] = (CGImageRef)v23;
    if (!v23)
      return 0;
  }
  v6 = 0;
  if (a2)
  {
    v7 = (unint64_t)this[19];
    v8 = this[20];
    if ((unint64_t)v8 > v7)
    {
      if (v7 + a3 <= (unint64_t)v8)
        v6 = a3;
      else
        v6 = (unint64_t)v8 - v7;
      v9 = (unint64_t)this[18];
      v10 = (double)(8 * (v7 % v9) / *((unsigned int *)this + 21));
      v11 = (double)(v7 / v9);
      v12 = IIOImagePixelDataProvider::endingPointForByteCount((IIOImagePixelDataProvider *)this, v6);
      v14 = v13;
      v25.x = v10;
      v25.y = v11;
      v27.x = v12;
      v27.y = v14;
      v17 = IIOImagePixelDataProvider::sourceBytesForCoordinates((IIOImagePixelDataProvider *)this, v25, v27, v15, v16);
      v18 = v17;
      v19 = *((unsigned __int8 *)this + 248);
      v20 = (char *)a2;
      if (!*((_BYTE *)this + 248))
      {
        v20 = (char *)malloc_type_malloc(v17, 0x7B969EE6uLL);
        if (!v20)
          return 0;
      }
      BytesFromAccessSession = IIOImagePixelDataProvider::getBytesFromAccessSession((IIOImagePixelDataProvider *)this, v20, v18);
      if (BytesFromAccessSession == v18)
      {
        v26.x = v10;
        v26.y = v11;
        v28.x = v12;
        v28.y = v14;
        v22 = IIOImagePixelDataProvider::convertBytesWithRange((IIOImagePixelDataProvider *)this, (unsigned __int8 *)v20, a2, v26, v28, v6);
        if (!v19)
          goto LABEL_16;
      }
      else
      {
        _cg_jpeg_mem_term("getBytesCGAccessSessionConvert", 1430, "CGAccessSessionGetBytes did not return enough bytes. Got %zd, expected %zd.\n", BytesFromAccessSession, v18);
        v22 = 0;
        if (!v19)
LABEL_16:
          free(v20);
      }
      if (this[19] == this[20] || v22 != v6)
      {
        CGAccessSessionRelease();
        this[30] = 0;
        return v22;
      }
    }
  }
  return v6;
}

CFStringRef _CGImagePixelDataProviderCopyFormattingDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("CGImagePixelDataProvider (%p)"), a1);
}

CFStringRef _CGImagePixelDataProviderCopyDescription(const void *a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("CGImagePixelDataProvider (%p)"), a1);
}

uint64_t TIFFFlush(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (!*(_DWORD *)(a1 + 12))
    return 1;
  result = TIFFFlushData(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return result;
  v17 = *(_DWORD *)(a1 + 16) & 0x200008;
  if (v17 != 0x200000)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 12) != 2)
    goto LABEL_8;
  if (!TIFFForceStrileArrayWriting(a1))
  {
    v17 = *(_DWORD *)(a1 + 16) & 0x200008;
LABEL_7:
    if (v17)
    {
LABEL_8:
      result = TIFFRewriteDirectory(a1, v10, v11, v12, v13, v14, v15, v16);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t TIFFFlushData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;

  v8 = *(_DWORD *)(a1 + 16);
  if ((v8 & 0x40) == 0)
    return 1;
  if ((v8 & 0x1000) == 0)
    return TIFFFlushData1(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 16) = v8 & 0xFFFFEFFF;
  result = (*(uint64_t (**)(uint64_t))(a1 + 1000))(a1);
  if ((_DWORD)result)
    return TIFFFlushData1(a1, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t TIFFForceStrileArrayWriting(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  char *v13;
  uint64_t result;
  int v15;
  int v16;
  char v17;

  v2 = _cg_TIFFIsTiled(a1);
  if (!*(_DWORD *)(a1 + 12))
  {
    v12 = *(const char **)a1;
    v13 = "File opened in read-only mode";
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 24))
  {
    v12 = "TIFFForceStrileArrayWriting";
    v13 = "Directory has not yet been written";
    goto LABEL_13;
  }
  v10 = *(_DWORD *)(a1 + 16);
  if ((v10 & 8) != 0)
  {
    v12 = "TIFFForceStrileArrayWriting";
    v13 = "Directory has changes other than the strile arrays. TIFFRewriteDirectory() should be called instead";
    goto LABEL_13;
  }
  v11 = v2;
  if ((v10 & 0x200000) == 0)
  {
    if (*(_WORD *)(a1 + 256)
      && !*(_QWORD *)(a1 + 264)
      && !*(_WORD *)(a1 + 258)
      && !*(_QWORD *)(a1 + 272)
      && *(_WORD *)(a1 + 288)
      && !*(_QWORD *)(a1 + 296)
      && !*(_WORD *)(a1 + 290)
      && !*(_QWORD *)(a1 + 304))
    {
      if (!*(_QWORD *)(a1 + 232))
      {
        result = TIFFSetupStrips(a1, v3, v4, v5, v6, v7, v8, v9);
        if (!(_DWORD)result)
          return result;
      }
      goto LABEL_21;
    }
    v12 = "TIFFForceStrileArrayWriting";
    v13 = "Function not called together with TIFFDeferStrileArrayWriting()";
LABEL_13:
    TIFFErrorExtR(a1, v12, v13, v5, v6, v7, v8, v9, v17);
    return 0;
  }
LABEL_21:
  if (v11)
    v15 = 324;
  else
    v15 = 273;
  result = _TIFFRewriteField(a1, v15, 0x10u, *(unsigned int *)(a1 + 228), *(const void **)(a1 + 232));
  if ((_DWORD)result)
  {
    if (v11)
      v16 = 325;
    else
      v16 = 279;
    result = _TIFFRewriteField(a1, v16, 0x10u, *(unsigned int *)(a1 + 228), *(const void **)(a1 + 240));
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 16) &= 0xFFDFFFBF;
      return 1;
    }
  }
  return result;
}

uint64_t AdobeXMPCore_Int::IMetadataConverterUtils_I::convertXMPMetatoIMetadata@<X0>(AdobeXMPCore_Int::IMetadataConverterUtils_I *this@<X0>, char **a2@<X8>)
{
  return AdobeXMPCore_Int::MetadataConverterUtilsImpl::ConvertOldDOMtoNewDOM(this, a2);
}

uint64_t AdobeXMPCore_Int::MetadataConverterUtilsImpl::ConvertOldDOMtoNewDOM@<X0>(AdobeXMPCore_Int::MetadataConverterUtilsImpl *this@<X0>, char **a2@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v24[2];

  *a2 = 0;
  a2[1] = 0;
  AdobeXMPCore::IMetadata_v1::CreateMetadata(a2);
  if (this)
  {
    if (*((char *)this + 263) < 0)
    {
      v5 = (char *)*((_QWORD *)this + 30);
      v6 = *((_QWORD *)this + 31);
    }
    else
    {
      v5 = (char *)this + 240;
      v6 = *((unsigned __int8 *)this + 263);
    }
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)*a2 + 744))(*a2, v5, v6);
    v7 = *((_QWORD *)this + 38) - *((_QWORD *)this + 37);
    if (v7)
    {
      v8 = 0;
      v9 = v7 >> 3;
      if (v9 <= 1)
        v10 = 1;
      else
        v10 = v9;
      do
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * v8);
        v12 = *(_QWORD *)(v11 + 80) - *(_QWORD *)(v11 + 72);
        if (v12)
        {
          v13 = 0;
          v14 = v12 >> 3;
          if (v14 <= 1)
            v15 = 1;
          else
            v15 = v14;
          do
          {
            v16 = *a2;
            if (*a2)
              v16 += *(_QWORD *)(*(_QWORD *)v16 - 544);
            v17 = a2[1];
            v24[0] = v16;
            v24[1] = v17;
            if (v17)
            {
              v18 = (unint64_t *)(v17 + 8);
              do
                v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }
            AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateAndPopulateNode(v24, *(_QWORD *)(*(_QWORD *)(v11 + 72) + 8 * v13), 0);
            if (v17)
            {
              v20 = (unint64_t *)(v17 + 8);
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v21 - 1, v20));
              if (!v21)
              {
                (*(void (**)(char *))(*(_QWORD *)v17 + 16))(v17);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
              }
            }
            ++v13;
          }
          while (v13 != v15);
        }
        ++v8;
      }
      while (v8 != v10);
    }
  }
  v22 = &(*a2)[*(_QWORD *)(*(_QWORD *)*a2 - 544)];
  return (*(uint64_t (**)(char *))(*(_QWORD *)v22 + 216))(v22);
}

void sub_188084E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(_QWORD *a1, AdobeXMPCore::INode_v1 *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  int v10;

  v10 = 0;
  if (a1)
    a1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 544));
  AdobeXMPCore::INode_v1::MakeShared(a1, a2, &v8);
  v3 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::ConvertNewDOMtoOldDOM(&v8, a2, &v10);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_188084F18(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::MetadataConverterUtilsImpl::ConvertNewDOMtoOldDOM(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v6 = operator new();
  XMPMeta::XMPMeta((XMPMeta *)v6);
  v43 = 0;
  v44 = 0;
  v42 = 0uLL;
  v7.n128_f64[0] = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v42);
  if (*a2)
  {
    v41 = 0uLL;
    (*(void (**)(__int128 *__return_ptr, double))(*(_QWORD *)v42 + 112))(&v41, v7.n128_f64[0]);
    v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 128))(v41);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 48))(v8, a2);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v42, (uint64_t *)&v41);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v41 = 0uLL;
  v12 = v42;
  v40 = v42;
  if (*((_QWORD *)&v42 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (char *)(*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v12 + 128))(v12, v7);
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::INameSpacePrefixMap_I>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataConverterUtilsImpl.cpp", 393, 1, &v41);
  if (*((_QWORD *)&v12 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  v40 = v41;
  if (*((_QWORD *)&v41 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleNode(a1, (XMP_Node *)(v6 + 224), (uint64_t *)&v40, &v43, 1, 0);
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  NormalizeDCArrays((char **)(v6 + 224));
  if ((*(_BYTE *)(v6 + 234) & 2) != 0)
    MoveExplicitAliases((XMP_Node *)(v6 + 224), *a3, (XMPMeta::ErrorCallbackInfo *)(v6 + 352));
  TouchUpDataModel((XMPMeta *)v6, (XMPMeta::ErrorCallbackInfo *)(v6 + 352));
  v23 = *(_QWORD *)(v6 + 296);
  v24 = *(_QWORD *)(v6 + 304);
  if (v24 != v23)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD **)(v23 + 8 * v25);
      if (v26[10] == v26[9])
      {
        (*(void (**)(_QWORD *))(*v26 + 8))(v26);
        v23 = *(_QWORD *)(v6 + 296);
        v27 = *(_QWORD *)(v6 + 304);
        v28 = v23 + 8 * v25;
        v29 = v27 - (v28 + 8);
        if (v27 != v28 + 8)
        {
          memmove((void *)(v23 + 8 * v25), (const void *)(v28 + 8), v27 - (v28 + 8));
          v23 = *(_QWORD *)(v6 + 296);
        }
        v24 = v28 + v29;
        *(_QWORD *)(v6 + 304) = v28 + v29;
      }
      else
      {
        ++v25;
      }
    }
    while (v25 < (v24 - v23) >> 3);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v6;
}

void sub_188085258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(_QWORD *a1, int a2, _QWORD *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];
  int v11;

  v11 = a2;
  v3 = (std::__shared_weak_count *)a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::ConvertNewDOMtoOldDOM(v10, a3, &v11);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v6;
}

void sub_188085370(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<AdobeXMPCore::INode_v1>::~shared_ptr[abi:ne180100](va);
  __cxa_call_unexpected(a1);
}

void AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateAndPopulateNode(char **a1, uint64_t a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  AdobeXMPCore_Int::IUTF8String_I *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *p_shared_owners;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(void);
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  char *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unsigned int v75[2];
  char *v76;
  char *v77;

  v76 = 0;
  v77 = 0;
  *(_QWORD *)v75 = 0;
  XMP_Node::GetFullQualifiedName((XMP_Node *)a2, (const char **)&v77, &v75[1], (const char **)&v76, v75);
  v7 = v75[0];
  v6 = v75[1];
  if (!*(_QWORD *)v75)
  {
    v76 = "arrayItem";
    v77 = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
    v6 = 43;
    v7 = 9;
    v75[0] = 9;
    v75[1] = 43;
  }
  v73 = 0;
  v74 = 0;
  v8 = *(_DWORD *)(a2 + 8);
  if ((v8 & 0x1F00) == 0)
  {
    v71 = 0;
    v72 = 0;
    if (*(char *)(a2 + 63) < 0)
    {
      v40 = *(AdobeXMPCore_Int::IUTF8String_I **)(a2 + 40);
      v41 = *(const char **)(a2 + 48);
    }
    else
    {
      v40 = (AdobeXMPCore_Int::IUTF8String_I *)(a2 + 40);
      v41 = (const char *)*(unsigned __int8 *)(a2 + 63);
    }
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)v77, (const char *)v6, (const char *)v7, v41, (AdobeXMPCore_Int::IUTF8String_I *)v76, v40, &v71);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v71 + 528))(v71, (*(_DWORD *)(a2 + 8) >> 1) & 1);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v73, (uint64_t)&v71);
    v37 = v72;
    if (!v72)
      goto LABEL_84;
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    goto LABEL_82;
  }
  if ((v8 & 0x100) != 0)
  {
    v71 = 0;
    v72 = 0;
    AdobeXMPCore::IStructureNode_v1::CreateStructureNode((AdobeXMPCore::IStructureNode_v1 *)v77, (char *)v6, (const char *)v7, (AdobeXMPCore_Int::IUTF8String_I *)v76, &v71);
    v42 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v42)
    {
      v43 = 0;
      v44 = v42 >> 3;
      if (v44 <= 1)
        v45 = 1;
      else
        v45 = v44;
      do
      {
        v46 = v71;
        if (v71)
          v46 = v71 + *(_QWORD *)(*(_QWORD *)v71 - 544);
        v47 = v72;
        v69 = v46;
        v70 = v72;
        if (v72)
        {
          v48 = (unint64_t *)&v72->__shared_owners_;
          do
            v49 = __ldxr(v48);
          while (__stxr(v49 + 1, v48));
        }
        AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateAndPopulateNode(&v69, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v43), 0);
        if (v47)
        {
          v50 = (unint64_t *)&v47->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        ++v43;
      }
      while (v43 != v45);
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v73, (uint64_t)&v71);
    v37 = v72;
    if (v72)
    {
      v52 = (unint64_t *)&v72->__shared_owners_;
      do
        v39 = __ldaxr(v52);
      while (__stlxr(v39 - 1, v52));
LABEL_82:
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else if ((v8 & 0x200) != 0)
  {
    if ((v8 & 0x400) != 0)
      v9 = 2;
    else
      v9 = 1;
    if ((v8 & 0x800) != 0)
      v10 = 4;
    else
      v10 = v9;
    v71 = 0;
    v72 = 0;
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)v77, (const char *)v6, &v71);
    v69 = 0;
    v70 = 0;
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)v76, (const char *)v75[0], &v69);
    v67 = 0;
    v68 = 0;
    v65 = v71;
    v66 = v72;
    if (v72)
    {
      v11 = (unint64_t *)&v72->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v63 = v69;
    v64 = v70;
    if (v70)
    {
      v13 = (unint64_t *)&v70->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v65, &v63, v10, &v67);
    v15 = v64;
    if (v64)
    {
      v16 = (unint64_t *)&v64->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v66;
    if (v66)
    {
      v19 = (unint64_t *)&v66->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = *(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72);
    if (v21)
    {
      v22 = 0;
      v23 = v21 >> 3;
      if (v23 <= 1)
        v24 = 1;
      else
        v24 = v23;
      do
      {
        v25 = v67;
        if (v67)
          v25 = &v67[*(_QWORD *)(*(_QWORD *)v67 - 544)];
        v26 = v68;
        v65 = (uint64_t)v25;
        v66 = v68;
        if (v68)
        {
          v27 = (unint64_t *)&v68->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateAndPopulateNode(&v65, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v22), 0);
        if (v26)
        {
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        ++v22;
      }
      while (v22 != v24);
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v73, (uint64_t)&v67);
    v31 = v68;
    if (v68)
    {
      v32 = (unint64_t *)&v68->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = v70;
    if (v70)
    {
      v35 = (unint64_t *)&v70->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v37 = v72;
    if (v72)
    {
      v38 = (unint64_t *)&v72->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      goto LABEL_82;
    }
  }
LABEL_84:
  if (v73)
  {
    v54 = *(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96);
    if (v54)
    {
      v55 = 0;
      v56 = v54 >> 3;
      if (v56 <= 1)
        v57 = 1;
      else
        v57 = v56;
      do
        AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateAndPopulateNode(&v73, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 8 * v55++), 1);
      while (v57 != v55);
    }
    v58 = *(_QWORD *)*a1;
    if (a3)
      v59 = (void (**)(void))(v58 + 136);
    else
      v59 = (void (**)(void))(*(_QWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&(*a1)[*(_QWORD *)(v58 - 64)]
                                                                                             + 16))(&(*a1)[*(_QWORD *)(v58 - 64)], 0x63436D704E6F6465, 1)+ 520);
    (*v59)();
  }
  v60 = v74;
  if (v74)
  {
    v61 = (unint64_t *)&v74->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_1880858B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  va_list va3;
  uint64_t v16;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v14 = va_arg(va4, _QWORD);
  v16 = va_arg(va4, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
    v3 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 544));
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateQualifiedName(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  void *__p;
  std::__shared_weak_count *v89;
  uint64_t v90;
  __int128 v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[144];
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  __int128 v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  __int128 v104;

  v104 = 0uLL;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v104);
  v102 = 0;
  v103 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 88))(&v102);
  v101 = 0uLL;
  v7 = *a2;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 88))(v91);
  (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v7 + 40))(&v101, v7, v91);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
  if (*((_QWORD *)&v91[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (!(_QWORD)v101)
  {
    v11 = (_QWORD *)*a3;
    if (!*a3)
    {
      AdobeXMPCore::INameSpacePrefixMap_v1::CreateNameSpacePrefixMap(&__p);
      v28 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 128))(__p);
      AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::INameSpacePrefixMap_I>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataConverterUtilsImpl.cpp", 122, 1, v91);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, v91);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
      if (*((_QWORD *)&v91[0] + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v89;
      if (v89)
      {
        p_shared_owners = (unint64_t *)&v89->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateQualifiedName(std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I const> const&,std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I> &)::count = 0;
      goto LABEL_44;
    }
    (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 88))(&__p);
    (*(void (**)(__int128 *__return_ptr, _QWORD *, void **))(*v11 + 40))(v91, v11, &__p);
    v12 = v91[0];
    if (*((_QWORD *)&v91[0] + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      }
    }
    if (!v89)
      goto LABEL_17;
    v15 = (unint64_t *)&v89->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 16))(*((_QWORD *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      if ((_QWORD)v12)
      {
LABEL_18:
        v17 = (_QWORD *)*a3;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 88))(&__p);
        (*(void (**)(__int128 *__return_ptr, _QWORD *, void **))(*v17 + 40))(v91, v17, &__p);
        v18 = v91[0];
        v91[0] = 0uLL;
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
        v101 = v18;
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
        if (*((_QWORD *)&v91[0] + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = v89;
        if (v89)
        {
          v26 = (unint64_t *)&v89->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
    }
    else
    {
LABEL_17:
      if ((_QWORD)v12)
        goto LABEL_18;
    }
LABEL_44:
    if (!(_QWORD)v101)
    {
      v77 = a1;
      v78 = a4;
      v99 = 0;
      v100 = 0;
      AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, &v99);
      v57 = *MEMORY[0x1E0DE4F60];
      v58 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v59 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 200))(v99);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v99 + 40))(&v97, v99, "ns", 2);
        v60 = v98;
        if (v98)
        {
          v61 = (unint64_t *)&v98->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        v96 = 0;
        v94 = 0u;
        memset(v95, 0, sizeof(v95));
        v92 = 0u;
        v93 = 0u;
        memset(v91, 0, sizeof(v91));
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v91);
        ++AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateQualifiedName(std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I const> const&,std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I> &)::count;
        std::ostream::operator<<();
        __p = 0;
        v89 = 0;
        v90 = 0;
        std::stringbuf::str();
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v99 + 40))(&v86);
        v63 = v87;
        if (v87)
        {
          v64 = (unint64_t *)&v87->__shared_owners_;
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        if (SHIBYTE(v90) < 0)
          operator delete(__p);
        *(_QWORD *)&v91[0] = v57;
        *(_QWORD *)((char *)v91 + *(_QWORD *)(v57 - 24)) = v58;
        *((_QWORD *)&v91[0] + 1) = v59;
        if (SHIBYTE(v93) < 0)
          operator delete(*((void **)&v92 + 1));
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D761BE8](v95);
        v66 = *a3 + *(_QWORD *)(*(_QWORD *)*a3 - 48);
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 192))(v99);
        v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 208))(v99);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v66 + 64))(v66, v67, v68) & 1) != 0);
      v69 = *a3 + *(_QWORD *)(*(_QWORD *)*a3 - 48);
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 192))(v99);
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 208))(v99);
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 192))(v102);
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 208))(v102);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v69 + 40))(v69, v70, v71, v72, v73);
      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v101, &v99);
      v74 = v100;
      a1 = v77;
      a4 = v78;
      if (v100)
      {
        v75 = (unint64_t *)&v100->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v104 + 48))(&v84, v104, &v101, 0, -1);
  v35 = v85;
  if (v85)
  {
    v36 = (unint64_t *)&v85->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)v104 + 40))(&v82, v104, ":", 1);
  v38 = v83;
  if (v83)
  {
    v39 = (unint64_t *)&v83->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v104;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 72))(v91);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v41 + 48))(&v80, v41, v91, 0, -1);
  v42 = v81;
  if (v81)
  {
    v43 = (unint64_t *)&v81->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v91[0] + 1);
  if (*((_QWORD *)&v91[0] + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v91[0] + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  *a4 = v104;
  v104 = 0uLL;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v103;
  if (v103)
  {
    v52 = (unint64_t *)&v103->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_188086214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v26 - 160);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v26 - 144);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v26 - 128);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v26 - 112);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::INameSpacePrefixMap_I>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)]);
  return std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::INameSpacePrefixMap_I,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880863D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1880864AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D761BE8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D761BE8](a1 + 112);
  return a1;
}

XMP_Node *AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddQualifierNode(uint64_t a1, _QWORD *a2, char *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v8;
  XMP_Node *v9;
  uint64_t v10;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  XMP_Node *v15;
  uint64_t v16;
  _BOOL4 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  XMP_Node *v25;
  XMP_Node *v26;
  char *v27;
  XMP_Node **v28;
  unint64_t v29;
  XMP_Node **v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  XMP_Node **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  _QWORD *v50;
  XMP_Node **v51;
  char *v52;
  char *v53;
  char *v54;
  XMP_Node *v55;
  int v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  XMP_Node *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v82;
  std::__shared_weak_count *v83;
  XMP_Node *v84;
  std::__shared_weak_count *v85;
  __int128 v86;

  v86 = 0uLL;
  AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateQualifiedName((uint64_t)a2, a4, a5, &v86);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v86 + 192))(v86);
  (*(void (**)(XMP_Node **__return_ptr))(*(_QWORD *)*a2 + 72))(&v84);
  v9 = v84;
  v10 = (*(uint64_t (**)(XMP_Node *))(*(_QWORD *)v84 + 208))(v84);
  if ((*(unsigned int (**)(XMP_Node *, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v9 + 160))(v9, 0, v10, "lang", -1))
  {
    v11 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 88))(&v82);
    v32 = v82;
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 208))(v82);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v32 + 160))(v32, 0, v33, "http://www.w3.org/XML/1998/namespace", -1) == 0;
    v34 = v83;
    if (v83)
    {
      p_shared_owners = (unint64_t *)&v83->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v12 = v85;
  if (v85)
  {
    v13 = (unint64_t *)&v85->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  (*(void (**)(XMP_Node **__return_ptr))(*(_QWORD *)*a2 + 72))(&v84);
  v15 = v84;
  v16 = (*(uint64_t (**)(XMP_Node *))(*(_QWORD *)v84 + 208))(v84);
  if ((*(unsigned int (**)(XMP_Node *, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v15 + 160))(v15, 0, v16, "type", -1))
  {
    v17 = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 88))(&v82);
    v37 = v82;
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 208))(v82);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v37 + 160))(v37, 0, v38, "http://www.w3.org/1999/02/22-rdf-syntax-ns#", -1) == 0;
    v39 = v83;
    if (v83)
    {
      v40 = (unint64_t *)&v83->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  v18 = v85;
  if (v85)
  {
    v19 = (unint64_t *)&v85->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2);
  (*(void (**)(XMP_Node **__return_ptr))(*(_QWORD *)*a2 + 88))(&v84);
  (*(void (**)(XMP_Node *))(*(_QWORD *)v84 + 192))(v84);
  v22 = v85;
  if (v85)
  {
    v23 = (unint64_t *)&v85->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v84 = 0;
  v25 = (XMP_Node *)operator new();
  v26 = v25;
  if (v21)
    v27 = "[]";
  else
    v27 = (char *)v8;
  XMP_Node::XMP_Node(v25, (XMP_Node *)a1, v27, a3, 32);
  v84 = v26;
  if (v11 || v17)
  {
    if (v11)
    {
      v28 = *(XMP_Node ***)(a1 + 96);
      if (v28 == *(XMP_Node ***)(a1 + 104))
      {
        v49 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v28 >= v49)
        {
          v59 = v49 - (_QWORD)v28;
          v60 = v59 >> 2;
          if ((unint64_t)(v59 >> 2) <= 1)
            v60 = 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          v62 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 112, v61);
          v64 = &v62[v63];
          *v62 = v84;
          v50 = v62 + 1;
          v66 = *(char **)(a1 + 96);
          v65 = *(char **)(a1 + 104);
          if (v65 != v66)
          {
            do
            {
              v67 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *--v62 = v67;
            }
            while (v65 != v66);
            v65 = *(char **)(a1 + 96);
          }
          *(_QWORD *)(a1 + 96) = v62;
          *(_QWORD *)(a1 + 104) = v50;
          *(_QWORD *)(a1 + 112) = v64;
          if (v65)
            operator delete(v65);
        }
        else
        {
          *v28 = v26;
          v50 = v28 + 1;
        }
        *(_QWORD *)(a1 + 104) = v50;
      }
      else
      {
        std::vector<XMP_Node *>::insert(a1 + 96, *(char **)(a1 + 96), (char *)&v84);
      }
      v56 = *(_DWORD *)(a1 + 8) | 0x40;
    }
    else
    {
      if (!v17)
        __assert_rtn("AddQualifierNode", "MetadataConverterUtilsImpl.cpp", 190, "isType");
      v42 = *(XMP_Node ***)(a1 + 96);
      if (v42 == *(XMP_Node ***)(a1 + 104))
      {
        v57 = *(_QWORD *)(a1 + 112);
        if ((unint64_t)v42 >= v57)
        {
          v68 = v57 - (_QWORD)v42;
          v69 = v68 >> 2;
          if ((unint64_t)(v68 >> 2) <= 1)
            v69 = 1;
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v69;
          v71 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 112, v70);
          v73 = &v71[v72];
          *v71 = v84;
          v58 = v71 + 1;
          v75 = *(char **)(a1 + 96);
          v74 = *(char **)(a1 + 104);
          if (v74 != v75)
          {
            do
            {
              v76 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *--v71 = v76;
            }
            while (v74 != v75);
            v74 = *(char **)(a1 + 96);
          }
          *(_QWORD *)(a1 + 96) = v71;
          *(_QWORD *)(a1 + 104) = v58;
          *(_QWORD *)(a1 + 112) = v73;
          if (v74)
            operator delete(v74);
        }
        else
        {
          *v42 = v26;
          v58 = v42 + 1;
        }
        *(_QWORD *)(a1 + 104) = v58;
      }
      else
      {
        std::vector<XMP_Node *>::insert(a1 + 96, (char *)&v42[((unint64_t)*(unsigned int *)(a1 + 8) >> 6) & 1], (char *)&v84);
      }
      v56 = *(_DWORD *)(a1 + 8) | 0x80;
    }
    *(_DWORD *)(a1 + 8) = v56;
  }
  else
  {
    v29 = *(_QWORD *)(a1 + 112);
    v30 = *(XMP_Node ***)(a1 + 104);
    if ((unint64_t)v30 >= v29)
    {
      v43 = *(_QWORD *)(a1 + 96);
      v44 = ((uint64_t)v30 - v43) >> 3;
      if ((unint64_t)(v44 + 1) >> 61)
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v45 = v29 - v43;
      v46 = v45 >> 2;
      if (v45 >> 2 <= (unint64_t)(v44 + 1))
        v46 = v44 + 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v47 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      if (v47)
      {
        v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 112, v47);
        v26 = v84;
      }
      else
      {
        v48 = 0;
      }
      v51 = (XMP_Node **)&v48[8 * v44];
      v52 = &v48[8 * v47];
      *v51 = v26;
      v31 = v51 + 1;
      v54 = *(char **)(a1 + 96);
      v53 = *(char **)(a1 + 104);
      if (v53 != v54)
      {
        do
        {
          v55 = (XMP_Node *)*((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v51 = v55;
        }
        while (v53 != v54);
        v53 = *(char **)(a1 + 96);
      }
      *(_QWORD *)(a1 + 96) = v51;
      *(_QWORD *)(a1 + 104) = v31;
      *(_QWORD *)(a1 + 112) = v52;
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v30 = v26;
      v31 = v30 + 1;
    }
    *(_QWORD *)(a1 + 104) = v31;
    v56 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v56 | 0x10;
  v77 = v84;
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  return v77;
}

void sub_188086B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<XMP_Node *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<_APPx *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_188086DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::MetadataConverterUtilsImpl::FindPrefixFromUserSuppliedMap(AdobeXMPCore_Int::MetadataConverterUtilsImpl *this, void *a2, char *a3, const char **a4, unsigned int *a5)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (this)
  {
    v12 = 0;
    v13 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v12);
    v7 = v12;
    if (v12)
    {
      *(_QWORD *)a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 192))(v12);
      *(_DWORD *)a4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12);
    }
    v8 = v13;
    if (!v13)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v7)
        return 1;
    }
    else
    {
LABEL_8:
      if (v7)
        return 1;
    }
  }
  return 0;
}

XMP_Node *AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddChildNode(uint64_t a1, _QWORD *a2, char *a3, uint64_t *a4, _QWORD *a5, int a6)
{
  int v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t SchemaNode;
  int v20;
  _BOOL4 Prefix;
  _BOOL4 v22;
  int v24;
  XMP_Node *v25;
  XMP_Node *v26;
  char *v27;
  unint64_t v28;
  XMP_Node **v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  XMP_Node **v51;
  char *v52;
  char *v53;
  char *v54;
  XMP_Node *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *__p;
  std::__shared_weak_count *v64;
  char v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unsigned int v72;
  char *v73;
  __int128 v74;

  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2);
  v74 = 0uLL;
  AdobeXMPCore_Int::MetadataConverterUtilsImpl::CreateQualifiedName((uint64_t)a2, a4, a5, &v74);
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v74 + 192))(v74);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 88))(&__p);
  v14 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 192))(__p);
  v15 = v64;
  if (!v64)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v64->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
LABEL_5:
    if (a6)
      goto LABEL_6;
LABEL_22:
    v24 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!a6)
    goto LABEL_22;
LABEL_6:
  if (*(_QWORD *)(a1 + 64))
    __assert_rtn("AddChildNode", "MetadataConverterUtilsImpl.cpp", 234, "xmpParent->parent == 0");
  if (*a5)
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 56))(*a5);
  else
    v18 = 0;
  SchemaNode = FindSchemaNode((char **)a1, v14, 1, 0, (uint64_t (*)(uint64_t, char *, _BYTE *, _BYTE *))AdobeXMPCore_Int::MetadataConverterUtilsImpl::FindPrefixFromUserSuppliedMap, v18);
  a1 = SchemaNode;
  v20 = *(_DWORD *)(SchemaNode + 8);
  if ((v20 & 0x8000) != 0)
    *(_DWORD *)(SchemaNode + 8) = v20 ^ 0x8000;
  v73 = 0;
  v72 = 0;
  Prefix = XMP_NamespaceTable::GetPrefix((XMP_NamespaceTable *)sRegisteredNamespaces, v14, (const char **)&v73, &v72);
  if (v73)
    v22 = Prefix;
  else
    v22 = 0;
  if (!v22 || v72 == 0)
    goto LABEL_22;
  v70 = 0;
  v71 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, &v70);
  (*(void (**)(void **__return_ptr, uint64_t, char *, _QWORD))(*(_QWORD *)v70 + 40))(&__p, v70, v73, v72);
  v37 = __p;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 72))(&v66);
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v37 + 48))(&v68, v37, &v66, 0, -1);
  v38 = v69;
  if (v69)
  {
    v39 = (unint64_t *)&v69->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v67;
  if (v67)
  {
    v42 = (unint64_t *)&v67->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v64;
  if (v64)
  {
    v45 = (unint64_t *)&v64->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = sRegisteredAliasMap;
  v48 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 192))(v70);
  std::string::basic_string[abi:ne180100]<0>(&__p, v48);
  v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::find<std::string>(v47, (const void **)&__p);
  v50 = sRegisteredAliasMap + 8;
  if (v65 < 0)
    operator delete(__p);
  if (v50 == v49)
  {
    v24 = 0;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 64) + 8) |= 0x20000u;
    v24 = 0x10000;
  }
  v60 = v71;
  if (v71)
  {
    v61 = (unint64_t *)&v71->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_23:
  v25 = (XMP_Node *)operator new();
  v26 = v25;
  if ((v12 & ~a6) != 0)
    v27 = "[]";
  else
    v27 = (char *)v13;
  XMP_Node::XMP_Node(v25, (XMP_Node *)a1, v27, a3, v24);
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(XMP_Node ***)(a1 + 80);
  if ((unint64_t)v29 >= v28)
  {
    v31 = *(_QWORD *)(a1 + 72);
    v32 = ((uint64_t)v29 - v31) >> 3;
    if ((unint64_t)(v32 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v33 = v28 - v31;
    v34 = v33 >> 2;
    if (v33 >> 2 <= (unint64_t)(v32 + 1))
      v34 = v32 + 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a1 + 88, v35);
    else
      v36 = 0;
    v51 = (XMP_Node **)&v36[8 * v32];
    v52 = &v36[8 * v35];
    *v51 = v26;
    v30 = v51 + 1;
    v54 = *(char **)(a1 + 72);
    v53 = *(char **)(a1 + 80);
    if (v53 != v54)
    {
      do
      {
        v55 = (XMP_Node *)*((_QWORD *)v53 - 1);
        v53 -= 8;
        *--v51 = v55;
      }
      while (v53 != v54);
      v53 = *(char **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 72) = v51;
    *(_QWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 88) = v52;
    if (v53)
      operator delete(v53);
  }
  else
  {
    *v29 = v26;
    v30 = v29 + 1;
  }
  *(_QWORD *)(a1 + 80) = v30;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return v26;
}

void sub_1880873A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

XMP_Node *AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleStructureNode(_QWORD *a1, XMP_Node *a2, uint64_t *a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;

  if (!a5)
    goto LABEL_16;
  v51 = 0uLL;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 256))(&v51);
  v12 = v51;
  if ((_QWORD)v51)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)v51 + 736))(&v49, v51);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 192))(v49);
    MEMORY[0x18D761A14]((char *)a2 + 16, v13);
    v14 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (!*((_QWORD *)&v51 + 1))
    goto LABEL_12;
  v18 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_12:
    if (v12)
      goto LABEL_13;
LABEL_16:
    if (a6)
    {
      v21 = (_QWORD *)*a1;
      if (*a1)
        v21 = (_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 544));
      v22 = (std::__shared_weak_count *)a1[1];
      *(_QWORD *)&v51 = v21;
      *((_QWORD *)&v51 + 1) = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      a2 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddQualifierNode((uint64_t)a2, &v51, "", a3, a4);
      if (v22)
      {
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          v27 = v22;
LABEL_37:
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      v28 = (_QWORD *)*a1;
      if (*a1)
        v28 = (_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 544));
      v29 = (std::__shared_weak_count *)a1[1];
      *(_QWORD *)&v51 = v28;
      *((_QWORD *)&v51 + 1) = v29;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      a2 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddChildNode((uint64_t)a2, &v51, "", a3, a4, a5);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          v27 = v29;
          goto LABEL_37;
        }
      }
    }
    v20 = 0;
    if (!a2)
      return a2;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!v12)
    goto LABEL_16;
LABEL_13:
  v20 = 1;
  if (!a2)
    return a2;
LABEL_39:
  *((_DWORD *)a2 + 2) |= 0x100u;
  v51 = 0uLL;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688)) + 552))(&v51);
  while ((_QWORD)v51)
  {
    v49 = 0;
    v50 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v51 + 48))(&v49);
    AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleNode(&v49, a2, a3, a4, v20, 0);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v51 + 56))(&v48);
    v34 = v48;
    v48 = 0uLL;
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    v51 = v34;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v50;
    if (v50)
    {
      v42 = (unint64_t *)&v50->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  return a2;
}

void sub_188087808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleNode(_QWORD *a1, XMP_Node *a2, uint64_t *a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v7;
  int v13;
  XMP_Node *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  BOOL v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;

  v7 = *a1;
  if (!v7)
    return;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  switch(v13)
  {
    case 4:
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 240))(&v37);
      v14 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleStructureNode(&v37, a2, a3, a4, a5, a6);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (!*((_QWORD *)&v37 + 1))
        break;
      v18 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v17 = __ldaxr(v18);
      while (__stlxr(v17 - 1, v18));
LABEL_16:
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      break;
    case 2:
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 248))(&v37);
      v14 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleArrayNode(&v37, (uint64_t)a2, a3, a4, a5, a6);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (!*((_QWORD *)&v37 + 1))
        break;
      v19 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v17 = __ldaxr(v19);
      while (__stlxr(v17 - 1, v19));
      goto LABEL_16;
    case 1:
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v37);
      v14 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleSimpleNode(&v37, (uint64_t)a2, a3, a4, a5, a6);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      if (*((_QWORD *)&v37 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        goto LABEL_16;
      }
      break;
    default:
      v14 = 0;
      break;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1))
    v20 = v14 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v37 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 112))(&v37);
    while ((_QWORD)v37)
    {
      v35 = 0;
      v36 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v37 + 48))(&v35);
      AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleNode(&v35, v14, a3, a4, 0, 1);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v37 + 56))(&v34);
      v21 = v34;
      v34 = 0uLL;
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
      v37 = v21;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (*((_QWORD *)&v34 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v28 = v36;
      if (v36)
      {
        v29 = (unint64_t *)&v36->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_188087B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

XMP_Node *AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleArrayNode(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, int a5, int a6)
{
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  XMP_Node *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  int v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  if (a6)
  {
    v9 = (_QWORD *)*a1;
    if (*a1)
      v9 = (_QWORD *)((char *)v9 + *(_QWORD *)(*v9 - 544));
    v10 = (std::__shared_weak_count *)a1[1];
    *(_QWORD *)&v39 = v9;
    *((_QWORD *)&v39 + 1) = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddQualifierNode(a2, &v39, "", a3, a4);
    if (!v10)
      goto LABEL_20;
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
  }
  else
  {
    v16 = (_QWORD *)*a1;
    if (*a1)
      v16 = (_QWORD *)((char *)v16 + *(_QWORD *)(*v16 - 544));
    v10 = (std::__shared_weak_count *)a1[1];
    *(_QWORD *)&v39 = v16;
    *((_QWORD *)&v39 + 1) = v10;
    if (v10)
    {
      v17 = (unint64_t *)&v10->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v13 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddChildNode(a2, &v39, "", a3, a4, a5);
    if (!v10)
      goto LABEL_20;
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v19);
    while (__stlxr(v15 - 1, v19));
  }
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v13)
      return v13;
    goto LABEL_21;
  }
LABEL_20:
  if (!v13)
    return v13;
LABEL_21:
  *((_DWORD *)v13 + 2) |= 0x200u;
  v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 640))(*a1);
  if (v20 == 4)
  {
    v21 = 3584;
    goto LABEL_27;
  }
  if (v20 == 2)
  {
    v21 = 1536;
LABEL_27:
    *((_DWORD *)v13 + 2) |= v21;
  }
  v39 = 0uLL;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688)) + 552))(&v39);
  while ((_QWORD)v39)
  {
    v37 = 0;
    v38 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v39 + 48))(&v37);
    AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleNode(&v37, v13, a3, a4, 0, 0);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v39 + 56))(&v36);
    v22 = v36;
    v36 = 0uLL;
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    v39 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = v38;
    if (v38)
    {
      v30 = (unint64_t *)&v38->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v13;
}

void sub_188087EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

XMP_Node *AdobeXMPCore_Int::MetadataConverterUtilsImpl::HandleSimpleNode(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  XMP_Node *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;

  if (a6)
  {
    v10 = *a1;
    if (*a1)
      v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 - 544);
    else
      v11 = 0;
    v15 = (std::__shared_weak_count *)a1[1];
    v37 = v11;
    v38 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      v10 = *a1;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 504))(&v35);
    v18 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 192))(v35);
    v19 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddQualifierNode(a2, &v37, v18, a3, a4);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v38;
    if (v38)
    {
      v24 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_33;
    }
  }
  else
  {
    v13 = *a1;
    if (*a1)
      v14 = v13 + *(_QWORD *)(*(_QWORD *)v13 - 544);
    else
      v14 = 0;
    v26 = (std::__shared_weak_count *)a1[1];
    v37 = v14;
    v38 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v13 = *a1;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 504))(&v35);
    v29 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 192))(v35);
    v19 = AdobeXMPCore_Int::MetadataConverterUtilsImpl::AddChildNode(a2, &v37, v29, a3, a4, a5);
    v30 = v36;
    if (v36)
    {
      v31 = (unint64_t *)&v36->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v23 = v38;
    if (v38)
    {
      v33 = (unint64_t *)&v38->__shared_owners_;
      do
        v25 = __ldaxr(v33);
      while (__stlxr(v25 - 1, v33));
LABEL_33:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 520))(*a1))
    *((_DWORD *)v19 + 2) |= 2u;
  return v19;
}

void sub_188088134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::INameSpacePrefixMap_I>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::INameSpacePrefixMap_I,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC810;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880881D0(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880881FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::INameSpacePrefixMap_I *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore_Int::INameSpacePrefixMap_I>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::INameSpacePrefixMap_I *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore_Int::INameSpacePrefixMap_I>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::INameSpacePrefixMap_I *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore_Int::INameSpacePrefixMap_I>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void XMPUtils::SetNode(_QWORD *a1, char *a2, int a3)
{
  uint64_t v4;
  __int16 v5;
  char *v7;
  unsigned int v8;
  int v9;
  const char *v10;
  _BOOL4 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  const char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *exception;
  const char *v26;
  unsigned int v27[2];
  std::__shared_weak_count *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v4 = *a1;
  if (!v4)
    return;
  v5 = a3;
  if ((a3 & 0x20000000) != 0)
  {
    v5 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 224))(v4, 1, 1);
  }
  if (!a2)
  {
    v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    if ((v5 & 0x200) == 0 || v18 != 4)
    {
      v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
      if ((v5 & 0x100) == 0 || v19 != 2)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 224))(*a1, 1, 1);
        return;
      }
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v26 = "Requested and existing composite form mismatch";
LABEL_55:
    exception[1] = v26;
    *((_BYTE *)exception + 16) = 0;
  }
  if ((v5 & 0x1F00) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v26 = "Composite nodes can't have values";
    goto LABEL_55;
  }
  if (!*a1)
    return;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) != 1)
    XMPUtils::SetNode();
  v33 = 0;
  v34 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 232))(&v33);
  __p[0] = 0;
  __p[1] = 0;
  v32 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if (v32 >= 0)
    v7 = (char *)__p;
  else
    v7 = (char *)__p[0];
  v8 = *v7;
  if (!*v7)
    goto LABEL_23;
  while ((char)v8 < 1)
  {
LABEL_21:
    v27[0] = 0;
    v29 = 0;
    CodePoint_from_UTF8(v7, 4uLL, v27, &v29);
    if (v27[0] >> 1 == 0x7FFF)
    {
      v24 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v24 = 205;
      v24[1] = "U+FFFE and U+FFFF are not allowed in XML";
      *((_BYTE *)v24 + 16) = 0;
    }
    v7 += v29;
    v8 = *v7;
    if (!*v7)
      goto LABEL_23;
  }
  do
  {
    if (v8 > 0x1F)
    {
      if (v8 != 127)
        goto LABEL_19;
LABEL_15:
      *v7 = 32;
      goto LABEL_19;
    }
    if (v8 > 0xD || ((1 << v8) & 0x2600) == 0)
      goto LABEL_15;
LABEL_19:
    v9 = *++v7;
    v8 = v9;
  }
  while (v9 > 0);
  if (v8)
    goto LABEL_21;
LABEL_23:
  if ((v5 & 0x20) != 0)
  {
    (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)*a1 + 88))(&v29);
    v10 = (const char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v29 + 192))(v29);
    if (!strcmp(v10, "http://www.w3.org/XML/1998/namespace"))
    {
      (*(void (**)(unsigned int *__return_ptr))(*(_QWORD *)*a1 + 72))(v27);
      v20 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v27 + 192))(*(_QWORD *)v27);
      v11 = strcmp(v20, "lang") == 0;
      v21 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      v11 = 0;
    }
    v12 = v30;
    if (v30)
    {
      v13 = (unint64_t *)&v30->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v11)
      NormalizeLangValue((unsigned __int8 *)__p);
  }
  (*(void (**)(void))(*(_QWORD *)v33 + 512))();
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  v15 = v34;
  if (v34)
  {
    v16 = (unint64_t *)&v34->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_188088678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::ConvertNewArrayFormToOldArrayForm(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 640))(result) == 4)
    {
      return 2048;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 640))(*a1) == 2)
    {
      return 1024;
    }
    else
    {
      return ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 640))(*a1) == 1) << 9;
    }
  }
  return result;
}

void XMPUtils::CreateArrayChildNode(_QWORD *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  XMPUtils *v23;
  AdobeXMPCore_Int::IUTF8String_I *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  AdobeXMPCore::IStructureNode_v1 *v28;
  char *v29;
  AdobeXMPCore_Int::IUTF8String_I *p_p;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  AdobeXMPCore::ISimpleNode_v1 *v35;
  char *v36;
  AdobeXMPCore_Int::IUTF8String_I *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  AdobeXMPCore::IArrayNode_v1 *v40;
  char *v41;
  AdobeXMPCore_Int::IUTF8String_I *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  AdobeXMPCore::IArrayNode_v1 *v45;
  char *v46;
  AdobeXMPCore_Int::IUTF8String_I *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  AdobeXMPCore::IArrayNode_v1 *v50;
  char *v51;
  AdobeXMPCore_Int::IUTF8String_I *v52;
  const char *v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *exception;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p;
  std::__shared_weak_count *v63;
  uint64_t v64;
  void **v65;
  char *v66;
  uint64_t v67;

  v65 = 0;
  v66 = 0;
  v67 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 88))(&__p);
  v6 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 192))(__p);
  std::string::basic_string[abi:ne180100]<0>(&v65, v6);
  v7 = v63;
  if (v63)
  {
    p_shared_owners = (unint64_t *)&v63->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  __p = 0;
  v63 = 0;
  v64 = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 72))(&v61);
  v10 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v61 + 192))(v61);
  std::string::basic_string[abi:ne180100]<0>(&__p, v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a3 = 0;
  a3[1] = 0;
  v14 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 560))(v14);
  v61 = 0uLL;
  if (v15)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 656))(&v60, *a1, 1);
    v61 = v60;
    v16 = v60;
    if ((_QWORD)v60)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v60 + 40))(v60) != 2)
      {
        LODWORD(v16) = 0;
        if (((unsigned __int16)a2 & 0x100) == 0)
          goto LABEL_55;
LABEL_38:
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v61 + 40))(v61) == 4)
        {
          if (v67 >= 0)
            v28 = (AdobeXMPCore::IStructureNode_v1 *)&v65;
          else
            v28 = (AdobeXMPCore::IStructureNode_v1 *)v65;
          if (v67 >= 0)
            v29 = (char *)HIBYTE(v67);
          else
            v29 = v66;
          if (v64 >= 0)
            p_p = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
          else
            p_p = (AdobeXMPCore_Int::IUTF8String_I *)__p;
          if (v64 >= 0)
            v31 = (std::__shared_weak_count *)HIBYTE(v64);
          else
            v31 = v63;
          AdobeXMPCore::IStructureNode_v1::CreateStructureNode(v28, v29, (const char *)v31, p_p, &v60);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a3, (uint64_t)&v60);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (!*((_QWORD *)&v60 + 1))
            goto LABEL_128;
          v33 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          goto LABEL_126;
        }
LABEL_55:
        if (((unsigned __int16)a2 & 0x1F00) == 0
          && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v61 + 40))(v61) == 1)
        {
          if (v67 >= 0)
            v35 = (AdobeXMPCore::ISimpleNode_v1 *)&v65;
          else
            v35 = (AdobeXMPCore::ISimpleNode_v1 *)v65;
          if (v67 >= 0)
            v36 = (char *)HIBYTE(v67);
          else
            v36 = v66;
          if (v64 >= 0)
            v37 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
          else
            v37 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
          if (v64 >= 0)
            v38 = (std::__shared_weak_count *)HIBYTE(v64);
          else
            v38 = v63;
          AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v35, v36, (const char *)v38, 0, v37, (AdobeXMPCore_Int::IUTF8String_I *)"", &v60);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a3, (uint64_t)&v60);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (*((_QWORD *)&v60 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
            do
              v34 = __ldaxr(v39);
            while (__stlxr(v34 - 1, v39));
            goto LABEL_126;
          }
LABEL_128:
          if (!*a3)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 102;
            exception[1] = "Array has to be homogeneous";
            *((_BYTE *)exception + 16) = 0;
          }
          goto LABEL_129;
        }
        if (((unsigned __int16)a2 & 0x800) != 0 && v16 >= 0x800)
        {
          if (v67 >= 0)
            v40 = (AdobeXMPCore::IArrayNode_v1 *)&v65;
          else
            v40 = (AdobeXMPCore::IArrayNode_v1 *)v65;
          if (v67 >= 0)
            v41 = (char *)HIBYTE(v67);
          else
            v41 = v66;
          if (v64 >= 0)
            v42 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
          else
            v42 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
          if (v64 >= 0)
            v43 = (std::__shared_weak_count *)HIBYTE(v64);
          else
            v43 = v63;
          AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(v40, v41, (const char *)v43, v42, &v60);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a3, (uint64_t)&v60);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (!*((_QWORD *)&v60 + 1))
            goto LABEL_128;
          v44 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v44);
          while (__stlxr(v34 - 1, v44));
        }
        else if (((unsigned __int16)a2 & 0x400) != 0 && (v16 & 0x400) != 0)
        {
          if (v67 >= 0)
            v45 = (AdobeXMPCore::IArrayNode_v1 *)&v65;
          else
            v45 = (AdobeXMPCore::IArrayNode_v1 *)v65;
          if (v67 >= 0)
            v46 = (char *)HIBYTE(v67);
          else
            v46 = v66;
          if (v64 >= 0)
            v47 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
          else
            v47 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
          if (v64 >= 0)
            v48 = (std::__shared_weak_count *)HIBYTE(v64);
          else
            v48 = v63;
          AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(v45, v46, (const char *)v48, v47, &v60);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a3, (uint64_t)&v60);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (!*((_QWORD *)&v60 + 1))
            goto LABEL_128;
          v49 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v49);
          while (__stlxr(v34 - 1, v49));
        }
        else
        {
          if (((unsigned __int16)a2 & 0x200) == 0 || (v16 & 0x200) == 0)
            goto LABEL_128;
          v50 = v67 >= 0 ? (AdobeXMPCore::IArrayNode_v1 *)&v65 : (AdobeXMPCore::IArrayNode_v1 *)v65;
          v51 = v67 >= 0 ? (char *)HIBYTE(v67) : v66;
          v52 = v64 >= 0 ? (AdobeXMPCore_Int::IUTF8String_I *)&__p : (AdobeXMPCore_Int::IUTF8String_I *)__p;
          v53 = v64 >= 0 ? (const char *)HIBYTE(v64) : (const char *)v63;
          AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(v50, v51, v53, v52, &v60);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a3, (uint64_t)&v60);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          if (!*((_QWORD *)&v60 + 1))
            goto LABEL_128;
          v54 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
          do
            v34 = __ldaxr(v54);
          while (__stlxr(v34 - 1, v54));
        }
LABEL_126:
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        goto LABEL_128;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v16 + 248))(&v59, v16);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      v60 = v59;
      v59 = 0uLL;
      LODWORD(v16) = XMPUtils::ConvertNewArrayFormToOldArrayForm((uint64_t *)&v60);
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (*((_QWORD *)&v59 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    if (((unsigned __int16)a2 & 0x100) == 0)
      goto LABEL_55;
    goto LABEL_38;
  }
  if (v67 >= 0)
    v23 = (XMPUtils *)&v65;
  else
    v23 = (XMPUtils *)v65;
  if (v64 >= 0)
    v24 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
  else
    v24 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
  XMPUtils::CreateTerminalNode(v23, v24, a2, &v60);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v60);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_129:
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (SHIBYTE(v64) < 0)
    operator delete(__p);
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
}

void sub_188088D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v20);
  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(a1);
}

void XMPUtils::CreateTerminalNode(XMPUtils *this@<X0>, AdobeXMPCore_Int::IUTF8String_I *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  __int16 v4;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (__int16)a3;
  *a4 = 0;
  a4[1] = 0;
  if (((unsigned __int16)a3 & 0x1F00) == 0)
  {
    v19 = 0;
    v20 = 0;
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(this, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, 0, a2, 0, &v19);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a4, (uint64_t)&v19);
    v14 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if ((v4 & 0x100) == 0)
    goto LABEL_7;
  v19 = 0;
  v20 = 0;
  AdobeXMPCore::IStructureNode_v1::CreateStructureNode(this, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v19);
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a4, (uint64_t)&v19);
  v8 = v20;
  if (!v20)
    goto LABEL_7;
  v9 = (unint64_t *)&v20->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if ((v4 & 0x200) == 0)
      return;
  }
  else
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      return;
  }
  if ((v4 & 0x800) != 0)
  {
    AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(this, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v19);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a4, (uint64_t)&v19);
    v11 = v20;
    if (!v20)
      return;
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v17);
    while (__stlxr(v13 - 1, v17));
  }
  else if ((v4 & 0x400) != 0)
  {
    AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(this, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v19);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a4, (uint64_t)&v19);
    v11 = v20;
    if (!v20)
      return;
    v18 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v18);
    while (__stlxr(v13 - 1, v18));
  }
  else
  {
    AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(this, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v19);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a4, (uint64_t)&v19);
    v11 = v20;
    if (!v20)
      return;
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
  }
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_188088FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
    v3 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 544));
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void XMPUtils::DoSetArrayItem(_QWORD *a1, int a2, char *a3, int a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  const char *v48;
  _QWORD *exception;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  void *__p;
  std::__shared_weak_count *v55;
  uint64_t v56;
  void *v57[2];
  uint64_t v58;

  v8 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 560))(v8);
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 88))(&__p);
  v10 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 192))(__p);
  std::string::basic_string[abi:ne180100]<0>(v57, v10);
  v11 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  __p = 0;
  v55 = 0;
  v56 = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 72))(&v53);
  v14 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v53 + 192))(v53);
  std::string::basic_string[abi:ne180100]<0>(&__p, v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (const char *)VerifySetOptions(a4 & 0xFFFF3FFF, a3);
  v19 = a4 & 0xC000;
  if (a2 == -1)
    v20 = v9;
  else
    v20 = a2;
  if (v19 == 0x8000 && v20 == 0)
  {
    v20 = 1;
    v19 = 0x4000;
  }
  v21 = v20 + (v20 == v9 && v19 == 0x8000);
  if (v20 == v9 && v19 == 0x8000)
    v22 = 0;
  else
    v22 = v19;
  v53 = 0uLL;
  if ((_DWORD)v21 == v9 + 1)
  {
    if (v22 < 0x8000)
    {
      XMPUtils::CreateArrayChildNode(a1, v18, &v52);
      v23 = v52;
      v52 = 0uLL;
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      v53 = v23;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = v9 + 1;
LABEL_51:
      (*(void (**)(_QWORD, __int128 *, uint64_t))(*(_QWORD *)*a1 + 664))(*a1, &v53, v30);
      goto LABEL_52;
    }
    v48 = "Can't insert before or after implicit new item";
LABEL_73:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 104;
    exception[1] = v48;
    *((_BYTE *)exception + 16) = 0;
  }
  if ((int)v21 < 1 || (int)v21 > v9)
  {
    v48 = "Array index out of bounds";
    goto LABEL_73;
  }
  if (v22)
  {
    XMPUtils::CreateArrayChildNode(a1, v18, &v52);
    v32 = v52;
    v52 = 0uLL;
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    v53 = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v22 == 0x8000)
      v30 = (v21 + 1);
    else
      v30 = v21;
    goto LABEL_51;
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 656))(&v50, *a1, v21);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v50 + 232))(&v52);
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(&v53, (uint64_t)&v52);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v51;
  if (v51)
  {
    v46 = (unint64_t *)&v51->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_52:
  XMPUtils::SetNode(&v53, a3, (int)v18);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete(__p);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
}

void sub_1880894F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

void XMPUtils::GetNameSpaceAndNameFromStepValue(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v8;
  uint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::string v13;
  std::string v14;
  char v15;

  v8 = std::string::find(a1, 58, 0);
  memset(&v14, 0, sizeof(v14));
  std::string::basic_string(&v14, a1, 0, v8, (std::allocator<char> *)&v13);
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)a2 + 80))(&v13);
  v9 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v13.__r_.__value_.__l.__data_ + 192))(v13.__r_.__value_.__r.__words[0]);
  MEMORY[0x18D761A14](a3, v9);
  size = (std::__shared_weak_count *)v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v13.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::string::basic_string(&v13, a1, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v15);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1880896AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL XMPUtils::HandleConstAliasStep(_QWORD *a1, _QWORD *a2, uint64_t *a3, int *a4)
{
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const std::string *v14;
  int64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int v25;
  int v26;
  int v28;
  int v29;
  int v30;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  const char *v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  const char *v75;
  int v76;
  _QWORD *exception;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  std::string v84;
  void *__p[2];
  uint64_t v86;
  __n128 v87;

  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a2, (uint64_t)a1);
  v8 = *a3;
  if (*a3 == a3[1])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Empty XPath";
    *((_BYTE *)exception + 16) = 0;
  }
  if ((*(_BYTE *)(v8 + 56) & 0x10) == 0)
    return 0;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::find<std::string>(sRegisteredAliasMap, (const void **)(v8 + 32));
  if (sRegisteredAliasMap + 8 == v10)
    XMPUtils::HandleConstAliasStep();
  v11 = v10;
  __p[1] = 0;
  v86 = 0;
  __p[0] = 0;
  v12 = *(char **)(v10 + 56);
  if (v12[23] < 0)
    v12 = *(char **)v12;
  std::string::basic_string[abi:ne180100]<0>(__p, v12);
  v13 = *(_QWORD *)(v11 + 56);
  v14 = (const std::string *)(v13 + 32);
  if (*(char *)(v13 + 55) < 0)
  {
    v16 = *(char **)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
  }
  else
  {
    v15 = *(unsigned __int8 *)(v13 + 55);
    v16 = (char *)(v13 + 32);
  }
  if (v15 < 1)
    goto LABEL_26;
  v17 = &v16[v15];
  v18 = v16;
  while (1)
  {
    v19 = (char *)memchr(v18, 58, v15);
    if (!v19)
      goto LABEL_26;
    if (*v19 == 58)
      break;
    v18 = v19 + 1;
    v15 = v17 - (_BYTE *)v18;
    if (v17 - (_BYTE *)v18 < 1)
      goto LABEL_26;
  }
  if (v19 == v17 || v19 - v16 == -1)
LABEL_26:
    __assert_rtn("HandleConstAliasStep", "XMPUtils.cpp", 296, "colonPos != std::string::npos");
  memset(&v84, 0, sizeof(v84));
  std::string::basic_string(&v84, v14, v19 - v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 792)) + 648))(&v87);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, (__int128 *)&v87);
  v20 = (std::__shared_weak_count *)v87.n128_u64[1];
  if (v87.n128_u64[1])
  {
    v21 = (unint64_t *)(v87.n128_u64[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!*a2)
    goto LABEL_33;
  if (*(_QWORD *)(v11 + 64) - *(_QWORD *)(v11 + 56) != 64)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) != 2)
    {
      v75 = "destNode->GetNodeType() == INode::kNTArray";
      v76 = 301;
      goto LABEL_132;
    }
    v23 = *(_QWORD *)(v11 + 56);
    v24 = (unsigned __int16 *)(v23 + 64);
    v25 = *(_DWORD *)(v23 + 88);
    if (v25 != 5)
    {
      if (v25 == 3)
      {
        v26 = *(char *)(v23 + 87);
        if (v26 < 0)
        {
          if (*(_QWORD *)(v23 + 72) != 3)
          {
LABEL_130:
            v75 = "aliasPos->second[2].step == \"[1]\"";
            v76 = 304;
            goto LABEL_132;
          }
          v24 = *(unsigned __int16 **)v24;
        }
        else if (v26 != 3)
        {
          goto LABEL_130;
        }
        v29 = *v24;
        v30 = *((unsigned __int8 *)v24 + 2);
        if (v29 == 12635 && v30 == 93)
        {
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v83);
          (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v83.n128_u64[0] + 656))(&v87, v83.n128_u64[0], 1);
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, (__int128 *)&v87);
          v32 = (std::__shared_weak_count *)v87.n128_u64[1];
          if (v87.n128_u64[1])
          {
            v33 = (unint64_t *)(v87.n128_u64[1] + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = (std::__shared_weak_count *)v83.n128_u64[1];
          if (v83.n128_u64[1])
          {
            v36 = (unint64_t *)(v83.n128_u64[1] + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
          v9 = *a2 != 0;
          if (a4 && *a2)
          {
            v9 = 1;
            *a4 = 1;
          }
          goto LABEL_34;
        }
        goto LABEL_130;
      }
LABEL_33:
      v9 = 0;
      goto LABEL_34;
    }
    v28 = *(char *)(v23 + 87);
    if (v28 < 0)
    {
      if (*(_QWORD *)(v23 + 72) != 23)
      {
LABEL_131:
        v75 = "aliasPos->second[2].step == \"[?xml:lang=\\\"x-default\\\"]\"";
        v76 = 315;
LABEL_132:
        __assert_rtn("HandleConstAliasStep", "XMPUtils.cpp", v76, v75);
      }
      v24 = *(unsigned __int16 **)v24;
    }
    else if (v28 != 23)
    {
      goto LABEL_131;
    }
    v38 = *(_QWORD *)v24;
    v39 = *((_QWORD *)v24 + 1);
    v40 = *(_QWORD *)((char *)v24 + 15);
    if (v38 == 0x616C3A6C6D783F5BLL && v39 == 0x65642D78223D676ELL && v40 == 0x5D22746C75616665)
    {
      v83 = 0uLL;
      v43 = (std::__shared_weak_count *)a2[1];
      v87.n128_u64[0] = *a2;
      v87.n128_u64[1] = (unint64_t)v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(p_shared_owners);
        while (__stxr(v45 + 1, p_shared_owners));
      }
      XMPUtils::GetNodeChildIterator(&v87, &v83);
      if (v43)
      {
        v46 = (unint64_t *)&v43->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v48 = 1;
      while (1)
      {
        v9 = v83.n128_u64[0] != 0;
        if (!v83.n128_u64[0])
          break;
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v83.n128_u64[0] + 48))(&v87);
        v82 = v87;
        (*(void (**)(__n128 *__return_ptr, unint64_t, const char *, uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v87.n128_u64[0] + 128))(&v87, v87.n128_u64[0], "http://www.w3.org/XML/1998/namespace", 36, "lang", -1, v87);
        v81 = v87;
        v49 = v87.n128_u64[0];
        if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v87.n128_u64[0] + 40))(v87.n128_u64[0]) != 1)
          goto LABEL_94;
        (*(void (**)(__n128 *__return_ptr, unint64_t))(*(_QWORD *)v49 + 232))(&v87, v49);
        v78 = (std::__shared_weak_count *)v87.n128_u64[1];
        (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v87.n128_u64[0] + 504))(&v79, v87);
        v50 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 192))(v79);
        v51 = strcmp("x-default", v50);
        v52 = v80;
        if (v80)
        {
          v53 = (unint64_t *)&v80->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        if (v78)
        {
          v55 = (unint64_t *)&v78->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (!v51)
        {
          v87 = v82;
          if (v82.n128_u64[1])
          {
            v67 = (unint64_t *)(v82.n128_u64[1] + 8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, (__int128 *)&v87);
          v69 = (std::__shared_weak_count *)v87.n128_u64[1];
          if (v87.n128_u64[1])
          {
            v70 = (unint64_t *)(v87.n128_u64[1] + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v60 = 0;
          if (a4)
            *a4 = v48;
        }
        else
        {
LABEL_94:
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v83.n128_u64[0] + 56))(&v87);
          ++v48;
          v57 = (std::__shared_weak_count *)v83.n128_u64[1];
          v83 = v87;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = 1;
        }
        v61 = (std::__shared_weak_count *)v81.n128_u64[1];
        if (v81.n128_u64[1])
        {
          v62 = (unint64_t *)(v81.n128_u64[1] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = (std::__shared_weak_count *)v82.n128_u64[1];
        if (!v82.n128_u64[1])
          goto LABEL_109;
        v65 = (unint64_t *)(v82.n128_u64[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
          if ((v60 & 1) == 0)
            break;
        }
        else
        {
LABEL_109:
          if ((v60 & 1) == 0)
            break;
        }
      }
      v72 = (std::__shared_weak_count *)v83.n128_u64[1];
      if (v83.n128_u64[1])
      {
        v73 = (unint64_t *)(v83.n128_u64[1] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      goto LABEL_34;
    }
    goto LABEL_131;
  }
  v9 = 1;
LABEL_34:
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86) < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_188089EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v30 - 96);
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void XMPUtils::GetNodeChildIterator(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  __int128 v17;

  *a2 = 0;
  a2[1] = 0;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 248))(&v17);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v17 + *(_QWORD *)(*(_QWORD *)v17 - 688)) + 552))(&v17);
    v16 = v17;
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v16);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
LABEL_20:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 4)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 240))(&v17);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v17 + *(_QWORD *)(*(_QWORD *)v17 - 688)) + 552))(&v17);
    v16 = v17;
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v16);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v7 = v15;
    if (v15)
    {
      v13 = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(v13);
      while (__stlxr(v9 - 1, v13));
      goto LABEL_20;
    }
  }
}

void sub_18808A11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

BOOL XMPUtils::HandleAliasStep(_QWORD *a1, uint64_t *a2, char a3, unsigned int a4, _QWORD *a5, int *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const std::string *v20;
  int64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  XMPUtils *p_p;
  std::string *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  int v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  int v44;
  int v45;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  XMPUtils *v51;
  std::string *v52;
  uint64_t v53;
  __n128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  XMPUtils *v68;
  std::string *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  const char *v76;
  int v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  char v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  AdobeXMPCore::ISimpleNode_v1 *v101;
  const char *v102;
  uint64_t v103;
  unint64_t v104;
  AdobeXMPCore::ISimpleNode_v1 *v105;
  const char *v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  const char *v120;
  int v121;
  _QWORD *exception;
  std::__shared_weak_count *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __int128 v129;
  std::string v130;
  void *__p;
  const char *v132;
  uint64_t v133;
  __n128 v134;

  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a5, (uint64_t)a1);
  v12 = *a2;
  v13 = a2[1];
  v14 = v13 - *a2;
  if (v13 == *a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Empty XPath";
    *((_BYTE *)exception + 16) = 0;
  }
  if ((*(_BYTE *)(v12 + 56) & 0x10) == 0)
    return 0;
  v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::find<std::string>(sRegisteredAliasMap, (const void **)(v12 + 32));
  if (sRegisteredAliasMap + 8 == v16)
    XMPUtils::HandleAliasStep();
  v17 = v16;
  v132 = 0;
  v133 = 0;
  __p = 0;
  v18 = *(char **)(v16 + 56);
  if (v18[23] < 0)
    v18 = *(char **)v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, v18);
  v19 = *(_QWORD *)(v17 + 56);
  v20 = (const std::string *)(v19 + 32);
  if (*(char *)(v19 + 55) < 0)
  {
    v22 = *(char **)(v19 + 32);
    v21 = *(_QWORD *)(v19 + 40);
  }
  else
  {
    v21 = *(unsigned __int8 *)(v19 + 55);
    v22 = (char *)(v19 + 32);
  }
  if (v21 < 1)
    goto LABEL_26;
  v23 = &v22[v21];
  v24 = v22;
  while (1)
  {
    v25 = (char *)memchr(v24, 58, v21);
    if (!v25)
      goto LABEL_26;
    if (*v25 == 58)
      break;
    v24 = v25 + 1;
    v21 = v23 - (_BYTE *)v24;
    if (v23 - (_BYTE *)v24 < 1)
      goto LABEL_26;
  }
  if (v25 == v23 || v25 - v22 == -1)
LABEL_26:
    __assert_rtn("HandleAliasStep", "XMPUtils.cpp", 362, "colonPos != std::string::npos");
  memset(&v130, 0, sizeof(v130));
  std::string::basic_string(&v130, v20, v25 - v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v134);
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 792)) + 648))(&v134);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v134);
  v26 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v27 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (!*a5 && (a3 & 1) == 0)
    goto LABEL_25;
  v29 = *(_QWORD *)(v17 + 56);
  v30 = (*(_QWORD *)(v17 + 64) - v29) >> 5;
  if (v30 == 2)
  {
    if (!*a5)
    {
      std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a5, (uint64_t)a1);
      if (v14 == 64)
        v31 = (const char *)a4;
      else
        v31 = 0;
      v134 = 0uLL;
      if (v133 >= 0)
        p_p = (XMPUtils *)&__p;
      else
        p_p = (XMPUtils *)__p;
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v130;
      else
        v33 = (std::string *)v130.__r_.__value_.__r.__words[0];
      XMPUtils::CreateTerminalNode(p_p, (AdobeXMPCore_Int::IUTF8String_I *)v33, v31, &v134);
      if (v134.n128_u64[0])
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 240))(&v129);
        (*(void (**)(_QWORD, __n128 *))(*(_QWORD *)(v129 + *(_QWORD *)(*(_QWORD *)v129 - 688)) + 520))(v129 + *(_QWORD *)(*(_QWORD *)v129 - 688), &v134);
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v35 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a5, (uint64_t *)&v134);
        v15 = *a5 != 0;
      }
      else
      {
        v15 = 0;
      }
      v41 = (std::__shared_weak_count *)v134.n128_u64[1];
      if (v134.n128_u64[1])
      {
        v42 = (unint64_t *)(v134.n128_u64[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      goto LABEL_209;
    }
    goto LABEL_208;
  }
  if (v30 != 3)
  {
    v120 = "aliasPos->second.size() == 3";
    v121 = 381;
    goto LABEL_218;
  }
  v37 = (unsigned __int16 *)(v29 + 64);
  v38 = *(_DWORD *)(v29 + 88);
  if (v38 != 5)
  {
    if (v38 == 3)
    {
      v39 = *(char *)(v29 + 87);
      if (v39 < 0)
      {
        if (*(_QWORD *)(v29 + 72) != 3)
        {
LABEL_216:
          v120 = "aliasPos->second[2].step == \"[1]\"";
          v121 = 383;
          goto LABEL_218;
        }
        v37 = *(unsigned __int16 **)v37;
      }
      else if (v39 != 3)
      {
        goto LABEL_216;
      }
      v44 = *v37;
      v45 = *((unsigned __int8 *)v37 + 2);
      if (v44 != 12635 || v45 != 93)
        goto LABEL_216;
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 792)) + 648))(&v134);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v134);
      v47 = (std::__shared_weak_count *)v134.n128_u64[1];
      if (v134.n128_u64[1])
      {
        v48 = (unint64_t *)(v134.n128_u64[1] + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = *a5;
      if (*a5 || (a3 & 1) != 0)
      {
        if (!v50)
        {
          v134 = 0uLL;
          if (v133 >= 0)
            v51 = (XMPUtils *)&__p;
          else
            v51 = (XMPUtils *)__p;
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v130;
          else
            v52 = (std::string *)v130.__r_.__value_.__r.__words[0];
          XMPUtils::CreateTerminalNode(v51, (AdobeXMPCore_Int::IUTF8String_I *)v52, (const char *)0x600, &v134);
          v53 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
          (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v53 + 520))(v53, &v134);
          std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a5, (uint64_t *)&v134);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
          v50 = *a5;
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v50 + 248))(&v129);
        (*(void (**)(__n128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v129 + 656))(&v134, v129, 1);
        v54 = v134;
        if (v134.n128_u64[1])
        {
          v55 = (unint64_t *)(v134.n128_u64[1] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)v54.n128_u64[1] + 16))(v54.n128_u64[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v54.n128_u64[1]);
          }
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v129 + 1);
        if (*((_QWORD *)&v129 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v129 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        if (v54.n128_u64[0])
        {
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v129);
          (*(void (**)(__n128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v129 + 656))(&v134, v129, 1);
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v134);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v129);
          v15 = 1;
          if (a6)
            *a6 = 1;
          goto LABEL_209;
        }
        v134 = 0uLL;
        if (v133 >= 0)
          v101 = (AdobeXMPCore::ISimpleNode_v1 *)&__p;
        else
          v101 = (AdobeXMPCore::ISimpleNode_v1 *)__p;
        if (v133 >= 0)
          v102 = (const char *)HIBYTE(v133);
        else
          v102 = v132;
        AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v101, v102, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"[]", (AdobeXMPCore_Int::IUTF8String_I *)"", &v134);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v129);
        v103 = v129;
        if (v134.n128_u64[0])
          v104 = v134.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v134.n128_u64[0] - 544);
        else
          v104 = 0;
        v128.n128_u64[0] = v104;
        v128.n128_u64[1] = v134.n128_u64[1];
        if (v134.n128_u64[1])
        {
          v109 = (unint64_t *)(v134.n128_u64[1] + 8);
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        (*(void (**)(uint64_t, __n128 *, uint64_t))(*(_QWORD *)v103 + 664))(v103, &v128, 1);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v129);
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v128);
        (*(void (**)(__int128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v128.n128_u64[0] + 656))(&v129, v128.n128_u64[0], 1);
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, &v129);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v129);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
        goto LABEL_208;
      }
    }
    goto LABEL_25;
  }
  v40 = *(char *)(v29 + 87);
  if (v40 < 0)
  {
    if (*(_QWORD *)(v29 + 72) != 23)
    {
LABEL_217:
      v120 = "aliasPos->second[2].step == \"[?xml:lang=\\\"x-default\\\"]\"";
      v121 = 406;
LABEL_218:
      __assert_rtn("HandleAliasStep", "XMPUtils.cpp", v121, v120);
    }
    v37 = *(unsigned __int16 **)v37;
  }
  else if (v40 != 23)
  {
    goto LABEL_217;
  }
  v60 = *(_QWORD *)v37;
  v61 = *((_QWORD *)v37 + 1);
  v62 = *(_QWORD *)((char *)v37 + 15);
  if (v60 != 0x616C3A6C6D783F5BLL || v61 != 0x65642D78223D676ELL || v62 != 0x5D22746C75616665)
    goto LABEL_217;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 792)) + 648))(&v134);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v134);
  v65 = (std::__shared_weak_count *)v134.n128_u64[1];
  if (v134.n128_u64[1])
  {
    v66 = (unint64_t *)(v134.n128_u64[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (*a5 || (a3 & 1) != 0)
  {
    v129 = 0uLL;
    if (v133 >= 0)
      v68 = (XMPUtils *)&__p;
    else
      v68 = (XMPUtils *)__p;
    if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = &v130;
    else
      v69 = (std::string *)v130.__r_.__value_.__r.__words[0];
    XMPUtils::CreateTerminalNode(v68, (AdobeXMPCore_Int::IUTF8String_I *)v69, (const char *)0x1200, &v129);
    v70 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v70 + 520))(v70, &v129);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a5, (uint64_t *)&v129);
    v128 = 0uLL;
    v71 = a5[1];
    v134.n128_u64[0] = *a5;
    v134.n128_u64[1] = v71;
    if (v71)
    {
      v72 = (unint64_t *)(v71 + 8);
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
    }
    XMPUtils::GetNodeChildIterator(&v134, &v128);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
    v74 = 1;
    while (v128.n128_u64[0])
    {
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v128.n128_u64[0] + 48))(&v134);
      v127 = v134;
      (*(void (**)(__n128 *__return_ptr, unint64_t, const char *, uint64_t, const char *, uint64_t, __n128))(*(_QWORD *)v134.n128_u64[0] + 128))(&v134, v134.n128_u64[0], "http://www.w3.org/XML/1998/namespace", 36, "lang", -1, v134);
      v126 = v134;
      v75 = v134.n128_u64[0];
      if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v134.n128_u64[0] + 40))(v134.n128_u64[0]) != 1)
        goto LABEL_135;
      (*(void (**)(__n128 *__return_ptr, unint64_t))(*(_QWORD *)v75 + 232))(&v134, v75);
      v123 = (std::__shared_weak_count *)v134.n128_u64[1];
      (*(void (**)(unint64_t *__return_ptr, __n128))(*(_QWORD *)v134.n128_u64[0] + 504))(&v124, v134);
      v76 = (const char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v124 + 192))(v124);
      v77 = strcmp("x-default", v76);
      v78 = v125;
      if (v125)
      {
        p_shared_owners = (unint64_t *)&v125->__shared_owners_;
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      if (v123)
      {
        v81 = (unint64_t *)&v123->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      if (!v77)
      {
        v134 = v127;
        if (v127.n128_u64[1])
        {
          v93 = (unint64_t *)(v127.n128_u64[1] + 8);
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v134);
        v95 = (std::__shared_weak_count *)v134.n128_u64[1];
        if (v134.n128_u64[1])
        {
          v96 = (unint64_t *)(v134.n128_u64[1] + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        v86 = 0;
        if (a6)
          *a6 = v74;
      }
      else
      {
LABEL_135:
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v128.n128_u64[0] + 56))(&v134);
        ++v74;
        v83 = (std::__shared_weak_count *)v128.n128_u64[1];
        v128 = v134;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
        v86 = 1;
      }
      v87 = (std::__shared_weak_count *)v126.n128_u64[1];
      if (v126.n128_u64[1])
      {
        v88 = (unint64_t *)(v126.n128_u64[1] + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = (std::__shared_weak_count *)v127.n128_u64[1];
      if (!v127.n128_u64[1])
        goto LABEL_150;
      v91 = (unint64_t *)(v127.n128_u64[1] + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
        if ((v86 & 1) == 0)
          goto LABEL_207;
      }
      else
      {
LABEL_150:
        if ((v86 & 1) == 0)
          goto LABEL_207;
      }
    }
    v134 = 0uLL;
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)"http://www.w3.org/XML/1998/namespace", (const char *)0x24, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"lang", (AdobeXMPCore_Int::IUTF8String_I *)"x-default", &v134);
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v126);
    (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v126.n128_u64[0] + 656))(&v127, v126.n128_u64[0], 1);
    v98 = v127.n128_u64[0];
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
    if (v98)
    {
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v126);
      (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v126.n128_u64[0] + 656))(&v127, v126.n128_u64[0], 1);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v127);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
      if (a6)
        *a6 = 1;
      v99 = *a5;
      if (v134.n128_u64[0])
        v100 = v134.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v134.n128_u64[0] - 544);
      else
        v100 = 0;
      v127.n128_u64[0] = v100;
      v127.n128_u64[1] = v134.n128_u64[1];
      if (v134.n128_u64[1])
      {
        v111 = (unint64_t *)(v134.n128_u64[1] + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v99 + 136))(v99, &v127);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
    }
    else
    {
      v127 = 0uLL;
      if (v133 >= 0)
        v105 = (AdobeXMPCore::ISimpleNode_v1 *)&__p;
      else
        v105 = (AdobeXMPCore::ISimpleNode_v1 *)__p;
      if (v133 >= 0)
        v106 = (const char *)HIBYTE(v133);
      else
        v106 = v132;
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v105, v106, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"[]", 0, &v127);
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a5 + 248))(&v126);
      v107 = v126.n128_u64[0];
      if (v127.n128_u64[0])
        v108 = v127.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v127.n128_u64[0] - 544);
      else
        v108 = 0;
      v124 = v108;
      v125 = (std::__shared_weak_count *)v127.n128_u64[1];
      if (v127.n128_u64[1])
      {
        v113 = (unint64_t *)(v127.n128_u64[1] + 8);
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      (*(void (**)(unint64_t, unint64_t *, uint64_t))(*(_QWORD *)v107 + 664))(v107, &v124, 1);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
      v115 = *a5;
      if (v134.n128_u64[0])
        v116 = v134.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v134.n128_u64[0] - 544);
      else
        v116 = 0;
      v126.n128_u64[0] = v116;
      v126.n128_u64[1] = v134.n128_u64[1];
      if (v134.n128_u64[1])
      {
        v117 = (unint64_t *)(v134.n128_u64[1] + 8);
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
      }
      (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v115 + 136))(v115, &v126);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
      (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)*a5 + 248))(&v124);
      (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v124 + 656))(&v126, v124, 1);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, (__int128 *)&v126);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v126);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v124);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v127);
    }
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v134);
LABEL_207:
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v129);
LABEL_208:
    v15 = 1;
    goto LABEL_209;
  }
LABEL_25:
  v15 = 0;
LABEL_209:
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133) < 0)
    operator delete(__p);
  return v15;
}

void sub_18808AFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::FindNode(_QWORD *a1, uint64_t *a2, int a3, unsigned int a4, char *a5, _DWORD *a6, unsigned int a7)
{
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  std::__shared_weak_count *size;
  std::string::size_type v32;
  std::string::size_type v33;
  uint64_t v34;
  uint64_t v35;
  std::string *p_str;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  XMPUtils *v44;
  AdobeXMPCore_Int::IUTF8String_I *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::string::size_type v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  std::string::size_type v69;
  std::string *v70;
  void **v71;
  int v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char v101;
  std::string *v102;
  std::string::size_type v103;
  std::string::size_type v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string *v108;
  std::string::size_type v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  AdobeXMPCore::ISimpleNode_v1 *v116;
  const char *v117;
  AdobeXMPCore_Int::IUTF8String_I *v118;
  std::string::size_type v119;
  void *v120;
  char *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::string::size_type v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  std::string::size_type v153;
  std::string *v154;
  void **v155;
  int v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::string::size_type v169;
  std::string::size_type v170;
  std::string::size_type v171;
  unint64_t v172;
  std::string *v173;
  std::string::value_type *v174;
  uint64_t v175;
  uint64_t v176;
  std::string::size_type v177;
  void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char v185;
  XMPUtils *v186;
  int v187;
  AdobeXMPCore::IArrayNode_v1 *v188;
  char *v189;
  AdobeXMPCore_Int::IUTF8String_I *v190;
  std::string::size_type v191;
  char *v192;
  std::string::size_type v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  int v203;
  AdobeXMPCore::IArrayNode_v1 *v204;
  char *v205;
  AdobeXMPCore_Int::IUTF8String_I *v206;
  std::string::size_type v207;
  void *v208;
  void *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  int v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  XMPUtils *v219;
  AdobeXMPCore_Int::IUTF8String_I *v220;
  unint64_t *v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  int v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  AdobeXMPCore::IStructureNode_v1 *v238;
  char *v239;
  AdobeXMPCore_Int::IUTF8String_I *v240;
  std::string::size_type v241;
  char *v242;
  std::string::size_type v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  AdobeXMPCore::IStructureNode_v1 *v253;
  char *v254;
  AdobeXMPCore_Int::IUTF8String_I *v255;
  std::string::size_type v256;
  void *v257;
  void *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  int v264;
  unint64_t *v265;
  AdobeXMPCore_Int::IUTF8String_I *v266;
  unint64_t *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  int v274;
  AdobeXMPCore::IArrayNode_v1 *v275;
  char *v276;
  AdobeXMPCore_Int::IUTF8String_I *v277;
  std::string::size_type v278;
  char *v279;
  std::string::size_type v280;
  unint64_t *v281;
  unint64_t v282;
  AdobeXMPCore::ISimpleNode_v1 *v283;
  const char *v284;
  AdobeXMPCore_Int::IUTF8String_I *v285;
  std::string::size_type v286;
  char *v287;
  std::string::size_type v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  unint64_t *v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  AdobeXMPCore::ISimpleNode_v1 *v303;
  const char *v304;
  AdobeXMPCore_Int::IUTF8String_I *v305;
  std::string::size_type v306;
  void *v307;
  void *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  unint64_t *v315;
  AdobeXMPCore::ISimpleNode_v1 *v316;
  const char *v317;
  AdobeXMPCore_Int::IUTF8String_I *v318;
  std::string::size_type v319;
  char *v320;
  std::string::size_type v321;
  unint64_t *v322;
  unint64_t v323;
  AdobeXMPCore::IStructureNode_v1 *v324;
  char *v325;
  AdobeXMPCore_Int::IUTF8String_I *v326;
  std::string::size_type v327;
  char *v328;
  std::string::size_type v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::string::size_type v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t *v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  _QWORD *exception;
  _QWORD *v386;
  _QWORD *v387;
  int v388;
  int v389;
  unsigned int v390;
  char *v391;
  int v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  __n128 v400;
  void *__s1[2];
  uint64_t v402;
  __n128 v403;
  uint64_t v404;
  std::__shared_weak_count *v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  std::string v408;
  __n128 v409;
  void *__p[2];
  uint64_t v411;
  __n128 v412;
  std::string v413;
  std::string v414;
  std::string v415;
  std::string v416;
  std::string __str;
  __int128 v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  char *v421;
  std::__shared_weak_count *v422;
  __n128 v423;

  v423 = 0uLL;
  v13 = (_QWORD *)*a1;
  if (*a1)
    v14 = (char *)v13 + *(_QWORD *)(*v13 - 544);
  else
    v14 = 0;
  v15 = a1[1];
  v423.n128_u64[0] = (unint64_t)v14;
  v423.n128_u64[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v13 = (_QWORD *)*a1;
  }
  v421 = 0;
  v422 = 0;
  if (v13)
    v18 = (char *)v13 + *(_QWORD *)(*v13 - 544);
  else
    v18 = 0;
  v19 = (std::__shared_weak_count *)a1[1];
  v421 = v18;
  v422 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  v419 = 0;
  v420 = 0;
  if (a4 && (a3 & 1) == 0)
    __assert_rtn("FindNode", "XMPUtils.cpp", 468, "(leafOptions == 0) || createNodes");
  if (*a2 == a2[1])
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Empty XPath";
    *((_BYTE *)exception + 16) = 0;
  }
  v418 = 0uLL;
  v22.n128_f64[0] = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v418);
  if ((*(_BYTE *)(*a2 + 56) & 0x10) != 0)
  {
    if (!XMPUtils::HandleAliasStep(a1, a2, a3, a4, &v423, 0))
    {
LABEL_738:
      v341 = 0;
      goto LABEL_739;
    }
    v393 = a3;
    v390 = a4;
    v391 = a5;
    v23 = 2;
  }
  else
  {
    v393 = a3;
    v390 = a4;
    v391 = a5;
    v23 = 1;
  }
  v24 = ((a2[1] - *a2) >> 5) - a7;
  if (v23 >= v24)
  {
LABEL_688:
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v391, (uint64_t *)&v423);
    v341 = 1;
  }
  else
  {
    v389 = 0;
    v388 = 0;
    while (2)
    {
      v25 = v423.n128_u64[0];
      if (v423.n128_u64[0])
      {
        memset(&__str, 0, sizeof(__str));
        v26 = *a2 + 32 * v23;
        if (*(char *)(v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
        }
        else
        {
          v27 = *(_OWORD *)v26;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v27;
        }
        memset(&v416, 0, sizeof(v416));
        v28 = *a2;
        v29 = *a2 + 32 * v23;
        if (*(char *)(v29 - 9) < 0)
        {
          std::string::__init_copy_ctor_external(&v416, *(const std::string::value_type **)(v29 - 32), *(_QWORD *)(v29 - 24));
          v28 = *a2;
        }
        else
        {
          v22 = *(__n128 *)(v29 - 32);
          v416.__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 - 16);
          *(__n128 *)&v416.__r_.__value_.__l.__data_ = v22;
        }
        memset(&v415, 0, sizeof(v415));
        switch(*(_DWORD *)(v28 + 32 * v23 + 24))
        {
          case 1:
            v30 = std::string::find(&__str, 58, 0);
            memset(&v414, 0, sizeof(v414));
            std::string::basic_string(&v414, &__str, 0, v30, (std::allocator<char> *)&v408);
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v418 + 80))(&v413);
            size = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
            v32 = v413.__r_.__value_.__r.__words[0];
            std::string::basic_string(&v413, &__str, v30 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v408);
            if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v415.__r_.__value_.__l.__data_);
            v415 = v413;
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v423.n128_u64[0] + 40))(v423.n128_u64[0]) != 4)
            {
              v43 = 5;
              goto LABEL_592;
            }
            *(_OWORD *)&v413.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v423.n128_u64[0] + 240))(&v413);
            std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v421, (uint64_t *)&v423);
            v33 = v413.__r_.__value_.__r.__words[0];
            v34 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 192))(v32);
            v35 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 208))(v32);
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v33 + 648))(__p, v33, v34, v35, (std::string::size_type)p_str->__r_.__value_.__r.__words + v30 + 1, -1);
            v22 = *(__n128 *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v37 = (std::__shared_weak_count *)v423.n128_u64[1];
            v423 = v22;
            if (v37)
            {
              v38 = (unint64_t *)&v37->__shared_owners_;
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v40 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v41 = (unint64_t *)((char *)__p[1] + 8);
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                std::__shared_weak_count::__release_weak(v40);
              }
            }
            if (v423.n128_u64[0])
              v43 = 4;
            else
              v43 = 1;
            if (v423.n128_u64[0] || (v393 & 1) == 0)
              goto LABEL_587;
            if (v23 == ((a2[1] - *a2) >> 5) - 1)
            {
              __p[0] = 0;
              __p[1] = 0;
              v44 = (XMPUtils *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 192))(v32);
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v45 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
              else
                v45 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
              XMPUtils::CreateTerminalNode(v44, v45, (const char *)v390, __p);
              (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v413.__r_.__value_.__l.__data_ + 656))(v413.__r_.__value_.__r.__words[0], __p);
              std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v423, (uint64_t *)__p);
              if (!v389)
              {
                std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                v389 = 1;
              }
              v46 = (std::__shared_weak_count *)__p[1];
              if (!__p[1])
                goto LABEL_586;
              v47 = (unint64_t *)((char *)__p[1] + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
            }
            else
            {
              v187 = *(_DWORD *)(*a2 + 32 * v23 + 56);
              if ((v187 - 3) >= 4)
              {
                if (v187 == 2)
                {
                  __p[0] = 0;
                  __p[1] = 0;
                  v283 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 192))(v32);
                  v284 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 208))(v32);
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v285 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                  else
                    v285 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v286 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                  else
                    v286 = v415.__r_.__value_.__l.__size_;
                  AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v283, v284, (const char *)v286, (const char *)0xFFFFFFFFFFFFFFFFLL, v285, 0, __p);
                  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v421 + 240))(&v408);
                  v287 = (char *)__p[0];
                  if (__p[0])
                    v287 = (char *)__p[0] + *(_QWORD *)(*(_QWORD *)__p[0] - 544);
                  v288 = v408.__r_.__value_.__r.__words[0];
                  __s1[0] = v287;
                  __s1[1] = __p[1];
                  if (__p[1])
                  {
                    v289 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v290 = __ldxr(v289);
                    while (__stxr(v290 + 1, v289));
                  }
                  (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v288 + 656))(v288, __s1);
                  v291 = (std::__shared_weak_count *)__s1[1];
                  if (__s1[1])
                  {
                    v292 = (unint64_t *)((char *)__s1[1] + 8);
                    do
                      v293 = __ldaxr(v292);
                    while (__stlxr(v293 - 1, v292));
                    if (!v293)
                    {
                      ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                      std::__shared_weak_count::__release_weak(v291);
                    }
                  }
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__p);
                  if (!v389)
                  {
                    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                    v389 = 1;
                  }
                  v294 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                  if (v408.__r_.__value_.__l.__size_)
                  {
                    v295 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                    do
                      v296 = __ldaxr(v295);
                    while (__stlxr(v296 - 1, v295));
                    if (!v296)
                    {
                      ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                      std::__shared_weak_count::__release_weak(v294);
                    }
                  }
                  v46 = (std::__shared_weak_count *)__p[1];
                  if (!__p[1])
                    goto LABEL_586;
                  v297 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v48 = __ldaxr(v297);
                  while (__stlxr(v48 - 1, v297));
                }
                else
                {
                  if (v187 != 1)
                    goto LABEL_586;
                  __p[0] = 0;
                  __p[1] = 0;
                  v238 = (AdobeXMPCore::IStructureNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 192))(v32);
                  v239 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 208))(v32);
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v240 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                  else
                    v240 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v241 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                  else
                    v241 = v415.__r_.__value_.__l.__size_;
                  AdobeXMPCore::IStructureNode_v1::CreateStructureNode(v238, v239, (const char *)v241, v240, __p);
                  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v421 + 240))(&v408);
                  v242 = (char *)__p[0];
                  if (__p[0])
                    v242 = (char *)__p[0] + *(_QWORD *)(*(_QWORD *)__p[0] - 544);
                  v243 = v408.__r_.__value_.__r.__words[0];
                  __s1[0] = v242;
                  __s1[1] = __p[1];
                  if (__p[1])
                  {
                    v244 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v245 = __ldxr(v244);
                    while (__stxr(v245 + 1, v244));
                  }
                  (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v243 + 656))(v243, __s1);
                  v246 = (std::__shared_weak_count *)__s1[1];
                  if (__s1[1])
                  {
                    v247 = (unint64_t *)((char *)__s1[1] + 8);
                    do
                      v248 = __ldaxr(v247);
                    while (__stlxr(v248 - 1, v247));
                    if (!v248)
                    {
                      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                      std::__shared_weak_count::__release_weak(v246);
                    }
                  }
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__p);
                  if (!v389)
                  {
                    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                    v389 = 1;
                  }
                  v249 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                  if (v408.__r_.__value_.__l.__size_)
                  {
                    v250 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                    do
                      v251 = __ldaxr(v250);
                    while (__stlxr(v251 - 1, v250));
                    if (!v251)
                    {
                      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                      std::__shared_weak_count::__release_weak(v249);
                    }
                  }
                  v46 = (std::__shared_weak_count *)__p[1];
                  if (!__p[1])
                    goto LABEL_586;
                  v252 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v48 = __ldaxr(v252);
                  while (__stlxr(v48 - 1, v252));
                }
              }
              else
              {
                __p[0] = 0;
                __p[1] = 0;
                v188 = (AdobeXMPCore::IArrayNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 192))(v32);
                v189 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v32 + 208))(v32);
                if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v190 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                else
                  v190 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v191 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                else
                  v191 = v415.__r_.__value_.__l.__size_;
                AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(v188, v189, (const char *)v191, v190, __p);
                *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v421 + 240))(&v408);
                v192 = (char *)__p[0];
                if (__p[0])
                  v192 = (char *)__p[0] + *(_QWORD *)(*(_QWORD *)__p[0] - 544);
                v193 = v408.__r_.__value_.__r.__words[0];
                __s1[0] = v192;
                __s1[1] = __p[1];
                if (__p[1])
                {
                  v194 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v195 = __ldxr(v194);
                  while (__stxr(v195 + 1, v194));
                }
                (*(void (**)(std::string::size_type, void **))(*(_QWORD *)v193 + 656))(v193, __s1);
                v196 = (std::__shared_weak_count *)__s1[1];
                if (__s1[1])
                {
                  v197 = (unint64_t *)((char *)__s1[1] + 8);
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__p);
                if (!v389)
                {
                  std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                  v389 = 1;
                }
                v199 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                if (v408.__r_.__value_.__l.__size_)
                {
                  v200 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                v46 = (std::__shared_weak_count *)__p[1];
                if (!__p[1])
                  goto LABEL_586;
                v202 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v48 = __ldaxr(v202);
                while (__stlxr(v48 - 1, v202));
              }
            }
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
LABEL_586:
            v43 = 0;
LABEL_587:
            v298 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
            if (v413.__r_.__value_.__l.__size_)
            {
              v299 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
              do
                v300 = __ldaxr(v299);
              while (__stlxr(v300 - 1, v299));
              if (!v300)
              {
                ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                std::__shared_weak_count::__release_weak(v298);
              }
            }
LABEL_592:
            if ((SHIBYTE(v414.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_593;
            operator delete(v414.__r_.__value_.__l.__data_);
            if (!v43)
              goto LABEL_594;
LABEL_595:
            if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v415.__r_.__value_.__l.__data_);
              if (!size)
                goto LABEL_603;
            }
            else if (!size)
            {
              goto LABEL_603;
            }
            v301 = (unint64_t *)&size->__shared_owners_;
            do
              v302 = __ldaxr(v301);
            while (__stlxr(v302 - 1, v301));
            if (!v302)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
LABEL_603:
            if (SHIBYTE(v416.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v416.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            switch(v43)
            {
              case 0:
              case 4:
                if (++v23 == v24)
                  goto LABEL_688;
                continue;
              case 2:
                goto LABEL_688;
              case 5:
                v25 = v423.n128_u64[0];
                goto LABEL_690;
              default:
                goto LABEL_738;
            }
          case 2:
            v102 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v102 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if (v102->__r_.__value_.__s.__data_[0] != 63)
              __assert_rtn("FindNode", "XMPUtils.cpp", 728, "stepStr[0] == '?'");
            std::string::basic_string(&v414, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v408);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = v414;
            v103 = std::string::find(&__str, 58, 0);
            memset(&v414, 0, sizeof(v414));
            std::string::basic_string(&v414, &__str, 0, v103, (std::allocator<char> *)&v408);
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v418 + 80))(&v413);
            size = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
            v104 = v413.__r_.__value_.__r.__words[0];
            std::string::basic_string(&v413, &__str, v103 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v408);
            if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v415.__r_.__value_.__l.__data_);
            v415 = v413;
            std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v421, (uint64_t *)&v423);
            v105 = v423.n128_u64[0];
            v106 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v104 + 192))(v104);
            v107 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v104 + 208))(v104);
            if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v108 = &v415;
            else
              v108 = (std::string *)v415.__r_.__value_.__r.__words[0];
            if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v109 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
            else
              v109 = v415.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr, unint64_t, uint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v105 + 128))(&v413, v105, v106, v107, v108, v109);
            v22 = *(__n128 *)&v413.__r_.__value_.__l.__data_;
            *(_OWORD *)&v413.__r_.__value_.__l.__data_ = 0uLL;
            v110 = (std::__shared_weak_count *)v423.n128_u64[1];
            v423 = v22;
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
            if (v413.__r_.__value_.__l.__size_)
            {
              v114 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            if (v423.n128_u64[0])
              v101 = 0;
            else
              v101 = v393;
            if (v423.n128_u64[0])
              v43 = 4;
            else
              v43 = 1;
            if ((v101 & 1) != 0)
            {
              *(_OWORD *)&v413.__r_.__value_.__l.__data_ = 0uLL;
              v116 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v104 + 192))(v104);
              v117 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v104 + 208))(v104);
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v118 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
              else
                v118 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v119 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
              else
                v119 = v415.__r_.__value_.__l.__size_;
              AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v116, v117, (const char *)v119, (const char *)0xFFFFFFFFFFFFFFFFLL, v118, 0, &v413);
              v120 = (void *)v413.__r_.__value_.__r.__words[0];
              if (v413.__r_.__value_.__r.__words[0])
                v120 = (void *)(v413.__r_.__value_.__r.__words[0]
                              + *(_QWORD *)(*(_QWORD *)v413.__r_.__value_.__l.__data_ - 544));
              v121 = v421;
              __p[0] = v120;
              __p[1] = (void *)v413.__r_.__value_.__l.__size_;
              if (v413.__r_.__value_.__l.__size_)
              {
                v122 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                do
                  v123 = __ldxr(v122);
                while (__stxr(v123 + 1, v122));
              }
              (*(void (**)(char *, void **))(*(_QWORD *)v121 + 136))(v121, __p);
              v124 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v125 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)&v413);
              v127 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
              if (v413.__r_.__value_.__l.__size_)
              {
                v128 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                do
                  v129 = __ldaxr(v128);
                while (__stlxr(v129 - 1, v128));
                if (!v129)
                {
                  ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                  std::__shared_weak_count::__release_weak(v127);
                }
              }
              v43 = 0;
            }
            if ((SHIBYTE(v414.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_684;
            operator delete(v414.__r_.__value_.__l.__data_);
            if ((v101 & 1) != 0)
              goto LABEL_594;
            goto LABEL_595;
          case 3:
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v423.n128_u64[0] + 40))(v423.n128_u64[0]) != 2)
              goto LABEL_765;
            *(_OWORD *)&v413.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v423.n128_u64[0] + 248))(&v413);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            {
              v85 = __str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_ <= 1 || *__str.__r_.__value_.__l.__data_ != 91)
                goto LABEL_761;
            }
            else
            {
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < 2u || __str.__r_.__value_.__s.__data_[0] != 91)
                goto LABEL_761;
              v85 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            v169 = v85 - 1;
            if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + v169) == 93)
              {
                v170 = __str.__r_.__value_.__l.__size_;
                goto LABEL_307;
              }
            }
            else if (__str.__r_.__value_.__s.__data_[v169] == 93)
            {
              v170 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_307:
              v171 = v170 - 2;
              if (!v171)
                goto LABEL_766;
              v172 = 0;
              v173 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v173 = (std::string *)__str.__r_.__value_.__r.__words[0];
              v174 = &v173->__r_.__value_.__s.__data_[1];
              do
              {
                v176 = *v174++;
                v175 = v176;
                if ((v176 - 48) >= 0xAu)
                  __assert_rtn("FindNode", "XMPUtils.cpp", 579, "('0' <= stepStr[chNum]) && (stepStr[chNum] <= '9')");
                v172 = v175 + 10 * v172 - 48;
                --v171;
              }
              while (v171);
              if (!v172)
              {
LABEL_766:
                v387 = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)v387 = 102;
                v387[1] = "Array index must be larger than one";
                *((_BYTE *)v387 + 16) = 0;
              }
              if (a6)
                *a6 = v172;
              v177 = std::string::find(&v416, 58, 0);
              memset(&v414, 0, sizeof(v414));
              std::string::basic_string(&v414, &v416, 0, v177, (std::allocator<char> *)&v408);
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v418 + 80))(__p);
              v178 = __p[0];
              size = (std::__shared_weak_count *)__p[1];
              MEMORY[0x18D761A14](&v415, "[]");
              std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v421, (uint64_t *)&v423);
              (*(void (**)(void **__return_ptr, std::string::size_type, unint64_t))(*(_QWORD *)v413.__r_.__value_.__l.__data_ + 656))(__p, v413.__r_.__value_.__r.__words[0], v172);
              v22 = *(__n128 *)__p;
              __p[0] = 0;
              __p[1] = 0;
              v179 = (std::__shared_weak_count *)v423.n128_u64[1];
              v423 = v22;
              if (v179)
              {
                v180 = (unint64_t *)&v179->__shared_owners_;
                do
                  v181 = __ldaxr(v180);
                while (__stlxr(v181 - 1, v180));
                if (!v181)
                {
                  ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                  std::__shared_weak_count::__release_weak(v179);
                }
              }
              v182 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v183 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
              if (v423.n128_u64[0])
                v43 = 4;
              else
                v43 = 1;
              if (v423.n128_u64[0] || (v393 & 1) == 0)
                goto LABEL_536;
              __p[0] = 0;
              __p[1] = 0;
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v421 + 248))(__p);
              if ((*(uint64_t (**)(char *))(*(_QWORD *)((char *)__p[0]
                                                                 + *(_QWORD *)(*(_QWORD *)__p[0] - 688))
                                                     + 560))((char *)__p[0] + *(_QWORD *)(*(_QWORD *)__p[0] - 688))
                 + 1 < v172)
              {
                v43 = 5;
LABEL_531:
                v268 = (std::__shared_weak_count *)__p[1];
                if (__p[1])
                {
                  v269 = (unint64_t *)((char *)__p[1] + 8);
                  do
                    v270 = __ldaxr(v269);
                  while (__stlxr(v270 - 1, v269));
                  if (!v270)
                  {
                    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                    std::__shared_weak_count::__release_weak(v268);
                  }
                }
LABEL_536:
                if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v414.__r_.__value_.__l.__data_);
                v271 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
                if (!v413.__r_.__value_.__l.__size_)
                  goto LABEL_593;
                v272 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (v273)
                {
LABEL_593:
                  if (v43)
                    goto LABEL_595;
                  goto LABEL_594;
                }
                ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                std::__shared_weak_count::__release_weak(v271);
                if (v43)
                  goto LABEL_595;
LABEL_594:
                v43 = 0;
                goto LABEL_595;
              }
              if (v23 == ((a2[1] - *a2) >> 5) - 1)
              {
                *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                if (v178)
                  v186 = (XMPUtils *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 192))(v178);
                else
                  v186 = (XMPUtils *)"http://ns.adobe.com/xap/1.0/";
                if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v266 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                else
                  v266 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                XMPUtils::CreateTerminalNode(v186, v266, (const char *)v390, &v408);
                (*(void (**)(void *, std::string *, unint64_t))(*(_QWORD *)__p[0] + 664))(__p[0], &v408, v172);
                std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v423, (uint64_t *)&v408);
                if (!v389)
                {
                  std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                  v389 = 1;
                  v388 = v172;
                }
                v216 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                if (!v408.__r_.__value_.__l.__size_)
                  goto LABEL_530;
                v267 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                do
                  v218 = __ldaxr(v267);
                while (__stlxr(v218 - 1, v267));
              }
              else
              {
                v203 = *(_DWORD *)(*a2 + 32 * v23 + 56);
                if ((v203 - 3) >= 4)
                {
                  if (v203 == 2)
                  {
                    *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                    v303 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 192))(v178);
                    v304 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 208))(v178);
                    if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v305 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                    else
                      v305 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                    if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v306 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                    else
                      v306 = v415.__r_.__value_.__l.__size_;
                    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v303, v304, (const char *)v306, (const char *)0xFFFFFFFFFFFFFFFFLL, v305, 0, &v408);
                    v307 = (void *)v408.__r_.__value_.__r.__words[0];
                    if (v408.__r_.__value_.__r.__words[0])
                      v307 = (void *)(v408.__r_.__value_.__r.__words[0]
                                    + *(_QWORD *)(*(_QWORD *)v408.__r_.__value_.__l.__data_ - 544));
                    v308 = __p[0];
                    __s1[0] = v307;
                    __s1[1] = (void *)v408.__r_.__value_.__l.__size_;
                    if (v408.__r_.__value_.__l.__size_)
                    {
                      v309 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                      do
                        v310 = __ldxr(v309);
                      while (__stxr(v310 + 1, v309));
                    }
                    (*(void (**)(void *, void **, unint64_t))(*(_QWORD *)v308 + 664))(v308, __s1, v172);
                    v311 = (std::__shared_weak_count *)__s1[1];
                    if (__s1[1])
                    {
                      v312 = (unint64_t *)((char *)__s1[1] + 8);
                      do
                        v313 = __ldaxr(v312);
                      while (__stlxr(v313 - 1, v312));
                      if (!v313)
                      {
                        ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                        std::__shared_weak_count::__release_weak(v311);
                      }
                    }
                    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)&v408);
                    if (!v389)
                    {
                      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                      if ((_DWORD)v172)
                        v314 = v172;
                      else
                        v314 = v388;
                      v388 = v314;
                      v389 = 1;
                    }
                    v216 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                    if (!v408.__r_.__value_.__l.__size_)
                      goto LABEL_530;
                    v315 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                    do
                      v218 = __ldaxr(v315);
                    while (__stlxr(v218 - 1, v315));
                  }
                  else
                  {
                    if (v203 != 1)
                      goto LABEL_530;
                    *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                    v253 = (AdobeXMPCore::IStructureNode_v1 *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 192))(v178);
                    v254 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 208))(v178);
                    if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v255 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                    else
                      v255 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                    if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v256 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                    else
                      v256 = v415.__r_.__value_.__l.__size_;
                    AdobeXMPCore::IStructureNode_v1::CreateStructureNode(v253, v254, (const char *)v256, v255, &v408);
                    v257 = (void *)v408.__r_.__value_.__r.__words[0];
                    if (v408.__r_.__value_.__r.__words[0])
                      v257 = (void *)(v408.__r_.__value_.__r.__words[0]
                                    + *(_QWORD *)(*(_QWORD *)v408.__r_.__value_.__l.__data_ - 544));
                    v258 = __p[0];
                    __s1[0] = v257;
                    __s1[1] = (void *)v408.__r_.__value_.__l.__size_;
                    if (v408.__r_.__value_.__l.__size_)
                    {
                      v259 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                      do
                        v260 = __ldxr(v259);
                      while (__stxr(v260 + 1, v259));
                    }
                    (*(void (**)(void *, void **, unint64_t))(*(_QWORD *)v258 + 664))(v258, __s1, v172);
                    v261 = (std::__shared_weak_count *)__s1[1];
                    if (__s1[1])
                    {
                      v262 = (unint64_t *)((char *)__s1[1] + 8);
                      do
                        v263 = __ldaxr(v262);
                      while (__stlxr(v263 - 1, v262));
                      if (!v263)
                      {
                        ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                        std::__shared_weak_count::__release_weak(v261);
                      }
                    }
                    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)&v408);
                    if (!v389)
                    {
                      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                      if ((_DWORD)v172)
                        v264 = v172;
                      else
                        v264 = v388;
                      v388 = v264;
                      v389 = 1;
                    }
                    v216 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                    if (!v408.__r_.__value_.__l.__size_)
                      goto LABEL_530;
                    v265 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                    do
                      v218 = __ldaxr(v265);
                    while (__stlxr(v218 - 1, v265));
                  }
                }
                else
                {
                  *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
                  v204 = (AdobeXMPCore::IArrayNode_v1 *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 192))(v178);
                  v205 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v178 + 208))(v178);
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v206 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                  else
                    v206 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v207 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                  else
                    v207 = v415.__r_.__value_.__l.__size_;
                  AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(v204, v205, (const char *)v207, v206, &v408);
                  v208 = (void *)v408.__r_.__value_.__r.__words[0];
                  if (v408.__r_.__value_.__r.__words[0])
                    v208 = (void *)(v408.__r_.__value_.__r.__words[0]
                                  + *(_QWORD *)(*(_QWORD *)v408.__r_.__value_.__l.__data_ - 544));
                  v209 = __p[0];
                  __s1[0] = v208;
                  __s1[1] = (void *)v408.__r_.__value_.__l.__size_;
                  if (v408.__r_.__value_.__l.__size_)
                  {
                    v210 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                    do
                      v211 = __ldxr(v210);
                    while (__stxr(v211 + 1, v210));
                  }
                  (*(void (**)(void *, void **, unint64_t))(*(_QWORD *)v209 + 664))(v209, __s1, v172);
                  v212 = (std::__shared_weak_count *)__s1[1];
                  if (__s1[1])
                  {
                    v213 = (unint64_t *)((char *)__s1[1] + 8);
                    do
                      v214 = __ldaxr(v213);
                    while (__stlxr(v214 - 1, v213));
                    if (!v214)
                    {
                      ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                      std::__shared_weak_count::__release_weak(v212);
                    }
                  }
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)&v408);
                  if (!v389)
                  {
                    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                    if ((_DWORD)v172)
                      v215 = v172;
                    else
                      v215 = v388;
                    v388 = v215;
                    v389 = 1;
                  }
                  v216 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
                  if (!v408.__r_.__value_.__l.__size_)
                    goto LABEL_530;
                  v217 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                  do
                    v218 = __ldaxr(v217);
                  while (__stlxr(v218 - 1, v217));
                }
              }
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
LABEL_530:
              v43 = 0;
              goto LABEL_531;
            }
LABEL_761:
            __assert_rtn("FindNode", "XMPUtils.cpp", 577, "(stepStr.length() >= 2) && (*(stepStr.begin()) == '[') && (stepStr[stepStr.length() - 1] == ']')");
          case 4:
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v423.n128_u64[0] + 40))(v423.n128_u64[0]) != 2)
            {
LABEL_765:
              v386 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v386 = 102;
              v386[1] = "Indexing applied to non-array";
              *((_BYTE *)v386 + 16) = 0;
            }
            __p[0] = 0;
            __p[1] = 0;
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v423.n128_u64[0] + 248))(__p);
            v86 = std::string::find(&v416, 58, 0);
            memset(&v414, 0, sizeof(v414));
            std::string::basic_string(&v414, &v416, 0, v86, (std::allocator<char> *)&v408);
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v418 + 80))(&v413);
            size = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
            v87 = v413.__r_.__value_.__r.__words[0];
            std::string::basic_string(&v413, &v416, v86 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v408);
            if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v415.__r_.__value_.__l.__data_);
            v415 = v413;
            v88 = v423.n128_u64[0];
            *(__n128 *)&v413.__r_.__value_.__l.__data_ = v423;
            if (v423.n128_u64[1])
            {
              v89 = (unint64_t *)(v423.n128_u64[1] + 8);
              do
                v90 = __ldxr(v89);
              while (__stxr(v90 + 1, v89));
            }
            *(_OWORD *)&v408.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v88 + 248))(&v408);
            if (!v413.__r_.__value_.__r.__words[0]
              || (*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v413.__r_.__value_.__l.__data_
                                                                        + 40))(v413.__r_.__value_.__r.__words[0]) != 2)
            {
              goto LABEL_667;
            }
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v413.__r_.__value_.__l.__data_ + 248))(__s1);
            v91 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)__s1[0]
                                                                + *(_QWORD *)(*(_QWORD *)__s1[0] - 688))
                                                    + 560))((char *)__s1[0] + *(_QWORD *)(*(_QWORD *)__s1[0] - 688));
            v92 = (std::__shared_weak_count *)__s1[1];
            if (__s1[1])
            {
              v93 = (unint64_t *)((char *)__s1[1] + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            if (a6)
              *a6 = v91 + 1;
            if (v91)
            {
              (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v408.__r_.__value_.__l.__data_
                                                                                           + 656))(__s1, v408.__r_.__value_.__r.__words[0], v91);
              v22 = *(__n128 *)__s1;
              __s1[0] = 0;
              __s1[1] = 0;
              v95 = (std::__shared_weak_count *)v423.n128_u64[1];
              v423 = v22;
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              v98 = (std::__shared_weak_count *)__s1[1];
              if (!__s1[1])
                goto LABEL_162;
              v99 = (unint64_t *)((char *)__s1[1] + 8);
              do
                v100 = __ldaxr(v99);
              while (__stlxr(v100 - 1, v99));
LABEL_160:
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                std::__shared_weak_count::__release_weak(v98);
              }
LABEL_162:
              v101 = 0;
              v43 = 4;
LABEL_668:
              v332 = (std::__shared_weak_count *)v408.__r_.__value_.__l.__size_;
              if (v408.__r_.__value_.__l.__size_)
              {
                v333 = (unint64_t *)(v408.__r_.__value_.__l.__size_ + 8);
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                  std::__shared_weak_count::__release_weak(v332);
                }
              }
              v335 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
              if (v413.__r_.__value_.__l.__size_)
              {
                v336 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                do
                  v337 = __ldaxr(v336);
                while (__stlxr(v337 - 1, v336));
                if (!v337)
                {
                  ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
                  std::__shared_weak_count::__release_weak(v335);
                }
              }
              if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v414.__r_.__value_.__l.__data_);
              v338 = (std::__shared_weak_count *)__p[1];
              if (!__p[1])
                goto LABEL_684;
              v339 = (unint64_t *)((char *)__p[1] + 8);
              do
                v340 = __ldaxr(v339);
              while (__stlxr(v340 - 1, v339));
              if (!v340)
              {
                ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                std::__shared_weak_count::__release_weak(v338);
                if ((v101 & 1) != 0)
                  goto LABEL_594;
              }
              else
              {
LABEL_684:
                if ((v101 & 1) != 0)
                  goto LABEL_594;
              }
              goto LABEL_595;
            }
            if (!v393)
            {
              v101 = 0;
              v43 = 1;
              goto LABEL_668;
            }
            if (v23 == ((a2[1] - *a2) >> 5) - 1)
            {
              __s1[0] = 0;
              __s1[1] = 0;
              v219 = (XMPUtils *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 192))(v87);
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v220 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
              else
                v220 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
              XMPUtils::CreateTerminalNode(v219, v220, (const char *)v390, __s1);
              (*(void (**)(std::string::size_type, void **, uint64_t))(*(_QWORD *)v408.__r_.__value_.__l.__data_
                                                                               + 664))(v408.__r_.__value_.__r.__words[0], __s1, 1);
              std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v423, (uint64_t *)__s1);
              if (!v389)
              {
                std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                v388 = 1;
                v389 = 1;
              }
              v98 = (std::__shared_weak_count *)__s1[1];
              if (!__s1[1])
                goto LABEL_162;
              v221 = (unint64_t *)((char *)__s1[1] + 8);
              do
                v100 = __ldaxr(v221);
              while (__stlxr(v100 - 1, v221));
              goto LABEL_160;
            }
            v274 = *(_DWORD *)(*a2 + 32 * v23 + 56);
            if ((v274 - 3) >= 4)
            {
              if (v274 != 1)
              {
                if (v274 == 2)
                {
                  __s1[0] = 0;
                  __s1[1] = 0;
                  v316 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 192))(v87);
                  v317 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 208))(v87);
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v318 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
                  else
                    v318 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
                  if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v319 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
                  else
                    v319 = v415.__r_.__value_.__l.__size_;
                  AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v316, v317, (const char *)v319, (const char *)0xFFFFFFFFFFFFFFFFLL, v318, 0, __s1);
                  v320 = (char *)__s1[0];
                  if (__s1[0])
                    v320 = (char *)__s1[0] + *(_QWORD *)(*(_QWORD *)__s1[0] - 544);
                  v321 = v408.__r_.__value_.__r.__words[0];
                  v412.n128_u64[0] = (unint64_t)v320;
                  v412.n128_u64[1] = (unint64_t)__s1[1];
                  if (__s1[1])
                  {
                    v322 = (unint64_t *)((char *)__s1[1] + 8);
                    do
                      v323 = __ldxr(v322);
                    while (__stxr(v323 + 1, v322));
                  }
                  (*(void (**)(std::string::size_type, __n128 *, uint64_t))(*(_QWORD *)v321 + 664))(v321, &v412, 1);
                  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v412);
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__s1);
                  if (!v389)
                  {
                    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                    v388 = 1;
                    v389 = 1;
                  }
                  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)__s1);
                  goto LABEL_162;
                }
LABEL_667:
                v43 = 0;
                v101 = 1;
                goto LABEL_668;
              }
              __s1[0] = 0;
              __s1[1] = 0;
              v324 = (AdobeXMPCore::IStructureNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 192))(v87);
              v325 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 208))(v87);
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v326 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
              else
                v326 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v327 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
              else
                v327 = v415.__r_.__value_.__l.__size_;
              AdobeXMPCore::IStructureNode_v1::CreateStructureNode(v324, v325, (const char *)v327, v326, __s1);
              v328 = (char *)__s1[0];
              if (__s1[0])
                v328 = (char *)__s1[0] + *(_QWORD *)(*(_QWORD *)__s1[0] - 544);
              v329 = v408.__r_.__value_.__r.__words[0];
              v412.n128_u64[0] = (unint64_t)v328;
              v412.n128_u64[1] = (unint64_t)__s1[1];
              if (__s1[1])
              {
                v330 = (unint64_t *)((char *)__s1[1] + 8);
                do
                  v331 = __ldxr(v330);
                while (__stxr(v331 + 1, v330));
              }
              (*(void (**)(std::string::size_type, __n128 *, uint64_t))(*(_QWORD *)v329 + 664))(v329, &v412, 1);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v412);
              std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__s1);
              if (!v389)
              {
                std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                v388 = 1;
                v389 = 1;
              }
            }
            else
            {
              __s1[0] = 0;
              __s1[1] = 0;
              v275 = (AdobeXMPCore::IArrayNode_v1 *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 192))(v87);
              v276 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 208))(v87);
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v277 = (AdobeXMPCore_Int::IUTF8String_I *)&v415;
              else
                v277 = (AdobeXMPCore_Int::IUTF8String_I *)v415.__r_.__value_.__r.__words[0];
              if ((v415.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v278 = HIBYTE(v415.__r_.__value_.__r.__words[2]);
              else
                v278 = v415.__r_.__value_.__l.__size_;
              AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(v275, v276, (const char *)v278, v277, __s1);
              v279 = (char *)__s1[0];
              if (__s1[0])
                v279 = (char *)__s1[0] + *(_QWORD *)(*(_QWORD *)__s1[0] - 544);
              v280 = v408.__r_.__value_.__r.__words[0];
              v412.n128_u64[0] = (unint64_t)v279;
              v412.n128_u64[1] = (unint64_t)__s1[1];
              if (__s1[1])
              {
                v281 = (unint64_t *)((char *)__s1[1] + 8);
                do
                  v282 = __ldxr(v281);
                while (__stxr(v282 + 1, v281));
              }
              (*(void (**)(std::string::size_type, __n128 *, uint64_t))(*(_QWORD *)v280 + 664))(v280, &v412, 1);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v412);
              std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v423, (uint64_t)__s1);
              if (!v389)
              {
                std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v419, (uint64_t *)&v423);
                v388 = 1;
                v389 = 1;
              }
            }
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)__s1);
            goto LABEL_667;
          case 5:
            if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v423.n128_u64[0] + 40))(v423.n128_u64[0]) != 2)
            {
              size = 0;
              v43 = 5;
              goto LABEL_595;
            }
            v412 = 0uLL;
            (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v423.n128_u64[0] + 248))(&v412);
            memset(&v414, 0, sizeof(v414));
            memset(&v413, 0, sizeof(v413));
            __p[0] = 0;
            __p[1] = 0;
            v411 = 0;
            SplitNameAndValue((uint64_t)&__str, (uint64_t)&v414, &v413);
            v409 = v423;
            if (v423.n128_u64[1])
            {
              v49 = (unint64_t *)(v423.n128_u64[1] + 8);
              do
                v50 = __ldxr(v49);
              while (__stxr(v50 + 1, v49));
            }
            v51 = std::string::find(&v414, 58, 0);
            memset(&v408, 0, sizeof(v408));
            std::string::basic_string(&v408, &v414, 0, v51, (std::allocator<char> *)__s1);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v418 + 80))(__s1);
            v52 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1[0] + 192))(__s1[0]);
            MEMORY[0x18D761A14](__p, v52);
            v53 = (std::__shared_weak_count *)__s1[1];
            if (__s1[1])
            {
              v54 = (unint64_t *)((char *)__s1[1] + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                std::__shared_weak_count::__release_weak(v53);
              }
            }
            if (v409.n128_u64[0]
              && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v409.n128_u64[0] + 40))(v409.n128_u64[0]) == 2)
            {
              v406 = 0;
              v407 = 0;
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v409.n128_u64[0] + 248))(&v406);
              v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v406 + *(_QWORD *)(*(_QWORD *)v406 - 688)) + 560))(v406 + *(_QWORD *)(*(_QWORD *)v406 - 688));
              if (v56)
              {
                v57 = v56;
                v58 = 0;
                v59 = 1;
                while (1)
                {
                  v404 = 0;
                  v405 = 0;
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v406 + 656))(&v404, v406, v59);
                  v403 = 0uLL;
                  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v404 + 128))(&v403);
                  if (!v403.n128_u64[0])
                  {
                    v72 = 15;
                    goto LABEL_117;
                  }
                  __s1[0] = 0;
                  __s1[1] = 0;
                  v402 = 0;
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v403.n128_u64[0] + 232))(&v398);
                  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v398 + 504))(&v400);
                  v60 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v400.n128_u64[0] + 192))(v400.n128_u64[0]);
                  std::string::basic_string[abi:ne180100]<0>(__s1, v60);
                  v61 = (std::__shared_weak_count *)v400.n128_u64[1];
                  if (v400.n128_u64[1])
                  {
                    v62 = (unint64_t *)(v400.n128_u64[1] + 8);
                    do
                      v63 = __ldaxr(v62);
                    while (__stlxr(v63 - 1, v62));
                    if (!v63)
                    {
                      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                      std::__shared_weak_count::__release_weak(v61);
                    }
                  }
                  v64 = v399;
                  if (v399)
                  {
                    v65 = (unint64_t *)&v399->__shared_owners_;
                    do
                      v66 = __ldaxr(v65);
                    while (__stlxr(v66 - 1, v65));
                    if (!v66)
                    {
                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                      std::__shared_weak_count::__release_weak(v64);
                    }
                  }
                  v67 = HIBYTE(v402);
                  if (v402 >= 0)
                    v68 = (void *)HIBYTE(v402);
                  else
                    v68 = __s1[1];
                  v69 = HIBYTE(v413.__r_.__value_.__r.__words[2]);
                  if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v69 = v413.__r_.__value_.__l.__size_;
                  if (v68 != (void *)v69)
                    goto LABEL_101;
                  v70 = (v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                      ? &v413
                      : (std::string *)v413.__r_.__value_.__r.__words[0];
                  if ((SHIBYTE(v402) & 0x80000000) == 0)
                    break;
                  if (!memcmp(__s1[0], v70, (size_t)__s1[1]))
                    goto LABEL_105;
                  v72 = 0;
LABEL_116:
                  operator delete(__s1[0]);
LABEL_117:
                  v79 = (std::__shared_weak_count *)v403.n128_u64[1];
                  if (v403.n128_u64[1])
                  {
                    v80 = (unint64_t *)(v403.n128_u64[1] + 8);
                    do
                      v81 = __ldaxr(v80);
                    while (__stlxr(v81 - 1, v80));
                    if (!v81)
                    {
                      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                      std::__shared_weak_count::__release_weak(v79);
                    }
                  }
                  v82 = v405;
                  if (v405)
                  {
                    v83 = (unint64_t *)&v405->__shared_owners_;
                    do
                      v84 = __ldaxr(v83);
                    while (__stlxr(v84 - 1, v83));
                    if (!v84)
                    {
                      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                      std::__shared_weak_count::__release_weak(v82);
                    }
                  }
                  if ((v72 == 15 || !v72) && ++v59 <= v57)
                    continue;
                  goto LABEL_434;
                }
                if (HIBYTE(v402))
                {
                  v71 = __s1;
                  while (*(unsigned __int8 *)v71 == v70->__r_.__value_.__s.__data_[0])
                  {
                    v71 = (void **)((char *)v71 + 1);
                    v70 = (std::string *)((char *)v70 + 1);
                    if (!--v67)
                      goto LABEL_105;
                  }
LABEL_101:
                  v72 = 0;
                  if ((v402 & 0x8000000000000000) == 0)
                    goto LABEL_117;
                  goto LABEL_116;
                }
LABEL_105:
                (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v406 + 656))(&v400, v406, v59);
                v22 = v400;
                v400 = 0uLL;
                v73 = (std::__shared_weak_count *)v423.n128_u64[1];
                v423 = v22;
                if (v73)
                {
                  v74 = (unint64_t *)&v73->__shared_owners_;
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
                v76 = (std::__shared_weak_count *)v400.n128_u64[1];
                if (v400.n128_u64[1])
                {
                  v77 = (unint64_t *)(v400.n128_u64[1] + 8);
                  do
                    v78 = __ldaxr(v77);
                  while (__stlxr(v78 - 1, v77));
                  if (!v78)
                  {
                    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                    std::__shared_weak_count::__release_weak(v76);
                  }
                }
                v58 = 1;
                v72 = 13;
                if ((v402 & 0x8000000000000000) == 0)
                  goto LABEL_117;
                goto LABEL_116;
              }
              v58 = 0;
LABEL_434:
              v229 = v407;
              if (v407)
              {
                v230 = (unint64_t *)&v407->__shared_owners_;
                do
                  v231 = __ldaxr(v230);
                while (__stlxr(v231 - 1, v230));
                if (!v231)
                {
                  ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                  std::__shared_weak_count::__release_weak(v229);
                }
              }
              v185 = v58;
              if ((v58 & 1) != 0)
                v43 = 0;
              else
                v43 = 5;
            }
            else
            {
              v185 = 0;
              v43 = 5;
            }
            if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v408.__r_.__value_.__l.__data_);
            v232 = (std::__shared_weak_count *)v409.n128_u64[1];
            if (v409.n128_u64[1])
            {
              v233 = (unint64_t *)(v409.n128_u64[1] + 8);
              do
                v234 = __ldaxr(v233);
              while (__stlxr(v234 - 1, v233));
              if (!v234)
              {
                ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                std::__shared_weak_count::__release_weak(v232);
              }
            }
            if (SHIBYTE(v411) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v413.__r_.__value_.__l.__data_);
            if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v414.__r_.__value_.__l.__data_);
            v235 = (std::__shared_weak_count *)v412.n128_u64[1];
            if (v412.n128_u64[1])
            {
              v236 = (unint64_t *)(v412.n128_u64[1] + 8);
              do
                v237 = __ldaxr(v236);
              while (__stlxr(v237 - 1, v236));
              if (!v237)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
              }
            }
            size = 0;
            if ((v185 & 1) != 0)
              goto LABEL_594;
            goto LABEL_595;
          case 6:
            memset(&v414, 0, sizeof(v414));
            memset(&v413, 0, sizeof(v413));
            __p[0] = 0;
            __p[1] = 0;
            v411 = 0;
            SplitNameAndValue((uint64_t)&__str, (uint64_t)&v414, &v413);
            v412 = v423;
            if (v423.n128_u64[1])
            {
              v130 = (unint64_t *)(v423.n128_u64[1] + 8);
              do
                v131 = __ldxr(v130);
              while (__stxr(v131 + 1, v130));
            }
            v132 = std::string::find(&v414, 58, 0);
            memset(&v408, 0, sizeof(v408));
            std::string::basic_string(&v408, &v414, 0, v132, (std::allocator<char> *)__s1);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v418 + 80))(__s1);
            v133 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1[0] + 192))(__s1[0]);
            MEMORY[0x18D761A14](__p, v133);
            v134 = (std::__shared_weak_count *)__s1[1];
            if (__s1[1])
            {
              v135 = (unint64_t *)((char *)__s1[1] + 8);
              do
                v136 = __ldaxr(v135);
              while (__stlxr(v136 - 1, v135));
              if (!v136)
              {
                ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                std::__shared_weak_count::__release_weak(v134);
              }
            }
            if (v412.n128_u64[0]
              && (*(unsigned int (**)(unint64_t))(*(_QWORD *)v412.n128_u64[0] + 40))(v412.n128_u64[0]) == 2)
            {
              v409 = 0uLL;
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v412.n128_u64[0] + 248))(&v409);
              v137 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v409.n128_u64[0]
                                                                             + *(_QWORD *)(*(_QWORD *)v409.n128_u64[0]
                                                                                         - 688))
                                                                 + 560))(v409.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v409.n128_u64[0] - 688));
              if (v137)
              {
                v138 = v137;
                v139 = 0;
                v140 = 1;
                while (1)
                {
                  v406 = 0;
                  v407 = 0;
                  (*(void (**)(uint64_t *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v409.n128_u64[0]
                                                                                           + 656))(&v406, v409.n128_u64[0], v140);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v406 + 40))(v406) != 4)
                  {
                    v156 = 5;
                    goto LABEL_270;
                  }
                  v404 = 0;
                  v405 = 0;
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)v406 + 240))(__s1);
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__s1[0] + 648))(&v404);
                  v141 = (std::__shared_weak_count *)__s1[1];
                  if (__s1[1])
                  {
                    v142 = (unint64_t *)((char *)__s1[1] + 8);
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  if (v404 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v404 + 40))(v404) == 1)
                  {
                    __s1[0] = 0;
                    __s1[1] = 0;
                    v402 = 0;
                    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v404 + 232))(&v400);
                    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v400.n128_u64[0] + 504))(&v403);
                    v144 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v403.n128_u64[0] + 192))(v403.n128_u64[0]);
                    std::string::basic_string[abi:ne180100]<0>(__s1, v144);
                    v145 = (std::__shared_weak_count *)v403.n128_u64[1];
                    if (v403.n128_u64[1])
                    {
                      v146 = (unint64_t *)(v403.n128_u64[1] + 8);
                      do
                        v147 = __ldaxr(v146);
                      while (__stlxr(v147 - 1, v146));
                      if (!v147)
                      {
                        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                        std::__shared_weak_count::__release_weak(v145);
                      }
                    }
                    v148 = (std::__shared_weak_count *)v400.n128_u64[1];
                    if (v400.n128_u64[1])
                    {
                      v149 = (unint64_t *)(v400.n128_u64[1] + 8);
                      do
                        v150 = __ldaxr(v149);
                      while (__stlxr(v150 - 1, v149));
                      if (!v150)
                      {
                        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                        std::__shared_weak_count::__release_weak(v148);
                      }
                    }
                    v151 = HIBYTE(v402);
                    if (v402 >= 0)
                      v152 = (void *)HIBYTE(v402);
                    else
                      v152 = __s1[1];
                    v153 = HIBYTE(v413.__r_.__value_.__r.__words[2]);
                    if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v153 = v413.__r_.__value_.__l.__size_;
                    if (v152 == (void *)v153)
                    {
                      if ((v413.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v154 = &v413;
                      else
                        v154 = (std::string *)v413.__r_.__value_.__r.__words[0];
                      if (SHIBYTE(v402) < 0)
                      {
                        if (!memcmp(__s1[0], v154, (size_t)__s1[1]))
                        {
LABEL_284:
                          (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v409.n128_u64[0]
                                                                                                  + 656))(&v403, v409.n128_u64[0], v140);
                          v22 = v403;
                          v403 = 0uLL;
                          v163 = (std::__shared_weak_count *)v423.n128_u64[1];
                          v423 = v22;
                          if (v163)
                          {
                            v164 = (unint64_t *)&v163->__shared_owners_;
                            do
                              v165 = __ldaxr(v164);
                            while (__stlxr(v165 - 1, v164));
                            if (!v165)
                            {
                              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                              std::__shared_weak_count::__release_weak(v163);
                            }
                          }
                          v166 = (std::__shared_weak_count *)v403.n128_u64[1];
                          if (v403.n128_u64[1])
                          {
                            v167 = (unint64_t *)(v403.n128_u64[1] + 8);
                            do
                              v168 = __ldaxr(v167);
                            while (__stlxr(v168 - 1, v167));
                            if (!v168)
                            {
                              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                              std::__shared_weak_count::__release_weak(v166);
                            }
                          }
                          v139 = 1;
                          v156 = 16;
                          if ((v402 & 0x8000000000000000) == 0)
                            goto LABEL_265;
                        }
                        else
                        {
                          v156 = 0;
                        }
LABEL_295:
                        operator delete(__s1[0]);
                        goto LABEL_265;
                      }
                      if (!HIBYTE(v402))
                        goto LABEL_284;
                      v155 = __s1;
                      while (*(unsigned __int8 *)v155 == v154->__r_.__value_.__s.__data_[0])
                      {
                        v155 = (void **)((char *)v155 + 1);
                        v154 = (std::string *)((char *)v154 + 1);
                        if (!--v151)
                          goto LABEL_284;
                      }
                    }
                    v156 = 0;
                    if (v402 < 0)
                      goto LABEL_295;
                  }
                  else
                  {
                    v156 = 18;
                  }
LABEL_265:
                  v157 = v405;
                  if (v405)
                  {
                    v158 = (unint64_t *)&v405->__shared_owners_;
                    do
                      v159 = __ldaxr(v158);
                    while (__stlxr(v159 - 1, v158));
                    if (!v159)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }
LABEL_270:
                  v160 = v407;
                  if (!v407)
                    goto LABEL_274;
                  v161 = (unint64_t *)&v407->__shared_owners_;
                  do
                    v162 = __ldaxr(v161);
                  while (__stlxr(v162 - 1, v161));
                  if (!v162)
                  {
                    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                    std::__shared_weak_count::__release_weak(v160);
                    if (!v156)
                      goto LABEL_276;
                  }
                  else
                  {
LABEL_274:
                    if (!v156)
                      goto LABEL_276;
                  }
                  if (v156 != 18)
                  {
                    if (v156 == 16)
                      v156 = 0;
                    goto LABEL_407;
                  }
LABEL_276:
                  if (++v140 > v138)
                    goto LABEL_393;
                }
              }
              v139 = 0;
LABEL_393:
              v156 = 0;
LABEL_407:
              v222 = (std::__shared_weak_count *)v409.n128_u64[1];
              if (v409.n128_u64[1])
              {
                v223 = (unint64_t *)(v409.n128_u64[1] + 8);
                do
                  v224 = __ldaxr(v223);
                while (__stlxr(v224 - 1, v223));
                if (!v224)
                {
                  ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                  std::__shared_weak_count::__release_weak(v222);
                }
              }
              if ((v139 & 1) != 0)
                v225 = 0;
              else
                v225 = 5;
              if (v156)
                v43 = v156;
              else
                v43 = v225;
            }
            else
            {
              v43 = 5;
            }
            if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v408.__r_.__value_.__l.__data_);
            v226 = (std::__shared_weak_count *)v412.n128_u64[1];
            if (v412.n128_u64[1])
            {
              v227 = (unint64_t *)(v412.n128_u64[1] + 8);
              do
                v228 = __ldaxr(v227);
              while (__stlxr(v228 - 1, v227));
              if (!v228)
              {
                ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                std::__shared_weak_count::__release_weak(v226);
              }
            }
            if (SHIBYTE(v411) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v413.__r_.__value_.__l.__data_);
            if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v414.__r_.__value_.__l.__data_);
            size = 0;
            if (!v43)
              goto LABEL_594;
            goto LABEL_595;
          default:
            size = 0;
            goto LABEL_594;
        }
      }
      break;
    }
LABEL_690:
    v341 = 0;
    if (!v25 && v389)
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v419 + 56))(&__str, v22);
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]) == 2)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 248))(&v416);
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)v416.__r_.__value_.__l.__data_
                                                                                      + 680))(&v396, v416.__r_.__value_.__r.__words[0], v388);
        v342 = v397;
        if (v397)
        {
          v343 = (unint64_t *)&v397->__shared_owners_;
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
        v345 = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
        if (!v416.__r_.__value_.__l.__size_)
          goto LABEL_733;
        v346 = (unint64_t *)(v416.__r_.__value_.__l.__size_ + 8);
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
      }
      else
      {
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 40))(__str.__r_.__value_.__r.__words[0]) != 4)
          goto LABEL_733;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 240))(&v416);
        v348 = v416.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v419 + 88))(&v415);
        v349 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v415.__r_.__value_.__l.__data_ + 192))(v415.__r_.__value_.__r.__words[0]);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v419 + 88))(&v414);
        v350 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v414.__r_.__value_.__l.__data_ + 208))(v414.__r_.__value_.__r.__words[0]);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v419 + 72))(&v413);
        v351 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v413.__r_.__value_.__l.__data_ + 192))(v413.__r_.__value_.__r.__words[0]);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v419 + 72))(__p);
        v352 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 208))(__p[0]);
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v348 + 672))(&v394, v348, v349, v350, v351, v352);
        v353 = v395;
        if (v395)
        {
          v354 = (unint64_t *)&v395->__shared_owners_;
          do
            v355 = __ldaxr(v354);
          while (__stlxr(v355 - 1, v354));
          if (!v355)
          {
            ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
            std::__shared_weak_count::__release_weak(v353);
          }
        }
        v356 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v357 = (unint64_t *)((char *)__p[1] + 8);
          do
            v358 = __ldaxr(v357);
          while (__stlxr(v358 - 1, v357));
          if (!v358)
          {
            ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
            std::__shared_weak_count::__release_weak(v356);
          }
        }
        v359 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
        if (v413.__r_.__value_.__l.__size_)
        {
          v360 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
          do
            v361 = __ldaxr(v360);
          while (__stlxr(v361 - 1, v360));
          if (!v361)
          {
            ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
            std::__shared_weak_count::__release_weak(v359);
          }
        }
        v362 = (std::__shared_weak_count *)v414.__r_.__value_.__l.__size_;
        if (v414.__r_.__value_.__l.__size_)
        {
          v363 = (unint64_t *)(v414.__r_.__value_.__l.__size_ + 8);
          do
            v364 = __ldaxr(v363);
          while (__stlxr(v364 - 1, v363));
          if (!v364)
          {
            ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
            std::__shared_weak_count::__release_weak(v362);
          }
        }
        v365 = (std::__shared_weak_count *)v415.__r_.__value_.__l.__size_;
        if (v415.__r_.__value_.__l.__size_)
        {
          v366 = (unint64_t *)(v415.__r_.__value_.__l.__size_ + 8);
          do
            v367 = __ldaxr(v366);
          while (__stlxr(v367 - 1, v366));
          if (!v367)
          {
            ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
            std::__shared_weak_count::__release_weak(v365);
          }
        }
        v345 = (std::__shared_weak_count *)v416.__r_.__value_.__l.__size_;
        if (!v416.__r_.__value_.__l.__size_)
          goto LABEL_733;
        v368 = (unint64_t *)(v416.__r_.__value_.__l.__size_ + 8);
        do
          v347 = __ldaxr(v368);
        while (__stlxr(v347 - 1, v368));
      }
      if (!v347)
      {
        ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
        std::__shared_weak_count::__release_weak(v345);
      }
LABEL_733:
      v369 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v370 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v371 = __ldaxr(v370);
        while (__stlxr(v371 - 1, v370));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
          std::__shared_weak_count::__release_weak(v369);
        }
      }
      goto LABEL_738;
    }
  }
LABEL_739:
  v372 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
  if (*((_QWORD *)&v418 + 1))
  {
    v373 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v375 = v420;
  if (v420)
  {
    v376 = (unint64_t *)&v420->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
    }
  }
  v378 = v422;
  if (v422)
  {
    v379 = (unint64_t *)&v422->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = (std::__shared_weak_count *)v423.n128_u64[1];
  if (v423.n128_u64[1])
  {
    v382 = (unint64_t *)(v423.n128_u64[1] + 8);
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  return v341;
}

void sub_18808DE84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *p_shared_owners;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  if (a58 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  if (*(char *)(v59 - 233) < 0)
    operator delete(*(void **)(v59 - 256));
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (*(char *)(v59 - 201) < 0)
    operator delete(*(void **)(v59 - 224));
  if (*(char *)(v59 - 169) < 0)
    operator delete(*(void **)(v59 - 192));
  __cxa_begin_catch(a1);
  if (a12)
  {
    *(_QWORD *)(v59 - 192) = 0;
    *(_QWORD *)(v59 - 184) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(v59 - 144) + 56))(*(_QWORD *)(v59 - 144));
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v59 - 192) + 40))(*(_QWORD *)(v59 - 192)) == 2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v59 - 192) + 248))(*(_QWORD *)(v59 - 192));
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v59 - 224) + 680))(&a22, *(_QWORD *)(v59 - 224), a10);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v59 - 224);
    }
    else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v59 - 192) + 40))(*(_QWORD *)(v59 - 192)) == 4)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v59 - 192) + 240))(*(_QWORD *)(v59 - 192));
      v63 = *(_QWORD *)(v59 - 224);
      (*(void (**)(_QWORD))(**(_QWORD **)(v59 - 144) + 88))(*(_QWORD *)(v59 - 144));
      v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v59 - 256) + 192))(*(_QWORD *)(v59 - 256));
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v59 - 144) + 88))(&__p);
      v65 = (*(uint64_t (**)(void *))(*(_QWORD *)__p + 208))(__p);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v59 - 144) + 72))(&a50);
      v66 = (*(uint64_t (**)(void *))(*(_QWORD *)a50 + 192))(a50);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v59 - 144) + 72))(&a44);
      v67 = (*(uint64_t (**)(void *))(*(_QWORD *)a44 + 208))(a44);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63 + 672))(&a20, v63, v64, v65, v66, v67);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v59 - 256);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v59 - 224);
    }
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v59 - 192);
  }
  __cxa_rethrow();
}

void sub_18808E5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v52 - 256);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v52 - 224);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v52 - 192);
  __cxa_end_catch();
  JUMPOUT(0x18808E67CLL);
}

uint64_t XMPUtils::FindCnstNode(_QWORD *a1, uint64_t *a2, std::string::size_type *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  std::__shared_weak_count *size;
  std::string::size_type v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_str;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string::size_type v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t i;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  void **p_s1;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::string *v84;
  std::string::size_type v85;
  std::string::size_type v86;
  std::string::size_type v87;
  uint64_t v88;
  uint64_t v89;
  std::string *v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::string::size_type v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::string::size_type v100;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  std::string::size_type v115;
  std::string *v116;
  void **v117;
  int v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  _BOOL4 v128;
  char v129;
  std::string::size_type v130;
  std::string::size_type v131;
  std::string::size_type v132;
  uint64_t v133;
  std::string *v134;
  std::string::value_type *v135;
  int v136;
  int v137;
  std::string::size_type v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t *p_shared_owners;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  int v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::string::size_type v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *exception;
  _QWORD *v175;
  char v176;
  _DWORD *v177;
  uint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  __int128 v182;
  void *__s1;
  size_t __n;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  std::__shared_weak_count *v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  std::string v191;
  std::string::size_type v192;
  std::__shared_weak_count *v193;
  __int128 __p;
  uint64_t v195;
  std::string v196;
  std::string::size_type v197;
  std::__shared_weak_count *v198;
  std::string v199;
  std::string v200;
  std::string __str;
  __int128 v202;

  v202 = 0uLL;
  AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v202);
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)a1);
  v9 = *a2;
  if ((*(_BYTE *)(*a2 + 56) & 0x10) != 0)
  {
    if (!XMPUtils::HandleConstAliasStep(a1, a3, a2, 0))
    {
LABEL_329:
      v167 = 0;
      goto LABEL_330;
    }
    v177 = a4;
    v9 = *a2;
    v10 = 2;
  }
  else
  {
    v177 = a4;
    v10 = 1;
  }
  v11 = a2[1] - v9;
  if (v10 >= v11 >> 5)
    goto LABEL_318;
  v179 = v11 >> 5;
  while (2)
  {
    if (!*a3)
      goto LABEL_329;
    memset(&__str, 0, sizeof(__str));
    v12 = *a2 + 32 * v10;
    if (*(char *)(v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
    }
    else
    {
      v13 = *(_OWORD *)v12;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v13;
    }
    memset(&v200, 0, sizeof(v200));
    v14 = *a2;
    v15 = *a2 + 32 * v10;
    if (*(char *)(v15 - 9) < 0)
    {
      std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)(v15 - 32), *(_QWORD *)(v15 - 24));
      v14 = *a2;
    }
    else
    {
      v16 = *(_OWORD *)(v15 - 32);
      v200.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 - 16);
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v16;
    }
    switch(*(_DWORD *)(v14 + 32 * v10 + 24))
    {
      case 1:
        v17 = std::string::find(&__str, 58, 0);
        memset(&v199, 0, sizeof(v199));
        std::string::basic_string(&v199, &__str, 0, v17, (std::allocator<char> *)&v196);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v202 + 80))(&v196);
        size = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
        v19 = v196.__r_.__value_.__r.__words[0];
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)*a3 + 40))(*a3) != 4)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 102;
          exception[1] = "Named children only allowed for schemas and structs";
          *((_BYTE *)exception + 16) = 0;
        }
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 240))(&v196);
        v20 = v196.__r_.__value_.__r.__words[0];
        v21 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v19 + 192))(v19);
        v22 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v19 + 208))(v19);
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v20 + 648))(&__p, v20, v21, v22, (std::string::size_type)p_str->__r_.__value_.__r.__words + v17 + 1, -1);
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &__p);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
        if (!v196.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v28 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        goto LABEL_139;
      case 2:
        v84 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v84 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v84->__r_.__value_.__s.__data_[0] != 63)
          __assert_rtn("FindCnstNode", "XMPUtils.cpp", 954, "stepStr[0]=='?'");
        std::string::basic_string(&v199, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v196);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v199;
        v85 = std::string::find(&__str, 58, 0);
        memset(&v199, 0, sizeof(v199));
        std::string::basic_string(&v199, &__str, 0, v85, (std::allocator<char> *)&v196);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v202 + 80))(&v196);
        size = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
        v86 = v196.__r_.__value_.__r.__words[0];
        v87 = *a3;
        v88 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v196.__r_.__value_.__l.__data_ + 192))(v196.__r_.__value_.__r.__words[0]);
        v89 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v86 + 208))(v86);
        v90 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v90 = (std::string *)__str.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v87 + 128))(&v196, v87, v88, v89, (std::string::size_type)v90->__r_.__value_.__r.__words + v85 + 1, -1);
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, (__int128 *)&v196);
        v27 = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
        if (!v196.__r_.__value_.__l.__size_)
          goto LABEL_141;
        v91 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
        do
          v29 = __ldaxr(v91);
        while (__stlxr(v29 - 1, v91));
LABEL_139:
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
LABEL_141:
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v199.__r_.__value_.__l.__data_);
        goto LABEL_248;
      case 3:
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)*a3 + 40))(*a3) != 2)
          goto LABEL_339;
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 248))(&v196);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v65 = __str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_ <= 1 || *__str.__r_.__value_.__l.__data_ != 91)
            goto LABEL_337;
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < 2u || __str.__r_.__value_.__s.__data_[0] != 91)
            goto LABEL_337;
          v65 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        v130 = v65 - 1;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + v130) == 93)
          {
            v131 = __str.__r_.__value_.__l.__size_;
LABEL_227:
            v132 = v131 - 2;
            if (!v132)
              goto LABEL_340;
            LODWORD(v133) = 0;
            v134 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v134 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v135 = &v134->__r_.__value_.__s.__data_[1];
            do
            {
              v137 = *v135++;
              v136 = v137;
              if ((v137 - 48) >= 0xA)
                __assert_rtn("FindCnstNode", "XMPUtils.cpp", 918, "('0' <= stepStr[chNum]) && (stepStr[chNum] <= '9')");
              v133 = (v136 + 10 * v133 - 48);
              --v132;
            }
            while (v132);
            if ((int)v133 < 1)
            {
LABEL_340:
              v173 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v173 = 102;
              v173[1] = "Array index must be larger than one";
              *((_BYTE *)v173 + 16) = 0;
            }
            v138 = std::string::find(&v200, 58, 0);
            memset(&v199, 0, sizeof(v199));
            std::string::basic_string(&v199, &v200, 0, v138, (std::allocator<char> *)&__p);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v202 + 80))(&__p);
            size = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v196.__r_.__value_.__l.__data_
                                                                                            + 656))(&__p, v196.__r_.__value_.__r.__words[0], v133);
            std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &__p);
            v139 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v140 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v141 = __ldaxr(v140);
              while (__stlxr(v141 - 1, v140));
              if (!v141)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            if (a5)
              *a5 = v133;
            if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v199.__r_.__value_.__l.__data_);
            v81 = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
            if (v196.__r_.__value_.__l.__size_)
            {
              v142 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
              do
                v83 = __ldaxr(v142);
              while (__stlxr(v83 - 1, v142));
LABEL_246:
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
LABEL_248:
            if (size)
            {
              p_shared_owners = (unint64_t *)&size->__shared_owners_;
              do
                v144 = __ldaxr(p_shared_owners);
              while (__stlxr(v144 - 1, p_shared_owners));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            goto LABEL_307;
          }
        }
        else if (__str.__r_.__value_.__s.__data_[v130] == 93)
        {
          v131 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          goto LABEL_227;
        }
LABEL_337:
        __assert_rtn("FindCnstNode", "XMPUtils.cpp", 916, "(stepStr.length() >= 2) && (*( stepStr.begin()) == '[') && (stepStr[stepStr.length()-1] == ']')");
      case 4:
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)*a3 + 40))(*a3) != 2)
          goto LABEL_339;
        *(_OWORD *)&v196.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a3 + 248))(&v196);
        v66 = std::string::find(&v200, 58, 0);
        memset(&v199, 0, sizeof(v199));
        std::string::basic_string(&v199, &v200, 0, v66, (std::allocator<char> *)&__p);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v202 + 80))(&__p);
        size = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        v67 = *a3;
        v68 = a3[1];
        *(_QWORD *)&__p = *a3;
        *((_QWORD *)&__p + 1) = v68;
        if (v68)
        {
          v69 = (unint64_t *)(v68 + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        if (v67 && (*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v67 + 40))(v67) == 2)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__p + 248))(&v191);
          v71 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(v191.__r_.__value_.__r.__words[0]
                                                                              + *(_QWORD *)(*(_QWORD *)v191.__r_.__value_.__l.__data_
                                                                                          - 688))
                                                                  + 560))(v191.__r_.__value_.__r.__words[0] + *(_QWORD *)(*(_QWORD *)v191.__r_.__value_.__l.__data_ - 688));
          v72 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
          if (v191.__r_.__value_.__l.__size_)
          {
            v73 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (!v71)
          {
            v175 = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)v175 = 102;
            v175[1] = "Array index overflow";
            *((_BYTE *)v175 + 16) = 0;
          }
          (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v196.__r_.__value_.__l.__data_
                                                                                             + 656))(&v191, v196.__r_.__value_.__r.__words[0], v71);
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, (__int128 *)&v191);
          v75 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
          if (v191.__r_.__value_.__l.__size_)
          {
            v76 = (unint64_t *)(v191.__r_.__value_.__l.__size_ + 8);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (a5)
            *a5 = v71;
        }
        v78 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v199.__r_.__value_.__l.__data_);
        v81 = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
        if (!v196.__r_.__value_.__l.__size_)
          goto LABEL_248;
        v82 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        goto LABEL_246;
      case 5:
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)*a3 + 40))(*a3) != 2)
        {
LABEL_339:
          v172 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v172 = 102;
          v172[1] = "Indexes allowed for arrays only";
          *((_BYTE *)v172 + 16) = 0;
        }
        v197 = 0;
        v198 = 0;
        (*(void (**)(std::string::size_type *__return_ptr))(*(_QWORD *)*a3 + 248))(&v197);
        memset(&v199, 0, sizeof(v199));
        memset(&v196, 0, sizeof(v196));
        __p = 0uLL;
        v195 = 0;
        SplitNameAndValue((uint64_t)&__str, (uint64_t)&v199, &v196);
        v30 = (std::__shared_weak_count *)a3[1];
        v192 = *a3;
        v193 = v30;
        if (v30)
        {
          v31 = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        v33 = std::string::find(&v199, 58, 0);
        memset(&v191, 0, sizeof(v191));
        std::string::basic_string(&v191, &v199, 0, v33, (std::allocator<char> *)&__s1);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v202 + 80))(&__s1);
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1 + 192))(__s1);
        MEMORY[0x18D761A14](&__p, v34);
        v35 = (std::__shared_weak_count *)__n;
        if (__n)
        {
          v36 = (unint64_t *)(__n + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v38 = v192;
        if (!v192 || (*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v192 + 40))(v192) != 2)
        {
          v129 = 0;
          goto LABEL_261;
        }
        v189 = 0;
        v190 = 0;
        (*(void (**)(uint64_t *__return_ptr, std::string::size_type))(*(_QWORD *)v38 + 248))(&v189, v38);
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v189 + *(_QWORD *)(*(_QWORD *)v189 - 688)) + 560))(v189 + *(_QWORD *)(*(_QWORD *)v189 - 688));
        if (!v39)
        {
          v41 = 0;
          goto LABEL_255;
        }
        v40 = v39;
        v41 = 0;
        for (i = 1; i <= v40; ++i)
        {
          v187 = 0;
          v188 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v189 + 656))(&v187, v189, i);
          v186 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v187 + 128))(&v186);
          if (!(_QWORD)v186)
          {
            v55 = 11;
            goto LABEL_80;
          }
          __s1 = 0;
          __n = 0;
          v185 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v186 + 232))(&v180);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v180 + 504))(&v182);
          v43 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v182 + 192))(v182);
          std::string::basic_string[abi:ne180100]<0>(&__s1, v43);
          v44 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          v47 = v181;
          if (v181)
          {
            v48 = (unint64_t *)&v181->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = HIBYTE(v185);
          if (v185 >= 0)
            v51 = HIBYTE(v185);
          else
            v51 = __n;
          v52 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v52 = v196.__r_.__value_.__l.__size_;
          if (v51 != v52)
            goto LABEL_67;
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v196;
          else
            v53 = (std::string *)v196.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v185) < 0)
          {
            if (memcmp(__s1, v53, __n))
            {
              v55 = 0;
LABEL_79:
              operator delete(__s1);
              goto LABEL_80;
            }
          }
          else if (HIBYTE(v185))
          {
            p_s1 = &__s1;
            while (*(unsigned __int8 *)p_s1 == v53->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (void **)((char *)p_s1 + 1);
              v53 = (std::string *)((char *)v53 + 1);
              if (!--v50)
                goto LABEL_71;
            }
LABEL_67:
            v55 = 0;
            if (v185 < 0)
              goto LABEL_79;
            goto LABEL_80;
          }
LABEL_71:
          if (a5)
            *a5 = i;
          (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v189 + 656))(&v182, v189, i);
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v182);
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
          if (*((_QWORD *)&v182 + 1))
          {
            v57 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v41 = 1;
          v55 = 9;
          if (v185 < 0)
            goto LABEL_79;
LABEL_80:
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          v62 = v188;
          if (v188)
          {
            v63 = (unint64_t *)&v188->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          if (v55 != 11 && v55)
            break;
        }
LABEL_255:
        v145 = v190;
        if (v190)
        {
          v146 = (unint64_t *)&v190->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        v129 = v41;
LABEL_261:
        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v191.__r_.__value_.__l.__data_);
        v148 = v193;
        if (v193)
        {
          v149 = (unint64_t *)&v193->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
            std::__shared_weak_count::__release_weak(v148);
          }
        }
        if (SHIBYTE(v195) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v196.__r_.__value_.__l.__data_);
        if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v199.__r_.__value_.__l.__data_);
        v151 = v198;
        if (!v198)
          goto LABEL_278;
        v152 = (unint64_t *)&v198->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
          if ((v129 & 1) != 0)
            goto LABEL_307;
LABEL_279:
          v128 = 1;
        }
        else
        {
LABEL_278:
          if ((v129 & 1) == 0)
            goto LABEL_279;
LABEL_307:
          v128 = 0;
        }
LABEL_308:
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v200.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v128)
          goto LABEL_329;
        if (++v10 != v179)
          continue;
LABEL_318:
        v161 = *a3;
        if (!*a3)
          goto LABEL_329;
        if (v177)
        {
          v162 = (std::__shared_weak_count *)a3[1];
          __str.__r_.__value_.__r.__words[0] = v161;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
          if (v162)
          {
            v163 = (unint64_t *)&v162->__shared_owners_;
            do
              v164 = __ldxr(v163);
            while (__stxr(v164 + 1, v163));
          }
          *v177 = XMPUtils::GetIXMPOptions(&__str);
          if (v162)
          {
            v165 = (unint64_t *)&v162->__shared_owners_;
            do
              v166 = __ldaxr(v165);
            while (__stlxr(v166 - 1, v165));
            if (!v166)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
        }
        v167 = 1;
LABEL_330:
        v168 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
        if (*((_QWORD *)&v202 + 1))
        {
          v169 = (unint64_t *)(*((_QWORD *)&v202 + 1) + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        return v167;
      case 6:
        memset(&v199, 0, sizeof(v199));
        memset(&v196, 0, sizeof(v196));
        __p = 0uLL;
        v195 = 0;
        SplitNameAndValue((uint64_t)&__str, (uint64_t)&v199, &v196);
        v92 = (std::__shared_weak_count *)a3[1];
        v197 = *a3;
        v198 = v92;
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
        }
        v95 = std::string::find(&v199, 58, 0);
        memset(&v191, 0, sizeof(v191));
        std::string::basic_string(&v191, &v199, 0, v95, (std::allocator<char> *)&__s1);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v202 + 80))(&__s1);
        v96 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1 + 192))(__s1);
        MEMORY[0x18D761A14](&__p, v96);
        v97 = (std::__shared_weak_count *)__n;
        if (__n)
        {
          v98 = (unint64_t *)(__n + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v100 = v197;
        if (!v197 || (*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v197 + 40))(v197) != 2)
        {
          v128 = 1;
          goto LABEL_294;
        }
        v192 = 0;
        v193 = 0;
        (*(void (**)(std::string::size_type *__return_ptr, std::string::size_type))(*(_QWORD *)v100 + 248))(&v192, v100);
        v101 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(v192
                                                                             + *(_QWORD *)(*(_QWORD *)v192 - 688))
                                                                 + 560))(v192 + *(_QWORD *)(*(_QWORD *)v192 - 688));
        if (!v101)
        {
          v154 = 0;
          goto LABEL_286;
        }
        v176 = 0;
        v102 = 1;
        break;
      default:
        goto LABEL_307;
    }
    break;
  }
  while (1)
  {
    v189 = 0;
    v190 = 0;
    (*(void (**)(uint64_t *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v192 + 656))(&v189, v192, v102);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189) != 4)
    {
      v118 = 1;
      goto LABEL_195;
    }
    v187 = 0;
    v188 = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v189 + 240))(&__s1);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__s1 + 648))(&v187);
    v103 = (std::__shared_weak_count *)__n;
    if (__n)
    {
      v104 = (unint64_t *)(__n + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (v187 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v187 + 40))(v187) == 1)
    {
      __s1 = 0;
      __n = 0;
      v185 = 0;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v187 + 232))(&v182);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v182 + 504))(&v186);
      v106 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v186 + 192))(v186);
      std::string::basic_string[abi:ne180100]<0>(&__s1, v106);
      v107 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
      if (*((_QWORD *)&v186 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v182 + 1);
      if (*((_QWORD *)&v182 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v182 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
        }
      }
      v113 = HIBYTE(v185);
      if (v185 >= 0)
        v114 = HIBYTE(v185);
      else
        v114 = __n;
      v115 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = v196.__r_.__value_.__l.__size_;
      if (v114 == v115)
      {
        if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = &v196;
        else
          v116 = (std::string *)v196.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v185) < 0)
        {
          if (!memcmp(__s1, v116, __n))
          {
LABEL_209:
            if (a5)
              *a5 = v102;
            (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v192 + 656))(&v186, v192, v102);
            std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v186);
            v125 = (std::__shared_weak_count *)*((_QWORD *)&v186 + 1);
            if (*((_QWORD *)&v186 + 1))
            {
              v126 = (unint64_t *)(*((_QWORD *)&v186 + 1) + 8);
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            v176 = 1;
            v118 = 12;
            if ((v185 & 0x8000000000000000) == 0)
              goto LABEL_190;
          }
          else
          {
            v118 = 0;
          }
LABEL_217:
          operator delete(__s1);
          goto LABEL_190;
        }
        if (!HIBYTE(v185))
          goto LABEL_209;
        v117 = &__s1;
        while (*(unsigned __int8 *)v117 == v116->__r_.__value_.__s.__data_[0])
        {
          v117 = (void **)((char *)v117 + 1);
          v116 = (std::string *)((char *)v116 + 1);
          if (!--v113)
            goto LABEL_209;
        }
      }
      v118 = 0;
      if (v185 < 0)
        goto LABEL_217;
    }
    else
    {
      v118 = 14;
    }
LABEL_190:
    v119 = v188;
    if (v188)
    {
      v120 = (unint64_t *)&v188->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
LABEL_195:
    v122 = v190;
    if (!v190)
      goto LABEL_199;
    v123 = (unint64_t *)&v190->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
      if (!v118)
        goto LABEL_201;
    }
    else
    {
LABEL_199:
      if (!v118)
        goto LABEL_201;
    }
    if (v118 != 14)
    {
      if (v118 == 12)
        v154 = 0;
      else
        v154 = v118;
      goto LABEL_285;
    }
LABEL_201:
    if (++v102 > v101)
    {
      v154 = 0;
LABEL_285:
      LOBYTE(v101) = v176;
LABEL_286:
      v155 = v193;
      if (v193)
      {
        v156 = (unint64_t *)&v193->__shared_owners_;
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
          std::__shared_weak_count::__release_weak(v155);
        }
      }
      if (v154)
        v128 = v154;
      else
        v128 = (v101 & 1) == 0;
LABEL_294:
      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v191.__r_.__value_.__l.__data_);
      v158 = v198;
      if (v198)
      {
        v159 = (unint64_t *)&v198->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
      }
      if (SHIBYTE(v195) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v196.__r_.__value_.__l.__data_);
      if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v199.__r_.__value_.__l.__data_);
        if (!v128)
          goto LABEL_307;
      }
      else if (!v128)
      {
        goto LABEL_307;
      }
      goto LABEL_308;
    }
  }
}

void sub_18808FD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v49 - 216);
  if (a43 < 0)
    operator delete(a38);
  if (a49 < 0)
    operator delete(a44);
  if (*(char *)(v49 - 177) < 0)
    operator delete(*(void **)(v49 - 200));
  if (*(char *)(v49 - 153) < 0)
    operator delete(*(void **)(v49 - 176));
  if (*(char *)(v49 - 121) < 0)
    operator delete(*(void **)(v49 - 144));
  v51 = *(std::__shared_weak_count **)(v49 - 104);
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::GetIXMPOptions(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unsigned int v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  char v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  std::__shared_weak_count *v49;
  void *__p;
  std::__shared_weak_count *v51;
  uint64_t v52;
  void *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  __int128 v56;

  v2 = *a1;
  if (!v2)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 184))(v2))
  {
    (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 128))(&v53, *a1, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
    v4 = v53;
    v3 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v4)
      v7 = 80;
    else
      v7 = 16;
    (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 128))(&v53, *a1, "http://www.w3.org/1999/02/22-rdf-syntax-ns#", -1, "type", -1);
    v9 = v53;
    v8 = v54;
    if (v54)
    {
      v10 = (unint64_t *)&v54->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v9)
      v7 |= 0x80u;
  }
  else
  {
    v7 = 0;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 88))(&__p);
  v13 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 192))(__p);
  std::string::basic_string[abi:ne180100]<0>(&v53, v13);
  v14 = v51;
  if (v51)
  {
    v15 = (unint64_t *)&v51->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  __p = 0;
  v51 = 0;
  v52 = 0;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v56);
  v17 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v56 + 192))(v56);
  std::string::basic_string[abi:ne180100]<0>(&__p, v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 56))(&v56);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 168))(*a1))
    v12 = v7 | 0x20;
  else
    v12 = v7;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 1)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v56);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v56 + 520))(v56);
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v22)
      v12 = v12 | 2;
    else
      v12 = v12;
    goto LABEL_42;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 248))(&v56);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    v29 = v56;
    v48 = v56;
    v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v56 + 640))(v56);
    v31 = v12 | 0x200;
    if (v30 != 1)
    {
      if (v30 == 2)
      {
        v31 = v12 | 0x600;
      }
      else
      {
        if (v30 != 4)
        {
          v44 = 0;
          v12 = v12 | 0x200;
          if (!v28)
            goto LABEL_95;
          goto LABEL_91;
        }
        v31 = v12 | 0xE00;
      }
    }
    v35 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 640))(v29) == 4;
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v29 + *(_QWORD *)(*(_QWORD *)v29 - 688)) + 560))(v29 + *(_QWORD *)(*(_QWORD *)v29 - 688)))
      goto LABEL_85;
    v36 = 1;
    while (1)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v29 + 656))(&v56, v29, v36);
      v47 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      v37 = v56;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v56 + 40))(v56) == 1)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v37 + 128))(&v56, v37, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
        v38 = v56;
        if (!*((_QWORD *)&v56 + 1))
          goto LABEL_73;
        v39 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v38 + 1) + 16))(*((_QWORD *)&v38 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v38 + 1));
          if ((_QWORD)v38)
          {
LABEL_74:
            v41 = 0;
            goto LABEL_77;
          }
        }
        else
        {
LABEL_73:
          if ((_QWORD)v38)
            goto LABEL_74;
        }
      }
      v35 = 0;
      v41 = 1;
LABEL_77:
      if (v47)
      {
        v42 = (unint64_t *)&v47->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if ((v41 & 1) == 0)
      {
        ++v36;
        v29 = v48;
        if (v36 <= (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v48 + *(_QWORD *)(*(_QWORD *)v48 - 688)) + 560))(v48 + *(_QWORD *)(*(_QWORD *)v48 - 688)))
          continue;
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
LABEL_85:
      if (v35)
        v12 = v31 | 0x1000;
      else
        v12 = v31;
      v44 = 1;
      if (!v28)
      {
LABEL_95:
        if ((v44 & 1) == 0)
          v12 = 0;
        goto LABEL_42;
      }
LABEL_91:
      v45 = (unint64_t *)&v28->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_95;
    }
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 4)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 56))(&v56);
    v32 = v56;
    if (*((_QWORD *)&v56 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
      }
    }
    if ((_QWORD)v32)
      v12 = v12 | 0x100;
  }
LABEL_42:
  if (v49)
  {
    v25 = (unint64_t *)&v49->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (SHIBYTE(v52) < 0)
    operator delete(__p);
  if (SHIBYTE(v55) < 0)
    operator delete(v53);
  return v12;
}

void sub_188090738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::GetNodeChildCount(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  char *v10;
  std::__shared_weak_count *v11;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  v3 = *a1;
  if (v2 == 2)
  {
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v3 + 248))(&v10);
    v4 = v11;
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 688)] + 560))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 688)]);
    if (!v4)
      return v5;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_10;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) != 4)
    return 0;
  (*(void (**)(char **__return_ptr))(*(_QWORD *)*a1 + 240))(&v10);
  v4 = v11;
  v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 688)] + 560))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 688)]);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
LABEL_10:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v5;
}

void XMPUtils::FindChildNode(_QWORD *a1@<X0>, char *a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int16 IXMPOptions;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  const char *v27;
  _BOOL4 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *exception;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  *a6 = 0;
  a6[1] = 0;
  v12 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v64 = *a1;
  *((_QWORD *)&v64 + 1) = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  IXMPOptions = XMPUtils::GetIXMPOptions(&v64);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if ((IXMPOptions & 0x300) == 0x200)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Named children not allowed for arrays";
    *((_BYTE *)exception + 16) = 0;
  }
  v63 = 0uLL;
  v18 = (std::__shared_weak_count *)a1[1];
  *(_QWORD *)&v64 = *a1;
  *((_QWORD *)&v64 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  XMPUtils::GetNodeChildIterator(&v64, &v63);
  if (v18)
  {
    v21 = (unint64_t *)&v18->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v23 = v63;
  if ((_QWORD)v63)
  {
    v24 = 1;
    do
    {
      v62 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v23 + 48))(&v64);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
      v25 = v64;
      v62 = v64;
      if ((_QWORD)v64)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v64 + 72))(&v64, v64);
        v27 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v64 + 192))(v64);
        if (!strcmp(v27, a2))
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v25 + 88))(&v60, v25);
          v37 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 192))(v60);
          v28 = strcmp(v37, a3) == 0;
          v38 = v61;
          if (v61)
          {
            v39 = (unint64_t *)&v61->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        else
        {
          v28 = 0;
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        if (v28)
        {
          v64 = v62;
          if (*((_QWORD *)&v62 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a6, &v64);
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (*((_QWORD *)&v64 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (a5)
            *a5 = v24;
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
          if (*((_QWORD *)&v62 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          break;
        }
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      }
      if (v26)
      {
        v32 = (unint64_t *)&v26->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v63 + 56))(&v64);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
      v63 = v64;
      if (v34)
      {
        v35 = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        v23 = v63;
      }
      else
      {
        v23 = v64;
      }
      ++v24;
    }
    while (v23);
  }
  v49 = *a6;
  if (!*a6 && a4)
  {
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)a3, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)a2, 0, &v64);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a6, (uint64_t)&v64);
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 240))(&v64);
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)v64 + 656))(v64, a6);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v49 = *a6;
  }
  if (!v49 && a4)
    __assert_rtn("FindChildNode", "XMPUtils.cpp", 1197, "(childNode) || (! createNodes)");
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
}

void sub_188090DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void XMPUtils::ComposeArrayItemPath(char *a1, char *a2, int a3, std::string *a4)
{
  size_t v7;
  _QWORD *exception;
  std::string v9;
  uint64_t v10[3];
  char __str[16];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    XMPUtils::ComposeArrayItemPath();
  if (!a2 || !*a2)
    XMPUtils::ComposeArrayItemPath();
  if (!a4)
    XMPUtils::ComposeArrayItemPath();
  memset(v10, 0, sizeof(v10));
  ExpandXPath(a1, a2, v10);
  if (a3 <= -2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Array index out of bounds";
    *((_BYTE *)exception + 16) = 0;
  }
  v7 = strlen(a2);
  memset(&v9, 0, sizeof(v9));
  std::string::reserve(&v9, v7 + 34);
  MEMORY[0x18D761A14](&v9, a2);
  if (a3 == -1)
  {
    std::string::append(&v9, "[last()]");
  }
  else
  {
    *(_OWORD *)__str = 0u;
    v12 = 0u;
    snprintf(__str, 0x20uLL, "[%d]", a3);
    std::string::append(&v9, __str);
  }
  std::string::operator=(a4, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  *(_QWORD *)__str = v10;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_188090FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  if (a16 < 0)
    operator delete(__p);
  a20 = &a17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void XMPUtils::ComposeStructFieldPath(char *a1, char *a2, char *a3, _BYTE *a4, std::string *a5)
{
  size_t v9;
  void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  _QWORD *exception;
  std::string __str;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  if (!a1 || !a3)
    XMPUtils::ComposeStructFieldPath();
  if (!a2 || !*a2)
    XMPUtils::ComposeStructFieldPath();
  if (!a4 || !*a4)
    XMPUtils::ComposeStructFieldPath();
  if (!a5)
    XMPUtils::ComposeStructFieldPath();
  memset(v19, 0, sizeof(v19));
  ExpandXPath(a1, a2, v19);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  ExpandXPath(a3, a4, (uint64_t *)&v16);
  if (v17 - (_QWORD)v16 != 64)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "The fieldName must be simple";
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = strlen(a2);
  if (*((char *)v16 + 55) < 0)
    v10 = v16[5];
  else
    v10 = (void *)*((unsigned __int8 *)v16 + 55);
  memset(&__str, 0, sizeof(__str));
  std::string::reserve(&__str, (std::string::size_type)v10 + v9 + 1);
  MEMORY[0x18D761A14](&__str, a2);
  std::string::push_back(&__str, 47);
  v11 = *((char *)v16 + 55);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)(v16 + 4);
  else
    v12 = (const std::string::value_type *)v16[4];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v16 + 55);
  else
    v13 = (std::string::size_type)v16[5];
  std::string::append(&__str, v12, v13);
  std::string::operator=(a5, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v16 = (void **)v19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_1880911AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void XMPUtils::ComposeQualifierPath(char *a1, char *a2, char *a3, _BYTE *a4, std::string *a5)
{
  size_t v9;
  void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  _QWORD *exception;
  std::string __str;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[3];

  if (!a1 || !a3)
    XMPUtils::ComposeQualifierPath();
  if (!a2 || !*a2)
    XMPUtils::ComposeQualifierPath();
  if (!a4 || !*a4)
    XMPUtils::ComposeQualifierPath();
  if (!a5)
    XMPUtils::ComposeQualifierPath();
  memset(v19, 0, sizeof(v19));
  ExpandXPath(a1, a2, v19);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  ExpandXPath(a3, a4, (uint64_t *)&v16);
  if (v17 - (_QWORD)v16 != 64)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "The qualifier name must be simple";
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = strlen(a2);
  if (*((char *)v16 + 55) < 0)
    v10 = v16[5];
  else
    v10 = (void *)*((unsigned __int8 *)v16 + 55);
  memset(&__str, 0, sizeof(__str));
  std::string::reserve(&__str, (std::string::size_type)v10 + v9 + 2);
  MEMORY[0x18D761A14](&__str, a2);
  std::string::append(&__str, "/?");
  v11 = *((char *)v16 + 55);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)(v16 + 4);
  else
    v12 = (const std::string::value_type *)v16[4];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v16 + 55);
  else
    v13 = (std::string::size_type)v16[5];
  std::string::append(&__str, v12, v13);
  std::string::operator=(a5, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v16 = (void **)v19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_188091388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void XMPUtils::ConvertFromBool(uint64_t a1, uint64_t a2)
{
  if (!a2)
    XMPUtils::ConvertFromBool();
  JUMPOUT(0x18D761A14);
}

uint64_t XMPUtils::ConvertFromInt(uint64_t a1, const char *a2, std::string *this)
{
  const char *v6;
  char __str[16];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a2 || !this)
    XMPUtils::ConvertFromInt();
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a2)
    v6 = a2;
  else
    v6 = "%d";
  *(_OWORD *)__str = 0u;
  v9 = 0u;
  snprintf(__str, 0x20uLL, v6, a1);
  return MEMORY[0x18D761A14](this, __str);
}

uint64_t XMPUtils::ConvertFromInt64(uint64_t a1, const char *a2, std::string *this)
{
  const char *v6;
  char __str[16];
  __int128 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a2 || !this)
    XMPUtils::ConvertFromInt64();
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a2)
    v6 = a2;
  else
    v6 = "%lld";
  *(_OWORD *)__str = 0u;
  v9 = 0u;
  snprintf(__str, 0x20uLL, v6, a1);
  return MEMORY[0x18D761A14](this, __str);
}

uint64_t XMPUtils::ConvertFromFloat(const char *a1, std::string *this, double a3)
{
  const char *v6;
  char __str[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1 || !this)
    XMPUtils::ConvertFromFloat();
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (*a1)
    v6 = a1;
  else
    v6 = "%f";
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__str = 0u;
  v9 = 0u;
  snprintf(__str, 0x40uLL, v6, *(_QWORD *)&a3);
  return MEMORY[0x18D761A14](this, __str);
}

void XMPUtils::ConvertFromDate(__int128 *a1, std::string *a2)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  _QWORD *exception;
  _QWORD *v8;
  __int128 v9;
  _BYTE v10[24];
  char __str[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a2)
    XMPUtils::ConvertFromDate();
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__str = 0u;
  v12 = 0u;
  v3 = a1[1];
  v9 = *a1;
  *(_OWORD *)v10 = v3;
  *(_QWORD *)&v10[16] = *((_QWORD *)a1 + 4);
  VerifyDateTimeFlags((uint64_t)&v9);
  v4 = DWORD1(v9);
  if (DWORD1(v9))
  {
    if (SDWORD1(v9) < 1)
    {
      v4 = 1;
    }
    else
    {
      if (DWORD1(v9) < 0xD)
        goto LABEL_11;
      v4 = 12;
    }
  }
  else
  {
    v4 = 1;
    if (!DWORD2(v9) && !v10[9])
    {
      v4 = 0;
      goto LABEL_11;
    }
  }
  DWORD1(v9) = v4;
LABEL_11:
  if (!DWORD2(v9))
  {
    if (!v10[9])
    {
      if (v4)
        snprintf(__str, 0x64uLL, "%.4d-%02d");
      else
        snprintf(__str, 0x64uLL, "%.4d");
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  if (SDWORD2(v9) < 1)
  {
LABEL_16:
    v5 = 1;
    goto LABEL_17;
  }
  if (DWORD2(v9) >= 0x20)
  {
    v5 = 31;
LABEL_17:
    DWORD2(v9) = v5;
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Invalid partial date";
    *((_BYTE *)exception + 16) = 0;
  }
  if (v10[9])
    FormatFullDateTime((unsigned int *)&v9, __str);
  else
    snprintf(__str, 0x64uLL, "%.4d-%02d-%02d");
LABEL_25:
  MEMORY[0x18D761A14](a2, __str);
  if (!v10[10])
    return;
  if (*(_DWORD *)&v10[12] > 0x17u)
    goto LABEL_40;
  if ((*(_DWORD *)&v10[16] & 0x80000000) != 0)
    goto LABEL_40;
  if (*(int *)&v10[16] > 59)
    goto LABEL_40;
  v6 = v10[11];
  if (v10[11] < -1 || v10[11] > 1)
    goto LABEL_40;
  if (!v10[11])
  {
    if (!*(_QWORD *)&v10[12])
    {
      std::string::push_back(a2, 90);
      return;
    }
LABEL_40:
    v8 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v8 = 4;
    v8[1] = "Invalid time zone values";
    *((_BYTE *)v8 + 16) = 0;
  }
  snprintf(__str, 0x64uLL, "+%02d:%02d", *(_DWORD *)&v10[12], *(_DWORD *)&v10[16]);
  if (v6 < 0)
    __str[0] = 45;
  std::string::append(a2, __str);
}

uint64_t VerifyDateTimeFlags(uint64_t result)
{
  if (*(_DWORD *)result || *(_DWORD *)(result + 4) || *(_DWORD *)(result + 8))
    *(_BYTE *)(result + 24) = 1;
  if (*(_DWORD *)(result + 12) || *(_DWORD *)(result + 16) || *(_DWORD *)(result + 20) || *(_DWORD *)(result + 36))
    *(_BYTE *)(result + 25) = 1;
  if (*(_BYTE *)(result + 27) || *(_DWORD *)(result + 28) || *(_DWORD *)(result + 32))
  {
    *(_BYTE *)(result + 26) = 1;
LABEL_14:
    *(_BYTE *)(result + 25) = 1;
    return result;
  }
  if (*(_BYTE *)(result + 26))
    goto LABEL_14;
  return result;
}

size_t FormatFullDateTime(unsigned int *a1, char *a2)
{
  unsigned int v4;
  uint64_t v5;
  size_t result;
  char *i;
  int v8;

  AdjustTimeOverflow((uint64_t)a1);
  v4 = a1[9];
  v5 = *a1;
  if (!(a1[5] | v4))
    return snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d");
  if (!v4)
    return snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d:%02d", v5);
  snprintf(a2, 0x64uLL, "%.4d-%02d-%02dT%02d:%02d:%02d.%09d", v5, a1[1], a1[2], a1[3], a1[4], a1[5], v4);
  a2[99] = 0;
  result = strlen(a2);
  for (i = &a2[result]; ; *i = 0)
  {
    v8 = *--i;
    if (v8 != 48)
      break;
  }
  return result;
}

uint64_t XMPUtils::ConvertToBool(XMPUtils *this, const char *a2)
{
  uint64_t v2;
  void **p_p;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *exception;
  _QWORD *v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;

  if (!this || !*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    exception[1] = "Empty convert-from string";
    *((_BYTE *)exception + 16) = 0;
  }
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  v2 = HIBYTE(v17);
  if (v17 >= 0)
    p_p = &__p;
  else
    p_p = (void **)__p;
  while (1)
  {
    v4 = (v2 & 0x80u) != 0;
    if ((v2 & 0x80) != 0)
      break;
    if (p_p == (void **)((char *)&__p + v2))
    {
      if (v2 != 1)
      {
        if (v2 != 4)
        {
          if (v2 != 5)
            goto LABEL_51;
          if ((_DWORD)__p != 1936482662 || BYTE4(__p) != 101)
            goto LABEL_51;
          return 0;
        }
        if ((_DWORD)__p == 1702195828)
          return 1;
LABEL_51:
        v14 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)v14 = 4;
        v14[1] = "Invalid Boolean string";
        *((_BYTE *)v14 + 16) = 0;
      }
      v9 = 1;
      switch(__p)
      {
        case '1':
          return v9;
        case 'f':
          return 0;
        case 't':
          return v9;
      }
      v10 = &__p;
LABEL_45:
      if (*v10 == 48)
      {
        v9 = 0;
        if (v4)
          goto LABEL_47;
        return v9;
      }
      goto LABEL_51;
    }
LABEL_10:
    v6 = *(unsigned __int8 *)p_p;
    if ((v6 - 65) <= 0x19)
    {
      *(_BYTE *)p_p = v6 + 32;
      v2 = HIBYTE(v17);
    }
    p_p = (void **)((char *)p_p + 1);
  }
  v5 = v16;
  if (p_p != (void **)((char *)__p + v16))
    goto LABEL_10;
  if (v16 == 1)
  {
    v8 = *(unsigned __int8 *)__p;
    if (v8 == 116 || (v5 = v16, v8 == 49))
    {
      v9 = 1;
      goto LABEL_47;
    }
LABEL_35:
    if (v5 == 5)
    {
      if (*(_DWORD *)__p == 1936482662 && *((_BYTE *)__p + 4) == 101)
        goto LABEL_43;
      v5 = v16;
    }
    if (v5 != 1)
      goto LABEL_51;
    v10 = __p;
    if (*(_BYTE *)__p != 102)
    {
      if (v16 != 1)
        goto LABEL_51;
      goto LABEL_45;
    }
LABEL_43:
    v9 = 0;
    goto LABEL_47;
  }
  if (v16 != 4 || *(_DWORD *)__p != 1702195828)
    goto LABEL_35;
  v9 = 1;
LABEL_47:
  operator delete(__p);
  return v9;
}

void sub_188091C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPUtils::ConvertToInt64(XMPUtils *this, const char *a2)
{
  int v3;
  _QWORD *exception;
  const char *v6;

  if (!this || !*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    v6 = "Empty convert-from string";
    goto LABEL_10;
  }
  if (!strncmp((const char *)this, "0x", 2uLL))
    v3 = sscanf((const char *)this, "%llx%c");
  else
    v3 = sscanf((const char *)this, "%lld%c");
  if (v3 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v6 = "Invalid integer string";
LABEL_10:
    exception[1] = v6;
    *((_BYTE *)exception + 16) = 0;
  }
  return 0;
}

uint64_t XMPUtils::ConvertToDate(char *__s, uint64_t a2)
{
  size_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  unint64_t v10;
  int v11;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64x2_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  char v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  _QWORD *exception;
  const char *v43;
  unint64_t v44;

  if (!__s || !*__s)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    v43 = "Empty convert-from string";
    goto LABEL_103;
  }
  v44 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = strlen(__s);
  v5 = 0;
  if (*__s == 84)
    goto LABEL_4;
  if (v4 >= 2 && (__s[1] == 58 || v4 >= 3 && __s[2] == 58))
  {
LABEL_5:
    *(_BYTE *)(a2 + 25) = 1;
    v6 = GatherInt(__s, &v44, "Invalid hour in date string");
    v7 = v44;
    if (__s[v44] != 58)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Invalid date string, after hour";
      goto LABEL_103;
    }
    if (v6 >= 23)
      v8 = 23;
    else
      v8 = v6;
    *(_DWORD *)(a2 + 12) = v8;
    v44 = v7 + 1;
    result = GatherInt(__s, &v44, "Invalid minute in date string");
    v10 = v44;
    v11 = __s[v44];
    if (((v11 - 43) > 0x2F || ((1 << (v11 - 43)) & 0x800000008005) == 0) && v11 != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Invalid date string, after minute";
      goto LABEL_103;
    }
    if ((int)result >= 59)
      v14 = 59;
    else
      v14 = result;
    *(_DWORD *)(a2 + 16) = v14;
    v15 = __s[v10];
    if (v15 == 58)
    {
      v44 = v10 + 1;
      result = GatherInt(__s, &v44, "Invalid whole seconds in date string");
      v10 = v44;
      v16 = __s[v44] - 43;
      if ((v16 > 0x2F || ((1 << v16) & 0x80000000000DLL) == 0) && __s[v44])
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        v43 = "Invalid date string, after whole seconds";
        goto LABEL_103;
      }
      v17 = (int)result >= 59 ? 59 : result;
      *(_DWORD *)(a2 + 20) = v17;
      v15 = __s[v10];
      if (v15 == 46)
      {
        v18 = v10 + 1;
        v44 = v10 + 1;
        result = GatherInt(__s, &v44, "Invalid fractional seconds in date string");
        v19 = v44;
        v20 = __s[v44] - 43;
        if ((v20 > 0x2F || ((1 << v20) & 0x800000000005) == 0) && __s[v44])
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          v43 = "Invalid date string, after fractional second";
          goto LABEL_103;
        }
        v21 = v44 - v18;
        if (v44 - v18 < 0xA)
        {
          if (v21 != 9)
          {
            v30 = 0;
            v31 = (uint64x2_t)vdupq_n_s64(v10 - v44 + 9);
            v32.i64[1] = 0x100000001;
            v32.i64[0] = result | 0x100000000;
            v33.i64[0] = 0xA0000000ALL;
            v33.i64[1] = 0xA0000000ALL;
            do
            {
              v34 = (int8x16_t)v32;
              v32 = vmulq_s32(v32, v33);
              v30 += 4;
            }
            while (((v10 - v44 + 13) & 0xFFFFFFFFFFFFFFFCLL) != v30);
            v35 = (int8x16_t)vdupq_n_s64(v30 - 4);
            v36 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v35, (int8x16_t)xmmword_18820C490), v31), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v35, (int8x16_t)xmmword_18822E810), v31)), v34, (int8x16_t)v32);
            *(int32x2_t *)v36.i8 = vmul_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
            result = (v36.i32[0] * v36.i32[1]);
          }
          if ((int)result >= 1000000000)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            v43 = "Fractional second is out of range";
            goto LABEL_103;
          }
        }
        else
        {
          do
          {
            result = ((int)result / 10);
            --v21;
          }
          while (v21 > 9);
        }
        *(_DWORD *)(a2 + 36) = result;
        v15 = __s[v19];
        v10 = v19;
      }
    }
    if (!v15)
      return result;
    v37 = 1;
    *(_BYTE *)(a2 + 26) = 1;
    v38 = __s[v10];
    if (v38 != 43)
    {
      if (v38 != 45)
      {
        if (v38 != 90)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          v43 = "Time zone must begin with 'Z', '+', or '-'";
          goto LABEL_103;
        }
        v39 = v10 + 1;
        goto LABEL_87;
      }
      v37 = -1;
    }
    *(_BYTE *)(a2 + 27) = v37;
    v44 = v10 + 1;
    v40 = GatherInt(__s, &v44, "Invalid time zone hour in date string");
    v41 = v44;
    if (__s[v44] != 58)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Invalid date string, after time zone hour";
      goto LABEL_103;
    }
    if (v40 >= 24)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Time zone hour is out of range";
      goto LABEL_103;
    }
    *(_DWORD *)(a2 + 28) = v40;
    v44 = v41 + 1;
    result = GatherInt(__s, &v44, "Invalid time zone minute in date string");
    if ((int)result >= 60)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Time zone minute is out of range";
      goto LABEL_103;
    }
    *(_DWORD *)(a2 + 32) = result;
    v39 = v44;
LABEL_87:
    if (!__s[v39])
      return result;
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v43 = "Invalid date string, extra chars at end";
LABEL_103:
    exception[1] = v43;
    *((_BYTE *)exception + 16) = 0;
  }
  *(_BYTE *)(a2 + 24) = 1;
  if (*__s == 45)
    v44 = 1;
  result = GatherInt(__s, &v44, "Invalid year in date string");
  v22 = v44;
  if (__s[v44] && __s[v44] != 45)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v43 = "Invalid date string, after year";
    goto LABEL_103;
  }
  if (*__s == 45)
    v23 = -(int)result;
  else
    v23 = result;
  *(_DWORD *)a2 = v23;
  if (__s[v22])
  {
    v44 = v22 + 1;
    result = GatherInt(__s, &v44, "Invalid month in date string");
    v24 = v44;
    if (__s[v44] && __s[v44] != 45)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v43 = "Invalid date string, after month";
      goto LABEL_103;
    }
    v25 = (int)result >= 12 ? 12 : result;
    v26 = (int)result >= 1 || *(_DWORD *)a2 == 0;
    v27 = v26 ? v25 : 1;
    *(_DWORD *)(a2 + 4) = v27;
    if (__s[v24])
    {
      v44 = v24 + 1;
      result = GatherInt(__s, &v44, "Invalid day in date string");
      v5 = v44;
      if (__s[v44] && __s[v44] != 84)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        v43 = "Invalid date string, after day";
        goto LABEL_103;
      }
      v28 = (int)result >= 31 ? 31 : result;
      *(_DWORD *)(a2 + 8) = v28;
      if (__s[v5])
      {
        v29 = *(_DWORD *)(a2 + 4);
        if (*(_DWORD *)a2 || v29 | v28)
        {
          if (v29 <= 0)
            *(_DWORD *)(a2 + 4) = 1;
          if (v28 <= 0)
            *(_DWORD *)(a2 + 8) = 1;
        }
        if (__s[v5] != 84)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 4;
          v43 = "Invalid date string, missing 'T' after date";
          goto LABEL_103;
        }
LABEL_4:
        v44 = v5 + 1;
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t GatherInt(const char *a1, unint64_t *a2, const char *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t result;
  const char *v8;
  const char *v9;
  _QWORD *exception;
  int v11;

  v3 = *a2;
  v4 = a1[*a2];
  if ((v4 - 48) > 9)
    goto LABEL_9;
  v6 = 0;
  result = 0;
  v8 = &a1[v3 + 1];
  do
  {
    result = (v4 - 48) + 10 * result;
    if (result >= 0x80000000)
    {
      v9 = a3;
      exception = __cxa_allocate_exception(0x18uLL);
      v11 = 5;
      goto LABEL_8;
    }
    v4 = v8[v6++];
  }
  while ((v4 - 48) < 0xA);
  if (!v6)
  {
LABEL_9:
    v9 = a3;
    exception = __cxa_allocate_exception(0x18uLL);
    v11 = 4;
LABEL_8:
    *(_DWORD *)exception = v11;
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  *a2 = v3 + v6;
  return result;
}

void XMPUtils::PackageForJPEG(const std::string *lpsrc, uint64_t a2, std::string *a3, std::string *a4)
{
  std::string *v4;
  std::string *v5;
  _QWORD *v8;
  unsigned __int8 v9;
  std::string *p_str;
  unsigned int v11;
  uint64_t i;
  unint64_t v13;
  uint64_t SchemaNode;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  std::string::size_type v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  BOOL v47;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  BOOL v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  const char *v62;
  const char *v63;
  std::string::size_type size;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  std::string::size_type v74;
  _QWORD *exception;
  int v76;
  std::string *v77;
  uint64_t v78;
  std::string __str;
  MD5_CTX __dst;
  unsigned __int8 v81[8];
  _QWORD *v82;
  uint64_t v83;
  char *v84[28];
  _BYTE v85[64];
  __int128 v86;
  _QWORD v87[12];
  char *v88[28];
  __int128 v89;
  std::string v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v4 = a4;
  v5 = a3;
  v98 = *MEMORY[0x1E0C80C00];
  if (sUseNewCoreAPIs)
  {
    if (!v8)
      __cxa_bad_cast();
    XMPUtils::PackageForJPEG(v8, a2, v5, v4);
    return;
  }
  if (!a2 || !a3 || !a4)
    XMPUtils::PackageForJPEG();
  if ((v9 & 1) == 0
  {
    XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen = 1;
  }
  memset(&__str, 0, sizeof(__str));
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v91 = 0u;
  memset(v90, 0, sizeof(v90));
  v89 = 0u;
  memset(v88, 0, sizeof(v88));
  XMPMeta::XMPMeta((XMPMeta *)v88);
  memset(v87, 0, sizeof(v87));
  v86 = 0u;
  memset(v85, 0, sizeof(v85));
  memset(v84, 0, sizeof(v84));
  XMPMeta::XMPMeta((XMPMeta *)v84);
  std::string::erase((std::string *)a2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v5, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v4, 0, 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(const std::string *, std::string *, uint64_t, uint64_t, const char *, const char *, _QWORD))(lpsrc->__r_.__value_.__r.__words[0] + 208))(lpsrc, &__str, 2112, 1, "", "", 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      DWORD2(v89) = lpsrc[9].__r_.__value_.__r.__words[2];
      std::string::operator=(v90, lpsrc + 10);
      std::string::operator=(&v90[1], lpsrc + 11);
      CloneOffspring((const XMP_Node *)&lpsrc[9].__r_.__value_.__r.__words[1], (void **)&v89, 0);
      if (XMPMeta::DoesPropertyExist(v88, "http://ns.adobe.com/xap/1.0/", "Thumbnails"))
      {
        XMPMeta::DeleteProperty(v88, "http://ns.adobe.com/xap/1.0/", "Thumbnails");
        XMPMeta::SerializeToBuffer((uint64_t)v88, &__str, 0x840u, 1u, "", "", 0);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      XMPMeta::SetProperty(v88, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", "123456789-123456789-123456789-12", 0);
      *(_QWORD *)__dst.state = 0;
      SchemaNode = FindSchemaNode((char **)&v89, "http://ns.adobe.com/camera-raw-settings/1.0/", 0, (uint64_t **)&__dst, 0, 0);
      v15 = SchemaNode;
      if (SchemaNode)
      {
        *(_QWORD *)(SchemaNode + 64) = v85;
        v16 = v87[0];
        if (v87[0] >= v87[1])
        {
          v24 = (uint64_t)(v87[0] - *((_QWORD *)&v86 + 1)) >> 3;
          if ((unint64_t)(v24 + 1) >> 61)
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          v25 = (uint64_t)(v87[1] - *((_QWORD *)&v86 + 1)) >> 2;
          if (v25 <= v24 + 1)
            v25 = v24 + 1;
          if (v87[1] - *((_QWORD *)&v86 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)&v87[1], v26);
          else
            v27 = 0;
          v28 = (uint64_t *)&v27[8 * v24];
          v29 = &v27[8 * v26];
          *v28 = v15;
          v17 = v28 + 1;
          v31 = (char *)*((_QWORD *)&v86 + 1);
          v30 = (char *)v87[0];
          if (v87[0] != *((_QWORD *)&v86 + 1))
          {
            do
            {
              v32 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *--v28 = v32;
            }
            while (v30 != v31);
            v30 = (char *)*((_QWORD *)&v86 + 1);
          }
          *((_QWORD *)&v86 + 1) = v28;
          v87[0] = v17;
          v87[1] = v29;
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v87[0] = SchemaNode;
          v17 = (_QWORD *)(v16 + 8);
        }
        v87[0] = v17;
        v33 = *(_QWORD *)__dst.state;
        v34 = v92 - (*(_QWORD *)__dst.state + 8);
        if ((_QWORD)v92 != *(_QWORD *)__dst.state + 8)
          memmove(*(void **)__dst.state, (const void *)(*(_QWORD *)__dst.state + 8), v92 - (*(_QWORD *)__dst.state + 8));
        *(_QWORD *)&v92 = v33 + v34;
        XMPMeta::SerializeToBuffer((uint64_t)v88, &__str, 0x840u, 1u, "", "", 0);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
      {
        if (MoveOneProperty(v88, v84, "http://ns.adobe.com/photoshop/1.0/", "photoshop:History"))
          XMPMeta::SerializeToBuffer((uint64_t)v88, &__str, 0x840u, 1u, "", "", 0);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
        {
          v77 = v5;
          v82 = 0;
          v83 = 0;
          *(_QWORD *)v81 = &v82;
          if ((_QWORD)v92 != *((_QWORD *)&v91 + 1))
          {
            v35 = (uint64_t)(v92 - *((_QWORD *)&v91 + 1)) >> 3;
            while (1)
            {
              v78 = v35 - 1;
              v36 = *(_QWORD *)(*((_QWORD *)&v91 + 1) + 8 * (v35 - 1));
              v37 = *(_QWORD *)(v36 + 80) - *(_QWORD *)(v36 + 72);
              if (v37)
                break;
LABEL_122:
              v35 = v78;
              if (!v78)
                goto LABEL_123;
            }
            v38 = v37 >> 3;
            while (1)
            {
              --v38;
              v39 = *(_QWORD *)(*(_QWORD *)(v36 + 72) + 8 * v38);
              v40 = *(char *)(v36 + 39);
              if (v40 < 0)
              {
                if (*(_QWORD *)(v36 + 24) != 29)
                  break;
                v41 = *(uint64_t **)(v36 + 16);
              }
              else
              {
                v41 = (uint64_t *)(v36 + 16);
                if (v40 != 29)
                  break;
              }
              v42 = *v41;
              v43 = v41[1];
              v44 = v41[2];
              v45 = *(uint64_t *)((char *)v41 + 21);
              v46 = v42 == 0x6E2F2F3A70747468 && v43 == 0x2E65626F64612E73;
              v47 = v46 && v44 == 0x2F706D782F6D6F63;
              if (!v47 || v45 != 0x2F65746F6E2F706DLL)
                break;
              v55 = (_QWORD *)(v39 + 16);
              v56 = *(char *)(v39 + 39);
              if (v56 < 0)
              {
                if (*(_QWORD *)(v39 + 24) != 22)
                  break;
                v55 = (_QWORD *)*v55;
              }
              else if (v56 != 22)
              {
                break;
              }
              v57 = (_QWORD *)*v55;
              v58 = v55[1];
              v59 = *(_QWORD *)((char *)v55 + 14);
              v60 = v57 == (_QWORD *)0x3A65746F4E706D78 && v58 == 0x6E65747845736148;
              if (!v60 || v59 != 0x504D586465646E65)
                break;
LABEL_106:
              if (!v38)
                goto LABEL_122;
            }
            v49 = EstimateSizeForJPEG((const XMP_Node *)v39);
            *(_QWORD *)__dst.state = v49;
            *(_QWORD *)&__dst.state[2] = v36 + 16;
            *(_QWORD *)__dst.count = v39 + 16;
            v50 = v82;
            v51 = &v82;
            if (v82)
            {
              v51 = &v82;
              do
              {
                v52 = v50[4];
                v53 = v49 >= v52;
                if (v49 >= v52)
                  v54 = v50 + 1;
                else
                  v54 = v50;
                if (!v53)
                  v51 = v50;
                v50 = (_QWORD *)*v54;
              }
              while (*v54);
            }
            std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<std::string *,std::string *>> &>((uint64_t **)v81, v51, (uint64_t)&__dst);
            goto LABEL_106;
          }
LABEL_123:
          v62 = "moved";
          v63 = "MoveLargestProperty";
LABEL_124:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            size = __str.__r_.__value_.__l.__size_;
            if (__str.__r_.__value_.__l.__size_ >= 0xFDE9 && v83 != 0)
            {
              while (1)
              {
                v66 = *(uint64_t **)v81;
                v67 = *(uint64_t **)(*(_QWORD *)v81 + 8);
                v68 = *(uint64_t **)v81;
                if (v67)
                {
                  do
                  {
                    v69 = v67;
                    v67 = (uint64_t *)*v67;
                  }
                  while (v67);
                }
                else
                {
                  do
                  {
                    v69 = (uint64_t *)v68[2];
                    v46 = *v69 == (_QWORD)v68;
                    v68 = v69;
                  }
                  while (!v46);
                }
                while (v69 != (uint64_t *)&v82)
                {
                  v66 = v69;
                  v70 = (uint64_t *)v69[1];
                  v71 = v69;
                  if (v70)
                  {
                    do
                    {
                      v69 = v70;
                      v70 = (uint64_t *)*v70;
                    }
                    while (v70);
                  }
                  else
                  {
                    do
                    {
                      v69 = (uint64_t *)v71[2];
                      v46 = *v69 == (_QWORD)v71;
                      v71 = v69;
                    }
                    while (!v46);
                  }
                }
                v72 = (char *)v66[5];
                if (v72[23] < 0)
                  v72 = *(char **)v72;
                v73 = (char *)v66[6];
                if (v73[23] < 0)
                  v73 = *(char **)v73;
                v74 = v66[4];
                if (!MoveOneProperty(v88, v84, v72, v73))
                  break;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)v81, v66);
                operator delete(v66);
                if (!v74)
                {
                  v76 = 2985;
                  v63 = "PackageForJPEG";
                  v62 = "propSize > 0";
LABEL_158:
                  __assert_rtn(v63, "XMPUtils.cpp", v76, v62);
                }
                if (size >= v74)
                  size -= v74;
                else
                  size = 0;
                if (size < 0xFDE9 || !v83)
                {
                  XMPMeta::SerializeToBuffer((uint64_t)v88, &__str, 0x840u, 1u, "", "", 0);
                  goto LABEL_124;
                }
              }
              v76 = 1893;
              goto LABEL_158;
            }
          }
          std::__tree<unsigned long long>::destroy((uint64_t)v81, v82);
          v5 = v77;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 110;
            exception[1] = "Can't reduce XMP enough for JPEG file";
            *((_BYTE *)exception + 16) = 0;
          }
        }
      }
    }
  }
  if (*((_QWORD *)&v86 + 1) == v87[0])
  {
    std::string::operator=((std::string *)a2, &__str);
  }
  else
  {
    XMPMeta::SerializeToBuffer((uint64_t)v84, &__str, 0x850u, 0, "", "", 0);
    std::string::operator=(v5, &__str);
    *(_QWORD *)v81 = 0;
    memset(&__dst, 0, sizeof(__dst));
    v82 = 0;
    MD5Init(&__dst);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v11 = __str.__r_.__value_.__r.__words[1];
    MD5Update(&__dst, (unsigned __int8 *)p_str, v11);
    MD5Final(v81, &__dst);
    std::string::reserve(v4, 0x20uLL);
    for (i = 0; i != 16; ++i)
    {
      v13 = v81[i];
      std::string::push_back(v4, a0123456789abcd[v13 >> 4]);
      std::string::push_back(v4, a0123456789abcd[v13 & 0xF]);
    }
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    XMPMeta::SetProperty(v88, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", (char *)v4, 0);
    XMPMeta::SerializeToBuffer((uint64_t)v88, &__str, 0x840u, 1u, "", "", 0);
    std::string::operator=((std::string *)a2, &__str);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v18 = *(_QWORD *)(a2 + 8);
    if (XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen)
      v19 = 19;
    else
      v19 = 0;
    if (v18 > v19 && v18 <= 0xFDE8)
    {
      v20 = -19;
      if (!XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen)
        v20 = 0;
      v21 = *(_QWORD *)a2 + v18;
      goto LABEL_48;
    }
LABEL_159:
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3042, "(stdStr->size() > kTrailerLen) && (stdStr->size() <= kStdXMPLimit)");
  }
  v18 = *(unsigned __int8 *)(a2 + 23);
  if (XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen)
    v19 = 19;
  else
    v19 = 0;
  if (v19 >= v18)
    goto LABEL_159;
  v20 = -19;
  if (!XMPUtils::PackageForJPEG(XMPMeta const&,std::string *,std::string *,std::string *)::kTrailerLen)
    v20 = 0;
  v21 = a2 + v18;
LABEL_48:
  if (strcmp((const char *)(v21 + v20), "<?xpacket end=\"w\"?>"))
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3044, "(strcmp((packetEnd),(kPacketTrailer)) == 0)");
  std::string::erase((std::string *)a2, v18 - v19, 0xFFFFFFFFFFFFFFFFLL);
  if (65000 - v18 >= 0x7FF)
    v23 = 2047;
  else
    v23 = 65000 - v18;
  std::string::append((std::string *)a2, v23, 32);
  std::string::append((std::string *)a2, "<?xpacket end=\"w\"?>");
  XMPMeta::~XMPMeta((XMPMeta *)v84);
  XMPMeta::~XMPMeta((XMPMeta *)v88);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_188092EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  XMPMeta::~XMPMeta((XMPMeta *)&a32);
  XMPMeta::~XMPMeta((XMPMeta *)&STACK[0x230]);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void XMPUtils::PackageForJPEG(_QWORD *a1, uint64_t a2, std::string *a3, std::string *a4)
{
  std::string *v5;
  unsigned __int8 v8;
  std::string *p_str;
  unsigned int v10;
  uint64_t k;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t i;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  std::vector<std::string>::pointer v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  std::string *v71;
  std::string::size_type size;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t j;
  const char *v83;
  BOOL v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::vector<std::string>::pointer *p_end;
  std::vector<std::string>::pointer v98;
  std::string::size_type v99;
  BOOL v100;
  std::string::__raw *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  const char *v122;
  std::string::size_type v123;
  BOOL v124;
  std::vector<std::string>::pointer begin;
  std::vector<std::string> *v126;
  std::vector<std::string>::pointer v127;
  std::vector<std::string> *value;
  std::string::__raw *v129;
  std::vector<std::string> *v130;
  std::string::size_type v131;
  _QWORD *exception;
  int v133;
  const char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  void *__p[2];
  std::string::size_type v140;
  std::string __str;
  uint64_t v142;
  std::__shared_weak_count *v143;
  __int128 v144;
  __int128 v145;
  MD5_CTX __v;
  std::vector<std::string> v147;
  _OWORD v148[25];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _OWORD v153[25];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a3 || (v5 = a4) == 0)
    XMPUtils::PackageForJPEG();
  if ((v8 & 1) == 0
  {
    XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen = 1;
  }
  memset(&__str, 0, sizeof(__str));
  v157 = 0u;
  v156 = 0u;
  v155 = 0u;
  v154 = 0u;
  memset(v153, 0, sizeof(v153));
  XMPMeta2::XMPMeta2((XMPMeta2 *)v153);
  v151 = 0u;
  v152 = 0u;
  v149 = 0u;
  v150 = 0u;
  memset(v148, 0, sizeof(v148));
  XMPMeta2::XMPMeta2((XMPMeta2 *)v148);
  std::string::erase((std::string *)a2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::erase(v5, 0, 0xFFFFFFFFFFFFFFFFLL);
  (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t, const char *, const char *, _QWORD))(*a1 + 208))(a1, &__str, 2112, 1, "", "", 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      v13 = a1[50] + *(_QWORD *)(*(_QWORD *)a1[50] - 544);
      (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 264))(&v147, v13, 0, 0);
      (*((void (**)(MD5_CTX *__return_ptr))v147.__begin_->__r_.__value_.__l.__data_ + 32))(&__v);
      v14 = *(_OWORD *)__v.state;
      *(_QWORD *)__v.state = 0;
      *(_QWORD *)&__v.state[2] = 0;
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v154 + 1);
      v154 = v14;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = *(std::__shared_weak_count **)&__v.state[2];
      if (*(_QWORD *)&__v.state[2])
      {
        v19 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      end = (std::__shared_weak_count *)v147.__end_;
      if (v147.__end_)
      {
        p_size = &v147.__end_->__r_.__value_.__l.__size_;
        do
          v23 = __ldaxr(p_size);
        while (__stlxr(v23 - 1, p_size));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
          std::__shared_weak_count::__release_weak(end);
        }
      }
      if (XMPMeta2::DoesPropertyExist((XMPMeta2 *)v153, "http://ns.adobe.com/xap/1.0/", "Thumbnails"))
      {
        XMPMeta2::DeleteProperty((XMPMeta2 *)v153, "http://ns.adobe.com/xap/1.0/", "Thumbnails");
        XMPMeta2::SerializeToBuffer((uint64_t)v153, (uint64_t)&__str, 2112, 1u, (uint64_t)"", (uint64_t)"", 0);
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
    {
      XMPMeta2::SetProperty((XMPMeta2 *)v153, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", "123456789-123456789-123456789-12", 0);
      v24 = (_QWORD *)v154;
      if ((_QWORD)v154)
        v24 = (_QWORD *)(v154 + *(_QWORD *)(*(_QWORD *)v154 - 792));
      *(_QWORD *)&v145 = v24;
      *((_QWORD *)&v145 + 1) = *((_QWORD *)&v154 + 1);
      if (*((_QWORD *)&v154 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      memset(&v147, 0, sizeof(v147));
      v144 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 688)) + 552))(&v144);
      for (i = v144; (_QWORD)v144; i = v144)
      {
        v142 = 0;
        v143 = 0;
        (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)i + 48))(&__v);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)__v.state + 264))(&v142, *(_QWORD *)__v.state, 0, 0);
        v28 = *(std::__shared_weak_count **)&__v.state[2];
        if (*(_QWORD *)&__v.state[2])
        {
          v29 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)v142 + 88))(&__v);
        v31 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)__v.state + 192))(*(_QWORD *)__v.state);
        v32 = strcmp(v31, "http://ns.adobe.com/camera-raw-settings/1.0/");
        v33 = v32;
        v34 = *(std::__shared_weak_count **)&__v.state[2];
        if (!*(_QWORD *)&__v.state[2])
          goto LABEL_53;
        v35 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
          if (!v33)
          {
LABEL_72:
            (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)(v149 + *(_QWORD *)(*(_QWORD *)v149 - 688)) + 520))(v149 + *(_QWORD *)(*(_QWORD *)v149 - 688), &v142);
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v142 + 72))(&v137);
            v47 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 192))(v137);
            std::string::basic_string[abi:ne180100]<0>(__p, v47);
            v48 = v147.__end_;
            if (v147.__end_ >= v147.__end_cap_.__value_)
            {
              v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
              v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v51)
                v51 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v51;
              *(_QWORD *)&__v.buffer[8] = &v147.__end_cap_;
              if (v52)
                v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v147.__end_cap_, v52);
              else
                v53 = 0;
              v54 = &v53[24 * v50];
              *(_QWORD *)__v.state = v53;
              *(_QWORD *)&__v.state[2] = v54;
              *(_QWORD *)__v.buffer = &v53[24 * v52];
              v55 = *(_OWORD *)__p;
              *((_QWORD *)v54 + 2) = v140;
              *(_OWORD *)v54 = v55;
              __p[1] = 0;
              v140 = 0;
              __p[0] = 0;
              *(_QWORD *)__v.count = v54 + 24;
              std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)&__v);
              v56 = v147.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
              v147.__end_ = v56;
              if (SHIBYTE(v140) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v49 = *(_OWORD *)__p;
              v147.__end_->__r_.__value_.__r.__words[2] = v140;
              *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
              __p[1] = 0;
              v140 = 0;
              __p[0] = 0;
              v147.__end_ = v48 + 1;
            }
            v57 = v138;
            if (v138)
            {
              v58 = (unint64_t *)&v138->__shared_owners_;
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
          }
        }
        else
        {
LABEL_53:
          if (!v32)
            goto LABEL_72;
        }
        v37 = v143;
        if (v143)
        {
          v38 = (unint64_t *)&v143->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)v144 + 56))(&__v);
        v40 = *(_OWORD *)__v.state;
        *(_QWORD *)__v.state = 0;
        *(_QWORD *)&__v.state[2] = 0;
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
        v144 = v40;
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = *(std::__shared_weak_count **)&__v.state[2];
        if (*(_QWORD *)&__v.state[2])
        {
          v45 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
      if (*((_QWORD *)&v144 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v147.__end_ != v147.__begin_)
      {
        v69 = 0;
        v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
        do
        {
          v71 = &v147.__begin_[v69];
          if (SHIBYTE(v71->__r_.__value_.__r.__words[2]) < 0)
          {
            v71 = (std::string *)v71->__r_.__value_.__r.__words[0];
            size = v147.__begin_[v69].__r_.__value_.__l.__size_;
          }
          else
          {
            size = HIBYTE(v71->__r_.__value_.__r.__words[2]);
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)(v154 + *(_QWORD *)(*(_QWORD *)v154 - 792)) + 672))(&v135, v154 + *(_QWORD *)(*(_QWORD *)v154 - 792), "http://ns.adobe.com/camera-raw-settings/1.0/", -1, v71, size);
          v73 = v136;
          if (v136)
          {
            v74 = (unint64_t *)&v136->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          ++v69;
        }
        while (v69 != v70);
        if (v147.__end_ != v147.__begin_)
          XMPMeta2::SerializeToBuffer((uint64_t)v153, (uint64_t)&__str, 2112, 1u, (uint64_t)"", (uint64_t)"", 0);
      }
      *(_QWORD *)__v.state = &v147;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
      if (*((_QWORD *)&v145 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
      {
        if (MoveOneProperty((uint64_t)v153, (uint64_t)v148, (uint64_t)"http://ns.adobe.com/photoshop/1.0/", (uint64_t)"History"))
        {
          XMPMeta2::SerializeToBuffer((uint64_t)v153, (uint64_t)&__str, 2112, 1u, (uint64_t)"", (uint64_t)"", 0);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
        {
          v147.__end_ = 0;
          v147.__end_cap_.__value_ = 0;
          v147.__begin_ = (std::vector<std::string>::pointer)&v147.__end_;
          v79 = (_QWORD *)v154;
          if ((_QWORD)v154)
            v79 = (_QWORD *)(v154 + *(_QWORD *)(*(_QWORD *)v154 - 792));
          __p[0] = v79;
          __p[1] = *((void **)&v154 + 1);
          if (*((_QWORD *)&v154 + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&v154 + 1) + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          v145 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v79 + *(_QWORD *)(*v79 - 688)) + 552))(&v145);
          for (j = v145; (_QWORD)v145; j = v145)
          {
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)j + 48))(&v144);
            (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)v144 + 88))(&__v);
            v83 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)__v.state + 192))(*(_QWORD *)__v.state);
            if (!strcmp(v83, "http://ns.adobe.com/xmp/note/"))
            {
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v144 + 72))(&v142);
              v112 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 192))(v142);
              v84 = strcmp(v112, "HasExtendedXMP") == 0;
              v113 = v143;
              if (v143)
              {
                v114 = (unint64_t *)&v143->__shared_owners_;
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
            }
            else
            {
              v84 = 0;
            }
            v85 = *(std::__shared_weak_count **)&__v.state[2];
            if (!*(_QWORD *)&__v.state[2])
              goto LABEL_157;
            v86 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
              if (!v84)
              {
LABEL_158:
                v88 = EstimateSizeForJPEG(&v144);
                (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)v144 + 88))(&__v);
                v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__v.state + 192))(*(_QWORD *)__v.state);
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v144 + 72))(&v142);
                v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 192))(v142);
                v91 = v143;
                if (v143)
                {
                  v92 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                v94 = *(std::__shared_weak_count **)&__v.state[2];
                if (*(_QWORD *)&__v.state[2])
                {
                  v95 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
                  do
                    v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }
                *(_QWORD *)__v.state = v88;
                *(_QWORD *)&__v.state[2] = v89;
                *(_QWORD *)__v.count = v90;
                p_end = &v147.__end_;
                v98 = v147.__end_;
                if (v147.__end_)
                {
                  p_end = &v147.__end_;
                  do
                  {
                    v99 = v98[1].__r_.__value_.__l.__size_;
                    v100 = v88 >= v99;
                    if (v88 >= v99)
                      v101 = (std::string::__raw *)&v98->__r_.__value_.__r.__words[1];
                    else
                      v101 = (std::string::__raw *)v98;
                    if (!v100)
                      p_end = (std::vector<std::string>::pointer *)v98;
                    v98 = (std::vector<std::string>::pointer)v101->__words[0];
                  }
                  while (v101->__words[0]);
                }
                std::__tree<std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<char const*,char const*>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<char const*,char const*>> &>((uint64_t **)&v147, p_end, (uint64_t)&__v);
              }
            }
            else
            {
LABEL_157:
              if (!v84)
                goto LABEL_158;
            }
            v102 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1))
            {
              v103 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            (*(void (**)(MD5_CTX *__return_ptr))(*(_QWORD *)v145 + 56))(&__v);
            v105 = *(_OWORD *)__v.state;
            *(_QWORD *)__v.state = 0;
            *(_QWORD *)&__v.state[2] = 0;
            v106 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
            v145 = v105;
            if (v106)
            {
              v107 = (unint64_t *)&v106->__shared_owners_;
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v109 = *(std::__shared_weak_count **)&__v.state[2];
            if (*(_QWORD *)&__v.state[2])
            {
              v110 = (unint64_t *)(*(_QWORD *)&__v.state[2] + 8);
              do
                v111 = __ldaxr(v110);
              while (__stlxr(v111 - 1, v110));
              if (!v111)
              {
                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                std::__shared_weak_count::__release_weak(v109);
              }
            }
          }
          v116 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
          if (*((_QWORD *)&v145 + 1))
          {
            v117 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
            do
              v118 = __ldaxr(v117);
            while (__stlxr(v118 - 1, v117));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
          v119 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v120 = (unint64_t *)((char *)__p[1] + 8);
            do
              v121 = __ldaxr(v120);
            while (__stlxr(v121 - 1, v120));
            if (!v121)
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
          }
          v122 = "MoveLargestProperty";
LABEL_212:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            v123 = __str.__r_.__value_.__l.__size_;
            v124 = __str.__r_.__value_.__l.__size_ < 0xFDE9 || v147.__end_cap_.__value_ == 0;
            if (!v124)
            {
              while (1)
              {
                begin = v147.__begin_;
                v126 = (std::vector<std::string> *)v147.__begin_->__r_.__value_.__l.__size_;
                v127 = v147.__begin_;
                if (v126)
                {
                  do
                  {
                    value = v126;
                    v126 = (std::vector<std::string> *)v126->__begin_;
                  }
                  while (v126);
                }
                else
                {
                  do
                  {
                    value = (std::vector<std::string> *)v127->__r_.__value_.__r.__words[2];
                    v124 = value->__begin_ == v127;
                    v127 = (std::vector<std::string>::pointer)value;
                  }
                  while (!v124);
                }
                while (value != (std::vector<std::string> *)&v147.__end_)
                {
                  begin = (std::vector<std::string>::pointer)value;
                  v129 = (std::string::__raw *)value->__end_;
                  v130 = value;
                  if (v129)
                  {
                    do
                    {
                      value = (std::vector<std::string> *)v129;
                      v129 = (std::string::__raw *)v129->__words[0];
                    }
                    while (v129);
                  }
                  else
                  {
                    do
                    {
                      value = (std::vector<std::string> *)v130->__end_cap_.__value_;
                      v124 = value->__begin_ == (std::vector<std::string>::pointer)v130;
                      v130 = value;
                    }
                    while (!v124);
                  }
                }
                v131 = begin[1].__r_.__value_.__l.__size_;
                if (!MoveOneProperty((uint64_t)v153, (uint64_t)v148, begin[1].__r_.__value_.__r.__words[2], (uint64_t)begin[2].__r_.__value_.__l.__data_))break;
                std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)&v147, (uint64_t *)begin);
                operator delete(begin);
                if (!v131)
                {
                  v133 = 3202;
                  v122 = "PackageForJPEG";
                  v134 = "propSize > 0";
LABEL_242:
                  __assert_rtn(v122, "XMPUtils.cpp", v133, v134);
                }
                if (v123 >= v131)
                  v123 -= v131;
                else
                  v123 = 0;
                if (v123 < 0xFDE9 || !v147.__end_cap_.__value_)
                {
                  XMPMeta2::SerializeToBuffer((uint64_t)v153, (uint64_t)&__str, 2112, 1u, (uint64_t)"", (uint64_t)"", 0);
                  goto LABEL_212;
                }
              }
              v133 = 1857;
              v134 = "moved";
              goto LABEL_242;
            }
          }
          std::__tree<unsigned long long>::destroy((uint64_t)&v147, v147.__end_->__r_.__value_.__r.__words);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0xFDE9)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 110;
            exception[1] = "Can't reduce XMP enough for JPEG file";
            *((_BYTE *)exception + 16) = 0;
          }
        }
      }
    }
  }
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)(v149 + *(_QWORD *)(*(_QWORD *)v149 - 688)) + 560))(v149 + *(_QWORD *)(*(_QWORD *)v149 - 688)))
  {
    XMPMeta2::SerializeToBuffer((uint64_t)v148, (uint64_t)&__str, 2128, 0, (uint64_t)"", (uint64_t)"", 0);
    std::string::operator=(a3, &__str);
    v147.__begin_ = 0;
    memset(&__v, 0, sizeof(__v));
    v147.__end_ = 0;
    MD5Init(&__v);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v10 = __str.__r_.__value_.__r.__words[1];
    MD5Update(&__v, (unsigned __int8 *)p_str, v10);
    MD5Final((unsigned __int8 *)&v147, &__v);
    std::string::reserve(v5, 0x20uLL);
    for (k = 0; k != 16; ++k)
    {
      v12 = *((unsigned __int8 *)&v147.__begin_ + k);
      std::string::push_back(v5, a0123456789abcd[v12 >> 4]);
      std::string::push_back(v5, a0123456789abcd[v12 & 0xF]);
    }
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
    XMPMeta2::SetProperty((XMPMeta2 *)v153, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP", (char *)v5, 0);
    XMPMeta2::SerializeToBuffer((uint64_t)v153, (uint64_t)&__str, 2112, 1u, (uint64_t)"", (uint64_t)"", 0);
    std::string::operator=((std::string *)a2, &__str);
  }
  else
  {
    std::string::operator=((std::string *)a2, &__str);
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v60 = *(unsigned __int8 *)(a2 + 23);
    if (XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen)
      v61 = 19;
    else
      v61 = 0;
    if (v61 < v60)
    {
      v62 = -19;
      if (!XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen)
        v62 = 0;
      v63 = a2 + v60;
      goto LABEL_109;
    }
LABEL_243:
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3260, "(stdStr->size() > kTrailerLen) && (stdStr->size() <= kStdXMPLimit)");
  }
  v60 = *(_QWORD *)(a2 + 8);
  if (XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen)
    v61 = 19;
  else
    v61 = 0;
  if (v60 <= v61 || v60 > 0xFDE8)
    goto LABEL_243;
  v62 = -19;
  if (!XMPUtils::PackageForJPEG(XMPMeta2 const&,std::string *,std::string *,std::string *)::kTrailerLen)
    v62 = 0;
  v63 = *(_QWORD *)a2 + v60;
LABEL_109:
  if (strcmp((const char *)(v63 + v62), "<?xpacket end=\"w\"?>"))
    __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3262, "(strcmp((packetEnd),(kPacketTrailer)) == 0)");
  std::string::erase((std::string *)a2, v60 - v61, 0xFFFFFFFFFFFFFFFFLL);
  if (65000 - v60 >= 0x7FF)
    v65 = 2047;
  else
    v65 = 65000 - v60;
  std::string::append((std::string *)a2, v65, 32);
  std::string::append((std::string *)a2, "<?xpacket end=\"w\"?>");
  XMPMeta2::~XMPMeta2((XMPMeta2 *)v148);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)v153);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_188094068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,_QWORD *a40,uint64_t a41,char a42)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__tree<unsigned long long>::destroy((uint64_t)&a39, a40);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)&a42);
  XMPMeta2::~XMPMeta2((XMPMeta2 *)&STACK[0x2C0]);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t MoveOneProperty(char **a1, char **a2, char *__s, char *a4)
{
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t SchemaNode;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  int64_t v27;
  void *__dst;

  __dst = 0;
  result = FindSchemaNode(a1 + 28, __s, 0, 0, 0, 0);
  if (result)
  {
    v8 = (_QWORD *)result;
    result = FindChildNode(result, a4, 0, (uint64_t **)&__dst);
    if (result)
    {
      v9 = result;
      SchemaNode = FindSchemaNode(a2 + 28, __s, 1, 0, 0, 0);
      *(_QWORD *)(v9 + 64) = SchemaNode;
      *(_DWORD *)(SchemaNode + 8) &= ~0x8000u;
      v11 = *(uint64_t **)(SchemaNode + 80);
      v12 = *(_QWORD *)(SchemaNode + 88);
      if ((unint64_t)v11 >= v12)
      {
        v14 = *(_QWORD *)(SchemaNode + 72);
        v15 = ((uint64_t)v11 - v14) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v16 = v12 - v14;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(SchemaNode + 88, v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        v21 = &v19[8 * v18];
        *v20 = v9;
        v13 = v20 + 1;
        v23 = *(char **)(SchemaNode + 72);
        v22 = *(char **)(SchemaNode + 80);
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v20 = v24;
          }
          while (v22 != v23);
          v22 = *(char **)(SchemaNode + 72);
        }
        *(_QWORD *)(SchemaNode + 72) = v20;
        *(_QWORD *)(SchemaNode + 80) = v13;
        *(_QWORD *)(SchemaNode + 88) = v21;
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v11 = v9;
        v13 = v11 + 1;
      }
      *(_QWORD *)(SchemaNode + 80) = v13;
      v25 = (char *)__dst;
      v26 = (_BYTE *)v8[10];
      v27 = v26 - ((_BYTE *)__dst + 8);
      if (v26 != (char *)__dst + 8)
        memmove(__dst, (char *)__dst + 8, v26 - ((_BYTE *)__dst + 8));
      v8[10] = &v25[v27];
      DeleteEmptySchema(v8);
      return 1;
    }
  }
  return result;
}

BOOL MoveOneProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL8 v16;
  _QWORD *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  char *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char *v59;
  std::__shared_weak_count *v60;

  v8 = *(_QWORD **)(a1 + 400);
  if (v8)
    v9 = (char *)v8 + *(_QWORD *)(*v8 - 544);
  else
    v9 = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 408);
  v59 = v9;
  v60 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v9)
  {
    v16 = 0;
    if (!v10)
      return v16;
    goto LABEL_59;
  }
  v57 = 0;
  v58 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v9 + 240))(&v55);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 648))(&v57, v55, a3, -1, a4, -1);
  v13 = v56;
  if (v56)
  {
    v14 = (unint64_t *)&v56->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v57 != 0;
  if (v57)
  {
    v55 = 0;
    v56 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v57 + 264))(&v55, v57, 0, 0);
    v17 = *(_QWORD **)(a2 + 400);
    if (v17)
      v18 = (char *)v17 + *(_QWORD *)(*v17 - 792);
    else
      v18 = 0;
    v19 = *(std::__shared_weak_count **)(a2 + 408);
    v53 = v18;
    v54 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 648))(&v51, v18, a3, -1, a4, -1);
    v23 = v51;
    v22 = v52;
    if (!v52)
      goto LABEL_26;
    v24 = (unint64_t *)&v52->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v23)
        goto LABEL_27;
    }
    else
    {
LABEL_26:
      if (v23)
      {
LABEL_27:
        (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53
                                                                                                  + 672))(&v49, v53, a3, -1, a4, -1);
        v26 = v50;
        if (v50)
        {
          v27 = (unint64_t *)&v50->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t *))(*(_QWORD *)&v53[*(_QWORD *)(*(_QWORD *)v53 - 688)] + 520))(&v53[*(_QWORD *)(*(_QWORD *)v53 - 688)], &v55);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v59 + 240))(&v51);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51 + 672))(&v47, v51, a3, -1, a4, -1);
    v29 = v48;
    if (v48)
    {
      v30 = (unint64_t *)&v48->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v52;
    if (v52)
    {
      v33 = (unint64_t *)&v52->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v54;
    if (v54)
    {
      v36 = (unint64_t *)&v54->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v56;
    if (v56)
    {
      v39 = (unint64_t *)&v56->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  v41 = v58;
  if (v58)
  {
    v42 = (unint64_t *)&v58->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v10 = v60;
  if (v60)
  {
LABEL_59:
    v44 = (unint64_t *)&v10->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v16;
}

void sub_18809474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

uint64_t XMPUtils::MergeFromJPEG(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  XMPUtils::ApplyTemplate(this, a2, (const XMPMeta *)3);
  return (*(uint64_t (**)(XMPUtils *, const char *, const char *))(*(_QWORD *)this + 80))(this, "http://ns.adobe.com/xmp/note/", "HasExtendedXMP");
}

uint64_t XMPUtils::ConvertToUTCTime(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (!a1)
    XMPUtils::ConvertToUTCTime();
  result = VerifyDateTimeFlags(a1);
  if (*(_BYTE *)(a1 + 26))
  {
    v3 = *(_DWORD *)(a1 + 28);
    if (v3 >= 0x18)
      XMPUtils::ConvertToUTCTime();
    v4 = *(_DWORD *)(a1 + 32);
    if (v4 >= 0x3C)
      XMPUtils::ConvertToUTCTime();
    v5 = *(unsigned __int8 *)(a1 + 27);
    if ((v5 - 2) <= 0xFC)
      XMPUtils::ConvertToUTCTime();
    v6 = v4 | v3;
    if (*(_BYTE *)(a1 + 27))
    {
      if (v6)
      {
        if (v5 == 255)
        {
          v7 = *(_DWORD *)(a1 + 12) + v3;
          v8 = *(_DWORD *)(a1 + 16) + v4;
          goto LABEL_14;
        }
        if (v5 == 1)
        {
          v7 = *(_DWORD *)(a1 + 12) - v3;
          v8 = *(_DWORD *)(a1 + 16) - v4;
LABEL_14:
          *(_DWORD *)(a1 + 12) = v7;
          *(_DWORD *)(a1 + 16) = v8;
        }
LABEL_15:
        result = AdjustTimeOverflow(a1);
        *(_BYTE *)(a1 + 35) = 0;
        *(_QWORD *)(a1 + 27) = 0;
        return result;
      }
    }
    else if (!v6)
    {
      goto LABEL_15;
    }
    XMPUtils::ConvertToUTCTime();
  }
  return result;
}

uint64_t AdjustTimeOverflow(uint64_t result)
{
  _DWORD *v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;

  v1 = (_DWORD *)result;
  v2 = *(_DWORD *)(result + 4);
  if (!*(_QWORD *)result)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    if (!*(_DWORD *)(result + 8))
      goto LABEL_32;
    goto LABEL_5;
  }
  v4 = *(_DWORD *)result;
  v3 = *(_DWORD *)(result + 4);
  if (v2 <= 0)
  {
LABEL_5:
    if (v2 <= -11)
      v6 = -11;
    else
      v6 = v2;
    if (v2 >= -11)
      v7 = v2;
    else
      v7 = v2 + 1;
    v8 = (v6 - v7) / 0xCu;
    if (v2 < -11)
      ++v8;
    v4 = *(_DWORD *)result + ~v8;
    v3 = v2 + 12 * v8 + 12;
    *(_DWORD *)result = v4;
    *(_DWORD *)(result + 4) = v3;
  }
  if (v3 >= 13)
  {
    if (v3 >= 24)
      v9 = 24;
    else
      v9 = v3;
    v10 = v3 - v9 + 11;
    v4 += v10 / 0xC + 1;
    v3 = v3 - 12 * (v10 / 0xC) - 12;
    *(_DWORD *)result = v4;
    *(_DWORD *)(result + 4) = v3;
  }
  v5 = *(_DWORD *)(result + 8);
  if (v5 <= 0)
  {
    do
    {
      if (v3 > 1)
      {
        --v3;
      }
      else
      {
        *v1 = --v4;
        v3 += 11;
      }
      result = DaysInMonth(v4, v3);
      v5 += result;
    }
    while (v5 < 1);
    v1[1] = v3;
    v1[2] = v5;
  }
  else
  {
    result = DaysInMonth(v4, v3);
  }
  if (v5 > (int)result)
  {
    do
    {
      if (v3 < 12)
      {
        ++v3;
      }
      else
      {
        *v1 = ++v4;
        v3 -= 11;
      }
      v5 -= result;
      result = DaysInMonth(v4, v3);
    }
    while (v5 > (int)result);
    v1[1] = v3;
    v1[2] = v5;
  }
LABEL_32:
  v11 = v1[3];
  if (v11 < 0)
  {
    if (v11 <= -24)
      v12 = -24;
    else
      v12 = v1[3];
    if (v11 >= 0xFFFFFFE8)
      v13 = v1[3];
    else
      v13 = v11 + 1;
    v14 = (v12 - v13) / 0x18u;
    if (v11 < 0xFFFFFFE8)
      ++v14;
    v5 += ~v14;
    v11 += 24 * v14 + 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  if (v11 >= 24)
  {
    if (v11 >= 47)
      v15 = 47;
    else
      v15 = v11;
    v16 = (v11 - v15 + 23) / 0x18u;
    v5 += v16 + 1;
    v11 = v11 - 24 * v16 - 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  v17 = v1[4];
  if (v17 < 0)
  {
    if (v17 <= -60)
      v18 = -60;
    else
      v18 = v1[4];
    if (v17 >= 0xFFFFFFC4)
      v19 = v1[4];
    else
      v19 = v17 + 1;
    v20 = (v18 - v19) / 0x3Cu;
    if (v17 < 0xFFFFFFC4)
      ++v20;
    v11 += ~v20;
    v17 += 60 * v20 + 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  if (v17 >= 60)
  {
    if (v17 >= 119)
      v21 = 119;
    else
      v21 = v17;
    v22 = (v17 - v21 + 59) / 0x3Cu;
    v11 += v22 + 1;
    v17 = v17 - 60 * v22 - 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  v23 = v1[5];
  if (v23 < 0)
  {
    if (v23 <= -60)
      v24 = -60;
    else
      v24 = v1[5];
    if (v23 >= 0xFFFFFFC4)
      v25 = v1[5];
    else
      v25 = v23 + 1;
    v26 = (v24 - v25) / 0x3Cu;
    if (v23 < 0xFFFFFFC4)
      ++v26;
    v17 += ~v26;
    v23 += 60 * v26 + 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  if (v23 >= 60)
  {
    if (v23 >= 119)
      v27 = 119;
    else
      v27 = v23;
    v28 = (v23 - v27 + 59) / 0x3Cu;
    v17 += v28 + 1;
    v23 = v23 - 60 * v28 - 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  v29 = v1[9];
  if (v29 < 0)
  {
    if (v29 <= -1000000000)
      v30 = -1000000000;
    else
      v30 = v1[9];
    if (v29 >= 0xC4653600)
      v31 = v1[9];
    else
      v31 = v29 + 1;
    v32 = (v30 - v31) / 0x3B9ACA00u;
    if (v29 < 0xC4653600)
      ++v32;
    v23 += ~v32;
    v29 += 1000000000 * v32 + 1000000000;
    v1[5] = v23;
    v1[9] = v29;
  }
  if (v29 > 999999999)
  {
    if (v29 >= 1999999999)
      v33 = 1999999999;
    else
      v33 = v29;
    v34 = (~v33 + v29 + 1000000000) / 0x3B9ACA00u;
    v23 += v34 + 1;
    v1[5] = v23;
    v1[9] = v29 - 1000000000 * v34 - 1000000000;
  }
  if (v23 < 0)
  {
    if (v23 <= -60)
      v35 = -60;
    else
      v35 = v23;
    if (v23 >= 0xFFFFFFC4)
      v36 = v23;
    else
      v36 = v23 + 1;
    v37 = (v35 - v36) / 0x3Cu;
    if (v23 < 0xFFFFFFC4)
      ++v37;
    v17 += ~v37;
    v23 += 60 * v37 + 60;
    v1[4] = v17;
    v1[5] = v23;
  }
  if (v23 >= 60)
  {
    if (v23 >= 119)
      v38 = 119;
    else
      v38 = v23;
    v39 = (v23 - v38 + 59) / 0x3Cu;
    v17 += v39 + 1;
    v1[4] = v17;
    v1[5] = v23 - 60 * v39 - 60;
  }
  if (v17 < 0)
  {
    if (v17 <= -60)
      v40 = -60;
    else
      v40 = v17;
    if (v17 >= 0xFFFFFFC4)
      v41 = v17;
    else
      v41 = v17 + 1;
    v42 = (v40 - v41) / 0x3Cu;
    if (v17 < 0xFFFFFFC4)
      ++v42;
    v11 += ~v42;
    v17 += 60 * v42 + 60;
    v1[3] = v11;
    v1[4] = v17;
  }
  if (v17 >= 60)
  {
    if (v17 >= 119)
      v43 = 119;
    else
      v43 = v17;
    v44 = (v17 - v43 + 59) / 0x3Cu;
    v11 += v44 + 1;
    v1[3] = v11;
    v1[4] = v17 - 60 * v44 - 60;
  }
  if (v11 < 0)
  {
    if (v11 <= -24)
      v45 = -24;
    else
      v45 = v11;
    if (v11 >= 0xFFFFFFE8)
      v46 = v11;
    else
      v46 = v11 + 1;
    v47 = (v45 - v46) / 0x18u;
    if (v11 < 0xFFFFFFE8)
      ++v47;
    v5 += ~v47;
    v11 += 24 * v47 + 24;
    v1[2] = v5;
    v1[3] = v11;
  }
  if (v11 >= 24)
  {
    if (v11 >= 47)
      v48 = 47;
    else
      v48 = v11;
    v49 = (v11 - v48 + 23) / 0x18u;
    v5 += v49 + 1;
    v1[2] = v5;
    v1[3] = v11 - 24 * v49 - 24;
  }
  if (!(v4 | v3))
  {
    if (!v5)
      return result;
    goto LABEL_141;
  }
  if (v3 <= 0)
  {
LABEL_141:
    if (v3 <= -11)
      v50 = -11;
    else
      v50 = v3;
    if (v3 >= -11)
      v51 = v3;
    else
      v51 = v3 + 1;
    v52 = (v50 - v51) / 0xCu;
    if (v3 < -11)
      ++v52;
    v4 += ~v52;
    v3 += 12 * v52 + 12;
    *v1 = v4;
    v1[1] = v3;
  }
  if (v3 >= 13)
  {
    if (v3 >= 24)
      v53 = 24;
    else
      v53 = v3;
    v54 = v3 - v53 + 11;
    v4 += v54 / 0xC + 1;
    v3 = v3 - 12 * (v54 / 0xC) - 12;
    *v1 = v4;
    v1[1] = v3;
  }
  if (v5 <= 0)
  {
    do
    {
      if (v3 > 1)
      {
        --v3;
      }
      else
      {
        *v1 = --v4;
        v3 += 11;
      }
      result = DaysInMonth(v4, v3);
      v5 += result;
    }
    while (v5 < 1);
    v1[1] = v3;
    v1[2] = v5;
  }
  else
  {
    result = DaysInMonth(v4, v3);
  }
  if (v5 > (int)result)
  {
    do
    {
      if (v3 < 12)
      {
        ++v3;
      }
      else
      {
        *v1 = ++v4;
        v3 -= 11;
      }
      v5 -= result;
      result = DaysInMonth(v4, v3);
    }
    while (v5 > (int)result);
    v1[1] = v3;
    v1[2] = v5;
  }
  return result;
}

std::string *XMPUtils::Trim(std::string *this)
{
  uint64_t v2;
  std::string::size_type v3;
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  int v7;
  void *v8;
  size_t v9;
  std::string::size_type v10;
  void *v11;
  int v12;
  std::string *v13;
  std::string::size_type v14;
  int v15;
  void *v16;
  size_t v17;
  std::string *v18;
  char *v19;
  std::string::size_type v20;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v3 = this->__r_.__value_.__r.__words[0];
  size = this->__r_.__value_.__l.__size_;
  if ((v2 & 0x80u) == 0)
    v5 = this;
  else
    v5 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((v2 & 0x80u) == 0)
    v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    v6 = this->__r_.__value_.__l.__size_;
  v7 = *(char *)(XMPUtils::WhiteSpaceStrPtr + 23);
  if (v7 >= 0)
    v8 = (void *)XMPUtils::WhiteSpaceStrPtr;
  else
    v8 = *(void **)XMPUtils::WhiteSpaceStrPtr;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(XMPUtils::WhiteSpaceStrPtr + 23);
  else
    v9 = *(_QWORD *)(XMPUtils::WhiteSpaceStrPtr + 8);
  do
  {
    if (!v6)
    {
      if ((v2 & 0x80u) == 0)
        v19 = (char *)this + v2;
      else
        v19 = (char *)(v3 + size);
      v20 = v19 - (char *)v5;
LABEL_37:
      std::string::erase(this, 0, v20);
      return this;
    }
    v10 = v6;
    if (!v9)
      break;
    v11 = memchr(v8, *((char *)&v5[-1].__r_.__value_.__r.__words[2] + v6 + 7), v9);
    v6 = v10 - 1;
  }
  while (v11);
  std::string::erase(this, v10, 0xFFFFFFFFFFFFFFFFLL);
  v12 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v12 >= 0)
    v13 = this;
  else
    v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v12 >= 0)
    v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  else
    v14 = this->__r_.__value_.__l.__size_;
  v15 = *(char *)(XMPUtils::WhiteSpaceStrPtr + 23);
  if (v15 >= 0)
    v16 = (void *)XMPUtils::WhiteSpaceStrPtr;
  else
    v16 = *(void **)XMPUtils::WhiteSpaceStrPtr;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(XMPUtils::WhiteSpaceStrPtr + 23);
  else
    v17 = *(_QWORD *)(XMPUtils::WhiteSpaceStrPtr + 8);
  if (v14)
  {
    v18 = v13;
    if (v17)
    {
      while (memchr(v16, v18->__r_.__value_.__s.__data_[0], v17))
      {
        v18 = (std::string *)((char *)v18 + 1);
        if (!--v14)
          return this;
      }
    }
    v20 = (char *)v18 - (char *)v13;
    if ((char *)v18 - (char *)v13 != -1)
      goto LABEL_37;
  }
  return this;
}

uint64_t XMPUtils::MapXMPErrorToIError(int a1, int *a2, _DWORD *a3)
{
  int v3;
  uint64_t result;

  v3 = 1;
  result = 9;
  switch(a1)
  {
    case 0:
    case 1:
      break;
    case 2:
    case 8:
      goto LABEL_4;
    case 3:
    case 4:
    case 5:
      goto LABEL_12;
    case 6:
    case 7:
      result = 3;
      break;
    case 9:
      result = 6;
      break;
    case 10:
      result = 7;
      break;
    case 11:
      result = 8;
      break;
    case 12:
    case 16:
      result = 10;
      break;
    case 13:
      result = 101;
      break;
    case 14:
      result = 200;
      break;
    case 15:
      v3 = 2;
LABEL_12:
      result = 1;
      break;
    default:
      v3 = 1;
LABEL_4:
      result = 10000;
      break;
  }
  *a3 = result;
  *a2 = v3;
  return result;
}

uint64_t EstimateSizeForJPEG(const XMP_Node *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  const XMP_Node **v5;
  const XMP_Node **v6;
  uint64_t v7;
  uint64_t v8;
  const XMP_Node *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const XMP_Node *v16;

  if (*((char *)a1 + 39) < 0)
    v1 = *((_QWORD *)a1 + 3);
  else
    v1 = *((unsigned __int8 *)a1 + 39);
  v2 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 8);
  v3 = *((_DWORD *)a1 + 2);
  if ((v3 & 0x1F00) != 0)
  {
    v4 = 2 * v1;
    v6 = (const XMP_Node **)*((_QWORD *)a1 + 9);
    v5 = (const XMP_Node **)*((_QWORD *)a1 + 10);
    if ((v3 & 0x200) != 0)
    {
      v13 = v4 + 24;
      if ((v2 & 0x200) != 0)
        v13 = 19;
      v14 = (char *)v5 - (char *)v6;
      v7 = 17 * (v14 >> 3) + v13;
      if (v14)
      {
        if ((unint64_t)(v14 >> 3) <= 1)
          v15 = 1;
        else
          v15 = v14 >> 3;
        do
        {
          v16 = *v6++;
          v7 += EstimateSizeForJPEG(v16);
          --v15;
        }
        while (v15);
      }
    }
    else
    {
      if ((v2 & 0x200) != 0)
        v7 = 25;
      else
        v7 = v4 + 30;
      if (v5 != v6)
      {
        if ((unint64_t)(v5 - v6) <= 1)
          v8 = 1;
        else
          v8 = v5 - v6;
        do
        {
          v9 = *v6++;
          v7 += EstimateSizeForJPEG(v9);
          --v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v10 = v1 + 3;
    if ((v2 & 0x200) != 0)
      v11 = 0;
    else
      v11 = v10;
    if (*((char *)a1 + 63) < 0)
      v12 = *((_QWORD *)a1 + 6);
    else
      v12 = *((unsigned __int8 *)a1 + 63);
    return v12 + v11;
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<std::string *,std::string *>> &>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **leaf;
  uint64_t v9;

  v6 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v6[6] = *(_QWORD *)(a3 + 16);
  v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(a1, a2, &v9, v6 + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, v6);
  return v6;
}

void sub_188095330(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;

  v4 = a1 + 1;
  if (a1 + 1 != a2 && a2[4] < *a4)
  {
    while (1)
    {
      v5 = (_QWORD *)*v4;
      a2 = v4;
      if (!*v4)
        break;
      while (1)
      {
        v4 = v5;
        if (v5[4] >= *a4)
          break;
        v5 = (_QWORD *)v5[1];
        if (!v5)
          goto LABEL_19;
      }
    }
LABEL_20:
    *a3 = v4;
    return a2;
  }
  v6 = *a2;
  if ((_QWORD *)*a1 == a2)
  {
    v8 = a2;
  }
  else
  {
    if (v6)
    {
      v7 = (_QWORD *)*a2;
      do
      {
        v8 = v7;
        v7 = (_QWORD *)v7[1];
      }
      while (v7);
    }
    else
    {
      v9 = a2;
      do
      {
        v8 = (_QWORD *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (v10);
    }
    if (*a4 < v8[4])
    {
      while (1)
      {
        v11 = (_QWORD *)*v4;
        a2 = v4;
        if (!*v4)
          goto LABEL_20;
        while (1)
        {
          v4 = v11;
          if (*a4 < v11[4])
            break;
          v11 = (_QWORD *)v11[1];
          if (!v11)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v6)
  {
    *a3 = v8;
    return v8 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t EstimateSizeForJPEG(_QWORD *a1)
{
  double DefaultNameSpacePrefixMap;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unsigned int IXMPOptions;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;

  v81 = 0uLL;
  DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v81);
  (*(void (**)(uint64_t *__return_ptr, double))(*(_QWORD *)*a1 + 72))(&v79, DefaultNameSpacePrefixMap);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 208))(v79);
  v4 = v80;
  if (v80)
  {
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v81;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 88))(&v78);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v78 + 192))(v78);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 88))(&v77);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v77 + 208))(v77);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(&v79, v7, v8, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 208))(v79);
  v11 = v80;
  if (v80)
  {
    v12 = (unint64_t *)&v80->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)a1[1];
  v79 = *a1;
  v80 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  IXMPOptions = XMPUtils::GetIXMPOptions(&v79);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 56))(&v79);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
  v27 = v3 + 1;
  v28 = v80;
  if (v80)
  {
    v29 = (unint64_t *)&v80->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v27 + v10;
  if (IXMPOptions > 0xFF)
  {
    if ((IXMPOptions & 0x200) != 0)
    {
      v79 = 0;
      v80 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 248))(&v79);
      if (v26 == 2)
        v52 = 19;
      else
        v52 = 2 * v31 + 24;
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688)) + 560))(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688));
      v78 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688)) + 552))(&v78);
      v37 = 17 * v53 + v52;
      while ((_QWORD)v78)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v78 + 48))(&v77);
        v54 = EstimateSizeForJPEG(&v77);
        v55 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v78 + 56))(&v77);
        v58 = v77;
        v77 = 0uLL;
        v59 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
        v78 = v58;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        v62 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        v37 += v54;
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v38 = v80;
      if (!v80)
        goto LABEL_109;
      v72 = (unint64_t *)&v80->__shared_owners_;
      do
        v40 = __ldaxr(v72);
      while (__stlxr(v40 - 1, v72));
    }
    else
    {
      v79 = 0;
      v80 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 240))(&v79);
      if (v26 == 2)
        v37 = 25;
      else
        v37 = 2 * v31 + 30;
      (*(void (**)(uint64_t))(*(_QWORD *)(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688)) + 560))(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688));
      v78 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v79 + *(_QWORD *)(*(_QWORD *)v79 - 688)) + 552))(&v78);
      while ((_QWORD)v78)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v78 + 48))(&v77);
        v41 = EstimateSizeForJPEG(&v77);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v78 + 56))(&v77);
        v45 = v77;
        v77 = 0uLL;
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
        v78 = v45;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v37 += v41;
      }
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v38 = v80;
      if (!v80)
        goto LABEL_109;
      v68 = (unint64_t *)&v80->__shared_owners_;
      do
        v40 = __ldaxr(v68);
      while (__stlxr(v40 - 1, v68));
    }
LABEL_107:
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
    goto LABEL_109;
  }
  if (v26 == 2)
    v32 = 0;
  else
    v32 = v31 + 3;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v78);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v78 + 504))(&v79);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 208))(v79);
  v34 = v80;
  if (v80)
  {
    v35 = (unint64_t *)&v80->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v33 + v32;
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    goto LABEL_107;
  }
LABEL_109:
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  return v37;
}

void sub_188095B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<char const*,char const*>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<char const*,char const*>>>>::__emplace_hint_multi<std::pair<unsigned long const,std::pair<char const*,char const*>> &>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t **leaf;
  uint64_t v9;

  v6 = (uint64_t *)operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  v6[6] = *(_QWORD *)(a3 + 16);
  v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<std::string *,std::string *>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<std::string *,std::string *>>>>::__find_leaf(a1, a2, &v9, v6 + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, v6);
  return v6;
}

void sub_188095CAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t DaysInMonth(int a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  LODWORD(v2) = a1;
  result = DaysInMonth(int,int)::daysInMonth[a2];
  if (a2 == 2)
  {
    v2 = (int)v2 >= 0 ? (int)v2 : 1 - (int)v2;
    if ((v2 & 3) == 0)
    {
      v4 = 0x8F5C28F5C28F5C29 * v2;
      v5 = __ROR8__(v4, 2);
      v6 = __ROR8__(v4, 4);
      if (v5 <= 0x28F5C28F5C28F5CLL && v6 >= 0xA3D70A3D70A3D8)
        return result;
      else
        return (result + 1);
    }
  }
  return result;
}

void std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<XPathStepInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<XPathStepInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void XMPUtils::SetNode()
{
  __assert_rtn("SetNode", "XMPUtils.cpp", 74, "node->GetNodeType() == INode::kNTSimple");
}

void XMPUtils::HandleConstAliasStep()
{
  __assert_rtn("HandleConstAliasStep", "XMPUtils.cpp", 293, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPUtils::HandleAliasStep()
{
  __assert_rtn("HandleAliasStep", "XMPUtils.cpp", 359, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPUtils::ComposeArrayItemPath()
{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1946, "schemaNS != 0");
}

{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1947, "(arrayName != 0) && (*arrayName != 0)");
}

{
  __assert_rtn("ComposeArrayItemPath", "XMPUtils.cpp", 1948, "_fullPath != 0");
}

void XMPUtils::ComposeStructFieldPath()
{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1987, "(schemaNS != 0) && (fieldNS != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1988, "(structName != 0) && (*structName != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1989, "(fieldName != 0) && (*fieldName != 0)");
}

{
  __assert_rtn("ComposeStructFieldPath", "XMPUtils.cpp", 1990, "_fullPath != 0");
}

void XMPUtils::ComposeQualifierPath()
{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2024, "(schemaNS != 0) && (qualNS != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2025, "(propName != 0) && (*propName != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2026, "(qualName != 0) && (*qualName != 0)");
}

{
  __assert_rtn("ComposeQualifierPath", "XMPUtils.cpp", 2027, "_fullPath != 0");
}

void XMPUtils::ConvertFromBool()
{
  __assert_rtn("ConvertFromBool", "XMPUtils.cpp", 2136, "strValue != 0");
}

void XMPUtils::ConvertFromInt()
{
  __assert_rtn("ConvertFromInt", "XMPUtils.cpp", 2155, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromInt64()
{
  __assert_rtn("ConvertFromInt64", "XMPUtils.cpp", 2180, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromFloat()
{
  __assert_rtn("ConvertFromFloat", "XMPUtils.cpp", 2205, "(format != 0) && (strValue != 0)");
}

void XMPUtils::ConvertFromDate()
{
  __assert_rtn("ConvertFromDate", "XMPUtils.cpp", 2251, "strValue != 0");
}

void XMPUtils::PackageForJPEG()
{
  __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 2858, "(stdStr != 0) && (extStr != 0) && (digestStr != 0)");
}

{
  __assert_rtn("PackageForJPEG", "XMPUtils.cpp", 3066, "(stdStr != 0) && (extStr != 0) && (digestStr != 0)");
}

void XMPUtils::ConvertToUTCTime()
{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3436, "time != 0");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3442, "(0 <= time->tzHour) && (time->tzHour <= 23)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3443, "(0 <= time->tzMinute) && (time->tzMinute <= 59)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3444, "(-1 <= time->tzSign) && (time->tzSign <= +1)");
}

{
  __assert_rtn("ConvertToUTCTime", "XMPUtils.cpp", 3446, "(time->tzSign == 0) ? ((time->tzHour == 0) && (time->tzMinute == 0)) : ((time->tzHour != 0) || (time->tzMinute != 0))");
}

BOOL XMPFiles::Initialize(XMPFiles *this, unsigned int a2, const char *a3, const char *a4)
{
  int v4;
  _BOOL8 result;
  char v6;
  uint64_t v7;
  Common::HandlerRegistry *Instance;

  v4 = sXMPFilesInitCount++;
  result = 1;
  if (v4 <= 0)
  {
    v6 = (char)this;
    TXMPMeta<std::string>::Initialize();
    v7 = ImageIOShouldAllowFullsizeDecode();
    if ((v7 & 1) == 0)
      return 0;
    Instance = Common::HandlerRegistry::getInstance((Common::HandlerRegistry *)v7);
    Common::HandlerRegistry::initialize(Instance);
    InitializeUnicodeConversions();
    ignoreLocalText = (v6 & 2) != 0;
    if (!*kXMPFiles_EmbeddedVersion[0] || !*kXMPFiles_EmbeddedCopyright[0])
      return 0;
  }
  return result;
}

void sub_188096364(_Unwind_Exception *exception_object, int a2)
{
  unsigned int *v2;

  if (a2 == 1)
  {
    v2 = (unsigned int *)__cxa_begin_catch(exception_object);
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_41);
    GenericErrorCallback::NotifyClient(qword_1ECDD91C8, 3, v2, (uint64_t)"");
    __cxa_end_catch();
    JUMPOUT(0x188096300);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GenericErrorCallback::NotifyClient(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *exception;
  char v13;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((result & 1) == 0
    || *((_BYTE *)a3 + 16)
    || (*((_BYTE *)a3 + 16) = 1, (v9 = *(_DWORD *)(a1 + 8)) != 0)
    && ((v10 = *(unsigned __int8 *)(a1 + 16), v10 > a2)
     || (v10 >= a2 ? (v11 = *(_DWORD *)(a1 + 12) + 1) : (*(_BYTE *)(a1 + 16) = a2, v11 = 1),
         *(_DWORD *)(a1 + 12) = v11,
         v11 > v9)))
  {
    if ((_DWORD)a2)
      goto LABEL_13;
  }
  else
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 24))(a1, a4, a2, *a3, *((_QWORD *)a3 + 1));
    if ((_DWORD)a2 || (result & 1) == 0)
    {
LABEL_13:
      exception = __cxa_allocate_exception(0x18uLL);
      v13 = *((_BYTE *)a3 + 16);
      *(_OWORD *)exception = *(_OWORD *)a3;
      exception[16] = v13;
    }
  }
  return result;
}

void XMPFiles::Terminate(XMPFiles *this)
{
  uint64_t v1;
  ID3_Support *v2;
  ISOMedia *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  if (!--sXMPFilesInitCount)
  {
    v1 = Common::HandlerRegistry::terminate(this);
    v2 = (ID3_Support *)TXMPMeta<std::string>::Terminate(v1);
    v3 = (ISOMedia *)ID3_Support::TerminateGlobals(v2);
    ISOMedia::TerminateGlobals(v3);
    _cg_jpeg_mem_term(v4, v5, v6);
    if (_MergedGlobals != -1)
      dispatch_once(&_MergedGlobals, &__block_literal_global_41);
    v7 = qword_1ECDD91C8;
    *(_QWORD *)(qword_1ECDD91C8 + 32) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 1;
    *(_BYTE *)(v7 + 16) = 0;
    if (sProgressDefault(void)::onceToken != -1)
      dispatch_once(&sProgressDefault(void)::onceToken, &__block_literal_global_23);
    v8 = gProgressDefault;
    *(_QWORD *)(gProgressDefault + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    *(_DWORD *)(v8 + 24) = 1065353216;
    *(_BYTE *)(v8 + 28) = 0;
  }
}

void XMPFiles::XMPFiles(XMPFiles *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BB2BA0;
  *((_DWORD *)this + 2) = 0;
  XMP_ReadWriteLock::XMP_ReadWriteLock((XMPFiles *)((char *)this + 16));
  *((_DWORD *)this + 56) = 538976288;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 38) = 1;
  *((_BYTE *)this + 312) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = off_1E1BBC028;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 48) = 0;
  if (sProgressDefault(void)::onceToken != -1)
    dispatch_once(&sProgressDefault(void)::onceToken, &__block_literal_global_23);
  if (*(_QWORD *)(gProgressDefault + 8))
  {
    v2 = operator new();
    if (sProgressDefault(void)::onceToken != -1)
      dispatch_once(&sProgressDefault(void)::onceToken, &__block_literal_global_23);
    XMP_ProgressTracker::XMP_ProgressTracker(v2, gProgressDefault);
    *((_QWORD *)this + 36) = v2;
  }
  if (_MergedGlobals != -1)
    dispatch_once(&_MergedGlobals, &__block_literal_global_41);
  if (*(_QWORD *)(qword_1ECDD91C8 + 32))
  {
    *((_QWORD *)this + 40) = *(_QWORD *)(qword_1ECDD91C8 + 24);
    *((_QWORD *)this + 41) = *(_QWORD *)(qword_1ECDD91C8 + 32);
    *((_QWORD *)this + 42) = *(_QWORD *)(qword_1ECDD91C8 + 40);
    *((_DWORD *)this + 76) = *(_DWORD *)(qword_1ECDD91C8 + 8);
  }
}

void sub_188096788(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  XMP_ReadWriteLock *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void **v9;
  unsigned int *v10;
  void *v11;

  v7 = v4;
  MEMORY[0x18D761C30](v7, 0x1080C40740E08D0);
  v9 = (void **)(v2 + 368);
  if (a2 == 1)
  {
    v10 = (unsigned int *)__cxa_begin_catch(a1);
    v11 = (void *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0)
      v11 = *v9;
    GenericErrorCallback::NotifyClient(v2 + 296, 1, v10, (uint64_t)v11);
    __cxa_end_catch();
    JUMPOUT(0x188096728);
  }
  if (*(char *)(v2 + 391) < 0)
    operator delete(*v9);
  *(_QWORD *)(v2 + 296) = v5;
  if (*(char *)(v2 + 367) < 0)
    operator delete(*(void **)(v2 + 344));
  XMP_ReadWriteLock::~XMP_ReadWriteLock(v3);
  _Unwind_Resume(a1);
}

void XMPFiles::ErrorCallbackInfo::~ErrorCallbackInfo(void **this)
{
  *this = off_1E1BBC028;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
}

{
  *this = off_1E1BBC028;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  JUMPOUT(0x18D761C30);
}

void XMPFiles::~XMPFiles(XMPFiles *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1E1BB2BA0;
  if (*((int *)this + 2) >= 1)
    __assert_rtn("~XMPFiles", "XMPFiles.cpp", 411, "this->clientRefs <= 0");
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 31) = 0;
  }
  if (*((char *)this + 391) < 0)
  {
    if (!*((_QWORD *)this + 47))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 391))
  {
    goto LABEL_10;
  }
  v3 = *((_QWORD *)this + 29);
  if (v3)
  {
    XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
    *((_QWORD *)this + 29) = 0;
  }
LABEL_10:
  v4 = *((_QWORD *)this + 36);
  if (v4)
    MEMORY[0x18D761C30](v4, 0x1080C40740E08D0);
  v5 = (void *)*((_QWORD *)this + 32);
  if (v5)
    free(v5);
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  *((_QWORD *)this + 37) = off_1E1BBC028;
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  XMP_ReadWriteLock::~XMP_ReadWriteLock((XMPFiles *)((char *)this + 16));
}

{
  XMPFiles::~XMPFiles(this);
  JUMPOUT(0x18D761C30);
}

uint64_t CloseLocalFile(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  if (*(char *)(result + 391) < 0)
  {
    if (!*(_QWORD *)(result + 376))
      return result;
  }
  else if (!*(_BYTE *)(result + 391))
  {
    return result;
  }
  v2 = *(_QWORD *)(result + 232);
  if (v2)
  {
    XMPFiles_IO::Close(*(XMPFiles_IO **)(result + 232));
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
    *(_QWORD *)(v1 + 232) = 0;
  }
  return result;
}

uint64_t FileIsExcluded(Host_IO *a1, const char *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  size_t v9;
  Host_IO *v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  char **i;
  size_t v20;
  size_t v21;
  const char *v22;
  char *v23;
  _QWORD v24[2];
  uint64_t v25;

  result = Host_IO::GetFileMode(a1, a2);
  *a3 = result;
  if ((result - 2) < 2)
  {
    v25 = 0;
    v11 = 117;
    v12 = "XMPFiles: path specified is not a file";
    goto LABEL_9;
  }
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
      FileIsExcluded();
    v9 = strlen((const char *)a1);
    if (v9)
    {
      while (*((_BYTE *)a1 + v9) != 46)
      {
        if (!--v9)
        {
          v10 = a1;
          goto LABEL_13;
        }
      }
      v10 = (Host_IO *)((char *)a1 + v9);
    }
    else
    {
      v10 = a1;
LABEL_13:
      if (*(_BYTE *)v10 != 46)
        goto LABEL_28;
    }
    MEMORY[0x18D761A14](a2, (char *)v10 + 1);
    if (a2[23] < 0)
    {
      v13 = *((_QWORD *)a2 + 1);
      if (!v13)
      {
LABEL_28:
        v17 = kKnownRejectedFiles[0];
        if (!kKnownRejectedFiles[0])
          return 0;
        v18 = *((unsigned __int8 *)a2 + 23);
        for (i = off_1EDF03268; ; ++i)
        {
          v20 = strlen(v17);
          v21 = v20;
          if ((v18 & 0x80) != 0)
          {
            if (v20 != *((_QWORD *)a2 + 1))
              goto LABEL_37;
            if (v20 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v22 = *(const char **)a2;
          }
          else
          {
            v22 = a2;
            if (v21 != v18)
              goto LABEL_37;
          }
          if (!memcmp(v22, v17, v21))
          {
            v25 = 0;
            v11 = 118;
            v12 = "XMPFiles: rejected file extension specified";
LABEL_9:
            v24[1] = v12;
            v24[0] = v11;
            if (a4)
              GenericErrorCallback::NotifyClient(a4, 0, (unsigned int *)v24, (uint64_t)a1);
            return 1;
          }
LABEL_37:
          v23 = *i;
          v17 = v23;
          if (!v23)
            return 0;
        }
      }
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 23);
      if (!a2[23])
        goto LABEL_28;
    }
    v14 = 0;
    do
    {
      v15 = a2;
      if (a2[23] < 0)
        v15 = *(const char **)a2;
      if (v15[v14] - 65 <= 0x19)
      {
        v16 = a2;
        if (a2[23] < 0)
          v16 = *(const char **)a2;
        v16[v14] += 32;
      }
      ++v14;
    }
    while (v13 != v14);
    goto LABEL_28;
  }
  return result;
}

uint64_t DoOpenFile(uint64_t a1, uint64_t a2, Host_IO *a3, uint64_t a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t IsExcluded;
  Common::HandlerRegistry *Instance;
  uint64_t (**v14)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t);
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *exception;
  const char *v23;
  _QWORD *v24;
  _QWORD v25[3];
  void *__p[2];
  uint64_t v27;
  char v28;

  if (a2)
  {
    if (!*(_BYTE *)a3)
      goto LABEL_3;
LABEL_9:
    DoOpenFile();
  }
  if (!*(_BYTE *)a3)
    goto LABEL_9;
LABEL_3:
  if ((a5 & 0x202) == 0x200)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v23 = "OptimizeFileLayout requires OpenForUpdate";
    goto LABEL_52;
  }
  if (*(_QWORD *)(a1 + 248))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v23 = "File already open";
LABEL_52:
    exception[1] = v23;
    *((_BYTE *)exception + 16) = 0;
  }
  v10 = a5 & 0xFFFFFFF7;
  if (*(char *)(a1 + 391) < 0)
  {
    if (!*(_QWORD *)(a1 + 376))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(a1 + 391))
  {
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(a1 + 232);
  if (v11)
  {
    XMPFiles_IO::Close(*(XMPFiles_IO **)(a1 + 232));
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
    *(_QWORD *)(a1 + 232) = 0;
  }
LABEL_13:
  *(_QWORD *)(a1 + 232) = a2;
  MEMORY[0x18D761A14](a1 + 368, a3);
  IsExcluded = MEMORY[0x18D761A14](a1 + 344, a3);
  *(_DWORD *)(a1 + 224) = 538976288;
  *(_DWORD *)(a1 + 240) = v10;
  v28 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 391))
      goto LABEL_15;
LABEL_19:
    v28 = 1;
    if ((a5 & 0x40) != 0)
      goto LABEL_39;
    goto LABEL_20;
  }
  if (!*(_QWORD *)(a1 + 376))
    goto LABEL_19;
LABEL_15:
  IsExcluded = FileIsExcluded(a3, (const char *)__p, &v28, a1 + 296);
  if ((IsExcluded & 1) != 0)
  {
LABEL_41:
    v19 = 0;
    goto LABEL_42;
  }
  if ((a5 & 0x40) != 0)
  {
LABEL_39:
    if (!v28)
    {
      v25[0] = 111;
      v25[1] = "XMPFiles: file does not exist";
      v25[2] = 0;
      GenericErrorCallback::NotifyClient(a1 + 296, 0, (unsigned int *)v25, (uint64_t)a3);
    }
    goto LABEL_41;
  }
LABEL_20:
  Instance = Common::HandlerRegistry::getInstance((Common::HandlerRegistry *)IsExcluded);
  v14 = Common::HandlerRegistry::selectSmartHandler(Instance, (XMPFiles *)a1, a3, a4, a5 & 0xFFFFFFF7);
  if (!v14)
    goto LABEL_39;
  v15 = v14[2];
  v16 = *((_DWORD *)v14 + 1);
  if (!*(_QWORD *)(a1 + 232) && (v16 & 0x800) == 0 && (v16 & 0x100) == 0 && (v16 & 0x1000) == 0)
    __assert_rtn("DoOpenFile", "XMPFiles.cpp", 1091, "(thiz->ioRef != 0) || (handlerFlags & kXMPFiles_UsesSidecarXMP) || (handlerFlags & kXMPFiles_HandlerOwnsFile) || (handlerFlags & kXMPFiles_FolderBasedFormat)");
  if (*(_DWORD *)(a1 + 224) == 538976288)
    *(_DWORD *)(a1 + 224) = *(_DWORD *)v14;
  v17 = (unsigned __int8 *)((uint64_t (*)(uint64_t))v15)(a1);
  v18 = v17;
  if (v16 != *((_DWORD *)v17 + 4))
    __assert_rtn("DoOpenFile", "XMPFiles.cpp", 1095, "handlerFlags == handler->handlerFlags");
  *(_QWORD *)(a1 + 248) = v17;
  if ((a5 & 2) != 0
    && (v16 & 0x1000) != 0
    && ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v17 + 40))(v17) & 1) == 0)
  {
    v24 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v24 = 112;
    v24[1] = "Open, file permission error";
    *((_BYTE *)v24 + 16) = 0;
  }
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v18 + 48))(v18);
  if (v18[21])
    FillPacketInfo(v18 + 56, (uint64_t)(v18 + 32));
  v19 = 1;
  if ((a5 & 2) == 0 && (v16 & 0x100) == 0 && (v16 & 0x10000) == 0)
  {
    if (*(char *)(a1 + 391) < 0)
    {
      if (!*(_QWORD *)(a1 + 376))
        goto LABEL_42;
    }
    else if (!*(_BYTE *)(a1 + 391))
    {
      goto LABEL_42;
    }
    v21 = *(_QWORD *)(a1 + 232);
    if (v21)
    {
      XMPFiles_IO::Close(*(XMPFiles_IO **)(a1 + 232));
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
      *(_QWORD *)(a1 + 232) = 0;
    }
  }
LABEL_42:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  return v19;
}

void sub_188096F70(void *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  v3 = *(_QWORD *)(v1 + 248);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(v1 + 248) = 0;
  if ((v2 & 0x100) == 0)
    CloseLocalFile(v1);
  __cxa_rethrow();
}

void sub_188096FA4()
{
  __cxa_end_catch();
  JUMPOUT(0x188096FC0);
}

void sub_188096FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPFiles::OpenFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)(a1 + 288) = 0;
  return DoOpenFile(a1, a2, (Host_IO *)"", a3, a4);
}

void XMPFiles::CloseFile(XMPFiles *this, char a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  XMP_ProgressTracker *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  XMP_ProgressTracker *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  _QWORD *exception;
  _QWORD *v27;

  v4 = (char *)this + 248;
  v3 = *((_QWORD *)this + 31);
  if (!v3)
    return;
  v5 = *(unsigned __int8 *)(v3 + 23);
  v6 = *((_DWORD *)this + 60);
  v7 = *(_DWORD *)(v3 + 16);
  if (*(_BYTE *)(v3 + 23))
    v8 = a2 & ((*((_DWORD *)this + 60) & 2u) >> 1);
  else
    v8 = 0;
  if (v8 == 1 && (*(_DWORD *)(v3 + 16) & 0x300) == 0x100)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 2;
    exception[1] = "XMPFiles::CloseFile - Safe update not supported";
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = *((_QWORD *)this + 36);
  if (v9)
  {
    if (*((char *)this + 391) < 0)
    {
      if (!*((_QWORD *)this + 47))
        goto LABEL_14;
    }
    else if (!*((_BYTE *)this + 391))
    {
      goto LABEL_14;
    }
    v10 = *((_QWORD *)this + 29);
    if (v10)
      *(_QWORD *)(v10 + 80) = v9;
  }
LABEL_14:
  if ((v7 & 0x100) != 0)
    v11 = 0;
  else
    v11 = v8;
  if ((v11 & 1) != 0)
  {
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 29) + 40))(*((_QWORD *)this + 29));
    if (!v12)
    {
      v27 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v27 = 9;
      v27[1] = "XMPFiles::CloseFile, cannot create temp";
      *((_BYTE *)v27 + 16) = 0;
    }
    if ((v7 & 4) != 0)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v4 + 80))(*(_QWORD *)v4, v12);
    }
    else
    {
      v13 = *((_QWORD *)this + 29);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0, 0);
      v14 = (XMP_ProgressTracker *)*((_QWORD *)this + 36);
      if (v14 && (*(_BYTE *)(*(_QWORD *)v4 + 17) & 0x20) != 0)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        XMP_ProgressTracker::BeginWork(v14, (float)v15);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      XIO::Copy(v13, v12);
      *((_QWORD *)this + 29) = v12;
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 31) + 72))(*((_QWORD *)this + 31), 0);
      *((_QWORD *)this + 29) = v13;
      v19 = (XMP_ProgressTracker *)*((_QWORD *)this + 36);
      if (v19 && (*(_BYTE *)(*(_QWORD *)v4 + 17) & 0x20) != 0)
        XMP_ProgressTracker::WorkComplete(v19, v16, v17, v18);
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 29) + 48))(*((_QWORD *)this + 29));
    if (*((char *)this + 391) < 0)
    {
      if (!*((_QWORD *)this + 47))
      {
LABEL_42:
        v20 = *(_QWORD **)v4;
        if (!*(_QWORD *)v4)
        {
LABEL_45:
          *(_QWORD *)v4 = 0;
          goto LABEL_46;
        }
        v21 = 1;
LABEL_44:
        (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
        goto LABEL_45;
      }
    }
    else if (!*((_BYTE *)this + 391))
    {
      goto LABEL_42;
    }
    v22 = *((_QWORD *)this + 29);
    if (v22)
    {
      XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
      *((_QWORD *)this + 29) = 0;
    }
    goto LABEL_42;
  }
  if (!((v6 >> 9) & 1 | v5)
    || ((*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3), (v3 = *(_QWORD *)v4) != 0))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  *((_QWORD *)this + 31) = 0;
  if (*((char *)this + 391) < 0)
  {
    if (!*((_QWORD *)this + 47))
      goto LABEL_46;
    goto LABEL_37;
  }
  if (*((_BYTE *)this + 391))
  {
LABEL_37:
    v20 = (_QWORD *)*((_QWORD *)this + 29);
    if (!v20)
      goto LABEL_46;
    XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
    v21 = 9;
    v4 = (char *)this + 232;
    goto LABEL_44;
  }
LABEL_46:
  v23 = *((char *)this + 391);
  if ((v23 & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 391))
      goto LABEL_52;
LABEL_50:
    v24 = *((_QWORD *)this + 29);
    if (v24)
    {
      XMPFiles_IO::Close(*((XMPFiles_IO **)this + 29));
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 72))(v24);
      *((_QWORD *)this + 29) = 0;
      LOBYTE(v23) = *((_BYTE *)this + 391);
    }
    goto LABEL_52;
  }
  if (*((_QWORD *)this + 47))
    goto LABEL_50;
LABEL_52:
  if ((v23 & 0x80) != 0)
  {
    **((_BYTE **)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
  }
  else
  {
    *((_BYTE *)this + 368) = 0;
    *((_BYTE *)this + 391) = 0;
  }
  if (*((char *)this + 367) < 0)
  {
    **((_BYTE **)this + 43) = 0;
    *((_QWORD *)this + 44) = 0;
  }
  else
  {
    *((_BYTE *)this + 344) = 0;
    *((_BYTE *)this + 367) = 0;
  }
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 56) = 538976288;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  v25 = (void *)*((_QWORD *)this + 32);
  if (v25)
    free(v25);
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
}

void sub_1880973C8(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 232) + 56))(*(_QWORD *)(v1 + 232));
  *(_QWORD *)(v1 + 232) = v2;
  __cxa_rethrow();
}

void sub_1880973E8(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  void *v5;

  __cxa_end_catch();
  __cxa_begin_catch(a1);
  if (*v2)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    *v2 = 0;
  }
  v4 = *(_QWORD *)(v1 + 232);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  CloseLocalFile(v1);
  XMPFiles::ClearFilePath(v1);
  *(_QWORD *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 224) = 538976288;
  *(_QWORD *)(v1 + 232) = 0;
  *(_DWORD *)(v1 + 240) = 0;
  v5 = *(void **)(v1 + 256);
  if (v5)
    free(v5);
  *(_QWORD *)(v1 + 256) = 0;
  *(_DWORD *)(v1 + 264) = 0;
  __cxa_rethrow();
}

void sub_188097480()
{
  __cxa_end_catch();
  JUMPOUT(0x18809748CLL);
}

void sub_1880974D0()
{
  __cxa_end_catch();
  JUMPOUT(0x1880974D8);
}

uint64_t XMPFiles::ClearFilePath(uint64_t this)
{
  if (*(char *)(this + 391) < 0)
  {
    **(_BYTE **)(this + 368) = 0;
    *(_QWORD *)(this + 376) = 0;
  }
  else
  {
    *(_BYTE *)(this + 368) = 0;
    *(_BYTE *)(this + 391) = 0;
  }
  if (*(char *)(this + 367) < 0)
  {
    **(_BYTE **)(this + 344) = 0;
    *(_QWORD *)(this + 352) = 0;
  }
  else
  {
    *(_BYTE *)(this + 344) = 0;
    *(_BYTE *)(this + 367) = 0;
  }
  return this;
}

uint64_t XMPFiles::PutXMP(uint64_t a1, uint64_t a2)
{
  return DoPutXMP(a1, a2, 1);
}

uint64_t DoPutXMP(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _QWORD *exception;
  const char *v18;
  uint64_t result;
  _QWORD v20[2];

  v3 = *(_QWORD *)(a1 + 248);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    v18 = "XMPFiles::PutXMP - No open file";
    goto LABEL_37;
  }
  if ((*(_BYTE *)(a1 + 240) & 2) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    v18 = "XMPFiles::PutXMP - Not open for update";
    goto LABEL_37;
  }
  v7 = *(_DWORD *)(v3 + 16);
  if (!*(_BYTE *)(v3 + 22))
    (*(void (**)(_QWORD))(*(_QWORD *)v3 + 56))(*(_QWORD *)(a1 + 248));
  if (*(_DWORD *)(v3 + 40) == -1)
    v8 = 0;
  else
    v8 = *(_DWORD *)(v3 + 40);
  v9 = (unint64_t)(*(_QWORD *)(v3 + 32) - 1) >= 0xFFFFFFFFFFFFFFFELL || v8 == 0;
  v10 = !v9;
  if (v9)
  {
    if ((v7 & 1) != 0)
    {
      v11 = *(unsigned __int8 *)(v3 + 20);
      if (v11 != 1)
        goto LABEL_19;
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      v18 = "XMPFiles::PutXMP - No standard character form";
    }
    else
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 2;
      v18 = "XMPFiles::PutXMP - Can't inject XMP";
    }
LABEL_37:
    exception[1] = v18;
    *((_BYTE *)exception + 16) = 0;
  }
  v11 = *(unsigned __int8 *)(v3 + 20);
  if (v11 == 1)
    v11 = *(unsigned __int8 *)(v3 + 48);
LABEL_19:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3) | v11;
  v13 = v12 | (v7 >> 5) & 0x20;
  if (v10 && *(_DWORD *)(a1 + 224) == 538976288)
  {
    v14 = v12 | 0x20;
    if (*(_BYTE *)(v3 + 49))
      v13 = v13;
    else
      v13 = v14;
  }
  v15 = v10 & (v7 >> 3);
  if ((v7 & 2) == 0)
    v15 = 1;
  if ((v7 & 0x800) != 0 || !v15)
  {
    TXMPMeta<std::string>::SerializeToBuffer(a2, v3 + 56, v13, 0);
  }
  else
  {
    TXMPMeta<std::string>::SerializeToBuffer(a2, v3 + 56, v13 | 0x200, v8);
    if (*(char *)(v3 + 79) < 0)
      v16 = *(_QWORD *)(v3 + 64);
    else
      v16 = *(unsigned __int8 *)(v3 + 79);
    if (v16 != v8)
      __assert_rtn("DoPutXMP", "XMPFiles.cpp", 1619, "xmpPacket.size() == oldPacketLength");
  }
  if (!a3)
    return 1;
  TXMPMeta<std::string>::Clone(a2, 0, v20);
  TXMPMeta<std::string>::operator=(v3 + 80, (uint64_t)v20);
  TXMPMeta<std::string>::~TXMPMeta(v20);
  *(_WORD *)(v3 + 21) = 257;
  result = 1;
  *(_BYTE *)(v3 + 23) = 1;
  return result;
}

void sub_188097810(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_188097830(void *a1)
{
  char v1;

  __cxa_begin_catch(a1);
  if ((v1 & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x18809778CLL);
  }
  __cxa_rethrow();
}

void sub_188097848()
{
  __cxa_end_catch();
  JUMPOUT(0x188097828);
}

uint64_t XMPFiles::PutXMP(XMPFiles *this, const char *a2, uint64_t a3)
{
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v7);
  TXMPMeta<std::string>::SetErrorCallback((uint64_t)v7, (uint64_t)ErrorCallbackForXMPMeta, (uint64_t)this + 296, 1);
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)v7, (uint64_t)a2, a3, 0);
  XMPFiles::PutXMP((uint64_t)this, (uint64_t)v7);
  return TXMPMeta<std::string>::~TXMPMeta(v7);
}

void sub_1880978D8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;

  if (a2 == 1)
  {
    v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    v4 = (_QWORD *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0)
      v4 = (_QWORD *)*v4;
    GenericErrorCallback::NotifyClient(v2 + 296, 2, v3, (uint64_t)v4);
    __cxa_end_catch();
    JUMPOUT(0x1880978C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ErrorCallbackForXMPMeta(uint64_t a1, uint64_t a2, unsigned int a3, const char *a4)
{
  _QWORD v5[3];

  v5[1] = a4;
  v5[2] = 0;
  v5[0] = a3;
  GenericErrorCallback::NotifyClient(a1, a2, (unsigned int *)v5, 0);
  return 1;
}

uint64_t XMPFiles::CanPutXMP(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _QWORD *exception;

  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 3;
    exception[1] = "XMPFiles::CanPutXMP - No open file";
    *((_BYTE *)exception + 16) = 0;
  }
  if ((*(_BYTE *)(a1 + 240) & 2) == 0)
    return 0;
  v4 = *(_DWORD *)(v2 + 16);
  if ((v4 & 1) != 0)
    return 1;
  if (!*(_BYTE *)(v2 + 21))
    return 0;
  if ((v4 & 2) != 0)
    return 1;
  else
    return DoPutXMP(a1, a2, 0);
}

uint64_t XMPFiles::CanPutXMP(XMPFiles *this, const char *a2, uint64_t a3)
{
  uint64_t CanPutXMP;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v8);
  TXMPMeta<std::string>::SetErrorCallback((uint64_t)v8, (uint64_t)ErrorCallbackForXMPMeta, (uint64_t)this + 296, 1);
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)v8, (uint64_t)a2, a3, 0);
  CanPutXMP = XMPFiles::CanPutXMP((uint64_t)this, (uint64_t)v8);
  TXMPMeta<std::string>::~TXMPMeta(v8);
  return CanPutXMP;
}

void sub_188097ADC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  _QWORD *v4;

  if (a2 == 1)
  {
    v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    v4 = (_QWORD *)(v2 + 368);
    if (*(char *)(v2 + 391) < 0)
      v4 = (_QWORD *)*v4;
    GenericErrorCallback::NotifyClient(v2 + 296, 2, v3, (uint64_t)v4);
    __cxa_end_catch();
    JUMPOUT(0x188097AC4);
  }
  _Unwind_Resume(exception_object);
}

BOOL XMPFiles::ErrorCallbackInfo::CanNotify(XMPFiles::ErrorCallbackInfo *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1 && !*((_QWORD *)this + 3))
    XMPFiles::ErrorCallbackInfo::CanNotify();
  return v1 != 0;
}

BOOL XMPFiles::ErrorCallbackInfo::ClientCallbackWrapper(XMPFiles::ErrorCallbackInfo *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const char *v8;

  v8 = a2;
  if (!a2)
  {
    v8 = (char *)this + 48;
    if (*((char *)this + 71) < 0)
      v8 = *(const char **)v8;
  }
  return (*((unsigned int (**)(_QWORD, _QWORD, const char *, uint64_t, uint64_t, const char *))this + 3))(*((_QWORD *)this + 4), *((_QWORD *)this + 5), v8, a3, a4, a5) != 0;
}

uint64_t ___ZL16sProgressDefaultv_block_invoke()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 1065353216;
  *(_BYTE *)(result + 28) = 0;
  gProgressDefault = result;
  return result;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E1B80128, MEMORY[0x1E0DE42E0]);
}

void sub_188097CA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void FileIsExcluded()
{
  __assert_rtn("FileIsExcluded", "XMPFiles.cpp", 509, "(*clientMode == Host_IO::kFMode_IsFile) || (*clientMode == Host_IO::kFMode_DoesNotExist)");
}

void DoOpenFile()
{
  __assert_rtn("DoOpenFile", "XMPFiles.cpp", 970, "(clientIO == 0) ? (clientPath[0] != 0) : (clientPath[0] == 0)");
}

void XMPFiles::ErrorCallbackInfo::CanNotify()
{
  __assert_rtn("CanNotify", "XMPFiles.cpp", 1824, "(this->clientProc == 0) || (this->wrapperProc != 0)");
}

_QWORD *AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x634D657461646174)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 856));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634D657461646174, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IMetadata_I.cpp", 0x28u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 864)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634D657461646174, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IMetadata_I.cpp", 0x32u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_188097E68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IMetadata_I::GetInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 848)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IMetadata_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::getInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x318, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IMetadata_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IMetadata_I::getInterfacePointer(AdobeXMPCore_Int::IMetadata_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 856)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IMetadata_I::getInterfacePointer((AdobeXMPCore_Int::IMetadata_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::getAboutURI(AdobeXMPCore_Int::IMetadata_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 856), (void (*)(char **__return_ptr, _QWORD *))0x2E0, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_188098198(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809817CLL);
}

void sub_188098294(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::GetActualIStructureNode(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 792);
}

uint64_t `virtual thunk to'AdobeXMPCommon_Int::ISharedObject_I::GetISharedObject_I(AdobeXMPCommon_Int::ISharedObject_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 40);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::GetActualINode(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 312)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 312)) - 544);
}

uint64_t AdobeXMPCore_Int::INode_I::GetActualINode(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::GetINode_I(AdobeXMPCore_Int::INode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 320);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetActualICompositeNode(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 616)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 616)) - 688);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::GetActualICompositeNode(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 688);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetICompositeNode_I(AdobeXMPCore_Int::ICompositeNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 624);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetActualIStructureNode(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 736)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 736)) - 792);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetIStructureNode_I(AdobeXMPCore_Int::IStructureNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 744);
}

uint64_t AdobeXMPCommon_Int::IThreadSafe_I::isThreadSafe(AdobeXMPCommon_Int::IThreadSafe_I *this)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) + 16))((char *)this + *(_QWORD *)(*(_QWORD *)this - 72));
}

uint64_t AdobeXMPCore_Int::IMetadata_I::GetISharedObject_I(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 888);
}

uint64_t AdobeXMPCore_Int::IMetadata_I::GetActualIMetadata(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 856);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IMetadata_I::GetISharedObject_I(AdobeXMPCore_Int::IMetadata_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 888);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IMetadata_I,void *,void *,unsigned long long,unsigned int>(void *a1, char **a2)
{
  uint64_t *exception_ptr;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v11[2];

  exception_ptr = (uint64_t *)__cxa_get_exception_ptr(a1);
  v6 = *exception_ptr;
  v5 = exception_ptr[1];
  v11[0] = *exception_ptr;
  v11[1] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  __cxa_begin_catch(a1);
  v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 200))(v6);
  *a2 = v9;
  v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 56)] + 16))(&v9[*(_QWORD *)(*(_QWORD *)v9 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v11);
  __cxa_end_catch();
}

uint64_t *AdobeXMPCommon::IUTF8String_v1::MakeShared@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];

  if (this)
  {
    v4 = this;
    v5 = (_QWORD *)operator new();
    *v5 = off_1E1BB3620;
    v5[1] = 0;
    v5[3] = v4;
    v5[4] = &off_1E1BB37D0;
    v5[2] = 0;
    (**(void (***)(char *))((char *)v4 + *(_QWORD *)(*v4 - 56)))((char *)v4 + *(_QWORD *)(*v4 - 56));
    this = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v8, (uint64_t)v5);
    v6 = v8[0];
    if (v8[0])
      v6 = v8[0] + *(_QWORD *)(*(_QWORD *)v8[0] - 408);
    v7 = v8[1];
    *a2 = v6;
    a2[1] = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void AdobeXMPCommon::IUTF8StringProxy::Acquire(AdobeXMPCommon::IUTF8StringProxy *this)
{
  __assert_rtn("Acquire", "IUTF8String.cpp", 41, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::Release(AdobeXMPCommon::IUTF8StringProxy *this)
{
  __assert_rtn("Release", "IUTF8String.cpp", 43, "false");
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetISharedObject_I(AdobeXMPCommon::IUTF8StringProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3) + *(_QWORD *)(**((_QWORD **)this + 3) - 56);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

void AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

{
  JUMPOUT(0x18D761C30);
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::append@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0xF0, 1, (uint64_t)a2, a3);
  (*(void (**)(char *))(*(_QWORD *)&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)] + 8))(&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (_QWORD *)this + 1);
  v8 = v10[0];
  if (v10[0])
    v8 = v10[0] + *(_QWORD *)(*(_QWORD *)v10[0] - 408);
  v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::append@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v9 = *(_QWORD *)(a1 + 24);
  if (*a2)
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 216))(*a2);
  else
    v10 = 0;
  v11 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v9, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0xF8, 1, v10, a3, a4);
  (*(void (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 8))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v15, (_QWORD *)(a1 + 8));
  v13 = v15[0];
  if (v15[0])
    v13 = v15[0] + *(_QWORD *)(*(_QWORD *)v15[0] - 408);
  v14 = v15[1];
  *a5 = v13;
  a5[1] = v14;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::assign@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0xE0, 1, (uint64_t)a2, a3);
  (*(void (**)(char *))(*(_QWORD *)&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)] + 8))(&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (_QWORD *)this + 1);
  v8 = v10[0];
  if (v10[0])
    v8 = v10[0] + *(_QWORD *)(*(_QWORD *)v10[0] - 408);
  v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::assign@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v9 = *(_QWORD *)(a1 + 24);
  if (*a2)
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 216))(*a2);
  else
    v10 = 0;
  v11 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v9, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0xE8, 1, v10, a3, a4);
  (*(void (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 8))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v15, (_QWORD *)(a1 + 8));
  v13 = v15[0];
  if (v15[0])
    v13 = v15[0] + *(_QWORD *)(*(_QWORD *)v15[0] - 408);
  v14 = v15[1];
  *a5 = v13;
  a5[1] = v14;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::insert@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v7 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,char const*,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x100, 1, a3, (uint64_t)a2, a4);
  (*(void (**)(char *))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 56)] + 8))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v11, (_QWORD *)this + 1);
  v9 = v11[0];
  if (v11[0])
    v9 = v11[0] + *(_QWORD *)(*(_QWORD *)v11[0] - 408);
  v10 = v11[1];
  *a5 = v9;
  a5[1] = v10;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::insert@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v11 = *(_QWORD *)(a1 + 24);
  if (*a3)
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 216))(*a3);
  else
    v12 = 0;
  v13 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v11, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x108, 1, a2, v12, a4, a5);
  (*(void (**)(char *))(*(_QWORD *)&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)] + 8))(&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v17, (_QWORD *)(a1 + 8));
  v15 = v17[0];
  if (v17[0])
    v15 = v17[0] + *(_QWORD *)(*(_QWORD *)v17[0] - 408);
  v16 = v17[1];
  *a6 = v15;
  a6[1] = v16;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::erase@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v6 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x110, 1, a2, a3);
  (*(void (**)(char *))(*(_QWORD *)&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)] + 8))(&v6[*(_QWORD *)(*(_QWORD *)v6 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v10, (_QWORD *)this + 1);
  v8 = v10[0];
  if (v10[0])
    v8 = v10[0] + *(_QWORD *)(*(_QWORD *)v10[0] - 408);
  v9 = v10[1];
  *a4 = v8;
  a4[1] = v9;
  return result;
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::resize(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2)
{
  return AdobeXMPCommon::CallSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **))0x118, 1, a2);
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::replace@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, const char *a2@<X3>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v8 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,char const*,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x120, 1, a3, a4, (uint64_t)a2, a5);
  (*(void (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 8))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v12, (_QWORD *)this + 1);
  v10 = v12[0];
  if (v12[0])
    v10 = v12[0] + *(_QWORD *)(*(_QWORD *)v12[0] - 408);
  v11 = v12[1];
  *a6 = v10;
  a6[1] = v11;
  return result;
}

_QWORD *AdobeXMPCommon::IUTF8StringProxy::replace@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v13 = *(_QWORD *)(a1 + 24);
  if (*a4)
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 216))(*a4);
  else
    v14 = 0;
  v15 = (char *)AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v13, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x128, 1, a2, a3, v14, a5, a6);
  (*(void (**)(char *))(*(_QWORD *)&v15[*(_QWORD *)(*(_QWORD *)v15 - 56)] + 8))(&v15[*(_QWORD *)(*(_QWORD *)v15 - 56)]);
  result = std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(v19, (_QWORD *)(a1 + 8));
  v17 = v19[0];
  if (v19[0])
    v17 = v19[0] + *(_QWORD *)(*(_QWORD *)v19[0] - 408);
  v18 = v19[1];
  *a7 = v17;
  a7[1] = v18;
  return result;
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::copy(AdobeXMPCommon::IUTF8StringProxy *this, char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x130, 1, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::find(AdobeXMPCommon::IUTF8StringProxy *this, const char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x138, 1, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::find(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 24);
  if (*a2)
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 216))(*a2);
  else
    v7 = 0;
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x140, 1, v7, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::rfind(AdobeXMPCommon::IUTF8StringProxy *this, const char *a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x148, 1, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::rfind(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 24);
  if (*a2)
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 216))(*a2);
  else
    v7 = 0;
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v6, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x150, 1, v7, a3, a4);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::compare(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x158, 1, a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::compare(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 24);
  if (*a4)
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 216))(*a4);
  else
    v11 = 0;
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(v10, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x160, 1, a2, a3, v11, a5, a6);
}

uint64_t *AdobeXMPCommon::IUTF8StringProxy::substr@<X0>(AdobeXMPCommon::IUTF8StringProxy *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x168, 1, a2, a3, a4);
}

BOOL AdobeXMPCommon::IUTF8StringProxy::empty(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,BOOL,unsigned int>(*((_QWORD *)this + 3), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0x170, 1);
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::c_str(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3));
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::clear(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 200))(*((_QWORD *)this + 3));
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::size(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 208))(*((_QWORD *)this + 3));
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetActualIUTF8String(AdobeXMPCommon::IUTF8StringProxy *this)
{
  return *((_QWORD *)this + 3);
}

void AdobeXMPCommon::IUTF8StringProxy::assign()
{
  __assert_rtn("assign", "IUTF8String.cpp", 82, "false");
}

{
  __assert_rtn("assign", "IUTF8String.cpp", 88, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::append()
{
  __assert_rtn("append", "IUTF8String.cpp", 58, "false");
}

{
  __assert_rtn("append", "IUTF8String.cpp", 64, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::insert()
{
  __assert_rtn("insert", "IUTF8String.cpp", 106, "false");
}

{
  __assert_rtn("insert", "IUTF8String.cpp", 112, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::erase()
{
  __assert_rtn("erase", "IUTF8String.cpp", 124, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::resize()
{
  __assert_rtn("resize", "IUTF8String.cpp", 135, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::replace()
{
  __assert_rtn("replace", "IUTF8String.cpp", 152, "false");
}

{
  __assert_rtn("replace", "IUTF8String.cpp", 158, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::copy()
{
  __assert_rtn("copy", "IUTF8String.cpp", 169, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::find()
{
  __assert_rtn("find", "IUTF8String.cpp", 184, "false");
}

{
  __assert_rtn("find", "IUTF8String.cpp", 189, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::rfind()
{
  __assert_rtn("rfind", "IUTF8String.cpp", 204, "false");
}

{
  __assert_rtn("rfind", "IUTF8String.cpp", 209, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::compare()
{
  __assert_rtn("compare", "IUTF8String.cpp", 224, "false");
}

{
  __assert_rtn("compare", "IUTF8String.cpp", 229, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::substr()
{
  __assert_rtn("substr", "IUTF8String.cpp", 239, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::empty()
{
  __assert_rtn("empty", "IUTF8String.cpp", 249, "false");
}

uint64_t AdobeXMPCommon::IUTF8StringProxy::GetInterfacePointer(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v3)
    v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 64);
  else
    v4 = 0;
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x18, 1, a2, a3);
}

void AdobeXMPCommon::IUTF8StringProxy::getInterfacePointer()
{
  __assert_rtn("getInterfacePointer", "IUTF8String.cpp", 275, "false");
}

void `virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this)
{
}

{
  JUMPOUT(0x18D761C30);
}

uint64_t `virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::GetInterfacePointer(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32) + 24);
  if (v3)
    v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 64);
  else
    v4 = 0;
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x18, 1, a2, a3);
}

void `virtual thunk to'AdobeXMPCommon::IUTF8StringProxy::getInterfacePointer()
{
  __assert_rtn("getInterfacePointer", "IUTF8String.cpp", 275, "false");
}

void AdobeXMPCommon::IUTF8StringProxy::~IUTF8StringProxy(AdobeXMPCommon::IUTF8StringProxy *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 408)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[3];
  v4 = *((_QWORD *)this + 3) + *(_QWORD *)(**((_QWORD **)this + 3) - 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v6;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v9;

  v5 = a2;
  v9 = 0;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_1880993C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AdobeXMPCommon::IError_v1::MakeShared@<D0>(AdobeXMPCommon::IError_v1 *this@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v5;

  AdobeXMPCommon::IError_v1::MakeShared((char *)this, &v5);
  result = *(double *)&v5;
  *a2 = v5;
  return result;
}

_QWORD *std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;

  v6 = a2;
  v10 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188099508(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;

  v6 = a2;
  v10 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_1880995A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v8;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v11;

  v7 = a2;
  v11 = 0;
  v8 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_188099644(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v6;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v9;

  v5 = a2;
  v9 = 0;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_1880996DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v5;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v8;

  v4 = a2;
  v8 = 0;
  v5 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **))(*v5 + a2);
  result = v4(v5, a4, &v8);
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v8, exception);
  }
  return result;
}

void sub_18809976C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v8;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v11;

  v7 = a2;
  v11 = 0;
  v8 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_18809980C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1*,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v9;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v12;

  v8 = a2;
  v12 = 0;
  v9 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v9 + a2);
  result = v8(v9, a4, a5, a6, a7, a8, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return result;
}

void sub_1880998B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;

  v6 = a2;
  v10 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_18809994C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;

  v6 = a2;
  v10 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_1880999E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;

  v6 = a2;
  v10 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  result = v6(v7, a4, a5, a6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  return result;
}

void sub_188099A84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v8;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v11;

  v7 = a2;
  v11 = 0;
  v8 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v7 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  result = v7(v8, a4, a5, a6, a7, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  return result;
}

void sub_188099B24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,AdobeXMPCommon::IUTF8String_v1 const*,unsigned long long,unsigned long long>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v9;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v12;

  v8 = a2;
  v12 = 0;
  v9 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v9 + a2);
  result = v8(v9, a4, a5, a6, a7, a8, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return result;
}

void sub_188099BC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t (*v6)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v8;
  uint64_t *v9;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v12;

  v6 = a2;
  v12 = 0;
  v8 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v8 + a2);
  v9 = (uint64_t *)v6(v8, a4, a5, &v12);
  if (v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v12, exception);
  }
  return AdobeXMPCommon::IUTF8String_v1::MakeShared(v9, a6);
}

void sub_188099C6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IUTF8String_v1,BOOL,unsigned int>(uint64_t a1, uint64_t (*a2)(_QWORD *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, AdobeXMPCommon::IError_v1 **);
  _QWORD *v4;
  int v5;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v8;

  v3 = a2;
  v8 = 0;
  v4 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  v5 = v3(v4, &v8);
  if (v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v8, exception);
  }
  return v5 != 0;
}

void sub_188099D00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v6;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v9;

  v5 = a2;
  v9 = 0;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  result = v5(v6, a4, a5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return result;
}

void sub_188099D98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BBC4C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__enable_weak_this[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_188099E18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__enable_weak_this[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IUTF8StringProxy *,std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__shared_ptr_default_delete<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy>,std::allocator<AdobeXMPCommon::IUTF8StringProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void TIFF_Manager::TIFF_Manager(TIFF_Manager *this)
{
  uint64_t v1;
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;

  *(_QWORD *)this = &unk_1E1BAC2D0;
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_DWORD *)((char *)this + 71) = 0;
  if ((sFirstCTor & 1) == 0)
  {
    v1 = 0;
    sFirstCTor = 1;
    do
    {
      v2 = (unsigned __int16 *)*(&sKnownTags + v1);
      v5 = *v2;
      v3 = v2 + 1;
      v4 = v5;
      while (v4 != 0xFFFF)
      {
        v6 = *v3++;
        v7 = v4 >= v6;
        v4 = v6;
        if (v7)
          TIFF_Manager::TIFF_Manager();
      }
      ++v1;
    }
    while (v1 != 5);
  }
}

uint64_t TIFF_Manager::CheckTIFFHeader(TIFF_Manager *this, unsigned int *a2, unsigned int a3)
{
  unsigned int v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t (*v8)(uint64_t, _DWORD *);
  uint64_t (*v9)(uint64_t, _WORD *);
  void *v10;
  void *v11;
  uint64_t (*v12)(unsigned int *);
  char v13;
  uint64_t (*v14)(unsigned __int16 *);
  uint64_t result;
  _QWORD *exception;
  const char *v17;

  if (a3 <= 7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    v17 = "The TIFF is too small";
    goto LABEL_14;
  }
  v4 = bswap32(*a2);
  if (v4 == 1229531648)
  {
    v13 = 0;
    v6 = PutDoubleLE;
    v7 = PutFloatLE;
    v8 = PutUns32LE;
    v9 = PutUns16LE;
    v10 = GetDoubleLE;
    v11 = GetFloatLE;
    v12 = GetUns32LE;
    v5 = 1;
    v14 = GetUns16LE;
  }
  else
  {
    if (v4 != 1296891946)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      v17 = "Unrecognized TIFF prefix";
LABEL_14:
      exception[1] = v17;
      *((_BYTE *)exception + 16) = 0;
    }
    v5 = 0;
    v6 = PutDoubleBE;
    v7 = PutFloatBE;
    v8 = PutUns32BE;
    v9 = PutUns16BE;
    v10 = GetDoubleBE;
    v11 = GetFloatBE;
    v12 = GetUns32BE;
    v13 = 1;
    v14 = GetUns16BE;
  }
  *((_BYTE *)this + 72) = v13;
  *((_BYTE *)this + 73) = v5;
  *((_QWORD *)this + 1) = v14;
  *((_QWORD *)this + 2) = v12;
  *((_QWORD *)this + 3) = v11;
  *((_QWORD *)this + 4) = v10;
  *((_QWORD *)this + 5) = v9;
  *((_QWORD *)this + 6) = v8;
  *((_QWORD *)this + 7) = v7;
  *((_QWORD *)this + 8) = v6;
  result = v12(a2 + 1);
  if ((_DWORD)result && (a3 < 0xE || result < 8 || (unint64_t)a3 - 6 < result))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    v17 = "Invalid primary IFD offset";
    goto LABEL_14;
  }
  return result;
}

uint64_t GetUns16BE(unsigned __int16 *a1)
{
  return bswap32(*a1) >> 16;
}

uint64_t GetUns32BE(unsigned int *a1)
{
  return bswap32(*a1);
}

float GetFloatBE(unsigned int *a1)
{
  return COERCE_FLOAT(bswap32(*a1));
}

double GetDoubleBE(unint64_t *a1)
{
  return COERCE_DOUBLE(bswap64(*a1));
}

uint64_t PutUns16BE(uint64_t result, _WORD *a2)
{
  *a2 = __rev16(result);
  return result;
}

uint64_t PutUns32BE(uint64_t result, _DWORD *a2)
{
  *a2 = bswap32(result);
  return result;
}

_DWORD *PutFloatBE(float a1, _DWORD *result)
{
  *result = bswap32(LODWORD(a1));
  return result;
}

_QWORD *PutDoubleBE(double a1, _QWORD *result)
{
  *result = bswap64(*(unint64_t *)&a1);
  return result;
}

uint64_t GetUns16LE(unsigned __int16 *a1)
{
  return *a1;
}

{
  return *a1;
}

uint64_t GetUns32LE(unsigned int *a1)
{
  return *a1;
}

{
  return *a1;
}

float GetFloatLE(const void *a1)
{
  return *(float *)a1;
}

{
  return *(float *)a1;
}

double GetDoubleLE(const void *a1)
{
  return *(double *)a1;
}

{
  return *(double *)a1;
}

uint64_t PutUns16LE(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

uint64_t PutUns32LE(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

float *PutFloatLE(float a1, float *result)
{
  *result = a1;
  return result;
}

{
  *result = a1;
  return result;
}

double *PutDoubleLE(double a1, double *result)
{
  *result = a1;
  return result;
}

{
  *result = a1;
  return result;
}

uint64_t TIFF_Manager::SetTag_Byte(TIFF_Manager *this, uint64_t a2, uint64_t a3, char a4)
{
  char v5;

  v5 = a4;
  return (*(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)this + 32))(this, a2, a3, 1, 1, &v5);
}

uint64_t TIFF_Manager::SetTag_Short(void (**this)(uint64_t, __int16 *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v8;

  v8 = 0;
  this[5](a4, &v8);
  return (*((uint64_t (**)(void (**)(uint64_t, __int16 *), uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))*this
          + 4))(this, a2, a3, 3, 1, &v8);
}

uint64_t TIFF_Manager::SetTag_Long(void (**this)(uint64_t, int *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;

  v8 = 0;
  this[6](a4, &v8);
  return (*((uint64_t (**)(void (**)(uint64_t, int *), uint64_t, uint64_t, uint64_t, uint64_t, int *))*this
          + 4))(this, a2, a3, 4, 1, &v8);
}

uint64_t TIFF_Manager::SetTag_Rational(void (**this)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = 0;
  this[6](a4, &v10);
  this[6](a5, (uint64_t *)((char *)&v10 + 4));
  return (*((uint64_t (**)(void (**)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*this
          + 4))(this, a2, a3, 5, 1, &v10);
}

uint64_t TIFF_Manager::SetTag_SRational(void (**this)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = 0;
  this[6](a4, &v10);
  this[6](a5, (uint64_t *)((char *)&v10 + 4));
  return (*((uint64_t (**)(void (**)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*this
          + 4))(this, a2, a3, 10, 1, &v10);
}

uint64_t TIFF_Manager::SetTag_ASCII(TIFF_Manager *this, uint64_t a2, uint64_t a3, const char *__s)
{
  uint64_t v8;

  v8 = strlen(__s) + 1;
  return (*(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t, uint64_t, const char *))(*(_QWORD *)this + 32))(this, a2, a3, 2, v8, __s);
}

uint64_t TIFF_Manager::DecodeString(uint64_t a1, unsigned __int8 *a2, unint64_t a3, std::string *this)
{
  unint64_t v8;
  int v9;
  _WORD *v10;
  unint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t *v15;
  void (*v16)(_WORD *, unint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *);
  std::string::size_type __n;
  uint64_t v18;
  std::string::value_type __s[1000];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  v8 = a3 - 8;
  if (a3 < 8)
    return 0;
  v10 = a2 + 8;
  v9 = *a2;
  if (v9 == 85)
  {
    if (v8 >= 2)
    {
      v12 = v8 >> 1;
      v13 = (unsigned __int16)*v10;
      if (v13 == 65279 || (v14 = *(_BYTE *)(a1 + 72) != 0, v13 == 65534))
      {
        v14 = *v10 == 254;
        if (!--v12)
          return 0;
        v10 = a2 + 10;
      }
      if (v14)
        v15 = &UTF16BE_to_UTF8;
      else
        v15 = &UTF16LE_to_UTF8;
      v16 = (void (*)(_WORD *, unint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *))*v15;
      std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
      std::string::reserve(this, 2 * v12);
      if (v12)
      {
        bzero(__s, 0x3E8uLL);
        __n = 0;
        v18 = 0;
        do
        {
          v16(v10, v12, __s, 1000, &v18, &__n);
          std::string::append(this, __s, __n);
          v10 += v18;
          v12 -= v18;
        }
        while (v12);
      }
      return 1;
    }
  }
  else if (v9 == 65)
  {
    MEMORY[0x18D761A20](this, a2 + 8, v8);
    return 1;
  }
  return 0;
}

BOOL IsOffsetValid(unsigned int a1, unsigned int a2, unsigned int a3)
{
  return a2 <= a1 && a1 < a3;
}

uint64_t TIFF_Manager::EncodeString(uint64_t a1, const std::string::value_type *a2, int a3, std::string *this)
{
  std::string::size_type v8;
  std::string::size_type size;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void (*v16)(const std::string::value_type *, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *);
  std::string *p_p;
  std::string::size_type v18;
  _QWORD *exception;
  const char *v21;
  std::string __p;
  uint64_t v23;
  uint64_t v24;
  std::string::value_type __s[2000];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (a3 == 1)
  {
    MEMORY[0x18D761A20](this, "ASCII", 8);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (size != 8)
      TIFF_Manager::EncodeString();
    v10 = a2[23];
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(const std::string::value_type **)a2;
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)a2 + 23);
    else
      v12 = *((_QWORD *)a2 + 1);
    std::string::append(this, v11, v12);
  }
  else
  {
    if (a3 != 2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      if (a3 == 3)
      {
        *(_DWORD *)exception = 8;
        v21 = "Encoding to JIS is not implemented";
      }
      else
      {
        *(_DWORD *)exception = 4;
        v21 = "Invalid TIFF string encoding";
      }
      exception[1] = v21;
      *((_BYTE *)exception + 16) = 0;
    }
    MEMORY[0x18D761A20](this, "UNICODE", 8);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v8 = this->__r_.__value_.__l.__size_;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v8 != 8)
      TIFF_Manager::EncodeString();
    memset(&__p, 0, sizeof(__p));
    v13 = *((_QWORD *)a2 + 1);
    if (a2[23] >= 0)
    {
      v14 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = *(const std::string::value_type **)a2;
      v14 = v13;
    }
    v15 = &UTF8_to_UTF16BE;
    if (!*(_BYTE *)(a1 + 72))
      v15 = &UTF8_to_UTF16LE;
    v16 = (void (*)(const std::string::value_type *, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v15;
    std::string::erase(&__p, 0, 0xFFFFFFFFFFFFFFFFLL);
    std::string::reserve(&__p, 2 * v14);
    if (v14)
    {
      bzero(__s, 0x7D0uLL);
      v23 = 0;
      v24 = 0;
      do
      {
        v16(a2, v14, __s, 1000, &v24, &v23);
        std::string::append(&__p, __s, 2 * v23);
        a2 += v24;
        v14 -= v24;
      }
      while (v14);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v18 = __p.__r_.__value_.__l.__size_;
    std::string::append(this, (const std::string::value_type *)p_p, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_18809A8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x18809A834);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_Manager::NotifyClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *exception;
  char v6;

  result = *(_QWORD *)(a1 + 80);
  if (result)
    return GenericErrorCallback::NotifyClient(result, a2, (unsigned int *)a3, 0);
  if ((_DWORD)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v6 = *(_BYTE *)(a3 + 16);
    *(_OWORD *)exception = *(_OWORD *)a3;
    exception[16] = v6;
  }
  return result;
}

uint64_t TIFF_Manager::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 80) = a2;
  return result;
}

void TIFF_Manager::TIFF_Manager()
{
  __assert_rtn("TIFF_Manager", "TIFF_Support.cpp", 69, "*idPtr < *(idPtr+1)");
}

void TIFF_Manager::EncodeString()
{
  __assert_rtn("EncodeString", "TIFF_Support.cpp", 432, "encodedStr->size() == 8");
}

{
  __assert_rtn("EncodeString", "TIFF_Support.cpp", 441, "encodedStr->size() == 8");
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unsigned __int8 a3)
{
  uint64_t v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, a2, 1, &v4);
}

{
  uint64_t v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, a2, 8, &v4);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unsigned __int8 a3)
{
  char *v3;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v3 + 264))(v3, a2, 1, &v5);
}

{
  char *v3;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 56);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v3 + 264))(v3, a2, 8, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, a2, 2, &v4);
}

{
  uint64_t v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, a2, 4, &v4);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 32);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v3 + 264))(v3, a2, 2, &v5);
}

{
  char *v3;
  uint64_t v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v3 + 264))(v3, a2, 4, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double a3)
{
  double v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, double *))(*(_QWORD *)this + 264))(this, a2, 16, &v4);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double a3)
{
  char *v3;
  double v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, double *))(*(_QWORD *)v3 + 264))(v3, a2, 16, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char *a3)
{
  const char *v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const char **))(*(_QWORD *)this + 264))(this, a2, 32, &v4);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char *a3)
{
  char *v3;
  const char *v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 64);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const char **))(*(_QWORD *)v3 + 264))(v3, a2, 32, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void *a3)
{
  const void *v4;

  v4 = a3;
  return (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const void **))(*(_QWORD *)this + 264))(this, a2, 64, &v4);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::SetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void *a3)
{
  char *v3;
  const void *v5;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 72);
  v5 = a3;
  return (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const void **))(*(_QWORD *)v3 + 264))(v3, a2, 64, &v5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::setParameter(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, _QWORD *a5)
{
  if ((_DWORD)a3 == 1)
    *a4 = *(_DWORD *)a4 != 0;
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(a5, a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x108, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 63, a2, a3, (uint64_t)a4);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v10;

  v9 = a3;
  *a1 = 0;
  v10 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  return v9(v10, a7, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::setParameter(_QWORD *a1, uint64_t a2, uint64_t a3, BOOL *a4, _QWORD *a5)
{
  return AdobeXMPCore_Int::IConfigurable_I::setParameter((uint64_t)a1 + *(_QWORD *)(*a1 - 168), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, BOOL *a3)
{
  uint64_t result;
  _BOOL8 v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, _BOOL8 *))(*(_QWORD *)this + 272))(this, a2, 1, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, BOOL *a3)
{
  char *v4;
  uint64_t result;
  _BOOL8 v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 88);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, _BOOL8 *))(*(_QWORD *)v4 + 272))(v4, a2, 1, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, unint64_t *))(*(_QWORD *)this + 272))(this, a2, 2, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, unint64_t *a3)
{
  char *v4;
  uint64_t result;
  unint64_t v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 96);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, unint64_t *))(*(_QWORD *)v4 + 272))(v4, a2, 2, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 272))(this, a2, 4, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, uint64_t *a3)
{
  char *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 104);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v4 + 272))(v4, a2, 4, &v6);
  *a3 = v6;
  return result;
}

double AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double *a3)
{
  double result;
  double v5;

  v5 = 0.0;
  (*(void (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, double *))(*(_QWORD *)this + 272))(this, a2, 16, &v5);
  result = v5;
  *a3 = v5;
  return result;
}

double `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, double *a3)
{
  char *v4;
  double result;
  double v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 112);
  v6 = 0.0;
  (*(void (**)(char *, const unint64_t *, uint64_t, double *))(*(_QWORD *)v4 + 272))(v4, a2, 16, &v6);
  result = v6;
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, char *a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)this + 272))(this, a2, 8, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, char *a3)
{
  char *v4;
  uint64_t result;
  uint64_t v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 120);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v4 + 272))(v4, a2, 8, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char **a3)
{
  uint64_t result;
  const char *v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const char **))(*(_QWORD *)this + 272))(this, a2, 32, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const char **a3)
{
  char *v4;
  uint64_t result;
  const char *v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 128);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const char **))(*(_QWORD *)v4 + 272))(v4, a2, 32, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void **a3)
{
  uint64_t result;
  const void *v5;

  v5 = 0;
  result = (*(uint64_t (**)(AdobeXMPCore_Int::IConfigurable_I *, const unint64_t *, uint64_t, const void **))(*(_QWORD *)this + 272))(this, a2, 64, &v5);
  *a3 = v5;
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::GetParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const void **a3)
{
  char *v4;
  uint64_t result;
  const void *v6;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 136);
  v6 = 0;
  result = (*(uint64_t (**)(char *, const unint64_t *, uint64_t, const void **))(*(_QWORD *)v4 + 272))(v4, a2, 64, &v6);
  *a3 = v6;
  return result;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::getParameter(uint64_t a1, uint64_t a2, unsigned int a3, BOOL *a4, _QWORD *a5)
{
  uint64_t result;

  result = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore_Int::IConfigurable_I,unsigned int,BOOL,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue &>(a5, a1, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD, uint64_t))0x110, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 117, a2, a3, (uint64_t)a4);
  if (a3 == 1)
    *a4 = *(_DWORD *)a4 != 0;
  return result;
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore_Int::IConfigurable_I,unsigned int,BOOL,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue &>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t, _QWORD, uint64_t);
  _QWORD *v11;

  v10 = a4;
  *a1 = 0;
  v11 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t))(*v11 + a4);
  return v10(v11, a8, a9, a10);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getParameter(_QWORD *a1, uint64_t a2, unsigned int a3, BOOL *a4, _QWORD *a5)
{
  return AdobeXMPCore_Int::IConfigurable_I::getParameter((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::removeParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,BOOL,unsigned long long const&>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 216), 0, (uint64_t (*)(_QWORD *, uint64_t))0x38, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 125, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,BOOL,unsigned long long const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  *a1 = 0;
  v8 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a4);
  return a4(v8, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::removeParameter(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IConfigurable_I::removeParameter((AdobeXMPCore_Int::IConfigurable_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2, a3);
}

void AdobeXMPCore_Int::IConfigurable_I::getAllParameters(AdobeXMPCore_Int::IConfigurable_I *this, unint64_t *a2)
{
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) + 128))((char *)this + *(_QWORD *)(*(_QWORD *)this - 216));
  __p = 0;
  v9 = 0;
  v10 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) + 120))(&__p);
  v5 = __p;
  if (v4)
  {
    v6 = (unint64_t *)__p;
    do
    {
      v7 = *v6++;
      *a2++ = v7;
      --v4;
    }
    while (v4);
  }
  else if (!__p)
  {
    return;
  }
  v9 = v5;
  operator delete(v5);
}

void `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getAllParameters(AdobeXMPCore_Int::IConfigurable_I *this, unint64_t *a2)
{
  AdobeXMPCore_Int::IConfigurable_I::getAllParameters((AdobeXMPCore_Int::IConfigurable_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192)), a2);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::getDataType(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,AdobeXMPCommon::IConfigurable::eDataType,unsigned long long const&>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 216), 0, (uint64_t (*)(_QWORD *, uint64_t))0x88, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurable_I.cpp", 138, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurable,unsigned int,AdobeXMPCommon::IConfigurable::eDataType,unsigned long long const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  *a1 = 0;
  v8 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a4);
  return a4(v8, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurable_I::getDataType(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IConfigurable_I::getDataType((AdobeXMPCore_Int::IConfigurable_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::ValidateKey(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::IConfigurable_I::ModifyKey(AdobeXMPCore_Int::IConfigurable_I *this, const unint64_t *a2)
{
  return *a2;
}

uint64_t OUTLINED_FUNCTION_0_3(char *a1)
{
  char **v1;

  *v1 = a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)] + 16))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)]);
}

uint64_t OUTLINED_FUNCTION_2()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 200))(v0);
}

uint64_t OUTLINED_FUNCTION_3(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void *OUTLINED_FUNCTION_4(void *a1)
{
  return __cxa_get_exception_ptr(a1);
}

void OUTLINED_FUNCTION_5(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldxr(a1);
  __stxr(v1 + 1, a1);
}

void *OUTLINED_FUNCTION_6()
{
  void *v0;

  return __cxa_begin_catch(v0);
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
}

void AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore_Int::IConfigurable_I,unsigned long long const&,AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue const&>(void *a1)
{
  uint64_t v1;
  unint64_t *v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_4(a1);
  OUTLINED_FUNCTION_8();
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      OUTLINED_FUNCTION_5(v2);
    while (v3);
  }
  OUTLINED_FUNCTION_6();
  v4 = (char *)OUTLINED_FUNCTION_2();
  v5 = OUTLINED_FUNCTION_0_3(v4);
  v6 = OUTLINED_FUNCTION_3(v5);
  OUTLINED_FUNCTION_7(v6, v7, v8, v9, v10, v11, v12, v13, v14);
  __cxa_end_catch();
  OUTLINED_FUNCTION_1_0();
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::assign(AdobeXMPCore_Int::IUTF8String_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x38, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 17, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_18809B904(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809B8E8);
}

void sub_18809BA00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::assign(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v9 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a2, (uint64_t *)&v16);
  v15 = v16;
  v10 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))0x40, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 22, (uint64_t)&v15, a3, a4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_18809BAE0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v9)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v17;
  std::__shared_weak_count *v18;

  v9 = a3;
  *a1 = 0;
  v17 = 0;
  v18 = 0;
  v10 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v9 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  v9(&v17, v10, a7, a8, a9);
  if (v17)
  {
    v11 = (*(uint64_t (**)(char *))(*(_QWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 56)] + 16))(&v17[*(_QWORD *)(*(_QWORD *)v17 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 64)]
                                                              + 16))(&v17[*(_QWORD *)(*(_QWORD *)v17 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v12 = 0;
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_18809BC10(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809BBF4);
}

void sub_18809BD0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::append(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,char const*,unsigned long long>(a4, (uint64_t)a1 + *(_QWORD *)(*a1 - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x28, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 27, a2, a3);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::append(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v9 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a2, (uint64_t *)&v16);
  v15 = v16;
  v10 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))0x30, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 32, (uint64_t)&v15, a3, a4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_18809BE34(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::insert(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,char const*,unsigned long long>(a5, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))0x48, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 37, a2, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v9)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v17;
  std::__shared_weak_count *v18;

  v9 = a3;
  *a1 = 0;
  v17 = 0;
  v18 = 0;
  v10 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v9 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t))(*v10 + a3);
  v9(&v17, v10, a7, a8, a9);
  if (v17)
  {
    v11 = (*(uint64_t (**)(char *))(*(_QWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 56)] + 16))(&v17[*(_QWORD *)(*(_QWORD *)v17 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v17[*(_QWORD *)(*(_QWORD *)v17 - 64)]
                                                              + 16))(&v17[*(_QWORD *)(*(_QWORD *)v17 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v12 = 0;
  }
  v13 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_18809BFBC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809BFA0);
}

void sub_18809C0B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::insert(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const AdobeXMPCommon::IUTF8String_v1 *a3, uint64_t a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;
  __int128 v18;

  v11 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a3, (uint64_t *)&v18);
  v17 = v18;
  v12 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a6, (uint64_t)this + v11, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x50, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 42, a2, (uint64_t)&v17, a4, a5);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v12;
}

void sub_18809C19C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v18;
  std::__shared_weak_count *v19;

  v10 = a3;
  *a1 = 0;
  v18 = 0;
  v19 = 0;
  v11 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v10 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  v10(&v18, v11, a7, a8, a9, a10);
  if (v18)
  {
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)] + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)]
                                                              + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v13 = 0;
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_18809C2CC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809C2B0);
}

void sub_18809C3C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::erase(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x58, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 47, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_18809C530(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809C514);
}

void sub_18809C62C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::resize(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (uint64_t (*)(_QWORD *, uint64_t))0x60, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 54, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCommon::IUTF8String_v1,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::replace(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const char *a4, unint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x68, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 59, a2, a3, (uint64_t)a4, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v18;
  std::__shared_weak_count *v19;

  v10 = a3;
  *a1 = 0;
  v18 = 0;
  v19 = 0;
  v11 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v10 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  v10(&v18, v11, a7, a8, a9, a10);
  if (v18)
  {
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)] + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)]
                                                              + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v13 = 0;
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_18809C8C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809C8A4);
}

void sub_18809C9BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::replace(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IUTF8String_v1 *a4, uint64_t a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;

  v13 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a4, (uint64_t *)&v20);
  v19 = v20;
  v14 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a7, (uint64_t)this + v13, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0x70, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 64, a2, a3, (uint64_t)&v19, a5, a6);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

void sub_18809CAB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (*v11)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v19;
  std::__shared_weak_count *v20;

  v11 = a3;
  *a1 = 0;
  v12 = (_QWORD *)(a2 + (a4 >> 1));
  v19 = 0;
  v20 = 0;
  if ((a4 & 1) != 0)
    v11 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a3);
  v11(&v19, v12, a7, a8, a9, a10, a11);
  if (v19)
  {
    v13 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 64)]
                                                              + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v14 = 0;
  }
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

void sub_18809CBE8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809CBCCLL);
}

void sub_18809CCE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::copy(AdobeXMPCore_Int::IUTF8String_I *this, char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(a5, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x78, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 71, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char *,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;

  v10 = a4;
  *a1 = 0;
  v11 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::find(AdobeXMPCore_Int::IUTF8String_I *this, const char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(a5, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x80, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 78, (uint64_t)a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;

  v10 = a4;
  *a1 = 0;
  v11 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::find(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v9 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a2, (uint64_t *)&v16);
  v15 = v16;
  v10 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x88, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 85, (uint64_t)&v15, a3, a4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_18809D03C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;

  v10 = a4;
  *a1 = 0;
  v11 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v11 + a4);
  return v10(v11, a8, a9, a10);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::rfind(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,char const*,unsigned long long,unsigned long long>(a5, (uint64_t)a1 + *(_QWORD *)(*a1 - 408), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x90, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 92, a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::rfind(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IUTF8String_v1 *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  v9 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a2, (uint64_t *)&v16);
  v15 = v16;
  v10 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a5, (uint64_t)this + v9, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))0x98, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 99, (uint64_t)&v15, a3, a4);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_18809D260(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::compare(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0xA0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 106, a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;

  v11 = a4;
  *a1 = 0;
  v12 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  return v11(v12, a8, a9, a10, a11);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::compare(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IUTF8String_v1 *a4, uint64_t a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v19;
  __int128 v20;

  v13 = *(_QWORD *)(*(_QWORD *)this - 408);
  AdobeXMPCommon::IUTF8String_v1::MakeShared((uint64_t *)a4, (uint64_t *)&v20);
  v19 = v20;
  v14 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(a7, (uint64_t)this + v13, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))0xA8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 113, a2, a3, (uint64_t)&v19, a5, a6);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v14;
}

void sub_18809D4AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,int,int,unsigned long long,unsigned long long,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t (*v12)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v13;

  v12 = a4;
  *a1 = 0;
  v13 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v12 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v13 + a4);
  return v12(v13, a8, a9, a10, a11, a12);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::substr(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0xB0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 118, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,AdobeXMPCommon::IUTF8String_v1,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_18809D70C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18809D6F0);
}

void sub_18809D808(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::empty(AdobeXMPCore_Int::IUTF8String_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408), 0, (uint64_t (*)(_QWORD *))0xB8, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IUTF8String_v1,unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

_QWORD *AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x6E55544638537472)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 408));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E55544638537472, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 0x96u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E55544638537472, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 0x9Cu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_18809DA38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IUTF8String_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IUTF8String_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IUTF8String_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x178, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IUTF8String_I.cpp", 134, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IUTF8String_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer(AdobeXMPCore_Int::IUTF8String_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IUTF8String_I::getInterfacePointer((AdobeXMPCore_Int::IUTF8String_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IUTF8String_I::GetActualIUTF8String(AdobeXMPCore_Int::IUTF8String_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 408);
}

void XMP_Node::SetValue(XMP_Node *this, char *__s)
{
  char **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  char **v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *exception;
  void *__p[2];
  uint64_t v26;
  unint64_t v27;
  unsigned int v28[9];

  v4 = (char **)((char *)this + 16);
  v5 = *((unsigned __int8 *)this + 39);
  if (*((char *)this + 39) < 0)
  {
    if (*((_QWORD *)this + 3) != 20)
      goto LABEL_27;
    v6 = *v4;
  }
  else
  {
    v6 = (char *)this + 16;
    if (v5 != 20)
      goto LABEL_27;
  }
  v7 = *(_QWORD *)v6;
  v8 = *((_QWORD *)v6 + 1);
  v9 = *((_DWORD *)v6 + 4);
  v11 = v7 == 0x747365543A706D78 && v8 == 0x6F4E747265737341 && v9 == 2036754804;
  if (v11 && !strcmp(__s, "DoIt!"))
  {
    if ((v5 & 0x80) != 0)
    {
      if (*((_QWORD *)this + 3) != 20)
        goto LABEL_27;
      v12 = (char **)*v4;
    }
    else
    {
      v12 = v4;
      if (v5 != 20)
        goto LABEL_27;
    }
    v13 = (uint64_t)*v12;
    v14 = v12[1];
    v15 = *((unsigned int *)v12 + 4);
    if (v13 == 0x747365543A706D78 && v14 == (char *)0x6F4E747265737341 && v15 == 2036754804)
      XMP_Node::SetValue();
  }
LABEL_27:
  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (v26 >= 0)
    v18 = (char *)__p;
  else
    v18 = (char *)__p[0];
  v19 = *v18;
  if (!*v18)
    goto LABEL_42;
  do
  {
    if ((char)v19 < 1)
      goto LABEL_40;
    do
    {
      if (v19 > 0x1F)
      {
        if (v19 != 127)
          goto LABEL_35;
LABEL_38:
        *v18 = 32;
        goto LABEL_35;
      }
      if (v19 > 0xD || ((1 << v19) & 0x2600) == 0)
        goto LABEL_38;
LABEL_35:
      v20 = *++v18;
      v19 = v20;
    }
    while (v20 > 0);
    if (!v19)
      break;
LABEL_40:
    v28[0] = 0;
    v27 = 0;
    CodePoint_from_UTF8(v18, 4uLL, v28, &v27);
    if (v28[0] >> 1 == 0x7FFF)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 205;
      exception[1] = "U+FFFE and U+FFFF are not allowed in XML";
      *((_BYTE *)exception + 16) = 0;
    }
    v18 += v27;
    v19 = *v18;
  }
  while (*v18);
LABEL_42:
  if ((*((_BYTE *)this + 8) & 0x20) == 0)
    goto LABEL_50;
  v21 = *((char *)this + 39);
  if (v21 < 0)
  {
    if (*((_QWORD *)this + 3) != 8)
      goto LABEL_50;
    v4 = (char **)*v4;
  }
  else if (v21 != 8)
  {
    goto LABEL_50;
  }
  if (*v4 == (char *)0x676E616C3A6C6D78)
    NormalizeLangValue((unsigned __int8 *)__p);
LABEL_50:
  v22 = *((_QWORD *)this + 7);
  v23 = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)__p;
  *((_QWORD *)this + 7) = v26;
  *(_OWORD *)__p = v23;
  v26 = v22;
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_18809DE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL XMPMeta::GetProperty(char **this, char *a2, char *a3, const char **a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t Node;
  const char *v11;
  uint64_t v12;
  _BOOL8 v13;
  const void **v15[3];
  const void ***v16;

  if (!a2 || !a3)
    XMPMeta::GetProperty();
  if (!a4 || !a5 || !a6)
    XMPMeta::GetProperty();
  memset(v15, 0, sizeof(v15));
  ExpandXPath(a2, a3, (uint64_t *)v15);
  Node = FindNode(this + 28, v15, 0, 0, 0);
  if (Node)
  {
    v11 = (const char *)(Node + 40);
    if (*(char *)(Node + 63) < 0)
      v11 = *(const char **)v11;
    *a4 = v11;
    if (*(char *)(Node + 63) < 0)
      v12 = *(_QWORD *)(Node + 48);
    else
      LODWORD(v12) = *(unsigned __int8 *)(Node + 63);
    *a5 = v12;
    *a6 = *(_DWORD *)(Node + 8);
  }
  v13 = Node != 0;
  v16 = v15;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  return v13;
}

void sub_18809DF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetArrayItem(XMPMeta *this, char *a2, char *a3, int a4, const char **a5, unsigned int *a6, unsigned int *a7)
{
  std::string *p_p;
  uint64_t v13;
  _QWORD *exception;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::GetArrayItem();
  if (!a5 || !a7)
    XMPMeta::GetArrayItem();
  if (a4 <= 0 && a4 != -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Array index must be larger than zero";
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a2, a3, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v13 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(_QWORD *)this + 16))(this, a2, p_p, a5, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v13;
}

void sub_18809E05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char **a6, unsigned int *a7, unsigned int *a8)
{
  std::string *p_p;
  uint64_t v14;
  std::string __p;

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::GetStructField();
  if (!a6 || !a8)
    XMPMeta::GetStructField();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v14 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(_QWORD *)this + 16))(this, a2, p_p, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_18809E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetQualifier(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char **a6, unsigned int *a7, unsigned int *a8)
{
  std::string *p_p;
  uint64_t v14;
  std::string __p;

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::GetQualifier();
  if (!a6 || !a8)
    XMPMeta::GetQualifier();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v14 = (*(uint64_t (**)(XMPMeta *, char *, std::string *, const char **, unsigned int *, unsigned int *))(*(_QWORD *)this + 16))(this, a2, p_p, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_18809E23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty(char **this, char *a2, char *a3, char *a4, unsigned int a5)
{
  unsigned int v9;
  XMP_Node *Node;
  _QWORD *exception;
  const void **v12[3];
  const void ***v13;

  if (!a2 || !a3)
    XMPMeta::SetProperty();
  v9 = VerifySetOptions(a5, a4);
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, (uint64_t *)v12);
  Node = (XMP_Node *)FindNode(this + 28, v12, 1, v9, 0);
  if (!Node)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  SetNode(Node, a4, v9);
  v13 = v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_18809E338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SetNode(XMP_Node *this, char *__s, unsigned int a3)
{
  unsigned int v3;
  int v6;
  int v7;
  BOOL v8;
  _QWORD *exception;
  const char *v10;

  v3 = a3;
  if ((a3 & 0x20000000) != 0)
  {
    v3 = a3 & 0xDFFFFFFF;
    *((_DWORD *)this + 2) = a3 & 0xDFFFFFFF;
    std::string::erase((std::string *)((char *)this + 40), 0, 0xFFFFFFFFFFFFFFFFLL);
    XMP_Node::RemoveChildren(this);
    XMP_Node::RemoveQualifiers(this);
  }
  v6 = *((_DWORD *)this + 2) | v3;
  *((_DWORD *)this + 2) = v6;
  if (!__s)
  {
    if (*((char *)this + 63) < 0)
    {
      if (*((_QWORD *)this + 6))
        goto LABEL_16;
    }
    else if (*((_BYTE *)this + 63))
    {
      goto LABEL_16;
    }
    v7 = v6 & 0x1F00;
    if (v7)
      v8 = (v3 & 0x1F00) == v7;
    else
      v8 = 1;
    if (v8)
    {
      XMP_Node::RemoveChildren(this);
      return;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v10 = "Requested and existing composite form mismatch";
LABEL_18:
    exception[1] = v10;
    *((_BYTE *)exception + 16) = 0;
  }
  if ((v6 & 0x1F00) != 0)
  {
LABEL_16:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v10 = "Composite nodes can't have values";
    goto LABEL_18;
  }
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 10))
    SetNode();
  XMP_Node::SetValue(this, __s);
}

void XMPMeta::SetArrayItem(char **this, char *a2, char *a3, int a4, char *a5, int a6)
{
  XMP_Node *Node;
  _QWORD *exception;
  const void **v12[3];
  const void ***v13;

  if (!a2 || !a3)
    XMPMeta::SetArrayItem();
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, (uint64_t *)v12);
  Node = (XMP_Node *)FindNode(this + 28, v12, 0, 0, 0);
  if (!Node)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified array does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  DoSetArrayItem(Node, a4, a5, a6);
  v13 = v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_18809E53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void DoSetArrayItem(XMP_Node *a1, int a2, char *a3, int a4)
{
  int v7;
  char **v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  int v17;
  XMP_Node *v18;
  unint64_t v19;
  XMP_Node **v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t v24;
  XMP_Node *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  XMP_Node **v31;
  char *v32;
  char *v33;
  char *v34;
  XMP_Node *v35;
  _QWORD *exception;
  const char *v37;
  XMP_Node *v38;

  v7 = a4 & 0xC000;
  v8 = (char **)((char *)a1 + 72);
  v9 = (*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3;
  v10 = VerifySetOptions(a4 & 0xFFFF3FFF, a3);
  if (a2 == -1)
    v11 = v9;
  else
    v11 = a2;
  v12 = v11 == 0;
  v13 = v7 == 0x8000;
  v14 = !v13 || !v12;
  if (v13 && v12)
    v15 = 0x4000;
  else
    v15 = v7;
  if (!v14)
    v11 = 1;
  if (v11 == (_DWORD)v9 && v15 == 0x8000)
    v16 = 0;
  else
    v16 = v15;
  v17 = v11 + (v11 == (_DWORD)v9 && v15 == 0x8000);
  if (v17 != (_DWORD)v9 + 1)
  {
    v22 = v17 - 1;
    if (v17 >= 1 && v17 <= (int)v9)
    {
      if (v16)
      {
        v24 = *((_QWORD *)a1 + 9);
        v25 = (XMP_Node *)operator new();
        XMP_Node::XMP_Node(v25, a1, "[]", 0);
        v38 = v25;
        std::vector<XMP_Node *>::insert((uint64_t)v8, (char *)(v24 + 8 * v22 + 8 * (v16 == 0x8000)), (char *)&v38);
      }
      else
      {
        v38 = *(XMP_Node **)&(*v8)[8 * v22];
      }
      goto LABEL_39;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 104;
    v37 = "Array index out of bounds";
LABEL_41:
    exception[1] = v37;
    *((_BYTE *)exception + 16) = 0;
  }
  if (v16 >= 0x8000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 104;
    v37 = "Can't insert before or after implicit new item";
    goto LABEL_41;
  }
  v18 = (XMP_Node *)operator new();
  XMP_Node::XMP_Node(v18, a1, "[]", 0);
  v38 = v18;
  v19 = *((_QWORD *)a1 + 11);
  v20 = (XMP_Node **)*((_QWORD *)a1 + 10);
  if ((unint64_t)v20 >= v19)
  {
    v26 = ((char *)v20 - *v8) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v27 = v19 - (_QWORD)*v8;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a1 + 88, v29);
    else
      v30 = 0;
    v31 = (XMP_Node **)&v30[8 * v26];
    v32 = &v30[8 * v29];
    *v31 = v18;
    v21 = v31 + 1;
    v34 = (char *)*((_QWORD *)a1 + 9);
    v33 = (char *)*((_QWORD *)a1 + 10);
    if (v33 != v34)
    {
      do
      {
        v35 = (XMP_Node *)*((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = *v8;
    }
    *((_QWORD *)a1 + 9) = v31;
    *((_QWORD *)a1 + 10) = v21;
    *((_QWORD *)a1 + 11) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v20 = v18;
    v21 = v20 + 1;
  }
  *((_QWORD *)a1 + 10) = v21;
LABEL_39:
  SetNode(v38, a3, v10);
}

void sub_18809E7D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPMeta::AppendArrayItem(XMPMeta *this, char *a2, char *a3, unsigned int a4, char *a5, int a6)
{
  int v11;
  int v12;
  char **v13;
  XMP_Node *Node;
  _QWORD *v15;
  const char *v16;
  _QWORD *exception;
  const void **v18[3];
  const void ***v19;

  if (!a2 || !a3)
    XMPMeta::AppendArrayItem();
  v11 = VerifySetOptions(a4, 0);
  if ((v11 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Only array form flags allowed for arrayOptions";
    *((_BYTE *)exception + 16) = 0;
  }
  v12 = v11;
  memset(v18, 0, sizeof(v18));
  ExpandXPath(a2, a3, (uint64_t *)v18);
  v13 = (char **)((char *)this + 224);
  Node = (XMP_Node *)FindNode(v13, v18, 0, 0, 0);
  if (!Node)
  {
    if (v12)
    {
      Node = (XMP_Node *)FindNode(v13, v18, 1, v12, 0);
      if (Node)
        goto LABEL_9;
      v15 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v15 = 102;
      v16 = "Failure creating array node";
    }
    else
    {
      v15 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v15 = 103;
      v16 = "Explicit arrayOptions required to create new array";
    }
LABEL_14:
    v15[1] = v16;
    *((_BYTE *)v15 + 16) = 0;
  }
  if ((*((_BYTE *)Node + 9) & 2) == 0)
  {
    v15 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v15 = 102;
    v16 = "The named property is not an array";
    goto LABEL_14;
  }
LABEL_9:
  DoSetArrayItem(Node, -1, a5, a6 | 0x8000);
  v19 = v18;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_18809E980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta::SetStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  std::string *p_p;
  std::string __p;

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::SetStructField();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, char *, std::string *, const char *, uint64_t))(*(_QWORD *)this + 48))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18809EA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetQualifier(char **this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  std::string *p_p;
  _QWORD *exception;
  std::string __p;
  const void **v17[3];

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::SetQualifier();
  memset(v17, 0, sizeof(v17));
  ExpandXPath(a2, a3, (uint64_t *)v17);
  if (!FindNode(this + 28, v17, 0, 0, 0))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*((void (**)(char **, char *, std::string *, const char *, uint64_t))*this + 6))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_18809EBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteProperty(char **this, char *a2, char *a3)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  int64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  _BYTE *v16;
  int64_t v17;
  int v18;
  const char *v19;
  int v20;
  const void **v21[3];
  void *__dst;

  if (!a2 || !a3)
    XMPMeta::DeleteProperty();
  memset(v21, 0, sizeof(v21));
  ExpandXPath(a2, a3, (uint64_t *)v21);
  __dst = 0;
  Node = FindNode(this + 28, v21, 0, 0, (char **)&__dst);
  v5 = Node;
  if (Node)
  {
    v6 = *(_QWORD *)(Node + 64);
    if ((*(_BYTE *)(Node + 8) & 0x20) == 0)
    {
      v7 = (char *)__dst;
      v8 = *(_BYTE **)(v6 + 80);
      v9 = v8 - ((_BYTE *)__dst + 8);
      if (v8 != (char *)__dst + 8)
        memmove(__dst, (char *)__dst + 8, v8 - ((_BYTE *)__dst + 8));
      *(_QWORD *)(v6 + 80) = &v7[v9];
      DeleteEmptySchema((_QWORD *)v6);
LABEL_25:
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      goto LABEL_26;
    }
    v10 = (_QWORD *)(Node + 16);
    v11 = *(char *)(Node + 39);
    if (v11 < 0)
    {
      if (*(_QWORD *)(Node + 24) != 8)
        goto LABEL_20;
      v10 = (_QWORD *)*v10;
    }
    else if (v11 != 8)
    {
      goto LABEL_20;
    }
    if (*v10 == 0x676E616C3A6C6D78)
    {
      v14 = *(_DWORD *)(v6 + 8);
      if ((v14 & 0x40) == 0)
      {
        v19 = "parentNode->options & kXMP_PropHasLang";
        v20 = 685;
        goto LABEL_29;
      }
      v13 = v14 ^ 0x40;
LABEL_19:
      *(_DWORD *)(v6 + 8) = v13;
      goto LABEL_20;
    }
    if (*v10 == 0x657079743A666472)
    {
      v12 = *(_DWORD *)(v6 + 8);
      if ((v12 & 0x80) == 0)
      {
        v19 = "parentNode->options & kXMP_PropHasType";
        v20 = 688;
        goto LABEL_29;
      }
      v13 = v12 ^ 0x80;
      goto LABEL_19;
    }
LABEL_20:
    v15 = (char *)__dst;
    v16 = *(_BYTE **)(v6 + 104);
    v17 = v16 - ((_BYTE *)__dst + 8);
    if (v16 != (char *)__dst + 8)
      memmove(__dst, (char *)__dst + 8, v16 - ((_BYTE *)__dst + 8));
    *(_QWORD *)(v6 + 104) = &v15[v17];
    v18 = *(_DWORD *)(v6 + 8);
    if ((v18 & 0x10) != 0)
    {
      if (*(char **)(v6 + 96) == &v15[v17])
        *(_DWORD *)(v6 + 8) = v18 ^ 0x10;
      goto LABEL_25;
    }
    v19 = "parentNode->options & kXMP_PropHasQualifiers";
    v20 = 693;
LABEL_29:
    __assert_rtn("DeleteProperty", "XMPMeta-GetSet.cpp", v20, v19);
  }
LABEL_26:
  __dst = v21;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
}

void sub_18809EDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteArrayItem(XMPMeta *this, char *a2, char *a3, int a4)
{
  std::string *p_p;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::DeleteArrayItem();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a2, a3, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, char *, std::string *))(*(_QWORD *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18809EE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::DeleteStructField(XMPMeta *this, char *a2, char *a3, char *a4, char *a5)
{
  std::string *p_p;
  std::string __p;

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::DeleteStructField();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, char *, std::string *))(*(_QWORD *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18809EF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::DeleteQualifier(XMPMeta *this, char *a2, char *a3, char *a4, char *a5)
{
  std::string *p_p;
  std::string __p;

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta::DeleteQualifier();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, char *, std::string *))(*(_QWORD *)this + 80))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18809EFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL XMPMeta::DoesPropertyExist(char **this, char *a2, char *a3)
{
  _BOOL8 v4;
  const void **v6[3];
  const void ***v7;

  if (!a2 || !a3)
    XMPMeta::DoesPropertyExist();
  memset(v6, 0, sizeof(v6));
  ExpandXPath(a2, a3, (uint64_t *)v6);
  v4 = FindNode(this + 28, v6, 0, 0, 0) != 0;
  v7 = v6;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  return v4;
}

void sub_18809F098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL XMPMeta::GetLocalizedText(char **this, char *a2, char *a3, char *__s, char *a5, const char **a6, unsigned int *a7, const char **a8, unsigned int *a9, unsigned int *a10)
{
  void **v17;
  void **v18;
  const XMP_Node *Node;
  int v20;
  _BOOL8 v21;
  XMP_Node *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const void **v29[3];
  void *__p[2];
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  XMP_Node *v34;

  if (!a5 || !a2 || !a3 || !__s)
    XMPMeta::GetLocalizedText();
  if (!a6 || !a7)
    XMPMeta::GetLocalizedText();
  if (!a8 || !a9 || !a10)
    XMPMeta::GetLocalizedText();
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  std::string::basic_string[abi:ne180100]<0>(v32, __s);
  __p[0] = 0;
  __p[1] = 0;
  v31 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v32);
  v17 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v33 >= 0)
    v18 = v32;
  else
    v18 = (void **)v32[0];
  if (v31 < 0)
    v17 = (void **)__p[0];
  memset(v29, 0, sizeof(v29));
  ExpandXPath(a2, a3, (uint64_t *)v29);
  Node = (const XMP_Node *)FindNode(this + 28, v29, 0, 0, 0);
  if (Node)
  {
    v34 = 0;
    v20 = ChooseLocalizedText(Node, (const char *)v18, (const char *)v17, &v34);
    v21 = v20 != 0;
    if (v20)
    {
      v22 = v34;
      v23 = **((_QWORD **)v34 + 12);
      v24 = (const char *)(v23 + 40);
      if (*(char *)(v23 + 63) < 0)
        v24 = *(const char **)v24;
      *a6 = v24;
      v25 = **((_QWORD **)v22 + 12);
      if (*(char *)(v25 + 63) < 0)
        v25 = *(_QWORD *)(v25 + 48);
      else
        LODWORD(v25) = *(unsigned __int8 *)(v25 + 63);
      *a7 = v25;
      v26 = (char *)v22 + 40;
      if (*((char *)v22 + 63) < 0)
        v26 = *(const char **)v26;
      *a8 = v26;
      if (*((char *)v22 + 63) < 0)
        v27 = *((_QWORD *)v22 + 6);
      else
        LODWORD(v27) = *((unsigned __int8 *)v22 + 63);
      *a9 = v27;
      *a10 = *((_DWORD *)v22 + 2);
    }
  }
  else
  {
    v21 = 0;
  }
  v34 = (XMP_Node *)v29;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  return v21;
}

void sub_18809F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ChooseLocalizedText(const XMP_Node *a1, const char *a2, const char *__s, const XMP_Node **a4)
{
  char *v8;
  const XMP_Node **v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const XMP_Node *v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  size_t v20;
  uint64_t v21;
  const XMP_Node *v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  const XMP_Node *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  int v37;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  _QWORD *exception;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  const XMP_Node **v49;

  v9 = (const XMP_Node **)*((_QWORD *)a1 + 9);
  v8 = (char *)*((_QWORD *)a1 + 10);
  if ((*((_DWORD *)a1 + 2) & 0x1000) == 0 && (v9 != (const XMP_Node **)v8 || (*((_DWORD *)a1 + 2) & 0x800) == 0))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v46 = "Localized text array is not alt-text";
LABEL_70:
    exception[1] = v46;
    *((_BYTE *)exception + 16) = 0;
  }
  if (v9 == (const XMP_Node **)v8)
  {
    v22 = 0;
    result = 0;
    goto LABEL_54;
  }
  v11 = 0;
  v12 = v8 - (char *)v9;
  v13 = (v12 >> 3) - 1;
  if ((unint64_t)(v12 >> 3) <= 1)
    v14 = 1;
  else
    v14 = v12 >> 3;
  do
  {
    v15 = v9[v11];
    if ((*((_BYTE *)v15 + 9) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      v46 = "Alt-text array item is not simple";
      goto LABEL_70;
    }
    v16 = (uint64_t *)*((_QWORD *)v15 + 12);
    if (v16 == *((uint64_t **)v15 + 13))
      goto LABEL_68;
    v17 = *v16;
    v18 = (_QWORD *)(v17 + 16);
    v19 = *(char *)(v17 + 39);
    if (v19 < 0)
    {
      if (*(_QWORD *)(v17 + 24) != 8)
        goto LABEL_68;
      v18 = (_QWORD *)*v18;
    }
    else if (v19 != 8)
    {
      goto LABEL_68;
    }
    if (*v18 != 0x676E616C3A6C6D78)
    {
LABEL_68:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      v46 = "Alt-text array item has no language qualifier";
      goto LABEL_70;
    }
    ++v11;
  }
  while (v14 != v11);
  v48 = v12 >> 3;
  v20 = strlen(__s);
  v21 = 0;
  do
  {
    v22 = v9[v21];
    v23 = **((_QWORD **)v22 + 12);
    v24 = (_QWORD *)(v23 + 40);
    if (*(char *)(v23 + 63) < 0)
    {
      if (v20 != *(_QWORD *)(v23 + 48))
        goto LABEL_28;
      if (v20 == -1)
LABEL_71:
        std::string::__throw_out_of_range[abi:ne180100]();
      v24 = (_QWORD *)*v24;
    }
    else
    {
      if (v20 != *(unsigned __int8 *)(v23 + 63))
        goto LABEL_28;
      if (v20 == -1)
        goto LABEL_71;
    }
    if (!memcmp(v24, __s, v20))
    {
      result = 1;
      goto LABEL_54;
    }
LABEL_28:
    ++v21;
  }
  while (v14 != v21);
  v47 = v13;
  v49 = a4;
  if (!*a2)
  {
LABEL_39:
    v32 = 0;
    a4 = v49;
    while (1)
    {
      v22 = v9[v32];
      v33 = **((_QWORD **)v22 + 12);
      v34 = (uint64_t *)(v33 + 40);
      v35 = *(char *)(v33 + 63);
      if (v35 < 0)
      {
        if (*(_QWORD *)(v33 + 48) != 9)
          goto LABEL_49;
        v34 = (uint64_t *)*v34;
      }
      else if (v35 != 9)
      {
        goto LABEL_49;
      }
      v36 = (uint64_t *)*v34;
      v37 = *((unsigned __int8 *)v34 + 8);
      if (v36 == (uint64_t *)0x6C75616665642D78 && v37 == 116)
      {
        result = 4;
LABEL_54:
        *a4 = v22;
        return result;
      }
LABEL_49:
      if (v14 == ++v32)
      {
        v22 = *v9;
        result = 5;
        goto LABEL_54;
      }
    }
  }
  v25 = strlen(a2);
  v26 = 0;
  v27 = -8;
  while (1)
  {
    v28 = v9[v26];
    v29 = **((_QWORD **)v28 + 12);
    if (*(char *)(v29 + 63) < 0)
    {
      v30 = *(const char **)(v29 + 40);
      v31 = *(_QWORD *)(v29 + 48);
    }
    else
    {
      v30 = (const char *)(v29 + 40);
      v31 = *(unsigned __int8 *)(v29 + 63);
    }
    if (v31 >= v25 && !strncmp(v30, a2, v25) && (v31 == v25 || v30[v25] == 45))
      break;
    ++v26;
    v27 -= 8;
    if (v14 == v26)
      goto LABEL_39;
  }
  *v49 = v28;
  if (v26 + 1 >= v48)
    return 2;
  v40 = v47 - v26;
  v41 = *((_QWORD *)a1 + 9) - v27;
  do
  {
    v42 = **(_QWORD **)(*(_QWORD *)v41 + 96);
    if (*(char *)(v42 + 63) < 0)
    {
      v43 = *(const char **)(v42 + 40);
      v44 = *(_QWORD *)(v42 + 48);
    }
    else
    {
      v43 = (const char *)(v42 + 40);
      v44 = *(unsigned __int8 *)(v42 + 63);
    }
    if (v44 >= v25 && !strncmp(v43, a2, v25) && (v44 == v25 || v43[v25] == 45))
      return 3;
    v41 += 8;
    result = 2;
    --v40;
  }
  while (v40);
  return result;
}

void XMPMeta::SetLocalizedText(char **this, char *a2, char *a3, char *__s, char *a5, char *a6)
{
  void **v11;
  void **v12;
  uint64_t Node;
  uint64_t v14;
  int v15;
  const char *v16;
  _QWORD *v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t v41;
  int v42;
  XMP_Node *v43;
  int v44;
  int v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const void **v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const void **v66;
  unsigned __int8 *v67;
  _QWORD *v68;
  _QWORD *exception;
  _QWORD *v70;
  const void **v71[3];
  void *__p[2];
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  XMP_Node *v76;

  if (!a2 || !a3 || !__s || !a5)
    XMPMeta::SetLocalizedText();
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  std::string::basic_string[abi:ne180100]<0>(v74, __s);
  __p[0] = 0;
  __p[1] = 0;
  v73 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v74);
  v11 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v75 >= 0)
    v12 = v74;
  else
    v12 = (void **)v74[0];
  if (v73 < 0)
    v11 = (void **)__p[0];
  memset(v71, 0, sizeof(v71));
  ExpandXPath(a2, a3, (uint64_t *)v71);
  Node = FindNode(this + 28, v71, 1, 3584, 0);
  v14 = Node;
  if (!Node)
  {
    v16 = "Failed to find or create array node";
    goto LABEL_140;
  }
  v15 = *(_DWORD *)(Node + 8);
  if ((v15 & 0x1000) == 0)
  {
    v16 = "Localized text array is not alt-text";
    if ((v15 & 0x800) != 0)
    {
      v17 = (_QWORD *)(Node + 72);
      if (*(_QWORD *)(Node + 72) == *(_QWORD *)(Node + 80))
      {
        v18 = 0;
        v19 = 0;
        *(_DWORD *)(Node + 8) = v15 | 0x1000;
        goto LABEL_54;
      }
    }
LABEL_140:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = v16;
    *((_BYTE *)exception + 16) = 0;
  }
  v20 = *(uint64_t **)(Node + 72);
  v17 = (_QWORD *)(Node + 72);
  v21 = *(_QWORD *)(Node + 80) - (_QWORD)v20;
  if (!v21)
  {
    v18 = 0;
    v19 = 0;
    goto LABEL_54;
  }
  v22 = 0;
  v23 = v21 >> 3;
  if ((unint64_t)(v21 >> 3) <= 1)
    v24 = 1;
  else
    v24 = v21 >> 3;
  v19 = 1;
  while (1)
  {
    v18 = v20[v22];
    if ((*(_BYTE *)(v18 + 8) & 0x40) == 0)
      __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 931, "(((currItem->options) & kXMP_PropHasLang) != 0)");
    v25 = *(uint64_t **)(v18 + 96);
    if (v25 == *(uint64_t **)(v18 + 104))
      goto LABEL_138;
    v26 = *v25;
    v27 = (_QWORD *)(v26 + 16);
    v28 = *(char *)(v26 + 39);
    if (v28 < 0)
    {
      if (*(_QWORD *)(v26 + 24) != 8)
        goto LABEL_138;
      v27 = (_QWORD *)*v27;
    }
    else if (v28 != 8)
    {
      goto LABEL_138;
    }
    if (*v27 != 0x676E616C3A6C6D78)
    {
LABEL_138:
      v68 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v68 = 102;
      v68[1] = "Language qualifier must be first";
      *((_BYTE *)v68 + 16) = 0;
    }
    v29 = (uint64_t *)(v26 + 40);
    v30 = *(char *)(v26 + 63);
    if (v30 < 0)
      break;
    if (v30 == 9)
      goto LABEL_33;
LABEL_37:
    v19 = ++v22 < v23;
    if (v24 == v22)
    {
      v18 = 0;
      if (v22 < v23)
        goto LABEL_42;
      goto LABEL_54;
    }
  }
  if (*(_QWORD *)(v26 + 48) != 9)
    goto LABEL_37;
  v29 = (uint64_t *)*v29;
LABEL_33:
  v31 = (uint64_t *)*v29;
  v32 = *((unsigned __int8 *)v29 + 8);
  if (v31 != (uint64_t *)0x6C75616665642D78 || v32 != 116)
    goto LABEL_37;
  v24 = v22;
  if (v19)
  {
LABEL_42:
    if (v24)
    {
      v34 = v20[v24];
      v35 = **(_QWORD **)(v34 + 96);
      v36 = (uint64_t *)(v35 + 40);
      v37 = *(char *)(v35 + 63);
      if (v37 < 0)
      {
        if (*(_QWORD *)(v35 + 48) != 9)
          goto LABEL_136;
        v36 = (uint64_t *)*v36;
      }
      else if (v37 != 9)
      {
        goto LABEL_136;
      }
      v38 = (uint64_t *)*v36;
      v39 = *((unsigned __int8 *)v36 + 8);
      if (v38 != (uint64_t *)0x6C75616665642D78 || v39 != 116)
LABEL_136:
        __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 943, "arrayNode->children[itemNum]->qualifiers[0]->value == \"x-default\"");
      v41 = *v20;
      *v20 = v34;
      *(_QWORD *)(*v17 + 8 * v24) = v41;
    }
  }
LABEL_54:
  v76 = 0;
  v42 = ChooseLocalizedText((const XMP_Node *)Node, (const char *)v12, (const char *)v11, &v76);
  v43 = v76;
  v44 = strcmp((const char *)v11, "x-default");
  v45 = v44;
  switch(v42)
  {
    case 0:
      AppendLangItem((char **)v14, "x-default", a6);
      if (v45)
        AppendLangItem((char **)v14, (char *)v11, a6);
      goto LABEL_129;
    case 1:
      if (!v44)
      {
        if (!v18 || !v19 || (XMP_Node *)v18 != v43)
          __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 977, "xdItem != __null && haveXDefault && (xdItem == itemNode)");
        v57 = *(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72);
        if (!v57)
        {
LABEL_122:
          v43 = (XMP_Node *)v18;
          goto LABEL_125;
        }
        v58 = 0;
        v59 = v57 >> 3;
        if (v59 <= 1)
          v60 = 1;
        else
          v60 = v59;
        while (1)
        {
          v61 = *(_QWORD *)(*v17 + 8 * v58);
          if (v61 == v18)
            goto LABEL_121;
          v62 = *(unsigned __int8 *)(v61 + 63);
          if ((v62 & 0x80u) == 0)
            v63 = *(unsigned __int8 *)(v61 + 63);
          else
            v63 = *(_QWORD *)(v61 + 48);
          v64 = *(unsigned __int8 *)(v18 + 63);
          v65 = (char)v64;
          if ((v64 & 0x80u) != 0)
            v64 = *(_QWORD *)(v18 + 48);
          if (v63 != v64)
            goto LABEL_121;
          v66 = (const void **)(v61 + 40);
          v67 = v65 >= 0 ? (unsigned __int8 *)(v18 + 40) : *(unsigned __int8 **)(v18 + 40);
          if ((v62 & 0x80) == 0)
            break;
          if (!memcmp(*v66, v67, *(_QWORD *)(v61 + 48)))
            goto LABEL_120;
LABEL_121:
          if (++v58 == v60)
            goto LABEL_122;
        }
        if (*(_BYTE *)(v61 + 63))
        {
          while (*(unsigned __int8 *)v66 == *v67)
          {
            v66 = (const void **)((char *)v66 + 1);
            ++v67;
            if (!--v62)
              goto LABEL_120;
          }
          goto LABEL_121;
        }
LABEL_120:
        XMP_Node::SetValue((XMP_Node *)v61, a6);
        goto LABEL_121;
      }
      if (!v18 || !v19 || (XMP_Node *)v18 == v43)
        goto LABEL_125;
      v53 = *(unsigned __int8 *)(v18 + 63);
      v47 = *(_QWORD *)(v18 + 48);
      if ((v53 & 0x80u) == 0)
        v54 = *(unsigned __int8 *)(v18 + 63);
      else
        v54 = *(_QWORD *)(v18 + 48);
      v55 = *((unsigned __int8 *)v43 + 63);
      v56 = (char)v55;
      if ((v55 & 0x80u) != 0)
        v55 = *((_QWORD *)v43 + 6);
      if (v54 != v55)
        goto LABEL_125;
      v51 = (const void **)(v18 + 40);
      if (v56 >= 0)
        v52 = (unsigned __int8 *)v43 + 40;
      else
        v52 = (unsigned __int8 *)*((_QWORD *)v43 + 5);
      if ((v53 & 0x80) == 0)
      {
        if (!*(_BYTE *)(v18 + 63))
          goto LABEL_124;
        do
        {
          if (*(unsigned __int8 *)v51 != *v52)
            goto LABEL_125;
          v51 = (const void **)((char *)v51 + 1);
          ++v52;
          --v53;
        }
        while (v53);
        goto LABEL_124;
      }
LABEL_123:
      if (!memcmp(*v51, v52, v47))
LABEL_124:
        XMP_Node::SetValue((XMP_Node *)v18, a6);
LABEL_125:
      XMP_Node::SetValue(v43, a6);
LABEL_126:
      if (!v19)
      {
LABEL_127:
        if (*(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72) == 8)
          AppendLangItem((char **)v14, "x-default", a6);
      }
LABEL_129:
      v76 = (XMP_Node *)v71;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      if (SHIBYTE(v73) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v75) < 0)
        operator delete(v74[0]);
      return;
    case 2:
      if (!v18 || !v19 || (XMP_Node *)v18 == v43)
        goto LABEL_125;
      v46 = *(unsigned __int8 *)(v18 + 63);
      v47 = *(_QWORD *)(v18 + 48);
      if ((v46 & 0x80u) == 0)
        v48 = *(unsigned __int8 *)(v18 + 63);
      else
        v48 = *(_QWORD *)(v18 + 48);
      v49 = *((unsigned __int8 *)v43 + 63);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *((_QWORD *)v43 + 6);
      if (v48 != v49)
        goto LABEL_125;
      v51 = (const void **)(v18 + 40);
      if (v50 >= 0)
        v52 = (unsigned __int8 *)v43 + 40;
      else
        v52 = (unsigned __int8 *)*((_QWORD *)v43 + 5);
      if ((v46 & 0x80) != 0)
        goto LABEL_123;
      if (!*(_BYTE *)(v18 + 63))
        goto LABEL_124;
      while (*(unsigned __int8 *)v51 == *v52)
      {
        v51 = (const void **)((char *)v51 + 1);
        ++v52;
        if (!--v46)
          goto LABEL_124;
      }
      goto LABEL_125;
    case 3:
    case 5:
      AppendLangItem((char **)v14, (char *)v11, a6);
      if (v19 || v45 == 0)
        goto LABEL_129;
      goto LABEL_127;
    case 4:
      if (*(_QWORD *)(v14 + 80) - *(_QWORD *)(v14 + 72) == 8)
        XMP_Node::SetValue((XMP_Node *)v18, a6);
      AppendLangItem((char **)v14, (char *)v11, a6);
      goto LABEL_126;
    default:
      v70 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v70 = 9;
      v70[1] = "Unexpected result from ChooseLocalizedText";
      *((_BYTE *)v70 + 16) = 0;
  }
}

void sub_18809FD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void AppendLangItem(char **a1, char *a2, char *a3)
{
  XMP_Node *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  XMP_Node **v36;
  char *v37;
  char *v38;
  char *v39;
  XMP_Node *v40;
  XMP_Node *v41;

  v6 = (XMP_Node *)operator new();
  XMP_Node::XMP_Node(v6, (XMP_Node *)a1, "[]", 80);
  v41 = v6;
  v7 = operator new();
  XMP_Node::XMP_Node((XMP_Node *)v7, v6, "xml:lang", 32);
  XMP_Node::SetValue(v6, a3);
  XMP_Node::SetValue((XMP_Node *)v7, a2);
  v8 = *((_QWORD *)v6 + 14);
  v9 = (uint64_t *)*((_QWORD *)v6 + 13);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)v6 + 12);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)v6 + 112, v15);
    else
      v16 = 0;
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v7;
    v10 = v17 + 1;
    v20 = (char *)*((_QWORD *)v6 + 12);
    v19 = (char *)*((_QWORD *)v6 + 13);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)v6 + 12);
    }
    *((_QWORD *)v6 + 12) = v17;
    *((_QWORD *)v6 + 13) = v10;
    *((_QWORD *)v6 + 14) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = v7;
    v10 = v9 + 1;
  }
  *((_QWORD *)v6 + 13) = v10;
  v22 = a1[9];
  v23 = a1[10];
  if (v22 == v23)
    goto LABEL_27;
  v24 = v7 + 40;
  v25 = *(char *)(v7 + 63);
  if (v25 < 0)
  {
    if (*(_QWORD *)(v7 + 48) != 9)
      goto LABEL_27;
    v24 = *(_QWORD *)v24;
  }
  else if (v25 != 9)
  {
    goto LABEL_27;
  }
  v26 = *(_QWORD *)v24;
  v27 = *(unsigned __int8 *)(v24 + 8);
  if (v26 == 0x6C75616665642D78 && v27 == 116)
  {
    std::vector<XMP_Node *>::insert((uint64_t)(a1 + 9), v22, (char *)&v41);
    return;
  }
LABEL_27:
  v29 = (unint64_t)a1[11];
  if ((unint64_t)v23 >= v29)
  {
    v31 = (v23 - v22) >> 3;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v33 = v29 - (_QWORD)v22;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(a1 + 11), v34);
    else
      v35 = 0;
    v36 = (XMP_Node **)&v35[8 * v31];
    v37 = &v35[8 * v34];
    *v36 = v41;
    v30 = (char *)(v36 + 1);
    v39 = a1[9];
    v38 = a1[10];
    if (v38 != v39)
    {
      do
      {
        v40 = (XMP_Node *)*((_QWORD *)v38 - 1);
        v38 -= 8;
        *--v36 = v40;
      }
      while (v38 != v39);
      v38 = a1[9];
    }
    a1[9] = (char *)v36;
    a1[10] = v30;
    a1[11] = v37;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_QWORD *)v23 = v41;
    v30 = v23 + 8;
  }
  a1[10] = v30;
}

void sub_1880A008C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPMeta::DeleteLocalizedText(char **this, char *a2, char *a3, char *__s, char *a5)
{
  void **v9;
  void **v10;
  const XMP_Node *Node;
  const XMP_Node *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  XMP_Node **v18;
  XMP_Node *v19;
  uint64_t v20;
  _QWORD *exception;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  XMP_Node *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const void **v31;
  unsigned __int8 *v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t *v38;
  int v39;
  uint64_t *v40;
  int v41;
  _BOOL4 v43;
  XMP_Node *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  int v59;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  const void **v67[3];
  void *__p[2];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  XMP_Node *v72;

  if (!a2 || !a3 || !__s || !a5)
    XMPMeta::DeleteLocalizedText();
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  std::string::basic_string[abi:ne180100]<0>(v70, __s);
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v70);
  v9 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v71 >= 0)
    v10 = v70;
  else
    v10 = (void **)v70[0];
  if (v69 < 0)
    v9 = (void **)__p[0];
  memset(v67, 0, sizeof(v67));
  ExpandXPath(a2, a3, (uint64_t *)v67);
  Node = (const XMP_Node *)FindNode(this + 28, v67, 0, 0, 0);
  v12 = Node;
  if (!Node)
    goto LABEL_108;
  v14 = *((_QWORD *)Node + 9);
  v13 = *((_QWORD *)Node + 10);
  v72 = 0;
  if (ChooseLocalizedText(Node, (const char *)v10, (const char *)v9, &v72) != 1)
    goto LABEL_108;
  if (v13 == v14)
  {
LABEL_18:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (itemIndex < arraySize) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Tool"
                   "kit-SDK/XMPCore/source/XMPMeta-GetSet.cpp at line 1068";
    *((_BYTE *)exception + 16) = 0;
  }
  v15 = 0;
  v16 = v13 - v14;
  v17 = (v13 - v14) >> 3;
  v18 = (XMP_Node **)*((_QWORD *)v12 + 9);
  v19 = v72;
  if (v17 <= 1)
    v20 = 1;
  else
    v20 = v17;
  while (v18[v15] != v72)
  {
    if (v20 == ++v15)
      goto LABEL_18;
  }
  v22 = (uint64_t *)*((_QWORD *)v72 + 12);
  if (v22 == *((uint64_t **)v72 + 13))
    goto LABEL_26;
  v23 = *v22;
  v24 = (_QWORD *)(v23 + 16);
  v25 = *(char *)(v23 + 39);
  if ((v25 & 0x80000000) == 0)
  {
    if (v25 != 8)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (*(_QWORD *)(v23 + 24) != 8)
  {
LABEL_26:
    if (!v15)
      goto LABEL_101;
    v26 = *v18;
    v27 = *((unsigned __int8 *)*v18 + 63);
    if ((v27 & 0x80u) == 0)
      v28 = *((unsigned __int8 *)*v18 + 63);
    else
      v28 = *((_QWORD *)*v18 + 6);
    v29 = *((unsigned __int8 *)v72 + 63);
    v30 = (char)v29;
    if ((v29 & 0x80u) != 0)
      v29 = *((_QWORD *)v72 + 6);
    if (v28 != v29)
      goto LABEL_101;
    v31 = (const void **)((char *)v26 + 40);
    if (v30 >= 0)
      v32 = (unsigned __int8 *)v72 + 40;
    else
      v32 = (unsigned __int8 *)*((_QWORD *)v72 + 5);
    if ((v27 & 0x80) != 0)
    {
      if (memcmp(*v31, v32, *((_QWORD *)*v18 + 6)))
        goto LABEL_101;
    }
    else if (*((_BYTE *)*v18 + 63))
    {
      while (*(unsigned __int8 *)v31 == *v32)
      {
        v31 = (const void **)((char *)v31 + 1);
        ++v32;
        if (!--v27)
          goto LABEL_45;
      }
      goto LABEL_101;
    }
LABEL_45:
    v35 = **((_QWORD **)v26 + 12);
    v36 = (_QWORD *)(v35 + 16);
    v37 = *(char *)(v35 + 39);
    if (v37 < 0)
    {
      if (*(_QWORD *)(v35 + 24) != 8)
        goto LABEL_101;
      v36 = (_QWORD *)*v36;
    }
    else if (v37 != 8)
    {
      goto LABEL_101;
    }
    if (*v36 == 0x676E616C3A6C6D78)
    {
      v38 = (uint64_t *)(v35 + 40);
      v39 = *(char *)(v35 + 63);
      if ((v39 & 0x80000000) == 0)
      {
        if (v39 != 9)
          goto LABEL_101;
        goto LABEL_97;
      }
      if (*(_QWORD *)(v35 + 48) == 9)
      {
        v38 = (uint64_t *)*v38;
LABEL_97:
        v58 = (uint64_t *)*v38;
        v59 = *((unsigned __int8 *)v38 + 8);
        if (v58 != (uint64_t *)0x6C75616665642D78 || v59 != 116)
          goto LABEL_101;
        v48 = 0;
LABEL_114:
        v64 = (uint64_t *)&v18[v15];
        v65 = (uint64_t *)*((_QWORD *)v12 + 10);
        v66 = (char *)v65 - (char *)(v64 + 1);
        if (v65 != v64 + 1)
          memmove(&v18[v15], v64 + 1, (char *)v65 - (char *)(v64 + 1));
        v56 = (uint64_t *)((char *)v64 + v66);
        *((_QWORD *)v12 + 10) = (char *)v64 + v66;
        v57 = (uint64_t *)&v18[v48];
        goto LABEL_117;
      }
    }
LABEL_101:
    v57 = (uint64_t *)&v18[v15];
    v61 = (uint64_t *)*((_QWORD *)v12 + 10);
    v62 = (char *)v61 - (char *)(v57 + 1);
    if (v61 != v57 + 1)
      memmove(&v18[v15], v57 + 1, (char *)v61 - (char *)(v57 + 1));
    v26 = 0;
    v63 = 1;
    goto LABEL_104;
  }
  v24 = (_QWORD *)*v24;
LABEL_25:
  if (*v24 != 0x676E616C3A6C6D78)
    goto LABEL_26;
  v33 = (uint64_t *)(v23 + 40);
  v34 = *(char *)(v23 + 63);
  if (v34 < 0)
  {
    if (*(_QWORD *)(v23 + 48) != 9)
      goto LABEL_26;
    v33 = (uint64_t *)*v33;
  }
  else if (v34 != 9)
  {
    goto LABEL_26;
  }
  v40 = (uint64_t *)*v33;
  v41 = *((unsigned __int8 *)v33 + 8);
  v43 = v40 != (uint64_t *)0x6C75616665642D78 || v41 != 116;
  if (!v15 || v43)
  {
    if (v43)
      goto LABEL_26;
  }
  else
  {
    v44 = *v18;
    *v18 = v72;
    *(_QWORD *)(*((_QWORD *)v12 + 9) + 8 * v15) = v44;
    v15 = 0;
    v18 = (XMP_Node **)*((_QWORD *)v12 + 9);
  }
  if (v16 < 9)
    goto LABEL_101;
  v45 = *((char *)v19 + 63);
  if (v45 >= 0)
    v46 = *((unsigned __int8 *)v19 + 63);
  else
    v46 = *((_QWORD *)v19 + 6);
  if (v17 <= 2)
    v47 = 2;
  else
    v47 = v17;
  v48 = 1;
  while (1)
  {
    v26 = v18[v48];
    v49 = *((unsigned __int8 *)v26 + 63);
    if ((v49 & 0x80u) == 0)
      v50 = *((unsigned __int8 *)v26 + 63);
    else
      v50 = *((_QWORD *)v26 + 6);
    if (v50 != v46)
      goto LABEL_88;
    v51 = v45 >= 0 ? (char *)v19 + 40 : (char *)*((_QWORD *)v19 + 5);
    if ((v49 & 0x80) != 0)
      break;
    if (!*((_BYTE *)v26 + 63))
      goto LABEL_91;
    v52 = 0;
    while (*((unsigned __int8 *)v26 + v52 + 40) == v51[v52])
    {
      if (v49 == ++v52)
      {
        if (!v26)
          goto LABEL_101;
        goto LABEL_91;
      }
    }
LABEL_88:
    if (++v48 == v47)
      goto LABEL_101;
  }
  if (memcmp(*((const void **)v26 + 5), v51, *((_QWORD *)v26 + 6)))
    goto LABEL_88;
LABEL_91:
  v53 = (uint64_t *)&v18[v48];
  if (v15 >= v48)
    goto LABEL_114;
  v54 = (uint64_t *)*((_QWORD *)v12 + 10);
  v55 = (char *)v54 - (char *)(v53 + 1);
  if (v54 != v53 + 1)
    memmove(&v18[v48], v53 + 1, (char *)v54 - (char *)(v53 + 1));
  v56 = (uint64_t *)((char *)v53 + v55);
  *((_QWORD *)v12 + 10) = (char *)v53 + v55;
  v57 = (uint64_t *)&v18[v15];
LABEL_117:
  v62 = (char *)v56 - (char *)(v57 + 1);
  if (v56 != v57 + 1)
    memmove(v57, v57 + 1, (char *)v56 - (char *)(v57 + 1));
  v63 = 0;
LABEL_104:
  *((_QWORD *)v12 + 10) = (char *)v57 + v62;
  if (v19)
    (*(void (**)(XMP_Node *))(*(_QWORD *)v19 + 8))(v19);
  if ((v63 & 1) == 0)
    (*(void (**)(XMP_Node *))(*(_QWORD *)v26 + 8))(v26);
LABEL_108:
  v72 = (XMP_Node *)v67;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
}

void sub_1880A0630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24)
{
  a24 = &a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetProperty_Bool(XMPMeta *this, const char *a2, const char *a3, BOOL *a4, unsigned int *a5)
{
  const char *v7;
  uint64_t v8;
  _QWORD *exception;
  int v11;
  XMPUtils *v12;

  if (!a2 || !a3)
    XMPMeta::GetProperty_Bool();
  if (!a4 || !a5)
    XMPMeta::GetProperty_Bool();
  v12 = 0;
  v11 = 0;
  v8 = (*(uint64_t (**)(XMPMeta *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)v8)
  {
    if ((*((_BYTE *)a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((_BYTE *)exception + 16) = 0;
    }
    *a4 = XMPUtils::ConvertToBool(v12, v7);
  }
  return v8;
}

uint64_t XMPMeta::GetProperty_Int(XMPMeta *this, const char *a2, const char *a3, int *a4, unsigned int *a5)
{
  uint64_t result;
  _QWORD *exception;
  uint64_t v8;

  v8 = 0;
  result = XMPMeta::GetProperty_Int64(this, a2, a3, &v8, a5);
  if ((_DWORD)result)
  {
    if (v8 != (int)v8)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 5;
      exception[1] = "Overflow condition";
      *((_BYTE *)exception + 16) = 0;
    }
    *a4 = v8;
  }
  return result;
}

uint64_t XMPMeta::GetProperty_Int64(XMPMeta *this, const char *a2, const char *a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v7;
  const char *v8;
  std::string *v9;
  _QWORD *exception;
  std::string v12;
  _DWORD __n[3];

  if (!a2 || !a3)
    XMPMeta::GetProperty_Int64();
  if (!a4 || !a5)
    XMPMeta::GetProperty_Int64();
  memset(__n, 0, sizeof(__n));
  v7 = (*(uint64_t (**)(XMPMeta *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)v7)
  {
    if ((*((_BYTE *)a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((_BYTE *)exception + 16) = 0;
    }
    memset(&v12, 0, sizeof(v12));
    std::string::append(&v12, *(const std::string::value_type **)&__n[1], __n[0]);
    XMPUtils::Trim(&v12);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v12;
    else
      v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
    *a4 = XMPUtils::ConvertToInt64((XMPUtils *)v9, v8);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1880A08B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::GetProperty_Date(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  _QWORD *exception;
  int v10;
  char *__s;

  if (!a2 || !a3)
    XMPMeta::GetProperty_Date();
  if (!a4 || !a5)
    XMPMeta::GetProperty_Date();
  __s = 0;
  v10 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((_DWORD)v7)
  {
    if ((*(_BYTE *)(a5 + 1) & 0x1F) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Property must be simple";
      *((_BYTE *)exception + 16) = 0;
    }
    XMPUtils::ConvertToDate(__s, a4);
  }
  return v7;
}

void XMPMeta::SetProperty_Bool(XMPMeta *this, const char *a2, const char *a3, uint64_t a4)
{
  void *__p[3];

  if (a2)
  {
    if (a3)
    {
      memset(__p, 0, sizeof(__p));
      XMPUtils::ConvertFromBool(a4, (uint64_t)__p);
    }
  }
  XMPMeta::SetProperty_Bool();
}

void sub_1880A0A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Int(XMPMeta *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  std::string *p_p;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::SetProperty_Int();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromInt(a4, "", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(_QWORD *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1880A0AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Int64(XMPMeta *this, const char *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  std::string *p_p;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::SetProperty_Int64();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromInt64(a4, "", &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(_QWORD *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1880A0BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Float(XMPMeta *this, const char *a2, const char *a3, double a4, uint64_t a5)
{
  std::string *p_p;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::SetProperty_Float();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromFloat("", &__p, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta *, const char *, const char *, std::string *, uint64_t))(*(_QWORD *)this + 48))(this, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1880A0C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPMeta::SetProperty_Date(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  std::string *p_p;
  std::string __p;

  if (!a2 || !a3)
    XMPMeta::SetProperty_Date();
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromDate(a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3, p_p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1880A0D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMP_Node::SetValue()
{
  __assert_rtn("SetValue", "XMPMeta-GetSet.cpp", 130, "this->name != \"xmp:TestAssertNotify\"");
}

void XMPMeta::GetProperty()
{
  __assert_rtn("GetProperty", "XMPMeta-GetSet.cpp", 422, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty", "XMPMeta-GetSet.cpp", 423, "(propValue != 0) && (valueSize != 0) && (options != 0)");
}

void XMPMeta::GetArrayItem()
{
  __assert_rtn("GetArrayItem", "XMPMeta-GetSet.cpp", 452, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("GetArrayItem", "XMPMeta-GetSet.cpp", 453, "(itemValue != 0) && (options != 0)");
}

void XMPMeta::GetStructField()
{
  __assert_rtn("GetStructField", "XMPMeta-GetSet.cpp", 480, "(fieldValue != 0) && (options != 0)");
}

{
  __assert_rtn("GetStructField", "XMPMeta-GetSet.cpp", 479, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::GetQualifier()
{
  __assert_rtn("GetQualifier", "XMPMeta-GetSet.cpp", 503, "(qualValue != 0) && (options != 0)");
}

{
  __assert_rtn("GetQualifier", "XMPMeta-GetSet.cpp", 502, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::SetProperty()
{
  __assert_rtn("SetProperty", "XMPMeta-GetSet.cpp", 524, "(schemaNS != 0) && (propName != 0)");
}

void SetNode()
{
  __assert_rtn("SetNode", "XMPMeta-GetSet.cpp", 193, "node->children.empty()");
}

void XMPMeta::SetArrayItem()
{
  __assert_rtn("SetArrayItem", "XMPMeta-GetSet.cpp", 550, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::AppendArrayItem()
{
  __assert_rtn("AppendArrayItem", "XMPMeta-GetSet.cpp", 573, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::SetStructField()
{
  __assert_rtn("SetStructField", "XMPMeta-GetSet.cpp", 622, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::SetQualifier()
{
  __assert_rtn("SetQualifier", "XMPMeta-GetSet.cpp", 643, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::DeleteProperty()
{
  __assert_rtn("DeleteProperty", "XMPMeta-GetSet.cpp", 665, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::DeleteArrayItem()
{
  __assert_rtn("DeleteArrayItem", "XMPMeta-GetSet.cpp", 712, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::DeleteStructField()
{
  __assert_rtn("DeleteStructField", "XMPMeta-GetSet.cpp", 731, "(schemaNS != 0) && (structName != 0) && (fieldNS != 0) && (fieldName != 0)");
}

void XMPMeta::DeleteQualifier()
{
  __assert_rtn("DeleteQualifier", "XMPMeta-GetSet.cpp", 750, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta::DoesPropertyExist()
{
  __assert_rtn("DoesPropertyExist", "XMPMeta-GetSet.cpp", 767, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::GetLocalizedText()
{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 850, "(actualLang != 0) && (langSize != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 851, "(itemValue != 0) && (valueSize != 0) && (options != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta-GetSet.cpp", 849, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::SetLocalizedText()
{
  __assert_rtn("SetLocalizedText", "XMPMeta-GetSet.cpp", 898, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::DeleteLocalizedText()
{
  __assert_rtn("DeleteLocalizedText", "XMPMeta-GetSet.cpp", 1039, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta::GetProperty_Bool()
{
  __assert_rtn("GetProperty_Bool", "XMPMeta-GetSet.cpp", 1141, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Bool", "XMPMeta-GetSet.cpp", 1142, "(propValue != 0) && (options != 0)");
}

void XMPMeta::GetProperty_Int64()
{
  __assert_rtn("GetProperty_Int64", "XMPMeta-GetSet.cpp", 1192, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Int64", "XMPMeta-GetSet.cpp", 1193, "(propValue != 0) && (options != 0)");
}

void XMPMeta::GetProperty_Date()
{
  __assert_rtn("GetProperty_Date", "XMPMeta-GetSet.cpp", 1250, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty_Date", "XMPMeta-GetSet.cpp", 1251, "(propValue != 0) && (options != 0)");
}

void XMPMeta::SetProperty_Bool()
{
  __assert_rtn("SetProperty_Bool", "XMPMeta-GetSet.cpp", 1276, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Int()
{
  __assert_rtn("SetProperty_Int", "XMPMeta-GetSet.cpp", 1295, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Int64()
{
  __assert_rtn("SetProperty_Int64", "XMPMeta-GetSet.cpp", 1314, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Float()
{
  __assert_rtn("SetProperty_Float", "XMPMeta-GetSet.cpp", 1333, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta::SetProperty_Date()
{
  __assert_rtn("SetProperty_Date", "XMPMeta-GetSet.cpp", 1352, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::XMPMeta2(XMPMeta2 *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  XMPMeta::XMPMeta(this);
  *(_QWORD *)v1 = &off_1E1BB2BC0;
  v2 = (_QWORD *)(v1 + 400);
  v3 = (_QWORD *)(v1 + 416);
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  v4 = v1 + 432;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  AdobeXMPCore::IMetadata_v1::CreateMetadata(&v14);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v2, &v14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)*v2 + 752))(*v2, "alias", 5);
  AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry((uint64_t *)&v14);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v3, &v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(*(_QWORD *)*v3 + 40))(&v14, *v3, "rdf");
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v4, &v14);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1880A1460(_Unwind_Exception *a1)
{
  XMPMeta *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 448);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v2);
  XMPMeta::~XMPMeta(v1);
  _Unwind_Resume(a1);
}

void XMPMeta2::~XMPMeta2(XMPMeta2 *this)
{
  *(_QWORD *)this = &off_1E1BB2BC0;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 432);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 416);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 400);
  XMPMeta::~XMPMeta(this);
}

{
  XMPMeta2::~XMPMeta2(this);
  JUMPOUT(0x18D761C30);
}

uint64_t XMPMeta2::GetProperty(XMPMeta2 *this, char *a2, char *a3, const char **a4, unsigned int *a5, unsigned int *a6)
{
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t v26;
  std::string *p_str;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::string::size_type v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t i;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  void **p_s1;
  int v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::string::size_type v75;
  std::string::size_type v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::string *v97;
  std::string::size_type v98;
  uint64_t v99;
  std::string::size_type v100;
  uint64_t v101;
  uint64_t v102;
  std::string *v103;
  __int128 v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t *v109;
  unint64_t v110;
  std::string::size_type v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  size_t v131;
  std::string::size_type v132;
  std::string *v133;
  void **v134;
  int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  char v149;
  std::string::size_type v150;
  std::string::size_type v151;
  std::string::size_type v152;
  uint64_t v153;
  std::string *v154;
  std::string::value_type *v155;
  int v156;
  int v157;
  std::string::size_type v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *exception;
  _QWORD *v205;
  char v206;
  char v207;
  unsigned int *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  __int128 v211;
  void *__s1;
  size_t __n;
  uint64_t v214;
  __int128 v215;
  uint64_t v216;
  std::__shared_weak_count *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  std::string v220;
  __int128 v221;
  void *__p[2];
  uint64_t v223;
  std::string v224;
  __int128 v225;
  std::string v226;
  __int128 v227;
  std::string v228;
  std::string __str;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;

  if (!a2 || !a3)
    XMPMeta2::GetProperty();
  if (!a4 || !a5 || !a6)
    XMPMeta2::GetProperty();
  v232 = 0;
  v233 = 0;
  v234 = 0;
  ExpandXPath(a2, a3, &v232);
  v231 = 0uLL;
  AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v231);
  v230 = 0uLL;
  v10 = (_QWORD *)*((_QWORD *)this + 50);
  if (v10)
    v11 = (char *)v10 + *(_QWORD *)(*v10 - 544);
  else
    v11 = 0;
  v12 = *((_QWORD *)this + 51);
  *(_QWORD *)&v230 = v11;
  *((_QWORD *)&v230 + 1) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = v232;
  if ((*(_BYTE *)(v232 + 56) & 0x10) != 0)
  {
    if (!XMPUtils::HandleConstAliasStep((_QWORD *)this + 50, &v230, &v232, 0))
    {
LABEL_375:
      v196 = 0;
      goto LABEL_376;
    }
    v208 = a5;
    v15 = v232;
    v16 = 2;
  }
  else
  {
    v208 = a5;
    v16 = 1;
  }
  v17 = v233 - v15;
  if (v16 >= v17 >> 5)
    goto LABEL_354;
  v18 = v17 >> 5;
  while (2)
  {
    if (!(_QWORD)v230)
      goto LABEL_375;
    memset(&__str, 0, sizeof(__str));
    v19 = (__int128 *)(v232 + 32 * v16);
    if (*((char *)v19 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
    }
    else
    {
      v20 = *v19;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
    }
    memset(&v228, 0, sizeof(v228));
    v21 = v232;
    v22 = v232 + 32 * v16;
    if (*(char *)(v22 - 9) < 0)
    {
      std::string::__init_copy_ctor_external(&v228, *(const std::string::value_type **)(v22 - 32), *(_QWORD *)(v22 - 24));
      v21 = v232;
    }
    else
    {
      v23 = *(_OWORD *)(v22 - 32);
      v228.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 - 16);
      *(_OWORD *)&v228.__r_.__value_.__l.__data_ = v23;
    }
    v227 = 0uLL;
    switch(*(_DWORD *)(v21 + 32 * v16 + 24))
    {
      case 1:
        v24 = std::string::find(&__str, 58, 0);
        memset(&v226, 0, sizeof(v226));
        std::string::basic_string(&v226, &__str, 0, v24, (std::allocator<char> *)&v224);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v231 + 80))(&v224);
        v227 = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v230 + 40))(v230) != 4)
        {
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          goto LABEL_340;
        }
        *(_OWORD *)&v224.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v230 + 240))(&v224);
        v25 = v224.__r_.__value_.__r.__words[0];
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v227 + 192))(v227);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v25 + 648))(__p, v25, v26, -1, (std::string::size_type)p_str->__r_.__value_.__r.__words + v24 + 1, -1);
        v28 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
        v230 = v28;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v33 = (unint64_t *)((char *)__p[1] + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        size = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
        if (v224.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(v224.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
LABEL_169:
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
LABEL_171:
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        goto LABEL_338;
      case 2:
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v97 = &__str;
        else
          v97 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v97->__r_.__value_.__s.__data_[0] != 63)
          __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 243, "stepStr[0]=='?'");
        std::string::basic_string(&v226, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v224);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v226;
        v98 = std::string::find(&__str, 58, 0);
        memset(&v226, 0, sizeof(v226));
        std::string::basic_string(&v226, &__str, 0, v98, (std::allocator<char> *)&v224);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v231 + 80))(&v224);
        v227 = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
        v99 = v230;
        v100 = v224.__r_.__value_.__r.__words[0];
        v101 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v224.__r_.__value_.__l.__data_ + 192))(v224.__r_.__value_.__r.__words[0]);
        v102 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v100 + 208))(v100);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v103 = &__str;
        else
          v103 = (std::string *)__str.__r_.__value_.__r.__words[0];
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, std::string::size_type, uint64_t))(*(_QWORD *)v99 + 128))(&v224, v99, v101, v102, (std::string::size_type)v103->__r_.__value_.__r.__words + v98 + 1, -1);
        v104 = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
        *(_OWORD *)&v224.__r_.__value_.__l.__data_ = 0uLL;
        v105 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
        v230 = v104;
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        size = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
        if (!v224.__r_.__value_.__l.__size_)
          goto LABEL_171;
        v108 = (unint64_t *)(v224.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldaxr(v108);
        while (__stlxr(v37 - 1, v108));
        goto LABEL_169;
      case 3:
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v230 + 40))(v230) != 2)
          goto LABEL_340;
        *(_OWORD *)&v224.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v230 + 248))(&v224);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          v75 = __str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_ <= 1 || *__str.__r_.__value_.__l.__data_ != 91)
            goto LABEL_390;
        }
        else
        {
          if (HIBYTE(__str.__r_.__value_.__r.__words[2]) < 2u || __str.__r_.__value_.__s.__data_[0] != 91)
            goto LABEL_390;
          v75 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        v150 = v75 - 1;
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + v150) == 93)
          {
            v151 = __str.__r_.__value_.__l.__size_;
            goto LABEL_262;
          }
        }
        else if (__str.__r_.__value_.__s.__data_[v150] == 93)
        {
          v151 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_262:
          v152 = v151 - 2;
          if (!v152)
            goto LABEL_392;
          LODWORD(v153) = 0;
          v154 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &__str
               : (std::string *)__str.__r_.__value_.__r.__words[0];
          v155 = &v154->__r_.__value_.__s.__data_[1];
          do
          {
            v157 = *v155++;
            v156 = v157;
            if ((v157 - 48) >= 0xA)
              __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 209, "('0' <= stepStr[chNum]) && (stepStr[chNum] <= '9')");
            v153 = (v156 + 10 * v153 - 48);
            --v152;
          }
          while (v152);
          if ((int)v153 < 1)
          {
LABEL_392:
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 102;
            exception[1] = "Array index must be larger than one";
            *((_BYTE *)exception + 16) = 0;
          }
          v158 = std::string::find(&v228, 58, 0);
          memset(&v226, 0, sizeof(v226));
          std::string::basic_string(&v226, &v228, 0, v158, (std::allocator<char> *)__p);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v231 + 80))(__p);
          v227 = *(_OWORD *)__p;
          (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v224.__r_.__value_.__l.__data_
                                                                                       + 656))(__p, v224.__r_.__value_.__r.__words[0], v153);
          v159 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v160 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          v230 = v159;
          if (v160)
          {
            v161 = (unint64_t *)&v160->__shared_owners_;
            do
              v162 = __ldaxr(v161);
            while (__stlxr(v162 - 1, v161));
            if (!v162)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          v163 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v164 = (unint64_t *)((char *)__p[1] + 8);
            do
              v165 = __ldaxr(v164);
            while (__stlxr(v165 - 1, v164));
            if (!v165)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          v94 = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
          if (v224.__r_.__value_.__l.__size_)
          {
            v166 = (unint64_t *)(v224.__r_.__value_.__l.__size_ + 8);
            do
              v96 = __ldaxr(v166);
            while (__stlxr(v96 - 1, v166));
LABEL_285:
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          goto LABEL_338;
        }
LABEL_390:
        __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 207, "(stepStr.length() >= 2) && (*( stepStr.begin()) == '[') && (stepStr[stepStr.length()-1] == ']')");
      case 4:
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v230 + 40))(v230) != 2)
          goto LABEL_340;
        *(_OWORD *)&v224.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v230 + 248))(&v224);
        v76 = std::string::find(&v228, 58, 0);
        memset(&v226, 0, sizeof(v226));
        std::string::basic_string(&v226, &v228, 0, v76, (std::allocator<char> *)__p);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v231 + 80))(__p);
        v227 = *(_OWORD *)__p;
        v77 = v230;
        *(_OWORD *)__p = v230;
        if (*((_QWORD *)&v230 + 1))
        {
          v78 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        if (v77 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77) == 2)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__p[0] + 248))(&v220);
          v80 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(v220.__r_.__value_.__r.__words[0]
                                                                              + *(_QWORD *)(*(_QWORD *)v220.__r_.__value_.__l.__data_
                                                                                          - 688))
                                                                  + 560))(v220.__r_.__value_.__r.__words[0] + *(_QWORD *)(*(_QWORD *)v220.__r_.__value_.__l.__data_ - 688));
          v81 = (std::__shared_weak_count *)v220.__r_.__value_.__l.__size_;
          if (v220.__r_.__value_.__l.__size_)
          {
            v82 = (unint64_t *)(v220.__r_.__value_.__l.__size_ + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if (!v80)
          {
            v205 = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)v205 = 102;
            v205[1] = "Array index overflow";
            *((_BYTE *)v205 + 16) = 0;
          }
          (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v224.__r_.__value_.__l.__data_
                                                                                             + 656))(&v220, v224.__r_.__value_.__r.__words[0], v80);
          v84 = *(_OWORD *)&v220.__r_.__value_.__l.__data_;
          *(_OWORD *)&v220.__r_.__value_.__l.__data_ = 0uLL;
          v85 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          v230 = v84;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = (std::__shared_weak_count *)v220.__r_.__value_.__l.__size_;
          if (v220.__r_.__value_.__l.__size_)
          {
            v89 = (unint64_t *)(v220.__r_.__value_.__l.__size_ + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
        }
        v91 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v92 = (unint64_t *)((char *)__p[1] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        v94 = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
        if (!v224.__r_.__value_.__l.__size_)
          goto LABEL_338;
        v95 = (unint64_t *)(v224.__r_.__value_.__l.__size_ + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        goto LABEL_285;
      case 5:
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v230 + 40))(v230) != 2)
          goto LABEL_340;
        v225 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v230 + 248))(&v225);
        memset(&v226, 0, sizeof(v226));
        memset(&v224, 0, sizeof(v224));
        __p[0] = 0;
        __p[1] = 0;
        v223 = 0;
        SplitNameAndValue((uint64_t)&__str, (uint64_t)&v226, &v224);
        v221 = v230;
        if (*((_QWORD *)&v230 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v40 = std::string::find(&v226, 58, 0);
        memset(&v220, 0, sizeof(v220));
        std::string::basic_string(&v220, &v226, 0, v40, (std::allocator<char> *)&__s1);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v231 + 80))(&__s1);
        v41 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1 + 192))(__s1);
        MEMORY[0x18D761A14](__p, v41);
        v42 = (std::__shared_weak_count *)__n;
        if (__n)
        {
          v43 = (unint64_t *)(__n + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = v221;
        if (!(_QWORD)v221 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v221 + 40))(v221) != 2)
        {
          v149 = 0;
          goto LABEL_320;
        }
        v218 = 0;
        v219 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v45 + 248))(&v218, v45);
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v218 + *(_QWORD *)(*(_QWORD *)v218 - 688)) + 560))(v218 + *(_QWORD *)(*(_QWORD *)v218 - 688));
        if (!v46)
        {
          v206 = 0;
          goto LABEL_314;
        }
        v47 = v46;
        v206 = 0;
        for (i = 1; i <= v47; ++i)
        {
          v216 = 0;
          v217 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v218 + 656))(&v216, v218, i);
          v215 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v216 + 128))(&v215);
          if (!(_QWORD)v215)
          {
            v61 = 11;
            goto LABEL_100;
          }
          __s1 = 0;
          __n = 0;
          v214 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v215 + 232))(&v209);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v209 + 504))(&v211);
          v49 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v211 + 192))(v211);
          std::string::basic_string[abi:ne180100]<0>(&__s1, v49);
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = v210;
          if (v210)
          {
            v54 = (unint64_t *)&v210->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v56 = HIBYTE(v214);
          if (v214 >= 0)
            v57 = HIBYTE(v214);
          else
            v57 = __n;
          v58 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v58 = v224.__r_.__value_.__l.__size_;
          if (v57 != v58)
            goto LABEL_84;
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v59 = &v224;
          else
            v59 = (std::string *)v224.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v214) < 0)
          {
            if (memcmp(__s1, v59, __n))
            {
              v61 = 0;
LABEL_99:
              operator delete(__s1);
              goto LABEL_100;
            }
          }
          else if (HIBYTE(v214))
          {
            p_s1 = &__s1;
            while (*(unsigned __int8 *)p_s1 == v59->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (void **)((char *)p_s1 + 1);
              v59 = (std::string *)((char *)v59 + 1);
              if (!--v56)
                goto LABEL_88;
            }
LABEL_84:
            v61 = 0;
            if (v214 < 0)
              goto LABEL_99;
            goto LABEL_100;
          }
LABEL_88:
          (*(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v218 + 656))(&v211, v218, i);
          v62 = v211;
          v211 = 0uLL;
          v63 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          v230 = v62;
          if (v63)
          {
            v64 = (unint64_t *)&v63->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          v66 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1))
          {
            v67 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v206 = 1;
          v61 = 9;
          if (v214 < 0)
            goto LABEL_99;
LABEL_100:
          v69 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          if (*((_QWORD *)&v215 + 1))
          {
            v70 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          v72 = v217;
          if (v217)
          {
            v73 = (unint64_t *)&v217->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          if (v61 != 11 && v61)
            break;
        }
LABEL_314:
        v173 = v219;
        if (v219)
        {
          v174 = (unint64_t *)&v219->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v149 = v206;
LABEL_320:
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v220.__r_.__value_.__l.__data_);
        v176 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
        if (*((_QWORD *)&v221 + 1))
        {
          v177 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
        if (SHIBYTE(v223) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__r_.__value_.__l.__data_);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
        if (*((_QWORD *)&v225 + 1))
        {
          v180 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
            if ((v149 & 1) == 0)
              goto LABEL_340;
            goto LABEL_338;
          }
        }
        if ((v149 & 1) != 0)
          goto LABEL_338;
LABEL_340:
        v135 = 1;
LABEL_341:
        v182 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
        if (*((_QWORD *)&v227 + 1))
        {
          v183 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
        if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v228.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (v135)
          goto LABEL_375;
        if (++v16 != v18)
          continue;
LABEL_354:
        if (!(_QWORD)v230)
          goto LABEL_375;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v230;
        if (*((_QWORD *)&v230 + 1))
        {
          v185 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v186 = __ldxr(v185);
          while (__stxr(v186 + 1, v185));
        }
        *a6 = XMPUtils::GetIXMPOptions(&__str);
        v187 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v188 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v230 + 40))(v230) == 1)
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v230 + 232))(&v228);
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v228.__r_.__value_.__l.__data_ + 504))(&__str);
          v190 = (std::__shared_weak_count *)v228.__r_.__value_.__l.__size_;
          if (v228.__r_.__value_.__l.__size_)
          {
            v191 = (unint64_t *)(v228.__r_.__value_.__l.__size_ + 8);
            do
              v192 = __ldaxr(v191);
            while (__stlxr(v192 - 1, v191));
            if (!v192)
            {
              ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
              std::__shared_weak_count::__release_weak(v190);
            }
          }
          *a4 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                                + 192))(__str.__r_.__value_.__r.__words[0]);
          *v208 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 208))(__str.__r_.__value_.__r.__words[0]);
          v193 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v194 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v195 = __ldaxr(v194);
            while (__stlxr(v195 - 1, v194));
            if (!v195)
            {
              ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
              std::__shared_weak_count::__release_weak(v193);
            }
          }
        }
        v196 = 1;
LABEL_376:
        v197 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
        if (*((_QWORD *)&v230 + 1))
        {
          v198 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = (std::__shared_weak_count *)*((_QWORD *)&v231 + 1);
        if (*((_QWORD *)&v231 + 1))
        {
          v201 = (unint64_t *)(*((_QWORD *)&v231 + 1) + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v232;
        std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        return v196;
      case 6:
        memset(&v226, 0, sizeof(v226));
        memset(&v224, 0, sizeof(v224));
        __p[0] = 0;
        __p[1] = 0;
        v223 = 0;
        SplitNameAndValue((uint64_t)&__str, (uint64_t)&v226, &v224);
        v225 = v230;
        if (*((_QWORD *)&v230 + 1))
        {
          v109 = (unint64_t *)(*((_QWORD *)&v230 + 1) + 8);
          do
            v110 = __ldxr(v109);
          while (__stxr(v110 + 1, v109));
        }
        v111 = std::string::find(&v226, 58, 0);
        memset(&v220, 0, sizeof(v220));
        std::string::basic_string(&v220, &v226, 0, v111, (std::allocator<char> *)&__s1);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v231 + 80))(&__s1);
        v112 = (*(uint64_t (**)(void *))(*(_QWORD *)__s1 + 192))(__s1);
        MEMORY[0x18D761A14](__p, v112);
        v113 = (std::__shared_weak_count *)__n;
        if (__n)
        {
          v114 = (unint64_t *)(__n + 8);
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v116 = v225;
        if (!(_QWORD)v225 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v225 + 40))(v225) != 2)
        {
          v135 = 1;
          goto LABEL_297;
        }
        v221 = 0uLL;
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v116 + 248))(&v221, v116);
        v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v221 + *(_QWORD *)(*(_QWORD *)v221 - 688)) + 560))(v221 + *(_QWORD *)(*(_QWORD *)v221 - 688));
        if (!v117)
        {
          v207 = 0;
          v135 = 0;
          goto LABEL_290;
        }
        v118 = v117;
        v207 = 0;
        v119 = 1;
        while (2)
        {
          v218 = 0;
          v219 = 0;
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v221 + 656))(&v218, v221, v119);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v218 + 40))(v218) != 4)
          {
            v135 = 1;
            goto LABEL_225;
          }
          v216 = 0;
          v217 = 0;
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v218 + 240))(&__s1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__s1 + 648))(&v216);
          v120 = (std::__shared_weak_count *)__n;
          if (__n)
          {
            v121 = (unint64_t *)(__n + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          if (!v216 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v216 + 40))(v216) != 1)
          {
            v135 = 14;
            goto LABEL_220;
          }
          __s1 = 0;
          __n = 0;
          v214 = 0;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v216 + 232))(&v211);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v211 + 504))(&v215);
          v123 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v215 + 192))(v215);
          std::string::basic_string[abi:ne180100]<0>(&__s1, v123);
          v124 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          if (*((_QWORD *)&v215 + 1))
          {
            v125 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v126 = __ldaxr(v125);
            while (__stlxr(v126 - 1, v125));
            if (!v126)
            {
              ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
              std::__shared_weak_count::__release_weak(v124);
            }
          }
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1))
          {
            v128 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v130 = HIBYTE(v214);
          if (v214 >= 0)
            v131 = HIBYTE(v214);
          else
            v131 = __n;
          v132 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v132 = v224.__r_.__value_.__l.__size_;
          if (v131 != v132)
            goto LABEL_235;
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &v224;
          else
            v133 = (std::string *)v224.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v214) < 0)
          {
            if (memcmp(__s1, v133, __n))
            {
              v135 = 0;
              goto LABEL_250;
            }
          }
          else if (HIBYTE(v214))
          {
            v134 = &__s1;
            while (*(unsigned __int8 *)v134 == v133->__r_.__value_.__s.__data_[0])
            {
              v134 = (void **)((char *)v134 + 1);
              v133 = (std::string *)((char *)v133 + 1);
              if (!--v130)
                goto LABEL_239;
            }
LABEL_235:
            v135 = 0;
            if ((v214 & 0x8000000000000000) == 0)
              goto LABEL_220;
LABEL_250:
            operator delete(__s1);
            goto LABEL_220;
          }
LABEL_239:
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v221 + 656))(&v215, v221, v119);
          v142 = v215;
          v215 = 0uLL;
          v143 = (std::__shared_weak_count *)*((_QWORD *)&v230 + 1);
          v230 = v142;
          if (v143)
          {
            v144 = (unint64_t *)&v143->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          v146 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          if (*((_QWORD *)&v215 + 1))
          {
            v147 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          v207 = 1;
          v135 = 12;
          if (v214 < 0)
            goto LABEL_250;
LABEL_220:
          v136 = v217;
          if (v217)
          {
            v137 = (unint64_t *)&v217->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
LABEL_225:
          v139 = v219;
          if (!v219)
            goto LABEL_229;
          v140 = (unint64_t *)&v219->__shared_owners_;
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
            if (!v135)
              goto LABEL_231;
          }
          else
          {
LABEL_229:
            if (!v135)
              goto LABEL_231;
          }
          if (v135 != 14)
          {
            if (v135 == 12)
              v135 = 0;
LABEL_290:
            v167 = (std::__shared_weak_count *)*((_QWORD *)&v221 + 1);
            if (*((_QWORD *)&v221 + 1))
            {
              v168 = (unint64_t *)(*((_QWORD *)&v221 + 1) + 8);
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            if (!v135)
              v135 = (v207 & 1) == 0;
LABEL_297:
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v220.__r_.__value_.__l.__data_);
            v170 = (std::__shared_weak_count *)*((_QWORD *)&v225 + 1);
            if (*((_QWORD *)&v225 + 1))
            {
              v171 = (unint64_t *)(*((_QWORD *)&v225 + 1) + 8);
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
              }
            }
            if (SHIBYTE(v223) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v224.__r_.__value_.__l.__data_);
            if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v226.__r_.__value_.__l.__data_);
              if (v135)
                goto LABEL_341;
            }
            else if (v135)
            {
              goto LABEL_341;
            }
LABEL_338:
            v135 = 0;
            goto LABEL_341;
          }
LABEL_231:
          if (++v119 > v118)
          {
            v135 = 0;
            goto LABEL_290;
          }
          continue;
        }
      default:
        goto LABEL_338;
    }
  }
}

void sub_1880A2DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (a33 < 0)
    operator delete(a28);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  if (a42 < 0)
    operator delete(a37);
  if (a49 < 0)
    operator delete(a44);
  if (a57 < 0)
    operator delete(a52);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v57 - 224);
  if (*(char *)(v57 - 185) < 0)
    operator delete(*(void **)(v57 - 208));
  if (*(char *)(v57 - 153) < 0)
    operator delete(*(void **)(v57 - 176));
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v57 - 144);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v57 - 128);
  *(_QWORD *)(v57 - 176) = v57 - 112;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 176));
  _Unwind_Resume(a1);
}

uint64_t XMPMeta2::CountArrayItems(XMPMeta2 *this, char *a2, char *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t NodeChildCount;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *exception;
  void **v15;
  std::__shared_weak_count *v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];

  if (!a2 || !a3)
    XMPMeta2::CountArrayItems();
  memset(v20, 0, sizeof(v20));
  ExpandXPath(a2, a3, v20);
  v18 = 0;
  v19 = 0;
  v17 = 0;
  if ((XMPUtils::FindCnstNode((_QWORD *)this + 50, v20, (std::string::size_type *)&v18, &v17, 0) & 1) != 0)
  {
    if ((v17 & 0x200) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "The named property is not an array";
      *((_BYTE *)exception + 16) = 0;
    }
    v15 = v18;
    v16 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    NodeChildCount = XMPUtils::GetNodeChildCount(&v15);
    v7 = v16;
    if (v16)
    {
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    NodeChildCount = 0;
  }
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v18 = (void **)v20;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v18);
  return NodeChildCount;
}

void sub_1880A3230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = (void **)&a14;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta2::ParseFromBuffer(XMPMeta2 *this, const char *a2, unsigned int a3, char a4)
{
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;

  v8 = (_QWORD *)((char *)this + 448);
  v9 = *((_QWORD *)this + 56);
  if (!v9)
  {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)"", 0, (uint64_t *)&v26);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v8, &v26);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v9 = *v8;
  }
  if (a3 == -1)
    v13 = -1;
  else
    v13 = a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v9 + 40))(&v24, v9, a2, v13);
  v14 = v25;
  if (!v25)
    goto LABEL_15;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if ((a4 & 2) != 0)
      return;
  }
  else
  {
LABEL_15:
    if ((a4 & 2) != 0)
      return;
  }
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 232))(*((_QWORD *)this + 54));
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v17 + 288))(v17, (char *)this + 352);
  v18 = *((_QWORD *)this + 54);
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 192))(*((_QWORD *)this + 56));
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 208))(*((_QWORD *)this + 56));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 200))(&v26, v18, v19, v20);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)this + 400, &v26);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 200))(*v8);
}

void XMPMeta2::SerializeToBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const std::string::value_type *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  char *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v44 = 0;
  v45 = 0;
  AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry(&v44);
  v42 = 0;
  v43 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *))(*(_QWORD *)v44 + 48))(&v42, v44, "rdf");
  v40 = 0;
  v41 = 0;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 224))(v42);
  v15 = *(_QWORD **)(a1 + 400);
  if (v15)
    v16 = (char *)v15 + *(_QWORD *)(*v15 - 544);
  else
    v16 = 0;
  v17 = *(std::__shared_weak_count **)(a1 + 408);
  v38 = v16;
  v39 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v36 = 0;
  v37 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, char **, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)v14 + 264))(&v40, v14, &v38, a3, a4, a5, a6, a7, &v36);
  v20 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (v40)
  {
    v26 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 192))(v40);
    std::string::append((std::string *)a2, v26);
  }
  v27 = v41;
  if (v41)
  {
    v28 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v43;
  if (v43)
  {
    v31 = (unint64_t *)&v43->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1880A368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta2::Erase(XMPMeta2 *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 43) = 0;
  }
  v3 = *((_QWORD *)this + 50) + *(_QWORD *)(**((_QWORD **)this + 50) - 544);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 224))(v3, 1, 1);
}

uint64_t XMPMeta2::DoesPropertyExist(XMPMeta2 *this, char *a2, char *a3)
{
  uint64_t CnstNode;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v9;
  void **v10;
  std::__shared_weak_count *v11;
  uint64_t v12[3];

  if (!a2 || !a3)
    XMPMeta2::DoesPropertyExist();
  memset(v12, 0, sizeof(v12));
  ExpandXPath(a2, a3, v12);
  v10 = 0;
  v11 = 0;
  v9 = 0;
  CnstNode = XMPUtils::FindCnstNode((_QWORD *)this + 50, v12, (std::string::size_type *)&v10, &v9, 0);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v10 = (void **)v12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
  return CnstNode;
}

void sub_1880A37E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetProperty(XMPMeta2 *this, char *a2, char *a3, char *a4, unsigned int a5)
{
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *exception;
  void **v14;
  std::__shared_weak_count *v15;
  uint64_t v16[3];

  if (!a2 || !a3)
    XMPMeta2::SetProperty();
  v9 = VerifySetOptions(a5, a4);
  memset(v16, 0, sizeof(v16));
  ExpandXPath(a2, a3, v16);
  v14 = 0;
  v15 = 0;
  if ((XMPUtils::FindNode((_QWORD *)this + 50, v16, 1, v9, (char *)&v14, 0, 0) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  XMPUtils::SetNode(&v14, a4, v9);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v14 = (void **)v16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v14);
}

void sub_1880A393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetArrayItem(XMPMeta2 *this, char *a2, char *a3, int a4, char *a5, unsigned int a6)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *exception;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unsigned int (***v19)(void **);
  std::__shared_weak_count *v20;
  uint64_t v21[3];

  if (!a2 || !a3)
    XMPMeta2::SetArrayItem();
  memset(v21, 0, sizeof(v21));
  ExpandXPath(a2, a3, v21);
  v19 = 0;
  v20 = 0;
  if ((XMPUtils::FindNode((_QWORD *)this + 50, v21, 0, a6, (char *)&v19, 0, 0) & 1) == 0
    || (*v19)[5]((void **)v19) != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified array does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  v17 = 0;
  v18 = 0;
  (*v19)[31]((void **)&v17);
  XMPUtils::DoSetArrayItem(&v17, a4, a5, a6);
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v19 = (unsigned int (***)(void **))v21;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_1880A3AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a12 = (void **)&a14;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void XMPMeta2::AppendArrayItem(XMPMeta2 *this, char *a2, char *a3, unsigned int a4, char *a5, int a6)
{
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *exception;
  _QWORD *v32;
  std::string __p;
  _BYTE v34[32];
  uint64_t v35;
  __int128 v36;
  std::string::size_type v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (!a2 || !a3)
    XMPMeta2::AppendArrayItem();
  v11 = VerifySetOptions(a4, 0);
  if ((v11 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Only array form flags allowed for arrayOptions";
    *((_BYTE *)exception + 16) = 0;
  }
  v12 = v11;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  ExpandXPath(a2, a3, &v39);
  v37 = 0;
  v38 = 0;
  v36 = 0uLL;
  v35 = 0;
  v13 = (_QWORD *)((char *)this + 400);
  if (XMPUtils::FindCnstNode(v13, &v39, &v37, (_DWORD *)&v35 + 1, 0))
  {
    if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v37 + 40))(v37) != 2)
    {
      v14 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v14 = 102;
      v15 = "The named property is not an array";
      goto LABEL_43;
    }
  }
  else
  {
    if (!v12)
    {
      v14 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v14 = 103;
      v15 = "Explicit arrayOptions required to create new array";
LABEL_43:
      v14[1] = v15;
      *((_BYTE *)v14 + 16) = 0;
    }
    memset(v34, 0, sizeof(v34));
    v16 = v40;
    if (*(char *)(v40 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)(v40 - 32), *(_QWORD *)(v40 - 24));
    }
    else
    {
      v17 = *(_OWORD *)(v40 - 32);
      *(_QWORD *)&v34[16] = *(_QWORD *)(v40 - 16);
      *(_OWORD *)v34 = v17;
    }
    *(_DWORD *)&v34[24] = *(_DWORD *)(v16 - 8);
    memset(&__p, 0, sizeof(__p));
    if ((v34[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v34, *(std::string::size_type *)&v34[8]);
    else
      __p = *(std::string *)v34;
    if ((XMPUtils::FindNode(v13, &v39, 1, v12, (char *)&v37, &v35, 0) & 1) == 0)
    {
      v32 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v32 = 102;
      v32[1] = "Failure creating array node";
      *((_BYTE *)v32 + 16) = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v34[23] & 0x80000000) != 0)
      operator delete(*(void **)v34);
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v37 + 248))(v34);
  v18 = *(_OWORD *)v34;
  *(_OWORD *)v34 = 0uLL;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  v36 = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = *(std::__shared_weak_count **)&v34[8];
  if (*(_QWORD *)&v34[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&v34[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  XMPUtils::DoSetArrayItem(&v36, -1, a5, a6 | 0x8000);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v38;
  if (v38)
  {
    v29 = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  *(_QWORD *)v34 = &v39;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
}

void sub_1880A3E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v25 - 88);
  __p = (void *)(v25 - 72);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta2::SetQualifier(XMPMeta2 *this, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7)
{
  std::string *p_p;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *exception;
  std::string __p;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  uint64_t v22[3];

  if (!a5 || !a2 || !a3 || !a4)
    XMPMeta2::SetQualifier();
  memset(v22, 0, sizeof(v22));
  ExpandXPath(a2, a3, v22);
  v20 = 0;
  v21 = 0;
  if ((XMPUtils::FindCnstNode((_QWORD *)this + 50, v22, &v20, 0, 0) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Specified property does not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeQualifierPath(a2, a3, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(XMPMeta2 *, char *, std::string *, const char *, uint64_t))(*(_QWORD *)this + 48))(this, a2, p_p, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1880A4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  __p = &a17;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPMeta2::Clone(XMPMeta2 *this, XMPMeta *lpsrc, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *exception;
  const char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  if (!lpsrc
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v16 = "Null clone pointer";
    goto LABEL_17;
  }
  if (a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    v16 = "No options are defined yet";
LABEL_17:
    exception[1] = v16;
    *((_BYTE *)exception + 16) = 0;
  }
  v6 = v5;
  v7 = v5[50] + *(_QWORD *)(*(_QWORD *)v5[50] - 544);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 224))(v7, 1, 1);
  v8 = *((_QWORD *)this + 50) + *(_QWORD *)(**((_QWORD **)this + 50) - 544);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 264))(&v17, v8, 0, 0);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v17 + 256))(&v19);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)(v6 + 50), &v19);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1880A4238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XMPMeta2::DeleteProperty(XMPMeta2 *this, char *a2, char *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  void (***v56)(uint64_t *__return_ptr);
  std::__shared_weak_count *v57;
  uint64_t v58[3];

  if (!a2 || !a3)
    XMPMeta2::DeleteProperty();
  memset(v58, 0, sizeof(v58));
  ExpandXPath(a2, a3, v58);
  v56 = 0;
  v57 = 0;
  v55 = 0;
  if (XMPUtils::FindCnstNode((_QWORD *)this + 50, v58, (std::string::size_type *)&v56, (_DWORD *)&v55 + 1, &v55)&& v56)
  {
    v53 = 0;
    v54 = 0;
    (*v56)[7](&v53);
    v4 = v53;
    if ((v55 & 0x2000000000) != 0)
    {
      (*v56)[11](&v49);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 192))(v49);
      (*v56)[11](&v47);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 208))(v47);
      (*v56)[9](&v45);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 192))(v45);
      (*v56)[9](&v43);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 208))(v43);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 152))(&v51, v4, v11, v12, v13, v14);
      v15 = v52;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v44;
      if (v44)
      {
        v19 = (unint64_t *)&v44->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = v46;
      if (v46)
      {
        v22 = (unint64_t *)&v46->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v48;
      if (v48)
      {
        v25 = (unint64_t *)&v48->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v8 = v50;
      if (!v50)
        goto LABEL_43;
      v27 = (unint64_t *)&v50->__shared_owners_;
      do
        v10 = __ldaxr(v27);
      while (__stlxr(v10 - 1, v27));
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53) != 2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 40))(v53) == 4)
        {
          v49 = 0;
          v50 = 0;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v53 + 240))(&v49);
          v28 = v49;
          (*v56)[11](&v47);
          v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 192))(v47);
          (*v56)[11](&v45);
          v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 208))(v45);
          (*v56)[9](&v43);
          v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 192))(v43);
          (*v56)[9](v39);
          v32 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v39[0] + 208))(v39[0]);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 672))(v40, v28, v29, v30, v31, v32);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v40);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v39);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v45);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v47);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
        }
        goto LABEL_43;
      }
      v49 = 0;
      v50 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v53 + 248))(&v49);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v49 + 680))(&v41, v49, (int)v55);
      v5 = v42;
      if (v42)
      {
        v6 = (unint64_t *)&v42->__shared_owners_;
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = v50;
      if (!v50)
      {
LABEL_43:
        v33 = v54;
        if (v54)
        {
          v34 = (unint64_t *)&v54->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        goto LABEL_48;
      }
      v9 = (unint64_t *)&v50->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_43;
  }
LABEL_48:
  v36 = v57;
  if (v57)
  {
    v37 = (unint64_t *)&v57->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v56 = (void (***)(uint64_t *__return_ptr))v58;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
}

void sub_1880A470C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v21 - 96);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v21 - 72);
  *(_QWORD *)(v21 - 72) = v21 - 56;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 72));
  _Unwind_Resume(a1);
}

void XMPMeta2::GetObjectName(XMPMeta2 *this, const char **a2, unsigned int *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 50) + 736))(&v12);
  *a2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 192))(v12);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 50) + 736))(&v12);
  *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t XMPMeta2::SetObjectName(XMPMeta2 *this, char *a2)
{
  char v4;
  char *v5;
  int v6;
  int v7;
  unint64_t v9;
  unsigned int v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = a2;
    do
    {
      if (v4 >= 1)
      {
        do
        {
          v7 = *++v5;
          v6 = v7;
        }
        while (v7 > 0);
        if ((v6 & 0x80000000) == 0)
          break;
      }
      v10 = 0;
      v9 = 0;
      CodePoint_from_UTF8(v5, 4uLL, &v10, &v9);
      v5 += v9;
      v4 = *v5;
    }
    while (*v5);
  }
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)this + 50) + 744))(*((_QWORD *)this + 50), a2, -1);
}

uint64_t XMPMeta2::GetLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5, const char **a6, unsigned int *a7, const char **a8, unsigned int *a9, unsigned int *a10)
{
  void **v17;
  const char *v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  size_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  int v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void (***v65)(uint64_t *__return_ptr);
  std::__shared_weak_count *v66;
  uint64_t v67[3];
  void *__p[2];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;

  if (!a2 || !a3 || !__s || !a5)
    XMPMeta2::GetLocalizedText();
  if (!a6 || !a7)
    XMPMeta2::GetLocalizedText();
  if (!a8 || !a9 || !a10)
    XMPMeta2::GetLocalizedText();
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  std::string::basic_string[abi:ne180100]<0>(v70, __s);
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a5);
  NormalizeLangValue((unsigned __int8 *)v70);
  v17 = __p;
  NormalizeLangValue((unsigned __int8 *)__p);
  if (v71 >= 0)
    v18 = (const char *)v70;
  else
    v18 = (const char *)v70[0];
  if (v69 < 0)
    v17 = (void **)__p[0];
  memset(v67, 0, sizeof(v67));
  ExpandXPath(a2, a3, v67);
  v65 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  if ((XMPUtils::FindCnstNode((_QWORD *)this + 50, v67, (std::string::size_type *)&v65, &v62, 0) & 1) == 0)
    goto LABEL_61;
  (*v65)[31](&v60);
  v19 = ChooseIXMPLocalizedText(&v60, &v62, v18, (const char *)v17, &v63);
  v20 = v19;
  v21 = v61;
  if (!v61)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v61->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (v23)
  {
LABEL_20:
    if (v19)
      goto LABEL_21;
LABEL_61:
    v48 = 0;
    goto LABEL_62;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v20)
    goto LABEL_61;
LABEL_21:
  v60 = 0;
  v61 = 0;
  v24 = strlen((const char *)xmlNameSpace);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(_QWORD *)v63 + 128))(&v58, v63, xmlNameSpace, v24, "lang", -1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v58 + 232))(&v60);
  v25 = v59;
  if (v59)
  {
    v26 = (unint64_t *)&v59->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v60 + 504))(&v58);
  *a6 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 192))(v58);
  v28 = v59;
  if (v59)
  {
    v29 = (unint64_t *)&v59->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v60 + 504))(&v58);
  *a7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 208))(v58);
  v31 = v59;
  if (v59)
  {
    v32 = (unint64_t *)&v59->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v58 = 0;
  v59 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v63 + 232))(&v56);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v56 + 504))(&v58);
  v34 = v57;
  if (v57)
  {
    v35 = (unint64_t *)&v57->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  *a8 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 192))(v58);
  *a9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 208))(v58);
  v56 = v63;
  v57 = v64;
  if (v64)
  {
    v37 = (unint64_t *)&v64->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *a10 = XMPUtils::GetIXMPOptions(&v56);
  v39 = v57;
  if (v57)
  {
    v40 = (unint64_t *)&v57->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v59;
  if (v59)
  {
    v43 = (unint64_t *)&v59->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v61;
  if (v61)
  {
    v46 = (unint64_t *)&v61->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = 1;
LABEL_62:
  v49 = v64;
  if (v64)
  {
    v50 = (unint64_t *)&v64->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v66;
  if (v66)
  {
    v53 = (unint64_t *)&v66->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v65 = (void (***)(uint64_t *__return_ptr))v67;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  if (SHIBYTE(v69) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
  return v48;
}

void sub_1880A4E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a19 = &a21;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  _Unwind_Resume(a1);
}

uint64_t ChooseIXMPLocalizedText(_QWORD *a1, _DWORD *a2, const char *a3, const char *a4, _QWORD *a5)
{
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  const char *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  size_t v22;
  void *p_p;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const char *v56;
  int v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  size_t v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  size_t v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  const char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t i;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  int v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  size_t v139;
  void *v140;
  uint64_t v141;
  __int128 v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  const char *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  _QWORD *exception;
  _QWORD *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  void *__p;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;

  v172 = 0uLL;
  v10 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 560))(v10);
  __p = 0;
  v170 = 0;
  v171 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "lang");
  if ((*a2 & 0x1000) == 0)
  {
    if (v11)
      v12 = 1;
    else
      v12 = (*a2 & 0x800) == 0;
    if (!v12)
      goto LABEL_176;
    v13 = "Localized text array is not alt-text";
LABEL_248:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  if (!v11)
  {
LABEL_176:
    v120 = 0;
    goto LABEL_177;
  }
  v161 = a5;
  v14 = 1;
  v13 = "Alt-text array item is not simple";
  do
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 656))(&v168, *a1, v14);
    v15 = v168;
    v168 = 0uLL;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
    v172 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
    if (*((_QWORD *)&v168 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v172 + 40))(v172) != 1)
      goto LABEL_248;
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v172 + 184))(v172))
      goto LABEL_247;
    v22 = strlen((const char *)xmlNameSpace);
    if (v171 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v171 >= 0)
      v24 = HIBYTE(v171);
    else
      v24 = v170;
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, size_t, void *, uint64_t))(*(_QWORD *)v172 + 128))(&v168, v172, xmlNameSpace, v22, p_p, v24);
    v25 = v168;
    if (*((_QWORD *)&v168 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
      }
    }
    if (!(_QWORD)v25)
    {
LABEL_247:
      v13 = "Alt-text array item has no language qualifier";
      goto LABEL_248;
    }
    ++v14;
  }
  while (v14 <= v11);
  v168 = 0uLL;
  v28 = 1;
  v167 = 0uLL;
  do
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 656))(&v166, *a1, v28);
    v29 = v166;
    v166 = 0uLL;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
    v172 = v29;
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v172 + 112))(&v162);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v162 + 48))(&v164);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v164 + 232))(&v166);
    v36 = v166;
    v166 = 0uLL;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
    v168 = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v165;
    if (v165)
    {
      v44 = (unint64_t *)&v165->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = v163;
    if (v163)
    {
      v47 = (unint64_t *)&v163->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v172 + 232))(&v166);
    v49 = v166;
    v166 = 0uLL;
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
    v167 = v49;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
    v56 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 192))(v166);
    v57 = strcmp(v56, a4);
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (!v57)
    {
      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v161, (uint64_t *)&v172);
      v120 = 1;
      goto LABEL_187;
    }
    ++v28;
  }
  while (v28 <= v11);
  if (*a3)
  {
    v61 = strlen(a3);
    v62 = 1;
    while (1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 656))(&v166, *a1, v62);
      v63 = v166;
      v166 = 0uLL;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
      v172 = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = strlen((const char *)xmlNameSpace);
      if (v171 >= 0)
        v71 = &__p;
      else
        v71 = __p;
      if (v171 >= 0)
        v72 = HIBYTE(v171);
      else
        v72 = v170;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t, void *, uint64_t))(*(_QWORD *)v172 + 128))(&v164, v172, xmlNameSpace, v70, v71, v72);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v164 + 232))(&v166);
      v73 = v166;
      v166 = 0uLL;
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v168 = v73;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = v165;
      if (v165)
      {
        v81 = (unint64_t *)&v165->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
      v83 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 192))(v166);
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v85 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
      v87 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 208))(v166);
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
      if (v87 >= v61 && !strncmp(v83, a3, v61) && (v87 == v61 || v83[v61] == 45))
        break;
      if (++v62 > v11)
        goto LABEL_131;
    }
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v161, (uint64_t *)&v172);
    v131 = v62 + 1;
    if (v62 + 1 <= v11)
    {
      while (1)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 656))(&v166, *a1, v131);
        v132 = v166;
        v166 = 0uLL;
        v133 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
        v172 = v132;
        if (v133)
        {
          v134 = (unint64_t *)&v133->__shared_owners_;
          do
            v135 = __ldaxr(v134);
          while (__stlxr(v135 - 1, v134));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
            std::__shared_weak_count::__release_weak(v133);
          }
        }
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v138 = __ldaxr(v137);
          while (__stlxr(v138 - 1, v137));
          if (!v138)
          {
            ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
            std::__shared_weak_count::__release_weak(v136);
          }
        }
        v139 = strlen((const char *)xmlNameSpace);
        if (v171 >= 0)
          v140 = &__p;
        else
          v140 = __p;
        if (v171 >= 0)
          v141 = HIBYTE(v171);
        else
          v141 = v170;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t, void *, uint64_t))(*(_QWORD *)v172 + 128))(&v164, v172, xmlNameSpace, v139, v140, v141);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v164 + 232))(&v166);
        v142 = v166;
        v166 = 0uLL;
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
        v168 = v142;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v146 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v147 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v149 = v165;
        if (v165)
        {
          v150 = (unint64_t *)&v165->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
        v152 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 192))(v166);
        v153 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v154 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v155 = __ldaxr(v154);
          while (__stlxr(v155 - 1, v154));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
            std::__shared_weak_count::__release_weak(v153);
          }
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
        v156 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 208))(v166);
        v157 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
        if (*((_QWORD *)&v166 + 1))
        {
          v158 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 - 1, v158));
          if (!v159)
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
        }
        if (v156 >= v61 && !strncmp(v152, a3, v61) && (v156 == v61 || v152[v61] == 45))
          break;
        ++v131;
        v120 = 2;
        if (v131 > v11)
          goto LABEL_187;
      }
      v120 = 3;
    }
    else
    {
      v120 = 2;
    }
  }
  else
  {
LABEL_131:
    for (i = 1; i <= v11; ++i)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a1 + 656))(&v166, *a1, i);
      v92 = v166;
      v166 = 0uLL;
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
      v172 = v92;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v96 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v97 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = strlen((const char *)xmlNameSpace);
      if (v171 >= 0)
        v100 = &__p;
      else
        v100 = __p;
      if (v171 >= 0)
        v101 = HIBYTE(v171);
      else
        v101 = v170;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, size_t, void *, uint64_t))(*(_QWORD *)v172 + 128))(&v164, v172, xmlNameSpace, v99, v100, v101);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v164 + 232))(&v166);
      v102 = v166;
      v166 = 0uLL;
      v103 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
      v168 = v102;
      if (v103)
      {
        v104 = (unint64_t *)&v103->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
      v109 = v165;
      if (v165)
      {
        v110 = (unint64_t *)&v165->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v168 + 504))(&v166);
      v112 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v166 + 192))(v166);
      v113 = strcmp(v112, "x-default");
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
      if (*((_QWORD *)&v166 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      if (v113)
      {
        std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v161, (uint64_t *)&v172);
        v120 = 4;
        goto LABEL_187;
      }
    }
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 656))(&v166, *a1, 1);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v161, &v166);
    v117 = (std::__shared_weak_count *)*((_QWORD *)&v166 + 1);
    if (*((_QWORD *)&v166 + 1))
    {
      v118 = (unint64_t *)(*((_QWORD *)&v166 + 1) + 8);
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = 5;
  }
LABEL_187:
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v167 + 1);
  if (*((_QWORD *)&v167 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v167 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v168 + 1);
  if (*((_QWORD *)&v168 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v168 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
LABEL_177:
  if (SHIBYTE(v171) < 0)
    operator delete(__p);
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
  if (*((_QWORD *)&v172 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  return v120;
}

void sub_1880A5D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a27 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v27 - 96);
  _Unwind_Resume(a1);
}

void XMPMeta2::DeleteLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5)
{
  const char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *exception;
  size_t v26;
  unsigned __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const char *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  const char *v52;
  size_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  const char *v67;
  int v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void (*v79)(uint64_t *__return_ptr, _QWORD, unint64_t);
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  const char *v87;
  const char *v88;
  int v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  __int128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  unsigned __int128 v141;
  unsigned __int128 v142;
  __int128 v143;
  __int128 v144;
  int v145;
  __int128 v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void (***v149)(__int128 *__return_ptr);
  std::__shared_weak_count *v150;
  uint64_t v151[3];
  void *v152[2];
  uint64_t v153;
  void *v154[2];
  uint64_t v155;

  if (!a2 || !a3 || !__s || !a5)
    XMPMeta2::DeleteLocalizedText();
  v154[0] = 0;
  v154[1] = 0;
  v155 = 0;
  std::string::basic_string[abi:ne180100]<0>(v154, __s);
  v152[0] = 0;
  v152[1] = 0;
  v153 = 0;
  std::string::basic_string[abi:ne180100]<0>(v152, a5);
  NormalizeLangValue((unsigned __int8 *)v154);
  v9 = (const char *)v152;
  NormalizeLangValue((unsigned __int8 *)v152);
  if (v155 >= 0)
    v10 = (const char *)v154;
  else
    v10 = (const char *)v154[0];
  if (v153 < 0)
    v9 = (const char *)v152[0];
  memset(v151, 0, sizeof(v151));
  ExpandXPath(a2, a3, v151);
  v149 = 0;
  v150 = 0;
  v147 = 0;
  v148 = 0;
  v146 = 0uLL;
  v145 = 0;
  if ((XMPUtils::FindCnstNode((_QWORD *)this + 50, v151, (std::string::size_type *)&v149, &v145, 0) & 1) != 0)
  {
    (*v149)[31](&v144);
    v146 = v144;
    v11 = (char *)v144;
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 688)] + 560))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 688)]);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 544)] + 248))(&v144);
    v13 = ChooseIXMPLocalizedText(&v144, &v145, v10, v9, &v147);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    if (*((_QWORD *)&v144 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v144 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v147 + 232))(&v143);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v143 + 504))(&v144);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
    if (*((_QWORD *)&v143 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v13 != 1)
      goto LABEL_169;
    if (!v12)
    {
LABEL_31:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMP_Enforce failed: (itemIndex <= arraySize) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-T"
                     "oolkit-SDK/XMPCore/source/XMPMeta2-GetSet.cpp at line 882";
      *((_BYTE *)exception + 16) = 0;
    }
    v20 = 1;
    while (1)
    {
      (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 656))(&v143, v146, v20);
      v21 = v147;
      v22 = v143;
      if (*((_QWORD *)&v143 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
        }
      }
      if ((_QWORD)v22 == v21)
        break;
      if (++v20 > v12)
        goto LABEL_31;
    }
    v143 = 0uLL;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v147 + 184))(v147) & 1) != 0)
    {
      v26 = strlen((const char *)xmlNameSpace);
      (*(void (**)(unsigned __int128 *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(_QWORD *)v147 + 128))(&v141, v147, xmlNameSpace, v26, "lang", -1);
      (*(void (**)(unsigned __int128 *__return_ptr))(*(_QWORD *)v141 + 232))(&v142);
      v27 = v142;
      v142 = 0uLL;
      v143 = v27;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      if (*((_QWORD *)&v141 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      (*(void (**)(unsigned __int128 *__return_ptr))(*(_QWORD *)v143 + 504))(&v142);
      v31 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v142 + 192))(v142);
      v32 = strcmp(v31, "x-default");
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v20 != 1 && !v32)
      {
        v142 = 0uLL;
        v36 = v146;
        (*(void (**)(unsigned __int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 656))(&v142, v146, v20);
        (*(void (**)(unsigned __int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v36 + 656))(&v141, v36, 1);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
        v37 = v141;
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        v141 = v142;
        v142 = __PAIR128__((unint64_t)v38, v37);
        if (*((_QWORD *)&v141 + 1))
        {
          p_shared_owners = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldaxr(p_shared_owners);
          while (__stlxr(v41 - 1, p_shared_owners));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        }
        if (v38)
        {
          v42 = (unint64_t *)&v38->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v142 = 0uLL;
        v20 = 1;
LABEL_109:
        v72 = 2;
        if (v12 < 2)
          goto LABEL_110;
        while (1)
        {
          v141 = 0uLL;
          (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 656))(&v140, v146, v72);
          (*(void (**)(unsigned __int128 *__return_ptr))(*(_QWORD *)v140 + 232))(&v141);
          v84 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
          if (*((_QWORD *)&v140 + 1))
          {
            v85 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v141 + 504))(&v140);
          v87 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v140 + 192))(v140);
          v88 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v144 + 192))(v144);
          v89 = strcmp(v87, v88);
          v90 = v89;
          v91 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
          if (!*((_QWORD *)&v140 + 1))
            goto LABEL_129;
          v92 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
            if (v90)
              goto LABEL_130;
          }
          else
          {
LABEL_129:
            if (v89)
              goto LABEL_130;
          }
          (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 656))(&v140, v146, v72);
          v97 = v140;
          v140 = 0uLL;
          v98 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v97;
          if (v98)
          {
            v99 = (unint64_t *)&v98->__shared_owners_;
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
          if (*((_QWORD *)&v140 + 1))
          {
            v102 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
LABEL_130:
          v94 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
          if (*((_QWORD *)&v141 + 1))
          {
            v95 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          if (!v90)
            goto LABEL_103;
          if (++v72 > v12)
            goto LABEL_110;
        }
      }
      v142 = 0uLL;
      if (!v32)
        goto LABEL_109;
    }
    else
    {
      v142 = 0uLL;
    }
    v44 = v146;
    if (v20 >= 2)
    {
      v141 = 0uLL;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v146 + 656))(&v138, v146, 1);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v138 + 232))(&v140);
      (*(void (**)(unsigned __int128 *__return_ptr))(*(_QWORD *)v140 + 504))(&v141);
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = v139;
      if (v139)
      {
        v49 = (unint64_t *)&v139->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v141 + 192))(v141);
      v52 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v144 + 192))(v144);
      if (strcmp(v51, v52))
        goto LABEL_97;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v146 + 656))(&v136, v146, 1);
      v53 = strlen((const char *)xmlNameSpace);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, size_t, const char *, uint64_t))(*(_QWORD *)v136 + 128))(&v138, v136, xmlNameSpace, v53, "lang", -1);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v138 + 232))(&v140);
      v54 = v140;
      v140 = 0uLL;
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
      v143 = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v139;
      if (v139)
      {
        v62 = (unint64_t *)&v139->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = v137;
      if (v137)
      {
        v65 = (unint64_t *)&v137->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v143 + 504))(&v140);
      v67 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v140 + 192))(v140);
      v68 = strcmp(v67, "x-default");
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (!v68)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v146 + 656))(&v140, v146, 1);
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)&v142, &v140);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v140);
        v72 = 1;
      }
      else
      {
LABEL_97:
        v72 = 0;
      }
      v73 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      if (*((_QWORD *)&v141 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
      }
LABEL_103:
      if (v72)
      {
LABEL_110:
        v79 = *(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 680);
        if (v20 >= v72)
        {
          v79(&v128, v146, v20);
          v104 = v129;
          if (v129)
          {
            v105 = (unint64_t *)&v129->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 680))(&v126, v146, v72);
          v76 = v127;
          if (!v127)
            goto LABEL_159;
          v107 = (unint64_t *)&v127->__shared_owners_;
          do
            v78 = __ldaxr(v107);
          while (__stlxr(v78 - 1, v107));
        }
        else
        {
          v79(&v132, v146, v72);
          v80 = v133;
          if (v133)
          {
            v81 = (unint64_t *)&v133->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v146 + 680))(&v130, v146, v20);
          v76 = v131;
          if (!v131)
            goto LABEL_159;
          v83 = (unint64_t *)&v131->__shared_owners_;
          do
            v78 = __ldaxr(v83);
          while (__stlxr(v78 - 1, v83));
        }
        goto LABEL_157;
      }
      v44 = v146;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v44 + 680))(&v134, v44, v20);
    v76 = v135;
    if (!v135)
    {
LABEL_159:
      v108 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      v111 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
      if (*((_QWORD *)&v143 + 1))
      {
        v112 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
        do
          v113 = __ldaxr(v112);
        while (__stlxr(v113 - 1, v112));
        if (!v113)
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
LABEL_169:
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
      if (*((_QWORD *)&v144 + 1))
      {
        v115 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v117 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
      {
        v118 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
      goto LABEL_179;
    }
    v77 = (unint64_t *)&v135->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
LABEL_157:
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
    goto LABEL_159;
  }
LABEL_179:
  v120 = v148;
  if (v148)
  {
    v121 = (unint64_t *)&v148->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v150;
  if (v150)
  {
    v124 = (unint64_t *)&v150->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  v149 = (void (***)(__int128 *__return_ptr))v151;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
  if (SHIBYTE(v153) < 0)
    operator delete(v152[0]);
  if (SHIBYTE(v155) < 0)
    operator delete(v154[0]);
}

void sub_1880A6ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v31 - 176);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v31 - 152);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v31 - 136);
  *(_QWORD *)(v31 - 136) = v31 - 120;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 136));
  if (*(char *)(v31 - 73) < 0)
    operator delete(*(void **)(v31 - 96));
  if (*(char *)(v31 - 49) < 0)
    operator delete(*(void **)(v31 - 72));
  _Unwind_Resume(a1);
}

void XMPMeta2::SetLocalizedText(XMPMeta2 *this, char *a2, char *a3, char *__s, char *a5, char *a6)
{
  char *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t i;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const char *v47;
  int v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  const char *v52;
  int v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  const char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  size_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  int v94;
  int v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  const char *v102;
  const char *v103;
  unint64_t *v104;
  unint64_t v105;
  int v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  int v113;
  const char *v114;
  const char *v115;
  unint64_t *v116;
  unint64_t v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  int v121;
  unint64_t *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *size;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  const char *v152;
  const char *v153;
  int v154;
  int v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  char *v166;
  unint64_t *v167;
  unint64_t v168;
  int v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  int v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *exception;
  _QWORD *v184;
  _QWORD *v185;
  __int128 v186;
  __int128 v187;
  char *v188;
  std::__shared_weak_count *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  std::string v196;
  _BYTE v197[32];
  int IXMPOptions;
  __int128 v199;
  std::string::size_type v200;
  std::__shared_weak_count *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205[2];
  uint64_t v206;
  void *v207[2];
  uint64_t v208;

  if (!a2 || !a3 || !__s || !a5)
    XMPMeta2::SetLocalizedText();
  v207[0] = 0;
  v207[1] = 0;
  v208 = 0;
  std::string::basic_string[abi:ne180100]<0>(v207, __s);
  v205[0] = 0;
  v205[1] = 0;
  v206 = 0;
  std::string::basic_string[abi:ne180100]<0>(v205, a5);
  NormalizeLangValue((unsigned __int8 *)v207);
  v11 = (char *)v205;
  NormalizeLangValue((unsigned __int8 *)v205);
  if (v208 >= 0)
    v12 = (const char *)v207;
  else
    v12 = (const char *)v207[0];
  if (v206 < 0)
    v11 = (char *)v205[0];
  v202 = 0;
  v203 = 0;
  v204 = 0;
  ExpandXPath(a2, a3, &v202);
  v200 = 0;
  v201 = 0;
  v199 = 0uLL;
  v13 = (_QWORD *)((char *)this + 400);
  IXMPOptions = 0;
  if ((XMPUtils::FindCnstNode(v13, &v202, &v200, 0, 0) & 1) == 0)
  {
    memset(v197, 0, sizeof(v197));
    v14 = v203;
    if (*(char *)(v203 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v197, *(const std::string::value_type **)(v203 - 32), *(_QWORD *)(v203 - 24));
    }
    else
    {
      v15 = *(_OWORD *)(v203 - 32);
      *(_QWORD *)&v197[16] = *(_QWORD *)(v203 - 16);
      *(_OWORD *)v197 = v15;
    }
    *(_DWORD *)&v197[24] = *(_DWORD *)(v14 - 8);
    memset(&v196, 0, sizeof(v196));
    if ((v197[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v197, *(std::string::size_type *)&v197[8]);
    else
      v196 = *(std::string *)v197;
    LODWORD(v195) = 0;
    if ((XMPUtils::FindNode(v13, &v202, 1, 0xA00u, (char *)&v200, &v195, 0) & 1) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "Failure creating array node";
      *((_BYTE *)exception + 16) = 0;
    }
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    if ((v197[23] & 0x80000000) != 0)
      operator delete(*(void **)v197);
  }
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v200 + 248))(v197);
  v16 = *(_QWORD *)v197;
  v199 = *(_OWORD *)v197;
  if (*(_QWORD *)v197)
    v16 = *(_QWORD *)v197 + *(_QWORD *)(**(_QWORD **)v197 - 544);
  *(_QWORD *)v197 = v16;
  if (*(_QWORD *)&v197[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  IXMPOptions = XMPUtils::GetIXMPOptions(v197);
  v19 = *(std::__shared_weak_count **)&v197[8];
  if (*(_QWORD *)&v197[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (char *)v199;
  v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) + 560))(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688));
  if ((IXMPOptions & 0x1000) == 0)
  {
    if (v23)
      v24 = 1;
    else
      v24 = (IXMPOptions & 0x800) == 0;
    if (v24)
    {
      v184 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v184 = 102;
      v184[1] = "Localized text array is not alt-text";
      *((_BYTE *)v184 + 16) = 0;
    }
    IXMPOptions |= 0x1000u;
  }
  *(_OWORD *)v197 = 0uLL;
  *(_OWORD *)&v196.__r_.__value_.__l.__data_ = 0uLL;
  v25 = (*(uint64_t (**)(char *))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 688)] + 560))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 688)]);
  if (!v25)
  {
    v27 = 0;
    goto LABEL_115;
  }
  v26 = v25;
  v27 = 0;
  for (i = 1; i <= v26; ++i)
  {
    v195 = 0uLL;
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v199 + 656))(&v195, v199, i);
    v194 = v195;
    if (*((_QWORD *)&v195 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    if ((XMPUtils::GetIXMPOptions(&v194) & 0x40) == 0)
      __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1011, "(((XMPUtils::GetIXMPOptions(currItem)) & kXMP_PropHasLang) != 0)");
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v195 + 184))(v195) & 1) == 0)
      goto LABEL_297;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v195 + 112))(&v192);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v192 + 48))(&v193);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v193 + 232))(&v194);
    v34 = v194;
    v194 = 0uLL;
    v35 = *(std::__shared_weak_count **)&v197[8];
    *(_OWORD *)v197 = v34;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    if (*((_QWORD *)&v193 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    if (*((_QWORD *)&v192 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*(_QWORD *)v197 + *(_QWORD *)(**(_QWORD **)v197 - 544))
                                                   + 72))(&v194);
    v47 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v194 + 192))(v194);
    v48 = strcmp(v47, "lang");
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v48)
    {
LABEL_297:
      v182 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v182 = 102;
      v182[1] = "Language qualifier must be first";
      *((_BYTE *)v182 + 16) = 0;
    }
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v197 + 504))(&v194);
    v52 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v194 + 192))(v194);
    v53 = strcmp(v52, "x-default");
    v54 = v53;
    v55 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v56 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
        if (v54)
          goto LABEL_82;
LABEL_81:
        std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v196, (uint64_t *)&v195);
        v27 = 1;
        goto LABEL_82;
      }
    }
    if (!v53)
      goto LABEL_81;
LABEL_82:
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
    if (*((_QWORD *)&v195 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (!v54)
      break;
  }
  if (i != 1 && (v27 & 1) != 0)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v197 + 504))(&v195);
    v61 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v195 + 192))(v195);
    if (strcmp(v61, "x-default"))
      __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1028, "(strcmp((firstQualifier->GetValue()->c_str()),(\"x-default\")) == 0)");
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
    if (*((_QWORD *)&v195 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)v199 + 656))(&v193, v199, i);
    v65 = strlen((const char *)xmlNameSpace);
    (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, size_t, const char *, uint64_t))(*(_QWORD *)v193 + 128))(&v194, v193, xmlNameSpace, v65, "lang", -1);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v194 + 232))(&v195);
    v66 = v195;
    v195 = 0uLL;
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
    if (*((_QWORD *)&v194 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        v186 = v66;
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        v66 = v186;
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    if (*((_QWORD *)&v193 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        v187 = v66;
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
        v66 = v187;
      }
    }
    v73 = *(std::__shared_weak_count **)&v197[8];
    *(_OWORD *)v197 = v66;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
LABEL_115:
  v195 = 0uLL;
  v194 = 0uLL;
  v193 = 0uLL;
  if (v196.__r_.__value_.__r.__words[0])
  {
    if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v196.__r_.__value_.__l.__data_ + 40))(v196.__r_.__value_.__r.__words[0]) == 1)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v196.__r_.__value_.__l.__data_ + 232))(&v190);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v190 + 504))(&v192);
      v76 = v192;
      v192 = 0uLL;
      v194 = v76;
      v77 = v191;
      if (v191)
      {
        v78 = (unint64_t *)&v191->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
    }
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v199 + *(_QWORD *)(*(_QWORD *)v199 - 544)) + 248))(&v192);
  v80 = ChooseIXMPLocalizedText(&v192, &IXMPOptions, v12, v11, &v195);
  v81 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if ((_QWORD)v195 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v195 + 40))(v195) == 1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v195 + 232))(&v190);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v190 + 504))(&v192);
    v84 = v192;
    v192 = 0uLL;
    v85 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
    v193 = v84;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    if (*((_QWORD *)&v192 + 1))
    {
      v89 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v91 = v191;
    if (v191)
    {
      v92 = (unint64_t *)&v191->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  v94 = strcmp(v11, "x-default");
  v95 = v94;
  switch(v80)
  {
    case 0:
      AppendIXMPLangItem(&v199, "x-default", a6);
      if (v95)
        AppendIXMPLangItem(&v199, v11, a6);
      goto LABEL_193;
    case 1:
      if (!v94)
      {
        if (v196.__r_.__value_.__r.__words[0] == (_QWORD)v195)
          v144 = v27 & (v196.__r_.__value_.__r.__words[0] != 0);
        else
          v144 = 0;
        if ((v144 & 1) == 0)
          __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 1065, "xdItem && haveXDefault && (xdItem.get() == itemNode.get())");
        v145 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) + 560))(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688));
        if (!v145)
        {
LABEL_285:
          v192 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
          if (v196.__r_.__value_.__l.__size_)
          {
            v176 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
          }
          v178 = XMPUtils::GetIXMPOptions(&v192);
          XMPUtils::SetNode(&v196, a6, v178);
          v179 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v180 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
          goto LABEL_193;
        }
        v146 = v145;
        v147 = 1;
        while (1)
        {
          v192 = 0uLL;
          (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v199 + 656))(&v190, v199, v147);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v190 + 232))(&v192);
          v148 = v191;
          if (v191)
          {
            v149 = (unint64_t *)&v191->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
            }
          }
          if ((_QWORD)v192)
            v151 = v192 + *(_QWORD *)(*(_QWORD *)v192 - 544);
          else
            v151 = 0;
          if (v151 == v196.__r_.__value_.__r.__words[0])
            goto LABEL_255;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v192 + 504))(&v190);
          v152 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v190 + 192))(v190);
          v153 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v194 + 192))(v194);
          v154 = strcmp(v152, v153);
          v155 = v154;
          v156 = v191;
          if (!v191)
            goto LABEL_254;
          v157 = (unint64_t *)&v191->__shared_owners_;
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
            if (!v155)
            {
LABEL_263:
              v162 = (_QWORD *)v192;
              if ((_QWORD)v192)
                v163 = v192 + *(_QWORD *)(*(_QWORD *)v192 - 544);
              else
                v163 = 0;
              v190 = v163;
              v191 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
              if (*((_QWORD *)&v192 + 1))
              {
                v164 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
                do
                  v165 = __ldxr(v164);
                while (__stxr(v165 + 1, v164));
              }
              if (v162)
                v166 = (char *)v162 + *(_QWORD *)(*v162 - 544);
              else
                v166 = 0;
              v188 = v166;
              v189 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
              if (*((_QWORD *)&v192 + 1))
              {
                v167 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
                do
                  v168 = __ldxr(v167);
                while (__stxr(v168 + 1, v167));
              }
              v169 = XMPUtils::GetIXMPOptions(&v188);
              XMPUtils::SetNode(&v190, a6, v169);
              v170 = v189;
              if (v189)
              {
                v171 = (unint64_t *)&v189->__shared_owners_;
                do
                  v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                  std::__shared_weak_count::__release_weak(v170);
                }
              }
              v173 = v191;
              if (v191)
              {
                v174 = (unint64_t *)&v191->__shared_owners_;
                do
                  v175 = __ldaxr(v174);
                while (__stlxr(v175 - 1, v174));
                if (!v175)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v173);
                }
              }
            }
          }
          else
          {
LABEL_254:
            if (!v154)
              goto LABEL_263;
          }
LABEL_255:
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
          if (*((_QWORD *)&v192 + 1))
          {
            v160 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          if (++v147 > v146)
            goto LABEL_285;
        }
      }
      if (v196.__r_.__value_.__r.__words[0] == (_QWORD)v195)
        v113 = 0;
      else
        v113 = v27 & (v196.__r_.__value_.__r.__words[0] != 0);
      if (v113 == 1)
      {
        v114 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v194 + 192))(v194);
        v115 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v193 + 192))(v193);
        if (!strcmp(v114, v115))
        {
          v192 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
          if (v196.__r_.__value_.__l.__size_)
          {
            v116 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
          }
          v118 = XMPUtils::GetIXMPOptions(&v192);
          XMPUtils::SetNode(&v196, a6, v118);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v192);
        }
      }
      v192 = v195;
      if (*((_QWORD *)&v195 + 1))
      {
        v119 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v120 = __ldxr(v119);
        while (__stxr(v120 + 1, v119));
      }
      v121 = XMPUtils::GetIXMPOptions(&v192);
      XMPUtils::SetNode(&v195, a6, v121);
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
      if (!*((_QWORD *)&v192 + 1))
        goto LABEL_188;
      v122 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v112 = __ldaxr(v122);
      while (__stlxr(v112 - 1, v122));
LABEL_187:
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
        if ((v27 & 1) != 0)
          goto LABEL_193;
      }
      else
      {
LABEL_188:
        if ((v27 & 1) != 0)
          goto LABEL_193;
      }
LABEL_191:
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) + 560))(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) == 1)
        AppendIXMPLangItem(&v199, "x-default", a6);
LABEL_193:
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v193 + 1);
      if (*((_QWORD *)&v193 + 1))
      {
        v124 = (unint64_t *)(*((_QWORD *)&v193 + 1) + 8);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v194 + 1);
      if (*((_QWORD *)&v194 + 1))
      {
        v127 = (unint64_t *)(*((_QWORD *)&v194 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v129 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
      if (*((_QWORD *)&v195 + 1))
      {
        v130 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      size = (std::__shared_weak_count *)v196.__r_.__value_.__l.__size_;
      if (v196.__r_.__value_.__l.__size_)
      {
        v133 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v135 = *(std::__shared_weak_count **)&v197[8];
      if (*(_QWORD *)&v197[8])
      {
        v136 = (unint64_t *)(*(_QWORD *)&v197[8] + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v138 = (std::__shared_weak_count *)*((_QWORD *)&v199 + 1);
      if (*((_QWORD *)&v199 + 1))
      {
        v139 = (unint64_t *)(*((_QWORD *)&v199 + 1) + 8);
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
      v141 = v201;
      if (v201)
      {
        v142 = (unint64_t *)&v201->__shared_owners_;
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
      *(_QWORD *)v197 = &v202;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v197);
      if (SHIBYTE(v206) < 0)
        operator delete(v205[0]);
      if (SHIBYTE(v208) < 0)
        operator delete(v207[0]);
      return;
    case 2:
      if (v196.__r_.__value_.__r.__words[0] != 0 && (v27 & 1) != 0 && v196.__r_.__value_.__r.__words[0] != (_QWORD)v195)
      {
        v102 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v194 + 192))(v194);
        v103 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v193 + 192))(v193);
        if (!strcmp(v102, v103))
        {
          v192 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
          if (v196.__r_.__value_.__l.__size_)
          {
            v104 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          v106 = XMPUtils::GetIXMPOptions(&v192);
          XMPUtils::SetNode(&v196, a6, v106);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v192);
        }
      }
      v192 = v195;
      if (*((_QWORD *)&v195 + 1))
      {
        v107 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v109 = XMPUtils::GetIXMPOptions(&v192);
      XMPUtils::SetNode(&v195, a6, v109);
      v110 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
      if (!*((_QWORD *)&v192 + 1))
        goto LABEL_188;
      v111 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      goto LABEL_187;
    case 3:
    case 5:
      AppendIXMPLangItem(&v199, v11, a6);
      if (!(v27 & 1 | (v95 == 0)))
        goto LABEL_191;
      goto LABEL_193;
    case 4:
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) + 560))(v199 + *(_QWORD *)(*(_QWORD *)v199 - 688)) == 1)
      {
        v192 = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
        if (v196.__r_.__value_.__l.__size_)
        {
          v96 = (unint64_t *)(v196.__r_.__value_.__l.__size_ + 8);
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        v98 = XMPUtils::GetIXMPOptions(&v192);
        XMPUtils::SetNode(&v196, a6, v98);
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
        if (*((_QWORD *)&v192 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      AppendIXMPLangItem(&v199, v11, a6);
      goto LABEL_188;
    default:
      v185 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v185 = 9;
      v185[1] = "Unexpected result from ChooseLocalizedText";
      *((_BYTE *)v185 + 16) = 0;
  }
}

void sub_1880A7F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v39 - 176);
  __p = (void *)(v39 - 160);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v39 - 113) < 0)
    operator delete(*(void **)(v39 - 136));
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void AppendIXMPLangItem(_QWORD *a1, char *a2, char *a3)
{
  AdobeXMPCore::ISimpleNode_v1 *v6;
  const char *v7;
  AdobeXMPCore_Int::IUTF8String_I *v8;
  const char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  const char *v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  const char *v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  char *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;

  v77 = 0;
  v78 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 88))(&v75);
  v6 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 192))(v75);
  (*(void (**)(char **__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 88))(&v73);
  v7 = (const char *)(*(uint64_t (**)(char *))(*(_QWORD *)v73 + 208))(v73);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 72))(&v71);
  v8 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 192))(v71);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 544)) + 72))(&v69);
  v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 208))(v69);
  AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v6, v7, v9, (const char *)0xFFFFFFFFFFFFFFFFLL, v8, (AdobeXMPCore_Int::IUTF8String_I *)"", &v77);
  v10 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v72;
  if (v72)
  {
    v14 = (unint64_t *)&v72->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v74;
  if (v74)
  {
    v17 = (unint64_t *)&v74->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v76;
  if (v76)
  {
    v20 = (unint64_t *)&v76->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v75 = 0;
  v76 = 0;
  v22 = (const char *)strlen((const char *)xmlNameSpace);
  AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)xmlNameSpace, v22, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"lang", (AdobeXMPCore_Int::IUTF8String_I *)"", &v75);
  if (v77)
    v23 = (char *)v77 + *(_QWORD *)(*v77 - 544);
  else
    v23 = 0;
  v73 = v23;
  v74 = v78;
  if (v78)
  {
    v24 = (unint64_t *)&v78->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  XMPUtils::SetNode(&v73, a3, 80);
  v26 = v74;
  if (v74)
  {
    v27 = (unint64_t *)&v74->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v75)
    v29 = (char *)(v75 + *(_QWORD *)(*(_QWORD *)v75 - 544));
  else
    v29 = 0;
  v73 = v29;
  v74 = v76;
  if (v76)
  {
    v30 = (unint64_t *)&v76->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  XMPUtils::SetNode(&v73, a2, 32);
  v32 = v74;
  if (v74)
  {
    v33 = (unint64_t *)&v74->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (char *)v77 + *(_QWORD *)(*v77 - 544);
  if (v75)
    v36 = (char *)(v75 + *(_QWORD *)(*(_QWORD *)v75 - 544));
  else
    v36 = 0;
  v73 = v36;
  v74 = v76;
  if (v76)
  {
    v37 = (unint64_t *)&v76->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  (*(void (**)(char *, char **))(*(_QWORD *)v35 + 136))(v35, &v73);
  v39 = v74;
  if (v74)
  {
    v40 = (unint64_t *)&v74->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 560))(v42))
    goto LABEL_60;
  (*(void (**)(char **__return_ptr))(*(_QWORD *)v75 + 504))(&v73);
  v43 = (const char *)(*(uint64_t (**)(char *))(*(_QWORD *)v73 + 192))(v73);
  v44 = strcmp(v43, "x-default");
  v45 = v44;
  v46 = v74;
  if (v74)
  {
    v47 = (unint64_t *)&v74->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if (!v45)
        goto LABEL_71;
LABEL_60:
      v49 = *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 688);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 560))(v49);
      v51 = (_QWORD *)*a1;
      if (v77)
        v52 = (char *)v77 + *(_QWORD *)(*v77 - 544);
      else
        v52 = 0;
      v73 = v52;
      v74 = v78;
      if (v78)
      {
        v53 = (unint64_t *)&v78->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      (*(void (**)(_QWORD *, char **, uint64_t))(*v51 + 664))(v51, &v73, v50 + 1);
      v55 = v74;
      if (v74)
      {
        v56 = (unint64_t *)&v74->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        goto LABEL_80;
      }
      goto LABEL_82;
    }
  }
  if (v44)
    goto LABEL_60;
LABEL_71:
  v58 = (_QWORD *)*a1;
  if (v77)
    v59 = (char *)v77 + *(_QWORD *)(*v77 - 544);
  else
    v59 = 0;
  v73 = v59;
  v74 = v78;
  if (v78)
  {
    v60 = (unint64_t *)&v78->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
  }
  (*(void (**)(_QWORD *, char **, uint64_t))(*v58 + 664))(v58, &v73, 1);
  v55 = v74;
  if (v74)
  {
    v62 = (unint64_t *)&v74->__shared_owners_;
    do
      v57 = __ldaxr(v62);
    while (__stlxr(v57 - 1, v62));
LABEL_80:
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
LABEL_82:
  v63 = v76;
  if (v76)
  {
    v64 = (unint64_t *)&v76->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v78;
  if (v78)
  {
    v67 = (unint64_t *)&v78->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_1880A878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void XMPMeta2::DumpObject(XMPMeta2 *this, uint64_t (*a2)(uint64_t, unsigned __int8 *, uint64_t), void *a3)
{
  double DefaultNameSpacePrefixMap;
  char *v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int IXMPOptions;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::string *v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76[2];
  char v77;
  void **v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::string v82;
  __int128 v83;
  __int128 v84;
  void *__p[2];
  uint64_t v86;
  __int128 v87;

  if (!a2)
    XMPMeta2::DumpObject();
  v87 = 0uLL;
  DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v87);
  if (!((unsigned int (*)(void *, const char *, uint64_t, double))a2)(a3, "Dumping XMPMeta object \"", 24, DefaultNameSpacePrefixMap))
  {
    (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 50) + 736))(&v82);
    v7 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v82.__r_.__value_.__l.__data_ + 192))(v82.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    DumpClearString((uint64_t)__p, a2, (uint64_t)a3);
    if (SHIBYTE(v86) < 0)
      operator delete(__p[0]);
    size = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
    if (v82.__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (!a2((uint64_t)a3, "\"  ", 3))
    {
      v11 = (_QWORD *)*((_QWORD *)this + 50);
      if (v11)
        v12 = (char *)v11 + *(_QWORD *)(*v11 - 544);
      else
        v12 = 0;
      v13 = (unint64_t *)*((_QWORD *)this + 51);
      __p[0] = v12;
      __p[1] = v13;
      if (v13)
      {
        v14 = v13 + 1;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      IXMPOptions = XMPUtils::GetIXMPOptions(__p);
      DumpNodeOptions(IXMPOptions, (uint64_t (*)(void *, const char *, uint64_t))a2, a3);
      v17 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v18 = (unint64_t *)((char *)__p[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (!a2((uint64_t)a3, "\n", 1))
      {
        v20 = *((_QWORD *)this + 50) + *(_QWORD *)(**((_QWORD **)this + 50) - 544);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 184))(v20))
        {
          if (a2((uint64_t)a3, "** bad root qualifiers **", 25)
            || a2((uint64_t)a3, "\n", 1))
          {
            goto LABEL_122;
          }
          __p[0] = 0;
          __p[1] = 0;
          (*(void (**)(void **__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 50)
                                                                  + *(_QWORD *)(**((_QWORD **)this + 50) - 544))
                                                      + 112))(__p);
          while (__p[0])
          {
            (*(void (**)(void **__return_ptr))(*(_QWORD *)__p[0] + 48))(v76);
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)v76;
            v76[0] = 0;
            v76[1] = 0;
            DumpIXMPPropertyTree(&v82, 3, 0, a2, a3);
            v21 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
            if (v82.__r_.__value_.__l.__size_)
            {
              v22 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            v24 = (std::__shared_weak_count *)v76[1];
            if (v76[1])
            {
              v25 = (unint64_t *)((char *)v76[1] + 8);
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__p[0] + 56))(&v82);
            v27 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
            v28 = (std::__shared_weak_count *)__p[1];
            *(_OWORD *)__p = v27;
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(p_shared_owners);
              while (__stlxr(v30 - 1, p_shared_owners));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            v31 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
            if (v82.__r_.__value_.__l.__size_)
            {
              v32 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
          }
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        }
        __p[1] = 0;
        v86 = 0;
        __p[0] = &__p[1];
        v34 = *((_QWORD *)this + 50) + *(_QWORD *)(**((_QWORD **)this + 50) - 688);
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 560))(v34))
        {
          v84 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*((_QWORD *)this + 50)
                                                                     + *(_QWORD *)(**((_QWORD **)this + 50) - 688))
                                                         + 552))(&v84);
          v35 = v84;
          if ((_QWORD)v84)
          {
            while (1)
            {
              v83 = 0uLL;
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v35 + 48))(&v83);
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v83 + 88))(v76);
              v36 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v76[0] + 192))(v76[0]);
              std::string::basic_string[abi:ne180100]<0>(&v82, v36);
              v37 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__count_unique<std::string>((uint64_t)__p, (const void **)&v82.__r_.__value_.__l.__data_);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v82.__r_.__value_.__l.__data_);
              v38 = (std::__shared_weak_count *)v76[1];
              if (v76[1])
              {
                v39 = (unint64_t *)((char *)v76[1] + 8);
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              if (v37)
                goto LABEL_59;
              if (!a2((uint64_t)a3, "\n", 1) && !a2((uint64_t)a3, "   ", 3))
              {
                memset(&v82, 0, sizeof(v82));
                v47 = v87;
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 88))(&v80);
                v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 192))(v80);
                (*(void (**)(void ***__return_ptr))(*(_QWORD *)v83 + 88))(&v78);
                v49 = (*((uint64_t (**)(void **))*v78 + 26))(v78);
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 88))(v76, v47, v48, v49);
                v50 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v76[0] + 192))(v76[0]);
                std::string::basic_string[abi:ne180100]<0>(&v82, v50);
                v51 = (std::__shared_weak_count *)v76[1];
                if (v76[1])
                {
                  v52 = (unint64_t *)((char *)v76[1] + 8);
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = v79;
                if (v79)
                {
                  v55 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v57 = v81;
                if (v81)
                {
                  v58 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                std::string::append(&v82, ":");
                if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v60 = &v82;
                else
                  v60 = (std::string *)v82.__r_.__value_.__r.__words[0];
                std::string::basic_string[abi:ne180100]<0>(v76, (char *)v60);
                DumpClearString((uint64_t)v76, a2, (uint64_t)a3);
                if (v77 < 0)
                  operator delete(v76[0]);
                if (!a2((uint64_t)a3, "  ", 2))
                {
                  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 88))(&v80);
                  v61 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 192))(v80);
                  std::string::basic_string[abi:ne180100]<0>(v76, v61);
                  DumpClearString((uint64_t)v76, a2, (uint64_t)a3);
                  if (v77 < 0)
                    operator delete(v76[0]);
                  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v80);
                  if (!a2((uint64_t)a3, "  ", 2))
                  {
                    DumpNodeOptions(0x80000000, (uint64_t (*)(void *, const char *, uint64_t))a2, a3);
                    if (!a2((uint64_t)a3, "\n", 1))
                    {
                      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v83 + 88))(&v80);
                      v72 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 192))(v80);
                      std::string::basic_string[abi:ne180100]<0>(v76, v72);
                      v78 = v76;
                      *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)__p, (const void **)v76, (uint64_t)&std::piecewise_construct, (_OWORD **)&v78)+ 56) = 1;
                      if (v77 < 0)
                        operator delete(v76[0]);
                      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v80);
                      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v82.__r_.__value_.__l.__data_);
LABEL_59:
                      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v83;
                      if (*((_QWORD *)&v83 + 1))
                      {
                        v41 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
                        do
                          v42 = __ldxr(v41);
                        while (__stxr(v42 + 1, v41));
                      }
                      DumpIXMPPropertyTree(&v82, 2, 0, a2, a3);
                      v43 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
                      if (v82.__r_.__value_.__l.__size_)
                      {
                        v44 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
                        do
                          v45 = __ldaxr(v44);
                        while (__stlxr(v45 - 1, v44));
                        if (!v45)
                        {
                          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                          std::__shared_weak_count::__release_weak(v43);
                        }
                      }
                      v46 = 1;
                      goto LABEL_98;
                    }
                  }
                }
                if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v82.__r_.__value_.__l.__data_);
              }
              v46 = 0;
LABEL_98:
              v62 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
              if (*((_QWORD *)&v83 + 1))
              {
                v63 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
                do
                  v64 = __ldaxr(v63);
                while (__stlxr(v64 - 1, v63));
                if (!v64)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
              if (v46)
              {
                (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v84 + 56))(&v82);
                v65 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
                *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
                v66 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
                v84 = v65;
                if (v66)
                {
                  v67 = (unint64_t *)&v66->__shared_owners_;
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v69 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
                if (v82.__r_.__value_.__l.__size_)
                {
                  v70 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
                v35 = v84;
                if ((_QWORD)v84)
                  continue;
              }
              break;
            }
          }
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v84);
        }
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)__p, (char *)__p[1]);
      }
    }
  }
LABEL_122:
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1880A91B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,void *a31,char *a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(a20);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)&a31, a32);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v36 - 112);
  _Unwind_Resume(a1);
}

void DumpIXMPPropertyTree(_QWORD *a1, int a2, uint64_t a3, uint64_t (*a4)(uint64_t, unsigned __int8 *, uint64_t), void *a5)
{
  unsigned int IXMPOptions;
  double DefaultNameSpacePrefixMap;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  const std::string::value_type *v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  _BOOL4 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const char *v43;
  int v44;
  char *v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  _BOOL4 v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  const char *v60;
  int v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const char *v65;
  int v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  int v86;
  uint64_t v87;
  int v88;
  const char *v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  __n128 v101;
  __int128 v102;
  std::string v103;
  void *__p[2];
  std::string::size_type v105;
  void *v106;
  size_t v107;
  uint64_t v108;
  __int128 v109;
  __n128 v110;
  char __str[16];
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (!*a1)
    return;
  *(_OWORD *)__str = 0u;
  v112 = 0u;
  IXMPOptions = XMPUtils::GetIXMPOptions(a1);
  v109 = 0uLL;
  DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v109);
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v12 = v109;
  (*(void (**)(std::string *__return_ptr, double))(*(_QWORD *)*a1 + 88))(&v103, DefaultNameSpacePrefixMap);
  v13 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 192))(v103.__r_.__value_.__r.__words[0]);
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 88))(&v110);
  v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v110.n128_u64[0] + 208))(v110.n128_u64[0]);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(__p, v12, v13, v14);
  v15 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 192))(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v106, v15);
  v16 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v110.n128_u64[1];
  if (v110.n128_u64[1])
  {
    v20 = (unint64_t *)(v110.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  size = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
  if (v103.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v105 = 0;
  if (v108 >= 0)
    v25 = HIBYTE(v108);
  else
    v25 = v107;
  memset(&v103, 0, sizeof(v103));
  v26 = &v103;
  std::string::basic_string[abi:ne180100]((uint64_t)&v103, v25 + 1);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v26 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (v108 >= 0)
      v27 = &v106;
    else
      v27 = v106;
    memmove(v26, v27, v25);
  }
  *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 58;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v110);
  v28 = (const std::string::value_type *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v110.n128_u64[0]
                                                                                     + 192))(v110.n128_u64[0]);
  v29 = std::string::append(&v103, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v105 = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  v31 = (std::__shared_weak_count *)v110.n128_u64[1];
  if (v110.n128_u64[1])
  {
    v32 = (unint64_t *)(v110.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v103.__r_.__value_.__l.__data_);
    if (!a2)
      goto LABEL_39;
LABEL_36:
    v34 = a2;
    while (!a4((uint64_t)a5, "   ", 3))
    {
      if (!--v34)
        goto LABEL_39;
    }
    goto LABEL_187;
  }
  if (a2)
    goto LABEL_36;
LABEL_39:
  if (a3)
  {
    if (a4((uint64_t)a5, "[", 1))
      goto LABEL_187;
    snprintf(__str, 0x20uLL, "%ld", a3);
    HIBYTE(v112) = 0;
    v35 = strlen(__str);
    if (a4((uint64_t)a5, (unsigned __int8 *)__str, v35) || a4((uint64_t)a5, "]", 1))
      goto LABEL_187;
  }
  else
  {
    if ((IXMPOptions & 0x20) != 0 && a4((uint64_t)a5, "? ", 2))
      goto LABEL_187;
    DumpClearString((uint64_t)__p, a4, (uint64_t)a5);
  }
  if ((IXMPOptions & 0x1F00) != 0)
    goto LABEL_198;
  if (a4((uint64_t)a5, " = \"", 4))
    goto LABEL_187;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v110);
  v101 = v110;
  (*(void (**)(__int128 *__return_ptr, __n128))(*(_QWORD *)v110.n128_u64[0] + 504))(&v102, v110);
  v45 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v102 + 192))(v102);
  std::string::basic_string[abi:ne180100]<0>(&v103, v45);
  DumpClearString((uint64_t)&v103, a4, (uint64_t)a5);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v102);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v101);
  if (a4((uint64_t)a5, "\"", 1))
    goto LABEL_187;
  if (IXMPOptions)
  {
LABEL_198:
    if (a4((uint64_t)a5, "  ", 2))
      goto LABEL_187;
    DumpNodeOptions(IXMPOptions, (uint64_t (*)(void *, const char *, uint64_t))a4, a5);
    v36 = (IXMPOptions & 0x40) == 0;
    if ((IXMPOptions & 0x40) != 0)
    {
      v110 = 0uLL;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 112))(&v103);
      v101 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
      (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 48))(&v103, *(__n128 *)&v103.__r_.__value_.__l.__data_);
      v37 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
      v102 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 232))(&v103);
      v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v101.n128_u64[1];
      if (v101.n128_u64[1])
      {
        v41 = (unint64_t *)(v101.n128_u64[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1)
        || ((*(void (**)(std::string *__return_ptr))(*(_QWORD *)(v110.n128_u64[0]
                                                                          + *(_QWORD *)(*(_QWORD *)v110.n128_u64[0]
                                                                                      - 544))
                                                              + 72))(&v103),
            v43 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                  + 192))(v103.__r_.__value_.__r.__words[0]),
            v44 = strcmp(v43, "lang"),
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v103),
            v44))
      {
        if (a4((uint64_t)a5, "  ** bad lang flag **", 21))
          goto LABEL_186;
      }
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
    }
    if ((IXMPOptions & 0x1F00) != 0)
    {
      if ((IXMPOptions & 0x200) != 0)
      {
        if ((IXMPOptions & 0x100) == 0)
          goto LABEL_85;
      }
      else if ((IXMPOptions & 0x1F00) == 0x100)
      {
        goto LABEL_85;
      }
      v46 = a4((uint64_t)a5, "  ** bad comp flags **", 22);
      goto LABEL_84;
    }
  }
  else
  {
    v36 = 1;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 2)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 248))(&v103);
    v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
    v47 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(v103.__r_.__value_.__r.__words[0]
                                                                        + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                    - 688))
                                                            + 560))(v103.__r_.__value_.__r.__words[0] + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_ - 688));
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
  }
  else
  {
    v47 = 0;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 4)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 240))(&v103);
    v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
    v47 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(v103.__r_.__value_.__r.__words[0]
                                                                        + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                    - 688))
                                                            + 560))(v103.__r_.__value_.__r.__words[0] + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_ - 688));
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
  }
  if (v47)
  {
    v46 = a4((uint64_t)a5, "  ** bad children **", 20);
LABEL_84:
    if (v46)
      goto LABEL_187;
  }
LABEL_85:
  if (!a4((uint64_t)a5, "\n", 1))
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1))
    {
      v110 = 0uLL;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 112))(&v103);
      v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
      v48 = v103.__r_.__value_.__r.__words[0];
      if (v103.__r_.__value_.__r.__words[0])
      {
        v49 = 0;
        while (1)
        {
          v102 = 0uLL;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v48 + 48))(&v103);
          v102 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
          v50 = XMPUtils::GetIXMPOptions(&v102);
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 56))(&v103);
          v51 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
          v101 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
          if (v103.__r_.__value_.__r.__words[0])
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 56))(&v103);
            v100 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v103.__r_.__value_.__l.__data_ + 56))(&v103, *(__n128 *)&v103.__r_.__value_.__l.__data_);
            v52 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
            v53 = v103.__r_.__value_.__r.__words[0] != *a1;
            if (v103.__r_.__value_.__l.__size_)
            {
              v54 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (!v55)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            if (v100)
            {
              v56 = (unint64_t *)&v100->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v51 = (std::__shared_weak_count *)v101.n128_u64[1];
          }
          else
          {
            v53 = 0;
          }
          if (v51)
          {
            v58 = (unint64_t *)&v51->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          if (v53 && a4((uint64_t)a5, "** bad parent link => ", 22))
            break;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 72))(&v103);
          v60 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                + 192))(v103.__r_.__value_.__r.__words[0]);
          v61 = strcmp(v60, "[]");
          v62 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
          if (v103.__r_.__value_.__l.__size_)
          {
            v63 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          if (!v61 && a4((uint64_t)a5, "** bad qual name => ", 20)
            || (v50 & 0x20) == 0 && a4((uint64_t)a5, "** bad qual flag => ", 20))
          {
            break;
          }
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 72))(&v103);
          v65 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                + 192))(v103.__r_.__value_.__r.__words[0]);
          v66 = strcmp(v65, "lang");
          v67 = (std::__shared_weak_count *)v103.__r_.__value_.__l.__size_;
          if (v103.__r_.__value_.__l.__size_)
          {
            v68 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = v49 || v36;
          if (!v66 && v70 && a4((uint64_t)a5, "** bad lang qual => ", 20))
            break;
          DumpIXMPPropertyTree(&v102, (a2 + 2), 0, a4, a5);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
          if (*((_QWORD *)&v102 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v110.n128_u64[0] + 56))(&v103);
          v74 = (std::__shared_weak_count *)v110.n128_u64[1];
          v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
            v48 = v110.n128_u64[0];
          }
          else
          {
            v48 = v103.__r_.__value_.__r.__words[0];
          }
          ++v49;
          if (!v48)
            goto LABEL_142;
        }
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v102);
        goto LABEL_186;
      }
LABEL_142:
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
    }
    v110 = 0uLL;
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 2)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 248))(&v103);
      v101 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(v103.__r_.__value_.__r.__words[0]
                                                                    + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                - 688))
                                                        + 552))(&v103);
      v102 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)&v110, &v102);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v102);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v101);
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 4)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a1 + 240))(&v103);
      v101 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(v103.__r_.__value_.__r.__words[0]
                                                                    + *(_QWORD *)(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                - 688))
                                                        + 552))(&v103);
      v102 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)&v110, &v102);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v102);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v101);
    }
    v77 = v110.n128_u64[0];
    if (v110.n128_u64[0])
    {
      v78 = 0;
      v79 = (a2 + 1);
      while (1)
      {
        v102 = 0uLL;
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v77 + 48))(&v103);
        v102 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
        v80 = XMPUtils::GetIXMPOptions(&v102);
        if (!(_QWORD)v102)
        {
          v88 = 10;
          goto LABEL_169;
        }
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 56))(&v103);
        v81 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
        v82 = *a1;
        if (v103.__r_.__value_.__l.__size_)
        {
          v83 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v81 + 1) + 16))(*((_QWORD *)&v81 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v81 + 1));
          }
        }
        if (((_QWORD)v81 == v82 || !a4((uint64_t)a5, "** bad parent link => ", 22))
          && ((v80 & 0x20) == 0 || !a4((uint64_t)a5, "** bad qual flag => ", 20)))
        {
          if ((IXMPOptions & 0x200) != 0)
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 72))(&v103);
            v87 = v78 + 1;
            v89 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                  + 192))(v103.__r_.__value_.__r.__words[0]);
            v90 = strcmp(v89, "[]");
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v103);
            if (v90 || !a4((uint64_t)a5, "** bad item name => ", 20))
              goto LABEL_164;
          }
          else
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v102 + 72))(&v103);
            v85 = (const char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v103.__r_.__value_.__l.__data_
                                                                                  + 192))(v103.__r_.__value_.__r.__words[0]);
            v86 = strcmp(v85, "[]");
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v103);
            if (v86 || !a4((uint64_t)a5, "** bad field name => ", 21))
            {
              v87 = 0;
LABEL_164:
              DumpIXMPPropertyTree(&v102, v79, v87, a4, a5);
              v88 = 0;
              goto LABEL_169;
            }
          }
        }
        v88 = 1;
LABEL_169:
        v91 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (*((_QWORD *)&v102 + 1))
        {
          v92 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v88 == 10 || !v88)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v110.n128_u64[0] + 56))(&v103);
          v94 = (std::__shared_weak_count *)v110.n128_u64[1];
          v110 = *(__n128 *)&v103.__r_.__value_.__l.__data_;
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
            v77 = v110.n128_u64[0];
          }
          else
          {
            v77 = v103.__r_.__value_.__r.__words[0];
          }
          ++v78;
          if (v77)
            continue;
        }
        break;
      }
    }
LABEL_186:
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v110);
  }
LABEL_187:
  if (SHIBYTE(v105) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v108) < 0)
    operator delete(v106);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
}

void sub_1880AA1F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v36 - 144);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta2::SetErrorCallback(XMPMeta2 *this, unsigned __int8 (*a2)(BOOL (*)(void *, unsigned __int8, int, const char *), void *, unsigned __int8, int, const char *), BOOL (*a3)(void *, unsigned __int8, int, const char *), void *a4, int a5)
{
  char *v5;
  uint64_t v6;

  if (!a2)
    XMPMeta2::SetErrorCallback();
  v5 = (char *)this + 352;
  *((_DWORD *)this + 91) = 0;
  *((_BYTE *)this + 368) = 0;
  *((_QWORD *)this + 47) = a2;
  *((_QWORD *)this + 48) = a3;
  *((_QWORD *)this + 49) = a4;
  *((_DWORD *)this + 90) = a5;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 232))(*((_QWORD *)this + 54));
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v6 + 288))(v6, v5);
}

uint64_t XMPMeta2::ResetErrorCallbackLimit(XMPMeta2 *this, int a2)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)this + 352;
  *((_DWORD *)this + 90) = a2;
  *((_DWORD *)this + 91) = 0;
  *((_BYTE *)this + 368) = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 54) + 232))(*((_QWORD *)this + 54));
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v3 + 288))(v3, v2);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void XMPMeta2::GetProperty()
{
  __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 160, "(schemaNS != 0) && (propName != 0)");
}

{
  __assert_rtn("GetProperty", "XMPMeta2-GetSet.cpp", 161, "(propValue != 0) && (valueSize != 0) && (options != 0)");
}

void XMPMeta2::CountArrayItems()
{
  __assert_rtn("CountArrayItems", "XMPMeta2-GetSet.cpp", 358, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::DoesPropertyExist()
{
  __assert_rtn("DoesPropertyExist", "XMPMeta2-GetSet.cpp", 437, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::SetProperty()
{
  __assert_rtn("SetProperty", "XMPMeta2-GetSet.cpp", 459, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::SetArrayItem()
{
  __assert_rtn("SetArrayItem", "XMPMeta2-GetSet.cpp", 485, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::AppendArrayItem()
{
  __assert_rtn("AppendArrayItem", "XMPMeta2-GetSet.cpp", 516, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta2::SetQualifier()
{
  __assert_rtn("SetQualifier", "XMPMeta2-GetSet.cpp", 572, "(schemaNS != 0) && (propName != 0) && (qualNS != 0) && (qualName != 0)");
}

void XMPMeta2::DeleteProperty()
{
  __assert_rtn("DeleteProperty", "XMPMeta2-GetSet.cpp", 615, "(schemaNS != 0) && (propName != 0)");
}

void XMPMeta2::GetLocalizedText()
{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 812, "(actualLang != 0) && (langSize != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 813, "(itemValue != 0) && (valueSize != 0) && (options != 0)");
}

{
  __assert_rtn("GetLocalizedText", "XMPMeta2-GetSet.cpp", 811, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::DeleteLocalizedText()
{
  __assert_rtn("DeleteLocalizedText", "XMPMeta2-GetSet.cpp", 853, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::SetLocalizedText()
{
  __assert_rtn("SetLocalizedText", "XMPMeta2-GetSet.cpp", 957, "(schemaNS != 0) && (arrayName != 0) && (_genericLang != 0) && (_specificLang != 0)");
}

void XMPMeta2::DumpObject()
{
  __assert_rtn("DumpObject", "XMPMeta2-GetSet.cpp", 1253, "outProc != 0");
}

void XMPMeta2::SetErrorCallback()
{
  __assert_rtn("SetErrorCallback", "XMPMeta2-GetSet.cpp", 1326, "wrapperProc != 0");
}

uint64_t PNG_MetaHandlerCTor(XMPFiles *a1)
{
  uint64_t v2;

  v2 = operator new();
  XMPFileHandler::XMPFileHandler((XMPFileHandler *)v2);
  *(_QWORD *)v2 = &off_1E1BB0AE8;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = 1131;
  *(_BYTE *)(v2 + 20) = 0;
  return v2;
}

void sub_1880AA954(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C4021871BE3);
  _Unwind_Resume(a1);
}

BOOL PNG_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (a1 != 1347307296)
    PNG_CheckFormat();
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) < 8)
    return 0;
  v5[0] = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0, 0);
  (**(void (***)(uint64_t, _QWORD *, uint64_t, _QWORD))a3)(a3, v5, 8, 0);
  return v5[0] == 0xA1A0A0D474E5089;
}

void XMPFileHandler::XMPFileHandler(XMPFileHandler *this)
{
  *(_QWORD *)this = &unk_1E1BAFF48;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 20) = 1;
  *(_DWORD *)((char *)this + 21) = 0;
  *((_QWORD *)this + 4) = -1;
  *((_DWORD *)this + 10) = -1;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  TXMPMeta<std::string>::TXMPMeta((char *)this + 80);
}

void sub_1880AAAC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void XMPFileHandler::~XMPFileHandler(void **this)
{
  *this = &unk_1E1BAFF48;
  TXMPMeta<std::string>::~TXMPMeta(this + 10);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
}

void PNG_MetaHandler::~PNG_MetaHandler(void **this)
{
  XMPFileHandler::~XMPFileHandler(this);
  JUMPOUT(0x18D761C30);
}

uint64_t PNG_MetaHandler::CacheFileData(PNG_MetaHandler *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  *((_BYTE *)this + 21) = 0;
  v2 = *((_QWORD *)this + 1);
  result = *(_QWORD *)(v2 + 232);
  if (result)
  {
    result = PNG_Support::FindAndReadXMPChunk(result, (uint64_t)this + 56, (_QWORD *)this + 4, *(_DWORD *)(v2 + 240) & 1);
    if ((_DWORD)result)
    {
      if (*((char *)this + 79) < 0)
        v4 = *((_QWORD *)this + 8);
      else
        LODWORD(v4) = *((unsigned __int8 *)this + 79);
      *((_DWORD *)this + 10) = v4;
      *((_BYTE *)this + 21) = 1;
    }
  }
  return result;
}

void PNG_MetaHandler::ProcessXMP(PNG_MetaHandler *this)
{
  uint64_t v2;
  char *v3;

  *((_BYTE *)this + 22) = 1;
  v2 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    if (!*((_QWORD *)this + 8))
      return;
  }
  else if (!*((_BYTE *)this + 79))
  {
    return;
  }
  if (!*((_BYTE *)this + 21))
    PNG_MetaHandler::ProcessXMP();
  if ((v2 & 0x80) != 0)
  {
    v3 = (char *)*((_QWORD *)this + 7);
    v2 = *((_QWORD *)this + 8);
  }
  else
  {
    v3 = (char *)this + 56;
  }
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v3, v2, 0);
  *((_BYTE *)this + 21) = 1;
}

void PNG_MetaHandler::UpdateFile(PNG_MetaHandler *this, int a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *exception;
  int64x2_t v8;
  uint64_t v9;
  void (**v10)(PNG_Support::ChunkData *__hidden);
  __int128 v11;
  __int128 v12;
  _QWORD v13[3];
  void **v14;

  if (*((_BYTE *)this + 23))
  {
    if (a2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 2;
      exception[1] = "PNG_MetaHandler::UpdateFile: Safe update not supported";
      *((_BYTE *)exception + 16) = 0;
    }
    if (*((char *)this + 79) < 0)
    {
      v3 = (char *)*((_QWORD *)this + 7);
      v4 = *((_QWORD *)this + 8);
      if (!(_DWORD)v4)
        return;
    }
    else
    {
      v3 = (char *)this + 56;
      v4 = *((unsigned __int8 *)this + 79);
      if (!*((_BYTE *)this + 79))
        return;
    }
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
    if (v5)
    {
      v9 = 0;
      v11 = 0u;
      v12 = 0u;
      v8.i64[0] = (uint64_t)off_1E1BB3138;
      v8.i64[1] = 0;
      v10 = &off_1E1BB3158;
      DWORD2(v11) = 0;
      BYTE8(v12) = 0;
      memset(v13, 0, sizeof(v13));
      if (PNG_Support::OpenPNG(v5, &v8))
      {
        if (v9 < v4)
        {
          PNG_MetaHandler::SafeWriteFile(this);
LABEL_12:
          *((_BYTE *)this + 23) = 0;
          goto LABEL_13;
        }
        v6 = PNG_Support::WriteBuffer(v5, &v8.i64[1], v4, (uint64_t)v3);
        PNG_Support::UpdateChunkCRC(v5, (uint64_t)&v10);
        if (v6)
          goto LABEL_12;
      }
LABEL_13:
      v8.i64[0] = (uint64_t)off_1E1BB3138;
      v14 = (void **)v13;
      std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v14);
    }
  }
}

void sub_1880AAD64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 72) = v1;
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t PNG_MetaHandler::SafeWriteFile(PNG_MetaHandler *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *exception;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Failure creating PNG temp file";
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(PNG_MetaHandler *, uint64_t))(*(_QWORD *)this + 80))(this, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  return 1;
}

void PNG_Support::ChunkState::~ChunkState(PNG_Support::ChunkState *this)
{
  void **v1;

  *(_QWORD *)this = off_1E1BB3138;
  v1 = (void **)((char *)this + 64);
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1E1BB3138;
  v2 = (void **)((char *)this + 64);
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x18D761C30](this, 0x10A1C40219FC1CALL);
}

void PNG_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  PNG_Support::ChunkData *v8;
  uint64_t v9;
  const void *v10;
  _QWORD *exception;
  void (**v12)(PNG_Support::ChunkData *__hidden);
  _BYTE v13[32];
  int64x2_t v14;
  uint64_t v15;
  void (**v16)(PNG_Support::ChunkData *__hidden);
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  v15 = 0;
  v17 = 0u;
  v18 = 0u;
  v14.i64[0] = (uint64_t)off_1E1BB3138;
  v14.i64[1] = 0;
  v16 = &off_1E1BB3158;
  DWORD2(v17) = 0;
  BYTE8(v18) = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  if (PNG_Support::OpenPNG(v4, &v14))
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, "\x89PNG\r\n\x1A\n", 8);
    v5 = v19;
    for (i = v20; v5 != i; v5 += 40)
    {
      *(_QWORD *)&v13[24] = 0;
      v12 = &off_1E1BB3158;
      v7 = *(_OWORD *)(v5 + 8);
      *(_OWORD *)&v13[9] = *(_OWORD *)(v5 + 17);
      *(_OWORD *)v13 = v7;
      if (!v13[24])
      {
        if ((PNG_Support::CopyChunk(v4, a2, (uint64_t)&v12) & 1) == 0)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 9;
          exception[1] = "PNG chunk copy failed.";
          *((_BYTE *)exception + 16) = 0;
        }
        if (PNG_Support::CheckIHDRChunkHeader((PNG_Support *)&v12, v8))
        {
          if (*(char *)(a1 + 79) < 0)
          {
            v10 = *(const void **)(a1 + 56);
            v9 = *(_QWORD *)(a1 + 64);
          }
          else
          {
            LODWORD(v9) = *(unsigned __int8 *)(a1 + 79);
            v10 = (const void *)(a1 + 56);
          }
          PNG_Support::WriteXMPChunk(a2, v9, v10);
        }
      }
    }
  }
  v14.i64[0] = (uint64_t)off_1E1BB3138;
  v12 = (void (**)(PNG_Support::ChunkData *__hidden))&v19;
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_1880AAFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void PNG_Support::ChunkData::~ChunkData(PNG_Support::ChunkData *this)
{
  JUMPOUT(0x18D761C30);
}

void std::vector<PNG_Support::ChunkData>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PNG_CheckFormat()
{
  __assert_rtn("PNG_CheckFormat", "PNG_Handler.cpp", 48, "format == kXMP_PNGFile");
}

void PNG_MetaHandler::ProcessXMP()
{
  __assert_rtn("ProcessXMP", "PNG_Handler.cpp", 128, "this->containsXMP");
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void RDF_Parser::FixupQualifiedNode(RDF_Parser *this, XMP_Node *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t j;
  uint64_t v60;
  int v61;
  char *v62;
  BOOL v63;
  _QWORD *v64;
  char *v65;
  _QWORD *v66;
  int v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *exception;
  const char *v93;
  void *__dst;
  uint64_t v95;
  const char *v96;
  uint64_t v97;

  if ((*((_BYTE *)a2 + 9) & 1) == 0
    || (v3 = (uint64_t *)*((_QWORD *)a2 + 9), v4 = (uint64_t *)*((_QWORD *)a2 + 10), v3 == v4))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v93 = "XMP_Enforce failed: ((xmpParent->options & kXMP_PropValueIsStruct) && (! xmpParent->children.empty())) in /Lib"
          "rary/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ParseRDF.cpp at line 613";
    goto LABEL_125;
  }
  v6 = *v3;
  v7 = *v3 + 16;
  v8 = *(char *)(*v3 + 39);
  if (v8 < 0)
  {
    if (*(_QWORD *)(v6 + 24) != 9)
    {
LABEL_124:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      v93 = "XMP_Enforce failed: (valueNode->name == \"rdf:value\") in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-"
            "Toolkit-SDK/XMPCore/source/ParseRDF.cpp at line 616";
LABEL_125:
      exception[1] = v93;
      *((_BYTE *)exception + 16) = 0;
    }
    v7 = *(_QWORD *)v7;
  }
  else if (v8 != 9)
  {
    goto LABEL_124;
  }
  v9 = *(_QWORD *)v7;
  v10 = *(unsigned __int8 *)(v7 + 8);
  if (v9 != 0x756C61763A666472 || v10 != 101)
    goto LABEL_124;
  v12 = (void **)((char *)a2 + 96);
  std::vector<_MPEntry *>::reserve((void **)a2 + 12, ((uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3)+ v4- v3+ ((uint64_t)(*(_QWORD *)(v6 + 104) - *(_QWORD *)(v6 + 96)) >> 3));
  v14 = *(_QWORD *)(v6 + 96);
  v13 = *(_QWORD *)(v6 + 104);
  if ((*(_BYTE *)(v6 + 8) & 0x40) == 0)
  {
    v15 = 0;
    goto LABEL_47;
  }
  v16 = *(uint64_t **)(v6 + 96);
  if ((*((_BYTE *)a2 + 8) & 0x40) != 0)
  {
    v95 = 203;
    v96 = "Duplicate xml:lang for rdf:value element";
    v97 = 0;
    GenericErrorCallback::NotifyClient(*(_QWORD *)this, 0, (unsigned int *)&v95, 0);
    v17 = *v12;
    v18 = *(_QWORD *)*v12;
    v19 = (_QWORD *)(v18 + 16);
    v20 = *(char *)(v18 + 39);
    if (v20 < 0)
    {
      if (*(_QWORD *)(v18 + 24) != 8)
        goto LABEL_121;
      v19 = (_QWORD *)*v19;
    }
    else if (v20 != 8)
    {
LABEL_121:
      RDF_Parser::FixupQualifiedNode();
    }
    if (*v19 != 0x676E616C3A6C6D78)
      goto LABEL_121;
    v21 = (char *)*((_QWORD *)a2 + 13);
    v22 = v21 - (char *)(v17 + 1);
    if (v21 != (char *)(v17 + 1))
      memmove(*v12, v17 + 1, v21 - (char *)(v17 + 1));
    *((_QWORD *)a2 + 13) = (char *)v17 + v22;
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v16 = *(uint64_t **)(v6 + 96);
  }
  v23 = *v16;
  v95 = v23;
  v24 = (_QWORD *)(v23 + 16);
  v25 = *(char *)(v23 + 39);
  if (v25 < 0)
  {
    if (*(_QWORD *)(v23 + 24) != 8)
      goto LABEL_120;
    v24 = (_QWORD *)*v24;
  }
  else if (v25 != 8)
  {
LABEL_120:
    RDF_Parser::FixupQualifiedNode();
  }
  if (*v24 != 0x676E616C3A6C6D78)
    goto LABEL_120;
  *(_QWORD *)(v23 + 64) = a2;
  *((_DWORD *)a2 + 2) |= 0x40u;
  *(_DWORD *)(v6 + 8) &= ~0x40u;
  v26 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v26 == *((uint64_t **)a2 + 13))
  {
    v27 = *((_QWORD *)a2 + 14);
    if ((unint64_t)v26 >= v27)
    {
      v29 = v27 - (_QWORD)v26;
      v30 = (uint64_t)(v27 - (_QWORD)v26) >> 2;
      if (v30 <= 1)
        v30 = 1;
      if (v29 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v31);
      v34 = &v32[v33];
      *v32 = v95;
      v28 = v32 + 1;
      v36 = (char *)*((_QWORD *)a2 + 12);
      v35 = (char *)*((_QWORD *)a2 + 13);
      if (v35 != v36)
      {
        do
        {
          v37 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v32 = v37;
        }
        while (v35 != v36);
        v35 = (char *)*v12;
      }
      *((_QWORD *)a2 + 12) = v32;
      *((_QWORD *)a2 + 13) = v28;
      *((_QWORD *)a2 + 14) = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v26 = v23;
      v28 = v26 + 1;
    }
    *((_QWORD *)a2 + 13) = v28;
  }
  else
  {
    std::vector<XMP_Node *>::insert((uint64_t)a2 + 96, *((char **)a2 + 12), (char *)&v95);
  }
  **(_QWORD **)(v6 + 96) = 0;
  v15 = 1;
LABEL_47:
  for (i = (v13 - v14) >> 3; v15 != i; ++v15)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v15);
    __dst = 0;
    v40 = (char *)(v39 + 16);
    if (*(char *)(v39 + 39) < 0)
      v40 = *(char **)v40;
    if (FindQualifierNode((uint64_t)a2, v40, 0, (char **)&__dst))
    {
      v95 = 203;
      v96 = "Duplicate qualifier node";
      v97 = 0;
      GenericErrorCallback::NotifyClient(*(_QWORD *)this, 0, (unsigned int *)&v95, 0);
      v41 = (char *)__dst;
      v42 = *(_QWORD *)__dst;
      v43 = (_BYTE *)*((_QWORD *)a2 + 13);
      v44 = v43 - ((_BYTE *)__dst + 8);
      if (v43 != (char *)__dst + 8)
        memmove(__dst, (char *)__dst + 8, v43 - ((_BYTE *)__dst + 8));
      *((_QWORD *)a2 + 13) = &v41[v44];
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    *(_QWORD *)(v39 + 64) = a2;
    v46 = (char *)*((_QWORD *)a2 + 13);
    v45 = *((_QWORD *)a2 + 14);
    if ((unint64_t)v46 >= v45)
    {
      v48 = (v46 - (_BYTE *)*v12) >> 3;
      if ((unint64_t)(v48 + 1) >> 61)
LABEL_122:
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v49 = v45 - (_QWORD)*v12;
      v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1))
        v50 = v48 + 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v51 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v51);
      else
        v52 = 0;
      v53 = &v52[8 * v48];
      *(_QWORD *)v53 = v39;
      v47 = v53 + 8;
      v55 = (char *)*((_QWORD *)a2 + 12);
      v54 = (char *)*((_QWORD *)a2 + 13);
      if (v54 != v55)
      {
        do
        {
          v56 = *((_QWORD *)v54 - 1);
          v54 -= 8;
          *((_QWORD *)v53 - 1) = v56;
          v53 -= 8;
        }
        while (v54 != v55);
        v54 = (char *)*v12;
      }
      *((_QWORD *)a2 + 12) = v53;
      *((_QWORD *)a2 + 13) = v47;
      *((_QWORD *)a2 + 14) = &v52[8 * v51];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(_QWORD *)v46 = v39;
      v47 = v46 + 8;
    }
    *((_QWORD *)a2 + 13) = v47;
    *(_QWORD *)(*(_QWORD *)(v6 + 96) + 8 * v15) = 0;
  }
  *(_QWORD *)(v6 + 104) = *(_QWORD *)(v6 + 96);
  v57 = *((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9);
  if (v57 != 8)
  {
    v58 = v57 >> 3;
    for (j = 1; j != v58; ++j)
    {
      __dst = 0;
      v60 = *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * j);
      __dst = (void *)v60;
      v61 = *(char *)(v60 + 39);
      if (v61 < 0)
      {
        v62 = *(char **)(v60 + 16);
        if (*(_QWORD *)(v60 + 24) == 8)
        {
LABEL_76:
          v63 = *(_QWORD *)v62 == 0x676E616C3A6C6D78;
          goto LABEL_79;
        }
      }
      else
      {
        v62 = (char *)(v60 + 16);
        if (v61 == 8)
          goto LABEL_76;
      }
      v63 = 0;
LABEL_79:
      if (FindQualifierNode((uint64_t)a2, v62, 0, 0))
      {
        v96 = "Duplicate qualifier";
        v97 = 0;
        v95 = 203;
        GenericErrorCallback::NotifyClient(*(_QWORD *)this, 0, (unsigned int *)&v95, 0);
        if (__dst)
          (*(void (**)(void *))(*(_QWORD *)__dst + 8))(__dst);
      }
      else
      {
        v64 = __dst;
        *((_DWORD *)__dst + 2) |= 0x20u;
        v64[8] = a2;
        if (!v63)
        {
          v66 = v64 + 2;
          v67 = *((char *)v64 + 39);
          if (v67 < 0)
          {
            if (v64[3] != 8)
            {
LABEL_92:
              v69 = (char *)*((_QWORD *)a2 + 13);
              v68 = *((_QWORD *)a2 + 14);
              if ((unint64_t)v69 >= v68)
              {
                v71 = (v69 - (_BYTE *)*v12) >> 3;
                if ((unint64_t)(v71 + 1) >> 61)
                  goto LABEL_122;
                v72 = v68 - (_QWORD)*v12;
                v73 = v72 >> 2;
                if (v72 >> 2 <= (unint64_t)(v71 + 1))
                  v73 = v71 + 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                  v74 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v74 = v73;
                if (v74)
                {
                  v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 112, v74);
                  v64 = __dst;
                }
                else
                {
                  v75 = 0;
                }
                v76 = &v75[8 * v71];
                *(_QWORD *)v76 = v64;
                v70 = v76 + 8;
                v78 = (char *)*((_QWORD *)a2 + 12);
                v77 = (char *)*((_QWORD *)a2 + 13);
                if (v77 != v78)
                {
                  do
                  {
                    v79 = *((_QWORD *)v77 - 1);
                    v77 -= 8;
                    *((_QWORD *)v76 - 1) = v79;
                    v76 -= 8;
                  }
                  while (v77 != v78);
                  v77 = (char *)*v12;
                }
                *((_QWORD *)a2 + 12) = v76;
                *((_QWORD *)a2 + 13) = v70;
                *((_QWORD *)a2 + 14) = &v75[8 * v74];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_QWORD *)v69 = v64;
                v70 = v69 + 8;
              }
              *((_QWORD *)a2 + 13) = v70;
              goto LABEL_109;
            }
            v66 = (_QWORD *)*v66;
          }
          else if (v67 != 8)
          {
            goto LABEL_92;
          }
          if (*v66 == 0x657079743A666472)
            *((_DWORD *)a2 + 2) |= 0x80u;
          goto LABEL_92;
        }
        *((_DWORD *)a2 + 2) |= 0x40u;
        v65 = (char *)*((_QWORD *)a2 + 12);
        if (v65 == *((char **)a2 + 13))
          goto LABEL_92;
        std::vector<XMP_Node *>::insert((uint64_t)a2 + 96, v65, (char *)&__dst);
      }
LABEL_109:
      *(_QWORD *)(*((_QWORD *)a2 + 9) + 8 * j) = 0;
    }
  }
  v80 = *((_DWORD *)a2 + 2);
  if (*((_QWORD *)a2 + 12) != *((_QWORD *)a2 + 13))
  {
    v80 |= 0x10u;
    *((_DWORD *)a2 + 2) = v80;
  }
  if ((v80 & 0x10000100) == 0)
    RDF_Parser::FixupQualifiedNode();
  v81 = v80 & 0xEFFFFEFF;
  *((_DWORD *)a2 + 2) = v81;
  *((_DWORD *)a2 + 2) = *(_DWORD *)(v6 + 8) | v81;
  v82 = *((_QWORD *)a2 + 7);
  v83 = *(_OWORD *)((char *)a2 + 40);
  v84 = *(_QWORD *)(v6 + 56);
  *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)(v6 + 40);
  *((_QWORD *)a2 + 7) = v84;
  *(_OWORD *)(v6 + 40) = v83;
  *(_QWORD *)(v6 + 56) = v82;
  **((_QWORD **)a2 + 9) = 0;
  v85 = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v6 + 72) = v85;
  v86 = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v6 + 80) = v86;
  v87 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = *(_QWORD *)(v6 + 88);
  *(_QWORD *)(v6 + 88) = v87;
  v88 = (uint64_t *)*((_QWORD *)a2 + 9);
  v89 = *((_QWORD *)a2 + 10) - (_QWORD)v88;
  if (!v89)
    goto LABEL_117;
  v90 = v89 >> 3;
  do
  {
    v91 = *v88++;
    *(_QWORD *)(v91 + 64) = a2;
    --v90;
  }
  while (v90);
  if (v6)
LABEL_117:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) != 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) != 0;
  }
  return 1;
}

void RDF_Parser::ParseTypeResourcePropertyElement(RDF_Parser *this, XMP_Node *a2, const XML_Node ***a3, int a4)
{
  uint64_t v6;
  XMP_Node *v7;
  const XML_Node **v8;
  const XML_Node **i;
  const XML_Node *v10;
  unsigned __int16 *v11;
  int v12;
  uint64_t v14;
  int v16;
  int v17;
  _QWORD v19[3];

  v6 = RDF_Parser::AddChildNode(this, a2, (const XML_Node *)a3, "", a4);
  if (v6)
  {
    v7 = (XMP_Node *)v6;
    *(_DWORD *)(v6 + 8) |= 0x100u;
    v8 = a3[13];
    for (i = a3[14]; v8 != i; ++v8)
    {
      v10 = *v8;
      v11 = (unsigned __int16 *)((char *)*v8 + 40);
      if (*((char *)*v8 + 63) < 0)
      {
        v14 = *((_QWORD *)v10 + 6);
        if (v14 == 8)
        {
          if (**(_QWORD **)v11 == 0x676E616C3A6C6D78)
            goto LABEL_33;
          v14 = *((_QWORD *)v10 + 6);
        }
        else if (v14 == 13
               && **(_QWORD **)v11 == 0x737261703A666472
               && *(_QWORD *)(*(_QWORD *)v11 + 5) == 0x6570795465737261)
        {
          continue;
        }
        if (v14 == 6)
        {
          v11 = *(unsigned __int16 **)v11;
LABEL_26:
          v16 = *(_DWORD *)v11;
          v17 = v11[2];
          if (v16 == 979788914 && v17 == 17481)
            continue;
        }
      }
      else
      {
        v12 = *((unsigned __int8 *)*v8 + 63);
        if (v12 == 6)
          goto LABEL_26;
        if (v12 == 8)
        {
          if (*(_QWORD *)v11 == 0x676E616C3A6C6D78)
          {
LABEL_33:
            RDF_Parser::AddQualifierNode(this, v7, v10);
            continue;
          }
        }
        else if (v12 == 13
               && *(_QWORD *)v11 == 0x737261703A666472
               && *(_QWORD *)((char *)*v8 + 45) == 0x6570795465737261)
        {
          continue;
        }
      }
      v19[1] = "Invalid attribute for ParseTypeResource property element";
      v19[2] = 0;
      v19[0] = 202;
      GenericErrorCallback::NotifyClient(*(_QWORD *)this, 0, (unsigned int *)v19, 0);
    }
    RDF_Parser::PropertyElementList(this, v7, (const XML_Node *)a3, 0);
    if ((*((_BYTE *)v7 + 11) & 0x10) != 0)
      RDF_Parser::FixupQualifiedNode(this, v7);
  }
}

void RDF_Parser::AddChildNode()
{
  __assert_rtn("AddChildNode", "ParseRDF.cpp", 472, "xmpParent->parent == 0");
}

void RDF_Parser::AddQualifierNode()
{
  __assert_rtn("AddQualifierNode", "ParseRDF.cpp", 566, "isType");
}

void RDF_Parser::FixupQualifiedNode()
{
  __assert_rtn("FixupQualifiedNode", "ParseRDF.cpp", 714, "xmpParent->options & (kXMP_PropValueIsStruct | kRDF_HasValueElem)");
}

{
  __assert_rtn("FixupQualifiedNode", "ParseRDF.cpp", 637, "langQual->name == \"xml:lang\"");
}

{
  __assert_rtn("FixupQualifiedNode", "ParseRDF.cpp", 631, "xmpParent->qualifiers[0]->name == \"xml:lang\"");
}

void RDF_Parser::NodeElementList()
{
  __assert_rtn("NodeElementList", "ParseRDF.cpp", 764, "isTopLevel");
}

void RDF_Parser::NodeElementAttrs()
{
  __assert_rtn("NodeElementAttrs", "ParseRDF.cpp", 853, "xmpParent->parent == 0");
}

void XMPUtils::ApplyTemplate_v2(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  double DefaultNameSpacePrefixMap;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  char *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  size_t v30;
  std::string *v31;
  __n128 *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  char *v39;
  BOOL v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  __n128 v84;
  char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  size_t v92;
  std::string *p_p;
  __int128 *v94;
  const std::string::value_type *v95;
  std::string *v96;
  __n128 v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  char *v101;
  __n128 *v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  char *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  BOOL v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  char *v143;
  std::__shared_weak_count *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::string v147;
  std::string __p;
  __n128 v149;
  int64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  _OWORD v154[2];

  if (this)
  {
    v3 = a3;
    if (!v6)
      __cxa_bad_cast();
    v7 = v6;
    DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v152);
    v9 = (*(uint64_t (**)(_QWORD, double))(*(_QWORD *)v152 + 128))(v152, DefaultNameSpacePrefixMap);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
    if (*((_QWORD *)&v152 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if ((v3 & 0x10) != 0)
    {
      v154[0] = 0uLL;
      v13 = (_QWORD *)v5[50];
      if (v13)
        v14 = (char *)v13 + *(_QWORD *)(*v13 - 544);
      else
        v14 = 0;
      v15 = v5[51];
      *(_QWORD *)&v152 = v14;
      *((_QWORD *)&v152 + 1) = v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      XMPUtils::GetNodeChildIterator(&v152, v154);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
      if (*((_QWORD *)&v152 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v152 = 0uLL;
      v153 = 0;
      v21 = *(_QWORD *)&v154[0];
      if (*(_QWORD *)&v154[0])
      {
        while (1)
        {
          v151 = 0uLL;
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v21 + 48))(&v149);
          v22 = v149;
          v151 = (__int128)v149;
          v149 = 0uLL;
          v150 = 0;
          (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v22.n128_u64[0] + 88))(&v147, v22);
          (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v9 + 40))(&__p, v9, &v147);
          v23 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_
                                                                          + 192))(__p.__r_.__value_.__r.__words[0]);
          std::string::basic_string[abi:ne180100]<0>(&v149, v23);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          v27 = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
          if (v147.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          memset(&__p, 0, sizeof(__p));
          if (v150 >= 0)
            v30 = HIBYTE(v150);
          else
            v30 = v149.n128_u64[1];
          memset(&v147, 0, sizeof(v147));
          std::string::basic_string[abi:ne180100]((uint64_t)&v147, v30 + 1);
          if ((v147.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v147;
          else
            v31 = (std::string *)v147.__r_.__value_.__r.__words[0];
          if (v30)
          {
            if (v150 >= 0)
              v32 = &v149;
            else
              v32 = (__n128 *)v149.n128_u64[0];
            memmove(v31, v32, v30);
          }
          *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v30) = 58;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v151 + 72))(&v145);
          v33 = (const std::string::value_type *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 192))(v145);
          v34 = std::string::append(&v147, v33);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          v36 = v146;
          if (v146)
          {
            p_shared_owners = (unint64_t *)&v146->__shared_owners_;
            do
              v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v147.__r_.__value_.__l.__data_);
            if ((v3 & 1) != 0)
              goto LABEL_58;
          }
          else if ((v3 & 1) != 0)
          {
            goto LABEL_58;
          }
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v151 + 88))(&v145);
          v39 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v145 + 192))(v145);
          std::string::basic_string[abi:ne180100]<0>(&v147, v39);
          v40 = IsInternalProperty(&v147, &__p);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v147.__r_.__value_.__l.__data_);
          v41 = v146;
          if (!v146)
            goto LABEL_57;
          v42 = (unint64_t *)&v146->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
            if (v40)
              goto LABEL_77;
          }
          else
          {
LABEL_57:
            if (v40)
              goto LABEL_77;
          }
LABEL_58:
          v44 = v7[50] + *(_QWORD *)(*(_QWORD *)v7[50] - 792);
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 688))(v44);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v151 + 88))(&v145);
          (*(void (**)(char **__return_ptr))(*(_QWORD *)v151 + 72))(&v143);
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *, char **))(*(_QWORD *)v45 + 736))(&v147, v45, &v145, &v143);
          v46 = *(_OWORD *)&v147.__r_.__value_.__l.__data_;
          if (v147.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
            }
          }
          v49 = v144;
          if (v144)
          {
            v50 = (unint64_t *)&v144->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (v146)
          {
            v52 = (unint64_t *)&v146->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
              if ((_QWORD)v46)
                goto LABEL_77;
LABEL_73:
              std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::push_back[abi:ne180100]((char **)&v152, &v151);
              goto LABEL_77;
            }
          }
          if (!(_QWORD)v46)
            goto LABEL_73;
LABEL_77:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v150) < 0)
            operator delete((void *)v149.n128_u64[0]);
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          (*(void (**)(__n128 *__return_ptr))(**(_QWORD **)&v154[0] + 56))(&v149);
          v57 = (std::__shared_weak_count *)*((_QWORD *)&v154[0] + 1);
          v154[0] = v149;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
            v21 = *(_QWORD *)&v154[0];
            if (!*(_QWORD *)&v154[0])
            {
LABEL_94:
              if (*((_QWORD *)&v152 + 1) != (_QWORD)v152)
              {
                v60 = 0;
                do
                {
                  v61 = v5[50] + *(_QWORD *)(*(_QWORD *)v5[50] - 792);
                  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 688))(v61);
                  (*(void (**)(__n128 *__return_ptr))(**(_QWORD **)(v152 + 16 * v60) + 88))(&v149);
                  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v152 + 16 * v60) + 72))(&__p);
                  (*(void (**)(uint64_t *__return_ptr, uint64_t, __n128 *, std::string *))(*(_QWORD *)v62
                                                                                                  + 744))(&v141, v62, &v149, &__p);
                  v63 = v142;
                  if (v142)
                  {
                    v64 = (unint64_t *)&v142->__shared_owners_;
                    do
                      v65 = __ldaxr(v64);
                    while (__stlxr(v65 - 1, v64));
                    if (!v65)
                    {
                      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                      std::__shared_weak_count::__release_weak(v63);
                    }
                  }
                  v66 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_)
                  {
                    v67 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  v69 = (std::__shared_weak_count *)v149.n128_u64[1];
                  if (v149.n128_u64[1])
                  {
                    v70 = (unint64_t *)(v149.n128_u64[1] + 8);
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  ++v60;
                }
                while (v60 < (uint64_t)(*((_QWORD *)&v152 + 1) - v152) >> 4);
              }
              break;
            }
          }
          else
          {
            v21 = v149.n128_u64[0];
            if (!v149.n128_u64[0])
              goto LABEL_94;
          }
        }
      }
      v149.n128_u64[0] = (unint64_t)&v152;
      std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v154[0] + 1);
      if (*((_QWORD *)&v154[0] + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v154[0] + 1) + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
    }
    if (((v3 & 6) != 0) | ((v3 & 8) >> 3))
    {
      v154[0] = 0uLL;
      v75 = (_QWORD *)v7[50];
      if (v75)
        v76 = (char *)v75 + *(_QWORD *)(*v75 - 544);
      else
        v76 = 0;
      v77 = v7[51];
      *(_QWORD *)&v152 = v76;
      *((_QWORD *)&v152 + 1) = v77;
      if (v77)
      {
        v78 = (unint64_t *)(v77 + 8);
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      XMPUtils::GetNodeChildIterator(&v152, v154);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v152 + 1);
      if (*((_QWORD *)&v152 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v152 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = *(_QWORD *)&v154[0];
      if (*(_QWORD *)&v154[0])
      {
        while (1)
        {
          v151 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v83 + 48))(&v152);
          v84 = (__n128)v152;
          v151 = v152;
          v152 = 0uLL;
          v153 = 0;
          (*(void (**)(std::string *__return_ptr, __n128))(*(_QWORD *)v151 + 88))(&__p, v84);
          (*(void (**)(__n128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v9 + 40))(&v149, v9, &__p);
          v85 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v149.n128_u64[0] + 192))(v149.n128_u64[0]);
          std::string::basic_string[abi:ne180100]<0>(&v152, v85);
          v86 = (std::__shared_weak_count *)v149.n128_u64[1];
          if (v149.n128_u64[1])
          {
            v87 = (unint64_t *)(v149.n128_u64[1] + 8);
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          v89 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v90 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v149 = 0uLL;
          v150 = 0;
          if (v153 >= 0)
            v92 = HIBYTE(v153);
          else
            v92 = *((_QWORD *)&v152 + 1);
          memset(&__p, 0, sizeof(__p));
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v92 + 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v92)
          {
            if (v153 >= 0)
              v94 = &v152;
            else
              v94 = (__int128 *)v152;
            memmove(p_p, v94, v92);
          }
          *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v92) = 58;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v151 + 72))(&v147);
          v95 = (const std::string::value_type *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v147.__r_.__value_.__l.__data_ + 192))(v147.__r_.__value_.__r.__words[0]);
          v96 = std::string::append(&__p, v95);
          v97 = *(__n128 *)&v96->__r_.__value_.__l.__data_;
          v150 = v96->__r_.__value_.__r.__words[2];
          v149 = v97;
          v96->__r_.__value_.__l.__size_ = 0;
          v96->__r_.__value_.__r.__words[2] = 0;
          v96->__r_.__value_.__r.__words[0] = 0;
          v98 = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
          if (v147.__r_.__value_.__l.__size_)
          {
            v99 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          memset(&__p, 0, sizeof(__p));
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v151 + 88))(&v147);
          v101 = (char *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v147.__r_.__value_.__l.__data_
                                                                           + 192))(v147.__r_.__value_.__r.__words[0]);
          if (v150 >= 0)
            v102 = &v149;
          else
            v102 = (__n128 *)v149.n128_u64[0];
          ExpandXPath(v101, v102, (uint64_t *)&__p);
          v103 = (std::__shared_weak_count *)v147.__r_.__value_.__l.__size_;
          if (v147.__r_.__value_.__l.__size_)
          {
            v104 = (unint64_t *)(v147.__r_.__value_.__l.__size_ + 8);
            do
              v105 = __ldaxr(v104);
            while (__stlxr(v105 - 1, v104));
            if (!v105)
            {
              ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
              std::__shared_weak_count::__release_weak(v103);
            }
          }
          v145 = 0;
          v146 = 0;
          v143 = 0;
          v144 = 0;
          v106 = (_QWORD *)v5[50];
          if (v106)
            v107 = (char *)v106 + *(_QWORD *)(*v106 - 544);
          else
            v107 = 0;
          v108 = (std::__shared_weak_count *)v5[51];
          v143 = v107;
          v144 = v108;
          if (v108)
          {
            v109 = (unint64_t *)&v108->__shared_owners_;
            do
              v110 = __ldxr(v109);
            while (__stxr(v110 + 1, v109));
          }
          v111 = v151;
          if (!(_QWORD)v151)
            goto LABEL_191;
          if ((v3 & 1) != 0)
            goto LABEL_182;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v151 + 88))(&v139);
          v112 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 192))(v139);
          std::string::basic_string[abi:ne180100]<0>(&v147, v112);
          v113 = IsInternalProperty(&v147, &v149);
          if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v147.__r_.__value_.__l.__data_);
          v114 = v140;
          if (!v140)
            goto LABEL_180;
          v115 = (unint64_t *)&v140->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
            if (!v113)
            {
LABEL_181:
              v111 = v151;
LABEL_182:
              v137 = v111;
              v138 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
              if (*((_QWORD *)&v151 + 1))
              {
                v117 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
                do
                  v118 = __ldxr(v117);
                while (__stxr(v118 + 1, v117));
              }
              AppendSubtree(&v137, &v143, (v3 & 8) != 0, (v3 & 6) != 0, ((v3 & 0x10) == 0) & (v3 >> 2));
              v119 = v138;
              if (v138)
              {
                v120 = (unint64_t *)&v138->__shared_owners_;
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
            }
          }
          else
          {
LABEL_180:
            if (!v113)
              goto LABEL_181;
          }
LABEL_191:
          v122 = v144;
          if (v144)
          {
            v123 = (unint64_t *)&v144->__shared_owners_;
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v125 = v146;
          if (v146)
          {
            v126 = (unint64_t *)&v146->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v147.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v147);
          if (SHIBYTE(v150) < 0)
            operator delete((void *)v149.n128_u64[0]);
          if (SHIBYTE(v153) < 0)
            operator delete((void *)v152);
          v128 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
          if (*((_QWORD *)&v151 + 1))
          {
            v129 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
            do
              v130 = __ldaxr(v129);
            while (__stlxr(v130 - 1, v129));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
              std::__shared_weak_count::__release_weak(v128);
            }
          }
          (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)&v154[0] + 56))(&v152);
          v131 = (std::__shared_weak_count *)*((_QWORD *)&v154[0] + 1);
          v154[0] = v152;
          if (v131)
          {
            v132 = (unint64_t *)&v131->__shared_owners_;
            do
              v133 = __ldaxr(v132);
            while (__stlxr(v133 - 1, v132));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
              std::__shared_weak_count::__release_weak(v131);
            }
            v83 = *(_QWORD *)&v154[0];
            if (!*(_QWORD *)&v154[0])
              break;
          }
          else
          {
            v83 = v152;
            if (!(_QWORD)v152)
              break;
          }
        }
      }
      v134 = (std::__shared_weak_count *)*((_QWORD *)&v154[0] + 1);
      if (*((_QWORD *)&v154[0] + 1))
      {
        v135 = (unint64_t *)(*((_QWORD *)&v154[0] + 1) + 8);
        do
          v136 = __ldaxr(v135);
        while (__stlxr(v136 - 1, v135));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
    }
  }
}

void sub_1880ACA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v38 - 144);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void AppendSubtree(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  char v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int16 IXMPOptions;
  unint64_t *v55;
  unint64_t v56;
  __int16 v57;
  int v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __n128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __n128 v87;
  std::__shared_weak_count *v88;
  unint64_t *p_shared_owners;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unsigned int (*v94)(void);
  unint64_t *v95;
  void *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t NodeChildCount;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  void *i;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  char v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  int v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  _BOOL4 v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  AdobeXMPCore::INode_v1 *v200;
  std::__shared_weak_count *v201;
  unint64_t v202;
  char *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t *v212;
  unint64_t v213;
  __int16 v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  char *v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  void *v233;
  void **v234;
  __n128 *v235;
  uint64_t v236;
  int v237;
  void *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  int v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  AdobeXMPCore::INode_v1 *v257;
  const char *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  _QWORD *exception;
  __n128 v275;
  __n128 v276;
  _QWORD v277[2];
  _QWORD v278[2];
  _QWORD v279[2];
  _QWORD *v280;
  std::__shared_weak_count *v281;
  char *v282;
  std::__shared_weak_count *v283;
  void *__p[2];
  uint64_t v285;
  __n128 v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  AdobeXMPCore::INode_v1 *v289[2];
  __n128 v290;
  uint64_t v291;
  std::__shared_weak_count *v292;
  __n128 v293;
  _QWORD v294[2];
  _QWORD v295[2];
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  __n128 v304;
  uint64_t v305;
  void *v306[2];
  uint64_t v307;
  void *v308[2];
  uint64_t v309;
  void *v310[2];
  uint64_t v311;
  void *v312[2];
  uint64_t v313;
  __n128 v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  __n128 v317;
  uint64_t v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;

  v312[0] = 0;
  v312[1] = 0;
  v313 = 0;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v317);
  v10 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 192))(v317.n128_u64[0]);
  std::string::basic_string[abi:ne180100]<0>(v312, v10);
  v11 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v12 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v310[0] = 0;
  v310[1] = 0;
  v311 = 0;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 88))(&v317);
  v14 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 192))(v317.n128_u64[0]);
  std::string::basic_string[abi:ne180100]<0>(v310, v14);
  v15 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v16 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v308[0] = 0;
  v308[1] = 0;
  v309 = 0;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 72))(&v317);
  v18 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 192))(v317.n128_u64[0]);
  std::string::basic_string[abi:ne180100]<0>(v308, v18);
  v19 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v20 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v306[0] = 0;
  v306[1] = 0;
  v307 = 0;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 88))(&v317);
  v22 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 192))(v317.n128_u64[0]);
  std::string::basic_string[abi:ne180100]<0>(v306, v22);
  v23 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v24 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v305 = 0;
  v304 = 0uLL;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v317);
  v26 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 192))(v317.n128_u64[0]);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 88))(__p);
  v27 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 192))(__p[0]);
  XMPUtils::FindChildNode(a2, v26, v27, 0, &v305, (uint64_t *)&v304);
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v29 = (unint64_t *)((char *)__p[1] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)v317.n128_u64[1];
  if (v317.n128_u64[1])
  {
    v32 = (unint64_t *)(v317.n128_u64[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  XMPUtils::GetIXMPOptions(a1);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1) == 1)
  {
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v317);
    v321 = v317;
    (*(void (**)(void **__return_ptr, __n128))(*(_QWORD *)v317.n128_u64[0] + 504))(__p, v317);
    v34 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 184))(__p[0]);
    v35 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v36 = (unint64_t *)((char *)__p[1] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)v321.n128_u64[1];
    if (!v321.n128_u64[1])
      goto LABEL_41;
    v39 = (unint64_t *)(v321.n128_u64[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (v40)
    {
LABEL_41:
      if ((v34 & 1) != 0)
        goto LABEL_42;
      goto LABEL_64;
    }
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((v34 & 1) == 0)
    {
LABEL_64:
      if (!v304.n128_u64[0])
      {
        (*(void (**)(__n128 *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 264))(&v317, *a1, 1, 1);
        v87 = v317;
        v317 = 0uLL;
        v88 = (std::__shared_weak_count *)v304.n128_u64[1];
        v304 = v87;
        if (v88)
        {
          p_shared_owners = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldaxr(p_shared_owners);
          while (__stlxr(v90 - 1, p_shared_owners));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        v91 = (std::__shared_weak_count *)v317.n128_u64[1];
        if (v317.n128_u64[1])
        {
          v92 = (unint64_t *)(v317.n128_u64[1] + 8);
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v94 = *(unsigned int (**)(void))(*(_QWORD *)*a2 + 40);
        if (v304.n128_u64[0])
        {
          if (v94() == 4)
          {
            (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
            (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v317.n128_u64[0] + 656))(v317.n128_u64[0], &v304);
            v51 = (std::__shared_weak_count *)v317.n128_u64[1];
            if (!v317.n128_u64[1])
              goto LABEL_468;
            v95 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v53 = __ldaxr(v95);
            while (__stlxr(v53 - 1, v95));
          }
          else
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) != 2)
              goto LABEL_468;
            (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v317);
            (*(void (**)(unint64_t, __n128 *, uint64_t))(*(_QWORD *)v317.n128_u64[0] + 664))(v317.n128_u64[0], &v304, v305);
            v51 = (std::__shared_weak_count *)v317.n128_u64[1];
            if (!v317.n128_u64[1])
              goto LABEL_468;
            v140 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v53 = __ldaxr(v140);
            while (__stlxr(v53 - 1, v140));
          }
          goto LABEL_293;
        }
        if (v94() == 4)
        {
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
          v129 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 88))(__p);
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v321);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, __n128 *))(*(_QWORD *)v129 + 744))(&v300, v129, __p, &v321);
          v130 = v301;
          if (v301)
          {
            v131 = (unint64_t *)&v301->__shared_owners_;
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = (std::__shared_weak_count *)v321.n128_u64[1];
          if (v321.n128_u64[1])
          {
            v134 = (unint64_t *)(v321.n128_u64[1] + 8);
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          v136 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v137 = (unint64_t *)((char *)__p[1] + 8);
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v51 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (!v317.n128_u64[1])
            goto LABEL_468;
          v139 = (unint64_t *)(v317.n128_u64[1] + 8);
          do
            v53 = __ldaxr(v139);
          while (__stlxr(v53 - 1, v139));
        }
        else
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) != 2)
            goto LABEL_468;
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v317);
          (*(void (**)(uint64_t *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v317.n128_u64[0] + 680))(&v298, v317.n128_u64[0], v305);
          v176 = v299;
          if (v299)
          {
            v177 = (unint64_t *)&v299->__shared_owners_;
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
          v51 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (!v317.n128_u64[1])
            goto LABEL_468;
          v179 = (unint64_t *)(v317.n128_u64[1] + 8);
          do
            v53 = __ldaxr(v179);
          while (__stlxr(v53 - 1, v179));
        }
LABEL_293:
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
        goto LABEL_468;
      }
      IXMPOptions = XMPUtils::GetIXMPOptions(a1);
      v317 = v304;
      if (v304.n128_u64[1])
      {
        v55 = (unint64_t *)(v304.n128_u64[1] + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v57 = XMPUtils::GetIXMPOptions(&v317);
      v58 = IXMPOptions & 0x1F00;
      v59 = (std::__shared_weak_count *)v317.n128_u64[1];
      if (v317.n128_u64[1])
      {
        v60 = (unint64_t *)(v317.n128_u64[1] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if ((IXMPOptions & 0x1F00) != 0)
        v62 = a3;
      else
        v62 = 0;
      if ((v62 & 1) == 0 && (_DWORD)a4)
      {
        if (v304.n128_u64[0])
        {
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
          v63 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 88))(__p);
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 72))(&v321);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, __n128 *))(*(_QWORD *)v63 + 744))(&v296, v63, __p, &v321);
          v64 = v297;
          if (v297)
          {
            v65 = (unint64_t *)&v297->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = (std::__shared_weak_count *)v321.n128_u64[1];
          if (v321.n128_u64[1])
          {
            v68 = (unint64_t *)(v321.n128_u64[1] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v71 = (unint64_t *)((char *)__p[1] + 8);
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          v73 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (v317.n128_u64[1])
          {
            v74 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
        }
        (*(void (**)(__n128 *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 264))(&v317, *a1, 1, 1);
        v76 = v317;
        v317 = 0uLL;
        v77 = (std::__shared_weak_count *)v304.n128_u64[1];
        v304 = v76;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = (std::__shared_weak_count *)v317.n128_u64[1];
        if (v317.n128_u64[1])
        {
          v81 = (unint64_t *)(v317.n128_u64[1] + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        if (!v304.n128_u64[0])
          goto LABEL_468;
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 56))(&v317);
        if (v317.n128_u64[0] == *a2)
        {
          v169 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (v317.n128_u64[1])
          {
            v170 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
        }
        else
        {
          v83 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
          v84 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (v317.n128_u64[1])
          {
            v85 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          if (v83 == 4)
          {
            (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
            (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)(v317.n128_u64[0]
                                                                           + *(_QWORD *)(*(_QWORD *)v317.n128_u64[0]
                                                                                       - 688))
                                                               + 520))(v317.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v317.n128_u64[0] - 688), &v304);
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
LABEL_300:
            v317 = v304;
            if (v304.n128_u64[1])
            {
              v183 = (unint64_t *)(v304.n128_u64[1] + 8);
              do
                v184 = __ldxr(v183);
              while (__stxr(v184 + 1, v183));
            }
            if ((XMPUtils::GetIXMPOptions(&v317) & 0x1F00) != 0)
            {
              *(__n128 *)__p = v304;
              if (v304.n128_u64[1])
              {
                v185 = (unint64_t *)(v304.n128_u64[1] + 8);
                do
                  v186 = __ldxr(v185);
                while (__stxr(v186 + 1, v185));
              }
              v187 = XMPUtils::GetNodeChildCount(__p) == 0;
              v188 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
                v189 = (unint64_t *)((char *)__p[1] + 8);
                do
                  v190 = __ldaxr(v189);
                while (__stlxr(v190 - 1, v189));
                if (!v190)
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
              }
            }
            else
            {
              v187 = 0;
            }
            v191 = (std::__shared_weak_count *)v317.n128_u64[1];
            if (v317.n128_u64[1])
            {
              v192 = (unint64_t *)(v317.n128_u64[1] + 8);
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 - 1, v192));
              if (!v193)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
            if (v187)
            {
              if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 4)
              {
                (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
                v194 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
                (*(void (**)(void **__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 88))(__p);
                (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 72))(&v321);
                (*(void (**)(_QWORD *__return_ptr, uint64_t, void **, __n128 *))(*(_QWORD *)v194 + 744))(v295, v194, __p, &v321);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v295);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
              }
              else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 2)
              {
                (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v317);
                (*(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v317.n128_u64[0]
                                                                                        + 680))(v294, v317.n128_u64[0], v305);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v294);
                std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
              }
            }
            goto LABEL_468;
          }
        }
        (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 56))(&v317);
        if (v317.n128_u64[0] == *a2)
        {
          v180 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (v317.n128_u64[1])
          {
            v181 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v182 = __ldaxr(v181);
            while (__stlxr(v182 - 1, v181));
            if (!v182)
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
        }
        else
        {
          v172 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
          v173 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (v317.n128_u64[1])
          {
            v174 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v175 = __ldaxr(v174);
            while (__stlxr(v175 - 1, v174));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
              std::__shared_weak_count::__release_weak(v173);
            }
          }
          if (v172 == 2)
          {
            (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v317);
            (*(void (**)(unint64_t, __n128 *, uint64_t))(*(_QWORD *)v317.n128_u64[0] + 664))(v317.n128_u64[0], &v304, v305);
            std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
          }
        }
        goto LABEL_300;
      }
      if ((IXMPOptions & 0x1F00) == 0 || v58 != (v57 & 0x1F00))
        goto LABEL_468;
      if (v58 == 256)
      {
        __p[0] = 0;
        __p[1] = 0;
        XMPUtils::GetNodeChildIterator(a1, __p);
        v96 = __p[0];
        if (!__p[0])
        {
LABEL_190:
          v51 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_468;
          v128 = (unint64_t *)((char *)__p[1] + 8);
          do
            v53 = __ldaxr(v128);
          while (__stlxr(v53 - 1, v128));
          goto LABEL_293;
        }
        while (1)
        {
          v321 = 0uLL;
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v96 + 48))(&v317);
          v321 = v317;
          v293 = v317;
          if (v317.n128_u64[1])
          {
            v97 = (unint64_t *)(v317.n128_u64[1] + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          AppendSubtree(&v293, &v304, a3, a4, a5);
          v99 = (std::__shared_weak_count *)v293.n128_u64[1];
          if (!v293.n128_u64[1])
            goto LABEL_145;
          v100 = (unint64_t *)(v293.n128_u64[1] + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
            if (!(_DWORD)a5)
              goto LABEL_177;
          }
          else
          {
LABEL_145:
            if (!(_DWORD)a5)
              goto LABEL_177;
          }
          v317 = v304;
          if (v304.n128_u64[1])
          {
            v102 = (unint64_t *)(v304.n128_u64[1] + 8);
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
          }
          NodeChildCount = XMPUtils::GetNodeChildCount(&v317);
          v105 = NodeChildCount;
          v106 = (std::__shared_weak_count *)v317.n128_u64[1];
          if (!v317.n128_u64[1])
            goto LABEL_153;
          v107 = (unint64_t *)(v317.n128_u64[1] + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
            if (!v105)
            {
LABEL_154:
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
              v109 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 88))(&v320);
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 72))(&v319);
              (*(void (**)(uint64_t *__return_ptr, uint64_t, __n128 *, __n128 *))(*(_QWORD *)v109 + 744))(&v291, v109, &v320, &v319);
              v110 = v292;
              if (v292)
              {
                v111 = (unint64_t *)&v292->__shared_owners_;
                do
                  v112 = __ldaxr(v111);
                while (__stlxr(v112 - 1, v111));
                if (!v112)
                {
                  ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                  std::__shared_weak_count::__release_weak(v110);
                }
              }
              v113 = (std::__shared_weak_count *)v319.n128_u64[1];
              if (v319.n128_u64[1])
              {
                v114 = (unint64_t *)(v319.n128_u64[1] + 8);
                do
                  v115 = __ldaxr(v114);
                while (__stlxr(v115 - 1, v114));
                if (!v115)
                {
                  ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                  std::__shared_weak_count::__release_weak(v113);
                }
              }
              v116 = (std::__shared_weak_count *)v320.n128_u64[1];
              if (v320.n128_u64[1])
              {
                v117 = (unint64_t *)(v320.n128_u64[1] + 8);
                do
                  v118 = __ldaxr(v117);
                while (__stlxr(v118 - 1, v117));
                if (!v118)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              v119 = (std::__shared_weak_count *)v317.n128_u64[1];
              if (v317.n128_u64[1])
              {
                v120 = (unint64_t *)(v317.n128_u64[1] + 8);
                do
                  v121 = __ldaxr(v120);
                while (__stlxr(v121 - 1, v120));
                if (!v121)
                {
                  ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                  std::__shared_weak_count::__release_weak(v119);
                }
              }
            }
          }
          else
          {
LABEL_153:
            if (!NodeChildCount)
              goto LABEL_154;
          }
LABEL_177:
          v122 = (std::__shared_weak_count *)v321.n128_u64[1];
          if (v321.n128_u64[1])
          {
            v123 = (unint64_t *)(v321.n128_u64[1] + 8);
            do
              v124 = __ldaxr(v123);
            while (__stlxr(v124 - 1, v123));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)__p[0] + 56))(&v317);
          v125 = (std::__shared_weak_count *)__p[1];
          *(__n128 *)__p = v317;
          if (v125)
          {
            v126 = (unint64_t *)&v125->__shared_owners_;
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
            v96 = __p[0];
            if (!__p[0])
              goto LABEL_190;
          }
          else
          {
            v96 = (void *)v317.n128_u64[0];
            if (!v317.n128_u64[0])
              goto LABEL_190;
          }
        }
      }
      if ((IXMPOptions & 0x1000) == 0)
      {
        if ((IXMPOptions & 0x200) != 0)
        {
          __p[0] = 0;
          __p[1] = 0;
          XMPUtils::GetNodeChildIterator(a1, __p);
          for (i = __p[0]; __p[0]; i = __p[0])
          {
            while (1)
            {
              v321 = 0uLL;
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)i + 48))(&v317);
              v321 = v317;
              v317 = 0uLL;
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 248))(&v317);
              v142 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(v317.n128_u64[0]
                                                                             + *(_QWORD *)(*(_QWORD *)v317.n128_u64[0]
                                                                                         - 688))
                                                                 + 560))(v317.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v317.n128_u64[0] - 688));
              if (!v142)
                goto LABEL_251;
              v143 = v142;
              v144 = v142 + 1;
              v145 = 1;
              while (1)
              {
                v320 = 0uLL;
                (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v317.n128_u64[0]
                                                                                        + 656))(&v320, v317.n128_u64[0], v145);
                v276 = v320;
                if (v320.n128_u64[1])
                {
                  v146 = (unint64_t *)(v320.n128_u64[1] + 8);
                  do
                    v147 = __ldxr(v146);
                  while (__stxr(v147 + 1, v146));
                }
                v275 = v321;
                if (v321.n128_u64[1])
                {
                  v148 = (unint64_t *)(v321.n128_u64[1] + 8);
                  do
                    v149 = __ldxr(v148);
                  while (__stxr(v149 + 1, v148));
                }
                v150 = ItemValuesMatch(&v276, &v275);
                v151 = (std::__shared_weak_count *)v275.n128_u64[1];
                if (v275.n128_u64[1])
                {
                  v152 = (unint64_t *)(v275.n128_u64[1] + 8);
                  do
                    v153 = __ldaxr(v152);
                  while (__stlxr(v153 - 1, v152));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                }
                v154 = (std::__shared_weak_count *)v276.n128_u64[1];
                if (v276.n128_u64[1])
                {
                  v155 = (unint64_t *)(v276.n128_u64[1] + 8);
                  do
                    v156 = __ldaxr(v155);
                  while (__stlxr(v156 - 1, v155));
                  if (!v156)
                  {
                    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                    std::__shared_weak_count::__release_weak(v154);
                  }
                }
                v157 = (std::__shared_weak_count *)v320.n128_u64[1];
                if (v320.n128_u64[1])
                {
                  v158 = (unint64_t *)(v320.n128_u64[1] + 8);
                  do
                    v159 = __ldaxr(v158);
                  while (__stlxr(v159 - 1, v158));
                  if (!v159)
                  {
                    ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                    std::__shared_weak_count::__release_weak(v157);
                  }
                }
                if ((v150 & 1) != 0)
                  break;
                if (++v145 > v143)
                  goto LABEL_251;
              }
              if (v145 == v144)
LABEL_251:
                CloneIXMPSubtree(&v321, &v304);
              v160 = (std::__shared_weak_count *)v317.n128_u64[1];
              if (v317.n128_u64[1])
              {
                v161 = (unint64_t *)(v317.n128_u64[1] + 8);
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
              v163 = (std::__shared_weak_count *)v321.n128_u64[1];
              if (v321.n128_u64[1])
              {
                v164 = (unint64_t *)(v321.n128_u64[1] + 8);
                do
                  v165 = __ldaxr(v164);
                while (__stlxr(v165 - 1, v164));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)__p[0] + 56))(&v317);
              v166 = (std::__shared_weak_count *)__p[1];
              *(__n128 *)__p = v317;
              if (v166)
                break;
              i = (void *)v317.n128_u64[0];
              if (!v317.n128_u64[0])
                goto LABEL_270;
            }
            v167 = (unint64_t *)&v166->__shared_owners_;
            do
              v168 = __ldaxr(v167);
            while (__stlxr(v168 - 1, v167));
            if (!v168)
            {
              ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
              std::__shared_weak_count::__release_weak(v166);
            }
          }
LABEL_270:
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        }
        goto LABEL_468;
      }
      if ((a3 & 1) == 0)
        __assert_rtn("AppendSubtree", "XMPUtils2.cpp", 413, "mergeCompound");
      v290 = 0uLL;
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 248))(&v317);
      v290 = v317;
      v195 = XMPUtils::GetNodeChildCount(a1);
      if (!v195 || !v304.n128_u64[0])
      {
LABEL_467:
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v290);
        goto LABEL_468;
      }
      v196 = 1;
      while (1)
      {
        (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v290.n128_u64[0] + 656))(&v317, v290.n128_u64[0], v196);
        *(__n128 *)v289 = v317;
        v287 = 0;
        v288 = 0;
        (*(void (**)(__n128 *__return_ptr, __n128))(*(_QWORD *)v317.n128_u64[0] + 232))(&v317, v317);
        v197 = (std::__shared_weak_count *)v317.n128_u64[1];
        *(__n128 *)__p = v317;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v317.n128_u64[0] + 504))(&v287);
        if (v197)
        {
          v198 = (unint64_t *)&v197->__shared_owners_;
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = v289[0];
        if (((*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(_QWORD *)v289[0] + 184))(v289[0]) & 1) == 0)
          goto LABEL_452;
        (*(void (**)(__n128 *__return_ptr, AdobeXMPCore::INode_v1 *, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v200 + 128))(&v317, v200, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
        v201 = (std::__shared_weak_count *)v317.n128_u64[1];
        v202 = v317.n128_u64[0];
        v286 = v317;
        if (v317.n128_u64[0])
        {
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 40))(v317.n128_u64[0]) == 1)
            break;
        }
LABEL_447:
        if (v201)
        {
          v263 = (unint64_t *)&v201->__shared_owners_;
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
LABEL_452:
        v265 = v288;
        if (v288)
        {
          v266 = (unint64_t *)&v288->__shared_owners_;
          do
            v267 = __ldaxr(v266);
          while (__stlxr(v267 - 1, v266));
          if (!v267)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        v268 = (std::__shared_weak_count *)v289[1];
        if (v289[1])
        {
          v269 = (unint64_t *)((char *)v289[1] + 8);
          do
            v270 = __ldaxr(v269);
          while (__stlxr(v270 - 1, v269));
          if (!v270)
          {
            ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
            std::__shared_weak_count::__release_weak(v268);
          }
        }
        if (++v196 > v195 || !v304.n128_u64[0])
          goto LABEL_467;
      }
      __p[0] = 0;
      __p[1] = 0;
      v285 = 0;
      (*(void (**)(__n128 *__return_ptr, unint64_t))(*(_QWORD *)v202 + 232))(&v317, v202);
      v320 = v317;
      (*(void (**)(__n128 *__return_ptr, __n128))(*(_QWORD *)v317.n128_u64[0] + 504))(&v321, v317);
      v203 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v321.n128_u64[0] + 192))(v321.n128_u64[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, v203);
      v204 = (std::__shared_weak_count *)v321.n128_u64[1];
      if (v321.n128_u64[1])
      {
        v205 = (unint64_t *)(v321.n128_u64[1] + 8);
        do
          v206 = __ldaxr(v205);
        while (__stlxr(v206 - 1, v205));
        if (!v206)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v207 = (std::__shared_weak_count *)v320.n128_u64[1];
      if (v320.n128_u64[1])
      {
        v208 = (unint64_t *)(v320.n128_u64[1] + 8);
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 248))(&v280);
      v211 = v280;
      v210 = (unint64_t)v281;
      v282 = (char *)v280;
      v283 = v281;
      v280 = 0;
      v281 = 0;
      if (v282)
        v211 = (_QWORD *)((char *)v211 + *(_QWORD *)(*v211 - 544));
      v317.n128_u64[0] = (unint64_t)v211;
      v317.n128_u64[1] = v210;
      if (v210)
      {
        v212 = (unint64_t *)(v210 + 8);
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
      }
      v214 = XMPUtils::GetIXMPOptions(&v317);
      v215 = (std::__shared_weak_count *)v317.n128_u64[1];
      if (v317.n128_u64[1])
      {
        v216 = (unint64_t *)(v317.n128_u64[1] + 8);
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
      }
      if ((v214 & 0x200) == 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 102;
        exception[1] = "Language item must be used on array";
        *((_BYTE *)exception + 16) = 0;
      }
      v218 = (*(uint64_t (**)(char *))(*(_QWORD *)&v282[*(_QWORD *)(*(_QWORD *)v282 - 688)] + 560))(&v282[*(_QWORD *)(*(_QWORD *)v282 - 688)]);
      v219 = (v218 + 1);
      v220 = 1;
      if (v218 >= 1)
      {
        while (1)
        {
          (*(void (**)(__n128 *__return_ptr, char *, uint64_t))(*(_QWORD *)v282 + 656))(&v317, v282, v220);
          v222 = (std::__shared_weak_count *)v317.n128_u64[1];
          v221 = v317.n128_u64[0];
          v320 = v317;
          if (((*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 184))(v317.n128_u64[0]) & 1) == 0)
          {
            v237 = 4;
            if (v222)
              goto LABEL_401;
            goto LABEL_405;
          }
          (*(void (**)(__n128 *__return_ptr, unint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v221 + 128))(&v317, v221, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
          v224 = (std::__shared_weak_count *)v317.n128_u64[1];
          v223 = v317.n128_u64[0];
          v319 = v317;
          if (!v317.n128_u64[0]
            || (*(unsigned int (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 40))(v317.n128_u64[0]) != 1)
          {
            v237 = 4;
            if (!v224)
              goto LABEL_400;
            goto LABEL_396;
          }
          v317 = 0uLL;
          v318 = 0;
          (*(void (**)(__n128 *__return_ptr, unint64_t))(*(_QWORD *)v223 + 232))(&v321, v223);
          v314 = v321;
          (*(void (**)(uint64_t *__return_ptr, __n128))(*(_QWORD *)v321.n128_u64[0] + 504))(&v315, v321);
          v225 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v315 + 192))(v315);
          std::string::basic_string[abi:ne180100]<0>(&v317, v225);
          v226 = v316;
          if (v316)
          {
            v227 = (unint64_t *)&v316->__shared_owners_;
            do
              v228 = __ldaxr(v227);
            while (__stlxr(v228 - 1, v227));
            if (!v228)
            {
              ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
              std::__shared_weak_count::__release_weak(v226);
            }
          }
          v229 = (std::__shared_weak_count *)v314.n128_u64[1];
          if (v314.n128_u64[1])
          {
            v230 = (unint64_t *)(v314.n128_u64[1] + 8);
            do
              v231 = __ldaxr(v230);
            while (__stlxr(v231 - 1, v230));
            if (!v231)
            {
              ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
              std::__shared_weak_count::__release_weak(v229);
            }
          }
          if (v318 >= 0)
            v232 = HIBYTE(v318);
          else
            v232 = v317.n128_u64[1];
          v233 = (void *)HIBYTE(v285);
          if (v285 < 0)
            v233 = __p[1];
          if ((void *)v232 == v233)
          {
            if (v285 >= 0)
              v234 = __p;
            else
              v234 = (void **)__p[0];
            if (v318 < 0)
            {
              v238 = (void *)v317.n128_u64[0];
              v237 = 2 * (memcmp((const void *)v317.n128_u64[0], v234, v317.n128_u64[1]) == 0);
              goto LABEL_393;
            }
            if (!HIBYTE(v318))
            {
              v237 = 2;
              goto LABEL_395;
            }
            v235 = &v317;
            v236 = HIBYTE(v318);
            while (v235->n128_u8[0] == *(unsigned __int8 *)v234)
            {
              v235 = (__n128 *)((char *)v235 + 1);
              v234 = (void **)((char *)v234 + 1);
              if (!--v236)
              {
                v237 = 2;
                goto LABEL_390;
              }
            }
          }
          v237 = 0;
LABEL_390:
          if (v318 < 0)
          {
            v238 = (void *)v317.n128_u64[0];
LABEL_393:
            operator delete(v238);
          }
LABEL_395:
          v224 = (std::__shared_weak_count *)v319.n128_u64[1];
          if (!v319.n128_u64[1])
            goto LABEL_400;
LABEL_396:
          v239 = (unint64_t *)&v224->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
            std::__shared_weak_count::__release_weak(v224);
          }
LABEL_400:
          v222 = (std::__shared_weak_count *)v320.n128_u64[1];
          if (v320.n128_u64[1])
          {
LABEL_401:
            v241 = (unint64_t *)&v222->__shared_owners_;
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 - 1, v241));
            if (!v242)
            {
              ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
              std::__shared_weak_count::__release_weak(v222);
            }
          }
LABEL_405:
          if (v237 == 2)
            break;
          if (++v220 == v219)
          {
            LODWORD(v220) = v219;
            break;
          }
        }
      }
      if ((_DWORD)v220 == (_DWORD)v219)
        v243 = -1;
      else
        v243 = v220;
      v244 = v283;
      if (v283)
      {
        v245 = (unint64_t *)&v283->__shared_owners_;
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      v247 = v281;
      if (v281)
      {
        v248 = (unint64_t *)&v281->__shared_owners_;
        do
          v249 = __ldaxr(v248);
        while (__stlxr(v249 - 1, v248));
        if (!v249)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v287 + 184))(v287))
      {
        if (v243 != -1 && (_DWORD)a5)
        {
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 248))(&v317);
          (*(void (**)(_QWORD *__return_ptr, unint64_t, _QWORD))(*(_QWORD *)v317.n128_u64[0] + 680))(v279, v317.n128_u64[0], v243);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v279);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
          v317 = v304;
          if (v304.n128_u64[1])
          {
            v250 = (unint64_t *)(v304.n128_u64[1] + 8);
            do
              v251 = __ldxr(v250);
            while (__stxr(v251 + 1, v250));
          }
          v252 = XMPUtils::GetNodeChildCount(&v317);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
          if (!v252)
          {
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 4)
            {
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
              v253 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 88))(&v321);
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 72))(&v320);
              (*(void (**)(_QWORD *__return_ptr, uint64_t, __n128 *, __n128 *))(*(_QWORD *)v253 + 744))(v278, v253, &v321, &v320);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v278);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v320);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
            }
            else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 2)
            {
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v317);
              (*(void (**)(_QWORD *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v317.n128_u64[0]
                                                                                      + 680))(v277, v317.n128_u64[0], v305);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v277);
              std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
            }
          }
        }
        goto LABEL_444;
      }
      if (v243 != -1)
      {
        if ((_DWORD)a4)
        {
          v317 = 0uLL;
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 248))(&v321);
          (*(void (**)(__n128 *__return_ptr, unint64_t, _QWORD))(*(_QWORD *)v321.n128_u64[0] + 656))(&v317, v321.n128_u64[0], v243);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v317.n128_u64[0] + 232))(&v321);
          v254 = v321.n128_u64[0];
          v255 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v287 + 192))(v287);
          v256 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v287 + 208))(v287);
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v254 + 512))(v254, v255, v256);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
        }
        goto LABEL_444;
      }
      v317 = 0uLL;
      v257 = v289[0];
      AdobeXMPCore::INode_v1::GetSimpleQualifier(v289[0], (uint64_t)&v317);
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v317.n128_u64[0] + 504))(&v321);
      v258 = (const char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v321.n128_u64[0] + 192))(v321.n128_u64[0]);
      if (!strcmp(v258, "x-default"))
      {
        v320 = v304;
        if (v304.n128_u64[1])
        {
          v259 = (unint64_t *)(v304.n128_u64[1] + 8);
          do
            v260 = __ldxr(v259);
          while (__stxr(v260 + 1, v259));
        }
        v261 = XMPUtils::GetNodeChildCount(&v320);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v320);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
        if (v261)
        {
          v321 = 0uLL;
          (*(void (**)(__n128 *__return_ptr, AdobeXMPCore::INode_v1 *))(*(_QWORD *)v257 + 88))(&v319, v257);
          (*(void (**)(uint64_t *__return_ptr, AdobeXMPCore::INode_v1 *))(*(_QWORD *)v257 + 72))(&v315, v257);
          AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode(&v319, &v315, &v287, &v320);
          v262 = v320.n128_u64[0];
          if (v320.n128_u64[0])
            v262 = v320.n128_u64[0] + *(_QWORD *)(*(_QWORD *)v320.n128_u64[0] - 544);
          v321.n128_u64[0] = v262;
          v321.n128_u64[1] = v320.n128_u64[1];
          v320 = 0uLL;
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v320);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v315);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v319);
          (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v304.n128_u64[0] + 248))(&v320);
          (*(void (**)(unint64_t, __n128 *, uint64_t))(*(_QWORD *)v320.n128_u64[0] + 664))(v320.n128_u64[0], &v321, 1);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v320);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
          goto LABEL_443;
        }
      }
      else
      {
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v321);
      }
      CloneIXMPSubtree(v289, &v304);
LABEL_443:
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v317);
LABEL_444:
      if (SHIBYTE(v285) < 0)
        operator delete(__p[0]);
      v201 = (std::__shared_weak_count *)v286.n128_u64[1];
      goto LABEL_447;
    }
  }
  else if (XMPUtils::GetNodeChildCount(a1))
  {
    goto LABEL_64;
  }
LABEL_42:
  if (*a1 && (_DWORD)a5)
  {
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 240))(&v317);
    v41 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v317.n128_u64[0] + 688))(v317.n128_u64[0]);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a1 + 88))(__p);
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 72))(&v321);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, __n128 *))(*(_QWORD *)v41 + 744))(&v302, v41, __p, &v321);
    v42 = v303;
    if (v303)
    {
      v43 = (unint64_t *)&v303->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v321.n128_u64[1];
    if (v321.n128_u64[1])
    {
      v46 = (unint64_t *)(v321.n128_u64[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v49 = (unint64_t *)((char *)__p[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)v317.n128_u64[1];
    if (v317.n128_u64[1])
    {
      v52 = (unint64_t *)(v317.n128_u64[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      goto LABEL_293;
    }
  }
LABEL_468:
  v271 = (std::__shared_weak_count *)v304.n128_u64[1];
  if (v304.n128_u64[1])
  {
    v272 = (unint64_t *)(v304.n128_u64[1] + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  if (SHIBYTE(v307) < 0)
    operator delete(v306[0]);
  if (SHIBYTE(v309) < 0)
    operator delete(v308[0]);
  if (SHIBYTE(v311) < 0)
    operator delete(v310[0]);
  if (SHIBYTE(v313) < 0)
    operator delete(v312[0]);
}

void sub_1880AEDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  uint64_t v69;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v69 - 176);
  if (a28 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  if (a63 < 0)
    operator delete(a58);
  if (a69 < 0)
    operator delete(a64);
  if (*(char *)(v69 - 233) < 0)
    operator delete(*(void **)(v69 - 256));
  if (*(char *)(v69 - 209) < 0)
    operator delete(*(void **)(v69 - 232));
  _Unwind_Resume(a1);
}

void XMPUtils::DuplicateSubtree_v2(XMPUtils *this, const XMPMeta *lpsrc, XMPMeta *a3, char *a4, char *a5, char *a6, const char *a7)
{
  int v7;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  int v17;
  _QWORD *v18;
  int v19;
  int v20;
  BOOL v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t NodeChildCount;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string::size_type v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  __int128 v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  unint64_t *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  __int128 v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  __int128 v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t *v208;
  std::string::size_type v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  _QWORD *v227;
  const char *v228;
  _QWORD *exception;
  const char *v230;
  const char *v231;
  const char *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t *v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  __int128 v263;
  int v264;
  __int128 v265;
  uint64_t v266;
  std::string::size_type v267;
  std::__shared_weak_count *v268;
  __int128 v269;
  std::string::size_type v270;
  std::__shared_weak_count *v271;
  void **v272[3];
  uint64_t v273[3];
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;

  if (!lpsrc)
    return;
  v7 = (int)a7;
  if (!v13)
    return;
  v14 = v13;
  if (!v15)
    __cxa_bad_cast();
  memset(v273, 0, sizeof(v273));
  memset(v272, 0, sizeof(v272));
  v270 = 0;
  v271 = 0;
  v269 = 0uLL;
  if (!a3 || !*(_BYTE *)a3)
  {
    v16 = "(sourceNS != 0) && (*sourceNS != 0)";
    v17 = 653;
    goto LABEL_387;
  }
  if (!a4 || !*a4)
  {
    v16 = "(sourceRoot != 0) && (*sourceRoot != 0)";
    v17 = 654;
    goto LABEL_387;
  }
  v16 = "(dest != 0) && (destNS != 0) && (destRoot != 0)";
  v17 = 655;
  if (!a5 || !a6)
LABEL_387:
    __assert_rtn("DuplicateSubtree_v2", "XMPUtils2.cpp", v17, v16);
  v18 = v15;
  if (!*a5)
    a5 = (char *)a3;
  if (!*a6)
    a6 = a4;
  v19 = strcmp((const char *)a3, "*");
  v20 = strcmp(a5, "*");
  if (v19)
    v21 = v20 == 0;
  else
    v21 = 1;
  v22 = v21;
  if (v18 == v14 && (v22 & 1) != 0)
  {
    v228 = "Can't duplicate tree onto itself";
    goto LABEL_392;
  }
  if (!(v20 | v19))
  {
    v228 = "Use Clone for full tree to full tree";
LABEL_392:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v228;
    *((_BYTE *)exception + 16) = 0;
  }
  if (!v19)
  {
    ExpandXPath(a5, a6, (uint64_t *)v272);
    LODWORD(v263) = 0;
    if ((XMPUtils::FindCnstNode(v14 + 50, (uint64_t *)v272, (std::string::size_type *)&v269, &v263, 0) & 1) != 0
      && (BYTE1(v263) & 1) != 0)
    {
      v265 = v269;
      if (*((_QWORD *)&v269 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      NodeChildCount = XMPUtils::GetNodeChildCount(&v265);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
      if (*((_QWORD *)&v265 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (!NodeChildCount)
      {
LABEL_67:
        std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v270, (uint64_t)(v18 + 50));
        v44 = v270;
        v267 = v270;
        v268 = v271;
        if (v271)
        {
          p_shared_owners = (unint64_t *)&v271->__shared_owners_;
          do
            v46 = __ldxr(p_shared_owners);
          while (__stxr(v46 + 1, p_shared_owners));
        }
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v44 + 40))(v44) == 1)
        {
          v265 = 0uLL;
          (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v44 + 232))(&v265, v44);
          v277 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 88))(&v276);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 72))(&v275);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v265 + 504))(&v274);
          AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode(&v276, &v275, &v274, &v277);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
          if (*((_QWORD *)&v274 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
          if (*((_QWORD *)&v276 + 1))
          {
            v54 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v269, (uint64_t)&v277);
          v56 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
          if (*((_QWORD *)&v277 + 1))
          {
            v57 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
          if (!*((_QWORD *)&v265 + 1))
            goto LABEL_352;
          v60 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
        }
        else if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v44 + 40))(v44) == 2)
        {
          v265 = 0uLL;
          (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v44 + 248))(&v265, v44);
          v277 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 88))(&v276);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 72))(&v275);
          v93 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v265 + 640))(v265);
          AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v276, &v275, v93, &v277);
          v94 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
          if (*((_QWORD *)&v275 + 1))
          {
            v95 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v97 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
          if (*((_QWORD *)&v276 + 1))
          {
            v98 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v269, (uint64_t)&v277);
          v276 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v265 + *(_QWORD *)(*(_QWORD *)v265 - 688))
                                                         + 552))(&v276);
          while ((_QWORD)v276)
          {
            v275 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v276 + 48))(&v274);
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v274 + 264))(&v275, v274, 0, 0);
            v100 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
            if (*((_QWORD *)&v274 + 1))
            {
              v101 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688)) + 520))(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688), &v275);
            v103 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            if (*((_QWORD *)&v275 + 1))
            {
              v104 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v276 + 56))(&v275);
            v106 = v275;
            v275 = 0uLL;
            v107 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
            v276 = v106;
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            if (*((_QWORD *)&v275 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
          }
          v202 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
          if (*((_QWORD *)&v276 + 1))
          {
            v203 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
            do
              v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v269, (uint64_t)&v277);
          v205 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
          if (*((_QWORD *)&v277 + 1))
          {
            v206 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
          if (!*((_QWORD *)&v265 + 1))
            goto LABEL_352;
          v208 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
          do
            v61 = __ldaxr(v208);
          while (__stlxr(v61 - 1, v208));
        }
        else
        {
          v265 = 0uLL;
          (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v44 + 240))(&v265, v44);
          v277 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 240))(&v277);
          v276 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v265 + *(_QWORD *)(*(_QWORD *)v265 - 688))
                                                         + 552))(&v276);
          while ((_QWORD)v276)
          {
            v275 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v276 + 48))(&v274);
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v274 + 264))(&v275, v274, 0, 0);
            v182 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
            if (*((_QWORD *)&v274 + 1))
            {
              v183 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688)) + 520))(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688), &v275);
            v185 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            if (*((_QWORD *)&v275 + 1))
            {
              v186 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 - 1, v186));
              if (!v187)
              {
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v276 + 56))(&v275);
            v188 = v275;
            v275 = 0uLL;
            v189 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
            v276 = v188;
            if (v189)
            {
              v190 = (unint64_t *)&v189->__shared_owners_;
              do
                v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                std::__shared_weak_count::__release_weak(v189);
              }
            }
            v192 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            if (*((_QWORD *)&v275 + 1))
            {
              v193 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
              do
                v194 = __ldaxr(v193);
              while (__stlxr(v194 - 1, v193));
              if (!v194)
              {
                ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                std::__shared_weak_count::__release_weak(v192);
              }
            }
          }
          v195 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
          if (*((_QWORD *)&v276 + 1))
          {
            v196 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
            do
              v197 = __ldaxr(v196);
            while (__stlxr(v197 - 1, v196));
            if (!v197)
            {
              ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
              std::__shared_weak_count::__release_weak(v195);
            }
          }
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v269, (uint64_t)&v277);
          v198 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
          if (*((_QWORD *)&v277 + 1))
          {
            v199 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
            if (!v200)
            {
              ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
              std::__shared_weak_count::__release_weak(v198);
            }
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
          if (!*((_QWORD *)&v265 + 1))
            goto LABEL_352;
          v201 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
          do
            v61 = __ldaxr(v201);
          while (__stlxr(v61 - 1, v201));
        }
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
LABEL_352:
        v209 = v267;
        if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v267 + 184))(v267))
        {
          v265 = 0uLL;
          (*(void (**)(__int128 *__return_ptr, std::string::size_type))(*(_QWORD *)v209 + 112))(&v265, v209);
          while ((_QWORD)v265)
          {
            v277 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v265 + 48))(&v276);
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v276 + 264))(&v277, v276, 0, 0);
            v210 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
            if (*((_QWORD *)&v276 + 1))
            {
              v211 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 - 1, v211));
              if (!v212)
              {
                ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                std::__shared_weak_count::__release_weak(v210);
              }
            }
            (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v269 + 136))(v269, &v277);
            v213 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
            if (*((_QWORD *)&v277 + 1))
            {
              v214 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v265 + 56))(&v277);
            v216 = v277;
            v277 = 0uLL;
            v217 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
            v265 = v216;
            if (v217)
            {
              v218 = (unint64_t *)&v217->__shared_owners_;
              do
                v219 = __ldaxr(v218);
              while (__stlxr(v219 - 1, v218));
              if (!v219)
              {
                ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
                std::__shared_weak_count::__release_weak(v217);
              }
            }
            v220 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
            if (*((_QWORD *)&v277 + 1))
            {
              v221 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 - 1, v221));
              if (!v222)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
          }
          v223 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
          if (*((_QWORD *)&v265 + 1))
          {
            v224 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
        }
        v179 = v268;
        if (!v268)
          goto LABEL_435;
        v226 = (unint64_t *)&v268->__shared_owners_;
        do
          v181 = __ldaxr(v226);
        while (__stlxr(v181 - 1, v226));
        goto LABEL_383;
      }
      if ((v7 & 0x20000000) != 0)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v269 + 224))(v269, 1, 1);
        goto LABEL_67;
      }
      v230 = "Destination must be an empty struct";
    }
    else
    {
      v230 = "Destination must be an existing struct";
    }
    v234 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v234 = 102;
    v234[1] = v230;
    *((_BYTE *)v234 + 16) = 0;
  }
  if (!v20)
  {
    v265 = 0uLL;
    v266 = 0;
    ExpandXPath((char *)a3, a4, (uint64_t *)&v265);
    v276 = 0uLL;
    v264 = 0;
    XMPUtils::FindCnstNode(v18 + 50, (uint64_t *)&v265, (std::string::size_type *)&v276, &v264, 0);
    if ((_QWORD)v276 && (v264 & 0x100) != 0)
    {
      std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v269, (uint64_t)(v14 + 50));
      v277 = v269;
      if (*((_QWORD *)&v269 + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v64 = XMPUtils::GetNodeChildCount(&v277);
      v65 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
      if (*((_QWORD *)&v277 + 1))
      {
        v66 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      if (!v64)
      {
LABEL_108:
        v275 = 0uLL;
        v277 = v276;
        if (*((_QWORD *)&v276 + 1))
        {
          v68 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        XMPUtils::GetNodeChildIterator(&v277, &v275);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        if (!*((_QWORD *)&v277 + 1))
          goto LABEL_405;
        v71 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        while (1)
        {
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
LABEL_405:
          v236 = v275;
          if (!(_QWORD)v275)
            break;
          while (1)
          {
            v274 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v236 + 48))(&v277);
            v237 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
            v263 = v277;
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v277 + 264))(&v274, v277, 0, 0);
            if (v237)
            {
              v238 = (unint64_t *)&v237->__shared_owners_;
              do
                v239 = __ldaxr(v238);
              while (__stlxr(v239 - 1, v238));
              if (!v239)
              {
                ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                std::__shared_weak_count::__release_weak(v237);
              }
            }
            if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v269 + 40))(v269) == 4)
            {
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 240))(&v277);
              (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688))
                                                         + 520))(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688), &v274);
              v240 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
              if (*((_QWORD *)&v277 + 1))
              {
                v241 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                {
                  ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                  std::__shared_weak_count::__release_weak(v240);
                }
              }
            }
            v243 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
            if (*((_QWORD *)&v274 + 1))
            {
              v244 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 - 1, v244));
              if (!v245)
              {
                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                std::__shared_weak_count::__release_weak(v243);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v275 + 56))(&v277);
            v70 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
            v275 = v277;
            if (v70)
              break;
            v236 = v277;
            if (!(_QWORD)v277)
              goto LABEL_424;
          }
          v258 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v258);
          while (__stlxr(v72 - 1, v258));
        }
LABEL_424:
        v246 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
        if (*((_QWORD *)&v275 + 1))
        {
          v247 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
          do
            v248 = __ldaxr(v247);
          while (__stlxr(v248 - 1, v247));
          if (!v248)
          {
            ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
            std::__shared_weak_count::__release_weak(v246);
          }
        }
        v249 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
        if (*((_QWORD *)&v276 + 1))
        {
          v250 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
          do
            v251 = __ldaxr(v250);
          while (__stlxr(v251 - 1, v250));
          if (!v251)
          {
            ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
            std::__shared_weak_count::__release_weak(v249);
          }
        }
        *(_QWORD *)&v277 = &v265;
        std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v277);
        goto LABEL_435;
      }
      if ((v7 & 0x20000000) != 0)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v269 + 224))(v269, 1, 1);
        goto LABEL_108;
      }
      v231 = "Destination tree must be empty";
    }
    else
    {
      v231 = "Source must be an existing struct";
    }
    v235 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v235 = 102;
    v235[1] = v231;
    *((_BYTE *)v235 + 16) = 0;
  }
  ExpandXPath((char *)a3, a4, v273);
  ExpandXPath(a5, a6, (uint64_t *)v272);
  v265 = 0uLL;
  if ((XMPUtils::FindCnstNode(v18 + 50, v273, &v270, 0, 0) & 1) == 0)
  {
    v232 = "Can't find source subtree";
    goto LABEL_398;
  }
  if ((XMPUtils::FindCnstNode(v14 + 50, (uint64_t *)v272, (std::string::size_type *)&v269, 0, 0) & 1) != 0)
  {
    v232 = "Destination subtree must not exist";
    goto LABEL_398;
  }
  if ((XMPUtils::FindNode(v14 + 50, (uint64_t *)v272, 1, 0, (char *)&v269, 0, 0) & 1) == 0)
  {
    v232 = "Can't create destination root node";
LABEL_398:
    v233 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v233 = 102;
    v233[1] = v232;
    *((_BYTE *)v233 + 16) = 0;
  }
  if (v18 == v14)
  {
    v114 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
    v113 = v269;
    v277 = v269;
    if (*((_QWORD *)&v269 + 1))
    {
      v115 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
      do
        v116 = __ldxr(v115);
      while (__stxr(v116 + 1, v115));
    }
    if (v113)
    {
      do
      {
        if (v113 == v270)
        {
          v227 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v227 = 102;
          v227[1] = "Destination subtree is within the source subtree";
          *((_BYTE *)v227 + 16) = 0;
        }
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v113 + 56))(&v276);
        v117 = v276;
        v276 = 0uLL;
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
        v277 = v117;
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
        if (*((_QWORD *)&v276 + 1))
        {
          v122 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
          }
        }
        v113 = v277;
      }
      while ((_QWORD)v277);
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    }
    if (v114)
    {
      v124 = (unint64_t *)&v114->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
  }
  if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v270 + 40))(v270) == 1)
  {
    v277 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v270 + 232))(&v277);
    v276 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 88))(&v275);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 72))(&v274);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v277 + 504))(&v263);
    AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode(&v275, &v274, &v263, &v276);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    if (*((_QWORD *)&v263 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
    if (*((_QWORD *)&v274 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
    if (*((_QWORD *)&v275 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v265, (uint64_t)&v276);
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
    if (*((_QWORD *)&v276 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    if (!*((_QWORD *)&v277 + 1))
      goto LABEL_264;
    v36 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
  }
  else if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v270 + 40))(v270) == 2)
  {
    v277 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v270 + 248))(&v277);
    v276 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 88))(&v275);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 72))(&v274);
    v73 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v277 + 640))(v277);
    AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v275, &v274, v73, &v276);
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
    if (*((_QWORD *)&v274 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
    if (*((_QWORD *)&v275 + 1))
    {
      v78 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v265, (uint64_t)&v276);
    v275 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688)) + 552))(&v275);
    while ((_QWORD)v275)
    {
      v274 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v275 + 48))(&v263);
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v263 + 264))(&v274, v263, 0, 0);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      if (*((_QWORD *)&v263 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v276 + *(_QWORD *)(*(_QWORD *)v276 - 688)) + 520))(v276 + *(_QWORD *)(*(_QWORD *)v276 - 688), &v274);
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
      if (*((_QWORD *)&v274 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v275 + 56))(&v274);
      v86 = v274;
      v274 = 0uLL;
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      v275 = v86;
      if (v87)
      {
        v88 = (unint64_t *)&v87->__shared_owners_;
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      v90 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
      if (*((_QWORD *)&v274 + 1))
      {
        v91 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
    }
    v152 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
    if (*((_QWORD *)&v275 + 1))
    {
      v153 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v265, (uint64_t)&v276);
    v155 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
    if (*((_QWORD *)&v276 + 1))
    {
      v156 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    if (!*((_QWORD *)&v277 + 1))
      goto LABEL_264;
    v158 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v37 = __ldaxr(v158);
    while (__stlxr(v37 - 1, v158));
  }
  else
  {
    v277 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v270 + 240))(&v277);
    v276 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v269 + 88))(&v275);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v269 + 72))(&v261);
    AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode(&v275, &v261, &v276);
    v126 = v262;
    if (v262)
    {
      v127 = (unint64_t *)&v262->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
    if (*((_QWORD *)&v275 + 1))
    {
      v130 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v265, (uint64_t)&v276);
    v275 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v277 + *(_QWORD *)(*(_QWORD *)v277 - 688)) + 552))(&v275);
    while ((_QWORD)v275)
    {
      v274 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v275 + 48))(&v263);
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v263 + 264))(&v274, v263, 0, 0);
      v132 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      if (*((_QWORD *)&v263 + 1))
      {
        v133 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (!v134)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v132);
        }
      }
      (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v276 + *(_QWORD *)(*(_QWORD *)v276 - 688)) + 520))(v276 + *(_QWORD *)(*(_QWORD *)v276 - 688), &v274);
      v135 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
      if (*((_QWORD *)&v274 + 1))
      {
        v136 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v275 + 56))(&v274);
      v138 = v274;
      v274 = 0uLL;
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      v275 = v138;
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
      if (*((_QWORD *)&v274 + 1))
      {
        v143 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
    }
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
    if (*((_QWORD *)&v275 + 1))
    {
      v146 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v265, (uint64_t)&v276);
    v148 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
    if (*((_QWORD *)&v276 + 1))
    {
      v149 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    if (!*((_QWORD *)&v277 + 1))
      goto LABEL_264;
    v151 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
    do
      v37 = __ldaxr(v151);
    while (__stlxr(v37 - 1, v151));
  }
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_264:
  if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)v270 + 184))(v270))
  {
    v277 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v270 + 112))(&v277);
    while ((_QWORD)v277)
    {
      v276 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v277 + 48))(&v275);
      (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v275 + 264))(&v276, v275, 0, 0);
      v159 = (std::__shared_weak_count *)*((_QWORD *)&v275 + 1);
      if (*((_QWORD *)&v275 + 1))
      {
        v160 = (unint64_t *)(*((_QWORD *)&v275 + 1) + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v265 + 136))(v265, &v276);
      v162 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
      if (*((_QWORD *)&v276 + 1))
      {
        v163 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v277 + 56))(&v276);
      v165 = v276;
      v276 = 0uLL;
      v166 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
      v277 = v165;
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v169 = (std::__shared_weak_count *)*((_QWORD *)&v276 + 1);
      if (*((_QWORD *)&v276 + 1))
      {
        v170 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
    }
    v172 = (std::__shared_weak_count *)*((_QWORD *)&v277 + 1);
    if (*((_QWORD *)&v277 + 1))
    {
      v173 = (unint64_t *)(*((_QWORD *)&v277 + 1) + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
  }
  v175 = v14[50] + *(_QWORD *)(*(_QWORD *)v14[50] - 792);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v175 + 664))(&v259, v175, &v265);
  v176 = v260;
  if (v260)
  {
    v177 = (unint64_t *)&v260->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  v179 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
  if (!*((_QWORD *)&v265 + 1))
    goto LABEL_435;
  v180 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
  do
    v181 = __ldaxr(v180);
  while (__stlxr(v181 - 1, v180));
LABEL_383:
  if (!v181)
  {
    ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
    std::__shared_weak_count::__release_weak(v179);
  }
LABEL_435:
  v252 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
  if (*((_QWORD *)&v269 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = v271;
  if (v271)
  {
    v256 = (unint64_t *)&v271->__shared_owners_;
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  *(_QWORD *)&v265 = v272;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v265);
  v272[0] = (void **)v273;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](v272);
}

void sub_1880B1190()
{
  uint64_t v0;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v0 - 96);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v0 - 144);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v0 - 128);
  JUMPOUT(0x1880B11D4);
}

void XMPUtils::RemoveProperties_v2(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4)
{
  __int16 v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int *v22;
  const char *v23;
  int v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *size;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  const char *v57;
  _QWORD *v58;
  _QWORD *v59;
  BOOL v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  std::string *p_p;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *exception;
  std::string __p;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  size_t __n;
  std::__shared_weak_count *v97;
  char *__s2;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  int v103;
  char *v104;
  char *v105;
  uint64_t v106;

  if (!this)
    return;
  v4 = (__int16)a4;
  if (!v7)
    return;
  if (!a2 || !a3)
    XMPUtils::RemoveProperties_v2();
  v8 = v7;
  if (!*a3)
  {
    if (!*(_BYTE *)a2)
    {
      v75 = v7[50] + *(_QWORD *)(*(_QWORD *)v7[50] - 544);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 224))(v75, 1, 1);
      return;
    }
    v104 = 0;
    v105 = 0;
    v106 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)(v7[50] + *(_QWORD *)(*(_QWORD *)v7[50] - 688))
                                                      + 552))(&__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (v105 != v104)
        {
          v42 = 0;
          do
          {
            v43 = v8[50] + *(_QWORD *)(*(_QWORD *)v8[50] - 792);
            v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 688))(v43);
            (*(void (**)(std::string *__return_ptr))(**(_QWORD **)&v104[16 * v42] + 88))(&__p);
            (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)&v104[16 * v42] + 72))(&v102);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, __int128 *))(*(_QWORD *)v44 + 744))(&v90, v44, &__p, &v102);
            v45 = v91;
            if (v91)
            {
              p_shared_owners = (unint64_t *)&v91->__shared_owners_;
              do
                v47 = __ldaxr(p_shared_owners);
              while (__stlxr(v47 - 1, p_shared_owners));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
            if (*((_QWORD *)&v102 + 1))
            {
              v49 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v52 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            ++v42;
          }
          while (v42 < (v105 - v104) >> 4);
        }
        if ((v4 & 0x800) == 0
          || (__s2 = 0,
              LODWORD(__n) = 0,
              XMPMeta::GetNamespacePrefix(a2, (const char **)&__s2, (const char **)&__n, v22),
              v54 = sRegisteredAliasMap + 8,
              v55 = *(_QWORD **)sRegisteredAliasMap,
              *(_QWORD *)sRegisteredAliasMap == sRegisteredAliasMap + 8))
        {
LABEL_116:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
          std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          return;
        }
        while (2)
        {
          v56 = *((char *)v55 + 55);
          v57 = (const char *)(v55 + 4);
          if (v56 < 0)
            v57 = (const char *)v55[4];
          if (strncmp(v57, __s2, __n))
          {
LABEL_83:
            v58 = (_QWORD *)v55[1];
            if (v58)
            {
              do
              {
                v59 = v58;
                v58 = (_QWORD *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                v59 = (_QWORD *)v55[2];
                v60 = *v59 == (_QWORD)v55;
                v55 = v59;
              }
              while (!v60);
            }
            v55 = v59;
            if (v59 == (_QWORD *)v54)
              goto LABEL_116;
            continue;
          }
          break;
        }
        v61 = v56;
        v102 = 0uLL;
        if ((v56 & 0x80) != 0)
        {
          v62 = (_BYTE *)v55[4];
          v61 = v55[5];
          if (v61)
            goto LABEL_92;
        }
        else
        {
          v62 = v55 + 4;
          if ((_BYTE)v56)
          {
LABEL_92:
            v63 = &v62[v61];
            v64 = v62;
            while (*v64 != 58)
            {
              ++v64;
              if (!--v61)
              {
                v64 = v63;
                break;
              }
            }
            v65 = v64 - v62;
            if (v64 == v63)
              v65 = -1;
            goto LABEL_101;
          }
        }
        v65 = -1;
LABEL_101:
        v66 = (char *)v8[50];
        v67 = *(_QWORD *)(*(_QWORD *)v66 - 792);
        std::string::basic_string(&__p, (const std::string *)(v55 + 4), v65 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v94);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        (*(void (**)(uint64_t *__return_ptr, char *, XMPMeta *, uint64_t, std::string *, uint64_t))(*(_QWORD *)&v66[v67] + 672))(&v88, &v66[v67], a2, -1, p_p, -1);
        v69 = v89;
        if (v89)
        {
          v70 = (unint64_t *)&v89->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v72 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (*((_QWORD *)&v102 + 1))
        {
          v73 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        goto LABEL_83;
      }
      v102 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 48))(&v102);
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v102 + 88))(&__s2);
      v23 = (const char *)(*(uint64_t (**)(char *))(*(_QWORD *)__s2 + 192))(__s2);
      v24 = strcmp(v23, (const char *)a2);
      v25 = v24;
      v26 = v99;
      if (v99)
      {
        v27 = (unint64_t *)&v99->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
          break;
      }
      if (!v24)
        goto LABEL_38;
LABEL_40:
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(&v102);
      v32 = v102;
      v102 = 0uLL;
      v33 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (*((_QWORD *)&v102 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
    }
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v25)
      goto LABEL_40;
LABEL_38:
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::push_back[abi:ne180100](&v104, &v102);
    goto LABEL_40;
  }
  if (!*(_BYTE *)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Property name requires schema namespace";
    *((_BYTE *)exception + 16) = 0;
  }
  v104 = 0;
  v105 = 0;
  v106 = 0;
  ExpandXPath((char *)a2, a3, (uint64_t *)&v104);
  v103 = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (!XMPUtils::FindNode(v8 + 50, (uint64_t *)&v104, 0, 0, (char *)&__p, &v103, 0)
    || (v4 & 1) == 0 && IsInternalProperty(v104, (_QWORD *)v104 + 4))
  {
    goto LABEL_134;
  }
  v102 = 0uLL;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 56))(&v102);
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v102 + 40))(v102) == 4)
  {
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v102 + 240))(&__s2);
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)__s2 + 688))(__s2);
    (*(void (**)(size_t *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 88))(&__n);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 72))(&v94);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, size_t *, uint64_t *))(*(_QWORD *)v9 + 744))(&v100, v9, &__n, &v94);
    v10 = v101;
    if (v101)
    {
      v11 = (unint64_t *)&v101->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = v95;
    if (v95)
    {
      v14 = (unint64_t *)&v95->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v97;
    if (v97)
    {
      v17 = (unint64_t *)&v97->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v99;
    if (!v99)
      goto LABEL_129;
    v20 = (unint64_t *)&v99->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v102 + 40))(v102) != 2)
      goto LABEL_129;
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v102 + 248))(&__s2);
    (*(void (**)(uint64_t *__return_ptr, char *, _QWORD))(*(_QWORD *)__s2 + 680))(&v92, __s2, v103);
    v76 = v93;
    if (v93)
    {
      v77 = (unint64_t *)&v93->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v19 = v99;
    if (!v99)
      goto LABEL_129;
    v79 = (unint64_t *)&v99->__shared_owners_;
    do
      v21 = __ldaxr(v79);
    while (__stlxr(v21 - 1, v79));
  }
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_129:
  v80 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v81 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_134:
  v83 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v84 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1880B1AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v26 - 128);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  __p = (void *)(v26 - 104);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::INode_v1::GetSimpleQualifier(AdobeXMPCore::INode_v1 *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 128))(&v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if ((_QWORD)v8)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v8 + 232))(&v8);
    *(_OWORD *)a2 = v8;
    if (!v5)
      return;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (!v5)
      return;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1880B1C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CloneIXMPSubtree(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*a1 + 264))(&v12, *a1, 1, 1);
  if (v12)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 248))(&v10);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v10 + *(_QWORD *)(*(_QWORD *)v10 - 688)) + 520))(v10 + *(_QWORD *)(*(_QWORD *)v10 - 688), &v12);
      v3 = v11;
      if (!v11)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) != 4)
        goto LABEL_13;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 240))(&v10);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v10 + 656))(v10, a2);
      v3 = v11;
      if (!v11)
        goto LABEL_13;
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v5 = __ldaxr(v6);
      while (__stlxr(v5 - 1, v6));
    }
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_13:
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1880B1E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t ItemValuesMatch(_QWORD *a1, _QWORD *a2)
{
  __int16 IXMPOptions;
  BOOL v3;
  __int16 v6;
  char v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 *v24;
  __n128 *v25;
  uint64_t NodeChildCount;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  char v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  __n128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  char v91;
  char v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v95;
  char *v96;
  char *v97;
  BOOL v98;
  char v99;
  __n128 v101;
  void *v102;
  std::__shared_weak_count *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  void *v106;
  std::__shared_weak_count *v107;
  __n128 v108;
  void *__p[2];
  uint64_t v110;
  __int128 v111;
  void *v112[2];
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __n128 v116;
  uint64_t v117;
  __n128 v118;
  uint64_t v119;
  __n128 v120;

  LOBYTE(IXMPOptions) = (*a1 | *a2) == 0;
  if (*a1)
    v3 = *a2 == 0;
  else
    v3 = 1;
  if (v3)
    return IXMPOptions & 1;
  IXMPOptions = XMPUtils::GetIXMPOptions(a1);
  v6 = XMPUtils::GetIXMPOptions(a2);
  if ((IXMPOptions & 0x1F00) != (v6 & 0x1F00))
    goto LABEL_170;
  if ((IXMPOptions & 0x1F00) == 0x100)
  {
    NodeChildCount = XMPUtils::GetNodeChildCount(a1);
    if (NodeChildCount != XMPUtils::GetNodeChildCount(a2))
      goto LABEL_170;
    v116 = 0uLL;
    XMPUtils::GetNodeChildIterator(a1, &v116);
    v112[0] = 0;
    v112[1] = 0;
    XMPUtils::GetNodeChildIterator(a2, v112);
    while (1)
    {
      if (!v116.n128_u64[0])
      {
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v112);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v116);
        goto LABEL_168;
      }
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v116.n128_u64[0] + 48))(&v118);
      v27 = v118.n128_u64[0];
      *(__n128 *)__p = v118;
      v118 = 0uLL;
      v28 = a2[1];
      v120.n128_u64[0] = *a2;
      v120.n128_u64[1] = v28;
      if (v28)
      {
        v29 = (unint64_t *)(v28 + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = v27;
      (*(void (**)(__int128 *__return_ptr, unint64_t))(*(_QWORD *)v27 + 88))(&v115, v27);
      v32 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v115 + 192))(v115);
      (*(void (**)(__int128 *__return_ptr, unint64_t))(*(_QWORD *)v31 + 72))(&v114, v31);
      v33 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v114 + 192))(v114);
      XMPUtils::FindChildNode(&v120, v32, v33, 0, 0, (uint64_t *)&v118);
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (*((_QWORD *)&v114 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      if (*((_QWORD *)&v115 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v120.n128_u64[1];
      if (v120.n128_u64[1])
      {
        v41 = (unint64_t *)(v120.n128_u64[1] + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = v118.n128_u64[0];
      if (v118.n128_u64[0])
      {
        v106 = __p[0];
        v107 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v44 = (unint64_t *)((char *)__p[1] + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v104 = v43;
        v105 = (std::__shared_weak_count *)v118.n128_u64[1];
        if (v118.n128_u64[1])
        {
          v46 = (unint64_t *)(v118.n128_u64[1] + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = ItemValuesMatch(&v106, &v104);
        v49 = v105;
        if (v105)
        {
          p_shared_owners = (unint64_t *)&v105->__shared_owners_;
          do
            v51 = __ldaxr(p_shared_owners);
          while (__stlxr(v51 - 1, p_shared_owners));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
        v52 = v48 ^ 1;
        v53 = v107;
        if (v107)
        {
          v54 = (unint64_t *)&v107->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      else
      {
        v52 = 1;
      }
      v56 = (std::__shared_weak_count *)v118.n128_u64[1];
      if (v118.n128_u64[1])
      {
        v57 = (unint64_t *)(v118.n128_u64[1] + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v60 = (unint64_t *)((char *)__p[1] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if ((v52 & 1) != 0)
        break;
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v116.n128_u64[0] + 56))(&v118);
      __p[0] = 0;
      __p[1] = 0;
      v62 = (std::__shared_weak_count *)v116.n128_u64[1];
      v116 = v118;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v112[0] + 56))(&v118);
      v65 = (std::__shared_weak_count *)v112[1];
      *(__n128 *)v112 = v118;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v69 = (unint64_t *)((char *)__p[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v112);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v116);
LABEL_170:
    LOBYTE(IXMPOptions) = 0;
    return IXMPOptions & 1;
  }
  if ((IXMPOptions & 0x1F00) != 0)
  {
    if ((IXMPOptions & 0x200) == 0)
      ItemValuesMatch();
    v71 = XMPUtils::GetNodeChildCount(a1);
    v72 = XMPUtils::GetNodeChildCount(a2);
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 248))(&v118);
    v116 = v118;
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a2 + 248))(&v118);
    *(__n128 *)v112 = v118;
    if (!v71)
    {
LABEL_147:
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v112);
      std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v116);
LABEL_168:
      LOBYTE(IXMPOptions) = 1;
      return IXMPOptions & 1;
    }
    v73 = 1;
    while (1)
    {
      (*(void (**)(__n128 *__return_ptr, unint64_t, uint64_t))(*(_QWORD *)v116.n128_u64[0] + 656))(&v118, v116.n128_u64[0], v73);
      v74 = (std::__shared_weak_count *)v118.n128_u64[1];
      *(__n128 *)__p = v118;
      if (!v72)
        break;
      v75 = 1;
      do
      {
        (*(void (**)(__n128 *__return_ptr, void *, uint64_t))(*(_QWORD *)v112[0] + 656))(&v118, v112[0], v75);
        v76 = v118;
        v120 = v118;
        v102 = __p[0];
        v103 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v77 = (unint64_t *)((char *)__p[1] + 8);
          do
            v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }
        v101 = v76;
        if (v76.n128_u64[1])
        {
          v79 = (unint64_t *)(v76.n128_u64[1] + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        v81 = ItemValuesMatch(&v102, &v101);
        v82 = (std::__shared_weak_count *)v101.n128_u64[1];
        if (v101.n128_u64[1])
        {
          v83 = (unint64_t *)(v101.n128_u64[1] + 8);
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        v85 = v103;
        if (v103)
        {
          v86 = (unint64_t *)&v103->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v88 = (std::__shared_weak_count *)v120.n128_u64[1];
        if (v120.n128_u64[1])
        {
          v89 = (unint64_t *)(v120.n128_u64[1] + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (++v75 > v72)
          v91 = 1;
        else
          v91 = v81;
      }
      while ((v91 & 1) == 0);
      v92 = v81 ^ 1;
      v74 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
        goto LABEL_141;
LABEL_145:
      if ((v92 & 1) != 0)
      {
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v112);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v116);
        goto LABEL_170;
      }
      if (++v73 > v71)
        goto LABEL_147;
    }
    v92 = 1;
    if (!v118.n128_u64[1])
      goto LABEL_145;
LABEL_141:
    v93 = (unint64_t *)&v74->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
    goto LABEL_145;
  }
  v7 = v6;
  v118 = 0uLL;
  v119 = 0;
  (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)*a1 + 232))(&v116);
  *(__n128 *)__p = v116;
  (*(void (**)(void **__return_ptr, __n128))(*(_QWORD *)v116.n128_u64[0] + 504))(v112, v116);
  v8 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v112[0] + 192))(v112[0]);
  std::string::basic_string[abi:ne180100]<0>(&v118, v8);
  v9 = (std::__shared_weak_count *)v112[1];
  if (v112[1])
  {
    v10 = (unint64_t *)((char *)v112[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p[1])
  {
    v12 = (unint64_t *)((char *)__p[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
  }
  v116 = 0uLL;
  v117 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 232))(v112);
  v120 = *(__n128 *)v112;
  (*(void (**)(void **__return_ptr, __n128))(*(_QWORD *)v112[0] + 504))(__p, *(__n128 *)v112);
  v14 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 192))(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v116, v14);
  v15 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v16 = (unint64_t *)((char *)__p[1] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v120.n128_u64[1];
  if (v120.n128_u64[1])
  {
    v19 = (unint64_t *)(v120.n128_u64[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = HIBYTE(v119);
  if (v119 >= 0)
    v22 = HIBYTE(v119);
  else
    v22 = v118.n128_u64[1];
  v23 = HIBYTE(v117);
  if (v117 < 0)
    v23 = v116.n128_u64[1];
  if (v22 != v23)
    goto LABEL_162;
  if (v117 >= 0)
    v24 = &v116;
  else
    v24 = (__n128 *)v116.n128_u64[0];
  if (v119 < 0)
  {
    if (memcmp((const void *)v118.n128_u64[0], v24, v118.n128_u64[1]))
    {
LABEL_162:
      v99 = 0;
      LOBYTE(IXMPOptions) = 0;
      goto LABEL_163;
    }
  }
  else if (HIBYTE(v119))
  {
    v25 = &v118;
    while (v25->n128_u8[0] == v24->n128_u8[0])
    {
      v25 = (__n128 *)((char *)v25 + 1);
      v24 = (__n128 *)((char *)v24 + 1);
      if (!--v21)
        goto LABEL_151;
    }
    goto LABEL_162;
  }
LABEL_151:
  if ((IXMPOptions & 0x40) != (v7 & 0x40))
    goto LABEL_162;
  if ((IXMPOptions & 0x40) == 0)
    goto LABEL_161;
  v115 = 0uLL;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)*a1 + 128))(v112, *a1, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
  v115 = *(_OWORD *)v112;
  v114 = 0uLL;
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)*a2 + 128))(v112, *a2, "http://www.w3.org/XML/1998/namespace", 36, "lang", -1);
  v95 = 0;
  v114 = *(_OWORD *)v112;
  LOBYTE(IXMPOptions) = ((unint64_t)v115 | (unint64_t)v112[0]) == 0;
  if ((_QWORD)v115 && v112[0])
  {
    v112[0] = 0;
    v112[1] = 0;
    v113 = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v115 + 232))(__p);
    v111 = *(_OWORD *)__p;
    (*(void (**)(__n128 *__return_ptr, __n128))(*(_QWORD *)__p[0] + 504))(&v120, *(__n128 *)__p);
    v96 = (char *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v120.n128_u64[0] + 192))(v120.n128_u64[0]);
    std::string::basic_string[abi:ne180100]<0>(v112, v96);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v120);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
    __p[0] = 0;
    __p[1] = 0;
    v110 = 0;
    (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)v114 + 232))(&v120);
    v108 = v120;
    (*(void (**)(__int128 *__return_ptr, __n128))(*(_QWORD *)v120.n128_u64[0] + 504))(&v111, v120);
    v97 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v111 + 192))(v111);
    std::string::basic_string[abi:ne180100]<0>(__p, v97);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v111);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v108);
    v98 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v112, (unsigned __int8 *)__p);
    if (SHIBYTE(v110) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v113) < 0)
      operator delete(v112[0]);
    LOBYTE(IXMPOptions) = 0;
    v95 = !v98;
  }
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v114);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v115);
  if (!v95)
    v99 = 0;
  else
LABEL_161:
    v99 = 1;
LABEL_163:
  if (SHIBYTE(v117) < 0)
    operator delete((void *)v116.n128_u64[0]);
  if (SHIBYTE(v119) < 0)
    operator delete((void *)v118.n128_u64[0]);
  if ((v99 & 1) != 0)
    goto LABEL_168;
  return IXMPOptions & 1;
}

void sub_1880B28E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v32 - 160);
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  _Unwind_Resume(a1);
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void XMPUtils::RemoveProperties_v2()
{
  __assert_rtn("RemoveProperties_v2", "XMPUtils2.cpp", 832, "(schemaNS != 0) && (propName != 0)");
}

void ItemValuesMatch()
{
  __assert_rtn("ItemValuesMatch", "XMPUtils2.cpp", 268, "leftForm & kXMP_PropValueIsArray");
}

{
  __assert_rtn("ItemValuesMatch", "XMPUtils-FileInfo.cpp", 688, "leftForm & kXMP_PropValueIsArray");
}

uint64_t XMPFiles_IO::New_XMPFiles_IO(Host_IO *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int FileMode;
  uint64_t v9;
  Host_IO *v10;
  uint64_t v11;
  _QWORD *exception;
  _QWORD v14[3];

  FileMode = Host_IO::GetFileMode(a1, a2);
  if (!FileMode)
    goto LABEL_5;
  if (FileMode != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 117;
    exception[1] = "New_XMPFiles_IO, path must be a file or not exist";
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = Host_IO::Open(a1, a2);
  v10 = (Host_IO *)v9;
  if ((_DWORD)v9 == -1)
  {
LABEL_5:
    v14[0] = 111;
    v14[1] = "New_XMPFiles_IO, file does not exist";
    v14[2] = 0;
    if (a3)
      GenericErrorCallback::NotifyClient(a3, 0, (unsigned int *)v14, (uint64_t)a1);
    return 0;
  }
  else
  {
    Host_IO::Seek(v9, 0, 0);
    v11 = operator new();
    XMPFiles_IO::XMPFiles_IO(v11, v10, (char *)a1, (char)a2, a3, a4);
  }
  return v11;
}

void sub_1880B2CA4()
{
  __break(1u);
}

void sub_1880B2D14()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B2D1CLL);
}

uint64_t XMPFiles_IO::XMPFiles_IO(uint64_t a1, Host_IO *a2, char *__s, char a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)a1 = &off_1E1BABEF0;
  *(_BYTE *)(a1 + 8) = a4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), __s);
  *(_DWORD *)(a1 + 40) = (_DWORD)a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a6;
  *(_QWORD *)(a1 + 88) = a5;
  if ((_DWORD)a2 == -1)
    __assert_rtn("XMPFiles_IO", "XMPFiles_IO.cpp", 105, "this->fileRef != Host_IO::noFileRef");
  *(_QWORD *)(a1 + 56) = Host_IO::Length(a2);
  return a1;
}

void sub_1880B2DD0()
{
  __break(1u);
  JUMPOUT(0x1880B2E14);
}

void sub_1880B2E1C()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B2E24);
}

void XMPFiles_IO::~XMPFiles_IO(XMPFiles_IO *this, const char *a2)
{
  uint64_t v3;
  Host_IO *v4;

  *(_QWORD *)this = &off_1E1BABEF0;
  if (*((_QWORD *)this + 9))
    XMPFiles_IO::DeleteTemp((uint64_t)this, a2);
  v3 = *((unsigned int *)this + 10);
  if ((_DWORD)v3 != -1)
    Host_IO::Close(v3);
  if (*((_BYTE *)this + 64))
  {
    v4 = (XMPFiles_IO *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      if (!*((_QWORD *)this + 3))
        goto LABEL_12;
      v4 = *(Host_IO **)v4;
    }
    else if (!*((_BYTE *)this + 39))
    {
      goto LABEL_12;
    }
    Host_IO::Delete(v4, a2);
  }
LABEL_12:
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  XMPFiles_IO::~XMPFiles_IO(this, a2);
  JUMPOUT(0x18D761C30);
}

uint64_t XMPFiles_IO::Read(XMPFiles_IO *this, void *a2, uint64_t a3, int a4)
{
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  const char *v16;
  int v17;
  _QWORD *v18;
  _QWORD *exception;

  v5 = *((_DWORD *)this + 10);
  if (v5 == -1)
  {
    v16 = "this->fileRef != Host_IO::noFileRef";
    v17 = 147;
    goto LABEL_14;
  }
  v9 = *((_QWORD *)this + 6);
  if (v9 != Host_IO::Seek(v5, 0, 1u))
  {
    v16 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v17 = 148;
    goto LABEL_14;
  }
  v10 = *((_QWORD *)this + 7);
  if (v10 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    v16 = "this->currLength == Host_IO::Length(this->fileRef)";
    v17 = 149;
    goto LABEL_14;
  }
  v11 = *((_QWORD *)this + 6);
  v12 = *((_QWORD *)this + 7);
  v13 = __OFSUB__(v12, v11);
  v14 = v12 - v11;
  if (v14 < 0 != v13)
  {
    v16 = "this->currOffset <= this->currLength";
    v17 = 150;
LABEL_14:
    __assert_rtn("Read", "XMPFiles_IO.cpp", v17, v16);
  }
  if (v14 < a3)
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMPFiles_IO::Read, not enough data";
      *((_BYTE *)exception + 16) = 0;
    }
    a3 = v14;
  }
  if (Host_IO::Read((Host_IO *)*((unsigned int *)this + 10), a2, a3) != (_DWORD)a3)
  {
    v18 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v18 = 7;
    v18[1] = "XMP_Enforce failed: (amountRead == count) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/"
             "source/XMPFiles_IO.cpp at line 158";
    *((_BYTE *)v18 + 16) = 0;
  }
  *((_QWORD *)this + 6) += a3;
  return a3;
}

void sub_1880B30C8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 == 1)
  {
    v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    v4 = *(_QWORD *)(v2 + 88);
    if (v4)
    {
      v5 = (_QWORD *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v5 = (_QWORD *)*v5;
      GenericErrorCallback::NotifyClient(v4, 2, v3, (uint64_t)v5);
      __cxa_end_catch();
      JUMPOUT(0x1880B2FF4);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1880B311C()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B3124);
}

void XMPFiles_IO::Write(XMPFiles_IO *this, const void *a2, size_t a3)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  XMP_ProgressTracker *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  _QWORD *exception;

  v4 = *((_DWORD *)this + 10);
  if (v4 == -1)
  {
    v15 = "this->fileRef != Host_IO::noFileRef";
    v16 = 174;
    goto LABEL_15;
  }
  v7 = *((_QWORD *)this + 6);
  if (v7 != Host_IO::Seek(v4, 0, 1u))
  {
    v15 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v16 = 175;
    goto LABEL_15;
  }
  v8 = *((_QWORD *)this + 7);
  if (v8 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    v15 = "this->currLength == Host_IO::Length(this->fileRef)";
    v16 = 176;
    goto LABEL_15;
  }
  if (*((_QWORD *)this + 6) > *((_QWORD *)this + 7))
  {
    v15 = "this->currOffset <= this->currLength";
    v16 = 177;
LABEL_15:
    __assert_rtn("Write", "XMPFiles_IO.cpp", v16, v15);
  }
  if (*((_BYTE *)this + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 112;
    exception[1] = "New_XMPFiles_IO, write not permitted on read only file";
    *((_BYTE *)exception + 16) = 0;
  }
  Host_IO::Write((Host_IO *)*((unsigned int *)this + 10), a2, a3);
  v12 = (XMP_ProgressTracker *)*((_QWORD *)this + 10);
  if (v12)
  {
    v9.n128_f32[0] = (float)a3;
    XMP_ProgressTracker::AddWorkDone(v12, v9, v10, v11);
  }
  v13 = *((_QWORD *)this + 7);
  v14 = *((_QWORD *)this + 6) + a3;
  *((_QWORD *)this + 6) = v14;
  if (v14 > v13)
    *((_QWORD *)this + 7) = v14;
}

void sub_1880B3268(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  *(_QWORD *)(v1 + 48) = Host_IO::Seek(*(_DWORD *)(v1 + 40), 0, 1u);
  *(_QWORD *)(v1 + 56) = Host_IO::Length((Host_IO *)*(unsigned int *)(v1 + 40));
  __cxa_rethrow();
}

void sub_1880B32A0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;

  __cxa_end_catch();
  if (a2 != 2)
    _Unwind_Resume(a1);
  v5 = (unsigned int *)__cxa_begin_catch(a1);
  v6 = *(_QWORD *)(v2 + 88);
  if (!v6)
    __cxa_rethrow();
  v7 = (_QWORD *)(v2 + 16);
  if (*(char *)(v2 + 39) < 0)
    v7 = (_QWORD *)*v7;
  GenericErrorCallback::NotifyClient(v6, 2, v5, (uint64_t)v7);
  __cxa_end_catch();
}

void sub_1880B3304()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B330CLL);
}

off_t XMPFiles_IO::Seek(uint64_t a1, off_t a2, unsigned int a3)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  off_t *v9;
  _QWORD *v10;
  off_t v11;
  off_t v12;
  const char *v14;
  int v15;
  _QWORD *exception;
  _QWORD *v17;

  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == -1)
  {
    v14 = "this->fileRef != Host_IO::noFileRef";
    v15 = 210;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 != Host_IO::Seek(v4, 0, 1u))
  {
    v14 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v15 = 211;
    goto LABEL_17;
  }
  v9 = (off_t *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 != Host_IO::Length((Host_IO *)*(unsigned int *)(a1 + 40)))
  {
    v14 = "this->currLength == Host_IO::Length(this->fileRef)";
    v15 = 212;
LABEL_17:
    __assert_rtn("Seek", "XMPFiles_IO.cpp", v15, v14);
  }
  v10 = (_QWORD *)(a1 + 48);
  if (a3 != 1)
  {
    v11 = a2;
    if (a3 != 2)
      goto LABEL_8;
    v10 = (_QWORD *)(a1 + 56);
  }
  v11 = *v10 + a2;
LABEL_8:
  if (v11 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (newOffset >= 0) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK"
                   "/source/XMPFiles_IO.cpp at line 220";
    *((_BYTE *)exception + 16) = 0;
  }
  if (v11 > *v9)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v17 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v17 = 7;
      v17[1] = "XMPFiles_IO::Seek, read-only seek beyond EOF";
      *((_BYTE *)v17 + 16) = 0;
    }
    Host_IO::SetEOF((Host_IO *)*(unsigned int *)(a1 + 40), v11);
    a2 = 0;
    *v9 = v11;
    a3 = 2;
  }
  v12 = Host_IO::Seek(*(_DWORD *)(a1 + 40), a2, a3);
  *(_QWORD *)(a1 + 48) = v12;
  if (v12 != v11)
    __assert_rtn("Seek", "XMPFiles_IO.cpp", 232, "this->currOffset == newOffset");
  return v11;
}

void sub_1880B34D0(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 == 1)
  {
    v3 = (unsigned int *)__cxa_begin_catch(exception_object);
    v4 = *(_QWORD *)(v2 + 88);
    if (v4)
    {
      v5 = (_QWORD *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v5 = (_QWORD *)*v5;
      GenericErrorCallback::NotifyClient(v4, 2, v3, (uint64_t)v5);
      __cxa_end_catch();
      JUMPOUT(0x1880B33E8);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1880B3524()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B352CLL);
}

uint64_t XMPFiles_IO::Length(XMPFiles_IO *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  int v7;

  v2 = *((_DWORD *)this + 10);
  if (v2 == -1)
  {
    v6 = "this->fileRef != Host_IO::noFileRef";
    v7 = 246;
    goto LABEL_8;
  }
  v3 = *((_QWORD *)this + 6);
  if (v3 != Host_IO::Seek(v2, 0, 1u))
  {
    v6 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v7 = 247;
    goto LABEL_8;
  }
  v4 = *((_QWORD *)this + 7);
  if (v4 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    v6 = "this->currLength == Host_IO::Length(this->fileRef)";
    v7 = 248;
LABEL_8:
    __assert_rtn("Length", "XMPFiles_IO.cpp", v7, v6);
  }
  return *((_QWORD *)this + 7);
}

off_t XMPFiles_IO::Truncate(XMPFiles_IO *this, off_t a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  off_t v7;
  uint64_t v8;
  off_t result;
  const char *v10;
  int v11;
  _QWORD *exception;
  _QWORD *v13;

  v3 = *((_DWORD *)this + 10);
  if (v3 == -1)
  {
    v10 = "this->fileRef != Host_IO::noFileRef";
    v11 = 261;
    goto LABEL_14;
  }
  v5 = *((_QWORD *)this + 6);
  if (v5 != Host_IO::Seek(v3, 0, 1u))
  {
    v10 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v11 = 262;
    goto LABEL_14;
  }
  v6 = *((_QWORD *)this + 7);
  if (v6 != Host_IO::Length((Host_IO *)*((unsigned int *)this + 10)))
  {
    v10 = "this->currLength == Host_IO::Length(this->fileRef)";
    v11 = 263;
    goto LABEL_14;
  }
  if (*((_BYTE *)this + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 112;
    exception[1] = "New_XMPFiles_IO, truncate not permitted on read only file";
    *((_BYTE *)exception + 16) = 0;
  }
  if (*((_QWORD *)this + 7) < a2)
  {
    v13 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v13 = 7;
    v13[1] = "XMP_Enforce failed: (length <= this->currLength) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolk"
             "it-SDK/source/XMPFiles_IO.cpp at line 268";
    *((_BYTE *)v13 + 16) = 0;
  }
  Host_IO::SetEOF((Host_IO *)*((unsigned int *)this + 10), a2);
  *((_QWORD *)this + 7) = a2;
  v7 = *((_QWORD *)this + 6);
  if (v7 > a2)
  {
    *((_QWORD *)this + 6) = a2;
    v7 = a2;
  }
  Host_IO::Seek(*((_DWORD *)this + 10), v7, 0);
  v8 = *((_QWORD *)this + 6);
  result = Host_IO::Seek(*((_DWORD *)this + 10), 0, 1u);
  if (v8 != result)
  {
    v10 = "this->currOffset == Host_IO::Offset(this->fileRef)";
    v11 = 276;
LABEL_14:
    __assert_rtn("Truncate", "XMPFiles_IO.cpp", v11, v10);
  }
  return result;
}

void sub_1880B37AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  _QWORD *v17;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v15 = (unsigned int *)__cxa_begin_catch(exception_object);
  v16 = *(_QWORD *)(v14 + 88);
  if (!v16)
    __cxa_rethrow();
  v17 = (_QWORD *)(v14 + 16);
  if (*(char *)(v14 + 39) < 0)
    v17 = (_QWORD *)*v17;
  GenericErrorCallback::NotifyClient(v16, 2, v15, (uint64_t)v17);
  __cxa_end_catch();
}

void sub_1880B3800()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B3808);
}

uint64_t XMPFiles_IO::DeriveTemp(XMPFiles_IO *this)
{
  uint64_t v2;
  Host_IO *v3;
  void **v4;
  uint64_t v5;
  const char *v6;
  void **v8;
  _QWORD *v9;
  _QWORD *exception;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (*((_DWORD *)this + 10) == -1)
    __assert_rtn("DeriveTemp", "XMPFiles_IO.cpp", 288, "this->fileRef != Host_IO::noFileRef");
  v2 = *((_QWORD *)this + 9);
  if (!v2)
  {
    if (*((_BYTE *)this + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "XMPFiles_IO::DeriveTemp, can't derive from read-only";
      *((_BYTE *)exception + 16) = 0;
    }
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    v3 = (XMPFiles_IO *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      v3 = *(Host_IO **)v3;
    Host_IO::CreateTemp(v3, (uint64_t)&v11);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = v11;
    v14 = v12;
    if (v12 >= 0)
      v4 = __p;
    else
      v4 = (void **)v11;
    v5 = XMPFiles_IO::New_XMPFiles_IO((Host_IO *)v4, 0, 0, 0);
    v2 = v5;
    if (!v5)
    {
      if (v14 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      Host_IO::Delete((Host_IO *)v8, v6);
      v9 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v9 = 9;
      v9[1] = "XMPFiles_IO::DeriveTemp, can't open temp file";
      *((_BYTE *)v9 + 16) = 0;
    }
    *(_BYTE *)(v5 + 64) = 1;
    *((_QWORD *)this + 9) = v5;
    *(_QWORD *)(v5 + 80) = *((_QWORD *)this + 10);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_1880B3988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  void **p_p;

  if (a2 == 1)
  {
    v19 = (unsigned int *)__cxa_begin_catch(a1);
    v20 = *(_QWORD *)(v18 + 88);
    if (v20)
    {
      if (a18 >= 0)
        p_p = (void **)&__p;
      else
        p_p = __p;
      GenericErrorCallback::NotifyClient(v20, 2, v19, (uint64_t)p_p);
      __cxa_end_catch();
      JUMPOUT(0x1880B38C0);
    }
    __cxa_rethrow();
  }
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1880B3A48()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B3A50);
}

off_t XMPFiles_IO::AbsorbTemp(XMPFiles_IO *this)
{
  char *v2;
  const char *v3;
  Host_IO *v4;
  std::__fs::filesystem::path *v5;
  const std::__fs::filesystem::path *v6;
  Host_IO *v7;
  off_t result;
  _QWORD *exception;

  if (*((_DWORD *)this + 10) == -1)
    __assert_rtn("AbsorbTemp", "XMPFiles_IO.cpp", 323, "this->fileRef != Host_IO::noFileRef");
  v2 = (char *)*((_QWORD *)this + 9);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "XMPFiles_IO::AbsorbTemp, no temp to absorb";
    *((_BYTE *)exception + 16) = 0;
  }
  if (!v2[64])
    __assert_rtn("AbsorbTemp", "XMPFiles_IO.cpp", 329, "temp->isTemp");
  XMPFiles_IO::Close(this);
  XMPFiles_IO::Close((XMPFiles_IO *)v2);
  v4 = (XMPFiles_IO *)((char *)this + 16);
  v5 = (std::__fs::filesystem::path *)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    v5 = *(std::__fs::filesystem::path **)v4;
  v6 = (const std::__fs::filesystem::path *)(v2 + 16);
  if (v2[39] < 0)
    v6 = (const std::__fs::filesystem::path *)v6->__pn_.__r_.__value_.__r.__words[0];
  Host_IO::SwapData(v5, v6, v3);
  (*(void (**)(XMPFiles_IO *))(*(_QWORD *)this + 56))(this);
  if (*((char *)this + 39) < 0)
    v4 = *(Host_IO **)v4;
  v7 = (Host_IO *)Host_IO::Open(v4, 0);
  *((_DWORD *)this + 10) = (_DWORD)v7;
  result = Host_IO::Length(v7);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = result;
  return result;
}

void sub_1880B3B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  _QWORD *v17;

  if (a2 != 1)
    _Unwind_Resume(exception_object);
  v15 = (unsigned int *)__cxa_begin_catch(exception_object);
  v16 = *(_QWORD *)(v14 + 88);
  if (!v16)
    __cxa_rethrow();
  v17 = (_QWORD *)(v14 + 16);
  if (*(char *)(v14 + 39) < 0)
    v17 = (_QWORD *)*v17;
  GenericErrorCallback::NotifyClient(v16, 2, v15, (uint64_t)v17);
  __cxa_end_catch();
}

void sub_1880B3BD8()
{
  __cxa_end_catch();
  JUMPOUT(0x1880B3BE0);
}

uint64_t XMPFiles_IO::Close(XMPFiles_IO *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 10);
  if ((_DWORD)result != -1)
  {
    result = Host_IO::Close(result);
    *((_DWORD *)this + 10) = -1;
  }
  return result;
}

uint64_t XMPFiles_IO::DeleteTemp(uint64_t this, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Host_IO *v5;

  v2 = *(_QWORD *)(this + 72);
  if (v2)
  {
    v3 = this;
    v4 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v4 != -1)
    {
      Host_IO::Close(v4);
      *(_DWORD *)(v2 + 40) = -1;
    }
    if (*(char *)(v2 + 39) < 0)
    {
      if (!*(_QWORD *)(v2 + 24))
      {
LABEL_10:
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
        *(_QWORD *)(v3 + 72) = 0;
        return this;
      }
      v5 = *(Host_IO **)(v2 + 16);
    }
    else
    {
      v5 = (Host_IO *)(v2 + 16);
      if (!*(_BYTE *)(v2 + 39))
        goto LABEL_10;
    }
    Host_IO::Delete(v5, a2);
    std::string::erase((std::string *)(v2 + 16), 0, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_10;
  }
  return this;
}

AdobeXMPCore_Int::DOMParserImpl *AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl(AdobeXMPCore_Int::DOMParserImpl *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 368)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 312)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 320)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 384)) = a2[9];
  AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex((_QWORD *)this + 1);
  return this;
}

_QWORD *AdobeXMPCore_Int::DOMParserImpl::Clone@<X0>(AdobeXMPCore_Int::DOMParserImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  char *v17;
  char *v18;
  BOOL v19;
  _QWORD *result;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = (char *)(*(uint64_t (**)(AdobeXMPCore_Int::DOMParserImpl *))(*(_QWORD *)this + 312))(this);
  if (v4)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v23, (char *)this + 8, 0);
    v5 = (uint64_t *)(*(_QWORD *)this - 376);
    v6 = (_QWORD *)(*(_QWORD *)v4 - 376);
    v4[*v6 + 48] = *((_BYTE *)this + *v5 + 48);
    v4[*v6 + 49] = *((_BYTE *)this + *v5 + 49);
    v7 = *v5;
    if (*(_QWORD *)((char *)this + v7 + 32))
    {
      v8 = (uint64_t *)operator new();
      v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376) + 32);
      std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::set[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(v8, *(_QWORD **)v9, (_QWORD *)(v9 + 8));
      *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 376) + 32] = v8;
      v7 = *(_QWORD *)(*(_QWORD *)this - 376);
    }
    if (*(_QWORD *)((char *)this + v7 + 40))
    {
      v10 = (_QWORD *)operator new();
      v11 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376) + 40);
      std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::map[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(v10, *(_QWORD **)v11, (_QWORD *)(v11 + 8));
      *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 376) + 40] = v10;
      v7 = *(_QWORD *)(*(_QWORD *)this - 376);
    }
    v12 = (char *)this + v7;
    v13 = (char *)*((_QWORD *)v12 + 1);
    v14 = v12 + 16;
    if (v13 != v12 + 16)
    {
      do
      {
        v15 = (uint64_t **)&v4[*(_QWORD *)(*(_QWORD *)v4 - 376) + 8];
        v26 = v13 + 32;
        v16 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v15, (unint64_t *)v13 + 4, (uint64_t)&std::piecewise_construct, &v26);
        *((_DWORD *)v16 + 10) = *((_DWORD *)v13 + 10);
        v16[6] = (uint64_t *)*((_QWORD *)v13 + 6);
        v17 = (char *)*((_QWORD *)v13 + 1);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (char *)*((_QWORD *)v13 + 2);
            v19 = *(_QWORD *)v18 == (_QWORD)v13;
            v13 = v18;
          }
          while (!v19);
        }
        v13 = v18;
      }
      while (v18 != v14);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v23);
  }
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMParserImpl>(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 45, 1, &v23);
  v21 = v23;
  if (v23)
    v21 = &v23[*(_QWORD *)(*(_QWORD *)v23 - 304)];
  v22 = v24;
  *a2 = v21;
  a2[1] = v22;
  return result;
}

void sub_1880B4098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x18D761C30](v2, 0x1020C4062D53EE8);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMParserImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 384)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 384)]);
  return std::shared_ptr<AdobeXMPCore_Int::DOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880B41D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMParserImpl::Parse(AdobeXMPCore_Int::DOMParserImpl *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  AdobeXMPCore_Int::IErrorNotifier_I *v7;
  char *v8;
  unint64_t *v9;
  unint64_t v10;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 368))
                                                + 264))(&v20);
  if (v20)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    if ((v4 - 1) < 2)
      goto LABEL_15;
    if (v4 != 4)
    {
      v18 = 0;
      v19 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v18);
      (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)]
                                                            + 120))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 80);
      v7 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)] + 112))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)], "Unhandled situation occured", -1);
      if (v18)
        v8 = &v18[*(_QWORD *)(*(_QWORD *)v18 - 304)];
      else
        v8 = 0;
      *(_QWORD *)&v17 = v8;
      *((_QWORD *)&v17 + 1) = v19;
      if (v19)
      {
        v9 = (unint64_t *)(v19 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v7);
      (**ErrorNotifier)(ErrorNotifier, &v17);
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v17;
      v17 = 0uLL;
    }
    v5 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20
                                                                                  + *(_QWORD *)(*(_QWORD *)v20 - 64))
                                                                      + 16))(v20 + *(_QWORD *)(*(_QWORD *)v20 - 64), 0x634D657461646174, 1);
    v6 = (uint64_t)v5;
    if (v5)
    {
      (**(void (***)(char *))&v5[*(_QWORD *)(*(_QWORD *)v5 - 56)])(&v5[*(_QWORD *)(*(_QWORD *)v5 - 56)]);
      std::shared_ptr<AdobeXMPCore::IMetadata_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IMetadata_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, v6, 8, 1);
    }
    else
    {
LABEL_15:
      *a2 = 0;
      a2[1] = 0;
      AdobeXMPCore::IMetadata_v1::CreateMetadata(a2);
      v13 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 688);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 520))(v13, &v20);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1880B449C()
{
  uint64_t v0;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v0);
  JUMPOUT(0x1880B44B8);
}

void sub_1880B44B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMParserImpl::ParseWithSpecificAction(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  __int128 v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  char *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t *v183;
  unint64_t *v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  AdobeXMPCore_Int::IErrorNotifier_I *v188;
  uint64_t v189;
  AdobeXMPCore_Int::IErrorNotifier_I *v190;
  uint64_t v191;
  AdobeXMPCore_Int::IErrorNotifier_I *v192;
  uint64_t v193;
  AdobeXMPCore_Int::IErrorNotifier_I *v194;
  uint64_t v195;
  AdobeXMPCore_Int::IErrorNotifier_I *v196;
  uint64_t v197;
  AdobeXMPCore_Int::IErrorNotifier_I *v198;
  uint64_t v199;
  AdobeXMPCore_Int::IErrorNotifier_I *v200;
  uint64_t v201;
  uint64_t v202;
  AdobeXMPCore_Int::IErrorNotifier_I *v203;
  uint64_t v204;
  uint64_t v205;
  AdobeXMPCore_Int::IErrorNotifier_I *v206;
  uint64_t v207;
  uint64_t v208;
  AdobeXMPCore_Int::IErrorNotifier_I *v209;
  uint64_t v210;
  uint64_t v211;
  AdobeXMPCore_Int::IErrorNotifier_I *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  AdobeXMPCore_Int::IErrorNotifier_I *v218;
  uint64_t v219;
  unint64_t *v220;
  unint64_t v221;
  void (***v222)(_QWORD, __int128 *);
  _OWORD *v223;
  unint64_t *v224;
  unint64_t v225;
  void (***v226)(_QWORD, __int128 *);
  _OWORD *v227;
  unint64_t *v228;
  unint64_t v229;
  void (***v230)(_QWORD, __int128 *);
  _OWORD *v231;
  unint64_t *v232;
  unint64_t v233;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  unint64_t *v236;
  unint64_t v237;
  void (***v238)(_QWORD, __int128 *);
  _OWORD *v239;
  unint64_t *v240;
  unint64_t v241;
  void (***v242)(_QWORD, __int128 *);
  _OWORD *v243;
  unint64_t *v244;
  unint64_t v245;
  void (***v246)(_QWORD, __int128 *);
  _OWORD *v247;
  unint64_t *v248;
  unint64_t v249;
  void (***v250)(_QWORD, __int128 *);
  _OWORD *v251;
  unint64_t *v252;
  unint64_t v253;
  void (***v254)(_QWORD, __int128 *);
  _OWORD *v255;
  unint64_t *v256;
  unint64_t v257;
  void (***v258)(_QWORD, __int128 *);
  _OWORD *v259;
  unint64_t *v260;
  unint64_t v261;
  void (***v262)(_QWORD, __int128 *);
  _OWORD *v263;
  unint64_t *v264;
  unint64_t v265;
  void (***v266)(_QWORD, __int128 *);
  _OWORD *v267;
  unint64_t *v268;
  uint64_t v269;
  __int128 v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t *v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;

  v284 = 0;
  v285 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 368)) + 264))(&v284);
  if (v284)
  {
    switch(a4)
    {
      case 0u:
        if (!*a5)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 88);
          v194 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is invalid", -1);
          if ((_QWORD)v294)
            v195 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v195 = 0;
          *(_QWORD *)&v293 = v195;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v232 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v233 = __ldxr(v232);
            while (__stxr(v233 + 1, v232));
          }
          ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v194);
          (**ErrorNotifier)(ErrorNotifier, &v293);
          exception = __cxa_allocate_exception(0x10uLL);
          *exception = v293;
          v293 = 0uLL;
        }
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5);
        v8 = v7;
        if (v7 != 2 && v7 != 4)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 92);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is non composite", -1);
          v211 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          *(_QWORD *)&v293 = v8;
          v212 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v211 + 152))(v211, &v293);
          if ((_QWORD)v294)
            v213 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v213 = 0;
          *(_QWORD *)&v293 = v213;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v260 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v261 = __ldxr(v260);
            while (__stxr(v261 + 1, v260));
          }
          v262 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v212);
          (**v262)(v262, &v293);
          v263 = __cxa_allocate_exception(0x10uLL);
          *v263 = v293;
          v293 = 0uLL;
        }
        v10 = *a5 + *(_QWORD *)(*(_QWORD *)*a5 - 64);
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 0x63436D704E6F6465, 1);
        v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v284
                                                                                         + *(_QWORD *)(*(_QWORD *)v284 - 64))
                                                                             + 16))(v284 + *(_QWORD *)(*(_QWORD *)v284 - 64), 0x634D657461646174, 1);
        v13 = v12;
        if (!v12)
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 520))(v11, &v284);
          break;
        }
        v294 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 - 688)) + 552))(&v294);
        while ((_QWORD)v294)
        {
          v293 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 48))(&v293);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 56))(&v292);
          v14 = v292;
          v292 = 0uLL;
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          v294 = v14;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v21 = (char *)(*(uint64_t (**)(_QWORD *))(*v13 + 776))(v13);
          v22 = *(_QWORD *)(*(_QWORD *)v21 - 864);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v21[v22] + 744))(&v292, &v21[v22], &v290, &v288);
          v23 = v292;
          v292 = 0uLL;
          v24 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          v293 = v23;
          if (v24)
          {
            v25 = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = v289;
          if (v289)
          {
            v31 = (unint64_t *)&v289->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v33 = v291;
          if (v291)
          {
            v34 = (unint64_t *)&v291->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 520))(v11, &v293);
          v36 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          if (*((_QWORD *)&v293 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (!*((_QWORD *)&v294 + 1))
          break;
        v181 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
        do
          v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        goto LABEL_371;
      case 1u:
        if (!*a5)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 156);
          v196 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is invalid", -1);
          if ((_QWORD)v294)
            v197 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v197 = 0;
          *(_QWORD *)&v293 = v197;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v236 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 1, v236));
          }
          v238 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v196);
          (**v238)(v238, &v293);
          v239 = __cxa_allocate_exception(0x10uLL);
          *v239 = v293;
          v293 = 0uLL;
        }
        v143 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5);
        v144 = v143;
        if (v143 == 2)
          goto LABEL_240;
        if (v143 != 4)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 160);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is non composite", -1);
          v208 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          *(_QWORD *)&v293 = v144;
          v209 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v208 + 152))(v208, &v293);
          if ((_QWORD)v294)
            v210 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v210 = 0;
          *(_QWORD *)&v293 = v210;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v256 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v257 = __ldxr(v256);
            while (__stxr(v257 + 1, v256));
          }
          v258 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v209);
          (**v258)(v258, &v293);
          v259 = __cxa_allocate_exception(0x10uLL);
          *v259 = v293;
          v293 = 0uLL;
        }
        v145 = *a5 + *(_QWORD *)(*(_QWORD *)*a5 - 64);
        v146 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 16))(v145, 0x635374724E6F6465, 1);
        v147 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v284
                                                                                          + *(_QWORD *)(*(_QWORD *)v284 - 64))
                                                                              + 16))(v284 + *(_QWORD *)(*(_QWORD *)v284 - 64), 0x634D657461646174, 1);
        v148 = v147;
        if (!v147)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v146 + 664))(&v294, v146, &v284);
          v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          if (!*((_QWORD *)&v294 + 1))
            break;
          v268 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
          do
            v182 = __ldaxr(v268);
          while (__stlxr(v182 - 1, v268));
          goto LABEL_371;
        }
        v294 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v147 + *(_QWORD *)(*v147 - 688)) + 552))(&v294);
        while ((_QWORD)v294)
        {
          v293 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 48))(&v293);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 56))(&v292);
          v149 = v292;
          v292 = 0uLL;
          v150 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          v294 = v149;
          if (v150)
          {
            v151 = (unint64_t *)&v150->__shared_owners_;
            do
              v152 = __ldaxr(v151);
            while (__stlxr(v152 - 1, v151));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
              std::__shared_weak_count::__release_weak(v150);
            }
          }
          v153 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v154 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
          v156 = (char *)(*(uint64_t (**)(_QWORD *))(*v148 + 776))(v148);
          v157 = *(_QWORD *)(*(_QWORD *)v156 - 864);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v156[v157] + 744))(&v292, &v156[v157], &v290, &v288);
          v158 = v292;
          v292 = 0uLL;
          v159 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          v293 = v158;
          if (v159)
          {
            v160 = (unint64_t *)&v159->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
              std::__shared_weak_count::__release_weak(v159);
            }
          }
          v162 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v163 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v164 = __ldaxr(v163);
            while (__stlxr(v164 - 1, v163));
            if (!v164)
            {
              ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
              std::__shared_weak_count::__release_weak(v162);
            }
          }
          v165 = v289;
          if (v289)
          {
            v166 = (unint64_t *)&v289->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          v168 = v291;
          if (v291)
          {
            v169 = (unint64_t *)&v291->__shared_owners_;
            do
              v170 = __ldaxr(v169);
            while (__stlxr(v170 - 1, v169));
            if (!v170)
            {
              ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
              std::__shared_weak_count::__release_weak(v168);
            }
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v146 + 664))(&v286, v146, &v293);
          v171 = v287;
          if (v287)
          {
            v172 = (unint64_t *)&v287->__shared_owners_;
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v174 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          if (*((_QWORD *)&v293 + 1))
          {
            v175 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
        }
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1))
        {
          v186 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
          do
            v182 = __ldaxr(v186);
          while (__stlxr(v182 - 1, v186));
          goto LABEL_371;
        }
        break;
      case 2u:
        if (!*a5)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 205);
          v190 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is invalid", -1);
          if ((_QWORD)v294)
            v191 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v191 = 0;
          *(_QWORD *)&v293 = v191;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v224 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v225 = __ldxr(v224);
            while (__stxr(v225 + 1, v224));
          }
          v226 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v190);
          (**v226)(v226, &v293);
          v227 = __cxa_allocate_exception(0x10uLL);
          *v227 = v293;
          v293 = 0uLL;
        }
        v69 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5);
        v70 = v69;
        if (v69 == 2)
        {
LABEL_240:
          v178 = *a5 + *(_QWORD *)(*(_QWORD *)*a5 - 64);
          v179 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v178 + 16))(v178, 0x634172724E6F6465, 1);
          AdobeXMPCore_Int::ReplaceChildren(v179, &v284);
          break;
        }
        if (v69 != 4)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 5, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 209);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is non composite", -1);
          v205 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          *(_QWORD *)&v293 = v70;
          v206 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v205 + 152))(v205, &v293);
          if ((_QWORD)v294)
            v207 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v207 = 0;
          *(_QWORD *)&v293 = v207;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v252 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v253 = __ldxr(v252);
            while (__stxr(v253 + 1, v252));
          }
          v254 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v206);
          (**v254)(v254, &v293);
          v255 = __cxa_allocate_exception(0x10uLL);
          *v255 = v293;
          v293 = 0uLL;
        }
        v71 = *a5 + *(_QWORD *)(*(_QWORD *)*a5 - 64);
        v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 16))(v71, 0x635374724E6F6465, 1);
        v73 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v284
                                                                                         + *(_QWORD *)(*(_QWORD *)v284 - 64))
                                                                             + 16))(v284 + *(_QWORD *)(*(_QWORD *)v284 - 64), 0x634D657461646174, 1);
        v74 = v73;
        if (!v73)
        {
          v269 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 688))(v72);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v284 + 88))(&v293);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v284 + 72))(&v292);
          (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v269 + 736))(&v294, v269, &v293, &v292);
          v270 = v294;
          if (*((_QWORD *)&v294 + 1))
          {
            v271 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v272 = __ldaxr(v271);
            while (__stlxr(v272 - 1, v271));
            if (!v272)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v270 + 1) + 16))(*((_QWORD *)&v270 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v270 + 1));
            }
          }
          v273 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v274 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v275 = __ldaxr(v274);
            while (__stlxr(v275 - 1, v274));
            if (!v275)
            {
              ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
              std::__shared_weak_count::__release_weak(v273);
            }
          }
          v276 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          if (*((_QWORD *)&v293 + 1))
          {
            v277 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
            do
              v278 = __ldaxr(v277);
            while (__stlxr(v278 - 1, v277));
            if (!v278)
            {
              ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
              std::__shared_weak_count::__release_weak(v276);
            }
          }
          v279 = *(_QWORD *)v72;
          if (!(_QWORD)v270)
          {
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v72 + *(_QWORD *)(v279 - 688)) + 520))(v72 + *(_QWORD *)(v279 - 688), &v284);
            break;
          }
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *))(v279 + 664))(&v294, v72, &v284);
          v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          if (!*((_QWORD *)&v294 + 1))
            break;
          v280 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
          do
            v182 = __ldaxr(v280);
          while (__stlxr(v182 - 1, v280));
          goto LABEL_371;
        }
        v294 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v73 + *(_QWORD *)(*v73 - 688)) + 552))(&v294);
        while ((_QWORD)v294)
        {
          v293 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 48))(&v293);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 56))(&v292);
          v75 = v292;
          v292 = 0uLL;
          v76 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          v294 = v75;
          if (v76)
          {
            v77 = (unint64_t *)&v76->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v80 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v82 = (char *)(*(uint64_t (**)(_QWORD *))(*v74 + 776))(v74);
          v83 = *(_QWORD *)(*(_QWORD *)v82 - 864);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v82[v83] + 744))(&v292, &v82[v83], &v290, &v288);
          v84 = v292;
          v292 = 0uLL;
          v85 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          v293 = v84;
          if (v85)
          {
            v86 = (unint64_t *)&v85->__shared_owners_;
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          v88 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v89 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v91 = v289;
          if (v289)
          {
            v92 = (unint64_t *)&v289->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          v94 = v291;
          if (v291)
          {
            v95 = (unint64_t *)&v291->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 688))(v72);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v97 + 736))(&v292, v97, &v290, &v288);
          v98 = v292;
          if (*((_QWORD *)&v292 + 1))
          {
            v99 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v98 + 1));
            }
          }
          v101 = v289;
          if (v289)
          {
            v102 = (unint64_t *)&v289->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v104 = v291;
          if (v291)
          {
            v105 = (unint64_t *)&v291->__shared_owners_;
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = *(_QWORD *)v72;
          if ((_QWORD)v98)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(v107 + 664))(&v286, v72, &v293);
            v108 = v287;
            if (v287)
            {
              v109 = (unint64_t *)&v287->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          else
          {
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v72 + *(_QWORD *)(v107 - 688)) + 520))(v72 + *(_QWORD *)(v107 - 688), &v293);
          }
          v111 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          if (*((_QWORD *)&v293 + 1))
          {
            v112 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
        }
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1))
        {
          v187 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
          do
            v182 = __ldaxr(v187);
          while (__stlxr(v182 - 1, v187));
          goto LABEL_371;
        }
        break;
      case 3u:
        if (!*a5)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 228);
          v192 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is invalid", -1);
          if ((_QWORD)v294)
            v193 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v193 = 0;
          *(_QWORD *)&v293 = v193;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v228 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v229 = __ldxr(v228);
            while (__stxr(v229 + 1, v228));
          }
          v230 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v192);
          (**v230)(v230, &v293);
          v231 = __cxa_allocate_exception(0x10uLL);
          *v231 = v293;
          v293 = 0uLL;
        }
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 160))(*a5) & 1) == 0)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 6, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 230);
          v200 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node's Parent is non array node", -1);
          if ((_QWORD)v294)
            v201 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v201 = 0;
          *(_QWORD *)&v293 = v201;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v244 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v245 = __ldxr(v244);
            while (__stxr(v245 + 1, v244));
          }
          v246 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v200);
          (**v246)(v246, &v293);
          v247 = __cxa_allocate_exception(0x10uLL);
          *v247 = v293;
          v293 = 0uLL;
        }
        v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v284
                                                                                + *(_QWORD *)(*(_QWORD *)v284 - 64))
                                                                    + 16))(v284 + *(_QWORD *)(*(_QWORD *)v284 - 64), 0x634D657461646174, 1);
        v115 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 280))(*a5);
        v116 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 528))(v115);
        v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v116[*(_QWORD *)(*(_QWORD *)v116 - 64)]
                                                                  + 16))(&v116[*(_QWORD *)(*(_QWORD *)v116 - 64)], 0x634172724E6F6465, 1);
        if (!v114)
        {
          v185 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 176))(*a5);
          goto LABEL_255;
        }
        v294 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v114 + *(_QWORD *)(*(_QWORD *)v114 - 688)) + 552))(&v294);
        while ((_QWORD)v294)
        {
          v293 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 48))(&v293);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 56))(&v292);
          v117 = v292;
          v292 = 0uLL;
          v118 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          v294 = v117;
          if (v118)
          {
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          v121 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v122 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          v124 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 776))(v114);
          v125 = *(_QWORD *)(*(_QWORD *)v124 - 864);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
          (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v124[v125] + 744))(&v292, &v124[v125], &v290, &v288);
          v126 = v292;
          v292 = 0uLL;
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          v293 = v126;
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v130 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
          if (*((_QWORD *)&v292 + 1))
          {
            v131 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
            do
              v132 = __ldaxr(v131);
            while (__stlxr(v132 - 1, v131));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
              std::__shared_weak_count::__release_weak(v130);
            }
          }
          v133 = v289;
          if (v289)
          {
            v134 = (unint64_t *)&v289->__shared_owners_;
            do
              v135 = __ldaxr(v134);
            while (__stlxr(v135 - 1, v134));
            if (!v135)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          v136 = v291;
          if (v291)
          {
            v137 = (unint64_t *)&v291->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
              std::__shared_weak_count::__release_weak(v136);
            }
          }
          v139 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 176))(*a5);
          (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v42 + 664))(v42, &v293, v139);
          v140 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
          if (*((_QWORD *)&v293 + 1))
          {
            v141 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
        if (!*((_QWORD *)&v294 + 1))
          break;
        v183 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
        do
          v182 = __ldaxr(v183);
        while (__stlxr(v182 - 1, v183));
        goto LABEL_371;
      case 4u:
        if (!*a5)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 4, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 254);
          v188 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node is invalid", -1);
          if ((_QWORD)v294)
            v189 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v189 = 0;
          *(_QWORD *)&v293 = v189;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v220 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
          }
          v222 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v188);
          (**v222)(v222, &v293);
          v223 = __cxa_allocate_exception(0x10uLL);
          *v223 = v293;
          v293 = 0uLL;
        }
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 160))(*a5) & 1) == 0)
        {
          v294 = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(101, 6, 2, &v294);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 256);
          v198 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304)) + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Context Node's Parent is non array node", -1);
          if ((_QWORD)v294)
            v199 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
          else
            v199 = 0;
          *(_QWORD *)&v293 = v199;
          *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v240 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v241 = __ldxr(v240);
            while (__stxr(v241 + 1, v240));
          }
          v242 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v198);
          (**v242)(v242, &v293);
          v243 = __cxa_allocate_exception(0x10uLL);
          *v243 = v293;
          v293 = 0uLL;
        }
        v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v284
                                                                               + *(_QWORD *)(*(_QWORD *)v284 - 64))
                                                                   + 16))(v284 + *(_QWORD *)(*(_QWORD *)v284 - 64), 0x634D657461646174, 1);
        v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 280))(*a5);
        v41 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 528))(v40);
        v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v41[*(_QWORD *)(*(_QWORD *)v41 - 64)]
                                                                  + 16))(&v41[*(_QWORD *)(*(_QWORD *)v41 - 64)], 0x634172724E6F6465, 1);
        if (v39)
        {
          v294 = 0uLL;
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v39 + *(_QWORD *)(*(_QWORD *)v39 - 688)) + 552))(&v294);
          v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 176))(*a5);
          while ((_QWORD)v294)
          {
            v293 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 48))(&v293);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v294 + 56))(&v292);
            v44 = v292;
            v292 = 0uLL;
            v45 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
            v294 = v44;
            if (v45)
            {
              v46 = (unint64_t *)&v45->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
            if (*((_QWORD *)&v292 + 1))
            {
              v49 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 776))(v39);
            v52 = *(_QWORD *)(*(_QWORD *)v51 - 864);
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 88))(&v290);
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v293 + 72))(&v288);
            (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v51[v52] + 744))(&v292, &v51[v52], &v290, &v288);
            v53 = v292;
            v292 = 0uLL;
            v54 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
            v293 = v53;
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
            if (*((_QWORD *)&v292 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = v289;
            if (v289)
            {
              v61 = (unint64_t *)&v289->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v63 = v291;
            if (v291)
            {
              v64 = (unint64_t *)&v291->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v42 + 664))(v42, &v293, v43 + 1);
            v43 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v293 + 176))(v293);
            v66 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
            if (*((_QWORD *)&v293 + 1))
            {
              v67 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
          }
          v180 = (std::__shared_weak_count *)*((_QWORD *)&v294 + 1);
          if (*((_QWORD *)&v294 + 1))
          {
            v184 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
            do
              v182 = __ldaxr(v184);
            while (__stlxr(v182 - 1, v184));
LABEL_371:
            if (!v182)
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
        }
        else
        {
          v185 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 176))(*a5) + 1;
LABEL_255:
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v42 + 664))(v42, &v284, v185);
        }
        break;
      case 5u:
        if (*a5)
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 160))(*a5))
          {
            v177 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5);
            if (v177 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v284 + 40))(v284))
            {
              v294 = 0uLL;
              AdobeXMPCore_Int::IError_I::CreateError(100, 6, 2, &v294);
              (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294
                                                                                + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                    + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 282);
              (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294
                                                                                + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                                    + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "node type is different than what currently array can hold", -1);
              v214 = v294;
              v215 = *(_QWORD *)(*(_QWORD *)v294 - 304);
              *(_QWORD *)&v293 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5);
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(v214 + v215) + 152))(v214 + v215, &v293);
              v216 = v294;
              v217 = *(_QWORD *)(*(_QWORD *)v294 - 304);
              *(_QWORD *)&v293 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v284 + 40))(v284);
              v218 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(v216 + v217) + 152))(v216 + v217, &v293);
              if ((_QWORD)v294)
                v219 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
              else
                v219 = 0;
              *(_QWORD *)&v293 = v219;
              *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
              if (*((_QWORD *)&v294 + 1))
              {
                v264 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              v266 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v218);
              (**v266)(v266, &v293);
              v267 = __cxa_allocate_exception(0x10uLL);
              *v267 = v293;
              v293 = 0uLL;
            }
          }
        }
        std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a5, &v284);
        break;
      default:
        v294 = 0uLL;
        AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2, &v294);
        (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                              + 120))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 317);
        (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304))
                                                              + 112))(v294 + *(_QWORD *)(*(_QWORD *)v294 - 304), "Not yet implemented", -1);
        v202 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
        *(_QWORD *)&v293 = a4;
        v203 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v202 + 152))(v202, &v293);
        if ((_QWORD)v294)
          v204 = v294 + *(_QWORD *)(*(_QWORD *)v294 - 304);
        else
          v204 = 0;
        *(_QWORD *)&v293 = v204;
        *((_QWORD *)&v293 + 1) = *((_QWORD *)&v294 + 1);
        if (*((_QWORD *)&v294 + 1))
        {
          v248 = (unint64_t *)(*((_QWORD *)&v294 + 1) + 8);
          do
            v249 = __ldxr(v248);
          while (__stxr(v249 + 1, v248));
        }
        v250 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v203);
        (**v250)(v250, &v293);
        v251 = __cxa_allocate_exception(0x10uLL);
        *v251 = v293;
        v293 = 0uLL;
    }
  }
  v281 = v285;
  if (v285)
  {
    v282 = (unint64_t *)&v285->__shared_owners_;
    do
      v283 = __ldaxr(v282);
    while (__stlxr(v283 - 1, v282));
    if (!v283)
    {
      ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
      std::__shared_weak_count::__release_weak(v281);
    }
  }
}

void sub_1880B6864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1880B6874);
}

uint64_t AdobeXMPCore_Int::DOMParserImpl::GetMutex@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::DOMParserImpl::GetMutex@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)this + *(_QWORD *)(*this - 280);
  v4 = *((_QWORD *)v2 + 1);
  v3 = *((_QWORD *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

_QWORD *AdobeXMPCore_Int::IDOMParser_I::CreateDOMParser@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v4 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl((uint64_t)v4, a1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMParserImpl.cpp", 328, 1, v8);
  v6 = v8[0];
  if (v8[0])
    v6 = v8[0] + *(_QWORD *)(*(_QWORD *)v8[0] - 64);
  v7 = v8[1];
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_1880B6960(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)]);
  return std::shared_ptr<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880B6A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::DOMParserImpl::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::GetActualIDOMParser(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 320);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMParser_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 320);
}

void AdobeXMPCore_Int::ReplaceChildren(char *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 544)] + 224))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 544)], 1, 1);
  v4 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 64);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 0x634D657461646174, 1);
  v6 = v5;
  if (v5)
  {
    v41 = 0uLL;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 688)) + 552))(&v41);
    while ((_QWORD)v41)
    {
      v40 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v41 + 48))(&v40);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v41 + 56))(&v39);
      v7 = v39;
      v39 = 0uLL;
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      v41 = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (char *)(*(uint64_t (**)(_QWORD *))(*v6 + 776))(v6);
      v15 = *(_QWORD *)(*(_QWORD *)v14 - 864);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v40 + 88))(&v37);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v40 + 72))(&v35);
      (*(void (**)(__int128 *__return_ptr, char *, uint64_t *, uint64_t *))(*(_QWORD *)&v14[v15] + 744))(&v39, &v14[v15], &v37, &v35);
      v16 = v39;
      v39 = 0uLL;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      v40 = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v36;
      if (v36)
      {
        v24 = (unint64_t *)&v36->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v38;
      if (v38)
      {
        v27 = (unint64_t *)&v38->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      (*(void (**)(char *, __int128 *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)] + 520))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)], &v40);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)] + 520))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)], a2);
  }
}

void sub_1880B6E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v6 - 48);
  JUMPOUT(0x1880B6E88);
}

void sub_1880B6E90()
{
  JUMPOUT(0x1880B6E80);
}

uint64_t *std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::set[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(a1, a2, a3);
  return a1;
}

void sub_1880B6ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_hint_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(a1, a2, &v12, &v11, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v6);
    v7 = (uint64_t *)(**MemoryAllocator)(MemoryAllocator, 40);
    v7[4] = *a4;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

_QWORD *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  AdobeXMPCore_Int::IMemoryAllocator_I *v4;
  uint64_t MemoryAllocator;

  if (a2)
  {
    v3 = result;
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(result, *a2);
    v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v3, a2[1]);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, a2);
  }
  return result;
}

_QWORD *std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::map[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
  std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_1880B7224(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (_QWORD *)(result + 8);
    do
    {
      result = std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__find_equal<unsigned long long>(a1, a2, &v12, &v11, a3);
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v6);
    v7 = (**MemoryAllocator)(MemoryAllocator, 48);
    *(_OWORD *)(v7 + 32) = *a4;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    v12 = (**MemoryAllocator)(MemoryAllocator, 56);
    *(_QWORD *)(v12 + 32) = **a4;
    *(_DWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v9;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::DOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC570;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880B748C(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 384) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880B74BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 384) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMParserImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore::IMetadata_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IMetadata_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC378;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880B75E0(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880B760C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IMetadata_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IMetadata_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMParserWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC880;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880B772C(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880B7758(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMParserWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMParserWrapperImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *OUTLINED_FUNCTION_1_1(int a1, void *a2)
{
  return __cxa_get_exception_ptr(a2);
}

_QWORD *OUTLINED_FUNCTION_3_0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = result[1];
  *v1 = *result;
  v1[1] = v2;
  return result;
}

void AdobeXMPCore_Int::DOMParserImpl::Parse(int a1, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  int v5;

  v2 = OUTLINED_FUNCTION_1_1(a1, a2);
  OUTLINED_FUNCTION_3_0(v2);
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_5(v4);
    while (v5);
  }
  OUTLINED_FUNCTION_2_0();
}

void AdobeXMPCore_Int::ReplaceChildren(void *a1)
{
  _QWORD *exception_ptr;
  uint64_t v3;
  unint64_t *v4;
  int v5;
  _QWORD v6[2];

  exception_ptr = __cxa_get_exception_ptr(a1);
  v3 = exception_ptr[1];
  v6[0] = *exception_ptr;
  v6[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      OUTLINED_FUNCTION_5(v4);
    while (v5);
  }
  __cxa_begin_catch(a1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v6);
  __cxa_end_catch();
}

_QWORD *AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x6350617468536567)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 160));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6350617468536567, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPathSegment_I.cpp", 0x28u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6350617468536567, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPathSegment_I.cpp", 0x2Eu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880B79A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPathSegment_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IPathSegment_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x88, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPathSegment_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer(AdobeXMPCore_Int::IPathSegment_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IPathSegment_I::getInterfacePointer((AdobeXMPCore_Int::IPathSegment_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getNameSpace(AdobeXMPCore_Int::IPathSegment_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 160), (void (*)(char **__return_ptr, _QWORD *))0x28, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880B7C4C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880B7C30);
}

void sub_1880B7D48(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getName(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 160), (void (*)(char **__return_ptr, _QWORD *))0x30, 1);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getType(AdobeXMPCore_Int::IPathSegment_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IPathSegment_v1,unsigned int,AdobeXMPCore::IPathSegment_v1::ePathSegmentType>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 160), 0, (uint64_t (*)(_QWORD *))0x38, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IPathSegment_v1,unsigned int,AdobeXMPCore::IPathSegment_v1::ePathSegmentType>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::getValue(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPathSegment_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 160), (void (*)(char **__return_ptr, _QWORD *))0x48, 1);
}

uint64_t AdobeXMPCore_Int::IPathSegment_I::GetActualIPathSegment(AdobeXMPCore_Int::IPathSegment_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 160);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPathSegment_I,void *,void *,unsigned long long,unsigned int>(void *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v8[2];

  v2 = OUTLINED_FUNCTION_4(a1);
  v3 = v2[1];
  v8[0] = *v2;
  v8[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  __cxa_begin_catch(v1);
  v6 = (char *)OUTLINED_FUNCTION_2();
  v7 = OUTLINED_FUNCTION_0_3(v6);
  OUTLINED_FUNCTION_3(v7);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v8);
  __cxa_end_catch();
  OUTLINED_FUNCTION_1_0();
}

void IterNode::~IterNode(void **this)
{
  void **v2;

  v2 = this + 8;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 5;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void IterInfo::~IterInfo(void **this)
{
  void *v2;
  void **v3;

  v3 = this + 18;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 15;
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this[7];
  if (v2)
  {
    this[8] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 32;
      do
      {
        v8 = v6;
        std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v8);
        v8 = v6 - 24;
        std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v8);
        if (*(char *)(v6 - 33) < 0)
          operator delete(*(void **)(v6 - 56));
        v7 = (void *)(v6 - 64);
        v6 -= 96;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<IterNode>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 4;
    do
    {
      v7 = v5;
      std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v7);
      v7 = v5 - 3;
      std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v7);
      if (*((char *)v5 - 33) < 0)
        operator delete(*(v5 - 7));
      v6 = v5 - 8;
      v5 -= 12;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::allocator_traits<std::allocator<IterNode>>::destroy[abi:ne180100]<IterNode,void>(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 64);
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 40);
  std::vector<IterNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t std::vector<IterNode>::__push_back_slow_path<IterNode>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IterNode>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  std::allocator<IterNode>::construct[abi:ne180100]<IterNode,IterNode>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 96;
  std::vector<IterNode>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<IterNode>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1880B82A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IterNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<IterNode>::construct[abi:ne180100]<IterNode,IterNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v3 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(a3 + 88);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IterNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IterNode>,std::reverse_iterator<IterNode*>,std::reverse_iterator<IterNode*>,std::reverse_iterator<IterNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      std::allocator<IterNode>::construct[abi:ne180100]<IterNode,IterNode>(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  LOBYTE(v14) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IterNode>,std::reverse_iterator<IterNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IterNode>,std::reverse_iterator<IterNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<IterNode>,std::reverse_iterator<IterNode*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<IterNode>,std::reverse_iterator<IterNode*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator_traits<std::allocator<IterNode>>::destroy[abi:ne180100]<IterNode,void>(v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<IterNode>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v4 - 96;
    std::allocator_traits<std::allocator<IterNode>>::destroy[abi:ne180100]<IterNode,void>(v5, v4 - 96);
  }
}

void AdvanceIterPos()
{
  __assert_rtn("AdvanceIterPos", "XMPIterator.cpp", 254, "(info.currPos == info.endPos) || (info.currPos->visitStage == kIter_BeforeVisit)");
}

uint64_t ImportPhotoData(uint64_t a1, PhotoDataUtils *a2, unsigned int (***a3)(_QWORD, uint64_t, void **), uint64_t a4, uint64_t a5, char a6)
{
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  void **v17;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  char *__s1;
  uint64_t v24;

  v22 = 0;
  __s1 = 0;
  v24 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 36864, &v22))
  {
    v12 = WORD1(v22) == 7;
  }
  else
  {
    v12 = 0;
  }
  if (v12 && HIDWORD(v22) == 4)
    v14 = strncmp(__s1, "0230", 4uLL) >> 31;
  else
    LOBYTE(v14) = 1;
  v21[0] = 0;
  v21[1] = 0;
  TXMPMeta<std::string>::TXMPMeta(v21);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSLatitude"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLatitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSLongitude"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLongitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSAltitude"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings"))
    TXMPUtils<std::string>::DuplicateSubtree(a5, (uint64_t)v21, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://ns.adobe.com/tiff/1.0/", 0, (const char *)1);
  TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", 0, (const char *)1);
  if ((v14 & 1) == 0)
    TXMPUtils<std::string>::RemoveProperties(a5, (XMPMeta *)"http://cipa.jp/exif/1.0/", 0, (const char *)1);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSLatitude"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLatitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSLongitude"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSLongitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSAltitude"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitude", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", 0, 0, 0);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)v21, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)v21, a5, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  PhotoDataUtils::ImportPSIR(a3, a5, a4);
  v15 = a6 & 2;
  if ((a6 & 2) != 0)
    PhotoDataUtils::Import2WayIPTC(a2, a5, a4);
  v16 = a6 & 4;
  if (v16)
    PhotoDataUtils::Import2WayExif (a1, a5);
  if ((v16 >> 2) | (v15 >> 1))
    PhotoDataUtils::Import3WayItems(a1, (uint64_t)a2, a5, a4);
  if (!TXMPMeta<std::string>::DoesPropertyExist(a5, "http://ns.adobe.com/photoshop/1.0/", "DateCreated"))
  {
    __p[0] = 0;
    __p[1] = 0;
    v20 = 0;
    if (TXMPMeta<std::string>::GetProperty(a5, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", (uint64_t)__p, 0))
    {
      if (v20 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      TXMPMeta<std::string>::SetProperty(a5, "http://ns.adobe.com/photoshop/1.0/", "DateCreated", (uint64_t)v17, 0);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
  return TXMPMeta<std::string>::~TXMPMeta(v21);
}

void sub_1880B8AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  TXMPMeta<std::string>::~TXMPMeta(&a15);
  _Unwind_Resume(a1);
}

uint64_t ExportPhotoData(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v12;
  unsigned __int8 *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  char *__s1;
  uint64_t v21;

  if (a1 != 1246774599 && a1 != 1347634208 && a1 != 1414088262)
    ExportPhotoData();
  v9 = a3;
  if (a1 == 1414088262
    && a3
    && (*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 0, 50706, 0))
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 40))(v9, 0, 33723);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 40))(v9, 0, 34377);
    v12 = 0;
    a4 = 0;
    v13 = 0;
    a5 = 0;
LABEL_19:
    PhotoDataUtils::ExportExif (a2, v9);
    goto LABEL_20;
  }
  if (a4)
  {
    PhotoDataUtils::ExportIPTC(a2, a4);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    v13 = *(unsigned __int8 **)(a4 + 32);
    a4 = *(unsigned int *)(a4 + 40);
    if (a5)
      PhotoDataUtils::SetIPTCDigest(v13, a4, a5);
    if (v9)
      goto LABEL_19;
  }
  else
  {
    v13 = 0;
    v12 = 0;
    if (v9)
      goto LABEL_19;
  }
LABEL_20:
  if (a5)
    PhotoDataUtils::ExportPSIR(a2, a5);
  switch(a1)
  {
    case 1246774599:
      v14 = v12 ^ 1;
      if (!a5)
        v14 = 1;
      if ((v14 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a5 + 8))(a5, 1028, v13, a4);
      break;
    case 1414088262:
      if (!v9)
        ExportPhotoData();
      if (v12)
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v9 + 32))(v9, 0, 33723, 7, a4, v13);
      if (a5 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5))
      {
        v19 = 0;
        v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a5 + 56))(a5, &v19);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 0, 34377, 7, v15, v19);
      }
      goto LABEL_44;
    case 1347634208:
      if (!a5)
        ExportPhotoData();
      if (v12)
        (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a5 + 8))(a5, 1028, v13, a4);
      if (v9)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 184))(v9))
        {
          v19 = 0;
          v16 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v9 + 224))(v9, &v19, 0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 8))(a5, 1058, v19, v16);
        }
        goto LABEL_44;
      }
LABEL_48:
      LOBYTE(v9) = 1;
      goto LABEL_49;
  }
  if (!v9)
    goto LABEL_48;
LABEL_44:
  v19 = 0;
  __s1 = 0;
  v21 = 0;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v9 + 24))(v9, 2, 36864, &v19);
  LOBYTE(v9) = 1;
  if (v17 && WORD1(v19) == 7 && HIDWORD(v19) == 4)
    LODWORD(v9) = strncmp(__s1, "0230", 4uLL) >> 31;
LABEL_49:
  v19 = 0;
  __s1 = 0;
  TXMPMeta<std::string>::TXMPMeta(&v19);
  if (TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings"))
    TXMPUtils<std::string>::DuplicateSubtree(a2, (uint64_t)&v19, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://ns.adobe.com/tiff/1.0/", 0, (const char *)1);
  TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", 0, (const char *)1);
  if ((v9 & 1) == 0)
    TXMPUtils<std::string>::RemoveProperties(a2, (XMPMeta *)"http://cipa.jp/exif/1.0/", 0, (const char *)1);
  if (TXMPMeta<std::string>::DoesPropertyExist((uint64_t)&v19, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings"))
    TXMPUtils<std::string>::DuplicateSubtree((uint64_t)&v19, a2, (XMPMeta *)"http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, 0, 0);
  return TXMPMeta<std::string>::~TXMPMeta(&v19);
}

void sub_1880B8F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  TXMPMeta<std::string>::~TXMPMeta(va);
  _Unwind_Resume(a1);
}

void ExportPhotoData()
{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 113, "(destFormat == kXMP_JPEGFile) || (destFormat == kXMP_TIFFFile) || (destFormat == kXMP_PhotoshopFile)");
}

{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 160, "exif != 0");
}

{
  __assert_rtn("ExportPhotoData", "ReconcileLegacy.cpp", 172, "psir != 0");
}

BOOL AdobeXMPCore_Int::ErrorNotifierWrapperImpl_v1::Notify(uint64_t a1, _QWORD *a2)
{
  int v2;
  BOOL v3;
  int v5;

  v5 = 0;
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, int *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *a2, &v5);
  if (v5)
    v3 = 1;
  else
    v3 = v2 == 0;
  return !v3;
}

_QWORD *AdobeXMPCore_Int::CreateErrorNotifierWrapperImpl(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x10);
    *result = &off_1E1BBAC18;
    result[1] = v1;
  }
  return result;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::TryLock(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::LockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::TryLockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

uint64_t AdobeXMPCore_Int::SharedMutexImpl::UnlockShared(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  return 0;
}

void AdobeXMPCore_Int::SharedMutexImpl::~SharedMutexImpl(AdobeXMPCore_Int::SharedMutexImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedMutexImpl *)((char *)this + 8), (uint64_t *)&off_1E1BAA5F0);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedMutexImpl *)((char *)this + 8), (uint64_t *)&off_1E1BAA5F0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::SharedMutexImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SharedMutexImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC650;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880B9110(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880B913C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::SharedMutexImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SharedMutexImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SharedMutexImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SharedMutexImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointer(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::INameSpacePrefixMap_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x634E5350724D6170)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 48));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E5350724D6170, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 0x28u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E5350724D6170, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 0x2Eu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880B92A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::getInterfacePointer(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INameSpacePrefixMap_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x10, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INameSpacePrefixMap_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::insert(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 48), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x28, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 52, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;

  v11 = a4;
  *a1 = 0;
  v12 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  return v11(v12, a8, a9, a10, a11);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::insert(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::insert((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::remove(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  char *v5;
  uint64_t v6;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  v6 = 48;
  if (*((_DWORD *)v5 + 3) == a2)
    v6 = 56;
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(a5, (uint64_t)v5, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v6, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 60, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::remove(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::remove((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  char *v5;
  uint64_t v6;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  v6 = 64;
  if (*((_DWORD *)v5 + 3) == a2)
    v6 = 72;
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(a5, (uint64_t)v5, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v6, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 68, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INameSpacePrefixMap_v1,unsigned int,BOOL,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::isPresent((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::get(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  char *v6;
  uint64_t v7;

  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  if (*((_DWORD *)v6 + 3) == a2)
    v7 = 88;
  else
    v7 = 80;
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,char const*,unsigned long long>(a5, (uint64_t)v6, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))v7, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INameSpacePrefixMap_I.cpp", 76, (uint64_t)a3, a4);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1880B9964(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880B9948);
}

void sub_1880B9A60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::get(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, int a2, const char *a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::get((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::clone(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*,AdobeXMPCore::INameSpacePrefixMap_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 48), (void (*)(char **__return_ptr, _QWORD *))0x70, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*,AdobeXMPCore::INameSpacePrefixMap_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E5350724D6170, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880B9BC4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880B9BA8);
}

void sub_1880B9CC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::clone(AdobeXMPCore_Int::INameSpacePrefixMap_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INameSpacePrefixMap_I::clone((AdobeXMPCore_Int::INameSpacePrefixMap_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)), a2);
}

uint64_t AdobeXMPCore_Int::INameSpacePrefixMap_I::GetActualINameSpacePrefixMap(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 48);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::GetActualINameSpacePrefixMap(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 160)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) - 48);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INameSpacePrefixMap_I::GetINameSpacePrefixMap_I(AdobeXMPCore_Int::INameSpacePrefixMap_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 168);
}

double PerfUtils::GetElapsedSeconds(PerfUtils *this, uint64_t a2)
{
  double v4;
  unint64_t v5;
  unint64_t v6;

  if (dword_1EDF03F9C)
  {
    v4 = *(double *)&PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sConversionFactor;
  }
  else
  {
    mach_timebase_info((mach_timebase_info_t)&PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sTimebaseInfo);
    LODWORD(v6) = PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sTimebaseInfo;
    LODWORD(v5) = dword_1EDF03F9C;
    v4 = (double)v5 / (double)v6 / 1000000000.0;
    PerfUtils::GetElapsedSeconds(unsigned long long,unsigned long long)::sConversionFactor = *(_QWORD *)&v4;
  }
  return v4 * (double)(unint64_t)(a2 - (_QWORD)this);
}

double MD5Init(MD5_CTX *a1)
{
  double result;

  *(_QWORD *)a1->count = 0;
  result = -3.59869635e230;
  *(_OWORD *)a1->state = xmmword_18822F2B0;
  return result;
}

void *MD5Update(MD5_CTX *a1, unsigned __int8 *__src, unsigned int a3)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;

  v6 = ((unint64_t)a1->count[0] >> 3) & 0x3F;
  *(_QWORD *)a1->count += __PAIR64__(a3 >> 29, 8 * a3);
  v7 = 64 - v6;
  if (64 - (int)v6 <= a3)
  {
    memcpy(&a1->buffer[v6], __src, (64 - v6));
    MD5Transform(a1->state, (const char *)a1->buffer);
    v9 = v6 ^ 0x7F;
    if ((v6 ^ 0x7F) >= a3)
    {
      v8 = 0;
    }
    else
    {
      do
      {
        MD5Transform(a1->state, (const char *)&__src[v9 - 63]);
        v9 += 64;
      }
      while (v9 < a3);
      v8 = 0;
      v7 = v9 - 63;
    }
  }
  else
  {
    v7 = 0;
    v8 = v6;
  }
  return memcpy(&a1->buffer[v8], &__src[v7], a3 - v7);
}

int8x16_t MD5Transform(unsigned int *a1, const char *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint16x8_t v5;
  int8x16_t v6;
  uint16x8_t v7;
  uint16x8_t v8;
  uint16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v21;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int8x16_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int8x16_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int8x16_t result;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int8x16x4_t v96;

  v96 = vld4q_s8(a2);
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
  v6 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v5.i8);
  v7 = vmovl_high_u8((uint8x16_t)v96.val[0]);
  v8 = vmovl_high_u8((uint8x16_t)v96.val[1]);
  v9 = vmovl_u8(*(uint8x8_t *)v96.val[1].i8);
  v10 = vorrq_s8((int8x16_t)vshll_high_n_u16(v8, 8uLL), (int8x16_t)vmovl_high_u16(v7));
  v11 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v8.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v7.i8));
  v12 = vorrq_s8((int8x16_t)vshll_high_n_u16(v9, 8uLL), (int8x16_t)vmovl_high_u16(v5));
  v13 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v9.i8, 8uLL), v6);
  _Q3 = vmovl_u8(*(uint8x8_t *)v96.val[2].i8);
  _Q4 = vmovl_high_u8((uint8x16_t)v96.val[2]);
  __asm { SHLL2           V5.4S, V4.8H, #0x10 }
  v21 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q4.i8, 0x10uLL);
  __asm { SHLL2           V4.4S, V3.8H, #0x10 }
  v23 = vorrq_s8(v13, (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q3.i8, 0x10uLL));
  v24 = vorrq_s8(v12, _Q4);
  v25 = vorrq_s8(v10, _Q5);
  v26 = vmovl_high_u8((uint8x16_t)v96.val[3]);
  v27 = vmovl_u8(*(uint8x8_t *)v96.val[3].i8);
  v28 = vorrq_s8(v23, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL));
  HIDWORD(v29) = *a1 + (v4 & v2) + (v3 & ~v2) + v28.i32[0] - 680876936;
  LODWORD(v29) = HIDWORD(v29);
  v30 = (v29 >> 25) + v2;
  HIDWORD(v29) = v3 + v28.i32[1] + (v4 & ~v30) + (v30 & v2) - 389564586;
  LODWORD(v29) = HIDWORD(v29);
  v31 = (v29 >> 20) + v30;
  HIDWORD(v29) = v4 + v28.i32[2] + (v2 & ~v31) + (v31 & v30) + 606105819;
  LODWORD(v29) = HIDWORD(v29);
  v32 = vorrq_s8(v24, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v27), 0x18uLL));
  v33 = (v29 >> 15) + v31;
  HIDWORD(v29) = v2 + v28.i32[3] + (v30 & ~v33) + (v33 & v31) - 1044525330;
  LODWORD(v29) = HIDWORD(v29);
  v34 = (v29 >> 10) + v33;
  HIDWORD(v29) = v32.i32[0] + v30 + (v31 & ~v34) + (v34 & v33) - 176418897;
  LODWORD(v29) = HIDWORD(v29);
  v35 = (v29 >> 25) + v34;
  HIDWORD(v29) = v32.i32[1] + v31 + (v33 & ~v35) + (v35 & v34) + 1200080426;
  LODWORD(v29) = HIDWORD(v29);
  v36 = (v29 >> 20) + v35;
  HIDWORD(v29) = v32.i32[2] + v33 + (v34 & ~v36) + (v36 & v35) - 1473231341;
  LODWORD(v29) = HIDWORD(v29);
  v37 = vorrq_s8(vorrq_s8(v11, v21), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8), 0x18uLL));
  v38 = (v29 >> 15) + v36;
  HIDWORD(v29) = v32.i32[3] + v34 + (v35 & ~v38) + (v38 & v36) - 45705983;
  LODWORD(v29) = HIDWORD(v29);
  v39 = (v29 >> 10) + v38;
  HIDWORD(v29) = v37.i32[0] + v35 + (v36 & ~v39) + (v39 & v38) + 1770035416;
  LODWORD(v29) = HIDWORD(v29);
  v40 = (v29 >> 25) + v39;
  HIDWORD(v29) = v37.i32[1] + v36 + (v38 & ~v40) + (v40 & v39) - 1958414417;
  LODWORD(v29) = HIDWORD(v29);
  v41 = (v29 >> 20) + v40;
  HIDWORD(v29) = v37.i32[2] + v38 + (v39 & ~v41) + (v41 & v40) - 42063;
  LODWORD(v29) = HIDWORD(v29);
  result = vorrq_s8(v25, (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v26), 0x18uLL));
  v43 = (v29 >> 15) + v41;
  HIDWORD(v29) = v37.i32[3] + v39 + (v40 & ~v43) + (v43 & v41) - 1990404162;
  LODWORD(v29) = HIDWORD(v29);
  v44 = (v29 >> 10) + v43;
  HIDWORD(v29) = result.i32[0] + v40 + (v41 & ~v44) + (v44 & v43) + 1804603682;
  LODWORD(v29) = HIDWORD(v29);
  v45 = (v29 >> 25) + v44;
  HIDWORD(v29) = result.i32[1] + v41 + (v43 & ~v45) + (v45 & v44) - 40341101;
  LODWORD(v29) = HIDWORD(v29);
  v46 = (v29 >> 20) + v45;
  HIDWORD(v29) = result.i32[2] + v43 + (v44 & ~v46) + (v46 & v45) - 1502002290;
  LODWORD(v29) = HIDWORD(v29);
  v47 = (v29 >> 15) + v46;
  HIDWORD(v29) = result.i32[3] + v44 + (v45 & ~v47) + (v47 & v46) + 1236535329;
  LODWORD(v29) = HIDWORD(v29);
  v48 = (v29 >> 10) + v47;
  HIDWORD(v29) = v28.i32[1] + v45 + (v47 & ~v46) - 165796510 + (v48 & v46);
  LODWORD(v29) = HIDWORD(v29);
  v49 = (v29 >> 27) + v48;
  HIDWORD(v29) = v32.i32[2] + v46 + (v48 & ~v47) - 1069501632 + (v49 & v47);
  LODWORD(v29) = HIDWORD(v29);
  v50 = (v29 >> 23) + v49;
  HIDWORD(v29) = v37.i32[3] + v47 + (v49 & ~v48) + 643717713 + (v50 & v48);
  LODWORD(v29) = HIDWORD(v29);
  v51 = (v29 >> 18) + v50;
  HIDWORD(v29) = v28.i32[0] + v48 + (v50 & ~v49) - 373897302 + (v51 & v49);
  LODWORD(v29) = HIDWORD(v29);
  v52 = (v29 >> 12) + v51;
  HIDWORD(v29) = v32.i32[1] + v49 + (v51 & ~v50) - 701558691 + (v52 & v50);
  LODWORD(v29) = HIDWORD(v29);
  v53 = (v29 >> 27) + v52;
  HIDWORD(v29) = v37.i32[2] + v50 + (v52 & ~v51) + 38016083 + (v53 & v51);
  LODWORD(v29) = HIDWORD(v29);
  v54 = (v29 >> 23) + v53;
  HIDWORD(v29) = result.i32[3] + v51 + (v53 & ~v52) - 660478335 + (v54 & v52);
  LODWORD(v29) = HIDWORD(v29);
  v55 = (v29 >> 18) + v54;
  HIDWORD(v29) = v32.i32[0] + v52 + (v54 & ~v53) - 405537848 + (v55 & v53);
  LODWORD(v29) = HIDWORD(v29);
  v56 = (v29 >> 12) + v55;
  HIDWORD(v29) = v37.i32[1] + v53 + (v55 & ~v54) + 568446438 + (v56 & v54);
  LODWORD(v29) = HIDWORD(v29);
  v57 = (v29 >> 27) + v56;
  HIDWORD(v29) = result.i32[2] + v54 + (v56 & ~v55) - 1019803690 + (v57 & v55);
  LODWORD(v29) = HIDWORD(v29);
  v58 = (v29 >> 23) + v57;
  HIDWORD(v29) = v28.i32[3] + v55 + (v57 & ~v56) - 187363961 + (v58 & v56);
  LODWORD(v29) = HIDWORD(v29);
  v59 = (v29 >> 18) + v58;
  HIDWORD(v29) = v37.i32[0] + v56 + (v58 & ~v57) + 1163531501 + (v59 & v57);
  LODWORD(v29) = HIDWORD(v29);
  v60 = (v29 >> 12) + v59;
  HIDWORD(v29) = result.i32[1] + v57 + (v59 & ~v58) - 1444681467 + (v60 & v58);
  LODWORD(v29) = HIDWORD(v29);
  v61 = (v29 >> 27) + v60;
  HIDWORD(v29) = v28.i32[2] + v58 + (v60 & ~v59) - 51403784 + (v61 & v59);
  LODWORD(v29) = HIDWORD(v29);
  v62 = (v29 >> 23) + v61;
  HIDWORD(v29) = v32.i32[3] + v59 + (v61 & ~v60) + 1735328473 + (v62 & v60);
  LODWORD(v29) = HIDWORD(v29);
  v63 = (v29 >> 18) + v62;
  HIDWORD(v29) = result.i32[0] + v60 + (v62 & ~v61) - 1926607734 + (v63 & v61);
  LODWORD(v29) = HIDWORD(v29);
  v64 = (v29 >> 12) + v63;
  HIDWORD(v29) = v32.i32[1] + v61 - 378558 + (v64 ^ v63 ^ v62);
  LODWORD(v29) = HIDWORD(v29);
  v65 = (v29 >> 28) + v64;
  HIDWORD(v29) = v37.i32[0] + v62 - 2022574463 + (v64 ^ v63 ^ v65);
  LODWORD(v29) = HIDWORD(v29);
  v66 = (v29 >> 21) + v65;
  HIDWORD(v29) = v37.i32[3] + v63 + 1839030562 + (v65 ^ v64 ^ v66);
  LODWORD(v29) = HIDWORD(v29);
  v67 = (v29 >> 16) + v66;
  HIDWORD(v29) = result.i32[2] + v64 - 35309556 + (v66 ^ v65 ^ v67);
  LODWORD(v29) = HIDWORD(v29);
  v68 = (v29 >> 9) + v67;
  HIDWORD(v29) = v28.i32[1] + v65 - 1530992060 + (v67 ^ v66 ^ v68);
  LODWORD(v29) = HIDWORD(v29);
  v69 = (v29 >> 28) + v68;
  HIDWORD(v29) = v32.i32[0] + v66 + 1272893353 + (v68 ^ v67 ^ v69);
  LODWORD(v29) = HIDWORD(v29);
  v70 = (v29 >> 21) + v69;
  HIDWORD(v29) = v32.i32[3] + v67 - 155497632 + (v69 ^ v68 ^ v70);
  LODWORD(v29) = HIDWORD(v29);
  v71 = (v29 >> 16) + v70;
  HIDWORD(v29) = v37.i32[2] + v68 - 1094730640 + (v70 ^ v69 ^ v71);
  LODWORD(v29) = HIDWORD(v29);
  v72 = (v29 >> 9) + v71;
  HIDWORD(v29) = result.i32[1] + v69 + 681279174 + (v71 ^ v70 ^ v72);
  LODWORD(v29) = HIDWORD(v29);
  v73 = (v29 >> 28) + v72;
  HIDWORD(v29) = v28.i32[0] + v70 - 358537222 + (v72 ^ v71 ^ v73);
  LODWORD(v29) = HIDWORD(v29);
  v74 = (v29 >> 21) + v73;
  HIDWORD(v29) = v28.i32[3] + v71 - 722521979 + (v73 ^ v72 ^ v74);
  LODWORD(v29) = HIDWORD(v29);
  v75 = (v29 >> 16) + v74;
  HIDWORD(v29) = v32.i32[2] + v72 + 76029189 + (v74 ^ v73 ^ v75);
  LODWORD(v29) = HIDWORD(v29);
  v76 = (v29 >> 9) + v75;
  HIDWORD(v29) = v37.i32[1] + v73 - 640364487 + (v75 ^ v74 ^ v76);
  LODWORD(v29) = HIDWORD(v29);
  v77 = (v29 >> 28) + v76;
  HIDWORD(v29) = result.i32[0] + v74 - 421815835 + (v76 ^ v75 ^ v77);
  LODWORD(v29) = HIDWORD(v29);
  v78 = (v29 >> 21) + v77;
  HIDWORD(v29) = result.i32[3] + v75 + 530742520 + (v77 ^ v76 ^ v78);
  LODWORD(v29) = HIDWORD(v29);
  v79 = (v29 >> 16) + v78;
  HIDWORD(v29) = v28.i32[2] + v76 - 995338651 + (v78 ^ v77 ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  v80 = (v29 >> 9) + v79;
  HIDWORD(v29) = v28.i32[0] + v77 - 198630844 + ((v80 | ~v78) ^ v79);
  LODWORD(v29) = HIDWORD(v29);
  v81 = (v29 >> 26) + v80;
  HIDWORD(v29) = v32.i32[3] + v78 + 1126891415 + ((v81 | ~v79) ^ v80);
  LODWORD(v29) = HIDWORD(v29);
  v82 = (v29 >> 22) + v81;
  HIDWORD(v29) = result.i32[2] + v79 - 1416354905 + ((v82 | ~v80) ^ v81);
  LODWORD(v29) = HIDWORD(v29);
  v83 = (v29 >> 17) + v82;
  HIDWORD(v29) = v32.i32[1] + v80 - 57434055 + ((v83 | ~v81) ^ v82);
  LODWORD(v29) = HIDWORD(v29);
  v84 = (v29 >> 11) + v83;
  HIDWORD(v29) = result.i32[0] + v81 + 1700485571 + ((v84 | ~v82) ^ v83);
  LODWORD(v29) = HIDWORD(v29);
  v85 = (v29 >> 26) + v84;
  HIDWORD(v29) = v28.i32[3] + v82 - 1894986606 + ((v85 | ~v83) ^ v84);
  LODWORD(v29) = HIDWORD(v29);
  v86 = (v29 >> 22) + v85;
  HIDWORD(v29) = v37.i32[2] + v83 - 1051523 + ((v86 | ~v84) ^ v85);
  LODWORD(v29) = HIDWORD(v29);
  v87 = (v29 >> 17) + v86;
  HIDWORD(v29) = v28.i32[1] + v84 - 2054922799 + ((v87 | ~v85) ^ v86);
  LODWORD(v29) = HIDWORD(v29);
  v88 = (v29 >> 11) + v87;
  HIDWORD(v29) = v37.i32[0] + v85 + 1873313359 + ((v88 | ~v86) ^ v87);
  LODWORD(v29) = HIDWORD(v29);
  v89 = (v29 >> 26) + v88;
  HIDWORD(v29) = result.i32[3] + v86 - 30611744 + ((v89 | ~v87) ^ v88);
  LODWORD(v29) = HIDWORD(v29);
  v90 = (v29 >> 22) + v89;
  HIDWORD(v29) = v32.i32[2] + v87 - 1560198380 + ((v90 | ~v88) ^ v89);
  LODWORD(v29) = HIDWORD(v29);
  v91 = (v29 >> 17) + v90;
  HIDWORD(v29) = result.i32[1] + v88 + 1309151649 + ((v91 | ~v89) ^ v90);
  LODWORD(v29) = HIDWORD(v29);
  v92 = (v29 >> 11) + v91;
  HIDWORD(v29) = v32.i32[0] + v89 - 145523070 + ((v92 | ~v90) ^ v91);
  LODWORD(v29) = HIDWORD(v29);
  v93 = (v29 >> 26) + v92;
  HIDWORD(v29) = v37.i32[3] + v90 - 1120210379 + ((v93 | ~v91) ^ v92);
  LODWORD(v29) = HIDWORD(v29);
  v94 = (v29 >> 22) + v93;
  HIDWORD(v29) = v28.i32[2] + v91 + 718787259 + ((v94 | ~v92) ^ v93);
  LODWORD(v29) = HIDWORD(v29);
  v95 = (v29 >> 17) + v94;
  HIDWORD(v29) = v37.i32[1] + v92 - 343485551 + ((v95 | ~v93) ^ v94);
  LODWORD(v29) = HIDWORD(v29);
  *a1 += v93;
  a1[1] = v95 + v2 + (v29 >> 11);
  a1[2] = v95 + v4;
  a1[3] = v94 + v3;
  return result;
}

double MD5Final(unsigned __int8 *a1, MD5_CTX *a2)
{
  uint64_t v4;
  UINT4 v5;
  int v6;
  uint64_t i;
  unsigned __int8 *v8;
  double result;
  _QWORD v10[2];

  v4 = 0;
  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  do
  {
    *(_DWORD *)((char *)v10 + v4 * 4) = a2->count[v4];
    ++v4;
  }
  while (v4 != 2);
  v5 = (a2->count[0] >> 3) & 0x3F;
  if (v5 >= 0x38)
    v6 = 120;
  else
    v6 = 56;
  MD5Update(a2, PADDING, v6 - v5);
  MD5Update(a2, (unsigned __int8 *)v10, 8u);
  for (i = 0; i != 4; ++i)
  {
    v8 = &a1[i * 4 + 1];
    *(_WORD *)(v8 - 1) = a2->state[i];
    v8[1] = HIWORD(a2->state[i]);
    v8[2] = HIBYTE(a2->state[i]);
  }
  *(_QWORD *)&a2->buffer[56] = 0;
  result = 0.0;
  *(_OWORD *)&a2->buffer[24] = 0u;
  *(_OWORD *)&a2->buffer[40] = 0u;
  *(_OWORD *)a2->count = 0u;
  *(_OWORD *)&a2->buffer[8] = 0u;
  *(_OWORD *)a2->state = 0u;
  return result;
}

AdobeXMPCore_Int::SimpleNodeImpl *AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5, AdobeXMPCore_Int::IUTF8String_I *a6, const char *a7)
{
  *((_QWORD *)this + 18) = off_1E1B95360;
  *((_QWORD *)this + 4) = off_1E1B94C38;
  *(_QWORD *)this = &unk_1E1B953C0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = off_1E1B954E8;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 5) = &unk_1E1B94EE8;
  *((_QWORD *)this + 22) = 0;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + 40), (const char *)&off_1E1BAA3D0, a2, a3, a4, a5);
  *(_QWORD *)this = off_1E1BB67D8;
  *((_QWORD *)this + 4) = off_1E1BB6A70;
  *((_QWORD *)this + 5) = off_1E1BB6D60;
  *((_QWORD *)this + 18) = off_1E1BB7020;
  *((_QWORD *)this + 21) = off_1E1BB70B0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a6, a7, (uint64_t *)this + 1);
  *((_BYTE *)this + 24) = 0;
  return this;
}

void sub_1880BAB1C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl *v1;
  uint64_t v2;
  uint64_t v3;
  AdobeXMPCore_Int::NodeImpl *v4;
  uint64_t v5;

  AdobeXMPCore_Int::NodeImpl::~NodeImpl(v4, (uint64_t *)&off_1E1BAA3D0);
  *(_QWORD *)(v2 + 168) = v5;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)off_1E1BAA420);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NodeImpl::~NodeImpl(AdobeXMPCore_Int::NodeImpl *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 664)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 552)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 560)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = a2[9];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void AdobeXMPCore_Int::SimpleNodeImpl::GetValue(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 0);
  v4 = *((_QWORD *)this + 2);
  *a2 = *((_QWORD *)this + 1);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void AdobeXMPCore_Int::SimpleNodeImpl::SetValue(AdobeXMPCore_Int::SimpleNodeImpl *this, const char *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];

  memset(v11, 0, sizeof(v11));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v11, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 1);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 1) + 56))(&v9, *((_QWORD *)this + 1), a2, a3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) + 560))((char *)this + *(_QWORD *)(*(_QWORD *)this - 688));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v11);
}

void sub_1880BAD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::IsURIType(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 0);
  v2 = *((unsigned __int8 *)this + 24);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::SetURIType(AdobeXMPCore_Int::SimpleNodeImpl *this, char a2)
{
  _BYTE v5[24];

  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  *((_BYTE *)this + 24) = a2;
  return (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) + 560))((char *)this + *(_QWORD *)(*(_QWORD *)this - 688));
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::GetNodeType(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  return 1;
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::HasContent(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 0);
  v2 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1)) ^ 1;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void sub_1880BAEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::SimpleNodeImpl::ClearContents(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(_QWORD *)(*(_QWORD *)this - 712) + 8, 1);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  (*(void (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) + 560))((char *)this + *(_QWORD *)(*(_QWORD *)this - 688));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_1880BAF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::ClearContents(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::SimpleNodeImpl::ClearContents((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this
                                                                                                 - 704)));
}

uint64_t AdobeXMPCore_Int::SimpleNodeImpl::CloneContents@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _QWORD *v37;
  uint64_t v38;

  if (a2
    && (result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1)),
        (_DWORD)result)
    && (a3 || !a4))
  {
    *a5 = 0;
    a5[1] = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)this - 688);
    v11 = *(std::__shared_weak_count **)((char *)this + v10 + 16);
    v35 = *(_QWORD *)((char *)this + v10 + 8);
    v36 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v10 = *(_QWORD *)(*(_QWORD *)this - 688);
    }
    v14 = (char *)this + v10;
    v16 = *((_QWORD *)v14 + 3);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 4);
    v33 = v16;
    v34 = v15;
    if (v15)
    {
      v17 = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v32[0] = *((_QWORD *)this + 1);
    v32[1] = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode(&v35, &v33, v32, &v37);
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v24 = v34;
    if (v34)
    {
      v25 = (unint64_t *)&v34->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v36;
    if (v36)
    {
      v28 = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v37;
    result = (*(uint64_t (**)(_QWORD *, _QWORD))(*v37 + 528))(v37, *((unsigned __int8 *)this + 24));
    v31 = v38;
    *a5 = (char *)v30 + *(_QWORD *)(*v30 - 544);
    a5[1] = v31;
  }
  return result;
}

void sub_1880BB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::ISimpleNode_I::CreateSimpleNode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  AdobeXMPCore_Int::SimpleNodeImpl *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  const char *v10;
  AdobeXMPCore_Int::IUTF8String_I *v11;
  const char *v12;
  AdobeXMPCore_Int::IUTF8String_I *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v8 = (AdobeXMPCore_Int::SimpleNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC0);
  v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v10 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  v11 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  v12 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  if (*a3)
  {
    v13 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 192))(*a3);
    if (*a3)
    {
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3);
      goto LABEL_6;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = -1;
LABEL_6:
  AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(v8, v9, v10, v11, v12, v13, (const char *)v14);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::SimpleNodeImpl>((char *)v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/SimpleNodeImpl.cpp", 88, 1, v18);
  v16 = v18[0];
  if (v18[0])
    v16 = v18[0] + *(_QWORD *)(*(_QWORD *)v18[0] - 632);
  v17 = v18[1];
  *a4 = v16;
  a4[1] = v17;
  return result;
}

void sub_1880BB2DC(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::CloneContents@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  return AdobeXMPCore_Int::SimpleNodeImpl::CloneContents((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 712)), a2, a3, a4, a5);
}

_QWORD *AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  (**(void (***)(char *))((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)))((char *)this + *(_QWORD *)(*(_QWORD *)this - 688));
  result = std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(v7, (uint64_t)this, 8, 1);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 632);
  v6 = v7[1];
  *a2 = v5;
  a2[1] = v6;
  return result;
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::SimpleNodeImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 688)]);
  return std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880BB480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode@<X0>(AdobeXMPCore_Int::SimpleNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  return AdobeXMPCore_Int::SimpleNodeImpl::ConvertToSimpleNode((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2);
}

_QWORD *AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode@<X0>(AdobeXMPCore::ISimpleNode_v1 *this@<X0>, const char *a2@<X1>, const char *a3@<X3>, const char *a4@<X5>, AdobeXMPCore_Int::IUTF8String_I *a5@<X2>, AdobeXMPCore_Int::IUTF8String_I *a6@<X4>, _QWORD *a7@<X8>)
{
  AdobeXMPCore_Int::SimpleNodeImpl *v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v14 = (AdobeXMPCore_Int::SimpleNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC0);
  AdobeXMPCore_Int::SimpleNodeImpl::SimpleNodeImpl(v14, this, a2, a5, a3, a6, a4);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::SimpleNodeImpl>((char *)v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/SimpleNodeImpl.cpp", 96, 1, v18);
  v16 = v18[0];
  if (v18[0])
    v16 = v18[0] + *(_QWORD *)(*(_QWORD *)v18[0] - 632);
  v17 = v18[1];
  *a7 = v16;
  a7[1] = v17;
  return result;
}

void sub_1880BB560(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::GetActualISimpleNode(AdobeXMPCore_Int::ISimpleNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 632);
}

void AdobeXMPCore_Int::ThreadSafeImpl::~ThreadSafeImpl(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  *(_QWORD *)this = off_1E1BB7158;
  *(_QWORD *)this = off_1E1BB7158;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = off_1E1BB7158;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = off_1E1BB7158;
  *(_QWORD *)this = off_1E1BB7158;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = off_1E1BB7158;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x18D761C30);
}

void AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 40), (uint64_t *)&off_1E1BAA3D0);
  *((_QWORD *)this + 21) = off_1E1B954E8;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this + 144), (uint64_t *)off_1E1BAA420);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this)
{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl((AdobeXMPCore_Int::SimpleNodeImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 56)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::SimpleNodeImpl::~SimpleNodeImpl(AdobeXMPCore_Int::SimpleNodeImpl *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 680)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 632)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 640)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 648)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)) = a2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = a2[10];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 696)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 712)) = a2[12];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::SimpleNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::SimpleNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC5A8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880BB8B4(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 688) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880BB8E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 688) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::SimpleNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::SimpleNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::append@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *__src@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  if (__src && a3)
  {
    if (a3 == -1)
      a3 = strlen(__src);
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append((uint64_t *)this + 3, __src, a3);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a4);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(uint64_t *a1, void *__src, size_t __len)
{
  unint64_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;

  if (*((char *)a1 + 23) < 0)
  {
    v7 = a1[1];
    v6 = (a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 22;
    v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v6 - v7 >= __len)
  {
    if (__len)
    {
      v8 = a1;
      if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
        v8 = (uint64_t *)*a1;
      memmove((char *)v8 + v7, __src, __len);
      v9 = v7 + __len;
      if (*((char *)a1 + 23) < 0)
        a1[1] = v9;
      else
        *((_BYTE *)a1 + 23) = v9 & 0x7F;
      *((_BYTE *)v8 + v9) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace((AdobeXMPCore_Int::IMemoryAllocator_I *)a1, v6, __len - v6 + v7, v7, v7, 0, __len, __src);
  }
  return a1;
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::append@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v13;

  v13 = a3;
  if (a4 && *a2)
  {
    v9 = AdobeXMPCore_Int::ValidateSrcPosParameter(a2, &v13);
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
    if (v9 - v13 >= a4)
      v11 = a4;
    else
      v11 = v9 - v13;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append((uint64_t *)this + 3, (void *)(v10 + v13), v11);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a5);
}

unint64_t AdobeXMPCore_Int::ValidateSrcPosParameter(_QWORD *a1, unint64_t *a2)
{
  unint64_t result;
  AdobeXMPCore_Int::IErrorNotifier_I *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  v13 = result;
  if (*a2 > result)
  {
    v11 = 0;
    v12 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v11);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 120))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 26);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 112))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "srcPos is greater than length of source", -1);
    (*(void (**)(char *, unint64_t *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 152))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], a2);
    v4 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, unint64_t *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 152))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], &v13);
    v5 = 0;
    if (v11)
      v5 = &v11[*(_QWORD *)(*(_QWORD *)v11 - 304)];
    *(_QWORD *)&v10 = v5;
    *((_QWORD *)&v10 + 1) = v12;
    if (v12)
    {
      v6 = (unint64_t *)(v12 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v4);
    (**ErrorNotifier)(ErrorNotifier, &v10);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v10;
    v10 = 0uLL;
  }
  return result;
}

void sub_1880BBCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::assign@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v13;

  v13 = a3;
  if (a4 && *a2)
  {
    v9 = AdobeXMPCore_Int::ValidateSrcPosParameter(a2, &v13);
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
    if (v9 - v13 >= a4)
      v11 = a4;
    else
      v11 = v9 - v13;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external((void **)(a1 + 24), (void *)(v10 + v13), v11);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    **(_BYTE **)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 47) = 0;
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer((AdobeXMPCore_Int::UTF8StringImpl *)a1, a5);
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::insert@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *a2@<X2>, unint64_t a3@<X1>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  size_t v7;
  unint64_t v10;

  v10 = a3;
  if (a2)
  {
    v7 = a4;
    if (a4)
    {
      AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v10);
      if (v7 == -1)
        v7 = strlen(a2);
      std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert((uint64_t *)this + 3, v10, a2, v7);
    }
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a5);
}

unint64_t AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t *a2)
{
  unint64_t result;
  AdobeXMPCore_Int::IErrorNotifier_I *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;

  result = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(_QWORD *)this + 208))(this);
  v13 = result;
  if (*a2 > result)
  {
    v11 = 0;
    v12 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v11);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 120))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 237);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 112))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "pos mentioned is out of bounds", -1);
    (*(void (**)(char *, unint64_t *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 152))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], a2);
    v4 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, unint64_t *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 152))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], &v13);
    v5 = 0;
    if (v11)
      v5 = &v11[*(_QWORD *)(*(_QWORD *)v11 - 304)];
    *(_QWORD *)&v10 = v5;
    *((_QWORD *)&v10 + 1) = v12;
    if (v12)
    {
      v6 = (unint64_t *)(v12 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v4);
    (**ErrorNotifier)(ErrorNotifier, &v10);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v10;
    v10 = 0uLL;
  }
  return result;
}

void sub_1880BBFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert(uint64_t *a1, size_t a2, char *__src, size_t __len)
{
  char *v5;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  size_t v14;
  uint64_t v15;

  v5 = __src;
  v8 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v8 >= a2)
    {
      v9 = 22;
      v10 = *((unsigned __int8 *)a1 + 23);
      goto LABEL_6;
    }
LABEL_24:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v10 = a1[1];
  if (v10 < a2)
    goto LABEL_24;
  v9 = (a1[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
LABEL_6:
  if (v9 - v10 >= __len)
  {
    if (__len)
    {
      v11 = a1;
      if ((v8 & 0x80) != 0)
        v11 = (uint64_t *)*a1;
      if (v10 != a2)
      {
        v12 = (char *)v11 + a2;
        if ((char *)v11 + v10 <= __src || v12 > __src)
          v14 = 0;
        else
          v14 = __len;
        v5 = &__src[v14];
        memmove(&v12[__len], v12, v10 - a2);
      }
      memmove((char *)v11 + a2, v5, __len);
      v15 = v10 + __len;
      if (*((char *)a1 + 23) < 0)
        a1[1] = v15;
      else
        *((_BYTE *)a1 + 23) = v15 & 0x7F;
      *((_BYTE *)v11 + v15) = 0;
    }
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace((AdobeXMPCore_Int::IMemoryAllocator_I *)a1, v9, v10 + __len - v9, v10, a2, 0, __len, __src);
  }
  return a1;
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::insert@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t a4@<X3>, size_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v15;
  unint64_t v16;

  v15 = a4;
  v16 = a2;
  if (a5 && *a3)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v16);
    v10 = AdobeXMPCore_Int::ValidateSrcPosParameter(a3, &v15);
    v11 = v16;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 192))(*a3);
    if (v10 - v15 >= a5)
      v13 = a5;
    else
      v13 = v10 - v15;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::insert((uint64_t *)this + 3, v11, (char *)(v12 + v15), v13);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a6);
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::erase@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;

  v8 = a2;
  if (a3)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v8);
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::erase((uint64_t *)this + 3, v8, a3);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a4);
}

uint64_t *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::erase(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t *v5;

  if (*((char *)a1 + 23) < 0)
    v4 = a1[1];
  else
    v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 < a2)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (a3 == -1)
  {
    if ((*((_BYTE *)a1 + 23) & 0x80) != 0)
    {
      v5 = (uint64_t *)*a1;
      a1[1] = a2;
    }
    else
    {
      *((_BYTE *)a1 + 23) = a2 & 0x7F;
      v5 = a1;
    }
    *((_BYTE *)v5 + a2) = 0;
  }
  else
  {
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__erase_external_with_move(a1, a2, a3);
  }
  return a1;
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::UTF8StringImpl::resize(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t a2)
{
  char *v3;
  AdobeXMPCore_Int::IErrorNotifier_I *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  if (a2 >= 0x7FFFFFFFFFFFFFF7)
  {
    v11 = 0;
    v12 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v11);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 120))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 106);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 112))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "n is equal or greater than max_size", -1);
    (*(void (**)(char *, unint64_t *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 152))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], &v13);
    v3 = &v11[*(_QWORD *)(*(_QWORD *)v11 - 304)];
    *(_QWORD *)&v10 = 0x7FFFFFFFFFFFFFF7;
    v4 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v3 + 152))(v3, &v10);
    v5 = 0;
    if (v11)
      v5 = &v11[*(_QWORD *)(*(_QWORD *)v11 - 304)];
    *(_QWORD *)&v10 = v5;
    *((_QWORD *)&v10 + 1) = v12;
    if (v12)
    {
      v6 = (unint64_t *)(v12 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v4);
    (**ErrorNotifier)(ErrorNotifier, &v10);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v10;
    v10 = 0uLL;
  }
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), a2, 0);
}

void sub_1880BC3F8()
{
  __break(1u);
}

void sub_1880BC464(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::replace@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, char *a2@<X3>, unint64_t a3@<X1>, size_t a4@<X2>, size_t a5@<X4>, _QWORD *a6@<X8>)
{
  size_t v9;
  unint64_t v12;

  v12 = a3;
  if (a4)
  {
    if (a2)
    {
      v9 = a5;
      if (a5)
      {
        AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v12);
        if (v9 == -1)
          v9 = strlen(a2);
        std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), v12, a4, a2, v9);
      }
    }
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a6);
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace(AdobeXMPCore_Int::IMemoryAllocator_I *a1, size_t a2, size_t a3, char *__src, size_t __len)
{
  size_t v5;
  char *v6;
  size_t v7;
  unint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  AdobeXMPCore_Int::IMemoryAllocator_I *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  size_t v17;

  v5 = __len;
  v6 = __src;
  v7 = a2;
  if (*((char *)a1 + 23) < 0)
  {
    v9 = *((_QWORD *)a1 + 1);
    v10 = v9 - a2;
    if (v9 >= a2)
    {
      if (v10 >= a3)
        v11 = a3;
      else
        v11 = v9 - a2;
      v12 = (*((_QWORD *)a1 + 2) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v11 - v9 + v12 < __len)
        goto LABEL_13;
      v13 = *(AdobeXMPCore_Int::IMemoryAllocator_I **)a1;
      goto LABEL_16;
    }
LABEL_39:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v9 = *((unsigned __int8 *)a1 + 23);
  v10 = v9 - a2;
  if (v9 < a2)
    goto LABEL_39;
  if (v10 >= a3)
    v11 = a3;
  else
    v11 = *((unsigned __int8 *)a1 + 23) - a2;
  if (v11 - v9 + 22 < __len)
  {
    v12 = 22;
LABEL_13:
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by_and_replace(a1, v12, v9 + __len - (v12 + v11), v9, v7, v11, __len, __src);
    return a1;
  }
  v13 = a1;
LABEL_16:
  if (__len == v11)
  {
    v11 = __len;
  }
  else
  {
    v14 = v10 - v11;
    if (v10 != v11)
    {
      v15 = (size_t)v13 + v7;
      v16 = __len - v11;
      if (__len < v11)
      {
        if (__len)
          memmove((char *)v13 + v7, __src, __len);
        memmove((void *)(v15 + v5), (const void *)(v15 + v11), v14);
        v17 = v9 + v16;
        goto LABEL_34;
      }
      if ((char *)v13 + v9 > __src && v15 + 1 <= (unint64_t)__src)
      {
        if (v15 + v11 <= (unint64_t)__src)
        {
          v6 = &__src[v16];
        }
        else
        {
          if (v11)
            memmove((char *)v13 + v7, __src, v11);
          v7 += v11;
          v6 += v5;
          v5 -= v11;
          v11 = 0;
        }
      }
      memmove((char *)v13 + v7 + v5, (char *)v13 + v7 + v11, v14);
    }
  }
  if (v5)
    memmove((char *)v13 + v7, v6, v5);
  v17 = v5 - v11 + v9;
LABEL_34:
  if (*((char *)a1 + 23) < 0)
    *((_QWORD *)a1 + 1) = v17;
  else
    *((_BYTE *)a1 + 23) = v17 & 0x7F;
  *((_BYTE *)v13 + v17) = 0;
  return a1;
}

_QWORD *AdobeXMPCore_Int::UTF8StringImpl::replace@<X0>(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X3>, unint64_t a5@<X4>, size_t a6@<X5>, _QWORD *a7@<X8>)
{
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v17;
  unint64_t v18;

  v17 = a5;
  v18 = a2;
  if (a6 && a3 && *a4)
  {
    AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v18);
    v12 = AdobeXMPCore_Int::ValidateSrcPosParameter(a4, &v17);
    v13 = v18;
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 192))(*a4);
    if (v12 - v17 >= a6)
      v15 = a6;
    else
      v15 = v12 - v17;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::replace((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this + 24), v13, a3, (char *)(v14 + v17), v15);
  }
  return AdobeXMPCore_Int::UTF8StringImpl::returnSelfSharedPointer(this, a7);
}

size_t AdobeXMPCore_Int::UTF8StringImpl::copy(uint64_t **this, char *a2, size_t a3, unint64_t a4)
{
  size_t result;
  unint64_t v8;

  result = 0;
  v8 = a4;
  if (a2)
  {
    if (a3)
    {
      AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter((AdobeXMPCore_Int::UTF8StringImpl *)this, &v8);
      return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::copy(this + 3, a2, a3, v8);
    }
  }
  return result;
}

size_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::copy(uint64_t **a1, void *__dst, size_t a3, unint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  size_t v6;
  size_t v7;
  unint64_t v9;
  size_t v10;

  if (*((char *)a1 + 23) < 0)
  {
    v9 = (unint64_t)a1[1];
    v5 = v9 >= a4;
    v10 = v9 - a4;
    if (!v5)
LABEL_17:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v10 >= a3)
      v7 = a3;
    else
      v7 = v10;
    a1 = (uint64_t **)*a1;
    if (v7)
      goto LABEL_8;
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
    v5 = v4 >= a4;
    v6 = v4 - a4;
    if (!v5)
      goto LABEL_17;
    if (v6 >= a3)
      v7 = a3;
    else
      v7 = v6;
    if (v7)
LABEL_8:
      memmove(__dst, (char *)a1 + a4, v7);
  }
  return v7;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::find(AdobeXMPCore_Int::UTF8StringImpl *this, char *a2, unint64_t a3, int64_t a4)
{
  if (a2 && a4)
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find((uint64_t *)this + 3, a2, a3, a4);
  else
    return -1;
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find(uint64_t *a1, char *a2, unint64_t a3, int64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  void *v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v13;
  uint64_t v14;
  char *v15;

  v6 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v6 = *a1;
    v7 = a1[1];
  }
  else
  {
    v7 = *((unsigned __int8 *)a1 + 23);
  }
  if (v7 < a3)
    return -1;
  if (a4)
  {
    v8 = (void *)(v6 + a3);
    v9 = (char *)(v6 + v7);
    v10 = v7 - a3;
    if (v10 >= a4)
    {
      v13 = *a2;
      do
      {
        v14 = v10 - a4;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v8, v13, v14 + 1);
        if (!v15)
          break;
        v11 = v15;
        if (!memcmp(v15, a2, a4))
          goto LABEL_9;
        v8 = v11 + 1;
        v10 = v9 - (v11 + 1);
      }
      while (v10 >= a4);
    }
    v11 = v9;
LABEL_9:
    if (v11 == v9)
      return -1;
    else
      return (uint64_t)&v11[-v6];
  }
  return a3;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::find(uint64_t a1, _QWORD *a2, unint64_t a3, int64_t a4)
{
  uint64_t v8;
  char *v9;

  if (!*a2)
    return -1;
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  if (!a4 || !v8)
    return -1;
  v9 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::find((uint64_t *)(a1 + 24), v9, a3, a4);
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::rfind(AdobeXMPCore_Int::UTF8StringImpl *this, char *a2, unint64_t a3, unint64_t a4)
{
  if (a2 && a4)
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind((unsigned __int8 *)this + 24, (unsigned __int8 *)a2, a3, a4);
  else
    return -1;
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;

  if ((char)a1[23] < 0)
  {
    v5 = a1;
    a1 = *(unsigned __int8 **)a1;
    v4 = *((_QWORD *)v5 + 1);
  }
  else
  {
    v4 = a1[23];
  }
  if (v4 >= a3)
    v6 = a3;
  else
    v6 = v4;
  v7 = v4 - v6;
  v8 = v6 + a4;
  if (v7 <= a4)
    v8 = v4;
  v9 = &a1[v8];
  if (a4 && v8)
  {
    v10 = a1;
    v11 = &a1[v8];
    do
    {
      if (*v10 == *a2)
      {
        v12 = 1;
        while (a4 != v12)
        {
          if (&v10[v12] == v9)
            goto LABEL_22;
          v13 = v10[v12];
          v14 = a2[v12++];
          if (v13 != v14)
            goto LABEL_13;
        }
        v11 = v10;
      }
LABEL_13:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v11 = &a1[v8];
  }
LABEL_22:
  if (v11 != v9 || a4 == 0)
    return v11 - a1;
  else
    return -1;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::rfind(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;

  if (!*a2)
    return -1;
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  if (!a4 || !v8)
    return -1;
  v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::rfind((unsigned __int8 *)(a1 + 24), v9, a3, a4);
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::compare(AdobeXMPCore_Int::UTF8StringImpl *this, unint64_t a2, size_t a3, char *a4, size_t a5)
{
  uint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;

  v18 = a2;
  if (!a4)
    return 0xFFFFFFFFLL;
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v18);
  v9 = (uint64_t *)((char *)this + 24);
  if (a5 == -1)
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare((uint64_t **)v9, v18, a3, a4);
  if (*((char *)this + 47) < 0)
  {
    v14 = *((_QWORD *)this + 4);
    v11 = v14 >= v18;
    v12 = v14 - v18;
    if (!v11)
LABEL_26:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v12 >= a3)
      v12 = a3;
    v9 = (uint64_t *)*v9;
  }
  else
  {
    v10 = *((unsigned __int8 *)this + 47);
    v11 = v10 >= v18;
    v12 = v10 - v18;
    if (!v11)
      goto LABEL_26;
    if (v12 >= a3)
      v12 = a3;
  }
  v15 = (char *)v9 + v18;
  if (v12 >= a5)
    v16 = a5;
  else
    v16 = v12;
  if (v12 < a5)
    v17 = -1;
  else
    v17 = v12 > a5;
  LODWORD(result) = memcmp(v15, a4, v16);
  if ((_DWORD)result)
    return result;
  else
    return v17;
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(uint64_t **a1, unint64_t a2, size_t a3, char *__s)
{
  size_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  uint64_t result;

  v8 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v8 == -1 || (v13 = (unint64_t)a1[1], v10 = v13 >= a2, v14 = v13 - a2, !v10))
LABEL_24:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v14 >= a3)
      v12 = a3;
    else
      v12 = v14;
    a1 = (uint64_t **)*a1;
  }
  else
  {
    if (v8 == -1)
      goto LABEL_24;
    v9 = *((unsigned __int8 *)a1 + 23);
    v10 = v9 >= a2;
    v11 = v9 - a2;
    if (!v10)
      goto LABEL_24;
    if (v11 >= a3)
      v12 = a3;
    else
      v12 = v11;
  }
  v15 = (char *)a1 + a2;
  if (v12 >= v8)
    v16 = v8;
  else
    v16 = v12;
  if (v12 < v8)
    v17 = -1;
  else
    v17 = v12 > v8;
  LODWORD(result) = memcmp(v15, __s, v16);
  if ((_DWORD)result)
    return result;
  else
    return v17;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::compare(uint64_t a1, unint64_t a2, size_t a3, _QWORD *a4, unint64_t a5, size_t a6)
{
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  size_t v15;
  uint64_t result;
  unint64_t v17;
  size_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;

  v20 = a5;
  v21 = a2;
  if (!*a4)
    return 0xFFFFFFFFLL;
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter((AdobeXMPCore_Int::UTF8StringImpl *)a1, &v21);
  AdobeXMPCore_Int::ValidateSrcPosParameter(a4, &v20);
  v10 = (_QWORD *)(a1 + 24);
  v11 = v21;
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 192))(*a4);
  if (*(char *)(a1 + 47) < 0)
  {
    if (a6 == -1 || (v17 = *(_QWORD *)(a1 + 32), v14 = v17 >= v11, v15 = v17 - v11, !v14))
LABEL_26:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v15 >= a3)
      v15 = a3;
    v10 = (_QWORD *)*v10;
  }
  else
  {
    if (a6 == -1)
      goto LABEL_26;
    v13 = *(unsigned __int8 *)(a1 + 47);
    v14 = v13 >= v11;
    v15 = v13 - v11;
    if (!v14)
      goto LABEL_26;
    if (v15 >= a3)
      v15 = a3;
  }
  if (v15 >= a6)
    v18 = a6;
  else
    v18 = v15;
  if (v15 < a6)
    v19 = -1;
  else
    v19 = v15 > a6;
  LODWORD(result) = memcmp((char *)v10 + v11, (const void *)(v12 + v20), v18);
  if ((_DWORD)result)
    return result;
  else
    return v19;
}

void AdobeXMPCore_Int::UTF8StringImpl::substr(AdobeXMPCore_Int::UTF8StringImpl *this@<X0>, unint64_t a2@<X1>, const char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;

  v11 = a2;
  AdobeXMPCore_Int::UTF8StringImpl::ValidatePosParameter(this, &v11);
  v7 = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(_QWORD *)this + 192))(this);
  v8 = v11;
  v9 = (*(uint64_t (**)(AdobeXMPCore_Int::UTF8StringImpl *))(*(_QWORD *)this + 208))(this);
  if (v9 - v11 >= (unint64_t)a3)
    v10 = a3;
  else
    v10 = (const char *)(v9 - v11);
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)(v7 + v8), v10, a4);
}

void sub_1880BCE7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;

  __cxa_begin_catch(a1);
  a11 = 0;
  a12 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(2, 1, 2, &a11);
  AdobeXMPCore_Int::UTF8StringImpl::substr(&a11);
  ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
  (**ErrorNotifier)(ErrorNotifier, &a9);
  exception = __cxa_allocate_exception(0x10uLL);
  *exception = a9;
  a9 = 0uLL;
}

void sub_1880BCEE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL AdobeXMPCore_Int::UTF8StringImpl::empty(AdobeXMPCore_Int::UTF8StringImpl *this)
{
  uint64_t v1;

  if (*((char *)this + 47) < 0)
    v1 = *((_QWORD *)this + 4);
  else
    v1 = *((unsigned __int8 *)this + 47);
  return v1 == 0;
}

uint64_t AdobeXMPCore_Int::UTF8StringImpl::clear(uint64_t this)
{
  if (*(char *)(this + 47) < 0)
  {
    **(_BYTE **)(this + 24) = 0;
    *(_QWORD *)(this + 32) = 0;
  }
  else
  {
    *(_BYTE *)(this + 24) = 0;
    *(_BYTE *)(this + 47) = 0;
  }
  return this;
}

void `virtual thunk to'AdobeXMPCore_Int::UTF8StringImpl::~UTF8StringImpl(AdobeXMPCore_Int::UTF8StringImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1E1BAA500);
}

{
  AdobeXMPCore_Int::UTF8StringImpl::~UTF8StringImpl((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1E1BAA500);
}

{
  AdobeXMPCore_Int::UTF8StringImpl::~UTF8StringImpl((AdobeXMPCore_Int::UTF8StringImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 48)));
}

void **std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external(void **a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__assign_external(a1, __s, v4);
}

_QWORD *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__erase_external_with_move(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v3 = result;
    v4 = *((char *)result + 23);
    if (v4 < 0)
    {
      v6 = (_QWORD *)*result;
      v5 = result[1];
    }
    else
    {
      v5 = *((unsigned __int8 *)result + 23);
      v6 = result;
    }
    if (v5 - a2 >= a3)
      v7 = a3;
    else
      v7 = v5 - a2;
    if (v5 - a2 > a3)
    {
      result = memmove((char *)v6 + a2, (char *)v6 + a2 + v7, v5 - a2 - v7);
      LOBYTE(v4) = *((_BYTE *)v3 + 23);
    }
    v8 = v5 - v7;
    if ((v4 & 0x80) != 0)
      v3[1] = v8;
    else
      *((_BYTE *)v3 + 23) = v8 & 0x7F;
    *((_BYTE *)v6 + v8) = 0;
  }
  return result;
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize(AdobeXMPCore_Int::IMemoryAllocator_I *result, unint64_t a2, int a3)
{
  unint64_t v3;

  if (*((char *)result + 23) < 0)
  {
    v3 = *((_QWORD *)result + 1);
    if (v3 >= a2)
    {
      *((_QWORD *)result + 1) = a2;
      result = *(AdobeXMPCore_Int::IMemoryAllocator_I **)result;
      goto LABEL_7;
    }
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(result, a2 - v3, a3);
  }
  v3 = *((unsigned __int8 *)result + 23);
  if (v3 < a2)
    return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(result, a2 - v3, a3);
  *((_BYTE *)result + 23) = a2 & 0x7F;
LABEL_7:
  *((_BYTE *)result + a2) = 0;
  return result;
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::append(AdobeXMPCore_Int::IMemoryAllocator_I *a1, size_t __len, int __c)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  AdobeXMPCore_Int::IMemoryAllocator_I *v10;
  uint64_t v11;

  if (__len)
  {
    LODWORD(v6) = *((char *)a1 + 23);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = *((_QWORD *)a1 + 1);
      v9 = *((_QWORD *)a1 + 2);
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      v7 = *((unsigned __int8 *)a1 + 23);
      v8 = 22;
    }
    if (v8 - v7 < __len)
    {
      std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by(a1, v8, __len - v8 + v7, v7, v7, 0, 0);
      *((_QWORD *)a1 + 1) = v7;
      LOBYTE(v6) = *((_BYTE *)a1 + 23);
    }
    v10 = a1;
    if ((v6 & 0x80) != 0)
      v10 = *(AdobeXMPCore_Int::IMemoryAllocator_I **)a1;
    memset((char *)v10 + v7, __c, __len);
    v11 = v7 + __len;
    if (*((char *)a1 + 23) < 0)
      *((_QWORD *)a1 + 1) = v11;
    else
      *((_BYTE *)a1 + 23) = v11 & 0x7F;
    *((_BYTE *)v10 + v11) = 0;
  }
  return a1;
}

char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by(AdobeXMPCore_Int::IMemoryAllocator_I *a1, unint64_t a2, unint64_t a3, uint64_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  char *result;
  char *v20;
  uint64_t v21;

  if (0x7FFFFFFFFFFFFFF7 - a2 < a3)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (char *)a1;
  if (*((char *)a1 + 23) < 0)
    v13 = *(char **)a1;
  v14 = a3 + a2;
  if (a3 + a2 <= 2 * a2)
    v14 = 2 * a2;
  v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17)
    v15 = v14 | 7;
  if (v14 >= 0x17)
    v16 = v15 + 1;
  else
    v16 = 23;
  if (a2 <= 0x3FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x7FFFFFFFFFFFFFF7;
  MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  result = (char *)(**MemoryAllocator)(MemoryAllocator, v17);
  v20 = result;
  if (a5)
    result = (char *)memmove(result, v13, a5);
  if (a4 != a6 + a5)
    result = (char *)memmove(&v20[a5 + a7], &v13[a5 + a6], a4 - (a6 + a5));
  if (a2 != 22)
  {
    v21 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    result = (char *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v21 + 8))(v21, v13);
  }
  *(_QWORD *)a1 = v20;
  *((_QWORD *)a1 + 2) = v17 | 0x8000000000000000;
  return result;
}

uint64_t *std::shared_ptr<AdobeXMPCore_Int::UTF8StringImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::UTF8StringImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC5E0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  if (a2)
    v9 = (_QWORD *)(a2 + 8);
  else
    v9 = 0;
  a1[1] = (uint64_t)v8;
  std::shared_ptr<AdobeXMPCommon::IUTF8StringProxy>::__enable_weak_this[abi:ne180100]<AdobeXMPCommon::IUTF8StringProxy,AdobeXMPCommon::IUTF8StringProxy,void>((uint64_t)a1, v9, a2);
  return a1;
}

void sub_1880BD3A0(void *a1)
{
  void (*v1)(_QWORD *);
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 448) + (v3 >> 1));
  if ((v3 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880BD3D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::UTF8StringImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::UTF8StringImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::UTF8StringImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::UTF8StringImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t OUTLINED_FUNCTION_0_4(_QWORD *a1)
{
  return *a1 + *(_QWORD *)(*(_QWORD *)*a1 - 304);
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  _QWORD *v0;

  return *v0 + *(_QWORD *)(*(_QWORD *)*v0 - 304);
}

void AdobeXMPCore_Int::UTF8StringImpl::resize(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, const char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = OUTLINED_FUNCTION_0_4(a1);
  v4(v3, "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 112);
  v5 = OUTLINED_FUNCTION_1_2();
  v6(v5, "failed to allocate required memory", -1);
  if (*v2)
    OUTLINED_FUNCTION_2_1();
  else
    v7 = 0;
  v8 = v2[1];
  *v1 = v7;
  v1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void AdobeXMPCore_Int::UTF8StringImpl::substr(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, const char *, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, const char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = OUTLINED_FUNCTION_0_4(a1);
  v4(v3, "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/UTF8StringImpl.cpp", 203);
  v5 = OUTLINED_FUNCTION_1_2();
  v6(v5, "failed to allocate required memory", -1);
  if (*v2)
    OUTLINED_FUNCTION_2_1();
  else
    v7 = 0;
  v8 = v2[1];
  *v1 = v7;
  v1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

AdobeXMPCore_Int::DOMSerializerImpl *AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl(AdobeXMPCore_Int::DOMSerializerImpl *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 344)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 288)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 296)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 360)) = a2[9];
  AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex((_QWORD *)this + 1);
  return this;
}

uint64_t AdobeXMPCore_Int::DOMSerializerImpl::GetMutex@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::DOMSerializerImpl::GetMutex@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = (char *)this + *(_QWORD *)(*this - 280);
  v4 = *((_QWORD *)v2 + 1);
  v3 = *((_QWORD *)v2 + 2);
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

_QWORD *AdobeXMPCore_Int::DOMSerializerImpl::Clone@<X0>(AdobeXMPCore_Int::DOMSerializerImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  char *v17;
  char *v18;
  BOOL v19;
  _QWORD *result;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = (char *)(*(uint64_t (**)(AdobeXMPCore_Int::DOMSerializerImpl *))(*(_QWORD *)this + 288))(this);
  if (v4)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v23, (char *)this + 8, 0);
    v5 = (uint64_t *)(*(_QWORD *)this - 352);
    v6 = (_QWORD *)(*(_QWORD *)v4 - 352);
    v4[*v6 + 48] = *((_BYTE *)this + *v5 + 48);
    v4[*v6 + 49] = *((_BYTE *)this + *v5 + 49);
    v7 = *v5;
    if (*(_QWORD *)((char *)this + v7 + 32))
    {
      v8 = (uint64_t *)operator new();
      v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352) + 32);
      std::set<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::set[abi:ne180100]<std::__tree_const_iterator<unsigned long long,std::__tree_node<unsigned long long,void *> *,long>>(v8, *(_QWORD **)v9, (_QWORD *)(v9 + 8));
      *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 352) + 32] = v8;
      v7 = *(_QWORD *)(*(_QWORD *)this - 352);
    }
    if (*(_QWORD *)((char *)this + v7 + 40))
    {
      v10 = (_QWORD *)operator new();
      v11 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352) + 40);
      std::map<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<std::pair<unsigned long long const,AdobeXMPCommon::IConfigurable::eDataType>>>::map[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__tree_node<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,void *> *,long>>>(v10, *(_QWORD **)v11, (_QWORD *)(v11 + 8));
      *(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 352) + 40] = v10;
      v7 = *(_QWORD *)(*(_QWORD *)this - 352);
    }
    v12 = (char *)this + v7;
    v13 = (char *)*((_QWORD *)v12 + 1);
    v14 = v12 + 16;
    if (v13 != v12 + 16)
    {
      do
      {
        v15 = (uint64_t **)&v4[*(_QWORD *)(*(_QWORD *)v4 - 352) + 8];
        v26 = v13 + 32;
        v16 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v15, (unint64_t *)v13 + 4, (uint64_t)&std::piecewise_construct, &v26);
        *((_DWORD *)v16 + 10) = *((_DWORD *)v13 + 10);
        v16[6] = (uint64_t *)*((_QWORD *)v13 + 6);
        v17 = (char *)*((_QWORD *)v13 + 1);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (char *)*((_QWORD *)v13 + 2);
            v19 = *(_QWORD *)v18 == (_QWORD)v13;
            v13 = v18;
          }
          while (!v19);
        }
        v13 = v18;
      }
      while (v18 != v14);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v23);
  }
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMSerializerImpl>(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMSerializerImpl.cpp", 46, 1, &v23);
  v21 = v23;
  if (v23)
    v21 = &v23[*(_QWORD *)(*(_QWORD *)v23 - 288)];
  v22 = v24;
  *a2 = v21;
  a2[1] = v22;
  return result;
}

void sub_1880BD904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x18D761C30](v2, 0x1020C4062D53EE8);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::DOMSerializerImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 360)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 360)]);
  return std::shared_ptr<AdobeXMPCore_Int::DOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880BDA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IDOMSerializer_I::CreateDOMSerializer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v4 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl((uint64_t)v4, a1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/DOMSerializerImpl.cpp", 50, 1, v8);
  v6 = v8[0];
  if (v8[0])
    v6 = v8[0] + *(_QWORD *)(*(_QWORD *)v8[0] - 64);
  v7 = v8[1];
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_1880BDACC(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)]);
  return std::shared_ptr<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880BDBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::GetActualIDOMSerializer(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 288);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMSerializer_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 304);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::DOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC6F8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880BDCA0(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 360) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880BDCD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 360) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMSerializerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC928;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880BDDF4(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880BDE20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t ID3_Support::TerminateGlobals(ID3_Support *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = ID3_Support::kMapID3GenreCodeToName;
  if (ID3_Support::kMapID3GenreCodeToName)
  {
    std::__tree<unsigned long long>::destroy(ID3_Support::kMapID3GenreCodeToName, *(_QWORD **)(ID3_Support::kMapID3GenreCodeToName + 8));
    result = MEMORY[0x18D761C30](v1, 0x1020C4062D53EE8);
  }
  v3 = ID3_Support::kMapID3GenreNameToCode;
  if (ID3_Support::kMapID3GenreNameToCode)
  {
    std::__tree<unsigned long long>::destroy(ID3_Support::kMapID3GenreNameToCode, *(_QWORD **)(ID3_Support::kMapID3GenreNameToCode + 8));
    result = MEMORY[0x18D761C30](v3, 0x1020C4062D53EE8);
  }
  ID3_Support::kMapID3GenreNameToCode = 0;
  ID3_Support::kMapID3GenreCodeToName = 0;
  return result;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreObjectFactory_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::ICoreObjectFactory_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  _QWORD *exception;

  if (a2 == 0x6E4F626A46616374)
  {
    if (a3 == 1)
    {
      v4 = -64;
      return (_QWORD *)((char *)this + *(_QWORD *)(*this + v4));
    }
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E4F626A46616374, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreObjectFactory_I.cpp", 0x32u, exception);
LABEL_15:
  }
  if (a2 == 0x634F626A46616374)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
      {
        v4 = -216;
        return (_QWORD *)((char *)this + *(_QWORD *)(*this + v4));
      }
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634F626A46616374, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreObjectFactory_I.cpp", 0x27u, exception);
      goto LABEL_15;
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634F626A46616374, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreObjectFactory_I.cpp", 0x3Au, exception);
      goto LABEL_15;
    }
    return 0;
  }
  return this;
}

void sub_1880BE168(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ICoreObjectFactory_I::getInterfacePointer(AdobeXMPCore_Int::ICoreObjectFactory_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreObjectFactory_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x10, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreObjectFactory_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreObjectFactory_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::ICoreObjectFactory_I::GetActualICoreObjectFactory(AdobeXMPCore_Int::ICoreObjectFactory_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 216);
}

uint64_t AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 512))(&v6);
  if (v6)
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  else
    v1 = 0;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_1880BE354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath(_QWORD *a1)
{
  return AdobeXMPCore_Int::CompositeNodeImpl::GetNodeTypeAtPath((uint64_t)a1 + *(_QWORD *)(*a1 - 552));
}

void AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath(char *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  AdobeXMPCore_Int::IErrorNotifier_I *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  _QWORD *v135;
  std::__shared_weak_count *v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;

  if (*a2)
  {
    v141 = 0uLL;
    (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 744)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 744)]);
    std::shared_ptr<AdobeXMPCore_Int::CompositeNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v144, (uint64_t)a1, 8, 1);
    v6 = v144;
    if ((_QWORD)v144)
      v6 = v144 + *(_QWORD *)(*(_QWORD *)v144 - 544);
    *(_QWORD *)&v141 = v6;
    *((_QWORD *)&v141 + 1) = *((_QWORD *)&v144 + 1);
    v139 = v6;
    v140 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
    if (*((_QWORD *)&v144 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v9 = *((_QWORD *)&v141 + 1);
      *a3 = v6;
      a3[1] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      *a3 = v6;
      a3[1] = 0;
    }
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
    if (v12)
      v13 = (_QWORD)v141 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      v20 = v12;
      v21 = 0;
      while (1)
      {
        v137 = 0;
        v138 = 0;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a2 + 72))(&v137, *a2, ++v21);
        switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)v137 + 56))(v137))
        {
          case 1u:
            v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
            switch(v22)
            {
              case 1:
                v144 = 0uLL;
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v139 + 232))(&v144);
                if ((_QWORD)v144)
                {
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v141, (uint64_t)&v144);
                }
                else
                {
                  v107 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                  v141 = 0uLL;
                  if (v107)
                  {
                    p_shared_owners = (unint64_t *)&v107->__shared_owners_;
                    do
                      v109 = __ldaxr(p_shared_owners);
                    while (__stlxr(v109 - 1, p_shared_owners));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                }
                v48 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                if (*((_QWORD *)&v144 + 1))
                {
                  v102 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                  do
                    v50 = __ldaxr(v102);
                  while (__stlxr(v50 - 1, v102));
                  goto LABEL_195;
                }
                break;
              case 2:
                v144 = 0uLL;
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v139 + 248))(&v144);
                if ((_QWORD)v144)
                {
                  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(&v141, (uint64_t)&v144);
                }
                else
                {
                  v104 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                  v141 = 0uLL;
                  if (v104)
                  {
                    v105 = (unint64_t *)&v104->__shared_owners_;
                    do
                      v106 = __ldaxr(v105);
                    while (__stlxr(v106 - 1, v105));
                    if (!v106)
                    {
                      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                      std::__shared_weak_count::__release_weak(v104);
                    }
                  }
                }
                v48 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                if (*((_QWORD *)&v144 + 1))
                {
                  v101 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                  do
                    v50 = __ldaxr(v101);
                  while (__stlxr(v50 - 1, v101));
                  goto LABEL_195;
                }
                break;
              case 4:
                v144 = 0uLL;
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v139 + 240))(&v144);
                if ((_QWORD)v144)
                {
                  v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v144 + 688))(v144);
                  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v137 + 40))(&v142);
                  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v137 + 48))(&v135);
                  (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, _QWORD **))(*(_QWORD *)v23 + 736))(&v143, v23, &v142, &v135);
                  v24 = v143;
                  v143 = 0uLL;
                  v25 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                  v141 = v24;
                  if (v25)
                  {
                    v26 = (unint64_t *)&v25->__shared_owners_;
                    do
                      v27 = __ldaxr(v26);
                    while (__stlxr(v27 - 1, v26));
                    if (!v27)
                    {
                      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                      std::__shared_weak_count::__release_weak(v25);
                    }
                  }
                  v28 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                  if (*((_QWORD *)&v143 + 1))
                  {
                    v29 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                    do
                      v30 = __ldaxr(v29);
                    while (__stlxr(v30 - 1, v29));
                    if (!v30)
                    {
                      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                      std::__shared_weak_count::__release_weak(v28);
                    }
                  }
                  v31 = v136;
                  if (v136)
                  {
                    v32 = (unint64_t *)&v136->__shared_owners_;
                    do
                      v33 = __ldaxr(v32);
                    while (__stlxr(v33 - 1, v32));
                    if (!v33)
                    {
                      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                      std::__shared_weak_count::__release_weak(v31);
                    }
                  }
                  v34 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
                  if (*((_QWORD *)&v142 + 1))
                  {
                    v35 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                    do
                      v36 = __ldaxr(v35);
                    while (__stlxr(v36 - 1, v35));
LABEL_190:
                    if (!v36)
                    {
                      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                      std::__shared_weak_count::__release_weak(v34);
                    }
                  }
                }
                else
                {
                  v34 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                  v141 = 0uLL;
                  if (v34)
                  {
                    v110 = (unint64_t *)&v34->__shared_owners_;
                    do
                      v36 = __ldaxr(v110);
                    while (__stlxr(v36 - 1, v110));
                    goto LABEL_190;
                  }
                }
                v48 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                if (!*((_QWORD *)&v144 + 1))
                  break;
                v111 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                do
                  v50 = __ldaxr(v111);
                while (__stlxr(v50 - 1, v111));
                goto LABEL_195;
              default:
                v48 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
                v141 = 0uLL;
                if (!v48)
                  break;
                v103 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(v103);
                while (__stlxr(v50 - 1, v103));
                goto LABEL_195;
            }
LABEL_197:
            v112 = std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a3, (uint64_t *)&v141);
            std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v139, v112);
            v113 = v138;
            if (v138)
            {
              v114 = (unint64_t *)&v138->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            if (v21 >= v20 || !(_QWORD)v141)
              goto LABEL_18;
            break;
          case 2u:
            v144 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v139 + 248))(&v144);
            v72 = v144;
            if (!(_QWORD)v144)
            {
              v78 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
              v141 = 0uLL;
              if (!v78)
                goto LABEL_157;
              v99 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v99);
              while (__stlxr(v80 - 1, v99));
              goto LABEL_155;
            }
            v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 64))(v137);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v72 + 656))(&v143, v72, v73);
            v74 = v143;
            v143 = 0uLL;
            v75 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
            v141 = v74;
            if (v75)
            {
              v76 = (unint64_t *)&v75->__shared_owners_;
              do
                v77 = __ldaxr(v76);
              while (__stlxr(v77 - 1, v76));
              if (!v77)
              {
                ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                std::__shared_weak_count::__release_weak(v75);
              }
            }
            v78 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v79 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
LABEL_155:
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
LABEL_157:
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1))
            {
              v100 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
              do
                v50 = __ldaxr(v100);
              while (__stlxr(v50 - 1, v100));
LABEL_195:
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            goto LABEL_197;
          case 4u:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 184))(v139))
            {
              v48 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
              v141 = 0uLL;
              if (!v48)
                goto LABEL_197;
              v96 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v96);
              while (__stlxr(v50 - 1, v96));
              goto LABEL_195;
            }
            v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v141 + 280))(v141);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v137 + 40))(&v143);
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v137 + 48))(&v142);
            (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v37 + 512))(&v144, v37, &v143, &v142);
            v38 = v144;
            v144 = 0uLL;
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
            v141 = v38;
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v42 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1))
            {
              v43 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v45 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
            if (*((_QWORD *)&v142 + 1))
            {
              v46 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v49 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              goto LABEL_195;
            }
            goto LABEL_197;
          case 8u:
            v135 = 0;
            v136 = 0;
            (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v139 + 248))(&v135);
            if (!v135)
            {
              v93 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
              v141 = 0uLL;
              if (!v93)
                goto LABEL_148;
              v97 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldaxr(v97);
              while (__stlxr(v95 - 1, v97));
              goto LABEL_146;
            }
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v137 + 40))(&v131);
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v137 + 48))(&v129);
            (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v137 + 72))(&v127);
            v144 = 0uLL;
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v135 + *(_QWORD *)(*v135 - 688))
                                                           + 552))(&v144);
            while (2)
            {
              if (!(_QWORD)v144)
              {
                v133 = 0;
                v134 = 0;
                goto LABEL_115;
              }
              v143 = 0uLL;
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v144 + 48))(&v143);
              if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v143 + 184))(v143))
                goto LABEL_89;
              v133 = 0;
              v134 = 0;
              v51 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v143 + 280))(v143);
              AdobeXMPCore_Int::INode_I::GetSimpleQualifier(v51, &v133);
              if (!v133)
                goto LABEL_84;
              v52 = v127;
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v133 + 504))(&v142);
              v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 208))(v52);
              v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v142 + 208))(v142);
              v55 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v52 + 168))(v52, 0, v53, &v142, 0, v54);
              v56 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
              if (*((_QWORD *)&v142 + 1))
              {
                v57 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              if (v55)
              {
LABEL_84:
                v59 = v134;
                if (v134)
                {
                  v60 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
LABEL_89:
                (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v144 + 56))(&v142);
                v62 = v142;
                v142 = 0uLL;
                v63 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                v144 = v62;
                if (v63)
                {
                  v64 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 - 1, v64));
                  if (!v65)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v66 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
                if (*((_QWORD *)&v142 + 1))
                {
                  v67 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
                  do
                    v68 = __ldaxr(v67);
                  while (__stlxr(v68 - 1, v67));
                  if (!v68)
                  {
                    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                    std::__shared_weak_count::__release_weak(v66);
                  }
                }
                v69 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
                if (*((_QWORD *)&v143 + 1))
                {
                  v70 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
                continue;
              }
              break;
            }
            v116 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v117 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
LABEL_115:
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1))
            {
              v82 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(&v141, (uint64_t)&v133);
            v84 = v134;
            if (v134)
            {
              v85 = (unint64_t *)&v134->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
            v87 = v128;
            if (v128)
            {
              v88 = (unint64_t *)&v128->__shared_owners_;
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
            v90 = v130;
            if (v130)
            {
              v91 = (unint64_t *)&v130->__shared_owners_;
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
            v93 = v132;
            if (v132)
            {
              v94 = (unint64_t *)&v132->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
LABEL_146:
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
LABEL_148:
            v48 = v136;
            if (!v136)
              goto LABEL_197;
            v98 = (unint64_t *)&v136->__shared_owners_;
            do
              v50 = __ldaxr(v98);
            while (__stlxr(v50 - 1, v98));
            goto LABEL_195;
          default:
            v144 = 0uLL;
            AdobeXMPCore_Int::IError_I::CreateError(1, 4, 2, &v144);
            (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v144
                                                                              + *(_QWORD *)(*(_QWORD *)v144 - 304))
                                                                  + 120))(v144 + *(_QWORD *)(*(_QWORD *)v144 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CompositeNodeImpl.cpp", 133);
            (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v144
                                                                              + *(_QWORD *)(*(_QWORD *)v144 - 304))
                                                                  + 112))(v144 + *(_QWORD *)(*(_QWORD *)v144 - 304), "unhandled situtation occured", -1);
            v119 = v144;
            v120 = *(_QWORD *)(*(_QWORD *)v144 - 304);
            LODWORD(v143) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v137 + 56))(v137);
            v121 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(v119 + v120) + 144))(v119 + v120, &v143);
            if ((_QWORD)v144)
              v122 = v144 + *(_QWORD *)(*(_QWORD *)v144 - 304);
            else
              v122 = 0;
            *(_QWORD *)&v143 = v122;
            *((_QWORD *)&v143 + 1) = *((_QWORD *)&v144 + 1);
            if (*((_QWORD *)&v144 + 1))
            {
              v123 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
              do
                v124 = __ldxr(v123);
              while (__stxr(v124 + 1, v123));
            }
            ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v121);
            (**ErrorNotifier)(ErrorNotifier, &v143);
            exception = __cxa_allocate_exception(0x10uLL);
            *exception = v143;
            v143 = 0uLL;
        }
      }
    }
LABEL_18:
    v14 = v140;
    if (v140)
    {
      v15 = (unint64_t *)&v140->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
    if (*((_QWORD *)&v141 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1880BF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  va_list va2;
  uint64_t v20;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v18 = va_arg(va3, _QWORD);
  v20 = va_arg(va3, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v10 - 112);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v10 - 80);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath(char *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  AdobeXMPCore_Int::CompositeNodeImpl::GetNodeAtPath(&a1[*(_QWORD *)(*(_QWORD *)a1 - 560)], a2, a3);
}

void AdobeXMPCore_Int::CompositeNodeImpl::InsertNodeAtPath()
{
  AdobeXMPCore_Int::IErrorNotifier_I *v0;
  char *v1;
  unint64_t *v2;
  unint64_t v3;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v6;
  char *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2, &v7);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 120))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CompositeNodeImpl.cpp", 144);
  v0 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 112))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "InsertNodeAtPath( path) is not yet implemented", -1);
  v1 = 0;
  if (v7)
    v1 = &v7[*(_QWORD *)(*(_QWORD *)v7 - 304)];
  *(_QWORD *)&v6 = v1;
  *((_QWORD *)&v6 + 1) = v8;
  if (v8)
  {
    v2 = (unint64_t *)(v8 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v0);
  (**ErrorNotifier)(ErrorNotifier, &v6);
  exception = __cxa_allocate_exception(0x10uLL);
  *exception = v6;
  v6 = 0uLL;
}

void sub_1880BF2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::InsertNodeAtPath()
{
  AdobeXMPCore_Int::CompositeNodeImpl::InsertNodeAtPath();
}

void AdobeXMPCore_Int::CompositeNodeImpl::ReplaceNodeAtPath()
{
  AdobeXMPCore_Int::IErrorNotifier_I *v0;
  char *v1;
  unint64_t *v2;
  unint64_t v3;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v6;
  char *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2, &v7);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 120))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CompositeNodeImpl.cpp", 149);
  v0 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 112))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "ReplaceNodeAtPath( path) is not yet implemented", -1);
  v1 = 0;
  if (v7)
    v1 = &v7[*(_QWORD *)(*(_QWORD *)v7 - 304)];
  *(_QWORD *)&v6 = v1;
  *((_QWORD *)&v6 + 1) = v8;
  if (v8)
  {
    v2 = (unint64_t *)(v8 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v0);
  (**ErrorNotifier)(ErrorNotifier, &v6);
  exception = __cxa_allocate_exception(0x10uLL);
  *exception = v6;
  v6 = 0uLL;
}

void sub_1880BF480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::ReplaceNodeAtPath()
{
  AdobeXMPCore_Int::CompositeNodeImpl::ReplaceNodeAtPath();
}

void AdobeXMPCore_Int::CompositeNodeImpl::RemoveNodeAtPath(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;
  __int128 v41;

  *a2 = 0;
  a2[1] = 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 512))(a2);
  if (*a2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 280))(*a2);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 528))(v3);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v4);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 168))(*a2))
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 544)) + 240))(&v40);
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v40 + 688))(v40);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 88))(&v38);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 72))(&v36);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 744))(&v41, v6, &v38, &v36);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v41);
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v39;
      if (v39)
      {
        v14 = (unint64_t *)&v39->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
LABEL_50:
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    else if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2))
    {
      v41 = 0uLL;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 544)) + 248))(&v41);
      v19 = v41;
      v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 176))(*a2);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 680))(&v40, v19, v20);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v40);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v18 = __ldaxr(v24);
        while (__stlxr(v18 - 1, v24));
        goto LABEL_50;
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 544)) + 240))(&v41);
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41 + 688))(v41);
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 88))(&v40);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 72))(&v38);
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v25 + 744))(&v41, v25, &v40, &v38);
      std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v41);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = v39;
      if (v39)
      {
        v33 = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
        do
          v18 = __ldaxr(v35);
        while (__stlxr(v18 - 1, v35));
        goto LABEL_50;
      }
    }
  }
}

void sub_1880BF904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::CompositeNodeImpl::RemoveNodeAtPath(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::CompositeNodeImpl::RemoveNodeAtPath((uint64_t)a1 + *(_QWORD *)(*a1 - 592), a2);
}

uint64_t AdobeXMPCore_Int::CompositeNodeImpl::CheckSuitabilityToBeUsedAsChildNode(uint64_t a1, _QWORD *a2)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  void (***v13)(_QWORD, __int128 *);
  _OWORD *v14;
  __int128 v15;
  char *v16;
  uint64_t v17;

  if (!*a2)
  {
    v16 = 0;
    v17 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v16);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 120))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CompositeNodeImpl.cpp", 179);
    v3 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 112))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "invalid shared pointer", -1);
    v4 = 0;
    if (v16)
      v4 = &v16[*(_QWORD *)(*(_QWORD *)v16 - 304)];
    *(_QWORD *)&v15 = v4;
    *((_QWORD *)&v15 + 1) = v17;
    if (v17)
    {
      v5 = (unint64_t *)(v17 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v3);
    (**ErrorNotifier)(ErrorNotifier, &v15);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v15;
    v15 = 0uLL;
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2))
  {
    v16 = 0;
    v17 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(100, 3, 2, &v16);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 120))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CompositeNodeImpl.cpp", 175);
    v9 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 112))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "node is already a part of tree", -1);
    v10 = 0;
    if (v16)
      v10 = &v16[*(_QWORD *)(*(_QWORD *)v16 - 304)];
    *(_QWORD *)&v15 = v10;
    *((_QWORD *)&v15 + 1) = v17;
    if (v17)
    {
      v11 = (unint64_t *)(v17 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v9);
    (**v13)(v13, &v15);
    v14 = __cxa_allocate_exception(0x10uLL);
    *v14 = v15;
    v15 = 0uLL;
  }
  return 1;
}

void sub_1880BFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::INode_I::GetSimpleQualifier(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 512))(&v6);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 232))(v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1880BFC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::CompositeNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CompositeNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC6C0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880BFCDC(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 744) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880BFD0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 744) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CompositeNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CompositeNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t Host_IO::Writable(Host_IO *this, const char *a2)
{
  int v2;
  const char *v4;
  std::string::size_type v5;
  BOOL v6;
  stat *v7;
  uint64_t v8;
  stat *v9;
  std::string v11;
  stat v12;
  char v13;

  v2 = (int)a2;
  memset(&v12, 0, sizeof(v12));
  if (stat((const char *)this, &v12))
  {
    if (!v2)
      return 1;
    memset(&v12, 0, 24);
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)this);
    v5 = std::string::rfind((const std::string *)&v12, 47, 0xFFFFFFFFFFFFFFFFLL);
    if (v5 == -1)
    {
      MEMORY[0x18D761A14](&v12, ".");
    }
    else
    {
      if (v5)
        std::string::basic_string(&v11, (const std::string *)&v12, 0, v5, (std::allocator<char> *)&v13);
      else
        std::string::basic_string(&v11, (const std::string *)&v12, 0, 1uLL, (std::allocator<char> *)&v13);
      if (SHIBYTE(v12.st_gid) < 0)
        operator delete(*(void **)&v12.st_dev);
      *(_OWORD *)&v12.st_dev = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      *(_QWORD *)&v12.st_uid = *((_QWORD *)&v11.__r_.__value_.__l + 2);
    }
    if ((v12.st_gid & 0x80000000) == 0)
      v9 = &v12;
    else
      v9 = *(stat **)&v12.st_dev;
    v8 = Host_IO::Writable((Host_IO *)v9, (const char *)1, v6);
  }
  else
  {
    if (Host_IO::GetFileMode(this, v4) - 1 > 1)
      return 0;
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)this);
    if ((v12.st_gid & 0x80000000) == 0)
      v7 = &v12;
    else
      v7 = *(stat **)&v12.st_dev;
    v8 = access((const char *)v7, 2) == 0;
  }
  if (SHIBYTE(v12.st_gid) < 0)
    operator delete(*(void **)&v12.st_dev);
  return v8;
}

void sub_1880BFF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Host_IO::GetFileMode(Host_IO *this, const char *a2)
{
  int v3;
  unsigned __int8 v4;
  stat v6;

  memset(&v6, 0, sizeof(v6));
  if (stat((const char *)this, &v6))
  {
    return 0;
  }
  else
  {
    v3 = v6.st_mode & 0xF000;
    if (v3 == 0x4000)
      v4 = 2;
    else
      v4 = 3;
    if (v3 == 0x8000)
      return 1;
    else
      return v4;
  }
}

BOOL Host_IO::Create(Host_IO *this, const char *a2)
{
  const char *v3;
  int v4;
  int v5;
  _QWORD *exception;
  const char *v8;
  stat v9;

  memset(&v9, 0, sizeof(v9));
  v4 = stat((const char *)this, &v9);
  if (!v4)
  {
    if (Host_IO::GetFileMode(this, v3) == 1)
      return v4 != 0;
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v8 = "Host_IO::Create, path exists but is not a file";
LABEL_8:
    exception[1] = v8;
    *((_BYTE *)exception + 16) = 0;
  }
  v5 = open((const char *)this, 2562, 420);
  if (v5 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v8 = "Host_IO::Create, cannot create file";
    goto LABEL_8;
  }
  close(v5);
  return v4 != 0;
}

uint64_t Host_IO::GetModifyDate(const char *a1, uint64_t a2)
{
  uint64_t v3;
  int v5;
  int8x16_t v6;
  stat v7;
  tm v8;

  memset(&v7, 0, sizeof(v7));
  if (stat(a1, &v7))
    return 0;
  v5 = v7.st_mode & 0xF000;
  if (v5 != 0x8000 && v5 != 0x4000)
    return 0;
  v3 = 1;
  if (a2)
  {
    memset(&v8, 0, sizeof(v8));
    gmtime_r(&v7.st_mtimespec.tv_sec, &v8);
    *(int32x2_t *)a2 = vrev64_s32(vadd_s32(*(int32x2_t *)&v8.tm_mon, (int32x2_t)0x76C00000001));
    *(_BYTE *)(a2 + 24) = 1;
    v6 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v8.tm_sec);
    *(int8x16_t *)(a2 + 8) = vextq_s8(v6, v6, 8uLL);
    *(_DWORD *)(a2 + 36) = 0;
    *(_WORD *)(a2 + 25) = 257;
    *(_QWORD *)(a2 + 27) = 0;
    *(_BYTE *)(a2 + 35) = 0;
  }
  return v3;
}

BOOL Host_IO::CreateTemp@<W0>(Host_IO *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  const char *v5;
  Host_IO *v6;
  _QWORD *exception;
  stat v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  ConjureDerivedPath((char *)this, (std::string *)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_12;
    v4 = *(const char **)a2;
  }
  else
  {
    v4 = (const char *)a2;
    if (!*(_BYTE *)(a2 + 23))
    {
LABEL_12:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "Host_IO::CreateTemp, cannot create temp file path";
      *((_BYTE *)exception + 16) = 0;
    }
  }
  memset(&v9, 0, sizeof(v9));
  if (!stat(v4, &v9))
    __assert_rtn("CreateTemp", "Host_IO-POSIX.cpp", 194, "! Host_IO::Exists(tempPath.c_str())");
  if (*(char *)(a2 + 23) >= 0)
    v6 = (Host_IO *)a2;
  else
    v6 = *(Host_IO **)a2;
  return Host_IO::Create(v6, v5);
}

void sub_1880C0250(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double ConjureDerivedPath@<D0>(char *__s@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  std::string *v8;
  BOOL v9;
  double result;
  std::string v11;
  stat v12;

  memset(&v11, 0, sizeof(v11));
  std::string::basic_string[abi:ne180100]<0>(&v11, __s);
  std::string::append(&v11, "._nn_");
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v11;
  else
    v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v5 = (size_t)v4 + strlen(__s);
  v6 = 48;
  while (2)
  {
    *(_BYTE *)(v5 + 2) = v6;
    v7 = 48;
    do
    {
      *(_BYTE *)(v5 + 3) = v7;
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v11;
      else
        v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
      memset(&v12, 0, sizeof(v12));
      if (stat((const char *)v8, &v12))
      {
        result = *(double *)&v11.__r_.__value_.__l.__data_;
        *a2 = v11;
        return result;
      }
      v9 = v7++ > 0x38;
    }
    while (!v9);
    v9 = v6++ > 0x38;
    if (!v9)
      continue;
    break;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return result;
}

void sub_1880C0384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Host_IO::Open(Host_IO *this, const char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *exception;
  const char *v8;
  stat v9;

  v2 = (char)a2;
  if ((_DWORD)a2)
    v3 = open((const char *)this, 0, 432);
  else
    v3 = open((const char *)this, 2, 432);
  v4 = v3;
  if ((_DWORD)v3 == -1)
  {
    v5 = *__error();
    if (v5 == 2)
      return v4;
    if (v5 == 13)
    {
LABEL_12:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 112;
      v8 = "Host_IO::Open, file permission error";
      goto LABEL_15;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    v8 = "Host_IO::Open, other failure";
LABEL_15:
    exception[1] = v8;
    *((_BYTE *)exception + 16) = 0;
  }
  if ((v2 & 1) != 0)
    return v4;
  memset(&v9, 0, sizeof(v9));
  if (fstat(v3, &v9) == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    v8 = "Host_IO::Open, fstat failed.";
    goto LABEL_15;
  }
  if ((v9.st_mode & 0x80) == 0)
    goto LABEL_12;
  return v4;
}

uint64_t Host_IO::Close(uint64_t this)
{
  _QWORD *exception;

  if ((_DWORD)this != -1)
  {
    this = close(this);
    if ((_DWORD)this)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 11;
      exception[1] = "Host_IO::Close, close failure";
      *((_BYTE *)exception + 16) = 0;
    }
  }
  return this;
}

void Host_IO::SwapData(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2, const char *a3)
{
  std::string *v5;
  const char *v6;
  const std::__fs::filesystem::path *v7;
  const char *v8;
  const char *v9;
  const std::__fs::filesystem::path *v10;
  _QWORD *exception;
  std::string v12;
  stat v13;

  memset(&v12, 0, sizeof(v12));
  ConjureDerivedPath((char *)this, &v12);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v12.__r_.__value_.__s + 23))
    {
      v5 = &v12;
      goto LABEL_6;
    }
LABEL_17:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Cannot create temp file path";
    *((_BYTE *)exception + 16) = 0;
  }
  if (!v12.__r_.__value_.__l.__size_)
    goto LABEL_17;
  v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
LABEL_6:
  memset(&v13, 0, sizeof(v13));
  if (!stat((const char *)v5, &v13))
    __assert_rtn("SwapData", "Host_IO-POSIX.cpp", 257, "! Host_IO::Exists(thirdPath.c_str())");
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = (const std::__fs::filesystem::path *)&v12;
  else
    v7 = (const std::__fs::filesystem::path *)v12.__r_.__value_.__r.__words[0];
  Host_IO::Rename(this, v7, v6);
  Host_IO::Rename(a2, this, v8);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = (const std::__fs::filesystem::path *)&v12;
  else
    v10 = (const std::__fs::filesystem::path *)v12.__r_.__value_.__r.__words[0];
  Host_IO::Rename(v10, a2, v9);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1880C062C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const std::__fs::filesystem::path *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  const std::__fs::filesystem::path *v15;
  const std::__fs::filesystem::path *v16;
  const char *v17;
  const char *v18;
  const std::__fs::filesystem::path *v19;

  __cxa_begin_catch(a1);
  Host_IO::Rename(v15, v16, v17);
  if (a15 >= 0)
    v19 = (const std::__fs::filesystem::path *)&a10;
  else
    v19 = a10;
  Host_IO::Rename(v19, v15, v18);
  __cxa_rethrow();
}

void sub_1880C0660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_end_catch();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1880C066C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const std::__fs::filesystem::path *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  const std::__fs::filesystem::path *v15;
  const char *v16;
  const std::__fs::filesystem::path *v17;

  __cxa_begin_catch(a1);
  if (a15 >= 0)
    v17 = (const std::__fs::filesystem::path *)&a10;
  else
    v17 = a10;
  Host_IO::Rename(v17, v15, v16);
  __cxa_rethrow();
}

void sub_1880C0694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_end_catch();
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(a1);
}

void Host_IO::Rename(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2, const char *a3)
{
  std::error_code *v5;
  int v6;
  _QWORD *exception;
  const char *v8;
  stat v9;

  memset(&v9, 0, sizeof(v9));
  if (!stat((const char *)a2, &v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v8 = "Host_IO::Rename, new path exists";
    goto LABEL_6;
  }
  rename(this, a2, v5);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    v8 = "Host_IO::Rename, rename failure";
LABEL_6:
    exception[1] = v8;
    *((_BYTE *)exception + 16) = 0;
  }
}

void Host_IO::Delete(Host_IO *this, const char *a2)
{
  char *v2;

  v2 = (char *)sub_1880C079C + 4 * asc_18822F801[Host_IO::GetFileMode(this, a2)];
  __asm { BR              X10 }
}

uint64_t sub_1880C079C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const char *v12;
  uint64_t result;
  _QWORD *exception;

  result = unlink(v12);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    exception[1] = "Host_IO::Delete, unlink failure";
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

off_t Host_IO::Seek(int a1, off_t a2, unsigned int a3)
{
  off_t result;
  _QWORD *exception;
  const char *v5;

  if (a3 >= 3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v5 = "Host_IO::Seek, Invalid seek mode";
    goto LABEL_6;
  }
  result = lseek(a1, a2, a3);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    v5 = "Host_IO::Seek, lseek failure";
LABEL_6:
    exception[1] = v5;
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

ssize_t Host_IO::Read(Host_IO *this, void *a2, unsigned int a3)
{
  ssize_t result;
  _QWORD *exception;
  const char *v5;

  if ((a3 & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v5 = "Host_IO::Read, request too large";
    goto LABEL_6;
  }
  result = read((int)this, a2, a3);
  if (result == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 114;
    v5 = "Host_IO::Read, read failure";
LABEL_6:
    exception[1] = v5;
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

ssize_t Host_IO::Write(Host_IO *this, const void *a2, size_t __nbyte)
{
  int v3;
  ssize_t result;
  _QWORD *exception;
  const char *v6;
  int v7;

  if ((__nbyte & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v6 = "Host_IO::Write, request too large";
    goto LABEL_8;
  }
  v3 = __nbyte;
  result = write((int)this, a2, __nbyte);
  if (result != v3)
  {
    v7 = *__error();
    exception = __cxa_allocate_exception(0x18uLL);
    if (v7 == 28)
    {
      *(_DWORD *)exception = 113;
      v6 = "Host_IO::Write, disk full";
    }
    else
    {
      *(_DWORD *)exception = 115;
      v6 = "Host_IO::Write, write failure";
    }
LABEL_8:
    exception[1] = v6;
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

off_t Host_IO::Length(Host_IO *this)
{
  int v1;
  off_t v2;
  off_t v3;
  off_t v5;
  _QWORD *exception;

  v1 = (int)this;
  v2 = lseek((int)this, 0, 1);
  v3 = lseek(v1, 0, 2);
  if (v2 == -1 || v3 == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    exception[1] = "Host_IO::Length, lseek failure";
    *((_BYTE *)exception + 16) = 0;
  }
  v5 = v3;
  lseek(v1, v2, 0);
  return v5;
}

uint64_t Host_IO::SetEOF(Host_IO *this, off_t a2)
{
  uint64_t result;
  _QWORD *exception;

  result = ftruncate((int)this, a2);
  if ((_DWORD)result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 11;
    exception[1] = "Host_IO::SetEOF, ftruncate failure";
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

_QWORD *AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x63436D704E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 688));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63436D704E6F6465, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 0x29u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 696)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63436D704E6F6465, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 0x33u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_1880C0BA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICompositeNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x280, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 25, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICompositeNode_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer(AdobeXMPCore_Int::ICompositeNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ICompositeNode_I::getInterfacePointer((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v12);
  v11 = v12;
  v6 = AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ICompositeNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, 0, (uint64_t (*)(_QWORD *, uint64_t))0x1F8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 57, (uint64_t)&v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880C0DEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ICompositeNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  *a1 = 0;
  v8 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a4);
  return a4(v8, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getNodeTypeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 632)), a2, a3);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v12);
  v11 = v12;
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x200, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 64, (uint64_t)&v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880C0FB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880C10D0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880C10B4);
}

void sub_1880C11CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::getNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 640)), a2, a3);
}

void AdobeXMPCore_Int::ICompositeNode_I::appendNode(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v5 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v9);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(_QWORD *, uint64_t))0x208, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 69, (uint64_t)&v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1880C1298(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

void `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::appendNode(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  AdobeXMPCore_Int::ICompositeNode_I::appendNode((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 648)), a2, a3);
}

void AdobeXMPCore_Int::ICompositeNode_I::insertNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7;
  AdobeXMPCore::IPath_v1 *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v7 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v16);
  AdobeXMPCore::IPath_v1::MakeShared(a3, v8, &v18);
  v15 = v18;
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a4, (uint64_t)this + v7, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x210, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 74, (uint64_t)&v16, (uint64_t)&v15);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1880C1494(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ICompositeNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v8 = a3;
  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a3);
  return v8(v9, a7, a8);
}

void `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::insertNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  AdobeXMPCore_Int::ICompositeNode_I::insertNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7;
  AdobeXMPCore::IPath_v1 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  v7 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v18);
  AdobeXMPCore::IPath_v1::MakeShared(a3, v8, &v20);
  v17 = v20;
  v9 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x218, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 79, (uint64_t)&v18, (uint64_t)&v17);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_1880C16B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1880C17E8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880C17CCLL);
}

void sub_1880C18E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::IPath_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICompositeNode_I::replaceNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 664)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 688);
  AdobeXMPCore::IPath_v1::MakeShared(a2, a2, &v12);
  v11 = v12;
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::IPath_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x220, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICompositeNode_I.cpp", 84, (uint64_t)&v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880C19C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCore::IPath_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::ICompositeNode_I::removeNodeAtPath((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672)), a2, a3);
}

uint64_t AdobeXMPCore_Int::ICompositeNode_I::iterator(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 688), (void (*)(char **__return_ptr, _QWORD *))0x228, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ICompositeNode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880C1B34(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880C1B18);
}

void sub_1880C1C30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICompositeNode_I::iterator(AdobeXMPCore_Int::ICompositeNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ICompositeNode_I::iterator((AdobeXMPCore_Int::ICompositeNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 680)), a2);
}

uint64_t UTF8_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (_BYTE *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15];
          ++v15;
          v14 += 2;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned __int16 *)((char *)a3 + v14);
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            v21 = 0;
            v19 = 0;
            v20 = 0;
            if (((char)*v13 & 0x80000000) == 0)
              break;
            result = (uint64_t)CodePoint_from_UTF8_Multi(v13, v10, &v21, &v20);
            v17 = v20;
            if (!v20)
              goto LABEL_23;
            result = v21;
            if (HIWORD(v21))
            {
              result = CodePoint_to_UTF16Nat_Surrogate(v21, a3, v11, &v19);
              v18 = v19;
              if (!v19)
                goto LABEL_23;
              v17 = v20;
            }
            else
            {
              *a3 = v21;
              v18 = 1;
            }
            v13 += v17;
            v11 -= v18;
            a3 += v18;
            v10 -= v17;
            if (!v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_23:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

_BYTE *UTF8_to_UTF32Nat(_BYTE *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15];
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned int *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        v17 = v11 - v15;
        v10 -= v15;
        if (v10 && v17)
        {
          while (1)
          {
            v19 = 0;
            if (((char)*v13 & 0x80000000) == 0)
              break;
            result = CodePoint_from_UTF8_Multi(v13, v10, a3, &v19);
            if (!v19)
            {
              v11 = v17;
              goto LABEL_26;
            }
            v10 -= v19;
            v13 += v19;
            v11 = v17 - 1;
            ++a3;
            if (v10)
              v18 = v17 == 1;
            else
              v18 = 1;
            --v17;
            if (v18)
              goto LABEL_22;
          }
        }
        v11 = v17;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF16Nat_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (unsigned __int16 *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        if (v10 >= v11)
          v15 = v11;
        else
          v15 = v10;
        while (1)
        {
          v16 = *v13;
          if (v16 > 0x7F)
            break;
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            v14 = v15;
            goto LABEL_11;
          }
        }
        a3 += v14;
LABEL_11:
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            v20 = 0;
            result = *v13;
            if (result < 0x80 || (result & 0xF800) == 55296)
              break;
            result = CodePoint_to_UTF8_Multi(result, a3, v11, &v20);
            if (!v20)
              goto LABEL_29;
            v11 -= v20;
            ++v13;
            a3 += v20;
            if (!--v10)
              break;
          }
          while (v11);
        }
        for (; v10 && v11; v10 -= v20)
        {
          v19 = 0;
          v20 = 0;
          v18 = 0;
          if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu)
            break;
          result = (uint64_t)CodePoint_from_UTF16Nat_Surrogate(v13, v10, &v19, &v20);
          if (!v20)
            goto LABEL_29;
          result = CodePoint_to_UTF8_Multi(v19, a3, v11, &v18);
          if (!v18)
            goto LABEL_29;
          v13 += v20;
          v11 -= v18;
          a3 += v18;
        }
      }
      while (v10 && v11);
    }
  }
LABEL_29:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Nat_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (unsigned int *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (1)
        {
          v17 = v13[v15];
          if (v17 > 0x7F)
            break;
          a3[v15++] = v17;
          v14 += 4;
          if (v16 == v15)
          {
            a3 += v15;
            v13 = (unsigned int *)((char *)v13 + v14);
            goto LABEL_11;
          }
        }
        a3 += v15;
        v13 = (unsigned int *)((char *)v13 + v14);
        v16 = v15;
LABEL_11:
        v11 -= v16;
        v10 -= v16;
        if (v10 && v11)
        {
          do
          {
            v18 = 0;
            result = *v13;
            if (result <= 0x7F)
              break;
            result = CodePoint_to_UTF8_Multi(result, a3, v11, &v18);
            if (!v18)
              goto LABEL_19;
            v11 -= v18;
            ++v13;
            a3 += v18;
            if (!--v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_19:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t CodePoint_to_UTF16Nat(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  _QWORD *exception;

  if (a3)
  {
    if (result >> 11 > 0x1A)
    {
      if (WORD1(result))
        return CodePoint_to_UTF16Nat_Surrogate(result, a2, a3, a4);
      if (result >> 13 <= 6)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        exception[1] = "Bad UTF-32 - surrogate code point";
        *((_BYTE *)exception + 16) = 0;
      }
    }
    *a2 = result;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *a4 = v4;
  return result;
}

uint64_t CodePoint_to_UTF16Swp(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  _QWORD *exception;

  if (a3)
  {
    if (result >> 11 > 0x1A)
    {
      if (WORD1(result))
        return CodePoint_to_UTF16Swp_Surrogate(result, a2, a3, a4);
      if (result >> 13 <= 6)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        exception[1] = "Bad UTF-32 - surrogate code point";
        *((_BYTE *)exception + 16) = 0;
      }
    }
    *a2 = bswap32(result) >> 16;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;

  if (a2)
  {
    v4 = *result;
    if ((v4 & 0xF800) == 0xD800)
      return CodePoint_from_UTF16Nat_Surrogate(result, a2, a3, a4);
    *a3 = v4;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *a4 = v5;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;

  if (a2)
  {
    v4 = bswap32(*result);
    if (v4 >> 27 == 27)
      return CodePoint_from_UTF16Swp_Surrogate(result, a2, a3, a4);
    *a3 = HIWORD(v4);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *a4 = v5;
  return result;
}

uint64_t UTF8_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (_BYTE *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (((char)v13[v15] & 0x80000000) == 0)
        {
          a3[v15] = v13[v15] << 8;
          ++v15;
          v14 += 2;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned __int16 *)((char *)a3 + v14);
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            v21 = 0;
            v19 = 0;
            v20 = 0;
            if (((char)*v13 & 0x80000000) == 0)
              break;
            result = (uint64_t)CodePoint_from_UTF8_Multi(v13, v10, &v21, &v20);
            v17 = v20;
            if (!v20)
              goto LABEL_23;
            result = v21;
            if (HIWORD(v21))
            {
              result = CodePoint_to_UTF16Swp_Surrogate(v21, a3, v11, &v19);
              v18 = v19;
              if (!v19)
                goto LABEL_23;
              v17 = v20;
            }
            else
            {
              *a3 = bswap32(v21) >> 16;
              v18 = 1;
            }
            v13 += v17;
            v11 -= v18;
            a3 += v18;
            v10 -= v17;
            if (!v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_23:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

_BYTE *UTF8_to_UTF32Swp(_BYTE *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  unint64_t v22;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (1)
        {
          v17 = (char)v13[v15];
          if (v17 < 0)
            break;
          a3[v15++] = v17 << 24;
          v14 += 4;
          if (v16 == v15)
          {
            v13 += v15;
            a3 = (unsigned int *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        v13 += v15;
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            v22 = 0;
            v21 = 0;
            if (((char)*v13 & 0x80000000) == 0)
              break;
            result = CodePoint_from_UTF8_Multi(v13, v10, &v21, &v22);
            v19 = v22;
            if (!v22)
            {
              v11 = v18;
              goto LABEL_26;
            }
            *a3++ = bswap32(v21);
            v10 -= v19;
            v13 += v19;
            v11 = v18 - 1;
            if (v10)
              v20 = v18 == 1;
            else
              v20 = 1;
            --v18;
            if (v20)
              goto LABEL_22;
          }
        }
        v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF16Swp_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (unsigned __int16 *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        if (v10 >= v11)
          v15 = v11;
        else
          v15 = v10;
        while (1)
        {
          v16 = bswap32(*v13) >> 16;
          if (v16 > 0x7F)
            break;
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            v14 = v15;
            goto LABEL_11;
          }
        }
        a3 += v14;
LABEL_11:
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            v20 = 0;
            result = bswap32(*v13) >> 16;
            if (result < 0x80 || (result & 0xF800) == 55296)
              break;
            result = CodePoint_to_UTF8_Multi(result, a3, v11, &v20);
            if (!v20)
              goto LABEL_29;
            v11 -= v20;
            ++v13;
            a3 += v20;
            if (!--v10)
              break;
          }
          while (v11);
        }
        for (; v10 && v11; v10 -= v20)
        {
          v19 = 0;
          v20 = 0;
          v18 = 0;
          if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu)
            break;
          result = (uint64_t)CodePoint_from_UTF16Swp_Surrogate(v13, v10, &v19, &v20);
          if (!v20)
            goto LABEL_29;
          result = CodePoint_to_UTF8_Multi(v19, a3, v11, &v18);
          if (!v18)
            goto LABEL_29;
          v13 += v20;
          v11 -= v18;
          a3 += v18;
        }
      }
      while (v10 && v11);
    }
  }
LABEL_29:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Swp_to_UTF8(uint64_t result, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = (unsigned int *)result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        if (v10 >= v11)
          v15 = v11;
        else
          v15 = v10;
        while (1)
        {
          v16 = bswap32(*v13);
          if (v16 > 0x7F)
            break;
          a3[v14] = v16;
          ++v13;
          if (v15 == ++v14)
          {
            a3 += v14;
            goto LABEL_11;
          }
        }
        a3 += v14;
        v15 = v14;
LABEL_11:
        v11 -= v15;
        v10 -= v15;
        if (v10 && v11)
        {
          do
          {
            v17 = 0;
            result = bswap32(*v13);
            if (result <= 0x7F)
              break;
            result = CodePoint_to_UTF8_Multi(result, a3, v11, &v17);
            if (!v17)
              goto LABEL_19;
            v11 -= v17;
            ++v13;
            a3 += v17;
            if (!--v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_19:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Nat_to_UTF32Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (1)
        {
          v17 = *v13;
          if ((v17 & 0xF800) == 0xD800)
            break;
          a3[v15] = v17;
          ++v13;
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned int *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            v20 = 0;
            if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu)
              break;
            result = CodePoint_from_UTF16Nat_Surrogate(v13, v10, a3, &v20);
            if (!v20)
            {
              v11 = v18;
              goto LABEL_26;
            }
            v10 -= v20;
            v13 += v20;
            v11 = v18 - 1;
            ++a3;
            if (v10)
              v19 = v18 == 1;
            else
              v19 = 1;
            --v18;
            if (v19)
              goto LABEL_22;
          }
        }
        v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Nat_to_UTF32Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        if (v10 >= v11)
          v15 = v11;
        else
          v15 = v10;
        while (1)
        {
          v16 = *v13;
          if ((v16 & 0xF800) == 0xD800)
            break;
          *a3++ = bswap32(v16);
          ++v13;
          if (v15 == ++v14)
          {
            v14 = v15;
            break;
          }
        }
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            v19 = 0;
            v18 = 0;
            if ((unsigned __int16)((unsigned __int16)(*v13 + 0x2000) >> 11) <= 0x1Eu)
              break;
            result = CodePoint_from_UTF16Nat_Surrogate(v13, v10, &v18, &v19);
            v17 = v19;
            if (!v19)
              goto LABEL_18;
            *a3++ = bswap32(v18);
            v13 += v17;
            --v11;
            v10 -= v17;
            if (!v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_18:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Swp_to_UTF32Nat(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        v15 = 0;
        if (v10 >= v11)
          v16 = v11;
        else
          v16 = v10;
        while (1)
        {
          v17 = bswap32(*v13);
          if (v17 >> 27 == 27)
            break;
          a3[v15] = HIWORD(v17);
          ++v13;
          ++v15;
          v14 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned int *)((char *)a3 + v14);
            v15 = v16;
            goto LABEL_11;
          }
        }
        a3 = (unsigned int *)((char *)a3 + v14);
LABEL_11:
        v18 = v11 - v15;
        v10 -= v15;
        if (v10 && v18)
        {
          while (1)
          {
            v20 = 0;
            if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu)
              break;
            result = CodePoint_from_UTF16Swp_Surrogate(v13, v10, a3, &v20);
            if (!v20)
            {
              v11 = v18;
              goto LABEL_26;
            }
            v10 -= v20;
            v13 += v20;
            v11 = v18 - 1;
            ++a3;
            if (v10)
              v19 = v18 == 1;
            else
              v19 = 1;
            --v18;
            if (v19)
              goto LABEL_22;
          }
        }
        v11 = v18;
LABEL_22:
        ;
      }
      while (v10 && v11);
    }
  }
LABEL_26:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

unsigned __int16 *UTF16Swp_to_UTF32Swp(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  v10 = a2;
  v11 = a4;
  if (a2)
  {
    v10 = a2;
    v11 = a4;
    if (a4)
    {
      v13 = result;
      v11 = a4;
      v10 = a2;
      do
      {
        v14 = 0;
        if (v10 >= v11)
          v15 = v11;
        else
          v15 = v10;
        while (1)
        {
          v16 = *v13;
          if ((v16 & 0xF8) == 0xD8)
            break;
          *a3++ = v16 << 16;
          ++v13;
          if (v15 == ++v14)
          {
            v14 = v15;
            break;
          }
        }
        v11 -= v14;
        v10 -= v14;
        if (v10 && v11)
        {
          do
          {
            v19 = 0;
            v18 = 0;
            if ((unsigned __int16)((unsigned __int16)((*v13 << 8) + 0x2000) >> 11) <= 0x1Eu)
              break;
            result = CodePoint_from_UTF16Swp_Surrogate(v13, v10, &v18, &v19);
            v17 = v19;
            if (!v19)
              goto LABEL_18;
            *a3++ = bswap32(v18);
            v13 += v17;
            --v11;
            v10 -= v17;
            if (!v10)
              break;
          }
          while (v11);
        }
      }
      while (v10 && v11);
    }
  }
LABEL_18:
  *a5 = a2 - v10;
  *a6 = a4 - v11;
  return result;
}

uint64_t UTF32Nat_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;

  v9 = a2;
  v10 = a4;
  if (a2)
  {
    v9 = a2;
    v10 = a4;
    if (a4)
    {
      v12 = (unsigned int *)result;
      v10 = a4;
      v9 = a2;
      do
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        if (v9 >= v10)
          v16 = v10;
        else
          v16 = v9;
        while (1)
        {
          v17 = v12[v15];
          if (HIWORD(v17))
            break;
          a3[v15++] = v17;
          v14 += 2;
          v13 += 4;
          if (v16 == v15)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v14);
            v12 = (unsigned int *)((char *)v12 + v13);
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v14);
        v12 = (unsigned int *)((char *)v12 + v13);
        v16 = v15;
LABEL_11:
        v18 = v9 - v16;
        if (v9 == v16 || v10 == v16)
        {
          v9 -= v16;
          v10 -= v16;
          if (!v18)
            break;
        }
        else
        {
          v19 = -(uint64_t)v9;
          while (1)
          {
            v23 = 0;
            result = *v12;
            if (!WORD1(result))
              break;
            result = CodePoint_to_UTF16Nat_Surrogate(result, a3, v10 - v16, &v23);
            if (!v23)
            {
              v10 -= v16;
              v9 = -(uint64_t)(v16 + v19);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            v20 = v19 + 1;
            if (~v16 != v19)
            {
              ++v19;
              if (v10 != v16)
                continue;
            }
            v10 -= v16;
            v21 = v16 + v20;
            goto LABEL_22;
          }
          v10 -= v16;
          v21 = v16 + v19;
LABEL_22:
          v9 = -(uint64_t)v21;
          if (!v9)
            break;
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Nat_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;

  v9 = a2;
  v10 = a4;
  if (a2)
  {
    v9 = a2;
    v10 = a4;
    if (a4)
    {
      v12 = (unsigned int *)result;
      v10 = a4;
      v9 = a2;
      do
      {
        v13 = 0;
        v14 = 0;
        if (v9 >= v10)
          v15 = v10;
        else
          v15 = v9;
        while (1)
        {
          v16 = v12[v14];
          if (HIWORD(v16))
            break;
          *a3++ = bswap32(v16) >> 16;
          ++v14;
          v13 += 4;
          if (v15 == v14)
          {
            v12 = (unsigned int *)((char *)v12 + v13);
            goto LABEL_11;
          }
        }
        v12 = (unsigned int *)((char *)v12 + v13);
        v15 = v14;
LABEL_11:
        v17 = v9 - v15;
        if (v9 == v15 || v10 == v15)
        {
          v9 -= v15;
          v10 -= v15;
          if (!v17)
            break;
        }
        else
        {
          v18 = -(uint64_t)v9;
          while (1)
          {
            v22 = 0;
            result = *v12;
            if (!WORD1(result))
              break;
            result = CodePoint_to_UTF16Swp_Surrogate(result, a3, v10 - v15, &v22);
            if (!v22)
            {
              v10 -= v15;
              v9 = -(uint64_t)(v15 + v18);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            v19 = v18 + 1;
            if (~v15 != v18)
            {
              ++v18;
              if (v10 != v15)
                continue;
            }
            v10 -= v15;
            v20 = v15 + v19;
            goto LABEL_22;
          }
          v10 -= v15;
          v20 = v15 + v18;
LABEL_22:
          v9 = -(uint64_t)v20;
          if (!v9)
            break;
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Swp_to_UTF16Nat(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v22;

  v9 = a2;
  v10 = a4;
  if (a2)
  {
    v9 = a2;
    v10 = a4;
    if (a4)
    {
      v12 = (unsigned int *)result;
      v10 = a4;
      v9 = a2;
      do
      {
        v13 = 0;
        v14 = 0;
        if (v9 >= v10)
          v15 = v10;
        else
          v15 = v9;
        while (1)
        {
          v16 = bswap32(*v12);
          if (HIWORD(v16))
            break;
          a3[v14] = v16;
          ++v12;
          ++v14;
          v13 += 2;
          if (v15 == v14)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v13);
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v13);
        v15 = v14;
LABEL_11:
        v17 = v9 - v15;
        if (v9 == v15 || v10 == v15)
        {
          v9 -= v15;
          v10 -= v15;
          if (!v17)
            break;
        }
        else
        {
          v18 = -(uint64_t)v9;
          while (1)
          {
            v22 = 0;
            result = bswap32(*v12);
            if (!WORD1(result))
              break;
            result = CodePoint_to_UTF16Nat_Surrogate(result, a3, v10 - v15, &v22);
            if (!v22)
            {
              v10 -= v15;
              v9 = -(uint64_t)(v15 + v18);
              goto LABEL_26;
            }
            ++v12;
            v10 -= 2;
            a3 += 2;
            v19 = v18 + 1;
            if (~v15 != v18)
            {
              ++v18;
              if (v10 != v15)
                continue;
            }
            v10 -= v15;
            v20 = v15 + v19;
            goto LABEL_22;
          }
          v10 -= v15;
          v20 = v15 + v18;
LABEL_22:
          v9 = -(uint64_t)v20;
          if (!v9)
            break;
        }
      }
      while (v10);
    }
  }
LABEL_26:
  *a5 = a2 - v9;
  *a6 = a4 - v10;
  return result;
}

uint64_t UTF32Swp_to_UTF16Swp(uint64_t result, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v8;
  unint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v22;

  v8 = a2;
  v9 = a4;
  if (a2)
  {
    v8 = a2;
    v9 = a4;
    if (a4)
    {
      v11 = (unsigned int *)result;
      v12 = swap32to16Offset;
      v9 = a4;
      v8 = a2;
      do
      {
        v13 = 0;
        v14 = 0;
        if (v8 >= v9)
          v15 = v9;
        else
          v15 = v8;
        while (!(bswap32(*v11) >> 16))
        {
          a3[v14++] = *((_WORD *)v11++ + v12);
          v13 += 2;
          if (v15 == v14)
          {
            a3 = (unsigned __int16 *)((char *)a3 + v13);
            v14 = v15;
            goto LABEL_11;
          }
        }
        a3 = (unsigned __int16 *)((char *)a3 + v13);
LABEL_11:
        v16 = v8 - v14;
        if (v8 == v14 || v9 == v14)
        {
          v8 -= v14;
          v9 -= v14;
          if (!v16)
            break;
        }
        else
        {
          v17 = -(uint64_t)v8;
          while (1)
          {
            v22 = 0;
            result = bswap32(*v11);
            if (!WORD1(result))
              break;
            result = CodePoint_to_UTF16Swp_Surrogate(result, a3, v9 - v14, &v22);
            if (!v22)
            {
              v9 -= v14;
              v8 = -(uint64_t)(v14 + v17);
              goto LABEL_26;
            }
            ++v11;
            v9 -= 2;
            a3 += 2;
            v18 = v17 + 1;
            if (~v14 != v17)
            {
              ++v17;
              if (v9 != v14)
                continue;
            }
            v9 -= v14;
            v19 = v14 + v18;
            goto LABEL_22;
          }
          v9 -= v14;
          v19 = v14 + v17;
LABEL_22:
          v8 = -(uint64_t)v19;
          if (!v8)
            break;
        }
      }
      while (v9);
    }
  }
LABEL_26:
  *a5 = a2 - v8;
  *a6 = a4 - v9;
  return result;
}

void ToUTF16(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  void (*v10)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *);
  _QWORD *exception;
  uint64_t v12;
  uint64_t v13;
  std::string::value_type __s[16384];
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v15 = *MEMORY[0x1E0C80C00];
  v8 = &UTF8_to_UTF16LE;
  if (v9)
    v8 = &UTF8_to_UTF16BE;
  v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 2 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    v12 = 0;
    v13 = 0;
    do
    {
      v10(v7, v5, __s, 0x2000, &v13, &v12);
      if (!v12)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((_BYTE *)exception + 16) = 0;
      }
      std::string::append(v3, __s, 2 * v12);
      v7 += v13;
      v5 -= v13;
    }
    while (v5);
  }
}

void ToUTF32(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  void (*v10)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *);
  _QWORD *exception;
  uint64_t v12;
  uint64_t v13;
  std::string::value_type __s[16384];
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v15 = *MEMORY[0x1E0C80C00];
  v8 = &UTF8_to_UTF32LE;
  if (v9)
    v8 = &UTF8_to_UTF32BE;
  v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, uint64_t *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 4 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    v12 = 0;
    v13 = 0;
    do
    {
      v10(v7, v5, __s, 4096, &v13, &v12);
      if (!v12)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((_BYTE *)exception + 16) = 0;
      }
      std::string::append(v3, __s, 4 * v12);
      v7 += v13;
      v5 -= v13;
    }
    while (v5);
  }
}

void FromUTF16(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  void (*v10)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *);
  _QWORD *exception;
  std::string::size_type __n;
  uint64_t v13;
  std::string::value_type __s[16384];
  uint64_t v15;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v15 = *MEMORY[0x1E0C80C00];
  v8 = &UTF16LE_to_UTF8;
  if (v9)
    v8 = &UTF16BE_to_UTF8;
  v10 = (void (*)(uint64_t, uint64_t, std::string::value_type *, uint64_t, uint64_t *, std::string::size_type *))*v8;
  std::string::erase(v2, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(v3, 2 * v5);
  if (v5)
  {
    bzero(__s, 0x4000uLL);
    __n = 0;
    v13 = 0;
    do
    {
      v10(v7, v5, __s, 0x4000, &v13, &__n);
      if (!__n)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 205;
        exception[1] = "Incomplete Unicode at end of string";
        *((_BYTE *)exception + 16) = 0;
      }
      std::string::append(v3, __s, __n);
      v7 += 2 * v13;
      v5 -= v13;
    }
    while (v5);
  }
}

uint64_t CodePoint_to_UTF8_Multi(uint64_t result, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  _QWORD *exception;
  const char *v10;

  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v10 = "Bad UTF-32 - out of range";
    goto LABEL_16;
  }
  if (result >> 11 == 27)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v10 = "Bad UTF-32 - surrogate code point";
LABEL_16:
    exception[1] = v10;
    *((_BYTE *)exception + 16) = 0;
  }
  v4 = 0;
  if ((_DWORD)result)
  {
    v5 = result;
    do
    {
      ++v4;
      v6 = v5 >= 0x3F;
      v7 = v5 == 63;
      v5 >>= 6;
    }
    while (!v7 && v6);
  }
  if (result >> (6 * v4 - 6) > (0x80u >> v4) - 1)
    ++v4;
  if (v4 <= a3)
  {
    v8 = v4 - 1;
    if (v4 != 1)
    {
      do
      {
        a2[v8] = result & 0x3F | 0x80;
        result = result >> 6;
        --v8;
      }
      while (v8);
    }
    *a2 = result | (-1 << (8 - v4));
  }
  else
  {
    v4 = 0;
  }
  *a4 = v4;
  return result;
}

_BYTE *CodePoint_from_UTF8_Multi(_BYTE *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  _QWORD *exception;
  const char *v11;

  if (((char)*result & 0x80000000) == 0)
    goto LABEL_17;
  v4 = 0;
  LOBYTE(v5) = *result;
  do
  {
    ++v4;
    v5 = 2 * (v5 & 0x7F);
  }
  while (v5 > 0x7F);
  if (v4 - 5 < 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_17:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v11 = "Invalid UTF-8 sequence length";
    goto LABEL_16;
  }
  if (v4 <= a2)
  {
    v6 = *result & ~(-1 << (7 - v4));
    v7 = 1;
    do
    {
      v8 = result[v7];
      if ((v8 & 0xC0) != 0x80)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        v11 = "Invalid UTF-8 data byte";
        goto LABEL_16;
      }
      v9 = v8 & 0x3F | (v6 << 6);
      ++v7;
      v6 = v9;
    }
    while (v4 != v7);
    if (v9 >> 11 < 0x1B)
      goto LABEL_13;
    if (v9 >> 13 <= 6)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v11 = "Bad UTF-8 - surrogate code point";
    }
    else
    {
      if (v9 < 0x110000)
      {
LABEL_13:
        *a3 = v9;
        goto LABEL_14;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v11 = "Bad UTF-8 - out of range";
    }
LABEL_16:
    exception[1] = v11;
    *((_BYTE *)exception + 16) = 0;
  }
  v4 = 0;
LABEL_14:
  *a4 = v4;
  return result;
}

uint64_t CodePoint_to_UTF16Nat_Surrogate(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  _QWORD *exception;

  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Bad UTF-32 - out of range";
    *((_BYTE *)exception + 16) = 0;
  }
  if (a3 >= 2)
  {
    *a2 = ((result + 16711680) >> 10) | 0xD800;
    a2[1] = result & 0x3FF | 0xDC00;
    v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Nat_Surrogate(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  unsigned __int16 v6;
  _QWORD *exception;
  const char *v8;

  v4 = *result;
  if (v4 >> 10 >= 0x37)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v8 = "Bad UTF-16 - leading low surrogate";
    goto LABEL_9;
  }
  if (a2 >= 2)
  {
    v6 = result[1];
    if ((unsigned __int16)((unsigned __int16)(v6 + 0x2000) >> 10) > 0x3Eu)
    {
      *a3 = (v6 & 0x3FF | ((v4 & 0x3FF) << 10)) + 0x10000;
      v5 = 2;
      goto LABEL_6;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v8 = "Bad UTF-16 - missing low surrogate";
LABEL_9:
    exception[1] = v8;
    *((_BYTE *)exception + 16) = 0;
  }
  v5 = 0;
LABEL_6:
  *a4 = v5;
  return result;
}

uint64_t CodePoint_to_UTF16Swp_Surrogate(uint64_t result, unsigned __int16 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4;
  _QWORD *exception;

  if (result >= 0x110000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Bad UTF-32 - out of range";
    *((_BYTE *)exception + 16) = 0;
  }
  if (a3 >= 2)
  {
    *a2 = bswap32(((result + 16711680) >> 10) | 0xD800) >> 16;
    a2[1] = __rev16(result & 0x3FF | 0xDC00);
    v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  *a4 = v4;
  return result;
}

unsigned __int16 *CodePoint_from_UTF16Swp_Surrogate(unsigned __int16 *result, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *exception;
  const char *v8;

  v4 = bswap32(*result);
  if (v4 >> 26 >= 0x37)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v8 = "Bad UTF-16 - leading low surrogate";
    goto LABEL_9;
  }
  if (a2 >= 2)
  {
    v6 = bswap32(result[1]) >> 16;
    if ((unsigned __int16)((unsigned __int16)(v6 + 0x2000) >> 10) > 0x3Eu)
    {
      *a3 = (v6 & 0x3FF | ((HIWORD(v4) & 0x3FF) << 10)) + 0x10000;
      v5 = 2;
      goto LABEL_6;
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v8 = "Bad UTF-16 - missing low surrogate";
LABEL_9:
    exception[1] = v8;
    *((_BYTE *)exception + 16) = 0;
  }
  v5 = 0;
LABEL_6:
  *a4 = v5;
  return result;
}

uint64_t WXMPMeta_RegisterNamespace_1(XMPMeta *a1, char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD), unsigned int *a5)
{
  uint64_t result;
  const char *v9;
  _QWORD *exception;
  _BYTE v11[12];

  *(_QWORD *)a5 = 0;
  if (!a1 || !*(_BYTE *)a1)
  {
    v9 = "Empty namespace URI";
    goto LABEL_10;
  }
  if (!a2 || !*a2)
  {
    v9 = "Empty suggested prefix";
LABEL_10:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  memset(v11, 0, sizeof(v11));
  result = XMPMeta::RegisterNamespace(a1, a2, (const char **)&v11[4], (const char **)v11, a5);
  a5[8] = result;
  if (a3)
    return a4(a3, *(_QWORD *)&v11[4], *(unsigned int *)v11);
  return result;
}

void sub_1880C3CD8(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      v8 = "Caught unknown exception";
    }
    *(_QWORD *)v2 = v8;
  }
  __cxa_end_catch();
  JUMPOUT(0x1880C3C84);
}

void WXMPMeta_GetProperty_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD), uint64_t a7)
{
  uint64_t *v14;
  int v15;
  char v16;
  _QWORD *exception;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  XMP_ReadWriteLock *v21;

  v21 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a7 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v18 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v18 = "Empty property name";
LABEL_15:
    exception[1] = v18;
    *((_BYTE *)exception + 16) = 0;
  }
  v19 = 0;
  v20 = 0;
  if (a5)
    v14 = a5;
  else
    v14 = &v19;
  v15 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *, char *, uint64_t *))(*(_QWORD *)a1 + 16))(a1, a2, a3, &v20, (char *)&v19 + 4, v14);
  v16 = v15 ^ 1;
  *(_DWORD *)(a7 + 32) = v15;
  if (!a4)
    v16 = 1;
  if ((v16 & 1) == 0)
    a6(a4, v20, HIDWORD(v19));
  XMP_AutoLock::~XMP_AutoLock(&v21);
}

void sub_1880C3E94(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(_QWORD *)(v2 + 8) = "XMP";
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880C3E20);
    }
    *(_DWORD *)(v2 + 32) = 13;
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
    v5 = "";
    if (v7)
      v5 = (const char *)v7;
  }
  *(_QWORD *)v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880C3F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetArrayItem_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (*a7)(uint64_t, uint64_t, _QWORD), uint64_t a8)
{
  uint64_t *v16;
  int v17;
  char v18;
  _QWORD *exception;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  XMP_ReadWriteLock *v23;

  v23 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v20 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v20 = "Empty array name";
LABEL_15:
    exception[1] = v20;
    *((_BYTE *)exception + 16) = 0;
  }
  v21 = 0;
  v22 = 0;
  if (a6)
    v16 = a6;
  else
    v16 = &v21;
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t *, char *, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, &v22, (char *)&v21 + 4, v16);
  v18 = v17 ^ 1;
  *(_DWORD *)(a8 + 32) = v17;
  if (!a5)
    v18 = 1;
  if ((v18 & 1) == 0)
    a7(a5, v22, HIDWORD(v21));
  XMP_AutoLock::~XMP_AutoLock(&v23);
}

void sub_1880C4084(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(_QWORD *)(v2 + 8) = "XMP";
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880C4010);
    }
    *(_DWORD *)(v2 + 32) = 13;
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
    v5 = "";
    if (v7)
      v5 = (const char *)v7;
  }
  *(_QWORD *)v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880C4124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetProperty_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *exception;
  const char *v13;
  XMP_ReadWriteLock *v14;

  v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_AppendArrayItem_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *exception;
  const char *v15;
  XMP_ReadWriteLock *v16;

  v16 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a7 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v15 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v15 = "Empty array name";
LABEL_8:
    exception[1] = v15;
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3, a4, a5, a6);
  XMP_AutoLock::~XMP_AutoLock(&v16);
}

void WXMPMeta_SetStructField_1(uint64_t a1, char *a2, char *a3, char *a4, char *a5, const char *a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *exception;
  const char *v17;
  XMP_ReadWriteLock *v18;

  v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v17 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v17 = "Empty struct name";
    goto LABEL_14;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v17 = "Empty field namespace URI";
    goto LABEL_14;
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v17 = "Empty field name";
LABEL_14:
    exception[1] = v17;
    *((_BYTE *)exception + 16) = 0;
  }
  XMPMeta::SetStructField((XMPMeta *)a1, a2, a3, a4, a5, a6, a7);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void WXMPMeta_SetQualifier_1(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *exception;
  const char *v17;
  XMP_ReadWriteLock *v18;

  v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v17 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v17 = "Empty property name";
    goto LABEL_14;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v17 = "Empty qualifier namespace URI";
    goto LABEL_14;
  }
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v17 = "Empty qualifier name";
LABEL_14:
    exception[1] = v17;
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, a5, a6, a7);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void WXMPMeta_DeleteProperty_1(uint64_t a1, _BYTE *a2, _BYTE *a3, _QWORD *a4)
{
  _QWORD *exception;
  const char *v9;
  XMP_ReadWriteLock *v10;

  v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v9 = "Empty property name";
LABEL_8:
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void WXMPMeta_DoesPropertyExist_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *exception;
  const char *v9;
  XMP_ReadWriteLock *v10;

  v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v9 = "Empty property name";
LABEL_8:
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  *(_DWORD *)(a4 + 32) = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 112))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void sub_1880C4AF8(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
      *(_QWORD *)v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1880C4A8CLL);
}

void sub_1880C4B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetLocalizedText_1(uint64_t a1, _BYTE *a2, _BYTE *a3, const char *a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t *a8, void (*a9)(uint64_t, uint64_t, _QWORD), uint64_t a10)
{
  const char *v18;
  uint64_t *v19;
  int v20;
  _QWORD *exception;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  XMP_ReadWriteLock *v27;

  v27 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a10 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v22 = "Empty schema namespace URI";
    goto LABEL_21;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v22 = "Empty array name";
    goto LABEL_21;
  }
  if (a4)
    v18 = a4;
  else
    v18 = "";
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v22 = "Empty specific language";
LABEL_21:
    exception[1] = v22;
    *((_BYTE *)exception + 16) = 0;
  }
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v19 = &v23;
  if (a8)
    v19 = a8;
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, const char *, _BYTE *, uint64_t *, unsigned int *, uint64_t *, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a3, v18, a5, &v26, &v25, &v24, (char *)&v23 + 4, v19);
  *(_DWORD *)(a10 + 32) = v20;
  if (v20)
  {
    if (a6)
      a9(a6, v26, v25);
    if (a7)
      a9(a7, v24, HIDWORD(v23));
  }
  XMP_AutoLock::~XMP_AutoLock(&v27);
}

void sub_1880C4D4C(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(_QWORD *)(v2 + 8) = "XMP";
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880C4CB8);
    }
    *(_DWORD *)(v2 + 32) = 13;
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
    v5 = "";
    if (v7)
      v5 = (const char *)v7;
  }
  *(_QWORD *)v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880C4DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetLocalizedText_1(uint64_t a1, _BYTE *a2, _BYTE *a3, const char *a4, _BYTE *a5, const char *a6, uint64_t a7, _QWORD *a8)
{
  const char *v16;
  const char *v17;
  _QWORD *exception;
  const char *v19;
  XMP_ReadWriteLock *v20;

  v20 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a8 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v19 = "Empty schema namespace URI";
    goto LABEL_17;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v19 = "Empty array name";
    goto LABEL_17;
  }
  if (a4)
    v16 = a4;
  else
    v16 = "";
  if (!a5 || !*a5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v19 = "Empty specific language";
LABEL_17:
    exception[1] = v19;
    *((_BYTE *)exception + 16) = 0;
  }
  if (a6)
    v17 = a6;
  else
    v17 = "";
  (*(void (**)(uint64_t, _BYTE *, _BYTE *, const char *, _BYTE *, const char *, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2, a3, v16, a5, v17, a7);
  XMP_AutoLock::~XMP_AutoLock(&v20);
}

void WXMPMeta_GetProperty_Bool_1(uint64_t a1, const char *a2, const char *a3, BOOL *a4, unsigned int *a5, uint64_t a6)
{
  unsigned int *v12;
  int Property_Bool;
  _QWORD *exception;
  const char *v15;
  BOOL v16;
  int v17;
  XMP_ReadWriteLock *v18;

  v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v15 = "Empty schema namespace URI";
    goto LABEL_13;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v15 = "Empty property name";
LABEL_13:
    exception[1] = v15;
    *((_BYTE *)exception + 16) = 0;
  }
  v17 = 0;
  if (a5)
    v12 = a5;
  else
    v12 = (unsigned int *)&v17;
  v16 = 0;
  Property_Bool = XMPMeta::GetProperty_Bool((XMPMeta *)a1, a2, a3, &v16, v12);
  if (a4)
    *a4 = v16;
  *(_DWORD *)(a6 + 32) = Property_Bool;
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void sub_1880C50FC(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
      *(_QWORD *)v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1880C508CLL);
}

void sub_1880C5198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetProperty_Int_1(uint64_t a1, const char *a2, const char *a3, int *a4, unsigned int *a5, uint64_t a6)
{
  int *v12;
  unsigned int *v13;
  _QWORD *exception;
  const char *v15;
  uint64_t v16;
  XMP_ReadWriteLock *v17;

  v17 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v15 = "Empty schema namespace URI";
    goto LABEL_14;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v15 = "Empty property name";
LABEL_14:
    exception[1] = v15;
    *((_BYTE *)exception + 16) = 0;
  }
  v16 = 0;
  if (a4)
    v12 = a4;
  else
    v12 = (int *)&v16 + 1;
  if (a5)
    v13 = a5;
  else
    v13 = (unsigned int *)&v16;
  *(_DWORD *)(a6 + 32) = XMPMeta::GetProperty_Int((XMPMeta *)a1, a2, a3, v12, v13);
  XMP_AutoLock::~XMP_AutoLock(&v17);
}

void sub_1880C52B0(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    *(_QWORD *)(v2 + 8) = "XMP";
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880C5240);
    }
    *(_DWORD *)(v2 + 32) = 13;
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
    v5 = "";
    if (v7)
      v5 = (const char *)v7;
  }
  *(_QWORD *)v2 = v5;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880C5350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_GetProperty_Date_1(uint64_t a1, _BYTE *a2, _BYTE *a3, __int128 *a4, int *a5, uint64_t a6)
{
  unsigned __int8 v12;
  __int128 *v13;
  int *v14;
  _QWORD *exception;
  const char *v16;
  int v17;
  XMP_ReadWriteLock *v18;

  v18 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v16 = "Empty schema namespace URI";
    goto LABEL_15;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v16 = "Empty property name";
LABEL_15:
    exception[1] = v16;
    *((_BYTE *)exception + 16) = 0;
  }
  {
    qword_1EDF03FC8 = 0;
    WXMPMeta_GetProperty_Date_1::voidDateTime = 0u;
    unk_1EDF03FB8 = 0u;
  }
  v17 = 0;
  if (a4)
    v13 = a4;
  else
    v13 = &WXMPMeta_GetProperty_Date_1::voidDateTime;
  if (a5)
    v14 = a5;
  else
    v14 = &v17;
  *(_DWORD *)(a6 + 32) = XMPMeta::GetProperty_Date(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13, (uint64_t)v14);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void sub_1880C54B8(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
      *(_QWORD *)v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1880C540CLL);
}

void sub_1880C5554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SetProperty_Bool_1(uint64_t a1, const char *a2, const char *a3, int a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *exception;
  const char *v12;

  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (a2 && *a2)
  {
    if (a3)
    {
      if (*a3)
        XMPMeta::SetProperty_Bool((XMPMeta *)a1, a2, a3, a4 != 0);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v12 = "Empty property name";
  }
  else
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v12 = "Empty schema namespace URI";
  }
  exception[1] = v12;
  *((_BYTE *)exception + 16) = 0;
}

void WXMPMeta_SetProperty_Int_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *exception;
  const char *v13;
  XMP_ReadWriteLock *v14;

  v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Int((XMPMeta *)a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Int64_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *exception;
  const char *v13;
  XMP_ReadWriteLock *v14;

  v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Int64((XMPMeta *)a1, a2, a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Float_1(uint64_t a1, const char *a2, const char *a3, uint64_t a4, _QWORD *a5, double a6)
{
  _QWORD *exception;
  const char *v13;
  XMP_ReadWriteLock *v14;

  v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a5 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Float((XMPMeta *)a1, a2, a3, a6, a4);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_SetProperty_Date_1(uint64_t a1, _BYTE *a2, _BYTE *a3, __int128 *a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *exception;
  const char *v13;
  XMP_ReadWriteLock *v14;

  v14 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a6 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v13 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v13 = "Empty property name";
LABEL_8:
    exception[1] = v13;
    *((_BYTE *)exception + 16) = 0;
  }
  XMPMeta::SetProperty_Date(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
  XMP_AutoLock::~XMP_AutoLock(&v14);
}

void WXMPMeta_Clone_1(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  XMPMeta2 *v6;
  XMP_ReadWriteLock *v7;

  v7 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *a3 = 0;
  if (sUseNewCoreAPIs)
  {
    v6 = (XMPMeta2 *)operator new();
    XMPMeta2::XMPMeta2(v6);
  }
  else
  {
    v6 = (XMPMeta2 *)operator new();
    XMPMeta::XMPMeta(v6);
  }
  (*(void (**)(uint64_t, XMPMeta2 *, uint64_t))(*(_QWORD *)a1 + 176))(a1, v6, a2);
  if (*((_DWORD *)v6 + 2))
    __assert_rtn("WXMPMeta_Clone_1", "WXMPMeta.cpp", 1074, "xClone->clientRefs == 0");
  a3[1] = v6;
  XMP_AutoLock::~XMP_AutoLock(&v7);
}

void sub_1880C5E68(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;

  MEMORY[0x18D761C30](v3, 0x10B3C4030275F38);
  if (a2 == 3)
  {
    v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v6;
    v7 = (const char *)*((_QWORD *)v6 + 1);
    if (!v7)
      v7 = "";
    *(_QWORD *)v2 = v7;
    *(_QWORD *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 16))(v8);
      v10 = "";
      if (v9)
        v10 = (const char *)v9;
      *(_QWORD *)v2 = v10;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1880C5E24);
}

void sub_1880C5FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_CountArrayItems_1(uint64_t a1, _BYTE *a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *exception;
  const char *v9;
  XMP_ReadWriteLock *v10;

  v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *(_QWORD *)a4 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v9 = "Empty schema namespace URI";
    goto LABEL_8;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v9 = "Empty array name";
LABEL_8:
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  *(_DWORD *)(a4 + 32) = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a1 + 184))(a1, a2, a3);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void sub_1880C60AC(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
    __cxa_end_catch();
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
      *(_QWORD *)v2 = v8;
      __cxa_end_catch();
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      *(_QWORD *)v2 = "Caught unknown exception";
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1880C6040);
}

void sub_1880C6148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPMeta_SerializeToBuffer_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, void (*a8)(uint64_t, void *, uint64_t), _QWORD *a9)
{
  const char *v17;
  const char *v18;
  void *p_p;
  uint64_t v20;
  void *__p;
  uint64_t v22;
  uint64_t v23;
  XMP_ReadWriteLock *v24;

  v24 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 0);
  *a9 = 0;
  if (a5)
    v17 = a5;
  else
    v17 = "";
  if (a6)
    v18 = a6;
  else
    v18 = "";
  __p = 0;
  v22 = 0;
  v23 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, const char *, const char *, uint64_t))(*(_QWORD *)a1 + 208))(a1, &__p, a3, a4, v17, v18, a7);
  if (a2)
  {
    if (v23 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v23 >= 0)
      v20 = HIBYTE(v23);
    else
      v20 = v22;
    a8(a2, p_p, v20);
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
  XMP_AutoLock::~XMP_AutoLock(&v24);
}

void sub_1880C6260(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  if (a2 == 3)
  {
    v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v14 + 32) = *(_DWORD *)v18;
    *(_QWORD *)(v14 + 8) = "XMP";
    v19 = v18[1];
    if (!v19)
      v19 = v15;
  }
  else
  {
    v20 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v14 + 32) = 14;
      *(_QWORD *)v14 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_12:
      JUMPOUT(0x1880C6238);
    }
    *(_DWORD *)(v14 + 32) = 13;
    v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    if (v21)
      v19 = v21;
    else
      v19 = v15;
  }
  *(_QWORD *)v14 = v19;
  __cxa_end_catch();
  goto LABEL_12;
}

void sub_1880C6304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_5()
{
  __cxa_end_catch();
}

void WXMPMeta_Initialize_1_cold_1(void *a1, uint64_t a2)
{
  void *v3;
  const char *v4;

  v3 = __cxa_begin_catch(a1);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)v3;
  v4 = (const char *)*((_QWORD *)v3 + 1);
  if (!v4)
    v4 = "";
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = "XMP";
  OUTLINED_FUNCTION_0_5();
}

AdobeXMPCore_Int::NodeImpl *AdobeXMPCore_Int::NodeImpl::NodeImpl(AdobeXMPCore_Int::NodeImpl *this, const char *a2, AdobeXMPCore_Int::IUTF8String_I *a3, const char *a4, AdobeXMPCore_Int::IUTF8String_I *a5, const char *a6)
{
  uint64_t v11;

  v11 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v11 - 664)) = *((_QWORD *)a2 + 1);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = *((_QWORD *)a2 + 4);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = *((_QWORD *)a2 + 5);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 552)) = *((_QWORD *)a2 + 6);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 560)) = *((_QWORD *)a2 + 7);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672)) = *((_QWORD *)a2 + 8);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = *((_QWORD *)a2 + 9);
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a3, a4, (uint64_t *)this + 1);
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a5, a6, (uint64_t *)this + 3);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 81) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  AdobeXMPCore_Int::VerifyNameSpace(a3, a4);
  AdobeXMPCore_Int::VerifyName((uint64_t)a5, a6);
  return this;
}

void sub_1880C64C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_BYTE *AdobeXMPCore_Int::VerifyNameSpace(_BYTE *this, const char *a2)
{
  _BYTE *v2;
  AdobeXMPCore_Int::IErrorNotifier_I *v3;
  char *v4;
  unint64_t *v5;
  unint64_t v6;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v9;
  char *v10;
  uint64_t v11;
  const char *v12;

  v12 = a2;
  if (!this || !a2 || a2 == (const char *)-1 && !*this)
  {
    v10 = 0;
    v11 = 0;
    v2 = this;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v10);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)] + 120))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 35);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)] + 112))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], "nameSpace can't be null or empty", -1);
    (*(void (**)(char *, _BYTE *))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)] + 136))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], v2);
    v3 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)]
                                                                                                + 152))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], &v12);
    if (v2)
      v3 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, _BYTE *, uint64_t))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)] + 128))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], v2, -1);
    if (v10)
      v4 = &v10[*(_QWORD *)(*(_QWORD *)v10 - 304)];
    else
      v4 = 0;
    *(_QWORD *)&v9 = v4;
    *((_QWORD *)&v9 + 1) = v11;
    if (v11)
    {
      v5 = (unint64_t *)(v11 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v3);
    (**ErrorNotifier)(ErrorNotifier, &v9);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v9;
    v9 = 0uLL;
  }
  return this;
}

void sub_1880C669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::VerifyName(uint64_t this, const char *a2)
{
  char *v2;
  const char *v3;
  int v4;
  char *v5;
  _QWORD *v6;
  const char *v7;
  const char *v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  BOOL v15;
  AdobeXMPCore_Int::IErrorNotifier_I *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v22;
  char *v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unsigned int v27;

  v2 = (char *)this;
  v25 = a2;
  if (!this)
    goto LABEL_64;
  v3 = a2;
  if (!a2)
    goto LABEL_64;
  if (a2 == (const char *)-1)
  {
    if (*(_BYTE *)this)
    {
      this = strlen((const char *)this);
      v3 = (const char *)this;
      v25 = (const char *)this;
      goto LABEL_6;
    }
LABEL_64:
    v23 = 0;
    v24 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v23);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)] + 120))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 45);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)] + 112))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], "name can't be null or empty", -1);
    (*(void (**)(char *, char *))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)] + 136))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], v2);
    v16 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)]
                                                                                                 + 152))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], &v25);
    if (v2)
      v16 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)] + 128))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], v2, -1);
    if (v23)
      v17 = &v23[*(_QWORD *)(*(_QWORD *)v23 - 304)];
    else
      v17 = 0;
    *(_QWORD *)&v22 = v17;
    *((_QWORD *)&v22 + 1) = v24;
    if (v24)
    {
      v18 = (unint64_t *)(v24 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v16);
    (**ErrorNotifier)(ErrorNotifier, &v22);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v22;
    v22 = 0uLL;
  }
LABEL_6:
  if (v3 != (const char *)2)
  {
    this = strncmp(v2, "[]", 2uLL);
    if ((_DWORD)this)
    {
      if ((uint64_t)v3 <= 0)
      {
        v6 = __cxa_allocate_exception(0x18uLL);
        v7 = "Empty XML name";
LABEL_74:
        *(_DWORD *)v6 = 102;
        v6[1] = v7;
        *((_BYTE *)v6 + 16) = 0;
      }
      if (*v2 < 0)
      {
        v27 = 0;
        v26 = 0;
        this = (uint64_t)CodePoint_from_UTF8(v2, 4uLL, &v27, &v26);
        v5 = &v2[v26];
        if (v27 - 192 >= 0x17
          && v27 - 216 >= 0x1F
          && v27 - 248 >= 0x208
          && v27 - 880 >= 0xE
          && v27 - 895 >= 0x1C81
          && (v27 & 0xFFFFFFFE) != 0x200C
          && v27 - 8304 >= 0x120
          && v27 - 11264 >= 0x3F0
          && v27 - 12289 >= 0xA7FF
          && v27 - 63744 >= 0x4D0
          && v27 - 65008 >= 0x20E
          && (v27 - 0x10000) >> 17 > 6)
        {
          goto LABEL_13;
        }
      }
      else
      {
        v4 = *v2;
        v5 = v2 + 1;
        if ((v4 - 97) >= 0x1A && v4 != 95 && (v4 - 65) >= 0x1A)
        {
LABEL_13:
          v6 = __cxa_allocate_exception(0x18uLL);
          v7 = "Bad XML name";
          goto LABEL_74;
        }
      }
      v8 = &v3[(_QWORD)v2];
      while (v5 < v8)
      {
        if (*v5 < 0)
        {
          v27 = 0;
          v26 = 0;
          this = (uint64_t)CodePoint_from_UTF8(v5, 4uLL, &v27, &v26);
          v5 += v26;
          if (v27 - 192 >= 0x17 && v27 - 216 >= 0x1F)
          {
            v15 = v27 - 248 >= 0x208 && v27 - 880 >= 0xE;
            if (v15
              && v27 - 895 >= 0x1C81
              && (v27 & 0xFFFFFFFE) != 0x200C
              && v27 - 8304 >= 0x120
              && v27 - 11264 >= 0x3F0
              && v27 - 12289 >= 0xA7FF
              && v27 - 63744 >= 0x4D0
              && v27 - 768 >= 0x70
              && v27 - 65008 >= 0x20E
              && v27 - 0x10000 >= 0xE0000
              && v27 - 8255 >= 2
              && v27 != 183)
            {
              goto LABEL_13;
            }
          }
        }
        else
        {
          v9 = *v5++;
          if ((v9 - 97) >= 0x1A && v9 != 95 && (v9 - 65) >= 0x1A)
          {
            v11 = v9 - 48;
            v12 = v9 - 45;
            if (v11 >= 0xA && v12 >= 2)
              goto LABEL_13;
          }
        }
      }
    }
  }
  return this;
}

void sub_1880C6B60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, char *a11, uint64_t a12)
{
  uint64_t v12;
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;

  __cxa_begin_catch(a1);
  a11 = 0;
  a12 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(100, 102, 2, &a11);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)] + 120))(&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 55);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)] + 112))(&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)], "name is not a valid XML Name", -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)]
                                                                                                  + 128))(&a11[*(_QWORD *)(*(_QWORD *)a11 - 304)], v12, -1);
  if (a11)
    v14 = &a11[*(_QWORD *)(*(_QWORD *)a11 - 304)];
  else
    v14 = 0;
  *(_QWORD *)&a9 = v14;
  *((_QWORD *)&a9 + 1) = a12;
  if (a12)
  {
    v15 = (unint64_t *)(a12 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
  (**ErrorNotifier)(ErrorNotifier, &a9);
  exception = __cxa_allocate_exception(0x10uLL);
  *exception = a9;
  a9 = 0uLL;
}

void sub_1880C6C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  __cxa_end_catch();
  JUMPOUT(0x1880C6CB8);
}

void AdobeXMPCore_Int::NodeImpl::ChangeParent(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore::INode_v1 *a2)
{
  AdobeXMPCore::INode_v1 *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];

  memset(v12, 0, sizeof(v12));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  v4 = (AdobeXMPCore::INode_v1 *)*((_QWORD *)this + 7);
  if (!v4)
  {
    v7 = atomic_load((unint64_t *)this + 11);
    if (v7 >= 2)
    {
      v8 = *((_QWORD *)this + 6);
      if (v8)
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 280))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 576))(v9);
      }
      if (!a2)
        goto LABEL_12;
      v10 = (*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(_QWORD *)a2 + 280))(a2);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 560))(v10);
LABEL_11:
      v11 = (*(uint64_t (**)(AdobeXMPCore::INode_v1 *))(*(_QWORD *)a2 + 280))(a2);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 560))(v11);
      goto LABEL_12;
    }
LABEL_10:
    if (!a2)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v4 == a2)
    goto LABEL_14;
  std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 7);
  v5 = atomic_load((unint64_t *)this + 11);
  if (v5 >= 2)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 280))(*((_QWORD *)this + 6));
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 576))(v6);
    goto LABEL_10;
  }
LABEL_12:
  *((_QWORD *)this + 6) = a2;
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  if (!*((_QWORD *)this + 6))
  {
    *((_BYTE *)this + 96) = 0;
    *((_QWORD *)this + 5) = 0;
  }
LABEL_14:
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
}

void sub_1880C6DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(AdobeXMPCore_Int::NodeImpl *this, char a2)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v3 = (char *)this + 56;
  v2 = *((_QWORD *)this + 7);
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
      v4 = atomic_load((unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672) + 8));
      if (v4 <= 2)
        std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 7);
    }
  }
  else if (!v2)
  {
    v5 = atomic_load((unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672) + 8));
    if (v5 >= 2)
    {
      v6 = (char *)*((_QWORD *)this + 6);
      if (v6)
      {
        AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore::INode_v1>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 346, 1, &v10);
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v3, &v10);
        v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }
  }
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetRawParentPointer(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v2 = *((_QWORD *)this + 6);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void AdobeXMPCore_Int::NodeImpl::GetParent(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v4 = (char *)*((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(_QWORD *)v4;
    if (*((_BYTE *)this + 96))
    {
      v6 = (*(uint64_t (**)(_QWORD))(v5 + 280))(*((_QWORD *)this + 6));
      v4 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 528))(v6);
      v5 = *(_QWORD *)v4;
    }
    (**(void (***)(char *))&v4[*(_QWORD *)(v5 - 56)])(&v4[*(_QWORD *)(v5 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4, 8, 1);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void sub_1880C7074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore::INode_v1>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 56)]);
  return std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880C7180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetParent(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::GetParent((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void AdobeXMPCore_Int::NodeImpl::SetName(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  AdobeXMPCore_Int::AutoSharedLock *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  AdobeXMPCore_Int::IErrorNotifier_I *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  _BYTE v60[24];
  _BYTE v61[24];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  AdobeXMPCore_Int::VerifyName((uint64_t)a2, a3);
  v69 = 0;
  v70 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, &v69);
  v6 = *((_QWORD *)this + 3);
  v67 = v69;
  v68 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 208))(v67);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v6 + 168))(v6, 0, v9, &v67, 0, v10);
  v12 = v11;
  v13 = v68;
  if (!v68)
    goto LABEL_8;
  v14 = (unint64_t *)&v68->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12)
      goto LABEL_48;
  }
  else
  {
LABEL_8:
    if (!v11)
      goto LABEL_48;
  }
  v16 = *((_QWORD *)this + 6);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 280))(v16);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v67 = *((_QWORD *)this + 1);
    v68 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *((_QWORD *)this + 4);
    *(_QWORD *)&v66 = *((_QWORD *)this + 3);
    *((_QWORD *)&v66 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v64 = *((_QWORD *)this + 1);
    v65 = v24;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    v62 = v69;
    v63 = v70;
    if (v70)
    {
      v27 = (unint64_t *)&v70->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 568))(v17, &v67, &v66, &v64, &v62);
    v30 = v63;
    if (v63)
    {
      v31 = (unint64_t *)&v63->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v68;
    if (v68)
    {
      v40 = (unint64_t *)&v68->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (!v29)
    {
      v67 = 0;
      v68 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(100, 4, 2, &v67);
      (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304))
                                                             + 120))(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 148);
      (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304))
                                                             + 112))(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304), "One of the sibling have same name and nameSpace combination", -1);
      v46 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 128))(v46, v47, -1);
      v48 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 128))(v48, v49, -1);
      v50 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v51 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 128))(v50, v51, -1);
      v52 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 192))(v69);
      v54 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 128))(v52, v53, -1);
      if (v67)
        v55 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      else
        v55 = 0;
      *(_QWORD *)&v66 = v55;
      *((_QWORD *)&v66 + 1) = v68;
      if (v68)
      {
        v56 = (unint64_t *)&v68->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v54);
      (**ErrorNotifier)(ErrorNotifier, &v66);
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v66;
      v66 = 0uLL;
    }
    v42 = (AdobeXMPCore_Int::AutoSharedLock *)v61;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v61, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  }
  else
  {
    v42 = (AdobeXMPCore_Int::AutoSharedLock *)v60;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v60, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock(v42);
  std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100]((_QWORD *)this + 3, &v69);
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 560))(this);
LABEL_48:
  v43 = v70;
  if (v70)
  {
    v44 = (unint64_t *)&v70->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1880C76D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v11 - 64);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v11 - 48);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::SetName(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  AdobeXMPCore_Int::NodeImpl::SetName((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2, a3);
}

void AdobeXMPCore_Int::NodeImpl::GetName(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  if ((*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 160))(this))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 72))(*((_QWORD *)this + 6));
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
    v4 = *((_QWORD *)this + 4);
    *a2 = *((_QWORD *)this + 3);
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
  }
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetName(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::GetName((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), a2);
}

void AdobeXMPCore_Int::NodeImpl::SetNameSpace(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  AdobeXMPCore_Int::AutoSharedLock *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  AdobeXMPCore_Int::IErrorNotifier_I *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  _BYTE v60[24];
  _BYTE v61[24];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;

  AdobeXMPCore_Int::VerifyNameSpace(a2, a3);
  v69 = 0;
  v70 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, &v69);
  v6 = *((_QWORD *)this + 1);
  v67 = v69;
  v68 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 208))(v6);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 208))(v67);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v6 + 168))(v6, 0, v9, &v67, 0, v10);
  v12 = v11;
  v13 = v68;
  if (!v68)
    goto LABEL_8;
  v14 = (unint64_t *)&v68->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!v12)
      goto LABEL_48;
  }
  else
  {
LABEL_8:
    if (!v11)
      goto LABEL_48;
  }
  v16 = *((_QWORD *)this + 6);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 280))(v16);
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v67 = *((_QWORD *)this + 1);
    v68 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *((_QWORD *)this + 4);
    *(_QWORD *)&v66 = *((_QWORD *)this + 3);
    *((_QWORD *)&v66 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v64 = v69;
    v65 = v70;
    if (v70)
    {
      v24 = (unint64_t *)&v70->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
    v62 = *((_QWORD *)this + 3);
    v63 = v26;
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v29 = (*(uint64_t (**)(uint64_t, uint64_t *, __int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v17 + 568))(v17, &v67, &v66, &v64, &v62);
    v30 = v63;
    if (v63)
    {
      v31 = (unint64_t *)&v63->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = v65;
    if (v65)
    {
      v34 = (unint64_t *)&v65->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    if (*((_QWORD *)&v66 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = v68;
    if (v68)
    {
      v40 = (unint64_t *)&v68->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (!v29)
    {
      v67 = 0;
      v68 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(100, 4, 2, &v67);
      (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304))
                                                             + 120))(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NodeImpl.cpp", 177);
      (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304))
                                                             + 112))(v67 + *(_QWORD *)(*(_QWORD *)v67 - 304), "One of the sibling have same name and nameSpace combination", -1);
      v46 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v46 + 128))(v46, v47, -1);
      v48 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 128))(v48, v49, -1);
      v50 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 192))(v69);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50 + 128))(v50, v51, -1);
      v52 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      v53 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3));
      v54 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52 + 128))(v52, v53, -1);
      if (v67)
        v55 = v67 + *(_QWORD *)(*(_QWORD *)v67 - 304);
      else
        v55 = 0;
      *(_QWORD *)&v66 = v55;
      *((_QWORD *)&v66 + 1) = v68;
      if (v68)
      {
        v56 = (unint64_t *)&v68->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v54);
      (**ErrorNotifier)(ErrorNotifier, &v66);
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v66;
      v66 = 0uLL;
    }
    v42 = (AdobeXMPCore_Int::AutoSharedLock *)v61;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v61, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  }
  else
  {
    v42 = (AdobeXMPCore_Int::AutoSharedLock *)v60;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v60, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock(v42);
  std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100]((_QWORD *)this + 1, &v69);
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 560))(this);
LABEL_48:
  v43 = v70;
  if (v70)
  {
    v44 = (unint64_t *)&v70->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1880C7D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v11 - 64);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v11 - 48);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::SetNameSpace(AdobeXMPCore_Int::NodeImpl *this, AdobeXMPCore_Int *a2, char *a3)
{
  AdobeXMPCore_Int::NodeImpl::SetNameSpace((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), a2, a3);
}

void AdobeXMPCore_Int::NodeImpl::GetNameSpace(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  if ((*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 160))(this))
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 88))(*((_QWORD *)this + 6));
  }
  else
  {
    memset(v7, 0, sizeof(v7));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
    v4 = *((_QWORD *)this + 2);
    *a2 = *((_QWORD *)this + 1);
    a2[1] = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
  }
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetNameSpace(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::GetNameSpace((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), a2);
}

void AdobeXMPCore_Int::NodeImpl::GetPath(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *i;
  AdobeXMPCore_Int::IMemoryAllocator_I *v4;
  AdobeXMPCore_Int::IMemoryAllocator_I *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64x2_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  AdobeXMPCore_Int::IMemoryAllocator_I *Path;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  int64x2_t v49;
  unint64_t v50;
  uint64_t v51;
  int64x2_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;

  v49 = 0uLL;
  v50 = 0;
  for (i = (char *)this + *(_QWORD *)(*(_QWORD *)this - 544);
        i;
        i = (char *)(*(uint64_t (**)(AdobeXMPCore_Int::IMemoryAllocator_I *))(*(_QWORD *)v5 + 528))(v5))
  {
    v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(char *))(*(_QWORD *)i + 280))(i);
    v5 = v4;
    v6 = v49.i64[1];
    if (v49.i64[1] >= v50)
    {
      v8 = (v49.i64[1] - v49.i64[0]) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v9 = (uint64_t)(v50 - v49.i64[0]) >> 2;
      if (v9 <= v8 + 1)
        v9 = v8 + 1;
      if (v50 - v49.i64[0] >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v9;
      v54 = &v50;
      if (v10)
      {
        MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
        v12 = (**MemoryAllocator)(MemoryAllocator, 8 * v10);
      }
      else
      {
        v12 = 0;
      }
      v13 = (char **)(v12 + 8 * v8);
      v14 = v12 + 8 * v10;
      v53 = v14;
      *v13 = i;
      v7 = v13 + 1;
      v52.i64[1] = (uint64_t)(v13 + 1);
      v15 = v49.i64[1];
      v16 = v49.i64[0];
      if (v49.i64[1] == v49.i64[0])
      {
        v18 = vdupq_n_s64(v49.u64[1]);
      }
      else
      {
        do
        {
          v17 = *(char **)(v15 - 8);
          v15 -= 8;
          *--v13 = v17;
        }
        while (v15 != v16);
        v18 = v49;
        v7 = (_QWORD *)v52.i64[1];
        v14 = v53;
      }
      v49.i64[0] = (uint64_t)v13;
      v49.i64[1] = (uint64_t)v7;
      v52 = v18;
      v19 = v50;
      v50 = v14;
      v53 = v19;
      v51 = v18.i64[0];
      std::__split_buffer<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*> &>::~__split_buffer((AdobeXMPCore_Int::IMemoryAllocator_I *)&v51);
    }
    else
    {
      *(_QWORD *)v49.i64[1] = i;
      v7 = (_QWORD *)(v6 + 8);
    }
    v49.i64[1] = (uint64_t)v7;
  }
  v20 = (_QWORD *)(v49.i64[1] - 8);
  if (v49.i64[0] != v49.i64[1] && (unint64_t)v20 > v49.i64[0])
  {
    v22 = v49.i64[0] + 8;
    do
    {
      v23 = *(_QWORD *)(v22 - 8);
      *(_QWORD *)(v22 - 8) = *v20;
      *v20-- = v23;
      v24 = v22 >= (unint64_t)v20;
      v22 += 8;
    }
    while (!v24);
  }
  *a2 = 0;
  a2[1] = 0;
  Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)AdobeXMPCore::IPath_v1::CreatePath(a2);
  v26 = v49.i64[1];
  if (v49.i64[1] != v49.i64[0])
  {
    v27 = 0;
    if ((unint64_t)((v49.i64[1] - v49.i64[0]) >> 3) <= 1)
      v28 = 1;
    else
      v28 = (v49.i64[1] - v49.i64[0]) >> 3;
    while (1)
    {
      v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v49.i64[0] + 8 * v27) + 280))(*(_QWORD *)(v49.i64[0] + 8 * v27));
      Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 528))(v29);
      if (Path)
        break;
LABEL_65:
      if (++v27 == v28)
      {
        v26 = v49.i64[0];
        goto LABEL_67;
      }
    }
    v47 = 0;
    v48 = 0;
    v30 = *(_QWORD *)(v49.i64[0] + 8 * v27);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 168))(v30))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 88))(&v51, v30);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 72))(&v55, v30);
      Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)AdobeXMPCore_Int::IPathSegment_I::CreateQualifierPathSegment(&v51, &v55, &v47);
      v31 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)v52.i64[0];
      if (!v52.i64[0])
        goto LABEL_58;
      v35 = (unint64_t *)(v52.i64[0] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 160))(v30))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 88))(&v51, v30);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 176))(v30);
      Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)AdobeXMPCore_Int::IPathSegment_I::CreateArrayIndexPathSegment(&v51, v37, &v47);
      v34 = (std::__shared_weak_count *)v52.i64[0];
      if (!v52.i64[0])
      {
LABEL_58:
        if (v47)
          Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a2 + 56))(*a2, &v47);
        v43 = v48;
        if (v48)
        {
          v44 = (unint64_t *)&v48->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        goto LABEL_65;
      }
      v38 = (unint64_t *)(v52.i64[0] + 8);
      do
        v36 = __ldaxr(v38);
      while (__stlxr(v36 - 1, v38));
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 88))(&v51, v30);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v30 + 72))(&v55, v30);
      Path = (AdobeXMPCore_Int::IMemoryAllocator_I *)AdobeXMPCore_Int::IPathSegment_I::CreatePropertyPathSegment(&v51, &v55, &v47);
      v39 = v56;
      if (v56)
      {
        v40 = (unint64_t *)&v56->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v34 = (std::__shared_weak_count *)v52.i64[0];
      if (!v52.i64[0])
        goto LABEL_58;
      v42 = (unint64_t *)(v52.i64[0] + 8);
      do
        v36 = __ldaxr(v42);
      while (__stlxr(v36 - 1, v42));
    }
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
    goto LABEL_58;
  }
LABEL_67:
  if (v26)
  {
    v49.i64[1] = v26;
    v46 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(Path);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 8))(v46, v26);
  }
}

void sub_1880C8280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t MemoryAllocator;

  if (a11)
  {
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)exception_object);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, a11);
  }
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetPath(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::GetPath((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

void AdobeXMPCore_Int::NodeImpl::GetQualifier(AdobeXMPCore_Int::NodeImpl *this@<X0>, const char *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD v12[3];

  memset(v12, 0, sizeof(v12));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  if (*((_QWORD *)this + 9))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
    (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 9) + 648))(*((_QWORD *)this + 9), a2, a4, a3, a5);
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
  }
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetQualifier(AdobeXMPCore_Int::NodeImpl *this@<X0>, const char *a2@<X1>, const char *a3@<X3>, uint64_t a4@<X2>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::GetQualifier((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)), a2, a3, a4, a5, a6);
}

void AdobeXMPCore_Int::NodeImpl::GetQualifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, a1 + *(_QWORD *)(*(_QWORD *)a1 - 688) + 8, 0);
  if (*(_QWORD *)(a1 + 72))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 688))(*(_QWORD *)(a1 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 736))(v8, a2, a3);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
  }
}

uint64_t AdobeXMPCore_Int::NodeImpl::InsertQualifier(AdobeXMPCore_Int::NodeImpl *a1, _QWORD *a2)
{
  uint64_t v4;

  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  (*(void (**)(_QWORD *, _QWORD *))(**((_QWORD **)a1 + 9) + 656))(*((_QWORD **)a1 + 9), a2);
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 280))(*a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 552))(v4, 1);
}

void AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[24];

  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v8, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v8);
  if (!*((_QWORD *)this + 9))
  {
    AdobeXMPCore::IStructureNode_v1::CreateStructureNode((AdobeXMPCore::IStructureNode_v1 *)"http://qualifiers", (char *)0xC, (const char *)0xC, (AdobeXMPCore_Int::IUTF8String_I *)"_qualifiers_", &v7);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)this + 72, &v7);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = *((_QWORD *)this + 9) + *(_QWORD *)(**((_QWORD **)this + 9) - 544);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 280))(v5);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 504))(v6, (char *)this + *(_QWORD *)(*(_QWORD *)this - 544));
  }
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::InsertQualifier(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::NodeImpl::InsertQualifier((AdobeXMPCore_Int::NodeImpl *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2);
}

uint64_t AdobeXMPCore_Int::NodeImpl::ReplaceQualifier@<X0>(AdobeXMPCore_Int::NodeImpl *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(_QWORD *, _QWORD *))(**((_QWORD **)a1 + 9) + 664))(*((_QWORD **)a1 + 9), a2);
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 280))(*a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 552))(v6, 1);
}

void sub_1880C8648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::ReplaceQualifier@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  return AdobeXMPCore_Int::NodeImpl::ReplaceQualifier((AdobeXMPCore_Int::NodeImpl *)((char *)a1 + *(_QWORD *)(*a1 - 184)), a2, a3);
}

uint64_t AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(this);
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 9)
                                                                                         + 672))(*((_QWORD *)this + 9), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  AdobeXMPCore_Int::NodeImpl *v9;

  v9 = (AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192));
  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(v9);
  return (*(uint64_t (**)(_QWORD *, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)v9 + 9)
                                                                                           + 672))(*((_QWORD **)v9 + 9), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::NodeImpl::RemoveQualifier(AdobeXMPCore_Int::NodeImpl *a1, uint64_t a2, uint64_t a3)
{
  char *v6;

  AdobeXMPCore_Int::NodeImpl::CreateQualifierNode(a1);
  v6 = (char *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 9) + 688))(*((_QWORD **)a1 + 9));
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v6[*(_QWORD *)(*(_QWORD *)v6 - 808)] + 520))(&v6[*(_QWORD *)(*(_QWORD *)v6 - 808)], a2, a3);
}

BOOL AdobeXMPCore_Int::NodeImpl::IsArrayItem(AdobeXMPCore_Int::NodeImpl *this)
{
  _BOOL8 v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v2 = *((_QWORD *)this + 5) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsArrayItem(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::IsArrayItem((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                              + *(_QWORD *)(*(_QWORD *)this - 200)));
}

BOOL AdobeXMPCore_Int::NodeImpl::HasQualifiers(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v2 = *((_QWORD *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 9) + *(_QWORD *)(**((_QWORD **)this + 9) - 688);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 560))(v3) != 0;
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NodeImpl::HasQualifiers(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::HasQualifiers((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                                + *(_QWORD *)(*(_QWORD *)this - 224)));
}

uint64_t AdobeXMPCore_Int::NodeImpl::IsEmpty(AdobeXMPCore_Int::NodeImpl *this)
{
  if (((*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) + 192))((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) & 1) != 0)
    return 0;
  else
    return (*(unsigned int (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 184))(this) ^ 1;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsEmpty(AdobeXMPCore_Int::NodeImpl *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 240);
  if (((*(uint64_t (**)(char *))(*(_QWORD *)&v1[*(_QWORD *)(*(_QWORD *)v1 - 544)] + 192))(&v1[*(_QWORD *)(*(_QWORD *)v1 - 544)]) & 1) != 0)
    return 0;
  else
    return (*(unsigned int (**)(char *))(*(_QWORD *)v1 + 184))(v1) ^ 1;
}

BOOL AdobeXMPCore_Int::NodeImpl::HasChanged(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)this + 11);
  return v1 != 0;
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NodeImpl::HasChanged(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v1;

  v1 = atomic_load((unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 248) + 88));
  return v1 != 0;
}

void AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v2 = atomic_load((unint64_t *)this + 11);
  if (v2 >= 2)
  {
    v3 = *((_QWORD *)this + 6);
    if (v3)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 576))(v4);
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *))(*(_QWORD *)this + 624))(this);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v5 = (char *)*((_QWORD *)this + 9);
  if (v5)
    (*(void (**)(char *))(*(_QWORD *)&v5[*(_QWORD *)(*(_QWORD *)v5 - 544)] + 216))(&v5[*(_QWORD *)(*(_QWORD *)v5 - 544)]);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v6, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  atomic_store(0, (unint64_t *)this + 11);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v6);
}

void sub_1880C8AC4(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::AcknowledgeChanges((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                              + *(_QWORD *)(*(_QWORD *)this - 256)));
}

uint64_t AdobeXMPCore_Int::NodeImpl::Clear(uint64_t this, int a2, int a3)
{
  uint64_t v4;
  char *v5;

  v4 = this;
  if (a3)
  {
    v5 = *(char **)(this + 72);
    if (v5)
      this = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v5[*(_QWORD *)(*(_QWORD *)v5 - 544)]
                                                                 + 224))(&v5[*(_QWORD *)(*(_QWORD *)v5 - 544)], 1, 1);
  }
  if (a2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 608))(v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 560))(v4);
  }
  return this;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::Clear(AdobeXMPCore_Int::NodeImpl *this, int a2, int a3)
{
  return AdobeXMPCore_Int::NodeImpl::Clear((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 264), a2, a3);
}

void AdobeXMPCore_Int::NodeImpl::Clone(AdobeXMPCore_Int::NodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 v31;
  _QWORD v32[3];

  memset(v32, 0, sizeof(v32));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v32, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v8 = (char *)*((_QWORD *)this + 9);
  if (v8)
  {
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 688)] + 560))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 688)]);
    v31 = 0uLL;
    if (v9)
    {
      v29 = 0;
      v30 = 0;
      v10 = *((_QWORD *)this + 9) + *(_QWORD *)(**((_QWORD **)this + 9) - 544);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 264))(&v29, v10, a2, a3);
      if (v29)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v29 + 240))(&v28);
        v11 = v28;
        v28 = 0uLL;
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        v31 = v11;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v16 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      if ((_QWORD)v31)
        v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v31 + *(_QWORD *)(*(_QWORD *)v31 - 688)) + 560))(v31 + *(_QWORD *)(*(_QWORD *)v31 - 688));
      else
        v18 = 0;
      v19 = v30;
      if (v30)
      {
        v20 = (unint64_t *)&v30->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
    v31 = 0uLL;
  }
  *a4 = 0;
  a4[1] = 0;
  (*(void (**)(AdobeXMPCore_Int::NodeImpl *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 616))(this, a2, a3, v18);
  if (*a4)
  {
    v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 280))(*a4);
    v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 168))(*a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 552))(v22, v23);
    if (*a4)
    {
      if (v18 && (_QWORD)v31)
      {
        v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 280))(*a4);
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 584))(v24, &v31);
      }
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v32);
}

void sub_1880C8E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va2);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::Clone(AdobeXMPCore_Int::NodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::Clone((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)), a2, a3, a4);
}

_QWORD *AdobeXMPCore_Int::NodeImpl::SetQualifiers(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  _BYTE v5[24];

  v3 = a1 + 9;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)a1 + *(_QWORD *)(*a1 - 688) + 8, 1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  return std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v3, a2);
}

uint64_t AdobeXMPCore_Int::NodeImpl::QualifiersCount(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v2 = *((_QWORD *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 9) + *(_QWORD *)(**((_QWORD **)this + 9) - 688);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 560))(v3);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::QualifiersCount(AdobeXMPCore_Int::NodeImpl *this)
{
  return AdobeXMPCore_Int::NodeImpl::QualifiersCount((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                                  + *(_QWORD *)(*(_QWORD *)this - 144)));
}

void AdobeXMPCore_Int::NodeImpl::QualifiersIterator(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  if (*((_QWORD *)this + 9))
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
    v4 = *((_QWORD *)this + 9) + *(_QWORD *)(**((_QWORD **)this + 9) - 688);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 552))(v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  }
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::QualifiersIterator(AdobeXMPCore_Int::NodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::NodeImpl::QualifiersIterator((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)), a2);
}

uint64_t AdobeXMPCore_Int::NodeImpl::ValidateNameOrNameSpaceChangeForAChild()
{
  return 1;
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetParentNodeType(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetParentNodeType(AdobeXMPCore_Int::NodeImpl *this)
{
  uint64_t result;

  result = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD v12[3];

  memset(v12, 0, sizeof(v12));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v12, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 0);
  v10 = *((_QWORD *)this + 9);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v12);
  if (v10)
    return (*(uint64_t (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 9)
                                                                                           + 640))(*((_QWORD *)this + 9), a2, a3, a4, a5);
  else
    return 0;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType(AdobeXMPCore_Int::NodeImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5)
{
  return AdobeXMPCore_Int::NodeImpl::GetQualifierNodeType((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::NodeImpl::ConvertToSimpleNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToSimpleNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToStructureNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToStructureNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToArrayNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToArrayNode(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void AdobeXMPCore_Int::NodeImpl::ConvertToMetadata(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::ConvertToMetadata(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

unint64_t *AdobeXMPCore_Int::NodeImpl::UnRegisterChange(unint64_t *this)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v5;

  v1 = this + 11;
  if (atomic_load(this + 11))
  {
    do
      v3 = __ldaxr(v1);
    while (__stlxr(v3 - 1, v1));
  }
  if (!atomic_load(v1))
  {
    this = (unint64_t *)this[6];
    if (this)
    {
      v5 = (*(uint64_t (**)(unint64_t *))(*this + 280))(this);
      return (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 576))(v5);
    }
  }
  return this;
}

void AdobeXMPCore_Int::NodeImpl::Acquire(AdobeXMPCore_Int::NodeImpl *this)
{
  _QWORD v2[3];

  AdobeXMPCore_Int::SharedObjectImpl::Acquire((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 672));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_1880C921C(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::Acquire(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::Acquire((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void AdobeXMPCore_Int::NodeImpl::Release(AdobeXMPCore_Int::NodeImpl *this)
{
  unint64_t v2;
  _QWORD v3[3];

  memset(v3, 0, sizeof(v3));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v3, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  if (*((_QWORD *)this + 7))
  {
    v2 = atomic_load((unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672) + 8));
    if (v2 <= 2)
      std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 7);
  }
  AdobeXMPCore_Int::SharedObjectImpl::Release((unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 672)));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v3);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::Release(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::Release((AdobeXMPCore_Int::NodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void AdobeXMPCore_Int::NodeImpl::AcquireInternal(AdobeXMPCore_Int::NodeImpl *this)
{
  _QWORD v2[3];

  AdobeXMPCore_Int::SharedObjectImpl::AcquireInternal((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 672));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(_QWORD *)(*(_QWORD *)this - 688) + 8, 1);
  AdobeXMPCore_Int::NodeImpl::updateParentSharedPointer(this, 0);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void sub_1880C9368(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NodeImpl::AcquireInternal(AdobeXMPCore_Int::NodeImpl *this)
{
  AdobeXMPCore_Int::NodeImpl::AcquireInternal((AdobeXMPCore_Int::NodeImpl *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 64)));
}

unint64_t *AdobeXMPCore_Int::NodeImpl::RegisterChange(unint64_t *this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = this + 11;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  v3 = atomic_load(v1);
  if (v3 == 1)
  {
    this = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*this + 528))(this);
    if (this)
    {
      v4 = (*(uint64_t (**)(unint64_t *))(*this + 280))(this);
      return (unint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 560))(v4);
    }
  }
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::SetIndex(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::SetIsQualifierNode(uint64_t this, char a2)
{
  *(_BYTE *)(this + 96) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::NodeImpl::IsQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::IsQualifierNode(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 96);
}

uint64_t AdobeXMPCore_Int::NodeImpl::GetIndex(AdobeXMPCore_Int::NodeImpl *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NodeImpl::GetIndex(AdobeXMPCore_Int::NodeImpl *this)
{
  return *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216) + 40);
}

_QWORD *AdobeXMPCore::INode_v1::MakeShared@<X0>(_QWORD *this@<X0>, AdobeXMPCore::INode_v1 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  if (this)
  {
    v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::INode_v1 *))((char *)this + *(_QWORD *)(*this - 56)))((uint64_t)this + *(_QWORD *)(*this - 56), a2);
    return std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4, 8, 1);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

_QWORD *std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC420;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880C94FC(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880C9528(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INode_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INode_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::__split_buffer<AdobeXMPCore::INode_v1 const*,AdobeXMPCore_Int::TAllocator<AdobeXMPCore::INode_v1 const*> &>::~__split_buffer(AdobeXMPCore_Int::IMemoryAllocator_I *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t MemoryAllocator;

  v3 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  if (v2 != v3)
    *((_QWORD *)a1 + 2) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v4);
  }
  return a1;
}

Common::HandlerRegistry *Common::HandlerRegistry::getInstance(Common::HandlerRegistry *this)
{
  Common::HandlerRegistry *v1;

  v1 = (Common::HandlerRegistry *)Common::HandlerRegistry::sInstance;
  if (!Common::HandlerRegistry::sInstance)
  {
    v1 = (Common::HandlerRegistry *)operator new();
    Common::HandlerRegistry::HandlerRegistry(v1);
    Common::HandlerRegistry::sInstance = (uint64_t)v1;
  }
  return v1;
}

void sub_1880C9688(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

uint64_t Common::HandlerRegistry::terminate(Common::HandlerRegistry *this)
{
  uint64_t result;

  result = Common::HandlerRegistry::sInstance;
  if (Common::HandlerRegistry::sInstance)
  {
    Common::HandlerRegistry::~HandlerRegistry((Common::HandlerRegistry *)Common::HandlerRegistry::sInstance);
    result = MEMORY[0x18D761C30]();
  }
  Common::HandlerRegistry::sInstance = 0;
  return result;
}

Common::HandlerRegistry *Common::HandlerRegistry::HandlerRegistry(Common::HandlerRegistry *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  *(_QWORD *)this = v2;
  v3 = (_QWORD *)operator new();
  v3[2] = 0;
  v3[1] = 0;
  *v3 = v3 + 1;
  *((_QWORD *)this + 1) = v3;
  v4 = (_QWORD *)operator new();
  v4[2] = 0;
  v4[1] = 0;
  *v4 = v4 + 1;
  *((_QWORD *)this + 2) = v4;
  v5 = (_QWORD *)operator new();
  v5[2] = 0;
  v5[1] = 0;
  *v5 = v5 + 1;
  *((_QWORD *)this + 3) = v5;
  return this;
}

void Common::HandlerRegistry::~HandlerRegistry(Common::HandlerRegistry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    std::__tree<unsigned long long>::destroy(*(_QWORD *)this, *(_QWORD **)(v2 + 8));
    MEMORY[0x18D761C30](v2, 0x1020C4062D53EE8);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    std::__tree<unsigned long long>::destroy(*((_QWORD *)this + 1), *(_QWORD **)(v3 + 8));
    MEMORY[0x18D761C30](v3, 0x1020C4062D53EE8);
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    std::__tree<unsigned long long>::destroy(*((_QWORD *)this + 2), *(_QWORD **)(v4 + 8));
    MEMORY[0x18D761C30](v4, 0x1020C4062D53EE8);
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    std::__tree<unsigned long long>::destroy(*((_QWORD *)this + 3), *(_QWORD **)(v5 + 8));
    MEMORY[0x18D761C30](v5, 0x1020C4062D53EE8);
  }
}

uint64_t Common::HandlerRegistry::initialize(Common::HandlerRegistry *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  BOOL v7;
  _QWORD *exception;

  v2 = Common::HandlerRegistry::registerNormalHandler(this, 0x50534420u, 0x227Fu, (uint64_t)PSD_CheckFormat, (uint64_t)PSD_MetaHandlerCTor, 0);
  v3 = Common::HandlerRegistry::registerNormalHandler(this, 0x54494646u, 0x227Fu, (uint64_t)TIFF_CheckFormat, (uint64_t)TIFF_MetaHandlerCTor, 0);
  v4 = Common::HandlerRegistry::registerNormalHandler(this, 0x47494620u, 0x46Bu, (uint64_t)GIF_CheckFormat, (uint64_t)GIF_MetaHandlerCTor, 0);
  result = Common::HandlerRegistry::registerNormalHandler(this, 0x504E4720u, 0x46Bu, (uint64_t)PNG_CheckFormat, (uint64_t)PNG_MetaHandlerCTor, 0);
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 1;
  v7 = v6 || v4 == 0;
  if (v7 || (result & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Failure initializing linked-in file handlers";
    *((_BYTE *)exception + 16) = 0;
  }
  return result;
}

uint64_t Common::HandlerRegistry::registerNormalHandler(Common::HandlerRegistry *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;

  if (a2 == 538976288)
    Common::HandlerRegistry::registerNormalHandler();
  if ((a3 & 0x100) != 0)
    Common::HandlerRegistry::registerNormalHandler();
  if ((a3 & 0x1000) != 0)
    Common::HandlerRegistry::registerNormalHandler();
  if ((a3 & 3) == 1)
    Common::HandlerRegistry::registerNormalHandler();
  if (!a6)
  {
    if (!Common::HandlerRegistry::getHandlerInfo(this, a2))
      goto LABEL_21;
    return 0;
  }
  v11 = *((_QWORD *)this + 3);
  v13 = (uint64_t *)(v11 + 8);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    v14 = v11 + 8;
    do
    {
      v15 = *(_DWORD *)(v12 + 32);
      v16 = v15 >= a2;
      if (v15 >= a2)
        v17 = (uint64_t *)v12;
      else
        v17 = (uint64_t *)(v12 + 8);
      if (v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if ((uint64_t *)v14 != v13 && *(_DWORD *)(v14 + 32) <= a2)
      return 0;
  }
  result = Common::HandlerRegistry::getHandlerInfo(this, a2);
  if (!result)
    return result;
  v21 = a2;
  v19 = *(_OWORD *)result;
  v23 = *(_QWORD *)(result + 16);
  v22 = v19;
  std::__tree<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int,Common::XMPFileHandlerInfo>>((uint64_t **)v11, v13, &v21, (uint64_t)&v21);
  Common::HandlerRegistry::removeHandler((uint64_t ***)this, a2);
LABEL_21:
  v20 = *((_QWORD *)this + 1);
  v21 = a2;
  *(_QWORD *)&v22 = __PAIR64__(a3, a2);
  *((_QWORD *)&v22 + 1) = a4;
  v23 = a5;
  std::__tree<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int,Common::XMPFileHandlerInfo>>((uint64_t **)v20, (uint64_t *)(v20 + 8), &v21, (uint64_t)&v21);
  return 1;
}

uint64_t Common::HandlerRegistry::getHandlerInfo(Common::HandlerRegistry *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)this + 8;
    do
    {
      v4 = *(_DWORD *)(v2 + 32);
      v5 = v4 >= a2;
      if (v4 >= a2)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (v5)
        v3 = v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != *(_QWORD *)this + 8 && *(_DWORD *)(v3 + 32) <= a2)
      return v3 + 40;
  }
  v7 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(v7 + 8);
  v8 = v7 + 8;
  v9 = v10;
  if (v10)
  {
    v3 = v8;
    do
    {
      v11 = *(_DWORD *)(v9 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (v12)
        v3 = v9;
      v9 = *v13;
    }
    while (*v13);
    if (v3 != v8 && *(_DWORD *)(v3 + 32) <= a2)
      return v3 + 40;
  }
  v14 = *((_QWORD *)this + 2);
  v17 = *(_QWORD *)(v14 + 8);
  v15 = v14 + 8;
  v16 = v17;
  if (!v17)
    return 0;
  v18 = v15;
  do
  {
    v19 = *(_DWORD *)(v16 + 32);
    v20 = v19 >= a2;
    if (v19 >= a2)
      v21 = (uint64_t *)v16;
    else
      v21 = (uint64_t *)(v16 + 8);
    if (v20)
      v18 = v16;
    v16 = *v21;
  }
  while (*v21);
  if (v18 == v15)
    return 0;
  v22 = *(_DWORD *)(v18 + 32);
  v23 = v18 + 40;
  if (v22 <= a2)
    return v23;
  else
    return 0;
}

uint64_t **Common::HandlerRegistry::removeHandler(uint64_t ***this, unsigned int a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t **result;
  uint64_t *v19;
  uint64_t **v20;
  unsigned int v21;
  BOOL v22;
  uint64_t **v23;

  v4 = *this;
  v5 = v4[1];
  if (!v5)
    goto LABEL_12;
  v6 = v4 + 1;
  do
  {
    v7 = *((_DWORD *)v5 + 8);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t **)v5;
    else
      v9 = (uint64_t **)(v5 + 1);
    if (v8)
      v6 = (uint64_t **)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != v4 + 1 && *((_DWORD *)v6 + 8) <= a2)
  {
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(v4, (uint64_t *)v6);
    operator delete(v6);
    result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
    if (result)
      Common::HandlerRegistry::removeHandler();
  }
  else
  {
LABEL_12:
    v10 = this[1];
    v13 = v10[1];
    v11 = v10 + 1;
    v12 = v13;
    if (!v13)
      goto LABEL_23;
    v14 = v11;
    do
    {
      v15 = *((_DWORD *)v12 + 8);
      v16 = v15 >= a2;
      if (v15 >= a2)
        v17 = v12;
      else
        v17 = v12 + 1;
      if (v16)
        v14 = (uint64_t **)v12;
      v12 = (uint64_t *)*v17;
    }
    while (*v17);
    if (v14 != v11 && *((_DWORD *)v14 + 8) <= a2)
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(this[1], (uint64_t *)v14);
      operator delete(v14);
      result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
      if (result)
        Common::HandlerRegistry::removeHandler();
    }
    else
    {
LABEL_23:
      result = this[2];
      v19 = result[1];
      if (v19)
      {
        v20 = result + 1;
        do
        {
          v21 = *((_DWORD *)v19 + 8);
          v22 = v21 >= a2;
          if (v21 >= a2)
            v23 = (uint64_t **)v19;
          else
            v23 = (uint64_t **)(v19 + 1);
          if (v22)
            v20 = (uint64_t **)v19;
          v19 = *v23;
        }
        while (*v23);
        if (v20 != result + 1 && *((_DWORD *)v20 + 8) <= a2)
        {
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(result, (uint64_t *)v20);
          operator delete(v20);
          result = (uint64_t **)Common::HandlerRegistry::getHandlerInfo((Common::HandlerRegistry *)this, a2);
          if (result)
            Common::HandlerRegistry::removeHandler();
        }
      }
    }
  }
  return result;
}

uint64_t Common::HandlerRegistry::getFileFormat(uint64_t a1, const void **a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void **v7;
  char **v8;
  size_t v9;
  size_t v10;
  const void **v11;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = a2[1];
  if ((v2 & 0x80u) == 0)
    v4 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4)
  {
    v5 = 1346651680;
    v7 = (const void **)*a2;
    v8 = &kFileExtMap;
    do
    {
      v9 = strlen(*v8);
      v10 = v9;
      if ((v2 & 0x80) != 0)
      {
        if ((const void *)v9 == v3)
        {
          v11 = v7;
          if (v3 == (const void *)-1)
            std::string::__throw_out_of_range[abi:ne180100]();
LABEL_11:
          if (!memcmp(v11, *v8, v10))
            return v5;
        }
      }
      else
      {
        v11 = a2;
        if (v10 == v2)
          goto LABEL_11;
      }
      v5 = *((unsigned int *)v8 + 6);
      v8 += 2;
    }
    while ((_DWORD)v5);
  }
  return 538976288;
}

uint64_t Common::HandlerRegistry::pickDefaultHandler(_QWORD *a1, unsigned int FileFormat, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;

  if (FileFormat == 538976288)
  {
    FileFormat = Common::HandlerRegistry::getFileFormat((uint64_t)a1, a3);
    if (FileFormat == 538976288)
      return 0;
  }
  v4 = a1[1];
  v7 = *(_QWORD *)(v4 + 8);
  v5 = v4 + 8;
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 >= FileFormat;
      if (v9 >= FileFormat)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && FileFormat >= *(_DWORD *)(v8 + 32))
      return v8 + 40;
  }
  v12 = a1[2];
  v15 = *(_QWORD *)(v12 + 8);
  v13 = v12 + 8;
  v14 = v15;
  if (v15)
  {
    v8 = v13;
    do
    {
      v16 = *(_DWORD *)(v14 + 32);
      v17 = v16 >= FileFormat;
      if (v16 >= FileFormat)
        v18 = (uint64_t *)v14;
      else
        v18 = (uint64_t *)(v14 + 8);
      if (v17)
        v8 = v14;
      v14 = *v18;
    }
    while (*v18);
    if (v8 != v13 && FileFormat >= *(_DWORD *)(v8 + 32))
      return v8 + 40;
  }
  v19 = *(_QWORD *)(*a1 + 8);
  if (!v19)
    return 0;
  v20 = *a1 + 8;
  do
  {
    v21 = *(_DWORD *)(v19 + 32);
    v22 = v21 >= FileFormat;
    if (v21 >= FileFormat)
      v23 = (uint64_t *)v19;
    else
      v23 = (uint64_t *)(v19 + 8);
    if (v22)
      v20 = v19;
    v19 = *v23;
  }
  while (*v23);
  if (v20 == *a1 + 8)
    return 0;
  v24 = *(_DWORD *)(v20 + 32);
  v25 = v20 + 40;
  if (FileFormat >= v24)
    return v25;
  else
    return 0;
}

uint64_t (**Common::HandlerRegistry::selectSmartHandler(Common::HandlerRegistry *this, XMPFiles *a2, Host_IO *a3, uint64_t a4, int a5))(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t)
{
  int FileMode;
  std::string::size_type size;
  uint64_t (**v12)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v37;
  int v38;
  void *__p[2];
  uint64_t v40;
  std::string v41;
  std::string v42;
  std::string v43;

  memset(&v43, 0, sizeof(v43));
  memset(&v42, 0, sizeof(v42));
  memset(&v41, 0, sizeof(v41));
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if ((a5 & 8) != 0)
  {
    v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))Common::HandlerRegistry::pickDefaultHandler(this, a4, (const void **)__p);
    goto LABEL_72;
  }
  if (*((char *)a2 + 391) < 0)
  {
    if (*((_QWORD *)a2 + 47))
    {
LABEL_4:
      FileMode = Host_IO::GetFileMode(a3, (const char *)a2);
      if ((FileMode & 0xFE) == 2)
        goto LABEL_71;
      MEMORY[0x18D761A14](&v43, a3);
      XIO::SplitLeafName(&v43, &v42);
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v42.__r_.__value_.__l.__size_;
      if (!size)
        goto LABEL_71;
      if (FileMode == 1)
        XIO::SplitFileExtension(&v42, &v41, 1);
      goto LABEL_13;
    }
  }
  else if (*((_BYTE *)a2 + 391))
  {
    goto LABEL_4;
  }
  if (!*((_QWORD *)a2 + 29))
  {
    v37 = "session->ioRef != 0";
    v38 = 591;
    goto LABEL_86;
  }
LABEL_13:
  *((_DWORD *)a2 + 56) = 538976288;
  *((_DWORD *)a2 + 60) = a5;
  if ((_DWORD)a4 == 538976288)
    goto LABEL_30;
  v13 = Common::HandlerRegistry::pickDefaultHandler(this, a4, (const void **)__p);
  v14 = a5;
  if (!v13)
  {
LABEL_29:
    if ((v14 & 0x10) != 0)
      goto LABEL_71;
LABEL_30:
    if (*((char *)a2 + 391) < 0)
    {
      if (!*((_QWORD *)a2 + 47))
        goto LABEL_44;
    }
    else if (!*((_BYTE *)a2 + 391))
    {
LABEL_44:
      if (!*((_QWORD *)a2 + 29))
      {
        v26 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296, 0);
        *((_QWORD *)a2 + 29) = v26;
        if (!v26)
          goto LABEL_71;
      }
      v27 = (_QWORD *)*((_QWORD *)this + 1);
      v28 = (_QWORD *)*v27;
      if ((_QWORD *)*v27 != v27 + 1)
      {
        while (1)
        {
          *((_DWORD *)a2 + 56) = 538976288;
          if ((((uint64_t (*)(_QWORD, Host_IO *, _QWORD, XMPFiles *))v28[6])(*((unsigned int *)v28 + 10), a3, *((_QWORD *)a2 + 29), a2) & 1) != 0)break;
          if (*((_QWORD *)a2 + 32))
            __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 793, "foundHandler || (session->tempPtr == 0)");
          v29 = (_QWORD *)v28[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v28[2];
              v31 = *v30 == (_QWORD)v28;
              v28 = v30;
            }
            while (!v31);
          }
          v28 = v30;
          if (v30 == (_QWORD *)(*((_QWORD *)this + 1) + 8))
            goto LABEL_55;
        }
LABEL_81:
        v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))(v28 + 5);
        goto LABEL_72;
      }
LABEL_55:
      if ((*((char *)a2 + 391) & 0x80000000) == 0)
      {
        if (!*((_BYTE *)a2 + 391))
          goto LABEL_71;
        goto LABEL_59;
      }
      if (*((_QWORD *)a2 + 47))
      {
LABEL_59:
        v32 = *((_QWORD *)a2 + 29);
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 72))(v32);
        *((_QWORD *)a2 + 29) = 0;
        v33 = (_QWORD *)*((_QWORD *)this + 2);
        v28 = (_QWORD *)*v33;
        if ((_QWORD *)*v33 == v33 + 1)
          goto LABEL_71;
        while (1)
        {
          *((_DWORD *)a2 + 56) = 538976288;
          if ((((uint64_t (*)(_QWORD, Host_IO *, _QWORD, XMPFiles *))v28[6])(*((unsigned int *)v28 + 10), a3, *((_QWORD *)a2 + 29), a2) & 1) != 0)goto LABEL_81;
          if (*((_QWORD *)a2 + 32))
            __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 811, "foundHandler || (session->tempPtr == 0)");
          v34 = (_QWORD *)v28[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v28[2];
              v31 = *v35 == (_QWORD)v28;
              v28 = v35;
            }
            while (!v31);
          }
          v12 = 0;
          v28 = v35;
          if (v35 == (_QWORD *)(*((_QWORD *)this + 2) + 8))
            goto LABEL_72;
        }
      }
LABEL_71:
      v12 = 0;
      goto LABEL_72;
    }
    v19 = Common::HandlerRegistry::pickDefaultHandler(this, 0x20202020u, (const void **)&v41.__r_.__value_.__l.__data_);
    if (v19)
    {
      v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))v19;
      v23 = *((_QWORD *)a2 + 29);
      v24 = *(_DWORD *)(v19 + 4);
      if (v23)
      {
        if ((v24 & 0x100) != 0)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)v23 + 72))(*((_QWORD *)a2 + 29));
          v23 = 0;
          *((_QWORD *)a2 + 29) = 0;
        }
      }
      else if ((v24 & 0x100) != 0)
      {
        v23 = 0;
      }
      else
      {
        v23 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296, 0);
        *((_QWORD *)a2 + 29) = v23;
        if (!v23)
          goto LABEL_71;
      }
      v25 = *(unsigned int *)v12;
      *((_DWORD *)a2 + 56) = v25;
      if ((v12[1](v25, a3, v23, a2, v20, v21, v22) & 1) != 0)
        goto LABEL_72;
      if (*((_QWORD *)a2 + 32))
        __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", 771, "foundHandler || (session->tempPtr == 0)");
    }
    goto LABEL_44;
  }
  v12 = (uint64_t (**)(uint64_t, Host_IO *, uint64_t, XMPFiles *, uint64_t, uint64_t, uint64_t))v13;
  v15 = *((_QWORD *)a2 + 29);
  if (!v15)
  {
    if ((*(_BYTE *)(v13 + 5) & 1) != 0)
    {
      v15 = 0;
    }
    else
    {
      v15 = XMPFiles_IO::New_XMPFiles_IO(a3, (const char *)((a5 & 2) == 0), (uint64_t)a2 + 296, 0);
      *((_QWORD *)a2 + 29) = v15;
      if (!v15)
        goto LABEL_71;
    }
  }
  *((_DWORD *)a2 + 56) = a4;
  v16 = *((_DWORD *)v12 + 1);
  if ((v16 & 0x1000) != 0)
  {
    v14 = 0;
LABEL_28:
    if (!*((_QWORD *)a2 + 32))
      goto LABEL_29;
    v37 = "foundHandler || (session->tempPtr == 0)";
    v38 = 668;
LABEL_86:
    __assert_rtn("selectSmartHandler", "HandlerRegistry.cpp", v38, v37);
  }
  if (*((char *)a2 + 391) < 0)
    v17 = *((_QWORD *)a2 + 47);
  else
    v17 = *((unsigned __int8 *)a2 + 391);
  if ((v16 & 0x900) != 0)
  {
    v14 = a5;
    if (!v17)
      goto LABEL_28;
  }
  v18 = ((uint64_t (*)(uint64_t, Host_IO *, uint64_t, XMPFiles *))v12[1])(a4, a3, v15, a2);
  v14 = a5;
  if ((v18 & 1) == 0)
    goto LABEL_28;
LABEL_72:
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1880CA3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

char *std::__tree<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>>>::__emplace_hint_unique_key_args<unsigned int,std::pair<unsigned int,Common::XMPFileHandlerInfo>>(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = std::__tree<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>>>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v7 + 7) = *(_QWORD *)(a4 + 24);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,Common::XMPFileHandlerInfo>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,Common::XMPFileHandlerInfo>>>::__find_equal<unsigned int>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void Common::HandlerRegistry::registerNormalHandler()
{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 245, "format != kXMP_UnknownFile");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 249, "(flags & kXMPFiles_CanInjectXMP) ? (flags & kXMPFiles_CanExpand) : 1");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 248, "! (flags & kXMPFiles_FolderBasedFormat)");
}

{
  __assert_rtn("registerNormalHandler", "HandlerRegistry.cpp", 247, "! (flags & kXMPFiles_HandlerOwnsFile)");
}

void Common::HandlerRegistry::removeHandler()
{
  __assert_rtn("removeHandler", "HandlerRegistry.cpp", 376, "! this->getFormatInfo(format)");
}

{
  __assert_rtn("removeHandler", "HandlerRegistry.cpp", 369, "! this->getFormatInfo(format)");
}

{
  __assert_rtn("removeHandler", "HandlerRegistry.cpp", 362, "! this->getFormatInfo(format)");
}

unint64_t PNG_Support::OpenPNG(uint64_t a1, int64x2_t *a2)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, 8, 0);
  if (v7 != 8)
    return 0;
  v6 = 0;
  v5 = 0;
  while (PNG_Support::ReadChunk(a1, a2, &v6, &v5, &v7))
    ;
  return 0xCCCCCCCCCCCCCCCDLL * ((a2[4].i64[1] - a2[4].i64[0]) >> 3);
}

BOOL PNG_Support::ReadChunk(uint64_t a1, int64x2_t *a2, _QWORD *a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  uint64_t v32;
  _QWORD *exception;
  void (**v35)(PNG_Support::ChunkData *__hidden);
  _BYTE v36[32];
  uint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t *v40;
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  v10 = *a5;
  v41[0] = 0;
  v11 = (**(uint64_t (***)(uint64_t, _QWORD *, uint64_t, _QWORD))a1)(a1, v41, 8, 0);
  if (v11 == 8)
  {
    v12 = *a5;
    v13 = HIDWORD(v41[0]);
    v14 = bswap32(v41[0]);
    *a4 = v14;
    *a3 = bswap32(v13);
    v15 = v12 + v14 + 12;
    *a5 = v15;
    if (v15 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 213;
      exception[1] = "Invalid PNG chunk length";
      *((_BYTE *)exception + 16) = 0;
    }
    *(_QWORD *)&v36[24] = 0;
    v35 = &off_1E1BB3158;
    *(_QWORD *)v36 = v10;
    v16 = *a4;
    *(_QWORD *)&v36[16] = *a3;
    *(_QWORD *)&v36[8] = v16;
    if (*(_QWORD *)&v36[16] == 1767135348)
      PNG_Support::CheckiTXtChunkHeader(a1, (uint64_t)a2, (uint64_t)&v35);
    v17 = a2[5].u64[0];
    v18 = a2[4].u64[1];
    if (v18 >= v17)
    {
      v20 = a2[4].i64[0];
      v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v20) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0x666666666666666)
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v20) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x333333333333333)
        v24 = 0x666666666666666;
      else
        v24 = v22;
      v40 = a2 + 5;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOThumbnailInfo>>((uint64_t)a2[5].i64, v24);
      else
        v25 = 0;
      v26 = &v25[40 * v21];
      *(_QWORD *)v26 = &off_1E1BB3158;
      *(_OWORD *)(v26 + 8) = *(_OWORD *)v36;
      *(_OWORD *)(v26 + 17) = *(_OWORD *)&v36[9];
      v27 = a2[4].i64[0];
      v28 = a2[4].u64[1];
      if (v28 == v27)
      {
        v31 = vdupq_n_s64(v28);
        v29 = &v25[40 * v21];
      }
      else
      {
        v29 = &v25[40 * v21];
        do
        {
          *((_QWORD *)v29 - 5) = &off_1E1BB3158;
          v29 -= 40;
          v30 = *(_OWORD *)(v28 - 32);
          *(_OWORD *)(v29 + 17) = *(_OWORD *)(v28 - 23);
          *(_OWORD *)(v29 + 8) = v30;
          v28 -= 40;
        }
        while (v28 != v27);
        v31 = a2[4];
      }
      v19 = v26 + 40;
      a2[4].i64[0] = (uint64_t)v29;
      a2[4].i64[1] = (uint64_t)(v26 + 40);
      v38 = v31;
      v32 = a2[5].i64[0];
      a2[5].i64[0] = (uint64_t)&v25[40 * v24];
      v39 = v32;
      v37 = v31.i64[0];
      std::__split_buffer<PNG_Support::ChunkData>::~__split_buffer((uint64_t)&v37);
    }
    else
    {
      *(_QWORD *)v18 = &off_1E1BB3158;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)v36;
      *(_OWORD *)(v18 + 17) = *(_OWORD *)&v36[9];
      v19 = (char *)(v18 + 40);
    }
    a2[4].i64[1] = (uint64_t)v19;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *a5, 0);
  }
  return v11 == 8;
}

void sub_1880CAAD4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1880CAAF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1880CAAFC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1880CAB04);
  __clang_call_terminate(a1);
}

__n128 PNG_Support::CheckiTXtChunkHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 result;
  uint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 16) >= 0x17u)
  {
    v6 = a3 + 8;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(a3 + 8) + 8, 0);
    v10 = 0;
    v11[0] = 0;
    *(_QWORD *)((char *)v11 + 6) = 0;
    if ((**(unsigned int (***)(uint64_t, uint64_t *, uint64_t, _QWORD))a1)(a1, &v10, 22, 0) == 22
      && v10 == 0x2E6D6F633A4C4D58
      && v11[0] == 0x6D782E65626F6461
      && *(_QWORD *)((char *)v11 + 6) == 7368056)
    {
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8) + 30;
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16) - 22;
      result = *(__n128 *)v6;
      *(_OWORD *)(a2 + 41) = *(_OWORD *)(v6 + 9);
      *(__n128 *)(a2 + 32) = result;
      *(_BYTE *)(a3 + 32) = 1;
    }
  }
  return result;
}

void sub_1880CAC40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1880CABD8);
  }
  _Unwind_Resume(a1);
}

BOOL PNG_Support::FindAndReadXMPChunk(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *i;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD *exception;
  _QWORD *v22;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9 = v8;
  v22 = a3;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (v8 >= 16)
  {
    v10 = v8 - 8;
    v11 = 8;
    while (2)
    {
      if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, v11, 0) == -1)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 213;
        exception[1] = "seek failed";
        *((_BYTE *)exception + 16) = 0;
      }
      if ((unint64_t)v10 >= 0x100000)
        v10 = 0x100000;
      v12 = operator new[]();
      (**(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))a1)(a1, v12, v10, 1);
      v13 = v12 + v10;
      for (i = (unsigned int *)v12; ; i = (unsigned int *)(v17 + v15 + 4))
      {
        v15 = bswap32(*i);
        v16 = bswap32(i[1]);
        v17 = (uint64_t)(i + 2);
        if (v16 == 1229278788)
        {
          if ((a4 & 1) != 0)
            goto LABEL_19;
        }
        else if (v16 == 1767135348)
        {
          PNG_Support::ExtractXMPPacket(a1, v15, v17, v13 - v17, v11, a2, v22);
LABEL_19:
          MEMORY[0x18D761C18](v12, 0x1000C8077774924, v17);
          goto LABEL_20;
        }
        v11 += v15 + 12;
        v10 = v9 - v11;
        if (v9 < v11)
        {
          v20 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v20 = 213;
          v20[1] = "Invalid PNG chunk length";
          *((_BYTE *)v20 + 16) = 0;
        }
        if (v13 - v17 <= v15 + 12)
          break;
      }
      MEMORY[0x18D761C18](v12, 0x1000C8077774924);
      if (v10 > 7)
        continue;
      break;
    }
  }
LABEL_20:
  v18 = *(unsigned __int8 *)(a2 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 8);
  return v18 != 0;
}

void sub_1880CAEA4(void *a1, int a2)
{
  uint64_t v2;

  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
      MEMORY[0x18D761C18](v2, 0x1000C8077774924);
    __cxa_rethrow();
  }
  if (v2)
    MEMORY[0x18D761C18](v2, 0x1000C8077774924);
  __cxa_rethrow();
}

void sub_1880CAF18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t PNG_Support::ExtractXMPPacket(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  std::string *p_p;
  std::string *v16;
  std::string::size_type size;
  char v18;
  size_t v19;
  std::string *p_str;
  int v21;
  BOOL v22;
  _QWORD *exception;
  std::string __p;
  std::string __str;
  char v27;

  if (a2 < 0x17)
    return 0;
  memset(&__str, 0, sizeof(__str));
  if (a2 <= a4)
  {
    MEMORY[0x18D761A20](&__str, a3, a2);
  }
  else
  {
    if (a2 + a5 + 8 + 4 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 213;
      exception[1] = "Invalid PNG chunk length";
      *((_BYTE *)exception + 16) = 0;
    }
    MEMORY[0x18D761A20](&__str, a3, a4);
    *a7 = a5 + 30;
    memset(&__p, 0, sizeof(__p));
    std::string::reserve(&__p, a2 - a4);
    std::string::assign(&__p, a2 - a4, 32);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a5 + 8 + a4, 0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    (**(void (***)(uint64_t, std::string *, _QWORD, uint64_t))a1)(a1, p_p, a2 - a4, 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&__str, (const std::string::value_type *)v16, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 7368056;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)"XML:com.adobe.xmp";
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 5632;
  v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (__str.__r_.__value_.__l.__size_ >= 0x16)
      v19 = 22;
    else
      v19 = __str.__r_.__value_.__l.__size_;
  }
  else
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) >= 0x16u)
      v19 = 22;
    else
      v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
  }
  v21 = memcmp(p_str, &__p, v19);
  v22 = v19 > 0x15 && v21 == 0;
  v7 = v22;
  if (v22)
  {
    if (*(char *)(a6 + 23) < 0)
    {
      **(_BYTE **)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a6 = 0;
      *(_BYTE *)(a6 + 23) = 0;
    }
    std::string::basic_string(&__p, &__str, 0x16uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
    if (*(char *)(a6 + 23) < 0)
      operator delete(*(void **)a6);
    *(std::string *)a6 = __p;
    v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v18 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1880CB1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PNG_Support::WriteXMPChunk(uint64_t a1, unsigned int a2, const void *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;

  v6 = (unsigned __int8 *)(a2 + 26);
  v7 = operator new[]();
  strcpy((char *)v7, "iTXtXML:com.adobe.xmp");
  *(_DWORD *)(v7 + 22) = 0;
  memcpy((void *)(v7 + 26), a3, a2);
  v9 = bswap32(a2 + 22);
  v10 = bswap32(PNG_Support::CalculateCRC((PNG_Support *)v7, v6));
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v9, 4);
  (*(void (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 8))(a1, v7, v6);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v10, 4);
  MEMORY[0x18D761C18](v7, 0x1000C8077774924);
  return 1;
}

void sub_1880CB308(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880CB2D4);
}

unint64_t PNG_Support::CalculateCRC(PNG_Support *this, unsigned __int8 *a2)
{
  unint64_t i;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if ((CRC::crc_table_computed & 1) == 0)
  {
    for (i = 0; i != 256; ++i)
    {
      v3 = 8;
      v4 = i;
      do
      {
        if ((v4 & 1) != 0)
          v4 = (v4 >> 1) ^ 0xEDB88320;
        else
          v4 >>= 1;
        --v3;
      }
      while (v3);
      CRC::crc_table[i] = v4;
    }
    CRC::crc_table_computed = 1;
  }
  if ((int)a2 < 1)
    return 0;
  v5 = a2;
  v6 = 0xFFFFFFFFLL;
  do
  {
    v7 = *(_BYTE *)this;
    this = (PNG_Support *)((char *)this + 1);
    v6 = CRC::crc_table[(v7 ^ v6)] ^ (v6 >> 8);
    --v5;
  }
  while (v5);
  return v6 ^ 0xFFFFFFFF;
}

uint64_t PNG_Support::CopyChunk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(a3 + 8), 0);
  XIO::Copy(a1, a2);
  return 1;
}

void sub_1880CB40C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880CB3FCLL);
}

uint64_t PNG_Support::UpdateChunkCRC(uint64_t a1, uint64_t a2)
{
  PNG_Support *v4;
  unsigned int v5;
  unsigned int v7;

  v4 = (PNG_Support *)operator new[]();
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(a2 + 8) + 4, 0);
  (**(void (***)(uint64_t, PNG_Support *, _QWORD, _QWORD))a1)(a1, v4, (*(_DWORD *)(a2 + 16) + 4), 0);
  v5 = PNG_Support::CalculateCRC(v4, (unsigned __int8 *)(*(_DWORD *)(a2 + 16) + 4));
  v7 = bswap32(v5);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(a2 + 8) + *(unsigned int *)(a2 + 16) + 8, 0);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 8))(a1, &v7, 4);
  MEMORY[0x18D761C18](v4, 0x1000C8077774924);
  return v5;
}

void sub_1880CB520(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880CB4F0);
}

BOOL PNG_Support::CheckIHDRChunkHeader(PNG_Support *this, PNG_Support::ChunkData *a2)
{
  return *((_QWORD *)this + 3) == 1229472850;
}

uint64_t PNG_Support::WriteBuffer(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if (a4)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, *a2, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, a4, a3);
      return 1;
    }
  }
  return result;
}

void sub_1880CB5BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880CB5ACLL);
}

uint64_t std::__split_buffer<PNG_Support::ChunkData>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *AdobeXMPCore_Int::MemoryAllocatorWrapperImpl::reallocate(AdobeXMPCore_Int::MemoryAllocatorWrapperImpl *this, char *a2, uint64_t a3)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *result;

  v4 = a3 + 8;
  v5 = a2 - 8;
  v6 = *((_QWORD *)this + 1);
  if (v6)
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, char *, size_t))(*(_QWORD *)v6 + 16))(v6, v5, v4);
  else
    result = malloc_type_realloc(v5, v4, 0xEC80F2DBuLL);
  if (result)
    *result++ = *((_QWORD *)this + 1);
  return result;
}

void AdobeXMPCore_Int::MemoryAllocatorWrapperImpl::~MemoryAllocatorWrapperImpl(AdobeXMPCore_Int::MemoryAllocatorWrapperImpl *this)
{
  JUMPOUT(0x18D761C30);
}

_QWORD *AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(_QWORD *this, const char *a2, unint64_t a3, const char *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  *this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 864)) = *((_QWORD *)a2 + 1);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 792)) = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 688)) = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 544)) = *((_QWORD *)a2 + 4);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 56)) = *((_QWORD *)a2 + 5);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 64)) = *((_QWORD *)a2 + 6);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 72)) = *((_QWORD *)a2 + 7);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 800)) = *((_QWORD *)a2 + 8);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 808)) = *((_QWORD *)a2 + 9);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 816)) = *((_QWORD *)a2 + 10);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 824)) = *((_QWORD *)a2 + 11);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 872)) = *((_QWORD *)a2 + 12);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 880)) = *((_QWORD *)a2 + 13);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 888)) = *((_QWORD *)a2 + 14);
  *(_QWORD *)((char *)this + *(_QWORD *)(*this - 904)) = *((_QWORD *)a2 + 15);
  this[3] = 0;
  this[2] = 0;
  this[1] = this + 2;
  return this;
}

AdobeXMPCore_Int::StructureNodeImpl *AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5)
{
  uint64_t *v6;

  *((_QWORD *)this + 19) = off_1E1B9B6E0;
  *((_QWORD *)this + 4) = off_1E1B9AA50;
  *(_QWORD *)this = &unk_1E1B9B740;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = off_1E1B9B868;
  *((_QWORD *)this + 5) = &unk_1E1B9AD48;
  v6 = (uint64_t *)((char *)this + 40);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 6) = &unk_1E1B9B268;
  *((_QWORD *)this + 23) = 0;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 48), (const char *)&off_1E1BAA9E8, a2, a3, a4, a5);
  AdobeXMPCore_Int::CompositeNodeImpl::CompositeNodeImpl(v6, (uint64_t *)&off_1E1BAA980);
  *((_QWORD *)this + 5) = &unk_1E1BB8A00;
  *((_QWORD *)this + 6) = off_1E1BB8F68;
  *((_QWORD *)this + 19) = off_1E1BB9228;
  *((_QWORD *)this + 22) = off_1E1BB92B8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = off_1E1BB86D8;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E1BB8390;
  *((_QWORD *)this + 1) = (char *)this + 16;
  return this;
}

void sub_1880CB8B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  AdobeXMPCore_Int::SharedObjectImpl *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 176) = v4;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)off_1E1BAAA38);
  _Unwind_Resume(a1);
}

uint64_t *AdobeXMPCore_Int::CompositeNodeImpl::CompositeNodeImpl(uint64_t *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *this = *a2;
  *(uint64_t *)((char *)this + *(_QWORD *)(v2 - 736)) = a2[1];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 688)) = a2[2];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 544)) = a2[3];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 56)) = a2[4];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 64)) = a2[5];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 72)) = a2[6];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 696)) = a2[7];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 704)) = a2[8];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 712)) = a2[9];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 744)) = a2[10];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 752)) = a2[11];
  *(uint64_t *)((char *)this + *(_QWORD *)(*this - 768)) = a2[12];
  return this;
}

void AdobeXMPCore_Int::StructureNodeImpl::GetNode(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2)
    && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3))
  {
    v8 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = (std::__shared_weak_count *)a3[1];
    v25 = *a3;
    v26 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    memset(v22, 0, sizeof(v22));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v22, (char *)a1 + *(_QWORD *)(*a1 - 904) + 8, 0);
    v14 = std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 1), &v23);
    if (a1 + 2 == (_QWORD *)v14)
    {
      *a4 = 0;
      a4[1] = 0;
    }
    else
    {
      v15 = *(char **)(v14 + 64);
      (**(void (***)(char *))&v15[*(_QWORD *)(*(_QWORD *)v15 - 56)])(&v15[*(_QWORD *)(*(_QWORD *)v15 - 56)]);
      std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a4, (uint64_t)v15, 8, 1);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v22);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1880CBB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::GetNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v30 = 0;
  v31 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, &v30);
  v28 = 0;
  v29 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a4, a5, &v28);
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v24 = v28;
  v25 = v29;
  if (v29)
  {
    v10 = (unint64_t *)&v29->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(AdobeXMPCore_Int::StructureNodeImpl *, uint64_t *, uint64_t *))(*(_QWORD *)this + 736))(this, &v26, &v24);
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1880CBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5)
{
  AdobeXMPCore_Int::StructureNodeImpl::GetNode((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 704)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2)
    && (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3))
  {
    v8 = (std::__shared_weak_count *)a2[1];
    v28 = *a2;
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    v11 = (std::__shared_weak_count *)a3[1];
    v30 = *a3;
    v31 = v11;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    memset(v27, 0, sizeof(v27));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v27, (char *)a1 + *(_QWORD *)(*a1 - 904) + 8, 1);
    v14 = (uint64_t **)(a1 + 1);
    v15 = (uint64_t *)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 1), &v28);
    if (a1 + 2 == v15)
    {
      *a4 = 0;
      a4[1] = 0;
    }
    else
    {
      v16 = v15[8];
      *a4 = v16;
      v17 = v15[9];
      a4[1] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::erase(v14, v15);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 280))(v16);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 504))(v20, 0);
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v27);
    v21 = v31;
    if (v31)
    {
      v22 = (unint64_t *)&v31->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v29;
    if (v29)
    {
      v25 = (unint64_t *)&v29->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1880CBF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v30 = 0;
  v31 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, &v30);
  v28 = 0;
  v29 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a4, a5, &v28);
  v26 = v30;
  v27 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v24 = v28;
  v25 = v29;
  if (v29)
  {
    v10 = (unint64_t *)&v29->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  (*(void (**)(AdobeXMPCore_Int::StructureNodeImpl *, uint64_t *, uint64_t *))(*(_QWORD *)this + 744))(this, &v26, &v24);
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v31;
  if (v31)
  {
    v22 = (unint64_t *)&v31->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1880CC110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::RemoveNode(AdobeXMPCore_Int::StructureNodeImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5)
{
  AdobeXMPCore_Int::StructureNodeImpl::RemoveNode((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 728)), a2, a3, a4, a5);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType(AdobeXMPCore_Int::StructureNodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 792))
                                                + 648))(&v9);
  v4 = v10;
  if (v9)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    if (!v4)
      return v5;
  }
  else
  {
    v5 = 0;
    if (!v10)
      return v5;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1880CC1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType(AdobeXMPCore_Int::StructureNodeImpl *this, const char *a2, unint64_t a3, const char *a4)
{
  return AdobeXMPCore_Int::StructureNodeImpl::GetChildNodeType((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 696)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::GetNodeType(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return 4;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::GetNodeType(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return 4;
}

void AdobeXMPCore_Int::StructureNodeImpl::InsertNode(char *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v8;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void (***v24)(_QWORD);
  uint64_t *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  AdobeXMPCore_Int::IErrorNotifier_I *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 872)];
  v5 = a2[1];
  *(_QWORD *)&v48 = *a2;
  *((_QWORD *)&v48 + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v4 + 656))(v4, &v48);
  v9 = v8;
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_8;
  v11 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if ((v9 & 1) == 0)
      return;
  }
  else
  {
LABEL_8:
    if ((v8 & 1) == 0)
      return;
  }
  v48 = 0u;
  v49 = 0u;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 88))(&v45);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 72))(&v47);
  v48 = v45;
  if (*((_QWORD *)&v45 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v49 = v47;
  if (*((_QWORD *)&v47 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (*((_QWORD *)&v45 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v45 = 0uLL;
  v46 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v45, &a1[*(_QWORD *)(*(_QWORD *)a1 - 904) + 8], 1);
  if (a1 + 16 != (char *)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)(a1 + 8), &v48))
  {
    v47 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(100, 4, 2, &v47);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v47 + *(_QWORD *)(*(_QWORD *)v47 - 304))
                                                          + 120))(v47 + *(_QWORD *)(*(_QWORD *)v47 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/StructureNodeImpl.cpp", 91);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v47 + *(_QWORD *)(*(_QWORD *)v47 - 304))
                                                          + 112))(v47 + *(_QWORD *)(*(_QWORD *)v47 - 304), "a node already exists with the same qualified name", -1);
    v36 = (_QWORD *)v47;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 88))(&v44);
    AdobeXMPCore_Int::IError_I::AppendParameter(v36, &v44);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    v37 = (_QWORD *)v47;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 72))(&v44);
    AdobeXMPCore_Int::IError_I::AppendParameter(v37, &v44);
    v38 = (AdobeXMPCore_Int::IErrorNotifier_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
    if ((_QWORD)v47)
      v39 = v47 + *(_QWORD *)(*(_QWORD *)v47 - 304);
    else
      v39 = 0;
    *(_QWORD *)&v44 = v39;
    *((_QWORD *)&v44 + 1) = *((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v40 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v38);
    (**ErrorNotifier)(ErrorNotifier, &v44);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v44;
    v44 = 0uLL;
  }
  v23 = *a2;
  v24 = (void (***)(_QWORD))(*a2 + *(_QWORD *)(*(_QWORD *)*a2 - 56));
  (**v24)(v24);
  std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v47, v23, 8, 1);
  *(_QWORD *)&v44 = &v48;
  v25 = std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 8), &v48, (uint64_t)&std::piecewise_construct, (_QWORD **)&v44);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)(v25 + 8), &v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 280))(*a2);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v29 + 504))(v29, &a1[*(_QWORD *)(*(_QWORD *)a1 - 544)]);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v45);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1880CC690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a12);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::InsertNode(char *a1, uint64_t *a2)
{
  AdobeXMPCore_Int::StructureNodeImpl::InsertNode(&a1[*(_QWORD *)(*(_QWORD *)a1 - 712)], a2);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode@<X0>(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _BOOL4 v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v30;
  char *v31;
  AdobeXMPCore_Int::IErrorNotifier_I *v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  __int128 v42;
  char *v43;
  std::__shared_weak_count *v44;

  v6 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 872);
  v7 = (std::__shared_weak_count *)a2[1];
  v43 = *a2;
  v44 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(uint64_t, char **))(*(_QWORD *)v6 + 656))(v6, &v43))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 88))(&v40);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 72))(&v38);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 736))(&v42, a1, &v40, &v38);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    v11 = (_QWORD)v42 != 0;
    if (*((_QWORD *)&v42 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v14 = v39;
    if (v39)
    {
      v15 = (unint64_t *)&v39->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v41;
    if (v41)
    {
      v18 = (unint64_t *)&v41->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v20 = v44;
  if (v44)
  {
    v21 = (unint64_t *)&v44->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!v11)
  {
    v43 = 0;
    v44 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(100, 5, 2, &v43);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v43[*(_QWORD *)(*(_QWORD *)v43 - 304)] + 120))(&v43[*(_QWORD *)(*(_QWORD *)v43 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/StructureNodeImpl.cpp", 103);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v43[*(_QWORD *)(*(_QWORD *)v43 - 304)] + 112))(&v43[*(_QWORD *)(*(_QWORD *)v43 - 304)], "no such node exists with the specified qualified name", -1);
    v30 = v43;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 88))(&v42);
    AdobeXMPCore_Int::IError_I::AppendParameter(v30, &v42);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    v31 = v43;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 72))(&v42);
    AdobeXMPCore_Int::IError_I::AppendParameter(v31, &v42);
    v32 = (AdobeXMPCore_Int::IErrorNotifier_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v42);
    if (v43)
      v33 = &v43[*(_QWORD *)(*(_QWORD *)v43 - 304)];
    else
      v33 = 0;
    *(_QWORD *)&v42 = v33;
    *((_QWORD *)&v42 + 1) = v44;
    if (v44)
    {
      v34 = (unint64_t *)&v44->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v32);
    (**ErrorNotifier)(ErrorNotifier, &v42);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v42;
    v42 = 0uLL;
  }
  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(char **__return_ptr))(*(_QWORD *)*a2 + 88))(&v43);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 72))(&v42);
  (*(void (**)(uint64_t, char **, __int128 *))(*(_QWORD *)a1 + 744))(a1, &v43, &v42);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)a1 + 656))(a1, a2);
}

void sub_1880CCAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode@<X0>(_QWORD *a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode((uint64_t)a1 + *(_QWORD *)(*a1 - 720), a2, a3);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::AppendNode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 656))(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::AppendNode(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 568)] + 656))(&a1[*(_QWORD *)(*(_QWORD *)a1 - 568)]);
}

void AdobeXMPCore_Int::StructureNodeImpl::Iterator(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v10, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v4 = (char *)*((_QWORD *)this + 1);
  v5 = (char *)this + 16;
  if (v4 == v5)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v6 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x38);
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 24) = off_1E1BB9648;
    *(_QWORD *)(v6 + 32) = off_1E1BB96B0;
    *(_QWORD *)v6 = off_1E1BB95A8;
    *(_QWORD *)(v6 + 8) = v4;
    *(_QWORD *)(v6 + 16) = v5;
    AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>((char *)v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/StructureNodeImpl.cpp", 118, 1, v9);
    v7 = v9[0];
    if (v9[0])
      v7 = v9[0] + *(_QWORD *)(*(_QWORD *)v9[0] - 136);
    v8 = v9[1];
    *a2 = v7;
    a2[1] = v8;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v10);
}

void sub_1880CCC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 176)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 176)]);
  return std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880CCDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::Iterator(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  AdobeXMPCore_Int::StructureNodeImpl::Iterator((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2);
}

uint64_t AdobeXMPCore_Int::StructureNodeImpl::ChildCount(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = *((_QWORD *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ChildCount(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ChildCount((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 608)));
}

_QWORD *AdobeXMPCore_Int::StructureNodeImpl::ConvertToStructureNode@<X0>(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  (**(void (***)(char *))((char *)this + *(_QWORD *)(*(_QWORD *)this - 880)))((char *)this + *(_QWORD *)(*(_QWORD *)this - 880));
  result = std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(v7, (uint64_t)this, 8, 1);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 792);
  v6 = v7[1];
  *a2 = v5;
  a2[1] = v6;
  return result;
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::StructureNodeImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 880)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 880)]);
  return std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880CCFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ConvertToStructureNode@<X0>(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ConvertToStructureNode((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::HasContent(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  _BOOL8 v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = *((_QWORD *)this + 3) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

BOOL `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::HasContent(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  return AdobeXMPCore_Int::StructureNodeImpl::HasContent((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 232)));
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 *v40;

  v39 = 0uLL;
  ((void (*)(__int128 *__return_ptr, uint64_t **, _QWORD *, _QWORD *))(*a1)[92])(&v39, a1, a4, a4);
  v10 = v39;
  if (!(_QWORD)v39)
  {
    ((void (*)(__int128 *__return_ptr, uint64_t **, uint64_t, uint64_t))(*a1)[93])(&v35, a1, a2, a3);
    v15 = v35;
    v35 = 0uLL;
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    v39 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v38, (char *)a1 + *(*a1 - 113) + 8, 1);
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v38);
    v22 = a4[1];
    *(_QWORD *)&v35 = *a4;
    *((_QWORD *)&v35 + 1) = v22;
    if (v22)
    {
      v23 = (unint64_t *)(v22 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)a5[1];
    v36 = *a5;
    v37 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v40 = &v35;
    v28 = std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>(a1 + 1, &v35, (uint64_t)&std::piecewise_construct, &v40);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100]((_QWORD *)(v28 + 64), (uint64_t *)&v39);
    v29 = v37;
    if (v37)
    {
      v30 = (unint64_t *)&v37->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10 == 0;
}

void sub_1880CD29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  return AdobeXMPCore_Int::StructureNodeImpl::ValidateNameOrNameSpaceChangeForAChild((uint64_t **)((char *)a1 + *(_QWORD *)(*a1 - 632)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::StructureNodeImpl::ClearContents(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  v2 = (char *)this + 8;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 1);
  v3 = (char *)*((_QWORD *)this + 1);
  v4 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    do
    {
      v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 8) + 280))(*((_QWORD *)v3 + 8));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, 0);
      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy((uint64_t)v2, *((_QWORD **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v4;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
}

void sub_1880CD3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::ClearContents(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::ClearContents((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 704)));
}

void AdobeXMPCore_Int::StructureNodeImpl::CloneContents(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  char *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[3];

  memset(v45, 0, sizeof(v45));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v45, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v44 = 0uLL;
  if (!(_DWORD)a2 || *((_QWORD *)this + 3) || !(_DWORD)a3 && a4)
  {
    v10 = *(_QWORD *)(*(_QWORD *)this - 880);
    v11 = *(std::__shared_weak_count **)((char *)this + v10 + 16);
    v41 = *(_QWORD *)((char *)this + v10 + 8);
    v42 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v10 = *(_QWORD *)(*(_QWORD *)this - 880);
    }
    v14 = (char *)this + v10;
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 4);
    v40[0] = *((_QWORD *)v14 + 3);
    v40[1] = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode(&v41, v40, &v43);
    v18 = v43;
    v43 = 0uLL;
    v44 = v18;
    if (v15)
    {
      v19 = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v21 = v42;
    if (v42)
    {
      v22 = (unint64_t *)&v42->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (char *)this + 16;
    v25 = (char *)*((_QWORD *)this + 1);
    if (v25 != (char *)this + 16)
    {
      do
      {
        v43 = 0uLL;
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v25 + 8) + 264))(&v43, *((_QWORD *)v25 + 8), a2, a3);
        if ((_QWORD)v43)
          (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v44 + *(_QWORD *)(*(_QWORD *)v44 - 688)) + 520))(v44 + *(_QWORD *)(*(_QWORD *)v44 - 688), &v43);
        v26 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
        if (*((_QWORD *)&v43 + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = (char *)*((_QWORD *)v25 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(char **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (char *)*((_QWORD *)v25 + 2);
            v31 = *(_QWORD *)v30 == (_QWORD)v25;
            v25 = v30;
          }
          while (!v31);
        }
        v25 = v30;
      }
      while (v30 != v24);
    }
    v32 = (_QWORD *)v44;
    if ((a2 & 1) != 0)
    {
      v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v44 + *(_QWORD *)(*(_QWORD *)v44 - 688)) + 560))(v44 + *(_QWORD *)(*(_QWORD *)v44 - 688));
      if (a4)
        v34 = a3;
      else
        v34 = 1;
      if (!v33 && (v34 & 1) != 0)
        goto LABEL_49;
    }
    else if (!(_QWORD)v44)
    {
      v35 = 0;
      goto LABEL_47;
    }
    v35 = (char *)v32 + *(_QWORD *)(*v32 - 544);
LABEL_47:
    v36 = *((_QWORD *)&v44 + 1);
    *(_QWORD *)a5 = v35;
    *((_QWORD *)a5 + 1) = v36;
    goto LABEL_48;
  }
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
LABEL_48:
  a5 = &v44;
LABEL_49:
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v45);
}

void sub_1880CD6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a18);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IStructureNode_I::CreateStructureNode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  AdobeXMPCore_Int::StructureNodeImpl *v6;
  AdobeXMPCore_Int::IUTF8String_I *v7;
  char *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  const char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v6 = (AdobeXMPCore_Int::StructureNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC8);
  if (*a1)
  {
    v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
    if (*a1)
    {
      v8 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
LABEL_6:
  if (*a2)
  {
    v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
    if (*a2)
    {
      v10 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
      goto LABEL_11;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_11:
  AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(v6, v7, v8, v9, v10);
  (**(void (***)(char *))((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 880)))((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 880));
  result = std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(v14, (uint64_t)v6, 8, 1);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 792);
  v13 = v14[1];
  *a3 = v12;
  a3[1] = v13;
  return result;
}

void sub_1880CD834(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::CloneContents(AdobeXMPCore_Int::StructureNodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  AdobeXMPCore_Int::StructureNodeImpl::CloneContents((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 712)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::StructureNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v2 + 8) + 216))(*((_QWORD *)v2 + 8));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::resetChangesForChildren((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 720)));
}

BOOL AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  v5 = *a2;
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3);
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v5 + 168))(v5, 0, v6, a3, 0, v7);
  result = 1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v8)
      return 0;
    v9 = a2[2];
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 208))(v9);
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a3[2] + 208))(a3[2]);
    if (((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)v9 + 168))(v9, 0, v10, a3 + 2, 0, v11) & 0x80000000) == 0)return 0;
  }
  return result;
}

_QWORD *AdobeXMPCore::IStructureNode_v1::CreateStructureNode@<X0>(AdobeXMPCore::IStructureNode_v1 *this@<X0>, char *a2@<X1>, const char *a3@<X3>, AdobeXMPCore_Int::IUTF8String_I *a4@<X2>, _QWORD *a5@<X8>)
{
  AdobeXMPCore_Int::StructureNodeImpl *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v10 = (AdobeXMPCore_Int::StructureNodeImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xC8);
  AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(v10, this, a2, a4, a3);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::StructureNodeImpl>((char *)v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/StructureNodeImpl.cpp", 228, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 792);
  v13 = v14[1];
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880CDA94(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 48), (uint64_t *)&off_1E1BAA9E8);
  *((_QWORD *)this + 22) = off_1E1B9B868;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this + 152), (uint64_t *)off_1E1BAAA38);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this)
{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 24)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 56)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(AdobeXMPCore_Int::StructureNodeImpl *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 864)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 792)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 800)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 808)) = a2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 816)) = a2[10];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 824)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 872)) = a2[12];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 880)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 888)) = a2[14];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 904)) = a2[15];
  std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

uint64_t std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  AdobeXMPCore_Int::IMemoryAllocator_I *v4;
  uint64_t MemoryAllocator;

  if (a2)
  {
    v3 = result;
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(result, *a2);
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::destroy(v3, a2[1]);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 8));
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, a2);
  }
  return result;
}

uint64_t std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::find<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v2 = a1 + 8;
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, v3 + 4, a2);
    v6 = v3 + 1;
    if (!(_DWORD)a1)
    {
      v6 = v3;
      v5 = (uint64_t)v3;
    }
    v3 = (_QWORD *)*v6;
  }
  while (*v6);
  if (v5 == v2 || AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, a2, (_QWORD *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  AdobeXMPCore_Int::IMemoryAllocator_I *v4;
  uint64_t MemoryAllocator;

  v3 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, a2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 8));
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
  v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
  MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>(AdobeXMPCore_Int::IMemoryAllocator_I *a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>(a1, a4, v8);
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at((uint64_t **)a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, a3, v4 + 4);
        if (!(_DWORD)a1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      a1 = AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName::operator()(a1, v8, a3);
      if (!(_DWORD)a1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName const&>,std::tuple<>>@<X0>(AdobeXMPCore_Int::IMemoryAllocator_I *a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  char *v5;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v5 = (char *)a1 + 8;
  a3[2] = 0;
  MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  result = (_QWORD *)(**MemoryAllocator)(MemoryAllocator, 80);
  *a3 = result;
  a3[1] = v5;
  v8 = *a2;
  v9 = (*a2)[1];
  result[4] = **a2;
  result[5] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = v8[2];
  v12 = v8[3];
  result[6] = v13;
  result[7] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  result[8] = 0;
  result[9] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::GetActualINodeIterator(AdobeXMPCore_Int::INodeIterator_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 136);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1E1BAAB90);
  return a1;
}

void AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1E1BAAB90);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::GetNodeType(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 16))
    return 0;
  v2 = *(char **)(v1 + 64);
  (**(void (***)(char *))&v2[*(_QWORD *)(*(_QWORD *)v2 - 56)])(&v2[*(_QWORD *)(*(_QWORD *)v2 - 56)]);
  std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v8, (uint64_t)v2, 8, 1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_1880CE128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::GetNode@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  char *v4;

  v3 = result[1];
  if (v3 == result[2])
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v4 = *(char **)(v3 + 64);
    (**(void (***)(char *))&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)])(&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)]);
    return std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4, 8, 1);
  }
  return result;
}

char *AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::Next@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v2 = (uint64_t)result;
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  v5 = (_QWORD *)v4[1];
  if (v5)
  {
    do
    {
      v6 = v5;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      v6 = (_QWORD *)v4[2];
      v7 = *v6 == (_QWORD)v4;
      v4 = v6;
    }
    while (!v7);
  }
  *((_QWORD *)result + 1) = v6;
  if (v6 == *((_QWORD **)result + 2))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    (**(void (***)(char *))&result[*(_QWORD *)(*(_QWORD *)result - 176)])(&result[*(_QWORD *)(*(_QWORD *)result - 176)]);
    result = (char *)std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(v10, v2, 8, 1);
    v8 = v10[0];
    if (v10[0])
      v8 = v10[0] + *(_QWORD *)(*(_QWORD *)v10[0] - 136);
    v9 = v10[1];
    *a2 = v8;
    a2[1] = v9;
  }
  return result;
}

void `virtual thunk to'AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>::~TNodeIteratorImpl(_QWORD *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), (uint64_t *)&off_1E1BAAB90);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1E1BAAB90);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 32), (uint64_t *)&off_1E1BAAB90);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1E1BAAB90);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC7A0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880CE368(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 176) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880CE394(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 176) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__map_iterator<std::__tree_iterator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__tree_node<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,void *> *,long>>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::StructureNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::StructureNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC730;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880CE4B4(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 880) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880CE4E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 880) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::StructureNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::StructureNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__emplace_unique_key_args<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::piecewise_construct_t const&,std::tuple<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD **a4)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  _OWORD *v10;
  uint64_t v12;

  v12 = 0;
  v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,std::__map_value_compare<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>,AdobeXMPCore_Int::StructureNodeImpl::CompareQualifiedName,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName,std::shared_ptr<AdobeXMPCore::INode_v1>>>>::__find_equal<AdobeXMPCore_Int::StructureNodeImpl::QualifiedName>((uint64_t)a1, &v12, a2);
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v6);
    v7 = (**MemoryAllocator)(MemoryAllocator, 80);
    v10 = *a4;
    *(_OWORD *)(v7 + 32) = **a4;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *(_OWORD *)(v7 + 48) = v10[1];
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 72) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL TIFF_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  int v8;

  if (a1 != 1414088262)
    TIFF_CheckFormat();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0, 0);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, 0, 1);
  result = 0;
  if (v4 - v5 >= 26)
  {
    v8 = 0;
    (**(void (***)(uint64_t, int *, uint64_t, _QWORD))a3)(a3, &v8, 4, 0);
    return v8 == 2771273 || v8 == 704662861;
  }
  return result;
}

TIFF_MetaHandler *TIFF_MetaHandlerCTor(XMPFiles *a1)
{
  TIFF_MetaHandler *v2;

  v2 = (TIFF_MetaHandler *)operator new();
  TIFF_MetaHandler::TIFF_MetaHandler(v2, a1);
  return v2;
}

void sub_1880CE75C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C40773A3033);
  _Unwind_Resume(a1);
}

void TIFF_MetaHandler::TIFF_MetaHandler(TIFF_MetaHandler *this, XMPFiles *a2)
{
  _QWORD *v4;

  XMPFileHandler::XMPFileHandler(this);
  *v4 = &off_1E1BB0E08;
  TIFF_FileWriter::TIFF_FileWriter((TIFF_FileWriter *)(v4 + 12));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = 8831;
  *((_BYTE *)this + 20) = 0;
}

void sub_1880CE7CC(_Unwind_Exception *a1)
{
  void **v1;

  XMPFileHandler::~XMPFileHandler(v1);
  _Unwind_Resume(a1);
}

void TIFF_MetaHandler::~TIFF_MetaHandler(TIFF_MetaHandler *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E1BB0E08;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  v3 = *((_QWORD *)this + 52);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  TIFF_FileWriter::~TIFF_FileWriter((TIFF_MetaHandler *)((char *)this + 96));
  XMPFileHandler::~XMPFileHandler((void **)this);
}

{
  TIFF_MetaHandler::~TIFF_MetaHandler(this);
  JUMPOUT(0x18D761C30);
}

uint64_t TIFF_MetaHandler::CacheFileData(TIFF_MetaHandler *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int (*v4)(_QWORD);
  unsigned int v5;
  uint64_t result;
  _QWORD *exception;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;

  if (*((_BYTE *)this + 21))
    TIFF_MetaHandler::CacheFileData();
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2[29];
  v4 = (unsigned int (*)(_QWORD))v2[34];
  if (v4 && v4(v2[35]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 12;
    v8 = "TIFF_MetaHandler::CacheFileData - User abort";
    goto LABEL_14;
  }
  TIFF_FileWriter::ParseFileStream((uint64_t)this + 96, v3);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0xC612u, (uint64_t)&v12))
  {
    v5 = *v13;
    if (TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0xC613u, (uint64_t)&v12))
      v5 = *v13;
    if (v5 >= 2)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      v8 = "DNG version beyond 1.x";
LABEL_14:
      exception[1] = v8;
      *((_BYTE *)exception + 16) = 0;
    }
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  result = TIFF_FileWriter::GetTag((TIFF_MetaHandler *)((char *)this + 96), 0, 0x2BCu, (uint64_t)&v9);
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 4) = TIFF_FileWriter::GetValueOffset((TIFF_MetaHandler *)((char *)this + 96), 0, 0x2BCu);
    *((_QWORD *)this + 5) = v11;
    *((_WORD *)this + 24) = 257;
    result = MEMORY[0x18D761A20]((char *)this + 56, v10);
    *((_BYTE *)this + 21) = 1;
  }
  return result;
}

uint64_t TIFF_MetaHandler::ProcessXMP(TIFF_MetaHandler *this)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  IPTC_Manager *v5;
  _QWORD *v6;
  void (**v7)(IPTC_Reader *__hidden, unsigned __int8, const void *, unsigned int, uint64_t);
  unsigned int (***v8)(_QWORD, uint64_t, void **);
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  unsigned int v13;
  const void *v14;
  unsigned int v15;
  const void *v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unsigned int v27[2];
  uint64_t v28;
  uint64_t v29;
  PhotoDataUtils *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  *((_BYTE *)this + 22) = 1;
  v2 = *(_DWORD *)(*((_QWORD *)this + 1) + 240);
  v3 = operator new();
  if ((v2 & 2) != 0)
  {
    *(_QWORD *)v3 = &off_1E1BB0BD8;
    *(_DWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 8) = 0;
    *(_BYTE *)(v3 + 12) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = v3 + 40;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *((_QWORD *)this + 51) = v3;
    v4 = (_QWORD *)operator new();
    v5 = (IPTC_Manager *)v4;
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = 0;
    v6 = v4 + 2;
    *(_QWORD *)((char *)v4 + 39) = 0;
    v7 = (void (**)(IPTC_Reader *__hidden, unsigned __int8, const void *, unsigned int, uint64_t))&off_1E1BABE18;
  }
  else
  {
    *(_QWORD *)v3 = &off_1E1BB1230;
    *(_BYTE *)(v3 + 8) = 0;
    *(_DWORD *)(v3 + 12) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = v3 + 32;
    *((_QWORD *)this + 51) = v3;
    v4 = (_QWORD *)operator new();
    v5 = (IPTC_Manager *)v4;
    v4[2] = 0;
    v6 = v4 + 2;
    v4[3] = 0;
    v4[4] = 0;
    *(_QWORD *)((char *)v4 + 39) = 0;
    v7 = &off_1E1BABDD8;
  }
  *v4 = v7;
  v4[1] = v6;
  *((_QWORD *)this + 52) = v5;
  v8 = (unsigned int (***)(_QWORD, uint64_t, void **))*((_QWORD *)this + 51);
  v10 = (char *)this + 96;
  v9 = *((_QWORD *)this + 12);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v11 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t *))(v9 + 24))((char *)this + 96, 0, 34377, &v32);
  if (v11)
  {
    ((void (*)(unsigned int (***)(_QWORD, uint64_t, void **), uint64_t, _QWORD, uint64_t))(*v8)[5])(v8, v33, v34, 1);
    v29 = 0;
    v30 = 0;
    v31 = 0;
    if ((**v8)(v8, 1058, (void **)&v29))
    {
      (*(void (**)(char *, PhotoDataUtils *, _QWORD))(*(_QWORD *)v10 + 216))((char *)this + 96, v30, HIDWORD(v29));
      if ((v2 & 2) != 0)
        ((void (*)(unsigned int (***)(_QWORD, uint64_t, void **), uint64_t))(*v8)[2])(v8, 1058);
    }
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)v10 + 24))((char *)this + 96, 0, 33723, &v29);
  if (v12)
  {
    v26 = 0;
    *(_QWORD *)v27 = 0;
    v28 = 0;
    if (v11)
    {
      v13 = (**v8)(v8, 1061, (void **)&v26);
      v15 = -1;
      if (HIDWORD(v26) == 16)
      {
        if (v13)
        {
          v15 = PhotoDataUtils::CheckIPTCDigest(v30, (const void *)v31, *(_QWORD **)v27, v14);
          if (!v15 && ((0x3F38uLL >> SBYTE2(v29)) & 1) != 0 && (_DWORD)v31)
          {
            v17 = (char *)v30 + v31 - 1;
            if (WORD1(v29))
            {
              do
              {
                if (*v17)
                  break;
                --v17;
              }
              while (v17 >= (_BYTE *)v30 + v31 - kTIFF_TypeSizes[WORD1(v29)]);
            }
            v15 = PhotoDataUtils::CheckIPTCDigest(v30, (const void *)((_DWORD)v17 - (_DWORD)v30 + 1), *(_QWORD **)v27, v16);
          }
        }
      }
    }
    else
    {
      v15 = -1;
    }
    v18 = 6;
  }
  else
  {
    v15 = 1;
    v18 = 4;
  }
  v19 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
    v20 = *((_QWORD *)this + 8);
  else
    v20 = *((unsigned __int8 *)this + 79);
  v21 = *((_BYTE *)this + 21);
  if (v20)
  {
    if (!*((_BYTE *)this + 21))
      TIFF_MetaHandler::ProcessXMP();
    if ((v19 & 0x80) != 0)
    {
      v22 = (char *)*((_QWORD *)this + 7);
      v19 = *((_QWORD *)this + 8);
    }
    else
    {
      v22 = (char *)this + 56;
    }
    TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v22, v19, 0);
  }
  if ((_DWORD)v31)
    IPTC_Manager::ParseMemoryDataSets(v5, (char *)v30, (int)v31, 1);
  if (v20)
    v23 = 0;
  else
    v23 = v12;
  if ((v23 & (v15 == 1)) != 0)
    v24 = 0xFFFFFFFFLL;
  else
    v24 = v15;
  result = ImportPhotoData((uint64_t)this + 96, v5, v8, v24, (uint64_t)this + 80, v18 | v21);
  *((_BYTE *)this + 21) = 1;
  return result;
}

void sub_1880CED4C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880CECD8);
}

void TIFF_MetaHandler::UpdateFile(TIFF_MetaHandler *this, int a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  TIFF_FileWriter *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  int IsLegacyChanged;
  __n128 v14;
  uint64_t v15;
  XMP_ProgressTracker *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  char v28;
  uint64_t v29;

  if (a2)
    TIFF_MetaHandler::UpdateFile();
  v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
  v4 = *((_DWORD *)this + 10);
  if (*((_QWORD *)this + 4) == -1)
    v5 = 0;
  else
    v5 = *((_QWORD *)this + 4);
  if (v4 == -1)
    v6 = 0;
  else
    v6 = v4;
  v7 = (char *)this + 80;
  v8 = (TIFF_MetaHandler *)((char *)this + 96);
  ExportPhotoData(1414088262, (uint64_t)this + 80, (uint64_t)this + 96, *((_QWORD *)this + 52), *((_QWORD *)this + 51));
  if (v5 != 0 && (_DWORD)v6 != 0)
    v9 = 576;
  else
    v9 = 64;
  v10 = (char *)this + 56;
  TXMPMeta<std::string>::SerializeToBuffer((uint64_t)v7, (uint64_t)this + 56, v9, v6);
  if (v5 != 0 && (_DWORD)v6 != 0)
  {
    if (*((char *)this + 79) < 0)
      v11 = *((_QWORD *)this + 8);
    else
      v11 = *((unsigned __int8 *)this + 79);
    v12 = v11 <= (int)v6;
  }
  else
  {
    v12 = 0;
  }
  IsLegacyChanged = TIFF_FileWriter::IsLegacyChanged(v8);
  v15 = *((_QWORD *)this + 1);
  v16 = *(XMP_ProgressTracker **)(v15 + 288);
  if (!IsLegacyChanged && v12)
  {
    LODWORD(v17) = *((char *)this + 79);
    if ((v17 & 0x80000000) != 0)
    {
      v18 = *((_QWORD *)this + 8);
      v19 = *((int *)this + 10);
      if (v18 >= v19)
      {
        v20 = *(_QWORD *)(v15 + 232);
        goto LABEL_37;
      }
    }
    else
    {
      v18 = *((unsigned __int8 *)this + 79);
      v19 = *((int *)this + 10);
      if (v18 >= v19)
      {
        v20 = *(_QWORD *)(v15 + 232);
LABEL_28:
        v22 = 0;
        v23 = v17;
        goto LABEL_38;
      }
    }
    std::string::append((std::string *)((char *)this + 56), v19 - v18, 32);
    LODWORD(v17) = *((char *)this + 79);
    v20 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_28;
LABEL_37:
    v23 = *((_QWORD *)this + 8);
    v22 = 1;
LABEL_38:
    if (v23 != (int)v6)
      TIFF_MetaHandler::UpdateFile();
    if (v16)
    {
      if (!*((_BYTE *)v16 + 32))
      {
        if (v22)
          v17 = *((_QWORD *)this + 8);
        else
          v17 = v17;
        XMP_ProgressTracker::BeginWork(v16, (float)v17);
        v28 = 1;
LABEL_50:
        (*(void (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)v20 + 16))(v20, v5, 0, v14);
        if (*((char *)this + 79) < 0)
        {
          v10 = (char *)*((_QWORD *)this + 7);
          v29 = *((_QWORD *)this + 8);
        }
        else
        {
          v29 = *((unsigned __int8 *)this + 79);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v20 + 8))(v20, v10, v29);
        if ((v28 & 1) == 0)
          goto LABEL_35;
LABEL_34:
        XMP_ProgressTracker::WorkComplete(v16, v25, v26, v27);
        goto LABEL_35;
      }
      if (v22)
        v17 = *((_QWORD *)this + 8);
      else
        v17 = v17;
      v14.n128_f32[0] = XMP_ProgressTracker::AddTotalWork(v16, (float)v17);
    }
    v28 = 0;
    goto LABEL_50;
  }
  if (v16 && !*((_BYTE *)v16 + 32))
  {
    XMP_ProgressTracker::BeginWork(*(XMP_ProgressTracker **)(v15 + 288), 0.0);
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  if (*((char *)this + 79) < 0)
  {
    v24 = *((_DWORD *)this + 16);
    v10 = (char *)*((_QWORD *)this + 7);
  }
  else
  {
    v24 = *((unsigned __int8 *)this + 79);
  }
  TIFF_FileWriter::SetTag(v8, 0, 0x2BCu, 7, v24, v10);
  TIFF_FileWriter::UpdateFileStream((uint64_t)v8, v3, v16);
  if (v21)
    goto LABEL_34;
LABEL_35:
  *((_BYTE *)this + 23) = 0;
}

void sub_1880CEFF0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void TIFF_MetaHandler::WriteTempFile(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  XMP_ProgressTracker *v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  _QWORD *exception;

  v4 = *(_QWORD *)(a1[1] + 232);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  if (v5 >= 0x100000000)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    exception[1] = "TIFF fles can't exceed 4GB";
    *((_BYTE *)exception + 16) = 0;
  }
  v6 = a1[1];
  v7 = *(XMP_ProgressTracker **)(v6 + 288);
  if (v7)
    XMP_ProgressTracker::BeginWork(*(XMP_ProgressTracker **)(v6 + 288), (float)v5);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
  XIO::Copy(v4, a2);
  v8 = *a1;
  *(_QWORD *)(a1[1] + 232) = a2;
  (*(void (**)(uint64_t *, _QWORD))(v8 + 72))(a1, 0);
  *(_QWORD *)(a1[1] + 232) = v4;
  if (v7)
    XMP_ProgressTracker::WorkComplete(v7, v9, v10, v11);
}

void sub_1880CF134(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  *(_QWORD *)(*(_QWORD *)(v2 + 8) + 232) = v1;
  __cxa_rethrow();
}

void sub_1880CF148(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void IPTC_Reader::SetDataSet_UTF8(IPTC_Reader *this, unsigned __int8 a2, const void *a3)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void IPTC_Reader::DeleteDataSet(IPTC_Reader *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t IPTC_Reader::IsChanged(IPTC_Reader *this)
{
  return 0;
}

void IPTC_Reader::UpdateMemoryDataSets(IPTC_Reader *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for IPTC_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void IPTC_Reader::~IPTC_Reader(void **this)
{
  IPTC_Manager::~IPTC_Manager(this);
  JUMPOUT(0x18D761C30);
}

void IPTC_Manager::~IPTC_Manager(void **this)
{
  *this = &unk_1E1BAC270;
  if (*((_BYTE *)this + 45))
    free(this[4]);
  std::__tree<unsigned long long>::destroy((uint64_t)(this + 1), this[2]);
}

void TIFF_CheckFormat()
{
  __assert_rtn("TIFF_CheckFormat", "TIFF_Handler.cpp", 52, "format == kXMP_TIFFFile");
}

void TIFF_MetaHandler::CacheFileData()
{
  __assert_rtn("CacheFileData", "TIFF_Handler.cpp", 123, "! this->containsXMP");
}

void TIFF_MetaHandler::ProcessXMP()
{
  __assert_rtn("ProcessXMP", "TIFF_Handler.cpp", 262, "this->containsXMP");
}

void TIFF_MetaHandler::UpdateFile()
{
  __assert_rtn("UpdateFile", "TIFF_Handler.cpp", 294, "! doSafeUpdate");
}

{
  __assert_rtn("UpdateFile", "TIFF_Handler.cpp", 362, "this->xmpPacket.size() == (size_t)oldPacketLength");
}

void AdobeXMPCore_Int::PathImpl::RegisterNameSpacePrefixMap(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = a1 + 32;
  *a3 = *(_QWORD *)(a1 + 32);
  a3[1] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 112))(&v11);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v5, &v11);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1880CF3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::PathImpl::Serialize(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  AdobeXMPCore_Int::IErrorNotifier_I *v106;
  void *v107;
  unint64_t *v108;
  unint64_t v109;
  void (***ErrorNotifier)(_QWORD, void **);
  _OWORD *exception;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  void *__p[2];
  uint64_t v135;
  _OWORD v136[4];
  void *v137[2];
  __int128 v138;
  __int128 v139;
  _OWORD v140[9];
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  __int128 v148;
  uint64_t v149;
  std::__shared_weak_count *v150;

  v6 = (_QWORD *)a1[2];
  *a3 = 0;
  a3[1] = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, a3);
  v7 = (_QWORD *)a1[1];
  if (v7 != v6)
  {
    v8 = *MEMORY[0x1E0DE4F60];
    v113 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v9 = 1;
    v112 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v149 = 0;
      v150 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v7 + 40))(&v149);
      v148 = 0uLL;
      v10 = *a2;
      if (*a2 || !a1[4] && (std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v148, &v149), (v10 = *a2) != 0))
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 128))(v10);
        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v11 + 40))(v136, v11, &v149);
        v12 = v136[0];
        v136[0] = 0uLL;
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
        v148 = v12;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v16 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
        if (*((_QWORD *)&v136[0] + 1))
        {
          v17 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
      if (!(_QWORD)v148)
      {
        v19 = a1[4];
        if (!v19)
          goto LABEL_171;
        v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 128))(v19);
        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v20 + 40))(v136, v20, &v149);
        v21 = v136[0];
        v136[0] = 0uLL;
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
        v148 = v21;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
        if (*((_QWORD *)&v136[0] + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (!(_QWORD)v148)
        {
LABEL_171:
          v136[0] = 0uLL;
          AdobeXMPCore_Int::IError_I::CreateError(100, 1, 2, v136);
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(*(_QWORD *)&v136[0]
                                                                            + *(_QWORD *)(**(_QWORD **)&v136[0] - 304))
                                                                + 120))(*(_QWORD *)&v136[0] + *(_QWORD *)(**(_QWORD **)&v136[0] - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 62);
          v106 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(*(_QWORD *)&v136[0] + *(_QWORD *)(**(_QWORD **)&v136[0] - 304)) + 112))(*(_QWORD *)&v136[0]+ *(_QWORD *)(**(_QWORD **)&v136[0] - 304), "A required entry missing in the provided mapping table", -1);
          if (*(_QWORD *)&v136[0])
            v107 = (void *)(*(_QWORD *)&v136[0] + *(_QWORD *)(**(_QWORD **)&v136[0] - 304));
          else
            v107 = 0;
          __p[0] = v107;
          __p[1] = *((void **)&v136[0] + 1);
          if (*((_QWORD *)&v136[0] + 1))
          {
            v108 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          ErrorNotifier = (void (***)(_QWORD, void **))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v106);
          (**ErrorNotifier)(ErrorNotifier, __p);
          exception = __cxa_allocate_exception(0x10uLL);
          *exception = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
        }
      }
      switch((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 56))(*v7))
      {
        case 1u:
          if ((v9 & 1) == 0)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 40))(&v146, *a3, "/", -1);
            v28 = v147;
            if (v147)
            {
              v29 = (unint64_t *)&v147->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
          (*(void (**)(void **__return_ptr, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)*a3 + 48))(__p, *a3, &v148, 0, -1);
          (*(void (**)(_OWORD *__return_ptr, void *, const char *, uint64_t))(*(_QWORD *)__p[0] + 40))(v136, __p[0], ":", -1);
          v31 = *(_QWORD *)&v136[0];
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v7 + 48))(&v142);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v31 + 48))(&v144, v31, &v142, 0, -1);
          v32 = v145;
          if (v145)
          {
            v33 = (unint64_t *)&v145->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = v143;
          if (v143)
          {
            v36 = (unint64_t *)&v143->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
          if (*((_QWORD *)&v136[0] + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v41 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v42 = (unint64_t *)((char *)__p[1] + 8);
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            goto LABEL_152;
          }
          break;
        case 2u:
          v141 = 0;
          v139 = 0u;
          memset(v140, 0, sizeof(v140));
          *(_OWORD *)v137 = 0u;
          v138 = 0u;
          memset(v136, 0, sizeof(v136));
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v136);
          (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 64))(*v7);
          std::ostream::operator<<();
          __p[0] = 0;
          __p[1] = 0;
          v135 = 0;
          std::stringbuf::str();
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 40))(&v130, *a3, "[", -1);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v130 + 40))(&v142);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v142 + 40))(&v132, v142, "]", -1);
          v61 = v133;
          if (v133)
          {
            v62 = (unint64_t *)&v133->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v64 = v143;
          if (v143)
          {
            v65 = (unint64_t *)&v143->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = v131;
          if (v131)
          {
            v68 = (unint64_t *)&v131->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          if (SHIBYTE(v135) < 0)
            operator delete(__p[0]);
          *(_QWORD *)&v136[0] = v8;
          *(_QWORD *)((char *)v136 + *(_QWORD *)(v8 - 24)) = v113;
          *((_QWORD *)&v136[0] + 1) = v112;
          if (SHIBYTE(v138) < 0)
            operator delete(v137[1]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D761BE8](v140);
          break;
        case 4u:
          if ((v9 & 1) == 0)
          {
            (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 40))(&v128, *a3, "/", -1);
            v44 = v129;
            if (v129)
            {
              v45 = (unint64_t *)&v129->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
          }
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 40))(&v142, *a3, "@", -1);
          (*(void (**)(void **__return_ptr, uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v142 + 48))(__p, v142, &v148, 0, -1);
          (*(void (**)(_OWORD *__return_ptr, void *, const char *, uint64_t))(*(_QWORD *)__p[0] + 40))(v136, __p[0], ":", -1);
          v47 = *(_QWORD *)&v136[0];
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v7 + 48))(&v130);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v47 + 48))(&v126, v47, &v130, 0, -1);
          v48 = v127;
          if (v127)
          {
            v49 = (unint64_t *)&v127->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = v131;
          if (v131)
          {
            v52 = (unint64_t *)&v131->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
          if (*((_QWORD *)&v136[0] + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          v57 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v58 = (unint64_t *)((char *)__p[1] + 8);
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v41 = v143;
          if (v143)
          {
            v60 = (unint64_t *)&v143->__shared_owners_;
            do
              v43 = __ldaxr(v60);
            while (__stlxr(v43 - 1, v60));
            goto LABEL_152;
          }
          break;
        case 8u:
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)*a3 + 40))(&v118, *a3, "[", -1);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v118 + 40))(&v120, v118, "?", -1);
          v70 = v120;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v7 + 48))(&v116);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v70 + 48))(&v122, v70, &v116, 0, -1);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v122 + 40))(&v130, v122, "=", -1);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v130 + 40))(&v142, v130, "\"", -1);
          v71 = v142;
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v7 + 72))(&v114);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v71 + 48))(__p, v71, &v114, 0, -1);
          (*(void (**)(_OWORD *__return_ptr, void *, const char *, uint64_t))(*(_QWORD *)__p[0] + 40))(v136, __p[0], "\"", -1);
          (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)&v136[0] + 40))(&v124, *(_QWORD *)&v136[0], "]", -1);
          v72 = v125;
          if (v125)
          {
            v73 = (unint64_t *)&v125->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v75 = (std::__shared_weak_count *)*((_QWORD *)&v136[0] + 1);
          if (*((_QWORD *)&v136[0] + 1))
          {
            v76 = (unint64_t *)(*((_QWORD *)&v136[0] + 1) + 8);
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          v78 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v79 = (unint64_t *)((char *)__p[1] + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = v115;
          if (v115)
          {
            v82 = (unint64_t *)&v115->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v84 = v143;
          if (v143)
          {
            v85 = (unint64_t *)&v143->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = v131;
          if (v131)
          {
            v88 = (unint64_t *)&v131->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          v90 = v123;
          if (v123)
          {
            v91 = (unint64_t *)&v123->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          v93 = v117;
          if (v117)
          {
            v94 = (unint64_t *)&v117->__shared_owners_;
            do
              v95 = __ldaxr(v94);
            while (__stlxr(v95 - 1, v94));
            if (!v95)
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
            }
          }
          v96 = v121;
          if (v121)
          {
            v97 = (unint64_t *)&v121->__shared_owners_;
            do
              v98 = __ldaxr(v97);
            while (__stlxr(v98 - 1, v97));
            if (!v98)
            {
              ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
              std::__shared_weak_count::__release_weak(v96);
            }
          }
          v41 = v119;
          if (v119)
          {
            v99 = (unint64_t *)&v119->__shared_owners_;
            do
              v43 = __ldaxr(v99);
            while (__stlxr(v43 - 1, v99));
LABEL_152:
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          break;
        default:
          break;
      }
      if ((v9 & 1) != 0)
        v9 = 0;
      v100 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
      if (*((_QWORD *)&v148 + 1))
      {
        v101 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      v103 = v150;
      if (v150)
      {
        v104 = (unint64_t *)&v150->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v7 += 2;
    }
    while (v7 != v6);
  }
}

void sub_1880D00A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v41 - 128);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v41 - 104);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v40);
  _Unwind_Resume(a1);
}

uint64_t *AdobeXMPCore_Int::PathImpl::AppendPathSegment(uint64_t a1, __int128 *a2)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v10;
  char *v11;
  uint64_t v12;

  if (!*(_QWORD *)a2)
  {
    v11 = 0;
    v12 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v11);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 120))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 111);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)] + 112))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], "Parameters to PathImpl::AppendPathSegment are not as expected", -1);
    v4 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)]
                                                                                         + 136))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 304)], *(_QWORD *)a2);
    v5 = 0;
    if (v11)
      v5 = &v11[*(_QWORD *)(*(_QWORD *)v11 - 304)];
    *(_QWORD *)&v10 = v5;
    *((_QWORD *)&v10 + 1) = v12;
    if (v12)
    {
      v6 = (unint64_t *)(v12 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v4);
    (**ErrorNotifier)(ErrorNotifier, &v10);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v10;
    v10 = 0uLL;
  }
  return std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 8), a2);
}

void sub_1880D038C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::push_back[abi:ne180100](uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[5];

  v3 = result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v10 = ((uint64_t)v5 - *result) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - *result;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v20[4] = (uint64_t)(result + 2);
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    v15 = (**MemoryAllocator)(MemoryAllocator, 16 * v13);
    v16 = (_OWORD *)(v15 + 16 * v10);
    v20[0] = v15;
    v20[1] = (uint64_t)v16;
    v20[3] = v15 + 16 * v13;
    v17 = *a2;
    *v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20[2] = (uint64_t)(v16 + 1);
    std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__swap_out_circular_buffer(v3, v20);
    v9 = (_QWORD *)v3[1];
    result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(v20);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
    result[1] = (uint64_t)(v5 + 2);
  }
  v3[1] = (uint64_t)v9;
  return result;
}

void sub_1880D04D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::PathImpl::RemovePathSegment@<X0>(_QWORD *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  AdobeXMPCore_Int::IErrorNotifier_I *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = this;
  v23 = a2;
  v4 = this[1];
  v5 = this[2];
  if (a2 - 1 >= (unint64_t)((v5 - v4) >> 4))
  {
    v21 = 0;
    v22 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v21);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 119);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "Requested Index to PathImpl::RemovePathSegment is out of bounds", -1);
    v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = (*(uint64_t (**)(_QWORD *))(*v3 + 80))(v3);
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v13 + 152))(v13, &v20);
    v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                             + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
    v15 = 0;
    if (v21)
      v15 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v16 = (unint64_t *)(v22 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v14);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
  v6 = *(_OWORD *)(v4 + 16 * (a2 - 1));
  *a3 = v6;
  if (*((_QWORD *)&v6 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v4 = this[1];
    v5 = this[2];
  }
  v9 = v4 + 16 * a2;
  v10 = v9 - 16;
  if (v9 != v5)
  {
    v11 = v9 - 16;
    do
    {
      this = (_QWORD *)std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v11, (__int128 *)(v11 + 16));
      v10 += 16;
      v12 = v11 + 32;
      v11 += 16;
    }
    while (v12 != v5);
    v5 = v3[2];
  }
  while (v5 != v10)
  {
    v5 -= 16;
    this = (_QWORD *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v5);
  }
  v3[2] = v10;
  return this;
}

void sub_1880D06FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::PathImpl::GetPathSegment@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  AdobeXMPCore_Int::IErrorNotifier_I *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a2;
  v3 = *(_QWORD *)(this + 8);
  if (a2 - 1 >= (unint64_t)((*(_QWORD *)(this + 16) - v3) >> 4))
  {
    v16 = 0;
    v17 = 0;
    v7 = this;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v16);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 120))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 131);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 112))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "Requested Index to PathImpl::GetPathSegment is out of bounds", -1);
    v8 = &v16[*(_QWORD *)(*(_QWORD *)v16 - 304)];
    *(_QWORD *)&v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 80))(v7);
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v8 + 152))(v8, &v15);
    v9 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)]
                                                                                            + 152))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], &v18);
    v10 = 0;
    if (v16)
      v10 = &v16[*(_QWORD *)(*(_QWORD *)v16 - 304)];
    *(_QWORD *)&v15 = v10;
    *((_QWORD *)&v15 + 1) = v17;
    if (v17)
    {
      v11 = (unint64_t *)(v17 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v9);
    (**ErrorNotifier)(ErrorNotifier, &v15);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v15;
    v15 = 0uLL;
  }
  v4 = *(_OWORD *)(v3 + 16 * (a2 - 1));
  *a3 = v4;
  if (*((_QWORD *)&v4 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void sub_1880D08C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::PathImpl::Size(AdobeXMPCore_Int::PathImpl *this)
{
  return (uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 4;
}

uint64_t AdobeXMPCore_Int::PathImpl::Clear(AdobeXMPCore_Int::PathImpl *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 1);
  while (result != v3)
    result = std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](result - 16);
  *((_QWORD *)this + 2) = v3;
  return result;
}

void AdobeXMPCore_Int::PathImpl::Clone(AdobeXMPCore_Int::PathImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  AdobeXMPCore_Int::IErrorNotifier_I *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = a2;
  v6 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (a2 - 1 >= (unint64_t)(v6 >> 4))
  {
    v34 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v34);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304))
                                                          + 120))(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 151);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304))
                                                          + 112))(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304), "Requested startIndex to PathImpl::Clone is out of bounds", -1);
    v24 = v34 + *(_QWORD *)(*(_QWORD *)v34 - 304);
    *(_QWORD *)&v33 = (*(uint64_t (**)(AdobeXMPCore_Int::PathImpl *))(*(_QWORD *)this + 80))(this);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v24 + 152))(v24, &v33);
    v25 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304))
                                                                                             + 152))(v34 + *(_QWORD *)(*(_QWORD *)v34 - 304), &v35);
    v26 = 0;
    if ((_QWORD)v34)
      v26 = v34 + *(_QWORD *)(*(_QWORD *)v34 - 304);
    *(_QWORD *)&v33 = v26;
    *((_QWORD *)&v33 + 1) = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v25);
    (**ErrorNotifier)(ErrorNotifier, &v33);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v33;
    v33 = 0uLL;
  }
  *a4 = 0;
  a4[1] = 0;
  v9 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x50);
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)v9 = off_1E1BBB900;
  *(_QWORD *)(v9 + 48) = off_1E1BBB9E0;
  *(_QWORD *)(v9 + 56) = off_1E1BBBA48;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 40) = 0;
  AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>((char *)v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 153, 1, &v34);
  if ((_QWORD)v34)
    v10 = v34 + *(_QWORD *)(*(_QWORD *)v34 - 200);
  else
    v10 = 0;
  v11 = *((_QWORD *)&v34 + 1);
  *a4 = v10;
  a4[1] = v11;
  if (a3)
  {
    v12 = (v6 >> 4) - a2;
    v13 = 16 * a2 - 16;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 56))(v10, *((_QWORD *)this + 1) + v13);
      if (!v12)
        break;
      --v12;
      v13 += 16;
      --a3;
    }
    while (a3);
  }
  v14 = *((_QWORD *)this + 4);
  if (v14)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v14 + 112))(&v33);
    v34 = v33;
    v33 = 0uLL;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v10 + 40))(&v31, v10, &v34);
    v15 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1880D0C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 240)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 240)]);
  return std::shared_ptr<AdobeXMPCore_Int::PathImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880D0DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPath_v1::MakeShared@<X0>(_QWORD *this@<X0>, AdobeXMPCore::IPath_v1 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  if (this)
  {
    v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::IPath_v1 *))((char *)this + *(_QWORD *)(*this - 56)))((uint64_t)this + *(_QWORD *)(*this - 56), a2);
    return std::shared_ptr<AdobeXMPCore::IPath_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPath_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4, 8, 1);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

_QWORD *AdobeXMPCore::IPath_v1::CreatePath@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v3 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x50);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)v3 = off_1E1BBB900;
  *(_QWORD *)(v3 + 48) = off_1E1BBB9E0;
  *(_QWORD *)(v3 + 56) = off_1E1BBBA48;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_QWORD *)(v3 + 40) = 0;
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathImpl>((char *)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 178, 1, v7);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 200);
  v6 = v7[1];
  *a1 = v5;
  a1[1] = v6;
  return result;
}

void AdobeXMPCore::IPath_v1::ParsePath()
{
  AdobeXMPCore_Int::IErrorNotifier_I *v0;
  char *v1;
  unint64_t *v2;
  unint64_t v3;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v6;
  char *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 10000, 2, &v7);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 120))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathImpl.cpp", 182);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 112))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "API is not implemented", -1);
  v0 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)] + 128))(&v7[*(_QWORD *)(*(_QWORD *)v7 - 304)], "ParsePath", -1);
  v1 = 0;
  if (v7)
    v1 = &v7[*(_QWORD *)(*(_QWORD *)v7 - 304)];
  *(_QWORD *)&v6 = v1;
  *((_QWORD *)&v6 + 1) = v8;
  if (v8)
  {
    v2 = (unint64_t *)(v8 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v0);
  (**ErrorNotifier)(ErrorNotifier, &v6);
  exception = __cxa_allocate_exception(0x10uLL);
  *exception = v6;
  v6 = 0uLL;
}

void sub_1880D0FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v15 = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t AdobeXMPCore_Int::IPath_I::GetActualIPath(AdobeXMPCore_Int::IPath_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 200);
}

void AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1E1BAB3A0);
}

{
  uint64_t v2;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 56), (uint64_t *)&off_1E1BAB3A0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1E1BAB3A0);
}

{
  AdobeXMPCore_Int::PathImpl::~PathImpl((AdobeXMPCore_Int::PathImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 56), (uint64_t *)&off_1E1BAB3A0);
}

{
  AdobeXMPCore_Int::PathImpl::~PathImpl((AdobeXMPCore_Int::PathImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

void AdobeXMPCore_Int::PathImpl::~PathImpl(AdobeXMPCore_Int::PathImpl *this, uint64_t *a2)
{
  uint64_t v3;
  AdobeXMPCore_Int::IMemoryAllocator_I **v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 232)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 240)) = a2[6];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v4 = (AdobeXMPCore_Int::IMemoryAllocator_I **)((char *)this + 8);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

AdobeXMPCore_Int::IMemoryAllocator_I ***std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](AdobeXMPCore_Int::IMemoryAllocator_I ***result)
{
  AdobeXMPCore_Int::IMemoryAllocator_I **v1;
  AdobeXMPCore_Int::IMemoryAllocator_I *v2;
  AdobeXMPCore_Int::IMemoryAllocator_I ***v3;
  AdobeXMPCore_Int::IMemoryAllocator_I *v4;
  AdobeXMPCore_Int::IMemoryAllocator_I *v5;
  uint64_t MemoryAllocator;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = result;
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v4 - 16);
      while (v4 != v2);
      v5 = **v3;
    }
    v1[1] = v2;
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v4);
    return (AdobeXMPCore_Int::IMemoryAllocator_I ***)(*(uint64_t (**)(uint64_t, AdobeXMPCore_Int::IMemoryAllocator_I *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v5);
  }
  return result;
}

uint64_t *std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)(v4 - 16) = v5;
    v4 -= 16;
    v6 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 8) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t MemoryAllocator;

  v1 = a1;
  v3 = a1[1];
  for (i = a1[2]; i != v3; i = v1[2])
  {
    v1[2] = i - 16;
    a1 = (uint64_t *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](i - 16);
  }
  v4 = *v1;
  if (*v1)
  {
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v4);
  }
  return v1;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::PathImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC960;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880D13C8(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 240) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880D13F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 240) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore::IPath_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPath_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC458;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880D1514(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880D1540(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPath_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPath_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterMemoryAllocator(uint64_t a1, uint64_t a2)
{
  AdobeXMPCore_Int::IMemoryAllocator_I::SetMemoryAllocator(a2);
  return 1;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterMemoryAllocator(uint64_t a1, uint64_t a2)
{
  AdobeXMPCore_Int::IMemoryAllocator_I::SetMemoryAllocator(a2);
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterErrorNotifier(uint64_t a1, uint64_t a2)
{
  AdobeXMPCore_Int::IErrorNotifier_I::SetErrorNotifier(a2);
  return 1;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::RegisterErrorNotifier(uint64_t a1, uint64_t a2)
{
  AdobeXMPCore_Int::IErrorNotifier_I::SetErrorNotifier(a2);
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::DisableMultiThreading(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  *((_BYTE *)this + 8) = 0;
  return 1;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::DisableMultiThreading(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 8) = 0;
  return 1;
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::IsMultiThreaded(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::IsMultiThreaded(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 96) + 8);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::GetActualIConfigurationManager(AdobeXMPCore_Int::IConfigurationManager_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 144);
}

void AdobeXMPCore_Int::ConfigurationManagerImpl::~ConfigurationManagerImpl(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ConfigurationManagerImpl *)((char *)this + 24), (uint64_t *)&off_1E1BAAE78);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ConfigurationManagerImpl *)((char *)this + 24), (uint64_t *)&off_1E1BAAE78);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::ConfigurationManagerImpl::~ConfigurationManagerImpl(AdobeXMPCore_Int::ConfigurationManagerImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ConfigurationManagerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 24), (uint64_t *)&off_1E1BAAE78);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 24), (uint64_t *)&off_1E1BAAE78);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ConfigurationManagerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 24), (uint64_t *)&off_1E1BAAE78);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 24), (uint64_t *)&off_1E1BAAE78);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

_QWORD *AdobeXMPCore_Int::ThreadSafeImpl::ShareMutex(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), a2);
}

void AdobeXMPCore_Int::ThreadSafeImpl::UnShareMutex(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  char *v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  v1 = (char *)this + 8;
  if (*((_QWORD *)this + 1))
  {
    AdobeXMPCore_Int::ISharedMutex::CreateSharedMutex(&v5);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v1, &v5);
    v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
    if (*((_QWORD *)&v5 + 1))
    {
      v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  else
  {
    std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 1);
  }
}

void AdobeXMPCore_Int::ThreadSafeImpl::DisableThreadSafety(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  v1 = (_QWORD *)((char *)this + 8);
  if (v2)
    std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100](v1);
}

BOOL AdobeXMPCore_Int::ThreadSafeImpl::IsThreadSafe(AdobeXMPCore_Int::ThreadSafeImpl *this)
{
  return *((_QWORD *)this + 1) != 0;
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl(uint64_t a1, AdobeXMPCore_Int::IUTF8String_I *this, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5, AdobeXMPCore_Int::IUTF8String_I *a6, const char *a7, int a8, uint64_t a9)
{
  *(_QWORD *)(a1 + 80) = off_1E1BB77B0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = off_1E1BB7688;
  *(_QWORD *)(a1 + 72) = off_1E1BB7748;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(this, a3, (uint64_t *)(a1 + 8));
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a4, a5, (uint64_t *)(a1 + 24));
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a6, a7, (uint64_t *)(a1 + 40));
  *(_DWORD *)(a1 + 56) = a8;
  *(_QWORD *)(a1 + 64) = a9;
  return a1;
}

void sub_1880D1930(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl *v1;
  uint64_t v2;
  uint64_t v3;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v2);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)&off_1E1BAA5A0);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetNameSpace@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetType(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetIndex(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t AdobeXMPCore_Int::PathSegmentImpl::GetValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *AdobeXMPCore_Int::PathSegmentImpl::Clone@<X0>(AdobeXMPCore_Int::PathSegmentImpl *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  AdobeXMPCore_Int::IUTF8String_I *v5;
  char *v6;
  AdobeXMPCore_Int::IUTF8String_I *v7;
  const char *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  const char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  v5 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
  v6 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
  v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 192))(*((_QWORD *)this + 3));
  v8 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 208))(*((_QWORD *)this + 3));
  v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 192))(*((_QWORD *)this + 5));
  v10 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 208))(*((_QWORD *)this + 5));
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v4, v5, v6, v7, v8, v9, v10, *((_DWORD *)this + 14), *((_QWORD *)this + 8));
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 55, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 160);
  v13 = v14[1];
  *a2 = v12;
  a2[1] = v13;
  return result;
}

void sub_1880D1B0C(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 208)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 208)]);
  return std::shared_ptr<AdobeXMPCore_Int::PathSegmentImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880D1C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IPathSegment_I::CreatePropertyPathSegment@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  AdobeXMPCore_Int::IUTF8String_I *v7;
  char *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  const char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v6 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v8 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  v10 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v6, v7, v8, v9, v10, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 1, -1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 60, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 160);
  v13 = v14[1];
  *a3 = v12;
  a3[1] = v13;
  return result;
}

void sub_1880D1D24(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IPathSegment_I::CreateArrayIndexPathSegment@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  AdobeXMPCore_Int::IUTF8String_I *v7;
  char *v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v6 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v8 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v6, v7, v8, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 2, a2);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 65, 1, v12);
  v10 = v12[0];
  if (v12[0])
    v10 = v12[0] + *(_QWORD *)(*(_QWORD *)v12[0] - 160);
  v11 = v12[1];
  *a3 = v10;
  a3[1] = v11;
  return result;
}

void sub_1880D1E04(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IPathSegment_I::CreateQualifierPathSegment@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  AdobeXMPCore_Int::IUTF8String_I *v7;
  char *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  const char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v6 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  v7 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
  v8 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
  v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  v10 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v6, v7, v8, v9, v10, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 4, -1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 70, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 160);
  v13 = v14[1];
  *a3 = v12;
  a3[1] = v13;
  return result;
}

void sub_1880D1F10(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPathSegment_v1::CreatePropertyPathSegment@<X0>(AdobeXMPCore::IPathSegment_v1 *this@<X0>, char *a2@<X1>, char *a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  const char *v5;
  char *v7;
  char *v10;
  _QWORD *result;
  char *v12;
  uint64_t v13;
  AdobeXMPCore_Int::IErrorNotifier_I *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;

  v5 = a4;
  v7 = a2;
  v23 = a4;
  v24 = a2;
  if (this && a2 == (char *)-1)
  {
    v7 = (char *)strlen((const char *)this);
    v24 = v7;
  }
  if (a3 && v5 == (const char *)-1)
  {
    v5 = (const char *)strlen(a3);
    v23 = v5;
  }
  if (!this || !a3 || !v7 || !v5)
  {
    v21 = 0;
    v22 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v21);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 92);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "Parameters to CreatePropertyPathSegment() are not as expected", -1);
    (*(void (**)(char *, AdobeXMPCore::IPathSegment_v1 *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                    + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], this);
    (*(void (**)(char *, char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a3);
    (*(void (**)(char *, const char **))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v24);
    v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                 + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
    if (this)
      v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, AdobeXMPCore::IPathSegment_v1 *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], this, -1);
    if (a3)
      v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a3, -1);
    if (v21)
      v15 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    else
      v15 = 0;
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v16 = (unint64_t *)(v22 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v14);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
  v10 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v10, this, v7, (AdobeXMPCore_Int::IUTF8String_I *)a3, v5, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 1, -1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 94, 1, &v21);
  v12 = v21;
  if (v21)
    v12 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 160)];
  v13 = v22;
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880D21F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v13;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v13);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPathSegment_v1::CreateArrayIndexPathSegment@<X0>(AdobeXMPCore::IPathSegment_v1 *this@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  char *v8;
  _QWORD *result;
  char *v10;
  uint64_t v11;
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v18;
  char *v19;
  uint64_t v20;
  const char *v21;

  v5 = a2;
  v21 = a2;
  if (this && a2 == (char *)-1)
  {
    v5 = (char *)strlen((const char *)this);
    v21 = v5;
  }
  if (!this || !v5)
  {
    v19 = 0;
    v20 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v19);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)] + 120))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 102);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)] + 112))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)], "Parameters to CreateArrayIndexPathSegment() are not as expected", -1);
    (*(void (**)(char *, AdobeXMPCore::IPathSegment_v1 *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)]
                                                                    + 136))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)], this);
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)]
                                                                                                 + 152))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)], &v21);
    if (this)
      v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, AdobeXMPCore::IPathSegment_v1 *, uint64_t))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)] + 128))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 304)], this, -1);
    if (v19)
      v13 = &v19[*(_QWORD *)(*(_QWORD *)v19 - 304)];
    else
      v13 = 0;
    *(_QWORD *)&v18 = v13;
    *((_QWORD *)&v18 + 1) = v20;
    if (v20)
    {
      v14 = (unint64_t *)(v20 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v18);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v18;
    v18 = 0uLL;
  }
  v8 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v8, this, v5, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 2, a3);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 104, 1, &v19);
  v10 = v19;
  if (v19)
    v10 = &v19[*(_QWORD *)(*(_QWORD *)v19 - 160)];
  v11 = v20;
  *a4 = v10;
  a4[1] = v11;
  return result;
}

void sub_1880D2458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v14;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v14);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPathSegment_v1::CreateQualifierPathSegment@<X0>(AdobeXMPCore::IPathSegment_v1 *this@<X0>, char *a2@<X1>, char *a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  const char *v5;
  char *v7;
  char *v10;
  _QWORD *result;
  char *v12;
  uint64_t v13;
  AdobeXMPCore_Int::IErrorNotifier_I *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;

  v5 = a4;
  v7 = a2;
  v23 = a4;
  v24 = a2;
  if (this && a2 == (char *)-1)
  {
    v7 = (char *)strlen((const char *)this);
    v24 = v7;
  }
  if (a3 && v5 == (const char *)-1)
  {
    v5 = (const char *)strlen(a3);
    v23 = v5;
  }
  if (!this || !a3 || !v7 || !v5)
  {
    v21 = 0;
    v22 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v21);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 115);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "Parameters to CreateQualifierPathSegment() are not as expected", -1);
    (*(void (**)(char *, AdobeXMPCore::IPathSegment_v1 *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                    + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], this);
    (*(void (**)(char *, char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a3);
    (*(void (**)(char *, const char **))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v24);
    v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                 + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
    if (this)
      v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, AdobeXMPCore::IPathSegment_v1 *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], this, -1);
    if (a3)
      v14 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a3, -1);
    if (v21)
      v15 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    else
      v15 = 0;
    *(_QWORD *)&v20 = v15;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v16 = (unint64_t *)(v22 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v14);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
  v10 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v10, this, v7, (AdobeXMPCore_Int::IUTF8String_I *)a3, v5, 0, (const char *)0xFFFFFFFFFFFFFFFFLL, 4, -1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 117, 1, &v21);
  v12 = v21;
  if (v21)
    v12 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 160)];
  v13 = v22;
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880D2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v13;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v13);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPathSegment_v1::CreateQualifierSelectorPathSegment@<X0>(AdobeXMPCore::IPathSegment_v1 *this@<X0>, char *a2@<X1>, char *a3@<X2>, const char *a4@<X3>, char *a5@<X4>, const char *a6@<X5>, _QWORD *a7@<X8>)
{
  const char *v7;
  const char *v9;
  char *v11;
  char *v14;
  _QWORD *result;
  char *v16;
  uint64_t v17;
  AdobeXMPCore_Int::IErrorNotifier_I *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  const char *v29;

  v7 = a6;
  v9 = a4;
  v11 = a2;
  v28 = a4;
  v29 = a2;
  v27 = a6;
  if (this && a2 == (char *)-1)
  {
    v11 = (char *)strlen((const char *)this);
    v29 = v11;
  }
  if (a3 && v9 == (const char *)-1)
  {
    v9 = (const char *)strlen(a3);
    v28 = v9;
  }
  if (a5 && v7 == (const char *)-1)
  {
    v7 = (const char *)strlen(a5);
    v27 = v7;
  }
  if (!this || !a3 || !a5 || !v11 || !v9 || !v7)
  {
    v25 = 0;
    v26 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v25);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 120))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 133);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 112))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], "Parameters to CreateQualifierSelectorPathSegment() are not as expected", -1);
    (*(void (**)(char *, AdobeXMPCore::IPathSegment_v1 *))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)]
                                                                    + 136))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], this);
    (*(void (**)(char *, char *))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 136))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], a3);
    (*(void (**)(char *, char *))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 136))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], a5);
    (*(void (**)(char *, const char **))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 152))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], &v29);
    (*(void (**)(char *, const char **))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)] + 152))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], &v28);
    v18 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char **))(*(_QWORD *)&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)]
                                                                                                 + 152))(&v25[*(_QWORD *)(*(_QWORD *)v25 - 304)], &v27);
    v19 = 0;
    if (v25)
      v19 = &v25[*(_QWORD *)(*(_QWORD *)v25 - 304)];
    *(_QWORD *)&v24 = v19;
    *((_QWORD *)&v24 + 1) = v26;
    if (v26)
    {
      v20 = (unint64_t *)(v26 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v18);
    (**ErrorNotifier)(ErrorNotifier, &v24);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v24;
    v24 = 0uLL;
  }
  v14 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x68);
  AdobeXMPCore_Int::PathSegmentImpl::PathSegmentImpl((uint64_t)v14, this, v11, (AdobeXMPCore_Int::IUTF8String_I *)a3, v9, (AdobeXMPCore_Int::IUTF8String_I *)a5, v7, 8, -1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::PathSegmentImpl>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/PathSegmentImpl.cpp", 135, 1, &v25);
  v16 = v25;
  if (v25)
    v16 = &v25[*(_QWORD *)(*(_QWORD *)v25 - 160)];
  v17 = v26;
  *a7 = v16;
  a7[1] = v17;
  return result;
}

void sub_1880D2A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v14;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v14);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IPathSegment_v1::MakeShared@<X0>(_QWORD *this@<X0>, AdobeXMPCore::IPathSegment_v1 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  if (this)
  {
    v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::IPathSegment_v1 *))((char *)this + *(_QWORD *)(*this - 56)))((uint64_t)this + *(_QWORD *)(*this - 56), a2);
    return std::shared_ptr<AdobeXMPCore::IPathSegment_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPathSegment_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4, 8, 1);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

void AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80), (uint64_t *)&off_1E1BAA5A0);
}

{
  uint64_t v2;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 80), (uint64_t *)&off_1E1BAA5A0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80), (uint64_t *)&off_1E1BAA5A0);
}

{
  AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl((AdobeXMPCore_Int::PathSegmentImpl *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 80), (uint64_t *)&off_1E1BAA5A0);
}

{
  AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl((AdobeXMPCore_Int::PathSegmentImpl *)((char *)this
                                                                                          + *(_QWORD *)(*(_QWORD *)this - 48)));
}

void AdobeXMPCore_Int::PathSegmentImpl::~PathSegmentImpl(AdobeXMPCore_Int::PathSegmentImpl *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 200)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)) = a2[6];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::PathSegmentImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::PathSegmentImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC618;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880D2D18(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 208) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880D2D44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 208) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::PathSegmentImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::PathSegmentImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore::IPathSegment_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::IPathSegment_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC3B0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880D2E64(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880D2E90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::IPathSegment_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::IPathSegment_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::ConfigurationManagerImpl::ConfigurationManagerImpl(uint64_t this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)(this + *(_QWORD *)(v2 - 176)) = a2[1];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 144)) = a2[2];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 152)) = a2[5];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 184)) = a2[6];
  *(_BYTE *)(this + 8) = 1;
  return this;
}

void AdobeXMPCore::ICoreConfigurationManager_v1::GetCoreConfigurationManager(_QWORD *a1@<X8>)
{
  AdobeXMPCore_Int::ManageCoreConfigurationManager(0, a1);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::GetISharedObject_I(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 184);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::GetActualIConfigurationManager(AdobeXMPCore_Int::IConfigurationManager_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 104)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)) - 144);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::GetActualICoreConfigurationManager(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 168);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::GetISharedObject_I(AdobeXMPCore_Int::ICoreConfigurationManager_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 184);
}

void AdobeXMPCore_Int::CoreConfigurationManagerImpl::~CoreConfigurationManagerImpl(AdobeXMPCore_Int::CoreConfigurationManagerImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::CoreConfigurationManagerImpl *)((char *)this + 32), (uint64_t *)off_1E1BAB110);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::CoreConfigurationManagerImpl *)((char *)this + 32), (uint64_t *)off_1E1BAB110);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::CoreConfigurationManagerImpl::~CoreConfigurationManagerImpl(AdobeXMPCore_Int::CoreConfigurationManagerImpl *this)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::CoreConfigurationManagerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), (uint64_t *)off_1E1BAB110);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)off_1E1BAB110);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::CoreConfigurationManagerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 32), (uint64_t *)off_1E1BAB110);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)off_1E1BAB110);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 224)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 224)]);
  return std::shared_ptr<AdobeXMPCore_Int::CoreConfigurationManagerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880D3220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore::ICoreConfigurationManager_v1>::operator=[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
    v3 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 168));
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::CoreConfigurationManagerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::CoreConfigurationManagerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC8B8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880D3314(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 224) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880D3340(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 224) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::CoreConfigurationManagerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::CoreConfigurationManagerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  char *v6;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  AdobeXMPCommon::IError_v1 *v18;
  __int128 v19;

  *(_QWORD *)(a1 + 16) = &unk_1E1BA5AE8;
  *(_QWORD *)(a1 + 96) = off_1E1BA5C68;
  *(_QWORD *)a1 = off_1E1BA4B78;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 40) = &off_1E1BA5900;
  v4 = a1 + 40;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl((AdobeXMPCore_Int::DOMSerializerImpl *)(a1 + 16), (uint64_t *)&off_1E1BAB220);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &off_1E1BBB420;
  *(_QWORD *)(a1 + 40) = &off_1E1BBB678;
  *(_QWORD *)(a1 + 96) = off_1E1BBB7D8;
  *(_QWORD *)a1 = off_1E1BBB260;
  if (a2)
  {
    v18 = 0;
    v17 = 0;
    v5 = (*(unsigned int (**)(uint64_t, AdobeXMPCommon::IError_v1 **, int *))(*(_QWORD *)a2 + 64))(a2, &v18, &v17) == 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 224))(v4, v5);
    v6 = (char *)v18;
    if (!v18 && !v17)
    {
      (*(void (**)(uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(*(_QWORD *)a2 + 72))(a2, a1 + *(_QWORD *)(*(_QWORD *)a1 - 72), &v18, &v17);
      v6 = (char *)v18;
    }
    if (v6)
    {
      AdobeXMPCommon::IError_v1::MakeShared(v6, &v19);
      v15 = v19;
      (*(void (**)(char *))(*(_QWORD *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 56)) + 8))((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 56));
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v15;
      v16 = 0uLL;
    }
    if (v17)
    {
      v19 = 0uLL;
      AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v19);
      (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304))
                                                            + 120))(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMSerializerWrapperImpl.cpp", 45);
      v9 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304)) + 112))(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304), "Unknown Exception caught in the client code", -1);
      if ((_QWORD)v19)
        v10 = v19 + *(_QWORD *)(*(_QWORD *)v19 - 304);
      else
        v10 = 0;
      *(_QWORD *)&v16 = v10;
      *((_QWORD *)&v16 + 1) = *((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v9);
      (**ErrorNotifier)(ErrorNotifier, &v16);
      v14 = __cxa_allocate_exception(0x10uLL);
      *v14 = v16;
      v16 = 0uLL;
    }
  }
  return a1;
}

void sub_1880D3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AdobeXMPCore_Int::SharedObjectImpl *v3;
  AdobeXMPCore_Int::ConfigurableImpl *v4;
  AdobeXMPCore_Int::DOMSerializerImpl *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl(v5, (uint64_t *)&off_1E1BAB220);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v3, (uint64_t *)off_1E1BAB300);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v4, (uint64_t *)off_1E1BAB2E8);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl(AdobeXMPCore_Int::DOMSerializerImpl *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 344)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 288)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 296)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 360)) = a2[9];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 48)) = a2[1];
  v5 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 56)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)) = a2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)) = a2[10];
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    *((_QWORD *)this + 1) = 0;
  }
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl((AdobeXMPCore_Int::DOMSerializerImpl *)(v2 + 16), (uint64_t *)&off_1E1BAB220);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + 96), (uint64_t *)off_1E1BAB300);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + 40), (uint64_t *)off_1E1BAB2E8);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
}

{
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::~ClientDOMSerializerWrapperImpl((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

uint64_t AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ClientDOMSerializerWrapperImpl((uint64_t)v2, 0);
  if (!v2)
    return 0;
  v2[1] = *((_QWORD *)this + 1);
  return (uint64_t)v2 + *(_QWORD *)(*v2 - 48);
}

void sub_1880D39BC(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *this)
{
  return AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::clone((AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 384)));
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::Serialize(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  __n128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  AdobeXMPCommon::IError_v1 *v32;
  __int128 v33;

  *a4 = 0;
  a4[1] = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, 0, a4);
  v32 = 0;
  v31 = 0;
  v30 = 0uLL;
  v8.n128_f64[0] = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v30);
  if (*a3)
  {
    v33 = 0uLL;
    (*(void (**)(__int128 *__return_ptr, double))(*(_QWORD *)v30 + 112))(&v33, v8.n128_f64[0]);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v33 + 128))(v33);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, a3);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](&v30, (uint64_t *)&v33);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = a1[1];
  if (*a2)
    v14 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*a2 + 272))(*a2, v8);
  else
    v14 = 0;
  if ((_QWORD)v30)
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v30 + 120))(v30);
  else
    v15 = 0;
  v16 = (char *)a1 + *(_QWORD *)(*a1 - 72);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 216))(*a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t (*)(AdobeXMPCore_Int *, int, unsigned int, uint64_t, const char *, const AdobeXMPCommon::IError_v1 **), uint64_t, AdobeXMPCommon::IError_v1 **, int *))(*(_QWORD *)v13 + 56))(v13, v14, v15, v16, AdobeXMPCore_Int::ReportErrorAndContinueABISafe, v17, &v32, &v31);
  if (v32)
  {
    AdobeXMPCommon::IError_v1::MakeShared((char *)v32, &v33);
    v28 = v33;
    (*(void (**)(char *))(*(_QWORD *)((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 56)) + 8))((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v28;
    v29 = 0uLL;
  }
  if (v31)
  {
    v33 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v33);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v33 + *(_QWORD *)(*(_QWORD *)v33 - 304))
                                                          + 120))(v33 + *(_QWORD *)(*(_QWORD *)v33 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMSerializerWrapperImpl.cpp", 83);
    v22 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v33 + *(_QWORD *)(*(_QWORD *)v33 - 304)) + 112))(v33 + *(_QWORD *)(*(_QWORD *)v33 - 304), "Unknown Exception caught in the client code", -1);
    if ((_QWORD)v33)
      v23 = v33 + *(_QWORD *)(*(_QWORD *)v33 - 304);
    else
      v23 = 0;
    *(_QWORD *)&v29 = v23;
    *((_QWORD *)&v29 + 1) = *((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v22);
    (**ErrorNotifier)(ErrorNotifier, &v29);
    v27 = __cxa_allocate_exception(0x10uLL);
    *v27 = v29;
    v29 = 0uLL;
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1880D3CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::Serialize(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::Serialize((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  int v14;
  AdobeXMPCommon::IError_v1 *v15;
  __int128 v16;

  v15 = 0;
  v14 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2, a3, a4, &v15, &v14);
  if (v15)
  {
    AdobeXMPCommon::IError_v1::MakeShared((char *)v15, &v16);
    v12 = v16;
    (*(void (**)(char *))(*(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 56)) + 8))((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v12;
    v16 = 0uLL;
  }
  if (v14)
  {
    v16 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v16);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304))
                                                          + 120))(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMSerializerWrapperImpl.cpp", 97);
    v6 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304)) + 112))(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304), "Unknown Exception caught in the client code", -1);
    v7 = 0;
    if ((_QWORD)v16)
      v7 = v16 + *(_QWORD *)(*(_QWORD *)v16 - 304);
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v6);
    (**ErrorNotifier)(ErrorNotifier, &v13);
    v11 = __cxa_allocate_exception(0x10uLL);
    *v11 = v13;
    v13 = 0uLL;
  }
  return result;
}

void sub_1880D3EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3 - 32);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::ValidateValue((uint64_t)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

void AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::SerializeInternal(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::ClientDOMSerializerWrapperImpl::SerializeInternal(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void IPTC_Manager::ParseMemoryDataSets(IPTC_Manager *this, char *a2, int a3, char a4)
{
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char **v12;
  char *v13;
  char *v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned __int16 v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  BOOL v37;
  unint64_t v38;
  BOOL v40;
  _QWORD *v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  _QWORD *exception;
  const char *v46;
  uint64_t **v47;
  uint64_t v48;
  char v49;
  char v50;
  __int16 v51;
  unsigned int v52;
  char *v53;

  LODWORD(v5) = a3;
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  v47 = (uint64_t **)((char *)this + 8);
  v9 = (_QWORD *)((char *)this + 16);
  if (v8 != (_QWORD *)((char *)this + 16))
  {
    do
    {
      IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v8 + 5));
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v25 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v25);
      }
      v8 = v11;
    }
    while (v11 != v9);
  }
  std::__tree<unsigned long long>::destroy((uint64_t)v47, *((_QWORD **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v9;
  if (*((_BYTE *)this + 45))
    free(*((void **)this + 4));
  *((_QWORD *)this + 4) = 0;
  v12 = (char **)((char *)this + 32);
  *(_QWORD *)((char *)this + 38) = 0;
  if ((_DWORD)v5)
  {
    if (a2 && *a2 == 28)
    {
      if (v5 > 0xA00000)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 210;
        v46 = "Outrageous length for memory-based IPTC";
      }
      else
      {
        *((_DWORD *)this + 10) = v5;
        if ((a4 & 1) == 0)
        {
          *v12 = a2;
          v5 = v5;
          goto LABEL_18;
        }
        v5 = v5;
        v13 = (char *)malloc_type_malloc(v5, 0xD1F85A94uLL);
        *v12 = v13;
        if (v13)
        {
          memcpy(v13, a2, v5);
          *((_BYTE *)this + 45) = 1;
          a2 = (char *)*((_QWORD *)this + 4);
LABEL_18:
          v14 = &a2[v5];
          v15 = (unint64_t)(v14 - 5);
          *((_BYTE *)this + 46) = 0;
          while (1)
          {
            if ((unint64_t)a2 > v15 || *a2 != 28)
              return;
            v16 = a2[1];
            v17 = a2[2];
            v18 = bswap32(*(unsigned __int16 *)(a2 + 3));
            v19 = HIWORD(v18);
            v20 = a2 + 5;
            if ((v18 & 0x80000000) != 0)
            {
              v21 = HIWORD(v18) & 0x7FFF;
              if ((v21 - 5) < 0xFFFFFFFC || v20 > &v14[-v21])
                return;
              v19 = 0;
              v23 = (v21 - 1);
              do
              {
                v24 = *v20++;
                v19 = v24 | (v19 << 8);
                LODWORD(v21) = v21 - 1;
              }
              while ((_DWORD)v21);
              v20 = &a2[v23 + 6];
            }
            if (v20 > &v14[-v19])
              return;
            if (v16 == 1 && v17 == 90 && v19 == 3)
            {
              v25 = *(_WORD *)v20 == 9499 && v20[2] == 71;
              if (v25)
                *((_BYTE *)this + 46) = 1;
              v26 = 1090;
            }
            else
            {
              v26 = v17 + 1000 * v16;
              if (!v19)
              {
                v27 = 0;
                goto LABEL_42;
              }
            }
            v27 = v20;
LABEL_42:
            v28 = *v9;
            if (!*v9)
              goto LABEL_53;
            v29 = v9;
            v30 = *v9;
            do
            {
              v31 = *(unsigned __int16 *)(v30 + 32);
              v32 = v31 >= v26;
              if (v31 >= v26)
                v33 = (uint64_t *)v30;
              else
                v33 = (uint64_t *)(v30 + 8);
              if (v32)
                v29 = (_QWORD *)v30;
              v30 = *v33;
            }
            while (*v33);
            if (v29 == v9 || *((unsigned __int16 *)v29 + 16) > v26)
LABEL_53:
              v29 = v9;
            v34 = -1;
            v35 = kKnownDataSets;
            do
            {
              v36 = *v35;
              v35 += 32;
              ++v34;
              v37 = v36 == v17;
            }
            while (v36 < v17);
            v38 = v34 & 0xFFFFFFFFFFFFFFFDLL;
            v40 = !v37 || v38 == 8 || v17 == 12;
            if (v40 || v17 == 80 || v29 == v9)
            {
              v48 = v26;
              v49 = v16;
              v50 = v17;
              v51 = 0;
              v52 = v19;
              v41 = v9;
              v53 = v27;
              if (v28)
              {
                v41 = v9;
                do
                {
                  v42 = *(unsigned __int16 *)(v28 + 32);
                  v43 = v26 >= v42;
                  if (v26 >= v42)
                    v44 = (uint64_t *)(v28 + 8);
                  else
                    v44 = (uint64_t *)v28;
                  if (!v43)
                    v41 = (_QWORD *)v28;
                  v28 = *v44;
                }
                while (*v44);
              }
              std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(v47, v41, (uint64_t)&v48);
            }
            else
            {
              IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v29 + 5));
              *((_BYTE *)v29 + 40) = v16;
              *((_BYTE *)v29 + 41) = v17;
              *((_WORD *)v29 + 21) = 0;
              *((_DWORD *)v29 + 11) = v19;
              v29[6] = v27;
            }
            a2 = &v20[v19];
            v15 = (unint64_t)(v14 - 5);
          }
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 15;
        v46 = "Out of memory";
      }
    }
    else
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 210;
      v46 = "Not valid IPTC, no leading 0x1C";
    }
    exception[1] = v46;
    *((_BYTE *)exception + 16) = 0;
  }
}

void IPTC_Manager::DisposeLooseValue(uint64_t a1, uint64_t a2)
{
  void *v4;
  unint64_t v5;

  if (*(_DWORD *)(a2 + 4))
  {
    v4 = *(void **)(a2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v4 < v5 || (unint64_t)v4 >= v5 + *(unsigned int *)(a1 + 40))
      {
        free(v4);
        *(_QWORD *)(a2 + 8) = 0;
      }
    }
  }
}

__n128 IPTC_Manager::GetDataSet(uint64_t a1, int a2, __n128 *a3, unint64_t a4)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  __n128 result;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unsigned __int16 v19;

  v4 = a2 + 2000;
  v19 = a2 + 2000;
  v5 = (_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v9 = a1 + 8;
    v10 = v5;
    do
    {
      v11 = *(unsigned __int16 *)(v6 + 32);
      v12 = v11 >= v4;
      if (v11 >= v4)
        v13 = (uint64_t *)v6;
      else
        v13 = (uint64_t *)(v6 + 8);
      if (v12)
        v10 = (_QWORD *)v6;
      v6 = *v13;
    }
    while (*v13);
    if (v10 != v5
      && *((_BYTE *)v10 + 40) == 2
      && *((unsigned __int8 *)v10 + 41) == a2
      && std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>(v9, &v19) > a4&& a3)
    {
      if (a4)
      {
        v15 = 0;
        do
        {
          v16 = (_QWORD *)v10[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v10[2];
              v18 = *v17 == (_QWORD)v10;
              v10 = v17;
            }
            while (!v18);
          }
          ++v15;
          v10 = v17;
        }
        while (v15 != a4);
      }
      else
      {
        v17 = v10;
      }
      result = *(__n128 *)(v17 + 5);
      *a3 = result;
    }
  }
  return result;
}

void IPTC_Manager::GetDataSet_UTF8(uint64_t a1, int a2, std::string *this, unint64_t a4)
{
  __n128 DataSet;
  uint64_t v9;
  BOOL v10;
  char v12;
  __n128 v13;

  if (this)
    std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  v13 = 0uLL;
  DataSet = IPTC_Manager::GetDataSet(a1, a2, &v13, a4);
  if (v9)
    v10 = v13.n128_u32[1] == 0;
  else
    v10 = 1;
  v12 = v10 || v13.n128_u64[1] == 0;
  if (this && (v12 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 46))
      goto LABEL_15;
    if (!ignoreLocalText)
    {
      ReconcileUtils::LocalToUTF8((const UInt8 *)v13.n128_u64[1], v13.n128_u32[1], this);
      return;
    }
    if (ReconcileUtils::IsASCII((ReconcileUtils *)v13.n128_u64[1], (char *)v13.n128_u32[1]))
LABEL_15:
      MEMORY[0x18D761A20](this, DataSet);
  }
}

void IPTC_Writer::~IPTC_Writer(IPTC_Writer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = &off_1E1BABE18;
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 != (char *)this + 16)
  {
    do
    {
      IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v2 + 40));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  IPTC_Manager::~IPTC_Manager((void **)this);
}

{
  IPTC_Writer::~IPTC_Writer(this);
  JUMPOUT(0x18D761C30);
}

void IPTC_Writer::SetDataSet_UTF8(uint64_t **this, unsigned int a2, _BYTE *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v6;
  _UNKNOWN **v10;
  unsigned int v11;
  BOOL v12;
  _UNKNOWN **v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t **v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char **v25;
  char *v26;
  unsigned int v27;
  BOOL v28;
  char **v29;
  uint64_t *v30;
  int v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  _QWORD *exception;
  const char *v40;
  uint64_t v41;
  char v42;
  char v43;
  __int16 v44;
  unsigned int v45;
  void *v46;
  unsigned __int16 v47;

  if (!a4)
    return;
  v6 = a4;
  v10 = &off_1E1BCA950;
  do
  {
    v11 = *((unsigned __int8 *)v10 + 32);
    v10 += 4;
    v12 = v11 == a2;
  }
  while (v11 < a2);
  if (v12)
    v13 = v10;
  else
    v13 = 0;
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v40 = "Can only set known IPTC DataSets";
    goto LABEL_82;
  }
  if (!*((_BYTE *)this + 46))
    IPTC_Writer::ConvertToUTF8((IPTC_Writer *)this);
  v14 = (unint64_t)v10[1];
  if (v14 < v6)
  {
    if (*((_BYTE *)this + 46) && (_DWORD)v14 && (a3[v14] & 0xC0) == 0x80)
    {
      while (a3[v14] <= 0xBFu)
      {
        LODWORD(v14) = v14 - 1;
        if (!(_DWORD)v14)
        {
          v6 = 0;
          goto LABEL_19;
        }
      }
    }
    v6 = v14;
  }
LABEL_19:
  v15 = a2 + 2000;
  v47 = a2 + 2000;
  v17 = (uint64_t *)(this + 2);
  v16 = this[2];
  if (!v16)
    goto LABEL_30;
  v18 = (uint64_t *)(this + 2);
  do
  {
    v19 = *((unsigned __int16 *)v16 + 16);
    v20 = v19 >= v15;
    if (v19 >= v15)
      v21 = (uint64_t **)v16;
    else
      v21 = (uint64_t **)(v16 + 1);
    if (v20)
      v18 = v16;
    v16 = *v21;
  }
  while (*v21);
  if (v18 == v17 || v15 < *((unsigned __int16 *)v18 + 16))
LABEL_30:
    v18 = (uint64_t *)(this + 2);
  v22 = std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>((uint64_t)(this + 1), &v47);
  v23 = *((_BYTE *)v13 + 1) == 2 || a2 == 12;
  if (v23 || a2 == 80)
  {
    if (a5 >= 0)
      v24 = a5;
    else
      v24 = v22;
    if (v24 > v22)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      v40 = "Invalid index for IPTC DataSet";
LABEL_82:
      exception[1] = v40;
      *((_BYTE *)exception + 16) = 0;
    }
    if (v24 == v22)
      goto LABEL_66;
    v25 = (char **)*v17;
    v26 = (char *)(this + 2);
    if (*v17)
    {
      v26 = (char *)(this + 2);
      do
      {
        v27 = *((unsigned __int16 *)v25 + 16);
        v28 = v27 >= v47;
        if (v27 >= v47)
          v29 = v25;
        else
          v29 = v25 + 1;
        if (v28)
          v26 = (char *)v25;
        v25 = (char **)*v29;
      }
      while (*v29);
    }
    if (v24 < 1)
    {
      v18 = (uint64_t *)v26;
    }
    else
    {
      do
      {
        v30 = (uint64_t *)*((_QWORD *)v26 + 1);
        if (v30)
        {
          do
          {
            v18 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)*((_QWORD *)v26 + 2);
            v12 = *v18 == (_QWORD)v26;
            v26 = (char *)v18;
          }
          while (!v12);
        }
        v26 = (char *)v18;
      }
      while (v24-- > 1);
    }
  }
  else if (a5 >= 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v40 = "Non-repeatable IPTC DataSet";
    goto LABEL_82;
  }
  if (v18 == v17)
  {
LABEL_66:
    v32 = 0;
    v18 = (uint64_t *)(this + 2);
    goto LABEL_67;
  }
  if (*((_DWORD *)v18 + 11) == v6 && !memcmp((const void *)v18[6], a3, v6))
    return;
  v32 = 1;
LABEL_67:
  v33 = malloc_type_malloc(v6, 0x6EC57D1DuLL);
  if (!v33)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    v40 = "Out of memory";
    goto LABEL_82;
  }
  v34 = v33;
  memcpy(v33, a3, v6);
  if (v32)
  {
    IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v18 + 5));
    *((_BYTE *)v18 + 40) = 2;
    *((_BYTE *)v18 + 41) = a2;
    *((_WORD *)v18 + 21) = 0;
    *((_DWORD *)v18 + 11) = v6;
    v18[6] = (uint64_t)v34;
  }
  else
  {
    v41 = v47;
    v42 = 2;
    v43 = a2;
    v44 = 0;
    v45 = v6;
    v46 = v34;
    v35 = *v17;
    if (*v17)
    {
      do
      {
        v36 = *(unsigned __int16 *)(v35 + 32);
        v37 = v47 >= v36;
        if (v47 >= v36)
          v38 = (uint64_t *)(v35 + 8);
        else
          v38 = (uint64_t *)v35;
        if (!v37)
          v17 = (uint64_t *)v35;
        v35 = *v38;
      }
      while (*v38);
    }
    std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(this + 1, v17, (uint64_t)&v41);
  }
  *((_BYTE *)this + 44) = 1;
}

void IPTC_Writer::ConvertToUTF8(IPTC_Writer *this)
{
  char *v2;
  char *v3;
  CFIndex v4;
  unsigned int v5;
  void *v6;
  std::string *p_p;
  char *v8;
  char *v9;
  BOOL v10;
  int v11;
  _QWORD *exception;
  std::string __p;

  if (*((_BYTE *)this + 46))
    IPTC_Writer::ConvertToUTF8();
  memset(&__p, 0, sizeof(__p));
  v2 = (char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 16;
  if (v2 == (char *)this + 16)
  {
    *((_BYTE *)this + 46) = 1;
  }
  else
  {
    do
    {
      v4 = *((unsigned int *)v2 + 11);
      if ((_DWORD)v4)
      {
        ReconcileUtils::LocalToUTF8(*((const UInt8 **)v2 + 6), v4, &__p);
        IPTC_Manager::DisposeLooseValue((uint64_t)this, (uint64_t)(v2 + 40));
        v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v5 = __p.__r_.__value_.__r.__words[1];
        *((_DWORD *)v2 + 11) = v5;
        v6 = malloc_type_malloc(v5, 0xF500A414uLL);
        *((_QWORD *)v2 + 6) = v6;
        if (!v6)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)exception = 15;
          exception[1] = "Out of memory";
          *((_BYTE *)exception + 16) = 0;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memcpy(v6, p_p, *((unsigned int *)v2 + 11));
      }
      v8 = (char *)*((_QWORD *)v2 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v2;
          v2 = v9;
        }
        while (!v10);
      }
      v2 = v9;
    }
    while (v9 != v3);
    v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *((_BYTE *)this + 46) = 1;
    if (v11 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1880D4A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *IPTC_Writer::DeleteDataSet(uint64_t *this, int a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned __int16 v26;

  v3 = a2 + 2000;
  v26 = a2 + 2000;
  v5 = this + 2;
  v4 = this[2];
  if (v4)
  {
    v6 = a3;
    v7 = (uint64_t)this;
    v8 = (uint64_t **)(this + 1);
    v9 = this + 2;
    v10 = this[2];
    do
    {
      v11 = *(unsigned __int16 *)(v10 + 32);
      v12 = v11 >= v3;
      if (v11 >= v3)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)(v10 + 8);
      if (v12)
        v9 = (uint64_t *)v10;
      v10 = *v13;
    }
    while (*v13);
    do
    {
      v14 = *(unsigned __int16 *)(v4 + 32);
      v15 = v3 >= v14;
      if (v3 >= v14)
        v16 = (uint64_t *)(v4 + 8);
      else
        v16 = (uint64_t *)v4;
      if (!v15)
        v5 = (uint64_t *)v4;
      v4 = *v16;
    }
    while (*v16);
    if (v9 != v5)
    {
      if ((a3 & 0x8000000000000000) == 0)
      {
        this = (uint64_t *)std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>((uint64_t)v8, &v26);
        if ((uint64_t)this <= v6)
          return this;
        if (v6)
        {
          do
          {
            v17 = (uint64_t *)v9[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (uint64_t *)v9[2];
                v19 = *v18 == (_QWORD)v9;
                v9 = v18;
              }
              while (!v19);
            }
            v9 = v18;
          }
          while (v6-- > 1);
        }
        else
        {
          v18 = v9;
        }
        v21 = (uint64_t *)v18[1];
        if (v21)
        {
          do
          {
            v5 = v21;
            v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          v5 = v18;
          do
          {
            v22 = v5;
            v5 = (uint64_t *)v5[2];
          }
          while ((uint64_t *)*v5 != v22);
        }
        v9 = v18;
      }
      if (v9 != v5)
      {
        v23 = v9;
        do
        {
          IPTC_Manager::DisposeLooseValue(v7, (uint64_t)(v23 + 5));
          v24 = (uint64_t *)v23[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (uint64_t *)v23[2];
              v19 = *v25 == (_QWORD)v23;
              v23 = v25;
            }
            while (!v19);
          }
          v23 = v25;
        }
        while (v25 != v5);
      }
      this = std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::erase(v8, v9, v5);
      *(_BYTE *)(v7 + 44) = 1;
    }
  }
  return this;
}

void IPTC_Writer::UpdateMemoryDataSets(IPTC_Writer *this)
{
  char *v2;
  unsigned int v3;
  char *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  char *v31;
  size_t v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *exception;

  if (*((_BYTE *)this + 44))
  {
    v2 = (char *)this + 16;
    if (*((_BYTE *)this + 46))
      v3 = 15;
    else
      v3 = 7;
    v4 = (char *)*((_QWORD *)this + 1);
    if (v4 != v2)
    {
      do
      {
        v5 = *((unsigned __int16 *)v4 + 16);
        if (v5 != 1090 && v5 != 2000)
        {
          v6 = *((_DWORD *)v4 + 11);
          v7 = v3 + v6;
          v8 = v7 + 5;
          v3 = v7 + 9;
          if (!(v6 >> 15))
            v3 = v8;
        }
        v9 = (char *)*((_QWORD *)v4 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (char *)*((_QWORD *)v4 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v4;
            v4 = v10;
          }
          while (!v11);
        }
        v4 = v10;
      }
      while (v10 != v2);
    }
    v12 = v3;
    v13 = (char *)malloc_type_malloc(v3, 0xDB788ECuLL);
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      exception[1] = "Out of memory";
      *((_BYTE *)exception + 16) = 0;
    }
    v14 = v13;
    v15 = v2;
    v16 = v13;
    if (*((char **)this + 1) != v2)
    {
      v16 = v13;
      v15 = (char *)*((_QWORD *)this + 1);
      while (!v15[40])
      {
        *v16 = 28;
        v16[1] = v15[40];
        v16[2] = v15[41];
        v17 = *((unsigned int *)v15 + 11);
        if (v17 >> 15)
        {
          *(_DWORD *)(v16 + 5) = bswap32(v17);
          LOWORD(v18) = 1152;
          v19 = 9;
        }
        else
        {
          v18 = bswap32(v17) >> 16;
          v19 = 5;
        }
        v20 = &v16[v19];
        *(_WORD *)(v16 + 3) = v18;
        memcpy(&v16[v19], *((const void **)v15 + 6), v17);
        v21 = (char *)*((_QWORD *)v15 + 1);
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (char *)*((_QWORD *)v15 + 2);
            v11 = *(_QWORD *)v22 == (_QWORD)v15;
            v15 = v22;
          }
          while (!v11);
        }
        v16 = &v20[v17];
        v15 = v22;
        if (v22 == v2)
        {
          v15 = v2;
          break;
        }
      }
    }
    if (*((_BYTE *)this + 46))
    {
      *(_QWORD *)v16 = 0x47251B03005A011CLL;
      v16 += 8;
    }
    if (v15 == v2)
    {
LABEL_47:
      v15 = v2;
    }
    else
    {
      while (1)
      {
        v23 = v15[40];
        if (v23 > 1)
          break;
        if (v23 != 1)
          IPTC_Writer::UpdateMemoryDataSets();
        if (v15[41] != 90)
        {
          *v16 = 28;
          v16[1] = v15[40];
          v16[2] = v15[41];
          v24 = *((unsigned int *)v15 + 11);
          if (v24 >> 15)
          {
            *(_DWORD *)(v16 + 5) = bswap32(v24);
            LOWORD(v25) = 1152;
            v26 = 9;
          }
          else
          {
            v25 = bswap32(v24) >> 16;
            v26 = 5;
          }
          v27 = &v16[v26];
          *(_WORD *)(v16 + 3) = v25;
          memcpy(&v16[v26], *((const void **)v15 + 6), v24);
          v16 = &v27[v24];
        }
        v28 = (char *)*((_QWORD *)v15 + 1);
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = *(char **)v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (char *)*((_QWORD *)v15 + 2);
            v11 = *(_QWORD *)v29 == (_QWORD)v15;
            v15 = v29;
          }
          while (!v11);
        }
        v15 = v29;
        if (v29 == v2)
          goto LABEL_47;
      }
    }
    if (*((_BYTE *)this + 46))
      v30 = 67109376;
    else
      v30 = 33554944;
    *(_DWORD *)(v16 + 3) = v30;
    *(_DWORD *)v16 = 540;
    v31 = v16 + 7;
    if (v15 != v2)
    {
      do
      {
        if (v15[40] <= 1u)
          IPTC_Writer::UpdateMemoryDataSets();
        if (*((_WORD *)v15 + 16) != 2000)
        {
          *v31 = 28;
          v31[1] = v15[40];
          v31[2] = v15[41];
          v32 = *((unsigned int *)v15 + 11);
          if (v32 >> 15)
          {
            *(_DWORD *)(v31 + 5) = bswap32(v32);
            LOWORD(v33) = 1152;
            v34 = 9;
          }
          else
          {
            v33 = bswap32(v32) >> 16;
            v34 = 5;
          }
          v35 = &v31[v34];
          *(_WORD *)(v31 + 3) = v33;
          memcpy(&v31[v34], *((const void **)v15 + 6), v32);
          v31 = &v35[v32];
        }
        v36 = (char *)*((_QWORD *)v15 + 1);
        if (v36)
        {
          do
          {
            v37 = v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char *)*((_QWORD *)v15 + 2);
            v11 = *(_QWORD *)v37 == (_QWORD)v15;
            v15 = v37;
          }
          while (!v11);
        }
        v15 = v37;
      }
      while (v37 != v2);
    }
    if (v31 != &v14[v12])
      IPTC_Writer::UpdateMemoryDataSets();
    IPTC_Manager::ParseMemoryDataSets(this, v14, v12, 0);
    if (*((_DWORD *)this + 10) != (_DWORD)v12)
      IPTC_Writer::UpdateMemoryDataSets();
    *((_BYTE *)this + 45) = (_DWORD)v12 != 0;
  }
}

uint64_t IPTC_Writer::IsChanged(IPTC_Writer *this)
{
  return *((unsigned __int8 *)this + 44);
}

void *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__emplace_hint_multi<std::pair<unsigned short const,IPTC_Manager::DataSetInfo> &>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t **leaf;
  uint64_t v9;

  v6 = operator new(0x38uLL);
  *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  v9 = 0;
  leaf = (uint64_t **)std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__find_leaf(a1, a2, &v9, (unsigned __int16 *)v6 + 16);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v9, leaf, (uint64_t *)v6);
  return v6;
}

void sub_1880D5050(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__find_leaf(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned __int16 *a4)
{
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;

  v4 = a1 + 1;
  if (a1 + 1 != a2)
  {
    v5 = *a4;
    if (*((unsigned __int16 *)a2 + 16) < v5)
    {
      while (1)
      {
        v6 = *v4;
        a2 = v4;
        if (!*v4)
          break;
        while (1)
        {
          v4 = (_QWORD *)v6;
          if (*(unsigned __int16 *)(v6 + 32) >= v5)
            break;
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_19;
        }
      }
LABEL_20:
      *a3 = v4;
      return a2;
    }
  }
  v7 = *a2;
  if ((_QWORD *)*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v10 = a2;
      do
      {
        v9 = (_QWORD *)v10[2];
        v11 = *v9 == (_QWORD)v10;
        v10 = v9;
      }
      while (v11);
    }
    v12 = *a4;
    if (v12 < *((unsigned __int16 *)v9 + 16))
    {
      while (1)
      {
        v13 = *v4;
        a2 = v4;
        if (!*v4)
          goto LABEL_20;
        while (1)
        {
          v4 = (_QWORD *)v13;
          if (v12 < *(unsigned __int16 *)(v13 + 32))
            break;
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
          {
LABEL_19:
            a2 = v4 + 1;
            goto LABEL_20;
          }
        }
      }
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
  }
  return a2;
}

uint64_t std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::__count_multi<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *a2;
  while (1)
  {
    v6 = *((unsigned __int16 *)v3 + 16);
    if (v5 >= v6)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (v6 < v5)
  {
    ++v3;
    goto LABEL_7;
  }
  v9 = *v3;
  v10 = v3;
  if (*v3)
  {
    v10 = v3;
    do
    {
      v11 = *(unsigned __int16 *)(v9 + 32);
      v12 = v11 >= v5;
      if (v11 >= v5)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (v12)
        v10 = (_QWORD *)v9;
      v9 = *v13;
    }
    while (*v13);
  }
  v14 = v3[1];
  if (v14)
  {
    do
    {
      v15 = *(unsigned __int16 *)(v14 + 32);
      v16 = v5 >= v15;
      if (v5 >= v15)
        v17 = (uint64_t *)(v14 + 8);
      else
        v17 = (uint64_t *)v14;
      if (!v16)
        v2 = (_QWORD *)v14;
      v14 = *v17;
    }
    while (*v17);
  }
  if (v10 == v2)
    return 0;
  v7 = 0;
  do
  {
    v18 = (_QWORD *)v10[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v10[2];
        v20 = *v19 == (_QWORD)v10;
        v10 = v19;
      }
      while (!v20);
    }
    ++v7;
    v10 = v19;
  }
  while (v19 != v2);
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,IPTC_Manager::DataSetInfo>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void IPTC_Writer::ConvertToUTF8()
{
  __assert_rtn("ConvertToUTF8", "IPTC_Support.cpp", 682, "! this->utf8Encoding");
}

void IPTC_Writer::UpdateMemoryDataSets()
{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 669, "this->iptcLength == newLength");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 664, "dsPtr == (newContent + newLength)");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 659, "currDS.recNum > 1");
}

{
  __assert_rtn("UpdateMemoryDataSets", "IPTC_Support.cpp", 638, "currDS.recNum == 1");
}

BOOL IsInternalProperty(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v30;
  BOOL v31;
  int v33;
  char *v37;
  _BOOL8 result;
  const char **v39;
  const char **v40;
  const char *v41;
  unint64_t v42;
  const char **v43;
  const char **v44;
  const char *v45;
  int v46;
  uint64_t *v49;
  int v50;
  int v51;
  uint64_t *v52;
  BOOL v53;
  char *v55;
  uint64_t v56;
  uint64_t v60;
  int v61;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  int v68;
  BOOL v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v82;
  uint64_t v83;
  unint64_t v85;
  unint64_t v86;
  int v87;

  v2 = a2;
  v3 = a1;
  v4 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    switch(*((_BYTE *)a1 + 23))
    {
      case 0x1C:
        if (*a1 == 0x6E2F2F3A70747468
          && a1[1] == 0x2E65626F64612E73
          && a1[2] == 0x2F7061782F6D6F63
          && *((_DWORD *)a1 + 6) == 791686705)
        {
          goto LABEL_145;
        }
        if (v4 != 28)
          goto LABEL_123;
        v8 = *a1 == 0x6E2F2F3A70747468 && a1[1] == 0x2E65626F64612E73;
        v9 = v8 && a1[2] == 0x2F6664702F6D6F63;
        if (!v9 || *((_DWORD *)a1 + 6) != 791883313)
          goto LABEL_123;
        goto LABEL_221;
      case 0x1D:
        if (*a1 == 0x6E2F2F3A70747468
          && a1[1] == 0x2E65626F64612E73
          && a1[2] == 0x666669742F6D6F63
          && *(_QWORD *)((char *)a1 + 21) == 0x2F302E312F666669)
        {
          goto LABEL_163;
        }
        if (v4 != 29)
          goto LABEL_123;
        v30 = *a1 == 0x6E2F2F3A70747468 && a1[1] == 0x2E65626F64612E73;
        v31 = v30 && a1[2] == 0x666978652F6D6F63;
        if (!v31 || *(_QWORD *)((char *)a1 + 21) != 0x2F302E312F666978)
          goto LABEL_123;
        goto LABEL_110;
      case 0x20:
        if (*a1 != 0x702F2F3A70747468
          || a1[1] != 0x2F67726F2E6C7275
          || a1[2] != 0x656D656C652F6364
          || a1[3] != 0x2F312E312F73746ELL)
        {
          goto LABEL_123;
        }
        goto LABEL_159;
      case 0x21:
        goto LABEL_86;
      default:
        goto LABEL_123;
    }
  }
  v11 = a1[1];
  if (v11 != 28)
  {
    if (v11 == 32)
    {
      v12 = *(_QWORD *)*a1 == 0x702F2F3A70747468 && *(_QWORD *)(*a1 + 8) == 0x2F67726F2E6C7275;
      v13 = v12 && *(_QWORD *)(*a1 + 16) == 0x656D656C652F6364;
      if (v13 && *(_QWORD *)(*a1 + 24) == 0x2F312E312F73746ELL)
      {
LABEL_159:
        if (*((char *)a2 + 23) < 0)
        {
          v65 = a2[1];
          if (v65 == 9 && *(_QWORD *)*a2 == 0x616D726F663A6364 && *(_BYTE *)(*a2 + 8) == 116)
            return 1;
          if (v65 != 11)
            return 0;
          v2 = (_QWORD *)*a2;
        }
        else
        {
          v50 = *((unsigned __int8 *)a2 + 23);
          if (v50 == 9)
            return *a2 == 0x616D726F663A6364 && *((_BYTE *)a2 + 8) == 116;
          if (v50 != 11)
            return 0;
        }
        return *v2 == 0x75676E616C3A6364 && *(_QWORD *)((char *)v2 + 3) == 0x65676175676E616CLL;
      }
    }
    goto LABEL_61;
  }
  if (*(_QWORD *)*a1 == 0x6E2F2F3A70747468
    && *(_QWORD *)(*a1 + 8) == 0x2E65626F64612E73
    && *(_QWORD *)(*a1 + 16) == 0x2F7061782F6D6F63
    && *(_DWORD *)(*a1 + 24) == 791686705)
  {
LABEL_145:
    if (*((char *)a2 + 23) < 0)
    {
      v56 = a2[1];
      if (v56 == 11 && *(_QWORD *)*a2 == 0x657361423A706D78 && *(_QWORD *)(*a2 + 3) == 0x4C5255657361423ALL)
        return 1;
      if (v56 == 15)
      {
        if (*(_QWORD *)*a2 == 0x616572433A706D78 && *(_QWORD *)(*a2 + 7) == 0x6C6F6F54726F7461)
          return 1;
        v56 = a2[1];
      }
      if (v56 != 10)
        goto LABEL_267;
      if (*(_QWORD *)*a2 == 0x6D726F463A706D78 && *(_WORD *)(*a2 + 8) == 29793)
        return 1;
      if (a2[1] != 10)
      {
LABEL_267:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "xmp:MetadataDate"))
          return 1;
        v37 = "xmp:ModifyDate";
        goto LABEL_126;
      }
      v49 = (uint64_t *)*a2;
    }
    else
    {
      v46 = *((unsigned __int8 *)a2 + 23);
      if (v46 != 10)
      {
        if (v46 == 11)
        {
          if (*a2 == 0x657361423A706D78 && *(_QWORD *)((char *)a2 + 3) == 0x4C5255657361423ALL)
            return 1;
        }
        else if (v46 == 15 && *a2 == 0x616572433A706D78 && *(_QWORD *)((char *)a2 + 7) == 0x6C6F6F54726F7461)
        {
          return 1;
        }
        goto LABEL_267;
      }
      if (*a2 == 0x6D726F463A706D78 && *((_WORD *)a2 + 4) == 29793)
        return 1;
      v49 = a2;
    }
    v60 = *v49;
    v61 = *((unsigned __int16 *)v49 + 4);
    if (v60 == 0x61636F4C3A706D78 && v61 == 25964)
      return 1;
    goto LABEL_267;
  }
  v11 = a1[1];
  if (v11 != 28)
    goto LABEL_61;
  if (*(_QWORD *)*a1 == 0x6E2F2F3A70747468
    && *(_QWORD *)(*a1 + 8) == 0x2E65626F64612E73
    && *(_QWORD *)(*a1 + 16) == 0x2F6664702F6D6F63
    && *(_DWORD *)(*a1 + 24) == 791883313)
  {
LABEL_221:
    v68 = *((char *)a2 + 23);
    if (v68 < 0)
    {
      if (a2[1] == 11)
      {
        v71 = (uint64_t *)*a2;
        if (*(_QWORD *)*a2 == 0x657361423A666470 && *(_QWORD *)(*a2 + 3) == 0x4C5255657361423ALL)
          return 1;
        if (*v71 == 0x616572433A666470 && *(uint64_t *)((char *)v71 + 3) == 0x726F74616572433ALL)
          return 1;
        goto LABEL_278;
      }
    }
    else if (v68 == 11)
    {
      if (*a2 == 0x657361423A666470 && *(_QWORD *)((char *)a2 + 3) == 0x4C5255657361423ALL)
        return 1;
      v70 = *a2 == 0x616572433A666470 && *(_QWORD *)((char *)a2 + 3) == 0x726F74616572433ALL;
      v71 = a2;
      if (v70)
        return 1;
LABEL_278:
      v82 = *v71;
      v83 = *(uint64_t *)((char *)v71 + 3);
      if (v82 == 0x44646F4D3A666470 && v83 == 0x65746144646F4D3ALL)
        return 1;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "pdf:PDFVersion"))
      return 1;
    v37 = "pdf:Producer";
LABEL_126:
    result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v37);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  if ((v4 & 0x80) == 0)
    goto LABEL_123;
LABEL_61:
  if (v11 != 29)
  {
LABEL_84:
    if (v11 == 33)
    {
      a1 = (_QWORD *)*a1;
LABEL_86:
      if (!memcmp(a1, "http://ns.adobe.com/exif/1.0/aux/", 0x21uLL))
        return 1;
    }
LABEL_123:
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/photoshop/1.0/"))
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "photoshop:ICCProfile"))
        return 1;
      v37 = "photoshop:TextLayers";
      goto LABEL_126;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/camera-raw-settings/1.0/"))
    {
      return 1;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xmp/1.0/DynamicMedia/"))
    {
      v39 = (const char **)kLastExternalxmpDM;
      v40 = (const char **)kExternalxmpDM;
      if (!kLastExternalxmpDM)
      {
        v39 = (const char **)&unk_1EDF03128;
        do
        {
          v41 = v39[1];
          ++v39;
        }
        while (v41);
        kLastExternalxmpDM = (uint64_t)v39;
      }
      if (*((char *)v2 + 23) < 0)
        v2 = (_QWORD *)*v2;
      if (v39 != (const char **)kExternalxmpDM)
      {
        v42 = ((char *)v39 - (char *)kExternalxmpDM) >> 3;
        do
        {
          v43 = &v40[v42 >> 1];
          v45 = *v43;
          v44 = v43 + 1;
          if (strcmp(v45, (const char *)v2) >= 0)
          {
            v42 >>= 1;
          }
          else
          {
            v40 = v44;
            v42 += ~(v42 >> 1);
          }
        }
        while (v42);
        if (v40 != v39)
          return strcmp((const char *)v2, *v40) >> 31;
      }
      return 1;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xmp/1.0/Script/"))
    {
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/bwf/bext/1.0/"))
      {
        v63 = "bext:version";
        v64 = v2;
      }
      else
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/StockPhoto/1.0/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/mm/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/t/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/t/pg/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/g/")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "http://ns.adobe.com/xap/1.0/g/img/"))
        {
          return 1;
        }
        v63 = "http://ns.adobe.com/xap/1.0/sType/Font#";
        v64 = v3;
      }
      return std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v64, v63);
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:action")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:character")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:dialog")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "xmpScript:sceneSetting"))
    {
      v55 = "xmpScript:sceneTimeOfDay";
      return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v55);
    }
    return 0;
  }
  if (*(_QWORD *)*a1 == 0x6E2F2F3A70747468
    && *(_QWORD *)(*a1 + 8) == 0x2E65626F64612E73
    && *(_QWORD *)(*a1 + 16) == 0x666669742F6D6F63
    && *(_QWORD *)(*a1 + 21) == 0x2F302E312F666669)
  {
LABEL_163:
    if (*((char *)a2 + 23) < 0)
    {
      v72 = a2[1];
      if (v72 != 11)
      {
        if (v72 == 21)
        {
          v73 = *(_QWORD *)*a2 == 0x616D493A66666974 && *(_QWORD *)(*a2 + 8) == 0x6972637365446567;
          if (v73 && *(_QWORD *)(*a2 + 13) == 0x6E6F697470697263)
            return 0;
        }
LABEL_248:
        v55 = "tiff:Copyright";
        return !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, v55);
      }
      v52 = (uint64_t *)*a2;
    }
    else
    {
      v51 = *((unsigned __int8 *)a2 + 23);
      v52 = a2;
      if (v51 != 11)
      {
        if (v51 == 21)
        {
          v53 = *a2 == 0x616D493A66666974 && a2[1] == 0x6972637365446567;
          if (v53 && *(_QWORD *)((char *)a2 + 13) == 0x6E6F697470697263)
            return 0;
        }
        goto LABEL_248;
      }
    }
    v75 = *v52;
    v76 = *(uint64_t *)((char *)v52 + 3);
    if (v75 == 0x7472413A66666974 && v76 == 0x7473697472413A66)
      return 0;
    goto LABEL_248;
  }
  v11 = a1[1];
  if (v11 != 29)
    goto LABEL_84;
  if (*(_QWORD *)*a1 != 0x6E2F2F3A70747468
    || *(_QWORD *)(*a1 + 8) != 0x2E65626F64612E73
    || *(_QWORD *)(*a1 + 16) != 0x666978652F6D6F63
    || *(_QWORD *)(*a1 + 21) != 0x2F302E312F666978)
  {
    if ((v4 & 0x80) == 0)
      goto LABEL_123;
    goto LABEL_84;
  }
LABEL_110:
  v33 = *((char *)a2 + 23);
  if (v33 < 0)
  {
    if (a2[1] != 16)
      return 1;
    v2 = (_QWORD *)*a2;
  }
  else if (v33 != 16)
  {
    return 1;
  }
  v85 = 0x657869663A557365;
  v86 = bswap64(*v2);
  if (v86 == 0x657869663A557365 && (v85 = 0x72436F6D6D656E74, v86 = bswap64(v2[1]), v86 == 0x72436F6D6D656E74))
  {
    v87 = 0;
  }
  else if (v86 < v85)
  {
    v87 = -1;
  }
  else
  {
    v87 = 1;
  }
  return v87 != 0;
}

