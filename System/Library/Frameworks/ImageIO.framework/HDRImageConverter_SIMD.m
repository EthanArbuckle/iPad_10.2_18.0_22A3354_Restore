@implementation HDRImageConverter_SIMD

- (id)description
{
  void *v2;
  void *v3;
  void *v4;
  size_t v6;
  _OWORD v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = 256;
  memset(v7, 0, sizeof(v7));
  sysctlbyname("machdep.cpu.brand_string", v7, &v6, 0, 0);
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend((id)objc_opt_class(), "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("%@[%s]"), v3, v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

- (BOOL)isPixelFormatSupported:(unsigned int)a3
{
  return xdr::PixelFormat::choosePixelFormat(a3, 0, 0);
}

- (BOOL)convertImage:(__CVBuffer *)a3 transform:(id *)a4 toImage:(__CVBuffer *)a5 transform:(id *)a6
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int32x2_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned __int32 v43;
  float32x2_t v44;
  __int128 v50;
  size_t v51;
  float32x2_t v52;
  __int128 v54;
  uint32x2_t v55;
  void (*v56)(uint64_t, __int16, double, uint16x4_t);
  float32x2_t v57;
  BOOL v59;
  int32x2_t v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[8];
  _OWORD v69[9];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t block;
  uint64_t v75;
  void (*v76)(uint64_t, __int16, double, uint16x4_t);
  void *v77;
  __int128 v78;
  _OWORD *v79;
  _OWORD *v80;
  _DWORD *v81;
  _OWORD *v82;
  __int16 v83;
  __int16 v84;
  _OWORD v85[4];
  int v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _DWORD v100[4];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v72 = 0u;
  v73 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v72, (uint64_t)a3, &a4->var0.var0);
  v70 = 0u;
  v71 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v70, (uint64_t)a5, (int *)&a6[2].var0.var1.var2);
  v69[0] = v73;
  v9 = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 48);
  v11 = **((_OWORD **)&v72 + 1);
  v10 = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 16);
  v69[3] = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 32);
  v69[4] = v9;
  v69[1] = v11;
  v69[2] = v10;
  v12 = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 112);
  v14 = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 64);
  v13 = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 80);
  v69[7] = *(_OWORD *)(*((_QWORD *)&v72 + 1) + 96);
  v69[8] = v12;
  v69[5] = v14;
  v69[6] = v13;
  v15 = (int32x2_t)v71;
  v68[0] = v71;
  v16 = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 32);
  v17 = **((_OWORD **)&v70 + 1);
  v68[2] = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 16);
  v68[3] = v16;
  v68[1] = v17;
  v19 = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 48);
  v18 = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 64);
  v20 = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 96);
  v68[6] = *(_OWORD *)(*((_QWORD *)&v70 + 1) + 80);
  v68[7] = v20;
  v68[4] = v19;
  v68[5] = v18;
  if ((_QWORD)v71)
  {
    v15.i16[0] = *(_WORD *)(v71 + 12);
    v15.i16[2] = *(_WORD *)(v71 + 14);
  }
  else
  {
    v15 = 0;
  }
  v61 = v15;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v65, (uint64_t)&a4[1].var1);
  v62 = 0;
  v63 = 0;
  v64 = 0;
  xdr::ColorBox<HDRColorTransformOut>::ColorBox(&v62, (uint64_t)a6);
  v100[0] = *(_DWORD *)v65;
  v21 = *(_OWORD *)(v65 + 16);
  v22 = *(_OWORD *)(v65 + 48);
  v102 = *(_OWORD *)(v65 + 32);
  v103 = v22;
  v101 = v21;
  v104 = v66;
  v105 = *(_DWORD *)(v65 + 80);
  v23 = *(_OWORD *)(v65 + 112);
  v24 = *(_OWORD *)(v65 + 128);
  v106 = *(_OWORD *)(v65 + 96);
  v107 = v23;
  v25 = *(_OWORD *)(v65 + 160);
  v26 = *(_OWORD *)(v65 + 176);
  v108 = v24;
  v109 = v25;
  v27 = *(_OWORD *)(v65 + 192);
  v28 = *(_OWORD *)(v65 + 208);
  v110 = v26;
  v111 = v27;
  v112 = v28;
  v113 = v67;
  v29 = *(_OWORD *)(v65 + 224);
  v30 = *(_OWORD *)(v65 + 240);
  v31 = *(_OWORD *)(v65 + 256);
  v117 = *(_OWORD *)(v65 + 272);
  v116 = v31;
  v115 = v30;
  v114 = v29;
  v32 = *v62;
  v33 = v62[1];
  v34 = v62[3];
  v85[2] = v62[2];
  v85[3] = v34;
  v85[0] = v32;
  v85[1] = v33;
  v86 = *((_DWORD *)v62 + 16);
  v35 = v62[6];
  v36 = v62[7];
  v87 = v62[5];
  v88 = v35;
  v37 = v62[9];
  v38 = v62[10];
  v39 = v62[11];
  v40 = v62[12];
  v94 = v64;
  v95 = *((_DWORD *)v62 + 52);
  v89 = v36;
  v90 = v37;
  v91 = v38;
  v92 = v39;
  v93 = v40;
  v41 = v62[14];
  v42 = v62[16];
  v97 = v62[15];
  v98 = v42;
  v96 = v41;
  v99 = v63;
  v43 = vmax_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)&a6[3].var0.var1.var1.var3, 0).u32[0], (uint16x4_t)vext_s8(*(int8x8_t *)&a6[3].var0.var1.var1.var3, *(int8x8_t *)&a6[3].var0.var1.var1.var3, 2uLL).u32[0]).u32[0];
  if ((unsigned __int16)v43 == 1 && HIWORD(v43) == 1)
  {
    v44 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v61, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)&v50 = vdiv_f32(_D1, v44);
    *((float32x2_t *)&v50 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v44);
    block = MEMORY[0x1E0C809B0];
    v75 = 3221225472;
    v76 = ___ZN3xdr36dispatch_convert_image_to_image_loopILt1ELt1EEEvRKNS_7imageInERKNS_8imageOutERKNS_16colorTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
    v77 = &__block_descriptor_84_e8_v16__0Q8l;
    v51 = v61.u16[2];
    v84 = v61.i16[2];
    v83 = v61.i16[0];
    v79 = v69;
    v80 = v68;
    v81 = v100;
    v82 = v85;
    v78 = v50;
LABEL_14:
    dispatch_apply(v51, 0, &block);
    v59 = 1;
    goto LABEL_15;
  }
  if ((unsigned __int16)v43 == 2 && HIWORD(v43) == 1)
  {
    v52 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v61, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v54 = vdiv_f32(_D2, v52);
    *((float32x2_t *)&v54 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v52);
    v55 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(v61, (int32x2_t)1), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xFFFFFFFFLL);
    v51 = v55.u32[1];
    block = MEMORY[0x1E0C809B0];
    v75 = 3221225472;
    v56 = (void (*)(uint64_t, __int16, double, uint16x4_t))___ZN3xdr36dispatch_convert_image_to_image_loopILt2ELt1EEEvRKNS_7imageInERKNS_8imageOutERKNS_16colorTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
LABEL_13:
    v76 = v56;
    v77 = &__block_descriptor_84_e8_v16__0Q8l;
    v84 = v51;
    v83 = v55.i16[0];
    v79 = v69;
    v80 = v68;
    v81 = v100;
    v82 = v85;
    v78 = v54;
    goto LABEL_14;
  }
  if ((unsigned __int16)v43 == 2 && HIWORD(v43) == 2)
  {
    v57 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v61, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v54 = vdiv_f32(_D2, v57);
    *((float32x2_t *)&v54 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v57);
    v55 = vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(v61, (int32x2_t)0x100000001), (int8x8_t)0xFFFF0000FFFFLL), 1uLL);
    v51 = v55.u32[1];
    block = MEMORY[0x1E0C809B0];
    v75 = 3221225472;
    v56 = (void (*)(uint64_t, __int16, double, uint16x4_t))___ZN3xdr36dispatch_convert_image_to_image_loopILt2ELt2EEEvRKNS_7imageInERKNS_8imageOutERKNS_16colorTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
    goto LABEL_13;
  }
  LogError("-[HDRImageConverter_SIMD convertImage:transform:toImage:transform:]", 728, "Unupported subsample factors (%d,%d)", (unsigned __int16)v43, HIWORD(v43));
  v59 = 0;
LABEL_15:
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  if ((_QWORD)v71)
    (*(void (**)(_QWORD))(*(_QWORD *)v71 + 8))(v71);
  if (*((_QWORD *)&v71 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v71 + 1) + 8))(*((_QWORD *)&v71 + 1));
  if ((_QWORD)v73)
    (*(void (**)(_QWORD))(*(_QWORD *)v73 + 8))(v73);
  if (*((_QWORD *)&v73 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v73 + 1) + 8))(*((_QWORD *)&v73 + 1));
  return v59;
}

- (BOOL)convertImage:(__CVBuffer *)a3 transform:(id *)a4 gainMap:(__CVBuffer *)a5 transform:(id *)a6 toImage:(__CVBuffer *)a7 transform:(id *)a8
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint16x4_t v57;
  int8x8_t v58;
  int32x2_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  BOOL v63;
  float32x2_t v64;
  __int128 v70;
  size_t v71;
  uint32x2_t v72;
  float32x2_t v73;
  int8x8_t v76;
  float32x2_t v77;
  __int128 v79;
  uint32x2_t v80;
  _OWORD v81[11];
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[8];
  _OWORD v100[9];
  _OWORD v101[9];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t block;
  uint64_t v109;
  void *v110;
  void *v111;
  __int128 v112;
  _OWORD *v113;
  _OWORD *v114;
  _OWORD *v115;
  _DWORD *v116;
  _OWORD *v117;
  _OWORD *v118;
  __int16 v119;
  __int16 v120;
  _OWORD v121[4];
  int v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _DWORD v136[4];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v106 = 0u;
  v107 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v106, (uint64_t)a3, &a4->var0.var0);
  v104 = 0u;
  v105 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v104, (uint64_t)a5, &a6->var0.var0);
  v102 = 0u;
  v103 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v102, (uint64_t)a7, (int *)&a8[2].var0.var1.var2);
  v101[0] = v107;
  v13 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 48);
  v15 = **((_OWORD **)&v106 + 1);
  v14 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 16);
  v101[3] = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 32);
  v101[4] = v13;
  v101[1] = v15;
  v101[2] = v14;
  v16 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 112);
  v18 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 64);
  v17 = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 80);
  v101[7] = *(_OWORD *)(*((_QWORD *)&v106 + 1) + 96);
  v101[8] = v16;
  v101[5] = v18;
  v101[6] = v17;
  v100[0] = v105;
  v19 = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 48);
  v21 = **((_OWORD **)&v104 + 1);
  v20 = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 16);
  v100[3] = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 32);
  v100[4] = v19;
  v100[1] = v21;
  v100[2] = v20;
  v23 = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 64);
  v22 = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 80);
  v24 = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 112);
  v100[7] = *(_OWORD *)(*((_QWORD *)&v104 + 1) + 96);
  v100[8] = v24;
  v100[5] = v23;
  v100[6] = v22;
  v99[0] = v103;
  v25 = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 32);
  v26 = **((_OWORD **)&v102 + 1);
  v99[2] = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 16);
  v99[3] = v25;
  v99[1] = v26;
  v28 = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 48);
  v27 = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 64);
  v29 = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 96);
  v99[6] = *(_OWORD *)(*((_QWORD *)&v102 + 1) + 80);
  v99[7] = v29;
  v99[4] = v28;
  v99[5] = v27;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v96, (uint64_t)&a4[1].var1);
  v30 = *(_OWORD *)&a6[22].var1.var1.var1;
  v93 = *(_OWORD *)&a6[21].var1.var0.var0;
  v94 = v30;
  v95 = *(_OWORD *)&a6[24].var0.var0;
  v31 = *(_OWORD *)&a6[17].var1.var0.var0;
  v89 = *(_OWORD *)&a6[16].var0.var0;
  v90 = v31;
  v32 = *(_OWORD *)&a6[20].var0.var0;
  v91 = *(_OWORD *)&a6[18].var1.var1.var1;
  v92 = v32;
  v33 = *(_OWORD *)&a6[12].var0.var0;
  v85 = *(_OWORD *)&a6[10].var1.var1.var1;
  v86 = v33;
  v34 = *(_OWORD *)&a6[14].var1.var1.var1;
  v87 = *(_OWORD *)&a6[13].var1.var0.var0;
  v88 = v34;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  xdr::ColorBox<HDRColorTransformOut>::ColorBox(&v82, (uint64_t)a8);
  v136[0] = *(_DWORD *)v96;
  v35 = *(_OWORD *)(v96 + 16);
  v36 = *(_OWORD *)(v96 + 32);
  v139 = *(_OWORD *)(v96 + 48);
  v138 = v36;
  v137 = v35;
  v140 = v97;
  v141 = *(_DWORD *)(v96 + 80);
  v37 = *(_OWORD *)(v96 + 96);
  v38 = *(_OWORD *)(v96 + 128);
  v143 = *(_OWORD *)(v96 + 112);
  v142 = v37;
  v39 = *(_OWORD *)(v96 + 160);
  v40 = *(_OWORD *)(v96 + 176);
  v144 = v38;
  v145 = v39;
  v41 = *(_OWORD *)(v96 + 192);
  v42 = *(_OWORD *)(v96 + 208);
  v146 = v40;
  v147 = v41;
  v148 = v42;
  v149 = v98;
  v43 = *(_OWORD *)(v96 + 224);
  v44 = *(_OWORD *)(v96 + 240);
  v45 = *(_OWORD *)(v96 + 256);
  v153 = *(_OWORD *)(v96 + 272);
  v152 = v45;
  v151 = v44;
  v150 = v43;
  v81[4] = v89;
  v81[5] = v90;
  v81[0] = v85;
  v81[1] = v86;
  v81[2] = v87;
  v81[3] = v88;
  v81[9] = v94;
  v81[10] = v95;
  v81[7] = v92;
  v81[8] = v93;
  v81[6] = v91;
  v46 = *v82;
  v47 = v82[1];
  v48 = v82[2];
  v121[3] = v82[3];
  v121[2] = v48;
  v121[1] = v47;
  v121[0] = v46;
  v122 = *((_DWORD *)v82 + 16);
  v49 = v82[5];
  v50 = v82[7];
  v124 = v82[6];
  v123 = v49;
  v51 = v82[9];
  v52 = v82[10];
  v53 = v82[11];
  v54 = v82[12];
  v130 = v84;
  v131 = *((_DWORD *)v82 + 52);
  v125 = v50;
  v126 = v51;
  v127 = v52;
  v128 = v53;
  v129 = v54;
  v55 = v82[14];
  v56 = v82[15];
  v134 = v82[16];
  v133 = v56;
  v132 = v55;
  v135 = v83;
  if ((_QWORD)v103)
  {
    LOWORD(v55) = *(_WORD *)(v103 + 12);
    WORD2(v55) = *(_WORD *)(v103 + 14);
  }
  else
  {
    *(_QWORD *)&v55 = 0;
  }
  v57 = vmax_u16((uint16x4_t)vdup_lane_s16(*(int16x4_t *)&a8[3].var0.var1.var1.var3, 0).u32[0], (uint16x4_t)vext_s8(*(int8x8_t *)&a8[3].var0.var1.var1.var3, *(int8x8_t *)&v55, 2uLL).u32[0]);
  v58 = (int8x8_t)vmovl_u16(v57).u64[0];
  v59 = (int32x2_t)vand_s8(v58, (int8x8_t)0xFFFF0000FFFFLL);
  v60 = (int16x4_t)vceq_s32(v59, (int32x2_t)0x100000001);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v60, v60)) & 0x8000) != 0)
  {
    v64 = vadd_f32((float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)&v55, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v70 = vdiv_f32(_D2, v64);
    *((float32x2_t *)&v70 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v64);
    block = MEMORY[0x1E0C809B0];
    v109 = 3221225472;
    v110 = ___ZN3xdr44dispatch_convert_gainmap_image_to_image_loopILt1ELt1EEEvRKNS_7imageInES3_RKNS_8imageOutERKNS_16colorTransformInERKNS_15gainTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
    v111 = &__block_descriptor_100_e8_v16__0Q8l;
    v71 = WORD2(v55);
    v120 = WORD2(v55);
LABEL_10:
    v119 = v55;
    v113 = v101;
    v114 = v100;
    v115 = v99;
    v116 = v136;
    v117 = v81;
    v118 = v121;
    v112 = v70;
    goto LABEL_11;
  }
  v61 = (int16x4_t)vceq_s32(v59, (int32x2_t)0x100000002);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v61, v61)) & 0x8000) != 0)
  {
    v72 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)1), (int8x8_t)0xFFFF0000FFFFLL);
    v73 = vadd_f32((float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)&v55, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v70 = vdiv_f32(_D2, v73);
    *((float32x2_t *)&v70 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v73);
    *(uint32x2_t *)&v55 = vshl_u32(v72, (uint32x2_t)0xFFFFFFFFLL);
    v71 = DWORD1(v55);
    block = MEMORY[0x1E0C809B0];
    v109 = 3221225472;
    v110 = ___ZN3xdr44dispatch_convert_gainmap_image_to_image_loopILt2ELt1EEEvRKNS_7imageInES3_RKNS_8imageOutERKNS_16colorTransformInERKNS_15gainTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
    v111 = &__block_descriptor_100_e8_v16__0Q8l;
    v120 = WORD2(v55);
    goto LABEL_10;
  }
  v62 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v58, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)0x200000002);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v62, v62)) & 0x8000) == 0)
  {
    LogError("-[HDRImageConverter_SIMD convertImage:transform:gainMap:transform:toImage:transform:]", 772, "Unupported subsample factors (%d,%d)", v57.u16[0], v57.u16[1]);
    v63 = 0;
    goto LABEL_12;
  }
  v76 = (int8x8_t)vadd_s32(*(int32x2_t *)&v55, (int32x2_t)0x100000001);
  v77 = vadd_f32((float32x2_t)vorr_s8(vand_s8(*(int8x8_t *)&v55, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)&v79 = vdiv_f32(_D3, v77);
  *((float32x2_t *)&v79 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v77);
  v80 = vshr_n_u32((uint32x2_t)vand_s8(v76, (int8x8_t)0xFFFF0000FFFFLL), 1uLL);
  v71 = v80.u32[1];
  block = MEMORY[0x1E0C809B0];
  v109 = 3221225472;
  v110 = ___ZN3xdr44dispatch_convert_gainmap_image_to_image_loopILt2ELt2EEEvRKNS_7imageInES3_RKNS_8imageOutERKNS_16colorTransformInERKNS_15gainTransformInERKNS_17colorTransformOutEDv2_t_block_invoke;
  v111 = &__block_descriptor_100_e8_v16__0Q8l;
  v120 = v80.i16[2];
  v119 = v80.i16[0];
  v113 = v101;
  v114 = v100;
  v115 = v99;
  v116 = v136;
  v117 = v81;
  v118 = v121;
  v112 = v79;
LABEL_11:
  dispatch_apply(v71, 0, &block);
  v63 = 1;
LABEL_12:
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  if ((_QWORD)v103)
    (*(void (**)(_QWORD))(*(_QWORD *)v103 + 8))(v103);
  if (*((_QWORD *)&v103 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v103 + 1) + 8))(*((_QWORD *)&v103 + 1));
  if ((_QWORD)v105)
    (*(void (**)(_QWORD))(*(_QWORD *)v105 + 8))(v105);
  if (*((_QWORD *)&v105 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v105 + 1) + 8))(*((_QWORD *)&v105 + 1));
  if ((_QWORD)v107)
    (*(void (**)(_QWORD))(*(_QWORD *)v107 + 8))(v107);
  if (*((_QWORD *)&v107 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 8))(*((_QWORD *)&v107 + 1));
  return v63;
}

- (BOOL)convertImage:(__CVBuffer *)a3 transform:(id *)a4 alternate:(id *)a5 toImage:(__CVBuffer *)a6 transform:(id *)a7 gainMap:(__CVBuffer *)a8 transform:(id *)a9
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int32x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  int v74;
  __int128 v75;
  uint16x4_t v76;
  uint16x4_t v77;
  int16x4_t v78;
  uint16x4_t v79;
  int8x8_t v80;
  int32x2_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int32x2_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  BOOL v88;
  float32x2_t v89;
  __int128 v95;
  size_t v96;
  uint32x2_t v97;
  float32x2_t v98;
  void *v100;
  int8x8_t v101;
  float32x2_t v102;
  int8x8_t v105;
  float32x2_t v106;
  __int128 v108;
  uint32x2_t v109;
  int8x8_t v110;
  float32x2_t v111;
  _OWORD v113[11];
  uint64_t v114;
  __int128 v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD v137[8];
  _OWORD v138[8];
  _OWORD v139[9];
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t block;
  uint64_t v147;
  void *v148;
  void *v149;
  __int128 v150;
  _OWORD *v151;
  _OWORD *v152;
  _OWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  _OWORD *v156;
  _OWORD *v157;
  __int16 v158;
  __int16 v159;
  _OWORD v160[4];
  int v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _DWORD v175[4];
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  int v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _DWORD v193[4];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v144 = 0u;
  v145 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v144, (uint64_t)a3, &a4->var0.var0);
  v142 = 0u;
  v143 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v142, (uint64_t)a6, (int *)&a7[2].var0.var1.var2);
  v140 = 0u;
  v141 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v140, (uint64_t)a8, &a9[18].var1.var0);
  v139[0] = v145;
  v14 = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 48);
  v16 = **((_OWORD **)&v144 + 1);
  v15 = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 16);
  v139[3] = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 32);
  v139[4] = v14;
  v139[1] = v16;
  v139[2] = v15;
  v17 = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 112);
  v19 = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 64);
  v18 = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 80);
  v139[7] = *(_OWORD *)(*((_QWORD *)&v144 + 1) + 96);
  v139[8] = v17;
  v139[5] = v19;
  v139[6] = v18;
  v138[0] = v143;
  v20 = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 32);
  v21 = **((_OWORD **)&v142 + 1);
  v138[2] = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 16);
  v138[3] = v20;
  v138[1] = v21;
  v23 = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 48);
  v22 = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 64);
  v24 = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 96);
  v138[6] = *(_OWORD *)(*((_QWORD *)&v142 + 1) + 80);
  v138[7] = v24;
  v138[4] = v23;
  v138[5] = v22;
  v137[0] = v141;
  v25 = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 32);
  v26 = **((_OWORD **)&v140 + 1);
  v137[2] = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 16);
  v137[3] = v25;
  v137[1] = v26;
  v28 = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 48);
  v27 = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 64);
  v29 = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 96);
  v137[6] = *(_OWORD *)(*((_QWORD *)&v140 + 1) + 80);
  v137[7] = v29;
  v137[4] = v28;
  v137[5] = v27;
  v134 = 0;
  v135 = 0;
  v136 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v134, (uint64_t)&a4[1].var1);
  v131 = 0;
  v132 = 0;
  v133 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v131, (uint64_t)&a5[1].var1);
  v128 = 0;
  v129 = 0;
  v130 = 0;
  xdr::ColorBox<HDRColorTransformOut>::ColorBox(&v128, (uint64_t)a7);
  v30 = *(_OWORD *)&a9[12].var0.var0.var0;
  v125 = *(_OWORD *)&a9[10].var1.var0;
  v126 = v30;
  v127 = *(_OWORD *)&a9[13].var0.var1.var1;
  v31 = *(_OWORD *)&a9[4].var0.var0.var0;
  v32 = *(_OWORD *)&a9[6].var1.var0;
  v121 = *(_OWORD *)&a9[5].var0.var1.var1;
  v122 = v32;
  v33 = *(_OWORD *)&a9[6].var1.var0;
  v35 = *(_OWORD *)&a9[9].var0.var1.var1;
  v123 = *(_OWORD *)&a9[8].var0.var0.var0;
  v34 = (int32x2_t)v123;
  v124 = v35;
  v36 = *(_OWORD *)&a9[1].var0.var1.var1;
  v117 = *(_OWORD *)&a9->var0.var0.var0;
  v118 = v36;
  v37 = *(_OWORD *)&a9[4].var0.var0.var0;
  v39 = *(_OWORD *)&a9->var0.var0.var0;
  v38 = *(_OWORD *)&a9[1].var0.var1.var1;
  v119 = *(_OWORD *)&a9[2].var1.var0;
  v120 = v37;
  v193[0] = *(_DWORD *)v134;
  v40 = *(_OWORD *)(v134 + 16);
  v41 = *(_OWORD *)(v134 + 32);
  v196 = *(_OWORD *)(v134 + 48);
  v195 = v41;
  v194 = v40;
  v197 = v135;
  v198 = *(_DWORD *)(v134 + 80);
  v42 = *(_OWORD *)(v134 + 96);
  v43 = *(_OWORD *)(v134 + 128);
  v200 = *(_OWORD *)(v134 + 112);
  v199 = v42;
  v44 = *(_OWORD *)(v134 + 160);
  v45 = *(_OWORD *)(v134 + 176);
  v201 = v43;
  v202 = v44;
  v46 = *(_OWORD *)(v134 + 192);
  v47 = *(_OWORD *)(v134 + 208);
  v203 = v45;
  v204 = v46;
  v205 = v47;
  v206 = v136;
  v48 = *(_OWORD *)(v134 + 224);
  v49 = *(_OWORD *)(v134 + 240);
  v50 = *(_OWORD *)(v134 + 256);
  v210 = *(_OWORD *)(v134 + 272);
  v209 = v50;
  v208 = v49;
  v207 = v48;
  v175[0] = *(_DWORD *)v131;
  v51 = *(_OWORD *)(v131 + 16);
  v52 = *(_OWORD *)(v131 + 32);
  v178 = *(_OWORD *)(v131 + 48);
  v177 = v52;
  v176 = v51;
  v179 = v132;
  v180 = *(_DWORD *)(v131 + 80);
  v54 = *(_OWORD *)(v131 + 112);
  v53 = *(_OWORD *)(v131 + 128);
  v181 = *(_OWORD *)(v131 + 96);
  v182 = v54;
  v55 = *(_OWORD *)(v131 + 160);
  v56 = *(_OWORD *)(v131 + 176);
  v183 = v53;
  v184 = v55;
  v57 = *(_OWORD *)(v131 + 192);
  v58 = *(_OWORD *)(v131 + 208);
  v185 = v56;
  v186 = v57;
  v187 = v58;
  v188 = v133;
  v59 = *(_OWORD *)(v131 + 224);
  v60 = *(_OWORD *)(v131 + 240);
  v61 = *(_OWORD *)(v131 + 256);
  v192 = *(_OWORD *)(v131 + 272);
  v191 = v61;
  v190 = v60;
  v189 = v59;
  v62 = *v128;
  v63 = v128[1];
  v64 = v128[2];
  v160[3] = v128[3];
  v160[2] = v64;
  v160[1] = v63;
  v160[0] = v62;
  v65 = *((_DWORD *)v128 + 16);
  v66 = v128[5];
  v67 = v128[7];
  v163 = v128[6];
  v162 = v66;
  v68 = v128[9];
  v69 = v128[10];
  v164 = v67;
  v165 = v68;
  v70 = v128[11];
  v71 = v128[12];
  v166 = v69;
  v167 = v70;
  v168 = v71;
  v72 = v128[14];
  v73 = v128[15];
  v74 = *((_DWORD *)v128 + 52);
  v173 = v128[16];
  v172 = v73;
  v171 = v72;
  *(_QWORD *)&v72 = *(_QWORD *)&a9[14].var1.var0;
  v113[4] = v121;
  v113[5] = v33;
  v75 = *(_OWORD *)&a9[16].var0.var0.var0;
  v161 = v65;
  v169 = v130;
  LOBYTE(v65) = a9[17].var0.var1.var1;
  v170 = v74;
  v174 = v129;
  v113[0] = v39;
  v113[1] = v38;
  v113[2] = v119;
  v113[3] = v31;
  v113[9] = v126;
  v113[10] = v127;
  v113[7] = v124;
  v113[8] = v125;
  v113[6] = v123;
  v114 = v72;
  v115 = v75;
  v116 = v65;
  if ((_QWORD)v143)
  {
    v34.i16[0] = *(_WORD *)(v143 + 12);
    v34.i16[2] = *(_WORD *)(v143 + 14);
  }
  else
  {
    v34 = 0;
  }
  v76 = *(uint16x4_t *)&a7[3].var0.var1.var1.var3;
  v77 = *(uint16x4_t *)&a9[26].var1.var0;
  v76.i16[3] = 0;
  v77.i16[3] = 0;
  v78 = (int16x4_t)vmax_u16(v76, v77);
  v79 = vmax_u16((uint16x4_t)vdup_lane_s16(v78, 0).u32[0], (uint16x4_t)vext_s8((int8x8_t)v78, (int8x8_t)v34, 2uLL).u32[0]);
  v80 = (int8x8_t)vmovl_u16(v79).u64[0];
  v81 = (int32x2_t)vand_s8(v80, (int8x8_t)0xFFFF0000FFFFLL);
  v82 = (int16x4_t)vceq_s32(v81, (int32x2_t)0x100000001);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v82, v82)) & 0x8000) != 0)
  {
    v89 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v34, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v95 = vdiv_f32(_D2, v89);
    *((float32x2_t *)&v95 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v89);
    block = MEMORY[0x1E0C809B0];
    v147 = 3221225472;
    v148 = ___ZN3xdr44dispatch_convert_image_to_gainmap_image_loopILt1ELt1EEEvRKNS_7imageInERKNS_8imageOutES6_RKNS_16colorTransformInES9_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
    v149 = &__block_descriptor_108_e8_v16__0Q8l;
    v96 = v34.u16[2];
    v159 = v34.i16[2];
  }
  else
  {
    v83 = (int16x4_t)vceq_s32(v81, (int32x2_t)0x100000002);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v83, v83)) & 0x8000) != 0)
    {
      v97 = (uint32x2_t)vand_s8((int8x8_t)vadd_s32(v34, (int32x2_t)1), (int8x8_t)0xFFFF0000FFFFLL);
      v98 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v34, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
      __asm { FMOV            V2.2S, #1.0 }
      *(float32x2_t *)&v95 = vdiv_f32(_D2, v98);
      *((float32x2_t *)&v95 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v98);
      v34 = (int32x2_t)vshl_u32(v97, (uint32x2_t)0xFFFFFFFFLL);
      v96 = v34.u32[1];
      block = MEMORY[0x1E0C809B0];
      v147 = 3221225472;
      v100 = ___ZN3xdr44dispatch_convert_image_to_gainmap_image_loopILt2ELt1EEEvRKNS_7imageInERKNS_8imageOutES6_RKNS_16colorTransformInES9_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
    }
    else
    {
      v84 = (int32x2_t)vand_s8(v80, (int8x8_t)0xFFFF0000FFFFLL);
      v85 = (int16x4_t)vceq_s32(v84, (int32x2_t)0x200000002);
      if ((vminv_u16((uint16x4_t)vuzp1_s16(v85, v85)) & 0x8000) != 0)
      {
        v101 = (int8x8_t)vadd_s32(v34, (int32x2_t)0x100000001);
        v102 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v34, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
        __asm { FMOV            V2.2S, #1.0 }
        *(float32x2_t *)&v95 = vdiv_f32(_D2, v102);
        *((float32x2_t *)&v95 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v102);
        v34 = (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8(v101, (int8x8_t)0xFFFF0000FFFFLL), 1uLL);
        v96 = v34.u32[1];
        block = MEMORY[0x1E0C809B0];
        v147 = 3221225472;
        v100 = ___ZN3xdr44dispatch_convert_image_to_gainmap_image_loopILt2ELt2EEEvRKNS_7imageInERKNS_8imageOutES6_RKNS_16colorTransformInES9_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
      }
      else
      {
        v86 = (int16x4_t)vceq_s32(v84, (int32x2_t)0x200000004);
        if ((vminv_u16((uint16x4_t)vuzp1_s16(v86, v86)) & 0x8000) != 0)
        {
          v105 = (int8x8_t)vadd_s32(v34, (int32x2_t)0x100000003);
          v106 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v34, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
          __asm { FMOV            V3.2S, #1.0 }
          *(float32x2_t *)&v108 = vdiv_f32(_D3, v106);
          *((float32x2_t *)&v108 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v106);
          v109 = vshl_u32((uint32x2_t)vand_s8(v105, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)-2);
          v96 = v109.u32[1];
          block = MEMORY[0x1E0C809B0];
          v147 = 3221225472;
          v148 = ___ZN3xdr44dispatch_convert_image_to_gainmap_image_loopILt4ELt2EEEvRKNS_7imageInERKNS_8imageOutES6_RKNS_16colorTransformInES9_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
          v149 = &__block_descriptor_108_e8_v16__0Q8l;
          v159 = v109.i16[2];
          v158 = v109.i16[0];
          v151 = v139;
          v152 = v138;
          v153 = v137;
          v154 = v193;
          v155 = v175;
          v156 = v160;
          v157 = v113;
          v150 = v108;
          goto LABEL_15;
        }
        v87 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v80, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)0x400000004);
        if ((vminv_u16((uint16x4_t)vuzp1_s16(v87, v87)) & 0x8000) == 0)
        {
          LogError("-[HDRImageConverter_SIMD convertImage:transform:alternate:toImage:transform:gainMap:transform:]", 824, "Unupported subsample factors (%d,%d)", v79.u16[0], v79.u16[1]);
          v88 = 0;
          goto LABEL_16;
        }
        v110 = (int8x8_t)vadd_s32(v34, (int32x2_t)0x300000003);
        v111 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v34, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
        __asm { FMOV            V2.2S, #1.0 }
        *(float32x2_t *)&v95 = vdiv_f32(_D2, v111);
        *((float32x2_t *)&v95 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v111);
        v34 = (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8(v110, (int8x8_t)0xFFFF0000FFFFLL), 2uLL);
        v96 = v34.u32[1];
        block = MEMORY[0x1E0C809B0];
        v147 = 3221225472;
        v100 = ___ZN3xdr44dispatch_convert_image_to_gainmap_image_loopILt4ELt4EEEvRKNS_7imageInERKNS_8imageOutES6_RKNS_16colorTransformInES9_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
      }
    }
    v148 = v100;
    v149 = &__block_descriptor_108_e8_v16__0Q8l;
    v159 = v96;
  }
  v158 = v34.i16[0];
  v151 = v139;
  v152 = v138;
  v153 = v137;
  v154 = v193;
  v155 = v175;
  v156 = v160;
  v157 = v113;
  v150 = v95;
LABEL_15:
  dispatch_apply(v96, 0, &block);
  v88 = 1;
LABEL_16:
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  if ((_QWORD)v141)
    (*(void (**)(_QWORD))(*(_QWORD *)v141 + 8))(v141);
  if (*((_QWORD *)&v141 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 8))(*((_QWORD *)&v141 + 1));
  if ((_QWORD)v143)
    (*(void (**)(_QWORD))(*(_QWORD *)v143 + 8))(v143);
  if (*((_QWORD *)&v143 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v143 + 1) + 8))(*((_QWORD *)&v143 + 1));
  if ((_QWORD)v145)
    (*(void (**)(_QWORD))(*(_QWORD *)v145 + 8))(v145);
  if (*((_QWORD *)&v145 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v145 + 1) + 8))(*((_QWORD *)&v145 + 1));
  return v88;
}

- (BOOL)convertImage:(__CVBuffer *)a3 transform:(id *)a4 alternate:(id *)a5 gainMap:(__CVBuffer *)a6 transform:(id *)a7 alternate:(id *)a8 toImage:(__CVBuffer *)a9 transform:(id *)a10 gainMap:(__CVBuffer *)a11 transform:(id *)a12
{
  $7F5F757F935EFDA1B622558C1678222D *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int32x2_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  int v94;
  __int128 v95;
  uint16x4_t v96;
  uint16x4_t v97;
  int16x4_t v98;
  uint16x4_t v99;
  int8x8_t v100;
  int32x2_t v101;
  int16x4_t v102;
  int16x4_t v103;
  int32x2_t v104;
  int16x4_t v105;
  int16x4_t v106;
  int16x4_t v107;
  BOOL v108;
  float32x2_t v109;
  __int128 v115;
  size_t v116;
  float32x2_t v117;
  __int128 v119;
  uint32x2_t v120;
  uint64_t (*v121)(uint64_t, __int16, double, uint16x4_t);
  float32x2_t v122;
  void (*v124)(uint64_t, unsigned __int16);
  int8x8_t v126;
  float32x2_t v127;
  float32x2_t v129;
  _OWORD v131[11];
  uint64_t v132;
  __int128 v133;
  char v134;
  _OWORD v135[11];
  _OWORD v136[13];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _OWORD v177[8];
  _OWORD v178[8];
  _OWORD v179[9];
  _OWORD v180[9];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t block;
  uint64_t v190;
  void (*v191)(uint64_t, unsigned __int16);
  void *v192;
  __int128 v193;
  _OWORD *v194;
  _OWORD *v195;
  _OWORD *v196;
  _OWORD *v197;
  _DWORD *v198;
  _OWORD *v199;
  _DWORD *v200;
  _OWORD *v201;
  _OWORD *v202;
  _OWORD *v203;
  __int16 v204;
  __int16 v205;
  _OWORD v206[4];
  int v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  int v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  _DWORD v221[4];
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  int v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  _DWORD v239[4];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  int v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;

  v257 = *MEMORY[0x1E0C80C00];
  v188 = 0u;
  v187 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v187, (uint64_t)a3, &a4->var0.var0);
  v186 = 0u;
  v185 = 0u;
  if (a7->var0.var0)
    v17 = ($7F5F757F935EFDA1B622558C1678222D *)a7;
  else
    v17 = ($7F5F757F935EFDA1B622558C1678222D *)a8;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v185, (uint64_t)a6, &v17->var0.var0);
  v184 = 0u;
  v183 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v183, (uint64_t)a9, (int *)&a10[2].var0.var1.var2);
  v182 = 0u;
  v181 = 0u;
  _ZN3xdr8ImageBoxI20HDRPixelTransformOutLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE1EEC2EP10__CVBufferRKS1_((uint64_t)&v181, (uint64_t)a11, &a12[18].var1.var0);
  v180[0] = v188;
  v18 = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 32);
  v20 = **((_OWORD **)&v187 + 1);
  v19 = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 16);
  v180[4] = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 48);
  v180[3] = v18;
  v180[1] = v20;
  v180[2] = v19;
  v21 = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 96);
  v23 = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 64);
  v22 = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 80);
  v180[8] = *(_OWORD *)(*((_QWORD *)&v187 + 1) + 112);
  v180[7] = v21;
  v180[5] = v23;
  v180[6] = v22;
  v179[0] = v186;
  v24 = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 32);
  v26 = **((_OWORD **)&v185 + 1);
  v25 = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 16);
  v179[4] = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 48);
  v179[3] = v24;
  v179[1] = v26;
  v179[2] = v25;
  v28 = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 64);
  v27 = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 80);
  v29 = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 96);
  v179[8] = *(_OWORD *)(*((_QWORD *)&v185 + 1) + 112);
  v179[7] = v29;
  v179[5] = v28;
  v179[6] = v27;
  v178[0] = v184;
  v30 = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 16);
  v31 = **((_OWORD **)&v183 + 1);
  v178[3] = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 32);
  v178[1] = v31;
  v178[2] = v30;
  v33 = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 48);
  v32 = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 64);
  v34 = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 80);
  v178[7] = *(_OWORD *)(*((_QWORD *)&v183 + 1) + 96);
  v178[6] = v34;
  v178[4] = v33;
  v178[5] = v32;
  v177[0] = v182;
  v35 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 16);
  v36 = **((_OWORD **)&v181 + 1);
  v177[3] = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 32);
  v177[1] = v36;
  v177[2] = v35;
  v38 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 48);
  v37 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 64);
  v39 = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 80);
  v177[7] = *(_OWORD *)(*((_QWORD *)&v181 + 1) + 96);
  v177[6] = v39;
  v177[4] = v38;
  v177[5] = v37;
  v175 = 0;
  v174 = 0;
  v176 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v174, (uint64_t)&a4[1].var1);
  v40 = *(_OWORD *)&a7[22].var1.var1.var1;
  v171 = *(_OWORD *)&a7[21].var1.var0.var0;
  v172 = v40;
  v173 = *(_OWORD *)&a7[24].var0.var0;
  v41 = *(_OWORD *)&a7[17].var1.var0.var0;
  v167 = *(_OWORD *)&a7[16].var0.var0;
  v168 = v41;
  v42 = *(_OWORD *)&a7[18].var1.var1.var1;
  v170 = *(_OWORD *)&a7[20].var0.var0;
  v169 = v42;
  v43 = *(_OWORD *)&a7[12].var0.var0;
  v163 = *(_OWORD *)&a7[10].var1.var1.var1;
  v164 = v43;
  v44 = *(_OWORD *)&a7[13].var1.var0.var0;
  v166 = *(_OWORD *)&a7[14].var1.var1.var1;
  v165 = v44;
  v161 = 0;
  v160 = 0;
  v162 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v160, (uint64_t)&a5[1].var1);
  v45 = *(_OWORD *)&a8[22].var1.var1.var1;
  v157 = *(_OWORD *)&a8[21].var1.var0.var0;
  v158 = v45;
  v159 = *(_OWORD *)&a8[24].var0.var0;
  v46 = *(_OWORD *)&a8[17].var1.var0.var0;
  v153 = *(_OWORD *)&a8[16].var0.var0;
  v154 = v46;
  v47 = *(_OWORD *)&a8[20].var0.var0;
  v155 = *(_OWORD *)&a8[18].var1.var1.var1;
  v156 = v47;
  v48 = *(_OWORD *)&a8[12].var0.var0;
  v149 = *(_OWORD *)&a8[10].var1.var1.var1;
  v150 = v48;
  v49 = *(_OWORD *)&a8[14].var1.var1.var1;
  v151 = *(_OWORD *)&a8[13].var1.var0.var0;
  v152 = v49;
  v147 = 0;
  v146 = 0;
  v148 = 0;
  xdr::ColorBox<HDRColorTransformOut>::ColorBox(&v146, (uint64_t)a10);
  v50 = *(_OWORD *)&a12[12].var0.var0.var0;
  v143 = *(_OWORD *)&a12[10].var1.var0;
  v144 = v50;
  v145 = *(_OWORD *)&a12[13].var0.var1.var1;
  v51 = *(_OWORD *)&a12[4].var0.var0.var0;
  v52 = *(_OWORD *)&a12[6].var1.var0;
  v139 = *(_OWORD *)&a12[5].var0.var1.var1;
  v140 = v52;
  v53 = *(_OWORD *)&a12[6].var1.var0;
  v55 = *(_OWORD *)&a12[9].var0.var1.var1;
  v141 = *(_OWORD *)&a12[8].var0.var0.var0;
  v54 = (int32x2_t)v141;
  v142 = v55;
  v56 = *(_OWORD *)&a12[1].var0.var1.var1;
  v136[11] = *(_OWORD *)&a12->var0.var0.var0;
  v136[12] = v56;
  v57 = *(_OWORD *)&a12[4].var0.var0.var0;
  v58 = *(_OWORD *)&a12->var0.var0.var0;
  v59 = *(_OWORD *)&a12[1].var0.var1.var1;
  v137 = *(_OWORD *)&a12[2].var1.var0;
  v138 = v57;
  v239[0] = *(_DWORD *)v174;
  v60 = *(_OWORD *)(v174 + 16);
  v61 = *(_OWORD *)(v174 + 32);
  v242 = *(_OWORD *)(v174 + 48);
  v241 = v61;
  v240 = v60;
  v243 = v175;
  v244 = *(_DWORD *)(v174 + 80);
  v62 = *(_OWORD *)(v174 + 96);
  v63 = *(_OWORD *)(v174 + 128);
  v246 = *(_OWORD *)(v174 + 112);
  v245 = v62;
  v64 = *(_OWORD *)(v174 + 160);
  v65 = *(_OWORD *)(v174 + 176);
  v247 = v63;
  v248 = v64;
  v66 = *(_OWORD *)(v174 + 192);
  v67 = *(_OWORD *)(v174 + 208);
  v249 = v65;
  v250 = v66;
  v251 = v67;
  v252 = v176;
  v68 = *(_OWORD *)(v174 + 224);
  v69 = *(_OWORD *)(v174 + 240);
  v70 = *(_OWORD *)(v174 + 256);
  v256 = *(_OWORD *)(v174 + 272);
  v255 = v70;
  v254 = v69;
  v253 = v68;
  v136[4] = v167;
  v136[5] = v168;
  v136[0] = v163;
  v136[1] = v164;
  v136[2] = v165;
  v136[3] = v166;
  v136[9] = v172;
  v136[10] = v173;
  v136[7] = v170;
  v136[8] = v171;
  v136[6] = v169;
  v221[0] = *(_DWORD *)v160;
  v71 = *(_OWORD *)(v160 + 16);
  v72 = *(_OWORD *)(v160 + 32);
  v224 = *(_OWORD *)(v160 + 48);
  v223 = v72;
  v222 = v71;
  v225 = v161;
  v226 = *(_DWORD *)(v160 + 80);
  v74 = *(_OWORD *)(v160 + 112);
  v73 = *(_OWORD *)(v160 + 128);
  v227 = *(_OWORD *)(v160 + 96);
  v228 = v74;
  v75 = *(_OWORD *)(v160 + 160);
  v76 = *(_OWORD *)(v160 + 176);
  v229 = v73;
  v230 = v75;
  v77 = *(_OWORD *)(v160 + 192);
  v78 = *(_OWORD *)(v160 + 208);
  v231 = v76;
  v232 = v77;
  v233 = v78;
  v234 = v162;
  v79 = *(_OWORD *)(v160 + 224);
  v80 = *(_OWORD *)(v160 + 240);
  v81 = *(_OWORD *)(v160 + 256);
  v238 = *(_OWORD *)(v160 + 272);
  v237 = v81;
  v236 = v80;
  v235 = v79;
  v135[4] = v153;
  v135[5] = v154;
  v135[0] = v149;
  v135[1] = v150;
  v135[2] = v151;
  v135[3] = v152;
  v135[9] = v158;
  v135[10] = v159;
  v135[7] = v156;
  v135[8] = v157;
  v135[6] = v155;
  v82 = *v146;
  v83 = v146[1];
  v84 = v146[2];
  v206[3] = v146[3];
  v206[2] = v84;
  v206[1] = v83;
  v206[0] = v82;
  v85 = *((_DWORD *)v146 + 16);
  v86 = v146[5];
  v87 = v146[7];
  v209 = v146[6];
  v208 = v86;
  v88 = v146[9];
  v89 = v146[10];
  v210 = v87;
  v211 = v88;
  v90 = v146[11];
  v91 = v146[12];
  v212 = v89;
  v213 = v90;
  v214 = v91;
  v92 = v146[14];
  v93 = v146[15];
  v94 = *((_DWORD *)v146 + 52);
  v219 = v146[16];
  v218 = v93;
  v217 = v92;
  *(_QWORD *)&v92 = *(_QWORD *)&a12[14].var1.var0;
  v131[4] = v139;
  v131[5] = v53;
  v95 = *(_OWORD *)&a12[16].var0.var0.var0;
  v207 = v85;
  v215 = v148;
  LOBYTE(v85) = a12[17].var0.var1.var1;
  v216 = v94;
  v220 = v147;
  v131[0] = v58;
  v131[1] = v59;
  v131[2] = v137;
  v131[3] = v51;
  v131[9] = v144;
  v131[10] = v145;
  v131[7] = v142;
  v131[8] = v143;
  v131[6] = v141;
  v132 = v92;
  v133 = v95;
  v134 = v85;
  if ((_QWORD)v184)
  {
    v54.i16[0] = *(_WORD *)(v184 + 12);
    v54.i16[2] = *(_WORD *)(v184 + 14);
  }
  else
  {
    v54 = 0;
  }
  v96 = *(uint16x4_t *)&a10[3].var0.var1.var1.var3;
  v97 = *(uint16x4_t *)&a12[26].var1.var0;
  v96.i16[3] = 0;
  v97.i16[3] = 0;
  v98 = (int16x4_t)vmax_u16(v96, v97);
  v99 = vmax_u16((uint16x4_t)vdup_lane_s16(v98, 0).u32[0], (uint16x4_t)vext_s8((int8x8_t)v98, (int8x8_t)v54, 2uLL).u32[0]);
  v100 = (int8x8_t)vmovl_u16(v99).u64[0];
  v101 = (int32x2_t)vand_s8(v100, (int8x8_t)0xFFFF0000FFFFLL);
  v102 = (int16x4_t)vceq_s32(v101, (int32x2_t)0x100000001);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v102, v102)) & 0x8000) != 0)
  {
    v109 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v54, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V2.2S, #1.0 }
    *(float32x2_t *)&v115 = vdiv_f32(_D2, v109);
    *((float32x2_t *)&v115 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v109);
    block = MEMORY[0x1E0C809B0];
    v190 = 3221225472;
    v191 = ___ZN3xdr52dispatch_convert_gainmap_image_to_gainmap_image_loopILt1ELt1EEEvRKNS_7imageInES3_RKNS_8imageOutES6_RKNS_16colorTransformInERKNS_15gainTransformInES9_SC_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
    v192 = &__block_descriptor_132_e8_v16__0Q8l;
    v116 = v54.u16[2];
    v205 = v54.i16[2];
LABEL_18:
    v204 = v54.i16[0];
    v194 = v180;
    v195 = v179;
    v196 = v178;
    v197 = v177;
    v198 = v239;
    v199 = v136;
    v200 = v221;
    v201 = v135;
    v202 = v206;
    v203 = v131;
    v193 = v115;
    goto LABEL_19;
  }
  v103 = (int16x4_t)vceq_s32(v101, (int32x2_t)0x100000002);
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v103, v103)) & 0x8000) != 0)
  {
    v117 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v54, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V3.2S, #1.0 }
    *(float32x2_t *)&v119 = vdiv_f32(_D3, v117);
    *((float32x2_t *)&v119 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v117);
    v120 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(v54, (int32x2_t)1), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0xFFFFFFFFLL);
    v116 = v120.u32[1];
    block = MEMORY[0x1E0C809B0];
    v190 = 3221225472;
    v121 = ___ZN3xdr52dispatch_convert_gainmap_image_to_gainmap_image_loopILt2ELt1EEEvRKNS_7imageInES3_RKNS_8imageOutES6_RKNS_16colorTransformInERKNS_15gainTransformInES9_SC_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
  }
  else
  {
    v104 = (int32x2_t)vand_s8(v100, (int8x8_t)0xFFFF0000FFFFLL);
    v105 = (int16x4_t)vceq_s32(v104, (int32x2_t)0x200000002);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v105, v105)) & 0x8000) != 0)
    {
      v122 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v54, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
      __asm { FMOV            V2.2S, #1.0 }
      *(float32x2_t *)&v115 = vdiv_f32(_D2, v122);
      *((float32x2_t *)&v115 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v122);
      v54 = (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(v54, (int32x2_t)0x100000001), (int8x8_t)0xFFFF0000FFFFLL), 1uLL);
      v116 = v54.u32[1];
      block = MEMORY[0x1E0C809B0];
      v190 = 3221225472;
      v124 = (void (*)(uint64_t, unsigned __int16))___ZN3xdr52dispatch_convert_gainmap_image_to_gainmap_image_loopILt2ELt2EEEvRKNS_7imageInES3_RKNS_8imageOutES6_RKNS_16colorTransformInERKNS_15gainTransformInES9_SC_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
LABEL_17:
      v191 = v124;
      v192 = &__block_descriptor_132_e8_v16__0Q8l;
      v205 = v116;
      goto LABEL_18;
    }
    v106 = (int16x4_t)vceq_s32(v104, (int32x2_t)0x200000004);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v106, v106)) & 0x8000) == 0)
    {
      v107 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v100, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)0x400000004);
      if ((vminv_u16((uint16x4_t)vuzp1_s16(v107, v107)) & 0x8000) == 0)
      {
        LogError("-[HDRImageConverter_SIMD convertImage:transform:alternate:gainMap:transform:alternate:toImage:transform:gainMap:transform:]", 883, "Unupported subsample factors (%d,%d)", v99.u16[0], v99.u16[1]);
        v108 = 0;
        goto LABEL_20;
      }
      v129 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v54, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
      __asm { FMOV            V2.2S, #1.0 }
      *(float32x2_t *)&v115 = vdiv_f32(_D2, v129);
      *((float32x2_t *)&v115 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v129);
      v54 = (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32(v54, (int32x2_t)0x300000003), (int8x8_t)0xFFFF0000FFFFLL), 2uLL);
      v116 = v54.u32[1];
      block = MEMORY[0x1E0C809B0];
      v190 = 3221225472;
      v124 = (void (*)(uint64_t, unsigned __int16))___ZN3xdr52dispatch_convert_gainmap_image_to_gainmap_image_loopILt4ELt4EEEvRKNS_7imageInES3_RKNS_8imageOutES6_RKNS_16colorTransformInERKNS_15gainTransformInES9_SC_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
      goto LABEL_17;
    }
    v126 = (int8x8_t)vadd_s32(v54, (int32x2_t)0x100000003);
    v127 = vadd_f32((float32x2_t)vorr_s8(vand_s8((int8x8_t)v54, (int8x8_t)0xFFFF0000FFFFLL), (int8x8_t)vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000));
    __asm { FMOV            V3.2S, #1.0 }
    *(float32x2_t *)&v119 = vdiv_f32(_D3, v127);
    *((float32x2_t *)&v119 + 1) = vdiv_f32((float32x2_t)0x3F0000003F000000, v127);
    v120 = vshl_u32((uint32x2_t)vand_s8(v126, (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)-2);
    v116 = v120.u32[1];
    block = MEMORY[0x1E0C809B0];
    v190 = 3221225472;
    v121 = ___ZN3xdr52dispatch_convert_gainmap_image_to_gainmap_image_loopILt4ELt2EEEvRKNS_7imageInES3_RKNS_8imageOutES6_RKNS_16colorTransformInERKNS_15gainTransformInES9_SC_RKNS_17colorTransformOutERKNS_16gainTransformOutEDv2_t_block_invoke;
  }
  v191 = (void (*)(uint64_t, unsigned __int16))v121;
  v192 = &__block_descriptor_132_e8_v16__0Q8l;
  v205 = v116;
  v204 = v120.i16[0];
  v194 = v180;
  v195 = v179;
  v196 = v178;
  v197 = v177;
  v198 = v239;
  v199 = v136;
  v200 = v221;
  v201 = v135;
  v202 = v206;
  v203 = v131;
  v193 = v119;
LABEL_19:
  dispatch_apply(v116, 0, &block);
  v108 = 1;
LABEL_20:
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  if ((_QWORD)v182)
    (*(void (**)(_QWORD))(*(_QWORD *)v182 + 8))(v182);
  if (*((_QWORD *)&v182 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v182 + 1) + 8))(*((_QWORD *)&v182 + 1));
  if ((_QWORD)v184)
    (*(void (**)(_QWORD))(*(_QWORD *)v184 + 8))(v184);
  if (*((_QWORD *)&v184 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v184 + 1) + 8))(*((_QWORD *)&v184 + 1));
  if ((_QWORD)v186)
    (*(void (**)(_QWORD))(*(_QWORD *)v186 + 8))(v186);
  if (*((_QWORD *)&v186 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v186 + 1) + 8))(*((_QWORD *)&v186 + 1));
  if ((_QWORD)v188)
    (*(void (**)(_QWORD))(*(_QWORD *)v188 + 8))(v188);
  if (*((_QWORD *)&v188 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v188 + 1) + 8))(*((_QWORD *)&v188 + 1));
  return v108;
}

- (BOOL)computeLumaGainHistogram:(id *)a3 scale:(__CVBuffer *)a4 image:(id *)a5 transform:(__CVBuffer *)a6 gainMap:(id *)a7 transform:
{
  uint16x4_t v7;
  uint16x4_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int32 v47;
  _OWORD v49[13];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint32x4_t v56;
  __int128 v57;
  __int128 v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[9];
  _OWORD v63[9];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _DWORD v68[4];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v11 = v7;
  v86 = *MEMORY[0x1E0C80C00];
  v66 = 0u;
  v67 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v66, (uint64_t)a4, &a5->var0.var0);
  v64 = 0u;
  v65 = 0u;
  _ZN3xdr8ImageBoxI19HDRPixelTransformInLNS_7TextureIDv2_tDv2_fDv2_iE10AccessModeE0EEC2EP10__CVBufferRKS1_((uint64_t)&v64, (uint64_t)a6, &a7->var0.var0);
  v63[0] = v67;
  v13 = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 48);
  v15 = **((_OWORD **)&v66 + 1);
  v14 = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 16);
  v63[3] = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 32);
  v63[4] = v13;
  v63[1] = v15;
  v63[2] = v14;
  v16 = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 112);
  v18 = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 64);
  v17 = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 80);
  v63[7] = *(_OWORD *)(*((_QWORD *)&v66 + 1) + 96);
  v63[8] = v16;
  v63[5] = v18;
  v63[6] = v17;
  v62[0] = v65;
  v19 = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 48);
  v21 = **((_OWORD **)&v64 + 1);
  v20 = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 16);
  v62[3] = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 32);
  v62[4] = v19;
  v62[1] = v21;
  v62[2] = v20;
  v23 = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 64);
  v22 = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 80);
  v24 = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 112);
  v62[7] = *(_OWORD *)(*((_QWORD *)&v64 + 1) + 96);
  v62[8] = v24;
  v62[5] = v23;
  v62[6] = v22;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  xdr::ColorBox<HDRColorTransformIn>::ColorBox(&v59, (uint64_t)&a5[1].var1);
  v25 = *(_OWORD *)&a7[22].var1.var1.var1;
  v56 = *(uint32x4_t *)&a7[21].var1.var0.var0;
  v57 = v25;
  v58 = *(_OWORD *)&a7[24].var0.var0;
  v26 = *(_OWORD *)&a7[14].var1.var1.var1;
  v27 = *(_OWORD *)&a7[17].var1.var0.var0;
  v52 = *(_OWORD *)&a7[16].var0.var0;
  v53 = v27;
  v28 = *(_OWORD *)&a7[17].var1.var0.var0;
  v29 = *(_OWORD *)&a7[20].var0.var0;
  v54 = *(_OWORD *)&a7[18].var1.var1.var1;
  v55 = v29;
  v30 = *(_OWORD *)&a7[12].var0.var0;
  v49[11] = *(_OWORD *)&a7[10].var1.var1.var1;
  v49[12] = v30;
  v31 = *(_OWORD *)&a7[14].var1.var1.var1;
  v33 = *(_OWORD *)&a7[10].var1.var1.var1;
  v32 = *(_OWORD *)&a7[12].var0.var0;
  v50 = *(_OWORD *)&a7[13].var1.var0.var0;
  v51 = v31;
  v34 = *v59;
  v35 = *((_OWORD *)v59 + 1);
  v36 = *((_OWORD *)v59 + 3);
  v70 = *((_OWORD *)v59 + 2);
  v71 = v36;
  v69 = v35;
  v37 = v59[20];
  v38 = *((_OWORD *)v59 + 7);
  v39 = *((_OWORD *)v59 + 8);
  v74 = *((_OWORD *)v59 + 6);
  v75 = v38;
  v40 = *((_OWORD *)v59 + 10);
  v41 = *((_OWORD *)v59 + 11);
  v76 = v39;
  v77 = v40;
  v42 = *((_OWORD *)v59 + 12);
  v43 = *((_OWORD *)v59 + 13);
  v78 = v41;
  v79 = v42;
  v80 = v43;
  v44 = *((_OWORD *)v59 + 14);
  v45 = *((_OWORD *)v59 + 15);
  v46 = *((_OWORD *)v59 + 17);
  v84 = *((_OWORD *)v59 + 16);
  v85 = v46;
  v82 = v44;
  v83 = v45;
  v49[4] = v52;
  v49[5] = v28;
  v68[0] = v34;
  v72 = v60;
  v73 = v37;
  v81 = v61;
  v49[0] = v33;
  v49[1] = v32;
  v49[2] = v50;
  v49[3] = v26;
  v49[9] = v57;
  v49[10] = v58;
  v49[7] = v55;
  v49[8] = v56;
  v49[6] = v54;
  if ((_QWORD)v67)
    v47 = *(_DWORD *)(v67 + 12);
  else
    v47 = 0;
  xdr::dispatch_compute_luma_gain_histogram<(unsigned short)2,(unsigned short)2,(unsigned short)4>((uint64_t)v63, (uint64_t)v62, (uint64_t)v68, (uint64_t)v49, (uint64_t)a3, v47, v11, *(double *)&v55, v56);
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  if ((_QWORD)v65)
    (*(void (**)(_QWORD))(*(_QWORD *)v65 + 8))(v65);
  if (*((_QWORD *)&v65 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 8))(*((_QWORD *)&v65 + 1));
  if ((_QWORD)v67)
    (*(void (**)(_QWORD))(*(_QWORD *)v67 + 8))(v67);
  if (*((_QWORD *)&v67 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 8))(*((_QWORD *)&v67 + 1));
  return 1;
}

@end
