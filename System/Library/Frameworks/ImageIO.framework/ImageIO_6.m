void XMPUtils::CatenateArrayItems_v2(const void *a1, char *a2, _BYTE *a3, const char *a4, const char *a5, unsigned int a6, std::string *a7)
{
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  char v16;
  unint64_t v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t NodeChildCount;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  void *i;
  char *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  std::string::size_type v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *exception;
  _QWORD *v73;
  _QWORD *v74;
  std::__shared_weak_count *v76;
  void *__p[2];
  uint64_t v78;
  __n128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82[3];
  uint64_t v83;
  std::__shared_weak_count *v84;
  int v85;
  std::string::size_type v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __n128 v93;

  if (!sUseNewCoreAPIs)
    return;
  if (!v12)
    __cxa_bad_cast();
  if (!a2 || !a3)
    XMPUtils::CatenateArrayItems_v2();
  if (!a4 || !a5 || !a7)
    XMPUtils::CatenateArrayItems_v2();
  v13 = v12;
  v92 = 0;
  v91 = 0;
  v89 = 0;
  v90 = 0;
  v88 = 0;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v83 = 0;
  v84 = 0;
  v14 = strlen(a4);
  if (!v14)
    goto LABEL_120;
  v15 = v14;
  v16 = 0;
  v17 = 0;
  v18 = "Separator can have only one semicolon";
  do
  {
    while (1)
    {
      ClassifyCharacter(a4, v17, &v91, &v92, &v90);
      v17 += v92;
      if (v91 == 1)
        break;
      if (v91 != 3)
      {
        v18 = "Separator can have only spaces and one semicolon";
        goto LABEL_119;
      }
      if ((v16 & 1) != 0)
        goto LABEL_119;
      v16 = 1;
      if (v17 >= v15)
        goto LABEL_18;
    }
  }
  while (v17 < v15);
  if ((v16 & 1) == 0)
  {
LABEL_120:
    v18 = "Separator must have one semicolon";
    goto LABEL_119;
  }
LABEL_18:
  v19 = strlen(a5);
  ClassifyCharacter(a5, 0, &v91, &v92, (uint64_t *)&v89);
  if (v91 != 4)
    goto LABEL_121;
  v20 = v92;
  if (v92 == v19)
  {
    v21 = v89;
    v88 = v89;
    v22 = v89;
    goto LABEL_24;
  }
  ClassifyCharacter(a5, v92, &v91, &v92, (uint64_t *)&v88);
  if (v91 != 4)
  {
LABEL_121:
    v18 = "Invalid quoting character";
    goto LABEL_119;
  }
  if (v92 + v20 != v19)
  {
    v18 = "Quoting string too long";
LABEL_119:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v18;
    *((_BYTE *)exception + 16) = 0;
  }
  v22 = v88;
  v21 = v89;
LABEL_24:
  if (v22 != GetClosingQuote(v21))
  {
    v18 = "Mismatched quote pair";
    goto LABEL_119;
  }
  std::string::erase(a7, 0, 0xFFFFFFFFFFFFFFFFLL);
  memset(v82, 0, sizeof(v82));
  ExpandXPath(a2, a3, v82);
  XMPUtils::FindCnstNode(v13 + 50, v82, &v86, &v85, 0);
  if (v86)
  {
    if ((v85 & 0xA00) != 0x200)
    {
      v73 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v73 = 4;
      v73[1] = "Named property must be non-alternate array";
      *((_BYTE *)v73 + 16) = 0;
    }
    __p[0] = (void *)v86;
    __p[1] = v87;
    if (v87)
    {
      p_shared_owners = (unint64_t *)&v87->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    NodeChildCount = XMPUtils::GetNodeChildCount(__p);
    v26 = NodeChildCount;
    v27 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_34;
    v28 = (unint64_t *)((char *)__p[1] + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v26)
        goto LABEL_35;
    }
    else
    {
LABEL_34:
      if (NodeChildCount)
      {
LABEL_35:
        v81 = 0uLL;
        __p[0] = (void *)v86;
        __p[1] = v87;
        if (v87)
        {
          v30 = (unint64_t *)&v87->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        XMPUtils::GetNodeChildIterator(__p, &v81);
        v32 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v33 = (unint64_t *)((char *)__p[1] + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if ((XMPUtils::GetIXMPOptions(&v83) & 0x1F00) != 0)
        {
          v74 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v74 = 4;
          v74[1] = "Array items must be simple";
          *((_BYTE *)v74 + 16) = 0;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v81 + 48))(__p);
        v79 = *(__n128 *)__p;
        (*(void (**)(void **__return_ptr, __n128))(*(_QWORD *)__p[0] + 232))(__p, *(__n128 *)__p);
        v80 = *(_OWORD *)__p;
        (*(void (**)(__n128 *__return_ptr, __n128))(*(_QWORD *)__p[0] + 504))(&v93, *(__n128 *)__p);
        v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v93.n128_u64[0] + 192))(v93.n128_u64[0]);
        MEMORY[0x18D761A14](a7, v35);
        v36 = (std::__shared_weak_count *)v93.n128_u64[1];
        if (v93.n128_u64[1])
        {
          v37 = (unint64_t *)(v93.n128_u64[1] + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        if (*((_QWORD *)&v80 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = (std::__shared_weak_count *)v79.n128_u64[1];
        if (v79.n128_u64[1])
        {
          v43 = (unint64_t *)(v79.n128_u64[1] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        ApplyQuotes((const char *)a7, v89, v88, (a6 >> 28) & 1);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v81 + 56))(__p);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        v81 = *(_OWORD *)__p;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
          for (i = (void *)v81; (_QWORD)v81; i = (void *)v81)
          {
            while (1)
            {
LABEL_69:
              __p[0] = 0;
              __p[1] = 0;
              v78 = 0;
              (*(void (**)(__n128 *__return_ptr))(*(_QWORD *)i + 48))(&v93);
              v76 = (std::__shared_weak_count *)v93.n128_u64[1];
              (*(void (**)(__n128 *__return_ptr, __n128))(*(_QWORD *)v93.n128_u64[0] + 232))(&v93, v93);
              v79 = v93;
              (*(void (**)(__int128 *__return_ptr, __n128))(*(_QWORD *)v93.n128_u64[0] + 504))(&v80, v93);
              v49 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v80 + 192))(v80);
              std::string::basic_string[abi:ne180100]<0>(__p, v49);
              v50 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
              if (*((_QWORD *)&v80 + 1))
              {
                v51 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v53 = (std::__shared_weak_count *)v79.n128_u64[1];
              if (v79.n128_u64[1])
              {
                v54 = (unint64_t *)(v79.n128_u64[1] + 8);
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (!v55)
                {
                  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                  std::__shared_weak_count::__release_weak(v53);
                }
              }
              if (v76)
              {
                v56 = (unint64_t *)&v76->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              ApplyQuotes((const char *)__p, v89, v88, (a6 >> 28) & 1);
              std::string::append(a7, a4);
              if (v78 >= 0)
                v58 = __p;
              else
                v58 = (void **)__p[0];
              if (v78 >= 0)
                v59 = HIBYTE(v78);
              else
                v59 = (std::string::size_type)__p[1];
              std::string::append(a7, (const std::string::value_type *)v58, v59);
              if (SHIBYTE(v78) < 0)
                operator delete(__p[0]);
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v81 + 56))(__p);
              v60 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
              v81 = *(_OWORD *)__p;
              if (v60)
                break;
              i = __p[0];
              if (!__p[0])
                goto LABEL_100;
            }
            v61 = (unint64_t *)&v60->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
        }
        else
        {
          i = __p[0];
          if (__p[0])
            goto LABEL_69;
        }
LABEL_100:
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        if (*((_QWORD *)&v81 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
    }
  }
  __p[0] = v82;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v66 = v84;
  if (v84)
  {
    v67 = (unint64_t *)&v84->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v87;
  if (v87)
  {
    v70 = (unint64_t *)&v87->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
}

void sub_1880D66FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  a24 = &a27;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

const char *ClassifyCharacter(const char *__s, uint64_t a2, int *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;

  *a3 = 0;
  v8 = __s[a2];
  if ((__s[a2] & 0x80000000) == 0)
  {
    *a4 = 1;
    *a5 = v8;
    if (v8 >= 0x23)
    {
      if ((_DWORD)v8 != 44)
      {
        if ((_DWORD)v8 != 59)
          return __s;
        goto LABEL_5;
      }
LABEL_43:
      v9 = 2;
      goto LABEL_50;
    }
    v18 = v8 - 32;
    if (v18 < 3u)
    {
      v9 = dword_188230174[(char)v18];
      goto LABEL_50;
    }
LABEL_49:
    v9 = 5;
    goto LABEL_50;
  }
  v11 = __s;
  *a4 = 0;
  *a5 = v8;
  do
  {
    ++*a4;
    v12 = *a5;
    v13 = 2 * *a5;
    *a5 = v13;
  }
  while ((v12 & 0x40) != 0);
  v14 = *a4 + a2;
  __s = (const char *)strlen(__s);
  if (v14 > (unint64_t)__s)
    ClassifyCharacter();
  *a5 = v13 & 0x7E;
  v15 = (unint64_t)(v13 & 0x7E) >> *a4;
  *a5 = v15;
  v16 = a2 + 1;
  if (a2 + 1 >= (unint64_t)(*a4 + a2))
  {
    v17 = v15;
  }
  else
  {
    do
    {
      v17 = v11[v16] & 0x3F | (v15 << 6);
      *a5 = v17;
      ++v16;
      v15 = v17;
    }
    while (v16 < *a4 + a2);
  }
  v19 = v17 >> 8;
  if ((int)(v17 >> 8) <= 31)
  {
    switch((int)v19)
    {
      case 0:
        if ((v17 | 0x10) == 0xBB)
          goto LABEL_18;
        break;
      case 3:
        if (v17 == 894)
          goto LABEL_5;
        break;
      case 5:
        if (v17 == 1373)
          goto LABEL_43;
        break;
      case 6:
        if (v17 == 1548)
          goto LABEL_43;
        if (v17 == 1563)
          goto LABEL_5;
        break;
      default:
        return __s;
    }
    return __s;
  }
  if ((int)v19 <= 253)
  {
    if ((_DWORD)v19 == 32)
    {
      if (v17 - 0x2000 < 0xC)
        goto LABEL_41;
      v9 = 4;
      if (v17 == 8213 || (v17 & 0xFFFFFFFFFFFFFFF8) == 0x2018)
        goto LABEL_50;
      if (v17 - 8232 < 2)
        goto LABEL_49;
      if (v17 - 8249 > 1)
        return __s;
    }
    else
    {
      if ((_DWORD)v19 != 48)
        return __s;
      if (v17 == 12288)
        goto LABEL_41;
      if (v17 == 12289)
        goto LABEL_43;
      if (v17 >> 3 != 1537)
      {
        if (v17 != 12351)
        {
          if (v17 - 12317 >= 3)
            return __s;
          goto LABEL_18;
        }
LABEL_41:
        v9 = 1;
        goto LABEL_50;
      }
    }
LABEL_18:
    v9 = 4;
    goto LABEL_50;
  }
  if ((_DWORD)v19 == 254)
  {
    if (v17 - 65104 < 2)
      goto LABEL_43;
    v20 = 65108;
  }
  else
  {
    if ((_DWORD)v19 != 255)
      return __s;
    v9 = 2;
    if (v17 == 65292 || v17 == 65380)
      goto LABEL_50;
    v20 = 65307;
  }
  if (v17 == v20)
  {
LABEL_5:
    v9 = 3;
LABEL_50:
    *a3 = v9;
  }
  return __s;
}

uint64_t GetClosingQuote(uint64_t result)
{
  if (result <= 8248)
  {
    if (result > 8212)
    {
      switch(result)
      {
        case 8213:
          result = 8213;
          break;
        case 8216:
          result = 8217;
          break;
        case 8218:
          result = 8219;
          break;
        case 8220:
          result = 8221;
          break;
        case 8222:
          result = 8223;
          break;
        default:
          return 0;
      }
      return result;
    }
    switch(result)
    {
      case 34:
        return result;
      case 171:
        return 187;
      case 187:
        return 171;
    }
    return 0;
  }
  if (result <= 12295)
  {
    if (result == 8249)
      return 8250;
    if (result == 8250)
      return 8249;
    return 0;
  }
  switch(result)
  {
    case 12296:
      result = 12297;
      break;
    case 12297:
    case 12299:
    case 12301:
      return 0;
    case 12298:
      result = 12299;
      break;
    case 12300:
      result = 12301;
      break;
    case 12302:
      result = 12303;
      break;
    default:
      if (result != 12317)
        return 0;
      result = 12319;
      break;
  }
  return result;
}

void ApplyQuotes(const char *a1, unint64_t a2, unint64_t a3, int a4)
{
  std::string *v7;
  unint64_t v8;
  unint64_t size;
  BOOL v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  std::string::size_type v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  void *__p;
  std::string::size_type v19;
  uint64_t v20;
  std::string __str;
  uint64_t v22;
  int v23;
  std::string::size_type __n;

  v7 = (std::string *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  __n = 0;
  v23 = 0;
  v22 = 0;
  ClassifyCharacter(a1, 0, &v23, &__n, &v22);
  v8 = 0;
  if (v23 != 4)
  {
    v10 = 0;
    v8 = 0;
    while (1)
    {
      if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v8 >= v7->__r_.__value_.__l.__size_)
          goto LABEL_21;
        v11 = (const char *)v7->__r_.__value_.__r.__words[0];
      }
      else
      {
        size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        v11 = (const char *)v7;
        if (v8 >= size)
          goto LABEL_22;
      }
      ClassifyCharacter(v11, v8, &v23, &__n, &v22);
      switch(v23)
      {
        case 1:
          if (v10)
            goto LABEL_4;
          break;
        case 2:
          if (!a4)
            goto LABEL_4;
          break;
        case 3:
        case 5:
          goto LABEL_4;
      }
      v8 += __n;
      v10 = v23 == 1;
    }
  }
LABEL_4:
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
LABEL_21:
    size = v7->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
LABEL_22:
  if (v8 >= size)
    return;
  v12 = 0;
  memset(&__str, 0, sizeof(__str));
  do
  {
    v13 = (const char *)v7;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      v13 = (const char *)v7->__r_.__value_.__r.__words[0];
    ClassifyCharacter(v13, v12, &v23, &__n, &v22);
    if (v23 == 4)
      break;
    ++v12;
  }
  while (v12 <= v8);
  CodePointToUTF8(a2, (uint64_t)&__str);
  std::string::append(&__str, v7, 0, v12);
  while ((SHIBYTE(v7->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v14 = (const char *)v7;
    if (v12 >= HIBYTE(v7->__r_.__value_.__r.__words[2]))
      goto LABEL_41;
LABEL_34:
    ClassifyCharacter(v14, v12, &v23, &__n, &v22);
    v15 = __n;
    std::string::append(&__str, v7, v12, __n);
    if (v23 == 4 && (v22 == a2 || v22 == a3 || a2 == 12317 && (v22 & 0xFFFFFFFFFFFFFFFELL) == 0x301E))
      std::string::append(&__str, v7, v12, v15);
    v12 += v15;
  }
  if (v12 < v7->__r_.__value_.__l.__size_)
  {
    v14 = (const char *)v7->__r_.__value_.__r.__words[0];
    goto LABEL_34;
  }
LABEL_41:
  __p = 0;
  v19 = 0;
  v20 = 0;
  CodePointToUTF8(a3, (uint64_t)&__p);
  if (v20 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v20 >= 0)
    v17 = HIBYTE(v20);
  else
    v17 = v19;
  std::string::append(&__str, p_p, v17);
  std::string::operator=(v7, &__str);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1880D6E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XMPUtils::CatenateArrayItems(char **a1, char *a2, _BYTE *a3, char *__s, const char *a5, unsigned int a6, std::string *a7)
{
  size_t v14;
  size_t v15;
  char v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t Node;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *exception;
  const char *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string __p;
  const void **v39[3];
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  if (sUseNewCoreAPIs)
  {
    XMPUtils::CatenateArrayItems_v2(a1, a2, a3, __s, a5, a6, a7);
    return;
  }
  if (!a2 || !a3)
    XMPUtils::CatenateArrayItems();
  if (!__s || !a5 || !a7)
    XMPUtils::CatenateArrayItems();
  v44 = 0;
  v43 = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v14 = strlen(__s);
  if (!v14)
    goto LABEL_50;
  v15 = v14;
  v16 = 0;
  v17 = 0;
  do
  {
    while (1)
    {
      ClassifyCharacter(__s, v17, &v43, &v44, &v42);
      v17 += v44;
      if (v43 == 1)
        break;
      if (v43 != 3)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        v35 = "Separator can have only spaces and one semicolon";
        goto LABEL_48;
      }
      if ((v16 & 1) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        v35 = "Separator can have only one semicolon";
        goto LABEL_48;
      }
      v16 = 1;
      if (v17 >= v15)
        goto LABEL_18;
    }
  }
  while (v17 < v15);
  if ((v16 & 1) == 0)
  {
LABEL_50:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v35 = "Separator must have one semicolon";
    goto LABEL_48;
  }
LABEL_18:
  v18 = strlen(a5);
  ClassifyCharacter(a5, 0, &v43, &v44, (uint64_t *)&v41);
  if (v43 != 4)
    goto LABEL_51;
  v19 = v44;
  if (v44 == v18)
  {
    v20 = v41;
    v21 = v41;
    goto LABEL_24;
  }
  ClassifyCharacter(a5, v44, &v43, &v44, &v40);
  if (v43 != 4)
  {
LABEL_51:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v35 = "Invalid quoting character";
    goto LABEL_48;
  }
  if (v44 + v19 != v18)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v35 = "Quoting string too long";
LABEL_48:
    exception[1] = v35;
    *((_BYTE *)exception + 16) = 0;
  }
  v21 = v40;
  v20 = v41;
LABEL_24:
  if (v21 != GetClosingQuote(v20))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v35 = "Mismatched quote pair";
    goto LABEL_48;
  }
  std::string::erase(a7, 0, 0xFFFFFFFFFFFFFFFFLL);
  memset(v39, 0, sizeof(v39));
  ExpandXPath(a2, a3, (uint64_t *)v39);
  Node = FindNode(a1 + 28, v39, 0, 0, 0);
  v23 = Node;
  if (Node)
  {
    if ((*(_DWORD *)(Node + 8) & 0xA00) != 0x200)
    {
      v26 = "Named property must be non-alternate array";
      goto LABEL_55;
    }
    v24 = *(uint64_t **)(Node + 72);
    if (v24 != *(uint64_t **)(Node + 80))
    {
      v25 = *v24;
      v26 = "Array items must be simple";
      if ((*(_BYTE *)(v25 + 9) & 0x1F) == 0)
      {
        std::string::operator=(a7, (const std::string *)(v25 + 40));
        v27 = (a6 >> 28) & 1;
        ApplyQuotes((const char *)a7, v20, v21, v27);
        v28 = *(_QWORD *)(v23 + 80) - *(_QWORD *)(v23 + 72);
        if (v28 != 8)
        {
          v29 = v28 >> 3;
          v30 = 1;
          do
          {
            v31 = *(_QWORD *)(*(_QWORD *)(v23 + 72) + 8 * v30);
            if ((*(_BYTE *)(v31 + 9) & 0x1F) != 0)
            {
              v36 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v36 = 4;
              v36[1] = "Array items must be simple";
              *((_BYTE *)v36 + 16) = 0;
            }
            memset(&__p, 0, sizeof(__p));
            if (*(char *)(v31 + 63) < 0)
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v31 + 40), *(_QWORD *)(v31 + 48));
            else
              __p = *(std::string *)(v31 + 40);
            ApplyQuotes((const char *)&__p, v20, v21, v27);
            std::string::append(a7, __s);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            std::string::append(a7, (const std::string::value_type *)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v30;
          }
          while (v29 != v30);
        }
        goto LABEL_44;
      }
LABEL_55:
      v37 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v37 = 4;
      v37[1] = v26;
      *((_BYTE *)v37 + 16) = 0;
    }
  }
LABEL_44:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1880D7308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  __p = &a16;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void XMPUtils::SeparateArrayItems_v2(XMPUtils *this, XMPMeta *a2, char *a3, const char *a4, char *a5, const char *a6)
{
  _QWORD *v9;
  unsigned int v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  void **v15;
  char *v16;
  AdobeXMPCore_Int::IUTF8String_I *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void **v22;
  char *v23;
  AdobeXMPCore_Int::IUTF8String_I *p_p;
  const char *v25;
  unint64_t *v26;
  void **v27;
  char *v28;
  AdobeXMPCore_Int::IUTF8String_I *v29;
  const char *v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__split_buffer<std::string>::pointer first;
  char *v53;
  _OWORD *size;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  std::string *v59;
  std::string *v60;
  __int128 v61;
  std::string::size_type v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  int v72;
  int v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  char *v86;
  __int128 v87;
  int64x2_t v88;
  _QWORD *v89;
  void *v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  __int128 v101;
  int64x2_t v102;
  std::string *v103;
  void *v104;
  std::string *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  size_t v116;
  size_t v117;
  std::string::size_type v118;
  uint64_t v119;
  uint64_t ClosingQuote;
  std::string::size_type v121;
  std::string::size_type v122;
  uint64_t v123;
  BOOL v124;
  std::string::size_type v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v129;
  unint64_t v130;
  BOOL v131;
  BOOL v132;
  char *v133;
  std::string::size_type v134;
  uint64_t v135;
  __int128 v136;
  std::string::size_type v137;
  unint64_t i;
  unsigned __int8 **v139;
  unsigned __int8 *v140;
  int v141;
  unsigned __int8 *v142;
  std::string *v143;
  uint64_t v144;
  AdobeXMPCore::ISimpleNode_v1 *v145;
  const char *v146;
  std::string *v147;
  __int128 v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  AdobeXMPCore::ISimpleNode_v1 *v155;
  const char *v156;
  unint64_t v157;
  char *v158;
  __int128 v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__split_buffer<std::string>::pointer v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  _QWORD *exception;
  _QWORD *v206;
  const char *v207;
  _QWORD *v208;
  int v209;
  unint64_t NodeChildCount;
  __int128 v211;
  __int128 v212;
  void *v213[2];
  std::string::size_type v214;
  __int128 v215;
  __int128 v216;
  void *__p;
  const char *v218;
  uint64_t v219;
  void *v220[2];
  _QWORD v221[2];
  std::string v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  std::string::size_type v231;
  uint64_t v232;
  std::string v233;
  std::__split_buffer<std::string> __str;

  v209 = (int)a4;
  v9 = 0;
  if (this && sUseNewCoreAPIs)
  if (!a2 || !a3 || !a5)
    XMPUtils::SeparateArrayItems_v2();
  memset(&v233, 0, sizeof(v233));
  v231 = 0;
  v232 = 0;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  v227 = 0;
  v10 = VerifySetOptions(v209 & 0xEFFFFFFF, 0);
  if ((v10 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Options can only provide array form";
    *((_BYTE *)exception + 16) = 0;
  }
  v224 = 0;
  v225 = 0;
  v226 = 0;
  ExpandXPath((char *)a2, a3, &v224);
  v223 = 0uLL;
  if (!XMPUtils::FindCnstNode(v9 + 50, &v224, (std::string::size_type *)&v223, &v227, 0))
  {
    memset(&__str, 0, 32);
    v13 = v225;
    if (*(char *)(v225 - 9) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)(v225 - 32), *(_QWORD *)(v225 - 24));
    }
    else
    {
      v14 = *(_OWORD *)(v225 - 32);
      __str.__end_ = *(std::__split_buffer<std::string>::pointer *)(v225 - 16);
      *(_OWORD *)&__str.__first_ = v14;
    }
    LODWORD(__str.__end_cap_.__value_) = *(_DWORD *)(v13 - 8);
    memset(&v222, 0, sizeof(v222));
    if (SHIBYTE(__str.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&v222, (const std::string::value_type *)__str.__first_, (std::string::size_type)__str.__begin_);
    }
    else
    {
      *(_OWORD *)&v222.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
      v222.__r_.__value_.__r.__words[2] = (std::string::size_type)__str.__end_;
    }
    v213[0] = 0;
    v213[1] = 0;
    LODWORD(v212) = 0;
    if ((XMPUtils::FindNode(v9 + 50, &v224, 1, v10, (char *)v213, &v212, 1u) & 1) == 0)
    {
      v206 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v206 = 102;
      v206[1] = "Failure creating array node";
      *((_BYTE *)v206 + 16) = 0;
    }
    v220[0] = 0;
    v220[1] = 0;
    v221[0] = 0;
    __p = 0;
    v218 = 0;
    v219 = 0;
    v216 = 0uLL;
    AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v216);
    v227 = v10;
    XMPUtils::GetNameSpaceAndNameFromStepValue((const std::string *)&__str, (uint64_t)&v216, (uint64_t)v220, (uint64_t)&__p);
    if ((v227 & 0x800) != 0)
    {
      if (v221[0] >= 0)
        v22 = v220;
      else
        v22 = (void **)v220[0];
      if (v221[0] >= 0)
        v23 = (char *)HIBYTE(v221[0]);
      else
        v23 = (char *)v220[1];
      if (v219 >= 0)
        p_p = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
      else
        p_p = (AdobeXMPCore_Int::IUTF8String_I *)__p;
      if (v219 >= 0)
        v25 = (const char *)HIBYTE(v219);
      else
        v25 = v218;
      AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode((AdobeXMPCore::IArrayNode_v1 *)v22, v23, v25, p_p, &v215);
      std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(&v223, (uint64_t)&v215);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (!*((_QWORD *)&v215 + 1))
        goto LABEL_74;
      v26 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v21 = __ldaxr(v26);
      while (__stlxr(v21 - 1, v26));
    }
    else
    {
      if ((v227 & 0x400) == 0)
      {
        if ((v227 & 0x200) == 0)
          goto LABEL_380;
        if (v221[0] >= 0)
          v15 = v220;
        else
          v15 = (void **)v220[0];
        if (v221[0] >= 0)
          v16 = (char *)HIBYTE(v221[0]);
        else
          v16 = (char *)v220[1];
        if (v219 >= 0)
          v17 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
        else
          v17 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
        if (v219 >= 0)
          v18 = (const char *)HIBYTE(v219);
        else
          v18 = v218;
        AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode((AdobeXMPCore::IArrayNode_v1 *)v15, v16, v18, v17, &v215);
        std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(&v223, (uint64_t)&v215);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
        if (*((_QWORD *)&v215 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          goto LABEL_72;
        }
LABEL_74:
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v213[0] + 40))(v213[0]) == 4)
        {
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v213[0] + 240))(&v215);
          (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)v215 + 656))(v215, &v223);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          if (*((_QWORD *)&v215 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            goto LABEL_83;
          }
          goto LABEL_85;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v213[0] + 40))(v213[0]) == 2)
        {
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v213[0] + 248))(&v215);
          (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v215 + *(_QWORD *)(*(_QWORD *)v215 - 688)) + 520))(v215 + *(_QWORD *)(*(_QWORD *)v215 - 688), &v223);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          if (*((_QWORD *)&v215 + 1))
          {
            v35 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
            do
              v34 = __ldaxr(v35);
            while (__stlxr(v34 - 1, v35));
LABEL_83:
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
LABEL_85:
          if ((_QWORD)v223)
          {
            v36 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
            if (*((_QWORD *)&v216 + 1))
            {
              v37 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            if (SHIBYTE(v219) < 0)
              operator delete(__p);
            if (SHIBYTE(v221[0]) < 0)
              operator delete(v220[0]);
            v39 = (std::__shared_weak_count *)v213[1];
            if (v213[1])
            {
              v40 = (unint64_t *)((char *)v213[1] + 8);
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v222.__r_.__value_.__l.__data_);
            if (SHIBYTE(__str.__end_) < 0)
              operator delete(__str.__first_);
            goto LABEL_104;
          }
          v207 = "Failed to create named array";
LABEL_381:
          v208 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v208 = 102;
          v208[1] = v207;
          *((_BYTE *)v208 + 16) = 0;
        }
LABEL_380:
        v207 = "Failure creating array node";
        goto LABEL_381;
      }
      if (v221[0] >= 0)
        v27 = v220;
      else
        v27 = (void **)v220[0];
      if (v221[0] >= 0)
        v28 = (char *)HIBYTE(v221[0]);
      else
        v28 = (char *)v220[1];
      if (v219 >= 0)
        v29 = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
      else
        v29 = (AdobeXMPCore_Int::IUTF8String_I *)__p;
      if (v219 >= 0)
        v30 = (const char *)HIBYTE(v219);
      else
        v30 = v218;
      AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode((AdobeXMPCore::IArrayNode_v1 *)v27, v28, v30, v29, &v215);
      std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(&v223, (uint64_t)&v215);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (!*((_QWORD *)&v215 + 1))
        goto LABEL_74;
      v31 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v21 = __ldaxr(v31);
      while (__stlxr(v21 - 1, v31));
    }
LABEL_72:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    goto LABEL_74;
  }
  v11 = "Named property must be non-alternate array";
  if ((v227 & 0x1E00) == 0 || (v227 & 0x800) != 0)
  {
LABEL_14:
    v12 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v12 = 102;
    v12[1] = v11;
    *((_BYTE *)v12 + 16) = 0;
  }
  if (v10 && v10 != (v227 & 0x1E00))
  {
    v11 = "Mismatch of specified and existing array form";
    goto LABEL_14;
  }
LABEL_104:
  *(_OWORD *)&__str.__first_ = v223;
  if (*((_QWORD *)&v223 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  NodeChildCount = XMPUtils::GetNodeChildCount(&__str);
  begin = (std::__shared_weak_count *)__str.__begin_;
  if (__str.__begin_)
  {
    p_size = &__str.__begin_->__r_.__value_.__l.__size_;
    do
      v46 = __ldaxr(p_size);
    while (__stlxr(v46 - 1, p_size));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
      std::__shared_weak_count::__release_weak(begin);
    }
  }
  memset(&v222, 0, sizeof(v222));
  v220[0] = 0;
  v220[1] = 0;
  v221[0] = 0;
  __p = 0;
  v218 = 0;
  v219 = 0;
  LOBYTE(__str.__first_) = 0;
  std::vector<BOOL>::vector(&__p, NodeChildCount, (unsigned __int8 *)&__str);
  v216 = 0uLL;
  *(_OWORD *)&__str.__first_ = v223;
  if (*((_QWORD *)&v223 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  XMPUtils::GetNodeChildIterator(&__str, &v216);
  v49 = (std::__shared_weak_count *)__str.__begin_;
  if (__str.__begin_)
  {
    v50 = &__str.__begin_->__r_.__value_.__l.__size_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  first = (std::__split_buffer<std::string>::pointer)v216;
  if ((_QWORD)v216)
  {
    while (1)
    {
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(first->__r_.__value_.__r.__words[0] + 48))(&__str);
      v211 = *(_OWORD *)&__str.__first_;
      (*((void (**)(std::__split_buffer<std::string> *__return_ptr, __n128))__str.__first_->__r_.__value_.__l.__data_
       + 29))(&__str, *(__n128 *)&__str.__first_);
      v212 = *(_OWORD *)&__str.__first_;
      (*((void (**)(__int128 *__return_ptr, __n128))__str.__first_->__r_.__value_.__l.__data_ + 63))(&v215, *(__n128 *)&__str.__first_);
      v53 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v215 + 192))(v215);
      std::string::basic_string[abi:ne180100]<0>(v213, v53);
      size = (_OWORD *)v222.__r_.__value_.__l.__size_;
      if (v222.__r_.__value_.__l.__size_ >= v222.__r_.__value_.__r.__words[2])
      {
        v56 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(v222.__r_.__value_.__l.__size_ - v222.__r_.__value_.__r.__words[0]) >> 3);
        v57 = v56 + 1;
        if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556
           * ((uint64_t)(v222.__r_.__value_.__r.__words[2] - v222.__r_.__value_.__r.__words[0]) >> 3) > v57)
          v57 = 0x5555555555555556
              * ((uint64_t)(v222.__r_.__value_.__r.__words[2] - v222.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v222.__r_.__value_.__r.__words[2] - v222.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          v58 = 0xAAAAAAAAAAAAAAALL;
        else
          v58 = v57;
        __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v222.__r_.__value_.__r.__words[2];
        if (v58)
          v59 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v222.__r_.__value_.__r.__words[2], v58);
        else
          v59 = 0;
        v60 = v59 + v56;
        __str.__first_ = v59;
        __str.__begin_ = v60;
        __str.__end_cap_.__value_ = &v59[v58];
        v61 = *(_OWORD *)v213;
        v60->__r_.__value_.__r.__words[2] = v214;
        *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
        v213[1] = 0;
        v214 = 0;
        v213[0] = 0;
        __str.__end_ = v60 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v222, &__str);
        v62 = v222.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&__str);
        v222.__r_.__value_.__l.__size_ = v62;
        if (SHIBYTE(v214) < 0)
          operator delete(v213[0]);
      }
      else
      {
        v55 = *(_OWORD *)v213;
        *(_QWORD *)(v222.__r_.__value_.__l.__size_ + 16) = v214;
        *size = v55;
        v213[1] = 0;
        v214 = 0;
        v213[0] = 0;
        v222.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
      }
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v64 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
      if (*((_QWORD *)&v212 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (*((_QWORD *)&v211 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v211 + 1) + 16))(*((_QWORD *)&v211 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v211 + 1));
        }
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(_QWORD *)v216 + 48))(&__str);
      v71 = (std::__shared_weak_count *)__str.__begin_;
      *(_OWORD *)v213 = *(_OWORD *)&__str.__first_;
      v72 = (*((uint64_t (**)(std::__split_buffer<std::string>::pointer))__str.__first_->__r_.__value_.__l.__data_
             + 23))(__str.__first_);
      v73 = v72;
      if (!v71)
        goto LABEL_153;
      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
      do
        v75 = __ldaxr(p_shared_owners);
      while (__stlxr(v75 - 1, p_shared_owners));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        if (!v73)
        {
LABEL_167:
          v213[0] = 0;
          v213[1] = 0;
          v89 = v220[1];
          if (v220[1] >= (void *)v221[0])
          {
            v91 = ((char *)v220[1] - (char *)v220[0]) >> 4;
            v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 60)
              std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
            v93 = v221[0] - (unint64_t)v220[0];
            if ((uint64_t)(v221[0] - (unint64_t)v220[0]) >> 3 > v92)
              v92 = v93 >> 3;
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
              v94 = 0xFFFFFFFFFFFFFFFLL;
            else
              v94 = v92;
            __str.__end_cap_.__value_ = (std::allocator<std::string> *)v221;
            v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)v221, v94);
            v97 = &v95[16 * v91];
            *(_QWORD *)v97 = 0;
            *((_QWORD *)v97 + 1) = 0;
            v99 = v220[0];
            v98 = v220[1];
            if (v220[1] == v220[0])
            {
              v102 = vdupq_n_s64((unint64_t)v220[1]);
              v100 = &v95[16 * v91];
            }
            else
            {
              v100 = &v95[16 * v91];
              do
              {
                v101 = *((_OWORD *)v98 - 1);
                v98 -= 2;
                *((_OWORD *)v100 - 1) = v101;
                v100 -= 16;
                *v98 = 0;
                v98[1] = 0;
              }
              while (v98 != v99);
              v102 = *(int64x2_t *)v220;
            }
            v90 = v97 + 16;
            v220[0] = v100;
            v220[1] = v97 + 16;
            *(int64x2_t *)&__str.__begin_ = v102;
            v103 = (std::string *)v221[0];
            v221[0] = &v95[16 * v96];
            __str.__end_cap_.__value_ = v103;
            __str.__first_ = (std::__split_buffer<std::string>::pointer)v102.i64[0];
            std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((uint64_t)&__str);
          }
          else
          {
            *(_QWORD *)v220[1] = 0;
            v89[1] = 0;
            v90 = v89 + 2;
          }
          v220[1] = v90;
          goto LABEL_193;
        }
      }
      else
      {
LABEL_153:
        if (!v72)
          goto LABEL_167;
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(_QWORD *)v216 + 48))(&__str);
      v215 = *(_OWORD *)&__str.__first_;
      (*((void (**)(void **__return_ptr, std::__split_buffer<std::string>::pointer, _QWORD, _QWORD, __n128))__str.__first_->__r_.__value_.__l.__data_
       + 33))(v213, __str.__first_, 0, 0, *(__n128 *)&__str.__first_);
      v76 = (char *)v220[1];
      if (v220[1] >= (void *)v221[0])
      {
        v77 = ((char *)v220[1] - (char *)v220[0]) >> 4;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 60)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v79 = v221[0] - (unint64_t)v220[0];
        if ((uint64_t)(v221[0] - (unint64_t)v220[0]) >> 3 > v78)
          v78 = v79 >> 3;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
          v80 = 0xFFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        __str.__end_cap_.__value_ = (std::allocator<std::string> *)v221;
        v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<dispatch_queue_s,void (*)(dispatch_object_s *)>>>((uint64_t)v221, v80);
        v83 = &v81[16 * v77];
        *(_OWORD *)v83 = *(_OWORD *)v213;
        v213[0] = 0;
        v213[1] = 0;
        v85 = v220[0];
        v84 = v220[1];
        if (v220[1] == v220[0])
        {
          v88 = vdupq_n_s64((unint64_t)v220[1]);
          v86 = &v81[16 * v77];
        }
        else
        {
          v86 = &v81[16 * v77];
          do
          {
            v87 = *((_OWORD *)v84 - 1);
            v84 -= 2;
            *((_OWORD *)v86 - 1) = v87;
            v86 -= 16;
            *v84 = 0;
            v84[1] = 0;
          }
          while (v84 != v85);
          v88 = *(int64x2_t *)v220;
        }
        v104 = v83 + 16;
        v220[0] = v86;
        v220[1] = v83 + 16;
        *(int64x2_t *)&__str.__begin_ = v88;
        v105 = (std::string *)v221[0];
        v221[0] = &v81[16 * v82];
        __str.__end_cap_.__value_ = v105;
        __str.__first_ = (std::__split_buffer<std::string>::pointer)v88.i64[0];
        std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::~__split_buffer((uint64_t)&__str);
        v106 = (std::__shared_weak_count *)v213[1];
        v220[1] = v104;
        if (v213[1])
        {
          v107 = (unint64_t *)((char *)v213[1] + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
      }
      else
      {
        *(_OWORD *)v220[1] = *(_OWORD *)v213;
        v213[0] = 0;
        v213[1] = 0;
        v220[1] = v76 + 16;
      }
      v109 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
      if (*((_QWORD *)&v215 + 1))
      {
        v110 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
LABEL_193:
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(*(_QWORD *)v216 + 56))(&__str);
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
      v216 = *(_OWORD *)&__str.__first_;
      if (v112)
      {
        v113 = (unint64_t *)&v112->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
        first = (std::__split_buffer<std::string>::pointer)v216;
        if (!(_QWORD)v216)
          break;
      }
      else
      {
        first = __str.__first_;
        if (!__str.__first_)
          break;
      }
    }
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)v223 + 224))(v223, 1, 0);
  v213[0] = 0;
  v213[1] = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v223 + 248))(v213);
  v115 = v209;
  v116 = strlen(a5);
  if (v116)
  {
    v117 = v116;
    v118 = 0;
    while (1)
    {
      ClassifyCharacter(a5, v118, (int *)&v230, &v231, &v228);
      if ((v230 & 0xFFFFFFFB) == 0)
        break;
      v118 += v231;
LABEL_205:
      if (v118 >= v117)
        goto LABEL_353;
    }
    if ((_DWORD)v230 == 4)
    {
      v119 = v228;
      ClosingQuote = GetClosingQuote(v228);
      v121 = v231;
      std::string::erase(&v233, 0, 0xFFFFFFFFFFFFFFFFLL);
      v122 = v121 + v118;
      if (v121 + v118 < v117)
      {
        while (1)
        {
          ClassifyCharacter(a5, v122, (int *)&v230, &v231, &v228);
          if ((_DWORD)v230 != 4)
            break;
          v123 = v228;
          v124 = v228 == v119 || v228 == ClosingQuote;
          if (!v124 && (v119 != 12317 || (v228 & 0xFFFFFFFFFFFFFFFELL) != 0x301E))
            break;
          v125 = v231;
          v118 = v231 + v122;
          if (v231 + v122 >= v117)
          {
            HIDWORD(v230) = 3;
            v232 = 0;
            v126 = 59;
            v229 = 59;
          }
          else
          {
            ClassifyCharacter(a5, v231 + v122, (int *)&v230 + 1, &v232, &v229);
            v126 = v229;
          }
          if (v123 != v126)
          {
            if (v123 == ClosingQuote || v119 == 12317 && (v123 & 0xFFFFFFFFFFFFFFFELL) == 0x301E)
              goto LABEL_259;
            std::string::basic_string[abi:ne180100]<0>(&__str, a5);
            std::string::append(&v233, (const std::string *)&__str, v122, v125);
            goto LABEL_228;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, a5);
          std::string::append(&v233, (const std::string *)&__str, v122, v125);
          if (SHIBYTE(__str.__end_) < 0)
            operator delete(__str.__first_);
          v122 += v232;
LABEL_230:
          v122 += v125;
          v118 = v122;
          if (v122 >= v117)
            goto LABEL_259;
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, a5);
        v125 = v231;
        std::string::append(&v233, (const std::string *)&__str, v122, v231);
LABEL_228:
        if (SHIBYTE(__str.__end_) < 0)
          operator delete(__str.__first_);
        goto LABEL_230;
      }
      v118 += v121;
    }
    else
    {
      v127 = v118;
      if (v118 < v117)
      {
        v127 = v118;
        do
        {
          ClassifyCharacter(a5, v127, (int *)&v230, &v231, &v228);
          v129 = (v115 & 0x10000000) == 0 || (_DWORD)v230 != 2;
          if ((v230 & 0xFFFFFFFB) != 0 && v129)
          {
            if ((_DWORD)v230 != 1)
              break;
            v130 = v231 + v127;
            if (v231 + v127 >= v117)
              break;
            ClassifyCharacter(a5, v231 + v127, (int *)&v230 + 1, &v232, &v229);
            v131 = (v115 & 0x10000000) != 0 && HIDWORD(v230) == 2;
            v132 = !v131;
            if ((v230 & 0xFFFFFFFB00000000) != 0 && v132)
              break;
          }
          else
          {
            v130 = v231 + v127;
          }
          v127 = v130;
        }
        while (v130 < v117);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, a5);
      std::string::assign(&v233, (const std::string *)&__str, v118, v127 - v118);
      if (SHIBYTE(__str.__end_) < 0)
        operator delete(__str.__first_);
      v118 = v127;
    }
LABEL_259:
    *(_OWORD *)&__str.__first_ = 0uLL;
    if (NodeChildCount)
    {
      v133 = (char *)__p;
      v134 = v222.__r_.__value_.__r.__words[0];
      v135 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
      v136 = *(_OWORD *)&v233.__r_.__value_.__l.__data_;
      if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = HIBYTE(v233.__r_.__value_.__r.__words[2]);
      else
        v137 = v233.__r_.__value_.__l.__size_;
      for (i = 1; i <= NodeChildCount; ++i)
      {
        if (((*(_QWORD *)&v133[((i - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (i - 1)) & 1) == 0)
        {
          v139 = (unsigned __int8 **)(v134 + 24 * (i - 1));
          v140 = (unsigned __int8 *)*((unsigned __int8 *)v139 + 23);
          v141 = (char)v140;
          if ((char)v140 < 0)
            v140 = v139[1];
          if ((unsigned __int8 *)v137 == v140)
          {
            if (v141 >= 0)
              v142 = (unsigned __int8 *)(v134 + 24 * (i - 1));
            else
              v142 = *v139;
            if ((v135 & 0x80) != 0)
            {
              if (!memcmp((const void *)v136, v142, *((size_t *)&v136 + 1)))
                break;
            }
            else
            {
              if (!(_DWORD)v135)
                break;
              v143 = &v233;
              v144 = v135;
              while (v143->__r_.__value_.__s.__data_[0] == *v142)
              {
                v143 = (std::string *)((char *)v143 + 1);
                ++v142;
                if (!--v144)
                  goto LABEL_281;
              }
            }
          }
        }
      }
    }
    else
    {
      i = 1;
    }
LABEL_281:
    if (i == NodeChildCount + 1)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v223 + 88))(&v212);
      v115 = v209;
      v145 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v212 + 192))(v212);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v223 + 88))(&v211);
      v146 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v211 + 208))(v211);
      if ((v233.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v147 = &v233;
      else
        v147 = (std::string *)v233.__r_.__value_.__r.__words[0];
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v145, v146, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"[]", (AdobeXMPCore_Int::IUTF8String_I *)v147, &v215);
      v148 = v215;
      v215 = 0uLL;
      *(_OWORD *)&__str.__first_ = v148;
      v149 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1))
      {
        v150 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v151 = __ldaxr(v150);
        while (__stlxr(v151 - 1, v150));
        if (!v151)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      v152 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
      if (*((_QWORD *)&v212 + 1))
      {
        v153 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v223 + 88))(&v212);
      v115 = v209;
      v155 = (AdobeXMPCore::ISimpleNode_v1 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v212 + 192))(v212);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v223 + 88))(&v211);
      v156 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v211 + 208))(v211);
      v157 = i - 1;
      v158 = (char *)(v222.__r_.__value_.__r.__words[0] + 24 * (i - 1));
      if (v158[23] < 0)
        v158 = *(char **)v158;
      AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v155, v156, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"[]", (AdobeXMPCore_Int::IUTF8String_I *)v158, &v215);
      v159 = v215;
      v215 = 0uLL;
      *(_OWORD *)&__str.__first_ = v159;
      v160 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      if (*((_QWORD *)&v211 + 1))
      {
        v161 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v163 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
      if (*((_QWORD *)&v212 + 1))
      {
        v164 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v166 = *((_QWORD *)v220[0] + 2 * v157);
      if (v166 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v166 + 184))(v166))
      {
        v215 = 0uLL;
        (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v220[0] + 2 * v157) + 112))(&v215);
        while ((_QWORD)v215)
        {
          v167 = __str.__first_;
          v168 = *((_QWORD *)__str.__first_->__r_.__value_.__l.__data_ - 68);
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v215 + 48))(&v211);
          (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v211 + 264))(&v212, v211, 0, 0);
          (*(void (**)(char *, __int128 *))(*(std::string::size_type *)((char *)v167->__r_.__value_.__r.__words
                                                                                 + v168)
                                                     + 136))((char *)v167 + v168, &v212);
          v169 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            v170 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v172 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
          if (*((_QWORD *)&v211 + 1))
          {
            v173 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
            do
              v174 = __ldaxr(v173);
            while (__stlxr(v174 - 1, v173));
            if (!v174)
            {
              ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
              std::__shared_weak_count::__release_weak(v172);
            }
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v215 + 56))(&v212);
          v175 = v212;
          v212 = 0uLL;
          v176 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
          v215 = v175;
          if (v176)
          {
            v177 = (unint64_t *)&v176->__shared_owners_;
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
          v179 = (std::__shared_weak_count *)*((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            v180 = (unint64_t *)(*((_QWORD *)&v212 + 1) + 8);
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (!v181)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }
        }
        v182 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
        if (*((_QWORD *)&v215 + 1))
        {
          v183 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
            std::__shared_weak_count::__release_weak(v182);
          }
        }
      }
      *(_QWORD *)((char *)__p + ((v157 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v157;
    }
    v185 = (char *)v213[0];
    v186 = *(_QWORD *)(*(_QWORD *)v213[0] - 688);
    if (__str.__first_)
      v187 = (char *)__str.__first_ + *((_QWORD *)__str.__first_->__r_.__value_.__l.__data_ - 68);
    else
      v187 = 0;
    *(_QWORD *)&v215 = v187;
    *((_QWORD *)&v215 + 1) = __str.__begin_;
    if (__str.__begin_)
    {
      v188 = &__str.__begin_->__r_.__value_.__l.__size_;
      do
        v189 = __ldxr(v188);
      while (__stxr(v189 + 1, v188));
    }
    (*(void (**)(char *, __int128 *))(*(_QWORD *)&v185[v186] + 520))(&v185[v186], &v215);
    v190 = (std::__shared_weak_count *)*((_QWORD *)&v215 + 1);
    if (*((_QWORD *)&v215 + 1))
    {
      v191 = (unint64_t *)(*((_QWORD *)&v215 + 1) + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    v193 = (std::__shared_weak_count *)__str.__begin_;
    if (__str.__begin_)
    {
      v194 = &__str.__begin_->__r_.__value_.__l.__size_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    goto LABEL_205;
  }
LABEL_353:
  v196 = (std::__shared_weak_count *)v213[1];
  if (v213[1])
  {
    v197 = (unint64_t *)((char *)v213[1] + 8);
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  v199 = (std::__shared_weak_count *)*((_QWORD *)&v216 + 1);
  if (*((_QWORD *)&v216 + 1))
  {
    v200 = (unint64_t *)(*((_QWORD *)&v216 + 1) + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  if (__p)
    operator delete(__p);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)v220;
  std::vector<std::shared_ptr<AdobeXMPCore::INode_v1 const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__first_ = &v222;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v202 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v203 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v224;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v233.__r_.__value_.__l.__data_);
}

void sub_1880D8928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  uint64_t v51;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  a42 = &a51;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (*(char *)(v51 - 145) < 0)
    operator delete(*(void **)(v51 - 168));
  _Unwind_Resume(a1);
}

void XMPUtils::SeparateArrayItems(char **this, XMPMeta *a2, char *a3, const char *a4, char *a5, const char *a6)
{
  int v10;
  char **v11;
  uint64_t Node;
  char **v13;
  int v14;
  const char *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  size_t v20;
  size_t v21;
  std::string::size_type v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t ClosingQuote;
  std::string::size_type v26;
  std::string::size_type v27;
  unint64_t v28;
  BOOL v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  std::string::size_type size;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  std::string *v50;
  uint64_t v51;
  XMP_Node *v52;
  XMP_Node *v53;
  std::string *v54;
  unint64_t v55;
  XMP_Node **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  XMP_Node **v63;
  char *v64;
  char *v65;
  XMP_Node *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *exception;
  int v71;
  char **v72;
  void *v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  std::string __str;
  void *__p;
  _BYTE *v79;
  uint64_t v80;
  const void **v81[3];
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string v87;

  if (sUseNewCoreAPIs)
  {
    XMPUtils::SeparateArrayItems_v2((XMPUtils *)this, a2, a3, a4, a5, a6);
    return;
  }
  if (!a2 || !a3 || !a5)
    XMPUtils::SeparateArrayItems();
  memset(&v87, 0, sizeof(v87));
  v85 = 0;
  v86 = 0;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  v71 = (int)a4;
  v10 = VerifySetOptions(a4 & 0xEFFFFFFF, 0);
  if ((v10 & 0xFFFFE1FF) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    exception[1] = "Options can only provide array form";
    *((_BYTE *)exception + 16) = 0;
  }
  memset(v81, 0, sizeof(v81));
  ExpandXPath((char *)a2, a3, (uint64_t *)v81);
  v11 = this + 28;
  Node = FindNode(this + 28, v81, 0, 0, 0);
  v13 = (char **)Node;
  if (Node)
  {
    v14 = *(_DWORD *)(Node + 8);
    v15 = "Named property must be non-alternate array";
    if ((v14 & 0x1E00) == 0 || (v14 & 0x800) != 0)
    {
LABEL_13:
      v17 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v17 = 102;
      v17[1] = v15;
      *((_BYTE *)v17 + 16) = 0;
    }
    if (v10)
    {
      v29 = v10 == (*(_DWORD *)(Node + 8) & 0x1E00);
      v16 = v71;
      if (!v29)
      {
        v15 = "Mismatch of specified and existing array form";
        goto LABEL_13;
      }
    }
    else
    {
      v16 = v71;
    }
  }
  else
  {
    v13 = (char **)FindNode(v11, v81, 1, v10 | 0x200u, 0);
    v16 = v71;
    if (!v13)
    {
      v18 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v18 = 102;
      v18[1] = "Failed to create named array";
      *((_BYTE *)v18 + 16) = 0;
    }
  }
  v19 = v13[9];
  __p = 0;
  v79 = 0;
  v80 = 0;
  v72 = v13 + 9;
  std::vector<XMP_Node *>::__init_with_size[abi:ne180100]<XMP_Node **,XMP_Node **>(&__p, v19, (uint64_t)v13[10], (v13[10] - v19) >> 3);
  v73 = __p;
  v74 = v79;
  v75 = (v79 - (_BYTE *)__p) >> 3;
  v13[10] = v13[9];
  v20 = strlen(a5);
  if (v20)
  {
    v21 = v20;
    v22 = 0;
    v23 = v75;
    if (v75 <= 1)
      v23 = 1;
    v76 = v23;
    while (1)
    {
      ClassifyCharacter(a5, v22, (int *)&v84, &v85, (uint64_t *)&v82);
      if ((v84 & 0xFFFFFFFB) == 0)
        break;
      v22 += v85;
LABEL_120:
      if (v22 >= v21)
        goto LABEL_121;
    }
    if ((_DWORD)v84 == 4)
    {
      v24 = v82;
      ClosingQuote = GetClosingQuote(v82);
      v26 = v85;
      std::string::erase(&v87, 0, 0xFFFFFFFFFFFFFFFFLL);
      v27 = v26 + v22;
      if (v26 + v22 < v21)
      {
        while (1)
        {
          ClassifyCharacter(a5, v27, (int *)&v84, &v85, (uint64_t *)&v82);
          if ((_DWORD)v84 != 4)
            break;
          v28 = v82;
          v29 = v82 == v24 || v82 == ClosingQuote;
          if (!v29 && (v24 != 12317 || (v82 & 0xFFFFFFFFFFFFFFFELL) != 0x301E))
            break;
          v30 = v85;
          v22 = v85 + v27;
          if (v85 + v27 >= v21)
          {
            HIDWORD(v84) = 3;
            v86 = 0;
            v31 = 59;
            v83 = 59;
          }
          else
          {
            ClassifyCharacter(a5, v85 + v27, (int *)&v84 + 1, &v86, &v83);
            v31 = v83;
          }
          if (v28 != v31)
          {
            if (v28 == ClosingQuote || v24 == 12317 && (v28 & 0xFFFFFFFFFFFFFFFELL) == 0x301E)
              goto LABEL_75;
            std::string::basic_string[abi:ne180100]<0>(&__str, a5);
            std::string::append(&v87, &__str, v27, v30);
            goto LABEL_44;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, a5);
          std::string::append(&v87, &__str, v27, v30);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v27 += v86;
LABEL_46:
          v27 += v30;
          v22 = v27;
          if (v27 >= v21)
            goto LABEL_75;
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, a5);
        v30 = v85;
        std::string::append(&v87, &__str, v27, v85);
LABEL_44:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_46;
      }
      v22 += v26;
    }
    else
    {
      v32 = v22;
      if (v22 < v21)
      {
        v32 = v22;
        do
        {
          ClassifyCharacter(a5, v32, (int *)&v84, &v85, (uint64_t *)&v82);
          v34 = (v16 & 0x10000000) == 0 || (_DWORD)v84 != 2;
          if ((v84 & 0xFFFFFFFB) != 0 && v34)
          {
            if ((_DWORD)v84 != 1)
              break;
            v35 = v85 + v32;
            if (v85 + v32 >= v21)
              break;
            ClassifyCharacter(a5, v85 + v32, (int *)&v84 + 1, &v86, &v83);
            v36 = (v16 & 0x10000000) != 0 && HIDWORD(v84) == 2;
            v37 = !v36;
            if ((v84 & 0xFFFFFFFB00000000) != 0 && v37)
              break;
          }
          else
          {
            v35 = v85 + v32;
          }
          v32 = v35;
        }
        while (v35 < v21);
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, a5);
      std::string::assign(&v87, &__str, v22, v32 - v22);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v22 = v32;
    }
LABEL_75:
    if (v74 == v73)
    {
      v38 = 0;
    }
    else
    {
      v38 = 0;
      v39 = __p;
      v40 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      v41 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      do
      {
        v43 = v39[v38];
        if (v43)
        {
          v44 = *(unsigned __int8 *)(v43 + 63);
          v45 = (char)v44;
          if ((v44 & 0x80u) != 0)
            v44 = *(_QWORD *)(v43 + 48);
          if (size == v44)
          {
            v48 = *(unsigned __int8 **)(v43 + 40);
            v46 = (unsigned __int8 *)(v43 + 40);
            v47 = v48;
            if (v45 >= 0)
              v49 = v46;
            else
              v49 = v47;
            if ((v40 & 0x80) != 0)
            {
              if (!memcmp((const void *)v41, v49, *((size_t *)&v41 + 1)))
                goto LABEL_95;
            }
            else
            {
              if (!(_DWORD)v40)
                goto LABEL_95;
              v50 = &v87;
              v51 = v40;
              while (v50->__r_.__value_.__s.__data_[0] == *v49)
              {
                v50 = (std::string *)((char *)v50 + 1);
                ++v49;
                if (!--v51)
                  goto LABEL_95;
              }
            }
          }
        }
        ++v38;
      }
      while (v38 != v76);
      v38 = v76;
LABEL_95:
      v16 = v71;
    }
    if (v38 == v75)
    {
      v52 = (XMP_Node *)operator new();
      v53 = v52;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &v87;
      else
        v54 = (std::string *)v87.__r_.__value_.__r.__words[0];
      XMP_Node::XMP_Node(v52, (XMP_Node *)v13, "[]", (char *)v54, 0);
    }
    else
    {
      v53 = (XMP_Node *)*((_QWORD *)__p + v38);
      *((_QWORD *)__p + v38) = 0;
    }
    v56 = (XMP_Node **)v13[10];
    v55 = (unint64_t)v13[11];
    if ((unint64_t)v56 >= v55)
    {
      v58 = ((char *)v56 - *v72) >> 3;
      if ((unint64_t)(v58 + 1) >> 61)
        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
      v59 = v55 - (_QWORD)*v72;
      v60 = v59 >> 2;
      if (v59 >> 2 <= (unint64_t)(v58 + 1))
        v60 = v58 + 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(v13 + 11), v61);
      else
        v62 = 0;
      v63 = (XMP_Node **)&v62[8 * v58];
      *v63 = v53;
      v57 = (char *)(v63 + 1);
      v65 = v13[9];
      v64 = v13[10];
      if (v64 != v65)
      {
        do
        {
          v66 = (XMP_Node *)*((_QWORD *)v64 - 1);
          v64 -= 8;
          *--v63 = v66;
        }
        while (v64 != v65);
        v64 = *v72;
      }
      v13[9] = (char *)v63;
      v13[10] = v57;
      v13[11] = &v62[8 * v61];
      if (v64)
        operator delete(v64);
    }
    else
    {
      *v56 = v53;
      v57 = (char *)(v56 + 1);
    }
    v13[10] = v57;
    goto LABEL_120;
  }
LABEL_121:
  if (v74 != v73)
  {
    v67 = 0;
    if (v75 <= 1)
      v68 = 1;
    else
      v68 = v75;
    do
    {
      v69 = *((_QWORD *)__p + v67);
      if (v69)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
      ++v67;
    }
    while (v68 != v67);
  }
  if (__p)
  {
    v79 = __p;
    operator delete(__p);
  }
  __p = v81;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
}

void sub_1880D9374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *__p,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  __p = &a26;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  _Unwind_Resume(a1);
}

void XMPUtils::ApplyTemplate(XMPUtils *this, XMPMeta *a2, const XMPMeta *a3)
{
  unsigned int v3;
  XMPUtils *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t SchemaNode;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  int64_t v39;
  XMPMeta *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  XMP_Node *v46;
  unint64_t v47;
  XMP_Node **v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  XMP_Node **v55;
  char *v56;
  char *v57;
  XMP_Node *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  const XMP_Node *v63;
  char *v64;
  _BYTE *v65;
  int64_t v66;
  uint64_t v67;
  char **v68;
  char **v69;
  uint64_t v70;
  unint64_t v71;
  int v73[2];
  char **v74;
  int v76;
  void *__dst;

  v3 = a3;
  v4 = this;
  if (sUseNewCoreAPIs)
  {
    XMPUtils::ApplyTemplate_v2(this, a2, a3);
  }
  else
  {
    v5 = a3 & 8;
    v76 = a3 & 6;
    if ((a3 & 0x10) != 0)
    {
      v6 = *((_QWORD *)this + 38) - *((_QWORD *)this + 37);
      if (v6)
      {
        v7 = v6 >> 3;
        v68 = (char **)((char *)a2 + 224);
        do
        {
          v70 = v7;
          v8 = v7 - 1;
          v9 = *(_QWORD *)(*((_QWORD *)v4 + 37) + 8 * (v7 - 1));
          v10 = (char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0)
            v10 = *(char **)(v9 + 16);
          SchemaNode = FindSchemaNode(v68, v10, 0, 0, 0, 0);
          *(_QWORD *)v73 = v8;
          if (SchemaNode)
          {
            v12 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
            if (v12)
            {
              v13 = SchemaNode;
              v14 = -(v12 >> 3);
              v15 = v12 & 0xFFFFFFFFFFFFFFF8;
              v16 = -(uint64_t)(v12 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v17 = *(char **)(*(_QWORD *)(v9 + 72) + v15 - 8);
                if ((v3 & 1) != 0 || !IsInternalProperty((_QWORD *)(v9 + 16), (_QWORD *)v17 + 2))
                {
                  v18 = v17 + 16;
                  if (v17[39] < 0)
                    v18 = *(char **)v18;
                  if (!FindChildNode(v13, v18, 0, 0))
                  {
                    (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
                    v19 = *(_QWORD *)(v9 + 72);
                    v20 = *(char **)(v9 + 80);
                    v21 = (char *)(v19 + v15);
                    v22 = &v20[-v19];
                    v23 = &v22[v16];
                    if (v21 != v20)
                      memmove(v21 - 8, v21, (size_t)&v22[v16]);
                    *(_QWORD *)(v9 + 80) = &v21[((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8) - 8];
                  }
                }
                v15 -= 8;
                v16 += 8;
                v24 = __CFADD__(v14++, 1);
              }
              while (!v24);
            }
          }
          else if ((v3 & 1) != 0)
          {
            XMP_Node::RemoveChildren((_QWORD *)v9);
          }
          else
          {
            v25 = *(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72);
            if (v25)
            {
              v26 = -(v25 >> 3);
              v27 = v25 & 0xFFFFFFFFFFFFFFF8;
              v28 = -(uint64_t)(v25 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v29 = *(_QWORD **)(*(_QWORD *)(v9 + 72) + v27 - 8);
                if (!IsInternalProperty((_QWORD *)(v9 + 16), v29 + 2))
                {
                  if (v29)
                    (*(void (**)(_QWORD *))(*v29 + 8))(v29);
                  v30 = *(_QWORD *)(v9 + 72);
                  v31 = *(char **)(v9 + 80);
                  v32 = (char *)(v30 + v27);
                  v33 = &v31[-v30];
                  v34 = &v33[v28];
                  if (v32 != v31)
                    memmove(v32 - 8, v32, (size_t)&v33[v28]);
                  *(_QWORD *)(v9 + 80) = &v32[((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8) - 8];
                }
                v27 -= 8;
                v28 += 8;
                v24 = __CFADD__(v26++, 1);
              }
              while (!v24);
            }
          }
          v4 = this;
          if (*(_QWORD *)(v9 + 72) == *(_QWORD *)(v9 + 80))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v35 = *((_QWORD *)this + 37);
            v36 = (_BYTE *)*((_QWORD *)this + 38);
            v37 = v35 + 8 * *(_QWORD *)v73;
            v38 = (_BYTE *)(v35 + 8 * v70);
            v39 = v36 - v38;
            if (v36 != v38)
              memmove((void *)(v35 + 8 * *(_QWORD *)v73), v38, v36 - v38);
            *((_QWORD *)this + 38) = v37 + v39;
          }
          v7 = *(_QWORD *)v73;
        }
        while (*(_QWORD *)v73);
      }
    }
    v40 = a2;
    if ((v76 != 0) | (v5 >> 3))
    {
      v41 = *((_QWORD *)a2 + 38) - *((_QWORD *)a2 + 37);
      if (v41)
      {
        v42 = 0;
        v43 = v41 >> 3;
        v74 = (char **)((char *)v4 + 224);
        v67 = (uint64_t)v4 + 312;
        v69 = (char **)((char *)v4 + 296);
        if (v43 <= 1)
          v43 = 1;
        v71 = v43;
        do
        {
          v44 = *(_QWORD *)(*((_QWORD *)v40 + 37) + 8 * v42);
          __dst = 0;
          v45 = (char *)(v44 + 16);
          if (*(char *)(v44 + 39) < 0)
            v45 = *(char **)(v44 + 16);
          v46 = (XMP_Node *)FindSchemaNode(v74, v45, 0, (uint64_t **)&__dst, 0, 0);
          if (!v46)
          {
            v46 = (XMP_Node *)operator new();
            XMP_Node::XMP_Node((uint64_t)v46, (uint64_t)v74, (__int128 *)(v44 + 16), (__int128 *)(v44 + 40), 0x80000000);
            v48 = (XMP_Node **)*((_QWORD *)v4 + 38);
            v47 = *((_QWORD *)v4 + 39);
            if ((unint64_t)v48 >= v47)
            {
              v50 = ((char *)v48 - *v69) >> 3;
              if ((unint64_t)(v50 + 1) >> 61)
                std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
              v51 = v47 - (_QWORD)*v69;
              v52 = v51 >> 2;
              if (v51 >> 2 <= (unint64_t)(v50 + 1))
                v52 = v50 + 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v52;
              if (v53)
                v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v67, v53);
              else
                v54 = 0;
              v55 = (XMP_Node **)&v54[8 * v50];
              *v55 = v46;
              v49 = v55 + 1;
              v57 = (char *)*((_QWORD *)v4 + 37);
              v56 = (char *)*((_QWORD *)v4 + 38);
              if (v56 != v57)
              {
                do
                {
                  v58 = (XMP_Node *)*((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *--v55 = v58;
                }
                while (v56 != v57);
                v56 = *v69;
              }
              *((_QWORD *)v4 + 37) = v55;
              *((_QWORD *)v4 + 38) = v49;
              *((_QWORD *)v4 + 39) = &v54[8 * v53];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *v48 = v46;
              v49 = v48 + 1;
            }
            *((_QWORD *)v4 + 38) = v49;
            __dst = v49 - 1;
          }
          v59 = *(_QWORD *)(v44 + 80) - *(_QWORD *)(v44 + 72);
          if (v59)
          {
            v60 = 0;
            v61 = v59 >> 3;
            if (v61 <= 1)
              v62 = 1;
            else
              v62 = v61;
            do
            {
              v63 = *(const XMP_Node **)(*(_QWORD *)(v44 + 72) + 8 * v60);
              if ((v3 & 1) != 0 || !IsInternalProperty((_QWORD *)(v44 + 16), (_QWORD *)v63 + 2))
                AppendSubtree(v63, v46, v5 != 0, v76 != 0, ((v3 & 0x10) == 0) & (v3 >> 2));
              ++v60;
            }
            while (v62 != v60);
          }
          v40 = a2;
          v4 = this;
          if (*((_QWORD *)v46 + 9) == *((_QWORD *)v46 + 10))
          {
            (*(void (**)(XMP_Node *))(*(_QWORD *)v46 + 8))(v46);
            v64 = (char *)__dst;
            v65 = (_BYTE *)*((_QWORD *)this + 38);
            v66 = v65 - ((_BYTE *)__dst + 8);
            if (v65 != (char *)__dst + 8)
              memmove(__dst, (char *)__dst + 8, v65 - ((_BYTE *)__dst + 8));
            *((_QWORD *)this + 38) = &v64[v66];
          }
          ++v42;
        }
        while (v42 != v71);
      }
    }
  }
}

void sub_1880D9928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void AppendSubtree(const XMP_Node *a1, XMP_Node *a2, BOOL a3, _BOOL4 a4, _BOOL4 a5)
{
  char *v10;
  uint64_t ChildNode;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const XMP_Node *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int64_t v44;
  char *v45;
  _BYTE *v46;
  int64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  void **v54;
  char **v55;
  void **v56;
  void *__dst;

  __dst = 0;
  v10 = (char *)a1 + 16;
  if (*((char *)a1 + 39) < 0)
    v10 = *(char **)v10;
  ChildNode = FindChildNode((uint64_t)a2, v10, 0, (uint64_t **)&__dst);
  v12 = ChildNode;
  v13 = *((_DWORD *)a1 + 2);
  v14 = v13 & 0x1F00;
  if ((v13 & 0x1F00) != 0)
  {
    if (*((_QWORD *)a1 + 9) != *((_QWORD *)a1 + 10))
      goto LABEL_5;
LABEL_31:
    if (!a5 || !ChildNode)
      return;
    goto LABEL_33;
  }
  if (*((char *)a1 + 63) < 0)
  {
    if (!*((_QWORD *)a1 + 6))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)a1 + 63))
  {
    goto LABEL_31;
  }
LABEL_5:
  if (ChildNode)
  {
    v15 = (v13 & 0x1F00) != 0 && a3;
    if (!v15 && a4)
    {
      std::string::operator=((std::string *)(ChildNode + 40), (const std::string *)((char *)a1 + 40));
      *(_DWORD *)(v12 + 8) = *((_DWORD *)a1 + 2);
      XMP_Node::RemoveChildren((_QWORD *)v12);
      XMP_Node::RemoveQualifiers((_QWORD *)v12);
      CloneOffspring(a1, (void **)v12, 1);
      if ((*(_BYTE *)(v12 + 9) & 0x1F) != 0 && *(_QWORD *)(v12 + 72) == *(_QWORD *)(v12 + 80))
        DeleteSubtree((char *)__dst);
      return;
    }
    if ((v13 & 0x1F00) == 0 || v14 != (*(_DWORD *)(ChildNode + 8) & 0x1F00))
      return;
    if (v14 == 256)
    {
      v17 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
      if (!v17)
        return;
      v18 = 0;
      v19 = v17 >> 3;
      while (1)
      {
        AppendSubtree(*(const XMP_Node **)(*((_QWORD *)a1 + 9) + 8 * v18), (XMP_Node *)v12, a3, a4, a5);
        if (a5 && *(_QWORD *)(v12 + 72) == *(_QWORD *)(v12 + 80))
          break;
        if (v19 == ++v18)
          return;
      }
LABEL_33:
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v20 = (char *)__dst;
      v21 = (_BYTE *)*((_QWORD *)a2 + 10);
      v22 = v21 - ((_BYTE *)__dst + 8);
      if (v21 != (char *)__dst + 8)
        memmove(__dst, (char *)__dst + 8, v21 - ((_BYTE *)__dst + 8));
      *((_QWORD *)a2 + 10) = &v20[v22];
      return;
    }
    if ((v13 & 0x1000) == 0)
    {
      if ((v13 & 0x200) != 0)
      {
        v23 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
        if (v23)
        {
          v24 = 0;
          v25 = v23 >> 3;
          do
          {
            v26 = *(const XMP_Node **)(*((_QWORD *)a1 + 9) + 8 * v24);
            v27 = *(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72);
            if (v27)
            {
              v28 = 0;
              v29 = v27 >> 3;
              while ((ItemValuesMatch(v26, *(const XMP_Node **)(*(_QWORD *)(v12 + 72) + 8 * v28)) & 1) == 0)
              {
                if (v29 == ++v28)
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              CloneSubtree(v26, (XMP_Node *)v12, 1);
            }
            ++v24;
          }
          while (v24 != v25);
        }
      }
      return;
    }
    if (!a3)
      AppendSubtree();
    v30 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
    if (!v30)
      return;
    v31 = 0;
    v32 = v30 >> 3;
    v55 = (char **)(ChildNode + 72);
    while (1)
    {
      v33 = *(_QWORD *)(*((_QWORD *)a1 + 9) + 8 * v31);
      v34 = *(uint64_t **)(v33 + 96);
      if (v34 != *(uint64_t **)(v33 + 104))
      {
        v35 = *v34;
        v36 = (_QWORD *)(v35 + 16);
        v37 = *(char *)(v35 + 39);
        if (v37 < 0)
        {
          if (*(_QWORD *)(v35 + 24) != 8)
            goto LABEL_60;
          v36 = (_QWORD *)*v36;
        }
        else if (v37 != 8)
        {
          goto LABEL_60;
        }
        if (*v36 == 0x676E616C3A6C6D78)
        {
          v38 = LookupLangItem(v12, (unsigned __int8 **)(v35 + 40));
          v39 = v38;
          if (*(char *)(v33 + 63) < 0)
          {
            if (!*(_QWORD *)(v33 + 48))
            {
LABEL_68:
              if (a5 && v38 != -1)
              {
                v40 = *v55;
                v41 = *(_QWORD *)&(*v55)[8 * v38];
                if (v41)
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
                  v40 = *v55;
                }
                v42 = &v40[8 * v39];
                v43 = *(char **)(v12 + 80);
                v44 = v43 - (v42 + 8);
                if (v43 != v42 + 8)
                {
                  memmove(&v40[8 * v39], v42 + 8, v43 - (v42 + 8));
                  v40 = *v55;
                }
                *(_QWORD *)(v12 + 80) = &v42[v44];
                if (v40 == &v42[v44])
                {
                  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
                  v45 = (char *)__dst;
                  v46 = (_BYTE *)*((_QWORD *)a2 + 10);
                  v47 = v46 - ((_BYTE *)__dst + 8);
                  if (v46 != (char *)__dst + 8)
                    memmove(__dst, (char *)__dst + 8, v46 - ((_BYTE *)__dst + 8));
                  *((_QWORD *)a2 + 10) = &v45[v47];
                }
              }
              goto LABEL_60;
            }
          }
          else if (!*(_BYTE *)(v33 + 63))
          {
            goto LABEL_68;
          }
          if (v38 != -1)
          {
            if (a4)
              std::string::operator=((std::string *)(*(_QWORD *)&(*v55)[8 * v38] + 40), (const std::string *)(v33 + 40));
            goto LABEL_60;
          }
          v48 = **(_QWORD **)(v33 + 96);
          v49 = (uint64_t *)(v48 + 40);
          v50 = *(char *)(v48 + 63);
          if (v50 < 0)
          {
            if (*(_QWORD *)(v48 + 48) != 9)
            {
LABEL_87:
              CloneSubtree((const XMP_Node *)v33, (XMP_Node *)v12, 1);
              goto LABEL_60;
            }
            v49 = (uint64_t *)*v49;
          }
          else if (v50 != 9)
          {
            goto LABEL_87;
          }
          v51 = (uint64_t *)*v49;
          v52 = *((unsigned __int8 *)v49 + 8);
          v53 = v51 == (uint64_t *)0x6C75616665642D78 && v52 == 116;
          if (v53 && *(_QWORD *)(v12 + 72) != *(_QWORD *)(v12 + 80))
          {
            v56 = 0;
            v54 = (void **)operator new();
            XMP_Node::XMP_Node((uint64_t)v54, v12, (__int128 *)(v33 + 16), (__int128 *)(v33 + 40), *(_DWORD *)(v33 + 8));
            v56 = v54;
            CloneOffspring((const XMP_Node *)v33, v54, 1);
            std::vector<XMP_Node *>::insert((uint64_t)v55, *v55, (char *)&v56);
            goto LABEL_60;
          }
          goto LABEL_87;
        }
      }
LABEL_60:
      if (v32 == ++v31)
        return;
    }
  }
  v16 = CloneSubtree(a1, a2, 1);
  if (!v16)
    return;
  if (*(char *)(v16 + 63) < 0)
  {
    if (*(_QWORD *)(v16 + 48))
      return;
  }
  else if (*(_BYTE *)(v16 + 63))
  {
    return;
  }
  if (*(_QWORD *)(v16 + 72) == *(_QWORD *)(v16 + 80))
    AppendSubtree();
}

void sub_1880D9E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void XMPUtils::RemoveProperties(char **this, XMPMeta *a2, char *a3, const char *a4)
{
  __int16 v4;
  _QWORD *Node;
  _QWORD *v8;
  char *v9;
  _BYTE *v10;
  int64_t v11;
  char **v12;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  _BYTE *v23;
  int64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *exception;
  void *v33;
  unsigned int __n;
  const void **__n_4[3];
  void *__dst;

  v4 = (__int16)a4;
  if (sUseNewCoreAPIs)
  {
    XMPUtils::RemoveProperties_v2((XMPUtils *)this, a2, a3, a4);
  }
  else
  {
    if (!a2 || !a3)
      XMPUtils::RemoveProperties();
    if (*a3)
    {
      if (!*(_BYTE *)a2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 4;
        exception[1] = "Property name requires schema namespace";
        *((_BYTE *)exception + 16) = 0;
      }
      memset(__n_4, 0, sizeof(__n_4));
      ExpandXPath((char *)a2, a3, (uint64_t *)__n_4);
      __dst = 0;
      Node = (_QWORD *)FindNode(this + 28, __n_4, 0, 0, (char **)&__dst);
      if (Node && ((v4 & 1) != 0 || !IsInternalProperty(__n_4[0], __n_4[0] + 4)))
      {
        v8 = (_QWORD *)Node[8];
        (*(void (**)(_QWORD *))(*Node + 8))(Node);
        v9 = (char *)__dst;
        v10 = (_BYTE *)v8[10];
        v11 = v10 - ((_BYTE *)__dst + 8);
        if (v10 != (char *)__dst + 8)
          memmove(__dst, (char *)__dst + 8, v10 - ((_BYTE *)__dst + 8));
        v8[10] = &v9[v11];
        DeleteEmptySchema(v8);
      }
      __dst = __n_4;
      std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    }
    else if (*(_BYTE *)a2)
    {
      __n_4[0] = 0;
      v12 = this + 28;
      if (FindSchemaNode(this + 28, (char *)a2, 0, (uint64_t **)__n_4, 0, 0))
        RemoveSchemaChildren((char *)__n_4[0], v4 & 1);
      if ((v4 & 0x800) != 0)
      {
        __dst = 0;
        __n = 0;
        XMPMeta::GetNamespacePrefix(a2, (const char **)&__dst, (const char **)&__n, v13);
        v14 = sRegisteredAliasMap + 8;
        v15 = *(_QWORD **)sRegisteredAliasMap;
        if (*(_QWORD *)sRegisteredAliasMap != sRegisteredAliasMap + 8)
        {
          do
          {
            v16 = (const char *)(v15 + 4);
            if (*((char *)v15 + 55) < 0)
              v16 = *(const char **)v16;
            if (!strncmp(v16, (const char *)__dst, __n))
            {
              v33 = 0;
              v17 = FindNode(v12, (const void ***)v15 + 7, 0, 0, (char **)&v33);
              if (v17)
              {
                v18 = (_QWORD *)v17;
                v19 = v17;
                do
                {
                  v20 = v19;
                  v19 = *(_QWORD *)(v19 + 64);
                }
                while ((*(_DWORD *)(v19 + 8) & 0x80000000) == 0);
                if ((v4 & 1) != 0 || !IsInternalProperty((_QWORD *)(v19 + 16), (_QWORD *)(v20 + 16)))
                {
                  v21 = (_QWORD *)v18[8];
                  (*(void (**)(_QWORD *))(*v18 + 8))(v18);
                  v22 = (char *)v33;
                  v23 = (_BYTE *)v21[10];
                  v24 = v23 - ((_BYTE *)v33 + 8);
                  if (v23 != (char *)v33 + 8)
                    memmove(v33, (char *)v33 + 8, v23 - ((_BYTE *)v33 + 8));
                  v21[10] = &v22[v24];
                  DeleteEmptySchema(v21);
                }
              }
            }
            v25 = (_QWORD *)v15[1];
            if (v25)
            {
              do
              {
                v26 = v25;
                v25 = (_QWORD *)*v25;
              }
              while (v25);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v15[2];
                v27 = *v26 == (_QWORD)v15;
                v15 = v26;
              }
              while (!v27);
            }
            v15 = v26;
          }
          while (v26 != (_QWORD *)v14);
        }
      }
    }
    else
    {
      v28 = this[37];
      v29 = this[38] - v28;
      if (v29)
      {
        v30 = v29 >> 3;
        v31 = &v28[(v29 & 0xFFFFFFFFFFFFFFF8) - 8];
        do
        {
          --v30;
          RemoveSchemaChildren(v31, v4 & 1);
          v31 -= 8;
        }
        while (v30);
      }
    }
  }
}

void sub_1880DA154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t RemoveSchemaChildren(char *__dst, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;

  v2 = *(_QWORD **)__dst;
  if ((*(_DWORD *)(*(_QWORD *)__dst + 8) & 0x80000000) == 0)
    RemoveSchemaChildren();
  v4 = v2[9];
  v5 = v2[10] - v4;
  if (!v5)
    goto LABEL_13;
  v7 = v5 >> 3;
  v8 = v4 - 8;
  v9 = v4 - 8 + (v5 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    if ((a2 & 1) != 0
      || (result = IsInternalProperty(v2 + 2, (_QWORD *)(*(_QWORD *)(v8 + 8 * v7) + 16)), (result & 1) == 0))
    {
      result = *(_QWORD *)(v8 + 8 * v7);
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v11 = v2[10];
      v12 = v11 - (v9 + 8);
      if (v11 != v9 + 8)
        result = (uint64_t)memmove((void *)v9, (const void *)(v9 + 8), v11 - (v9 + 8));
      v2[10] = v9 + v12;
    }
    v9 -= 8;
    --v7;
  }
  while (v7);
  if (v2[9] == v2[10])
  {
LABEL_13:
    v13 = v2[8];
    v14 = *(char **)(v13 + 80);
    v15 = v14 - (__dst + 8);
    if (v14 != __dst + 8)
      memmove(__dst, __dst + 8, v14 - (__dst + 8));
    *(_QWORD *)(v13 + 80) = &__dst[v15];
    return (*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  }
  return result;
}

void XMPUtils::DuplicateSubtree(XMPUtils *this, char **a2, XMPMeta *__s1, char *a4, char *a5, char *a6, const char *a7)
{
  char *v8;
  char *v9;
  XMPUtils *v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Node;
  _QWORD *v25;
  char **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  unint64_t v37;
  void ***v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  void ***v45;
  char *v46;
  char *v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  unsigned int *v59;
  void **v60;
  _QWORD *SchemaNode;
  void **v62;
  unint64_t v63;
  void ***v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  void ***v72;
  char *v73;
  char *v74;
  void **v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *exception;
  const char *v80;
  const char *v81;
  _QWORD *v82;
  unint64_t v83;
  XMPUtils *v84;
  _BYTE __s[12];
  void *__p[2];
  uint64_t v87;
  const void **v88[3];
  const void **v89[3];
  const void **v90[3];

  v8 = a6;
  v9 = a5;
  v13 = this;
  if (!sUseNewCoreAPIs)
  {
    memset(v90, 0, sizeof(v90));
    memset(v89, 0, sizeof(v89));
    if (__s1 && *(_BYTE *)__s1)
    {
      if (a4 && *a4)
      {
        v14 = "(dest != 0) && (destNS != 0) && (destRoot != 0)";
        v15 = 1800;
        if (a2 && a5 && a6)
        {
          if (!*a5)
            v9 = (char *)__s1;
          if (!*a6)
            v8 = a4;
          v16 = strcmp((const char *)__s1, "*");
          v17 = strcmp(v9, "*");
          if (v16)
            v18 = v17 == 0;
          else
            v18 = 1;
          v19 = v18;
          if (v13 == (XMPUtils *)a2 && v19)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            v80 = "Can't duplicate tree onto itself";
            goto LABEL_122;
          }
          if (!(v17 | v16))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)exception = 4;
            v80 = "Use Clone for full tree to full tree";
            goto LABEL_122;
          }
          if (!v16)
          {
            ExpandXPath(v9, v8, (uint64_t *)v89);
            Node = FindNode(a2 + 28, v89, 0, 0, 0);
            v25 = (_QWORD *)Node;
            if (!Node || (*(_BYTE *)(Node + 9) & 1) == 0)
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 102;
              v80 = "Destination must be an existing struct";
              goto LABEL_122;
            }
            v26 = (char **)(Node + 72);
            if (*(_QWORD *)(Node + 72) != *(_QWORD *)(Node + 80))
            {
              if ((a7 & 0x20000000) == 0)
              {
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                v80 = "Destination must be an empty struct";
                goto LABEL_122;
              }
              XMP_Node::RemoveChildren((_QWORD *)Node);
            }
            v27 = *((_QWORD *)v13 + 38) - *((_QWORD *)v13 + 37);
            if (v27)
            {
              v28 = 0;
              v29 = v27 >> 3;
              if (v29 <= 1)
                v29 = 1;
              v83 = v29;
              v84 = v13;
              do
              {
                v30 = *(_QWORD *)(*((_QWORD *)v13 + 37) + 8 * v28);
                v31 = *(_QWORD *)(v30 + 80) - *(_QWORD *)(v30 + 72);
                if (v31)
                {
                  v32 = 0;
                  v33 = v31 >> 3;
                  if (v33 <= 1)
                    v34 = 1;
                  else
                    v34 = v33;
                  do
                  {
                    v35 = *(_QWORD *)(*(_QWORD *)(v30 + 72) + 8 * v32);
                    v36 = (void **)operator new();
                    XMP_Node::XMP_Node((uint64_t)v36, (uint64_t)v25, (__int128 *)(v35 + 16), (__int128 *)(v35 + 40), *(_DWORD *)(v35 + 8));
                    v38 = (void ***)v25[10];
                    v37 = v25[11];
                    if ((unint64_t)v38 >= v37)
                    {
                      v40 = ((char *)v38 - *v26) >> 3;
                      if ((unint64_t)(v40 + 1) >> 61)
                        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
                      v41 = v37 - (_QWORD)*v26;
                      v42 = v41 >> 2;
                      if (v41 >> 2 <= (unint64_t)(v40 + 1))
                        v42 = v40 + 1;
                      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
                        v43 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v43 = v42;
                      if (v43)
                        v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(v25 + 11), v43);
                      else
                        v44 = 0;
                      v45 = (void ***)&v44[8 * v40];
                      *v45 = v36;
                      v39 = v45 + 1;
                      v47 = (char *)v25[9];
                      v46 = (char *)v25[10];
                      if (v46 != v47)
                      {
                        do
                        {
                          v48 = (void **)*((_QWORD *)v46 - 1);
                          v46 -= 8;
                          *--v45 = v48;
                        }
                        while (v46 != v47);
                        v46 = *v26;
                      }
                      v25[9] = v45;
                      v25[10] = v39;
                      v25[11] = &v44[8 * v43];
                      if (v46)
                        operator delete(v46);
                    }
                    else
                    {
                      *v38 = v36;
                      v39 = v38 + 1;
                    }
                    v25[10] = v39;
                    CloneOffspring((const XMP_Node *)v35, v36, 0);
                    ++v32;
                  }
                  while (v32 != v34);
                }
                ++v28;
                v13 = v84;
              }
              while (v28 != v83);
            }
            goto LABEL_104;
          }
          if (v17)
          {
            ExpandXPath((char *)__s1, a4, (uint64_t *)v90);
            ExpandXPath(v9, v8, (uint64_t *)v89);
            v20 = FindNode((char **)v13 + 28, v90, 0, 0, 0);
            if (v20)
            {
              if (FindNode(a2 + 28, v89, 0, 0, 0))
              {
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                v80 = "Destination subtree must not exist";
              }
              else
              {
                v21 = FindNode(a2 + 28, v89, 1, 0, 0);
                v22 = v21;
                if (v21)
                {
                  if (v13 == (XMPUtils *)a2)
                  {
                    v23 = v21;
                    do
                    {
                      if (v23 == v20)
                      {
                        v76 = __cxa_allocate_exception(0x18uLL);
                        *(_DWORD *)v76 = 102;
                        v76[1] = "Destination subtree is within the source subtree";
                        *((_BYTE *)v76 + 16) = 0;
                      }
                      v23 = *(_QWORD *)(v23 + 64);
                    }
                    while (v23);
                  }
                  std::string::operator=((std::string *)(v21 + 40), (const std::string *)(v20 + 40));
                  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v20 + 8);
                  CloneOffspring((const XMP_Node *)v20, (void **)v22, 0);
LABEL_104:
                  v88[0] = (const void **)v89;
                  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v88);
                  v89[0] = (const void **)v90;
                  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
                  return;
                }
                exception = __cxa_allocate_exception(0x18uLL);
                *(_DWORD *)exception = 102;
                v80 = "Can't create destination root node";
              }
            }
            else
            {
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 102;
              v80 = "Can't find source subtree";
            }
LABEL_122:
            exception[1] = v80;
            *((_BYTE *)exception + 16) = 0;
          }
          memset(v88, 0, sizeof(v88));
          ExpandXPath((char *)__s1, a4, (uint64_t *)v88);
          v49 = FindNode((char **)v13 + 28, v88, 0, 0, 0);
          v50 = v49;
          if (v49 && (*(_BYTE *)(v49 + 9) & 1) != 0)
          {
            v51 = a2 + 28;
            if (a2[37] == a2[38])
            {
LABEL_71:
              __p[0] = 0;
              __p[1] = 0;
              v87 = 0;
              memset(__s, 0, sizeof(__s));
              v52 = *(_QWORD *)(v50 + 80) - *(_QWORD *)(v50 + 72);
              if (v52)
              {
                v53 = 0;
                v54 = v52 >> 3;
                if (v54 <= 1)
                  v55 = 1;
                else
                  v55 = v54;
                do
                {
                  v56 = *(_QWORD *)(*(_QWORD *)(v50 + 72) + 8 * v53);
                  v57 = std::string::find((const std::string *)(v56 + 16), 58, 0);
                  if (v57 != -1)
                  {
                    v58 = v56 + 16;
                    if (*(char *)(v56 + 39) < 0)
                      v58 = *(_QWORD *)(v56 + 16);
                    MEMORY[0x18D761A20](__p, v58, v57);
                    if (v87 >= 0)
                      v60 = __p;
                    else
                      v60 = (void **)__p[0];
                    if (!XMPMeta::GetNamespaceURI((XMPMeta *)v60, (const char **)&__s[4], (const char **)__s, v59))
                    {
                      v77 = __cxa_allocate_exception(0x18uLL);
                      *(_DWORD *)v77 = 101;
                      v77[1] = "Source field namespace is not global";
                      *((_BYTE *)v77 + 16) = 0;
                    }
                    SchemaNode = (_QWORD *)FindSchemaNode(v51, *(char **)&__s[4], 1, 0, 0, 0);
                    if (!SchemaNode)
                    {
                      v78 = __cxa_allocate_exception(0x18uLL);
                      *(_DWORD *)v78 = 101;
                      v78[1] = "Failed to find destination schema";
                      *((_BYTE *)v78 + 16) = 0;
                    }
                    v62 = (void **)operator new();
                    XMP_Node::XMP_Node((uint64_t)v62, (uint64_t)SchemaNode, (__int128 *)(v56 + 16), (__int128 *)(v56 + 40), *(_DWORD *)(v56 + 8));
                    v63 = SchemaNode[11];
                    v64 = (void ***)SchemaNode[10];
                    if ((unint64_t)v64 >= v63)
                    {
                      v66 = SchemaNode[9];
                      v67 = ((uint64_t)v64 - v66) >> 3;
                      if ((unint64_t)(v67 + 1) >> 61)
                        std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
                      v68 = v63 - v66;
                      v69 = v68 >> 2;
                      if (v68 >> 2 <= (unint64_t)(v67 + 1))
                        v69 = v67 + 1;
                      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
                        v70 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v70 = v69;
                      if (v70)
                        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(SchemaNode + 11), v70);
                      else
                        v71 = 0;
                      v72 = (void ***)&v71[8 * v67];
                      *v72 = v62;
                      v65 = v72 + 1;
                      v74 = (char *)SchemaNode[9];
                      v73 = (char *)SchemaNode[10];
                      if (v73 != v74)
                      {
                        do
                        {
                          v75 = (void **)*((_QWORD *)v73 - 1);
                          v73 -= 8;
                          *--v72 = v75;
                        }
                        while (v73 != v74);
                        v73 = (char *)SchemaNode[9];
                      }
                      SchemaNode[9] = v72;
                      SchemaNode[10] = v65;
                      SchemaNode[11] = &v71[8 * v70];
                      if (v73)
                        operator delete(v73);
                    }
                    else
                    {
                      *v64 = v62;
                      v65 = v64 + 1;
                    }
                    SchemaNode[10] = v65;
                    CloneOffspring((const XMP_Node *)v56, v62, 0);
                  }
                  ++v53;
                }
                while (v53 != v55);
                if (SHIBYTE(v87) < 0)
                  operator delete(__p[0]);
              }
              __p[0] = v88;
              std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_104;
            }
            if ((a7 & 0x20000000) != 0)
            {
              XMP_Node::RemoveChildren(a2 + 28);
              goto LABEL_71;
            }
            v81 = "Destination tree must be empty";
          }
          else
          {
            v81 = "Source must be an existing struct";
          }
          v82 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v82 = 102;
          v82[1] = v81;
          *((_BYTE *)v82 + 16) = 0;
        }
      }
      else
      {
        v14 = "(sourceRoot != 0) && (*sourceRoot != 0)";
        v15 = 1799;
      }
    }
    else
    {
      v14 = "(sourceNS != 0) && (*sourceNS != 0)";
      v15 = 1798;
    }
    __assert_rtn("DuplicateSubtree", "XMPUtils-FileInfo.cpp", v15, v14);
  }
  XMPUtils::DuplicateSubtree_v2(v13, (const XMPMeta *)a2, __s1, a4, v9, v8, a7);
}

void sub_1880DAAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char ***__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char **a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,char a25)
{
  __p = &a19;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a19 = &a22;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a22 = &a25;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t CodePointToUTF8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  if (a1 >= 0x80)
  {
    v4 = 0;
    do
    {
      v5 = a1;
      *((_BYTE *)v10 + v4 + 7) = a1 & 0x3F | 0x80;
      a1 >>= 6;
      --v4;
    }
    while (v5 > 0x3F);
    if ((unint64_t)(v4 + 1) <= 0xFFFFFFFFFFFFFFFALL)
      CodePointToUTF8();
    if ((v5 & 0x3F) != 0)
    {
      v6 = 0;
      do
      {
        ++v6;
        v7 = v5 > 1;
        v5 >>= 1;
      }
      while (v7);
    }
    else
    {
      v6 = 0;
    }
    if (v6 <= v4 + 7)
      v8 = 8;
    else
      v8 = 9;
    v3 = v4 - v8 + 16;
    if (v3 >= 7)
      CodePointToUTF8();
    v2 = v8 - v4 - 8;
    *((_BYTE *)&v10[2] + v4 - v8) |= 255 << (v4 - v8 + 16);
  }
  else
  {
    HIBYTE(v10[0]) = a1;
    v2 = 1;
    v3 = 7;
  }
  return MEMORY[0x18D761A20](a2, (char *)v10 + v3, v2);
}

uint64_t ItemValuesMatch(const XMP_Node *a1, const XMP_Node *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const XMP_Node *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void **v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;

  v4 = *((_DWORD *)a1 + 2);
  if ((v4 & 0x1F00) != 0x100)
  {
    if ((v4 & 0x1F00) == 0)
    {
      v5 = *((unsigned __int8 *)a1 + 63);
      if ((v5 & 0x80u) == 0)
        v6 = *((unsigned __int8 *)a1 + 63);
      else
        v6 = *((_QWORD *)a1 + 6);
      v7 = *((unsigned __int8 *)a2 + 63);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *((_QWORD *)a2 + 6);
      if (v6 != v7)
        return 0;
      v9 = (const void **)((char *)a1 + 40);
      if (v8 >= 0)
        v10 = (unsigned __int8 *)a2 + 40;
      else
        v10 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
      if ((v5 & 0x80) != 0)
      {
        if (memcmp(*v9, v10, *((_QWORD *)a1 + 6)))
          return 0;
      }
      else if (*((_BYTE *)a1 + 63))
      {
        while (*(unsigned __int8 *)v9 == *v10)
        {
          v9 = (const void **)((char *)v9 + 1);
          ++v10;
          if (!--v5)
            goto LABEL_37;
        }
        return 0;
      }
LABEL_37:
      if ((v4 & 0x40) == (*((_DWORD *)a2 + 2) & 0x40))
      {
        if ((v4 & 0x40) == 0)
          return 1;
        v25 = **((_QWORD **)a1 + 12);
        v26 = **((_QWORD **)a2 + 12);
        v27 = *(unsigned __int8 *)(v25 + 63);
        v28 = *(_QWORD *)(v25 + 48);
        if ((v27 & 0x80u) == 0)
          v29 = *(unsigned __int8 *)(v25 + 63);
        else
          v29 = *(_QWORD *)(v25 + 48);
        v30 = *(unsigned __int8 *)(v26 + 63);
        v31 = (char)v30;
        if ((v30 & 0x80u) != 0)
          v30 = *(_QWORD *)(v26 + 48);
        if (v29 == v30)
        {
          v32 = (const void **)(v25 + 40);
          v35 = *(unsigned __int8 **)(v26 + 40);
          v33 = (unsigned __int8 *)(v26 + 40);
          v34 = v35;
          if (v31 >= 0)
            v36 = v33;
          else
            v36 = v34;
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*v32, v36, v28))
              return 1;
          }
          else
          {
            if (!(_DWORD)v27)
              return 1;
            while (*(unsigned __int8 *)v32 == *v36)
            {
              v32 = (const void **)((char *)v32 + 1);
              ++v36;
              if (!--v27)
                return 1;
            }
          }
        }
      }
      return 0;
    }
    if ((v4 & 0x200) == 0)
      ItemValuesMatch();
    v18 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
    if (v18)
    {
      v19 = 0;
      v20 = v18 >> 3;
      while (1)
      {
        v21 = *((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9);
        if (!v21)
          break;
        v22 = 0;
        v23 = *(const XMP_Node **)(*((_QWORD *)a1 + 9) + 8 * v19);
        v24 = v21 >> 3;
        while (!ItemValuesMatch(v23, *(const XMP_Node **)(*((_QWORD *)a2 + 9) + 8 * v22)))
        {
          if (v24 == ++v22)
            return 0;
        }
        if (++v19 == v20)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  v12 = *((_QWORD *)a1 + 9);
  v11 = *((_QWORD *)a1 + 10);
  v13 = (v11 - v12) >> 3;
  if (v13 != (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3)
    return 0;
  if (v11 == v12)
    return 1;
  v14 = 0;
  while (1)
  {
    v15 = *(char **)(*((_QWORD *)a1 + 9) + 8 * v14);
    v16 = v15 + 16;
    if (v15[39] < 0)
      v16 = *(char **)v16;
    result = FindChildNode((uint64_t)a2, v16, 0, 0);
    if (!result)
      break;
    if ((ItemValuesMatch((const XMP_Node *)v15, (const XMP_Node *)result) & 1) == 0)
      return 0;
    if (v13 == ++v14)
      return 1;
  }
  return result;
}

_QWORD *std::vector<XMP_Node *>::__init_with_size[abi:ne180100]<XMP_Node **,XMP_Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1880DAF60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void XMPUtils::CatenateArrayItems_v2()
{
  __assert_rtn("CatenateArrayItems_v2", "XMPUtils-FileInfo.cpp", 900, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("CatenateArrayItems_v2", "XMPUtils-FileInfo.cpp", 901, "(separator != 0) && (quotes != 0) && (catedStr != 0)");
}

void ClassifyCharacter()
{
  __assert_rtn("ClassifyCharacter", "XMPUtils-FileInfo.cpp", 136, "(offset + *charSize) <= strlen(fullString)");
}

void XMPUtils::CatenateArrayItems()
{
  __assert_rtn("CatenateArrayItems", "XMPUtils-FileInfo.cpp", 1018, "(schemaNS != 0) && (arrayName != 0)");
}

{
  __assert_rtn("CatenateArrayItems", "XMPUtils-FileInfo.cpp", 1019, "(separator != 0) && (quotes != 0) && (catedStr != 0)");
}

void XMPUtils::SeparateArrayItems_v2()
{
  __assert_rtn("SeparateArrayItems_v2", "XMPUtils-FileInfo.cpp", 1124, "(schemaNS != 0) && (arrayName != 0) && (catedStr != 0)");
}

void XMPUtils::SeparateArrayItems()
{
  __assert_rtn("SeparateArrayItems", "XMPUtils-FileInfo.cpp", 1378, "(schemaNS != 0) && (arrayName != 0) && (catedStr != 0)");
}

void AppendSubtree()
{
  __assert_rtn("AppendSubtree", "XMPUtils-FileInfo.cpp", 741, "(destNode == 0) || (! destNode->value.empty()) || (! destNode->children.empty())");
}

{
  __assert_rtn("AppendSubtree", "XMPUtils-FileInfo.cpp", 800, "mergeCompound");
}

void XMPUtils::RemoveProperties()
{
  __assert_rtn("RemoveProperties", "XMPUtils-FileInfo.cpp", 1677, "(schemaNS != 0) && (propName != 0)");
}

void RemoveSchemaChildren()
{
  __assert_rtn("RemoveSchemaChildren", "XMPUtils-FileInfo.cpp", 622, "(((schemaNode->options) & ((XMP_OptionBits)0x80000000UL)) != 0)");
}

void CodePointToUTF8()
{
  __assert_rtn("CodePointToUTF8", "XMPUtils-FileInfo.cpp", 350, "(2 <= byteCount) && (byteCount <= 6)");
}

{
  __assert_rtn("CodePointToUTF8", "XMPUtils-FileInfo.cpp", 360, "(0 <= i) && (i <= 6)");
}

uint64_t PhotoDataUtils::GetNativeInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
  {
    v7 = *(char **)(a4 + 8);
    v8 = *(_DWORD *)(a4 + 16);
    if (v7)
    {
      if (v8)
      {
        v9 = 0;
        while (a3 == 36867 || a3 == 306)
        {
          v10 = v7[v9];
          if (v10 != 58)
            goto LABEL_10;
LABEL_11:
          if (v8 == (_DWORD)++v9)
            return 0;
        }
        v10 = v7[v9];
LABEL_10:
        if ((v10 | 0x20) != 0x20)
          goto LABEL_16;
        goto LABEL_11;
      }
      LODWORD(v9) = 0;
LABEL_16:
      if ((_DWORD)v9 != v8)
      {
        v11 = TrimTrailingSpaces(v7, v8);
        *(_DWORD *)(a4 + 16) = v11;
        return v11 != 0;
      }
    }
    else if (v8)
    {
      PhotoDataUtils::GetNativeInfo();
    }
    return 0;
  }
  return result;
}

unint64_t PhotoDataUtils::GetNativeInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v11;
  BOOL v12;
  __n128 v14;

  IPTC_Manager::GetDataSet(a1, a2, a5, 0);
  v8 = v7;
  if (ignoreLocalText)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9 && *(_BYTE *)(a1 + 46) == 0)
  {
    v11 = 0;
    v14 = 0uLL;
    while (1)
    {
      IPTC_Manager::GetDataSet(a1, a2, &v14, v11);
      v12 = !v14.n128_u32[1] || v14.n128_u64[1] == 0;
      if (v12 || ReconcileUtils::IsASCII((ReconcileUtils *)v14.n128_u64[1], (char *)v14.n128_u32[1]))
        break;
      if (v8 == ++v11)
      {
        v11 = v8;
        break;
      }
    }
    if (v11 == v8)
      return 0;
  }
  return v8;
}

uint64_t PhotoDataUtils::IsValueDifferent(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  uint64_t v4;
  uint64_t v7;
  std::string::size_type size;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;

  v4 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v4)
    return 0;
  if (ReconcileUtils::IsUTF8(*(ReconcileUtils **)(a1 + 8), v4))
  {
    MEMORY[0x18D761A20](a3, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16));
  }
  else
  {
    if (ignoreLocalText)
      return 0;
    ReconcileUtils::LocalToUTF8(*(const UInt8 **)(a1 + 8), *(unsigned int *)(a1 + 16), a3);
  }
  v7 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) == 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  v9 = a2[23];
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *((_QWORD *)a2 + 1);
  if (size != v9)
    return 1;
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(unsigned __int8 **)a2;
  if ((v7 & 0x80) != 0)
    return memcmp(a3->__r_.__value_.__l.__data_, v11, a3->__r_.__value_.__l.__size_) != 0;
  if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
    return 0;
  v12 = v7 - 1;
  do
  {
    v14 = a3->__r_.__value_.__s.__data_[0];
    a3 = (std::string *)((char *)a3 + 1);
    v13 = v14;
    v15 = *v11++;
    result = v13 != v15;
  }
  while (v13 == v15 && v12-- != 0);
  return result;
}

BOOL PhotoDataUtils::IsValueDifferent(PhotoDataUtils *this, const IPTC_Manager *a2, const IPTC_Manager *a3)
{
  int v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  unint64_t v10;
  BOOL v11;
  char v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string *p_p;
  std::string *p_s1;
  uint64_t v17;
  BOOL v18;
  std::string __s1;
  std::string __p;
  __n128 v22;
  __n128 v23;

  v3 = (int)a3;
  v23 = 0uLL;
  IPTC_Manager::GetDataSet((uint64_t)this, (int)a3, &v23, 0);
  if (!v6)
    return 0;
  v7 = v6;
  v22 = 0uLL;
  IPTC_Manager::GetDataSet((uint64_t)a2, v3, &v22, 0);
  v9 = 1;
  if (v8 && v7 == v8)
  {
    v10 = 0;
    memset(&__p, 0, sizeof(__p));
    memset(&__s1, 0, sizeof(__s1));
    while (1)
    {
      if (ignoreLocalText)
        v11 = *((_BYTE *)this + 46) == 0;
      else
        v11 = 0;
      if (!v11
        || ((IPTC_Manager::GetDataSet((uint64_t)this, v3, &v23, v10), v23.n128_u32[1])
          ? (v18 = v23.n128_u64[1] == 0)
          : (v18 = 1),
            !v18 && ReconcileUtils::IsASCII((ReconcileUtils *)v23.n128_u64[1], (char *)v23.n128_u32[1])))
      {
        IPTC_Manager::GetDataSet_UTF8((uint64_t)this, v3, &__s1, v10);
        IPTC_Manager::GetDataSet_UTF8((uint64_t)a2, v3, &__p, v10);
        v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v13 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__s1.__r_.__value_.__r.__words[2])
            : __s1.__r_.__value_.__l.__size_;
        if (v13)
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (v13 != size)
            goto LABEL_34;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_))
            {
              v9 = v10 != v7;
              goto LABEL_35;
            }
          }
          else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              p_p = (std::string *)((char *)p_p + 1);
              if (!--v17)
                goto LABEL_32;
            }
LABEL_34:
            v9 = v10 != v7;
            if ((v12 & 0x80) == 0)
              goto LABEL_36;
LABEL_35:
            operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_36:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            return v9;
          }
        }
      }
LABEL_32:
      if (++v10 == v7)
      {
        v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v10 = v7;
        goto LABEL_34;
      }
    }
  }
  return v9;
}

void sub_1880DB86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::Import2WayExif (uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v11;
  int v12;
  int v14;
  int i;
  char *v16;
  std::string::size_type v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL DoesPropertyExist;
  int v29;
  BOOL v30;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  const char *v55;
  const char *v56;
  const char *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  _BYTE *v73;
  char *v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned __int16 *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  _BYTE *v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  double v112;
  unsigned int v113;
  double v114;
  double v115;
  unsigned int v116;
  double v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  void *__src;
  size_t __len;
  unsigned int v135;
  char v136[8];
  uint64_t v137;
  int v138;
  _BYTE __dst[35];
  char v140;
  int v141;
  char __str[8];
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 73);
  v132 = 0;
  __src = 0;
  __len = 0;
  v131 = 0;
  ImportTIFF_StandardMappings(0, (unsigned __int8 *)a1, a2);
  ImportTIFF_StandardMappings(2u, (unsigned __int8 *)a1, a2);
  ImportTIFF_StandardMappings(3u, (unsigned __int8 *)a1, a2);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 42032, &v132);
  if (WORD1(v132) == 2)
    v6 = v5;
  else
    v6 = 0;
  if (v6 == 1 && HIDWORD(v132) != 0)
    ImportSingleTIFF((uint64_t)&v132, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "OwnerName");
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 42033, &v132);
  if (WORD1(v132) == 2)
    v9 = v8;
  else
    v9 = 0;
  if (v9 == 1 && HIDWORD(v132) != 0)
    ImportSingleTIFF((uint64_t)&v132, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "SerialNumber");
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 42036, &v132);
  if (WORD1(v132) == 2)
    v12 = v11;
  else
    v12 = 0;
  if (v12 == 1 && HIDWORD(v132) != 0)
    ImportSingleTIFF((uint64_t)&v132, v4 != 0, a2, "http://ns.adobe.com/exif/1.0/aux/", "Lens");
  if (TXMPMeta<std::string>::GetProperty(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", 0, (uint64_t *)&v131)
    && (v131 & 0x200) != 0)
  {
    memset(__dst, 0, 24);
    *(_QWORD *)__str = 0;
    v143 = 0;
    v144 = 0;
    v14 = TXMPMeta<std::string>::CountArrayItems(a2, "http://cipa.jp/exif/1.0/", "LensSpecification");
    if (v14)
    {
      TXMPMeta<std::string>::GetArrayItem(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", 1, (uint64_t)__dst, 0);
      if (v14 >= 2)
      {
        for (i = 1; i != v14; ++i)
        {
          std::string::push_back((std::string *)__dst, 32);
          TXMPMeta<std::string>::GetArrayItem(a2, "http://cipa.jp/exif/1.0/", "LensSpecification", (i + 1), (uint64_t)__str, 0);
          if (v144 >= 0)
            v16 = __str;
          else
            v16 = *(char **)__str;
          if (v144 >= 0)
            v17 = HIBYTE(v144);
          else
            v17 = (std::string::size_type)v143;
          std::string::append((std::string *)__dst, v16, v17);
        }
      }
    }
    if (__dst[23] >= 0)
      v18 = __dst;
    else
      v18 = *(_BYTE **)__dst;
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/aux/", "LensInfo", (uint64_t)v18, 0x20000000);
    if (SHIBYTE(v144) < 0)
      operator delete(*(void **)__str);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 6, &v132);
  if (WORD1(v132) == 5)
    v20 = v19;
  else
    v20 = 0;
  if (v20 == 1 && HIDWORD(v132) == 1)
  {
    v21 = (*(uint64_t (**)(void *))(a1 + 16))(__src);
    v22 = (*(uint64_t (**)(char *))(a1 + 16))((char *)__src + 4);
    if (v22 >= 0)
      v23 = v21;
    else
      v23 = -v21;
    if (v22 >= 0)
      v24 = v22;
    else
      v24 = -v22;
    if (v23 < 0)
    {
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSAltitudeRef", (uint64_t)"1", 0);
      v25 = -v23;
      goto LABEL_59;
    }
    if (v22 < 0)
    {
      v25 = -v21;
LABEL_59:
      memset(__dst, 0, 32);
      snprintf(__dst, 0x20uLL, "%lu/%lu", v25, v24);
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSAltitude", (uint64_t)__dst, 0);
    }
  }
  v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 36867, &v132);
  DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal");
  if (v26)
  {
    if (WORD1(v132) == 2 && !DoesPropertyExist)
      ImportTIFF_Date(a1, (unsigned __int16 *)&v132, a2, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal");
  }
  v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 0, 306, &v132);
  v30 = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/", "ModifyDate");
  if (v29)
  {
    if (WORD1(v132) == 2 && !v30)
      ImportTIFF_Date(a1, (unsigned __int16 *)&v132, a2, "http://ns.adobe.com/xap/1.0/", "ModifyDate");
  }
  memset(__dst, 0, 24);
  *(_DWORD *)__str = 0;
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, 2, 36864, __dst);
  if (*(unsigned __int16 *)&__dst[2] == 7)
    v33 = v32;
  else
    v33 = 0;
  v34 = 1;
  if (v33 == 1 && *(_DWORD *)&__dst[4] == 4)
    v34 = strncmp(*(const char **)&__dst[8], "0230", 4uLL) >> 31;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 56))(a1, 2, 34855, __str);
  v36 = v35;
  if (*(_DWORD *)__str < 0xFFFFu)
    v37 = v35;
  else
    v37 = 0;
  if (v34)
  {
    if (v35
      && (*(_DWORD *)__str < 0xFFFFu
       || !TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings")))
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
      TXMPMeta<std::string>::SetProperty_Int(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", *(unsigned int *)__str, 0);
    }
    goto LABEL_108;
  }
  v135 = 0;
  *(_DWORD *)v136 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 56))(a1, 2, 34864, v136))
  {
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://cipa.jp/exif/1.0/", "SensitivityType", *(unsigned int *)v136, 0);
    v38 = 0;
    v39 = 1;
    if (*(_DWORD *)v136 <= 7u)
    {
      if (((1 << v136[0]) & 0xE8) != 0)
      {
        v39 = 0;
        v38 = 34867;
      }
      else if (((1 << v136[0]) & 0x12) != 0)
      {
        v39 = 0;
        v38 = 34865;
      }
      else if (*(_DWORD *)v136 == 2)
      {
        v39 = 0;
        v38 = 34866;
      }
    }
  }
  else
  {
    v38 = 0;
    v39 = 1;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, 2, 34865, &v135))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "StandardOutputSensitivity", v135, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, 2, 34866, &v135))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "RecommendedExposureIndex", v135, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, 2, 34867, &v135))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeed", v135, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, 2, 34868, &v135))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudeyyy", v135, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 56))(a1, 2, 34869, &v135))
  {
    TXMPMeta<std::string>::SetProperty_Int64(a2, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudezzz", v135, 0);
  }
  if (v37)
  {
    TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", *(unsigned int *)__str, 0);
    v40 = "PhotographicSensitivity";
    v41 = "http://cipa.jp/exif/1.0/";
    v42 = *(unsigned int *)__str;
LABEL_103:
    TXMPMeta<std::string>::SetProperty_Int(a2, v41, v40, v42, 0);
    goto LABEL_108;
  }
  if (v36)
  {
    if (*(_DWORD *)__str != 0xFFFF)
      __assert_rtn("ImportTIFF_PhotographicSensitivity", "ReconcileTIFF.cpp", 2002, "valueTag34855 == 65535");
    TXMPMeta<std::string>::SetProperty_Int(a2, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", 0xFFFFLL, 0);
  }
  if ((v39 & 1) == 0)
  {
    v88 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, 2, v38, __dst);
    v89 = *(unsigned __int16 *)&__dst[2] == 4 ? v88 : 0;
    if (v89 == 1 && *(_DWORD *)&__dst[4] == 1)
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1024, (uint64_t)"", 0);
      v42 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)&__dst[8]);
      v40 = "ISOSpeedRatings[1]";
      v41 = "http://ns.adobe.com/exif/1.0/";
      goto LABEL_103;
    }
  }
LABEL_108:
  v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 0, 315, &v132);
  if (((v43 | TXMPMeta<std::string>::DoesPropertyExist(a2, "http://purl.org/dc/elements/1.1/", "creator")) & 1) == 0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 42032, &v132))
  {
    memset(__dst, 0, 24);
    std::string::basic_string[abi:ne180100](__dst, __src, __len);
    v44 = __dst[23] >= 0 ? __dst : *(_BYTE **)__dst;
    TXMPMeta<std::string>::AppendArrayItem(a2, "http://purl.org/dc/elements/1.1/", "creator", 1024, (uint64_t)v44, 0);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 36864, &v132);
  if (WORD1(v132) == 7)
    v46 = v45;
  else
    v46 = 0;
  if (v46 == 1 && HIDWORD(v132) == 4)
  {
    __dst[4] = 0;
    *(_DWORD *)__dst = 0;
    *(_DWORD *)__dst = *(_DWORD *)__src;
    __dst[4] = 0;
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "ExifVersion", (uint64_t)__dst, 0);
  }
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 40960, &v132);
  if (WORD1(v132) == 7)
    v48 = v47;
  else
    v48 = 0;
  if (v48 == 1 && HIDWORD(v132) == 4)
  {
    __dst[4] = 0;
    *(_DWORD *)__dst = 0;
    *(_DWORD *)__dst = *(_DWORD *)__src;
    __dst[4] = 0;
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "FlashpixVersion", (uint64_t)__dst, 0);
  }
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 37121, &v132);
  if (WORD1(v132) == 7)
    v50 = v49;
  else
    v50 = 0;
  if (v50 == 1 && HIDWORD(v132) == 4)
    ImportArrayTIFF_Byte((uint64_t)&v132, a2, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration");
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 37510, &v132))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v132, a2, "UserComment", 1);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 34856, &v132))
  {
    ImportConversionTable((unsigned __int16 *)&v132, v4 != 0, a2, "OECF");
  }
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 37385, &v132);
  if (WORD1(v132) == 3)
    v52 = v51;
  else
    v52 = 0;
  if (v52 == 1 && HIDWORD(v132) == 1)
  {
    v53 = bswap32(*(unsigned __int16 *)__src) >> 16;
    if (v4)
      v54 = *(unsigned __int16 *)__src;
    else
      v54 = v53;
    if ((v54 & 1) != 0)
      v55 = "True";
    else
      v55 = "False";
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Fired", v55, 0);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Return", ImportTIFF_Flash(TIFF_Manager::TagInfo const&,BOOL,TXMPMeta<std::string> *,char const*,char const*)::sTwoBits[((unsigned __int16)v54 >> 1) & 3], 0);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Mode", ImportTIFF_Flash(TIFF_Manager::TagInfo const&,BOOL,TXMPMeta<std::string> *,char const*,char const*)::sTwoBits[(v54 >> 3) & 3], 0);
    if ((v54 & 0x20) != 0)
      v56 = "True";
    else
      v56 = "False";
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "Function", v56, 0);
    if ((v54 & 0x40) != 0)
      v57 = "True";
    else
      v57 = "False";
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "Flash", "http://ns.adobe.com/exif/1.0/", "RedEyeMode", v57, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 41484, &v132))
  {
    ImportConversionTable((unsigned __int16 *)&v132, v4 != 0, a2, "SpatialFrequencyResponse");
  }
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 41728, &v132);
  if (WORD1(v132) == 7)
    v59 = v58;
  else
    v59 = 0;
  if (v59 == 1 && HIDWORD(v132) == 1)
    ImportSingleTIFF_Byte((uint64_t)&v132, a2, "http://ns.adobe.com/exif/1.0/", "FileSource");
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 41729, &v132);
  if (WORD1(v132) == 7)
    v61 = v60;
  else
    v61 = 0;
  if (v61 == 1 && HIDWORD(v132) == 1)
    ImportSingleTIFF_Byte((uint64_t)&v132, a2, "http://ns.adobe.com/exif/1.0/", "SceneType");
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 41730, &v132))
  {
    v62 = (char *)__src;
    v63 = __len;
    v64 = *((unsigned __int16 *)__src + 1);
    v65 = bswap32(*(unsigned __int16 *)__src) >> 16;
    if (v4)
      v66 = *(_WORD *)__src;
    else
      v66 = v65;
    *(_QWORD *)__str = 0;
    v143 = 0;
    LODWORD(v144) = 0;
    memset(__dst, 0, 24);
    snprintf(__str, 0x14uLL, "%d", v66);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Columns", __str, 0);
    v67 = __rev16(v64);
    if (v4)
      v68 = v64;
    else
      v68 = v67;
    snprintf(__str, 0x14uLL, "%d", v68);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Rows", __str, 0);
    v69 = v66;
    v70 = v63 - 4;
    v71 = v68 * v69;
    if (v70 == v71)
    {
      TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", "CFAPattern", "http://ns.adobe.com/exif/1.0/", "Values", (uint64_t)__dst);
      if ((_DWORD)v71)
      {
        v72 = (unsigned __int8 *)(v62 + 4);
        do
        {
          snprintf(__str, 0x14uLL, "%hu", *v72);
          if (__dst[23] >= 0)
            v73 = __dst;
          else
            v73 = *(_BYTE **)__dst;
          TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", v73, 1024, (uint64_t)__str, 0);
          ++v72;
          --v70;
        }
        while (v70);
      }
    }
    else
    {
      TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "CFAPattern");
    }
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 41995, &v132))
  {
    v74 = (char *)__src;
    v75 = __len;
    v76 = *(unsigned __int16 *)__src;
    v77 = *((unsigned __int16 *)__src + 1);
    v78 = *(unsigned __int8 *)(a1 + 73);
    v79 = bswap32(v76) >> 16;
    if (!*(_BYTE *)(a1 + 73))
      LOWORD(v76) = v79;
    *(_QWORD *)v136 = 0;
    v137 = 0;
    v138 = 0;
    snprintf(v136, 0x14uLL, "%d", (unsigned __int16)v76);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Columns", v136, 0);
    v80 = __rev16(v77);
    if (v78)
      v80 = v77;
    snprintf(v136, 0x14uLL, "%d", v80);
    TXMPMeta<std::string>::SetStructField(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Rows", v136, 0);
    memset(__dst, 0, 24);
    TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription", "http://ns.adobe.com/exif/1.0/", "Settings", (uint64_t)__dst);
    v81 = (unsigned __int16 *)&v74[v75];
    v82 = (unint64_t)(v74 + 4);
    *(_QWORD *)__str = 0;
    v143 = 0;
    v144 = 0;
    while (v82 < (unint64_t)v81)
    {
      v83 = 0;
      v84 = (unsigned __int16 *)v82;
      do
      {
        v85 = *v84++;
        ++v83;
      }
      while (v85);
      if (v84 > v81)
      {
        TXMPMeta<std::string>::DeleteProperty(a2, "http://ns.adobe.com/exif/1.0/", "DeviceSettingDescription");
        break;
      }
      FromUTF16(v82, v83);
      if (__dst[23] >= 0)
        v86 = __dst;
      else
        v86 = *(_BYTE **)__dst;
      if (v144 >= 0)
        v87 = __str;
      else
        v87 = *(char **)__str;
      TXMPMeta<std::string>::AppendArrayItem(a2, "http://ns.adobe.com/exif/1.0/", v86, 1024, (uint64_t)v87, 0);
      v82 = (unint64_t)v84;
    }
    if (SHIBYTE(v144) < 0)
      operator delete(*(void **)__str);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v90 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 0, &v132);
  if (WORD1(v132) == 1)
    v91 = v90;
  else
    v91 = 0;
  if (v91 == 1 && HIDWORD(v132) == 4)
  {
    memset(__dst, 0, 20);
    snprintf(__dst, 0x14uLL, "%u.%u.%u.%u", *(unsigned __int8 *)__src, *((unsigned __int8 *)__src + 1), *((unsigned __int8 *)__src + 2), *((unsigned __int8 *)__src + 3));
    TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/exif/1.0/", "GPSVersionID", (uint64_t)__dst, 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 2, &v132))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v132, a2, "GPSLatitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 4, &v132))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v132, a2, "GPSLongitude");
  }
  v93 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 7, &v132);
  if (WORD1(v132) == 5)
    v94 = v93;
  else
    v94 = 0;
  if (v94 == 1 && HIDWORD(v132) == 3)
  {
    v95 = *(unsigned __int8 *)(a1 + 73);
    *(_QWORD *)__str = 0;
    v143 = 0;
    v144 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, 3, 29, __str) & 1) != 0
      || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, 2, 36867, __str) & 1) != 0
      || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a1 + 24))(a1, 2, 36868, __str))
    {
      v96 = v143[4];
      if (v96 == 58 || v96 == 45)
      {
        v97 = v143[7];
        if ((v97 == 58 || v97 == 45) && (v143[10] | 0x20) == 0x20)
        {
          v98 = 0;
          v99 = 0;
          v100 = *(_DWORD *)__src;
          v101 = *((_DWORD *)__src + 1);
          v102 = *((_DWORD *)__src + 2);
          v103 = *((_DWORD *)__src + 3);
          v104 = *((_DWORD *)__src + 4);
          v105 = bswap32(*(_DWORD *)__src);
          v106 = bswap32(v101);
          v107 = bswap32(v102);
          v108 = bswap32(v103);
          if (!v95)
            v100 = v105;
          v109 = bswap32(v104);
          if (!v95)
            v101 = v106;
          v110 = bswap32(*((_DWORD *)__src + 5));
          if (v95)
          {
            v111 = *((_DWORD *)__src + 5);
          }
          else
          {
            v102 = v107;
            v103 = v108;
            v104 = v109;
            v111 = v110;
          }
          v112 = (double)v100 / (double)v101;
          v113 = v112;
          v114 = (double)v102 / (double)v103;
          v115 = (double)v104 / (double)v111
               + (v114 - (double)v114) * 60.0
               + (v112 - (double)v112) * 3600.0;
          v116 = v115;
          v117 = (v115 - (double)v115) * 1000000000.0 + 0.5;
          *(_DWORD *)&__dst[24] = 0x10000;
          do
          {
            v118 = v99;
            if (v98 == 4)
              break;
            v119 = v143[v98];
            v120 = v119 - 58;
            v99 = v119 + 10 * v118 - 48;
            ++v98;
          }
          while (v120 > 0xFFFFFFF5);
          v121 = 0;
          v122 = 0;
          *(_DWORD *)__dst = v118;
          do
          {
            v123 = v122;
            if (v121 == 2)
              break;
            v124 = v143[v121 + 5];
            v125 = v124 - 58;
            v122 = v124 + 10 * v123 - 48;
            ++v121;
          }
          while (v125 > 0xFFFFFFF5);
          v126 = 0;
          v127 = 0;
          *(_DWORD *)&__dst[4] = v123;
          do
          {
            v128 = v127;
            if (v126 == 2)
              break;
            v129 = v143[v126 + 8];
            v130 = v129 - 58;
            v127 = v129 + 10 * v128 - 48;
            ++v126;
          }
          while (v130 > 0xFFFFFFF5);
          *(_QWORD *)&__dst[8] = __PAIR64__(v113, v128);
          *(_DWORD *)&__dst[16] = v114;
          *(_DWORD *)&__dst[20] = v116;
          v141 = (int)v117;
          *(_QWORD *)&__dst[27] = 0;
          v140 = 0;
          TXMPMeta<std::string>::SetProperty_Date(a2, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", (__int128 *)__dst, 0);
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 20, &v132))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v132, a2, "GPSDestLatitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 22, &v132))
  {
    ImportTIFF_GPSCoordinate((unsigned __int8 *)a1, (uint64_t)&v132, a2, "GPSDestLongitude");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 27, &v132))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v132, a2, "GPSProcessingMethod", 0);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, 28, &v132))
  {
    ImportTIFF_EncodedString(a1, (uint64_t)&v132, a2, "GPSAreaInformation", 0);
  }
}

void sub_1880DCF64(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  void *v4;
  char v5;

  if (a2)
  {
    if (*(char *)(v2 - 89) < 0)
      operator delete(*(void **)(v2 - 112));
    if (v5 < 0)
      operator delete(v4);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1880DCAB8);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_StandardMappings(unsigned int a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 *v5;
  int v6;
  uint64_t v7;
  __int16 *v8;
  int v9;
  _BOOL4 v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  ReconcileUtils *v14;
  unsigned int v15;
  __int16 *v16;
  _BYTE *v17;
  ReconcileUtils *v18;
  unint64_t v19;
  double v20;
  double v21;
  void **v22;
  ReconcileUtils *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  ReconcileUtils *v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  const UInt8 *v37;
  uint64_t v38;
  int v39;
  int IsUTF8;
  char v41;
  const UInt8 *v42;
  ReconcileUtils *v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  ReconcileUtils *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  ReconcileUtils *v51;
  unint64_t v52;
  signed int v53;
  unsigned int v54;
  ReconcileUtils *v55;
  unint64_t v56;
  float v57;
  float v58;
  void **v59;
  unsigned int *v60;
  unint64_t v61;
  signed int v62;
  signed int v63;
  unsigned int v64;
  unsigned int v65;
  char *v66;
  int v67;
  const char *v68;
  const char *v69;
  _QWORD *exception;
  int v71;
  uint64_t v73;
  ReconcileUtils *v74;
  unint64_t v75;
  void *__p[2];
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v71 = a2[73];
  v73 = 0;
  v74 = 0;
  v75 = 0;
  if (a1)
  {
    if (a1 == 3)
    {
      v5 = &sGPSInfoIFDMappings;
    }
    else
    {
      if (a1 != 2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Invalid IFD for standard mappings";
        *((_BYTE *)exception + 16) = 0;
      }
      v5 = &sExifIFDMappings;
    }
  }
  else
  {
    v5 = &sPrimaryIFDMappings;
  }
  v6 = (unsigned __int16)*v5;
  if (v6 != 0xFFFF)
  {
    v7 = 0;
    while (1)
    {
      v8 = &v5[16 * v7];
      v9 = *((_DWORD *)v8 + 1);
      v10 = v9 == 1 || v8[1] == 2;
      v11 = (char *)*((_QWORD *)v8 + 3);
      if (!*v11)
        goto LABEL_129;
      if (((*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)a2 + 24))(a2, a1, (unsigned __int16)v6, &v73) & 1) == 0)goto LABEL_129;
      if (a2[74])
      {
        v12 = v75;
        v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 64))(a2);
        v14 = v74;
        if ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 72))(a2) - (uint64_t)v14 + v13 < v12)
          goto LABEL_129;
      }
      if (WORD1(v73) == 7)
      {
        v67 = 1265;
        v68 = "ImportTIFF_StandardMappings";
        v69 = "tagInfo.type != kTIFF_UndefinedType";
        goto LABEL_128;
      }
      if (WORD1(v73) - 14 < 0xFFFFFFF3)
        break;
      v15 = (unsigned __int16)v5[16 * v7 + 1];
      if (v15 >= 0xE)
      {
        v67 = 1198;
        v68 = "ImportTIFF_CheckStandardMapping";
        v69 = "mapInfo.type <= kTIFF_LastType";
LABEL_128:
        __assert_rtn(v68, "ReconcileTIFF.cpp", v67, v69);
      }
      if (WORD1(v73) != v15)
      {
        if (((0x3CA4uLL >> v15) & 1) != 0)
        {
          if (v15 == 10 || v15 == 5)
          {
            if (WORD1(v73) != 5 && WORD1(v73) != 10)
              goto LABEL_129;
          }
          else if (WORD1(v73) - 13 < 0xFFFFFFFE || v15 - 13 < 0xFFFFFFFE)
          {
            goto LABEL_129;
          }
        }
        else if (((0x3CA4uLL >> SBYTE2(v73)) & 1) != 0)
        {
          goto LABEL_129;
        }
      }
      if (HIDWORD(v73) != 1 && v9 == 1)
        goto LABEL_129;
      v16 = &v5[16 * v7];
      v17 = (_BYTE *)*((_QWORD *)v16 + 2);
      if (!v10)
      {
        switch(WORD1(v73))
        {
          case 1:
            ImportArrayTIFF_Byte((uint64_t)&v73, a3, *((_BYTE **)v16 + 2), v11);
            goto LABEL_129;
          case 2:
            v36 = TrimTrailingSpaces((char *)v74, v75);
            LODWORD(v75) = v36;
            if (!v36)
              goto LABEL_129;
            v37 = (const UInt8 *)v74;
            v38 = v36;
            v39 = *((unsigned __int8 *)v74 + v36 - 1);
            IsUTF8 = ReconcileUtils::IsUTF8(v74, v36);
            if (v39)
              v41 = 0;
            else
              v41 = IsUTF8;
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v77 = 0;
            if ((v41 & 1) != 0)
            {
              v42 = &v37[v38];
            }
            else
            {
              if (IsUTF8)
              {
                MEMORY[0x18D761A20](__p, v37, v75);
              }
              else
              {
                if (ignoreLocalText)
                {
LABEL_113:
                  if (SBYTE7(v77) < 0)
                    operator delete(__p[0]);
                  goto LABEL_129;
                }
                ReconcileUtils::LocalToUTF8(v37, v75, (std::string *)__p);
              }
              v66 = (char *)BYTE7(v77);
              if ((SBYTE7(v77) & 0x80u) == 0)
                v37 = (const UInt8 *)__p;
              else
                v37 = (const UInt8 *)__p[0];
              if (SBYTE7(v77) < 0)
                v66 = (char *)__p[1];
              v42 = (const UInt8 *)&v66[(_QWORD)v37];
            }
            TXMPMeta<std::string>::DeleteProperty(a3, v17, v11);
            while (v37 < v42)
            {
              TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v37, 0);
              v37 += strlen((const char *)v37) + 1;
            }
            goto LABEL_113;
          case 3:
            v43 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v44 = 0;
              do
              {
                v45 = *((unsigned __int16 *)v43 + v44);
                v46 = bswap32(v45) >> 16;
                if (!v71)
                  LOWORD(v45) = v46;
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hu", (unsigned __int16)v45);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v44;
              }
              while (v44 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 4:
            v23 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v24 = 0;
              do
              {
                LODWORD(v25) = *((_DWORD *)v23 + v24);
                v26 = bswap32(v25);
                if (v71)
                  v25 = v25;
                else
                  v25 = v26;
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%lu", v25);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v24;
              }
              while (v24 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 5:
            v27 = (unsigned int *)v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v28 = 0;
              do
              {
                LODWORD(v29) = *v27;
                LODWORD(v30) = v27[1];
                v31 = bswap32(*v27);
                v32 = bswap32(v30);
                if (v71)
                  v29 = v29;
                else
                  v29 = v31;
                if (v71)
                  v30 = v30;
                else
                  v30 = v32;
                v78 = 0;
                *(_OWORD *)__p = 0u;
                v77 = 0u;
                snprintf((char *)__p, 0x28uLL, "%lu/%lu", v29, v30);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v28;
                v27 += 2;
              }
              while (v28 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 6:
            v33 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v34 = 0;
              do
              {
                v35 = *((char *)v33 + v34);
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hd", v35);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v34;
              }
              while (v34 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 8:
            v47 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v48 = 0;
              do
              {
                v49 = *((unsigned __int16 *)v47 + v48);
                v50 = bswap32(v49) >> 16;
                if (!v71)
                  LOWORD(v49) = v50;
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%hd", (__int16)v49);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v48;
              }
              while (v48 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 9:
            v51 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v52 = 0;
              do
              {
                v53 = *((_DWORD *)v51 + v52);
                v54 = bswap32(v53);
                if (!v71)
                  v53 = v54;
                __p[0] = 0;
                __p[1] = 0;
                LODWORD(v77) = 0;
                snprintf((char *)__p, 0x14uLL, "%ld", v53);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v52;
              }
              while (v52 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xA:
            v60 = (unsigned int *)v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v61 = 0;
              do
              {
                v62 = *v60;
                v63 = v60[1];
                v64 = bswap32(*v60);
                v65 = bswap32(v63);
                if (!v71)
                {
                  v62 = v64;
                  v63 = v65;
                }
                v78 = 0;
                *(_OWORD *)__p = 0u;
                v77 = 0u;
                snprintf((char *)__p, 0x28uLL, "%ld/%ld", v62, v63);
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)__p, 0);
                ++v61;
                v60 += 2;
              }
              while (v61 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xB:
            v55 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v56 = 0;
              do
              {
                v57 = *((float *)v55 + v56);
                v58 = COERCE_FLOAT(bswap32(LODWORD(v57)));
                if (!v71)
                  v57 = v58;
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v77 = 0;
                TXMPUtils<std::string>::ConvertFromFloat("", (uint64_t)__p, v57);
                if ((SBYTE7(v77) & 0x80u) == 0)
                  v59 = __p;
                else
                  v59 = (void **)__p[0];
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v59, 0);
                if (SBYTE7(v77) < 0)
                  operator delete(__p[0]);
                ++v56;
              }
              while (v56 < HIDWORD(v73));
            }
            goto LABEL_129;
          case 0xC:
            v18 = v74;
            TXMPMeta<std::string>::DeleteProperty(a3, *((_BYTE **)v16 + 2), v11);
            if (HIDWORD(v73))
            {
              v19 = 0;
              do
              {
                v20 = *((double *)v18 + v19);
                v21 = COERCE_DOUBLE(bswap64(*(unint64_t *)&v20));
                if (!v71)
                  v20 = v21;
                __p[0] = 0;
                __p[1] = 0;
                *(_QWORD *)&v77 = 0;
                TXMPUtils<std::string>::ConvertFromFloat("", (uint64_t)__p, v20);
                if ((SBYTE7(v77) & 0x80u) == 0)
                  v22 = __p;
                else
                  v22 = (void **)__p[0];
                TXMPMeta<std::string>::AppendArrayItem(a3, v17, v11, 1024, (uint64_t)v22, 0);
                if (SBYTE7(v77) < 0)
                  operator delete(__p[0]);
                ++v19;
              }
              while (v19 < HIDWORD(v73));
            }
            goto LABEL_129;
          default:
            goto LABEL_129;
        }
      }
      ImportSingleTIFF((uint64_t)&v73, v71 != 0, a3, *((char **)v16 + 2), v11);
LABEL_129:
      ++v7;
      v6 = (unsigned __int16)v5[16 * v7];
      if (v6 == 0xFFFF)
        return;
    }
    v67 = 1197;
    v68 = "ImportTIFF_CheckStandardMapping";
    v69 = "(kTIFF_ByteType <= tagInfo.type) && (tagInfo.type <= kTIFF_LastType)";
    goto LABEL_128;
  }
}

void ImportSingleTIFF(uint64_t a1, int a2, uint64_t a3, char *a4, char *a5)
{
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  ReconcileUtils *v21;
  int v22;
  int IsUTF8;
  int v24;
  unsigned int v25;
  unsigned int v26;
  signed int v27;
  unsigned int v28;
  float v29;
  float v30;
  signed int *v31;
  signed int v32;
  signed int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  char __str[16];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  switch(*(_WORD *)(a1 + 2))
  {
    case 1:
      ImportSingleTIFF_Byte(a1, a3, a4, a5);
      return;
    case 2:
      v20 = TrimTrailingSpaces(*(char **)(a1 + 8), *(unsigned int *)(a1 + 16));
      *(_DWORD *)(a1 + 16) = v20;
      if (!v20)
        return;
      v21 = *(ReconcileUtils **)(a1 + 8);
      v22 = *((unsigned __int8 *)v21 + v20 - 1);
      IsUTF8 = ReconcileUtils::IsUTF8(v21, v20);
      if (v22)
        v24 = 0;
      else
        v24 = IsUTF8;
      if (v24 == 1)
      {
        TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)v21, 0);
        return;
      }
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)&v38 = 0;
      if (IsUTF8)
      {
        MEMORY[0x18D761A20](__str, v21, *(unsigned int *)(a1 + 16));
      }
      else
      {
        if (ignoreLocalText)
          return;
        ReconcileUtils::LocalToUTF8((const UInt8 *)v21, *(unsigned int *)(a1 + 16), (std::string *)__str);
      }
      if ((SBYTE7(v38) & 0x80u) == 0)
        v36 = __str;
      else
        v36 = *(char **)__str;
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)v36, 0);
      if (SBYTE7(v38) < 0)
        operator delete(*(void **)__str);
      return;
    case 3:
      v18 = **(unsigned __int16 **)(a1 + 8);
      v19 = bswap32(v18) >> 16;
      if (!a2)
        LOWORD(v18) = v19;
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hu", (unsigned __int16)v18);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 4:
      LODWORD(v16) = **(_DWORD **)(a1 + 8);
      v17 = bswap32(v16);
      if (a2)
        v16 = v16;
      else
        v16 = v17;
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%lu", v16);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 5:
      v11 = *(_QWORD *)(a1 + 8);
      LODWORD(v12) = *(_DWORD *)v11;
      LODWORD(v11) = *(_DWORD *)(v11 + 4);
      v13 = bswap32(v12);
      v14 = bswap32(v11);
      if (a2)
        v12 = v12;
      else
        v12 = v13;
      if (a2)
        v11 = v11;
      else
        v11 = v14;
      v39 = 0;
      *(_OWORD *)__str = 0u;
      v38 = 0u;
      snprintf(__str, 0x28uLL, "%lu/%lu", v12, v11);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 6:
      v15 = **(char **)(a1 + 8);
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hd", v15);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 8:
      v25 = **(unsigned __int16 **)(a1 + 8);
      v26 = bswap32(v25) >> 16;
      if (!a2)
        LOWORD(v25) = v26;
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%hd", (__int16)v25);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 9:
      v27 = **(_DWORD **)(a1 + 8);
      v28 = bswap32(v27);
      if (!a2)
        v27 = v28;
      memset(__str, 0, sizeof(__str));
      LODWORD(v38) = 0;
      snprintf(__str, 0x14uLL, "%ld", v27);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 0xA:
      v31 = *(signed int **)(a1 + 8);
      v33 = *v31;
      v32 = v31[1];
      v34 = bswap32(v33);
      v35 = bswap32(v32);
      if (!a2)
      {
        v33 = v34;
        v32 = v35;
      }
      v39 = 0;
      *(_OWORD *)__str = 0u;
      v38 = 0u;
      snprintf(__str, 0x28uLL, "%ld/%ld", v33, v32);
      TXMPMeta<std::string>::SetProperty(a3, a4, a5, (uint64_t)__str, 0);
      return;
    case 0xB:
      v29 = **(float **)(a1 + 8);
      v30 = COERCE_FLOAT(bswap32(LODWORD(v29)));
      if (!a2)
        v29 = v30;
      TXMPMeta<std::string>::SetProperty_Float(a3, a4, a5, 0, v29);
      return;
    case 0xC:
      v9 = **(double **)(a1 + 8);
      v10 = COERCE_DOUBLE(bswap64(*(unint64_t *)&v9));
      if (!a2)
        v9 = v10;
      TXMPMeta<std::string>::SetProperty_Float(a3, a4, a5, 0, v9);
      return;
    default:
      return;
  }
}

void ImportTIFF_Date(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64x2_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int v64;
  int v65;
  BOOL v66;
  int v67;
  int v68;
  int v70;
  uint64_t v71;
  int v72;
  char v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  char *__s1;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  __int128 v91;
  int v92;
  int v93;
  _BYTE v94[12];
  unsigned int v95;

  v6 = *a2;
  if (v6 == 306)
    v7 = 37520;
  else
    v7 = 0;
  if (v6 == 306)
    v8 = 36880;
  else
    v8 = 0;
  if (v6 == 36867)
    v9 = 37521;
  else
    v9 = v7;
  if (v6 == 36867)
    v10 = 36881;
  else
    v10 = v8;
  if (v6 == 36868)
    v11 = 37522;
  else
    v11 = v9;
  if (v6 == 36868)
    v12 = 36882;
  else
    v12 = v10;
  if (a2[1] != 2 || *((_DWORD *)a2 + 1) != 20)
    return;
  v14 = (_BYTE *)*((_QWORD *)a2 + 1);
  if (v14[4] != 58 || v14[7] != 58 || v14[10] != 32 || v14[13] != 58 || v14[16] != 58)
    return;
  v18 = 0;
  v19 = 0;
  *(_DWORD *)v94 = 0;
  do
  {
    v20 = v19;
    if (v18 == 4)
      break;
    v21 = v14[v18];
    v22 = v21 - 58;
    v19 = v21 + 10 * v20 - 48;
    ++v18;
  }
  while (v22 > 0xFFFFFFF5);
  v23 = 0;
  v24 = 0;
  LODWORD(v91) = v20;
  do
  {
    v25 = v24;
    if (v23 == 2)
      break;
    v26 = v14[v23 + 5];
    v27 = v26 - 58;
    v24 = v26 + 10 * v25 - 48;
    ++v23;
  }
  while (v27 > 0xFFFFFFF5);
  v28 = 0;
  v29 = 0;
  DWORD1(v91) = v25;
  do
  {
    v30 = v29;
    if (v28 == 2)
      break;
    v31 = v14[v28 + 8];
    v32 = v31 - 58;
    v29 = v31 + 10 * v30 - 48;
    ++v28;
  }
  while (v32 > 0xFFFFFFF5);
  DWORD2(v91) = v30;
  if (v25 | v20 | v30)
    v94[0] = 1;
  v33 = 0;
  v34 = 0;
  do
  {
    v35 = v34;
    if (v33 == 2)
      break;
    v36 = v14[v33 + 11];
    v37 = v36 - 58;
    v34 = v36 + 10 * v35 - 48;
    ++v33;
  }
  while (v37 > 0xFFFFFFF5);
  v38 = 0;
  v39 = 0;
  HIDWORD(v91) = v35;
  do
  {
    v40 = v39;
    if (v38 == 2)
      break;
    v41 = v14[v38 + 14];
    v42 = v41 - 58;
    v39 = v41 + 10 * v40 - 48;
    ++v38;
  }
  while (v42 > 0xFFFFFFF5);
  v43 = 0;
  v44 = 0;
  v92 = v40;
  v45 = v14 + 17;
  do
  {
    v46 = v44;
    if (v43 == 2)
      break;
    v47 = v45[v43];
    v48 = v47 - 58;
    v44 = v47 + 10 * v46 - 48;
    ++v43;
  }
  while (v48 > 0xFFFFFFF5);
  v93 = v46;
  v95 = 0;
  if (v40 | v35 | v46)
    v94[1] = 1;
  *(_WORD *)&v94[10] = 0;
  *(_QWORD *)&v94[2] = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, v11, &v88);
  if (WORD1(v88) == 2)
    v50 = v49;
  else
    v50 = 0;
  if (v50 == 1)
  {
    v51 = 0;
    v52 = v89;
    do
    {
      v53 = v51;
      if (v52 >= &v89[v90])
        break;
      v54 = *v52++;
      v51 = v54 + 10 * v51 - 48;
    }
    while ((v54 - 58) > 0xFFFFFFF5);
    if (*v89 - 48 > 9)
    {
      v55 = 0;
    }
    else
    {
      v55 = 0;
      do
        v56 = v89[++v55];
      while ((v56 - 48) < 0xA);
      if (v55 > 8)
      {
LABEL_67:
        v95 = v53;
        if (v53)
          v94[1] = 1;
        goto LABEL_69;
      }
    }
    v57 = 0;
    v58 = (uint64x2_t)vdupq_n_s64(8 - v55);
    v59.i64[1] = 0x100000001;
    v59.i64[0] = v53 | 0x100000000;
    v60.i64[0] = 0xA0000000ALL;
    v60.i64[1] = 0xA0000000ALL;
    do
    {
      v61 = v59;
      v59 = (int8x16_t)vmulq_s32((int32x4_t)v59, v60);
      v57 += 4;
    }
    while (((12 - v55) & 0xFFFFFFFFFFFFFFFCLL) != v57);
    v62 = (int8x16_t)vdupq_n_s64(v57 - 4);
    v63 = vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v62, (int8x16_t)xmmword_18820C490), v58), (int32x4_t)vcgtq_u64((uint64x2_t)vorrq_s8(v62, (int8x16_t)xmmword_18822E810), v58)), v61, v59);
    *(int32x2_t *)v63.i8 = vmul_s32(*(int32x2_t *)v63.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    v53 = v63.i32[0] * v63.i32[1];
    goto LABEL_67;
  }
LABEL_69:
  v85 = 0;
  __s1 = 0;
  v87 = 0;
  v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, 36864, &v85);
  if (WORD1(v85) == 7)
    v65 = v64;
  else
    v65 = 0;
  v66 = v65 == 1 && HIDWORD(v85) == 4;
  if (v66 && (strncmp(__s1, "0231", 4uLL) & 0x80000000) == 0)
  {
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 2, v12, &v82);
    v68 = WORD1(v82) == 2 ? v67 : 0;
    if (v68 == 1 && HIDWORD(v82) == 7)
    {
      v70 = *v83;
      if (v70 == 43 || v70 == 45 || v83[3] == 58)
      {
        v71 = 0;
        v72 = 0;
        if (v70 == 45)
          v73 = -1;
        else
          v73 = 1;
        v94[3] = v73;
        do
        {
          v74 = v72;
          if (v71 == 2)
            break;
          v75 = v83[++v71];
          v76 = v75 - 58;
          v72 = v75 + 10 * v74 - 48;
        }
        while (v76 > 0xFFFFFFF5);
        v77 = 0;
        v78 = 0;
        *(_DWORD *)&v94[4] = v74;
        do
        {
          v79 = v78;
          if (v77 == 2)
            break;
          v80 = v83[v77 + 4];
          v81 = v80 - 58;
          v78 = v80 + 10 * v79 - 48;
          ++v77;
        }
        while (v81 > 0xFFFFFFF5);
        *(_DWORD *)&v94[8] = v79;
        v94[2] = 1;
      }
    }
  }
  TXMPMeta<std::string>::SetProperty_Date(a3, a4, a5, &v91, 0);
}

void sub_1880DE454(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880DE43CLL);
}

void ImportArrayTIFF_Byte(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  char __str[8];
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  TXMPMeta<std::string>::DeleteProperty(a2, a3, a4);
  if (*(_DWORD *)(a1 + 4))
  {
    v9 = 0;
    do
    {
      v10 = *(unsigned __int8 *)(v8 + v9);
      *(_QWORD *)__str = 0;
      v12 = 0;
      v13 = 0;
      snprintf(__str, 0x14uLL, "%hu", v10);
      TXMPMeta<std::string>::AppendArrayItem(a2, a3, a4, 1024, (uint64_t)__str, 0);
      ++v9;
    }
    while (v9 < *(unsigned int *)(a1 + 4));
  }
}

void sub_1880DE550(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1880DE518);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_EncodedString(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, char a5)
{
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *v12;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  if ((TIFF_Manager::DecodeString(a1, *(unsigned __int8 **)(a2 + 8), *(unsigned int *)(a2 + 16), &v13) & 1) != 0)
  {
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    v10 = TrimTrailingSpaces((char *)v9, size);
    if (v10 != size)
      std::string::erase(&v13, v10, 0xFFFFFFFFFFFFFFFFLL);
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v13.__r_.__value_.__l.__size_;
    if (v11)
    {
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v13;
      else
        v12 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if ((a5 & 1) != 0)
        TXMPMeta<std::string>::SetLocalizedText(a3, "http://ns.adobe.com/exif/1.0/", a4, "", "x-default", (const char *)v12, 0);
      else
        TXMPMeta<std::string>::SetProperty(a3, "http://ns.adobe.com/exif/1.0/", a4, (uint64_t)v12, 0);
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1880DE67C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880DE668);
}

void ImportConversionTable(unsigned __int16 *a1, int a2, uint64_t a3, char *a4)
{
  int v4;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  void **v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  void **v30;
  _QWORD *exception;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  int v35;
  char *v36;
  void *__p[2];
  uint64_t v38;
  char __str[16];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v35 = v4;
  if (v4 != 34856 && v4 != 41484)
    ImportConversionTable();
  TXMPMeta<std::string>::DeleteProperty(a3, "http://ns.adobe.com/exif/1.0/", a4);
  v10 = (unsigned __int16 *)*((_QWORD *)a1 + 1);
  v11 = *((unsigned int *)a1 + 4);
  v12 = v10[1];
  v13 = bswap32(*v10) >> 16;
  if (a2)
    LOWORD(v14) = *v10;
  else
    LOWORD(v14) = v13;
  v41 = 0;
  *(_OWORD *)__str = 0u;
  v40 = 0u;
  snprintf(__str, 0x28uLL, "%d", (unsigned __int16)v14);
  v36 = a4;
  TXMPMeta<std::string>::SetStructField(a3, "http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Columns", __str, 0);
  v15 = __rev16(v12);
  if (a2)
    v16 = v12;
  else
    v16 = v15;
  snprintf(__str, 0x28uLL, "%d", v16);
  TXMPMeta<std::string>::SetStructField(a3, "http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Rows", __str, 0);
  __p[0] = 0;
  __p[1] = 0;
  v38 = 0;
  TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", a4, "http://ns.adobe.com/exif/1.0/", "Names", (uint64_t)__p);
  v17 = (char *)v10 + v11;
  v18 = (char *)(v10 + 2);
  v19 = (unsigned __int16)v14;
  if ((_WORD)v14)
  {
    v34 = "OECF-SFR name overflow";
    v14 = (unsigned __int16)v14;
    while (1)
    {
      v20 = strlen(v18) + 1;
      v21 = (unsigned int *)&v18[v20];
      if (&v18[v20] > v17)
        goto LABEL_46;
      if (!ReconcileUtils::IsUTF8((ReconcileUtils *)v18, v20))
        break;
      if (v38 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      TXMPMeta<std::string>::AppendArrayItem(a3, "http://ns.adobe.com/exif/1.0/", v22, 1024, (uint64_t)v18, 0);
      v18 = (char *)v21;
      if (!--v14)
        goto LABEL_22;
    }
    v34 = "OECF-SFR name error";
LABEL_46:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 5;
    exception[1] = v34;
    *((_BYTE *)exception + 16) = 0;
  }
  v21 = (unsigned int *)(v10 + 2);
LABEL_22:
  if (v17 - (char *)v21 != 8 * v19 * v16)
  {
    v33 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v33 = 5;
    v33[1] = "OECF-SFR data overflow";
    *((_BYTE *)v33 + 16) = 0;
  }
  TXMPUtils<std::string>::ComposeStructFieldPath("http://ns.adobe.com/exif/1.0/", v36, "http://ns.adobe.com/exif/1.0/", "Values", (uint64_t)__p);
  v23 = v16 * v19;
  if ((_DWORD)v23)
  {
    if (v35 == 34856)
      v24 = "%ld/%ld";
    else
      v24 = "%lu/%lu";
    do
    {
      LODWORD(v25) = *v21;
      LODWORD(v26) = v21[1];
      v27 = bswap32(*v21);
      v28 = bswap32(v26);
      if (a2)
        v25 = v25;
      else
        v25 = v27;
      if (a2)
        v26 = v26;
      else
        v26 = v28;
      if ((_DWORD)v26)
        v29 = 1;
      else
        v29 = (_DWORD)v25 == 0;
      if (!v29)
      {
        v32 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)v32 = 5;
        v32[1] = "OECF-SFR data overflow";
        *((_BYTE *)v32 + 16) = 0;
      }
      snprintf(__str, 0x28uLL, v24, v25, v26);
      if (v38 >= 0)
        v30 = __p;
      else
        v30 = (void **)__p[0];
      TXMPMeta<std::string>::AppendArrayItem(a3, "http://ns.adobe.com/exif/1.0/", v30, 1024, (uint64_t)__str, 0);
      v21 += 2;
      --v23;
    }
    while (v23);
  }
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
}

void sub_1880DEA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    TXMPMeta<std::string>::DeleteProperty(v19, "http://ns.adobe.com/exif/1.0/", a13);
    __cxa_end_catch();
    JUMPOUT(0x1880DE968);
  }
  _Unwind_Resume(exception_object);
}

void ImportSingleTIFF_Byte(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  int v7;
  char __str[8];
  uint64_t v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = **(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)__str = 0;
  v9 = 0;
  v10 = 0;
  snprintf(__str, 0x14uLL, "%hu", v7);
  TXMPMeta<std::string>::SetProperty(a2, a3, a4, (uint64_t)__str, 0);
}

void sub_1880DEB70(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1880DEB40);
  }
  _Unwind_Resume(a1);
}

void ImportTIFF_GPSCoordinate(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v7;
  unsigned __int16 v8;
  char v9;
  char v10;
  int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  char __str[16];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a2 + 2) == 5 && *(_DWORD *)(a2 + 4))
  {
    v7 = a1[73];
    v8 = *(_WORD *)a2 - 1;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 24))(a1, 3, v8, &v33);
    v10 = HIDWORD(v33) ? v9 : 0;
    if ((v10 & 1) != 0)
    {
      v11 = *v34;
      if ((v11 - 69) <= 0x12 && ((1 << (v11 - 69)) & 0x44201) != 0)
      {
        v13 = *(unsigned int **)(a2 + 8);
        if (v7)
          v14 = 1;
        else
          v14 = 0x1000000;
        v15 = *v13;
        v16 = v13[1];
        v17 = *(_DWORD *)(a2 + 4);
        if (v17 < 2)
        {
          v19 = 0;
          v20 = 0;
          v18 = v14;
        }
        else
        {
          v19 = v13[2];
          v18 = v13[3];
          if (v17 == 2)
          {
            v20 = 0;
          }
          else
          {
            v20 = v13[4];
            v14 = v13[5];
          }
        }
        v21 = bswap32(v15);
        v22 = bswap32(v16);
        v23 = bswap32(v19);
        v24 = bswap32(v18);
        v25 = bswap32(v20);
        v26 = bswap32(v14);
        if (v7)
        {
          v21 = v15;
          v22 = v16;
          v27 = v19;
        }
        else
        {
          v27 = v23;
        }
        v38 = 0;
        if (v7)
        {
          v28 = v20;
        }
        else
        {
          v18 = v24;
          v28 = v25;
        }
        if (!v7)
          v14 = v26;
        *(_OWORD *)__str = 0uLL;
        v37 = 0uLL;
        if (v22 == 1 && v18 == 1 && v14 == 1)
        {
          snprintf(__str, 0x28uLL, "%lu,%lu,%lu%c");
LABEL_31:
          TXMPMeta<std::string>::SetProperty(a3, "http://ns.adobe.com/exif/1.0/", a4, (uint64_t)__str, 0);
          return;
        }
        if ((v22 || !v21) && (v18 || !v27) && (v14 || !v28))
        {
          if (v18 <= v22)
            v29 = v22;
          else
            v29 = v18;
          if (v14 <= v29)
            v30 = v29;
          else
            v30 = v14;
          v31 = 1;
          if (v30 >= 0xB)
          {
            do
            {
              ++v31;
              v32 = v30 > 0x6D;
              v30 /= 0xAu;
            }
            while (v32);
          }
          snprintf(__str, 0x28uLL, "%.0f,%.*f%c");
          goto LABEL_31;
        }
      }
    }
  }
}

void sub_1880DEE44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1880DED2CLL);
  }
  _Unwind_Resume(a1);
}

void PhotoDataUtils::Import3WayItems(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL LocalizedText;
  uint64_t v9;
  unint64_t NativeInfo;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  std::string *p_p;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  std::string *v23;
  BOOL DoesPropertyExist;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  BOOL Property;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  int v34;
  int v35;
  _QWORD v36[2];
  _OWORD v37[2];
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string __p;
  void *v43[2];
  uint64_t v44;
  uint64_t v45;
  char *__s2;
  uint64_t v47;
  _OWORD v48[19];
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54[2];
  uint64_t v55;

  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  memset(&__p, 0, sizeof(__p));
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0uLL;
  memset(v37, 0, sizeof(v37));
  v36[0] = &off_1E1BABE18;
  v36[1] = v37;
  if (!a4)
    PhotoDataUtils::ExportIPTC(a3, (uint64_t)v36);
  LocalizedText = TXMPMeta<std::string>::GetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "rights", "", "x-default", 0, (uint64_t)v43, 0);
  NativeInfo = PhotoDataUtils::GetNativeInfo(a2, 116, v9, 0, &v38);
  if (NativeInfo)
    v11 = 1;
  else
    v11 = LocalizedText;
  if ((v11 & 1) != 0)
  {
    if (a4)
      v12 = LocalizedText;
    else
      v12 = 0;
    if (NativeInfo && !v12)
      PhotoDataUtils::ImportIPTC_LangAlt(a2, a3, 116, "http://purl.org/dc/elements/1.1/", "rights");
  }
  else
  {
    v13 = PhotoDataUtils::GetNativeInfo(a1, 0, 33432, (uint64_t)&v39);
    v14 = v41;
    if (v41 > 1)
      v15 = v13;
    else
      v15 = 0;
    if (v15 == 1)
    {
      v16 = 0;
      do
      {
        if (!*(_BYTE *)(v40 + v16))
        {
          *(_BYTE *)(v40 + v16) = 10;
          v14 = v41;
        }
        ++v16;
      }
      while (v16 < (v14 - 1));
    }
    else if ((v13 & 1) == 0)
    {
      goto LABEL_28;
    }
    if (PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      TXMPMeta<std::string>::SetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "rights", "", "x-default", (const char *)p_p, 0);
    }
  }
LABEL_28:
  v18 = TXMPMeta<std::string>::GetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "description", "", "x-default", 0, (uint64_t)v43, 0);
  v20 = PhotoDataUtils::GetNativeInfo(a2, 120, v19, 0, &v38);
  if (v20)
    v21 = 1;
  else
    v21 = v18;
  if ((v21 & 1) != 0)
  {
    if (a4)
      v22 = v18;
    else
      v22 = 0;
    if (v20 && !v22)
      PhotoDataUtils::ImportIPTC_LangAlt(a2, a3, 120, "http://purl.org/dc/elements/1.1/", "description");
  }
  else if (PhotoDataUtils::GetNativeInfo(a1, 0, 270, (uint64_t)&v39)
         && PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &__p;
    else
      v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    TXMPMeta<std::string>::SetLocalizedText(a3, "http://purl.org/dc/elements/1.1/", "description", "", "x-default", (const char *)v23, 0);
  }
  DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a3, "http://purl.org/dc/elements/1.1/", "creator");
  PhotoDataUtils::GetNativeInfo(a1, 0, 315, (uint64_t)&v39);
  v26 = PhotoDataUtils::GetNativeInfo(a2, 80, v25, 0, &v38);
  if (v26)
    v27 = 1;
  else
    v27 = DoesPropertyExist;
  if ((v27 & 1) != 0)
  {
    if (a4)
      v28 = DoesPropertyExist;
    else
      v28 = 0;
    if (v26 && !v28)
      PhotoDataUtils::ImportIPTC_Array(a2, a3, 80, "http://purl.org/dc/elements/1.1/", "creator");
  }
  else if (PhotoDataUtils::GetNativeInfo(a1, 0, 315, (uint64_t)&v39)
         && PhotoDataUtils::IsValueDifferent((uint64_t)&v39, (unsigned __int8 *)v43, &__p))
  {
    TXMPUtils<std::string>::SeparateArrayItems(a3, (XMPMeta *)"http://purl.org/dc/elements/1.1/", "creator", (const char *)0x10000400, (char *)&__p);
  }
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v50 = 0uLL;
  Property = TXMPMeta<std::string>::GetProperty(a3, "http://ns.adobe.com/xap/1.0/", "CreateDate", (uint64_t)v54, 0);
  v31 = PhotoDataUtils::GetNativeInfo(a2, 62, v30, 0, &v50);
  if (v31)
    v32 = 1;
  else
    v32 = Property;
  if ((v32 & 1) != 0)
  {
    if (a4)
      v33 = Property;
    else
      v33 = 0;
    if (v31 && !v33)
      PhotoDataUtils::ImportIPTC_Date(62, a2, a3);
  }
  else
  {
    v34 = PhotoDataUtils::GetNativeInfo(a1, 2, 36868, (uint64_t)&v51);
    if (WORD1(v51) == 2)
      v35 = v34;
    else
      v35 = 0;
    if (v35 == 1)
    {
      v49 = 0;
      memset(v48, 0, sizeof(v48));
      TIFF_FileWriter::TIFF_FileWriter((TIFF_FileWriter *)v48);
      v45 = 0;
      __s2 = 0;
      v47 = 0;
      ExportTIFF_Date(a3, "http://ns.adobe.com/xap/1.0/", "CreateDate", (TIFF_Manager *)v48, 36868);
      if (!TIFF_FileWriter::GetTag((TIFF_FileWriter *)v48, (TIFF_FileWriter *)2, 0x9004u, (uint64_t)&v45)
        || (_DWORD)v53 != (_DWORD)v47
        || strncmp(v52, __s2, v53))
      {
        ImportTIFF_Date(a1, (unsigned __int16 *)&v51, a3, "http://ns.adobe.com/xap/1.0/", "CreateDate");
      }
      TIFF_FileWriter::~TIFF_FileWriter((TIFF_FileWriter *)v48);
    }
  }
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)v36);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
}

void sub_1880DF398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  TIFF_FileWriter::~TIFF_FileWriter((TIFF_FileWriter *)&a35);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)&a9);
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void PhotoDataUtils::ExportExif (uint64_t a1, uint64_t a2)
{
  std::string *p_str;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  int v21;
  int v22;
  std::string *v24;
  _BOOL4 Property_Int;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  _BOOL4 DoesPropertyExist;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v37;
  _BOOL4 v39;
  _BOOL4 v41;
  _BOOL4 v43;
  __int16 Property_Bool;
  int v46;
  _BOOL4 v47;
  char v48;
  _BOOL4 v49;
  char v50;
  BOOL v51;
  int v52;
  BOOL v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  std::string *v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  unsigned int v66;
  double i;
  std::string::size_type v68;
  std::string::size_type v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  std::string __str;
  unsigned __int16 v74[2];
  char v75[8];
  uint64_t v76;
  uint64_t v77;
  std::string v78;
  void *__p[2];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  memset(&__str, 0, sizeof(__str));
  v72 = 0;
  HIBYTE(v71) = 0;
  LODWORD(v71) = 0;
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, &v71)
    && (v71 & 0x200) != 0
    && TXMPMeta<std::string>::GetArrayItem(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1, (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (uint64_t)p_str, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "CameraOwnerName")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "OwnerName", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = &__str;
    else
      v5 = (std::string *)__str.__r_.__value_.__r.__words[0];
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "CameraOwnerName", (uint64_t)v5, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "BodySerialNumber")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "SerialNumber", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__str;
    else
      v6 = (std::string *)__str.__r_.__value_.__r.__words[0];
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "BodySerialNumber", (uint64_t)v6, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "LensModel")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "Lens", (uint64_t)&__str, 0))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &__str;
    else
      v7 = (std::string *)__str.__r_.__value_.__r.__words[0];
    TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "LensModel", (uint64_t)v7, 0);
  }
  if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "LensSpecification")
    && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/aux/", "LensInfo", (uint64_t)&__str, 0))
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v80 = 0;
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      v9 = 0;
      do
      {
        v10 = std::string::find(&__str, 32, v9);
        if (v10 == v9)
        {
          v11 = v9;
        }
        else
        {
          v11 = v10;
          if (v10 == -1)
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              v11 = __str.__r_.__value_.__l.__size_;
            else
              v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          std::string::basic_string(&v78, &__str, v9, v11 - v9, (std::allocator<char> *)v75);
          if (SBYTE7(v80) < 0)
            operator delete(__p[0]);
          *(_OWORD *)__p = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
          *(_QWORD *)&v80 = *((_QWORD *)&v78.__r_.__value_.__l + 2);
          if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = __p;
          else
            v12 = (void **)v78.__r_.__value_.__r.__words[0];
          TXMPMeta<std::string>::AppendArrayItem(a1, "http://cipa.jp/exif/1.0/", "LensSpecification", 1024, (uint64_t)v12, 0);
        }
        v9 = v11 + 1;
        v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = __str.__r_.__value_.__l.__size_;
      }
      while (v9 < v13);
      if (SBYTE7(v80) < 0)
        operator delete(__p[0]);
    }
  }
  ExportTIFF_StandardMappings(0, (unsigned __int8 *)a2, a1);
  ExportTIFF_StandardMappings(2, (unsigned __int8 *)a2, a1);
  ExportTIFF_StandardMappings(3, (unsigned __int8 *)a2, a1);
  v70 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, 3, 6, &v70))
  {
    if (v70 < 0)
    {
      v14 = -HIDWORD(v70);
      v16 = -(int)v70;
      v15 = -(int)v70 < 0;
      LODWORD(v70) = -(int)v70;
      HIDWORD(v70) = -HIDWORD(v70);
      if (!v15)
        goto LABEL_57;
    }
    else if ((v70 & 0x80000000) == 0)
    {
      goto LABEL_58;
    }
    TIFF_Manager::SetTag_Byte((TIFF_Manager *)a2, 3, 5, 1);
    v14 = HIDWORD(v70);
    v16 = -(int)v70;
    LODWORD(v70) = -(int)v70;
LABEL_57:
    TIFF_Manager::SetTag_Rational((void (**)(uint64_t, uint64_t *))a2, 3, 6, v16, v14);
  }
LABEL_58:
  ExportTIFF_LocTextASCII(a1, "description", a2, 270);
  ExportTIFF_EncodedString(a1, "UserComment", a2, 2, 37510, 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 36868, 0))
    ExportTIFF_Date(a1, "http://ns.adobe.com/xap/1.0/", "CreateDate", (TIFF_Manager *)a2, 36868);
  ExportTIFF_Date(a1, "http://ns.adobe.com/exif/1.0/", "DateTimeOriginal", (TIFF_Manager *)a2, 36867);
  ExportTIFF_Date(a1, "http://ns.adobe.com/xap/1.0/", "ModifyDate", (TIFF_Manager *)a2, 306);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v80 = 0;
  LODWORD(v78.__r_.__value_.__l.__data_) = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, "http://purl.org/dc/elements/1.1/", "creator", 0, (uint64_t *)&v78))
  {
    if ((v78.__r_.__value_.__s.__data_[1] & 2) != 0)
    {
      TXMPUtils<std::string>::CatenateArrayItems(a1, "http://purl.org/dc/elements/1.1/", "creator", 0, 0, 0x10000400u, (uint64_t)__p);
      std::string::push_back((std::string *)__p, 0);
      v17 = (SBYTE7(v80) & 0x80u) == 0 ? BYTE7(v80) : LODWORD(__p[1]);
      v18 = (SBYTE7(v80) & 0x80u) == 0 ? __p : (void **)__p[0];
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 32))(a2, 0, 315, 2, v17, v18);
      if (SBYTE7(v80) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, 0, 315);
  }
  ExportTIFF_LocTextASCII(a1, "rights", a2, 33432);
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ExifVersion", (uint64_t)&__str, 0))
  {
    v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = __str.__r_.__value_.__l.__size_;
    if (v19 == 4
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 36864, 0) & 1) == 0)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &__str;
      else
        v20 = (std::string *)__str.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, 2, 36864, 7, 4, v20);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v80 = 0;
  memset(&v78, 0, sizeof(v78));
  *(_DWORD *)v74 = 0;
  *(_DWORD *)v75 = 0;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 36864, __p);
  if (WORD1(__p[0]) == 7)
    v22 = v21;
  else
    v22 = 0;
  if (v22 == 1 && HIDWORD(__p[0]) == 4 && (strncmp((const char *)__p[1], "0230", 4uLL) & 0x80000000) == 0)
  {
    if (!TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity")
      && TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, (uint64_t *)v75)
      && (v75[1] & 2) != 0
      && (int)TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings") >= 1)
    {
      TXMPMeta<std::string>::GetArrayItem(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 1, (uint64_t)&v78, 0);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v78;
      else
        v24 = (std::string *)v78.__r_.__value_.__r.__words[0];
      TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (uint64_t)v24, 0);
    }
    TXMPMeta<std::string>::DeleteProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    Property_Int = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (int *)v74, 0);
    v26 = *(int *)v74 >= 0 && Property_Int;
    if (v26 && *(int *)v74 < 0x10000)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34855, __p) & 1) == 0)TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, v74[0]);
    }
    else if (Property_Int)
    {
      v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 34855, 0);
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 34864, 0);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 34867, 0);
      DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "SensitivityType");
      v31 = TXMPMeta<std::string>::DoesPropertyExist(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed");
      if (((v27 | v28 | v29) & 1) == 0)
      {
        v32 = v31;
        TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, 0xFFFFLL);
        if (!DoesPropertyExist && !v32)
        {
          TXMPMeta<std::string>::SetProperty(a1, "http://cipa.jp/exif/1.0/", "SensitivityType", (uint64_t)"3", 0);
          TXMPMeta<std::string>::SetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed", *(unsigned int *)v74, 0);
        }
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34864, __p) & 1) == 0)
    {
      v33 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "SensitivityType", (int *)v74, 0);
      v34 = *(int *)v74 >= 0 && v33;
      if (v34 && *(int *)v74 < 0x10000)
        TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34864, v74[0]);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34865, __p) & 1) == 0)
    {
      v35 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "StandardOutputSensitivity", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v35)
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34865, *(unsigned int *)v74);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34866, __p) & 1) == 0)
    {
      v37 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "RecommendedExposureIndex", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v37)
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34866, *(unsigned int *)v74);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34867, __p) & 1) == 0)
    {
      v39 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeed", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v39)
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34867, *(unsigned int *)v74);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34868, __p) & 1) == 0)
    {
      v41 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudeyyy", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v41)
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34868, *(unsigned int *)v74);
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34869, __p) & 1) == 0)
    {
      v43 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "ISOSpeedLatitudezzz", (int *)v74, 0);
      if (*(int *)v74 >= 0 && v43)
        TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, 2, 34869, *(unsigned int *)v74);
    }
  }
  else if ((TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings", 0, (uint64_t *)v75)&& ((v75[1] & 2) == 0|| (int)TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings") < 1|| TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings[1]", (int *)v74, 0))|| TXMPMeta<std::string>::GetProperty_Int(a1, "http://cipa.jp/exif/1.0/", "PhotographicSensitivity", (int *)v74, 0))
         && (*(_DWORD *)v74 & 0x80000000) == 0
         && *(int *)v74 < 0x10000)
  {
    TXMPMeta<std::string>::DeleteProperty(a1, "http://ns.adobe.com/exif/1.0/", "ISOSpeedRatings");
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, 2, 34855, __p) & 1) == 0)
      TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 34855, v74[0]);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration")
    && TXMPMeta<std::string>::CountArrayItems(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration") == 4&& ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 37121, 0) & 1) == 0)
  {
    LODWORD(__p[0]) = 0;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[1]", &v72, 0);
    LOBYTE(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[2]", &v72, 0);
    BYTE1(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[3]", &v72, 0);
    BYTE2(__p[0]) = v72;
    TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "ComponentsConfiguration[4]", &v72, 0);
    BYTE3(__p[0]) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 32))(a2, 2, 37121, 7, 4, __p);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "Flash")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 37385, 0) & 1) == 0)
  {
    LOBYTE(__p[0]) = 0;
    Property_Bool = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Fired", __p, 0);
    v46 = LOBYTE(__p[0]);
    v47 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Return", &v72, 0);
    v48 = v72;
    v49 = TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Mode", &v72, 0);
    v50 = v72;
    v51 = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:Function", __p, 0);
    v52 = LOBYTE(__p[0]);
    v53 = TXMPMeta<std::string>::GetProperty_Bool(a1, "http://ns.adobe.com/exif/1.0/", "Flash/exif:RedEyeMode", __p, 0);
    v54 = 2 * (v48 & 3);
    if (!v47)
      v54 = 0;
    if (v46)
      v55 = Property_Bool;
    else
      v55 = 0;
    v56 = v54 | v55;
    v57 = 8 * (v50 & 3);
    if (!v49)
      v57 = 0;
    v58 = v56 | v57;
    if (v51 && v52 != 0)
      v59 = v58 | 0x20;
    else
      v59 = v58;
    if (v53 && LOBYTE(__p[0]) != 0)
      v59 |= 0x40u;
    TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, 2, 37385, v59);
  }
  if (TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "FileSource", &v72, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 41728, 0) & 1) == 0)
  {
    HIBYTE(v71) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 32))(a2, 2, 41728, 7, 1, (char *)&v71 + 7);
  }
  if (TXMPMeta<std::string>::GetProperty_Int(a1, "http://ns.adobe.com/exif/1.0/", "SceneType", &v72, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 2, 41729, 0) & 1) == 0)
  {
    HIBYTE(v71) = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 32))(a2, 2, 41729, 7, 1, (char *)&v71 + 7);
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSVersionID", (uint64_t)&__str, 0)
    && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, 3, 0, 0) & 1) == 0)
  {
    LODWORD(v78.__r_.__value_.__l.__data_) = 0;
    __p[0] = 0;
    __p[1] = 0;
    v60 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__str
        : (std::string *)__str.__r_.__value_.__r.__words[0];
    if (sscanf((const char *)v60, "%u.%u.%u.%u", __p, (char *)__p + 4, &__p[1], (char *)&__p[1] + 4) == 4
      && LODWORD(__p[0]) <= 0xFF
      && HIDWORD(__p[0]) <= 0xFF
      && LODWORD(__p[1]) <= 0xFF
      && HIDWORD(__p[1]) <= 0xFF)
    {
      v78.__r_.__value_.__s.__data_[0] = (std::string::value_type)__p[0];
      v78.__r_.__value_.__s.__data_[1] = BYTE4(__p[0]);
      v78.__r_.__value_.__s.__data_[2] = (std::string::value_type)__p[1];
      v78.__r_.__value_.__s.__data_[3] = BYTE4(__p[1]);
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, 3, 0, 1, 4, &v78);
    }
  }
  ExportTIFF_GPSCoordinate(a1, "GPSLatitude", (void (**)(_QWORD, _QWORD))a2, 2);
  ExportTIFF_GPSCoordinate(a1, "GPSLongitude", (void (**)(_QWORD, _QWORD))a2, 4);
  v81 = 0;
  *(_OWORD *)__p = 0u;
  v80 = 0u;
  if (TXMPMeta<std::string>::GetProperty_Date(a1, "http://ns.adobe.com/exif/1.0/", "GPSTimeStamp", (__int128 *)__p, 0))
  {
    TXMPUtils<std::string>::ConvertToUTCTime((uint64_t)__p);
    memset(&v78, 0, sizeof(v78));
    (*(void (**)(_QWORD, std::string *))(a2 + 48))(HIDWORD(__p[1]), &v78);
    (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[4]);
    (*(void (**)(_QWORD, std::string::size_type *))(a2 + 48))(v80, &v78.__r_.__value_.__l.__size_);
    (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[12]);
    v61 = HIDWORD(v81);
    if (HIDWORD(v81))
    {
      v62 = DWORD1(v80);
      *(_QWORD *)v75 = 0;
      v76 = 0;
      v77 = 0;
      v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, 3, 7, v75);
      v64 = 1000000;
      if (*(unsigned __int16 *)&v75[2] == 5)
        v65 = v63;
      else
        v65 = 0;
      if (v65 == 1 && *(_DWORD *)&v75[4] == 3)
      {
        v66 = (*(uint64_t (**)(uint64_t))(a2 + 16))(v76 + 20);
        if (v66 == 1)
          v64 = 1000000;
        else
          v64 = v66;
      }
      for (i = ((double)v61 / 1000000000.0 + (double)v62) * (double)v64 + 0.5;
            i > 4000000000.0;
            v64 = v64 / 0xAuLL)
      {
        i = i / 10.0;
      }
      (*(void (**)(_QWORD, std::string::size_type *))(a2 + 48))(i, &v78.__r_.__value_.__r.__words[2]);
      (*(void (**)(unint64_t, std::string::value_type *))(a2 + 48))(v64, &v78.__r_.__value_.__s.__data_[20]);
    }
    else
    {
      (*(void (**)(_QWORD, std::string::size_type *))(a2 + 48))(DWORD1(v80), &v78.__r_.__value_.__r.__words[2]);
      (*(void (**)(uint64_t, std::string::value_type *))(a2 + 48))(1, &v78.__r_.__value_.__s.__data_[20]);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 32))(a2, 3, 7, 5, 3, &v78);
    *(_QWORD *)v75 = 0;
    v76 = 0;
    snprintf(v75, 0xCuLL, "%04d:%02d:%02d", LODWORD(__p[0]), HIDWORD(__p[0]), LODWORD(__p[1]));
    if (!BYTE2(v76))
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 32))(a2, 3, 29, 2, 11, v75);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, 3, 29);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "GPSDestLatitude")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 3, 20, 0) & 1) == 0)
  {
    ExportTIFF_GPSCoordinate(a1, "GPSDestLatitude", (void (**)(_QWORD, _QWORD))a2, 20);
  }
  if (TXMPMeta<std::string>::DoesPropertyExist(a1, "http://ns.adobe.com/exif/1.0/", "GPSDestLongitude")
    && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 3, 22, 0) & 1) == 0)
  {
    ExportTIFF_GPSCoordinate(a1, "GPSDestLongitude", (void (**)(_QWORD, _QWORD))a2, 22);
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSProcessingMethod", (uint64_t)&__str, 0))
  {
    v68 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v68 = __str.__r_.__value_.__l.__size_;
    if (v68
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 3, 27, 0) & 1) == 0)
    {
      ExportTIFF_EncodedString(a1, "GPSProcessingMethod", a2, 3, 27, 0);
    }
  }
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", "GPSAreaInformation", (uint64_t)&__str, 0))
  {
    v69 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v69 = __str.__r_.__value_.__l.__size_;
    if (v69
      && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 3, 28, 0) & 1) == 0)
    {
      ExportTIFF_EncodedString(a1, "GPSAreaInformation", a2, 3, 28, 0);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1880E0968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
  {
    if (a32 < 0)
      operator delete(__p);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1880E00ACLL);
  }
  _Unwind_Resume(exception_object);
}

void ExportTIFF_StandardMappings(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 *v6;
  int v7;
  uint64_t v8;
  __int16 *v9;
  int v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char *v15;
  __int16 *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  const char *p_p;
  char v24;
  uint64_t v25;
  uint64_t v26;
  std::vector<unsigned int>::pointer v27;
  const char *v28;
  __int16 v29;
  unsigned int v30;
  unint64_t v31;
  std::vector<unsigned int>::pointer v32;
  const char *v33;
  const char *v34;
  int v35;
  void *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  int v40;
  uint64_t v41;
  std::vector<unsigned int>::pointer begin;
  unint64_t v43;
  void **p_u;
  const char *v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *exception;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  int v55;
  void *__p;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  int v61[2];
  unsigned int v62[2];
  unsigned int v63[2];
  unsigned int v64[2];
  unsigned __int16 v65[6];
  char v66[3];
  char v67;
  unsigned int v68;
  unsigned int v69;
  void *v70[2];
  uint64_t v71;
  void **__u;
  uint64_t v73;
  uint64_t v74;
  std::vector<unsigned int> v75;

  v54 = a2[73];
  v55 = 0;
  memset(v59, 0, sizeof(v59));
  __p = 0;
  v57 = 0;
  v58 = 0;
  if ((_DWORD)a1)
  {
    if ((_DWORD)a1 == 3)
    {
      v6 = &sGPSInfoIFDMappings;
    }
    else
    {
      if ((_DWORD)a1 != 2)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Invalid IFD for standard mappings";
        *((_BYTE *)exception + 16) = 0;
      }
      v6 = &sExifIFDMappings;
    }
  }
  else
  {
    v6 = &sPrimaryIFDMappings;
  }
  v7 = (unsigned __int16)*v6;
  if (v7 != 0xFFFF)
  {
    v8 = 0;
    while (1)
    {
      v9 = &v6[16 * v8];
      v10 = *((unsigned __int8 *)v9 + 8);
      if (!*((_BYTE *)v9 + 8))
        goto LABEL_15;
      v11 = (char *)*((_QWORD *)v9 + 3);
      if (!*v11)
        goto LABEL_15;
      v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a2 + 24))(a2, a1, (unsigned __int16)v7, v59);
      v13 = v12;
      v14 = v10 == 3 ? v12 : 0;
      if ((v14 & 1) != 0)
        goto LABEL_15;
      v15 = *(char **)&v6[16 * v8 + 8];
      if (!TXMPMeta<std::string>::GetProperty(a3, v15, v11, (uint64_t)&__p, (uint64_t *)&v55))
        break;
      if (WORD1(v59[0]) == 7)
        __assert_rtn("ExportTIFF_StandardMappings", "ReconcileTIFF.cpp", 2701, "tagInfo.type != kTIFF_UndefinedType");
      v16 = &v6[16 * v8];
      v17 = *((_DWORD *)v16 + 1);
      if (v17 == 1 || (v18 = (unsigned __int16)v16[1], v18 == 2))
      {
        if ((v55 & 0x1F00) == 0)
        {
          v19 = (unsigned __int16)v6[16 * v8 + 1];
          if (v17 != 1 && v19 != 2)
          {
            v21 = 2517;
            v22 = "ExportSingleTIFF";
            v20 = "(mapInfo.count == 1) || (mapInfo.type == kTIFF_ASCIIType)";
            goto LABEL_117;
          }
          if (!*v11)
          {
            v21 = 2518;
            v22 = "ExportSingleTIFF";
            goto LABEL_115;
          }
          v67 = 0;
          v20 = "false";
          v21 = 2585;
          v22 = "ExportSingleTIFF";
          switch(v19)
          {
            case 0:
              *(_QWORD *)v63 = 0;
              if (v58 >= 0)
                p_p = (const char *)&__p;
              else
                p_p = (const char *)__p;
              if (sscanf(p_p, "%lu%c", v63, &v67) == 1)
              {
                if (*(_QWORD *)v63 >> 16)
                  TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, a1, (unsigned __int16)v7, *(uint64_t *)v63);
                else
                  TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, a1, (unsigned __int16)v7, LOWORD(v63[0]));
              }
              goto LABEL_15;
            case 1:
              *(_WORD *)v66 = 0;
              if (v58 >= 0)
                v34 = (const char *)&__p;
              else
                v34 = (const char *)__p;
              if (sscanf(v34, "%hu%c", v66, &v67) == 1)
                TIFF_Manager::SetTag_Byte((TIFF_Manager *)a2, a1, (unsigned __int16)v7, v66[0]);
              goto LABEL_15;
            case 2:
              v35 = HIBYTE(v58);
              if (v58 >= 0)
              {
                v36 = &__p;
              }
              else
              {
                v35 = v57;
                v36 = __p;
              }
              (*(void (**)(unsigned __int8 *, uint64_t, _QWORD, uint64_t, _QWORD, void *))(*(_QWORD *)a2 + 32))(a2, a1, (unsigned __int16)v7, 2, (v35 + 1), v36);
              goto LABEL_15;
            case 3:
              *(_QWORD *)v65 = 0;
              if (v58 >= 0)
                v38 = (const char *)&__p;
              else
                v38 = (const char *)__p;
              if (sscanf(v38, "%lu%c", v65, &v67) == 1)
                TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))a2, a1, (unsigned __int16)v7, v65[0]);
              goto LABEL_15;
            case 4:
              *(_QWORD *)v64 = 0;
              if (v58 >= 0)
                v33 = (const char *)&__p;
              else
                v33 = (const char *)__p;
              if (sscanf(v33, "%lu%c", v64, &v67) == 1)
                TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))a2, a1, (unsigned __int16)v7, v64[0]);
              goto LABEL_15;
            case 5:
              *(_QWORD *)v62 = 0;
              if (v58 >= 0)
                v37 = (const char *)&__p;
              else
                v37 = (const char *)__p;
              if (DecodeRational(v37, &v62[1], v62))
                TIFF_Manager::SetTag_Rational((void (**)(uint64_t, uint64_t *))a2, a1, (unsigned __int16)v7, v62[1], v62[0]);
              goto LABEL_15;
            case 10:
              v60 = 0;
              *(_QWORD *)v61 = 0;
              if (v58 >= 0)
                v39 = (const char *)&__p;
              else
                v39 = (const char *)__p;
              v40 = sscanf(v39, "%ld/%ld%c", v61, &v60, &v67);
              if (v40 == 1)
              {
                v41 = 1;
                v60 = 1;
              }
              else
              {
                if (v40 != 2)
                  goto LABEL_15;
                v41 = v60;
              }
              TIFF_Manager::SetTag_SRational((void (**)(uint64_t, uint64_t *))a2, a1, (unsigned __int16)v7, v61[0], v41);
              break;
            default:
              goto LABEL_117;
          }
        }
        goto LABEL_15;
      }
      if ((v55 & 0x200) != 0)
      {
        if (!*v11)
        {
          v21 = 2604;
          v22 = "ExportArrayTIFF";
LABEL_115:
          v20 = "mapInfo.name[0] != 0";
LABEL_117:
          __assert_rtn(v22, "ReconcileTIFF.cpp", v21, v20);
        }
        if (v18 != 5 && v18 != 3)
        {
          v21 = 2605;
          v22 = "ExportArrayTIFF";
          v20 = "(mapInfo.type == kTIFF_ShortType) || (mapInfo.type == kTIFF_RationalType)";
          goto LABEL_117;
        }
        if (!TXMPMeta<std::string>::DoesPropertyExist(a3, v15, v11))
        {
          v21 = 2606;
          v22 = "ExportArrayTIFF";
          v20 = "xmp.DoesPropertyExist(xmpNS, xmpArray)";
          goto LABEL_117;
        }
        v25 = TXMPMeta<std::string>::CountArrayItems(a3, v15, v11);
        if (!(_DWORD)v25)
          goto LABEL_35;
        v53 = (int)v25;
        if (v18 == 5)
        {
          v50 = v25;
          v52 = a3;
          memset(&v75, 0, sizeof(v75));
          LODWORD(__u) = 0;
          std::vector<unsigned int>::assign(&v75, 2 * (int)v25, (std::vector<unsigned int>::const_reference)&__u);
          begin = v75.__begin_;
          v73 = 0;
          v74 = 0;
          v70[0] = 0;
          v70[1] = 0;
          v71 = 0;
          __u = 0;
          v69 = 0;
          v43 = 1;
          v68 = 0;
          do
          {
            TXMPUtils<std::string>::ComposeArrayItemPath(v15, v11, v43, (uint64_t)&__u);
            if (v74 >= 0)
              p_u = (void **)&__u;
            else
              p_u = __u;
            if (!TXMPMeta<std::string>::GetProperty(v52, v15, p_u, (uint64_t)v70, 0)
              || (v71 >= 0 ? (v45 = (const char *)v70) : (v45 = (const char *)v70[0]),
                  !DecodeRational(v45, &v69, &v68)))
            {
              if (SHIBYTE(v71) < 0)
                operator delete(v70[0]);
              a3 = v52;
              if (SHIBYTE(v74) < 0)
                goto LABEL_104;
              goto LABEL_105;
            }
            v46 = v69;
            v47 = v68;
            if (!v54)
            {
              v46 = bswap32(v69);
              v69 = v46;
              v47 = bswap32(v68);
              v68 = v47;
            }
            *begin = v46;
            begin[1] = v47;
            begin += 2;
            ++v43;
          }
          while (v43 <= v53);
          (*(void (**)(unsigned __int8 *, uint64_t, _QWORD, uint64_t, uint64_t, std::vector<unsigned int>::pointer))(*(_QWORD *)a2 + 32))(a2, a1, (unsigned __int16)v7, 5, v50, v75.__begin_);
          a3 = v52;
          if (SHIBYTE(v71) < 0)
            operator delete(v70[0]);
          if (SHIBYTE(v74) < 0)
LABEL_104:
            operator delete(__u);
LABEL_105:
          v32 = v75.__begin_;
          if (!v75.__begin_)
            goto LABEL_15;
          v75.__end_ = v75.__begin_;
        }
        else
        {
          v49 = v25;
          v51 = a3;
          memset(&v75, 0, sizeof(v75));
          LOWORD(__u) = 0;
          std::vector<unsigned short>::assign((char **)&v75, (int)v25, &__u);
          v26 = 0;
          v27 = v75.__begin_;
          __u = 0;
          v73 = 0;
          v74 = 0;
          LODWORD(v70[0]) = 0;
          do
          {
            TXMPUtils<std::string>::ComposeArrayItemPath(v15, v11, v26 + 1, (uint64_t)&__u);
            if (v74 >= 0)
              v28 = (const char *)&__u;
            else
              v28 = (const char *)__u;
            TXMPMeta<std::string>::GetProperty_Int(v51, v15, v28, (int *)v70, 0);
            v29 = (__int16)v70[0];
            v30 = bswap32(LOWORD(v70[0])) >> 16;
            if (!v54)
              v29 = v30;
            *((_WORD *)v27 + v26) = v29;
            v31 = v26 + 2;
            ++v26;
          }
          while (v31 <= v53);
          (*(void (**)(unsigned __int8 *, uint64_t, _QWORD, uint64_t, uint64_t, std::vector<unsigned int>::pointer))(*(_QWORD *)a2 + 32))(a2, a1, (unsigned __int16)v7, 3, v49, v75.__begin_);
          a3 = v51;
          if (SHIBYTE(v74) < 0)
            operator delete(__u);
          v32 = v75.__begin_;
          if (!v75.__begin_)
            goto LABEL_15;
          v75.__end_ = v75.__begin_;
        }
        operator delete(v32);
      }
LABEL_15:
      ++v8;
      v7 = (unsigned __int16)v6[16 * v8];
      if (v7 == 0xFFFF)
      {
        if (SHIBYTE(v58) < 0)
          operator delete(__p);
        return;
      }
    }
    v24 = v13 ^ 1;
    if (v10 != 1)
      v24 = 1;
    if ((v24 & 1) != 0)
      goto LABEL_15;
LABEL_35:
    (*(void (**)(unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, a1, (unsigned __int16)v7);
    goto LABEL_15;
  }
}

void sub_1880E12E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ExportTIFF_LocTextASCII(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  void *p_p;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  __p = 0;
  v9 = 0;
  v10 = 0;
  if (TXMPMeta<std::string>::GetLocalizedText(a1, "http://purl.org/dc/elements/1.1/", a2, "", "x-default", 0, (uint64_t)&__p, 0))
  {
    v6 = HIBYTE(v10);
    if (v10 >= 0)
    {
      p_p = &__p;
    }
    else
    {
      v6 = v9;
      p_p = __p;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, void *))(*(_QWORD *)a3 + 32))(a3, 0, a4, 2, (v6 + 1), p_p);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 40))(a3, 0, a4);
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_1880E13CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880E13BCLL);
}

void ExportTIFF_EncodedString(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  void *__p[2];
  char v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", a2, (uint64_t)&v20, (uint64_t *)&v19))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a4, a5);
    goto LABEL_22;
  }
  if ((a6 & 1) != 0)
  {
    if ((v19 & 0x1000) == 0
      || !TXMPMeta<std::string>::GetLocalizedText(a1, "http://ns.adobe.com/exif/1.0/", a2, "", "x-default", 0, (uint64_t)&v20, 0))
    {
      goto LABEL_22;
    }
  }
  else if ((v19 & 0x1F00) != 0)
  {
    goto LABEL_22;
  }
  v12 = HIBYTE(v22);
  if (v22 < 0)
    v12 = v21;
  if (v12)
  {
    v13 = (char *)&v20;
    if (v22 < 0)
      v13 = (char *)v20;
    while (1)
    {
      v14 = *v13++;
      if (v14 < 0)
        break;
      if (!--v12)
        goto LABEL_15;
    }
    v15 = 2;
  }
  else
  {
LABEL_15:
    v15 = 1;
  }
  if (v22 >= 0)
    v16 = (char *)&v20;
  else
    v16 = (char *)v20;
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 176))(a3, a4, a5, __p, v15);
  if (v18 < 0)
    operator delete(__p[0]);
LABEL_22:
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
}

void sub_1880E155C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880E1544);
}

void ExportTIFF_Date(uint64_t a1, _BYTE *a2, _BYTE *a3, TIFF_Manager *a4, uint64_t a5)
{
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  char __s[8];
  uint64_t v24;
  char *__s1;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  char __str[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5 == 306)
    v7 = 37520;
  else
    v7 = 0;
  if ((_DWORD)a5 == 306)
    v8 = 36880;
  else
    v8 = 0;
  if ((_DWORD)a5 == 306)
    v9 = 0;
  else
    v9 = 2;
  if ((_DWORD)a5 == 36867)
    v10 = 37521;
  else
    v10 = v7;
  if ((_DWORD)a5 == 36867)
    v11 = 36881;
  else
    v11 = v8;
  if ((_DWORD)a5 == 36867)
    v9 = 2;
  v30 = 0;
  v31 = 0;
  if ((_DWORD)a5 == 36868)
    v12 = 37522;
  else
    v12 = v10;
  if ((_DWORD)a5 == 36868)
    v13 = 36882;
  else
    v13 = v11;
  v32 = 0;
  if ((_DWORD)a5 == 36868)
    v14 = 2;
  else
    v14 = v9;
  if (TXMPMeta<std::string>::GetProperty(a1, a2, a3, (uint64_t)&v30, 0))
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    if (v32 >= 0)
      v15 = (char *)&v30;
    else
      v15 = v30;
    TXMPUtils<std::string>::ConvertToDate(v15, (uint64_t)&v27);
    *(_QWORD *)__str = 0;
    v34 = 0;
    v35 = 0;
    snprintf(__str, 0x18uLL, "%04d:%02d:%02d %02d:%02d:%02d", (_DWORD)v27, DWORD1(v27), DWORD2(v27), HIDWORD(v27), (_DWORD)v28, DWORD1(v28));
    v16 = HIBYTE(v32);
    if (v32 < 0)
      v16 = v31;
    if (v16 <= 0x11)
    {
      *(_WORD *)((char *)&v35 + 1) = 8224;
      if (v16 <= 0xE)
      {
        HIWORD(v34) = 8224;
        if (v16 <= 0xB)
        {
          *(_WORD *)((char *)&v34 + 3) = 8224;
          if (v16 <= 8)
          {
            LOWORD(v34) = 8224;
            if (v16 <= 5)
            {
              *(_WORD *)&__str[5] = 8224;
              if (!v16)
                *(_DWORD *)__str = 538976288;
            }
          }
        }
      }
    }
    TIFF_Manager::SetTag_ASCII(a4, v14, a5, __str);
    if (HIDWORD(v29))
    {
      snprintf(__str, 0x18uLL, "%09d", HIDWORD(v29));
      v17 = strlen(__str);
      v18 = v17 - 1;
      if (v17 != 1)
      {
        do
        {
          if (__str[v18] != 48)
            break;
          __str[v18--] = 0;
        }
        while (v18);
      }
      TIFF_Manager::SetTag_ASCII(a4, 2, v12, __str);
    }
    else
    {
      (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, 2, v12);
    }
    v24 = 0;
    __s1 = 0;
    v26 = 0;
    v19 = (*(uint64_t (**)(TIFF_Manager *, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a4 + 24))(a4, 2, 36864, &v24);
    if (WORD1(v24) == 7)
      v20 = v19;
    else
      v20 = 0;
    v21 = v20 == 1 && HIDWORD(v24) == 4;
    if (v21 && (strncmp(__s1, "0231", 4uLL) & 0x80000000) == 0)
    {
      if (BYTE10(v28) && (BYTE11(v28) == 1 || BYTE11(v28) == 255))
      {
        *(_DWORD *)&__s[3] = 0;
        *(_DWORD *)__s = 0;
        v22 = 43;
        if (BYTE11(v28) == 255)
          v22 = 45;
        snprintf(__s, 7uLL, "%c%02d:%02d", v22, HIDWORD(v28), v29);
        TIFF_Manager::SetTag_ASCII(a4, 2, v13, __s);
      }
      else
      {
        (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, 2, v13);
      }
    }
  }
  else
  {
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, v14, a5);
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, 2, v12);
    (*(void (**)(TIFF_Manager *, uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, 2, v13);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
}

void sub_1880E18FC(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (*(char *)(v2 - 81) < 0)
      operator delete(*(void **)(v2 - 104));
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1880E18C8);
  }
  _Unwind_Resume(exception_object);
}

void ExportTIFF_GPSCoordinate(uint64_t a1, _BYTE *a2, void (**a3)(_QWORD, _QWORD), uint64_t a4)
{
  void **i;
  int v7;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *j;
  int v21;
  int v22;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v29;
  int v30;
  __int16 v31;
  int v32;
  void *__p[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) != 0)
    ExportTIFF_GPSCoordinate();
  __p[0] = 0;
  __p[1] = 0;
  v34 = 0;
  v32 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/exif/1.0/", a2, (uint64_t)__p, (uint64_t *)&v32))
  {
    (*((void (**)(void (**)(_QWORD, _QWORD), uint64_t, _QWORD))*a3 + 5))(a3, 3, (unsigned __int16)(a4 - 1));
    (*((void (**)(void (**)(_QWORD, _QWORD), uint64_t, uint64_t))*a3 + 5))(a3, 3, a4);
    goto LABEL_41;
  }
  if ((v32 & 0x1F00) == 0)
  {
    i = __p;
    if (v34 < 0)
      i = (void **)__p[0];
    do
    {
      i = (void **)((char *)i + 1);
      v7 = *((unsigned __int8 *)i - 1);
    }
    while (v7 == 32 || v7 == 9);
    if ((v7 - 58) >= 0xFFFFFFF6)
    {
      LODWORD(v9) = 0;
      do
      {
        v9 = (v7 + 10 * v9 - 48);
        v10 = *(unsigned __int8 *)i;
        i = (void **)((char *)i + 1);
        v7 = v10;
      }
      while ((v10 - 48) < 0xA);
      while (1)
      {
        if (v7 <= 31)
        {
          if (v7 != 9)
            goto LABEL_20;
        }
        else if (v7 != 32)
        {
          if (v7 != 44 && v7 != 59)
LABEL_20:
            i = (void **)((char *)i - 1);
          while (1)
          {
            v12 = *(unsigned __int8 *)i;
            if (v12 != 32 && v12 != 9)
              break;
            i = (void **)((char *)i + 1);
          }
          if ((v12 - 48) > 9)
          {
            v14 = 0;
            goto LABEL_45;
          }
          LODWORD(v14) = 0;
          i = (void **)((char *)i + 1);
          do
          {
            v14 = (v12 + 10 * v14 - 48);
            v15 = *(unsigned __int8 *)i;
            i = (void **)((char *)i + 1);
            v12 = v15;
          }
          while ((v15 - 48) < 0xA);
          if (v12 == 46)
          {
            v12 = *(unsigned __int8 *)i;
            if ((v12 - 48) <= 9)
            {
              LODWORD(v16) = 1;
              do
              {
                v17 = v12 + 10 * v14 - 48;
                if (v16 <= 0x186A0)
                  v14 = v17;
                else
                  v14 = v14;
                if (v16 <= 0x186A0)
                  v16 = (10 * v16);
                else
                  v16 = v16;
                v18 = *((unsigned __int8 *)i + 1);
                i = (void **)((char *)i + 1);
                v12 = v18;
              }
              while ((v18 - 48) < 0xA);
              v19 = 0;
              goto LABEL_47;
            }
            goto LABEL_45;
          }
          for (i = (void **)((char *)i - 1); ; i = (void **)((char *)i + 1))
          {
            v29 = *(unsigned __int8 *)i;
            if (v29 <= 0x1F)
            {
              if (v29 != 9)
                goto LABEL_79;
            }
            else if (v29 != 32)
            {
              if (v29 == 44 || v29 == 59)
                goto LABEL_78;
LABEL_79:
              while (1)
              {
                v12 = *(unsigned __int8 *)i;
                if (v12 != 9 && v12 != 32)
                  break;
LABEL_78:
                i = (void **)((char *)i + 1);
              }
              if ((v12 - 48) <= 9)
              {
                LODWORD(v19) = 0;
                do
                {
                  v19 = (v12 + 10 * v19 - 48);
                  v30 = *((unsigned __int8 *)i + 1);
                  i = (void **)((char *)i + 1);
                  v12 = v30;
                }
                while ((v30 - 48) < 0xA);
LABEL_46:
                v16 = 1;
LABEL_47:
                for (j = (unsigned __int8 *)i + 1; ; ++j)
                {
                  if (v12 <= 31)
                  {
                    if (v12 != 9)
                      goto LABEL_55;
                  }
                  else if (v12 != 32)
                  {
                    if (v12 != 44 && v12 != 59)
LABEL_55:
                      --j;
                    while (1)
                    {
                      v22 = *j;
                      if (v22 != 32 && v22 != 9)
                        break;
                      ++j;
                    }
                    v31 = 0;
                    v24 = *j;
                    LOBYTE(v31) = v24;
                    if ((v24 - 97) <= 0x19)
                    {
                      LOBYTE(v24) = v24 - 32;
                      LOBYTE(v31) = v24;
                    }
                    v25 = v24 - 69;
                    v26 = v25 > 0x12;
                    v27 = (1 << v25) & 0x44201;
                    if (!v26 && v27 != 0)
                    {
                      (*((void (**)(void (**)(_QWORD, _QWORD), uint64_t, _QWORD, uint64_t, uint64_t, __int16 *))*a3
                       + 4))(a3, 3, (unsigned __int16)(a4 - 1), 2, 2, &v31);
                      v35 = 0;
                      v36 = 0;
                      v37[0] = 0;
                      ((void (**)(uint64_t, uint64_t *))a3)[6](v9, &v35);
                      ((void (**)(uint64_t, char *))a3)[6](1, (char *)&v35 + 4);
                      ((void (**)(uint64_t, uint64_t *))a3)[6](v14, &v36);
                      ((void (**)(uint64_t, char *))a3)[6](v16, (char *)&v36 + 4);
                      ((void (**)(uint64_t, _QWORD *))a3)[6](v19, v37);
                      ((void (**)(uint64_t, char *))a3)[6](1, (char *)v37 + 4);
                      (*((void (**)(void (**)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))*a3
                       + 4))(a3, 3, a4, 5, 3, &v35);
                    }
                    goto LABEL_41;
                  }
                  v21 = *j;
                  v12 = v21;
                }
              }
LABEL_45:
              v19 = 0;
              goto LABEL_46;
            }
          }
        }
        v11 = *(unsigned __int8 *)i;
        i = (void **)((char *)i + 1);
        v7 = v11;
      }
    }
  }
LABEL_41:
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
}

unint64_t TrimTrailingSpaces(char *a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  unint64_t result;
  _BYTE *v5;

  if (!a2)
    return 0;
  if ((a1[a2 - 1] | 0x20) != 0x20)
    return a2;
  if (a2 < 1)
    TrimTrailingSpaces();
  v2 = a1 - 1;
  v3 = a2;
  while ((v2[v3] | 0x20) == 0x20)
  {
    if (--v3 < 1)
      goto LABEL_11;
  }
  v2 = &a1[v3 - 1];
LABEL_11:
  v5 = v2 + 1;
  result = v5 - a1;
  if (result > a2)
    TrimTrailingSpaces();
  if (result < a2)
    *v5 = 0;
  return result;
}

uint64_t DecodeRational(const char *a1, unsigned int *a2, unsigned int *a3)
{
  int v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v9 = 0;
  v8 = 0;
  v5 = sscanf(a1, "%lu/%lu%c", &v10, &v9, &v8);
  if (v5 == 1)
    goto LABEL_4;
  v6 = 0;
  if (v5 == 2)
  {
    v5 = v9;
LABEL_4:
    *a2 = v10;
    *a3 = v5;
    return 1;
  }
  return v6;
}

char *std::vector<unsigned short>::assign(char **a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  result = *a1;
  if (a2 <= (uint64_t)(v6 - (_QWORD)result) >> 1)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 1;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 1;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_WORD *)v16 = *a3;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[2 * a2];
    }
    else
    {
      v17 = &v13[2 * (a2 - v14)];
      v18 = 2 * a2 - 2 * v14;
      do
      {
        *(_WORD *)v13 = *a3;
        v13 += 2;
        v18 -= 2;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    if (v6 <= a2)
      v8 = a2;
    else
      v8 = v6;
    if (v6 >= 0x7FFFFFFFFFFFFFFELL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<unsigned short>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[2 * a2];
    v12 = 2 * a2;
    do
    {
      *(_WORD *)v10 = *a3;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<unsigned int>::assign(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __u)
{
  uint64_t value;
  unsigned int *begin;
  std::vector<unsigned int>::size_type v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer v10;
  unsigned int *v11;
  std::vector<unsigned int>::size_type v12;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v14;
  std::vector<unsigned int>::size_type v15;
  unsigned int *v16;
  unsigned int *v17;
  std::vector<unsigned int>::size_type v18;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    end = this->__end_;
    v14 = end - begin;
    if (v14 >= __n)
      v15 = __n;
    else
      v15 = end - begin;
    if (v15)
    {
      v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v17 = &end[__n - v14];
      v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v8 = value >> 1;
    if (value >> 1 <= __n)
      v8 = __n;
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, v9);
    v10 = this->__end_;
    v11 = &v10[__n];
    v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void PhotoDataUtils::GetNativeInfo()
{
  __assert_rtn("GetNativeInfo", "ReconcileTIFF.cpp", 284, "(info->dataPtr != 0) || (info->dataLen == 0)");
}

void ImportConversionTable()
{
  __assert_rtn("ImportConversionTable", "ReconcileTIFF.cpp", 1505, "(tagInfo.id == kTIFF_OECF) || (tagInfo.id == kTIFF_SpatialFrequencyResponse)");
}

void ExportTIFF_GPSCoordinate()
{
  __assert_rtn("ExportTIFF_GPSCoordinate", "ReconcileTIFF.cpp", 2992, "(locID & 1) == 0");
}

void TrimTrailingSpaces()
{
  __assert_rtn("TrimTrailingSpaces", "ReconcileTIFF.cpp", 250, "newLen <= origLen");
}

{
  __assert_rtn("TrimTrailingSpaces", "ReconcileTIFF.cpp", 247, "(lastChar == firstChar-1) || ((lastChar >= firstChar) && (*lastChar != ' ') && (*lastChar != 0))");
}

_QWORD *AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x634172724E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 808));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634172724E6F6465, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 0x27u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 816)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634172724E6F6465, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 0x31u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_1880E2340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IArrayNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x2F0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IArrayNode_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IArrayNode_I::getInterfacePointer((AdobeXMPCore_Int::IArrayNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getArrayForm(AdobeXMPCore_Int::IArrayNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::IArrayNode_v1::eArrayForm>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 808), 0, (uint64_t (*)(_QWORD *))0x280, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::IArrayNode_v1::eArrayForm>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getChildNodeType(AdobeXMPCore_Int::IArrayNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 808), 0, (uint64_t (*)(_QWORD *))0x288, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IArrayNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::getNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 808), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x290, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 67, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880E2890(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880E2874);
}

void sub_1880E298C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IArrayNode_I::insertNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v7 = *(_QWORD *)(*(_QWORD *)this - 808);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v11);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IArrayNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(a4, (uint64_t)this + v7, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x298, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 72, (uint64_t)&v11, a3);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1880E2A4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IArrayNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v8 = a3;
  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a3);
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::removeNodeAtIndex(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,unsigned long long>(a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 808), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x2A8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 77, a2);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::replaceNodeAtIndex(AdobeXMPCore_Int::IArrayNode_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v7 = *(_QWORD *)(*(_QWORD *)this - 808);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v13);
  v8 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x2A0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IArrayNode_I.cpp", 82, (uint64_t)&v13, a3);
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_1880E2C3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1880E2D64(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880E2D48);
}

void sub_1880E2E60(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::GetISharedObject_I(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 832);
}

uint64_t AdobeXMPCore_Int::IArrayNode_I::GetActualIArrayNode(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 808);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IArrayNode_I::GetISharedObject_I(AdobeXMPCore_Int::IArrayNode_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 832);
}

uint64_t GIF_MetaHandlerCTor(XMPFiles *a1)
{
  uint64_t v2;

  v2 = operator new();
  XMPFileHandler::XMPFileHandler((XMPFileHandler *)v2);
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)v2 = &off_1E1BB0148;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = 1131;
  *(_BYTE *)(v2 + 20) = 0;
  return v2;
}

void sub_1880E2F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C402E77A007);
  _Unwind_Resume(a1);
}

BOOL GIF_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int16 v7;

  if (a1 != 1195984416)
    GIF_CheckFormat();
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) < 6)
    return 0;
  v7 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0, 0);
  (**(void (***)(uint64_t, int *, uint64_t, _QWORD))a3)(a3, &v6, 6, 0);
  return v6 == 944130375 && v7 == 24889;
}

void GIF_MetaHandler::~GIF_MetaHandler(void **this)
{
  XMPFileHandler::~XMPFileHandler(this);
  JUMPOUT(0x18D761C30);
}

uint64_t GIF_MetaHandler::CacheFileData(GIF_MetaHandler *this)
{
  uint64_t (***v2)(_QWORD, char *, uint64_t, uint64_t);
  uint64_t result;
  char *v4;
  std::string *v5;

  *((_BYTE *)this + 21) = 0;
  v2 = *(uint64_t (****)(_QWORD, char *, uint64_t, uint64_t))(*((_QWORD *)this + 1) + 232);
  result = GIF_MetaHandler::ParseGIFBlocks((uint64_t)this, v2);
  if ((_DWORD)result)
  {
    v4 = (char *)this + 56;
    v5 = std::string::assign((std::string *)((char *)this + 56), *((unsigned int *)this + 26), 32);
    GIF_MetaHandler::SeekFile((uint64_t)v5, (uint64_t)v2, *((_QWORD *)this + 12), 0);
    if (*((char *)this + 79) < 0)
      v4 = *(char **)v4;
    result = (**v2)(v2, v4, *((unsigned int *)this + 26), 1);
    *((_QWORD *)this + 4) = *((_QWORD *)this + 12);
    *((_DWORD *)this + 10) = *((_DWORD *)this + 26);
    *((_BYTE *)this + 21) = 1;
  }
  return result;
}

uint64_t GIF_MetaHandler::ParseGIFBlocks(uint64_t a1, uint64_t (***a2)(_QWORD, char *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *exception;
  unsigned __int8 v22;
  char v23[6];
  unsigned __int8 v24;
  char v25;
  int v26;
  __int16 v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  ((void (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, _QWORD))(*a2)[2])(a2, 0, 0);
  v27 = 0;
  v26 = 0;
  v4 = (**a2)(a2, (char *)&v26, 6, 0);
  if (v26 != 944130375 || v27 != 24889)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "XMP_Enforce failed: (memcmp( buffer, \"\\x47\\x49\\x46\\x38\\x39\\x61\", 6) == 0) in /Library/Caches"
                   "/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPFiles/source/FileHandlers/GIF_Handler.cpp at line 158";
    *((_BYTE *)exception + 16) = 0;
  }
  GIF_MetaHandler::ReadLogicalScreenDesc(v4, a2);
  v6 = ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, uint64_t))(*a2)[2])(a2, 0, 1);
  if (v6 == ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t)))(*a2)[3])(a2))
  {
LABEL_33:
    v17 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v17 = 108;
    v17[1] = "No trailer exists for GIF file";
    *((_BYTE *)v17 + 16) = 0;
  }
  v7 = 0;
  while (1)
  {
    v25 = 0;
    v8 = (**a2)(a2, &v25, 1, 0);
    if (v25 == 33)
    {
      v24 = 0;
      *(_DWORD *)v23 = 0;
      (**a2)(a2, (char *)&v24, 1, 0);
      v11 = (**a2)(a2, v23, 1, 0);
      v12 = *(unsigned int *)v23;
      if (v24 == 255 && *(unsigned int *)v23 == 11)
      {
        memset(v28, 0, 11);
        (**a2)(a2, (char *)v28, 11, 1);
        if (v28[0] == 0x6174614420504D58 && *(_QWORD *)((char *)v28 + 3) == 0x504D586174614420)
        {
          *(_QWORD *)(a1 + 96) = ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, uint64_t))(*a2)[2])(a2, 0, 1);
          v7 = 1;
        }
        v22 = 0;
        v14 = (**a2)(a2, (char *)&v22, 1, 0);
        while (v22)
        {
          GIF_MetaHandler::SeekFile(v14, (uint64_t)a2, v22, 1);
          v14 = (**a2)(a2, (char *)&v22, 1, 0);
        }
        if ((v7 & 1) != 0)
        {
          v15 = ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, uint64_t))(*a2)[2])(a2, 0, 1)- *(_QWORD *)(a1 + 96);
          if (v15 <= 257)
          {
            v20 = __cxa_allocate_exception(0x18uLL);
            *(_DWORD *)v20 = 108;
            v20[1] = "corrupt GIF File.";
            *((_BYTE *)v20 + 16) = 0;
          }
          *(_DWORD *)(a1 + 104) = v15 - 258;
        }
      }
      else
      {
        for (; *(_DWORD *)v23; v12 = *(unsigned int *)v23)
        {
          GIF_MetaHandler::SeekFile(v11, (uint64_t)a2, v12, 1);
          v11 = (**a2)(a2, v23, 1, 0);
        }
      }
      goto LABEL_32;
    }
    if (v25 != 44)
      break;
    LOBYTE(v28[0]) = 0;
    GIF_MetaHandler::SeekFile(v8, (uint64_t)a2, 8, 1);
    v9 = (**a2)(a2, (char *)v28, 1, 0);
    if (SLOBYTE(v28[0]) < 0)
      v9 = GIF_MetaHandler::SeekFile(v9, (uint64_t)a2, 3 << ((v28[0] & 7) + 1), 1);
    GIF_MetaHandler::SeekFile(v9, (uint64_t)a2, 1, 1);
    v23[0] = 0;
    v10 = (**a2)(a2, v23, 1, 0);
    while (v23[0])
    {
      GIF_MetaHandler::SeekFile(v10, (uint64_t)a2, v23[0], 1);
      v10 = (**a2)(a2, v23, 1, 0);
    }
LABEL_32:
    v16 = ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, uint64_t))(*a2)[2])(a2, 0, 1);
    if (v16 == ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t)))(*a2)[3])(a2))
      goto LABEL_33;
  }
  if (v25 != 59)
  {
    v19 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v19 = 116;
    v19[1] = "Invaild GIF Block";
    *((_BYTE *)v19 + 16) = 0;
  }
  *(_QWORD *)(a1 + 112) = ((uint64_t (*)(uint64_t (***)(_QWORD, char *, uint64_t, uint64_t), _QWORD, uint64_t))(*a2)[2])(a2, 0, 1)- 1;
  return v7 & 1;
}

uint64_t GIF_MetaHandler::SeekFile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *exception;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) < a3
    || (_DWORD)a4 == 1
    && (v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) + a3,
        v7 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Out of range seek operation";
    *((_BYTE *)exception + 16) = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3, a4);
}

void GIF_MetaHandler::ProcessXMP(GIF_MetaHandler *this)
{
  uint64_t v2;
  char *v3;

  *((_BYTE *)this + 22) = 1;
  v2 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
  {
    if (!*((_QWORD *)this + 8))
      return;
  }
  else if (!*((_BYTE *)this + 79))
  {
    return;
  }
  if (!*((_BYTE *)this + 21))
    GIF_MetaHandler::ProcessXMP();
  if ((v2 & 0x80) != 0)
  {
    v3 = (char *)*((_QWORD *)this + 7);
    v2 = *((_QWORD *)this + 8);
  }
  else
  {
    v3 = (char *)this + 56;
  }
  TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v3, v2, 0);
  *((_BYTE *)this + 21) = 1;
}

uint64_t GIF_MetaHandler::ReadLogicalScreenDesc(uint64_t a1, uint64_t (***a2)(_QWORD, char *, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v5 = 0;
  GIF_MetaHandler::SeekFile(a1, (uint64_t)a2, 4, 1);
  v3 = (**a2)(a2, &v5, 1, 0);
  result = GIF_MetaHandler::SeekFile(v3, (uint64_t)a2, 2, 1);
  if (v5 < 0)
    return GIF_MetaHandler::SeekFile(result, (uint64_t)a2, 3 << ((v5 & 7u) + 1), 1);
  return result;
}

uint64_t GIF_MetaHandler::UpdateFile(uint64_t this, int a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *exception;

  if (a2)
    GIF_MetaHandler::UpdateFile();
  v2 = (_BYTE *)this;
  if (*(_BYTE *)(this + 23))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 232);
    if (*(char *)(this + 79) < 0)
      v4 = *(_QWORD *)(this + 64);
    else
      v4 = *(unsigned __int8 *)(this + 79);
    if (*(_DWORD *)(this + 104) == (_DWORD)v4)
    {
      v5 = (_QWORD *)(this + 56);
      GIF_MetaHandler::SeekFile(this, *(_QWORD *)(*(_QWORD *)(this + 8) + 232), *(_QWORD *)(this + 32), 0);
      if ((char)v2[79] < 0)
        v5 = (_QWORD *)*v5;
      this = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v3 + 8))(v3, v5, v4);
    }
    else
    {
      v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 40))(*(_QWORD *)(*(_QWORD *)(this + 8) + 232));
      if (!v6)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 9;
        exception[1] = "Failure creating GIF temp file";
        *((_BYTE *)exception + 16) = 0;
      }
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v2 + 80))(v2, v6);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    }
    v2[23] = 0;
  }
  return this;
}

void GIF_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v10;
  char v11;
  char v12;
  char v13;

  if (!*(_BYTE *)(a1 + 23))
    GIF_MetaHandler::WriteTempFile();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
  if (*(_QWORD *)(a1 + 96))
  {
    XIO::Copy(v4, a2);
    if (*(char *)(a1 + 79) < 0)
    {
      v5 = *(_QWORD *)(a1 + 56);
      v6 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v5 = a1 + 56;
      v6 = *(unsigned __int8 *)(a1 + 79);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v5, v6);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, *(unsigned int *)(a1 + 104), 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, 0, 1);
    XIO::Copy(v4, a2);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 112))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 108;
      exception[1] = "Not able to write XMP packet in GIF file";
      *((_BYTE *)exception + 16) = 0;
    }
    XIO::Copy(v4, a2);
    v11 = 33;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v11, 1);
    v12 = -1;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v12, 1);
    v13 = 11;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v13, 1);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, "XMP DataXMP", 11);
    if (*(char *)(a1 + 79) < 0)
    {
      v7 = *(_QWORD *)(a1 + 56);
      v8 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v7 = a1 + 56;
      v8 = *(unsigned __int8 *)(a1 + 79);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, v7, v8);
    v10 = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v10, 1);
    v10 = -1;
    do
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v10, 1);
      --v10;
    }
    while (v10);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v10, 1);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v10, 1);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 16))(v4, 0, 1);
    XIO::Copy(v4, a2);
  }
}

void GIF_CheckFormat()
{
  __assert_rtn("GIF_CheckFormat", "GIF_Handler.cpp", 58, "format == kXMP_GIFFile");
}

void GIF_MetaHandler::ProcessXMP()
{
  __assert_rtn("ProcessXMP", "GIF_Handler.cpp", 134, "this->containsXMP");
}

void GIF_MetaHandler::UpdateFile()
{
  __assert_rtn("UpdateFile", "GIF_Handler.cpp", 335, "!doSafeUpdate");
}

void GIF_MetaHandler::WriteTempFile()
{
  __assert_rtn("WriteTempFile", "GIF_Handler.cpp", 368, "this->needsUpdate");
}

BOOL WXMPFiles_Initialize_1(XMPFiles *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  result = XMPFiles::Initialize(a1, 0, 0, a4);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

void WXMPFiles_Terminate_1(XMPFiles *a1)
{
  if (voidResult(void)::onceToken != -1)
    dispatch_once(&voidResult(void)::onceToken, &__block_literal_global_43);
  *(_QWORD *)gVoidResult = 0;
  XMPFiles::Terminate(a1);
}

void sub_1880E3CA4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

XMPFiles *WXMPFiles_CTor_1(_QWORD *a1)
{
  XMPFiles *v2;
  XMPFiles *result;
  int v4;

  *a1 = 0;
  v2 = (XMPFiles *)operator new();
  result = XMPFiles::XMPFiles(v2);
  v4 = *((_DWORD *)v2 + 2);
  *((_DWORD *)v2 + 2) = v4 + 1;
  if (v4)
    __assert_rtn("WXMPFiles_CTor_1", "WXMPFiles.cpp", 109, "newObj->clientRefs == 1");
  a1[1] = v2;
  return result;
}

void sub_1880E3D30(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  const char *v11;

  v4 = v3;
  MEMORY[0x18D761C30](v4, 0x10B3C403726CC03);
  if (a2 == 3)
  {
    v7 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v7;
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      v8 = "";
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = "XMP";
  }
  else
  {
    v9 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 16))(v9);
      v11 = "";
      if (v10)
        v11 = (const char *)v10;
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      v11 = "Caught unknown exception";
    }
    *(_QWORD *)v2 = v11;
  }
  __cxa_end_catch();
}

void WXMPFiles_DecrementRefCount_1(_DWORD *a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  XMP_ReadWriteLock *v5;

  if (voidResult(void)::onceToken != -1)
    dispatch_once(&voidResult(void)::onceToken, &__block_literal_global_43);
  v2 = (_QWORD *)gVoidResult;
  v5 = (XMP_ReadWriteLock *)(a1 + 4);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 4), 1);
  *v2 = 0;
  v3 = a1[2];
  if (v3 <= 0)
    __assert_rtn("WXMPFiles_DecrementRefCount_1", "WXMPFiles.cpp", 135, "thiz->clientRefs > 0");
  v4 = v3 - 1;
  a1[2] = v4;
  if (!v4)
  {
    XMP_ReadWriteLock::Release((XMP_ReadWriteLock *)(a1 + 4));
    v5 = 0;
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  }
  XMP_AutoLock::~XMP_AutoLock(&v5);
}

void sub_1880E3EC4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1880E3E6CLL);
}

void sub_1880E3ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPFiles_OpenFile_2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  XMP_ReadWriteLock *v10;

  v10 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 32) = XMPFiles::OpenFile(a1, a2, a3, a4);
  XMP_AutoLock::~XMP_AutoLock(&v10);
}

void WXMPFiles_CloseFile_1(uint64_t a1, char a2, _QWORD *a3)
{
  XMP_ReadWriteLock *v6;

  v6 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a3 = 0;
  XMPFiles::CloseFile((XMPFiles *)a1, a2);
  XMP_AutoLock::~XMP_AutoLock(&v6);
}

void WXMPFiles_PutXMP_1(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, _QWORD *a5)
{
  _QWORD v10[2];
  XMP_ReadWriteLock *v11;

  v11 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *a5 = 0;
  if (a2)
  {
    TXMPMeta<std::string>::TXMPMeta(v10, a2);
    XMPFiles::PutXMP(a1, (uint64_t)v10);
    TXMPMeta<std::string>::~TXMPMeta(v10);
  }
  else
  {
    XMPFiles::PutXMP((XMPFiles *)a1, a3, a4);
  }
  XMP_AutoLock::~XMP_AutoLock(&v11);
}

void sub_1880E41B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;
  const char *v13;
  void *v14;
  uint64_t v15;

  if (a2 == 3)
  {
    v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(_QWORD *)(v10 + 8) = "XMP";
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      v13 = "";
  }
  else
  {
    v14 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v10 + 32) = 14;
      *(_QWORD *)v10 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880E4198);
    }
    *(_DWORD *)(v10 + 32) = 13;
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
    v13 = "";
    if (v15)
      v13 = (const char *)v15;
  }
  *(_QWORD *)v10 = v13;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880E4274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

void WXMPFiles_CanPutXMP_1(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[2];
  XMP_ReadWriteLock *v11;

  v11 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  *(_QWORD *)a5 = 0;
  if (a2)
  {
    TXMPMeta<std::string>::TXMPMeta(v10, a2);
    *(_DWORD *)(a5 + 32) = XMPFiles::CanPutXMP(a1, (uint64_t)v10);
    TXMPMeta<std::string>::~TXMPMeta(v10);
  }
  else
  {
    *(_DWORD *)(a5 + 32) = XMPFiles::CanPutXMP((XMPFiles *)a1, a3, a4);
  }
  XMP_AutoLock::~XMP_AutoLock(&v11);
}

void sub_1880E4330(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;
  const char *v13;
  void *v14;
  uint64_t v15;

  if (a2 == 3)
  {
    v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(_QWORD *)(v10 + 8) = "XMP";
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      v13 = "";
  }
  else
  {
    v14 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      *(_DWORD *)(v10 + 32) = 14;
      *(_QWORD *)v10 = "Caught unknown exception";
      __cxa_end_catch();
LABEL_10:
      JUMPOUT(0x1880E4310);
    }
    *(_DWORD *)(v10 + 32) = 13;
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
    v13 = "";
    if (v15)
      v13 = (const char *)v15;
  }
  *(_QWORD *)v10 = v13;
  __cxa_end_catch();
  goto LABEL_10;
}

void sub_1880E43EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  _Unwind_Resume(a1);
}

double ___ZL10voidResultv_block_invoke()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 0;
  gVoidResult = v0;
  return result;
}

void OUTLINED_FUNCTION_1_3(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (!v1)
    v1 = v2;
  *v3 = v1;
  v3[1] = a1;
}

void *OUTLINED_FUNCTION_2_2(void *a1)
{
  return __cxa_begin_catch(a1);
}

_DWORD *OUTLINED_FUNCTION_3_1(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 32) = *result;
  return result;
}

void WXMPFiles_Initialize_1_cold_1(void *a1)
{
  _DWORD *v1;

  v1 = OUTLINED_FUNCTION_2_2(a1);
  OUTLINED_FUNCTION_3_1(v1);
  OUTLINED_FUNCTION_1_3((uint64_t)"XMP");
  OUTLINED_FUNCTION_0_5();
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl(uint64_t a1, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3, AdobeXMPCore_Int::IUTF8String_I *a4, const char *a5, int a6)
{
  uint64_t *v8;

  *(_QWORD *)(a1 + 160) = off_1E1B903A8;
  *(_QWORD *)(a1 + 40) = off_1E1B8F718;
  *(_QWORD *)a1 = &unk_1E1B90408;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = off_1E1B90530;
  *(_QWORD *)(a1 + 48) = &unk_1E1B8FA10;
  v8 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 56) = &unk_1E1B8FF30;
  *(_QWORD *)(a1 + 192) = 0;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::NodeImpl *)(a1 + 56), (const char *)&off_1E1BAA200, a2, a3, a4, a5);
  AdobeXMPCore_Int::CompositeNodeImpl::CompositeNodeImpl(v8, (uint64_t *)&off_1E1BAA198);
  *(_QWORD *)a1 = off_1E1BB55A0;
  *(_QWORD *)(a1 + 48) = &unk_1E1BB5C10;
  *(_QWORD *)(a1 + 56) = off_1E1BB6178;
  *(_QWORD *)(a1 + 160) = off_1E1BB6438;
  *(_QWORD *)(a1 + 184) = off_1E1BB64C8;
  *(_DWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = off_1E1BB58E8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_1880E4588(_Unwind_Exception *a1)
{
  uint64_t v1;
  AdobeXMPCore_Int::SharedObjectImpl *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 184) = v4;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)off_1E1BAA250);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetArrayForm(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetChildNodeType(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (*((_QWORD **)this + 3) == v2)
    v3 = 0xFFFFFFFFLL;
  else
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
  return v3;
}

void sub_1880E4638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::GetNodeAtIndex(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[3];

  v5 = a2 - 1;
  memset(v8, 0, sizeof(v8));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v8, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v6 = *((_QWORD *)this + 2);
  if (v5 >= (*((_QWORD *)this + 3) - v6) >> 4)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v7 = *(char **)(v6 + 16 * v5);
    (**(void (***)(char *))&v7[*(_QWORD *)(*(_QWORD *)v7 - 56)])(&v7[*(_QWORD *)(*(_QWORD *)v7 - 56)]);
    std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, (uint64_t)v7, 8, 1);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v8);
}

void sub_1880E46FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::InsertNodeAtIndex(char *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  AdobeXMPCore_Int::IErrorNotifier_I *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v35;
  __int128 v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  uint64_t v40;

  v39 = 0;
  v40 = a3;
  v5 = a3 - 1;
  v37 = 0;
  v38 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v37, &a1[*(_QWORD *)(*(_QWORD *)a1 - 904) + 8], 0);
  if (v5 > (uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 4)
  {
    v36 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v36);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304))
                                                          + 120))(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 59);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304))
                                                          + 112))(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304), "Trying to insert a node at an invalid index", -1);
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304)) + 152))(v36 + *(_QWORD *)(*(_QWORD *)v36 - 304), &v40);
    v28 = v36 + *(_QWORD *)(*(_QWORD *)v36 - 304);
    *(_QWORD *)&v35 = (uint64_t)(*((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 2)) >> 4;
    v29 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 152))(v28, &v35);
    if ((_QWORD)v36)
      v30 = v36 + *(_QWORD *)(*(_QWORD *)v36 - 304);
    else
      v30 = 0;
    *(_QWORD *)&v35 = v30;
    *((_QWORD *)&v35 + 1) = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v29);
    (**ErrorNotifier)(ErrorNotifier, &v35);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v35;
    v35 = 0uLL;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v37);
  v6 = (std::__shared_weak_count *)a2[1];
  v37 = (_QWORD *)*a2;
  v38 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (*(uint64_t (**)(char *, _QWORD **))(*(_QWORD *)a1 + 784))(a1, &v37);
  v10 = v9;
  v11 = v38;
  if (!v38)
    goto LABEL_9;
  v12 = (unint64_t *)&v38->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      return;
  }
  else
  {
LABEL_9:
    if (!v9)
      return;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v37, &a1[*(_QWORD *)(*(_QWORD *)a1 - 904) + 8], 1);
  v14 = *((_QWORD *)a1 + 2);
  v15 = *a2;
  v16 = (void (***)(_QWORD))(*a2 + *(_QWORD *)(*(_QWORD *)*a2 - 56));
  (**v16)(v16);
  std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v36, v15, 8, 1);
  v17 = std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::insert((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 16), v14 + 16 * v5, &v36);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 280))(*a2);
  v22 = v40;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 544))(v21, v40);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v21 + 504))(v21, &a1[*(_QWORD *)(*(_QWORD *)a1 - 544)]);
  v23 = (uint64_t *)*((_QWORD *)a1 + 3);
  v24 = v22 + 1;
  for (i = v17 + 2; i != v23; i += 2)
  {
    v26 = *i;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 280))(v26);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 544))(v27, v24++);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v37);
}

void sub_1880E4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::insert(AdobeXMPCore_Int::IMemoryAllocator_I *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = (_QWORD *)a2;
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  if (v6 >= v7)
  {
    v8 = *(_QWORD *)a1;
    v9 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 4) + 1;
    if (v9 >> 60)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = (a2 - v8) >> 4;
    v11 = v7 - v8;
    v12 = v11 >> 3;
    if (v11 >> 3 <= v9)
      v12 = ((uint64_t)(v6 - *(_QWORD *)a1) >> 4) + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v24 = (_QWORD *)((char *)a1 + 16);
    if (v13)
    {
      MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
      v15 = (**MemoryAllocator)(MemoryAllocator, 16 * v13);
    }
    else
    {
      v15 = 0;
    }
    v20 = v15;
    v21 = v15 + 16 * v10;
    v22 = v21;
    v23 = v15 + 16 * v13;
    std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>> &>::push_back(&v20, a3);
    v4 = (_QWORD *)std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__swap_out_circular_buffer(a1, &v20, v4);
    std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(&v20);
  }
  else if (a2 == v6)
  {
    v16 = *a3;
    *(_OWORD *)a2 = *a3;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *((_QWORD *)a1 + 1) = a2 + 16;
  }
  else
  {
    std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v4, a3);
  }
  return v4;
}

void sub_1880E4C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::RemoveNodeAtIndex(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[3];

  *a3 = 0;
  a3[1] = 0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 656))(a3);
  if (*a3)
  {
    memset(v15, 0, sizeof(v15));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v15, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 1);
    v6 = *((_QWORD *)this + 3);
    v7 = *((_QWORD *)this + 2) + 16 * a2;
    v8 = (_QWORD *)(v7 - 16);
    v9 = v7 - 16;
    if (v7 != v6)
    {
      v10 = v7 - 16;
      do
      {
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v10, (__int128 *)(v10 + 16));
        v9 += 16;
        v11 = v10 + 32;
        v10 += 16;
      }
      while (v11 != v6);
      v7 = *((_QWORD *)this + 3);
    }
    while (v7 != v9)
      v7 = std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v7 - 16);
    *((_QWORD *)this + 3) = v9;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 280))(*a3);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 504))(v12, 0);
    v13 = (_QWORD *)*((_QWORD *)this + 3);
    while (v8 != v13)
    {
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 280))(*v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 544))(v14, a2++);
      v8 += 2;
    }
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v15);
  }
}

void sub_1880E4D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::ReplaceNodeAtIndex@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _BOOL4 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char *v20;
  AdobeXMPCore_Int::IErrorNotifier_I *v21;
  char *v22;
  unint64_t *v23;
  unint64_t v24;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v27;
  char *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v28 = *(char **)a2;
  v29 = v8;
  v30 = a3;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(_QWORD *, char **))(*a1 + 784))(a1, &v28))
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*a1 + 656))(&v27, a1, a3);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    v12 = (_QWORD)v27 != 0;
    if (*((_QWORD *)&v27 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v15 = v29;
  if (v29)
  {
    v16 = (unint64_t *)&v29->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (!v12)
  {
    v28 = 0;
    v29 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 5, 2, &v28);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)] + 120))(&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 102);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)] + 112))(&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)], "Trying to replace a node at an invalid index", -1);
    (*(void (**)(char *, uint64_t *))(*(_QWORD *)&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)] + 152))(&v28[*(_QWORD *)(*(_QWORD *)v28 - 304)], &v30);
    v20 = &v28[*(_QWORD *)(*(_QWORD *)v28 - 304)];
    *(_QWORD *)&v27 = (uint64_t)(a1[3] - a1[2]) >> 4;
    v21 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v27);
    v22 = 0;
    if (v28)
      v22 = &v28[*(_QWORD *)(*(_QWORD *)v28 - 304)];
    *(_QWORD *)&v27 = v22;
    *((_QWORD *)&v27 + 1) = v29;
    if (v29)
    {
      v23 = (unint64_t *)&v29->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v21);
    (**ErrorNotifier)(ErrorNotifier, &v27);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v27;
    v27 = 0uLL;
  }
  *a4 = 0;
  a4[1] = 0;
  v18 = v30;
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 680))(a1, v30);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 664))(a1, a2, v18);
}

void sub_1880E5048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::AppendNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1) + 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 664))(a1, a2, v4);
}

void AdobeXMPCore_Int::ArrayNodeImpl::Iterator(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v10, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v5 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if (v5 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v6 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x38);
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 24) = off_1E1BB9458;
    *(_QWORD *)(v6 + 32) = off_1E1BB94C0;
    *(_QWORD *)v6 = off_1E1BB93B8;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v6 + 16) = v4;
    AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>((char *)v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 117, 1, v9);
    v7 = v9[0];
    if (v9[0])
      v7 = v9[0] + *(_QWORD *)(*(_QWORD *)v9[0] - 136);
    v8 = v9[1];
    *a2 = v7;
    a2[1] = v8;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v10);
}

void sub_1880E5198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 176)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 176)]);
  return std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880E52A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::ChildCount(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 4;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

_QWORD *AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode@<X0>(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  (**(void (***)(char *))((char *)this + *(_QWORD *)(*(_QWORD *)this - 880)))((char *)this + *(_QWORD *)(*(_QWORD *)this - 880));
  result = std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(v7, (uint64_t)this, 8, 1);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 808);
  v6 = v7[1];
  *a2 = v5;
  a2[1] = v6;
  return result;
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 880)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 880)]);
  return std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880E5494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode@<X0>(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, _QWORD *a2@<X8>)
{
  return AdobeXMPCore_Int::ArrayNodeImpl::ConvertToArrayNode((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 288)), a2);
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::GetNodeType(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  return 2;
}

BOOL AdobeXMPCore_Int::ArrayNodeImpl::HasContent(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  _BOOL8 v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v2 = *((_QWORD *)this + 3) != *((_QWORD *)this + 2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

void AdobeXMPCore_Int::ArrayNodeImpl::ClearContents(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD v6[3];

  memset(v6, 0, sizeof(v6));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v6, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  v3 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    do
    {
      v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 280))(*v2);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 504))(v4, 0);
      v2 += 2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 2);
    for (i = *((_QWORD *)this + 3);
          (_QWORD *)i != v2;
  }
  *((_QWORD *)this + 3) = v2;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v6);
}

void sub_1880E55D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::ClearContents(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::ClearContents((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 704)));
}

void AdobeXMPCore_Int::ArrayNodeImpl::CloneContents(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  __int128 *v9;
  BOOL v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;

  v9 = a5;
  v42 = 0uLL;
  if (!(_DWORD)a2 || a4 || (*((_QWORD *)this + 3) == *((_QWORD *)this + 2) ? (v10 = (_DWORD)a3 == 0) : (v10 = 1), v10))
  {
    v11 = *(_QWORD *)(*(_QWORD *)this - 880);
    v12 = *(std::__shared_weak_count **)((char *)this + v11 + 16);
    v39 = *(_QWORD *)((char *)this + v11 + 8);
    v40 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v11 = *(_QWORD *)(*(_QWORD *)this - 880);
    }
    v15 = (char *)this + v11;
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 4);
    v38[0] = *((_QWORD *)v15 + 3);
    v38[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode(&v39, v38, *((_DWORD *)this + 2), &v41);
    v19 = v41;
    v41 = 0uLL;
    v42 = v19;
    if (v16)
    {
      v20 = (unint64_t *)&v16->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v22 = v40;
    if (v40)
    {
      v23 = (unint64_t *)&v40->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (_QWORD *)*((_QWORD *)this + 2);
    v26 = (_QWORD *)*((_QWORD *)this + 3);
    while (v25 != v26)
    {
      v41 = 0uLL;
      (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v25 + 264))(&v41, *v25, a2, a3);
      if ((_QWORD)v41)
        (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v42 + *(_QWORD *)(*(_QWORD *)v42 - 688)) + 520))(v42 + *(_QWORD *)(*(_QWORD *)v42 - 688), &v41);
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 += 2;
    }
    v30 = (_QWORD *)v42;
    if ((a2 & 1) != 0)
    {
      v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v42 + *(_QWORD *)(*(_QWORD *)v42 - 688)) + 560))(v42 + *(_QWORD *)(*(_QWORD *)v42 - 688));
      if (a4)
        v32 = a3;
      else
        v32 = 1;
      if (!v31 && (v32 & 1) != 0)
        goto LABEL_47;
    }
    else if (!(_QWORD)v42)
    {
      v33 = 0;
      goto LABEL_45;
    }
    v33 = (char *)v30 + *(_QWORD *)(*v30 - 544);
LABEL_45:
    v34 = *((_QWORD *)&v42 + 1);
    *(_QWORD *)v9 = v33;
    *((_QWORD *)v9 + 1) = v34;
    goto LABEL_46;
  }
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
LABEL_46:
  v9 = &v42;
LABEL_47:
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_1880E5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IArrayNode_I::CreateArrayNode@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  char *v8;
  AdobeXMPCore_Int::IUTF8String_I *v9;
  char *v10;
  AdobeXMPCore_Int::IUTF8String_I *v11;
  const char *v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  if (*a1)
  {
    v9 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
    if (*a1)
    {
      v10 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 208))(*a1);
      goto LABEL_6;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_6:
  if (*a2)
  {
    v11 = (AdobeXMPCore_Int::IUTF8String_I *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
    if (*a2)
    {
      v12 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
      goto LABEL_11;
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = 0;
LABEL_11:
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl((uint64_t)v8, v9, v10, v11, v12, a3);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 196, 1, v16);
  v14 = v16[0];
  if (v16[0])
    v14 = v16[0] + *(_QWORD *)(*(_QWORD *)v16[0] - 808);
  v15 = v16[1];
  *a4 = v14;
  a4[1] = v15;
  return result;
}

void sub_1880E59EC(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::CloneContents(AdobeXMPCore_Int::ArrayNodeImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>)
{
  AdobeXMPCore_Int::ArrayNodeImpl::CloneContents((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 712)), a2, a3, a4, a5);
}

void AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v5, (char *)this + *(_QWORD *)(*(_QWORD *)this - 904) + 8, 0);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  while (v3 != v2)
  {
    v4 = *v3;
    v3 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 216))(v4);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v5);
}

void `virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::resetChangesForChildren((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 720)));
}

uint64_t AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  char *v8;
  char *v9;
  uint64_t v10;
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v17;
  char *v18;
  uint64_t v19;

  v4 = AdobeXMPCore_Int::CompositeNodeImpl::CheckSuitabilityToBeUsedAsChildNode(a1 + *(_QWORD *)(*(_QWORD *)a1 - 872), a2);
  if ((_DWORD)v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
    if (v5 != -1)
    {
      v6 = v5;
      if (v5 != (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2))
      {
        v18 = 0;
        v19 = 0;
        AdobeXMPCore_Int::IError_I::CreateError(100, 6, 2, &v18);
        (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)]
                                                              + 120))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 188);
        (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)]
                                                              + 112))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 304)], "node type is different than what currently array can hold", -1);
        v8 = &v18[*(_QWORD *)(*(_QWORD *)v18 - 304)];
        *(_QWORD *)&v17 = v6;
        (*(void (**)(char *, __int128 *))(*(_QWORD *)v8 + 152))(v8, &v17);
        v9 = v18;
        v10 = *(_QWORD *)(*(_QWORD *)v18 - 304);
        *(_QWORD *)&v17 = (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
        v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)&v9[v10]
                                                                                                  + 152))(&v9[v10], &v17);
        if (v18)
          v12 = &v18[*(_QWORD *)(*(_QWORD *)v18 - 304)];
        else
          v12 = 0;
        *(_QWORD *)&v17 = v12;
        *((_QWORD *)&v17 + 1) = v19;
        if (v19)
        {
          v13 = (unint64_t *)(v19 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
        (**ErrorNotifier)(ErrorNotifier, &v17);
        exception = __cxa_allocate_exception(0x10uLL);
        *exception = v17;
        v17 = 0uLL;
      }
    }
  }
  return v4;
}

void sub_1880E5C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::ArrayNodeImpl::CheckSuitabilityToBeUsedAsChildNode((uint64_t)a1 + *(_QWORD *)(*a1 - 776), a2);
}

_QWORD *AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode@<X0>(AdobeXMPCore::IArrayNode_v1 *this@<X0>, char *a2@<X1>, const char *a3@<X3>, AdobeXMPCore_Int::IUTF8String_I *a4@<X2>, _QWORD *a5@<X8>)
{
  char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v10 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl((uint64_t)v10, this, a2, a4, a3, 1);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 215, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 808);
  v13 = v14[1];
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880E5D58(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode@<X0>(AdobeXMPCore::IArrayNode_v1 *this@<X0>, char *a2@<X1>, const char *a3@<X3>, AdobeXMPCore_Int::IUTF8String_I *a4@<X2>, _QWORD *a5@<X8>)
{
  char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v10 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl((uint64_t)v10, this, a2, a4, a3, 2);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 219, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 808);
  v13 = v14[1];
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880E5E10(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode@<X0>(AdobeXMPCore::IArrayNode_v1 *this@<X0>, char *a2@<X1>, const char *a3@<X3>, AdobeXMPCore_Int::IUTF8String_I *a4@<X2>, _QWORD *a5@<X8>)
{
  char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v10 = (char *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xD0);
  AdobeXMPCore_Int::ArrayNodeImpl::ArrayNodeImpl((uint64_t)v10, this, a2, a4, a3, 4);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ArrayNodeImpl>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ArrayNodeImpl.cpp", 223, 1, v14);
  v12 = v14[0];
  if (v14[0])
    v12 = v14[0] + *(_QWORD *)(*(_QWORD *)v14[0] - 808);
  v13 = v14[1];
  *a5 = v12;
  a5[1] = v13;
  return result;
}

void sub_1880E5EC8(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::NodeImpl *)(v2 + 56), (uint64_t *)&off_1E1BAA200);
  *((_QWORD *)this + 23) = off_1E1B90530;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this + 160), (uint64_t *)off_1E1BAA250);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this)
{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 24)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl((AdobeXMPCore_Int::ArrayNodeImpl *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 56)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::ArrayNodeImpl::~ArrayNodeImpl(AdobeXMPCore_Int::ArrayNodeImpl *this, uint64_t *a2)
{
  uint64_t v2;
  AdobeXMPCore_Int::IMemoryAllocator_I **v3;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 864)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 808)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 816)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 824)) = a2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 832)) = a2[10];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 840)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 872)) = a2[12];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 880)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 888)) = a2[14];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 904)) = a2[15];
  v3 = (AdobeXMPCore_Int::IMemoryAllocator_I **)((char *)this + 16);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(char **)(result + 8);
  v5 = (_QWORD *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    v7 = v5[1];
    *(_QWORD *)v6 = *v5;
    *((_QWORD *)v6 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v5 += 2;
    v6 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v10 = (uint64_t)(v4 - 16);
    v11 = 16 * ((v4 - a4) >> 4);
    v12 = a2 - 16;
    do
    {
      result = std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>(v10, (__int128 *)(v12 + v11));
      v10 -= 16;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *std::__split_buffer<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>> &>::push_back(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t (***MemoryAllocator)(_QWORD, unint64_t);
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = result;
  v4 = (__int128 *)result[2];
  if (v4 == (__int128 *)result[3])
  {
    v5 = (__int128 *)result[1];
    v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == (__int128 *)*result)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *result) >> 3;
      v32 = result[4];
      MemoryAllocator = (uint64_t (***)(_QWORD, unint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
      v15 = (**MemoryAllocator)(MemoryAllocator, 16 * v13);
      v16 = v15 + 16 * (v13 >> 2);
      v17 = (_QWORD *)v3[1];
      v18 = v3[2] - (_QWORD)v17;
      if (v18)
      {
        v19 = (_QWORD *)(v16 + v18);
        v20 = (_QWORD *)(v15 + 16 * (v13 >> 2));
        do
        {
          *v20 = *v17;
          v21 = v17[1];
          v20[1] = v21;
          if (v21)
          {
            v22 = (unint64_t *)(v21 + 8);
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v20 += 2;
          v17 += 2;
        }
        while (v20 != v19);
        v24 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v24 = vdupq_n_s64((unint64_t)v17);
        v19 = (_QWORD *)(v15 + 16 * (v13 >> 2));
      }
      v29 = *v3;
      *v3 = v15;
      v3[1] = v16;
      v30 = v24;
      v25 = v3[3];
      v3[2] = (uint64_t)v19;
      v3[3] = v15 + 16 * v13;
      v31 = v25;
      result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(&v29);
      v4 = (__int128 *)v3[2];
    }
    else
    {
      v7 = v6 >> 4;
      v8 = v6 >> 4 < -1;
      v9 = (v6 >> 4) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if (v5 == v4)
      {
        v12 = &v5[-(v10 >> 1)];
      }
      else
      {
        do
        {
          result = (uint64_t *)std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)&v5[v11], v5);
          ++v5;
        }
        while (v5 != v4);
        v4 = (__int128 *)v3[1];
        v12 = &v5[v11];
      }
      v3[1] = (uint64_t)&v4[v11];
      v3[2] = (uint64_t)v12;
      v4 = v12;
    }
  }
  *(_QWORD *)v4 = *a2;
  v26 = a2[1];
  *((_QWORD *)v4 + 1) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v4 = (__int128 *)v3[2];
  }
  v3[2] = (uint64_t)(v4 + 1);
  return result;
}

uint64_t std::vector<std::shared_ptr<AdobeXMPCore::INode_v1>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::INode_v1>>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(v7 - 2);
      v7 -= 2;
      *(_QWORD *)(v6 - 16) = v8;
      v6 -= 16;
      v9 = v7[1];
      *(_QWORD *)(v6 + 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v12 = (_QWORD *)a1[1];
  v13 = (_QWORD *)a2[2];
  if (v12 != a3)
  {
    do
    {
      v14 = a3[1];
      *v13 = *a3;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      a3 += 2;
      v13 += 2;
    }
    while (a3 != v12);
    v6 = a2[1];
  }
  a2[2] = v13;
  v17 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v17;
  v18 = a1[1];
  a1[1] = a2[2];
  a2[2] = v18;
  v19 = a1[2];
  a1[2] = a2[3];
  a2[3] = v19;
  *a2 = a2[1];
  return result;
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1E1BAAAF0);
  return a1;
}

void AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(uint64_t a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(a1 + 32), (uint64_t *)&off_1E1BAAAF0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
}

uint64_t AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::GetNodeType(uint64_t a1)
{
  _QWORD **v1;
  _QWORD *v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v1 = *(_QWORD ***)(a1 + 8);
  if (v1 == *(_QWORD ***)(a1 + 16))
    return 0;
  v2 = *v1;
  v3 = (void (***)(_QWORD))((char *)*v1 + *(_QWORD *)(**v1 - 56));
  (**v3)(v3);
  std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(&v9, (uint64_t)v2, 8, 1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1880E6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::GetNode@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD **v3;
  _QWORD *v4;
  void (***v5)(_QWORD);

  v3 = (_QWORD **)result[1];
  if (v3 == (_QWORD **)result[2])
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v4 = *v3;
    v5 = (void (***)(_QWORD))((char *)*v3 + *(_QWORD *)(**v3 - 56));
    (**v5)(v5);
    return std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a2, (uint64_t)v4, 8, 1);
  }
  return result;
}

char *AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::Next@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *((_QWORD *)result + 2);
  v4 = *((_QWORD *)result + 1) + 16;
  *((_QWORD *)result + 1) = v4;
  if (v4 == v3)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v5 = (uint64_t)result;
    (**(void (***)(char *))&result[*(_QWORD *)(*(_QWORD *)result - 176)])(&result[*(_QWORD *)(*(_QWORD *)result - 176)]);
    result = (char *)std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(v8, v5, 8, 1);
    v6 = v8[0];
    if (v8[0])
      v6 = v8[0] + *(_QWORD *)(*(_QWORD *)v8[0] - 136);
    v7 = v8[1];
    *a2 = v6;
    a2[1] = v7;
  }
  return result;
}

void `virtual thunk to'AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>::~TNodeIteratorImpl(_QWORD *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), (uint64_t *)&off_1E1BAAAF0);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1E1BAAAF0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

{
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)((char *)a1 + *(_QWORD *)(*a1 - 48) + 32), (uint64_t *)&off_1E1BAAAF0);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 48);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 32), (uint64_t *)&off_1E1BAAAF0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete((AdobeXMPCore_Int::IMemoryAllocator_I *)v1);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC768;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880E6764(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 176) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880E6790(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 176) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>> *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::TNodeIteratorImpl<std::__wrap_iter<std::shared_ptr<AdobeXMPCore::INode_v1> *>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::ArrayNodeImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ArrayNodeImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC538;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880E68B0(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 880) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880E68E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 880) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ArrayNodeImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ArrayNodeImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::ConfigurableImpl::SetParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int8x8_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t **v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  _QWORD v55[3];
  uint64_t v56;
  unint64_t v57;

  v7 = (int8x8_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304)) + 208))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304));
  v57 = (unint64_t)v7;
  if (*(_BYTE *)(a1 + 48))
  {
    v8 = (unsigned __int32)v7.i32[0] >> 8;
    v9 = v7.u8[2];
    v10 = v7.u8[3];
    v11 = HIDWORD(*(_QWORD *)&v7);
    v12 = *(_QWORD *)&v7 >> 40;
    v13 = HIWORD(*(_QWORD *)&v7);
    v14 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v7, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    v15 = v7.i8[0] + 32;
    if ((v14.i8[0] & 1) == 0)
      v15 = v7.i8[0];
    if ((v14.i8[1] & 1) != 0)
      LOBYTE(v8) = v7.i8[1] + 32;
    if ((v14.i8[2] & 1) != 0)
      v9 = v7.i8[2] + 32;
    if ((v14.i8[3] & 1) != 0)
      v10 = v7.i8[3] + 32;
    if ((v14.i8[4] & 1) != 0)
      LOBYTE(v11) = v7.i8[4] + 32;
    if ((v14.i8[5] & 1) != 0)
      LOBYTE(v12) = v7.i8[5] + 32;
    if ((v14.i8[6] & 1) != 0)
      LOBYTE(v13) = v7.i8[6] + 32;
    if ((v14.i8[7] & 1) != 0)
      v16 = v7.u8[7] + 32;
    else
      v16 = HIBYTE(*(_QWORD *)&v7);
    v57 = ((unint64_t)v13 << 48) | (v16 << 56) | ((unint64_t)v12 << 40) | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 24) | ((unint64_t)v9 << 16) | ((unint64_t)v8 << 8) | v15;
  }
  v17 = (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304))
                                                               + 200))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304), &v57);
  v56 = 0;
  if (v17)
    AdobeXMPCore_Int::NotifyError((uint64_t)"Key is not valid", (uint64_t)&v57, v17, a3, a4, 0, &v56);
  memset(v55, 0, sizeof(v55));
  (*(void (**)(unint64_t **__return_ptr))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304)) + 256))(&v53);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v55, &v53, 1);
  v18 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
  {
    v24 = *(_QWORD **)(v21 + 8);
    v22 = (_QWORD *)(v21 + 8);
    v23 = v24;
    if (!v24)
      goto LABEL_39;
    v25 = v22;
    do
    {
      v26 = v23[4];
      v27 = v26 >= v57;
      if (v26 >= v57)
        v28 = v23;
      else
        v28 = v23 + 1;
      if (v27)
        v25 = v23;
      v23 = (_QWORD *)*v28;
    }
    while (*v28);
    if (v25 == v22 || v57 < v25[4])
LABEL_39:
      AdobeXMPCore_Int::NotifyError((uint64_t)"Key is not supported", (uint64_t)&v57, 1, a3, a4, 0, &v56);
  }
  v29 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t *))(*(_QWORD *)a1 + 216))(a1, &v57, a3, a4);
  if (v29)
  {
LABEL_41:
    v32 = *(_QWORD **)(a1 + 16);
    v31 = (_QWORD *)(a1 + 16);
    v30 = v32;
    if (!v32)
      goto LABEL_52;
    v33 = v31;
    do
    {
      v34 = v30[4];
      v35 = v34 >= v57;
      if (v34 >= v57)
        v36 = v30;
      else
        v36 = v30 + 1;
      if (v35)
        v33 = v30;
      v30 = (_QWORD *)*v36;
    }
    while (*v36);
    if (v33 != v31 && v57 >= v33[4])
    {
      v37 = *((_DWORD *)v33 + 10);
      v56 = v33[6];
    }
    else
    {
LABEL_52:
      v37 = 0;
    }
    AdobeXMPCore_Int::NotifyError((uint64_t)"Validation failed for the parameter, type and value combination", (uint64_t)&v57, v29, a3, a4, v37, &v56);
  }
  v38 = *(_QWORD *)(a1 + 40);
  if (v38)
  {
    v41 = *(_QWORD **)(v38 + 8);
    v39 = (_QWORD *)(v38 + 8);
    v40 = v41;
    if (v41)
    {
      v42 = v39;
      do
      {
        v43 = v40[4];
        v44 = v43 >= v57;
        if (v43 >= v57)
          v45 = v40;
        else
          v45 = v40 + 1;
        if (v44)
          v42 = v40;
        v40 = (_QWORD *)*v45;
      }
      while (*v45);
      if (v42 != v39 && v57 >= v42[4] && *((_DWORD *)v42 + 10) != (_DWORD)a3)
      {
        v29 = 2;
        goto LABEL_41;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 49))
  {
    v48 = *(_QWORD **)(a1 + 16);
    if (v48)
    {
      v49 = (_QWORD *)(a1 + 16);
      do
      {
        v50 = v48[4];
        v51 = v50 >= v57;
        if (v50 >= v57)
          v52 = v48;
        else
          v52 = v48 + 1;
        if (v51)
          v49 = v48;
        v48 = (_QWORD *)*v52;
      }
      while (*v52);
      if (v49 != (_QWORD *)(a1 + 16) && v57 >= v49[4] && *((_DWORD *)v49 + 10) != (_DWORD)a3)
      {
        v29 = 3;
        goto LABEL_41;
      }
    }
  }
  v46 = *a4;
  v53 = &v57;
  v47 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 8), &v57, (uint64_t)&std::piecewise_construct, &v53);
  *((_DWORD *)v47 + 10) = a3;
  v47[6] = (uint64_t *)v46;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v55);
}

void sub_1880E6DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t *a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a4)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<BOOL>(a1, a2, a3, 1u, *(unsigned __int8 *)a5, a6, a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<unsigned long long>(a1, a2, a3, 2u, *a5, a6, a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<long long>(a1, a2, a3, 4u, *a5, a6, a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a5;
      AdobeXMPCore_Int::NotifyError<char const*>(a1, a2, a3, 8u, (uint64_t)&v7, a6, a7);
    default:
      if (a4 == 16)
        AdobeXMPCore_Int::NotifyError<double>(a1, a2, a3, 0x10u, a6, a7, *(double *)a5);
      return;
  }
  AdobeXMPCore_Int::NotifyError<void *>(a1, a2, a3, a4, *a5, a6, a7);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::GetParameter(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  int8x8_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t v27;
  char *v29;
  char *v30;
  AdobeXMPCore_Int::IErrorNotifier_I *v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v37;
  char *v38;
  std::__shared_weak_count *v39;
  _QWORD v40[3];
  unint64_t v41;

  v7 = (int8x8_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304)) + 208))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304));
  v41 = (unint64_t)v7;
  if (*(_BYTE *)(a1 + 48))
  {
    v8 = (unsigned __int32)v7.i32[0] >> 8;
    v9 = v7.u8[2];
    v10 = v7.u8[3];
    v11 = HIDWORD(*(_QWORD *)&v7);
    v12 = *(_QWORD *)&v7 >> 40;
    v13 = HIWORD(*(_QWORD *)&v7);
    v14 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v7, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    v15 = v7.i8[0] + 32;
    if ((v14.i8[0] & 1) == 0)
      v15 = v7.i8[0];
    if ((v14.i8[1] & 1) != 0)
      LOBYTE(v8) = v7.i8[1] + 32;
    if ((v14.i8[2] & 1) != 0)
      v9 = v7.i8[2] + 32;
    if ((v14.i8[3] & 1) != 0)
      v10 = v7.i8[3] + 32;
    if ((v14.i8[4] & 1) != 0)
      LOBYTE(v11) = v7.i8[4] + 32;
    if ((v14.i8[5] & 1) != 0)
      LOBYTE(v12) = v7.i8[5] + 32;
    if ((v14.i8[6] & 1) != 0)
      LOBYTE(v13) = v7.i8[6] + 32;
    if ((v14.i8[7] & 1) != 0)
      v16 = v7.u8[7] + 32;
    else
      v16 = HIBYTE(*(_QWORD *)&v7);
    v41 = ((unint64_t)v13 << 48) | (v16 << 56) | ((unint64_t)v12 << 40) | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 24) | ((unint64_t)v9 << 16) | ((unint64_t)v8 << 8) | v15;
  }
  memset(v40, 0, sizeof(v40));
  (*(void (**)(char **__return_ptr))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304)) + 256))(&v38);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v40, &v38, 0);
  v17 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v22 = *(_QWORD **)(a1 + 16);
  v21 = (_QWORD *)(a1 + 16);
  v20 = v22;
  if (!v22)
    goto LABEL_36;
  v23 = v21;
  do
  {
    v24 = v20[4];
    v25 = v24 >= v41;
    if (v24 >= v41)
      v26 = v20;
    else
      v26 = v20 + 1;
    if (v25)
      v23 = v20;
    v20 = (_QWORD *)*v26;
  }
  while (*v26);
  if (v23 != v21 && v41 >= v23[4])
  {
    if (*((_DWORD *)v23 + 10) != a3)
    {
      v38 = 0;
      v39 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(3, 4, 2, &v38);
      (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)]
                                                            + 120))(&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 187);
      (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)]
                                                            + 112))(&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)], "Type mismatch for a parameter", -1);
      (*(void (**)(char *, unint64_t *))(*(_QWORD *)&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)] + 152))(&v38[*(_QWORD *)(*(_QWORD *)v38 - 304)], &v41);
      v29 = &v38[*(_QWORD *)(*(_QWORD *)v38 - 304)];
      *(_QWORD *)&v37 = *((unsigned int *)v23 + 10);
      (*(void (**)(char *, __int128 *))(*(_QWORD *)v29 + 152))(v29, &v37);
      v30 = &v38[*(_QWORD *)(*(_QWORD *)v38 - 304)];
      *(_QWORD *)&v37 = a3;
      v31 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v30 + 152))(v30, &v37);
      if (v38)
        v32 = &v38[*(_QWORD *)(*(_QWORD *)v38 - 304)];
      else
        v32 = 0;
      *(_QWORD *)&v37 = v32;
      *((_QWORD *)&v37 + 1) = v39;
      if (v39)
      {
        v33 = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v31);
      (**ErrorNotifier)(ErrorNotifier, &v37);
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v37;
      v37 = 0uLL;
    }
    *a4 = v23[6];
    v27 = 1;
  }
  else
  {
LABEL_36:
    v27 = 0;
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v40);
  return v27;
}

void sub_1880E7248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a13);
  _Unwind_Resume(a1);
}

BOOL AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  int8x8_t v3;
  unsigned int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8x8_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[3];
  unint64_t v21;

  v3 = (int8x8_t)(*(uint64_t (**)(char *, const unint64_t *))(*(_QWORD *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 304))
                                                                             + 208))((char *)this + *(_QWORD *)(*(_QWORD *)this - 304), a2);
  v21 = (unint64_t)v3;
  if (*((_BYTE *)this + 48))
  {
    v4 = (unsigned __int32)v3.i32[0] >> 8;
    v5 = v3.u8[2];
    v6 = v3.u8[3];
    v7 = HIDWORD(*(_QWORD *)&v3);
    v8 = *(_QWORD *)&v3 >> 40;
    v9 = HIWORD(*(_QWORD *)&v3);
    v10 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v3, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    v11 = v3.i8[0] + 32;
    if ((v10.i8[0] & 1) == 0)
      v11 = v3.i8[0];
    if ((v10.i8[1] & 1) != 0)
      LOBYTE(v4) = v3.i8[1] + 32;
    if ((v10.i8[2] & 1) != 0)
      v5 = v3.i8[2] + 32;
    if ((v10.i8[3] & 1) != 0)
      v6 = v3.i8[3] + 32;
    if ((v10.i8[4] & 1) != 0)
      LOBYTE(v7) = v3.i8[4] + 32;
    if ((v10.i8[5] & 1) != 0)
      LOBYTE(v8) = v3.i8[5] + 32;
    if ((v10.i8[6] & 1) != 0)
      LOBYTE(v9) = v3.i8[6] + 32;
    if ((v10.i8[7] & 1) != 0)
      v12 = v3.u8[7] + 32;
    else
      v12 = HIBYTE(*(_QWORD *)&v3);
    v21 = ((unint64_t)v9 << 48) | (v12 << 56) | ((unint64_t)v8 << 40) | ((unint64_t)v7 << 32) | ((unint64_t)v6 << 24) | ((unint64_t)v5 << 16) | ((unint64_t)v4 << 8) | v11;
  }
  memset(v20, 0, sizeof(v20));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304))
                                                + 256))(&v18);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v20, &v18, 1);
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__erase_unique<unsigned long long>((uint64_t)this + 8, &v21) != 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v20);
  return v16;
}

void sub_1880E7460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::ConfigurableImpl::RemoveParameter((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2);
}

void AdobeXMPCore_Int::ConfigurableImpl::GetAllParameters(AdobeXMPCore_Int::ConfigurableImpl *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(v25, 0, sizeof(v25));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304))
                                                + 256))(&v23);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v25, &v23, 0);
  v4 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::vector<unsigned long long>::reserve((void **)a2, *((_QWORD *)this + 3));
  v7 = (char *)*((_QWORD *)this + 1);
  v8 = (char *)this + 16;
  if (v7 != (char *)this + 16)
  {
    v9 = (_QWORD *)(a2 + 16);
    v10 = *(_QWORD **)(a2 + 8);
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        v11 = *(_QWORD **)a2;
        v12 = ((uint64_t)v10 - *(_QWORD *)a2) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v14 = *v9 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(a2 + 16, v15);
          v11 = *(_QWORD **)a2;
          v10 = *(_QWORD **)(a2 + 8);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[8 * v12];
        *(_QWORD *)v17 = *((_QWORD *)v7 + 4);
        v18 = v17 + 8;
        while (v10 != v11)
        {
          v19 = *--v10;
          *((_QWORD *)v17 - 1) = v19;
          v17 -= 8;
        }
        *(_QWORD *)a2 = v17;
        *(_QWORD *)(a2 + 8) = v18;
        *(_QWORD *)(a2 + 16) = &v16[8 * v15];
        if (v11)
          operator delete(v11);
        v10 = v18;
      }
      else
      {
        *v10++ = *((_QWORD *)v7 + 4);
      }
      *(_QWORD *)(a2 + 8) = v10;
      v20 = (char *)*((_QWORD *)v7 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (char *)*((_QWORD *)v7 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v7;
          v7 = v21;
        }
        while (!v22);
      }
      v7 = v21;
    }
    while (v21 != v8);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v25);
}

void sub_1880E7668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  v6 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void `virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::GetAllParameters(AdobeXMPCore_Int::ConfigurableImpl *this@<X0>, uint64_t a2@<X8>)
{
  AdobeXMPCore_Int::ConfigurableImpl::GetAllParameters((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144)), a2);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::Size(AdobeXMPCore_Int::ConfigurableImpl *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  _QWORD v9[3];

  memset(v9, 0, sizeof(v9));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304))
                                                + 256))(&v7);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v9, &v7, 0);
  v2 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v9);
  return v5;
}

void sub_1880E77F4(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::Size(AdobeXMPCore_Int::ConfigurableImpl *this)
{
  return AdobeXMPCore_Int::ConfigurableImpl::Size((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::GetDataType(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  int8x8_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint8x8_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  _QWORD v28[3];

  v3 = (int8x8_t)(*(uint64_t (**)(char *, const unint64_t *))(*(_QWORD *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 304))
                                                                             + 208))((char *)this + *(_QWORD *)(*(_QWORD *)this - 304), a2);
  v4 = (unint64_t)v3;
  if (*((_BYTE *)this + 48))
  {
    v5 = (unsigned __int32)v3.i32[0] >> 8;
    v6 = v3.u8[2];
    v7 = v3.u8[3];
    v8 = HIDWORD(*(_QWORD *)&v3);
    v9 = *(_QWORD *)&v3 >> 40;
    v10 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v3, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
    v11 = HIWORD(*(_QWORD *)&v3);
    if ((v10.i8[0] & 1) != 0)
      v12 = v3.i8[0] + 32;
    else
      v12 = v3.i8[0];
    if ((v10.i8[1] & 1) != 0)
      LOBYTE(v5) = v3.i8[1] + 32;
    if ((v10.i8[2] & 1) != 0)
      v6 = v3.i8[2] + 32;
    if ((v10.i8[3] & 1) != 0)
      v7 = v3.i8[3] + 32;
    if ((v10.i8[4] & 1) != 0)
      LOBYTE(v8) = v3.i8[4] + 32;
    if ((v10.i8[5] & 1) != 0)
      LOBYTE(v9) = v3.i8[5] + 32;
    if ((v10.i8[6] & 1) != 0)
      LOBYTE(v11) = v3.i8[6] + 32;
    if ((v10.i8[7] & 1) != 0)
      v13 = v3.u8[7] + 32;
    else
      v13 = HIBYTE(*(_QWORD *)&v3);
    v4 = ((unint64_t)v11 << 48) | (v13 << 56) | ((unint64_t)v9 << 40) | ((unint64_t)v8 << 32) | ((unint64_t)v7 << 24) | ((unint64_t)v6 << 16) | ((unint64_t)v5 << 8) | v12;
  }
  memset(v28, 0, sizeof(v28));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304))
                                                + 256))(&v26);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v28, &v26, 0);
  v14 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = (_QWORD *)*((_QWORD *)this + 2);
  v18 = (char *)this + 16;
  v17 = v19;
  if (!v19)
    goto LABEL_37;
  v20 = v18;
  do
  {
    v21 = v17[4];
    v22 = v21 >= v4;
    if (v21 >= v4)
      v23 = v17;
    else
      v23 = v17 + 1;
    if (v22)
      v20 = (char *)v17;
    v17 = (_QWORD *)*v23;
  }
  while (*v23);
  if (v20 != v18 && v4 >= *((_QWORD *)v20 + 4))
    v24 = *((unsigned int *)v20 + 10);
  else
LABEL_37:
    v24 = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v28);
  return v24;
}

void sub_1880E7A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ConfigurableImpl::GetDataType(AdobeXMPCore_Int::ConfigurableImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::ConfigurableImpl::GetDataType((AdobeXMPCore_Int::ConfigurableImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)), a2);
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::ValidateValue()
{
  return 0;
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::TreatKeyAsCaseInsensitive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t AdobeXMPCore_Int::ConfigurableImpl::AllowDifferentValueTypesForExistingEntries(uint64_t this, char a2)
{
  *(_BYTE *)(this + 49) = a2;
  return this;
}

void AdobeXMPCore_Int::ConfigurableImpl::SetAllowedKeys(AdobeXMPCore_Int::ConfigurableImpl *this, unint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  int8x8_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[3];

  memset(v24, 0, sizeof(v24));
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)((char *)this
                                                                     + *(_QWORD *)(*(_QWORD *)this - 304))
                                                         + 256))(&v22);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v24, &v22, 1);
  v6 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((_QWORD *)this + 4), *(_QWORD **)(v9 + 8));
    MEMORY[0x18D761C30](v9, 0x1020C4062D53EE8);
    *((_QWORD *)this + 4) = 0;
  }
  if (a2 && a3)
  {
    v10 = (_QWORD *)operator new();
    v10[2] = 0;
    v10[1] = 0;
    *v10 = v10 + 1;
    *((_QWORD *)this + 4) = v10;
    do
    {
      v11 = *a2++;
      v22 = v11;
      v12 = (int8x8_t)(*(uint64_t (**)(char *, unint64_t *))(*(_QWORD *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 304))
                                                                            + 208))((char *)this + *(_QWORD *)(*(_QWORD *)this - 304), &v22);
      v22 = (unint64_t)v12;
      if (*((_BYTE *)this + 48))
      {
        v13 = (unsigned __int32)v12.i32[0] >> 8;
        v14 = v12.u8[2];
        v15 = v12.u8[3];
        v16 = HIDWORD(*(_QWORD *)&v12);
        v17 = *(_QWORD *)&v12 >> 40;
        v18 = HIWORD(*(_QWORD *)&v12);
        v19 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v12, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
        v20 = v12.i8[0] + 32;
        if ((v19.i8[0] & 1) == 0)
          v20 = v12.i8[0];
        if ((v19.i8[1] & 1) != 0)
          LOBYTE(v13) = v12.i8[1] + 32;
        if ((v19.i8[2] & 1) != 0)
          v14 = v12.i8[2] + 32;
        if ((v19.i8[3] & 1) != 0)
          v15 = v12.i8[3] + 32;
        if ((v19.i8[4] & 1) != 0)
          LOBYTE(v16) = v12.i8[4] + 32;
        if ((v19.i8[5] & 1) != 0)
          LOBYTE(v17) = v12.i8[5] + 32;
        if ((v19.i8[6] & 1) != 0)
          LOBYTE(v18) = v12.i8[6] + 32;
        if ((v19.i8[7] & 1) != 0)
          v21 = v12.u8[7] + 32;
        else
          v21 = HIBYTE(*(_QWORD *)&v12);
        v22 = ((unint64_t)v18 << 48) | (v21 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v16 << 32) | ((unint64_t)v15 << 24) | ((unint64_t)v14 << 16) | ((unint64_t)v13 << 8) | v20;
      }
      std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(*((uint64_t ***)this + 4), &v22, (uint64_t *)&v22);
      --a3;
    }
    while (a3);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v24);
}

void sub_1880E7CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ConfigurableImpl::SetAllowedValueTypesForKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int8x8_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8x8_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  int v22;
  uint64_t **v23;
  unint64_t v24;
  unint64_t *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];

  memset(v27, 0, sizeof(v27));
  (*(void (**)(unint64_t **__return_ptr))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304)) + 256))(&v25);
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v27, &v25, 1);
  v6 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*(_QWORD *)(a1 + 40), *(_QWORD **)(v9 + 8));
    MEMORY[0x18D761C30](v9, 0x1020C4062D53EE8);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (a2 && a3)
  {
    v10 = (_QWORD *)operator new();
    v10[2] = 0;
    v10[1] = 0;
    *v10 = v10 + 1;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = (_DWORD *)(a2 + 8);
    do
    {
      v24 = *((_QWORD *)v11 - 1);
      v12 = (int8x8_t)(*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)(a1
                                                                                         + *(_QWORD *)(*(_QWORD *)a1 - 304))
                                                                             + 208))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 304), &v24);
      v24 = (unint64_t)v12;
      if (*(_BYTE *)(a1 + 48))
      {
        v13 = (unsigned __int32)v12.i32[0] >> 8;
        v14 = v12.u8[2];
        v15 = v12.u8[3];
        v16 = HIDWORD(*(_QWORD *)&v12);
        v17 = *(_QWORD *)&v12 >> 40;
        v18 = HIWORD(*(_QWORD *)&v12);
        v19 = vcgt_u8((uint8x8_t)0x1A1A1A1A1A1A1A1ALL, (uint8x8_t)vadd_s8(v12, (int8x8_t)0xBFBFBFBFBFBFBFBFLL));
        v20 = v12.i8[0] + 32;
        if ((v19.i8[0] & 1) == 0)
          v20 = v12.i8[0];
        if ((v19.i8[1] & 1) != 0)
          LOBYTE(v13) = v12.i8[1] + 32;
        if ((v19.i8[2] & 1) != 0)
          v14 = v12.i8[2] + 32;
        if ((v19.i8[3] & 1) != 0)
          v15 = v12.i8[3] + 32;
        if ((v19.i8[4] & 1) != 0)
          LOBYTE(v16) = v12.i8[4] + 32;
        if ((v19.i8[5] & 1) != 0)
          LOBYTE(v17) = v12.i8[5] + 32;
        if ((v19.i8[6] & 1) != 0)
          LOBYTE(v18) = v12.i8[6] + 32;
        if ((v19.i8[7] & 1) != 0)
          v21 = v12.u8[7] + 32;
        else
          v21 = HIBYTE(*(_QWORD *)&v12);
        v24 = ((unint64_t)v18 << 48) | (v21 << 56) | ((unint64_t)v17 << 40) | ((unint64_t)v16 << 32) | ((unint64_t)v15 << 24) | ((unint64_t)v14 << 16) | ((unint64_t)v13 << 8) | v20;
      }
      v22 = *v11;
      v23 = *(uint64_t ***)(a1 + 40);
      v25 = &v24;
      v11 += 4;
      *((_DWORD *)std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v23, &v24, (uint64_t)&std::piecewise_construct, &v25)+ 10) = v22;
      --a3;
    }
    while (a3);
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v27);
}

void sub_1880E7F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(AdobeXMPCore_Int::ConfigurableImpl *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 304)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) = a2[2];
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((_QWORD *)this + 4), *(_QWORD **)(v4 + 8));
    MEMORY[0x18D761C30](v4, 0x1020C4062D53EE8);
    *((_QWORD *)this + 4) = 0;
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy(*((_QWORD *)this + 5), *(_QWORD **)(v5 + 8));
    MEMORY[0x18D761C30](v5, 0x1020C4062D53EE8);
    *((_QWORD *)this + 5) = 0;
  }
  std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void AdobeXMPCore_Int::NotifyError<BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a6)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<BOOL,BOOL>(a1, a2, a3, a4, a5, 1u, *(unsigned __int8 *)a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<BOOL,unsigned long long>(a1, a2, a3, a4, a5, 2u, *a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<BOOL,long long>(a1, a2, a3, a4, a5, 4u, *a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a7;
      AdobeXMPCore_Int::NotifyError<BOOL,char const*>(a1, a2, a3, a4, a5, 8u, (uint64_t)&v7);
    default:
      if (a6 == 16)
        AdobeXMPCore_Int::NotifyError<BOOL,double>(a1, a2, a3, a4, a5, 0x10u, *(double *)a7);
      return;
  }
  AdobeXMPCore_Int::NotifyError<BOOL,void *>(a1, a2, a3, a4, a5, a6, *a7);
}

void AdobeXMPCore_Int::NotifyError<char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a6)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<char const*,BOOL>(a1, a2, a3, a4, a5, 1u, *(unsigned __int8 *)a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<char const*,unsigned long long>(a1, a2, a3, a4, a5, 2u, *a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<char const*,long long>(a1, a2, a3, a4, a5, 4u, *a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a7;
      AdobeXMPCore_Int::NotifyError<char const*,char const*>(a1, a2, a3, a4, a5, 8u, (uint64_t)&v7);
    default:
      if (a6 == 16)
        AdobeXMPCore_Int::NotifyError<char const*,double>(a1, a2, a3, a4, a5, 0x10u, *(double *)a7);
      return;
  }
  AdobeXMPCore_Int::NotifyError<char const*,void *>(a1, a2, a3, a4, a5, a6, *a7);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a6)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<unsigned long long,BOOL>(a1, a2, a3, a4, a5, 1u, *(unsigned __int8 *)a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<unsigned long long,unsigned long long>(a1, a2, a3, a4, a5, 2u, *a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<unsigned long long,long long>(a1, a2, a3, a4, a5, 4u, *a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a7;
      AdobeXMPCore_Int::NotifyError<unsigned long long,char const*>(a1, a2, a3, a4, a5, 8u, (uint64_t)&v7);
    default:
      if (a6 == 16)
        AdobeXMPCore_Int::NotifyError<unsigned long long,double>(a1, a2, a3, a4, a5, 0x10u, *(double *)a7);
      return;
  }
  AdobeXMPCore_Int::NotifyError<unsigned long long,void *>(a1, a2, a3, a4, a5, a6, *a7);
}

void AdobeXMPCore_Int::NotifyError<long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a6)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<long long,BOOL>(a1, a2, a3, a4, a5, 1u, *(unsigned __int8 *)a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<long long,unsigned long long>(a1, a2, a3, a4, a5, 2u, *a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<long long,long long>(a1, a2, a3, a4, a5, 4u, *a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a7;
      AdobeXMPCore_Int::NotifyError<long long,char const*>(a1, a2, a3, a4, a5, 8u, (uint64_t)&v7);
    default:
      if (a6 == 16)
        AdobeXMPCore_Int::NotifyError<long long,double>(a1, a2, a3, a4, a5, 0x10u, *(double *)a7);
      return;
  }
  AdobeXMPCore_Int::NotifyError<long long,void *>(a1, a2, a3, a4, a5, a6, *a7);
}

void AdobeXMPCore_Int::NotifyError<double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t *a6, double a7)
{
  __int16 v7;

  v7 = 0;
  switch(a5)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<double,BOOL>(a1, a2, a3, a4, 1u, *(unsigned __int8 *)a6, a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<double,unsigned long long>(a1, a2, a3, a4, 2u, *a6, a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<double,long long>(a1, a2, a3, a4, 4u, *a6, a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a6;
      AdobeXMPCore_Int::NotifyError<double,char const*>(a1, a2, a3, a4, 8u, (uint64_t)&v7, a7);
    default:
      if (a5 == 16)
        AdobeXMPCore_Int::NotifyError<double,double>(a1, a2, a3, a4, 0x10u, a7, *(double *)a6);
      return;
  }
  AdobeXMPCore_Int::NotifyError<double,void *>(a1, a2, a3, a4, a5, *a6, a7);
}

void AdobeXMPCore_Int::NotifyError<void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  __int16 v7;

  v7 = 0;
  switch(a6)
  {
    case 1u:
      AdobeXMPCore_Int::NotifyError<void *,BOOL>(a1, a2, a3, a4, a5, 1u, *(unsigned __int8 *)a7);
    case 2u:
      AdobeXMPCore_Int::NotifyError<void *,unsigned long long>(a1, a2, a3, a4, a5, 2u, *a7);
    case 3u:
    case 5u:
    case 6u:
    case 7u:
      break;
    case 4u:
      AdobeXMPCore_Int::NotifyError<void *,long long>(a1, a2, a3, a4, a5, 4u, *a7);
    case 8u:
      LOBYTE(v7) = *(_BYTE *)a7;
      AdobeXMPCore_Int::NotifyError<void *,char const*>(a1, a2, a3, a4, a5, 8u, (uint64_t)&v7);
    default:
      if (a6 == 16)
        AdobeXMPCore_Int::NotifyError<void *,double>(a1, a2, a3, a4, a5, 0x10u, *(double *)a7);
      return;
  }
  AdobeXMPCore_Int::NotifyError<void *,void *>(a1, a2, a3, a4, a5, a6, *a7);
}

void AdobeXMPCore_Int::NotifyError<BOOL,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880E86E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<BOOL,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7, -1);
  goto LABEL_6;
}

void sub_1880E890C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<BOOL,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E8B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<BOOL,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E8D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<BOOL,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E8F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<BOOL,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880E919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880E93C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7, -1);
  goto LABEL_6;
}

void sub_1880E95F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E9818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880E9C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<char const*,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5, -1);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880E9E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7);
  goto LABEL_6;
}

void sub_1880EA0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7, -1);
  goto LABEL_6;
}

void sub_1880EA2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a5;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EA4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a5;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EA714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;

  v23 = a5;
  v22 = a7;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EA934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<unsigned long long,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7);
  goto LABEL_6;
}

void sub_1880EAB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7);
  goto LABEL_6;
}

void sub_1880EAD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7, -1);
  goto LABEL_6;
}

void sub_1880EAFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a5;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EB1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v23 = a5;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;

  v23 = a5;
  v22 = a7;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a6;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EB5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<long long,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a5;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a7);
  goto LABEL_6;
}

void sub_1880EB820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a5;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 192))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a6);
  goto LABEL_6;
}

void sub_1880EBA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a5;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                                  + 128))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a6, -1);
  goto LABEL_6;
}

void sub_1880EBC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = a6;
  v20 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a5;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EBE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = a6;
  v20 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a5;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                           + 168))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EC0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, double a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;

  v22 = a7;
  v23 = a6;
  v20 = 0;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v20);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 120))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)] + 112))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a1, -1);
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                         + 152))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], a2);
  if (a4)
  {
    v17 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = a4;
    v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v17 + 152))(v17, &v19);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v18 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
  *(_QWORD *)&v19 = a5;
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v19);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v12 = v20;
    if (v20)
      v12 = &v20[*(_QWORD *)(*(_QWORD *)v20 - 304)];
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v21;
    if (v21)
    {
      v13 = (unint64_t *)(v21 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v11);
    (**ErrorNotifier)(ErrorNotifier, &v19);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v19;
    v19 = 0uLL;
  }
LABEL_5:
  v11 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)]
                                                                                          + 184))(&v20[*(_QWORD *)(*(_QWORD *)v20 - 304)], &v22);
  goto LABEL_6;
}

void sub_1880EC2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<double,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a5)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a5)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a5;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  if (!a5)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a6);
  goto LABEL_6;
}

void sub_1880EC4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,BOOL>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 192))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880EC710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,char const*>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                                  + 128))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7, -1);
  goto LABEL_6;
}

void sub_1880EC938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,unsigned long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880ECB5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,long long>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = a7;
  v21 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                           + 168))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880ECD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,double>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, double a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  double v23;

  v23 = a7;
  v21 = 0;
  v22 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v21);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 120))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)] + 112))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a1, -1);
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 152))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a2);
  if (a4)
  {
    v18 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = a4;
    v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v18 + 152))(v18, &v20);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v19 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  *(_QWORD *)&v20 = a6;
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v20);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                         + 136))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v13 = v21;
    if (v21)
      v13 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
    *(_QWORD *)&v20 = v13;
    *((_QWORD *)&v20 + 1) = v22;
    if (v22)
    {
      v14 = (unint64_t *)(v22 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v12);
    (**ErrorNotifier)(ErrorNotifier, &v20);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v20;
    v20 = 0uLL;
  }
LABEL_5:
  v12 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, double *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)]
                                                                                          + 184))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 304)], &v23);
  goto LABEL_6;
}

void sub_1880ECFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NotifyError<void *,void *>(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  AdobeXMPCore_Int::IError_I::CreateError(3, a3, 2, &v22);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 120))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ConfigurableImpl.cpp", 41);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)] + 112))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a1, -1);
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 152))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a2);
  if (a4)
  {
    v19 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = a4;
    v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v19 + 152))(v19, &v21);
    if (!a6)
    {
LABEL_3:
      if (!a4)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if (!a6)
  {
    goto LABEL_3;
  }
  v20 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
  *(_QWORD *)&v21 = a6;
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, __int128 *))(*(_QWORD *)v20 + 152))(v20, &v21);
  if (!a4)
  {
LABEL_4:
    if (!a6)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_14:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a5);
  if (!a6)
  {
LABEL_6:
    v14 = v22;
    if (v22)
      v14 = &v22[*(_QWORD *)(*(_QWORD *)v22 - 304)];
    *(_QWORD *)&v21 = v14;
    *((_QWORD *)&v21 + 1) = v23;
    if (v23)
    {
      v15 = (unint64_t *)(v23 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v13);
    (**ErrorNotifier)(ErrorNotifier, &v21);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    v21 = 0uLL;
  }
LABEL_5:
  v13 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)]
                                                                                         + 136))(&v22[*(_QWORD *)(*(_QWORD *)v22 - 304)], a7);
  goto LABEL_6;
}

void sub_1880ED1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  if (a10)
    AdobeXMPCore_Int::NotifyError<BOOL,BOOL>();
  AdobeXMPCore_Int::NotifyError<BOOL,BOOL>((uint64_t)&a9, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,std::pair<AdobeXMPCommon::IConfigurable::eDataType,AdobeXMPCommon::IConfigurable::CombinedDataValue>>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t MemoryAllocator;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  v9 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, v4);
  MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)v9);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v4);
  return 1;
}

uint64_t *std::__tree<unsigned long long,std::less<unsigned long long>,AdobeXMPCore_Int::TAllocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    v11 = (uint64_t *)(**MemoryAllocator)(MemoryAllocator, 40);
    v11[4] = *a3;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

uint64_t **std::__tree<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>,std::less<unsigned long long>,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<unsigned long long,AdobeXMPCommon::IConfigurable::eDataType>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    v12 = (**MemoryAllocator)(MemoryAllocator, 48);
    *(_QWORD *)(v12 + 32) = **a4;
    *(_DWORD *)(v12 + 40) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void OUTLINED_FUNCTION_1_4(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void OUTLINED_FUNCTION_3_2()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void AdobeXMPCore_Int::NotifyError<BOOL,BOOL>(uint64_t a1, _QWORD *a2)
{
  unint64_t *v2;
  uint64_t v3;
  int v4;

  if (*a2)
  {
    v2 = (unint64_t *)(*a2 + 8);
    do
      OUTLINED_FUNCTION_1_4(v2);
    while (v4);
    if (!v3)
    {
      OUTLINED_FUNCTION_0_6();
      OUTLINED_FUNCTION_3_2();
    }
  }
  OUTLINED_FUNCTION_2_0();
}

void AdobeXMPCore_Int::NotifyError<BOOL,BOOL>()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;

  OUTLINED_FUNCTION_4_0();
  do
    OUTLINED_FUNCTION_1_4(v0);
  while (v2);
  if (!v1)
  {
    OUTLINED_FUNCTION_0_6();
    OUTLINED_FUNCTION_3_2();
  }
  OUTLINED_FUNCTION_2_0();
}

uint64_t AdobeXMPCore_Int::RDFDOMParserImpl::clone(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  AdobeXMPCore_Int::RDFDOMParserImpl *v1;

  v1 = (AdobeXMPCore_Int::RDFDOMParserImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::RDFDOMParserImpl::RDFDOMParserImpl(v1);
  if (v1)
    return (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 48);
  else
    return 0;
}

void sub_1880ED4D4(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

AdobeXMPCore_Int::RDFDOMParserImpl *AdobeXMPCore_Int::RDFDOMParserImpl::RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  *((_QWORD *)this + 13) = off_1E1B97BD0;
  *((_QWORD *)this + 6) = &off_1E1B98F48;
  *(_QWORD *)this = off_1E1B98190;
  *((_QWORD *)this + 2) = &unk_1E1B99130;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_WORD *)this + 48) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + 16), (uint64_t *)&off_1E1BAA670);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &off_1E1BB7B90;
  *((_QWORD *)this + 6) = &off_1E1BB7E00;
  *((_QWORD *)this + 13) = off_1E1BB7F60;
  *(_QWORD *)this = off_1E1BB79B8;
  return this;
}

void sub_1880ED590(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::ConfigurableImpl *v1;
  AdobeXMPCore_Int::SharedObjectImpl *v2;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v2, (uint64_t *)off_1E1BAA750);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v1, (uint64_t *)off_1E1BAA738);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMParserImpl::ParseAsNode(AdobeXMPCore_Int::RDFDOMParserImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  XMPMeta *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  AdobeXMPCore_Int::IMetadataConverterUtils_I *v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23[3];
  AdobeXMPCore_Int::IMetadataConverterUtils_I *v24;
  std::__shared_weak_count *v25;

  v24 = 0;
  v25 = 0;
  v8 = (XMPMeta *)operator new();
  XMPMeta::XMPMeta(v8);
  std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(&v24, (uint64_t)v8);
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      (*(void (**)(AdobeXMPCore_Int::IMetadataConverterUtils_I *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v24 + 216))(v24, v10, *(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40), *(unsigned int *)(v9 + 8));
      *((_DWORD *)v24 + 91) = *(_DWORD *)(*((_QWORD *)this + 1) + 12);
    }
  }
  LOBYTE(v23[0]) = 0;
  v11 = (*(uint64_t (**)(char *, void *, char **))(*(_QWORD *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 96))
                                                           + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 96), &AdobeXMPCore_Int::Parser::kAllowedKeys, v23);
  v12 = LOBYTE(v23[0]);
  v13 = (*(uint64_t (**)(char *, void *, char **))(*(_QWORD *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 96))
                                                           + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 96), &unk_1EDF03248, v23);
  if (v12)
    v14 = v11;
  else
    v14 = 0;
  if ((v13 & (LOBYTE(v23[0]) != 0)) != 0)
    v15 = v14 | 4;
  else
    v15 = v14;
  (*(void (**)(AdobeXMPCore_Int::IMetadataConverterUtils_I *, const char *, uint64_t, uint64_t))(*(_QWORD *)v24 + 200))(v24, a2, a3, v15);
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = v24;
    if (*(_QWORD *)(v16 + 24))
      *(_DWORD *)(v16 + 12) = *((_DWORD *)v24 + 91);
  }
  else
  {
    v17 = v24;
  }
  AdobeXMPCore_Int::IMetadataConverterUtils_I::convertXMPMetatoIMetadata(v17, v23);
  v18 = v23[0];
  if (v23[0])
    v18 = &v23[0][*(_QWORD *)(*(_QWORD *)v23[0] - 544)];
  v19 = v23[1];
  *a4 = v18;
  a4[1] = v19;
  v20 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1880ED778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int *v16;
  uint64_t v17;
  AdobeXMPCore_Int::IErrorNotifier_I *v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;

  if (a2 == 1)
  {
    v16 = (int *)__cxa_begin_catch(a1);
    a13 = 0;
    v17 = *(_QWORD *)(v14 + 8);
    if (v17 && *(_QWORD *)(v17 + 24))
      *(_DWORD *)(v17 + 12) = *(_DWORD *)(a14 + 364);
    XMPUtils::MapXMPErrorToIError(*v16, (int *)&a13 + 1, &a13);
    a11 = 0;
    a12 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(SHIDWORD(a13), a13, 2, &a11);
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)((char *)a11 + *(_QWORD *)(*a11 - 304)) + 120))((uint64_t)a11 + *(_QWORD *)(*a11 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/RDFDOMParserImpl.cpp", 115);
    v18 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)((char *)a11 + *(_QWORD *)(*a11 - 304)) + 112))((uint64_t)a11 + *(_QWORD *)(*a11 - 304), "XMP Error caught", -1);
    if (a11)
      v19 = (char *)a11 + *(_QWORD *)(*a11 - 304);
    else
      v19 = 0;
    *(_QWORD *)&a9 = v19;
    *((_QWORD *)&a9 + 1) = a12;
    if (a12)
    {
      v20 = (unint64_t *)(a12 + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v18);
    (**ErrorNotifier)(ErrorNotifier, &a9);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = a9;
    a9 = 0uLL;
  }
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::ParseAsNode(AdobeXMPCore_Int::RDFDOMParserImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  AdobeXMPCore_Int::RDFDOMParserImpl::ParseAsNode((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 328)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::RDFDOMParserImpl::ValidateValue()
{
  return 0;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::ValidateValue()
{
  return 0;
}

uint64_t AdobeXMPCore_Int::RDFDOMParserImpl::SetErrorCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::SetErrorCallback(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)((char *)result + *(_QWORD *)(*result - 352) + 8) = a2;
  return result;
}

void AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + 16), (uint64_t *)&off_1E1BAA670);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + 104), (uint64_t *)off_1E1BAA750);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this + 48), (uint64_t *)off_1E1BAA738);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl(AdobeXMPCore_Int::RDFDOMParserImpl *this)
{
  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 208)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 208)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMParserImpl::~RDFDOMParserImpl((AdobeXMPCore_Int::RDFDOMParserImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl(AdobeXMPCore_Int::DOMParserImpl *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 368)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 312)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 320)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 384)) = a2[9];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

_QWORD *std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BBC340;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1880EDB30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<XMPMeta *,std::shared_ptr<XMPMeta>::__shared_ptr_default_delete<XMPMeta,XMPMeta>,std::allocator<XMPMeta>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::IError_I::AppendParameter(_QWORD *a1, _QWORD *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 304);
  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 208))(*a2);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v3 + 128))(v3, v4, v5);
}

uint64_t AdobeXMPCore_Int::IError_I::getCode(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), 0, (uint64_t (*)(_QWORD *))0x28, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IError_I::getDomain(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorDomain>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), 0, (uint64_t (*)(_QWORD *))0x30, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorDomain>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IError_I::getSeverity(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), 0, (uint64_t (*)(_QWORD *))0x38, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::IError_I::getMessage(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (void (*)(char **__return_ptr, _QWORD *))0x40, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880EE0EC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880EE0D0);
}

void sub_1880EE1E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::getLocation(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 304), (void (*)(char **__return_ptr, _QWORD *))0x48, 1);
}

uint64_t AdobeXMPCore_Int::IError_I::getParameter(AdobeXMPCore_Int::IError_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x50, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 49, a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880EE388(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880EE36CLL);
}

void sub_1880EE484(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::getNextError(AdobeXMPCore_Int::IError_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (void (*)(char **__return_ptr, _QWORD *))0x60, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E4572726F722020, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880EE5DC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880EE5C0);
}

void sub_1880EE6D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::setNextError(AdobeXMPCore_Int::IError_I *this, AdobeXMPCommon::IError_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 304);
  AdobeXMPCommon::IError_v1::MakeShared((char *)a2, &v11);
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1,std::shared_ptr<AdobeXMPCommon::IError_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x68, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 60, (uint64_t)&v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880EE798(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1*,AdobeXMPCommon::IError_v1,std::shared_ptr<AdobeXMPCommon::IError_v1> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x6E4572726F722020, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880EE8B8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880EE89CLL);
}

void sub_1880EE9B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::GetInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(AdobeXMPCore_Int::IError_I *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 288))(this, a2, a3, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IError_I::GetInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)((char *)this
                                                                                  + *(_QWORD *)(*(_QWORD *)this - 32))
                                                                      + 288))((char *)this + *(_QWORD *)(*(_QWORD *)this - 32), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IError_I::getInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IError_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x110, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 69, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IError_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IError_I::getInterfacePointer(AdobeXMPCore_Int::IError_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IError_I::getInterfacePointer((AdobeXMPCore_Int::IError_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

_QWORD *AdobeXMPCore_Int::IError_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x6E55544638537472)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 304));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E55544638537472, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 0x55u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E4572726F722020, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 0x5Bu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880EEC20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;

  v15 = a2;
  v14 = a3;
  *a6 = 0;
  a6[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 2, a1, a6);
  v9 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v9 + 112))(v9, "Requested Interface Version is not available", -1);
  v10 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 120))(v10, a4, a5);
  v11 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 152))(v11, &v15);
  v12 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v12 + 144))(v12, &v14);
}

uint64_t AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a3;
  v15 = a2;
  *a6 = 0;
  a6[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 11, a1, a6);
  v9 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v9 + 112))(v9, "Requested Interface is not available", -1);
  v10 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 120))(v10, a4, a5);
  v11 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 152))(v11, &v15);
  v12 = *a6 + *(_QWORD *)(*(_QWORD *)*a6 - 304);
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 152))(v12, &v14);
}

uint64_t AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  *a4 = 0;
  a4[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 200, a1, a4);
  v7 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 304);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 112))(v7, "Unknown Exception Caught", -1);
  v8 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 304);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 120))(v8, a2, a3);
}

uint64_t AdobeXMPCore_Int::IError_I::CreateClientCodeExceptionError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  *a4 = 0;
  a4[1] = 0;
  AdobeXMPCore_Int::IError_I::CreateError(1, 100, a1, a4);
  v7 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 304);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 112))(v7, "Client Code raised an exception", -1);
  v8 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 304);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 120))(v8, a2, a3);
}

uint64_t AdobeXMPCore_Int::ReportErrorAndContinueABISafe(AdobeXMPCore_Int *this, int a2, unsigned int a3, uint64_t a4, const char *a5, const AdobeXMPCommon::IError_v1 **a6)
{
  AdobeXMPCore_Int::IErrorNotifier_I *v8;
  char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (***ErrorNotifier)(_QWORD, char **);
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *exception;
  char *v21;
  std::__shared_weak_count *v22;
  char *v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  AdobeXMPCore_Int::IError_I::CreateError((int)this, a2, a3, &v23);
  (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)] + 120))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 132);
  v8 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)]
                                                                                                 + 112))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 304)], a4, -1);
  if (v23)
    v9 = &v23[*(_QWORD *)(*(_QWORD *)v23 - 304)];
  else
    v9 = 0;
  v21 = v9;
  v22 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ErrorNotifier = (uint64_t (***)(_QWORD, char **))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v8);
  if (((**ErrorNotifier)(ErrorNotifier, &v21) & 1) == 0 || a3 >= 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v21;
    exception[1] = v22;
    v21 = 0;
    v22 = 0;
  }
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return 1;
}

void sub_1880EF0D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  _QWORD *exception_ptr;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 == 2)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a11 = (_QWORD *)*exception_ptr;
    a12 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = a11;
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)a11 + *(_QWORD *)(*a11 - 56)) + 16))((uint64_t)a11 + *(_QWORD *)(*a11 - 56));
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    *v12 = v19;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    __cxa_end_catch();
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateClientCodeExceptionError(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IError_I.cpp", 0x8Au, &a11);
    v21 = a11;
    if (a11)
      v21 = (_QWORD *)((char *)a11 + *(_QWORD *)(*a11 - 304));
    *v12 = v21;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    v22 = *v12 + *(_QWORD *)(*(_QWORD *)*v12 - 56);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    __cxa_end_catch();
  }
  JUMPOUT(0x1880EF090);
}

void sub_1880EF1E8(void *a1)
{
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::IError_I::GetISharedObject_I(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 312);
}

uint64_t AdobeXMPCore_Int::IError_I::GetActualIError(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IError_I::GetISharedObject_I(AdobeXMPCore_Int::IError_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 312);
}

void ISOMedia::TerminateGlobals(ISOMedia *this)
{
  _QWORD *v1;
  _QWORD *v2;

  if (ISOMedia::boxList(void)::onceToken != -1)
    dispatch_once(&ISOMedia::boxList(void)::onceToken, &__block_literal_global_44);
  v1 = (_QWORD *)ISOMedia::gBoxList;
  v2 = (_QWORD *)(ISOMedia::gBoxList + 8);
  std::__tree<unsigned long long>::destroy(ISOMedia::gBoxList, *(_QWORD **)(ISOMedia::gBoxList + 8));
  *v1 = v2;
  v1[2] = 0;
  *v2 = 0;
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

unsigned __int16 *TIFF_MemoryReader::SortIFD(unsigned __int16 *result)
{
  _WORD *v1;
  unint64_t v2;
  unsigned __int16 *v3;
  unint64_t v4;
  unsigned int v5;
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  size_t v15;
  int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v1 = result;
  v2 = *result;
  if (v2 < 2)
  {
    LOWORD(v6) = *result;
  }
  else
  {
    v3 = (unsigned __int16 *)*((_QWORD *)result + 1);
    v4 = 1;
    v5 = *v3;
    v6 = *result;
    do
    {
      v7 = &v3[6 * v4];
      v8 = *v7;
      if (v8 <= v5)
      {
        if (v8 == v5)
        {
          result = (unsigned __int16 *)memmove(&v3[6 * v4 - 6], v7, 12 * (v2 - v4));
          --v6;
          --v4;
        }
        else
        {
          v9 = &v3[6 * (int)v4];
          v10 = 12 * v4 - 12 * (int)v4;
          v11 = (v4 << 32) + 0x100000000;
          v12 = v4 + 1;
          v13 = &v3[6 * v4];
          while (1)
          {
            v14 = v9;
            v15 = v10;
            v16 = HIDWORD(v11);
            if (--v12 < 1)
              break;
            v9 -= 6;
            v10 += 12;
            v11 -= 0x100000000;
            v17 = v13 - 6;
            v18 = *(v13 - 6);
            v13 -= 6;
            if (v18 <= v8)
            {
              if (v18 == v8)
              {
                v19 = *(_QWORD *)v7;
                *((_DWORD *)v17 + 2) = *((_DWORD *)v7 + 2);
                *(_QWORD *)v17 = v19;
                result = (unsigned __int16 *)memmove(&v3[6 * v4], &v3[6 * v4 + 6], 12 * (v2 - (v4 + 1)));
                --v6;
                --v4;
                goto LABEL_13;
              }
              break;
            }
          }
          v20 = *(_QWORD *)v7;
          v21 = *((_DWORD *)v7 + 2);
          result = (unsigned __int16 *)memmove(&v3[6 * v16], v14, v15);
          *(_QWORD *)v14 = v20;
          *((_DWORD *)v14 + 2) = v21;
        }
      }
      else
      {
        v5 = *v7;
      }
LABEL_13:
      ++v4;
      v2 = (unsigned __int16)v6;
    }
    while (v4 < (unsigned __int16)v6);
  }
  *v1 = v6;
  return result;
}

BOOL TIFF_MemoryReader::GetIFD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _WORD *v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  _QWORD *exception;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;

  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Invalid IFD requested";
    *((_BYTE *)exception + 16) = 0;
  }
  v6 = (_WORD *)(a1 + 16 * a2 + 112);
  if (!a3)
    return *v6 != 0;
  v7 = (_QWORD *)(a3 + 8);
  std::__tree<unsigned long long>::destroy(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = 0;
  *v7 = 0;
  v8 = (unsigned __int16)*v6;
  if (!*v6)
    return 0;
  v9 = 0;
  v10 = 0;
  v11 = (uint64_t *)(a1 + 16 * a2 + 120);
  do
  {
    v12 = *v11;
    v13 = *v11 + v9;
    if (*(unsigned __int16 *)(v13 + 2) - 14 >= 0xFFFFFFF3)
    {
      v22 = 0;
      v21 = 0uLL;
      v14 = *(unsigned __int16 *)(v13 + 2);
      v15 = *(_DWORD *)(v13 + 4);
      LOWORD(v21) = *(_WORD *)v13;
      v16 = kTIFF_TypeSizes[v14];
      WORD1(v21) = v14;
      LODWORD(v22) = v15;
      DWORD1(v21) = v15 / v16;
      if (*(_DWORD *)(v13 + 4) > 4u)
        v17 = *(_QWORD *)(a1 + 96) + *(unsigned int *)(v12 + v9 + 8);
      else
        v17 = v12 + v9 + 8;
      *((_QWORD *)&v21 + 1) = v17;
      v23 = &v21;
      v18 = std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)a3, (unsigned __int16 *)&v21, (uint64_t)&std::piecewise_construct, (_WORD **)&v23);
      *(_OWORD *)(v18 + 5) = v21;
      *((_DWORD *)v18 + 14) = v22;
      v8 = (unsigned __int16)*v6;
    }
    ++v10;
    v9 += 12;
  }
  while (v10 < v8);
  return 1;
}

unsigned __int16 *TIFF_MemoryReader::FindTagInIFD(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3)
{
  char *v3;
  unsigned int v4;
  unsigned __int16 *v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  _QWORD *exception;

  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    exception[1] = "Invalid IFD requested";
    *((_BYTE *)exception + 16) = 0;
  }
  v3 = (char *)this + 16 * a2;
  v4 = *((unsigned __int16 *)v3 + 56);
  if (!*((_WORD *)v3 + 56))
    return 0;
  v5 = (unsigned __int16 *)*((_QWORD *)this + 2 * a2 + 15);
  while (v4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = &v5[6 * (v4 >> 1)];
    v8 = *v7;
    v4 -= v4 >> 1;
    if (v8 <= a3)
      v5 += 6 * v6;
    else
      v4 = v6;
    if (v8 == a3)
    {
      v5 = v7;
      break;
    }
  }
  if (*v5 == a3)
    return v5;
  else
    return 0;
}

unsigned __int16 *TIFF_MemoryReader::GetValueOffset(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3)
{
  unsigned __int16 *result;
  int v5;
  uint64_t v6;

  result = TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*((_DWORD *)result + 1) > 4u)
    {
      v6 = *((_QWORD *)this + 12);
      v5 = v6 + *((_DWORD *)result + 2);
    }
    else
    {
      v5 = (_DWORD)result + 8;
      v6 = *((_QWORD *)this + 12);
    }
    return (unsigned __int16 *)(v5 - v6);
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag(TIFF_MemoryReader *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned __int16 *TagInIFD;
  uint64_t v7;
  _BOOL8 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;

  TagInIFD = TIFF_MemoryReader::FindTagInIFD(a1, a2, a3);
  if (!TagInIFD)
    return 0;
  v7 = TagInIFD[1];
  v8 = (v7 - 1) < 0xD;
  if (a4 && (v7 - 1) <= 0xC)
  {
    v9 = *((_DWORD *)TagInIFD + 1);
    *(_WORD *)a4 = *TagInIFD;
    v10 = kTIFF_TypeSizes[v7];
    *(_WORD *)(a4 + 2) = v7;
    *(_DWORD *)(a4 + 4) = v9 / v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (*((_DWORD *)TagInIFD + 1) > 4u)
      v11 = (unsigned __int16 *)(*((_QWORD *)a1 + 12) + *((unsigned int *)TagInIFD + 2));
    else
      v11 = TagInIFD + 4;
    *(_QWORD *)(a4 + 8) = v11;
    return 1;
  }
  return v8;
}

uint64_t TIFF_MemoryReader::GetTag_Integer(uint64_t (**this)(unsigned __int16 *), unsigned int a2, unsigned int a3, unsigned int *a4)
{
  unsigned __int16 *TagInIFD;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(unsigned __int16 *);
  unsigned __int8 *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned __int16 *v15;
  char *v16;

  TagInIFD = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)this, a2, a3);
  if (!TagInIFD)
    return 0;
  v7 = TagInIFD[1];
  if (v7 > 0xD)
    return 0;
  v8 = *((unsigned int *)TagInIFD + 1);
  if (kTIFF_TypeSizes[v7] != v8)
    return 0;
  v9 = 0;
  switch(TagInIFD[1])
  {
    case 1u:
      if (v8 > 4)
        v12 = (unsigned __int8 *)this[12] + *((unsigned int *)TagInIFD + 2);
      else
        v12 = (unsigned __int8 *)(TagInIFD + 4);
      v14 = *v12;
      goto LABEL_25;
    case 3u:
      v10 = this[1];
      goto LABEL_11;
    case 4u:
    case 9u:
      v10 = this[2];
LABEL_11:
      if (v8 > 4)
        v13 = (unsigned __int16 *)((char *)this[12] + *((unsigned int *)TagInIFD + 2));
      else
        v13 = TagInIFD + 4;
      v14 = v10(v13);
      goto LABEL_25;
    case 6u:
      if (v8 > 4)
        v16 = (char *)this[12] + *((unsigned int *)TagInIFD + 2);
      else
        v16 = (char *)(TagInIFD + 4);
      v14 = *v16;
      goto LABEL_25;
    case 8u:
      if (v8 > 4)
        v15 = (unsigned __int16 *)((char *)this[12] + *((unsigned int *)TagInIFD + 2));
      else
        v15 = TagInIFD + 4;
      v14 = (__int16)this[1](v15);
LABEL_25:
      if (a4)
        *a4 = v14;
      v9 = 1;
      break;
    default:
      return v9;
  }
  return v9;
}

uint64_t TIFF_MemoryReader::GetTag_Byte(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 1 && *(_DWORD *)(result + 4) == 1)
    {
      if (a4)
        *a4 = *(_BYTE *)(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SByte(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, signed __int8 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 6 && *(_DWORD *)(result + 4) == 1)
    {
      if (a4)
        *a4 = *(_BYTE *)(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Short(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 3 && *(_DWORD *)(result + 4) == 2)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(uint64_t))this + 1))(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SShort(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, __int16 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 8 && *(_DWORD *)(result + 4) == 2)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(uint64_t))this + 1))(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Long(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 4 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(uint64_t))this + 2))(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_SLong(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, int *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 9 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(uint64_t))this + 2))(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *TIFF_MemoryReader::GetTag_Rational(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  unsigned __int16 *result;
  uint64_t v7;

  result = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)a1, a2, a3);
  if (result)
  {
    if (result[1] == 5 && *((_DWORD *)result + 1) == 8)
    {
      if (a4)
      {
        v7 = *(_QWORD *)(a1 + 96) + *((unsigned int *)result + 2);
        *a4 = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7);
        a4[1] = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7 + 4);
      }
      return (unsigned __int16 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int16 *TIFF_MemoryReader::GetTag_SRational(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4)
{
  unsigned __int16 *result;
  uint64_t v7;

  result = TIFF_MemoryReader::FindTagInIFD((TIFF_MemoryReader *)a1, a2, a3);
  if (result)
  {
    if (result[1] == 10 && *((_DWORD *)result + 1) == 8)
    {
      if (a4)
      {
        v7 = *(_QWORD *)(a1 + 96) + *((unsigned int *)result + 2);
        *a4 = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7);
        a4[1] = (*(uint64_t (**)(uint64_t))(a1 + 16))(v7 + 4);
      }
      return (unsigned __int16 *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Float(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, float *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 11 && *(_DWORD *)(result + 4) == 4)
    {
      if (a4)
        *a4 = (*((float (**)(uint64_t))this + 3))(result + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_Double(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, double *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 12 && *(_DWORD *)(result + 4) == 8)
    {
      if (a4)
        *a4 = (*((double (**)(_QWORD))this + 4))(*((_QWORD *)this + 12) + *(unsigned int *)(result + 8));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_ASCII(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, const char **a4, unsigned int *a5)
{
  uint64_t result;
  const char *v9;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 2)
    {
      if (a4)
      {
        if (*(_DWORD *)(result + 4) > 4u)
          v9 = (const char *)(*((_QWORD *)this + 12) + *(unsigned int *)(result + 8));
        else
          v9 = (const char *)(result + 8);
        *a4 = v9;
      }
      if (a5)
        *a5 = *(_DWORD *)(result + 4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_MemoryReader::GetTag_EncodedString(TIFF_MemoryReader *a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  uint64_t result;
  unint64_t v7;
  unsigned __int8 *v8;

  result = (uint64_t)TIFF_MemoryReader::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 7)
    {
      if (a4)
      {
        v7 = *(unsigned int *)(result + 4);
        if (v7 > 4)
          v8 = (unsigned __int8 *)(*((_QWORD *)a1 + 12) + *(unsigned int *)(result + 8));
        else
          v8 = (unsigned __int8 *)(result + 8);
        return TIFF_Manager::DecodeString((uint64_t)a1, v8, v7, a4);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TIFF_MemoryReader::ParseMemoryStream(void **this, const void *a2, size_t size, char a4, int a5)
{
  unsigned int v7;
  uint64_t v10;
  void **v11;
  void *v12;
  unsigned int v13;
  TIFF_MemoryReader *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int16 *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  unsigned int v34;
  unsigned __int16 *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD *exception;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;

  v7 = size;
  if (*((_BYTE *)this + 88))
    free(this[12]);
  v10 = 0;
  *((_BYTE *)this + 88) = 0;
  this[12] = 0;
  *((_DWORD *)this + 26) = 0;
  do
  {
    v11 = &this[v10];
    *((_WORD *)v11 + 56) = 0;
    v11[15] = 0;
    v10 += 2;
  }
  while (v10 != 10);
  if (!v7)
    return;
  if ((a4 & 1) != 0)
  {
    if (v7 >= 0x6400001)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 206;
      v39 = "Outrageous length for memory-based TIFF";
    }
    else
    {
      v12 = malloc_type_malloc(v7, 0xE4A3D098uLL);
      this[12] = v12;
      if (v12)
      {
        memcpy(v12, a2, v7);
        *((_BYTE *)this + 88) = 1;
        goto LABEL_11;
      }
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      v39 = "Out of memory";
    }
    exception[1] = v39;
    *((_BYTE *)exception + 16) = 0;
  }
  this[12] = (void *)a2;
LABEL_11:
  *((_DWORD *)this + 26) = v7;
  v13 = v7 - 6;
  if (a5)
  {
    *((_BYTE *)this + 73) = 1;
    this[1] = GetUns16LE;
    this[2] = GetUns32LE;
    this[3] = GetFloatLE;
    this[4] = GetDoubleLE;
    this[5] = PutUns16LE;
    this[6] = PutUns32LE;
    this[7] = PutFloatLE;
    this[8] = PutDoubleLE;
    v14 = (TIFF_MemoryReader *)this;
    v15 = 0;
    v16 = 1;
    goto LABEL_15;
  }
  v17 = TIFF_Manager::CheckTIFFHeader((TIFF_Manager *)this, (unsigned int *)this[12], v7);
  if (v17)
  {
    v15 = v17;
    v14 = (TIFF_MemoryReader *)this;
    v16 = 0;
LABEL_15:
    v18 = TIFF_MemoryReader::ProcessOneIFD(v14, v15, 0, v16);
    v19 = v18;
    if (v18)
    {
      if (IsOffsetValid(v18, 8u, v13))
      {
        TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v19, 1u, 0);
      }
      else
      {
        v40 = 206;
        v41 = "Bad IFD offset";
        v42 = 0;
        (*((void (**)(void **, _QWORD, uint64_t *))*this + 33))(this, 0, &v40);
      }
    }
  }
  v20 = *((unsigned __int16 *)this + 56);
  if (*((_WORD *)this + 56))
  {
    v21 = (unsigned __int16 *)this[15];
    v22 = *((unsigned __int16 *)this + 56);
    while (v22 >= 2)
    {
      v23 = v22 >> 1;
      v24 = &v21[6 * (v22 >> 1)];
      v25 = *v24;
      v22 -= v22 >> 1;
      if (v25 <= 0x8769)
        v21 += 6 * v23;
      else
        v22 = v23;
      if (v25 == 34665)
      {
        v21 = v24;
        goto LABEL_28;
      }
    }
    if (*v21 != 34665)
      goto LABEL_31;
LABEL_28:
    if (v21[1] == 4 && *((_DWORD *)v21 + 1) == 4)
    {
      v26 = ((uint64_t (*)(unsigned __int16 *))this[2])(v21 + 4);
      TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v26, 2u, 0);
      v20 = *((unsigned __int16 *)this + 56);
    }
LABEL_31:
    if (v20)
    {
      v27 = (unsigned __int16 *)this[15];
      while (v20 >= 2)
      {
        v28 = v20 >> 1;
        v29 = &v27[6 * (v20 >> 1)];
        v30 = *v29;
        v20 -= v20 >> 1;
        if (v30 <= 0x8825)
          v27 += 6 * v28;
        else
          v20 = v28;
        if (v30 == 34853)
        {
          v27 = v29;
          goto LABEL_40;
        }
      }
      if (*v27 != 34853)
        goto LABEL_45;
LABEL_40:
      if (v27[1] == 4 && *((_DWORD *)v27 + 1) == 4)
      {
        v31 = ((uint64_t (*)(unsigned __int16 *))this[2])(v27 + 4);
        if (IsOffsetValid(v31, 8u, v13))
        {
          TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v31, 3u, 0);
        }
        else
        {
          v40 = 206;
          v41 = "Bad IFD offset";
          v42 = 0;
          (*((void (**)(void **, _QWORD, uint64_t *))*this + 33))(this, 0, &v40);
        }
      }
    }
  }
LABEL_45:
  v32 = *((unsigned __int16 *)this + 72);
  if (*((_WORD *)this + 72))
  {
    v33 = (unsigned __int16 *)this[19];
    while (v32 >= 2)
    {
      v34 = v32 >> 1;
      v35 = &v33[6 * (v32 >> 1)];
      v36 = *v35;
      v32 -= v32 >> 1;
      if (v36 <= 0xA005)
        v33 += 6 * v34;
      else
        v32 = v34;
      if (v36 == 40965)
      {
        v33 = v35;
        goto LABEL_54;
      }
    }
    if (*v33 != 40965)
      return;
LABEL_54:
    if (v33[1] == 4 && *((_DWORD *)v33 + 1) == 4)
    {
      v37 = ((uint64_t (*)(unsigned __int16 *))this[2])(v33 + 4);
      if (IsOffsetValid(v37, 8u, v13))
      {
        TIFF_MemoryReader::ProcessOneIFD((TIFF_MemoryReader *)this, v37, 4u, 0);
      }
      else
      {
        v40 = 206;
        v41 = "Bad IFD offset";
        v42 = 0;
        (*((void (**)(void **, _QWORD, uint64_t *))*this + 33))(this, 0, &v40);
      }
    }
  }
}

uint64_t TIFF_MemoryReader::ProcessOneIFD(TIFF_MemoryReader *this, unsigned int a2, unsigned int a3, int a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  int v19;
  signed int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  const char *v29;
  uint64_t v30;

  if (a4)
  {
    if (*((_DWORD *)this + 26) >= a2)
      goto LABEL_7;
LABEL_6:
    v28 = 206;
    v29 = "Bad IFD offset";
    v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, 2, &v28);
    goto LABEL_7;
  }
  if (a2 < 8 || (unint64_t)*((unsigned int *)this + 26) - 6 < a2)
    goto LABEL_6;
LABEL_7:
  v7 = a3;
  v8 = (char *)this + 16 * a3;
  v9 = *((_QWORD *)this + 12);
  v10 = v9 + a2;
  v11 = (*((uint64_t (**)(uint64_t))this + 1))(v10);
  v12 = (__int16)v11;
  if ((v11 & 0x8000) != 0)
  {
    v28 = 206;
    v29 = "Outrageous IFD count";
    v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, 2, &v28);
  }
  v13 = (unsigned __int16 *)(v8 + 112);
  if (12 * v11 + 6 > *((_DWORD *)this + 26) - a2)
  {
    v28 = 206;
    v29 = "Out of bounds IFD";
    v30 = 0;
    (*(void (**)(TIFF_MemoryReader *, uint64_t, uint64_t *))(*(_QWORD *)this + 264))(this, 2, &v28);
  }
  v14 = (4 * ((3 * v11) & 0x3FFFF)) | 2;
  *v13 = v12;
  *((_QWORD *)this + 2 * v7 + 15) = v10 + 2;
  if (!v12)
    return (*((uint64_t (**)(uint64_t))this + 2))(v10 + v14);
  v15 = 0;
  v16 = (unsigned __int16)v12;
  v17 = *((unsigned __int8 *)this + 73);
  v18 = (unsigned int *)(a2 + v9 + 6);
  v19 = -1;
  do
  {
    v20 = *((unsigned __int16 *)v18 - 2);
    if (v17)
    {
      v21 = *((unsigned __int16 *)v18 - 1);
    }
    else
    {
      v20 = __rev16(v20);
      *((_WORD *)v18 - 2) = v20;
      v21 = bswap32(*((unsigned __int16 *)v18 - 1)) >> 16;
      *((_WORD *)v18 - 1) = v21;
      *v18 = bswap32(*v18);
    }
    v22 = v19 >= v20;
    if ((unsigned __int16)(v21 - 14) >= 0xFFF3u)
    {
      v23 = *v18 * kTIFF_TypeSizes[v21];
      *v18 = v23;
      if (v23 >= 5)
      {
        v24 = v18[1];
        if (!v17)
        {
          v24 = bswap32(v24);
          v18[1] = v24;
        }
        if (v24 < 8 || (v25 = *((_DWORD *)this + 26), v25 <= v24) || v23 > v25 - v24)
          *(_QWORD *)v18 = 0;
      }
    }
    v15 |= v22;
    v18 += 3;
    v19 = v20;
    --v16;
  }
  while (v16);
  v26 = (*((uint64_t (**)(uint64_t))this + 2))(v10 + v14);
  if ((v15 & 1) != 0)
    TIFF_MemoryReader::SortIFD(v13);
  return v26;
}

BOOL TIFF_MemoryReader::HasExifIFD(TIFF_MemoryReader *this)
{
  return *((_WORD *)this + 72) != 0;
}

BOOL TIFF_MemoryReader::HasGPSInfoIFD(TIFF_MemoryReader *this)
{
  return *((_WORD *)this + 80) != 0;
}

void TIFF_MemoryReader::SetTag(TIFF_MemoryReader *this, unsigned __int8 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned int a5, const void *a6)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void TIFF_MemoryReader::DeleteTag(TIFF_MemoryReader *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::GetTiffLength(TIFF_MemoryReader *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t TIFF_MemoryReader::GetTiffStream(TIFF_MemoryReader *this)
{
  return *((_QWORD *)this + 12);
}

void TIFF_MemoryReader::SetTag_EncodedString()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::IsChanged(TIFF_MemoryReader *this)
{
  return 0;
}

uint64_t TIFF_MemoryReader::IsLegacyChanged(TIFF_MemoryReader *this)
{
  return 0;
}

void TIFF_MemoryReader::ParseFileStream()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void TIFF_MemoryReader::IntegrateFromPShop6(TIFF_MemoryReader *this, const void *a2)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t TIFF_MemoryReader::UpdateMemoryStream(TIFF_MemoryReader *this, void **a2)
{
  if (a2)
    *a2 = (void *)*((_QWORD *)this + 12);
  return *((unsigned int *)this + 26);
}

void TIFF_MemoryReader::UpdateFileStream()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for TIFF_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void TIFF_MemoryReader::~TIFF_MemoryReader(void **this)
{
  *this = off_1E1BB1298;
  if (*((_BYTE *)this + 88))
    free(this[12]);
}

{
  *this = off_1E1BB1298;
  if (*((_BYTE *)this + 88))
    free(this[12]);
  JUMPOUT(0x18D761C30);
}

uint64_t **std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_DWORD *)v11 + 14) = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x63444F4D53726C7ALL)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 288));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D53726C7ALL, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 0x2Au, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D53726C7ALL, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 0x30u, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880F090C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMSerializer_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMSerializer_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x100, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMSerializer_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer(AdobeXMPCore_Int::IDOMSerializer_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMSerializer_I::getInterfacePointer((AdobeXMPCore_Int::IDOMSerializer_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::clone(AdobeXMPCore_Int::IDOMSerializer_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCore::IDOMSerializer_v1*,AdobeXMPCore::IDOMSerializer_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 288), (void (*)(char **__return_ptr, _QWORD *))0xD0, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCore::IDOMSerializer_v1*,AdobeXMPCore::IDOMSerializer_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 224)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 224)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 232)]
                                                             + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 232)], 0x63444F4D53726C7ALL, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880F0BB8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880F0B9CLL);
}

void sub_1880F0CB4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMSerializer_I::serialize(AdobeXMPCore_Int::IDOMSerializer_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCore::INameSpacePrefixMap_v1 *a3, const AdobeXMPCommon::IError_v1 **a4)
{
  uint64_t v7;
  AdobeXMPCore::INameSpacePrefixMap_v1 *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  __int128 v20;

  v7 = *(_QWORD *)(*(_QWORD *)this - 288);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v18);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a3, v8, &v20);
  v17 = v20;
  v9 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a4, (uint64_t)this + v7, (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0xC8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMSerializer_I.cpp", 59, (uint64_t)&v18, (uint64_t)&v17);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_1880F0DC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMSerializer_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1880F0F00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880F0EE4);
}

void sub_1880F0FFC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x63444F4D52677374)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 152));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D52677374, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 0x2Au, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D52677374, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 0x30u, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880F1104(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMImplementationRegistry_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x88, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMImplementationRegistry_I::getInterfacePointer((AdobeXMPCore_Int::IDOMImplementationRegistry_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getParser(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, const char *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMParser_v1 *,AdobeXMPCore::IDOMParser_v1,char const*>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 152), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x28, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 54, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMParser_v1 *,AdobeXMPCore::IDOMParser_v1,char const*>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 224)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 224)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 232)]
                                                             + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 232)], 0x63444F4D50727372, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880F13B0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880F1394);
}

void sub_1880F14AC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::getSerializer(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this, const char *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMSerializer_v1 *,AdobeXMPCore::IDOMSerializer_v1,char const*>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 152), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x30, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 59, (uint64_t)a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMSerializer_v1 *,AdobeXMPCore::IDOMSerializer_v1,char const*>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 224)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 224)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 232)]
                                                             + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 232)], 0x63444F4D53726C7ALL, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880F1604(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880F15E8);
}

void sub_1880F1700(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::registerParser(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  AdobeXMPCore_Int::IDOMParser_I::CreateDOMParser(a3, &v15);
  v16 = v15;
  v15 = 0uLL;
  v7 = AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const> const&>(a4, a1, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x78, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 64, a2, (uint64_t)&v16);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v7;
}

void sub_1880F1808(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const> const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::registerSerializer(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  __int128 v16;

  AdobeXMPCore_Int::IDOMSerializer_I::CreateDOMSerializer(a3, &v15);
  v16 = v15;
  v15 = 0uLL;
  v7 = AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMSerializer_v1 const> const&>(a4, a1, 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x80, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMImplementationRegistry_I.cpp", 69, a2, (uint64_t)&v16);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v7;
}

void sub_1880F1A04(void *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,unsigned int,BOOL,char const*,std::shared_ptr<AdobeXMPCore::IDOMSerializer_v1 const> const&>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;

  AdobeXMPCore_Int::IDOMParser_I::CreateDOMParser(a3, &v10);
  v11 = v10;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, a2, &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1880F1BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::RegisterSerializer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;
  __int128 v11;

  AdobeXMPCore_Int::IDOMSerializer_I::CreateDOMSerializer(a3, &v10);
  v11 = v10;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 128))(a1, a2, &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1880F1C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 160);
}

uint64_t AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetActualIDOMImplementationRegistry(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 152);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMImplementationRegistry_I::GetISharedObject_I(AdobeXMPCore_Int::IDOMImplementationRegistry_I *this)
{
  return (uint64_t)this
       + *(_QWORD *)(*(_QWORD *)this - 40)
       + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)) - 160);
}

void AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMImplementationRegistry_I,void *,void *,unsigned long long,unsigned int>(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (uint64_t *)OUTLINED_FUNCTION_4(a1);
  v2 = v1[1];
  v15 = *v1;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      OUTLINED_FUNCTION_5(v3);
    while (v4);
  }
  OUTLINED_FUNCTION_6();
  v5 = (char *)OUTLINED_FUNCTION_2();
  v6 = OUTLINED_FUNCTION_0_3(v5);
  v7 = OUTLINED_FUNCTION_3(v6);
  OUTLINED_FUNCTION_7(v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __cxa_end_catch();
  OUTLINED_FUNCTION_1_0();
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::Acquire(_QWORD *this)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*this - 24));
  v2 = v1 + 2;
  if (atomic_load(v1 + 2))
  {
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 - 1, v2));
  }
  else
  {
    v5 = v1 + 1;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  return this;
}

unint64_t *`virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::Release(AdobeXMPCore_Int::SharedObjectImpl *this)
{
  unint64_t *result;
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;

  result = (unint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32));
  v2 = result + 1;
  if (!atomic_load(result + 1))
    return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 32))(result);
  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
    return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 32))(result);
  return result;
}

void AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(AdobeXMPCore_Int::SharedObjectImpl *this)
{
}

{
  JUMPOUT(0x18D761C30);
}

void `virtual thunk to'AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(AdobeXMPCore_Int::SharedObjectImpl *this)
{
}

{
  JUMPOUT(0x18D761C30);
}

uint64_t AdobeXMPCore_Int::SharedObjectImpl::AcquireInternal(uint64_t this)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v1 = (unint64_t *)(this + 16);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  v3 = (unint64_t *)(this + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  return this;
}

BOOL AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix(uint64_t **this, char *__s, char *a3)
{
  uint64_t *v6;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v7;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;

  if (!AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, __s, 0, a3, 0))
    return 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)__s, a3, (uint64_t *)&v22);
  v24 = v22;
  v6 = *this;
  v22 = 0uLL;
  v23 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v22, (char *)this + *(v6 - 25) + 8, 1);
  v7 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(this + 4), &v24);
  v8 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)(this + 5);
  if (this + 5 != (uint64_t **)v7)
  {
    v25 = &v24;
    v9 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>(this + 4, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25);
    v10 = v9[7];
    v20 = v9[6];
    v21 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__erase_unique<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>(this + 4, &v24);
    std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__erase_unique<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>(this + 1, &v20);
    v13 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v8 != v7;
}

void sub_1880F1FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, char *a2, char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemovePrefix((uint64_t **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2, a3);
}

BOOL AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace(uint64_t **this, char *a2, const char *a3)
{
  uint64_t *v6;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v7;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v25;

  if (!AdobeXMPCore_Int::VerifyParameters(0, 1, 0, a2, 0, (size_t)a3))
    return 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)a2, a3, (uint64_t *)&v22);
  v24 = v22;
  v6 = *this;
  v22 = 0uLL;
  v23 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v22, (char *)this + *(v6 - 25) + 8, 1);
  v7 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(this + 1), &v24);
  v8 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)(this + 2);
  if (this + 2 != (uint64_t **)v7)
  {
    v25 = &v24;
    v9 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>(this + 1, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25);
    v10 = v9[7];
    v20 = v9[6];
    v21 = (std::__shared_weak_count *)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__erase_unique<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>(this + 4, &v20);
    std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__erase_unique<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>(this + 1, &v24);
    v13 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v8 != v7;
}

void sub_1880F2198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, char *a2, const char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::RemoveNameSpace((uint64_t **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2, a3);
}

BOOL AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *__s, char *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v6 = 0;
  if (AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, (char *)__s, 0, a3, 0))
  {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(__s, a3, (uint64_t *)&v12);
    v14 = v12;
    v7 = *(_QWORD *)this;
    v12 = 0uLL;
    v13 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v12, (char *)this + *(_QWORD *)(v7 - 200) + 8, 1);
    v6 = (_QWORD *)((char *)this + 40) != std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 32, &v14);
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v12);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return v6;
}

void sub_1880F22D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsPrefixPresent((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2, a3);
}

BOOL AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;

  v6 = 0;
  if (AdobeXMPCore_Int::VerifyParameters(0, 1, 0, (const char *)a2, 0, (size_t)a3))
  {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, (uint64_t *)&v12);
    v14 = v12;
    v7 = *(_QWORD *)this;
    v12 = 0uLL;
    v13 = 0;
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v12, (char *)this + *(_QWORD *)(v7 - 200) + 8, 1);
    v6 = (_QWORD *)((char *)this + 16) != std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 8, &v14);
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v12);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return v6;
}

void sub_1880F23F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, const char *a3)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::IsNameSpacePresent((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 112)), a2, a3);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, char *__s@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  if (!AdobeXMPCore_Int::VerifyParameters((AdobeXMPCore_Int *)1, 0, __s, 0, a3, 0))
    goto LABEL_12;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)__s, a3, (uint64_t *)&v18);
  v20 = v18;
  v8 = *(_QWORD *)this;
  v18 = 0uLL;
  v19 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v18, (char *)this + *(_QWORD *)(v8 - 200) + 8, 1);
  v9 = (char *)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 32, &v20);
  v10 = v9;
  v11 = (char *)this + 40;
  if ((char *)this + 40 != v9)
  {
    v12 = *((_QWORD *)v9 + 7);
    *a4 = *((_QWORD *)v9 + 6);
    a4[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v18);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11 == v10)
  {
LABEL_12:
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1880F2544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120)), a2, a3, a4);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetNameSpace(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  if (!AdobeXMPCore_Int::VerifyParameters(1, 0, a2, &v10))
    goto LABEL_8;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v10, (char *)a1 + *(_QWORD *)(*a1 - 200) + 8, 1);
  v6 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(a1 + 4), a2);
  if (a1 + 5 == v6)
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v10);
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v7 = v6[7];
  *a3 = v6[6];
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v10);
}

void sub_1880F2640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::VerifyParameters(int a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  AdobeXMPCore_Int::IErrorNotifier_I *v7;
  char *v8;
  AdobeXMPCore_Int::IErrorNotifier_I *v9;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t (***v13)(_QWORD, __int128 *);
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t (***ErrorNotifier)(_QWORD, __int128 *);
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  AdobeXMPCore_Int::IErrorNotifier_I *v27;
  char *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t (***v31)(_QWORD, __int128 *);
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  _OWORD *exception;
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;

  if (a1)
  {
    if (*a3)
    {
      if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 208))(*a3))
        goto LABEL_4;
      v42 = 0;
      v43 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1, &v42);
      (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)]
                                                            + 120))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NameSpacePrefixMapImpl.cpp", 41);
      v9 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)] + 112))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "prefixLength is 0", -1);
      v41 = 0uLL;
      if (v42)
        v10 = &v42[*(_QWORD *)(*(_QWORD *)v42 - 304)];
      else
        v10 = 0;
      *(_QWORD *)&v41 = v10;
      *((_QWORD *)&v41 + 1) = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
      }
      ErrorNotifier = (uint64_t (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v9);
      if (((**ErrorNotifier)(ErrorNotifier, &v41) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *exception = v41;
        v41 = 0uLL;
      }
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v17 = v43;
      if (v43)
      {
        v26 = (unint64_t *)&v43->__shared_owners_;
        do
          v19 = __ldaxr(v26);
        while (__stlxr(v19 - 1, v26));
        goto LABEL_37;
      }
    }
    else
    {
      v42 = 0;
      v43 = 0;
      AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1, &v42);
      (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)]
                                                            + 120))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NameSpacePrefixMapImpl.cpp", 37);
      v7 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)] + 112))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "prefix is NULL", -1);
      v41 = 0uLL;
      if (v42)
        v8 = &v42[*(_QWORD *)(*(_QWORD *)v42 - 304)];
      else
        v8 = 0;
      *(_QWORD *)&v41 = v8;
      *((_QWORD *)&v41 + 1) = v43;
      if (v43)
      {
        v11 = (unint64_t *)&v43->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v13 = (uint64_t (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v7);
      if (((**v13)(v13, &v41) & 1) == 0)
      {
        v39 = __cxa_allocate_exception(0x10uLL);
        *v39 = v41;
        v41 = 0uLL;
      }
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v15 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v17 = v43;
      if (v43)
      {
        v18 = (unint64_t *)&v43->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
LABEL_37:
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    result = 0;
    if (!a2)
      return result;
    goto LABEL_40;
  }
LABEL_4:
  result = 1;
  if (!a2)
    return result;
LABEL_40:
  if (!*a4)
  {
    v42 = 0;
    v43 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 1, &v42);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)] + 120))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/NameSpacePrefixMapImpl.cpp", 50);
    v27 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)] + 112))(&v42[*(_QWORD *)(*(_QWORD *)v42 - 304)], "nameSpace is NULL", -1);
    if (v42)
      v28 = &v42[*(_QWORD *)(*(_QWORD *)v42 - 304)];
    else
      v28 = 0;
    *(_QWORD *)&v41 = v28;
    *((_QWORD *)&v41 + 1) = v43;
    if (v43)
    {
      v29 = (unint64_t *)&v43->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    v31 = (uint64_t (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v27);
    if (((**v31)(v31, &v41) & 1) == 0)
    {
      v38 = __cxa_allocate_exception(0x10uLL);
      *v38 = v41;
      v41 = 0uLL;
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = v43;
    if (v43)
    {
      v36 = (unint64_t *)&v43->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    return 0;
  }
  return result;
}

void sub_1880F2AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, char *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  if (!AdobeXMPCore_Int::VerifyParameters(0, 1, 0, a2, 0, (size_t)a3))
    goto LABEL_12;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String((AdobeXMPCore_Int::IUTF8String_I *)a2, a3, (uint64_t *)&v18);
  v20 = v18;
  v8 = *(_QWORD *)this;
  v18 = 0uLL;
  v19 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v18, (char *)this + *(_QWORD *)(v8 - 200) + 8, 1);
  v9 = (char *)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 8, &v20);
  v10 = v9;
  v11 = (char *)this + 16;
  if ((char *)this + 16 != v9)
  {
    v12 = *((_QWORD *)v9 + 7);
    *a4 = *((_QWORD *)v9 + 6);
    a4[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v18);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11 == v10)
  {
LABEL_12:
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1880F2C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, char *a2@<X1>, const char *a3@<X2>, _QWORD *a4@<X8>)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), a2, a3, a4);
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::GetPrefix(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  if (!AdobeXMPCore_Int::VerifyParameters(0, 1, &v10, a2))
    goto LABEL_8;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v10, (char *)a1 + *(_QWORD *)(*a1 - 200) + 8, 1);
  v6 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)(a1 + 1), a2);
  if (a1 + 2 == v6)
  {
    AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v10);
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v7 = v6[7];
  *a3 = v6[6];
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v10);
}

void sub_1880F2D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  uint64_t v2;
  _QWORD v4[3];

  memset(v4, 0, sizeof(v4));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v4, (char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 8, 0);
  v2 = *((_QWORD *)this + 3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v4);
  return v2;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  return AdobeXMPCore_Int::NameSpacePrefixMapImpl::Size((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)));
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v1;
  _QWORD *v2;
  _QWORD v3[3];

  v1 = this;
  memset(v3, 0, sizeof(v3));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v3, (char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 8, 1);
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)v1 + 8, *((_QWORD **)v1 + 2));
  *((_QWORD *)v1 + 1) = (char *)v1 + 16;
  *((_QWORD *)v1 + 2) = 0;
  v2 = (_QWORD *)*((_QWORD *)v1 + 5);
  v1 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)v1 + 40);
  *((_QWORD *)v1 - 2) = 0;
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)v1 - 8, v2);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v3);
}

void `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clear((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 144)));
}

void AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v5;
  uint64_t *v6;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v7;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v8;
  BOOL v9;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v10;
  uint64_t *v11;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v12;
  AdobeXMPCore_Int::NameSpacePrefixMapImpl *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16[2];
  _QWORD v17[3];

  v4 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x78);
  *(_QWORD *)(v4 + 72) = off_1E1BBA1F8;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = off_1E1BBA288;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = v4 + 16;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 32) = v4 + 40;
  *(_QWORD *)(v4 + 64) = 0x100000000;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)v4 = off_1E1BB9F70;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = off_1E1BBA100;
  memset(v17, 0, sizeof(v17));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v17, (char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 8, 0);
  v5 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)this + 4);
  if (v5 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 40))
  {
    do
    {
      v16[0] = (uint64_t *)((char *)v5 + 32);
      v6 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>((uint64_t **)(v4 + 32), (_QWORD *)v5 + 4, (uint64_t)&std::piecewise_construct, v16);
      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v6 + 6, (uint64_t *)v5 + 6);
      v7 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(AdobeXMPCore_Int::NameSpacePrefixMapImpl **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 40));
  }
  v10 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)this + 1);
  if (v10 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 16))
  {
    do
    {
      v16[0] = (uint64_t *)((char *)v10 + 32);
      v11 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const> const&>,std::tuple<>>((uint64_t **)(v4 + 8), (_QWORD *)v10 + 4, (uint64_t)&std::piecewise_construct, v16);
      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v11 + 6, (uint64_t *)v10 + 6);
      v12 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)v10 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(AdobeXMPCore_Int::NameSpacePrefixMapImpl **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v9);
      }
      v10 = v13;
    }
    while (v13 != (AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + 16));
  }
  (**(void (***)(uint64_t))(v4 + *(_QWORD *)(*(_QWORD *)v4 - 184)))(v4 + *(_QWORD *)(*(_QWORD *)v4 - 184));
  std::shared_ptr<AdobeXMPCore_Int::NameSpacePrefixMapImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::NameSpacePrefixMapImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(v16, v4, 8, 1);
  v14 = v16[0];
  if (v16[0])
    v14 = (uint64_t *)((char *)v16[0] + *(_QWORD *)(*v16[0] - 48));
  v15 = v16[1];
  *a2 = v14;
  a2[1] = v15;
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v17);
}

void sub_1880F3050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone(AdobeXMPCore_Int::NameSpacePrefixMapImpl *this@<X0>, uint64_t **a2@<X8>)
{
  AdobeXMPCore_Int::NameSpacePrefixMapImpl::Clone((AdobeXMPCore_Int::NameSpacePrefixMapImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)), a2);
}

_QWORD *AdobeXMPCore_Int::NameSpacePrefixMapImpl::Merge(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  result = *a2;
  if (*a2)
  {
    v4 = (_QWORD *)result[4];
    v5 = result + 5;
    if (v4 != result + 5)
    {
      do
      {
        v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[4] + 192))(v4[4]);
        v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[4] + 208))(v4[4]);
        v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[6] + 192))(v4[6]);
        v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[6] + 208))(v4[6]);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, v6, v7, v8, v9);
        v10 = (_QWORD *)v4[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v4[2];
            v12 = *v11 == (_QWORD)v4;
            v4 = v11;
          }
          while (!v12);
        }
        v4 = v11;
      }
      while (v11 != v5);
    }
  }
  return result;
}

double AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  AdobeXMPCore_Int::ManageDefaultNameSpacePrefixMap(0, &v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

_QWORD *AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared@<X0>(_QWORD *this@<X0>, AdobeXMPCore::INameSpacePrefixMap_v1 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  if (this)
  {
    v4 = (uint64_t)this;
    (**(void (***)(uint64_t, AdobeXMPCore::INameSpacePrefixMap_v1 *))((char *)this + *(_QWORD *)(*this - 56)))((uint64_t)this + *(_QWORD *)(*this - 56), a2);
    return std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INameSpacePrefixMap_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a3, v4, 8, 1);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::NameSpacePrefixMapImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::NameSpacePrefixMapImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC848;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880F32CC(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 184) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880F32F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::NameSpacePrefixMapImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::NameSpacePrefixMapImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::NameSpacePrefixMapImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::NameSpacePrefixMapImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INameSpacePrefixMap_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC3E8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880F33D8(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880F3404(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 56) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore::INameSpacePrefixMap_v1 *,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,std::allocator<AdobeXMPCore::INameSpacePrefixMap_v1>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

BOOL AdobeXMPCore_Int::DefaultErrorNotifierImpl::Notify(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2) < 2;
}

void AdobeXMPCore_Int::DefaultErrorNotifierImpl::~DefaultErrorNotifierImpl(AdobeXMPCore_Int::DefaultErrorNotifierImpl *this)
{
  JUMPOUT(0x18D761C30);
}

void TIFF_FileWriter::TIFF_FileWriter(TIFF_FileWriter *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  TIFF_Manager::TIFF_Manager(this);
  *(_QWORD *)v2 = off_1E1BB0C88;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 88) = 0;
  *(_BYTE *)(v2 + 92) = 0;
  v3 = 112;
  do
  {
    v4 = (char *)this + v3;
    *v4 = 0;
    *((_WORD *)v4 + 1) = 0;
    *((_DWORD *)v4 + 1) = 0;
    *((_DWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 4) = 0;
    *(_QWORD *)((char *)this + v3 + 24) = 0;
    *((_QWORD *)v4 + 2) = (char *)this + v3 + 24;
    v3 += 40;
  }
  while (v4 + 40 != (char *)(v2 + 312));
  v5[0] = 704662861;
  TIFF_Manager::CheckTIFFHeader(this, (unsigned int *)v5, 8u);
}

void sub_1880F35D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 0; i != -200; i -= 40)
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(v1 + i + 288, *(_QWORD **)(v1 + i + 296));
  _Unwind_Resume(a1);
}

void TIFF_FileWriter::~TIFF_FileWriter(TIFF_FileWriter *this)
{
  void *v2;
  uint64_t i;
  const char *v4;
  int v5;

  *(_QWORD *)this = off_1E1BB0C88;
  if (*((_BYTE *)this + 90) && *((_BYTE *)this + 91))
  {
    v4 = "! (this->memParsed && this->fileParsed)";
    v5 = 60;
    goto LABEL_11;
  }
  if (*((_BYTE *)this + 92))
  {
    v2 = (void *)*((_QWORD *)this + 12);
    if (v2)
    {
      free(v2);
      goto LABEL_6;
    }
    v4 = "this->memStream != 0";
    v5 = 63;
LABEL_11:
    __assert_rtn("~TIFF_FileWriter", "TIFF_FileWriter.cpp", v5, v4);
  }
LABEL_6:
  for (i = 0; i != -200; i -= 40)
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy((uint64_t)this + i + 288, *(_QWORD **)((char *)this + i + 296));
}

{
  TIFF_FileWriter::~TIFF_FileWriter(this);
  JUMPOUT(0x18D761C30);
}

void TIFF_FileWriter::DeleteExistingInfo(TIFF_FileWriter *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD **v4;

  if (*((_BYTE *)this + 90) && *((_BYTE *)this + 91))
    TIFF_FileWriter::DeleteExistingInfo();
  if (*((_BYTE *)this + 92))
    free(*((void **)this + 12));
  v2 = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  do
  {
    v4 = (_QWORD **)((char *)this + v2 + 136);
    v3 = *v4;
    *((_BYTE *)v4 - 24) = 0;
    *((_WORD *)v4 - 11) = 0;
    *(_QWORD **)((char *)v4 - 20) = 0;
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy((uint64_t)this + v2 + 128, v3);
    *(_QWORD *)((char *)this + v2 + 128) = v4;
    *v4 = 0;
    *(_QWORD *)((char *)this + v2 + 144) = 0;
    v2 += 40;
  }
  while (v2 != 200);
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 22) = 0;
}

uint64_t TIFF_FileWriter::PickIFD(uint64_t this)
{
  int v1;
  _QWORD *exception;
  const char *v3;

  if (this >= 5)
  {
    v1 = this;
    exception = __cxa_allocate_exception(0x18uLL);
    if (v1 == 9)
    {
      *(_DWORD *)exception = 8;
      v3 = "kTIFF_KnownIFD not yet implemented";
    }
    else
    {
      *(_DWORD *)exception = 4;
      v3 = "Invalid IFD number";
    }
    exception[1] = v3;
    *((_BYTE *)exception + 16) = 0;
  }
  return this;
}

char *TIFF_FileWriter::FindTagInIFD(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  unsigned int v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  unsigned int v14;
  char *v15;

  v4 = a2;
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  v6 = (char *)this + 40 * v4;
  v9 = *((_QWORD *)v6 + 17);
  v7 = v6 + 136;
  v8 = v9;
  if (!v9)
    return 0;
  v10 = v7;
  do
  {
    v11 = *(unsigned __int16 *)(v8 + 32);
    v12 = v11 >= a3;
    if (v11 >= a3)
      v13 = (uint64_t *)v8;
    else
      v13 = (uint64_t *)(v8 + 8);
    if (v12)
      v10 = (char *)v8;
    v8 = *v13;
  }
  while (*v13);
  if (v10 == v7)
    return 0;
  v14 = *((unsigned __int16 *)v10 + 16);
  v15 = v10 + 40;
  if (v14 <= a3)
    return v15;
  else
    return 0;
}

BOOL TIFF_FileWriter::GetIFD(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *exception;
  _WORD *v18;

  if (a2 >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Invalid IFD number";
    *((_BYTE *)exception + 16) = 0;
  }
  v4 = a1 + 40 * a2;
  v5 = *(_QWORD **)(v4 + 128);
  v6 = (_QWORD *)(v4 + 136);
  if (!a3)
    return v5 != v6;
  v7 = (_QWORD *)(a3 + 8);
  std::__tree<unsigned long long>::destroy(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = 0;
  *v7 = 0;
  if (v5 == v6)
    return 0;
  do
  {
    v8 = *((_DWORD *)v5 + 10);
    v9 = (uint64_t *)v5[7];
    v10 = *((_DWORD *)v5 + 11);
    v11 = *((_DWORD *)v5 + 12);
    v18 = v5 + 5;
    v12 = std::__tree<std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_Manager::TagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_Manager::TagInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t **)a3, (unsigned __int16 *)v5 + 20, (uint64_t)&std::piecewise_construct, &v18);
    *((_DWORD *)v12 + 10) = v8;
    *((_DWORD *)v12 + 11) = v10;
    v12[6] = v9;
    *((_DWORD *)v12 + 14) = v11;
    v13 = (_QWORD *)v5[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v5[2];
        v15 = *v14 == (_QWORD)v5;
        v5 = v14;
      }
      while (!v15);
    }
    v5 = v14;
  }
  while (v14 != v6);
  return 1;
}

char *TIFF_FileWriter::GetValueOffset(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  char *result;

  result = TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*((_DWORD *)result + 6))
      return (char *)*((unsigned int *)result + 7);
    else
      return 0;
  }
  return result;
}

BOOL TIFF_FileWriter::GetTag(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, uint64_t a4)
{
  char *TagInIFD;
  uint64_t v6;
  unsigned int v7;

  TagInIFD = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (a4 && TagInIFD)
  {
    *(_WORD *)a4 = *(_WORD *)TagInIFD;
    v6 = *((unsigned __int16 *)TagInIFD + 1);
    *(_WORD *)(a4 + 2) = v6;
    v7 = *((_DWORD *)TagInIFD + 2);
    *(_DWORD *)(a4 + 4) = v7 / kTIFF_TypeSizes[v6];
    *(_DWORD *)(a4 + 16) = v7;
    *(_QWORD *)(a4 + 8) = *((_QWORD *)TagInIFD + 2);
  }
  return TagInIFD != 0;
}

uint64_t TIFF_FileWriter::SetTag(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, int a4, unsigned int a5, const void *a6)
{
  unsigned int v10;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  char v21;
  uint64_t result;
  void *v23;
  size_t v24;
  void *v25;
  _QWORD *exception;
  const char *v27;
  __int128 v28;
  void *v29[2];
  __int128 v30;

  if ((a4 - 14) <= 0xFFFFFFF2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v27 = "Invalid TIFF tag type";
    goto LABEL_33;
  }
  v10 = a2;
  v12 = kTIFF_TypeSizes[a4];
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  v13 = (char *)this + 40 * v10;
  v16 = *((_QWORD *)v13 + 17);
  v15 = (uint64_t *)(v13 + 136);
  v14 = v16;
  if (!v16)
    goto LABEL_13;
  v17 = v15;
  do
  {
    v18 = *(unsigned __int16 *)(v14 + 32);
    v19 = v18 >= a3;
    if (v18 >= a3)
      v20 = (uint64_t *)v14;
    else
      v20 = (uint64_t *)(v14 + 8);
    if (v19)
      v17 = (uint64_t *)v14;
    v14 = *v20;
  }
  while (*v20);
  if (v17 == v15 || *((unsigned __int16 *)v17 + 16) > a3)
  {
LABEL_13:
    v28 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    v21 = *((_BYTE *)this + 91);
    LOWORD(v28) = a3;
    WORD4(v28) = a3;
    WORD5(v28) = a4;
    HIDWORD(v28) = a5;
    v29[0] = 0;
    v29[1] = 0;
    *(_QWORD *)&v30 = 0;
    BYTE8(v30) = 0;
    BYTE9(v30) = v21;
    v17 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>((uint64_t **)v15 - 1, v15, (unsigned __int16 *)&v28, &v28);
    if (BYTE9(v30) | BYTE8(v30) && LODWORD(v29[0]) >= 5)
    {
      if (v29[1])
        free(v29[1]);
    }
LABEL_26:
    v24 = v12 * a5;
    *((_BYTE *)v17 + 72) = 1;
    *((_DWORD *)v17 + 12) = v24;
    if (v24 <= 4)
    {
      v25 = (char *)v17 + 52;
      v17[7] = (uint64_t)v17 + 52;
LABEL_29:
      result = (uint64_t)memcpy(v25, a6, v24);
      *((_BYTE *)v15 - 24) = 1;
      *((_BYTE *)this + 88) = 1;
      return result;
    }
    v25 = malloc_type_malloc(v24, 0x3DB08A5DuLL);
    v17[7] = (uint64_t)v25;
    if (v25)
      goto LABEL_29;
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    v27 = "Out of memory";
LABEL_33:
    exception[1] = v27;
    *((_BYTE *)exception + 16) = 0;
  }
  if (*((unsigned __int16 *)v17 + 21) != a4
    || *((_DWORD *)v17 + 11) != a5
    || (result = memcmp(a6, (const void *)v17[7], *((unsigned int *)v17 + 12)), (_DWORD)result))
  {
    if ((*((_BYTE *)v17 + 73) || *((_BYTE *)v17 + 72)) && *((_DWORD *)v17 + 12) >= 5u)
    {
      v23 = (void *)v17[7];
      if (v23)
      {
        free(v23);
        v17[7] = 0;
      }
    }
    *((_WORD *)v17 + 21) = a4;
    *((_DWORD *)v17 + 11) = a5;
    goto LABEL_26;
  }
  return result;
}

void sub_1880F3C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11, void *a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15)
{
  if (a15 | a14 && a11 >= 5)
  {
    if (a12)
      free(a12);
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::DeleteTag(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3)
{
  unsigned int v4;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;

  v4 = a2;
  TIFF_FileWriter::PickIFD((uint64_t)a2);
  v6 = (char *)this + 40 * v4;
  v9 = *((_QWORD *)v6 + 17);
  v7 = v6 + 136;
  v8 = v9;
  if (v9)
  {
    v10 = v7;
    do
    {
      v11 = *(unsigned __int16 *)(v8 + 32);
      v12 = v11 >= a3;
      if (v11 >= a3)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (v12)
        v10 = (char *)v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v7 && *((unsigned __int16 *)v10 + 16) <= a3)
    {
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)v7 - 1, (uint64_t *)v10);
      TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(v10 + 40));
      operator delete(v10);
      *((_BYTE *)this + 40 * v4 + 112) = 1;
      *((_BYTE *)this + 88) = 1;
      if (v4 || a3 != 700)
        *((_BYTE *)this + 89) = 1;
    }
  }
}

uint64_t TIFF_FileWriter::GetTag_Integer(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned int *a4)
{
  char *TagInIFD;
  uint64_t v7;
  unsigned int v8;

  TagInIFD = TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (!TagInIFD || *((_DWORD *)TagInIFD + 1) != 1)
    return 0;
  v7 = 0;
  switch(*((_WORD *)TagInIFD + 1))
  {
    case 1:
      v8 = **((unsigned __int8 **)TagInIFD + 2);
      goto LABEL_11;
    case 3:
      v8 = (*((uint64_t (**)(_QWORD))this + 1))(*((_QWORD *)TagInIFD + 2));
      goto LABEL_11;
    case 4:
    case 9:
      v8 = (*((uint64_t (**)(_QWORD))this + 2))(*((_QWORD *)TagInIFD + 2));
      goto LABEL_11;
    case 6:
      v8 = **((char **)TagInIFD + 2);
      goto LABEL_11;
    case 8:
      v8 = (*((__int16 (**)(_QWORD))this + 1))(*((_QWORD *)TagInIFD + 2));
LABEL_11:
      if (a4)
        *a4 = v8;
      v7 = 1;
      break;
    default:
      return v7;
  }
  return v7;
}

uint64_t TIFF_FileWriter::GetTag_Byte(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 1 && *(_DWORD *)(result + 8) == 1)
    {
      if (a4)
        *a4 = **(_BYTE **)(result + 16);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SByte(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, signed __int8 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 6 && *(_DWORD *)(result + 8) == 1)
    {
      if (a4)
        *a4 = **(_BYTE **)(result + 16);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Short(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 3 && *(_DWORD *)(result + 8) == 2)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(_QWORD))this + 1))(*(_QWORD *)(result + 16));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SShort(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, __int16 *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 8 && *(_DWORD *)(result + 8) == 2)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(_QWORD))this + 1))(*(_QWORD *)(result + 16));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Long(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, unsigned int *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 4 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(_QWORD))this + 2))(*(_QWORD *)(result + 16));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_SLong(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, int *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 9 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4)
        *a4 = (*((uint64_t (**)(_QWORD))this + 2))(*(_QWORD *)(result + 16));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *TIFF_FileWriter::GetTag_Rational(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, _DWORD *a4)
{
  char *result;
  uint64_t v7;

  result = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    v7 = *((_QWORD *)result + 2);
    if (v7 && *((_WORD *)result + 1) == 5 && *((_DWORD *)result + 2) == 8)
    {
      if (a4)
      {
        *a4 = (*((uint64_t (**)(_QWORD))a1 + 2))(*((_QWORD *)result + 2));
        a4[1] = (*((uint64_t (**)(uint64_t))a1 + 2))(v7 + 4);
      }
      return (char *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char *TIFF_FileWriter::GetTag_SRational(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, _DWORD *a4)
{
  char *result;
  uint64_t v7;

  result = TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    v7 = *((_QWORD *)result + 2);
    if (v7 && *((_WORD *)result + 1) == 10 && *((_DWORD *)result + 2) == 8)
    {
      if (a4)
      {
        *a4 = (*((uint64_t (**)(_QWORD))a1 + 2))(*((_QWORD *)result + 2));
        a4[1] = (*((uint64_t (**)(uint64_t))a1 + 2))(v7 + 4);
      }
      return (char *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Float(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, float *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 11 && *(_DWORD *)(result + 8) == 4)
    {
      if (a4)
        *a4 = (*((float (**)(_QWORD))this + 3))(*(_QWORD *)(result + 16));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_Double(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, double *a4)
{
  uint64_t result;
  uint64_t v7;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    v7 = result;
    result = *(_QWORD *)(result + 16);
    if (result)
    {
      if (*(_WORD *)(v7 + 2) == 12 && *(_DWORD *)(v7 + 8) == 8)
      {
        if (a4)
          *a4 = (*((double (**)(void))this + 4))();
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_ASCII(TIFF_FileWriter *this, TIFF_FileWriter *a2, unsigned int a3, const char **a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v8;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(this, a2, a3);
  if (result)
  {
    v8 = *(_DWORD *)(result + 8);
    if ((v8 < 5 || *(_QWORD *)(result + 16)) && *(_WORD *)(result + 2) == 2)
    {
      if (a4)
        *a4 = *(const char **)(result + 16);
      if (a5)
        *a5 = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::GetTag_EncodedString(TIFF_FileWriter *a1, TIFF_FileWriter *a2, unsigned int a3, std::string *a4)
{
  uint64_t result;

  result = (uint64_t)TIFF_FileWriter::FindTagInIFD(a1, a2, a3);
  if (result)
  {
    if (*(_WORD *)(result + 2) == 7)
    {
      if (a4)
        return TIFF_Manager::DecodeString((uint64_t)a1, *(unsigned __int8 **)(result + 16), *(unsigned int *)(result + 8), a4);
      else
        return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TIFF_FileWriter::SetTag_EncodedString(uint64_t a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4, int a5)
{
  uint64_t v8;
  std::string *p_p;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  TIFF_Manager::EncodeString(a1, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v8 = LODWORD(__p.__r_.__value_.__r.__words[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)a1 + 32))(a1, a2, a3, 7, v8, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1880F4368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_FileWriter::IsLegacyChanged(TIFF_FileWriter *this)
{
  char v1;
  unint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;

  v1 = *((_BYTE *)this + 88);
  if (v1)
  {
    if (*((_BYTE *)this + 89))
    {
      v1 = 1;
    }
    else
    {
      v3 = 0;
      v1 = 1;
      while (1)
      {
        if (*((_BYTE *)this + 40 * v3 + 112))
        {
          v4 = (char *)this + 40 * v3;
          v5 = v4 + 136;
          v6 = (char *)*((_QWORD *)v4 + 16);
          if (v6 != v5)
            break;
        }
LABEL_16:
        v1 = v3++ < 4;
        if (v3 == 5)
        {
          v1 = 0;
          return v1 & 1;
        }
      }
      while (!v6[72] || *((_WORD *)v6 + 20) == 700)
      {
        v7 = (char *)*((_QWORD *)v6 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (char *)*((_QWORD *)v6 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
        if (v8 == v5)
          goto LABEL_16;
      }
    }
  }
  return v1 & 1;
}

void TIFF_FileWriter::ParseMemoryStream(TIFF_FileWriter *this, void *a2, unsigned int a3, char a4)
{
  void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *TagInIFD;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  _QWORD *exception;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  TIFF_FileWriter::DeleteExistingInfo(this);
  *((_BYTE *)this + 90) = 1;
  if (!a3)
    return;
  if ((a4 & 1) == 0)
  {
    if (*((_BYTE *)this + 92))
      TIFF_FileWriter::ParseMemoryStream();
    *((_QWORD *)this + 12) = a2;
    goto LABEL_8;
  }
  if (a3 >= 0x6400001)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    v20 = "Outrageous length for memory-based TIFF";
    goto LABEL_33;
  }
  v8 = malloc_type_malloc(a3, 0x13BA6C7FuLL);
  *((_QWORD *)this + 12) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    v20 = "Out of memory";
LABEL_33:
    exception[1] = v20;
    *((_BYTE *)exception + 16) = 0;
  }
  memcpy(v8, a2, a3);
  *((_BYTE *)this + 92) = 1;
  a2 = (void *)*((_QWORD *)this + 12);
LABEL_8:
  *((_DWORD *)this + 26) = a3;
  v9 = a3 - 6;
  v10 = TIFF_Manager::CheckTIFFHeader(this, (unsigned int *)a2, a3);
  if (v10)
  {
    v11 = TIFF_FileWriter::ProcessMemoryIFD(this, v10, 0);
    if (v11)
    {
      v12 = v11;
      if (IsOffsetValid(v11, 8u, v9))
      {
        TIFF_FileWriter::ProcessMemoryIFD(this, v12, 1u);
      }
      else
      {
        v21 = 206;
        v22 = "Bad IFD offset";
        v23 = 0;
        (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t *))(*(_QWORD *)this + 264))(this, 0, &v21);
        (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, 0, 1);
      }
    }
  }
  TagInIFD = TIFF_FileWriter::FindTagInIFD(this, 0, 0x8769u);
  if (TagInIFD && *((_WORD *)TagInIFD + 1) == 4 && *((_DWORD *)TagInIFD + 2) == 4)
  {
    v14 = (*((uint64_t (**)(_QWORD))this + 2))(*((_QWORD *)TagInIFD + 2));
    TIFF_FileWriter::ProcessMemoryIFD(this, v14, 2u);
  }
  v15 = TIFF_FileWriter::FindTagInIFD(this, 0, 0x8825u);
  if (v15 && *((_WORD *)v15 + 1) == 4 && *((_DWORD *)v15 + 2) == 4)
  {
    v16 = (*((uint64_t (**)(_QWORD))this + 2))(*((_QWORD *)v15 + 2));
    if (IsOffsetValid(v16, 8u, v9))
    {
      TIFF_FileWriter::ProcessMemoryIFD(this, v16, 3u);
    }
    else
    {
      v21 = 206;
      v22 = "Bad IFD offset";
      v23 = 0;
      (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t *))(*(_QWORD *)this + 264))(this, 0, &v21);
      (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, 0, 34853);
    }
  }
  v17 = TIFF_FileWriter::FindTagInIFD(this, (TIFF_FileWriter *)2, 0xA005u);
  if (v17 && *((_WORD *)v17 + 1) == 4 && *((_DWORD *)v17 + 2) == 4)
  {
    v18 = (*((uint64_t (**)(_QWORD))this + 2))(*((_QWORD *)v17 + 2));
    if (IsOffsetValid(v18, 8u, v9))
    {
      TIFF_FileWriter::ProcessMemoryIFD(this, v18, 4u);
    }
    else
    {
      v21 = 206;
      v22 = "Bad IFD offset";
      v23 = 0;
      (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t *))(*(_QWORD *)this + 264))(this, 0, &v21);
      (*(void (**)(TIFF_FileWriter *, uint64_t, uint64_t))(*(_QWORD *)this + 40))(this, 2, 40965);
    }
  }
}

uint64_t TIFF_FileWriter::ProcessMemoryIFD(TIFF_FileWriter *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  unsigned __int16 v18;
  int v19;
  uint64_t *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t result;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t **v30;
  uint64_t v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;

  v31 = a2;
  if (a2 < 8 || (unint64_t)*((unsigned int *)this + 26) - 6 < a2)
  {
    *(_QWORD *)&v32 = 206;
    *((_QWORD *)&v32 + 1) = "Bad IFD offset";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, __int128 *))(*(_QWORD *)this + 264))(this, 2, &v32);
  }
  v6 = a3;
  v7 = *((_QWORD *)this + 12) + v31;
  v8 = (*((uint64_t (**)(uint64_t))this + 1))(v7);
  if ((v8 & 0x8000) != 0)
  {
    *(_QWORD *)&v32 = 206;
    *((_QWORD *)&v32 + 1) = "Outrageous IFD count";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, __int128 *))(*(_QWORD *)this + 264))(this, 2, &v32);
  }
  v27 = 12 * v8;
  if (12 * v8 + 6 > *((_DWORD *)this + 26) - a2)
  {
    *(_QWORD *)&v32 = 206;
    *((_QWORD *)&v32 + 1) = "Out of bounds IFD";
    v33[0] = 0;
    (*(void (**)(TIFF_FileWriter *, uint64_t, __int128 *))(*(_QWORD *)this + 264))(this, 2, &v32);
  }
  v28 = v6;
  v9 = (char *)this + 40 * v6;
  *((_DWORD *)v9 + 29) = a2;
  *((_WORD *)v9 + 57) = v8;
  if ((_WORD)v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = (char *)this + 40 * v6;
    v30 = (uint64_t **)(v12 + 128);
    v13 = (uint64_t *)(v12 + 136);
    v29 = a2 + 10;
    v14 = 12 * (unsigned __int16)v8;
    do
    {
      v15 = v7 + v10;
      v16 = (*((uint64_t (**)(uint64_t))this + 1))(v7 + v10 + 4);
      if ((v16 - 14) >= 0xFFFFFFF3)
      {
        v17 = v16;
        v18 = (*((uint64_t (**)(uint64_t))this + 1))(v15 + 2);
        v19 = (*((uint64_t (**)(uint64_t))this + 2))(v15 + 6);
        v34 = 0u;
        *(_QWORD *)&v32 = v18;
        WORD4(v32) = v18;
        WORD5(v32) = v17;
        HIDWORD(v32) = v19;
        v33[0] = 0;
        v33[1] = 0;
        *(_QWORD *)&v34 = 0;
        WORD4(v34) = 0;
        v20 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(v30, v13, (unsigned __int16 *)&v32, &v32);
        v21 = *((_DWORD *)v20 + 11) * kTIFF_TypeSizes[*((unsigned __int16 *)v20 + 21)];
        *((_DWORD *)v20 + 16) = v21;
        *((_DWORD *)v20 + 12) = v21;
        *((_DWORD *)v20 + 13) = *(_DWORD *)(v7 + v10 + 10);
        if (v21 > 4)
        {
          v22 = (*((uint64_t (**)(uint64_t))this + 2))(v7 + v10 + 10);
          *((_DWORD *)v20 + 17) = v22;
          if (v22 >= 8 && (v23 = *((_DWORD *)this + 26), v24 = v23 >= v22, v25 = v23 - v22, v25 != 0 && v24))
          {
            if (*((_DWORD *)v20 + 12) > v25)
            {
              v20[6] = 0;
              *((_DWORD *)v20 + 11) = 0;
              v22 = v31 + v10 + 10;
              *((_DWORD *)v20 + 16) = 0;
              *((_DWORD *)v20 + 17) = v22;
            }
          }
          else
          {
            v20[6] = 0;
            *((_DWORD *)v20 + 11) = 0;
            v22 = v29 + 12 * v11;
            *((_DWORD *)v20 + 16) = 0;
            *((_DWORD *)v20 + 17) = v31 + v10 + 10;
          }
        }
        else
        {
          v22 = v29 + 12 * v11;
          *((_DWORD *)v20 + 17) = v31 + v10 + 10;
        }
        v20[7] = *((_QWORD *)this + 12) + v22;
        if (BYTE9(v34) | BYTE8(v34) && LODWORD(v33[0]) >= 5 && v33[1])
          free(v33[1]);
      }
      ++v11;
      v10 += 12;
    }
    while (v14 != v10);
  }
  result = (*((uint64_t (**)(uint64_t))this + 2))(v7 + (v27 | 2u));
  *((_DWORD *)this + 10 * v28 + 30) = result;
  return result;
}

void sub_1880F4AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17, void *a18, uint64_t a19, unsigned __int8 a20,unsigned __int8 a21)
{
  if (a21 | a20 && a17 >= 5)
  {
    if (a18)
      free(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TIFF_FileWriter::ParseFileStream(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char *TagInIFD;
  int v10;
  unsigned int v11;
  char *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  unsigned __int8 v20[8];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  TIFF_FileWriter::DeleteExistingInfo((TIFF_FileWriter *)a1);
  *(_BYTE *)(a1 + 91) = 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  *(_DWORD *)(a1 + 104) = result;
  if (result >= 8)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, 0, 0);
    v5 = *(_DWORD *)(a1 + 104);
    *(_QWORD *)v20 = 0;
    (**(void (***)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))a2)(a2, v20, 8, 1);
    result = TIFF_Manager::CheckTIFFHeader((TIFF_Manager *)a1, (unsigned int *)v20, *(_DWORD *)(a1 + 104));
    if ((_DWORD)result)
    {
      v6 = v5 - 6;
      v7 = TIFF_FileWriter::ProcessFileIFD(a1, 0, result, a2);
      if (v7)
      {
        v8 = v7;
        if (IsOffsetValid(v7, 8u, v6))
        {
          TIFF_FileWriter::ProcessFileIFD(a1, 1u, v8, a2);
        }
        else
        {
          v17 = 206;
          v18 = "Bad IFD offset";
          v19 = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 264))(a1, 0, &v17);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, 0, 1);
        }
      }
      TagInIFD = TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, 0, 0x8769u);
      if (TagInIFD)
      {
        v10 = *((unsigned __int16 *)TagInIFD + 1);
        if ((v10 == 13 || v10 == 4) && *((_DWORD *)TagInIFD + 1) == 1)
        {
          v11 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((_QWORD *)TagInIFD + 2));
          TIFF_FileWriter::ProcessFileIFD(a1, 2u, v11, a2);
        }
      }
      v12 = TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, 0, 0x8825u);
      if (v12)
      {
        v13 = *((unsigned __int16 *)v12 + 1);
        if ((v13 == 13 || v13 == 4) && *((_DWORD *)v12 + 1) == 1)
        {
          v14 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((_QWORD *)v12 + 2));
          if (IsOffsetValid(v14, 8u, v6))
          {
            TIFF_FileWriter::ProcessFileIFD(a1, 3u, v14, a2);
          }
          else
          {
            v17 = 206;
            v18 = "Bad IFD offset";
            v19 = 0;
            (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 264))(a1, 0, &v17);
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 40))(a1, 0, 34853);
          }
        }
      }
      result = (uint64_t)TIFF_FileWriter::FindTagInIFD((TIFF_FileWriter *)a1, (TIFF_FileWriter *)2, 0xA005u);
      if (result)
      {
        v15 = *(unsigned __int16 *)(result + 2);
        if ((v15 == 13 || v15 == 4) && *(_DWORD *)(result + 8) == 4)
        {
          v16 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(result + 16));
          if (IsOffsetValid(v16, 8u, v6))
          {
            return TIFF_FileWriter::ProcessFileIFD(a1, 4u, v16, a2);
          }
          else
          {
            v17 = 206;
            v18 = "Bad IFD offset";
            v19 = 0;
            (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)a1 + 264))(a1, 0, &v17);
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, 2, 40965);
          }
        }
      }
    }
  }
  return result;
}

uint64_t TIFF_FileWriter::ProcessFileIFD(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  _DWORD *v21;
  __int16 v22;
  unsigned __int16 v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *exception;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  __int128 v47;
  void *v48[2];
  __int128 v49;
  int v50;
  void *__p;
  void *v52;
  uint64_t v53;

  __p = 0;
  v52 = 0;
  v53 = 0;
  std::vector<unsigned char>::vector(&__p, 0xC0000uLL);
  v50 = 0;
  if (a3 < 8 || (unint64_t)*(unsigned int *)(a1 + 104) - 6 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    exception[1] = "Bad IFD offset";
    *((_BYTE *)exception + 16) = 0;
  }
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 16))(a4, a3, 0);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
  if (v8 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a4 + 16))(a4, 0, 1) < 2
    || ((**(void (***)(uint64_t, int *, uint64_t, uint64_t))a4)(a4, &v50, 2, 1),
        v9 = (*(__int16 (**)(int *))(a1 + 8))(&v50),
        v9 < 0)
    || (v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4),
        v11 = (unsigned __int16)v9,
        v10 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a4 + 16))(a4, 0, 1) < 12 * (unsigned __int16)v9))
  {
    v12 = 0;
  }
  else
  {
    (**(void (***)(uint64_t, void *))a4)(a4, __p);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
    if (v14 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a4 + 16))(a4, 0, 1) < 4)
    {
      v15 = 0;
    }
    else
    {
      (**(void (***)(uint64_t, int *, uint64_t, uint64_t))a4)(a4, &v50, 4, 1);
      v15 = (*(uint64_t (**)(int *))(a1 + 16))(&v50);
    }
    v16 = (unsigned int *)(a1 + 40 * a2);
    v16[30] = v15;
    v16 += 30;
    *(v16 - 1) = a3;
    v45 = v16;
    v46 = a2;
    *((_WORD *)v16 - 3) = v9;
    if (v9)
    {
      v17 = a1 + 40 * a2;
      v18 = (uint64_t **)(v17 + 128);
      v19 = (uint64_t *)(v17 + 136);
      v20 = a3 + 10;
      v21 = (char *)__p + 8;
      do
      {
        v22 = (*(uint64_t (**)(uint64_t))(a1 + 8))((uint64_t)v21 - 6);
        if ((unsigned __int16)(v22 - 14) >= 0xFFF3u)
        {
          v23 = (*(uint64_t (**)(_DWORD *))(a1 + 8))(v21 - 2);
          v24 = (*(uint64_t (**)(_DWORD *))(a1 + 16))(v21 - 1);
          v49 = 0u;
          *(_QWORD *)&v47 = v23;
          WORD4(v47) = v23;
          WORD5(v47) = v22;
          HIDWORD(v47) = v24;
          v48[0] = 0;
          v48[1] = 0;
          *(_QWORD *)&v49 = 0;
          WORD4(v49) = 256;
          v25 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(v18, v19, (unsigned __int16 *)&v47, &v47);
          v26 = v25;
          v27 = *((_DWORD *)v25 + 11) * kTIFF_TypeSizes[*((unsigned __int16 *)v25 + 21)];
          *((_DWORD *)v25 + 16) = v27;
          *((_DWORD *)v25 + 12) = v27;
          *((_DWORD *)v25 + 13) = *v21;
          v28 = (char *)v25 + 52;
          if (v27 > 4)
          {
            v29 = (*(uint64_t (**)(_DWORD *))(a1 + 16))(v21);
            *((_DWORD *)v26 + 17) = v29;
            if (v29 < 8
              || (v30 = *(_DWORD *)(a1 + 104), v31 = v30 >= v29, v32 = v30 - v29, v32 == 0 || !v31)
              || *((_DWORD *)v26 + 12) > v32)
            {
              v26[6] = 0;
              v26[7] = (uint64_t)v28;
              *((_DWORD *)v26 + 16) = 0;
              *((_DWORD *)v26 + 17) = v20;
              *((_DWORD *)v26 + 11) = 0;
            }
          }
          else
          {
            v25[7] = (uint64_t)v28;
            *((_DWORD *)v25 + 17) = v20;
          }
          if (BYTE9(v49) | BYTE8(v49) && LODWORD(v48[0]) >= 5 && v48[1])
            free(v48[1]);
        }
        v20 += 12;
        v21 += 3;
        --v11;
      }
      while (v11);
    }
    v33 = a1 + 40 * v46;
    v34 = *(_QWORD **)(v33 + 128);
    v35 = (_QWORD *)(v33 + 136);
    if (v34 != (_QWORD *)(v33 + 136))
    {
      v36 = (uint64_t)*(&sKnownTags + v46);
      do
      {
        if (*((_DWORD *)v34 + 12) >= 5u)
        {
          v37 = *((unsigned __int16 *)v34 + 20);
          v36 -= 2;
          do
          {
            v38 = *(unsigned __int16 *)(v36 + 2);
            v36 += 2;
            v39 = v38 == v37;
          }
          while (v38 < v37);
          if (v39)
          {
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a4 + 16))(a4, *((unsigned int *)v34 + 17), 0);
            v40 = malloc_type_malloc(*((unsigned int *)v34 + 12), 0x72FA368AuLL);
            v34[7] = v40;
            if (!v40)
            {
              v44 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v44 = 15;
              v44[1] = "No data block";
              *((_BYTE *)v44 + 16) = 0;
            }
            (**(void (***)(uint64_t, void *, _QWORD, uint64_t))a4)(a4, v40, *((unsigned int *)v34 + 12), 1);
          }
        }
        v41 = (_QWORD *)v34[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (_QWORD *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (_QWORD *)v34[2];
            v39 = *v42 == (_QWORD)v34;
            v34 = v42;
          }
          while (!v39);
        }
        v34 = v42;
      }
      while (v42 != v35);
    }
    v12 = *v45;
  }
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1880F52A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int a13, void *a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a17 | a16 && a13 >= 5 && a14)
    free(a14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::IntegrateFromPShop6(TIFF_FileWriter *this, const void *a2, size_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  void *v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  memset(v8, 0, sizeof(v8));
  TIFF_Manager::TIFF_Manager((TIFF_Manager *)v8);
  *(_QWORD *)&v8[0] = off_1E1BB1298;
  BYTE8(v10) = 0;
  v11[0] = 0;
  LODWORD(v11[1]) = 0;
  v6 = 7;
  do
  {
    v7 = &v8[v6];
    *(_WORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    ++v6;
  }
  while (v7 + 1 != (_OWORD *)&v17);
  BYTE10(v9) = 1;
  TIFF_MemoryReader::ParseMemoryStream((void **)v8, a2, a3, 1, 0);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v8, 0);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v8, (TIFF_FileWriter *)2);
  TIFF_FileWriter::ProcessPShop6IFD(this, (const TIFF_MemoryReader *)v8, (TIFF_FileWriter *)3);
  *(_QWORD *)&v8[0] = off_1E1BB1298;
  if (BYTE8(v10))
    free(v11[0]);
}

void sub_1880F5414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
  if (a20)
    free(a21);
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::ProcessPShop6IFD(TIFF_FileWriter *this, const TIFF_MemoryReader *a2, TIFF_FileWriter *a3)
{
  _QWORD **v6;
  int v7;
  int v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  int v12;
  _QWORD *v14;
  _QWORD **v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned __int16 *v26;
  uint64_t (*v27)(void);
  unsigned int v28;
  _QWORD **v29;
  _QWORD *v30[2];

  v30[0] = 0;
  v30[1] = 0;
  v29 = v30;
  if (((*(uint64_t (**)(const TIFF_MemoryReader *, TIFF_FileWriter *, _QWORD ***))(*(_QWORD *)a2 + 16))(a2, a3, &v29) & 1) != 0)
  {
    v6 = v29;
    if (v29 != v30)
    {
      v7 = *((unsigned __int8 *)this + 72);
      v8 = *((unsigned __int8 *)a2 + 72);
      do
      {
        v9 = (unsigned __int16 *)(v6 + 5);
        if (!TIFF_FileWriter::FindTagInIFD(this, a3, *((unsigned __int16 *)v6 + 20)))
        {
          v10 = *v9;
          if (v7 == v8 || v10 != 37500)
          {
            if (*v9 > 0x8824u)
            {
              v11 = v10 == 34853;
              v12 = 40965;
            }
            else
            {
              v11 = v10 == 513;
              v12 = 34665;
            }
            if (!v11 && v10 != v12)
            {
              v16 = (unsigned __int16 *)TIFF_FileWriter::CopyTagToMainIFD((uint64_t)this, (uint64_t)(v6 + 5), (uint64_t)this + 40 * a3 + 112);
              if (v7 != v8)
              {
                switch(*((_WORD *)v6 + 21))
                {
                  case 1:
                  case 2:
                  case 6:
                    break;
                  case 3:
                  case 8:
                    v18 = *((unsigned int *)v6 + 11);
                    if ((_DWORD)v18)
                    {
                      do
                      {
                        *v16 = bswap32(*v16) >> 16;
                        ++v16;
                        --v18;
                      }
                      while (v18);
                    }
                    break;
                  case 4:
                  case 9:
                  case 0xB:
                    v17 = *((unsigned int *)v6 + 11);
                    if ((_DWORD)v17)
                    {
                      do
                      {
                        *(_DWORD *)v16 = bswap32(*(_DWORD *)v16);
                        v16 += 2;
                        --v17;
                      }
                      while (v17);
                    }
                    break;
                  case 5:
                  case 0xA:
                    v19 = (2 * *((_DWORD *)v6 + 11));
                    if ((_DWORD)v19)
                    {
                      do
                      {
                        *(_DWORD *)v16 = bswap32(*(_DWORD *)v16);
                        v16 += 2;
                        --v19;
                      }
                      while (v19);
                    }
                    break;
                  case 7:
                    v20 = *v9;
                    if (v20 > 0xA301)
                    {
                      if (v20 == 41995)
                      {
                        v23 = *((unsigned int *)v6 + 14);
                        if (v23 < 4)
                          goto LABEL_50;
                        v24 = v23 >> 1;
                        do
                        {
                          *v16 = bswap32(*v16) >> 16;
                          ++v16;
                          --v24;
                        }
                        while (v24);
                      }
                      else if (v20 == 41730)
                      {
                        v28 = *((_DWORD *)v6 + 14);
                        if (v28 < 4)
                          goto LABEL_50;
                        v22 = (uint64_t (*)(void))*((_QWORD *)this + 1);
                        *v16 = bswap32(*v16) >> 16;
                        v26 = v16 + 1;
                        v27 = v22;
                        v16[1] = bswap32(v16[1]) >> 16;
                        v25 = v22();
                        if (((unsigned int (*)(unsigned __int16 *))v27)(v26) * v25 + 4 != v28)
                          goto LABEL_50;
                      }
                    }
                    else if ((v20 == 34856 || v20 == 41484)
                           && !FlipOECFSFRTable(v16, *((_DWORD *)v6 + 14), *((uint64_t (**)(void))this + 1)))
                    {
                      goto LABEL_50;
                    }
                    break;
                  case 0xC:
                    v21 = *((unsigned int *)v6 + 11);
                    if ((_DWORD)v21)
                    {
                      do
                      {
                        *(_QWORD *)v16 = bswap64(*(_QWORD *)v16);
                        v16 += 4;
                        --v21;
                      }
                      while (v21);
                    }
                    break;
                  default:
LABEL_50:
                    (*(void (**)(TIFF_FileWriter *, TIFF_FileWriter *, _QWORD))(*(_QWORD *)this + 40))(this, a3, *v9);
                    break;
                }
              }
            }
          }
        }
        v14 = v6[1];
        if (v14)
        {
          do
          {
            v15 = (_QWORD **)v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD **)v6[2];
            v11 = *v15 == v6;
            v6 = v15;
          }
          while (!v11);
        }
        v6 = v15;
      }
      while (v15 != v30);
    }
  }
  std::__tree<unsigned long long>::destroy((uint64_t)&v29, v30[0]);
}

void sub_1880F5740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<unsigned long long>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t TIFF_FileWriter::CopyTagToMainIFD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5;
  int v6;
  char v7;
  uint64_t *v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *exception;
  __int128 v14;
  void *v15[2];
  __int128 v16;

  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  v5 = *(_WORD *)(a2 + 2);
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_BYTE *)(a1 + 91);
  LOWORD(v14) = *(_WORD *)a2;
  WORD4(v14) = v14;
  WORD5(v14) = v5;
  HIDWORD(v14) = v6;
  v15[0] = 0;
  v15[1] = 0;
  *(_QWORD *)&v16 = 0;
  BYTE8(v16) = 0;
  BYTE9(v16) = v7;
  v8 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>((uint64_t **)(a3 + 16), (uint64_t *)(a3 + 24), (unsigned __int16 *)&v14, &v14);
  v9 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)v8 + 12) = v9;
  if (v9 > 4)
  {
    v10 = malloc_type_malloc(v9, 0xDC5B30FEuLL);
    v8[7] = (uint64_t)v10;
    if (!v10)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 15;
      exception[1] = "Out of memory";
      *((_BYTE *)exception + 16) = 0;
    }
    memcpy(v10, *(const void **)(a2 + 8), *((unsigned int *)v8 + 12));
  }
  else
  {
    *((_DWORD *)v8 + 13) = **(_DWORD **)(a2 + 8);
    v8[7] = (uint64_t)v8 + 52;
  }
  *((_BYTE *)v8 + 72) = 1;
  if (*((_DWORD *)v8 + 16) || *((_DWORD *)v8 + 17))
    __assert_rtn("CopyTagToMainIFD", "TIFF_FileWriter.cpp", 998, "(newTag.origDataLen == 0) && (newTag.origDataOffset == 0)");
  *(_BYTE *)a3 = 1;
  v11 = v8[7];
  if (BYTE9(v16) | BYTE8(v16) && LODWORD(v15[0]) >= 5 && v15[1])
    free(v15[1]);
  return v11;
}

void sub_1880F58D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int a11, void *a12, uint64_t a13, unsigned __int8 a14, unsigned __int8 a15)
{
  if (a15 | a14 && a11 >= 5)
  {
    if (a12)
      free(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL FlipOECFSFRTable(_WORD *a1, unsigned int a2, uint64_t (*a3)(void))
{
  char *v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v12;

  *a1 = bswap32((unsigned __int16)*a1) >> 16;
  v6 = (char *)(a1 + 1);
  a1[1] = bswap32((unsigned __int16)a1[1]) >> 16;
  v7 = a3();
  v8 = ((uint64_t (*)(char *))a3)(v6);
  v9 = v7 + 8 * v7 * v8 + 4;
  v10 = (2 * v7 * v8);
  if (v9 <= a2 && (_DWORD)v10 != 0)
  {
    v12 = (unsigned int *)((char *)a1 + a2 - 8 * v7 * v8);
    do
    {
      *v12 = bswap32(*v12);
      ++v12;
      --v10;
    }
    while (v10);
  }
  return v9 <= a2;
}

uint64_t TIFF_FileWriter::PreflightIFDLinkage(void (**this)(uint64_t, int *))
{
  void (*v2)(uint64_t, int *);
  void (*v3)(uint64_t, int *);
  void (*v4)(uint64_t, int *);
  uint64_t result;

  v2 = *this;
  if (this[38])
  {
    if (((*((uint64_t (**)(void (**)(uint64_t, int *), uint64_t, uint64_t, _QWORD))v2 + 3))(this, 2, 40965, 0) & 1) == 0)TIFF_Manager::SetTag_Long(this, 2, 40965, 2880285613);
  }
  else
  {
    (*((void (**)(void (**)(uint64_t, int *), uint64_t, uint64_t))v2 + 5))(this, 2, 40965);
  }
  v3 = *this;
  if (this[33])
  {
    if (((*((uint64_t (**)(void (**)(uint64_t, int *), _QWORD, uint64_t, _QWORD))v3 + 3))(this, 0, 34853, 0) & 1) == 0)TIFF_Manager::SetTag_Long(this, 0, 34853, 2880285613);
  }
  else
  {
    (*((void (**)(void (**)(uint64_t, int *), _QWORD, uint64_t))v3 + 5))(this, 0, 34853);
  }
  v4 = *this;
  if (this[28])
  {
    result = (*((uint64_t (**)(void (**)(uint64_t, int *), _QWORD, uint64_t, _QWORD))v4 + 3))(this, 0, 34665, 0);
    if ((result & 1) == 0)
      result = TIFF_Manager::SetTag_Long(this, 0, 34665, 2880285613);
  }
  else
  {
    result = (*((uint64_t (**)(void (**)(uint64_t, int *), _QWORD, uint64_t))v4 + 5))(this, 0, 34665);
  }
  if (!this[18])
  {
    if (this[23])
      return TIFF_Manager::SetTag_Short((void (**)(uint64_t, __int16 *))this, 0, 296, 2);
  }
  return result;
}

uint64_t TIFF_FileWriter::DetermineVisibleLength(TIFF_FileWriter *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v1 = 0;
  v2 = 8;
  do
  {
    v3 = (char *)this + 40 * v1;
    v4 = *((_QWORD *)v3 + 18);
    if (v4)
    {
      v5 = v3 + 128;
      v2 = (v2 + 12 * v4 + 6);
      v8 = (_QWORD *)*v5;
      v6 = v5 + 1;
      v7 = v8;
      if (v8 != v6)
      {
        do
        {
          v9 = *((_DWORD *)v7 + 12);
          if (v9 <= 4)
            v10 = 0;
          else
            v10 = (v9 + 1) & 0xFFFFFFFE;
          v11 = (_QWORD *)v7[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v7[2];
              v13 = *v12 == (_QWORD)v7;
              v7 = v12;
            }
            while (!v13);
          }
          v2 = v10 + v2;
          v7 = v12;
        }
        while (v12 != v6);
      }
    }
    ++v1;
  }
  while (v1 != 5);
  return v2;
}

uint64_t TIFF_FileWriter::DetermineAppendInfo(TIFF_FileWriter *this, int a2, BOOL *a3, unsigned int *a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  char *v23;
  unsigned int v24;
  void (*v25)(_QWORD, char *);
  char *v26;
  char *v27;

  if ((a2 & 1) != 0)
    TIFF_FileWriter::DetermineAppendInfo();
  if (a5)
  {
    v10 = 0;
    v11 = (uint64_t *)((char *)this + 144);
    do
    {
      v12 = *v11;
      v11 += 5;
      a3[v10++] = v12 != 0;
    }
    while (v10 != 5);
    v13 = a3[4];
  }
  else
  {
    v13 = 0;
    *(_DWORD *)a3 = 0;
  }
  v14 = v13 || *((_QWORD *)this + 38) > (unint64_t)*((unsigned __int16 *)this + 137);
  a3[4] = v14;
  if (v14)
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 2, 40965, 2880285613);
  v15 = a3[3] || *((_QWORD *)this + 33) > (unint64_t)*((unsigned __int16 *)this + 117);
  a3[3] = v15;
  if (v15)
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34853, 2880285613);
  v16 = a3[2] || *((_QWORD *)this + 28) > (unint64_t)*((unsigned __int16 *)this + 97);
  a3[2] = v16;
  if (v16)
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34665, 2880285613);
  v17 = 0;
  v18 = 0;
  *a3 |= *((_QWORD *)this + 18) > (unint64_t)*((unsigned __int16 *)this + 57);
  do
  {
    v19 = (char *)this + 40 * v17;
    v20 = *((_QWORD *)v19 + 18);
    a4[v17] = *((_DWORD *)v19 + 29);
    if (v19[112] | a5)
      v21 = v20 == 0;
    else
      v21 = 1;
    if (!v21)
    {
      if (a3[v17])
      {
        a4[v17] = v18 + a2;
        v18 = (v18 + 12 * v20 + 6);
      }
      v23 = v19 + 136;
      v22 = (char *)*((_QWORD *)v19 + 16);
      if (v22 != v19 + 136)
      {
        do
        {
          if (v22[72] | a5)
          {
            v24 = *((_DWORD *)v22 + 12);
            if (v24 >= 5)
            {
              v25 = (void (*)(_QWORD, char *))*((_QWORD *)this + 6);
              if (v24 > *((_DWORD *)v22 + 16) || (a5 & 1) != 0)
              {
                v25((v18 + a2), v22 + 52);
                v18 = ((*((_DWORD *)v22 + 12) + 1) & 0xFFFFFFFE) + v18;
              }
              else
              {
                v25(*((unsigned int *)v22 + 17), v22 + 52);
              }
            }
          }
          v26 = (char *)*((_QWORD *)v22 + 1);
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = *(char **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (char *)*((_QWORD *)v22 + 2);
              v21 = *(_QWORD *)v27 == (_QWORD)v22;
              v22 = v27;
            }
            while (!v21);
          }
          v22 = v27;
        }
        while (v27 != v23);
      }
    }
    ++v17;
  }
  while (v17 != 5);
  if (a3[2])
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34665, a4[2]);
  if (a3[3])
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 0, 34853, a4[3]);
  if (a3[4])
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 2, 40965, a4[4]);
  return v18;
}

void *TIFF_FileWriter::UpdateMemByAppend(TIFF_FileWriter *this, unsigned __int8 **a2, unsigned int *a3, int a4, int a5)
{
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  void *result;
  uint64_t v13;
  uint64_t i;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  size_t v26;
  int v27;
  int v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  const char *v33;
  _QWORD *v34;
  _QWORD *exception;
  unsigned int *v36;
  unsigned int v38;
  BOOL v39[4];
  char v40;
  unsigned int v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  *(_DWORD *)v39 = 0;
  *(_QWORD *)v41 = 0;
  v42 = 0;
  v43 = 0;
  v9 = (*((_DWORD *)this + 26) + 1) & 0xFFFFFFFE;
  v38 = v9 + TIFF_FileWriter::DetermineAppendInfo(this, v9, v39, v41, a4);
  v10 = (unsigned __int8 *)malloc_type_malloc(v38 + a5, 0x9C15DCB8uLL);
  if (!v10)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    exception[1] = "Out of memory";
    *((_BYTE *)exception + 16) = 0;
  }
  v11 = v10;
  result = memcpy(v10, *((const void **)this + 12), *((unsigned int *)this + 26));
  v13 = *((unsigned int *)this + 26);
  if (v13 < v9)
  {
    if (v9 != (_DWORD)v13 + 1)
      TIFF_FileWriter::UpdateMemByAppend();
    v11[v13] = 0;
  }
  v36 = a3;
  for (i = 0; i != 5; ++i)
  {
    v15 = (char *)this + 40 * i;
    v16 = *((_QWORD *)v15 + 18);
    if (v15[112] | a4)
      v17 = v16 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v18 = v41[i];
      if (v39[i])
      {
        if ((_DWORD)v18 != v9)
          __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1485, "newIFDOffsets[ifd] == appendedOffset");
        v9 += 12 * v16 + 6;
      }
      v19 = v11;
      v20 = &v11[v18];
      (*((void (**)(_QWORD, unsigned __int8 *))this + 5))((unsigned __int16)*((_QWORD *)v15 + 18), &v11[v18]);
      v21 = v20 + 2;
      v23 = v15 + 136;
      v22 = (char *)*((_QWORD *)v15 + 16);
      if (v22 != v23)
      {
        do
        {
          (*((void (**)(_QWORD, unsigned __int8 *))this + 5))(*((unsigned __int16 *)v22 + 20), v21);
          (*((void (**)(_QWORD, unsigned __int8 *))this + 5))(*((unsigned __int16 *)v22 + 21), v21 + 2);
          (*((void (**)(_QWORD, unsigned __int8 *))this + 6))(*((unsigned int *)v22 + 11), v21 + 4);
          *((_DWORD *)v21 + 2) = *((_DWORD *)v22 + 13);
          if (v22[72] | a4 && *((_DWORD *)v22 + 12) >= 5u)
          {
            v24 = (*((uint64_t (**)(void))this + 2))();
            v25 = v24;
            v26 = *((unsigned int *)v22 + 12);
            if (v26 > *((_DWORD *)v22 + 16))
              v27 = 1;
            else
              v27 = a4;
            if ((v27 & 1) != 0)
            {
              if (v24 != v9)
              {
                v32 = 1516;
                v33 = "valueOffset == appendedOffset";
LABEL_46:
                __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", v32, v33);
              }
              v9 += (v26 + 1) & 0xFFFFFFFE;
            }
            else if (v24 != *((_DWORD *)v22 + 17))
            {
              v32 = 1514;
              v33 = "valueOffset == currTag.origDataOffset";
              goto LABEL_46;
            }
            if (v38 < v24)
            {
              v32 = 1520;
              v33 = "valueOffset <= newLength";
              goto LABEL_46;
            }
            if (v26 > v38 - v24)
            {
              v34 = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)v34 = 9;
              v34[1] = "Buffer overrun";
              *((_BYTE *)v34 + 16) = 0;
            }
            memcpy(&v19[v24], *((const void **)v22 + 7), v26);
            if (v27)
            {
              v28 = *((_DWORD *)v22 + 12);
              if ((v28 & 1) != 0)
                v19[v28 + v25] = 0;
            }
          }
          v29 = (char *)*((_QWORD *)v22 + 1);
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = *(char **)v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (char *)*((_QWORD *)v22 + 2);
              v17 = *(_QWORD *)v30 == (_QWORD)v22;
              v22 = v30;
            }
            while (!v17);
          }
          v21 += 12;
          v22 = v30;
        }
        while (v30 != v23);
      }
      v11 = v19;
      result = (void *)(*((uint64_t (**)(_QWORD, unsigned __int8 *))this + 6))(*((unsigned int *)this + 10 * i + 30), v21);
    }
  }
  if (v9 != v38)
    __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1539, "appendedOffset == newLength");
  if (v39[0])
    result = (void *)(*((uint64_t (**)(_QWORD, unsigned __int8 *))this + 6))(v41[0], v11 + 4);
  if (v39[1])
  {
    v31 = *((_DWORD *)this + 36);
    if (v31)
      result = (void *)(*((uint64_t (**)(_QWORD, unsigned __int8 *))this + 6))(v41[1], &v11[12 * v31 + 2 + v41[0]]);
  }
  *a2 = v11;
  *v36 = v38;
  return result;
}

void sub_1880F624C(_Unwind_Exception *exception_object, int a2)
{
  void *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    free(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1880F629C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1880F62A8(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1880F62B0);
  __clang_call_terminate(a1);
}

void *TIFF_FileWriter::UpdateMemByRewrite(TIFF_FileWriter *this, unsigned __int8 **a2, unsigned int *a3)
{
  unsigned __int8 v6;
  uint64_t i;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  char v19;
  void *result;
  _QWORD *exception;
  _QWORD *v22;
  _BYTE v23[4];
  int v24;
  size_t __n;
  int v26;
  uint64_t v27;

  v6 = 0;
  v27 = *MEMORY[0x1E0C80C00];
  do
  {
    for (i = 0; i != 10; ++i)
    {
      if (TIFF_FileWriter::FindTagInIFD(this, (TIFF_FileWriter *)v6, (unsigned __int16)kNoGoTags[i]))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 8;
        exception[1] = "Tag not tolerated for TIFF rewrite";
        *((_BYTE *)exception + 16) = 0;
      }
    }
    v8 = v6++;
  }
  while (v8 < 4);
  v9 = 0;
  do
  {
    v10 = v9;
    (*(void (**)(TIFF_FileWriter *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, v9++, 37500);
  }
  while (v10 < 4);
  v11 = TIFF_FileWriter::DetermineVisibleLength(this);
  v26 = 0;
  __n = 0;
  v12 = (*(uint64_t (**)(TIFF_FileWriter *, uint64_t, uint64_t, size_t *))(*(_QWORD *)this + 56))(this, 1, 514, &__n);
  if (v12 != (*(unsigned int (**)(TIFF_FileWriter *, uint64_t, uint64_t, char *))(*(_QWORD *)this + 56))(this, 1, 513, (char *)&__n + 4))
  {
    v22 = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)v22 = 206;
    v22[1] = "Unpaired simple hidden content tag";
    *((_BYTE *)v22 + 16) = 0;
  }
  if ((_DWORD)__n)
    v13 = v12;
  else
    v13 = 0;
  if (v13 == 1)
  {
    v26 = v11;
    TIFF_Manager::SetTag_Long((void (**)(uint64_t, int *))this, 1, 513, v11);
    v14 = (__n + 1) & 0xFFFFFFFE;
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_QWORD *)this + 12);
  v16 = *((unsigned __int8 *)this + 92);
  if (*((_BYTE *)this + 72))
    v17 = 77;
  else
    v17 = 73;
  if (*((_BYTE *)this + 72))
    v18 = 0;
  else
    v18 = 42;
  if (*((_BYTE *)this + 72))
    v19 = 42;
  else
    v19 = 0;
  v23[0] = v17;
  v23[1] = v17;
  v23[2] = v18;
  v23[3] = v19;
  v24 = 0;
  *((_QWORD *)this + 12) = v23;
  *((_DWORD *)this + 26) = 8;
  *((_BYTE *)this + 92) = 0;
  result = TIFF_FileWriter::UpdateMemByAppend(this, a2, a3, 1, v14);
  if (*a3 != (_DWORD)v11)
    TIFF_FileWriter::UpdateMemByRewrite();
  *a3 = v11 + v14;
  if ((_DWORD)__n)
    result = memcpy(&(*a2)[v26], (const void *)(v15 + HIDWORD(__n)), __n);
  if (v16)
  {
    if (v15)
      return (void *)MEMORY[0x18D761C30](v15, 0x1000C4077774924);
  }
  return result;
}

uint64_t TIFF_FileWriter::UpdateMemoryStream(TIFF_FileWriter *this, void **a2, int a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *exception;
  unsigned int v12;
  unsigned __int8 *v13;

  if (*((_BYTE *)this + 91))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "Not memory based";
    *((_BYTE *)exception + 16) = 0;
  }
  v6 = *((_BYTE *)this + 88) | a3;
  *((_BYTE *)this + 88) = v6;
  if (v6)
  {
    TIFF_FileWriter::PreflightIFDLinkage((void (**)(uint64_t, int *))this);
    v7 = 144;
    while (!*(_QWORD *)((char *)this + v7))
    {
      v7 += 40;
      if (v7 == 344)
      {
        v13 = 0;
        v12 = 0;
        TIFF_FileWriter::DeleteExistingInfo(this);
        goto LABEL_16;
      }
    }
    v13 = 0;
    v12 = 0;
    if (*((_DWORD *)this + 26))
      v9 = a3 == 0;
    else
      v9 = 0;
    if (v9)
      TIFF_FileWriter::UpdateMemByAppend(this, &v13, &v12, 0, 0);
    else
      TIFF_FileWriter::UpdateMemByRewrite(this, &v13, &v12);
LABEL_16:
    v8 = v12;
    (*(void (**)(TIFF_FileWriter *, unsigned __int8 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 200))(this, v13, v12, 0, 0);
    if (*((_DWORD *)this + 26) != (_DWORD)v8)
      TIFF_FileWriter::UpdateMemoryStream();
    *((_BYTE *)this + 92) = (_DWORD)v8 != 0;
    if (a2)
      *a2 = (void *)*((_QWORD *)this + 12);
  }
  else
  {
    if (a2)
      *a2 = (void *)*((_QWORD *)this + 12);
    return *((unsigned int *)this + 26);
  }
  return v8;
}

uint64_t TIFF_FileWriter::UpdateFileStream(uint64_t result, uint64_t a2, XMP_ProgressTracker *a3)
{
  uint64_t v3;
  unint64_t v6;
  unsigned int v7;
  __n128 v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unsigned int v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t k;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *exception;
  const char *v51;
  int v52;
  BOOL v53[4];
  char v54;
  unsigned int v55[2];
  uint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(result + 90))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v51 = "Not file based";
LABEL_84:
    exception[1] = v51;
    *((_BYTE *)exception + 16) = 0;
  }
  v3 = result;
  if (!*(_BYTE *)(result + 88))
    return result;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (HIDWORD(v6))
    goto LABEL_82;
  v7 = v6;
  v54 = 0;
  *(_DWORD *)v53 = 0;
  *(_QWORD *)v55 = 0;
  v56 = 0;
  v57 = 0;
  if ((v6 & 1) != 0)
  {
    v7 = v6 + 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 2);
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &unk_1882308F6, 1);
  }
  TIFF_FileWriter::PreflightIFDLinkage((void (**)(uint64_t, int *))v3);
  if ((v7 ^ 0xFFFFFFFFuLL) < TIFF_FileWriter::DetermineAppendInfo((TIFF_FileWriter *)v3, v7, v53, v55, 0))
  {
LABEL_82:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 206;
    v51 = "TIFF files can't exceed 4GB";
    goto LABEL_84;
  }
  if (a3)
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      if (*(_BYTE *)(v3 + 40 * v9 + 112))
      {
        v11 = v3 + 40 * v9;
        v10 = v10 + (float)(unint64_t)(12 * *(_QWORD *)(v11 + 144) + 6);
        v12 = (_QWORD *)(v11 + 136);
        v13 = *(_QWORD **)(v11 + 128);
        if (v13 != v12)
        {
          do
          {
            if (*((_BYTE *)v13 + 72))
            {
              v14 = *((_DWORD *)v13 + 12);
              if (v14 >= 5)
                v10 = v10 + (float)v14;
            }
            v15 = (_QWORD *)v13[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v13[2];
                v17 = *v16 == (_QWORD)v13;
                v13 = v16;
              }
              while (!v17);
            }
            v13 = v16;
          }
          while (v16 != v12);
        }
      }
      ++v9;
    }
    while (v9 != 5);
    if (!*((_BYTE *)a3 + 32))
      TIFF_FileWriter::UpdateFileStream();
    if (v53[0])
      v10 = v10 + 4.0;
    v8.n128_f32[0] = XMP_ProgressTracker::AddTotalWork(a3, v10);
  }
  for (i = 0; i != 5; ++i)
  {
    v19 = v3 + 40 * i;
    v21 = *(unsigned __int8 *)(v19 + 112);
    v20 = v19 + 112;
    if (v21)
    {
      if (!v53[i])
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(v3 + 40 * i + 116), 0, v8);
        TIFF_FileWriter::WriteFileIFD(v3, a2, v20);
      }
      v22 = v3 + 40 * i;
      v23 = (_QWORD *)(v22 + 136);
      v24 = *(_QWORD **)(v22 + 128);
      if (v24 != (_QWORD *)(v22 + 136))
      {
        do
        {
          if (*((_BYTE *)v24 + 72))
          {
            v25 = *((_DWORD *)v24 + 12);
            if (v25 >= 5 && v25 <= *((_DWORD *)v24 + 16))
            {
              (*(void (**)(uint64_t, _QWORD, _QWORD, __n128))(*(_QWORD *)a2 + 16))(a2, *((unsigned int *)v24 + 17), 0, v8);
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, v24[7], *((unsigned int *)v24 + 12));
            }
          }
          v26 = (_QWORD *)v24[1];
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = (_QWORD *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v24[2];
              v17 = *v27 == (_QWORD)v24;
              v24 = v27;
            }
            while (!v17);
          }
          v24 = v27;
        }
        while (v27 != v23);
      }
    }
  }
  if ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)a2 + 16))(a2, 0, 2, v8) != v7)
    TIFF_FileWriter::UpdateFileStream();
  for (j = 0; j != 5; ++j)
  {
    v29 = v3 + 40 * j;
    v31 = *(unsigned __int8 *)(v29 + 112);
    v30 = v29 + 112;
    if (v31)
    {
      if (v53[j])
      {
        v32 = v55[j];
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v32)
          TIFF_FileWriter::UpdateFileStream();
        TIFF_FileWriter::WriteFileIFD(v3, a2, v30);
      }
      v33 = v3 + 40 * j;
      v34 = (_QWORD *)(v33 + 136);
      v35 = *(_QWORD **)(v33 + 128);
      if (v35 != (_QWORD *)(v33 + 136))
      {
        do
        {
          if (*((_BYTE *)v35 + 72))
          {
            v36 = *((_DWORD *)v35 + 12);
            if (v36 >= 5 && v36 > *((_DWORD *)v35 + 16))
            {
              v37 = (*(uint64_t (**)(uint64_t))(v3 + 16))((uint64_t)v35 + 52);
              if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != v37)
                TIFF_FileWriter::UpdateFileStream();
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, v35[7], *((unsigned int *)v35 + 12));
              if ((v35[6] & 1) != 0)
                (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &unk_1882308F6, 1);
            }
          }
          v38 = (_QWORD *)v35[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD *)v35[2];
              v17 = *v39 == (_QWORD)v35;
              v35 = v39;
            }
            while (!v17);
          }
          v35 = v39;
        }
        while (v39 != v34);
      }
    }
  }
  v52 = 0;
  if (v53[0])
  {
    (*(void (**)(_QWORD, int *))(v3 + 48))(v55[0], &v52);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, 4, 0);
    (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v52, 4);
  }
  for (k = 0; k != 5; ++k)
  {
    v41 = v3 + 40 * k;
    v43 = *(unsigned __int8 *)(v41 + 112);
    v42 = (_BYTE *)(v41 + 112);
    if (v43)
    {
      *v42 = 0;
      v44 = v3 + 40 * k;
      *(_WORD *)(v44 + 114) = *(_QWORD *)(v44 + 144);
      *(_DWORD *)(v44 + 116) = v55[k];
      v45 = (_QWORD *)(v44 + 136);
      v46 = *(_QWORD **)(v44 + 128);
      if (v46 != (_QWORD *)(v44 + 136))
      {
        do
        {
          if (*((_BYTE *)v46 + 72))
          {
            *((_BYTE *)v46 + 72) = 0;
            v47 = *((_DWORD *)v46 + 12);
            *((_DWORD *)v46 + 16) = v47;
            if (v47 >= 5)
              *((_DWORD *)v46 + 17) = (*(uint64_t (**)(uint64_t))(v3 + 16))((uint64_t)v46 + 52);
          }
          v48 = (_QWORD *)v46[1];
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (_QWORD *)v46[2];
              v17 = *v49 == (_QWORD)v46;
              v46 = v49;
            }
            while (!v17);
          }
          v46 = v49;
        }
        while (v49 != v45);
      }
    }
  }
  *(_DWORD *)(v3 + 104) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 2);
}

uint64_t TIFF_FileWriter::WriteFileIFD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  __int16 v13;

  v13 = 0;
  (*(void (**)(_QWORD, __int16 *))(a1 + 40))(*(unsigned __int16 *)(a3 + 32), &v13);
  (*(void (**)(uint64_t, __int16 *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v13, 2);
  v6 = *(_QWORD **)(a3 + 16);
  if (v6 != (_QWORD *)(a3 + 24))
  {
    do
    {
      v12 = 0;
      v11 = 0;
      (*(void (**)(_QWORD, uint64_t *))(a1 + 40))(*((unsigned __int16 *)v6 + 20), &v11);
      (*(void (**)(_QWORD, char *))(a1 + 40))(*((unsigned __int16 *)v6 + 21), (char *)&v11 + 2);
      (*(void (**)(_QWORD, char *))(a1 + 48))(*((unsigned int *)v6 + 11), (char *)&v11 + 4);
      v12 = *((_DWORD *)v6 + 13);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v11, 12);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (_QWORD *)(a3 + 24));
  }
  LODWORD(v11) = 0;
  (*(void (**)(_QWORD, uint64_t *))(a1 + 48))(*(unsigned int *)(a3 + 8), &v11);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v11, 4);
}

BOOL TIFF_FileWriter::HasExifIFD(TIFF_FileWriter *this)
{
  return *((_QWORD *)this + 28) != 0;
}

BOOL TIFF_FileWriter::HasGPSInfoIFD(TIFF_FileWriter *this)
{
  return *((_QWORD *)this + 33) != 0;
}

uint64_t TIFF_FileWriter::GetTiffLength(TIFF_FileWriter *this)
{
  return *((unsigned int *)this + 26);
}

uint64_t TIFF_FileWriter::GetTiffStream(TIFF_FileWriter *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t TIFF_FileWriter::IsChanged(TIFF_FileWriter *this)
{
  return *((unsigned __int8 *)this + 88);
}

void std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::destroy(a1, a2[1]);
    TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(a2 + 5));
    operator delete(a2);
  }
}

void TIFF_FileWriter::InternalTagInfo::~InternalTagInfo(TIFF_FileWriter::InternalTagInfo *this)
{
  void *v2;

  if ((*((_BYTE *)this + 33) || *((_BYTE *)this + 32)) && *((_DWORD *)this + 2) >= 5u)
  {
    v2 = (void *)*((_QWORD *)this + 2);
    if (v2)
    {
      free(v2);
      *((_QWORD *)this + 2) = 0;
    }
  }
}

uint64_t *std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,TIFF_FileWriter::InternalTagInfo> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v13 = 0;
  v14 = 0;
  v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v14, &v13, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v12 = 0;
    v7 = (uint64_t *)operator new(0x50uLL);
    v11[1] = (uint64_t)(a1 + 1);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    *((_OWORD *)v7 + 4) = a4[2];
    LOBYTE(v12) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v14, v8, v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int16 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int16 *)a2 + 16), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int16 *)v10 + 16) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int16 *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int16 *)a4 + 16))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int16 *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      TIFF_FileWriter::InternalTagInfo::~InternalTagInfo((TIFF_FileWriter::InternalTagInfo *)(v2 + 40));
    operator delete((void *)v2);
  }
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1880F7188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TIFF_FileWriter::DeleteExistingInfo()
{
  __assert_rtn("DeleteExistingInfo", "TIFF_FileWriter.cpp", 75, "! (this->memParsed && this->fileParsed)");
}

void TIFF_FileWriter::ParseMemoryStream()
{
  __assert_rtn("ParseMemoryStream", "TIFF_FileWriter.cpp", 583, "! this->ownedStream");
}

void TIFF_FileWriter::DetermineAppendInfo()
{
  __assert_rtn("DetermineAppendInfo", "TIFF_FileWriter.cpp", 1288, "(appendedOrigin & 1) == 0");
}

void TIFF_FileWriter::UpdateMemByAppend()
{
  __assert_rtn("UpdateMemByAppend", "TIFF_FileWriter.cpp", 1463, "appendedOrigin == (this->tiffLength + 1)");
}

void TIFF_FileWriter::UpdateMemByRewrite()
{
  __assert_rtn("UpdateMemByRewrite", "TIFF_FileWriter.cpp", 1732, "*newLength_out == hiddenContentOrigin");
}

void TIFF_FileWriter::UpdateMemoryStream()
{
  __assert_rtn("UpdateMemoryStream", "TIFF_FileWriter.cpp", 1809, "this->tiffLength == newLength");
}

void TIFF_FileWriter::UpdateFileStream()
{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1962, "this->GetUns32(&thisTag.smallValue) == fileRef->Length()");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1948, "newIFDOffsets[ifd] == fileRef->Length()");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1937, "fileEnd == appendedOrigin");
}

{
  __assert_rtn("UpdateFileStream", "TIFF_FileWriter.cpp", 1892, "progressTracker->WorkInProgress()");
}

uint64_t AdobeXMPCore_Int::DOMImplementationRegistryImpl::RegisterParser(uint64_t a1, AdobeXMPCore_Int::IUTF8String_I *this, uint64_t *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(this, (const char *)0xFFFFFFFFFFFFFFFFLL, &v22);
  v26 = v22;
  v27 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>((uint64_t **)(a1 + 8), &v22, (uint64_t)&v22);
  v11 = v10;
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11 & 1;
}

void sub_1880F7480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::DOMImplementationRegistryImpl::RegisterSerializer(uint64_t a1, AdobeXMPCore_Int::IUTF8String_I *this, uint64_t *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(this, (const char *)0xFFFFFFFFFFFFFFFFLL, &v22);
  v26 = v22;
  v27 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>((uint64_t **)(a1 + 32), &v22, (uint64_t)&v22);
  v11 = v10;
  v12 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11 & 1;
}

void sub_1880F75F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::GetParser(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this@<X0>, AdobeXMPCore_Int::IUTF8String_I *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v9);
  v10 = v9;
  v5 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 8, &v10);
  if ((_QWORD *)((char *)this + 16) == v5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v5[6] + 216))(v5[6]);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1880F76C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::GetSerializer(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this@<X0>, AdobeXMPCore_Int::IUTF8String_I *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v9);
  v10 = v9;
  v5 = std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::find<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)this + 32, &v10);
  if ((_QWORD *)((char *)this + 40) == v5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v5[6] + 208))(v5[6]);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1880F7780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry(uint64_t *a1@<X8>)
{
  AdobeXMPCore_Int::ManageDOMImplementationRegistry(0, a1);
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64), (uint64_t *)&off_1E1BAB1B0);
}

{
  uint64_t v2;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 64), (uint64_t *)&off_1E1BAB1B0);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64), (uint64_t *)&off_1E1BAB1B0);
}

{
  AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl((AdobeXMPCore_Int::DOMImplementationRegistryImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 64), (uint64_t *)&off_1E1BAB1B0);
}

{
  AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl((AdobeXMPCore_Int::DOMImplementationRegistryImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::RDFDOMParserImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)]);
  return std::shared_ptr<AdobeXMPCore_Int::RDFDOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880F79A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::RDFDOMSerializerImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 120)]);
  return std::shared_ptr<AdobeXMPCore_Int::RDFDOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_1880F7AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

AdobeXMPCore_Int::RDFDOMSerializerImpl *AdobeXMPCore_Int::RDFDOMSerializerImpl::RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  _QWORD *v2;
  AdobeXMPCore_Int::DOMSerializerImpl *v3;

  *((_QWORD *)this + 11) = &unk_1E1BB3460;
  v2 = (_QWORD *)((char *)this + 88);
  *(_QWORD *)this = off_1E1BB3430;
  *((_QWORD *)this + 1) = &unk_1E1BA02F0;
  v3 = (AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + 8);
  *(_QWORD *)v3 = &unk_1E1BA02F0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 224)) = &unk_1E1BA0418;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 232)) = &unk_1E1BA0468;
  *((_QWORD *)this + 4) = &unk_1E1B9FA60;
  *((_QWORD *)this + 1) = &unk_1E1B9FC48;
  *v2 = &unk_1E1BA0130;
  *v2 = &unk_1E1BA0130;
  *(_QWORD *)v3 = &unk_1E1BA05D8;
  *(_QWORD *)v3 = &unk_1E1BA05D8;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 216)) = &unk_1E1BA05D8;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 224)) = &unk_1E1BA09B8;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 232)) = &unk_1E1BA0718;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 296)) = &unk_1E1BA0860;
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 304)) = &unk_1E1BA09B8;
  *((_QWORD *)this + 4) = &unk_1E1B9FE40;
  *((_QWORD *)this + 4) = &unk_1E1B9FE40;
  *(_QWORD *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 4) - 216) + 32) = &unk_1E1BA0028;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_WORD *)this + 40) = 0;
  *v2 = &unk_1E1BA01A8;
  *v2 = &unk_1E1BA01A8;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 56)) = &unk_1E1BA01A8;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  AdobeXMPCore_Int::DOMSerializerImpl::DOMSerializerImpl(v3, (uint64_t *)&off_1E1BAAC00);
  *(_QWORD *)this = off_1E1BB9760;
  *((_QWORD *)this + 1) = &off_1E1BB9920;
  *((_QWORD *)this + 4) = &off_1E1BB9B78;
  *((_QWORD *)this + 11) = off_1E1BB9CD8;
  return this;
}

void sub_1880F7C50(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl *v1;
  AdobeXMPCore_Int::ConfigurableImpl *v2;
  uint64_t v3;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)(v3 + 312));
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v2, (uint64_t *)(v3 + 288));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCore::IDOMImplementationRegistry_v1>::operator=[abi:ne180100]<AdobeXMPCore_Int::DOMImplementationRegistryImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = *(_QWORD **)a2;
  if (*(_QWORD *)a2)
    v3 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 152));
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::RDFDOMParserImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMParserImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC688;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880F7D54(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880F7D80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMParserImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMParserImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::RDFDOMSerializerImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::RDFDOMSerializerImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC7D8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880F7EA0(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880F7ECC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 120) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::RDFDOMSerializerImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::RDFDOMSerializerImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::DOMImplementationRegistryImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::DOMImplementationRegistryImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC8F0;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1880F7FEC(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 208) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_1880F8018(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 208) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::DOMImplementationRegistryImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::DOMImplementationRegistryImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::DOMImplementationRegistryImpl::~DOMImplementationRegistryImpl(AdobeXMPCore_Int::DOMImplementationRegistryImpl *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 200)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)) = a2[6];
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

uint64_t std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>>::__emplace_unique_key_args<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::pair<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCore::IDOMParser_v1 const>>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v10;

  v10 = 0;
  v5 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::__tree<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,std::__map_value_compare<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>,AdobeXMPCore_Int::IUTF8StringComparator,true>,AdobeXMPCore_Int::TAllocator<std::__value_type<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>>::__find_equal<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>((uint64_t)a1, &v10, a2);
  v6 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5)
  {
    v7 = (uint64_t **)v5;
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v5);
    v6 = (**MemoryAllocator)(MemoryAllocator, 64);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)a3;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)(v6 + 48) = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v10, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t DumpNodeOptions(unsigned int a1, uint64_t (*a2)(void *, const char *, uint64_t), void *a3)
{
  uint64_t result;
  size_t v6;
  uint64_t v7;
  unsigned int i;
  size_t v9;
  char __str[8];
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__str = 0;
  v12 = 0;
  memset(v13, 0, 15);
  if (!a1)
    return a2(a3, "(0x0)", 5);
  result = a2(a3, "(0x", 3);
  if (!(_DWORD)result)
  {
    snprintf(__str, 0x20uLL, "%lX", a1);
    v13[15] = 0;
    v6 = strlen(__str);
    result = a2(a3, __str, v6);
    if (!(_DWORD)result)
    {
      result = a2(a3, " :", 2);
      if (!(_DWORD)result)
      {
        v7 = 0;
        for (i = 0x80000000; ; i >>= 1)
        {
          if ((i & a1) != 0)
          {
            v9 = strlen(DumpNodeOptions(unsigned int,int (*)(void *,char const*,unsigned int),void *)::optNames[v7]);
            result = a2(a3, DumpNodeOptions(unsigned int,int (*)(void *,char const*,unsigned int),void *)::optNames[v7], v9);
            if ((_DWORD)result)
              break;
          }
          if (++v7 == 32)
            return a2(a3, ")", 1);
        }
      }
    }
  }
  return result;
}

uint64_t XMPMeta::DumpObject(XMPMeta *this, uint64_t (*a2)(void *, const char *, uint64_t), void *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if (!a2)
    XMPMeta::DumpObject();
  result = a2(a3, "Dumping XMPMeta object \"", 24);
  if ((_DWORD)result)
    return result;
  DumpClearString((uint64_t)this + 240, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
  result = a2(a3, "\"  ", 3);
  if ((_DWORD)result)
    return result;
  DumpNodeOptions(*((_DWORD *)this + 58), a2, a3);
  result = a2(a3, "\n", 1);
  if ((_DWORD)result)
    return result;
  if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 287))
      goto LABEL_13;
LABEL_10:
    result = a2(a3, "** bad root value **  \"", 23);
    if ((_DWORD)result)
      return result;
    DumpClearString((uint64_t)this + 264, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
    result = a2(a3, "\"", 1);
    if ((_DWORD)result)
      return result;
    result = a2(a3, "\n", 1);
    if ((_DWORD)result)
      return result;
    goto LABEL_13;
  }
  if (*((_QWORD *)this + 34))
    goto LABEL_10;
LABEL_13:
  if (*((_QWORD *)this + 40) != *((_QWORD *)this + 41))
  {
    result = a2(a3, "** bad root qualifiers **", 25);
    if ((_DWORD)result)
      return result;
    result = a2(a3, "\n", 1);
    if ((_DWORD)result)
      return result;
    v7 = *((_QWORD *)this + 41) - *((_QWORD *)this + 40);
    if (v7)
    {
      v8 = 0;
      v9 = v7 >> 3;
      if (v9 <= 1)
        v10 = 1;
      else
        v10 = v9;
      do
        result = DumpPropertyTree(*(const XMP_Node **)(*((_QWORD *)this + 40) + 8 * v8++), 3, 0, a2, a3);
      while (v10 != v8);
    }
  }
  v11 = *((_QWORD *)this + 37);
  v12 = *((_QWORD *)this + 38);
  if (v11 != v12)
  {
    v13 = 0;
    v14 = (v12 - v11) >> 3;
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    do
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * v13);
      result = a2(a3, "\n", 1);
      if ((_DWORD)result)
        break;
      result = a2(a3, "   ", 3);
      if ((_DWORD)result)
        break;
      DumpClearString(v16 + 40, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
      result = a2(a3, "  ", 2);
      if ((_DWORD)result)
        break;
      DumpClearString(v16 + 16, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a2, (uint64_t)a3);
      result = a2(a3, "  ", 2);
      if ((_DWORD)result)
        break;
      DumpNodeOptions(*(_DWORD *)(v16 + 8), a2, a3);
      result = a2(a3, "\n", 1);
      if ((_DWORD)result)
        break;
      if ((*(_DWORD *)(v16 + 8) & 0x80000000) == 0)
      {
        result = a2(a3, "** bad schema options **", 24);
        if ((_DWORD)result)
          break;
        result = a2(a3, "\n", 1);
        if ((_DWORD)result)
          break;
      }
      if (*(_QWORD *)(v16 + 96) != *(_QWORD *)(v16 + 104))
      {
        result = a2(a3, "** bad schema qualifiers **", 27);
        if ((_DWORD)result)
          return result;
        result = a2(a3, "\n", 1);
        if ((_DWORD)result)
          return result;
        v17 = *(_QWORD *)(v16 + 104) - *(_QWORD *)(v16 + 96);
        if (v17)
        {
          v18 = 0;
          v19 = v17 >> 3;
          if (v19 <= 1)
            v20 = 1;
          else
            v20 = v19;
          do
            result = DumpPropertyTree(*(const XMP_Node **)(*(_QWORD *)(v16 + 96) + 8 * v18++), 3, 0, a2, a3);
          while (v20 != v18);
        }
      }
      v21 = *(_QWORD *)(v16 + 80) - *(_QWORD *)(v16 + 72);
      if (v21)
      {
        v22 = 0;
        v23 = v21 >> 3;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        do
          result = DumpPropertyTree(*(const XMP_Node **)(*(_QWORD *)(v16 + 72) + 8 * v22++), 2, 0, a2, a3);
        while (v24 != v22);
      }
      ++v13;
    }
    while (v13 != v15);
  }
  return result;
}

uint64_t DumpPropertyTree(const XMP_Node *a1, int a2, uint64_t a3, uint64_t (*a4)(void *, const char *, uint64_t), void *a5)
{
  uint64_t v10;
  uint64_t result;
  size_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD **v23;
  int v24;
  _WORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  char __str[16];
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
LABEL_5:
    *(_OWORD *)__str = 0u;
    v39 = 0u;
    if (a3)
    {
      result = a4(a5, "[", 1);
      if ((_DWORD)result)
        return result;
      snprintf(__str, 0x20uLL, "%ld", a3);
      HIBYTE(v39) = 0;
      v12 = strlen(__str);
      result = a4(a5, __str, v12);
      if ((_DWORD)result)
        return result;
      result = a4(a5, "]", 1);
      if ((_DWORD)result)
        return result;
    }
    else
    {
      if ((*((_BYTE *)a1 + 8) & 0x20) != 0)
      {
        result = a4(a5, "? ", 2);
        if ((_DWORD)result)
          return result;
      }
      DumpClearString((uint64_t)a1 + 16, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a4, (uint64_t)a5);
    }
    if ((*((_BYTE *)a1 + 9) & 0x1F) == 0)
    {
      result = a4(a5, " = \"", 4);
      if ((_DWORD)result)
        return result;
      DumpClearString((uint64_t)a1 + 40, (uint64_t (*)(uint64_t, unsigned __int8 *, uint64_t))a4, (uint64_t)a5);
      result = a4(a5, "\"", 1);
      if ((_DWORD)result)
        return result;
      if (!*((_DWORD *)a1 + 2))
        goto LABEL_33;
    }
    result = a4(a5, "  ", 2);
    if ((_DWORD)result)
      return result;
    DumpNodeOptions(*((_DWORD *)a1 + 2), a4, a5);
    v13 = *((_DWORD *)a1 + 2);
    if ((v13 & 0x40) == 0)
    {
LABEL_29:
      if ((v13 & 0x1F00) != 0)
      {
        if ((v13 & 0x200) != 0)
        {
          if ((v13 & 0x100) == 0)
            goto LABEL_38;
        }
        else if ((v13 & 0x1F00) == 0x100)
        {
          goto LABEL_38;
        }
        result = a4(a5, "  ** bad comp flags **", 22);
LABEL_37:
        if ((_DWORD)result)
          return result;
        goto LABEL_38;
      }
LABEL_33:
      if (*((_QWORD *)a1 + 9) != *((_QWORD *)a1 + 10))
      {
        result = a4(a5, "  ** bad children **", 20);
        goto LABEL_37;
      }
LABEL_38:
      result = a4(a5, "\n", 1);
      if ((_DWORD)result)
        return result;
      v18 = *((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12);
      if (v18)
      {
        v19 = 0;
        v20 = v18 >> 3;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        do
        {
          v22 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 8 * v19);
          if (*(const XMP_Node **)(v22 + 64) != a1)
          {
            result = a4(a5, "** bad parent link => ", 22);
            if ((_DWORD)result)
              return result;
          }
          v23 = (_WORD **)(v22 + 16);
          v24 = *(char *)(v22 + 39);
          if (v24 < 0)
          {
            if (*(_QWORD *)(v22 + 24) != 2)
              goto LABEL_53;
            v25 = *v23;
          }
          else
          {
            v25 = (_WORD *)(v22 + 16);
            if (v24 != 2)
              goto LABEL_53;
          }
          if (*v25 == 23899)
          {
            result = a4(a5, "** bad qual name => ", 20);
            if ((_DWORD)result)
              return result;
          }
LABEL_53:
          if ((*(_BYTE *)(v22 + 8) & 0x20) == 0)
          {
            result = a4(a5, "** bad qual flag => ", 20);
            if ((_DWORD)result)
              return result;
          }
          v26 = *(char *)(v22 + 39);
          if (v26 < 0)
          {
            if (*(_QWORD *)(v22 + 24) != 8)
              goto LABEL_64;
            v23 = (_WORD **)*v23;
          }
          else if (v26 != 8)
          {
            goto LABEL_64;
          }
          if (*v23 == (_WORD *)0x676E616C3A6C6D78 && (v19 || (*((_BYTE *)a1 + 8) & 0x40) == 0))
          {
            result = a4(a5, "** bad lang qual => ", 20);
            if ((_DWORD)result)
              return result;
          }
LABEL_64:
          result = DumpPropertyTree((const XMP_Node *)v22, a2 + 2, 0, (int (*)(void *, const char *, unsigned int))a4, a5);
          ++v19;
        }
        while (v21 != v19);
      }
      v27 = *((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9);
      if (!v27)
        return result;
      v28 = 0;
      v29 = v27 >> 3;
      v30 = a2 + 1;
      if (v29 <= 1)
        v31 = 1;
      else
        v31 = v29;
      while (1)
      {
        v32 = *(_QWORD *)(*((_QWORD *)a1 + 9) + 8 * v28);
        if (*(const XMP_Node **)(v32 + 64) != a1)
        {
          result = a4(a5, "** bad parent link => ", 22);
          if ((_DWORD)result)
            return result;
        }
        if ((*(_BYTE *)(v32 + 8) & 0x20) != 0)
        {
          result = a4(a5, "** bad qual flag => ", 20);
          if ((_DWORD)result)
            return result;
        }
        if ((*((_BYTE *)a1 + 9) & 2) == 0)
          break;
        v35 = v28 + 1;
        v36 = (_QWORD *)(v32 + 16);
        v37 = *(char *)(v32 + 39);
        if (v37 < 0)
        {
          if (*(_QWORD *)(v32 + 24) != 2)
            goto LABEL_88;
          v36 = (_QWORD *)*v36;
        }
        else if (v37 != 2)
        {
          goto LABEL_88;
        }
        if (*(_WORD *)v36 != 23899)
        {
LABEL_88:
          result = a4(a5, "** bad item name => ", 20);
          if ((_DWORD)result)
            return result;
        }
LABEL_89:
        result = DumpPropertyTree((const XMP_Node *)v32, v30, v35, (int (*)(void *, const char *, unsigned int))a4, a5);
        if (v31 == ++v28)
          return result;
      }
      v33 = (_QWORD *)(v32 + 16);
      v34 = *(char *)(v32 + 39);
      if (v34 < 0)
      {
        if (*(_QWORD *)(v32 + 24) != 2)
        {
LABEL_84:
          v35 = 0;
          goto LABEL_89;
        }
        v33 = (_QWORD *)*v33;
      }
      else if (v34 != 2)
      {
        goto LABEL_84;
      }
      if (*(_WORD *)v33 == 23899)
      {
        result = a4(a5, "** bad field name => ", 21);
        if ((_DWORD)result)
          return result;
      }
      goto LABEL_84;
    }
    v14 = (_QWORD *)*((_QWORD *)a1 + 12);
    if (v14 != *((_QWORD **)a1 + 13))
    {
      v15 = *v14;
      v16 = (_QWORD *)(*v14 + 16);
      v17 = *(char *)(v15 + 39);
      if ((v17 & 0x80000000) == 0)
      {
        if (v17 != 8)
          goto LABEL_27;
LABEL_26:
        if (*v16 == 0x676E616C3A6C6D78)
          goto LABEL_29;
        goto LABEL_27;
      }
      if (*(_QWORD *)(v15 + 24) == 8)
      {
        v16 = (_QWORD *)*v16;
        goto LABEL_26;
      }
    }
LABEL_27:
    result = a4(a5, "  ** bad lang flag **", 21);
    if ((_DWORD)result)
      return result;
    v13 = *((_DWORD *)a1 + 2);
    goto LABEL_29;
  }
  v10 = a2;
  while (1)
  {
    result = a4(a5, "   ", 3);
    if ((_DWORD)result)
      return result;
    if (!--v10)
      goto LABEL_5;
  }
}

uint64_t XMPMeta::CountArrayItems(char **this, char *a2, char *a3)
{
  uint64_t Node;
  uint64_t v5;
  _QWORD *exception;
  const void **v8[3];
  const void ***v9;

  if (!a2 || !a3)
    XMPMeta::CountArrayItems();
  memset(v8, 0, sizeof(v8));
  ExpandXPath(a2, a3, (uint64_t *)v8);
  Node = FindNode(this + 28, v8, 0, 0, 0);
  if (Node)
  {
    if ((*(_BYTE *)(Node + 9) & 2) == 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 102;
      exception[1] = "The named property is not an array";
      *((_BYTE *)exception + 16) = 0;
    }
    v5 = (*(_QWORD *)(Node + 80) - *(_QWORD *)(Node + 72)) >> 3;
  }
  else
  {
    v5 = 0;
  }
  v9 = v8;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  return v5;
}

void sub_1880F8D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t XMPMeta::GetObjectName(uint64_t this, const char **a2, unsigned int *a3)
{
  const char *v3;
  uint64_t v4;

  v3 = (const char *)(this + 240);
  if (*(char *)(this + 263) < 0)
    v3 = *(const char **)v3;
  *a2 = v3;
  if (*(char *)(this + 263) < 0)
    v4 = *(_QWORD *)(this + 248);
  else
    LODWORD(v4) = *(unsigned __int8 *)(this + 263);
  *a3 = v4;
  return this;
}

uint64_t XMPMeta::SetObjectName(XMPMeta *this, char *a2)
{
  char v4;
  char *v5;
  int v6;
  int v7;
  unint64_t v9;
  unsigned int v10;

  v4 = *a2;
  if (*a2)
  {
    v5 = a2;
    do
    {
      if (v4 >= 1)
      {
        do
        {
          v7 = *++v5;
          v6 = v7;
        }
        while (v7 > 0);
        if ((v6 & 0x80000000) == 0)
          break;
      }
      v10 = 0;
      v9 = 0;
      CodePoint_from_UTF8(v5, 4uLL, &v10, &v9);
      v5 += v9;
      v4 = *v5;
    }
    while (*v5);
  }
  return MEMORY[0x18D761A14]((char *)this + 240, a2);
}

uint64_t *XMPMeta::Sort(XMPMeta *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *result;
  uint64_t *v5;
  BOOL (*v6)(XMP_Node *, XMP_Node *);

  v2 = *((_QWORD *)this + 40);
  v3 = (uint64_t *)*((_QWORD *)this + 41);
  if ((uint64_t *)v2 != v3)
  {
    v6 = CompareNodeNames;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(v2, v3, (uint64_t (**)(uint64_t, uint64_t))&v6, 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3), 1);
    SortWithinOffspring((uint64_t *)this + 40);
  }
  result = (uint64_t *)*((_QWORD *)this + 37);
  v5 = (uint64_t *)*((_QWORD *)this + 38);
  if (result != v5)
  {
    v6 = CompareNodeValues;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)result, v5, (uint64_t (**)(uint64_t, uint64_t))&v6, 126 - 2 * __clz(v5 - result), 1);
    return SortWithinOffspring((uint64_t *)this + 37);
  }
  return result;
}

BOOL CompareNodeNames(XMP_Node *a1, XMP_Node *a2)
{
  _QWORD **v2;
  int v3;
  _QWORD *v4;
  _QWORD **v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v10;
  char *v11;
  size_t v12;
  char *v13;
  size_t v14;
  int v15;

  v2 = (_QWORD **)((char *)a1 + 16);
  v3 = *((unsigned __int8 *)a1 + 39);
  if (*((char *)a1 + 39) < 0)
  {
    if (*((_QWORD *)a1 + 3) != 8)
      goto LABEL_7;
    v4 = *v2;
  }
  else
  {
    v4 = (_QWORD *)((char *)a1 + 16);
    if (v3 != 8)
      goto LABEL_7;
  }
  if (*v4 == 0x676E616C3A6C6D78)
    return 1;
LABEL_7:
  v5 = (_QWORD **)((char *)a2 + 16);
  v6 = *((unsigned __int8 *)a2 + 39);
  if (*((char *)a2 + 39) < 0)
  {
    if (*((_QWORD *)a2 + 3) != 8)
      goto LABEL_13;
    v7 = *v5;
  }
  else
  {
    v7 = (_QWORD *)((char *)a2 + 16);
    if (v6 != 8)
      goto LABEL_13;
  }
  if (*v7 == 0x676E616C3A6C6D78)
    return 0;
LABEL_13:
  if ((v3 & 0x80) != 0)
  {
    if (*((_QWORD *)a1 + 3) != 8)
      goto LABEL_19;
    v2 = (_QWORD **)*v2;
LABEL_18:
    if (*v2 != (_QWORD *)0x657079743A666472)
      goto LABEL_19;
    return 1;
  }
  if (v3 == 8)
    goto LABEL_18;
LABEL_19:
  if ((v6 & 0x80) == 0)
  {
    v8 = (_QWORD *)((char *)a2 + 16);
    if (v6 != 8)
      goto LABEL_26;
LABEL_25:
    if (*v8 != 0x657079743A666472)
      goto LABEL_26;
    return 0;
  }
  if (*((_QWORD *)a2 + 3) == 8)
  {
    v8 = *v5;
    goto LABEL_25;
  }
LABEL_26:
  if ((v3 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)a1 + 39);
  else
    v10 = *((_QWORD *)a1 + 3);
  if ((v3 & 0x80u) == 0)
    v11 = (char *)a1 + 16;
  else
    v11 = (char *)*((_QWORD *)a1 + 2);
  if ((v6 & 0x80u) == 0)
    v12 = *((unsigned __int8 *)a2 + 39);
  else
    v12 = *((_QWORD *)a2 + 3);
  if ((v6 & 0x80u) == 0)
    v13 = (char *)a2 + 16;
  else
    v13 = (char *)*((_QWORD *)a2 + 2);
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
    return v15 < 0;
  else
    return v10 < v12;
}

uint64_t *SortWithinOffspring(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL (*v15)(XMP_Node *, XMP_Node *);

  v1 = result[1] - *result;
  if (v1)
  {
    v2 = result;
    v3 = 0;
    v4 = v1 >> 3;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    while (1)
    {
      v6 = *(_QWORD *)(*v2 + 8 * v3);
      result = *(uint64_t **)(v6 + 96);
      v7 = *(uint64_t **)(v6 + 104);
      if (result != v7)
      {
        v15 = CompareNodeNames;
        std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)result, v7, (uint64_t (**)(uint64_t, uint64_t))&v15, 126 - 2 * __clz(v7 - result), 1);
        result = (uint64_t *)SortWithinOffspring(v6 + 96);
      }
      v9 = *(uint64_t **)(v6 + 72);
      v10 = *(uint64_t **)(v6 + 80);
      v8 = v6 + 72;
      if (v9 == v10)
        goto LABEL_21;
      v11 = *(_DWORD *)(v6 + 8);
      if ((v11 & 0x80000100) != 0)
        break;
      if ((v11 & 0x200) != 0)
      {
        if ((v11 & 0x400) == 0)
        {
          v15 = CompareNodeValues;
          if ((char *)v10 - (char *)v9 < 1025)
          {
            v12 = 0;
            v14 = 0;
          }
          else
          {
            v12 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<XMP_Node *>(v10 - v9);
            v14 = v13;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v9, v10, (uint64_t (**)(uint64_t, uint64_t))&v15, v10 - v9, v12, v14);
          if (v12)
            operator delete(v12);
          goto LABEL_20;
        }
        if ((v11 & 0x1000) != 0)
        {
          v15 = CompareNodeLangs;
          goto LABEL_10;
        }
      }
LABEL_20:
      result = (uint64_t *)SortWithinOffspring(v8);
LABEL_21:
      if (v5 == ++v3)
        return result;
    }
    v15 = CompareNodeNames;
LABEL_10:
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>((uint64_t)v9, v10, (uint64_t (**)(uint64_t, uint64_t))&v15, 126 - 2 * __clz(v10 - v9), 1);
    goto LABEL_20;
  }
  return result;
}

void sub_1880F9210(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL CompareNodeValues(XMP_Node *a1, XMP_Node *a2)
{
  char *v2;
  char *v3;
  char *v4;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;

  if (*((_DWORD *)a1 + 2) & 0x1F00 | *((_DWORD *)a2 + 2) & 0x1F00)
    return (*((_DWORD *)a1 + 2) & 0x1F00u) < (*((_DWORD *)a2 + 2) & 0x1F00u);
  v4 = (char *)*((_QWORD *)a2 + 5);
  v2 = (char *)a2 + 40;
  v3 = v4;
  v5 = v2[23];
  v8 = (char *)*((_QWORD *)a1 + 5);
  v6 = (char *)a1 + 40;
  v7 = v8;
  v9 = v6[23];
  if (v9 >= 0)
    v10 = v6[23];
  else
    v10 = *((_QWORD *)v6 + 1);
  if (v9 < 0)
    v6 = v7;
  if (v5 >= 0)
    v11 = v2[23];
  else
    v11 = *((_QWORD *)v2 + 1);
  if (v5 < 0)
    v2 = v3;
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = memcmp(v6, v2, v12);
  if (v13)
    return v13 < 0;
  else
    return v10 < v11;
}

_QWORD *XMPMeta::Erase(XMPMeta *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 43);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *((_QWORD *)this + 43) = 0;
  }
  return XMP_Node::ClearNode((XMPMeta *)((char *)this + 224));
}

void XMPMeta::Clone(XMPMeta *this, XMPMeta *a2, int a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *exception;
  const char *v9;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v9 = "Null clone pointer";
    goto LABEL_8;
  }
  if (a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    v9 = "No options are defined yet";
LABEL_8:
    exception[1] = v9;
    *((_BYTE *)exception + 16) = 0;
  }
  if (*((_QWORD *)this + 36))
    XMPMeta::Clone();
  v5 = (void **)((char *)a2 + 224);
  XMP_Node::ClearNode((XMPMeta *)((char *)a2 + 224));
  *((_DWORD *)a2 + 58) = *((_DWORD *)this + 58);
  std::string::operator=((std::string *)a2 + 10, (const std::string *)this + 10);
  std::string::operator=((std::string *)a2 + 11, (const std::string *)this + 11);
  v6 = *((_QWORD *)this + 45);
  *((_BYTE *)a2 + 368) = *((_BYTE *)this + 368);
  *((_QWORD *)a2 + 45) = v6;
  v7 = *((_QWORD *)this + 49);
  *(_OWORD *)((char *)a2 + 376) = *(_OWORD *)((char *)this + 376);
  *((_QWORD *)a2 + 49) = v7;
  CloneOffspring((XMPMeta *)((char *)this + 224), v5, 0);
}

void XMP_Node::GetFullQualifiedName(XMP_Node *this, const char **a2, unsigned int *a3, const char **a4, unsigned int *a5)
{
  const char *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  char v18;
  std::string v19;

  if (a2)
    *a2 = "";
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = "";
  if (a5)
    *a5 = 0;
  if (*((char *)this + 39) < 0)
  {
    if (!*((_QWORD *)this + 3))
      return;
  }
  else if (!*((_BYTE *)this + 39))
  {
    return;
  }
  v10 = (char *)this + 16;
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    if (a2)
    {
      if ((*((_BYTE *)this + 39) & 0x80) != 0)
        v10 = *(const char **)v10;
      *a2 = v10;
    }
    if (a3)
    {
      if (*((char *)this + 39) < 0)
        v15 = *((_QWORD *)this + 3);
      else
        LODWORD(v15) = *((unsigned __int8 *)this + 39);
      *a3 = v15;
    }
    if (a4)
    {
      v16 = (char *)this + 40;
      if (*((char *)this + 63) < 0)
        v16 = *(const char **)v16;
      *a4 = v16;
    }
    if (a5)
    {
      if (*((char *)this + 63) < 0)
        v17 = *((_QWORD *)this + 6);
      else
        LODWORD(v17) = *((unsigned __int8 *)this + 63);
      *a5 = v17;
    }
  }
  else
  {
    v11 = std::string::find((const std::string *)((char *)this + 16), 58, 0);
    if (v11 != -1)
    {
      v12 = v11;
      memset(&v19, 0, sizeof(v19));
      std::string::basic_string(&v19, (const std::string *)((char *)this + 16), 0, v11, (std::allocator<char> *)&v18);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v19;
      else
        v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
      XMP_NamespaceTable::GetURI((XMP_NamespaceTable *)sRegisteredNamespaces, (char *)v13, a2, a3);
      if (*((char *)this + 39) < 0)
        v10 = *(const char **)v10;
      *a4 = &v10[v12 + 1];
      if (*((char *)this + 39) < 0)
        v14 = *((_QWORD *)this + 3);
      else
        LODWORD(v14) = *((unsigned __int8 *)this + 39);
      *a5 = v14 + ~(_DWORD)v12;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1880F9594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t XMPMeta::ResetErrorCallbackLimit(uint64_t this, int a2)
{
  *(_DWORD *)(this + 360) = a2;
  *(_DWORD *)(this + 364) = 0;
  *(_BYTE *)(this + 368) = 0;
  return this;
}

BOOL XMPMeta::ErrorCallbackInfo::CanNotify(XMPMeta::ErrorCallbackInfo *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1 && !*((_QWORD *)this + 3))
    XMPMeta::ErrorCallbackInfo::CanNotify();
  return v1 != 0;
}

BOOL XMPMeta::ErrorCallbackInfo::ClientCallbackWrapper(XMPMeta::ErrorCallbackInfo *this, const char *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return (*((unsigned int (**)(_QWORD, _QWORD, uint64_t, uint64_t, const char *))this + 3))(*((_QWORD *)this + 4), *((_QWORD *)this + 5), a3, a4, a5) != 0;
}

void XMPMeta::ErrorCallbackInfo::~ErrorCallbackInfo(XMPMeta::ErrorCallbackInfo *this)
{
  JUMPOUT(0x18D761C30);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::pair<std::string const,std::vector<XPathStepInfo>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<XPathStepInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>,std::reverse_iterator<XPathStepInfo*>,std::reverse_iterator<XPathStepInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,std::reverse_iterator<XPathStepInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

void std::__split_buffer<XPathStepInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void std::vector<XPathStepInfo>::__assign_with_size[abi:ne180100]<XPathStepInfo*,XPathStepInfo*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    std::vector<XPathStepInfo>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<XPathStepInfo>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(__str, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>(v8, (__int128 *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(__str, (std::string *)a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0)
        operator delete(*(void **)(v18 - 32));
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1880F9A00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1880F9A08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<XPathStepInfo>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<XPathStepInfo>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<XPathStepInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XPathStepInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  uint64_t v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  LOBYTE(v11) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1880F9B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<XPathStepInfo>,XPathStepInfo*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0)
      operator delete(*(void **)(v1 - 32));
    v1 -= 32;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,XPathStepInfo *,XPathStepInfo *,XPathStepInfo *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

std::string *std::pair<std::string const,std::vector<XPathStepInfo>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<XPathStepInfo>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<XPathStepInfo>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::pair<std::string const,std::vector<XPathStepInfo>>::pair[abi:ne180100]<std::string&,std::vector<XPathStepInfo>&,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<XPathStepInfo>::__init_with_size[abi:ne180100]<XPathStepInfo*,XPathStepInfo*>(this + 1, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  return this;
}

void sub_1880F9D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<XPathStepInfo>::__init_with_size[abi:ne180100]<XPathStepInfo*,XPathStepInfo*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<XPathStepInfo>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<XPathStepInfo>,XPathStepInfo*,XPathStepInfo*,XPathStepInfo*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1880F9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL CompareNodeLangs(XMP_Node *a1, XMP_Node *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t **v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;

  v2 = (uint64_t *)*((_QWORD *)a1 + 12);
  if (v2 == *((uint64_t **)a1 + 13))
    return 0;
  v3 = *v2;
  v4 = (_QWORD *)(v3 + 16);
  v5 = *(char *)(v3 + 39);
  if (v5 < 0)
  {
    if (*(_QWORD *)(v3 + 24) != 8)
      return 0;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 8)
  {
    return 0;
  }
  if (*v4 != 0x676E616C3A6C6D78)
    return 0;
  v7 = (uint64_t *)*((_QWORD *)a2 + 12);
  if (v7 == *((uint64_t **)a2 + 13))
    return 0;
  v8 = *v7;
  v9 = (_QWORD *)(v8 + 16);
  v10 = *(char *)(v8 + 39);
  if (v10 < 0)
  {
    if (*(_QWORD *)(v8 + 24) == 8)
    {
      v9 = (_QWORD *)*v9;
      goto LABEL_15;
    }
    return 0;
  }
  if (v10 != 8)
    return 0;
LABEL_15:
  if (*v9 != 0x676E616C3A6C6D78)
    return 0;
  v11 = (uint64_t **)(v3 + 40);
  v12 = *(char *)(v3 + 63);
  if (v12 < 0)
  {
    if (*(_QWORD *)(v3 + 48) != 9)
      goto LABEL_25;
    v13 = *v11;
  }
  else
  {
    v13 = (uint64_t *)(v3 + 40);
    if (v12 != 9)
      goto LABEL_25;
  }
  v14 = *v13;
  v15 = *((unsigned __int8 *)v13 + 8);
  if (v14 != 0x6C75616665642D78 || v15 != 116)
  {
LABEL_25:
    v17 = (uint64_t **)(v8 + 40);
    v18 = *(char *)(v8 + 63);
    if (v18 < 0)
    {
      if (*(_QWORD *)(v8 + 48) != 9)
        return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
      v19 = *v17;
    }
    else
    {
      v19 = (uint64_t *)(v8 + 40);
      if (v18 != 9)
        return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
    }
    v20 = *v19;
    v21 = *((unsigned __int8 *)v19 + 8);
    if (v20 == 0x6C75616665642D78 && v21 == 116)
      return 0;
    return std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v17);
  }
  return 1;
}

void *std::get_temporary_buffer[abi:ne180100]<XMP_Node *>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t *std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;

  if (a4 >= 2)
  {
    v8 = result;
    if (a4 == 2)
    {
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &result[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, v14, a3, v15, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13]);
        return (uint64_t *)std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,XMP_Node **,std::__wrap_iter<XMP_Node **>>((uint64_t)a5, &a5[v13], &a5[v13], &a5[a4], v8, a3);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else
    {
      return (uint64_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>((uint64_t)result, a2, a3);
    }
  }
  return result;
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v9 = *v8;
        v8 = v5;
        result = (*a3)(*v5, v9);
        if ((_DWORD)result)
        {
          v10 = *v8;
          v11 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v11 + 8) = *(_QWORD *)((char *)v4 + v11);
            if (!v11)
              break;
            result = (*a3)(v10, *(_QWORD *)((char *)v4 + v11 - 8));
            v11 -= 8;
            if ((result & 1) == 0)
            {
              v12 = (_QWORD *)((char *)v4 + v11 + 8);
              goto LABEL_10;
            }
          }
          v12 = v4;
LABEL_10:
          *v12 = v10;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t v10;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
      {
        *a5 = *(a2 - 1);
        v10 = *v9;
      }
      else
      {
        *a5 = *v9;
        v10 = *(a2 - 1);
      }
      a5[1] = v10;
    }
    else if (a4 == 1)
    {
      *a5 = *result;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, &result[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v9[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      return (uint64_t *)std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>((uint64_t)v9, &v9[a4 >> 1], &v9[a4 >> 1], a2, a5, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(result, a2, a5, a3);
    }
  }
  return result;
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,XMP_Node **,std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      result = (*a6)(*a3, *v11);
      if ((_DWORD)result)
        v12 = a3;
      else
        v12 = v11;
      v11 += result ^ 1;
      a3 += result;
      *a5++ = *v12;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, _QWORD);
  uint64_t v55;

  v52 = a6;
  if (a6)
  {
    v14 = (char *)result;
    do
    {
      if (v52 <= a8 || a5 <= a8)
        return (uint64_t)std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v14, a2, a3, a4, a5, v52, a7);
      if (!a5)
        return result;
      v15 = 0;
      v16 = -a5;
      while (1)
      {
        result = (*a4)(*(_QWORD *)a2, *(_QWORD *)&v14[v15]);
        if ((result & 1) != 0)
          break;
        v15 += 8;
        if (__CFADD__(v16++, 1))
          return result;
      }
      v18 = -v16;
      v19 = v52;
      v49 = a8;
      v50 = a7;
      v51 = a3;
      v48 = &v14[v15];
      if (-v16 >= v52)
      {
        if (v16 == -1)
        {
          v46 = *(_QWORD *)&v14[v15];
          *(_QWORD *)&v14[v15] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v46;
          return result;
        }
        if (v16 > 0)
          v18 = 1 - v16;
        v28 = v18 >> 1;
        v23 = &v14[8 * (v18 >> 1) + v15];
        v29 = a3;
        v22 = a2;
        if (a2 != v29)
        {
          v47 = v28;
          v54 = *a4;
          v30 = (v51 - a2) >> 3;
          v22 = a2;
          do
          {
            v31 = &v22[8 * (v30 >> 1)];
            v33 = *(_QWORD *)v31;
            v32 = v31 + 8;
            v34 = v54(v33, *(_QWORD *)v23);
            if (v34)
              v30 += ~(v30 >> 1);
            else
              v30 >>= 1;
            if (v34)
              v22 = v32;
          }
          while (v30);
          v19 = v52;
          v28 = v47;
        }
        v21 = (v22 - a2) >> 3;
      }
      else
      {
        if (v52 >= 0)
          v20 = v52;
        else
          v20 = v52 + 1;
        v21 = v20 >> 1;
        v22 = &a2[8 * (v20 >> 1)];
        v23 = a2;
        if (a2 - v14 != v15)
        {
          v53 = v20 >> 1;
          v24 = (a2 - v14 - v15) >> 3;
          v23 = &v14[v15];
          do
          {
            v25 = &v23[8 * (v24 >> 1)];
            v27 = *(_QWORD *)v25;
            v26 = v25 + 8;
            if ((*a4)(*(_QWORD *)v22, v27))
            {
              v24 >>= 1;
            }
            else
            {
              v23 = v26;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v19 = v52;
          v21 = v53;
        }
        v28 = (v23 - v14 - v15) >> 3;
      }
      a5 = -(v28 + v16);
      v55 = v19 - v21;
      v35 = a2;
      v36 = v19;
      v37 = v28;
      v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(v23, v35, v22);
      v39 = v21;
      v40 = v38;
      if (v37 + v39 >= v36 - (v37 + v39) - v16)
      {
        v44 = v22;
        v45 = v37;
        v43 = v39;
        a7 = v50;
        a3 = v38;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(v38, v44, v51, a4, a5, v55, v50, v49);
        a2 = v23;
        a8 = v49;
        a5 = v45;
        v14 = v48;
      }
      else
      {
        v41 = v23;
        v42 = v37;
        a8 = v49;
        a7 = v50;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(&v14[v15], v41, v38, a4, v42, v39, v50, v49);
        v14 = v40;
        a2 = v22;
        a3 = v51;
        v43 = v55;
      }
      v52 = v43;
    }
    while (v43);
  }
  return result;
}

uint64_t *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v6 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      v8 = 0;
      v9 = a3;
      do
      {
        v10 = v9;
        v11 = *v9++;
        result = (uint64_t *)(*a4)(*v6, v11);
        v12 = v9;
        if ((_DWORD)result)
        {
          v10[1] = *v10;
          v12 = a3;
          if (v10 != a3)
          {
            v13 = v8;
            while (1)
            {
              v12 = (uint64_t *)((char *)a3 + v13);
              result = (uint64_t *)(*a4)(*v6, *(uint64_t *)((char *)a3 + v13 - 8));
              if (!(_DWORD)result)
                break;
              *v12 = *(v12 - 1);
              v13 -= 8;
              if (!v13)
              {
                v12 = a3;
                break;
              }
            }
          }
        }
        v14 = *v6++;
        *v12 = v14;
        v8 += 8;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      v13 = *a3++;
      *a5++ = v13;
    }
  }
  else
  {
    v11 = (uint64_t *)result;
    while (a3 != a4)
    {
      result = (*a6)(*a3, *v11);
      if ((_DWORD)result)
        v12 = a3;
      else
        v12 = v11;
      a3 += result;
      v11 += result ^ 1;
      *a5++ = *v12;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v14 = 0;
      do
      {
        a5[v14] = v11[v14];
        ++v14;
      }
      while (&v11[v14] != a2);
    }
  }
  return result;
}

char *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),std::__wrap_iter<XMP_Node **>>(char *__dst, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *__src)
{
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v10 = a2;
  v11 = __dst;
  if (a5 <= a6)
  {
    if (__dst != a2)
    {
      v16 = 0;
      do
      {
        *(_QWORD *)&__src[v16] = *(_QWORD *)&__dst[v16];
        v16 += 8;
      }
      while (&__dst[v16] != a2);
      if (v16)
      {
        v17 = &__src[v16];
        v18 = __src;
        while (v10 != a3)
        {
          __dst = (char *)(*a4)(*(_QWORD *)v10, *(_QWORD *)v18);
          if ((_DWORD)__dst)
            v19 = v10;
          else
            v19 = v18;
          v10 += 8 * __dst;
          v18 += 8 * (__dst ^ 1);
          *(_QWORD *)v11 = *(_QWORD *)v19;
          v11 += 8;
          if (v17 == v18)
            return __dst;
        }
        return (char *)memmove(v11, v18, __src - v18 + v16);
      }
    }
  }
  else if (a2 != a3)
  {
    v12 = 0;
    do
    {
      *(_QWORD *)&__src[v12] = *(_QWORD *)&a2[v12];
      v12 += 8;
    }
    while (&a2[v12] != a3);
    if (v12)
    {
      v13 = &__src[v12];
      v14 = a3 - 8;
      while (v10 != v11)
      {
        __dst = (char *)(*a4)(*((_QWORD *)v13 - 1), *((_QWORD *)v10 - 1));
        if ((_DWORD)__dst)
          v15 = v10;
        else
          v15 = v13;
        if ((_DWORD)__dst)
          v10 -= 8;
        else
          v13 -= 8;
        *(_QWORD *)v14 = *((_QWORD *)v15 - 1);
        v14 -= 8;
        if (v13 == __src)
          return __dst;
      }
      v20 = 0;
      do
      {
        *(_QWORD *)&v14[v20] = *(_QWORD *)&v13[v20 - 8];
        v20 -= 8;
      }
      while (&v13[v20] != __src);
    }
  }
  return __dst;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>,std::__wrap_iter<XMP_Node **>>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<XMP_Node **>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((uint64_t)v9, a2, a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,IIOTag **,BOOL (*&)(IIOTag *,IIOTag *)>(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,IIOTag **,BOOL (*&)(IIOTag *,IIOTag *)>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **,IIOTag **>((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(XMP_Node *,XMP_Node *),XMP_Node **>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(IIOTag *,IIOTag *),IIOTag **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void XMPMeta::DumpObject()
{
  __assert_rtn("DumpObject", "XMPMeta.cpp", 1163, "outProc != 0");
}

void XMPMeta::CountArrayItems()
{
  __assert_rtn("CountArrayItems", "XMPMeta.cpp", 1241, "(schemaNS != 0) && (arrayName != 0)");
}

void XMPMeta::Clone()
{
  __assert_rtn("Clone", "XMPMeta.cpp", 1366, "this->tree.parent == 0");
}

void XMPMeta::SetErrorCallback()
{
  __assert_rtn("SetErrorCallback", "XMPMeta.cpp", 1477, "wrapperProc != 0");
}

void XMPMeta::ErrorCallbackInfo::CanNotify()
{
  __assert_rtn("CanNotify", "XMPMeta.cpp", 1509, "(this->clientProc == 0) || (this->wrapperProc != 0)");
}

_QWORD *AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x634E6F6465497420)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 136));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E6F6465497420, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INodeIterator_I.cpp", 0x28u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E6F6465497420, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INodeIterator_I.cpp", 0x2Eu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880FB240(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INodeIterator_I::GetInterfacePointerInternal((AdobeXMPCore_Int::INodeIterator_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INodeIterator_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x68, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INodeIterator_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INodeIterator_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer(AdobeXMPCore_Int::INodeIterator_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INodeIterator_I::getInterfacePointer((AdobeXMPCore_Int::INodeIterator_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getNode(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 136), (void (*)(char **__return_ptr, _QWORD *))0x30, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FB4E8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FB4CCLL);
}

void sub_1880FB5E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::getNodeType(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INodeIterator_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 136), 0, (uint64_t (*)(_QWORD *))0x28, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INodeIterator_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::INodeIterator_I::next(AdobeXMPCore_Int::INodeIterator_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INodeIterator_v1*,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 136), (void (*)(char **__return_ptr, _QWORD *))0x38, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INodeIterator_v1,AdobeXMPCore::INodeIterator_v1*,AdobeXMPCore::INodeIterator_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FB858(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FB83CLL);
}

void sub_1880FB954(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::INode_I::GetInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x634E6F6465202020)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 544));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x634E6F6465202020, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 0x2Du, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x634E6F6465202020, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 0x33u, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_1880FBA60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::INode_I::GetInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::INode_I::getInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x218, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 29, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::INode_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getInterfacePointer(AdobeXMPCore_Int::INode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::getInterfacePointer((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getParent(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0x38, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FBD0C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FBCF0);
}

void sub_1880FBE08(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getParent(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getParent((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 336)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getParentNodeType(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), 0, (uint64_t (*)(_QWORD *))0x30, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getParentNodeType(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getParentNodeType((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 328)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::setName(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x40, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 67, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v8 = a3;
  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a3);
  return v8(v9, a7, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::setName(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::setName((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 344)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getName(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0x48, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FC1E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FC1C8);
}

void sub_1880FC2E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getName(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getName((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::setNameSpace(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,char const*,unsigned long long>(a4, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x50, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 77, a2, a3);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::setNameSpace(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return AdobeXMPCore_Int::INode_I::setNameSpace((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 360)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::getNameSpace(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), (void (*)(char **__return_ptr, _QWORD *))0x58, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getNameSpace(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::getNameSpace((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 368)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getPath(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IPath_v1 *,AdobeXMPCore::IPath_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0x60, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IPath_v1 *,AdobeXMPCore::IPath_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6350617468202020, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FC500(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FC4E4);
}

void sub_1880FC5FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getPath(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getPath((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 376)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::qualifiersIterator(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0x70, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INodeIterator_v1 *,AdobeXMPCore::INodeIterator_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634E6F6465497420, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FC768(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FC74CLL);
}

void sub_1880FC864(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::qualifiersIterator(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::qualifiersIterator((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 384)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getQualifierNodeType(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x78, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 98, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;

  v11 = a4;
  *a1 = 0;
  v12 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  return v11(v12, a8, a9, a10, a11);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getQualifierNodeType(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INode_I::getQualifierNodeType((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 392)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INode_I::getQualifier(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x80, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 105, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v18;
  std::__shared_weak_count *v19;

  v10 = a3;
  *a1 = 0;
  v18 = 0;
  v19 = 0;
  v11 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v10 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  v10(&v18, v11, a7, a8, a9, a10);
  if (v18)
  {
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)] + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)]
                                                              + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v13 = 0;
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_1880FCB54(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FCB38);
}

void sub_1880FCC50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getQualifier(AdobeXMPCore_Int::INode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::INode_I::getQualifier((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 400)), a2, a3, a4, a5, a6);
}

void AdobeXMPCore_Int::INode_I::insertQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v5 = *(_QWORD *)(*(_QWORD *)this - 544);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v9);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(_QWORD *, uint64_t))0x88, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 109, (uint64_t)&v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1880FCD1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

void `virtual thunk to'AdobeXMPCore_Int::INode_I::insertQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  AdobeXMPCore_Int::INode_I::insertQualifier((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 408)), a2, a3);
}

uint64_t AdobeXMPCore_Int::INode_I::replaceQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 544);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v11);
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x90, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 114, (uint64_t)&v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FCECC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1880FCFEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FCFD0);
}

void sub_1880FD0E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::replaceQualifier(AdobeXMPCore_Int::INode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::INode_I::replaceQualifier((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 416)), a2, a3);
}

uint64_t AdobeXMPCore_Int::INode_I::removeQualifier(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x98, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 119, a2, a3, a4, a5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::removeQualifier(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return AdobeXMPCore_Int::INode_I::removeQualifier((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 424)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::INode_I::getNodeType(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0x28, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getNodeType(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::getNodeType((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 432)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isArrayItem(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), 0, (uint64_t (*)(_QWORD *))0xA0, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::isArrayItem(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::isArrayItem((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 440)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isQualifierNode(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0xA8, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::isQualifierNode(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::isQualifierNode((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 448)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::getIndex(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned long long,unsigned long long>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), 0, (uint64_t (*)(_QWORD *))0xB0, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::getIndex(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::getIndex((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 456)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasQualifiers(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0xB8, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::hasQualifiers(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::hasQualifiers((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 464)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasContent(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0xC0, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::hasContent(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::hasContent((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 472)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::isEmpty(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0xC8, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::isEmpty(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::isEmpty((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 480)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::hasChanged(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::INode_v1,unsigned int,BOOL>(a2, (uint64_t)a1 + *(_QWORD *)(*a1 - 544), 0, (uint64_t (*)(_QWORD *))0xD0, 1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::hasChanged(_QWORD *a1, _QWORD *a2)
{
  return AdobeXMPCore_Int::INode_I::hasChanged((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 488)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::clear(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,BOOL,BOOL>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0xE0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 155, a2 != 0, a3 != 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::INode_v1,BOOL,BOOL>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v8 = a3;
  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a3);
  return v8(v9, a7, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::clear(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::clear((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 496)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::clone(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,BOOL,BOOL>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x108, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/INode_I.cpp", 160, a2 != 0, a3 != 0);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::INode_v1*,AdobeXMPCore::INode_v1,BOOL,BOOL>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_1880FD8B4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FD898);
}

void sub_1880FD9B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::clone(AdobeXMPCore_Int::INode_I *this, int a2, int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::INode_I::clone((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 504)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToSimpleNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::ISimpleNode_v1 *,AdobeXMPCore::ISimpleNode_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0xE8, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::ISimpleNode_v1 *,AdobeXMPCore::ISimpleNode_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x63536D6C4E6F6465, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FDB1C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FDB00);
}

void sub_1880FDC18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::convertToSimpleNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToSimpleNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 512)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToStructureNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IStructureNode_v1 *,AdobeXMPCore::IStructureNode_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0xF0, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IStructureNode_v1 *,AdobeXMPCore::IStructureNode_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x635374724E6F6465, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FDD84(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FDD68);
}

void sub_1880FDE80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::convertToStructureNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToStructureNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 520)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToArrayNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IArrayNode_v1 *,AdobeXMPCore::IArrayNode_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0xF8, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IArrayNode_v1 *,AdobeXMPCore::IArrayNode_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634172724E6F6465, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FDFEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FDFD0);
}

void sub_1880FE0E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::convertToArrayNode(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToArrayNode((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 528)), a2);
}

uint64_t AdobeXMPCore_Int::INode_I::convertToMetadata(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 544), (void (*)(char **__return_ptr, _QWORD *))0x100, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::INode_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x634D657461646174, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1880FE254(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x1880FE238);
}

void sub_1880FE350(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::INode_I::convertToMetadata(AdobeXMPCore_Int::INode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::INode_I::convertToMetadata((AdobeXMPCore_Int::INode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 536)), a2);
}

std::string *SplitNameAndValue(uint64_t a1, uint64_t a2, std::string *a3)
{
  int v3;
  _BYTE *v4;
  unint64_t v5;
  const std::string::value_type *v6;
  int v7;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  const std::string::value_type *v12;
  const std::string::value_type *i;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (*v4 != 91 || (v6 = &v4[v5 - 2], v7 = *(unsigned __int8 *)v6, v4[v5 - 1] != 93))
    SplitNameAndValue();
  if (v5 < 6 || v7 != 34 && v7 != 39)
    SplitNameAndValue();
  v9 = 0;
  if (v4[1] == 63)
    v10 = v4 + 2;
  else
    v10 = v4 + 1;
  do
    v11 = v10[++v9];
  while (v11 != 61);
  MEMORY[0x18D761A20](a2, v10, v9);
  if (v10[v9 + 1] != v7)
    SplitNameAndValue();
  v12 = &v10[v9 + 2];
  std::string::erase(a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  std::string::reserve(a3, &v4[v5] - v10 - v9 - 4);
  for (i = v12; i < v6; ++i)
  {
    if (*(unsigned __int8 *)i == v7 && *((unsigned __int8 *)i + 1) == v7)
    {
      std::string::append(a3, v12, i + 1 - v12);
      v12 = i + 2;
      ++i;
    }
  }
  return std::string::append(a3, v12, i - v12);
}

uint64_t DeleteSubtree(char *__dst)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  char *v6;
  int64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)__dst;
  v3 = *(_QWORD *)(*(_QWORD *)__dst + 64);
  if ((*(_BYTE *)(*(_QWORD *)__dst + 8) & 0x20) != 0)
  {
    v6 = *(char **)(v3 + 104);
    v7 = v6 - (__dst + 8);
    if (v6 != __dst + 8)
      memmove(__dst, __dst + 8, v6 - (__dst + 8));
    *(_QWORD *)(v3 + 104) = &__dst[v7];
    v8 = *(_DWORD *)(v3 + 8);
    if ((v8 & 0x10) == 0)
      DeleteSubtree();
    if (*(char **)(v3 + 96) == &__dst[v7])
    {
      v8 ^= 0x10u;
      *(_DWORD *)(v3 + 8) = v8;
    }
    v9 = (_QWORD *)(v2 + 16);
    v10 = *(char *)(v2 + 39);
    if (v10 < 0)
    {
      if (*(_QWORD *)(v2 + 24) != 8)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v9 = (_QWORD *)*v9;
    }
    else if (v10 != 8)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    if (*v9 == 0x676E616C3A6C6D78)
    {
      if ((v8 & 0x40) == 0)
        DeleteSubtree();
      v11 = v8 ^ 0x40;
    }
    else
    {
      if (*v9 != 0x657079743A666472)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      if ((v8 & 0x80) == 0)
        DeleteSubtree();
      v11 = v8 ^ 0x80;
    }
    *(_DWORD *)(v3 + 8) = v11;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  v4 = *(char **)(v3 + 80);
  v5 = v4 - (__dst + 8);
  if (v4 != __dst + 8)
    memmove(__dst, __dst + 8, v4 - (__dst + 8));
  *(_QWORD *)(v3 + 80) = &__dst[v5];
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t LookupFieldSelector(const XMP_Node *a1, const char *__s, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *exception;
  uint64_t v20;

  v3 = *((_QWORD *)a1 + 9);
  v4 = *((_QWORD *)a1 + 10) - v3;
  if (v4)
  {
    v8 = 0;
    v20 = v4 >> 3;
    while (1)
    {
      v9 = *(_QWORD *)(v3 + 8 * v8);
      if (*(const XMP_Node **)(v9 + 64) != a1)
        LookupFieldSelector();
      if ((*(_BYTE *)(v9 + 9) & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 102;
        exception[1] = "Field selector must be used on array of struct";
        *((_BYTE *)exception + 16) = 0;
      }
      v10 = *(uint64_t **)(v9 + 72);
      v11 = *(_QWORD *)(v9 + 80) - (_QWORD)v10;
      if (v11)
        break;
LABEL_25:
      if (++v8 == v20)
        return 0xFFFFFFFFLL;
    }
    v12 = v11 >> 3;
    while (1)
    {
      v13 = *v10;
      if (*(_QWORD *)(*v10 + 64) != v9)
        LookupFieldSelector();
      v14 = (_QWORD *)(v13 + 16);
      v15 = strlen(__s);
      if (*(char *)(v13 + 39) < 0)
      {
        if (v15 != *(_QWORD *)(v13 + 24))
          goto LABEL_24;
        if (v15 == -1)
LABEL_30:
          std::string::__throw_out_of_range[abi:ne180100]();
        v14 = (_QWORD *)*v14;
      }
      else
      {
        if (v15 != *(unsigned __int8 *)(v13 + 39))
          goto LABEL_24;
        if (v15 == -1)
          goto LABEL_30;
      }
      if (!memcmp(v14, __s, v15))
      {
        v16 = (_QWORD *)(v13 + 40);
        v17 = strlen(a3);
        if (*(char *)(v13 + 63) < 0)
        {
          if (v17 == *(_QWORD *)(v13 + 48))
          {
            if (v17 == -1)
LABEL_31:
              std::string::__throw_out_of_range[abi:ne180100]();
            v16 = (_QWORD *)*v16;
LABEL_23:
            if (!memcmp(v16, a3, v17))
              return v8;
          }
        }
        else if (v17 == *(unsigned __int8 *)(v13 + 63))
        {
          if (v17 == -1)
            goto LABEL_31;
          goto LABEL_23;
        }
      }
LABEL_24:
      ++v10;
      if (!--v12)
        goto LABEL_25;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t LookupLangItem(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  size_t v16;
  unsigned __int8 *v17;
  const void **v18;
  unsigned __int8 *i;
  _QWORD *exception;

  if ((*(_BYTE *)(a1 + 9) & 2) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    exception[1] = "Language item must be used on array";
    *((_BYTE *)exception + 16) = 0;
  }
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80) - v3;
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v7 = *((_BYTE *)a2 + 23);
    if (v7 >= 0)
      v8 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v8 = a2[1];
    if (v7 >= 0)
      v9 = (unsigned __int8 *)a2;
    else
      v9 = *a2;
    do
    {
      v10 = *(_QWORD **)(v3 + 8 * v5);
      if (v10[8] != a1)
        LookupLangItem();
      v11 = (uint64_t *)v10[12];
      if (v11 != (uint64_t *)v10[13])
      {
        v12 = *v11;
        v13 = (_QWORD *)(v12 + 16);
        v14 = *(char *)(v12 + 39);
        if (v14 < 0)
        {
          if (*(_QWORD *)(v12 + 24) == 8)
          {
            v13 = (_QWORD *)*v13;
LABEL_16:
            if (*v13 == 0x676E616C3A6C6D78)
            {
              v15 = *(unsigned __int8 *)(v12 + 63);
              v16 = *(_QWORD *)(v12 + 48);
              v17 = (v15 & 0x80u) == 0
                  ? (unsigned __int8 *)*(unsigned __int8 *)(v12 + 63)
                  : *(unsigned __int8 **)(v12 + 48);
              if (v17 == v8)
              {
                v18 = (const void **)(v12 + 40);
                if ((v15 & 0x80) != 0)
                {
                  if (!memcmp(*v18, v9, v16))
                    return v5;
                }
                else
                {
                  if (!(_DWORD)v15)
                    return v5;
                  for (i = v9; *(unsigned __int8 *)v18 == *i; ++i)
                  {
                    v18 = (const void **)((char *)v18 + 1);
                    if (!--v15)
                      return v5;
                  }
                }
              }
            }
          }
        }
        else if (v14 == 8)
        {
          goto LABEL_16;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return 0xFFFFFFFFLL;
}

void CloneOffspring(const XMP_Node *a1, void **a2, _BOOL4 a3)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char **v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = *((_QWORD *)a1 + 9);
  v41 = *((_QWORD *)a1 + 10);
  v6 = *((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12);
  if (v6)
  {
    v7 = v6 >> 3;
    v8 = (char **)(a2 + 12);
    std::vector<_MPEntry *>::reserve(a2 + 12, v6 >> 3);
    for (i = 0; i != v7; ++i)
    {
      v10 = *(_QWORD *)(*((_QWORD *)a1 + 12) + 8 * i);
      if (a3)
      {
        if (*(char *)(v10 + 63) < 0)
        {
          if (!*(_QWORD *)(v10 + 48))
          {
LABEL_8:
            if (*(_QWORD *)(v10 + 72) == *(_QWORD *)(v10 + 80))
              continue;
          }
        }
        else if (!*(_BYTE *)(v10 + 63))
        {
          goto LABEL_8;
        }
      }
      v11 = operator new();
      XMP_Node::XMP_Node(v11, (uint64_t)a2, (__int128 *)(v10 + 16), (__int128 *)(v10 + 40), *(_DWORD *)(v10 + 8));
      CloneOffspring((const XMP_Node *)v10, (XMP_Node *)v11, a3);
      if (!a3)
        goto LABEL_15;
      if (*(char *)(v11 + 63) < 0)
      {
        if (*(_QWORD *)(v11 + 48))
          goto LABEL_15;
      }
      else if (*(_BYTE *)(v11 + 63))
      {
        goto LABEL_15;
      }
      if (*(_QWORD *)(v11 + 72) != *(_QWORD *)(v11 + 80))
      {
LABEL_15:
        v13 = (uint64_t *)a2[13];
        v12 = (uint64_t *)a2[14];
        if (v13 >= v12)
        {
          v15 = ((char *)v13 - *v8) >> 3;
          if ((unint64_t)(v15 + 1) >> 61)
LABEL_70:
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          v16 = (char *)v12 - *v8;
          v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1))
            v17 = v15 + 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(a2 + 14), v18);
          else
            v19 = 0;
          v20 = (uint64_t *)&v19[8 * v15];
          *v20 = v11;
          v14 = v20 + 1;
          v22 = (char *)a2[12];
          v21 = (char *)a2[13];
          if (v21 != v22)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v23;
            }
            while (v21 != v22);
            v21 = *v8;
          }
          a2[12] = v20;
          a2[13] = v14;
          a2[14] = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v13 = v11;
          v14 = v13 + 1;
        }
        a2[13] = v14;
        continue;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  if (v41 != v40)
  {
    v24 = (char **)(a2 + 9);
    std::vector<_MPEntry *>::reserve(a2 + 9, (v41 - v40) >> 3);
    for (j = 0; j != (v41 - v40) >> 3; ++j)
    {
      v26 = *(_QWORD *)(*((_QWORD *)a1 + 9) + 8 * j);
      if (a3)
      {
        if (*(char *)(v26 + 63) < 0)
        {
          if (!*(_QWORD *)(v26 + 48))
          {
LABEL_42:
            if (*(_QWORD *)(v26 + 72) == *(_QWORD *)(v26 + 80))
              continue;
          }
        }
        else if (!*(_BYTE *)(v26 + 63))
        {
          goto LABEL_42;
        }
      }
      v27 = operator new();
      XMP_Node::XMP_Node(v27, (uint64_t)a2, (__int128 *)(v26 + 16), (__int128 *)(v26 + 40), *(_DWORD *)(v26 + 8));
      CloneOffspring((const XMP_Node *)v26, (XMP_Node *)v27, a3);
      if (!a3)
        goto LABEL_49;
      if (*(char *)(v27 + 63) < 0)
      {
        if (*(_QWORD *)(v27 + 48))
          goto LABEL_49;
      }
      else if (*(_BYTE *)(v27 + 63))
      {
        goto LABEL_49;
      }
      if (*(_QWORD *)(v27 + 72) != *(_QWORD *)(v27 + 80))
      {
LABEL_49:
        v29 = (uint64_t *)a2[10];
        v28 = (uint64_t *)a2[11];
        if (v29 >= v28)
        {
          v31 = ((char *)v29 - *v24) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            goto LABEL_70;
          v32 = (char *)v28 - *v24;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(a2 + 11), v34);
          else
            v35 = 0;
          v36 = (uint64_t *)&v35[8 * v31];
          *v36 = v27;
          v30 = v36 + 1;
          v38 = (char *)a2[9];
          v37 = (char *)a2[10];
          if (v37 != v38)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *--v36 = v39;
            }
            while (v37 != v38);
            v37 = *v24;
          }
          a2[9] = v36;
          a2[10] = v30;
          a2[11] = &v35[8 * v34];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v29 = v27;
          v30 = v29 + 1;
        }
        a2[10] = v30;
        continue;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
  }
}

void sub_1880FECC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

uint64_t CloneSubtree(const XMP_Node *a1, XMP_Node *a2, _BOOL4 a3)
{
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = *((_DWORD *)a1 + 2);
  if (*((_QWORD *)a2 + 8))
  {
    if (v6 < 0)
      CloneSubtree();
    if ((*((_BYTE *)a2 + 9) & 1) != 0)
    {
      v7 = (char *)a1 + 16;
      if (*((char *)a1 + 39) < 0)
        v7 = *(char **)v7;
      if (FindChildNode((uint64_t)a2, v7, 0, 0))
        CloneSubtree();
    }
  }
  else
  {
    if ((v6 & 0x80000000) == 0)
      CloneSubtree();
    v8 = (char *)a1 + 16;
    if (*((char *)a1 + 39) < 0)
      v8 = *(char **)v8;
    if (FindSchemaNode((char **)a2, v8, 0, 0, 0, 0))
      CloneSubtree();
  }
  v9 = operator new();
  XMP_Node::XMP_Node(v9, (uint64_t)a2, (__int128 *)a1 + 1, (__int128 *)((char *)a1 + 40), *((_DWORD *)a1 + 2));
  CloneOffspring(a1, (void **)v9, a3);
  if (!a3)
    goto LABEL_18;
  if (*(char *)(v9 + 63) < 0)
  {
    if (*(_QWORD *)(v9 + 48))
      goto LABEL_18;
  }
  else if (*(_BYTE *)(v9 + 63))
  {
    goto LABEL_18;
  }
  if (*(_QWORD *)(v9 + 72) == *(_QWORD *)(v9 + 80))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    return 0;
  }
LABEL_18:
  v10 = *((_QWORD *)a2 + 11);
  v11 = (uint64_t *)*((_QWORD *)a2 + 10);
  if ((unint64_t)v11 >= v10)
  {
    v13 = *((_QWORD *)a2 + 9);
    v14 = ((uint64_t)v11 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v15 = v10 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a2 + 88, v17);
    else
      v18 = 0;
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v9;
    v12 = v19 + 1;
    v22 = (char *)*((_QWORD *)a2 + 9);
    v21 = (char *)*((_QWORD *)a2 + 10);
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)a2 + 9);
    }
    *((_QWORD *)a2 + 9) = v19;
    *((_QWORD *)a2 + 10) = v12;
    *((_QWORD *)a2 + 11) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v11 = v9;
    v12 = v11 + 1;
  }
  *((_QWORD *)a2 + 10) = v12;
  return v9;
}

void sub_1880FEED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

_QWORD *DeleteEmptySchema(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  if ((result[1] & 0x80000000) != 0)
  {
    v1 = (uint64_t)result;
    if (result[9] == result[10])
    {
      v2 = result[8];
      v4 = *(void ***)(v2 + 72);
      v3 = *(void ***)(v2 + 80);
      v5 = (char *)v3 - (char *)v4;
      if (v3 == v4)
LABEL_10:
        DeleteEmptySchema();
      v6 = v5 >> 3;
      if ((unint64_t)(v5 >> 3) <= 1)
        v6 = 1;
      v7 = v5 - 8;
      while (*v4 != result)
      {
        ++v4;
        v7 -= 8;
        if (!--v6)
          goto LABEL_10;
      }
      if (v4 + 1 != v3)
        result = memmove(v4, v4 + 1, v7);
      *(_QWORD *)(v2 + 80) = (char *)v4 + (v7 & 0xFFFFFFFFFFFFFFF8);
      if (v1)
        return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
  }
  return result;
}

void SplitNameAndValue()
{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 302, "(selStep.size() >= 6) && ((quote == '\"') || (quote == '\\''))");
}

{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 314, "*(partEnd+1) == quote");
}

{
  __assert_rtn("SplitNameAndValue", "XMPCore_Impl.cpp", 301, "(*partBegin == '[') && (*(valueEnd+1) == ']')");
}

void DeleteSubtree()
{
  __assert_rtn("DeleteSubtree", "XMPCore_Impl.cpp", 521, "rootParent->options & kXMP_PropHasQualifiers");
}

{
  __assert_rtn("DeleteSubtree", "XMPCore_Impl.cpp", 525, "rootParent->options & kXMP_PropHasLang");
}

{
  __assert_rtn("DeleteSubtree", "XMPCore_Impl.cpp", 528, "rootParent->options & kXMP_PropHasType");
}

void ExpandXPath()
{
  __assert_rtn("ExpandXPath", "XMPCore_Impl.cpp", 665, "(schemaNS != 0) && (propPath != 0) && (*propPath != 0) && (expandedXPath != 0)");
}

void FindSchemaNode()
{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 876, "(ptrPos == 0) || (schemaNode == 0) || (schemaNode == **ptrPos)");
}

{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 838, "currSchema->parent == xmpTree");
}

{
  __assert_rtn("FindSchemaNode", "XMPCore_Impl.cpp", 834, "xmpTree->parent == 0");
}

void FindChildNode()
{
  __assert_rtn("FindChildNode", "XMPCore_Impl.cpp", 927, "(ptrPos == 0) || (childNode == 0) || (childNode == **ptrPos)");
}

{
  __assert_rtn("FindChildNode", "XMPCore_Impl.cpp", 913, "currChild->parent == parent");
}

void FindQualifierNode()
{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 951, "*qualName != '?'");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 991, "(qualNode != 0) || (! createNodes)");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 990, "(ptrPos == 0) || (qualNode == 0) || (qualNode == **ptrPos)");
}

{
  __assert_rtn("FindQualifierNode", "XMPCore_Impl.cpp", 955, "currQual->parent == parent");
}

void LookupFieldSelector()
{
  __assert_rtn("LookupFieldSelector", "XMPCore_Impl.cpp", 1021, "currField->parent == currItem");
}

{
  __assert_rtn("LookupFieldSelector", "XMPCore_Impl.cpp", 1012, "currItem->parent == arrayNode");
}

void LookupLangItem()
{
  __assert_rtn("LookupLangItem", "XMPCore_Impl.cpp", 1052, "currItem->parent == arrayNode");
}

void FindNode()
{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1172, "(currNode != 0) || (! createNodes)");
}

{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1171, "(currNode == 0) || (currNode == *currPos)");
}

{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1111, "aliasPos != sRegisteredAliasMap->end()");
}

{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1131, "(arrayForm == 0) || (arrayForm & kXMP_PropValueIsArray)");
}

{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1132, "(arrayForm == 0) ? (aliasPos->second.size() == 2) : (aliasPos->second.size() == 3)");
}

{
  __assert_rtn("FindNode", "XMPCore_Impl.cpp", 1082, "(leafOptions == 0) || createNodes");
}

void FollowXPathStep()
{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 404, "(kXMP_StructFieldStep <= stepKind) && (stepKind <= kXMP_FieldSelectorStep)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 449, "parentNode->options & kXMP_PropArrayIsAltText");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 476, "(ptrPos == 0) || (nextNode == 0) || (nextNode == **ptrPos)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 477, "(nextNode != 0) || (! createNodes)");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 450, "(stepNum == 2) && (nextStep.step == \"[?xml:lang=\\\"x-default\\\"]\")");
}

{
  __assert_rtn("FindIndexedItem", "XMPCore_Impl.cpp", 259, "('0' <= indexStep[chNum]) && (indexStep[chNum] <= '9')");
}

{
  __assert_rtn("FindIndexedItem", "XMPCore_Impl.cpp", 256, "(chLim >= 2) && (indexStep[0] == '[') && (indexStep[chLim] == ']')");
}

{
  __assert_rtn("FollowXPathStep", "XMPCore_Impl.cpp", 413, "*qualStep == '?'");
}

void CloneSubtree()
{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1246, "origRoot->options & ((XMP_OptionBits)0x80000000UL)");
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1247, "FindSchemaNode(const_cast<XMP_Node*>(cloneParent), origRoot->name.c_str(), false, 0) == 0");
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1251, "::FindChildNode(const_cast<XMP_Node*>(cloneParent), origRoot->name.c_str(), false, 0) == 0");
}

{
  __assert_rtn("CloneSubtree", "XMPCore_Impl.cpp", 1249, "! (origRoot->options & ((XMP_OptionBits)0x80000000UL))");
}

void DeleteEmptySchema()
{
  __assert_rtn("DeleteEmptySchema", "XMPCore_Impl.cpp", 1350, "schemaNum < schemaLim");
}

void NormalizeLangArray()
{
  __assert_rtn("NormalizeLangArray", "XMPCore_Impl.cpp", 1423, "(((array->options) & kXMP_PropArrayIsAltText) != 0)");
}

void DetectAltText()
{
  __assert_rtn("DetectAltText", "XMPCore_Impl.cpp", 1466, "(((xmpParent->options) & kXMP_PropArrayIsAlternate) != 0)");
}

void MoveExplicitAliases(XMP_Node *a1, char a2, XMPMeta::ErrorCallbackInfo *a3)
{
  uint64_t v3;
  unint64_t v5;
  XMP_Node *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t SchemaNode;
  XMP_Node *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t ChildNode;
  uint64_t v22;
  uint64_t v23;
  XMP_Node *v24;
  uint64_t v25;
  XMP_Node *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  XMP_Node **v35;
  XMP_Node *v36;
  XMP_Node *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  XMP_Node **v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  XMP_Node *v48;
  uint64_t v49;
  XMP_Node *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  XMP_Node **v67;
  char *v68;
  char *v69;
  XMP_Node *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  *((_DWORD *)a1 + 2) ^= 0x20000u;
  v3 = *((_QWORD *)a1 + 9);
  if (*((_QWORD *)a1 + 10) == v3)
    return;
  v5 = 0;
  do
  {
    v6 = *(XMP_Node **)(v3 + 8 * v5);
    v7 = *((_QWORD *)v6 + 9);
    if (*((_QWORD *)v6 + 10) == v7)
      goto LABEL_75;
    v78 = v5;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      v10 = *(_DWORD *)(v9 + 8);
      if ((v10 & 0x10000) == 0)
      {
        ++v8;
        goto LABEL_72;
      }
      *(_DWORD *)(v9 + 8) = v10 ^ 0x10000;
      v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::find<std::string>(sRegisteredAliasMap, (const void **)(v9 + 16));
      if (sRegisteredAliasMap + 8 == v11)
        MoveExplicitAliases();
      v12 = v11;
      v13 = *(_QWORD *)(v11 + 56);
      if (*(char *)(v13 + 23) < 0)
        v14 = *(char **)v13;
      else
        v14 = *(char **)(v11 + 56);
      v15 = *(_DWORD *)(v13 + 56);
      SchemaNode = FindSchemaNode((char **)a1, v14, 1, 0, 0, 0);
      v17 = (XMP_Node *)SchemaNode;
      v18 = *(_DWORD *)(SchemaNode + 8);
      if ((v18 & 0x8000) != 0)
        *(_DWORD *)(SchemaNode + 8) = v18 ^ 0x8000;
      v19 = *(_QWORD *)(v12 + 56);
      v20 = (char *)(v19 + 32);
      if (*(char *)(v19 + 55) < 0)
        v20 = *(char **)v20;
      ChildNode = FindChildNode(SchemaNode, v20, 0, 0);
      v22 = *(_QWORD *)(v12 + 56);
      v23 = *(_QWORD *)(v12 + 64) - v22;
      if (ChildNode)
      {
        v24 = (XMP_Node *)ChildNode;
        if (v23 == 64)
        {
          if ((a2 & 4) != 0)
          {
            v25 = v9;
            v26 = v24;
            goto LABEL_36;
          }
        }
        else
        {
          if ((v15 & 0x1000) != 0)
          {
            v43 = LookupLangItem(ChildNode, (unsigned __int8 **)xdefaultName);
            if (v43 == -1)
              goto LABEL_40;
            v35 = (XMP_Node **)(*((_QWORD *)v24 + 9) + 8 * v43);
          }
          else
          {
            v35 = *(XMP_Node ***)(ChildNode + 72);
            if (v35 == *(XMP_Node ***)(ChildNode + 80))
              goto LABEL_40;
          }
          v26 = *v35;
          if (!*v35)
          {
LABEL_40:
            v48 = v6;
            v49 = v8;
            v50 = v24;
LABEL_71:
            TransplantArrayItemAlias(v48, v49, v50, a3);
            goto LABEL_72;
          }
          if ((a2 & 4) != 0)
          {
            v25 = v9;
LABEL_36:
            CompareAliasedSubtrees(v25, v26, a3, 1);
          }
        }
        v44 = *((_QWORD *)v6 + 9);
        v45 = *((_QWORD *)v6 + 10);
        v46 = v44 + 8 * v8;
        v47 = v45 - (v46 + 8);
        if (v45 != v46 + 8)
          memmove((void *)(v44 + 8 * v8), (const void *)(v46 + 8), v45 - (v46 + 8));
        *((_QWORD *)v6 + 10) = v46 + v47;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        goto LABEL_72;
      }
      if (v23 != 64)
      {
        v36 = (XMP_Node *)operator new();
        v37 = v36;
        v38 = *(_QWORD *)(v12 + 56);
        v39 = (char *)(v38 + 32);
        if (*(char *)(v38 + 55) < 0)
          v39 = *(char **)v39;
        XMP_Node::XMP_Node(v36, v17, v39, v15 & 0x1E00);
        v40 = *((_QWORD *)v17 + 11);
        v41 = (XMP_Node **)*((_QWORD *)v17 + 10);
        if ((unint64_t)v41 >= v40)
        {
          v57 = *((_QWORD *)v17 + 9);
          v58 = ((uint64_t)v41 - v57) >> 3;
          if ((unint64_t)(v58 + 1) >> 61)
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          v59 = v40 - v57;
          v60 = v59 >> 2;
          if (v59 >> 2 <= (unint64_t)(v58 + 1))
            v60 = v58 + 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)v17 + 88, v61);
          else
            v62 = 0;
          v67 = (XMP_Node **)&v62[8 * v58];
          *v67 = v37;
          v42 = v67 + 1;
          v69 = (char *)*((_QWORD *)v17 + 9);
          v68 = (char *)*((_QWORD *)v17 + 10);
          if (v68 != v69)
          {
            do
            {
              v70 = (XMP_Node *)*((_QWORD *)v68 - 1);
              v68 -= 8;
              *--v67 = v70;
            }
            while (v68 != v69);
            v68 = (char *)*((_QWORD *)v17 + 9);
          }
          *((_QWORD *)v17 + 9) = v67;
          *((_QWORD *)v17 + 10) = v42;
          *((_QWORD *)v17 + 11) = &v62[8 * v61];
          if (v68)
            operator delete(v68);
        }
        else
        {
          *v41 = v37;
          v42 = v41 + 1;
        }
        *((_QWORD *)v17 + 10) = v42;
        v48 = v6;
        v49 = v8;
        v50 = v37;
        goto LABEL_71;
      }
      v27 = *((_QWORD *)v6 + 9);
      v28 = (char *)*((_QWORD *)v6 + 10);
      v29 = (_QWORD *)(v27 + 8 * v8);
      v30 = *v29;
      v31 = v28 - (char *)(v29 + 1);
      if (v28 != (char *)(v29 + 1))
        memmove((void *)(v27 + 8 * v8), v29 + 1, v28 - (char *)(v29 + 1));
      *((_QWORD *)v6 + 10) = (char *)v29 + v31;
      std::string::operator=((std::string *)(v30 + 16), (const std::string *)(v22 + 32));
      *(_QWORD *)(v30 + 64) = v17;
      v32 = *((_QWORD *)v17 + 11);
      v33 = (_QWORD *)*((_QWORD *)v17 + 10);
      if ((unint64_t)v33 >= v32)
      {
        v51 = *((_QWORD *)v17 + 9);
        v52 = ((uint64_t)v33 - v51) >> 3;
        if ((unint64_t)(v52 + 1) >> 61)
          std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
        v53 = v32 - v51;
        v54 = v53 >> 2;
        if (v53 >> 2 <= (unint64_t)(v52 + 1))
          v54 = v52 + 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
          v55 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)v17 + 88, v55);
        else
          v56 = 0;
        v63 = &v56[8 * v52];
        *(_QWORD *)v63 = v30;
        v34 = v63 + 8;
        v65 = (char *)*((_QWORD *)v17 + 9);
        v64 = (char *)*((_QWORD *)v17 + 10);
        if (v64 != v65)
        {
          do
          {
            v66 = *((_QWORD *)v64 - 1);
            v64 -= 8;
            *((_QWORD *)v63 - 1) = v66;
            v63 -= 8;
          }
          while (v64 != v65);
          v64 = (char *)*((_QWORD *)v17 + 9);
        }
        *((_QWORD *)v17 + 9) = v63;
        *((_QWORD *)v17 + 10) = v34;
        *((_QWORD *)v17 + 11) = &v56[8 * v55];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v33 = v30;
        v34 = v33 + 1;
      }
      *((_QWORD *)v17 + 10) = v34;
LABEL_72:
      v7 = *((_QWORD *)v6 + 9);
      v71 = *((_QWORD *)v6 + 10);
    }
    while (v8 < (v71 - v7) >> 3);
    v5 = v78;
    if (v71 != v7)
    {
      v5 = v78 + 1;
      v72 = *((_QWORD *)a1 + 10);
      goto LABEL_80;
    }
LABEL_75:
    v73 = *((_QWORD *)a1 + 9);
    v74 = *(_QWORD *)(v73 + 8 * v5);
    if (v74)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      v73 = *((_QWORD *)a1 + 9);
    }
    v75 = v73 + 8 * v5;
    v76 = *((_QWORD *)a1 + 10);
    v77 = v76 - (v75 + 8);
    if (v76 != v75 + 8)
      memmove((void *)v75, (const void *)(v75 + 8), v76 - (v75 + 8));
    v72 = v75 + v77;
    *((_QWORD *)a1 + 10) = v75 + v77;
LABEL_80:
    v3 = *((_QWORD *)a1 + 9);
  }
  while (v5 < (v72 - v3) >> 3);
}

void sub_1880FFA88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

void TransplantArrayItemAlias(XMP_Node *a1, uint64_t a2, XMP_Node *a3, XMPMeta::ErrorCallbackInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  XMP_Node *v10;
  XMP_Node **v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;

  v7 = *((_QWORD *)a1 + 9);
  v8 = *(_QWORD *)(v7 + 8 * a2);
  v39 = v8;
  if ((*((_BYTE *)a3 + 9) & 0x10) != 0)
  {
    v9 = *(_DWORD *)(v8 + 8);
    if ((v9 & 0x40) != 0)
    {
      v38[0] = 203;
      v38[1] = "Alias to x-default already has a language qualifier";
      v38[2] = 0;
      GenericErrorCallback::NotifyClient((uint64_t)a4, 1, (unsigned int *)v38, 0);
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_DWORD *)(v8 + 8) = v9 | 0x50;
    v10 = (XMP_Node *)operator new();
    XMP_Node::XMP_Node(v10, (XMP_Node *)v8, "xml:lang", "x-default", 32);
    v38[0] = v10;
    v11 = *(XMP_Node ***)(v8 + 96);
    if (v11 == *(XMP_Node ***)(v8 + 104))
    {
      v12 = *(_QWORD *)(v8 + 112);
      if ((unint64_t)v11 >= v12)
      {
        v14 = v12 - (_QWORD)v11;
        v15 = v14 >> 2;
        if ((unint64_t)(v14 >> 2) <= 1)
          v15 = 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v8 + 112, v16);
        v19 = &v17[v18];
        *v17 = v10;
        v13 = v17 + 1;
        v21 = *(char **)(v8 + 96);
        v20 = *(char **)(v8 + 104);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v17 = v22;
          }
          while (v20 != v21);
          v20 = *(char **)(v8 + 96);
        }
        *(_QWORD *)(v8 + 96) = v17;
        *(_QWORD *)(v8 + 104) = v13;
        *(_QWORD *)(v8 + 112) = v19;
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = v10;
        v13 = v11 + 1;
      }
      *(_QWORD *)(v8 + 104) = v13;
    }
    else
    {
      std::vector<XMP_Node *>::insert(v8 + 96, *(char **)(v8 + 96), (char *)v38);
    }
    v7 = *((_QWORD *)a1 + 9);
  }
  v23 = v7 + 8 * a2;
  v24 = *((_QWORD *)a1 + 10);
  v25 = v24 - (v23 + 8);
  if (v24 != v23 + 8)
    memmove((void *)v23, (const void *)(v23 + 8), v24 - (v23 + 8));
  *((_QWORD *)a1 + 10) = v23 + v25;
  MEMORY[0x18D761A14](v8 + 16, "[]");
  *(_QWORD *)(v8 + 64) = a3;
  v26 = (_QWORD *)*((_QWORD *)a3 + 9);
  if (v26 == *((_QWORD **)a3 + 10))
  {
    v27 = *((_QWORD *)a3 + 11);
    if ((unint64_t)v26 >= v27)
    {
      v29 = v27 - (_QWORD)v26;
      v30 = v29 >> 2;
      if ((unint64_t)(v29 >> 2) <= 1)
        v30 = 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v31 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)a3 + 88, v31);
      v34 = &v32[v33];
      *v32 = v8;
      v28 = v32 + 1;
      v36 = (char *)*((_QWORD *)a3 + 9);
      v35 = (char *)*((_QWORD *)a3 + 10);
      if (v35 != v36)
      {
        do
        {
          v37 = *((_QWORD *)v35 - 1);
          v35 -= 8;
          *--v32 = v37;
        }
        while (v35 != v36);
        v35 = (char *)*((_QWORD *)a3 + 9);
      }
      *((_QWORD *)a3 + 9) = v32;
      *((_QWORD *)a3 + 10) = v28;
      *((_QWORD *)a3 + 11) = v34;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *v26 = v8;
      v28 = v26 + 1;
    }
    *((_QWORD *)a3 + 10) = v28;
  }
  else
  {
    std::vector<XMP_Node *>::insert((uint64_t)a3 + 72, *((char **)a3 + 9), (char *)&v39);
  }
}

void sub_1880FFD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C407D34617ELL);
  _Unwind_Resume(a1);
}

uint64_t CompareAliasedSubtrees(uint64_t result, XMP_Node *a2, XMPMeta::ErrorCallbackInfo *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;

  v7 = result;
  v8 = *(unsigned __int8 *)(result + 63);
  if ((v8 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(result + 63);
  else
    v9 = *(_QWORD *)(result + 48);
  v10 = *((unsigned __int8 *)a2 + 63);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a2 + 6);
  if (v9 == v10)
  {
    v12 = (const void **)(result + 40);
    if (v11 >= 0)
      v13 = (unsigned __int8 *)a2 + 40;
    else
      v13 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
    if ((v8 & 0x80) == 0)
    {
      if (*(_BYTE *)(result + 63))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8)
            goto LABEL_16;
        }
        goto LABEL_17;
      }
LABEL_16:
      if (*(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 72) == *((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9))
        goto LABEL_18;
      goto LABEL_17;
    }
    result = memcmp(*v12, v13, *(_QWORD *)(result + 48));
    if (!(_DWORD)result)
      goto LABEL_16;
  }
LABEL_17:
  v29 = "Mismatch between alias and base nodes";
  v30 = 0;
  v28 = 203;
  result = GenericErrorCallback::NotifyClient((uint64_t)a3, 1, (unsigned int *)&v28, 0);
LABEL_18:
  if ((a4 & 1) != 0)
    goto LABEL_37;
  v14 = *(unsigned __int8 *)(v7 + 39);
  if ((v14 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v7 + 39);
  else
    v15 = *(_QWORD *)(v7 + 24);
  v16 = *((unsigned __int8 *)a2 + 39);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 3);
  if (v15 != v16)
    goto LABEL_36;
  v18 = (const void **)(v7 + 16);
  if (v17 >= 0)
    v19 = (unsigned __int8 *)a2 + 16;
  else
    v19 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  if ((v14 & 0x80) != 0)
  {
    result = memcmp(*v18, v19, *(_QWORD *)(v7 + 24));
    if ((_DWORD)result)
    {
LABEL_36:
      v29 = "Mismatch between alias and base nodes";
      v30 = 0;
      v28 = 203;
      result = GenericErrorCallback::NotifyClient((uint64_t)a3, 1, (unsigned int *)&v28, 0);
      goto LABEL_37;
    }
  }
  else if (*(_BYTE *)(v7 + 39))
  {
    while (*(unsigned __int8 *)v18 == *v19)
    {
      v18 = (const void **)((char *)v18 + 1);
      ++v19;
      if (!--v14)
        goto LABEL_34;
    }
    goto LABEL_36;
  }
LABEL_34:
  if (*(_DWORD *)(v7 + 8) != *((_DWORD *)a2 + 2)
    || *(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96) != *((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12))
  {
    goto LABEL_36;
  }
LABEL_37:
  v20 = *(_QWORD *)(v7 + 80) - *(_QWORD *)(v7 + 72);
  if (v20)
  {
    v21 = 0;
    v22 = v20 >> 3;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    do
    {
      result = CompareAliasedSubtrees(*(XMP_Node **)(*(_QWORD *)(v7 + 72) + 8 * v21), *(XMP_Node **)(*((_QWORD *)a2 + 9) + 8 * v21), a3, 0);
      ++v21;
    }
    while (v23 != v21);
  }
  v24 = *(_QWORD *)(v7 + 104) - *(_QWORD *)(v7 + 96);
  if (v24)
  {
    v25 = 0;
    v26 = v24 >> 3;
    if (v26 <= 1)
      v27 = 1;
    else
      v27 = v26;
    do
    {
      result = CompareAliasedSubtrees(*(XMP_Node **)(*(_QWORD *)(v7 + 96) + 8 * v25), *(XMP_Node **)(*((_QWORD *)a2 + 12) + 8 * v25), a3, 0);
      ++v25;
    }
    while (v27 != v25);
  }
  return result;
}

uint64_t PickBestRoot(const XML_Node *a1, unsigned int a2)
{
  const XML_Node ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const XML_Node *v8;
  unint64_t v9;
  char *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unsigned int *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  const XML_Node **i;

  v5 = *((_QWORD *)a1 + 16);
  v4 = *((_QWORD *)a1 + 17);
  v3 = (const XML_Node ***)((char *)a1 + 128);
  v6 = v4 - v5;
  if (v4 == v5)
    goto LABEL_23;
  v4 = *((_QWORD *)a1 + 16);
LABEL_3:
  v7 = 0;
  v8 = a1;
  v9 = v6 >> 3;
  if (v9 <= 1)
    v9 = 1;
  do
  {
    a1 = *(const XML_Node **)(v4 + 8 * v7);
    if (*((_BYTE *)a1 + 8) != 1)
      goto LABEL_19;
    v10 = (char *)a1 + 40;
    v11 = *((char *)a1 + 63);
    if (v11 < 0)
    {
      if (*((_QWORD *)a1 + 6) != 9)
        goto LABEL_19;
      v10 = *(char **)v10;
    }
    else if (v11 != 9)
    {
      goto LABEL_19;
    }
    v12 = *(_QWORD *)v10 == 0x74656D706D783A78 && v10[8] == 97;
    if (v12
      || ((v13 = *(_QWORD *)v10, v14 = v10[8], v13 == 0x74656D7061783A78)
        ? (v15 = v14 == 97)
        : (v15 = 0),
          v15))
    {
      a2 = 0;
      v4 = *((_QWORD *)a1 + 16);
      v16 = *((_QWORD *)a1 + 17);
      v3 = (const XML_Node ***)((char *)a1 + 128);
      v6 = v16 - v4;
      if (v16 == v4)
      {
LABEL_24:
        v17 = (v16 - v4) >> 3;
        if (v16 == v4)
          goto LABEL_44;
        v18 = 0;
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = (v16 - v4) >> 3;
        while (2)
        {
          result = *(_QWORD *)(v4 + 8 * v18);
          if (*(_BYTE *)(result + 8) == 1)
          {
            v21 = (unsigned int *)(result + 40);
            v22 = *(char *)(result + 63);
            if (v22 < 0)
            {
              if (*(_QWORD *)(result + 48) != 7)
                goto LABEL_41;
              v21 = *(unsigned int **)v21;
            }
            else if (v22 != 7)
            {
              goto LABEL_41;
            }
            v23 = bswap32(*v21);
            v24 = 1919182394;
            if (v23 == 1919182394
              && (v23 = bswap32(*(unsigned int *)((char *)v21 + 3)), v24 = 978469958, v23 == 978469958))
            {
              v25 = 0;
            }
            else if (v23 < v24)
            {
              v25 = -1;
            }
            else
            {
              v25 = 1;
            }
            if (!v25)
              return result;
          }
LABEL_41:
          if (v19 == ++v18)
            goto LABEL_44;
          continue;
        }
      }
      goto LABEL_3;
    }
LABEL_19:
    ++v7;
  }
  while (v9 != v7);
  a1 = v8;
LABEL_23:
  v16 = *((_QWORD *)a1 + 17);
  if ((a2 & 1) == 0)
    goto LABEL_24;
  v17 = (v16 - v4) >> 3;
LABEL_44:
  if (v16 == v4)
    return 0;
  if (v17 <= 1)
    v26 = 1;
  else
    v26 = v17;
  for (i = *v3; ; ++i)
  {
    result = PickBestRoot(*i, a2);
    if (result)
      break;
    if (!--v26)
      return 0;
  }
  return result;
}

void MoveExplicitAliases()
{
  __assert_rtn("MoveExplicitAliases", "XMPMeta-Parse.cpp", 382, "aliasPos != sRegisteredAliasMap->end()");
}

void XMPMeta::ProcessXMLBuffer()
{
  __assert_rtn("ProcessXMLBuffer", "XMPMeta-Parse.cpp", 1170, "! lastClientCall");
}

{
  __assert_rtn("ProcessXMLBuffer", "XMPMeta-Parse.cpp", 1151, "! lastClientCall");
}

void ProcessUTF8Portion()
{
  __assert_rtn("ProcessUTF8Portion", "XMPMeta-Parse.cpp", 1024, "spanEnd == bufEnd");
}

{
  __assert_rtn("ProcessUTF8Portion", "XMPMeta-Parse.cpp", 1000, "*spanEnd == '&'");
}

void XMPMeta::ProcessXMLTree()
{
  __assert_rtn("FindRootNode", "XMPMeta-Parse.cpp", 164, "rootNode->name == \"rdf:RDF\"");
}

BOOL PSD_CheckFormat(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  unsigned __int16 v7;

  if (a1 != 1347634208)
    PSD_CheckFormat();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a3 + 16))(a3, 0, 0);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  result = 0;
  if (v4 >= 34)
  {
    v6 = 0;
    (**(void (***)(uint64_t, int *, uint64_t, uint64_t))a3)(a3, &v6, 4, 1);
    result = 0;
    if (v6 == 1397768760)
    {
      v7 = 0;
      (**(void (***)(uint64_t, unsigned __int16 *, uint64_t, uint64_t))a3)(a3, &v7, 2, 1);
      return (unsigned __int16)((bswap32(v7) >> 16) - 1) < 2u;
    }
  }
  return result;
}

uint64_t PSD_MetaHandlerCTor(XMPFiles *a1)
{
  uint64_t v2;

  v2 = operator new();
  XMPFileHandler::XMPFileHandler((XMPFileHandler *)v2);
  *(_QWORD *)(v2 + 104) = &off_1E1BB0BD8;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = v2 + 144;
  *(_BYTE *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(_BYTE *)(v2 + 116) = 0;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_QWORD *)v2 = &off_1E1BB0B60;
  *(_QWORD *)(v2 + 8) = a1;
  *(_DWORD *)(v2 + 16) = 8831;
  *(_BYTE *)(v2 + 20) = 0;
  return v2;
}

void sub_1881003E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B3C4017221864);
  _Unwind_Resume(a1);
}

void PSD_MetaHandler::~PSD_MetaHandler(PSD_MetaHandler *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E1BB0B60;
  v2 = *((_QWORD *)this + 23);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = *((_QWORD *)this + 24);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 248))(v3);
  PSIR_FileWriter::~PSIR_FileWriter((PSD_MetaHandler *)((char *)this + 104));
  XMPFileHandler::~XMPFileHandler((void **)this);
}

{
  PSD_MetaHandler::~PSD_MetaHandler(this);
  JUMPOUT(0x18D761C30);
}

uint64_t PSD_MetaHandler::CacheFileData(int32x2_t *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int32 v9;
  int v10;
  _QWORD *exception;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[22];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (this[2].i8[5])
    PSD_MetaHandler::CacheFileData();
  v2 = (_QWORD *)this[1];
  v3 = v2[29];
  v4 = (unsigned int (*)(_QWORD))v2[34];
  if (v4 && v4(v2[35]))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 12;
    exception[1] = "PSD_MetaHandler::CacheFileData - User abort";
    *((_BYTE *)exception + 16) = 0;
  }
  v16 = 0;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)&v17[14] = 0;
  *(_QWORD *)&v17[8] = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0, 0);
  result = (**(uint64_t (***)(uint64_t, uint64_t *, uint64_t, _QWORD))v3)(v3, &v16, 30, 0);
  if ((_DWORD)result == 30)
  {
    this[25] = vrev64_s32((int32x2_t)vrev32_s8(*(int8x8_t *)&v17[6]));
    v6 = bswap32(*(unsigned int *)&v17[18]) + 30;
    if (v6 > (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3))
    {
      v12 = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)v12 = 208;
      v12[1] = "Invalid PSD chunk length";
      *((_BYTE *)v12 + 16) = 0;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, v6, 0);
    if (result == v6)
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 16))(v3, 0, 1);
      if (v7 - result >= 4)
      {
        LODWORD(v13) = 0;
        (**(void (***)(uint64_t, uint64_t *, uint64_t, uint64_t))v3)(v3, &v13, 4, 1);
        v8 = bswap32(v13);
        PSIR_FileWriter::ParseFileResources(&this[13], v3, v8);
        v13 = 0;
        v14 = 0;
        v15 = 0;
        result = PSIR_FileWriter::GetImgRsrc((uint64_t)&this[13], 0x424u, (uint64_t)&v13);
        v9 = HIDWORD(v13);
        if (v8 >= HIDWORD(v13))
          v10 = result;
        else
          v10 = 0;
        if (v10 == 1)
        {
          this[4] = (int32x2_t)v15;
          this[5].i32[0] = v9;
          this[5].i32[1] = 0;
          this[6].i16[0] = 257;
          result = MEMORY[0x18D761A20](&this[7], v14);
          this[2].i8[5] = 1;
        }
      }
    }
  }
  return result;
}

uint64_t PSD_MetaHandler::ProcessXMP(PSD_MetaHandler *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  IPTC_Manager *v9;
  uint64_t (**v10)(char *, uint64_t, void **);
  int v11;
  int v12;
  int v13;
  const void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unsigned __int8 v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  unsigned int v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  PhotoDataUtils *v32;
  uint64_t v33;

  *((_BYTE *)this + 22) = 1;
  v2 = *((_QWORD *)this + 1);
  if (!v2 || (*(_BYTE *)(v2 + 240) & 2) != 0)
  {
    v7 = (_QWORD *)operator new();
    v7[3] = 0;
    v7[4] = 0;
    v7[2] = 0;
    *(_QWORD *)((char *)v7 + 39) = 0;
    *v7 = &off_1E1BABE18;
    v7[1] = v7 + 2;
    *((_QWORD *)this + 23) = v7;
    v4 = operator new();
    TIFF_FileWriter::TIFF_FileWriter((TIFF_FileWriter *)v4);
  }
  else
  {
    v3 = (_QWORD *)operator new();
    v3[3] = 0;
    v3[4] = 0;
    v3[2] = 0;
    *(_QWORD *)((char *)v3 + 39) = 0;
    *v3 = &off_1E1BABDD8;
    v3[1] = v3 + 2;
    *((_QWORD *)this + 23) = v3;
    v4 = operator new();
    TIFF_Manager::TIFF_Manager((TIFF_Manager *)v4);
    *(_QWORD *)v4 = off_1E1BB1298;
    *(_BYTE *)(v4 + 88) = 0;
    *(_QWORD *)(v4 + 96) = 0;
    *(_DWORD *)(v4 + 104) = 0;
    v5 = 112;
    do
    {
      v6 = v4 + v5;
      *(_WORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v5 += 16;
    }
    while (v6 + 16 != v4 + 192);
    *(_BYTE *)(v4 + 74) = 1;
  }
  *((_QWORD *)this + 24) = v4;
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 256))(v4, v8 + 296);
    v4 = *((_QWORD *)this + 24);
  }
  v9 = (IPTC_Manager *)*((_QWORD *)this + 23);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v10 = (uint64_t (**)(char *, uint64_t, void **))*((_QWORD *)this + 13);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v11 = (*v10)((char *)this + 104, 1028, &v31);
  v12 = (**((uint64_t (***)(char *, uint64_t, uint64_t *))this + 13))((char *)this + 104, 1058, &v28);
  if (v12)
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 200))(v4, v29, HIDWORD(v28), 1, 0);
  if (v11)
  {
    v25 = 0;
    *(_QWORD *)v26 = 0;
    v27 = 0;
    v13 = (**((uint64_t (***)(char *, uint64_t, uint64_t *))this + 13))((char *)this + 104, 1061, &v25);
    v15 = -1;
    if (HIDWORD(v25) == 16 && v13)
      v15 = PhotoDataUtils::CheckIPTCDigest(v32, (const void *)HIDWORD(v31), *(_QWORD **)v26, v14);
  }
  else
  {
    v15 = 1;
  }
  v16 = *((unsigned __int8 *)this + 79);
  if (*((char *)this + 79) < 0)
    v17 = *((_QWORD *)this + 8);
  else
    v17 = *((unsigned __int8 *)this + 79);
  v18 = *((_BYTE *)this + 21);
  if (v17)
  {
    if (!*((_BYTE *)this + 21))
      PSD_MetaHandler::ProcessXMP();
    if ((v16 & 0x80) != 0)
    {
      v19 = (char *)*((_QWORD *)this + 7);
      v16 = *((_QWORD *)this + 8);
    }
    else
    {
      v19 = (char *)this + 56;
    }
    TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v19, v16, 0);
  }
  if (HIDWORD(v31))
    IPTC_Manager::ParseMemoryDataSets(v9, (char *)v32, SHIDWORD(v31), 1);
  if (v17)
    v20 = 0;
  else
    v20 = v11;
  if ((v20 & (v15 == 1)) != 0)
    v21 = 0xFFFFFFFFLL;
  else
    v21 = v15;
  v22 = v18 | 2;
  if (!v11)
    v22 = v18;
  if (v12)
    v23 = v22 | 4;
  else
    v23 = v22;
  result = ImportPhotoData(v4, v9, (unsigned int (***)(_QWORD, uint64_t, void **))this + 13, v21, (uint64_t)this + 80, v23);
  *((_BYTE *)this + 21) = 1;
  return result;
}

void sub_1881009D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D761C30](v1, 0x10B1C40DDCB30DBLL);
  _Unwind_Resume(a1);
}

void PSD_MetaHandler::UpdateFile(PSD_MetaHandler *this, int a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  PSIR_FileWriter *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  int IsLegacyChanged;
  uint64_t v13;
  XMP_ProgressTracker *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;

  if (a2)
    PSD_MetaHandler::UpdateFile();
  v3 = *((_DWORD *)this + 10);
  if (*((_QWORD *)this + 4) == -1)
    v4 = 0;
  else
    v4 = *((_QWORD *)this + 4);
  if (v3 == -1)
    v5 = 0;
  else
    v5 = v3;
  v6 = (char *)this + 80;
  v7 = (PSD_MetaHandler *)((char *)this + 104);
  ExportPhotoData(1347634208, (uint64_t)this + 80, *((_QWORD *)this + 24), *((_QWORD *)this + 23), (uint64_t)this + 104);
  if (v4 != 0 && (_DWORD)v5 != 0)
    v8 = 576;
  else
    v8 = 64;
  v9 = (char *)this + 56;
  TXMPMeta<std::string>::SerializeToBuffer((uint64_t)v6, (uint64_t)this + 56, v8, v5);
  if (v4 != 0 && (_DWORD)v5 != 0)
  {
    if (*((char *)this + 79) < 0)
      v10 = *((_QWORD *)this + 8);
    else
      v10 = *((unsigned __int8 *)this + 79);
    v11 = v10 <= (int)v5;
  }
  else
  {
    v11 = 0;
  }
  IsLegacyChanged = PSIR_FileWriter::IsLegacyChanged(v7);
  v13 = *((_QWORD *)this + 1);
  if (!IsLegacyChanged && v11)
  {
    v14 = *(XMP_ProgressTracker **)(v13 + 288);
    LODWORD(v15) = *((char *)this + 79);
    if ((v15 & 0x80000000) != 0)
    {
      v16 = *((_QWORD *)this + 8);
      v17 = *((int *)this + 10);
      if (v16 >= v17)
      {
        v18 = *(_QWORD *)(v13 + 232);
        goto LABEL_29;
      }
    }
    else
    {
      v16 = *((unsigned __int8 *)this + 79);
      v17 = *((int *)this + 10);
      if (v16 >= v17)
      {
        v18 = *(_QWORD *)(v13 + 232);
LABEL_27:
        v21 = 0;
        v22 = v15;
LABEL_30:
        if (v22 != (int)v5)
          PSD_MetaHandler::UpdateFile();
        if (v14)
        {
          if (v21)
            v15 = *((_QWORD *)this + 8);
          else
            v15 = v15;
          XMP_ProgressTracker::BeginWork(v14, (float)v15);
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 16))(v18, v4, 0);
        if (*((char *)this + 79) < 0)
        {
          v9 = (char *)*((_QWORD *)this + 7);
          v23 = *((_QWORD *)this + 8);
        }
        else
        {
          v23 = *((unsigned __int8 *)this + 79);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v18 + 8))(v18, v9, v23);
        if (v14)
          XMP_ProgressTracker::WorkComplete(v14, v24, v25, v26);
        goto LABEL_41;
      }
    }
    std::string::append((std::string *)((char *)this + 56), v17 - v16, 32);
    LODWORD(v15) = *((char *)this + 79);
    v18 = *(_QWORD *)(*((_QWORD *)this + 1) + 232);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_29:
    v22 = *((_QWORD *)this + 8);
    v21 = 1;
    goto LABEL_30;
  }
  v19 = *(_QWORD *)(v13 + 232);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  if (*((_BYTE *)this + 96))
    __assert_rtn("UpdateFile", "PSD_Handler.cpp", 336, "! this->skipReconcile");
  *((_BYTE *)this + 96) = 1;
  (*(void (**)(PSD_MetaHandler *, uint64_t))(*(_QWORD *)this + 80))(this, v20);
  *((_BYTE *)this + 96) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 48))(v19);
LABEL_41:
  *((_BYTE *)this + 23) = 0;
}

void sub_188100C84(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_188100C90(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  *(_BYTE *)(v1 + 96) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  __cxa_rethrow();
}

void sub_188100CB0()
{
  __cxa_end_catch();
  JUMPOUT(0x188100CB8);
}

void PSD_MetaHandler::WriteTempFile(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  XMP_ProgressTracker *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = v4[29];
  v6 = v4[34];
  v7 = v4[35];
  v8 = (XMP_ProgressTracker *)v4[36];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  if (v9)
  {
    v10 = v9;
    if (!*(_BYTE *)(a1 + 96))
    {
      ExportPhotoData(1246774599, a1 + 80, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 184), a1 + 104);
      TXMPMeta<std::string>::SerializeToBuffer(a1 + 80, a1 + 56, 64, 0);
    }
    v11 = (const void *)(a1 + 56);
    TXMPMeta<std::string>::SerializeToBuffer(a1 + 80, a1 + 56, 64, 0);
    *(_QWORD *)(a1 + 32) = -1;
    if (*(char *)(a1 + 79) < 0)
      v12 = *(_QWORD *)(a1 + 64);
    else
      LODWORD(v12) = *(unsigned __int8 *)(a1 + 79);
    *(_DWORD *)(a1 + 40) = v12;
    FillPacketInfo((unsigned __int8 *)(a1 + 56), a1 + 32);
    if (*(char *)(a1 + 79) < 0)
    {
      v11 = *(const void **)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 79);
    }
    PSIR_FileWriter::SetImgRsrc((PSIR_FileWriter *)(a1 + 104), 0x424u, v11, v13);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 26, 0);
    v21 = 0;
    (**(void (***)(uint64_t, unsigned int *, uint64_t, _QWORD))v5)(v5, &v21, 4, 0);
    v14 = bswap32(v21);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v14, 1);
    v20 = 0;
    (**(void (***)(uint64_t, unsigned int *, uint64_t, _QWORD))v5)(v5, &v20, 4, 0);
    v20 = bswap32(v20);
    v15 = v14 + v20 + 34;
    v16 = v10 - v15;
    if (v8)
      XMP_ProgressTracker::BeginWork(v8, (float)((float)v14 + 30.0) + (float)v16);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0, 0);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, 0);
    XIO::Copy(v5, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 4, 1);
    (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a2 + 8))(a2, &v21, 4);
    XIO::Copy(v5, a2);
    PSIR_FileWriter::UpdateFileResources(a1 + 104, v5, a2, v6, v7, v8);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, v15, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 2);
    XIO::Copy(v5, a2);
    *(_BYTE *)(a1 + 23) = 0;
    if (v8)
      XMP_ProgressTracker::WorkComplete(v8, v17, v18, v19);
  }
}

void PSD_CheckFormat()
{
  __assert_rtn("PSD_CheckFormat", "PSD_Handler.cpp", 55, "format == kXMP_PhotoshopFile");
}

void PSD_MetaHandler::CacheFileData()
{
  __assert_rtn("CacheFileData", "PSD_Handler.cpp", 122, "! this->containsXMP");
}

void PSD_MetaHandler::ProcessXMP()
{
  __assert_rtn("ProcessXMP", "PSD_Handler.cpp", 248, "this->containsXMP");
}

void PSD_MetaHandler::UpdateFile()
{
  __assert_rtn("UpdateFile", "PSD_Handler.cpp", 273, "! doSafeUpdate");
}

{
  __assert_rtn("UpdateFile", "PSD_Handler.cpp", 319, "this->xmpPacket.size() == (size_t)oldPacketLength");
}

uint64_t AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(AdobeXMPCore_Int::IErrorNotifier_I *this)
{
  if (AdobeXMPCore_Int::sErrorNotifier(void)::onceToken != -1)
    dispatch_once(&AdobeXMPCore_Int::sErrorNotifier(void)::onceToken, &__block_literal_global_46);
  return *(_QWORD *)AdobeXMPCore_Int::gErrorNotifier;
}

uint64_t AdobeXMPCore_Int::IErrorNotifier_I::SetErrorNotifier(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (AdobeXMPCore_Int::sErrorNotifier(void)::onceToken != -1)
    dispatch_once(&AdobeXMPCore_Int::sErrorNotifier(void)::onceToken, &__block_literal_global_46);
  v2 = *(_QWORD *)AdobeXMPCore_Int::gErrorNotifier;
  if (a1)
  {
    *(_QWORD *)AdobeXMPCore_Int::gErrorNotifier = a1;
  }
  else
  {
    if (AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken != -1)
      dispatch_once(&AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken, &__block_literal_global_2);
    v3 = AdobeXMPCore_Int::gDefaultErrorNotifier;
    if (AdobeXMPCore_Int::gDefaultErrorNotifier)
      v3 = AdobeXMPCore_Int::gDefaultErrorNotifier
         + *(_QWORD *)(*(_QWORD *)AdobeXMPCore_Int::gDefaultErrorNotifier - 48);
    *(_QWORD *)AdobeXMPCore_Int::gErrorNotifier = v3;
  }
  return v2;
}

void ___ZN16AdobeXMPCore_IntL14sErrorNotifierEv_block_invoke()
{
  _QWORD *v0;
  uint64_t v1;

  v0 = (_QWORD *)operator new();
  if (AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken != -1)
    dispatch_once(&AdobeXMPCore_Int::sDefaultErrorNotifier(void)::onceToken, &__block_literal_global_2);
  v1 = AdobeXMPCore_Int::gDefaultErrorNotifier;
  if (AdobeXMPCore_Int::gDefaultErrorNotifier)
    v1 = AdobeXMPCore_Int::gDefaultErrorNotifier
       + *(_QWORD *)(*(_QWORD *)AdobeXMPCore_Int::gDefaultErrorNotifier - 48);
  *v0 = v1;
  AdobeXMPCore_Int::gErrorNotifier = (uint64_t)v0;
}

uint64_t AdobeXMPCommon::IErrorNotifier_v1::notify(AdobeXMPCommon::IErrorNotifier_v1 *this, const AdobeXMPCommon::IError_v1 *a2, unsigned int *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;

  *a3 = 0;
  AdobeXMPCommon::IError_v1::MakeShared((char *)a2, &v10);
  v9 = v10;
  v4 = (**(uint64_t (***)(AdobeXMPCommon::IErrorNotifier_v1 *, __int128 *))this)(this, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_18810129C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_begin_catch(a1);
  *v9 = 1;
  __cxa_end_catch();
  JUMPOUT(0x188101288);
}

unsigned __int8 *FillPacketInfo(unsigned __int8 *result, uint64_t a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v2 = (char)result[23];
  if (v2 >= 0)
    v3 = result;
  else
    v3 = *(unsigned __int8 **)result;
  if (v2 >= 0)
    v4 = result[23];
  else
    v4 = *((_DWORD *)result + 2);
  if (!v4)
    return result;
  v6 = v4 - 1;
  if (v4 == 1)
    goto LABEL_9;
  v8 = *v3;
  if (v4 <= 3)
  {
    if (!*v3)
      goto LABEL_21;
    if (v3[1])
    {
      if (*(__int16 *)v3 != -2)
      {
        if (*(__int16 *)v3 == -257)
          v7 = 3;
        else
          v7 = 0;
        goto LABEL_31;
      }
LABEL_21:
      v7 = 2;
      goto LABEL_31;
    }
LABEL_30:
    v7 = 3;
    goto LABEL_31;
  }
  if (v8 == 255)
  {
    if (v3[1] != 254)
      goto LABEL_23;
LABEL_28:
    if (!v3[2] && !v3[3])
    {
      v7 = 5;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v8 == 254)
  {
    if (v3[1] == 255)
      v7 = 2;
    else
      v7 = 1;
    goto LABEL_31;
  }
  if (*v3)
  {
    if (v3[1])
    {
LABEL_9:
      v7 = 0;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (v3[1])
    goto LABEL_21;
  if (v3[2] != 254)
  {
    if (!v3[2])
    {
      if (v3[3])
        v7 = 4;
      else
        v7 = 1;
      goto LABEL_31;
    }
LABEL_23:
    v7 = 1;
    goto LABEL_31;
  }
  if (v3[3] == 255)
    v7 = 4;
  else
    v7 = 1;
LABEL_31:
  v9 = 0;
  *(_BYTE *)(a2 + 16) = v7;
  v10 = v7 & 6;
  if (v10)
    v11 = v10;
  else
    v11 = 1;
  while (1)
  {
    v12 = v9;
    v13 = v6 + v9;
    if (!(v6 + v9))
      break;
    --v9;
    if (v3[v13] == 60)
    {
      result = &v3[v13];
      goto LABEL_38;
    }
  }
  result = v3;
  if (*v3 != 60)
    return result;
LABEL_38:
  if (1 - v12 >= 18 * v11)
  {
    result = (unsigned __int8 *)memcmp(result, kPacketTrailiers[v11 >> 1], 13 * v11);
    if (!(_DWORD)result)
    {
      *(_BYTE *)(a2 + 18) = 1;
      if (v3[16 * v11 - 1 + v4 - v11 + v12] == 119)
        *(_BYTE *)(a2 + 17) = 1;
      if (v4 + v12 - 1 >= v11)
      {
        v14 = 0;
        while (v3[v6 + v12 + v14] != 62)
        {
          v15 = v6 - v11 + v12 + v14;
          v14 -= v11;
          if (v15 < v11)
            return result;
        }
        *(_DWORD *)(a2 + 12) = -(v11 + v14);
      }
    }
  }
  return result;
}

uint64_t XMPFileHandler::GetFileModDate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  _QWORD *exception;
  const char *v6;

  if ((*(_BYTE *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v6 = "Base implementation of GetFileModDate only for typical embedding handlers";
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (const char *)(v2 + 368);
  if (*(char *)(v2 + 391) < 0)
  {
    if (!*(_QWORD *)(v2 + 376))
    {
LABEL_9:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      v6 = "GetFileModDate cannot be used with client-provided I/O";
LABEL_10:
      exception[1] = v6;
      *((_BYTE *)exception + 16) = 0;
    }
    v3 = *(const char **)v3;
  }
  else if (!*(_BYTE *)(v2 + 391))
  {
    goto LABEL_9;
  }
  return Host_IO::GetModifyDate(v3, a2);
}

void XMPFileHandler::FillMetadataFiles(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD *exception;
  const char *v18;
  void *__p[2];
  std::string::size_type v20;
  std::__split_buffer<std::string> __v;

  if ((*(_BYTE *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v18 = "Base implementation of FillMetadataFiles only for typical embedding handlers";
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (char *)(v3 + 368);
  if (*(char *)(v3 + 391) < 0)
  {
    if (!*(_QWORD *)(v3 + 376))
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      v18 = "FillMetadataFiles cannot be used with client-provided I/O";
LABEL_23:
      exception[1] = v18;
      *((_BYTE *)exception + 16) = 0;
    }
    v4 = *(char **)v4;
  }
  else if (!*(_BYTE *)(v3 + 391))
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    else
      v12 = 0;
    v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v20;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v15 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v16 = SHIBYTE(v20);
    *(_QWORD *)(a2 + 8) = v15;
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v20;
    *(_OWORD *)v6 = v7;
    *(_QWORD *)(a2 + 8) = v6 + 24;
  }
}

void sub_18810173C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

void XMPFileHandler::FillAssociatedResources(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD *exception;
  const char *v18;
  void *__p[2];
  std::string::size_type v20;
  std::__split_buffer<std::string> __v;

  if ((*(_BYTE *)(a1 + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v18 = "GetAssociatedResources is not implemented for this file format";
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (char *)(v3 + 368);
  if (*(char *)(v3 + 391) < 0)
  {
    if (!*(_QWORD *)(v3 + 376))
    {
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      v18 = "GetAssociatedResources cannot be used with client-provided I/O";
LABEL_23:
      exception[1] = v18;
      *((_BYTE *)exception + 16) = 0;
    }
    v4 = *(char **)v4;
  }
  else if (!*(_BYTE *)(v3 + 391))
  {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(_QWORD *)a2) >> 3);
    v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)a2) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11)
      v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    else
      v12 = 0;
    v13 = v12 + v8;
    __v.__first_ = v12;
    __v.__begin_ = v13;
    __v.__end_cap_.__value_ = &v12[v11];
    v14 = *(_OWORD *)__p;
    v13->__r_.__value_.__r.__words[2] = v20;
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    __v.__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v15 = *(_QWORD *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v16 = SHIBYTE(v20);
    *(_QWORD *)(a2 + 8) = v15;
    if (v16 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v20;
    *(_OWORD *)v6 = v7;
    *(_QWORD *)(a2 + 8) = v6 + 24;
  }
}

void sub_188101918(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  _Unwind_Resume(__p);
}

uint64_t XMPFileHandler::IsMetadataWritable(XMPFileHandler *this)
{
  uint64_t v1;
  Host_IO *v2;
  _QWORD *exception;
  const char *v5;

  if ((*((_BYTE *)this + 17) & 0x19) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v5 = "IsMetadataWritable is not implemented for this file format";
    goto LABEL_10;
  }
  v1 = *((_QWORD *)this + 1);
  v2 = (Host_IO *)(v1 + 368);
  if (*(char *)(v1 + 391) < 0)
  {
    if (!*(_QWORD *)(v1 + 376))
    {
LABEL_9:
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      v5 = "IsMetadataWritable cannot be used with client-provided I/O";
LABEL_10:
      exception[1] = v5;
      *((_BYTE *)exception + 16) = 0;
    }
    v2 = *(Host_IO **)v2;
  }
  else if (!*(_BYTE *)(v1 + 391))
  {
    goto LABEL_9;
  }
  return Host_IO::Writable(v2, 0);
}

void sub_1881019DC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188101988);
}

void XMPFileHandler::ProcessXMP(XMPFileHandler *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *exception;

  if (*((_BYTE *)this + 21) && !*((_BYTE *)this + 22))
  {
    if ((*((_BYTE *)this + 16) & 0x10) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 9;
      exception[1] = "Reconciling file handlers must implement ProcessXMP";
      *((_BYTE *)exception + 16) = 0;
    }
    TXMPUtils<std::string>::RemoveProperties((uint64_t)this + 80, 0, 0, (const char *)1);
    if (*((char *)this + 79) < 0)
    {
      v2 = (char *)*((_QWORD *)this + 7);
      v3 = *((_QWORD *)this + 8);
    }
    else
    {
      v2 = (char *)this + 56;
      v3 = *((unsigned __int8 *)this + 79);
    }
    TXMPMeta<std::string>::ParseFromBuffer((uint64_t)this + 80, (uint64_t)v2, v3, 0);
    *((_BYTE *)this + 22) = 1;
  }
}

uint64_t XMPFileHandler::GetSerializeOptions(XMPFileHandler *this)
{
  return 64;
}

uint64_t AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 v5;
  char *v6;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  AdobeXMPCommon::IError_v1 *v18;
  __int128 v19;

  *(_QWORD *)(a1 + 16) = &unk_1E1BA3330;
  *(_QWORD *)(a1 + 104) = off_1E1BA1DD0;
  *(_QWORD *)a1 = off_1E1BA2390;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 48) = &off_1E1BA3148;
  v4 = a1 + 48;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  AdobeXMPCore_Int::DOMParserImpl::DOMParserImpl((AdobeXMPCore_Int::DOMParserImpl *)(a1 + 16), (uint64_t *)&off_1E1BAAEE8);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &off_1E1BBA778;
  *(_QWORD *)(a1 + 48) = &off_1E1BBA9E8;
  *(_QWORD *)(a1 + 104) = off_1E1BBAB48;
  *(_QWORD *)a1 = off_1E1BBA5A8;
  if (a2)
  {
    v18 = 0;
    v17 = 0;
    v5 = (*(unsigned int (**)(uint64_t, AdobeXMPCommon::IError_v1 **, int *))(*(_QWORD *)a2 + 64))(a2, &v18, &v17) == 0;
    (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 224))(v4, v5);
    v6 = (char *)v18;
    if (!v18 && !v17)
    {
      (*(void (**)(uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(*(_QWORD *)a2 + 72))(a2, a1 + *(_QWORD *)(*(_QWORD *)a1 - 72), &v18, &v17);
      v6 = (char *)v18;
    }
    if (v6)
    {
      AdobeXMPCommon::IError_v1::MakeShared(v6, &v19);
      v15 = v19;
      (*(void (**)(char *))(*(_QWORD *)((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 56)) + 8))((char *)v18 + *(_QWORD *)(*(_QWORD *)v18 - 56));
      exception = __cxa_allocate_exception(0x10uLL);
      *exception = v15;
      v16 = 0uLL;
    }
    if (v17)
    {
      v19 = 0uLL;
      AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v19);
      (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304))
                                                            + 120))(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMParserWrapperImpl.cpp", 44);
      v9 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304)) + 112))(v19 + *(_QWORD *)(*(_QWORD *)v19 - 304), "Unknown Exception caught in the client code", -1);
      if ((_QWORD)v19)
        v10 = v19 + *(_QWORD *)(*(_QWORD *)v19 - 304);
      else
        v10 = 0;
      *(_QWORD *)&v16 = v10;
      *((_QWORD *)&v16 + 1) = *((_QWORD *)&v19 + 1);
      if (*((_QWORD *)&v19 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v9);
      (**ErrorNotifier)(ErrorNotifier, &v16);
      v14 = __cxa_allocate_exception(0x10uLL);
      *v14 = v16;
      v16 = 0uLL;
    }
  }
  return a1;
}

void sub_188101D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AdobeXMPCore_Int::SharedObjectImpl *v3;
  AdobeXMPCore_Int::ConfigurableImpl *v4;
  AdobeXMPCore_Int::DOMParserImpl *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl(v5, (uint64_t *)&off_1E1BAAEE8);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v3, (uint64_t *)off_1E1BAAFC8);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl(v4, (uint64_t *)off_1E1BAAFB0);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ParseAsNode@<X0>(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  AdobeXMPCommon::IError_v1 *v17;
  __int128 v18;

  v17 = 0;
  v16 = 0;
  v5 = (char *)(*(uint64_t (**)(_QWORD, const char *, uint64_t, char *, uint64_t (*)(AdobeXMPCore_Int *, int, unsigned int, uint64_t, const char *, const AdobeXMPCommon::IError_v1 **), AdobeXMPCommon::IError_v1 **, int *))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1), a2, a3, (char *)this + *(_QWORD *)(*(_QWORD *)this - 72), AdobeXMPCore_Int::ReportErrorAndContinueABISafe, &v17, &v16);
  if (v17)
  {
    AdobeXMPCommon::IError_v1::MakeShared((char *)v17, &v18);
    v14 = v18;
    (*(void (**)(char *))(*(_QWORD *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 56)) + 8))((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v14;
    v18 = 0uLL;
  }
  if (v16)
  {
    v18 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v18);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v18 + *(_QWORD *)(*(_QWORD *)v18 - 304))
                                                          + 120))(v18 + *(_QWORD *)(*(_QWORD *)v18 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMParserWrapperImpl.cpp", 58);
    v8 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v18 + *(_QWORD *)(*(_QWORD *)v18 - 304)) + 112))(v18 + *(_QWORD *)(*(_QWORD *)v18 - 304), "Unknown Exception caught in the client code", -1);
    v9 = 0;
    if ((_QWORD)v18)
      v9 = v18 + *(_QWORD *)(*(_QWORD *)v18 - 304);
    *(_QWORD *)&v15 = v9;
    *((_QWORD *)&v15 + 1) = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v8);
    (**ErrorNotifier)(ErrorNotifier, &v15);
    v13 = __cxa_allocate_exception(0x10uLL);
    *v13 = v15;
    v15 = 0uLL;
  }
  (**(void (***)(char *))&v5[*(_QWORD *)(*(_QWORD *)v5 - 56)])(&v5[*(_QWORD *)(*(_QWORD *)v5 - 56)]);
  return std::shared_ptr<AdobeXMPCore::INode_v1>::shared_ptr[abi:ne180100]<AdobeXMPCore::INode_v1,std::__mem_fn<void (AdobeXMPCommon::ISharedObject::*)(void)const>,void>(a4, (uint64_t)v5, 8, 1);
}

void sub_188101F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ParseAsNode@<X0>(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ParseAsNode((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 328)), a2, a3, a4);
}

void AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::DOMParserImpl::~DOMParserImpl((AdobeXMPCore_Int::DOMParserImpl *)(v2 + 16), (uint64_t *)&off_1E1BAAEE8);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + 104), (uint64_t *)off_1E1BAAFC8);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + 48), (uint64_t *)off_1E1BAAFB0);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
}

{
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::~ClientDOMParserWrapperImpl((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

uint64_t AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCore_Int::IErrorNotifier_I *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  int v14;
  AdobeXMPCommon::IError_v1 *v15;
  __int128 v16;

  v15 = 0;
  v14 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **, int *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), a2, a3, a4, &v15, &v14);
  if (v15)
  {
    AdobeXMPCommon::IError_v1::MakeShared((char *)v15, &v16);
    v12 = v16;
    (*(void (**)(char *))(*(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 56)) + 8))((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 56));
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v12;
    v16 = 0uLL;
  }
  if (v14)
  {
    v16 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 200, 2, &v16);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304))
                                                          + 120))(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ClientDOMParserWrapperImpl.cpp", 79);
    v6 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304)) + 112))(v16 + *(_QWORD *)(*(_QWORD *)v16 - 304), "Unknown Exception caught in the client code", -1);
    v7 = 0;
    if ((_QWORD)v16)
      v7 = v16 + *(_QWORD *)(*(_QWORD *)v16 - 304);
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v6);
    (**ErrorNotifier)(ErrorNotifier, &v13);
    v11 = __cxa_allocate_exception(0x10uLL);
    *v11 = v13;
    v13 = 0uLL;
  }
  return result;
}

void sub_188102218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v3 - 32);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ValidateValue((uint64_t)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ClientDOMParserWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  AdobeXMPCore_Int::ClientDOMParserWrapperImpl::ClientDOMParserWrapperImpl((uint64_t)v2, 0);
  if (!v2)
    return 0;
  v2[1] = *((_QWORD *)this + 1);
  return (uint64_t)v2 + *(_QWORD *)(*v2 - 48);
}

void sub_1881022A4(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ClientDOMParserWrapperImpl::clone(AdobeXMPCore_Int::ClientDOMParserWrapperImpl *this)
{
  return AdobeXMPCore_Int::ClientDOMParserWrapperImpl::clone((AdobeXMPCore_Int::ClientDOMParserWrapperImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 408)));
}

BOOL ReconcileUtils::IsASCII(ReconcileUtils *this, char *a2)
{
  char *v2;
  int v3;
  int v4;
  _BOOL8 v5;
  BOOL v7;

  if (!a2)
    return 1;
  v2 = a2 - 1;
  do
  {
    v4 = *(char *)this;
    this = (ReconcileUtils *)((char *)this + 1);
    v3 = v4;
    v5 = v4 >= 0;
    v7 = v2-- != 0;
  }
  while ((v3 & 0x80000000) == 0 && v7);
  return v5;
}

uint64_t ReconcileUtils::IsUTF8(ReconcileUtils *this, uint64_t a2)
{
  ReconcileUtils *v2;
  int v3;
  ReconcileUtils *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (a2 >= 1)
  {
    v2 = (ReconcileUtils *)((char *)this + a2);
    do
    {
      v3 = *(char *)this;
      if (v3 < 0)
      {
        v5 = 0;
        do
        {
          ++v5;
          LOBYTE(v3) = 2 * v3;
        }
        while ((v3 & 0x80) != 0);
        v6 = 0;
        if ((unint64_t)(v5 - 5) < 0xFFFFFFFFFFFFFFFDLL)
          return v6;
        v4 = (ReconcileUtils *)((char *)this + v5);
        if ((ReconcileUtils *)((char *)this + v5) > v2)
          return v6;
        v7 = 1;
        while (v5 != v7)
        {
          v8 = *((_BYTE *)this + v7++) & 0xC0;
          if (v8 != 128)
            return 0;
        }
      }
      else
      {
        v4 = (ReconcileUtils *)((char *)this + 1);
      }
      this = v4;
    }
    while (v4 < v2);
  }
  return 1;
}

void ReconcileUtils::UTF8ToLocal(const UInt8 *a1, CFIndex a2, std::string *this)
{
  uint64_t v6;
  CFStringEncoding SystemEncoding;

  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (!a2)
LABEL_7:
    JUMPOUT(0x18D761A20);
  v6 = 0;
  while (((char)a1[v6] & 0x80000000) == 0)
  {
    if (a2 == ++v6)
      goto LABEL_7;
  }
  SystemEncoding = CFStringGetSystemEncoding();
  ReconcileUtils::IOSConvertEncoding(0x8000100u, SystemEncoding, a1, a2, this);
}

void ReconcileUtils::IOSConvertEncoding(CFStringEncoding a1, CFStringEncoding a2, const UInt8 *a3, CFIndex a4, std::string *a5)
{
  const __CFString *v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex v13;
  CFIndex v14;
  CFIndex Bytes;
  CFIndex v16;
  BOOL v17;
  std::string::size_type __n;
  UInt8 buffer[1000];
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1 != -1 && a2 != -1)
  {
    if (CFStringIsEncodingAvailable(a1))
    {
      if (CFStringIsEncodingAvailable(a2))
      {
        v10 = CFStringCreateWithBytesNoCopy(0, a3, a4, a1, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        if (v10)
        {
          v11 = v10;
          Length = CFStringGetLength(v10);
          if (Length >= 1)
          {
            v13 = Length;
            v14 = 0;
            do
            {
              bzero(buffer, 0x3E8uLL);
              __n = 0;
              v21.location = v14;
              v21.length = v13;
              Bytes = CFStringGetBytes(v11, v21, a2, 0, 0, buffer, 1000, (CFIndex *)&__n);
              if (!Bytes)
                break;
              v16 = Bytes;
              std::string::append(a5, (const std::string::value_type *)buffer, __n);
              v14 += v16;
              v17 = v13 <= v16;
              v13 -= v16;
            }
            while (!v17);
          }
          CFRelease(v11);
        }
      }
    }
  }
}

void ReconcileUtils::LocalToUTF8(const UInt8 *a1, CFIndex a2, std::string *this)
{
  uint64_t v6;
  CFStringEncoding SystemEncoding;

  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (!a2)
LABEL_7:
    JUMPOUT(0x18D761A20);
  v6 = 0;
  while (((char)a1[v6] & 0x80000000) == 0)
  {
    if (a2 == ++v6)
      goto LABEL_7;
  }
  SystemEncoding = CFStringGetSystemEncoding();
  ReconcileUtils::IOSConvertEncoding(SystemEncoding, 0x8000100u, a1, a2, this);
}

uint64_t XMLParserAdapter::NotifyClient(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 232);
  if (result)
    return GenericErrorCallback::NotifyClient(result, a2, a3, 0);
  return result;
}

void StartElementHandler()
{
  __assert_rtn("StartElementHandler", "ExpatAdapter.cpp", 316, "attrs != 0");
}

void ProcessingInstructionHandler()
{
  __assert_rtn("ProcessingInstructionHandler", "ExpatAdapter.cpp", 464, "target != 0");
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateArrayIndexPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, uint64_t a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateArrayIndexPathSegment, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 38, (uint64_t)a2, a3, a4);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  *a2 = 0;
  v13 = 0;
  v14 = 0;
  a1(&v13, a5, a6, a7);
  v7 = (*(uint64_t (**)(char *))(*(_QWORD *)&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)] + 16))(&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = v13;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateArrayNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, int a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, const AdobeXMPCommon::IError_v1 **a7)
{
  void (*v9)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  const AdobeXMPCommon::IError_v1 **v10;
  uint64_t v11;

  switch(a2)
  {
    case 1:
      v9 = (void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode;
      v10 = a7;
      v11 = 50;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
    case 4:
      v9 = (void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode;
      v10 = a7;
      v11 = 55;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
    case 2:
      v9 = (void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode;
      v10 = a7;
      v11 = 45;
      return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", v11, (uint64_t)a3, a4, (uint64_t)a5, a6);
  }
  return 0;
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IArrayNode_v1,AdobeXMPCore::IArrayNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a2 = 0;
  v14 = 0;
  v15 = 0;
  a1(&v14, a5, a6, a7, a8);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = v14;
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateMetadata(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCore::IMetadata_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IMetadata_v1::CreateMetadata, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IMetadata_v1,AdobeXMPCore::IMetadata_v1*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateNameSpacePrefixMap(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::INameSpacePrefixMap_v1::CreateNameSpacePrefixMap, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1,AdobeXMPCore::INameSpacePrefixMap_v1*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreatePath(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IPath_v1::CreatePath, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreatePropertyPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreatePropertyPathSegment, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 82, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a2 = 0;
  v14 = 0;
  v15 = 0;
  a1(&v14, a5, a6, a7, a8);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = v14;
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateQualifierPathSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateQualifierPathSegment, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 87, a2, a3, a4, a5);
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateQualifierSelectorPathSegment(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const AdobeXMPCommon::IError_v1 **a8)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPathSegment_v1::CreateQualifierSelectorPathSegment, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 92, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPathSegment_v1 const,AdobeXMPCore::IPathSegment_v1 const*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  *a2 = 0;
  v16 = 0;
  v17 = 0;
  a1(&v16, a5, a6, a7, a8, a9, a10);
  v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = v16;
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateSimpleNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const AdobeXMPCommon::IError_v1 **a8)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCore::ISimpleNode_v1*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 97, (uint64_t)a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCore::ISimpleNode_v1*,char const*,unsigned long long,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  *a2 = 0;
  v16 = 0;
  v17 = 0;
  a1(&v16, a5, a6, a7, a8, a9, a10);
  v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = v16;
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateStructureNode(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::IStructureNode_v1*,char const*,unsigned long long,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IStructureNode_v1::CreateStructureNode, a6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 102, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::IStructureNode_v1*,char const*,unsigned long long,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a2 = 0;
  v14 = 0;
  v15 = 0;
  a1(&v14, a5, a6, a7, a8);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
  v9 = v14;
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetCoreConfigurationManager(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ICoreConfigurationManager_v1,AdobeXMPCore::ICoreConfigurationManager_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::ICoreConfigurationManager_v1::GetCoreConfigurationManager, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::ICoreConfigurationManager_v1,AdobeXMPCore::ICoreConfigurationManager_v1*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetDOMImplementationRegistry(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMImplementationRegistry_v1*>((void (*)(char **__return_ptr))AdobeXMPCore::IDOMImplementationRegistry_v1::GetDOMImplementationRegistry, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IDOMImplementationRegistry_v1,AdobeXMPCore::IDOMImplementationRegistry_v1*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::GetDefaultNameSpacePrefixMap(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1 const,AdobeXMPCore::INameSpacePrefixMap_v1 const*>((void (*)(char **__return_ptr))AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap, a2);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::INameSpacePrefixMap_v1 const,AdobeXMPCore::INameSpacePrefixMap_v1 const*>(void (*a1)(char **__return_ptr), _QWORD *a2)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char *v8;
  std::__shared_weak_count *v9;

  *a2 = 0;
  v8 = 0;
  v9 = 0;
  a1(&v8);
  v2 = (*(uint64_t (**)(char *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)] + 16))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = v8;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::ParsePath(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, AdobeXMPCore::INameSpacePrefixMap_v1 *a2, uint64_t a3, const AdobeXMPCore::INameSpacePrefixMap_v1 *a4, const AdobeXMPCommon::IError_v1 **a5)
{
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;

  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a4, a2, &v14);
  v13 = v14;
  v8 = AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,char const*,unsigned long long,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>((void (*)(char **__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore::IPath_v1::ParsePath, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 122, (uint64_t)a2, a3, (uint64_t)&v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,char const*,unsigned long long,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(void (*a1)(char **__return_ptr, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v13;
  std::__shared_weak_count *v14;

  *a2 = 0;
  v13 = 0;
  v14 = 0;
  a1(&v13, a5, a6, a7);
  v7 = (*(uint64_t (**)(char *))(*(_QWORD *)&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)] + 16))(&v13[*(_QWORD *)(*(_QWORD *)v13 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  v8 = v13;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

uint64_t AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateError(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, uint64_t a2, uint64_t a3, unsigned int a4, const AdobeXMPCommon::IError_v1 **a5)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore_Int::IError_I,AdobeXMPCommon::IError_v1 *,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))AdobeXMPCore_Int::IError_I::CreateError, a5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 127, a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCore_Int::IError_I,AdobeXMPCommon::IError_v1 *,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int,AdobeXMPCommon::IError_v1::eErrorSeverity>(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  *a2 = 0;
  v13 = 0;
  v14 = 0;
  a1(&v13, a5, a6, a7);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (v13)
    v8 = v13 + *(_QWORD *)(*(_QWORD *)v13 - 304);
  else
    v8 = 0;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::CreateUTF8String(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>((void (*)(char **__return_ptr, uint64_t, uint64_t))AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String, a4, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/CoreObjectFactoryImpl.cpp", 132, (uint64_t)a2, a3);
}

char *AdobeXMPCore_Int::ReturnRawPointerFromSharedPointer<AdobeXMPCommon::IUTF8String_v1,AdobeXMPCommon::IUTF8String_v1*,char const*,unsigned long long>(void (*a1)(char **__return_ptr, uint64_t, uint64_t), _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v12;
  std::__shared_weak_count *v13;

  *a2 = 0;
  v12 = 0;
  v13 = 0;
  a1(&v12, a5, a6);
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 56)] + 16))(&v12[*(_QWORD *)(*(_QWORD *)v12 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  v7 = v12;
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

char *AdobeXMPCore_Int::CoreObjectFactoryImpl::ConvertXMPMetatoIMetadata(int a1, AdobeXMPCore_Int::IMetadataConverterUtils_I *this, _QWORD *a3)
{
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v9;
  std::__shared_weak_count *v10;

  *a3 = 0;
  v9 = 0;
  v10 = 0;
  AdobeXMPCore_Int::IMetadataConverterUtils_I::convertXMPMetatoIMetadata(this, &v9);
  v3 = (*(uint64_t (**)(char *))(*(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 56)] + 16))(&v9[*(_QWORD *)(*(_QWORD *)v9 - 56)]);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = v9;
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

uint64_t AdobeXMPCore_Int::CoreObjectFactoryImpl::ConvertIMetadatatoXMPMeta(AdobeXMPCore_Int::CoreObjectFactoryImpl *this, AdobeXMPCore::IMetadata_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = 0;
  v9 = 0;
  v3 = AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(a2, (AdobeXMPCore::INode_v1 *)&v8);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void AdobeXMPCore_Int::CoreObjectFactoryImpl::~CoreObjectFactoryImpl(AdobeXMPCore_Int::CoreObjectFactoryImpl *this)
{
  JUMPOUT(0x18D761C30);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IMemoryAllocator_v1 *>(a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 144), 0, (uint64_t (*)(_QWORD *, uint64_t))0x28, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 21, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IMemoryAllocator_v1 *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  *a1 = 0;
  v8 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a4);
  return a4(v8, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::registerMemoryAllocator((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *ErrorNotifierWrapperImpl;

  ErrorNotifierWrapperImpl = AdobeXMPCore_Int::CreateErrorNotifierWrapperImpl(a2);
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IErrorNotifier_v1 *>(a3, (uint64_t)a1 + *(_QWORD *)(*a1 - 144), 0, (uint64_t (*)(_QWORD *, uint64_t))0x30, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 27, (uint64_t)ErrorNotifierWrapperImpl);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL,AdobeXMPCommon::IErrorNotifier_v1 *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  *a1 = 0;
  v8 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + a4);
  return a4(v8, a8);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::registerErrorNotifier((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 144), 0, (uint64_t (*)(_QWORD *))0x38, 1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::disableMultiThreading((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128)), a2);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 144), 0, (uint64_t (*)(_QWORD *))0x40, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCommon::IConfigurationManager_v1,unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded(AdobeXMPCore_Int::IConfigurationManager_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::isMultiThreaded((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

_QWORD *AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x6E436F6E664D6772)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 144));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6E436F6E664D6772, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 0x40u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6E436F6E664D6772, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 0x46u, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_18810494C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x70, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/IConfigurationManager_I.cpp", 48, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::IConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::IConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

void XMPMeta::SerializeToBuffer(uint64_t a1, std::string *this, unsigned int a3, unsigned int a4, const char *a5, char *a6, int a7)
{
  char *v8;
  int v13;
  const std::string::value_type *v14;
  const char *v15;
  const char *v16;
  _QWORD *exception;
  const char *v18;
  size_t v19;
  unint64_t v20;
  const XMP_Node **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  signed int v26;
  uint64_t v27;
  uint64_t v28;
  const XMP_Node *v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  const std::string::value_type *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  std::string *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned int v60;
  std::string::value_type *v61;
  size_t size;
  char *p_p;
  std::string *v64;
  const std::string::value_type *v65;
  std::string::size_type v66;
  int v67;
  std::string *v68;
  std::string::size_type v69;
  int v70;
  size_t v71;
  std::string::size_type v72;
  std::string *v73;
  unsigned int v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string::size_type v82;
  __int128 v83;
  int64_t v84;
  MD5_CTX *v85;
  uint64_t v86;
  std::string::size_type v87;
  __int128 v88;
  int64_t v89;
  MD5_CTX *v90;
  uint64_t v91;
  std::string::size_type v92;
  std::string::size_type v93;
  std::string *v94;
  std::string::size_type v95;
  __int128 v96;
  int64_t v97;
  MD5_CTX *v98;
  uint64_t v99;
  std::string::size_type v100;
  __int128 v101;
  int64_t v102;
  MD5_CTX *v103;
  uint64_t v104;
  std::string::size_type v105;
  std::string::size_type v106;
  unint64_t v107;
  size_t v108;
  std::string::size_type v109;
  unint64_t v110;
  unsigned int v111;
  int v112;
  unsigned int v113;
  std::string *v114;
  std::string::size_type v115;
  std::string::size_type v116;
  unint64_t v117;
  MD5_CTX *v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  std::string *v122;
  std::string::size_type v123;
  unint64_t v124;
  unint64_t k;
  unsigned int m;
  std::string *v127;
  std::string::size_type v128;
  std::string::value_type *v129;
  std::string::size_type v130;
  signed int v131;
  std::string *v132;
  std::string::size_type v133;
  std::string::value_type *v134;
  std::string::size_type v135;
  std::string *v136;
  std::string::size_type v137;
  std::string::size_type v138;
  unint64_t v139;
  MD5_CTX *v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  std::string *v144;
  std::string::size_type v145;
  unint64_t v146;
  unint64_t i;
  unsigned int j;
  std::string *v149;
  std::string::size_type v150;
  std::string::value_type *v151;
  std::string::size_type v152;
  signed int v153;
  std::string *v154;
  std::string::size_type v155;
  std::string::value_type *v156;
  std::string::size_type v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  int v161;
  unsigned int v162;
  unsigned int v163;
  unint64_t v165;
  std::string v166;
  void *__p;
  std::string::size_type v168;
  uint64_t v169;
  std::string v170;
  std::string v171;
  std::string::value_type __s[16];
  __int128 v173;
  uint64_t v174;
  MD5_CTX v175;
  unsigned __int8 v176[8];
  uint64_t v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v18 = "XMP_Enforce failed: (rdfString != 0) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/"
          "source/XMPMeta-Serialize.cpp at line 1212";
    goto LABEL_367;
  }
  if (!a5 || (v8 = a6) == 0)
    XMPMeta::SerializeToBuffer();
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if ((a3 & 7) != 0)
  {
    if ((a3 & 2) != 0)
    {
      if ((a3 & 4) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Can't use both _XMP_UTF16_Bit and _XMP_UTF32_Bit";
        goto LABEL_367;
      }
      v13 = 2;
    }
    else
    {
      if ((a3 & 4) == 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Can't use _XMP_LittleEndian_Bit by itself";
        goto LABEL_367;
      }
      v13 = 4;
    }
  }
  else
  {
    v13 = 1;
  }
  v14 = " ";
  if ((a3 & 0x800) != 0)
  {
    v8 = "";
    if ((a3 & 0x200) != 0)
      goto LABEL_20;
LABEL_24:
    if ((a3 & 0x20) != 0)
    {
      if ((a3 & 0x110) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Inconsistent options for read-only packet";
        goto LABEL_367;
      }
    }
    else if ((a3 & 0x10) != 0)
    {
      if ((a3 & 0x100) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Inconsistent options for non-packet serialize";
        goto LABEL_367;
      }
    }
    else
    {
      if ((a3 & 0x1000) == 0)
      {
        if (!a4)
        {
          a4 = v13 << 11;
          if ((a3 & 0x100) == 0)
          {
LABEL_361:
            v162 = a4;
            goto LABEL_37;
          }
LABEL_359:
          if (((*(uint64_t (**)(uint64_t, const char *, const char *))(*(_QWORD *)a1 + 112))(a1, "http://ns.adobe.com/xap/1.0/", "Thumbnails") & 1) == 0)a4 += 10000 * v13;
          goto LABEL_361;
        }
        if (!(a4 >> 28))
        {
          if ((a3 & 0x100) == 0)
            goto LABEL_361;
          goto LABEL_359;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Outrageously large padding size";
LABEL_367:
        exception[1] = v18;
        *((_BYTE *)exception + 16) = 0;
      }
      if ((a3 & 0x2000) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 103;
        v18 = "Inconsistent options for x:xmpmeta serialize";
        goto LABEL_367;
      }
    }
    v162 = 0;
    goto LABEL_37;
  }
  if (*a5)
    v15 = a5;
  else
    v15 = "\n";
  v16 = "   ";
  if ((a3 & 0x40) != 0)
    v16 = " ";
  if (!*v8)
    v8 = (char *)v16;
  v14 = v15;
  if ((a3 & 0x200) == 0)
    goto LABEL_24;
LABEL_20:
  if ((a3 & 0x110) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    v18 = "Inconsistent options for exact size serialize";
    goto LABEL_367;
  }
  v162 = a4;
  if (((v13 - 1) & a4) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 103;
    v18 = "Exact size must be a multiple of the Unicode element";
    goto LABEL_367;
  }
LABEL_37:
  v161 = a3 & 7;
  v163 = a3;
  memset(&v166, 0, sizeof(v166));
  v19 = strlen(v8);
  v20 = 6 * a7 * v19 + 326;
  v21 = *(const XMP_Node ***)(a1 + 296);
  v22 = *(_QWORD *)(a1 + 304) - (_QWORD)v21;
  if (v22)
  {
    v23 = v19;
    v24 = v22 >> 3;
    v25 = *(unsigned __int8 *)(a1 + 263);
    if ((v25 & 0x80u) != 0)
      v25 = *(_QWORD *)(a1 + 248);
    v26 = a7 + 2;
    if (v24 <= 1)
      v27 = 1;
    else
      v27 = v24;
    v28 = v25 + 2 * v26 * v19 + 47;
    do
    {
      v29 = *v21++;
      v20 += v28 + EstimateRDFSize(v29, v26, v23);
      --v27;
    }
    while (v27);
  }
  memset(&v171, 0, sizeof(v171));
  std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  v30 = v163;
  v31 = a7;
  std::string::reserve(&v171, v20 + (v20 >> 2));
  std::string::append(&v171, "<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">");
  std::string::append(&v171, v14);
  v32 = a1 + 224;
  if ((v163 & 0x40) != 0)
  {
    StartOuterRDFDescription(v32, &v171, v14, v8, a7);
    v44 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
    if (v44)
    {
      v45 = 0;
      v46 = v44 >> 3;
      v47 = 1;
      do
        v47 &= SerializeCompactRDFAttrProps(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * v45++), &v171, v14, v8, a7 + 3);
      while (v46 != v45);
      if ((v47 & 1) != 0)
      {
        v43 = "/>";
        v30 = v163;
      }
      else
      {
        std::string::append(&v171, ">");
        v30 = v163;
        std::string::append(&v171, v14);
        v48 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
        if (v48)
        {
          v49 = 0;
          v50 = v48 >> 3;
          do
            SerializeCompactRDFElemProps(*(std::string **)(*(_QWORD *)(a1 + 296) + 8 * v49++), &v171, v14, v8, a7 + 3);
          while (v50 != v49);
        }
        v31 = a7;
        if (a7 < -1)
        {
          v43 = "</rdf:Description>";
        }
        else
        {
          v51 = a7 + 3;
          v43 = "</rdf:Description>";
          do
          {
            std::string::append(&v171, v8);
            --v51;
          }
          while (v51 > 1);
        }
      }
    }
    else
    {
      v43 = "/>";
    }
  }
  else
  {
    StartOuterRDFDescription(v32, &v171, v14, v8, a7);
    if (*(_QWORD *)(a1 + 304) == *(_QWORD *)(a1 + 296))
    {
      v43 = "/>";
    }
    else
    {
      std::string::append(&v171, ">");
      std::string::append(&v171, v14);
      v33 = *(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296);
      if (v33)
      {
        v34 = 0;
        v35 = v33 >> 3;
        if (v35 <= 1)
          v35 = 1;
        v165 = v35;
        do
        {
          v36 = a1;
          v37 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * v34);
          v38 = *(_QWORD *)(v37 + 80) - *(_QWORD *)(v37 + 72);
          if (v38)
          {
            v39 = 0;
            v40 = v38 >> 3;
            if (v40 <= 1)
              v41 = 1;
            else
              v41 = v40;
            do
              SerializeCanonicalRDFProperty(*(_QWORD *)(*(_QWORD *)(v37 + 72) + 8 * v39++), &v171, v14, v8, a7 + 3, (v163 >> 7) & 1, 0);
            while (v41 != v39);
          }
          ++v34;
          a1 = v36;
        }
        while (v34 != v165);
      }
      v31 = a7;
      if (a7 < -1)
      {
        v43 = "</rdf:Description>";
      }
      else
      {
        v42 = a7 + 3;
        v43 = "</rdf:Description>";
        do
        {
          std::string::append(&v171, v8);
          --v42;
        }
        while (v42 > 1);
      }
      v30 = v163;
    }
  }
  std::string::append(&v171, v43);
  std::string::append(&v171, v14);
  if ((v31 & 0x80000000) == 0)
  {
    v52 = v31 + 2;
    do
    {
      std::string::append(&v171, v8);
      --v52;
    }
    while (v52 > 1);
  }
  std::string::append(&v171, "</rdf:RDF>");
  v53 = v31 + 1;
  if ((v30 & 0x10) == 0)
  {
    if (v31 >= 1)
    {
      v54 = v31 + 1;
      do
      {
        std::string::append(this, v8);
        --v54;
      }
      while (v54 > 1);
    }
    std::string::append(this, "<?xpacket begin=\"﻿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>");
    std::string::append(this, v14);
  }
  if ((v30 & 0x1000) != 0)
    goto LABEL_120;
  if (v31 >= 1)
  {
    v55 = v31 + 1;
    do
    {
      std::string::append(this, v8);
      --v55;
    }
    while (v55 > 1);
  }
  std::string::append(this, "<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"");
  std::string::append(this, "XMP Core 6.0.0\"");
  memset(&v170, 0, sizeof(v170));
  *(_QWORD *)v176 = 0;
  v177 = 0;
  if ((v30 & 0x2000) != 0)
  {
    memset(&v175, 0, sizeof(v175));
    MD5Init(&v175);
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v171;
    else
      v56 = (std::string *)v171.__r_.__value_.__r.__words[0];
    if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
    else
      v57 = v171.__r_.__value_.__r.__words[1];
    MD5Update(&v175, (unsigned __int8 *)v56, v57);
    MD5Final(v176, &v175);
    v58 = 0;
    v174 = 0;
    *(_OWORD *)__s = 0u;
    v173 = 0u;
    v59 = v176;
    do
    {
      v60 = *v59++;
      v61 = &__s[v58];
      *v61 = a0123456789abcd[(unint64_t)v60 >> 4];
      v61[1] = a0123456789abcd[v60 & 0xF];
      v58 += 2;
    }
    while (v58 != 32);
    LOBYTE(v174) = 0;
    std::string::append(&v170, __s);
    std::string::append(this, " rdfhash=\"");
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v170.__r_.__value_.__r.__words[2]);
    else
      size = v170.__r_.__value_.__l.__size_;
    v168 = 0;
    v169 = 0;
    __p = 0;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
    if (v169 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (size)
    {
      if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v170;
      else
        v64 = (std::string *)v170.__r_.__value_.__r.__words[0];
      memmove(p_p, v64, size);
    }
    *(_WORD *)&p_p[size] = 34;
    if (v169 >= 0)
      v65 = (const std::string::value_type *)&__p;
    else
      v65 = (const std::string::value_type *)__p;
    if (v169 >= 0)
      v66 = HIBYTE(v169);
    else
      v66 = v168;
    std::string::append(this, v65, v66);
    if (SHIBYTE(v169) < 0)
      operator delete(__p);
    std::string::append(this, " merged=\"0\"");
  }
  std::string::append(this, ">");
  std::string::append(this, v14);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_121:
      v67 = v31 + 2;
      do
      {
        std::string::append(this, v8);
        --v67;
      }
      while (v67 > 1);
    }
  }
  else
  {
LABEL_120:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_121;
  }
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = &v171;
  else
    v68 = (std::string *)v171.__r_.__value_.__r.__words[0];
  if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
  else
    v69 = v171.__r_.__value_.__l.__size_;
  std::string::append(this, (const std::string::value_type *)v68, v69);
  std::string::append(this, v14);
  if ((v30 & 0x1000) == 0)
  {
    if (v31 >= 1)
    {
      v70 = v31 + 1;
      do
      {
        std::string::append(this, v8);
        --v70;
      }
      while (v70 > 1);
    }
    std::string::append(this, "</x:xmpmeta>");
    std::string::append(this, v14);
  }
  std::string::erase(&v166, 0, 0xFFFFFFFFFFFFFFFFLL);
  if ((v30 & 0x10) == 0)
  {
    v71 = strlen(v8);
    std::string::reserve(&v166, v71 * a7 + 19);
    if (v31 >= 1)
    {
      do
      {
        std::string::append(&v166, v8);
        --v53;
      }
      while (v53 > 1);
    }
    std::string::append(&v166, "<?xpacket end=\"w\"?>");
    if ((v30 & 0x20) != 0)
    {
      v72 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v72 = v166.__r_.__value_.__l.__size_;
      v73 = &v166;
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v73 = (std::string *)v166.__r_.__value_.__r.__words[0];
      v73->__r_.__value_.__s.__data_[v72 - 4] = 114;
    }
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v74 = v162;
  if (v161)
  {
    memset(&v175, 0, 24);
    memset(__s, 0, sizeof(__s));
    *(_QWORD *)&v173 = 0;
    if ((v30 & 2) != 0)
    {
      memset(&v171, 0, sizeof(v171));
      std::string::basic_string[abi:ne180100]<0>(&v171, "  ");
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v94 = &v171;
      else
        v94 = (std::string *)v171.__r_.__value_.__r.__words[0];
      v94->__r_.__value_.__s.__data_[0] = 0;
      v95 = *(_QWORD *)v175.count;
      v96 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      *(_QWORD *)v175.count = *((_QWORD *)&this->__r_.__value_.__l + 2);
      v97 = *(_QWORD *)v175.count;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v96;
      this->__r_.__value_.__r.__words[2] = v95;
      if (v97 >= 0)
        v98 = &v175;
      else
        v98 = *(MD5_CTX **)v175.state;
      if (v97 >= 0)
        v99 = HIBYTE(v97);
      else
        v99 = *(_QWORD *)&v175.state[2];
      ToUTF16((uint64_t)v98, v99);
      v100 = *(_QWORD *)v175.count;
      v101 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
      v102 = v166.__r_.__value_.__r.__words[2];
      *(_QWORD *)v175.count = *((_QWORD *)&v166.__r_.__value_.__l + 2);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v101;
      v166.__r_.__value_.__r.__words[2] = v100;
      if (v102 >= 0)
        v103 = &v175;
      else
        v103 = *(MD5_CTX **)v175.state;
      if (v102 >= 0)
        v104 = HIBYTE(v102);
      else
        v104 = *(_QWORD *)&v175.state[2];
      ToUTF16((uint64_t)v103, v104);
      if ((v30 & 0x200) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          v105 = this->__r_.__value_.__l.__size_;
        else
          v105 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v138 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v138 = v166.__r_.__value_.__l.__size_;
        v139 = v138 + v105;
        if (v139 > v162)
        {
          v160 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v160 = 107;
          v160[1] = "Can't fit into specified packet size";
          *((_BYTE *)v160 + 16) = 0;
        }
        v74 = v162 - v139;
      }
      MEMORY[0x18D761A14](&v175, v14);
      if ((v175.count[1] & 0x80000000) == 0)
        v140 = &v175;
      else
        v140 = *(MD5_CTX **)v175.state;
      if ((v175.count[1] & 0x80000000) == 0)
        v141 = HIBYTE(v175.count[1]);
      else
        v141 = *(_QWORD *)&v175.state[2];
      ToUTF16((uint64_t)v140, v141);
      v142 = BYTE7(v173);
      if (SBYTE7(v173) < 0)
        v142 = *(_QWORD *)&__s[8];
      if (v142 <= v74)
      {
        v146 = v74 - v142;
        for (i = v142 + 200; i <= v146; v146 = (v146 - i))
        {
          for (j = 101; j > 1; --j)
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v149 = &v171;
            else
              v149 = (std::string *)v171.__r_.__value_.__r.__words[0];
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v150 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            else
              v150 = v171.__r_.__value_.__l.__size_;
            std::string::append(this, (const std::string::value_type *)v149, v150);
          }
          if ((SBYTE7(v173) & 0x80u) == 0)
            v151 = __s;
          else
            v151 = *(std::string::value_type **)__s;
          if ((SBYTE7(v173) & 0x80u) == 0)
            v152 = BYTE7(v173);
          else
            v152 = *(_QWORD *)&__s[8];
          std::string::append(this, v151, v152);
        }
        if (v146 >= 2)
        {
          v153 = (v146 >> 1) + 1;
          do
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v154 = &v171;
            else
              v154 = (std::string *)v171.__r_.__value_.__r.__words[0];
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v155 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            else
              v155 = v171.__r_.__value_.__l.__size_;
            std::string::append(this, (const std::string::value_type *)v154, v155);
            --v153;
          }
          while (v153 > 1);
        }
        if ((SBYTE7(v173) & 0x80u) == 0)
          v156 = __s;
        else
          v156 = *(std::string::value_type **)__s;
        if ((SBYTE7(v173) & 0x80u) == 0)
          v157 = BYTE7(v173);
        else
          v157 = *(_QWORD *)&__s[8];
        std::string::append(this, v156, v157);
      }
      else if (v74 >= 2)
      {
        v143 = (v74 >> 1) + 1;
        do
        {
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v144 = &v171;
          else
            v144 = (std::string *)v171.__r_.__value_.__r.__words[0];
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v145 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          else
            v145 = v171.__r_.__value_.__l.__size_;
          std::string::append(this, (const std::string::value_type *)v144, v145);
          --v143;
        }
        while (v143 > 1);
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v166;
      else
        v136 = (std::string *)v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      else
        v137 = v166.__r_.__value_.__l.__size_;
    }
    else
    {
      memset(&v171, 0, sizeof(v171));
      std::string::basic_string[abi:ne180100]<0>(&v171, "    ");
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v171;
      else
        v75 = (std::string *)v171.__r_.__value_.__r.__words[0];
      v75->__r_.__value_.__s.__data_[2] = 0;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &v171;
      else
        v76 = (std::string *)v171.__r_.__value_.__r.__words[0];
      v76->__r_.__value_.__s.__data_[1] = 0;
      if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v171;
      else
        v77 = (std::string *)v171.__r_.__value_.__r.__words[0];
      v77->__r_.__value_.__s.__data_[0] = 0;
      if ((v30 & 1) != 0)
      {
        v78 = (std::string *)v171.__r_.__value_.__r.__words[0];
        v79 = &v171;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = &v171;
        v78->__r_.__value_.__s.__data_[0] = 32;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v171;
        else
          v80 = (std::string *)v171.__r_.__value_.__r.__words[0];
        v80->__r_.__value_.__s.__data_[3] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v171;
        else
          v81 = (std::string *)v171.__r_.__value_.__r.__words[0];
        v81->__r_.__value_.__s.__data_[2] = 0;
        if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v79 = (std::string *)v171.__r_.__value_.__r.__words[0];
        v79->__r_.__value_.__s.__data_[1] = 0;
      }
      v82 = *(_QWORD *)v175.count;
      v83 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&this->__r_.__value_.__l.__data_;
      *(_QWORD *)v175.count = *((_QWORD *)&this->__r_.__value_.__l + 2);
      v84 = *(_QWORD *)v175.count;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v83;
      this->__r_.__value_.__r.__words[2] = v82;
      if (v84 >= 0)
        v85 = &v175;
      else
        v85 = *(MD5_CTX **)v175.state;
      if (v84 >= 0)
        v86 = HIBYTE(v84);
      else
        v86 = *(_QWORD *)&v175.state[2];
      ToUTF32((uint64_t)v85, v86);
      v87 = *(_QWORD *)v175.count;
      v88 = *(_OWORD *)v175.state;
      *(_OWORD *)v175.state = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
      v89 = v166.__r_.__value_.__r.__words[2];
      *(_QWORD *)v175.count = *((_QWORD *)&v166.__r_.__value_.__l + 2);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v88;
      v166.__r_.__value_.__r.__words[2] = v87;
      if (v89 >= 0)
        v90 = &v175;
      else
        v90 = *(MD5_CTX **)v175.state;
      if (v89 >= 0)
        v91 = HIBYTE(v89);
      else
        v91 = *(_QWORD *)&v175.state[2];
      ToUTF32((uint64_t)v90, v91);
      if ((v30 & 0x200) != 0)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          v92 = this->__r_.__value_.__l.__size_;
        else
          v92 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v116 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v116 = v166.__r_.__value_.__l.__size_;
        v117 = v116 + v92;
        if (v117 > v162)
        {
          v159 = __cxa_allocate_exception(0x18uLL);
          *(_DWORD *)v159 = 107;
          v159[1] = "Can't fit into specified packet size";
          *((_BYTE *)v159 + 16) = 0;
        }
        v74 = v162 - v117;
      }
      MEMORY[0x18D761A14](&v175, v14);
      if ((v175.count[1] & 0x80000000) == 0)
        v118 = &v175;
      else
        v118 = *(MD5_CTX **)v175.state;
      if ((v175.count[1] & 0x80000000) == 0)
        v119 = HIBYTE(v175.count[1]);
      else
        v119 = *(_QWORD *)&v175.state[2];
      ToUTF32((uint64_t)v118, v119);
      v120 = BYTE7(v173);
      if (SBYTE7(v173) < 0)
        v120 = *(_QWORD *)&__s[8];
      if (v120 <= v74)
      {
        v124 = v74 - v120;
        for (k = v120 + 400; k <= v124; v124 = (v124 - k))
        {
          for (m = 101; m > 1; --m)
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &v171;
            else
              v127 = (std::string *)v171.__r_.__value_.__r.__words[0];
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            else
              v128 = v171.__r_.__value_.__l.__size_;
            std::string::append(this, (const std::string::value_type *)v127, v128);
          }
          if ((SBYTE7(v173) & 0x80u) == 0)
            v129 = __s;
          else
            v129 = *(std::string::value_type **)__s;
          if ((SBYTE7(v173) & 0x80u) == 0)
            v130 = BYTE7(v173);
          else
            v130 = *(_QWORD *)&__s[8];
          std::string::append(this, v129, v130);
        }
        if (v124 >= 4)
        {
          v131 = (v124 >> 2) + 1;
          do
          {
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v132 = &v171;
            else
              v132 = (std::string *)v171.__r_.__value_.__r.__words[0];
            if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v133 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
            else
              v133 = v171.__r_.__value_.__l.__size_;
            std::string::append(this, (const std::string::value_type *)v132, v133);
            --v131;
          }
          while (v131 > 1);
        }
        if ((SBYTE7(v173) & 0x80u) == 0)
          v134 = __s;
        else
          v134 = *(std::string::value_type **)__s;
        if ((SBYTE7(v173) & 0x80u) == 0)
          v135 = BYTE7(v173);
        else
          v135 = *(_QWORD *)&__s[8];
        std::string::append(this, v134, v135);
      }
      else if (v74 >= 4)
      {
        v121 = (v74 >> 2) + 1;
        do
        {
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v122 = &v171;
          else
            v122 = (std::string *)v171.__r_.__value_.__r.__words[0];
          if ((v171.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v123 = HIBYTE(v171.__r_.__value_.__r.__words[2]);
          else
            v123 = v171.__r_.__value_.__l.__size_;
          std::string::append(this, (const std::string::value_type *)v122, v123);
          --v121;
        }
        while (v121 > 1);
      }
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v136 = &v166;
      else
        v136 = (std::string *)v166.__r_.__value_.__r.__words[0];
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v137 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      else
        v137 = v166.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)v136, v137);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v171.__r_.__value_.__l.__data_);
    if (SBYTE7(v173) < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v175.count[1]) < 0)
      operator delete(*(void **)v175.state);
  }
  else
  {
    if ((v30 & 0x200) != 0)
    {
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v93 = this->__r_.__value_.__l.__size_;
      else
        v93 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v106 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v106 = v166.__r_.__value_.__l.__size_;
      v107 = v106 + v93;
      if (v107 > v162)
      {
        v158 = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)v158 = 107;
        v158[1] = "Can't fit into specified packet size";
        *((_BYTE *)v158 + 16) = 0;
      }
      v74 = v162 - v107;
    }
    v108 = strlen(v14);
    if (v108 <= v74)
    {
      v109 = v74 - v108;
      v110 = v108 + 100;
      if (v108 + 100 <= v109)
      {
        v111 = v74 - 2 * v108 - 100;
        v112 = -100 - v108;
        do
        {
          v113 = v111;
          std::string::append(this, 0x64uLL, 32);
          std::string::append(this, v14);
          v111 = v113 + v112;
        }
        while (v110 <= v113);
        v109 = v113;
      }
      std::string::append(this, v109, 32);
      std::string::append(this, v14);
    }
    else
    {
      std::string::append(this, v74, 32);
    }
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v114 = &v166;
    else
      v114 = (std::string *)v166.__r_.__value_.__r.__words[0];
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    else
      v115 = v166.__r_.__value_.__l.__size_;
    std::string::append(this, (const std::string::value_type *)v114, v115);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v166.__r_.__value_.__l.__data_);
}

void sub_188105C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 233) < 0)
    operator delete(*(void **)(v39 - 256));
  if (*(char *)(v39 - 185) < 0)
    operator delete(*(void **)(v39 - 208));
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t EstimateRDFSize(const XMP_Node *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const XMP_Node **v8;
  const XMP_Node **v9;
  unint64_t v10;
  uint64_t v11;
  const XMP_Node *v12;
  int v13;
  uint64_t v14;
  const XMP_Node **v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  const XMP_Node *v20;

  LODWORD(v4) = a2;
  if (*((char *)a1 + 39) < 0)
    v6 = *((_QWORD *)a1 + 3);
  else
    v6 = *((unsigned __int8 *)a1 + 39);
  v7 = 2 * (v6 + a2 * a3) + 8;
  v9 = (const XMP_Node **)*((_QWORD *)a1 + 12);
  v8 = (const XMP_Node **)*((_QWORD *)a1 + 13);
  if (v9 != v8)
  {
    v10 = v8 - v9;
    v7 += 2 * a3 * (a2 + 1 + (unint64_t)(a2 + 2)) + 64;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    do
    {
      v12 = *v9++;
      v7 += EstimateRDFSize(v12, v4, a3);
      --v11;
    }
    while (v11);
    LODWORD(v4) = v4 + 2;
  }
  v13 = *((_DWORD *)a1 + 2);
  if ((v13 & 0x100) != 0)
  {
    v4 = (v4 + 1);
    v7 += 2 * a3 * v4 + 38;
  }
  else if ((v13 & 0x200) != 0)
  {
    v7 += 2 * a3 * (v4 + 1) + 20 * ((uint64_t)(*((_QWORD *)a1 + 10) - *((_QWORD *)a1 + 9)) >> 3) + 22;
    LODWORD(v4) = v4 + 2;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    if (*((char *)a1 + 63) < 0)
      v14 = *((_QWORD *)a1 + 6);
    else
      v14 = *((unsigned __int8 *)a1 + 63);
    v7 += v14;
  }
  v15 = (const XMP_Node **)*((_QWORD *)a1 + 9);
  v16 = *((_QWORD *)a1 + 10) - (_QWORD)v15;
  if (v16)
  {
    v17 = v16 >> 3;
    v18 = v4 + 1;
    if (v17 <= 1)
      v19 = 1;
    else
      v19 = v17;
    do
    {
      v20 = *v15++;
      v7 += EstimateRDFSize(v20, v18, a3);
      --v19;
    }
    while (v19);
  }
  return v7;
}

void StartOuterRDFDescription(uint64_t a1, std::string *this, const std::string::value_type *a3, std::string::value_type *__s, int a5)
{
  unsigned int v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;

  if (a5 >= -1)
  {
    v10 = a5 + 3;
    do
    {
      std::string::append(this, __s);
      --v10;
    }
    while (v10 > 1);
  }
  std::string::append(this, "<rdf:Description rdf:about=");
  std::string::push_back(this, 34);
  v11 = *(char *)(a1 + 39);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)(a1 + 16);
  else
    v12 = *(const std::string::value_type **)(a1 + 16);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 39);
  else
    v13 = *(_QWORD *)(a1 + 24);
  std::string::append(this, v12, v13);
  std::string::push_back(this, 34);
  memset(&v18, 0, sizeof(v18));
  std::string::reserve(&v18, 0x190uLL);
  MEMORY[0x18D761A14](&v18, ":xml:rdf:");
  v14 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v14)
  {
    v15 = 0;
    v16 = v14 >> 3;
    v17 = (a5 + 4);
    do
      DeclareUsedNamespaces(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v15++), &v18, this, a3, __s, v17);
    while (v16 != v15);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_188105FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SerializeCompactRDFAttrProps(uint64_t a1, std::string *a2, const std::string::value_type *a3, const std::string::value_type *a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  const XMP_Node *v14;
  unsigned int v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;

  v5 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v5)
  {
    v10 = 0;
    v11 = v5 >> 3;
    v12 = a5 + 1;
    v13 = 1;
    do
    {
      v14 = *(const XMP_Node **)(*(_QWORD *)(a1 + 72) + 8 * v10);
      if (CanBeRDFAttrProp(v14))
      {
        std::string::append(a2, a3);
        v15 = v12;
        if (a5 >= 1)
        {
          do
          {
            std::string::append(a2, a4);
            --v15;
          }
          while (v15 > 1);
        }
        v18 = (const std::string::value_type *)*((_QWORD *)v14 + 2);
        v17 = (char *)v14 + 16;
        v16 = v18;
        v19 = v17[23];
        if (v19 >= 0)
          v20 = v17;
        else
          v20 = v16;
        if (v19 >= 0)
          v21 = *((unsigned __int8 *)v17 + 23);
        else
          v21 = *((_QWORD *)v17 + 1);
        std::string::append(a2, v20, v21);
        std::string::append(a2, "=\"");
        AppendNodeValue(a2, (uint64_t)(v17 + 24), 1);
        std::string::push_back(a2, 34);
      }
      else
      {
        v13 = 0;
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else
  {
    v13 = 1;
  }
  return v13 & 1;
}

std::string *SerializeCompactRDFElemProps(std::string *result, std::string *a2, const std::string::value_type *a3, std::string::value_type *a4, int a5)
{
  uint64_t v5;
  int v6;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _BOOL4 v30;
  int v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  const std::string::value_type *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  const XMP_Node **v44;
  _BOOL4 v45;
  unsigned int v46;
  int v47;
  int v48;
  _QWORD *exception;
  unsigned int v50;
  std::string *v52;
  unsigned int v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  std::string::value_type *__s;
  std::string v59;

  v5 = result[3].__r_.__value_.__l.__size_ - result[3].__r_.__value_.__r.__words[0];
  if (!v5)
    return result;
  v6 = a5;
  v9 = result;
  v10 = 0;
  v56 = v5 >> 3;
  v11 = (a5 + 1);
  v50 = a5 + 2;
  v52 = result;
  v53 = a5 + 1;
  do
  {
    v12 = *(_QWORD *)(v9[3].__r_.__value_.__r.__words[0] + 8 * v10);
    result = (std::string *)CanBeRDFAttrProp((const XMP_Node *)v12);
    if ((result & 1) != 0)
      goto LABEL_70;
    v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0)
      v13 = *(const char **)v13;
    v55 = *(_DWORD *)(v12 + 8);
    if (*v13 == 91)
      v13 = "rdf:li";
    __s = (std::string::value_type *)v13;
    if (v6 >= 1)
    {
      v14 = v11;
      do
      {
        std::string::append(a2, a4);
        --v14;
      }
      while (v14 > 1);
    }
    v57 = v10;
    std::string::push_back(a2, 60);
    std::string::append(a2, __s);
    v15 = *(_QWORD *)(v12 + 104) - *(_QWORD *)(v12 + 96);
    if (!v15)
    {
      v17 = 0;
      goto LABEL_47;
    }
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = v15 >> 3;
    if (v19 <= 1)
      v20 = 1;
    else
      v20 = v19;
    do
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 8 * v16);
      v22 = (_OWORD *)(v21 + 16);
      if (*(char *)(v21 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v21 + 16), *(_QWORD *)(v21 + 24));
      }
      else
      {
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *v22;
        v59.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 32);
      }
      v23 = IsRDFAttrQualifier((const void **)&v59.__r_.__value_.__l.__data_);
      v24 = v23;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if (!v24)
        {
LABEL_24:
          v18 = 1;
          goto LABEL_41;
        }
      }
      else if (!v23)
      {
        goto LABEL_24;
      }
      v25 = *(char *)(v21 + 39);
      if (v25 < 0)
      {
        if (*(_QWORD *)(v21 + 24) == 12)
        {
          v26 = *(uint64_t **)v22;
LABEL_27:
          v27 = *v26;
          v28 = *((_DWORD *)v26 + 2);
          v30 = v27 == 0x6F7365723A666472 && v28 == 1701016181;
          goto LABEL_34;
        }
      }
      else
      {
        v26 = (uint64_t *)(v21 + 16);
        if (v25 == 12)
          goto LABEL_27;
      }
      v30 = 0;
LABEL_34:
      v17 |= v30;
      std::string::push_back(a2, 32);
      v31 = *(char *)(v21 + 39);
      if (v31 >= 0)
        v32 = (const std::string::value_type *)(v21 + 16);
      else
        v32 = *(const std::string::value_type **)(v21 + 16);
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(v21 + 39);
      else
        v33 = *(_QWORD *)(v21 + 24);
      std::string::append(a2, v32, v33);
      std::string::append(a2, "=\"");
      AppendNodeValue(a2, v21 + 40, 1);
      std::string::push_back(a2, 34);
LABEL_41:
      ++v16;
    }
    while (v20 != v16);
    v6 = a5;
    v9 = v52;
    v11 = v53;
    if ((v18 & 1) != 0)
    {
      std::string::append(a2, " rdf:parseType=\"Resource\">");
      v34 = a3;
      std::string::append(a2, a3);
      SerializeCanonicalRDFProperty(v12, a2, a3, a4, v53, 0, 1);
      v35 = (uint64_t)(*(_QWORD *)(v12 + 104) - *(_QWORD *)(v12 + 96)) >> 3;
      v36 = v53;
      v37 = ((unint64_t)*(unsigned int *)(v12 + 8) >> 6) & 1;
      v10 = v57;
      if (v35 > v37)
      {
        do
          SerializeCanonicalRDFProperty(*(_QWORD *)(*(_QWORD *)(v12 + 96) + 8 * v37++), a2, a3, a4, v53, 0, 0);
        while (v35 != v37);
      }
      goto LABEL_65;
    }
LABEL_47:
    v38 = (std::string *)(v55 & 0x1F00);
    if ((v55 & 0x1F00) == 0)
    {
      v10 = v57;
      if ((*(_BYTE *)(v12 + 8) & 2) != 0)
      {
        std::string::append(a2, " rdf:resource=\"");
        AppendNodeValue(a2, v12 + 40, 1);
        std::string::append(a2, "\"/>");
        v34 = a3;
        goto LABEL_69;
      }
      v34 = a3;
      if (*(char *)(v12 + 63) < 0)
      {
        if (*(_QWORD *)(v12 + 48))
          goto LABEL_61;
      }
      else if (*(_BYTE *)(v12 + 63))
      {
LABEL_61:
        std::string::push_back(a2, 62);
        AppendNodeValue(a2, v12 + 40, 0);
LABEL_68:
        std::string::append(a2, "</");
        std::string::append(a2, __s);
        std::string::push_back(a2, 62);
        goto LABEL_69;
      }
      std::string::append(a2, "/>");
      goto LABEL_69;
    }
    v10 = v57;
    if ((v55 & 0x200) != 0)
    {
      std::string::push_back(a2, 62);
      v34 = a3;
      std::string::append(a2, a3);
      EmitRDFArrayTag(v38, a2, a3, a4, v11, (*(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72)) >> 3, 1);
      if ((*(_BYTE *)(v12 + 9) & 0x10) != 0)
        NormalizeLangArray((std::string *)v12);
      SerializeCompactRDFElemProps(v12, a2, a3, a4, v50);
      EmitRDFArrayTag(v38, a2, a3, a4, v11, (*(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72)) >> 3, 0);
      v36 = v11;
LABEL_65:
      v11 = v36;
      if (v6 >= 1)
      {
        v46 = v36;
        do
        {
          std::string::append(a2, a4);
          --v46;
        }
        while (v46 > 1);
      }
      goto LABEL_68;
    }
    if ((v55 & 0x100) == 0)
      SerializeCompactRDFElemProps();
    v40 = *(_QWORD *)(v12 + 72);
    v39 = *(_QWORD *)(v12 + 80);
    if (v39 == v40)
      goto LABEL_85;
    LOBYTE(v41) = 0;
    v42 = 0;
    v43 = (v39 - v40) >> 3;
    v44 = *(const XMP_Node ***)(v12 + 72);
    while (2)
    {
      v45 = CanBeRDFAttrProp(*v44);
      if (v45)
      {
        if ((v41 & 1) != 0)
          break;
        goto LABEL_56;
      }
      if (!v42)
      {
LABEL_56:
        v41 = !v45;
        ++v44;
        v42 = v45;
        if (!--v43)
          goto LABEL_74;
        continue;
      }
      break;
    }
    LOBYTE(v45) = 1;
    v41 = 1;
LABEL_74:
    if ((v17 & v41) == 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 202;
      exception[1] = "Can't mix rdf:resource qualifier and element fields";
      *((_BYTE *)exception + 16) = 0;
    }
    v6 = a5;
    v10 = v57;
    if (v39 == v40)
    {
LABEL_85:
      std::string::append(a2, " rdf:parseType=\"Resource\"/>");
      v34 = a3;
      v9 = v52;
      v11 = v53;
      goto LABEL_69;
    }
    if ((v41 & 1) != 0)
    {
      v34 = a3;
      v36 = v53;
      if (v45)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        if (a5 < 0)
        {
          std::string::append(a2, "<rdf:Description");
          SerializeCompactRDFAttrProps(v12, a2, a3, a4, v50);
          std::string::append(a2, ">");
          std::string::append(a2, a3);
          SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
          v9 = v52;
        }
        else
        {
          v47 = v50;
          do
          {
            std::string::append(a2, a4);
            --v47;
          }
          while (v47 > 1);
          std::string::append(a2, "<rdf:Description");
          SerializeCompactRDFAttrProps(v12, a2, a3, a4, v50);
          std::string::append(a2, ">");
          std::string::append(a2, a3);
          SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
          v9 = v52;
          if ((a5 & 0x80000000) == 0)
          {
            v48 = v50;
            do
            {
              std::string::append(a2, a4);
              --v48;
            }
            while (v48 > 1);
          }
        }
        std::string::append(a2, "</rdf:Description>");
        std::string::append(a2, a3);
        v36 = v53;
      }
      else
      {
        std::string::append(a2, " rdf:parseType=\"Resource\">");
        std::string::append(a2, a3);
        SerializeCompactRDFElemProps(v12, a2, a3, a4, v53);
        v9 = v52;
      }
      goto LABEL_65;
    }
    v34 = a3;
    v11 = v53;
    SerializeCompactRDFAttrProps(v12, a2, a3, a4, v53);
    std::string::append(a2, "/>");
    v9 = v52;
LABEL_69:
    result = std::string::append(a2, v34);
LABEL_70:
    ++v10;
  }
  while (v10 != v56);
  return result;
}

void DeclareUsedNamespaces(uint64_t a1, std::string *a2, std::string *a3, const std::string::value_type *a4, const std::string::value_type *a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const std::string::value_type *v17;
  const std::string::value_type *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v12 = *(_DWORD *)(a1 + 8);
  if (v12 < 0)
  {
    v17 = (const std::string::value_type *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v17 = *(const std::string::value_type **)v17;
    v18 = (const std::string::value_type *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v18 = *(const std::string::value_type **)v18;
    DeclareOneNamespace(v17, v18, a2, a3, a4, a5, a6);
  }
  else if ((v12 & 0x100) != 0)
  {
    v13 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
    if (v13)
    {
      v14 = 0;
      v15 = v13 >> 3;
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      do
        DeclareElemNamespace((const std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v14++) + 16), a2, a3, a4, a5, a6);
      while (v16 != v14);
    }
  }
  v19 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v19)
  {
    v20 = 0;
    v21 = v19 >> 3;
    if (v21 <= 1)
      v22 = 1;
    else
      v22 = v21;
    do
      DeclareUsedNamespaces(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v20++), a2, a3, a4, a5, a6);
    while (v22 != v20);
  }
  v23 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  if (v23)
  {
    v24 = 0;
    v25 = v23 >> 3;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v24);
      DeclareElemNamespace((const std::string *)(v27 + 16), a2, a3, a4, a5, a6);
      DeclareUsedNamespaces(v27, a2, a3, a4, a5, a6);
      ++v24;
    }
    while (v26 != v24);
  }
}

void DeclareOneNamespace(const std::string::value_type *a1, const std::string::value_type *a2, std::string *a3, std::string *a4, const std::string::value_type *a5, const std::string::value_type *a6, int a7)
{
  char *v12;
  std::string::size_type v13;
  char v14;
  std::string *v15;
  int64_t size;
  int v17;
  int v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  char *v23;
  int v24;
  void *v25;
  char *v26;
  char *v27;
  char *v28;
  const std::string::value_type *v29;
  const std::string::value_type *v30;
  std::string v33;

  memset(&v33, 0, sizeof(v33));
  std::string::basic_string[abi:ne180100]<0>(&v33, ":");
  std::string::append(&v33, a1);
  v12 = (char *)HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((char)v12 >= 0)
    v13 = (std::string::size_type)a3;
  else
    v13 = a3->__r_.__value_.__r.__words[0];
  v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v33;
  else
    v15 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_34;
  v29 = a2;
  v30 = a1;
  if ((char)v12 < 0)
    v12 = (char *)a3->__r_.__value_.__l.__size_;
  if ((uint64_t)v12 >= size)
  {
    v23 = &v12[v13];
    v24 = v15->__r_.__value_.__s.__data_[0];
    v25 = (void *)v13;
    do
    {
      v26 = &v12[-size];
      if (v26 == (char *)-1)
        break;
      v27 = (char *)memchr(v25, v24, (size_t)(v26 + 1));
      if (!v27)
        break;
      v28 = v27;
      if (!memcmp(v27, v15, size))
      {
        if (v28 != v23 && &v28[-v13] != (char *)-1)
          goto LABEL_34;
        break;
      }
      v25 = v28 + 1;
      v12 = (char *)(v23 - (v28 + 1));
    }
    while ((uint64_t)v12 >= size);
  }
  std::string::append(a4, a5);
  if (a7 >= 1)
  {
    v17 = a7 + 1;
    do
    {
      std::string::append(a4, a6);
      --v17;
    }
    while (v17 > 1);
  }
  std::string::append(a4, "xmlns:");
  std::string::append(a4, v30);
  v18 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
  v19 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if (v18 >= 0)
    v20 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  else
    v20 = a4->__r_.__value_.__l.__size_;
  v21 = v20 - 1;
  if (v18 < 0)
  {
    v22 = (std::string *)a4->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(a4->__r_.__value_.__r.__words[0] + v21) != 58)
    {
LABEL_32:
      std::string::push_back(a4, 61);
      goto LABEL_33;
    }
    v19 = a4->__r_.__value_.__l.__size_;
  }
  else
  {
    v22 = a4;
    if (a4->__r_.__value_.__s.__data_[v21] != 58)
      goto LABEL_32;
  }
  v22->__r_.__value_.__s.__data_[v19 - 1] = 61;
LABEL_33:
  std::string::push_back(a4, 34);
  std::string::append(a4, v29);
  std::string::push_back(a4, 34);
  std::string::append(a3, v30);
  v14 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
LABEL_34:
  if (v14 < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_188106C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void DeclareElemNamespace(const std::string *a1, std::string *a2, std::string *a3, const std::string::value_type *a4, const std::string::value_type *a5, int a6)
{
  std::string::size_type v12;
  std::string *v13;
  std::string *v14;
  _QWORD *exception;
  const char *v16;
  std::string v17;

  v12 = std::string::find(a1, 58, 0);
  if (v12 != -1)
  {
    memset(&v17, 0, sizeof(v17));
    std::string::basic_string(&v17, a1, 0, v12 + 1, (std::allocator<char> *)&v16);
    v16 = 0;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v17;
    else
      v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if (!XMP_NamespaceTable::GetURI((XMP_NamespaceTable *)sRegisteredNamespaces, (char *)v13, &v16, 0))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 7;
      exception[1] = "XMP_Enforce failed: (nsFound) in /Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPC"
                     "ore/source/XMPMeta-Serialize.cpp at line 191";
      *((_BYTE *)exception + 16) = 0;
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v17;
    else
      v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
    DeclareOneNamespace((const std::string::value_type *)v14, v16, a2, a3, a4, a5, a6);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_188106D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL CanBeRDFAttrProp(const XMP_Node *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + 16);
  if (*((char *)a1 + 39) < 0)
    v1 = (_QWORD *)*v1;
  if (*(_BYTE *)v1 == 91 || *((_QWORD *)a1 + 12) != *((_QWORD *)a1 + 13))
    return 0;
  if ((*((_DWORD *)a1 + 2) & 2) != 0)
    return 0;
  return (*((_DWORD *)a1 + 2) & 0x1F00) == 0;
}

std::string *AppendNodeValue(std::string *this, uint64_t a2, int a3)
{
  uint64_t v3;
  const std::string::value_type *v4;
  std::string *v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  unsigned __int8 v9;
  unsigned int v11;
  std::string *v13;
  const std::string::value_type *v14;
  std::string::value_type __s[6];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (const std::string::value_type *)a2;
  else
    v4 = *(const std::string::value_type **)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 1)
  {
    v6 = this;
    v7 = &v4[v3];
    do
    {
      v8 = 0;
      while (1)
      {
        v9 = v4[v8];
        if (v9 == 34 && a3 != 0)
        {
          std::string::append(v6, v4, v8);
          v13 = v6;
          v14 = "&quot;";
LABEL_34:
          this = std::string::append(v13, v14);
          goto LABEL_35;
        }
        if (v9 < 0x20u)
          break;
        v11 = v4[v8];
        if (v11 <= 0x3E && ((1 << v9) & 0x5000004000000000) != 0)
        {
          std::string::append(v6, v4, v8);
          switch(v11)
          {
            case '<':
              v13 = v6;
              v14 = "&lt;";
              break;
            case '>':
              v13 = v6;
              v14 = "&gt;";
              break;
            case '&':
              v13 = v6;
              v14 = "&amp;";
              break;
            default:
              AppendNodeValue();
          }
          goto LABEL_34;
        }
        if (&v4[++v8] >= v7)
        {
          this = std::string::append(v6, v4, v8);
          v4 += v8;
          goto LABEL_36;
        }
      }
      std::string::append(v6, v4, v8);
      if (v9 - 9 >= 2 && v9 != 13)
        AppendNodeValue();
      v18 = 0;
      v17 = 0;
      strcpy(__s, "&#xn;");
      __s[3] = a0123456789abcd[v9];
      this = std::string::append(v6, __s, 5uLL);
LABEL_35:
      v4 += v8 + 1;
LABEL_36:
      ;
    }
    while (v4 < v7);
  }
  return this;
}

BOOL IsRDFAttrQualifier(const void **a1)
{
  uint64_t v2;
  const char *v3;
  BOOL v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  const void *v8;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = "xml:lang";
  v4 = 1;
  v5 = 1u;
  do
  {
    v6 = strlen(v3);
    v7 = v6;
    if ((v2 & 0x80) != 0)
    {
      if ((const void *)v6 != a1[1])
        goto LABEL_9;
      if (v6 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v8 = *a1;
    }
    else
    {
      v8 = a1;
      if (v7 != v2)
        goto LABEL_9;
    }
    if (!memcmp(v8, v3, v7))
      return v4;
LABEL_9:
    v3 = sAttrQualifiers[v5];
    v4 = *v3 != 0;
    ++v5;
  }
  while (v5 != 6);
  return v4;
}

std::string *SerializeCanonicalRDFProperty(uint64_t a1, std::string *a2, const std::string::value_type *a3, std::string::value_type *a4, int a5, unsigned int a6, char a7)
{
  int v8;
  const std::string::value_type *v13;
  const std::string::value_type *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  BOOL v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  uint64_t v35;
  unsigned int v36;
  const std::string::value_type *v37;
  std::string *v38;
  const std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  const std::string::value_type *v48;
  std::string::size_type v49;
  const std::string::value_type *v50;
  uint64_t v51;
  const std::string::value_type *v52;
  int v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const std::string::value_type *v62;
  unsigned int v63;
  const std::string::value_type *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  BOOL v72;
  unsigned int v73;
  const std::string::value_type *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *exception;
  const char *v84;
  const std::string::value_type *v85;
  const std::string::value_type *v86;
  int v87;
  int v88;
  unsigned int v89;
  std::string v91;
  std::string v92;

  v8 = a5;
  v13 = (const std::string::value_type *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v13 = *(const std::string::value_type **)v13;
  if ((a7 & 1) != 0)
  {
    v14 = "rdf:value";
  }
  else if (*v13 == 91)
  {
    v14 = "rdf:li";
  }
  else
  {
    v14 = v13;
  }
  v87 = *(_DWORD *)(a1 + 8);
  if (a5 >= 1)
  {
    v15 = a5 + 1;
    do
    {
      std::string::append(a2, a4);
      --v15;
    }
    while (v15 > 1);
  }
  v89 = a6;
  std::string::push_back(a2, 60);
  std::string::append(a2, v14);
  v16 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  v88 = v8;
  if (!v16)
  {
    v18 = 0;
    goto LABEL_53;
  }
  v85 = v14;
  v86 = a3;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = v16 >> 3;
  if (v20 <= 1)
    v21 = 1;
  else
    v21 = v20;
  do
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v17);
    v23 = (_OWORD *)(v22 + 16);
    if (*(char *)(v22 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)(v22 + 16), *(_QWORD *)(v22 + 24));
    }
    else
    {
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = *v23;
      v92.__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 32);
    }
    v24 = IsRDFAttrQualifier((const void **)&v92.__r_.__value_.__l.__data_);
    v25 = v24;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v92.__r_.__value_.__l.__data_);
      if (!v25)
      {
LABEL_24:
        v19 = 1;
        goto LABEL_42;
      }
    }
    else if (!v24)
    {
      goto LABEL_24;
    }
    v26 = *(char *)(v22 + 39);
    if (v26 < 0)
    {
      if (*(_QWORD *)(v22 + 24) != 12)
      {
LABEL_33:
        v31 = 0;
        goto LABEL_34;
      }
      v27 = *(uint64_t **)v23;
    }
    else
    {
      v27 = (uint64_t *)(v22 + 16);
      if (v26 != 12)
        goto LABEL_33;
    }
    v28 = *v27;
    v29 = *((_DWORD *)v27 + 2);
    v31 = v28 == 0x6F7365723A666472 && v29 == 1701016181;
LABEL_34:
    v18 |= v31;
    if ((a7 & 1) == 0)
    {
      std::string::push_back(a2, 32);
      v32 = *(char *)(v22 + 39);
      if (v32 >= 0)
        v33 = (const std::string::value_type *)(v22 + 16);
      else
        v33 = *(const std::string::value_type **)(v22 + 16);
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(v22 + 39);
      else
        v34 = *(_QWORD *)(v22 + 24);
      std::string::append(a2, v33, v34);
      std::string::append(a2, "=\"");
      AppendNodeValue(a2, v22 + 40, 1);
      std::string::push_back(a2, 34);
    }
LABEL_42:
    ++v17;
  }
  while (v21 != v17);
  a3 = v86;
  if ((v19 & 1) == 0)
  {
    v14 = v85;
    v8 = v88;
LABEL_53:
    v38 = (std::string *)(v87 & 0x1F00);
    if ((v87 & 0x1F00) != 0)
    {
      if ((v87 & 0x200) != 0)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        v56 = v8 + 1;
        EmitRDFArrayTag(v38, a2, a3, a4, v8 + 1, (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 3, 1);
        if ((*(_BYTE *)(a1 + 9) & 0x10) != 0)
          NormalizeLangArray((std::string *)a1);
        v57 = *(_QWORD *)(a1 + 80);
        v58 = v57 - *(_QWORD *)(a1 + 72);
        if (v58)
        {
          v59 = 0;
          if ((unint64_t)(v58 >> 3) <= 1)
            v60 = 1;
          else
            v60 = v58 >> 3;
          do
            SerializeCanonicalRDFProperty(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v59++), a2, a3, a4, (v88 + 2), v89, 0);
          while (v60 != v59);
          v57 = *(_QWORD *)(a1 + 72);
          v61 = *(_QWORD *)(a1 + 80);
          v56 = v8 + 1;
        }
        else
        {
          v61 = *(_QWORD *)(a1 + 80);
        }
        EmitRDFArrayTag(v38, a2, a3, a4, v56, (unint64_t)(v61 - v57) >> 3, 0);
        goto LABEL_124;
      }
      if ((v18 & 1) != 0)
      {
        if ((v87 & 0x100) == 0)
          SerializeCanonicalRDFProperty();
        v39 = a3;
        v40 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
        if (!v40)
        {
LABEL_79:
          std::string::append(a2, "/>");
          a3 = v39;
          return std::string::append(a2, a3);
        }
        v41 = 0;
        v42 = v40 >> 3;
        if (v42 <= 1)
          v43 = 1;
        else
          v43 = v42;
        v44 = v8 + 2;
        while (1)
        {
          v45 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v41);
          if (!CanBeRDFAttrProp((const XMP_Node *)v45))
            break;
          std::string::append(a2, v39);
          if ((v8 & 0x80000000) == 0)
          {
            v46 = v44;
            do
            {
              std::string::append(a2, a4);
              --v46;
            }
            while (v46 > 1);
          }
          std::string::push_back(a2, 32);
          v47 = *(char *)(v45 + 39);
          if (v47 >= 0)
            v48 = (const std::string::value_type *)(v45 + 16);
          else
            v48 = *(const std::string::value_type **)(v45 + 16);
          if (v47 >= 0)
            v49 = *(unsigned __int8 *)(v45 + 39);
          else
            v49 = *(_QWORD *)(v45 + 24);
          std::string::append(a2, v48, v49);
          std::string::append(a2, "=\"");
          v52 = *(const std::string::value_type **)(v45 + 40);
          v51 = v45 + 40;
          v50 = v52;
          v53 = *(char *)(v51 + 23);
          if (v53 >= 0)
            v54 = (const std::string::value_type *)v51;
          else
            v54 = v50;
          if (v53 >= 0)
            v55 = *(unsigned __int8 *)(v51 + 23);
          else
            v55 = *(_QWORD *)(v51 + 8);
          std::string::append(a2, v54, v55);
          std::string::push_back(a2, 34);
          ++v41;
          v8 = v88;
          if (v41 == v43)
            goto LABEL_79;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 202;
        v84 = "Can't mix rdf:resource and complex fields";
LABEL_155:
        exception[1] = v84;
        *((_BYTE *)exception + 16) = 0;
      }
      if ((v87 & 0x100) == 0)
        SerializeCanonicalRDFProperty();
      if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
      {
        if (v89)
        {
          std::string::push_back(a2, 62);
          std::string::append(a2, a3);
          if (v8 < 0)
          {
            v64 = "<rdf:Description>";
          }
          else
          {
            v63 = v8 + 2;
            v64 = "<rdf:Description>";
            do
            {
              std::string::append(a2, a4);
              --v63;
            }
            while (v63 > 1);
          }
          ++v8;
        }
        else
        {
          v64 = " rdf:parseType=\"Resource\">";
        }
        std::string::append(a2, v64);
        std::string::append(a2, a3);
        v78 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
        if (v78)
        {
          v79 = 0;
          v80 = v78 >> 3;
          if (v80 <= 1)
            v81 = 1;
          else
            v81 = v80;
          do
            SerializeCanonicalRDFProperty(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v79++), a2, a3, a4, (v8 + 1), v89, 0);
          while (v81 != v79);
        }
        if (v89)
        {
          if (v8 >= 1)
          {
            v82 = v8 + 1;
            do
            {
              std::string::append(a2, a4);
              --v82;
            }
            while (v82 > 1);
          }
          std::string::append(a2, "</rdf:Description>");
          std::string::append(a2, a3);
          --v8;
        }
        goto LABEL_125;
      }
      if ((v89 & 1) != 0)
      {
        std::string::push_back(a2, 62);
        std::string::append(a2, a3);
        if ((v8 & 0x80000000) == 0)
        {
          v76 = v8 + 2;
          do
          {
            std::string::append(a2, a4);
            --v76;
          }
          while (v76 > 1);
        }
        v74 = "<rdf:Description/>";
LABEL_123:
        std::string::append(a2, v74);
        std::string::append(a2, a3);
        goto LABEL_125;
      }
      v62 = " rdf:parseType=\"Resource\"/>";
LABEL_138:
      std::string::append(a2, v62);
      return std::string::append(a2, a3);
    }
    if ((*(_BYTE *)(a1 + 8) & 2) != 0)
    {
      std::string::append(a2, " rdf:resource=\"");
      AppendNodeValue(a2, a1 + 40, 1);
      v62 = "\"/>";
      goto LABEL_138;
    }
    if (*(char *)(a1 + 63) < 0)
    {
      if (*(_QWORD *)(a1 + 48))
        goto LABEL_83;
    }
    else if (*(_BYTE *)(a1 + 63))
    {
LABEL_83:
      std::string::push_back(a2, 62);
      AppendNodeValue(a2, a1 + 40, 0);
      goto LABEL_128;
    }
    v62 = "/>";
    goto LABEL_138;
  }
  v14 = v85;
  v8 = v88;
  if ((a7 & 1) != 0)
    goto LABEL_53;
  if ((v18 & 1) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 202;
    v84 = "Can't mix rdf:resource and general qualifiers";
    goto LABEL_155;
  }
  v35 = v89;
  if (v89)
  {
    std::string::push_back(a2, 62);
    std::string::append(a2, v86);
    if (v88 < 0)
    {
      v37 = "<rdf:Description>";
      v8 = v88 + 1;
    }
    else
    {
      v36 = v88 + 2;
      v37 = "<rdf:Description>";
      do
      {
        std::string::append(a2, a4);
        --v36;
      }
      while (v36 > 1);
      v8 = v88 + 1;
      v35 = v89;
    }
  }
  else
  {
    v37 = " rdf:parseType=\"Resource\">";
  }
  std::string::append(a2, v37);
  std::string::append(a2, v86);
  v88 = v8;
  v65 = (v8 + 1);
  SerializeCanonicalRDFProperty(a1, a2, v86, a4, v65, v35, 1);
  v66 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96);
  if (v66)
  {
    v67 = 0;
    v68 = v66 >> 3;
    if (v68 <= 1)
      v69 = 1;
    else
      v69 = v68;
    while (1)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v67);
      if (*(char *)(v70 + 39) < 0)
        std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(v70 + 16), *(_QWORD *)(v70 + 24));
      else
        v91 = *(std::string *)(v70 + 16);
      v71 = IsRDFAttrQualifier((const void **)&v91.__r_.__value_.__l.__data_);
      v72 = v71;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (!v71)
        goto LABEL_113;
LABEL_114:
      if (v69 == ++v67)
        goto LABEL_118;
    }
    operator delete(v91.__r_.__value_.__l.__data_);
    if (v72)
      goto LABEL_114;
LABEL_113:
    SerializeCanonicalRDFProperty(v70, a2, v86, a4, v65, v89, 0);
    goto LABEL_114;
  }
LABEL_118:
  if (v89)
  {
    v8 = v88 - 1;
    if (v88 >= 1)
    {
      v73 = v88 + 1;
      do
      {
        std::string::append(a2, a4);
        --v73;
      }
      while (v73 > 1);
    }
    v74 = "</rdf:Description>";
    goto LABEL_123;
  }
LABEL_124:
  v8 = v88;
LABEL_125:
  if (v8 >= 1)
  {
    v75 = v8 + 1;
    do
    {
      std::string::append(a2, a4);
      --v75;
    }
    while (v75 > 1);
  }
LABEL_128:
  std::string::append(a2, "</");
  std::string::append(a2, v14);
  std::string::push_back(a2, 62);
  return std::string::append(a2, a3);
}

std::string *EmitRDFArrayTag(std::string *result, std::string *this, const std::string::value_type *a3, std::string::value_type *__s, int a5, int a6, int a7)
{
  __int16 v12;
  unsigned int v13;
  const std::string::value_type *v14;
  const char *v15;
  const std::string::value_type *v16;

  v12 = (__int16)result;
  if (a6 || a7)
  {
    if (a5 >= 1)
    {
      v13 = a5 + 1;
      do
      {
        std::string::append(this, __s);
        --v13;
      }
      while (v13 > 1);
    }
    if (a7)
      v14 = "<rdf:";
    else
      v14 = "</rdf:";
    std::string::append(this, v14);
    v15 = "Seq";
    if ((v12 & 0x400) == 0)
      v15 = "Bag";
    if ((v12 & 0x800) != 0)
      v16 = "Alt";
    else
      v16 = v15;
    std::string::append(this, v16);
    if (!a6 && (a7 & 1) != 0)
      std::string::push_back(this, 47);
    std::string::push_back(this, 62);
    return std::string::append(this, a3);
  }
  return result;
}

void XMPMeta::SerializeToBuffer()
{
  __assert_rtn("SerializeToBuffer", "XMPMeta-Serialize.cpp", 1213, "(newline != 0) && (indentStr != 0)");
}

void SerializeCompactRDFElemProps()
{
  __assert_rtn("SerializeCompactRDFElemProps", "XMPMeta-Serialize.cpp", 928, "propForm & kXMP_PropValueIsStruct");
}

void AppendNodeValue()
{
  __assert_rtn("AppendNodeValue", "XMPMeta-Serialize.cpp", 318, "(ch == ((char)0x09)) || (ch == ((char)0x0A)) || (ch == ((char)0x0D))");
}

{
  __assert_rtn("AppendNodeValue", "XMPMeta-Serialize.cpp", 334, "ch == '&'");
}

void SerializeCanonicalRDFProperty()
{
  __assert_rtn("SerializeCanonicalRDFProperty", "XMPMeta-Serialize.cpp", 637, "propForm & kXMP_PropValueIsStruct");
}

{
  __assert_rtn("SerializeCanonicalRDFProperty", "XMPMeta-Serialize.cpp", 596, "propForm & kXMP_PropValueIsStruct");
}

uint64_t DumpClearString(uint64_t result, uint64_t (*a2)(uint64_t, unsigned __int8 *, uint64_t), uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  int64_t v12;
  char v13;
  char v15;
  size_t v16;
  char v17;
  char __str[8];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__str = 0;
  v19 = 0;
  v20 = 0;
  v4 = *(unsigned __int8 *)(result + 23);
  v5 = (char)v4;
  v6 = (unsigned __int8 *)(result + v4);
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (unsigned __int8 *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v5 >= 0)
    v8 = (unsigned __int8 *)result;
  else
    v8 = *(unsigned __int8 **)result;
  if (v8 < v7)
  {
    result = 0;
    v10 = v8;
    do
    {
      do
      {
        if ((char)*v10 <= 31 && (*v10 - 9) > 1u)
          break;
        ++v10;
      }
      while (v10 < v7);
      if (v8 != v10)
        result = a2(a3, v8, ((_DWORD)v10 - (_DWORD)v8));
      if ((_DWORD)result)
        break;
      if (v10 >= v7)
      {
LABEL_32:
        result = 0;
      }
      else
      {
        v12 = v7 - v10;
        v13 = 1;
        while (1)
        {
          if ((char)*v10 > 31 || *v10 - 9 < 2)
          {
            if ((v13 & 1) != 0)
              goto LABEL_32;
            goto LABEL_34;
          }
          v15 = (v13 & 1) != 0 ? 60 : 32;
          v17 = v15;
          result = a2(a3, (unsigned __int8 *)&v17, 1);
          if ((_DWORD)result)
            break;
          snprintf(__str, 0x14uLL, "%.2X", *v10);
          v16 = strlen(__str);
          result = a2(a3, (unsigned __int8 *)__str, v16);
          if ((_DWORD)result)
            return result;
          v13 = 0;
          ++v10;
          if (!--v12)
          {
            v10 = v7;
            goto LABEL_34;
          }
        }
        if ((v13 & 1) != 0)
          goto LABEL_35;
LABEL_34:
        result = a2(a3, ">", 1);
        if ((_DWORD)result)
          return result;
      }
LABEL_35:
      v8 = v10;
    }
    while (v10 < v7);
  }
  return result;
}

void XMP_NamespaceTable::XMP_NamespaceTable(XMP_NamespaceTable *this, const XMP_NamespaceTable *a2)
{
  XMP_ReadWriteLock *v4;

  *(_QWORD *)this = &off_1E1BB1880;
  XMP_ReadWriteLock::XMP_ReadWriteLock((XMP_NamespaceTable *)((char *)this + 8));
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 32) = 0;
  v4 = (const XMP_NamespaceTable *)((char *)a2 + 8);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)((char *)a2 + 8), 0);
  if (this != a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 27, *((__int128 **)a2 + 27), (__int128 *)a2 + 14);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 30, *((__int128 **)a2 + 30), (__int128 *)((char *)a2 + 248));
  }
  XMP_AutoLock::~XMP_AutoLock(&v4);
}

void sub_188107DBC(_Unwind_Exception *a1)
{
  XMP_ReadWriteLock *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *v5);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *v4);
  XMP_ReadWriteLock::~XMP_ReadWriteLock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_188107EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v18 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_18810804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a2, v7);
  v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1881081F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_188108264(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1881082F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1881083CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void XMP_ReadWriteLock::Release()
{
  __assert_rtn("Release", "XMP_LibUtils.cpp", 114, "this->lockCount > 0");
}

char *AdobeXMPCommon::IError_v1::MakeShared@<X0>(char *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  _QWORD *v5;

  if (this)
  {
    v4 = this;
    v5 = (_QWORD *)operator new();
    v5[1] = v4;
    v5[2] = &unk_1E1BB3400;
    *v5 = off_1E1BB32B8;
    (**(void (***)(char *))&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)])(&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)]);
    return (char *)std::shared_ptr<AdobeXMPCommon::IError_v1>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IErrorProxy,void>(a2, v5);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void AdobeXMPCommon::IErrorProxy::Acquire(AdobeXMPCommon::IErrorProxy *this)
{
  __assert_rtn("Acquire", "IError.cpp", 40, "false");
}

void AdobeXMPCommon::IErrorProxy::Release(AdobeXMPCommon::IErrorProxy *this)
{
  __assert_rtn("Release", "IError.cpp", 42, "false");
}

uint64_t AdobeXMPCommon::IErrorProxy::GetISharedObject_I(AdobeXMPCommon::IErrorProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 56);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
}

void AdobeXMPCommon::IErrorProxy::~IErrorProxy(AdobeXMPCommon::IErrorProxy *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E1BB32B8;
  *((_QWORD *)this + 2) = &unk_1E1BB3400;
  v1 = *((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E1BB32B8;
  *((_QWORD *)this + 2) = &unk_1E1BB3400;
  v1 = *((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x18D761C30);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetCode(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0xD0, 1);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetDomain(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0xD8, 1);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetSeverity(AdobeXMPCommon::IErrorProxy *this)
{
  return AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorSeverity,unsigned int>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0xE0, 1);
}

double AdobeXMPCommon::IErrorProxy::GetMessage@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, _OWORD *a2@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0xE8, 1, a2);
}

double AdobeXMPCommon::IErrorProxy::GetLocation@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, _OWORD *a2@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, AdobeXMPCommon::IError_v1 **))0xF0, 1, a2);
}

double AdobeXMPCommon::IErrorProxy::GetParameter@<D0>(AdobeXMPCommon::IErrorProxy *this@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>(*((_QWORD *)this + 1), (uint64_t (*)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **))0xF8, 1, a2, a3);
}

uint64_t AdobeXMPCommon::IErrorProxy::GetParametersCount(AdobeXMPCommon::IErrorProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

char *AdobeXMPCommon::IErrorProxy::GetNextError@<X0>(AdobeXMPCommon::IErrorProxy *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v6;

  v6 = 0;
  v3 = (char *)(*(uint64_t (**)(_QWORD, AdobeXMPCommon::IError_v1 **))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1), &v6);
  if (v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v6, exception);
  }
  return AdobeXMPCommon::IError_v1::MakeShared(v3, a2);
}

void sub_1881086E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *AdobeXMPCommon::IErrorProxy::SetNextError@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v9;

  v9 = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 200))(*a2);
  else
    v5 = 0;
  v6 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))(*(_QWORD *)v4 + 264))(v4, v5, &v9);
  if (v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v9, exception);
  }
  return AdobeXMPCommon::IError_v1::MakeShared(v6, a3);
}

void sub_188108798(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::IErrorProxy::SetMessage(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::SetLocation(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const char *a2)
{
  return (*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, void *a2)
{
  return (*(uint64_t (**)(_QWORD, void *))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, const unsigned int *))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const unint64_t *a2)
{
  return (*(uint64_t (**)(_QWORD, const unint64_t *))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const int *a2)
{
  return (*(uint64_t (**)(_QWORD, const int *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const uint64_t *a2)
{
  return (*(uint64_t (**)(_QWORD, const uint64_t *))(**((_QWORD **)this + 1) + 168))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const float *a2)
{
  return (*(uint64_t (**)(_QWORD, const float *))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this, const double *a2)
{
  return (*(uint64_t (**)(_QWORD, const double *))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1), a2);
}

uint64_t AdobeXMPCommon::IErrorProxy::AppendParameter(AdobeXMPCommon::IErrorProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
}

uint64_t AdobeXMPCommon::IErrorProxy::GetActualIError(AdobeXMPCommon::IErrorProxy *this)
{
  return *((_QWORD *)this + 1);
}

void AdobeXMPCommon::IErrorProxy::getCode()
{
  __assert_rtn("getCode", "IError.cpp", 61, "false");
}

void AdobeXMPCommon::IErrorProxy::getDomain()
{
  __assert_rtn("getDomain", "IError.cpp", 71, "false");
}

void AdobeXMPCommon::IErrorProxy::getSeverity()
{
  __assert_rtn("getSeverity", "IError.cpp", 81, "false");
}

void AdobeXMPCommon::IErrorProxy::getMessage()
{
  __assert_rtn("getMessage", "IError.cpp", 91, "false");
}

void AdobeXMPCommon::IErrorProxy::getLocation()
{
  __assert_rtn("getLocation", "IError.cpp", 101, "false");
}

void AdobeXMPCommon::IErrorProxy::getParameter()
{
  __assert_rtn("getParameter", "IError.cpp", 111, "false");
}

void AdobeXMPCommon::IErrorProxy::getNextError()
{
  __assert_rtn("getNextError", "IError.cpp", 127, "false");
}

void AdobeXMPCommon::IErrorProxy::setNextError()
{
  __assert_rtn("setNextError", "IError.cpp", 139, "false");
}

uint64_t AdobeXMPCommon::IErrorProxy::GetInterfacePointer(AdobeXMPCommon::IErrorProxy *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3)
    v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 64);
  else
    v4 = 0;
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x18, 1, a2, a3);
}

void AdobeXMPCommon::IErrorProxy::getInterfacePointer()
{
  __assert_rtn("getInterfacePointer", "IError.cpp", 51, "false");
}

void `virtual thunk to'AdobeXMPCommon::IErrorProxy::~IErrorProxy(AdobeXMPCommon::IErrorProxy *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_1E1BB32B8;
  v1[2] = &unk_1E1BB3400;
  v2 = v1[1] + *(_QWORD *)(*(_QWORD *)v1[1] - 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = off_1E1BB32B8;
  v1[2] = &unk_1E1BB3400;
  v2 = v1[1] + *(_QWORD *)(*(_QWORD *)v1[1] - 56);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x18D761C30);
}

uint64_t `virtual thunk to'AdobeXMPCommon::IErrorProxy::GetInterfacePointer(AdobeXMPCommon::IErrorProxy *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32) + 8);
  if (v3)
    v4 = (uint64_t)v3 + *(_QWORD *)(*v3 - 64);
  else
    v4 = 0;
  return AdobeXMPCommon::CallSafeFunction<AdobeXMPCommon::IVersionable,void *,void *,unsigned long long,unsigned int>(v4, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, AdobeXMPCommon::IError_v1 **))0x18, 1, a2, a3);
}

void `virtual thunk to'AdobeXMPCommon::IErrorProxy::getInterfacePointer()
{
  __assert_rtn("getInterfacePointer", "IError.cpp", 51, "false");
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,unsigned int,unsigned int>(uint64_t a1, uint64_t (*a2)(_QWORD *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, AdobeXMPCommon::IError_v1 **);
  _QWORD *v4;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v7;

  v3 = a2;
  v7 = 0;
  v4 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  result = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_188108BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorDomain,unsigned int>(uint64_t a1, uint64_t (*a2)(_QWORD *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, AdobeXMPCommon::IError_v1 **);
  _QWORD *v4;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v7;

  v3 = a2;
  v7 = 0;
  v4 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  result = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_188108C58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCommon::CallConstSafeFunction<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IError_v1::eErrorSeverity,unsigned int>(uint64_t a1, uint64_t (*a2)(_QWORD *, AdobeXMPCommon::IError_v1 **), uint64_t a3)
{
  uint64_t (*v3)(_QWORD *, AdobeXMPCommon::IError_v1 **);
  _QWORD *v4;
  uint64_t result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v7;

  v3 = a2;
  v7 = 0;
  v4 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, AdobeXMPCommon::IError_v1 **))(*v4 + a2);
  LODWORD(result) = v3(v4, &v7);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v7, exception);
  }
  return result;
}

void sub_188108CE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD *, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t (*v4)(_QWORD *, AdobeXMPCommon::IError_v1 **);
  _QWORD *v6;
  uint64_t *v7;
  double result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v10;
  __int128 v11;

  v4 = a2;
  v10 = 0;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, AdobeXMPCommon::IError_v1 **))(*v6 + a2);
  v7 = (uint64_t *)v4(v6, &v10);
  if (v10)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v10, exception);
  }
  AdobeXMPCommon::IUTF8String_v1::MakeShared(v7, (uint64_t *)&v11);
  result = *(double *)&v11;
  *a4 = v11;
  return result;
}

void sub_188108D88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AdobeXMPCommon::CallConstSafeFunctionReturningPointer<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const,unsigned long long>@<D0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t (*v5)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **);
  _QWORD *v7;
  uint64_t *v8;
  double result;
  _OWORD *exception;
  AdobeXMPCommon::IError_v1 *v11;
  __int128 v12;

  v5 = a2;
  v11 = 0;
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, AdobeXMPCommon::IError_v1 **))(*v7 + a2);
  v8 = (uint64_t *)v5(v7, a4, &v11);
  if (v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    AdobeXMPCommon::IError_v1::MakeShared(v11, exception);
  }
  AdobeXMPCommon::IUTF8String_v1::MakeShared(v8, (uint64_t *)&v12);
  result = *(double *)&v12;
  *a5 = v12;
  return result;
}

void sub_188108E2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AdobeXMPCommon::IError_v1>::shared_ptr[abi:ne180100]<AdobeXMPCommon::IErrorProxy,void>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  _QWORD *v5;

  if (a2)
    v4 = (char *)a2 + *(_QWORD *)(*a2 - 304);
  else
    v4 = 0;
  *a1 = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E1BBC490;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = a2;
  a1[1] = v5;
  return a1;
}

void sub_188108EB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCommon::IErrorProxy *,std::shared_ptr<AdobeXMPCommon::IError_v1>::__shared_ptr_default_delete<AdobeXMPCommon::IError_v1,AdobeXMPCommon::IErrorProxy>,std::allocator<AdobeXMPCommon::IErrorProxy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *AdobeXMPCore_Int::IPath_I::GetInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x6350617468202020)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 200));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x6350617468202020, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 0x2Au, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x6350617468202020, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 0x30u, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_188109044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IPath_I::GetInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IPath_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IPath_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IPath_I::getInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPath_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0xA8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 26, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IPath_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IPath_I::getInterfacePointer(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IPath_I::getInterfacePointer((AdobeXMPCore_Int::IPath_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IPath_I::registerNameSpacePrefixMap(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::INameSpacePrefixMap_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 200);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a2, a2, &v12);
  v11 = v12;
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::INameSpacePrefixMap_v1 const*,AdobeXMPCore::INameSpacePrefixMap_v1 const,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x28, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 54, (uint64_t)&v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_18810925C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::INameSpacePrefixMap_v1 const*,AdobeXMPCore::INameSpacePrefixMap_v1 const,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x634E5350724D6170, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_18810937C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188109360);
}

void sub_188109478(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IPath_I::serialize(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::INameSpacePrefixMap_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 200);
  AdobeXMPCore::INameSpacePrefixMap_v1::MakeShared(a2, a2, &v12);
  v11 = v12;
  v6 = AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x30, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 59, (uint64_t)&v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_18810953C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCommon::IUTF8String_v1 *,AdobeXMPCommon::IUTF8String_v1,std::shared_ptr<AdobeXMPCore::INameSpacePrefixMap_v1 const> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_18810965C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188109640);
}

void sub_188109758(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IPath_I::appendPathSegment(AdobeXMPCore_Int::IPath_I *this, const AdobeXMPCore::IPathSegment_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)this - 200);
  AdobeXMPCore::IPathSegment_v1::MakeShared(a2, a2, &v10);
  v9 = v10;
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IPath_v1,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(_QWORD *, uint64_t))0x38, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 64, (uint64_t)&v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_188109814(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IPath_v1,std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const> const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

uint64_t AdobeXMPCore_Int::IPath_I::removePathSegment(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 200), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x40, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 69, a2);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x6350617468536567, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_188109A48(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188109A2CLL);
}

void sub_188109B44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IPath_I::getPathSegment(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 200), (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x48, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 74, a2);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPathSegment_v1 const*,AdobeXMPCore::IPathSegment_v1 const,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x6350617468536567, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_188109C9C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188109C80);
}

void sub_188109D98(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IPath_I::clone(AdobeXMPCore_Int::IPath_I *this, uint64_t a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,AdobeXMPCore::IPath_v1,unsigned long long,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 200), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0x60, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IPath_I.cpp", 79, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IPath_v1,AdobeXMPCore::IPath_v1*,AdobeXMPCore::IPath_v1,unsigned long long,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x6350617468202020, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_188109EFC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188109EE0);
}

void sub_188109FF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

__n128 XIO::SplitLeafName(std::string *this, std::string *a2)
{
  std::string::size_type size;
  std::string::size_type v5;
  std::string *v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  __n128 result;
  std::string::size_type v11;
  std::string *v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  std::string *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type v19;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (!size)
    {
LABEL_9:
      std::string::erase(a2, 0, 0xFFFFFFFFFFFFFFFFLL);
      v7 = this;
      v8 = 0;
LABEL_27:
      std::string::erase(v7, v8, 0xFFFFFFFFFFFFFFFFLL);
      return result;
    }
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      goto LABEL_9;
  }
  v5 = size - 1;
  if (size == 1)
  {
    v6 = this;
    if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v6->__r_.__value_.__s.__data_[0] == 47)
      goto LABEL_9;
  }
  v9 = this;
  if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v9->__r_.__value_.__s.__data_[v5] == 47)
    std::string::erase(this, v5, 0xFFFFFFFFFFFFFFFFLL);
  v11 = size - 2;
  if (v11)
  {
    do
    {
      v12 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      v13 = v12->__r_.__value_.__s.__data_[v11];
      v14 = v13 == 47;
      v15 = v13 != 47;
      if (v14)
        break;
      --v11;
    }
    while (v11);
  }
  else
  {
    v15 = 1;
  }
  v16 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (v16->__r_.__value_.__s.__data_[v11] == 47)
  {
    v17 = this;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v17 = (std::string *)this->__r_.__value_.__r.__words[0];
    MEMORY[0x18D761A14](a2, (char *)&v17->__r_.__value_.__l.__data_ + v11 + 1);
    v7 = this;
    v8 = v11;
    goto LABEL_27;
  }
  if (v15)
  {
    std::string::erase(a2, 0, 0xFFFFFFFFFFFFFFFFLL);
    v18 = a2->__r_.__value_.__r.__words[2];
    result = *(__n128 *)&a2->__r_.__value_.__l.__data_;
    v19 = this->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v19;
    *(__n128 *)&this->__r_.__value_.__l.__data_ = result;
    this->__r_.__value_.__r.__words[2] = v18;
  }
  return result;
}

std::string *XIO::SplitFileExtension(std::string *a1, std::string *this, int a3)
{
  std::string *result;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  int v11;
  std::string *v12;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;

  result = std::string::erase(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    if (!size)
      return result;
  }
  else
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
      return result;
  }
  v8 = size - 1;
  do
  {
    v9 = v8;
    if (!v8)
      break;
    v10 = a1;
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
      v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
    v11 = v10->__r_.__value_.__s.__data_[v9];
    v8 = v9 - 1;
  }
  while (v11 != 46);
  v12 = a1;
  if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
    v12 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v12->__r_.__value_.__s.__data_[v9] == 46)
  {
    v13 = a1;
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
      v13 = (std::string *)a1->__r_.__value_.__r.__words[0];
    MEMORY[0x18D761A14](this, (char *)&v13->__r_.__value_.__l.__data_ + v9 + 1);
    if (!a3)
      return std::string::erase(a1, v9, 0xFFFFFFFFFFFFFFFFLL);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = this->__r_.__value_.__l.__size_;
      if (!v14)
        return std::string::erase(a1, v9, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      v14 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
        return std::string::erase(a1, v9, 0xFFFFFFFFFFFFFFFFLL);
    }
    v15 = 0;
    do
    {
      v16 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v16 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v16->__r_.__value_.__s.__data_[v15] - 65 <= 0x19)
      {
        v17 = this;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          v17 = (std::string *)this->__r_.__value_.__r.__words[0];
        v17->__r_.__value_.__s.__data_[v15] += 32;
      }
      ++v15;
    }
    while (v14 != v15);
    return std::string::erase(a1, v9, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void XIO::Copy(uint64_t a1, uint64_t a2)
{
  void (***v2)(_QWORD, _BYTE *, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t);
  unint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD, _BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  BOOL v13;
  _QWORD *exception;
  _BYTE v15[65536];
  uint64_t v16;

  MEMORY[0x1E0C80A78](a1, a2);
  v16 = *MEMORY[0x1E0C80C00];
  if (v4 >= 1)
  {
    v7 = v6;
    v8 = v5;
    v9 = v4;
    v10 = v3;
    v11 = v2;
    bzero(v15, 0x10000uLL);
    do
    {
      if (v8 && v8(v7))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 12;
        exception[1] = "XIO::Copy, user abort";
        *((_BYTE *)exception + 16) = 0;
      }
      if (v9 >= 0x10000)
        v12 = 0x10000;
      else
        v12 = v9;
      (**v11)(v11, v15, v12, 1);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v10 + 8))(v10, v15, v12);
      v13 = (uint64_t)v9 <= v12;
      v9 -= v12;
    }
    while (!v13);
  }
}

uint64_t XMP_ProgressTracker::XMP_ProgressTracker(uint64_t result, __int128 *a2)
{
  __int128 v2;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1065353216;
  *(_BYTE *)(result + 28) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    if (!*(_QWORD *)a2)
      XMP_ProgressTracker::XMP_ProgressTracker();
    v2 = *a2;
    *(_OWORD *)(result + 13) = *(__int128 *)((char *)a2 + 13);
    *(_OWORD *)result = v2;
    if (*(float *)(result + 24) < 0.0)
      *(_DWORD *)(result + 24) = 1065353216;
  }
  return result;
}

void XMP_ProgressTracker::BeginWork(XMP_ProgressTracker *this, float a2)
{
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  if (a2 < 0.0)
    a2 = 0.0;
  *((float *)this + 9) = a2;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 32) = 1;
  v3 = PerfUtils::NoteThisMoment();
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = v3;
  if (*((_BYTE *)this + 28))
    XMP_ProgressTracker::NotifyClient(this, 1, v4, v5, v6);
}

void XMP_ProgressTracker::NotifyClient(XMP_ProgressTracker *this, int a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, __n128, __n128, __n128);
  float v8;
  PerfUtils *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  _QWORD *exception;

  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
    if (!*(_QWORD *)this)
      XMP_ProgressTracker::NotifyClient();
    if (*((float *)this + 9) < 0.0 || (v8 = *((float *)this + 10), v8 < 0.0) || *((float *)this + 6) < 0.0)
      XMP_ProgressTracker::NotifyClient();
    if (a2)
    {
      if (v8 <= 0.0)
      {
        a3.n128_u32[0] = 0;
        a4.n128_u32[0] = 0;
      }
      else
      {
        v9 = (PerfUtils *)*((_QWORD *)this + 6);
        v10 = PerfUtils::NoteThisMoment();
        a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(v9, v10);
        a3.n128_f32[0] = a3.n128_f64[0];
        v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
        v6 = *((_QWORD *)this + 1);
        a4.n128_u32[0] = 1.0;
      }
      v15 = *((_QWORD *)this + 2);
      a5.n128_u32[0] = 0;
    }
    else
    {
      v11 = PerfUtils::NoteThisMoment();
      a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(*((PerfUtils **)this + 7), v11);
      a3.n128_f32[0] = a3.n128_f64[0];
      if (*((float *)this + 6) > a3.n128_f32[0])
        return;
      v12 = *((float *)this + 9);
      a5.n128_u32[0] = 0;
      if (v12 <= 0.0)
      {
        v14 = 0.0;
      }
      else
      {
        v13 = *((float *)this + 10);
        v14 = 0.0;
        if (v13 > 0.0)
        {
          if ((float)(v13 / v12) <= 1.0)
            v14 = v13 / v12;
          else
            v14 = 1.0;
          a3.n128_f64[0] = PerfUtils::GetElapsedSeconds(*((PerfUtils **)this + 6), v11);
          a3.n128_f32[0] = a3.n128_f64[0];
          a5.n128_f32[0] = (float)(1.0 - v14) * (float)(a3.n128_f32[0] / v14);
        }
      }
      *((_QWORD *)this + 7) = v11;
      v7 = *(unsigned int (**)(uint64_t, uint64_t, __n128, __n128, __n128))this;
      v6 = *((_QWORD *)this + 1);
      v15 = *((_QWORD *)this + 2);
      a4.n128_f32[0] = v14;
    }
    if (!v7(v6, v15, a3, a4, a5))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 16;
      exception[1] = "Abort signaled by progress reporting callback";
      *((_BYTE *)exception + 16) = 0;
    }
  }
}

float XMP_ProgressTracker::AddTotalWork(XMP_ProgressTracker *this, float a2)
{
  float result;

  if (a2 < 0.0)
    a2 = 0.0;
  result = a2 + *((float *)this + 9);
  *((float *)this + 9) = result;
  return result;
}

float XMP_ProgressTracker::AddWorkDone(XMP_ProgressTracker *this, __n128 a2, __n128 a3, __n128 a4)
{
  float result;

  if (a2.n128_f32[0] < 0.0)
    a2.n128_f32[0] = 0.0;
  a3.n128_u32[0] = *((_DWORD *)this + 10);
  a2.n128_f32[0] = a2.n128_f32[0] + a3.n128_f32[0];
  *((_DWORD *)this + 10) = a2.n128_u32[0];
  XMP_ProgressTracker::NotifyClient(this, 0, a2, a3, a4);
  return result;
}

void XMP_ProgressTracker::WorkComplete(XMP_ProgressTracker *this, __n128 _Q0, __n128 a3, __n128 a4)
{
  _Q0.n128_u32[0] = *((_DWORD *)this + 9);
  if (_Q0.n128_f32[0] == 0.0)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)((char *)this + 36) = _Q0.n128_u64[0];
  }
  else
  {
    *((_DWORD *)this + 10) = _Q0.n128_u32[0];
    if (_Q0.n128_f32[0] <= 0.0)
      XMP_ProgressTracker::WorkComplete();
  }
  XMP_ProgressTracker::NotifyClient(this, *((unsigned __int8 *)this + 28), _Q0, a3, a4);
  *((_BYTE *)this + 32) = 0;
}

void XMP_ProgressTracker::XMP_ProgressTracker()
{
  __assert_rtn("XMP_ProgressTracker", "XMP_ProgressTracker.cpp", 26, "_cbInfo.wrapperProc != 0");
}

void XMP_ProgressTracker::NotifyClient()
{
  __assert_rtn("NotifyClient", "XMP_ProgressTracker.cpp", 125, "this->cbInfo.wrapperProc != 0");
}

{
  __assert_rtn("NotifyClient", "XMP_ProgressTracker.cpp", 126, "(this->totalWork >= 0.0) && (this->workDone >= 0.0) && (this->cbInfo.interval >= 0.0)");
}

void XMP_ProgressTracker::WorkComplete()
{
  __assert_rtn("WorkComplete", "XMP_ProgressTracker.cpp", 84, "this->workDone > 0.0");
}

uint64_t AdobeXMPCore_Int::RDFDOMSerializerImpl::clone(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  AdobeXMPCore_Int::RDFDOMSerializerImpl *v1;

  v1 = (AdobeXMPCore_Int::RDFDOMSerializerImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x70);
  AdobeXMPCore_Int::RDFDOMSerializerImpl::RDFDOMSerializerImpl(v1);
  if (v1)
    return (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 48);
  else
    return 0;
}

void sub_18810A794(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::Serialize(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  unsigned __int8 v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int8 v14;
  int v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  AdobeXMPCore_Int::IUTF8String_I *p_p;
  const char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  int v35;
  unsigned __int8 v36;
  unsigned __int8 v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  void *__p;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unsigned __int8 v50;

  v47 = 0;
  v48 = 0;
  v5 = AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(a2, 0, a3);
  std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(&v47, v5);
  __p = 0;
  v45 = 0;
  v46 = 0;
  v43 = 0;
  v6 = (char *)a1 + *(_QWORD *)(*a1 - 72);
  v50 = 0;
  v42 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &AdobeXMPCore_Int::Serializer::kAllowedKeys, &v50);
  v41 = v50;
  v40 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03340, &v50);
  v39 = v50;
  v38 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03348, &v50);
  v35 = v50;
  v36 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03350, &v50);
  v7 = v50;
  v8 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03358, &v50);
  v9 = v50;
  v10 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03360, &v50);
  v11 = v50;
  v12 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03368, &v50);
  v13 = v50;
  v14 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03370, &v50);
  v15 = v50;
  v16 = (*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03378, &v50);
  if ((v42 & (v41 != 0)) != 0)
    v17 = 16;
  else
    v17 = 0;
  if ((v40 & (v39 != 0)) != 0)
    v18 = v17 | 0x20;
  else
    v18 = v17;
  if ((v38 & (v35 != 0)) != 0)
    v19 = v18 | 0x40;
  else
    v19 = v18;
  if ((v36 & (v7 != 0)) != 0)
    v20 = v19 | 0x80;
  else
    v20 = v19;
  if ((v8 & (v9 != 0)) != 0)
    v21 = v20 | 0x100;
  else
    v21 = v20;
  if ((v10 & (v11 != 0)) != 0)
    v22 = v21 | 0x200;
  else
    v22 = v21;
  if ((v12 & (v13 != 0)) != 0)
    v23 = v22 | 0x800;
  else
    v23 = v22;
  if ((v14 & (v15 != 0)) != 0)
    v24 = v23 | 0x1000;
  else
    v24 = v23;
  if ((v16 & (v50 == 0)) != 0)
    v25 = v24 | 0x2000;
  else
    v25 = v24;
  v49 = 8;
  if (((*(uint64_t (**)(char *, void *, unsigned __int8 *))(*(_QWORD *)v6 + 64))(v6, &unk_1EDF03388, &v50) & 1) == 0)
    v50 = 0;
  if (((*(uint64_t (**)(char *, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 72))(v6, &qword_1EDF03380, &v49) & 1) != 0)
  {
    if (v49 == 32)
    {
      v26 = v50;
      v27 = v25 | 5;
      v28 = v25 | 4;
LABEL_36:
      if (v26)
        v25 = v28;
      else
        v25 = v27;
      goto LABEL_39;
    }
    if (v49 == 16)
    {
      v26 = v50;
      v27 = v25 | 3;
      v28 = v25 | 2;
      goto LABEL_36;
    }
  }
  else
  {
    v49 = 8;
  }
LABEL_39:
  if ((*(unsigned int (**)(char *, void *, uint64_t *))(*(_QWORD *)v6 + 72))(v6, &unk_1EDF03390, &v43))
  {
    v29 = v43;
  }
  else
  {
    v29 = 2048;
    v43 = 2048;
  }
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, const char *, const char *, _QWORD))(*(_QWORD *)v47 + 208))(v47, &__p, v25, v29, "", "", 0);
  *a4 = 0;
  a4[1] = 0;
  if (v46 >= 0)
    p_p = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
  else
    p_p = (AdobeXMPCore_Int::IUTF8String_I *)__p;
  if (v46 >= 0)
    v31 = (const char *)HIBYTE(v46);
  else
    v31 = v45;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(p_p, v31, a4);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  v32 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_18810AB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::Serialize(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  AdobeXMPCore_Int::RDFDOMSerializerImpl::Serialize((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::RDFDOMSerializerImpl::ValidateValue(uint64_t a1, _QWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;

  if (*a2 == qword_1EDF03380
    && (a3 != 2 || (*a4 <= 0x20uLL ? (v4 = ((1 << *a4) & 0x100010100) == 0) : (v4 = 1), v4)))
  {
    return 5;
  }
  else
  {
    return 0;
  }
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::ValidateValue(uint64_t a1, _QWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;

  if (*a2 == qword_1EDF03380
    && (a3 != 2 || (*a4 <= 0x20uLL ? (v4 = ((1 << *a4) & 0x100010100) == 0) : (v4 = 1), v4)))
  {
    return 5;
  }
  else
  {
    return 0;
  }
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::SerializeInternal(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v14;
  AdobeXMPCore_Int::IUTF8String_I *p_p;
  const char *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v23 = 0;
  v24 = 0;
  v14 = AdobeXMPCore_Int::IMetadataConverterUtils_I::convertIMetadatatoXMPMeta(a1, a2, a7);
  std::shared_ptr<XMPMeta>::shared_ptr[abi:ne180100]<XMPMeta,void>(&v23, v14);
  __p = 0;
  v21 = 0;
  v22 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 208))(v23, &__p, a2, a3, a4, a5, a6);
  *a8 = 0;
  a8[1] = 0;
  if (v22 >= 0)
    p_p = (AdobeXMPCore_Int::IUTF8String_I *)&__p;
  else
    p_p = (AdobeXMPCore_Int::IUTF8String_I *)__p;
  if (v22 >= 0)
    v16 = (const char *)HIBYTE(v22);
  else
    v16 = v21;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(p_p, v16, a8);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
  v17 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_18810AD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  AdobeXMPCore_Int::DOMSerializerImpl::~DOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + 8), (uint64_t *)&off_1E1BAAC00);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + 88), (uint64_t *)&off_1E1BAACE0);
  AdobeXMPCore_Int::ConfigurableImpl::~ConfigurableImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + 32), (uint64_t *)&off_1E1BAACC8);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl(AdobeXMPCore_Int::RDFDOMSerializerImpl *this)
{
  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::RDFDOMSerializerImpl::~RDFDOMSerializerImpl((AdobeXMPCore_Int::RDFDOMSerializerImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

uint64_t PSIR_MemoryReader::GetImgRsrc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  __int128 v11;

  v5 = *(_QWORD *)(a1 + 32);
  v3 = a1 + 32;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(unsigned __int16 *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(unsigned __int16 *)(v6 + 32) > a2)
    return 0;
  if (a3)
  {
    v11 = *(_OWORD *)(v6 + 40);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v6 + 56);
    *(_OWORD *)a3 = v11;
  }
  return 1;
}

void PSIR_MemoryReader::ParseMemoryResources(PSIR_MemoryReader *this, char *a2, unsigned int a3, char a4)
{
  _QWORD *v8;
  char **v9;
  uint64_t v10;
  void *v11;
  unsigned int *i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  int v20;
  char **v21;
  char **v22;
  unsigned int v23;
  BOOL v24;
  char **v25;
  BOOL v26;
  _QWORD *exception;
  const char *v28;
  __int128 v29;
  unsigned int *v30;
  int v31;
  int v32;

  if (*((_BYTE *)this + 8))
    free(*((void **)this + 2));
  v9 = (char **)((char *)this + 32);
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  std::__tree<unsigned long long>::destroy((uint64_t)this + 24, v8);
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if (a3)
  {
    if ((a4 & 1) != 0)
    {
      if (a3 >= 0x6400001)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 209;
        v28 = "Outrageous length for memory-based PSIR";
      }
      else
      {
        v10 = a3;
        v11 = malloc_type_malloc(a3, 0xB7B75A40uLL);
        *((_QWORD *)this + 2) = v11;
        if (v11)
        {
          memcpy(v11, a2, a3);
          *((_BYTE *)this + 8) = 1;
          a2 = (char *)*((_QWORD *)this + 2);
LABEL_10:
          *((_DWORD *)this + 3) = a3;
          for (i = (unsigned int *)&a2[v10]; a2 <= (char *)i - 12; a2 = (char *)v15 + (((_DWORD)v17 + 1) & 0xFFFFFFFE))
          {
            v13 = (unsigned int *)&a2[((a2[6] + 2) & 0x1FE) + 6];
            if (v13 > i - 1)
              break;
            v16 = *v13;
            v15 = v13 + 1;
            v14 = v16;
            v17 = bswap32(v16);
            if (v17 > a3 || v15 > (unsigned int *)((char *)i - v17))
              break;
            if (*(_DWORD *)a2 == 1296646712)
            {
              v19 = bswap32(*((unsigned __int16 *)a2 + 2)) >> 16;
              v20 = (_DWORD)v15 - *((_DWORD *)this + 4);
              v21 = (char **)*v9;
              if (!*v9)
                goto LABEL_29;
              v22 = (char **)((char *)this + 32);
              do
              {
                v23 = *((unsigned __int16 *)v21 + 16);
                v24 = v23 >= v19;
                if (v23 >= v19)
                  v25 = v21;
                else
                  v25 = v21 + 1;
                if (v24)
                  v22 = v21;
                v21 = (char **)*v25;
              }
              while (*v25);
              if (v22 != v9 && v19 >= *((unsigned __int16 *)v22 + 16))
              {
                if (*((_DWORD *)v22 + 11))
                  v26 = 1;
                else
                  v26 = v14 == 0;
                if (!v26)
                {
                  *((_WORD *)v22 + 20) = v19;
                  *((_WORD *)v22 + 21) = 0;
                  *((_DWORD *)v22 + 11) = v17;
                  v22[6] = (char *)v15;
                  *((_DWORD *)v22 + 14) = v20;
                }
              }
              else
              {
LABEL_29:
                LOWORD(v29) = v19;
                DWORD2(v29) = (unsigned __int16)v19;
                HIDWORD(v29) = v17;
                v30 = v15;
                v31 = v20;
                v32 = 0;
                std::__tree<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_Manager::ImgRsrcInfo>>((uint64_t **)this + 3, (uint64_t *)this + 4, (unsigned __int16 *)&v29, &v29);
              }
            }
          }
          return;
        }
        exception = __cxa_allocate_exception(0x18uLL);
        *(_DWORD *)exception = 15;
        v28 = "Out of memory";
      }
      exception[1] = v28;
      *((_BYTE *)exception + 16) = 0;
    }
    *((_QWORD *)this + 2) = a2;
    if (*((_BYTE *)this + 8))
      PSIR_MemoryReader::ParseMemoryResources();
    v10 = a3;
    goto LABEL_10;
  }
}

void PSIR_MemoryReader::SetImgRsrc(PSIR_MemoryReader *this, unsigned __int16 a2, const void *a3)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void PSIR_MemoryReader::DeleteImgRsrc(PSIR_MemoryReader *this)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t PSIR_MemoryReader::IsChanged(PSIR_MemoryReader *this)
{
  return 0;
}

uint64_t PSIR_MemoryReader::IsLegacyChanged(PSIR_MemoryReader *this)
{
  return 0;
}

void PSIR_MemoryReader::ParseFileResources()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((_BYTE *)exception + 16) = 0;
}

uint64_t PSIR_MemoryReader::UpdateMemoryResources(PSIR_MemoryReader *this, void **a2)
{
  if (a2)
    *a2 = (void *)*((_QWORD *)this + 2);
  return *((unsigned int *)this + 3);
}

void PSIR_MemoryReader::UpdateFileResources()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  *(_DWORD *)exception = 9;
  exception[1] = "Not appropriate for PSIR_Reader";
  *((_BYTE *)exception + 16) = 0;
}

void PSIR_MemoryReader::~PSIR_MemoryReader(void **this)
{
  PSIR_MemoryReader::~PSIR_MemoryReader(this);
  JUMPOUT(0x18D761C30);
}

{
  *this = &off_1E1BB1230;
  if (*((_BYTE *)this + 8))
    free(this[2]);
  std::__tree<unsigned long long>::destroy((uint64_t)(this + 3), this[4]);
}

uint64_t *std::__tree<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_Manager::ImgRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_Manager::ImgRsrcInfo>>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v11 = 0;
  v12 = 0;
  v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

void PSIR_MemoryReader::ParseMemoryResources()
{
  __assert_rtn("ParseMemoryResources", "PSIR_MemoryReader.cpp", 58, "! this->ownedContent");
}

void WXMPUtils_ComposeArrayItemPath_1(char *a1, char *a2, int a3, uint64_t a4, void (*a5)(uint64_t, std::string *, uint64_t), _QWORD *a6)
{
  std::string *p_p;
  uint64_t v9;
  _QWORD *exception;
  const char *v11;
  std::string __p;

  *a6 = 0;
  if (!a1 || !*a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v11 = "Empty schema namespace URI";
    goto LABEL_18;
  }
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v11 = "Empty array name";
LABEL_18:
    exception[1] = v11;
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeArrayItemPath(a1, a2, a3, &__p);
  if (a4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v9 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    a5(a4, p_p, v9);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18810B43C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v18;
  const char *v19;
  void *v20;
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 3)
  {
    v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v18;
    *(_QWORD *)(v15 + 8) = "XMP";
    v19 = (const char *)*((_QWORD *)v18 + 1);
    if (!v19)
      v19 = "";
  }
  else
  {
    v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      v19 = "";
      if (v21)
        v19 = (const char *)v21;
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      v19 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v15 = v19;
  __cxa_end_catch();
  JUMPOUT(0x18810B3D8);
}

void WXMPUtils_ComposeStructFieldPath_1(char *a1, char *a2, char *a3, _BYTE *a4, uint64_t a5, void (*a6)(uint64_t, std::string *, uint64_t), _QWORD *a7)
{
  std::string *p_p;
  uint64_t v10;
  _QWORD *exception;
  const char *v12;
  std::string __p;

  *a7 = 0;
  if (!a1 || !*a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v12 = "Empty schema namespace URI";
    goto LABEL_24;
  }
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v12 = "Empty struct name";
    goto LABEL_24;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v12 = "Empty field namespace URI";
    goto LABEL_24;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v12 = "Empty field name";
LABEL_24:
    exception[1] = v12;
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ComposeStructFieldPath(a1, a2, a3, a4, &__p);
  if (a5)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v10 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    a6(a5, p_p, v10);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18810B628(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v18;
  const char *v19;
  void *v20;
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 3)
  {
    v18 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v18;
    *(_QWORD *)(v15 + 8) = "XMP";
    v19 = (const char *)*((_QWORD *)v18 + 1);
    if (!v19)
      v19 = "";
  }
  else
  {
    v20 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      v19 = "";
      if (v21)
        v19 = (const char *)v21;
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      v19 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v15 = v19;
  __cxa_end_catch();
  JUMPOUT(0x18810B58CLL);
}

void WXMPUtils_ConvertFromFloat_1(const char *a1, uint64_t a2, void (*a3)(uint64_t, std::string *, uint64_t), _QWORD *a4, double a5)
{
  std::string *p_p;
  uint64_t v8;
  std::string __p;

  *a4 = 0;
  if (!a1)
    a1 = "";
  memset(&__p, 0, sizeof(__p));
  XMPUtils::ConvertFromFloat(a1, &__p, a5);
  if (a2)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v8 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    a3(a2, p_p, v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18810B76C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  const char *v16;
  void *v19;
  const char *v20;
  void *v21;
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 3)
  {
    v19 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v19;
    *(_QWORD *)(v15 + 8) = "XMP";
    v20 = (const char *)*((_QWORD *)v19 + 1);
    if (!v20)
      v20 = v16;
  }
  else
  {
    v21 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
      if (v22)
        v20 = (const char *)v22;
      else
        v20 = v16;
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      v20 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v15 = v20;
  __cxa_end_catch();
  JUMPOUT(0x18810B758);
}

uint64_t WXMPUtils_ConvertToBool_1(XMPUtils *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *exception;

  *(_QWORD *)a2 = 0;
  if (!a1 || !*(_BYTE *)a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Empty string value";
    *((_BYTE *)exception + 16) = 0;
  }
  result = XMPUtils::ConvertToBool(a1, (const char *)a2);
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

void sub_18810B868(void *a1, int a2)
{
  uint64_t v2;
  void *v4;
  const char *v5;
  void *v6;
  uint64_t v7;
  const char *v8;

  if (a2 == 3)
  {
    v4 = __cxa_begin_catch(a1);
    *(_DWORD *)(v2 + 32) = *(_DWORD *)v4;
    v5 = (const char *)*((_QWORD *)v4 + 1);
    if (!v5)
      v5 = "";
    *(_QWORD *)v2 = v5;
    *(_QWORD *)(v2 + 8) = "XMP";
  }
  else
  {
    v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v2 + 32) = 13;
      v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 16))(v6);
      v8 = "";
      if (v7)
        v8 = (const char *)v7;
    }
    else
    {
      *(_DWORD *)(v2 + 32) = 14;
      v8 = "Caught unknown exception";
    }
    *(_QWORD *)v2 = v8;
  }
  __cxa_end_catch();
}

uint64_t WXMPUtils_ConvertToDate_1(char *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *exception;

  *a3 = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Null output date";
    *((_BYTE *)exception + 16) = 0;
  }
  return XMPUtils::ConvertToDate(a1, a2);
}

uint64_t WXMPUtils_ConvertToUTCTime_1(uint64_t a1, _QWORD *a2)
{
  _QWORD *exception;

  *a2 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Null output date";
    *((_BYTE *)exception + 16) = 0;
  }
  return XMPUtils::ConvertToUTCTime(a1);
}

void WXMPUtils_PackageForJPEG_1(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, uint64_t), _QWORD *a6)
{
  void *v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *p_p;
  uint64_t v16;
  std::string::size_type *v17;
  std::string __p;
  std::string v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  *a6 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(&v19, 0, sizeof(v19));
  memset(&__p, 0, sizeof(__p));
  v17 = &a1->__r_.__value_.__r.__words[2];
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)&a1->__r_.__value_.__r.__words[2], 0);
  XMPUtils::PackageForJPEG(a1, (uint64_t)&v20, &v19, &__p);
  if (a2)
  {
    if (v22 >= 0)
      v11 = &v20;
    else
      v11 = v20;
    if (v22 >= 0)
      v12 = HIBYTE(v22);
    else
      v12 = v21;
    a5(a2, v11, v12);
  }
  if (a3)
  {
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v19;
    else
      v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    else
      v14 = LODWORD(v19.__r_.__value_.__r.__words[1]);
    a5(a3, v13, v14);
  }
  if (a4)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v16 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    a5(a4, p_p, v16);
  }
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
}

void sub_18810BC18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v30;
  const char *v31;
  void *v32;
  uint64_t v33;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a2 == 3)
  {
    v30 = __cxa_begin_catch(a1);
    *(_DWORD *)(v27 + 32) = *(_DWORD *)v30;
    *(_QWORD *)(v27 + 8) = "XMP";
    v31 = (const char *)*((_QWORD *)v30 + 1);
    if (!v31)
      v31 = "";
  }
  else
  {
    v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v27 + 32) = 13;
      v33 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      v31 = "";
      if (v33)
        v31 = (const char *)v33;
    }
    else
    {
      *(_DWORD *)(v27 + 32) = 14;
      v31 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v27 = v31;
  __cxa_end_catch();
  JUMPOUT(0x18810BC00);
}

void WXMPUtils_MergeFromJPEG_1(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const XMPMeta *v5;
  const char *v6;
  _QWORD *exception;
  XMP_ReadWriteLock *v8;
  XMP_ReadWriteLock *v9;

  *a3 = 0;
  if (!a1)
  {
    v6 = "Output XMP pointer is null";
    goto LABEL_6;
  }
  if (a1 == a2)
  {
    v6 = "Full and extended XMP pointers match";
LABEL_6:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = v6;
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = (XMP_ReadWriteLock *)(a1 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 16), 1);
  v8 = (XMP_ReadWriteLock *)(a2 + 16);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a2 + 16), 0);
  XMPUtils::MergeFromJPEG((XMPUtils *)a1, (XMPMeta *)a2, v5);
  XMP_AutoLock::~XMP_AutoLock(&v8);
  XMP_AutoLock::~XMP_AutoLock(&v9);
}

void sub_18810BDB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, XMP_ReadWriteLock *a10)
{
  uint64_t v10;
  void *v13;
  const char *v14;
  void *v15;
  uint64_t v16;

  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)&a9);
  XMP_AutoLock::~XMP_AutoLock(&a10);
  if (a2 == 3)
  {
    v13 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v13;
    *(_QWORD *)(v10 + 8) = "XMP";
    v14 = (const char *)*((_QWORD *)v13 + 1);
    if (!v14)
      v14 = "";
  }
  else
  {
    v15 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v10 + 32) = 13;
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      v14 = "";
      if (v16)
        v14 = (const char *)v16;
    }
    else
    {
      *(_DWORD *)(v10 + 32) = 14;
      v14 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v10 = v14;
  __cxa_end_catch();
  JUMPOUT(0x18810BD5CLL);
}

void WXMPUtils_CatenateArrayItems_1(char **a1, char *a2, _BYTE *a3, char *a4, const char *a5, unsigned int a6, uint64_t a7, void (*a8)(uint64_t, std::string *, uint64_t), _QWORD *a9)
{
  const char *v17;
  char *v18;
  std::string *p_p;
  uint64_t v20;
  _QWORD *exception;
  const char *v22;
  XMP_ReadWriteLock *v23;
  std::string __p;

  *a9 = 0;
  if (!a2 || !*a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v22 = "Empty schema namespace URI";
    goto LABEL_24;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v22 = "Empty array name";
LABEL_24:
    exception[1] = v22;
    *((_BYTE *)exception + 16) = 0;
  }
  memset(&__p, 0, sizeof(__p));
  v23 = (XMP_ReadWriteLock *)(a1 + 2);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 2), 0);
  if (a5)
    v17 = a5;
  else
    v17 = "\"";
  if (a4)
    v18 = a4;
  else
    v18 = "; ";
  XMPUtils::CatenateArrayItems(a1, a2, a3, v18, v17, a6, &__p);
  if (a7)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v20 = LODWORD(__p.__r_.__value_.__r.__words[1]);
    a8(a7, p_p, v20);
  }
  XMP_AutoLock::~XMP_AutoLock(&v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_18810BFD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;
  const char *v18;
  void *v19;
  uint64_t v20;

  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    *(_DWORD *)(v15 + 32) = *(_DWORD *)v17;
    *(_QWORD *)(v15 + 8) = "XMP";
    v18 = (const char *)*((_QWORD *)v17 + 1);
    if (!v18)
      v18 = "";
  }
  else
  {
    v19 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v15 + 32) = 13;
      v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
      v18 = "";
      if (v20)
        v18 = (const char *)v20;
    }
    else
    {
      *(_DWORD *)(v15 + 32) = 14;
      v18 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v15 = v18;
  __cxa_end_catch();
  JUMPOUT(0x18810BF64);
}

void WXMPUtils_SeparateArrayItems_1(char **a1, XMPMeta *a2, char *a3, const char *a4, char *a5, _QWORD *a6)
{
  const char *v11;
  char *v12;
  _QWORD *exception;
  const char *v14;
  XMP_ReadWriteLock *v15;

  *a6 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v14 = "Output XMP pointer is null";
LABEL_13:
    exception[1] = v14;
    *((_BYTE *)exception + 16) = 0;
  }
  if (!a2 || !*(_BYTE *)a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v14 = "Empty schema namespace URI";
    goto LABEL_13;
  }
  if (!a3 || !*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v14 = "Empty array name";
    goto LABEL_13;
  }
  v15 = (XMP_ReadWriteLock *)(a1 + 2);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 2), 1);
  if (a5)
    v12 = a5;
  else
    v12 = "";
  XMPUtils::SeparateArrayItems(a1, a2, a3, a4, v12, v11);
  XMP_AutoLock::~XMP_AutoLock(&v15);
}

void sub_18810C1A0(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  va_list va;

  va_start(va, a3);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  if (a2 == 3)
  {
    v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v3 + 32) = *(_DWORD *)v6;
    v7 = (const char *)*((_QWORD *)v6 + 1);
    if (!v7)
      v7 = "";
    *(_QWORD *)v3 = v7;
    *(_QWORD *)(v3 + 8) = "XMP";
  }
  else
  {
    v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v3 + 32) = 13;
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 16))(v8);
      v10 = "";
      if (v9)
        v10 = (const char *)v9;
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 14;
      v10 = "Caught unknown exception";
    }
    *(_QWORD *)v3 = v10;
  }
  __cxa_end_catch();
  JUMPOUT(0x18810C11CLL);
}

void WXMPUtils_RemoveProperties_1(char **a1, XMPMeta *a2, char *a3, const char *a4, _QWORD *a5)
{
  char *v9;
  XMPMeta *v10;
  _QWORD *exception;
  XMP_ReadWriteLock *v12;

  *a5 = 0;
  if (!a1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    exception[1] = "Output XMP pointer is null";
    *((_BYTE *)exception + 16) = 0;
  }
  v12 = (XMP_ReadWriteLock *)(a1 + 2);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 2), 1);
  if (a3)
    v9 = a3;
  else
    v9 = "";
  if (a2)
    v10 = a2;
  else
    v10 = (XMPMeta *)"";
  XMPUtils::RemoveProperties(a1, v10, v9, a4);
  XMP_AutoLock::~XMP_AutoLock(&v12);
}

void sub_18810C308(void *a1, int a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v6;
  const char *v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  va_list va;

  va_start(va, a3);
  XMP_AutoLock::~XMP_AutoLock((XMP_ReadWriteLock **)va);
  if (a2 == 3)
  {
    v6 = __cxa_begin_catch(a1);
    *(_DWORD *)(v3 + 32) = *(_DWORD *)v6;
    v7 = (const char *)*((_QWORD *)v6 + 1);
    if (!v7)
      v7 = "";
    *(_QWORD *)v3 = v7;
    *(_QWORD *)(v3 + 8) = "XMP";
  }
  else
  {
    v8 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v3 + 32) = 13;
      v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v8 + 16))(v8);
      v10 = "";
      if (v9)
        v10 = (const char *)v9;
    }
    else
    {
      *(_DWORD *)(v3 + 32) = 14;
      v10 = "Caught unknown exception";
    }
    *(_QWORD *)v3 = v10;
  }
  __cxa_end_catch();
  JUMPOUT(0x18810C2BCLL);
}

void WXMPUtils_DuplicateSubtree_1(char **a1, char **a2, XMPMeta *a3, char *a4, char *a5, char *a6, const char *a7, _QWORD *a8)
{
  char *v13;
  char *v14;
  _QWORD *exception;
  const char *v16;
  XMP_ReadWriteLock *v17;
  XMP_ReadWriteLock *v18;

  *a8 = 0;
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 4;
    v16 = "Output XMP pointer is null";
LABEL_18:
    exception[1] = v16;
    *((_BYTE *)exception + 16) = 0;
  }
  if (!a3 || !*(_BYTE *)a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 101;
    v16 = "Empty source schema URI";
    goto LABEL_18;
  }
  if (!a4 || !*a4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 102;
    v16 = "Empty source root name";
    goto LABEL_18;
  }
  if (a5)
    v13 = a5;
  else
    v13 = (char *)a3;
  if (a6)
    v14 = a6;
  else
    v14 = a4;
  v18 = 0;
  if (a1 != a2)
  {
    v18 = (XMP_ReadWriteLock *)(a1 + 2);
    XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a1 + 2), 0);
  }
  v17 = (XMP_ReadWriteLock *)(a2 + 2);
  XMP_ReadWriteLock::Acquire((pthread_rwlock_t *)(a2 + 2), 1);
  XMPUtils::DuplicateSubtree((XMPUtils *)a1, a2, a3, a4, v13, v14, a7);
  XMP_AutoLock::~XMP_AutoLock(&v17);
  XMP_AutoLock::~XMP_AutoLock(&v18);
}

void sub_18810C4FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;
  const char *v13;
  void *v14;
  uint64_t v15;

  if (a2 == 3)
  {
    v12 = __cxa_begin_catch(a1);
    *(_DWORD *)(v10 + 32) = *(_DWORD *)v12;
    *(_QWORD *)(v10 + 8) = "XMP";
    v13 = (const char *)*((_QWORD *)v12 + 1);
    if (!v13)
      v13 = "";
  }
  else
  {
    v14 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      *(_DWORD *)(v10 + 32) = 13;
      v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
      v13 = "";
      if (v15)
        v13 = (const char *)v15;
    }
    else
    {
      *(_DWORD *)(v10 + 32) = 14;
      v13 = "Caught unknown exception";
    }
  }
  *(_QWORD *)v10 = v13;
  __cxa_end_catch();
  JUMPOUT(0x18810C474);
}

_QWORD *AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x635374724E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 792));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x635374724E6F6465, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 0x27u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::ICompositeNode_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 800)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x635374724E6F6465, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 0x31u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_18810C6D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 720)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IStructureNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x2F0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IStructureNode_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer(AdobeXMPCore_Int::IStructureNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 728)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::IStructureNode_I::getInterfacePointer((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getNode(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 792), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x288, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 55, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v10)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v18;
  std::__shared_weak_count *v19;

  v10 = a3;
  *a1 = 0;
  v18 = 0;
  v19 = 0;
  v11 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v10 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v11 + a3);
  v10(&v18, v11, a7, a8, a9, a10);
  if (v18)
  {
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)] + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)]
                                                              + 16))(&v18[*(_QWORD *)(*(_QWORD *)v18 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v13 = 0;
  }
  v14 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v13;
}

void sub_18810C9FC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18810C9E0);
}

void sub_18810CAF8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getNode(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::getNode((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 760)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::getChildNodeType(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IStructureNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 792), 0, (uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x280, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 60, (uint64_t)a2, a3, (uint64_t)a4, a5);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::IStructureNode_v1,unsigned int,AdobeXMPCore::INode_v1::eNodeType,char const*,unsigned long long,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v12;

  v11 = a4;
  *a1 = 0;
  v12 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v12 + a4);
  return v11(v12, a8, a9, a10, a11);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::getChildNodeType(AdobeXMPCore_Int::IStructureNode_I *this, const char *a2, uint64_t a3, const char *a4, uint64_t a5, const AdobeXMPCommon::IError_v1 **a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::getChildNodeType((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 752)), a2, a3, a4, a5, a6);
}

void AdobeXMPCore_Int::IStructureNode_I::insertNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v5 = *(_QWORD *)(*(_QWORD *)this - 792);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v9);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IStructureNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (uint64_t (*)(_QWORD *, uint64_t))0x290, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 65, (uint64_t)&v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_18810CD24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IStructureNode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

void `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::insertNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  AdobeXMPCore_Int::IStructureNode_I::insertNode((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 768)), a2, a3);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::removeNode(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,char const*,unsigned long long,char const*,unsigned long long>(a6, (uint64_t)a1 + *(_QWORD *)(*a1 - 792), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))0x2A0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 70, a2, a3, a4, a5);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::removeNode(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return AdobeXMPCore_Int::IStructureNode_I::removeNode((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 784)), a2, a3, a4, a5, a6);
}

uint64_t AdobeXMPCore_Int::IStructureNode_I::replaceNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = *(_QWORD *)(*(_QWORD *)this - 792);
  AdobeXMPCore::INode_v1::MakeShared(a2, a2, &v11);
  v6 = AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(a3, (uint64_t)this + v5, (void (*)(char **__return_ptr, _QWORD *, uint64_t))0x298, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IStructureNode_I.cpp", 75, (uint64_t)&v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_18810CF3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IStructureNode_v1,AdobeXMPCore::INode_v1 *,AdobeXMPCore::INode_v1,std::shared_ptr<AdobeXMPCore::INode_v1> const&>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v14;
  std::__shared_weak_count *v15;

  *a1 = 0;
  v14 = 0;
  v15 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t))(*v7 + a3);
  a3(&v14, v7, a7);
  if (v14)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)] + 16))(&v14[*(_QWORD *)(*(_QWORD *)v14 - 64)], 0x634E6F6465202020, 1);
  }
  else
  {
    v9 = 0;
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_18810D05C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18810D040);
}

void sub_18810D158(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IStructureNode_I::replaceNode(AdobeXMPCore_Int::IStructureNode_I *this, AdobeXMPCore::INode_v1 *a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::IStructureNode_I::replaceNode((AdobeXMPCore_Int::IStructureNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 776)), a2, a3);
}

_QWORD *AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x63436F6E664D6772)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 168));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63436F6E664D6772, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreConfigurationManager_I.cpp", 0x27u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::IConfigurationManager_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 176)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63436F6E664D6772, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreConfigurationManager_I.cpp", 0x32u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_18810D290(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 160)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x80, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ICoreConfigurationManager_I.cpp", 23, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ICoreConfigurationManager_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer(AdobeXMPCore_Int::ICoreConfigurationManager_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ICoreConfigurationManager_I::getInterfacePointer((AdobeXMPCore_Int::ICoreConfigurationManager_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 168)), a2, a3, a4);
}

_QWORD *AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  _QWORD *exception;

  if (a2 == 0x63444F4D50727372)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 304));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63444F4D50727372, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 0x28u, exception);
LABEL_10:
    }
  }
  else
  {
    if (a4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63444F4D50727372, a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 0x2Eu, exception);
      goto LABEL_10;
    }
    return 0;
  }
  return this;
}

void sub_18810D514(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::IDOMParser_I::GetInterfacePointerInternal((AdobeXMPCore_Int::IDOMParser_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMParser_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x118, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::IDOMParser_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer(AdobeXMPCore_Int::IDOMParser_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::IDOMParser_I::getInterfacePointer((AdobeXMPCore_Int::IDOMParser_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::clone(AdobeXMPCore_Int::IDOMParser_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IDOMParser_v1*,AdobeXMPCore::IDOMParser_v1>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (void (*)(char **__return_ptr, _QWORD *))0xD8, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IDOMParser_v1*,AdobeXMPCore::IDOMParser_v1>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 224)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 224)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 232)]
                                                             + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 232)], 0x63444F4D50727372, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_18810D7C0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18810D7A4);
}

void sub_18810D8BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::IDOMParser_I::parse(AdobeXMPCore_Int::IDOMParser_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (void (*)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))0xC8, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 57, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningSharedPointer<AdobeXMPCore::IDOMParser_v1,AdobeXMPCore::IMetadata_v1 *,AdobeXMPCore::IMetadata_v1,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(char **__return_ptr, _QWORD *, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  std::__shared_weak_count *v17;

  v8 = a3;
  *a1 = 0;
  v16 = 0;
  v17 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(void (**)(char **__return_ptr, _QWORD *, uint64_t, uint64_t))(*v9 + a3);
  v8(&v16, v9, a7, a8);
  if (v16)
  {
    v10 = (*(uint64_t (**)(char *))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)] + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)]
                                                              + 16))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 64)], 0x634D657461646174, 1);
  }
  else
  {
    v11 = 0;
  }
  v12 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v11;
}

void sub_18810DA24(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x18810DA08);
}

void sub_18810DB20(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::IDOMParser_I::parseWithSpecificAction(AdobeXMPCore_Int::IDOMParser_I *this, AdobeXMPCore::INode_v1 *a2, uint64_t a3, unsigned int a4, AdobeXMPCore::INode_v1 *a5, const AdobeXMPCommon::IError_v1 **a6)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v14 = 0;
  v15 = 0;
  AdobeXMPCore::INode_v1::MakeShared(a5, a2, &v14);
  AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IDOMParser_v1,char const*,unsigned long long,AdobeXMPCore::IDOMParser_v1::eActionType,std::shared_ptr<AdobeXMPCore::INode_v1> &>(a6, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 304), (uint64_t (*)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))0xD0, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/IDOMParser_I.cpp", 63, (uint64_t)a2, a3, a4, (uint64_t)&v14);
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18810DC00(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::IDOMParser_v1,char const*,unsigned long long,AdobeXMPCore::IDOMParser_v1::eActionType,std::shared_ptr<AdobeXMPCore::INode_v1> &>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t);
  _QWORD *v11;

  v10 = a3;
  *a1 = 0;
  v11 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v10 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD, uint64_t))(*v11 + a3);
  return v10(v11, a7, a8, a9, a10);
}

AdobeXMPCore_Int::MetadataImpl *AdobeXMPCore_Int::MetadataImpl::MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  uint64_t *v2;
  _QWORD *v3;

  *((_QWORD *)this + 23) = off_1E1B874F0;
  *((_QWORD *)this + 10) = &unk_1E1B87078;
  *((_QWORD *)this + 9) = &unk_1E1B86B58;
  v2 = (uint64_t *)((char *)this + 72);
  *((_QWORD *)this + 4) = off_1E1B86208;
  *(_QWORD *)this = &unk_1E1B87550;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = off_1E1B87678;
  *((_QWORD *)this + 5) = &unk_1E1B86580;
  v3 = (_QWORD *)((char *)this + 40);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  AdobeXMPCore_Int::NodeImpl::NodeImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 80), (const char *)&off_1E1BA9F28, (AdobeXMPCore_Int::IUTF8String_I *)"http://metadata", (const char *)0xF, (AdobeXMPCore_Int::IUTF8String_I *)"_metadata_", (const char *)0xA);
  AdobeXMPCore_Int::CompositeNodeImpl::CompositeNodeImpl(v2, (uint64_t *)&off_1E1BA9EC0);
  AdobeXMPCore_Int::StructureNodeImpl::StructureNodeImpl(v3, (const char *)&off_1E1BA9E40, (unint64_t)"http://metadata", (const char *)0xF);
  *(_QWORD *)this = off_1E1BB3BB8;
  *((_QWORD *)this + 4) = off_1E1BB3F28;
  *((_QWORD *)this + 5) = &unk_1E1BB42F0;
  *((_QWORD *)this + 9) = &unk_1E1BB4918;
  *((_QWORD *)this + 10) = &off_1E1BB3BB8[601];
  *((_QWORD *)this + 23) = &off_1E1BB3BB8[689];
  *((_QWORD *)this + 26) = &off_1E1BB3BB8[707];
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)this + 1);
  *((_BYTE *)this + 24) = 0;
  return this;
}

void sub_18810DE54(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::SharedObjectImpl *v1;
  uint64_t v2;
  AdobeXMPCore_Int::NodeImpl *v3;
  uint64_t v4;
  AdobeXMPCore_Int::StructureNodeImpl *v5;
  uint64_t v6;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl(v5, (uint64_t *)&off_1E1BA9E40);
  AdobeXMPCore_Int::NodeImpl::~NodeImpl(v3, (uint64_t *)&off_1E1BA9F28);
  *(_QWORD *)(v2 + 208) = v6;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v4);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl(v1, (uint64_t *)off_1E1BA9F78);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MetadataImpl::GetAboutURI(AdobeXMPCore_Int::MetadataImpl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v7, (char *)this + *(_QWORD *)(*(_QWORD *)this - 968) + 8, 0);
  v4 = *((_QWORD *)this + 2);
  *a2 = *((_QWORD *)this + 1);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v7);
}

void AdobeXMPCore_Int::MetadataImpl::SetAboutURI(AdobeXMPCore_Int::MetadataImpl *this, const char *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[3];

  memset(v11, 0, sizeof(v11));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v11, (char *)this + *(_QWORD *)(*(_QWORD *)this - 968) + 8, 1);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)this + 1) + 56))(&v9, *((_QWORD *)this + 1), a2, a3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v11);
}

void sub_18810DFDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va);
  __cxa_call_unexpected(a1);
}

double AdobeXMPCore_Int::MetadataImpl::GetName@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetName@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double AdobeXMPCore_Int::MetadataImpl::GetNameSpace@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

double `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetNameSpace@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v4;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)&v4);
  result = *(double *)&v4;
  *a1 = v4;
  return result;
}

void AdobeXMPCore_Int::MetadataImpl::GetParent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetParent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t AdobeXMPCore_Int::MetadataImpl::GetParentNodeType(AdobeXMPCore_Int::MetadataImpl *this)
{
  return 0;
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetParentNodeType(AdobeXMPCore_Int::MetadataImpl *this)
{
  return 0;
}

void AdobeXMPCore_Int::MetadataImpl::ClearContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  _QWORD v2[3];

  AdobeXMPCore_Int::StructureNodeImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                      + *(_QWORD *)(*(_QWORD *)this
                                                                                                  - 928)));
  memset(v2, 0, sizeof(v2));
  AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v2, (char *)this + *(_QWORD *)(*(_QWORD *)this - 968) + 8, 1);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1));
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v2);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ClearContents(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 920)));
}

{
  AdobeXMPCore_Int::MetadataImpl::ClearContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 704)));
}

uint64_t AdobeXMPCore_Int::MetadataImpl::CloneContents@<X0>(AdobeXMPCore_Int::MetadataImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v8;
  char *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  AdobeXMPCore::IMetadata_v1::CreateMetadata(&v24);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 928);
  v9 = v8 + 16;
  v10 = (char *)*((_QWORD *)v8 + 1);
  if (v10 != v8 + 16)
  {
    do
    {
      v22 = 0;
      v23 = 0;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v10 + 8) + 264))(&v22, *((_QWORD *)v10 + 8), a2, a3);
      if (v22)
        (*(void (**)(char *, uint64_t *))(*(_QWORD *)&v24[*(_QWORD *)(*(_QWORD *)v24 - 688)] + 520))(&v24[*(_QWORD *)(*(_QWORD *)v24 - 688)], &v22);
      v11 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = (char *)*((_QWORD *)v10 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v10 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v16);
      }
      v10 = v15;
    }
    while (v15 != v9);
  }
  v17 = v24;
  v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1));
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 208))(*((_QWORD *)this + 1));
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v17 + 744))(v17, v18, v19);
  v21 = v25;
  *a4 = (char *)v17 + *(_QWORD *)(*v17 - 544);
  a4[1] = v21;
  return result;
}

void sub_18810E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore::IMetadata_v1::CreateMetadata@<X0>(_QWORD *a1@<X8>)
{
  AdobeXMPCore_Int::MetadataImpl *v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v3 = (AdobeXMPCore_Int::MetadataImpl *)AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0xE8);
  AdobeXMPCore_Int::MetadataImpl::MetadataImpl(v3);
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::MetadataImpl>((char *)v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataImpl.cpp", 440, 1, v7);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 856);
  v6 = v7[1];
  *a1 = v5;
  a1[1] = v6;
  return result;
}

void sub_18810E3D4(_Unwind_Exception *a1)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::CloneContents@<X0>(AdobeXMPCore_Int::MetadataImpl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return AdobeXMPCore_Int::MetadataImpl::CloneContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 928)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::MetadataImpl::CloneContents((AdobeXMPCore_Int::MetadataImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 712)), a2, a3, a4);
}

_QWORD *AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata@<X0>(AdobeXMPCore_Int::MetadataImpl *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  (**(void (***)(char *))((char *)this + *(_QWORD *)(*(_QWORD *)this - 944)))((char *)this + *(_QWORD *)(*(_QWORD *)this - 944));
  result = std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(v7, (uint64_t)this, 8, 1);
  v5 = v7[0];
  if (v7[0])
    v5 = v7[0] + *(_QWORD *)(*(_QWORD *)v7[0] - 856);
  v6 = v7[1];
  *a2 = v5;
  a2[1] = v6;
  return result;
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::MetadataImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _OWORD *exception;
  __int128 v11;

  if (!a1 && a4)
  {
    v11 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(1, 6, 2, &v11);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304)) + 120))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), a2, a3);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304))
                                                          + 112))(v11 + *(_QWORD *)(*(_QWORD *)v11 - 304), "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v11;
    v11 = 0uLL;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)]);
  return std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_18810E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata@<X0>(AdobeXMPCore_Int::MetadataImpl *this@<X0>, _QWORD *a2@<X8>)
{
  return AdobeXMPCore_Int::MetadataImpl::ConvertToMetadata((AdobeXMPCore_Int::MetadataImpl *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 296)), a2);
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::MetadataImpl::EnableFeature(AdobeXMPCore_Int::MetadataImpl *this, char *a2, size_t a3)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *result;
  const void *v5;
  uint64_t MemoryAllocator;
  const void *__dst[2];
  uint64_t v8;

  __dst[0] = 0;
  __dst[1] = 0;
  v8 = 0;
  std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)__dst, a2, a3);
  result = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(__dst, "alias");
  if (!(_DWORD)result)
    *((_BYTE *)this + 24) = 1;
  if (SHIBYTE(v8) < 0)
  {
    v5 = __dst[0];
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result);
    return (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v5);
  }
  return result;
}

uint64_t std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(const void **a1, char *__s)
{
  size_t v4;
  size_t v5;
  const void **v6;
  size_t v7;
  unsigned int v8;
  uint64_t result;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != -1)
    {
      v5 = *((unsigned __int8 *)a1 + 23);
      goto LABEL_6;
    }
LABEL_15:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v4 == -1)
    goto LABEL_15;
  v6 = a1;
  a1 = (const void **)*a1;
  v5 = (size_t)v6[1];
LABEL_6:
  if (v5 >= v4)
    v7 = v4;
  else
    v7 = v5;
  if (v5 < v4)
    v8 = -1;
  else
    v8 = v5 > v4;
  LODWORD(result) = memcmp(a1, __s, v7);
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

AdobeXMPCore_Int::IMemoryAllocator_I *AdobeXMPCore_Int::MetadataImpl::DisableFeature(AdobeXMPCore_Int::MetadataImpl *this, char *a2, size_t a3)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *result;
  const void *v5;
  uint64_t MemoryAllocator;
  const void *__dst[2];
  uint64_t v8;

  __dst[0] = 0;
  __dst[1] = 0;
  v8 = 0;
  std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100]((AdobeXMPCore_Int::IMemoryAllocator_I *)__dst, a2, a3);
  result = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::compare(__dst, "alias");
  if (!(_DWORD)result)
    *((_BYTE *)this + 24) = 0;
  if (SHIBYTE(v8) < 0)
  {
    v5 = __dst[0];
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(result);
    return (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v5);
  }
  return result;
}

uint64_t AdobeXMPCore_Int::IsNodeAlias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double DefaultNameSpacePrefixMap;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  char *v21;
  _OWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p;
  std::__shared_weak_count *v35;
  char v36;
  void **p_p;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v44 = 0;
  v45 = 0;
  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(0, (const char *)0xFFFFFFFFFFFFFFFFLL, &v44);
  v43 = 0uLL;
  DefaultNameSpacePrefixMap = AdobeXMPCore::INameSpacePrefixMap_v1::GetDefaultNameSpacePrefixMap(&v43);
  v41 = 0;
  v42 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, double))(*(_QWORD *)v43 + 88))(&v41, v43, a1, -1, DefaultNameSpacePrefixMap);
  if (!v41)
    goto LABEL_25;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v44 + 48))(&p_p, v44, &v41, 0, -1);
  (*((void (**)(void **__return_ptr, void **, const char *, uint64_t))*p_p + 5))(&__p, p_p, ":", -1);
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(*(_QWORD *)__p + 40))(&v39, __p, a2, -1);
  v7 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v35;
  if (v35)
  {
    v11 = (unint64_t *)&v35->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v38;
  if (v38)
  {
    v14 = (unint64_t *)&v38->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = sRegisteredAliasMap;
  v17 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 192))(v44);
  std::string::basic_string[abi:ne180100]<0>(&__p, v17);
  v18 = std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__count_unique<std::string>(v16, (const void **)&__p);
  v19 = v18;
  if (v36 < 0)
  {
    operator delete(__p);
    if (v19)
      goto LABEL_19;
LABEL_25:
    v23 = 0;
    goto LABEL_26;
  }
  if (!v18)
    goto LABEL_25;
LABEL_19:
  v20 = (uint64_t **)sRegisteredAliasMap;
  v21 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 192))(v44);
  std::string::basic_string[abi:ne180100]<0>(&__p, v21);
  p_p = &__p;
  v22 = std::__tree<std::__value_type<std::string,std::vector<XPathStepInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<XPathStepInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<XPathStepInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v20, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
  if ((_OWORD *)((char *)v22 + 56) != (_OWORD *)a3)
    std::vector<XPathStepInfo>::__assign_with_size[abi:ne180100]<XPathStepInfo*,XPathStepInfo*>(a3, *((std::string **)v22 + 7), *((__int128 **)v22 + 8), (uint64_t)(*((_QWORD *)v22 + 8) - *((_QWORD *)v22 + 7)) >> 5);
  if (v36 < 0)
    operator delete(__p);
  v23 = 1;
LABEL_26:
  v24 = v42;
  if (v42)
  {
    v25 = (unint64_t *)&v42->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v45;
  if (v45)
  {
    v31 = (unint64_t *)&v45->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v23;
}

void sub_18810EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v21 - 56);
  _Unwind_Resume(a1);
}

void sub_18810EA7C()
{
  JUMPOUT(0x18810EA64);
}

void sub_18810EA84()
{
  JUMPOUT(0x18810EA6CLL);
}

BOOL AdobeXMPCore_Int::HandleConstAlias(_QWORD *a1, _QWORD *a2, char **a3, uint64_t *a4)
{
  char *v5;
  _BOOL8 v6;
  char *v11;
  const std::string *v12;
  int64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  unsigned __int16 *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  const char *v64;
  int v65;
  AdobeXMPCore_Int::IErrorNotifier_I *v66;
  char *v67;
  unint64_t *v68;
  unint64_t v69;
  void (***ErrorNotifier)(_QWORD, std::string *);
  _OWORD *exception;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  AdobeXMPCore::INode_v1 *v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  std::string v78;
  void *__p;
  std::string::size_type v80;
  uint64_t v81;

  v5 = *a3;
  if (*a3 == a3[1])
  {
    __p = 0;
    v80 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(1, 4, 2, &__p);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 304))
                                                          + 120))((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataImpl.cpp", 134);
    v66 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, const char *, uint64_t))(*(_QWORD *)((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 304)) + 112))((char *)__p + *(_QWORD *)(*(_QWORD *)__p - 304), "Empty XPath", -1);
    v67 = 0;
    if (__p)
      v67 = (char *)__p + *(_QWORD *)(*(_QWORD *)__p - 304);
    v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    v78.__r_.__value_.__l.__size_ = v80;
    if (v80)
    {
      v68 = (unint64_t *)(v80 + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    ErrorNotifier = (void (***)(_QWORD, std::string *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v66);
    (**ErrorNotifier)(ErrorNotifier, &v78);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
  }
  if ((*((_DWORD *)v5 + 6) & 0x80000000) == 0)
    return 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  if (v5[23] < 0)
    v5 = *(char **)v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, v5);
  v11 = *a3;
  v12 = (const std::string *)(*a3 + 32);
  if ((*a3)[55] < 0)
  {
    v14 = *((_QWORD *)v11 + 4);
    v13 = *((_QWORD *)v11 + 5);
  }
  else
  {
    v13 = (*a3)[55];
    v14 = (uint64_t)(*a3 + 32);
  }
  if (v13 < 1)
    goto LABEL_26;
  v15 = (_BYTE *)(v14 + v13);
  v16 = (void *)v14;
  while (1)
  {
    v17 = memchr(v16, 58, v13);
    if (!v17)
      goto LABEL_26;
    if (*v17 == 58)
      break;
    v16 = v17 + 1;
    v13 = v15 - (_BYTE *)v16;
    if (v15 - (_BYTE *)v16 < 1)
      goto LABEL_26;
  }
  if (v17 == v15 || &v17[-v14] == (_BYTE *)-1)
LABEL_26:
    __assert_rtn("HandleConstAlias", "MetadataImpl.cpp", 141, "colonPos != std::string::npos");
  memset(&v78, 0, sizeof(v78));
  std::string::basic_string(&v78, v12, (std::string::size_type)&v17[-v14 + 1], 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v77);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(*a1 + *(_QWORD *)(*(_QWORD *)*a1 - 792)) + 648))(&v77);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v77);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (!*a2)
    goto LABEL_107;
  if (a3[1] - *a3 == 64)
    goto LABEL_25;
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) != 2)
  {
    v64 = "destNode->GetNodeType() == INode::kNTArray";
    v65 = 148;
    goto LABEL_116;
  }
  v21 = (uint64_t *)*a3;
  v22 = (unsigned __int16 *)(*a3 + 64);
  v23 = *((_DWORD *)*a3 + 22);
  if (v23 == 5)
  {
    v25 = *((char *)v21 + 87);
    if (v25 < 0)
    {
      if (v21[9] != 23)
        goto LABEL_115;
      v22 = *(unsigned __int16 **)v22;
    }
    else if (v25 != 23)
    {
      goto LABEL_115;
    }
    v35 = *(_QWORD *)v22;
    v36 = *((_QWORD *)v22 + 1);
    v37 = *(_QWORD *)((char *)v22 + 15);
    if (v35 == 0x616C3A6C6D783F5BLL && v36 == 0x65642D78223D676ELL && v37 == 0x5D22746C75616665)
    {
      if (*a2 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2) == 2)
      {
        v77 = 0uLL;
        (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(_QWORD *)*a2 + 248))(&v75);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)((char *)v75 + *(_QWORD *)(*(_QWORD *)v75 - 688))
                                                       + 552))(&v77);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v75);
        v40 = 1;
        do
        {
          v6 = v77 != 0;
          if (!(_QWORD)v77)
            break;
          v75 = 0;
          v76 = 0;
          (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(_QWORD *)v77 + 48))(&v75);
          v74 = 0uLL;
          AdobeXMPCore::INode_v1::GetSimpleQualifier(v75, &v74);
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v74 + 504))(&v72);
          v41 = v72;
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 208))(v72);
          v43 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v41 + 160))(v41, 0, v42, "x-default", -1);
          v44 = v73;
          if (v73)
          {
            p_shared_owners = (unint64_t *)&v73->__shared_owners_;
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          if (v43)
          {
            v47 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
            if (*((_QWORD *)&v74 + 1))
            {
              v48 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v77 + 56))(&v74);
            v50 = v74;
            v74 = 0uLL;
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
            v77 = v50;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
            if (*((_QWORD *)&v74 + 1))
            {
              v55 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            ++v40;
            v57 = 1;
          }
          else
          {
            std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a2, (uint64_t *)&v75);
            if (*a4)
              *a4 = v40;
            v58 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
            if (*((_QWORD *)&v74 + 1))
            {
              v59 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
            v57 = 0;
          }
          v61 = v76;
          if (v76)
          {
            v62 = (unint64_t *)&v76->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        while ((v57 & 1) != 0);
        std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v77);
        goto LABEL_108;
      }
      goto LABEL_107;
    }
LABEL_115:
    v64 = "expandedXPath[ 2 ].step == \"[?xml:lang=\\\"x-default\\\"]\"";
    v65 = 160;
LABEL_116:
    __assert_rtn("HandleConstAlias", "MetadataImpl.cpp", v65, v64);
  }
  if (v23 != 3)
    goto LABEL_107;
  v24 = *((char *)v21 + 87);
  if (v24 < 0)
  {
    if (v21[9] != 3)
    {
LABEL_114:
      v64 = "expandedXPath[ 2 ].step == \"[1]\"";
      v65 = 151;
      goto LABEL_116;
    }
    v22 = *(unsigned __int16 **)v22;
  }
  else if (v24 != 3)
  {
    goto LABEL_114;
  }
  v26 = *v22;
  v27 = *((unsigned __int8 *)v22 + 2);
  if (v26 != 12635 || v27 != 93)
    goto LABEL_114;
  (*(void (**)(AdobeXMPCore::INode_v1 **__return_ptr))(*(_QWORD *)*a2 + 248))(&v75);
  (*(void (**)(__int128 *__return_ptr, AdobeXMPCore::INode_v1 *, uint64_t))(*(_QWORD *)v75 + 656))(&v77, v75, 1);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a2, &v77);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v76;
  if (v76)
  {
    v33 = (unint64_t *)&v76->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!*a2)
  {
LABEL_107:
    v6 = 0;
    goto LABEL_108;
  }
  if (*a4)
  {
    v6 = 1;
    *a4 = 1;
    goto LABEL_108;
  }
LABEL_25:
  v6 = 1;
LABEL_108:
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81) < 0)
    operator delete(__p);
  return v6;
}

void sub_18810F2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void AdobeXMPCore::INode_v1::GetSimpleQualifier(AdobeXMPCore::INode_v1 *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v8 = 0;
  v9 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 128))(&v8);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 232))(v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_18810F3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MetadataImpl::ReplaceNode(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int IsNodeAlias;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BOOL4 v29;
  _BOOL4 v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  char *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  _BOOL4 v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  BOOL v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  AdobeXMPCore_Int::IErrorNotifier_I *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  char *v107;
  std::__shared_weak_count *v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  char *v116[3];

  if (!a1[24])
  {
    AdobeXMPCore_Int::StructureNodeImpl::ReplaceNode((uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 928)], (char **)a2, a3);
    return;
  }
  memset(v116, 0, sizeof(v116));
  v114 = 0u;
  v115 = 0u;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 88))(&v113);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 72))(&v112);
  v114 = v113;
  if (*((_QWORD *)&v113 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v115 = v112;
  if (*((_QWORD *)&v112 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 88))(&v113);
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v113 + 192))(v113);
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 72))(&v112);
  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v112 + 192))(v112);
  IsNodeAlias = AdobeXMPCore_Int::IsNodeAlias(v16, v17, (uint64_t)v116);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (!*((_QWORD *)&v113 + 1))
    goto LABEL_27;
  v23 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (!IsNodeAlias)
      goto LABEL_78;
  }
  else
  {
LABEL_27:
    if (!IsNodeAlias)
      goto LABEL_78;
  }
  v113 = 0uLL;
  v111 = 0;
  v112 = 0uLL;
  (**(void (***)(_BYTE *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)]);
  std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v112, (uint64_t)a1, 8, 1);
  v25 = (_QWORD *)v112;
  if ((_QWORD)v112)
    v25 = (_QWORD *)(v112 + *(_QWORD *)(*(_QWORD *)v112 - 856));
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  v109 = v25;
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = AdobeXMPCore_Int::HandleConstAlias(&v109, &v113, v116, &v111);
  v30 = v29;
  if (!v26)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v30)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    if (v29)
    {
LABEL_38:
      (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)v113 + 88))(&v109);
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v113 + 72))(&v107);
      v34 = v109;
      v33 = v110;
      if (v110)
      {
        v35 = (unint64_t *)&v110->__shared_owners_;
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v38 = v107;
      v37 = v108;
      if (v108)
      {
        v39 = (unint64_t *)&v108->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      *(_QWORD *)&v114 = v34;
      *((_QWORD *)&v114 + 1) = v33;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      *(_QWORD *)&v115 = v38;
      *((_QWORD *)&v115 + 1) = v37;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v108;
      if (v108)
      {
        v48 = (unint64_t *)&v108->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v50 = v110;
      if (v110)
      {
        v51 = (unint64_t *)&v110->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
    }
  }
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_78:
  v59 = &a1[*(_QWORD *)(*(_QWORD *)a1 - 936)];
  v60 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v113 = *(_QWORD *)a2;
  *((_QWORD *)&v113 + 1) = v60;
  if (v60)
  {
    v61 = (unint64_t *)(v60 + 8);
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
  }
  if ((*(unsigned int (**)(_BYTE *, __int128 *))(*(_QWORD *)v59 + 656))(v59, &v113))
  {
    (*(void (**)(__int128 *__return_ptr, _BYTE *, __int128 *, __int128 *))(*(_QWORD *)a1 + 824))(&v112, a1, &v114, &v115);
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    v64 = (_QWORD)v112 != 0;
    if (*((_QWORD *)&v112 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  else
  {
    v64 = 0;
  }
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (!v64)
  {
    v113 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(100, 5, 2, &v113);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v113 + *(_QWORD *)(*(_QWORD *)v113 - 304))
                                                          + 120))(v113 + *(_QWORD *)(*(_QWORD *)v113 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataImpl.cpp", 344);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v113 + *(_QWORD *)(*(_QWORD *)v113 - 304))
                                                          + 112))(v113 + *(_QWORD *)(*(_QWORD *)v113 - 304), "no such node exists with the specified qualified name", -1);
    v99 = (_QWORD *)v113;
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 88))(&v112);
    AdobeXMPCore_Int::IError_I::AppendParameter(v99, &v112);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
    v100 = (_QWORD *)v113;
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 72))(&v112);
    AdobeXMPCore_Int::IError_I::AppendParameter(v100, &v112);
    v101 = (AdobeXMPCore_Int::IErrorNotifier_I *)std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v112);
    if ((_QWORD)v113)
      v102 = v113 + *(_QWORD *)(*(_QWORD *)v113 - 304);
    else
      v102 = 0;
    *(_QWORD *)&v112 = v102;
    *((_QWORD *)&v112 + 1) = *((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v103 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v101);
    (**ErrorNotifier)(ErrorNotifier, &v112);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v112;
    v112 = 0uLL;
  }
  v113 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, _BYTE *, __int128 *, __int128 *))(*(_QWORD *)a1 + 832))(&v113, a1, &v114, &v115);
  v70 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v112 = *(_QWORD *)a2;
  *((_QWORD *)&v112 + 1) = v70;
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  if (!IsNodeAlias)
    goto LABEL_114;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  (**(void (***)(_BYTE *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 944)]);
  std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v109, (uint64_t)a1, 8, 1);
  if (v109)
    v73 = (char *)v109 + *(_QWORD *)(*v109 - 856);
  else
    v73 = 0;
  v107 = v73;
  v108 = v110;
  if (v110)
  {
    v74 = (unint64_t *)&v110->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  v76 = AdobeXMPCore_Int::HandleNonConstAlias(&v107, v116, (char **)&v112, &v111, (_QWORD *)a2);
  v77 = v76;
  v78 = v108;
  if (v108)
  {
    v79 = (unint64_t *)&v108->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
      if (v77)
        goto LABEL_109;
LABEL_137:
      *(_OWORD *)a3 = v112;
      v112 = 0uLL;
      v96 = v110;
      if (v110)
      {
        v97 = (unint64_t *)&v110->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      goto LABEL_115;
    }
  }
  if (!v76)
    goto LABEL_137;
LABEL_109:
  v81 = v110;
  if (v110)
  {
    v82 = (unint64_t *)&v110->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
LABEL_114:
  (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)a1 + 656))(a1, &v112);
  *(_OWORD *)a3 = v113;
  v113 = 0uLL;
LABEL_115:
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
  if (*((_QWORD *)&v112 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
  if (*((_QWORD *)&v115 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  *(_QWORD *)&v114 = v116;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
}

void sub_18810FDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  uint64_t v20;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a19 = (void **)(v20 - 88);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void sub_18810FE9C()
{
  JUMPOUT(0x18810FE80);
}

void sub_18810FEA8()
{
  JUMPOUT(0x18810FE84);
}

BOOL AdobeXMPCore_Int::HandleNonConstAlias(char **a1, char **a2, char **a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _BOOL8 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v22;
  const std::string *v23;
  int64_t v24;
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t v30;
  AdobeXMPCore::ISimpleNode_v1 *v31;
  std::string *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unsigned __int16 *v43;
  int v44;
  int v45;
  int v46;
  AdobeXMPCore::ISimpleNode_v1 *v47;
  std::string *v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  int v70;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  char *v75;
  AdobeXMPCore::ISimpleNode_v1 *v76;
  std::string *v77;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  AdobeXMPCore::ISimpleNode_v1 *v102;
  std::string *v103;
  char *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  char v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  AdobeXMPCore::ISimpleNode_v1 *v140;
  const char *v141;
  std::string *v142;
  std::string::size_type v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  AdobeXMPCore::ISimpleNode_v1 *v156;
  std::string *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  const char *v193;
  int v194;
  AdobeXMPCore_Int::IErrorNotifier_I *v195;
  std::string::size_type v196;
  unint64_t *v197;
  unint64_t v198;
  void (***ErrorNotifier)(_QWORD, std::string *);
  _OWORD *exception;
  uint64_t v201;
  std::__shared_weak_count *v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  std::string v210;
  __int128 v211;
  uint64_t v212;
  __int128 v213;

  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)a1);
  v213 = 0uLL;
  if (*a5)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a5 + 40))(*a5) == 1)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a5 + 232))(&v210);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v210.__r_.__value_.__l.__data_ + 504))(&v211);
      v10 = v211;
      v211 = 0uLL;
      v213 = v10;
      size = (std::__shared_weak_count *)v210.__r_.__value_.__l.__size_;
      if (v210.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(v210.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
  }
  v14 = *a2;
  v15 = a2[1];
  v16 = v15 - *a2;
  if (v15 == *a2)
  {
    v211 = 0uLL;
    AdobeXMPCore_Int::IError_I::CreateError(100, 102, 2, &v211);
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v211 + *(_QWORD *)(*(_QWORD *)v211 - 304))
                                                          + 120))(v211 + *(_QWORD *)(*(_QWORD *)v211 - 304), "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/MetadataImpl.cpp", 218);
    v195 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)(v211 + *(_QWORD *)(*(_QWORD *)v211 - 304)) + 112))(v211 + *(_QWORD *)(*(_QWORD *)v211 - 304), "Empty XPath", -1);
    if ((_QWORD)v211)
      v196 = v211 + *(_QWORD *)(*(_QWORD *)v211 - 304);
    else
      v196 = 0;
    v210.__r_.__value_.__r.__words[0] = v196;
    v210.__r_.__value_.__l.__size_ = *((_QWORD *)&v211 + 1);
    if (*((_QWORD *)&v211 + 1))
    {
      v197 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    ErrorNotifier = (void (***)(_QWORD, std::string *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v195);
    (**ErrorNotifier)(ErrorNotifier, &v210);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = *(_OWORD *)&v210.__r_.__value_.__l.__data_;
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = 0uLL;
  }
  if ((*((_DWORD *)v14 + 6) & 0x80000000) == 0)
  {
    v17 = 0;
    goto LABEL_11;
  }
  v212 = 0;
  v211 = 0uLL;
  if (v14[23] < 0)
    v14 = *(char **)v14;
  std::string::basic_string[abi:ne180100]<0>(&v211, v14);
  v22 = *a2;
  v23 = (const std::string *)(*a2 + 32);
  if ((*a2)[55] < 0)
  {
    v25 = *((_QWORD *)v22 + 4);
    v24 = *((_QWORD *)v22 + 5);
  }
  else
  {
    v24 = (*a2)[55];
    v25 = (uint64_t)(*a2 + 32);
  }
  if (v24 < 1)
    goto LABEL_55;
  v26 = (_BYTE *)(v25 + v24);
  v27 = (void *)v25;
  while (1)
  {
    v28 = memchr(v27, 58, v24);
    if (!v28)
      goto LABEL_55;
    if (*v28 == 58)
      break;
    v27 = v28 + 1;
    v24 = v26 - (_BYTE *)v27;
    if (v26 - (_BYTE *)v27 < 1)
      goto LABEL_55;
  }
  if (v28 == v26 || &v28[-v25] == (_BYTE *)-1)
LABEL_55:
    __assert_rtn("HandleNonConstAlias", "MetadataImpl.cpp", 224, "colonPos != std::string::npos");
  memset(&v210, 0, sizeof(v210));
  std::string::basic_string(&v210, v23, (std::string::size_type)&v28[-v25 + 1], 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v209);
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)&(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 792)] + 648))(&v208);
  v209 = v208;
  v29 = (uint64_t *)*a2;
  v30 = (a2[1] - *a2) >> 5;
  if (v30 == 2)
  {
    if ((_QWORD)v208)
      goto LABEL_316;
    v208 = 0uLL;
    if (v16 == 64)
    {
      if (v212 >= 0)
        v31 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
      else
        v31 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v210;
      else
        v32 = (std::string *)v210.__r_.__value_.__r.__words[0];
      v205 = 0;
      v206 = 0;
      v204 = 0uLL;
      AdobeXMPCore_Int::CreateTerminalNode(v31, (AdobeXMPCore_Int::IUTF8String_I *)v32, 0, &v205, &v207);
      v33 = v207;
      v207 = 0uLL;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
      v208 = v33;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v206;
      if (v206)
      {
        v41 = (unint64_t *)&v206->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
      if (v212 >= 0)
        v47 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
      else
        v47 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
      if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v210;
      else
        v48 = (std::string *)v210.__r_.__value_.__r.__words[0];
      v205 = 0;
      v206 = 0;
      v204 = 0uLL;
      AdobeXMPCore_Int::CreateTerminalNode(v47, (AdobeXMPCore_Int::IUTF8String_I *)v48, 0, &v205, &v207);
      v49 = v207;
      v207 = 0uLL;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
      v208 = v49;
      if (v50)
      {
        v51 = (unint64_t *)&v50->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v53 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      if (*((_QWORD *)&v207 + 1))
      {
        v54 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v206;
      if (v206)
      {
        v57 = (unint64_t *)&v206->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
    }
    if ((_QWORD)v208)
    {
      v59 = v213;
      if ((_QWORD)v213)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v208 + 232))(&v207);
        v60 = v207;
        v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 192))(v59);
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 208))(v59);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 512))(v60, v61, v62);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
        if (*((_QWORD *)&v207 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
      }
      v66 = *a3;
      v67 = *a1;
      if (*a1)
        v68 = &v67[*(_QWORD *)(*(_QWORD *)v67 - 544)];
      else
        v68 = 0;
      if (v66 == v68)
      {
        (*(void (**)(char *, __int128 *))(*(_QWORD *)&v67[*(_QWORD *)(*(_QWORD *)v67 - 792)] + 656))(&v67[*(_QWORD *)(*(_QWORD *)v67 - 792)], &v208);
      }
      else
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v66 + 240))(&v207);
        (*(void (**)(_QWORD, __int128 *))(*(_QWORD *)(v207 + *(_QWORD *)(*(_QWORD *)v207 - 688)) + 520))(v207 + *(_QWORD *)(*(_QWORD *)v207 - 688), &v208);
        v150 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
        if (*((_QWORD *)&v207 + 1))
        {
          v151 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
      }
      std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a3, (uint64_t *)&v208);
      v17 = *a3 != 0;
    }
    else
    {
      v17 = 0;
    }
    v153 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v154 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    goto LABEL_317;
  }
  if (v30 != 3)
  {
    v193 = "expandedXPath.size() == 3";
    v194 = 246;
    goto LABEL_329;
  }
  v43 = (unsigned __int16 *)(v29 + 8);
  v44 = *((_DWORD *)v29 + 22);
  if (v44 == 5)
  {
    v46 = *((char *)v29 + 87);
    if (v46 < 0)
    {
      if (v29[9] != 23)
      {
LABEL_328:
        v193 = "expandedXPath[ 2 ].step == \"[?xml:lang=\\\"x-default\\\"]\"";
        v194 = 272;
LABEL_329:
        __assert_rtn("HandleNonConstAlias", "MetadataImpl.cpp", v194, v193);
      }
      v43 = *(unsigned __int16 **)v43;
    }
    else if (v46 != 23)
    {
      goto LABEL_328;
    }
    v94 = *(_QWORD *)v43;
    v95 = *((_QWORD *)v43 + 1);
    v96 = *(_QWORD *)((char *)v43 + 15);
    if (v94 != 0x616C3A6C6D783F5BLL || v95 != 0x65642D78223D676ELL || v96 != 0x5D22746C75616665)
      goto LABEL_328;
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)&(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 792)] + 648))(&v208);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v208);
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v208 = 0uLL;
    if (v212 >= 0)
      v102 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
    else
      v102 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v103 = &v210;
    else
      v103 = (std::string *)v210.__r_.__value_.__r.__words[0];
    v207 = 0uLL;
    v205 = 0;
    v206 = 0;
    AdobeXMPCore_Int::CreateTerminalNode(v102, (AdobeXMPCore_Int::IUTF8String_I *)v103, 4608, &v207, &v208);
    v104 = &(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 688)];
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v104 + 520))(v104, &v208);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a3, (uint64_t *)&v208);
    v207 = 0uLL;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 248))(&v205);
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)(v205 + *(_QWORD *)(*(_QWORD *)v205 - 688)) + 552))(&v207);
    v105 = v206;
    if (v206)
    {
      v106 = (unint64_t *)&v206->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v108 = 1;
    while (1)
    {
      if (!(_QWORD)v207)
      {
        v205 = 0;
        v206 = 0;
        AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode((AdobeXMPCore::ISimpleNode_v1 *)"http://www.w3.org/XML/1998/namespace", (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)"lang", (AdobeXMPCore_Int::IUTF8String_I *)"x-default", &v205);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 248))(&v203);
        (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v203 + 656))(&v204, v203, 1);
        v132 = v204;
        if (*((_QWORD *)&v204 + 1))
        {
          v133 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v132 + 1) + 16))(*((_QWORD *)&v132 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v132 + 1));
          }
        }
        v135 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
        if (*((_QWORD *)&v203 + 1))
        {
          v136 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
        if ((_QWORD)v132)
        {
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 248))(&v203);
          (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v203 + 656))(&v204, v203, 1);
          std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v204);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v203);
          if (*a4)
            *a4 = 1;
          v138 = *a3;
          if (v205)
            v139 = v205 + *(_QWORD *)(*(_QWORD *)v205 - 544);
          else
            v139 = 0;
          *(_QWORD *)&v204 = v139;
          *((_QWORD *)&v204 + 1) = v206;
          if (v206)
          {
            v175 = (unint64_t *)&v206->__shared_owners_;
            do
              v176 = __ldxr(v175);
            while (__stxr(v176 + 1, v175));
          }
          (*(void (**)(char *, __int128 *))(*(_QWORD *)v138 + 136))(v138, &v204);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
        }
        else
        {
          v204 = 0uLL;
          if (v212 >= 0)
            v156 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
          else
            v156 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
          if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v157 = &v210;
          else
            v157 = (std::string *)v210.__r_.__value_.__r.__words[0];
          AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v156, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)v157, 0, &v204);
          v158 = v213;
          if ((_QWORD)v213)
          {
            v159 = v204;
            v160 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v213 + 192))(v213);
            v161 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 208))(v158);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v159 + 512))(v159, v160, v161);
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 248))(&v203);
          v162 = v203;
          if ((_QWORD)v204)
            v163 = v204 + *(_QWORD *)(*(_QWORD *)v204 - 544);
          else
            v163 = 0;
          v201 = v163;
          v202 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
          if (*((_QWORD *)&v204 + 1))
          {
            v177 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
            do
              v178 = __ldxr(v177);
            while (__stxr(v178 + 1, v177));
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v162 + 664))(v162, &v201, 1);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v201);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v203);
          v179 = *a3;
          if (v205)
            v180 = v205 + *(_QWORD *)(*(_QWORD *)v205 - 544);
          else
            v180 = 0;
          *(_QWORD *)&v203 = v180;
          *((_QWORD *)&v203 + 1) = v206;
          if (v206)
          {
            v181 = (unint64_t *)&v206->__shared_owners_;
            do
              v182 = __ldxr(v181);
            while (__stxr(v182 + 1, v181));
          }
          (*(void (**)(char *, __int128 *))(*(_QWORD *)v179 + 136))(v179, &v203);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v203);
          std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)&v204);
          std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v204);
        }
        v183 = v206;
        if (v206)
        {
          v184 = (unint64_t *)&v206->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
LABEL_306:
        v186 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
        if (*((_QWORD *)&v207 + 1))
        {
          v187 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v172 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
        if (*((_QWORD *)&v208 + 1))
        {
          v189 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
          do
            v174 = __ldaxr(v189);
          while (__stlxr(v174 - 1, v189));
          goto LABEL_314;
        }
LABEL_316:
        v17 = 1;
        goto LABEL_317;
      }
      v205 = 0;
      v206 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v207 + 48))(&v205);
      v204 = 0uLL;
      (*(void (**)(__int128 *__return_ptr, uint64_t, const char *, uint64_t, const char *, uint64_t))(*(_QWORD *)v205 + 128))(&v204, v205, "http://www.w3.org/XML/1998/namespace", -1, "lang", -1);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v204 + 40))(v204) == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v204 + 232))(&v201);
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v201 + 504))(&v203);
        v109 = v203;
        v110 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v203 + 208))(v203);
        v111 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v109 + 160))(v109, 0, v110, "x-default", -1);
        v112 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
        if (*((_QWORD *)&v203 + 1))
        {
          v113 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = v202;
        if (!v202)
          goto LABEL_183;
        v116 = (unint64_t *)&v202->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
          if (!v111)
          {
LABEL_209:
            std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a3, &v205);
            v125 = 0;
            if (*a4)
              *a4 = v108;
            goto LABEL_195;
          }
        }
        else
        {
LABEL_183:
          if (!v111)
            goto LABEL_209;
        }
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v207 + 56))(&v203);
      v118 = v203;
      v203 = 0uLL;
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
      v207 = v118;
      if (v119)
      {
        v120 = (unint64_t *)&v119->__shared_owners_;
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = (std::__shared_weak_count *)*((_QWORD *)&v203 + 1);
      if (*((_QWORD *)&v203 + 1))
      {
        v123 = (unint64_t *)(*((_QWORD *)&v203 + 1) + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      ++v108;
      v125 = 1;
LABEL_195:
      v126 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
      if (*((_QWORD *)&v204 + 1))
      {
        v127 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
      v129 = v206;
      if (!v206)
        goto LABEL_204;
      v130 = (unint64_t *)&v206->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
        if ((v125 & 1) == 0)
          goto LABEL_306;
      }
      else
      {
LABEL_204:
        if ((v125 & 1) == 0)
          goto LABEL_306;
      }
    }
  }
  if (v44 != 3)
  {
    v17 = 0;
    goto LABEL_317;
  }
  v45 = *((char *)v29 + 87);
  if (v45 < 0)
  {
    if (v29[9] != 3)
    {
LABEL_327:
      v193 = "expandedXPath[ 2 ].step == \"[1]\"";
      v194 = 248;
      goto LABEL_329;
    }
    v43 = *(unsigned __int16 **)v43;
  }
  else if (v45 != 3)
  {
    goto LABEL_327;
  }
  v69 = *v43;
  v70 = *((unsigned __int8 *)v43 + 2);
  if (v69 != 12635 || v70 != 93)
    goto LABEL_327;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)&(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 792)] + 648))(&v208);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v208);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *a3;
  if (!*a3)
  {
    v208 = 0uLL;
    if (v212 >= 0)
      v76 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
    else
      v76 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v210;
    else
      v77 = (std::string *)v210.__r_.__value_.__r.__words[0];
    v207 = 0uLL;
    v205 = 0;
    v206 = 0;
    AdobeXMPCore_Int::CreateTerminalNode(v76, (AdobeXMPCore_Int::IUTF8String_I *)v77, 1536, &v207, &v208);
    v78 = &(*a1)[*(_QWORD *)(*(_QWORD *)*a1 - 688)];
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v78 + 520))(v78, &v208);
    std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](a3, (uint64_t *)&v208);
    v79 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v80 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v75 = *a3;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v75 + 248))(&v207);
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v207 + 656))(&v208, v207, 1);
  v82 = v208;
  if (*((_QWORD *)&v208 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v82 + 1) + 16))(*((_QWORD *)&v82 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v86 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (!(_QWORD)v82)
  {
    v208 = 0uLL;
    if (v212 >= 0)
      v140 = (AdobeXMPCore::ISimpleNode_v1 *)&v211;
    else
      v140 = (AdobeXMPCore::ISimpleNode_v1 *)v211;
    if (v212 >= 0)
      v141 = (const char *)HIBYTE(v212);
    else
      v141 = (const char *)*((_QWORD *)&v211 + 1);
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v142 = &v210;
    else
      v142 = (std::string *)v210.__r_.__value_.__r.__words[0];
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v143 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
    else
      v143 = v210.__r_.__value_.__l.__size_;
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(v140, v141, (const char *)v143, (const char *)0xFFFFFFFFFFFFFFFFLL, (AdobeXMPCore_Int::IUTF8String_I *)v142, 0, &v208);
    v144 = v213;
    if ((_QWORD)v213)
    {
      v145 = v208;
      v146 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v213 + 192))(v213);
      v147 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 208))(v144);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v145 + 512))(v145, v146, v147);
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 248))(&v207);
    v148 = v207;
    if ((_QWORD)v208)
      v149 = v208 + *(_QWORD *)(*(_QWORD *)v208 - 544);
    else
      v149 = 0;
    v205 = v149;
    v206 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v164 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v165 = __ldxr(v164);
      while (__stxr(v165 + 1, v164));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v148 + 664))(v148, &v205, 1);
    v166 = v206;
    if (v206)
    {
      v167 = (unint64_t *)&v206->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (*((_QWORD *)&v207 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::ISimpleNode_v1,void>(a3, (uint64_t)&v208);
    v172 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
    if (*((_QWORD *)&v208 + 1))
    {
      v173 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
LABEL_314:
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    goto LABEL_316;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 248))(&v207);
  (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)v207 + 656))(&v208, v207, 1);
  std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a3, &v208);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  if (!*a4)
    goto LABEL_316;
  v17 = 1;
  *a4 = 1;
LABEL_317:
  v190 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
  if (*((_QWORD *)&v209 + 1))
  {
    v191 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
  if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v210.__r_.__value_.__l.__data_);
  if (SHIBYTE(v212) < 0)
    operator delete((void *)v211);
LABEL_11:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v213 + 1);
  if (*((_QWORD *)&v213 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v213 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v17;
}

void sub_1881113B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::ReplaceNode(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  AdobeXMPCore_Int::MetadataImpl::ReplaceNode((_BYTE *)a1 + *(_QWORD *)(*a1 - 720), a2, a3);
}

void AdobeXMPCore_Int::MetadataImpl::InsertNode(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int IsNodeAlias;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  char **v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  char *v36[3];

  if (!*(_BYTE *)(a1 + 24))
  {
    AdobeXMPCore_Int::StructureNodeImpl::InsertNode((char *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2);
    return;
  }
  v4 = *a2;
  if (!*a2)
    return;
  memset(v36, 0, sizeof(v36));
  (*(void (**)(char ***__return_ptr))(*(_QWORD *)v4 + 88))(&v30);
  v5 = (*((uint64_t (**)(char **))*v30 + 24))(v30);
  (*(void (**)(char **__return_ptr))(*(_QWORD *)*a2 + 72))(&v34);
  v6 = (*(uint64_t (**)(char *))(*(_QWORD *)v34 + 192))(v34);
  IsNodeAlias = AdobeXMPCore_Int::IsNodeAlias(v5, v6, (uint64_t)v36);
  v8 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v31;
  if (!v31)
    goto LABEL_12;
  v12 = (unint64_t *)&v31->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (IsNodeAlias)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if (IsNodeAlias)
    {
LABEL_13:
      v34 = 0;
      v35 = 0;
      v32 = 0;
      v33 = 0;
      v30 = 0;
      v31 = 0;
      AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(&v30, a1 + *(_QWORD *)(*(_QWORD *)a1 - 968) + 8, 1);
      v28 = 0;
      v29 = 0;
      (**(void (***)(uint64_t))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944)))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944));
      std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v28, a1, 8, 1);
      if (v28)
        v14 = (char *)v28 + *(_QWORD *)(*v28 - 856);
      else
        v14 = 0;
      v26 = v14;
      v27 = v29;
      if (v29)
      {
        v15 = (unint64_t *)&v29->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      AdobeXMPCore_Int::HandleNonConstAlias(&v26, v36, &v34, &v33, a2);
      v17 = v27;
      if (v27)
      {
        v18 = (unint64_t *)&v27->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = v29;
      if (v29)
      {
        v21 = (unint64_t *)&v29->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&v30);
      v23 = v35;
      if (v35)
      {
        v24 = (unint64_t *)&v35->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_37;
    }
  }
  AdobeXMPCore_Int::StructureNodeImpl::InsertNode((char *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2);
LABEL_37:
  v30 = v36;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1881118DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  void **v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, void **);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)va2);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  v10 = (void **)(v2 - 56);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::InsertNode(_QWORD *a1, uint64_t *a2)
{
  AdobeXMPCore_Int::MetadataImpl::InsertNode((uint64_t)a1 + *(_QWORD *)(*a1 - 712), a2);
}

void AdobeXMPCore_Int::MetadataImpl::RemoveNode(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;
  void **v38[3];
  char *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  __int128 v42;
  char *v43[3];

  if (!*(_BYTE *)(a1 + 24))
  {
    AdobeXMPCore_Int::StructureNodeImpl::RemoveNode((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2, a3, a4);
    return;
  }
  memset(v43, 0, sizeof(v43));
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 192))(*a3);
  if (AdobeXMPCore_Int::IsNodeAlias(v8, v9, (uint64_t)v43))
  {
    v42 = 0uLL;
    v40 = 0;
    v41 = 0;
    v39 = 0;
    (**(void (***)(uint64_t))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944)))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944));
    std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v39, a1, 8, 1);
    memset(v38, 0, sizeof(v38));
    AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v38, a1 + *(_QWORD *)(*(_QWORD *)a1 - 968) + 8, 1);
    v10 = v39;
    if (v39)
      v10 = &v39[*(_QWORD *)(*(_QWORD *)v39 - 856)];
    v11 = v40;
    v36 = v10;
    v37 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = AdobeXMPCore_Int::HandleConstAlias(&v36, &v42, v43, &v41);
    v15 = v14;
    if (!v11)
      goto LABEL_12;
    v16 = (unint64_t *)&v11->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v15)
      {
LABEL_13:
        v18 = *(_QWORD *)(*(_QWORD *)a1 - 928);
        (*(void (**)(char **__return_ptr))(*(_QWORD *)v42 + 88))(&v36);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v42 + 72))(&v34);
        AdobeXMPCore_Int::StructureNodeImpl::RemoveNode((_QWORD *)(a1 + v18), &v36, &v34, a4);
        v19 = v35;
        if (v35)
        {
          v20 = (unint64_t *)&v35->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = v37;
        if (v37)
        {
          v23 = (unint64_t *)&v37->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
LABEL_32:
        AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v38);
        v28 = v40;
        if (v40)
        {
          v29 = (unint64_t *)&v40->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
        if (*((_QWORD *)&v42 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        goto LABEL_42;
      }
    }
    else
    {
LABEL_12:
      if (v14)
        goto LABEL_13;
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    v42 = 0uLL;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    *(_OWORD *)a4 = v42;
    v42 = 0uLL;
    goto LABEL_32;
  }
  AdobeXMPCore_Int::StructureNodeImpl::RemoveNode((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2, a3, a4);
LABEL_42:
  v38[0] = (void **)v43;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](v38);
}

void sub_188111CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a13);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  a13 = (void **)(v19 - 72);
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::RemoveNode(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  AdobeXMPCore_Int::MetadataImpl::RemoveNode((uint64_t)a1 + *(_QWORD *)(*a1 - 840), a2, a3, a4);
}

void AdobeXMPCore_Int::MetadataImpl::GetNode(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  std::__shared_weak_count *v25;
  void **v26[3];
  uint64_t v27;
  char *v28[3];

  if (*(_BYTE *)(a1 + 24))
  {
    memset(v28, 0, sizeof(v28));
    v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 192))(*a2);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 192))(*a3);
    if (AdobeXMPCore_Int::IsNodeAlias(v8, v9, (uint64_t)v28))
    {
      *a4 = 0;
      a4[1] = 0;
      v27 = 0;
      memset(v26, 0, sizeof(v26));
      AdobeXMPCore_Int::AutoSharedLock::AutoSharedLock(v26, a1 + *(_QWORD *)(*(_QWORD *)a1 - 968) + 8, 1);
      v24 = 0;
      v25 = 0;
      (**(void (***)(uint64_t))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944)))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 944));
      std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(&v24, a1, 8, 1);
      v10 = v24;
      if (v24)
        v10 = &v24[*(_QWORD *)(*(_QWORD *)v24 - 856)];
      v11 = v25;
      *(_QWORD *)&v23 = v10;
      *((_QWORD *)&v23 + 1) = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = AdobeXMPCore_Int::HandleConstAlias(&v23, a4, v28, &v27);
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (!v14)
      {
        v23 = 0uLL;
        std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a4, &v23);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      v20 = v25;
      if (v25)
      {
        v21 = (unint64_t *)&v25->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)v26);
    }
    else
    {
      AdobeXMPCore_Int::StructureNodeImpl::GetNode((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2, a3, a4);
    }
    v26[0] = (void **)v28;
    std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](v26);
  }
  else
  {
    AdobeXMPCore_Int::StructureNodeImpl::GetNode((_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 928)), a2, a3, a4);
  }
}

void sub_188111FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  AdobeXMPCore_Int::AutoSharedLock::~AutoSharedLock((AdobeXMPCore_Int::AutoSharedLock *)&a14);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v18);
  a14 = (void **)&a18;
  std::vector<XPathStepInfo>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::GetNode(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  AdobeXMPCore_Int::MetadataImpl::GetNode((uint64_t)a1 + *(_QWORD *)(*a1 - 832), a2, a3, a4);
}

void AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  uint64_t v2;

  AdobeXMPCore_Int::StructureNodeImpl::~StructureNodeImpl((AdobeXMPCore_Int::StructureNodeImpl *)(v2 + 40), (uint64_t *)&off_1E1BA9E40);
  AdobeXMPCore_Int::NodeImpl::~NodeImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 80), (uint64_t *)&off_1E1BA9F28);
  *((_QWORD *)this + 26) = off_1E1B87678;
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this + 184), (uint64_t *)off_1E1BA9F78);
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(this);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void `virtual thunk to'AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this)
{
  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

{
  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 56)));
}

{
  AdobeXMPCore_Int::IMemoryAllocator_I *v1;

  AdobeXMPCore_Int::MetadataImpl::~MetadataImpl((AdobeXMPCore_Int::MetadataImpl *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 56)));
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(v1);
}

void AdobeXMPCore_Int::CreateTerminalNode(AdobeXMPCore::ISimpleNode_v1 *a1@<X0>, AdobeXMPCore_Int::IUTF8String_I *a2@<X1>, __int16 a3@<W2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  __int128 v12;

  *a5 = 0;
  a5[1] = 0;
  if (*a4)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*a4 + 264))(&v12, *a4, 0, 0);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)a5, &v12);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
LABEL_5:
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  if ((a3 & 0x1F00) == 0)
  {
    AdobeXMPCore::ISimpleNode_v1::CreateSimpleNode(a1, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, 0, &v12);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a5, (uint64_t)&v12);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v9 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v9);
    while (__stlxr(v8 - 1, v9));
    goto LABEL_5;
  }
  if ((a3 & 0x100) != 0)
  {
    AdobeXMPCore::IStructureNode_v1::CreateStructureNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v12);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a5, (uint64_t)&v12);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v10);
    while (__stlxr(v8 - 1, v10));
    goto LABEL_5;
  }
  if ((a3 & 0x200) == 0)
    return;
  if ((a3 & 0x1000) != 0)
  {
    AdobeXMPCore::IArrayNode_v1::CreateAlternativeArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v12);
    std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a5, (uint64_t)&v12);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (!*((_QWORD *)&v12 + 1))
      return;
    v11 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v11);
    while (__stlxr(v8 - 1, v11));
    goto LABEL_5;
  }
  if ((a3 & 0x400) != 0)
    AdobeXMPCore::IArrayNode_v1::CreateOrderedArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v12);
  else
    AdobeXMPCore::IArrayNode_v1::CreateUnorderedArrayNode(a1, (char *)0xFFFFFFFFFFFFFFFFLL, (const char *)0xFFFFFFFFFFFFFFFFLL, a2, &v12);
  std::shared_ptr<AdobeXMPCore::INode_v1>::operator=[abi:ne180100]<AdobeXMPCore::IStructureNode_v1,void>(a5, (uint64_t)&v12);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&v12);
}

void sub_1881122E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AdobeXMPCore_Int::MetadataImpl::~MetadataImpl(AdobeXMPCore_Int::MetadataImpl *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 920)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 856)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 792)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 688)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 544)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[7];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72)) = a2[8];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 864)) = a2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 872)) = a2[10];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 880)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 888)) = a2[12];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 896)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 928)) = a2[14];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 936)) = a2[15];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 944)) = a2[16];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 952)) = a2[17];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 968)) = a2[18];
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::MetadataImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::MetadataImpl,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC500;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_1881124F8(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 944) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_188112528(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 944) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::MetadataImpl *,std::__mem_fn<void (AdobeXMPCore_Int::NodeImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::MetadataImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

AdobeXMPCore_Int::IMemoryAllocator_I *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_string[abi:ne180100](AdobeXMPCore_Int::IMemoryAllocator_I *__dst, void *__src, size_t __len)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v6;
  size_t v7;
  size_t v8;
  uint64_t (***MemoryAllocator)(_QWORD, size_t);

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    MemoryAllocator = (uint64_t (***)(_QWORD, size_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(__dst);
    v6 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(**MemoryAllocator)(MemoryAllocator, v8);
    *((_QWORD *)__dst + 1) = __len;
    *((_QWORD *)__dst + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<XPathStepInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<XPathStepInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<XPathStepInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<IIOBaseObject>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v13 = 0;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    LOBYTE(v13) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<XPathStepInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

BOOL PhotoDataUtils::CheckIPTCDigest(PhotoDataUtils *this, const void *a2, _QWORD *a3, const void *a4)
{
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;
  MD5_CTX v11;
  uint64_t v12;

  v5 = a2;
  v12 = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  memset(&v11, 0, sizeof(v11));
  MD5Init(&v11);
  MD5Update(&v11, (unsigned __int8 *)this, v5);
  MD5Final((unsigned __int8 *)&v9, &v11);
  return v9 == *a3 && v10 == a3[1];
}

uint64_t PhotoDataUtils::SetIPTCDigest(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  double v6;
  _QWORD v8[2];
  MD5_CTX v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = 0;
  v8[1] = 0;
  memset(&v9, 0, sizeof(v9));
  MD5Init(&v9);
  MD5Update(&v9, a1, a2);
  v6 = MD5Final((unsigned __int8 *)v8, &v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, double))(*(_QWORD *)a3 + 8))(a3, 1061, v8, 16, v6);
}

void PhotoDataUtils::ImportIPTC_Simple(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v8;
  int64_t size;
  char v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string *v13;
  std::string *v14;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, 0);
  if (v8)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size >= 1)
    {
      v13 = (std::string *)((char *)p_p + size);
      do
      {
        if (p_p->__r_.__value_.__s.__data_[0] == 13)
          p_p->__r_.__value_.__s.__data_[0] = 10;
        p_p = (std::string *)((char *)p_p + 1);
      }
      while (p_p < v13);
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v11 = __p.__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0)
      v14 = &__p;
    else
      v14 = (std::string *)v11;
    TXMPMeta<std::string>::SetProperty(a2, a4, a5, (uint64_t)v14, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1881129A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_LangAlt(uint64_t a1, uint64_t a2, int a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v8;
  int64_t size;
  char v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string *v13;
  std::string *v14;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, 0);
  if (v8)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v11 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size >= 1)
    {
      v13 = (std::string *)((char *)p_p + size);
      do
      {
        if (p_p->__r_.__value_.__s.__data_[0] == 13)
          p_p->__r_.__value_.__s.__data_[0] = 10;
        p_p = (std::string *)((char *)p_p + 1);
      }
      while (p_p < v13);
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v11 = __p.__r_.__value_.__r.__words[0];
    }
    if (v10 >= 0)
      v14 = &__p;
    else
      v14 = (std::string *)v11;
    TXMPMeta<std::string>::SetLocalizedText(a2, a4, a5, "", "x-default", (const char *)v14, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_188112AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_Array(uint64_t a1, uint64_t a2, int a3, char *a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  int64_t size;
  char v16;
  std::string::size_type v17;
  std::string *p_p;
  std::string *v19;
  std::string *v20;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  IPTC_Manager::GetDataSet(a1, a3, 0, 0);
  v11 = v10;
  TXMPMeta<std::string>::DeleteProperty(a2, a4, a5);
  v12 = 512;
  if (!strcmp(a4, "http://purl.org/dc/elements/1.1/"))
  {
    if (!strcmp(a5, "creator"))
      v12 = 1024;
    else
      v12 = 512;
    if (!v11)
      return;
  }
  else if (!v11)
  {
    return;
  }
  for (i = 0; i != v11; ++i)
  {
    IPTC_Manager::GetDataSet_UTF8(a1, a3, &__p, i);
    if (v14)
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v17 = __p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 1)
      {
        v19 = (std::string *)((char *)p_p + size);
        do
        {
          if (p_p->__r_.__value_.__s.__data_[0] == 13)
            p_p->__r_.__value_.__s.__data_[0] = 10;
          p_p = (std::string *)((char *)p_p + 1);
        }
        while (p_p < v19);
        v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v17 = __p.__r_.__value_.__r.__words[0];
      }
      if (v16 >= 0)
        v20 = &__p;
      else
        v20 = (std::string *)v17;
      TXMPMeta<std::string>::AppendArrayItem(a2, a4, a5, v12, (uint64_t)v20, 0);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_188112C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhotoDataUtils::ImportIPTC_Date(int a1, uint64_t a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  char v15;
  int v16;
  _BOOL4 v17;
  char v18;
  int v19;
  int v20;
  char v21;
  int v22;
  char v23;
  int v24;
  uint64_t v25;
  _BOOL4 v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  char v34;
  int v35;
  char v36;
  int v37;
  unsigned int v38;
  char v39;
  int v40;
  char v41;
  int v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  char v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  char v52;
  int v53;
  char v54;
  int v55;
  _QWORD *exception;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __n128 v60;

  if (a1 == 55)
  {
    v5 = 60;
    v6 = "http://ns.adobe.com/photoshop/1.0/";
    v7 = "DateCreated";
  }
  else
  {
    if (a1 != 62)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Unrecognized dateID";
      *((_BYTE *)exception + 16) = 0;
    }
    v5 = 63;
    v6 = "http://ns.adobe.com/xap/1.0/";
    v7 = "CreateDate";
  }
  v60 = 0uLL;
  IPTC_Manager::GetDataSet(a2, a1, &v60, 0);
  if (!v8 || !v60.n128_u32[1] || !v60.n128_u64[1])
    return;
  v9 = 3;
  if ((unint64_t)v60.n128_u32[1] - 1 < 3)
    v9 = v60.n128_u32[1] - 1;
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v10 = *(unsigned __int8 *)v60.n128_u64[1];
  if ((v10 - 58) < 0xFFFFFFF6)
  {
    v11 = 0;
LABEL_18:
    if (*(_BYTE *)(v60.n128_u64[1] + v11) == 45)
      ++v11;
    goto LABEL_20;
  }
  v12 = 0;
  v11 = 0;
  while (1)
  {
    v13 = v11;
    v12 = v10 + 10 * v12 - 48;
    LODWORD(v57) = v12;
    if (v9 == v11)
      break;
    v10 = *(unsigned __int8 *)(v60.n128_u64[1] + 1 + v11++);
    if ((v10 - 58) < 0xFFFFFFF6)
      goto LABEL_17;
  }
  v11 = v9 + 1;
LABEL_17:
  if (v13 + 1 < v60.n128_u32[1])
    goto LABEL_18;
LABEL_20:
  if (v11 >= v60.n128_u32[1])
  {
    DWORD1(v57) = 1;
    goto LABEL_34;
  }
  v14 = 0;
  v15 = 1;
  while (1)
  {
    v16 = *(unsigned __int8 *)(v60.n128_u64[1] + v11);
    if ((v16 - 58) < 0xFFFFFFF6)
      break;
    v14 = v16 + 10 * v14 - 48;
    DWORD1(v57) = v14;
    v17 = ++v11 < v60.n128_u32[1];
    v18 = v15 & v17;
    v15 = 0;
    if ((v18 & 1) == 0)
      goto LABEL_27;
  }
  v17 = 1;
LABEL_27:
  if (v14 <= 0)
  {
    v19 = 1;
LABEL_31:
    DWORD1(v57) = v19;
    if (!v17)
      goto LABEL_34;
    goto LABEL_32;
  }
  if (v14 >= 0xD)
  {
    v19 = 12;
    goto LABEL_31;
  }
  if (!v17)
    goto LABEL_34;
LABEL_32:
  if (*(_BYTE *)(v60.n128_u64[1] + v11) == 45)
    ++v11;
LABEL_34:
  if (v11 >= v60.n128_u32[1])
    goto LABEL_41;
  v20 = 0;
  v21 = 1;
  do
  {
    v22 = *(unsigned __int8 *)(v60.n128_u64[1] + v11);
    if ((v22 - 58) < 0xFFFFFFF6)
      break;
    v20 = v22 + 10 * v20 - 48;
    DWORD2(v57) = v20;
    v23 = v21 & (++v11 < v60.n128_u32[1]);
    v21 = 0;
  }
  while ((v23 & 1) != 0);
  if (v20 < 1)
  {
LABEL_41:
    v24 = 1;
  }
  else
  {
    if (v20 < 0x20)
      goto LABEL_43;
    v24 = 28;
  }
  DWORD2(v57) = v24;
LABEL_43:
  if (v11 != v60.n128_u32[1])
    return;
  BYTE8(v58) = 1;
  IPTC_Manager::GetDataSet(a2, v5, &v60, 0);
  if (!v25 || !v60.n128_u32[1] || !v60.n128_u64[1])
    goto LABEL_90;
  v26 = 1;
  if (v60.n128_u32[1] == 1)
    v27 = 1;
  else
    v27 = 2;
  v28 = *(unsigned __int8 *)v60.n128_u64[1];
  if ((v28 - 58) >= 0xFFFFFFF6)
  {
    v29 = 0;
    v31 = 1;
    while (1)
    {
      v32 = v31;
      v29 = v28 + 10 * v29 - 48;
      HIDWORD(v57) = v29;
      if (v27 == v31)
        break;
      v28 = *(unsigned __int8 *)(v60.n128_u64[1] + v31++);
      if ((v28 - 58) < 0xFFFFFFF6)
      {
        v27 = v32;
        break;
      }
    }
    v26 = v32 < v60.n128_u32[1];
    if ((v29 & 0x80000000) != 0)
    {
      v30 = 0;
      goto LABEL_62;
    }
  }
  else
  {
    v29 = 0;
    v27 = 0;
  }
  if (v29 < 0x18)
    goto LABEL_63;
  v30 = 23;
LABEL_62:
  HIDWORD(v57) = v30;
LABEL_63:
  if (v26 && *(_BYTE *)(v60.n128_u64[1] + v27) == 58)
    ++v27;
  if (v27 >= v60.n128_u32[1])
    goto LABEL_82;
  v33 = 0;
  v34 = 1;
  do
  {
    v35 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
    if ((v35 - 58) < 0xFFFFFFF6)
    {
      if ((v33 & 0x80000000) != 0)
      {
        v37 = 0;
      }
      else
      {
        if (v33 <= 0x3B)
          goto LABEL_80;
        v37 = 59;
      }
      LODWORD(v58) = v37;
LABEL_80:
      if (*(_BYTE *)(v60.n128_u64[1] + v27) == 58)
        ++v27;
      goto LABEL_82;
    }
    v33 = v35 + 10 * v33 - 48;
    LODWORD(v58) = v33;
    v36 = v34 & (++v27 < v60.n128_u32[1]);
    v34 = 0;
  }
  while ((v36 & 1) != 0);
  if ((v33 & 0x80000000) != 0)
  {
    LODWORD(v58) = 0;
  }
  else if (v33 > 0x3B)
  {
    LODWORD(v58) = 59;
  }
  if (v27 < v60.n128_u32[1])
    goto LABEL_80;
LABEL_82:
  if (v27 >= v60.n128_u32[1])
  {
    BYTE9(v58) = 1;
    goto LABEL_90;
  }
  v38 = 0;
  v39 = 1;
  while (2)
  {
    v40 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
    if ((v40 - 58) < 0xFFFFFFF6)
    {
      if ((v38 & 0x80000000) != 0)
      {
        v42 = 0;
      }
      else
      {
        if (v38 <= 0x3B)
        {
LABEL_97:
          BYTE9(v58) = 1;
          goto LABEL_100;
        }
        v42 = 59;
      }
      DWORD1(v58) = v42;
      goto LABEL_97;
    }
    v38 = v40 + 10 * v38 - 48;
    DWORD1(v58) = v38;
    v41 = v39 & (++v27 < v60.n128_u32[1]);
    v39 = 0;
    if ((v41 & 1) != 0)
      continue;
    break;
  }
  if ((v38 & 0x80000000) != 0)
  {
    DWORD1(v58) = 0;
  }
  else if (v38 > 0x3B)
  {
    DWORD1(v58) = 59;
  }
  BYTE9(v58) = 1;
  if (v27 >= v60.n128_u32[1])
    goto LABEL_90;
LABEL_100:
  v43 = *(unsigned __int8 *)(v60.n128_u64[1] + v27);
  if (v43 > 0x2A)
  {
    if (v43 == 43)
    {
      v44 = 1;
    }
    else
    {
      if (v43 != 45)
        goto LABEL_109;
      v44 = -1;
    }
    BYTE11(v58) = v44;
  }
  else
  {
    if (!*(_BYTE *)(v60.n128_u64[1] + v27) || v43 == 32)
      goto LABEL_90;
LABEL_109:
    if (v27 != v60.n128_u32[1])
      return;
  }
  v45 = v27 + 1;
  if (v27 + 1 < v60.n128_u32[1])
  {
    v46 = *(unsigned __int8 *)(v60.n128_u64[1] + v45);
    if ((v46 - 58) >= 0xFFFFFFF6)
    {
      v47 = 0;
      v48 = 1;
      while (1)
      {
        v47 = v46 + 10 * v47 - 48;
        HIDWORD(v58) = v47;
        v45 = v27 + 2;
        if ((v48 & 1) == 0 || v45 >= v60.n128_u32[1])
          break;
        v48 = 0;
        v46 = *(unsigned __int8 *)(v60.n128_u64[1] + 2 + v27++);
        if ((v46 - 58) < 0xFFFFFFF6)
        {
          v45 = v27 + 1;
          goto LABEL_118;
        }
      }
      ++v27;
      if ((v47 & 0x80000000) != 0)
      {
        HIDWORD(v58) = 0;
      }
      else if (v47 > 0x17)
      {
        HIDWORD(v58) = 23;
      }
      if (v45 < v60.n128_u32[1])
        goto LABEL_123;
    }
    else
    {
      v47 = 0;
LABEL_118:
      if ((v47 & 0x80000000) != 0)
      {
        v49 = 0;
LABEL_122:
        HIDWORD(v58) = v49;
      }
      else if (v47 > 0x17)
      {
        v49 = 23;
        goto LABEL_122;
      }
LABEL_123:
      v50 = v27 + 2;
      if (*(_BYTE *)(v60.n128_u64[1] + v45) == 58)
        v45 = v50;
    }
  }
  if (v45 < v60.n128_u32[1])
  {
    v51 = 0;
    v52 = 1;
    do
    {
      v53 = *(unsigned __int8 *)(v60.n128_u64[1] + v45);
      if ((v53 - 58) < 0xFFFFFFF6)
        break;
      v51 = v53 + 10 * v51 - 48;
      LODWORD(v59) = v51;
      v54 = v52 & (++v45 < v60.n128_u32[1]);
      v52 = 0;
    }
    while ((v54 & 1) != 0);
    if ((v51 & 0x80000000) != 0)
    {
      v55 = 0;
LABEL_133:
      LODWORD(v59) = v55;
    }
    else if (v51 >= 0x3C)
    {
      v55 = 59;
      goto LABEL_133;
    }
  }
  if (v45 != v60.n128_u32[1])
    return;
  BYTE10(v58) = 1;
LABEL_90:
  TXMPMeta<std::string>::SetProperty_Date(a3, v6, v7, &v57, 0);
}

void PhotoDataUtils::Import2WayIPTC(PhotoDataUtils *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  char **v10;
  _BYTE *v11;
  char **v12;
  _BOOL8 DoesPropertyExist;
  BOOL v14;
  int v16;
  unsigned int v17;
  uint64_t v18;
  std::string *v19;
  int64_t size;
  std::string *v21;
  std::string::value_type *v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  std::string *p_s1;
  std::string *i;
  uint64_t v29;
  int v30;
  const char *v32;
  char **v33;
  char *v34;
  __n128 v35;
  _QWORD v36[2];
  _OWORD v37[2];
  std::string __s1;

  memset(v37, 0, sizeof(v37));
  v36[0] = &off_1E1BABE18;
  v36[1] = v37;
  if (!(_DWORD)a3)
    PhotoDataUtils::ExportIPTC(a2, (uint64_t)v36);
  v35 = 0uLL;
  if (kKnownDataSets[0] != 255)
  {
    v6 = 0;
    v7 = kKnownDataSets;
    while (1)
    {
      v8 = &kKnownDataSets[32 * v6];
      v9 = v8 + 1;
      if (v8[1] > 3u)
        goto LABEL_23;
      v11 = (_BYTE *)*((_QWORD *)v8 + 2);
      v10 = (char **)(v8 + 16);
      v12 = v10 + 1;
      DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, v11, v10[1]);
      v14 = DoesPropertyExist;
      if (!PhotoDataUtils::GetNativeInfo((uint64_t)a1, *v7, a3, DoesPropertyExist, &v35)
        || v35.n128_u32[1] == 0)
      {
        goto LABEL_23;
      }
      if ((_DWORD)a3 == 1 || (_DWORD)a3 == -1)
      {
        if (v14)
          goto LABEL_23;
      }
      else if (!PhotoDataUtils::IsValueDifferent(a1, (const IPTC_Manager *)v36, (const IPTC_Manager *)*v7))
      {
        goto LABEL_23;
      }
      TXMPMeta<std::string>::DeleteProperty(a2, *v10, *v12);
      switch(*v9)
      {
        case 0:
          PhotoDataUtils::ImportIPTC_Simple((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 1:
          PhotoDataUtils::ImportIPTC_LangAlt((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 2:
          PhotoDataUtils::ImportIPTC_Array((uint64_t)a1, a2, *v7, *v10, *v12);
          goto LABEL_23;
        case 3:
          v16 = *v7;
          if (v16 != 4)
          {
            if (v16 != 12)
            {
              if (v16 != 55)
                __assert_rtn("Import2WayIPTC", "ReconcileIPTC.cpp", 423, "false");
              PhotoDataUtils::ImportIPTC_Date(55, (uint64_t)a1, a2);
              goto LABEL_23;
            }
            memset(&__s1, 0, sizeof(__s1));
            IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 12, 0, 0);
            v25 = v24;
            if (!v24)
              goto LABEL_23;
            v26 = 0;
            do
            {
              IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 12, &__s1, v26);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s1 = &__s1;
              else
                p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              for (i = p_s1; i->__r_.__value_.__s.__data_[0]; i = (std::string *)((char *)i + 1))
              {
                if (i->__r_.__value_.__s.__data_[0] == 58)
                {
                  v29 = 0;
                  do
                    v30 = i->__r_.__value_.__s.__data_[++v29];
                  while (v30 != 58 && v30 != 0);
                  if (v29 == 8)
                  {
                    i->__r_.__value_.__s.__data_[8] = 0;
                    TXMPMeta<std::string>::AppendArrayItem(a2, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", 512, (uint64_t)i, 0);
                  }
                  break;
                }
                p_s1 = (std::string *)((char *)p_s1 + 1);
              }
              ++v26;
            }
            while (v26 != v25);
            if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_23;
LABEL_71:
            operator delete(__s1.__r_.__value_.__l.__data_);
            goto LABEL_23;
          }
          memset(&__s1, 0, sizeof(__s1));
          IPTC_Manager::GetDataSet_UTF8((uint64_t)a1, 4, &__s1, 0);
          v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if (!v18)
            goto LABEL_70;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &__s1;
          else
            v19 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            size = __s1.__r_.__value_.__l.__size_;
          if (size >= 1)
          {
            v21 = (std::string *)((char *)v19 + size);
            do
            {
              if (v19->__r_.__value_.__s.__data_[0] == 13)
                v19->__r_.__value_.__s.__data_[0] = 10;
              v19 = (std::string *)((char *)v19 + 1);
            }
            while (v19 < v21);
            v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          if ((v17 & 0x80) != 0)
          {
            v23 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            if (__s1.__r_.__value_.__l.__size_ >= 5)
            {
              v22 = (std::string::value_type *)(__s1.__r_.__value_.__r.__words[0] + 4);
              goto LABEL_69;
            }
          }
          else
          {
            v22 = &__s1.__r_.__value_.__s.__data_[4];
            if (v17 > 4)
              goto LABEL_69;
            v23 = &__s1;
          }
          v32 = "001";
          if (!"001")
            goto LABEL_70;
          v33 = off_1E1BCB0A0;
          while (strncmp((const char *)v23, v32, 3uLL))
          {
            v34 = *v33;
            v33 += 2;
            v32 = v34;
            if (!v34)
              goto LABEL_70;
          }
          v22 = *(v33 - 1);
LABEL_69:
          TXMPMeta<std::string>::SetProperty(a2, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "IntellectualGenre", (uint64_t)v22, 0);
          LOBYTE(v17) = *((_BYTE *)&__s1.__r_.__value_.__s + 23);
LABEL_70:
          if ((v17 & 0x80) != 0)
            goto LABEL_71;
LABEL_23:
          ++v6;
          v7 = &kKnownDataSets[32 * v6];
          if (*v7 == 255)
            goto LABEL_73;
          break;
        default:
          goto LABEL_23;
      }
    }
  }
LABEL_73:
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)v36);
}

void sub_188113698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  IPTC_Writer::~IPTC_Writer((IPTC_Writer *)va);
  _Unwind_Resume(a1);
}

void PhotoDataUtils::ExportIPTC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  char *v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *p_p;
  _BYTE *v12;
  __n128 DataSet;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  void **v20;
  _BYTE *v21;
  _BYTE *v22;
  const char *v23;
  const char *v24;
  char **v25;
  char *v26;
  int v27;
  __n128 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string::size_type v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  __n128 v41;
  unint64_t v42;
  std::string *v43;
  uint64_t v44;
  int v45;
  std::string v46;
  void *__p;
  std::string::size_type v48;
  uint64_t v49;

  LOBYTE(v2) = kKnownDataSets[0];
  if (kKnownDataSets[0] != 255)
  {
    v5 = 0;
    v6 = kKnownDataSets;
    while (1)
    {
      switch(kKnownDataSets[32 * v5 + 1])
      {
        case 0:
          v7 = &kKnownDataSets[32 * v5];
          v8 = (_BYTE *)*((_QWORD *)v7 + 2);
          v9 = (_BYTE *)*((_QWORD *)v7 + 3);
          __p = 0;
          v48 = 0;
          v49 = 0;
          LODWORD(v46.__r_.__value_.__l.__data_) = 0;
          if (TXMPMeta<std::string>::GetProperty(a1, v8, v9, (uint64_t)&__p, (uint64_t *)&v46))
          {
            if ((v46.__r_.__value_.__s.__data_[1] & 0x1F) == 0)
            {
              v10 = HIBYTE(v49);
              p_p = &__p;
              if (v49 < 0)
              {
                p_p = __p;
                v10 = v48;
              }
              if (v10 >= 1)
              {
                v12 = &p_p[v10];
                do
                {
                  if (*p_p == 10)
                    *p_p = 13;
                  ++p_p;
                }
                while (p_p < v12);
              }
              DataSet = IPTC_Manager::GetDataSet(a2, v2, 0, 0);
              if (v14 >= 2)
                (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(*(_QWORD *)a2 + 8))(a2, v2, -1, DataSet);
              if (v49 >= 0)
                v15 = &__p;
              else
                v15 = __p;
              if (v49 >= 0)
                v16 = HIBYTE(v49);
              else
                v16 = v48;
              (**(void (***)(uint64_t, _QWORD, void *, uint64_t, _QWORD))a2)(a2, v2, v15, v16, 0);
            }
          }
          else
          {
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 8))(a2, v2, -1);
          }
          goto LABEL_104;
        case 1:
          ExportIPTC_LangAlt(a1, a2, *(_BYTE **)&kKnownDataSets[32 * v5 + 16], *(_BYTE **)&kKnownDataSets[32 * v5 + 24], v2);
          goto LABEL_4;
        case 2:
          ExportIPTC_Array(a1, a2, *(_BYTE **)&kKnownDataSets[32 * v5 + 16], *(_BYTE **)&kKnownDataSets[32 * v5 + 24], v2);
          goto LABEL_4;
        case 3:
          switch(v2)
          {
            case 0x37u:
              goto LABEL_84;
            case 0xCu:
              __p = 0;
              v48 = 0;
              v49 = 0;
              memset(&v46, 0, sizeof(v46));
              v45 = 0;
              if (TXMPMeta<std::string>::GetProperty(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", 0, (uint64_t *)&v45))
              {
                if ((v45 & 0x200) == 0)
                  break;
                v27 = TXMPMeta<std::string>::CountArrayItems(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode");
                v28 = IPTC_Manager::GetDataSet(a2, 12, 0, 0);
                if (v27 != v29)
                  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 8))(a2, 12, -1, v28);
                if (v27 < 1)
                  break;
                v30 = 0;
                v31 = v27;
                do
                {
                  v32 = v30 + 1;
                  TXMPMeta<std::string>::GetArrayItem(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "SubjectCode", v30 + 1, (uint64_t)&__p, (uint64_t *)&v45);
                  if ((v45 & 0x1F00) == 0)
                  {
                    v33 = HIBYTE(v49);
                    if (v49 < 0)
                      v33 = v48;
                    if (v33 == 8)
                    {
                      MEMORY[0x18D761A14](&v46, "IPTC:");
                      if (v49 >= 0)
                        v34 = (const std::string::value_type *)&__p;
                      else
                        v34 = (const std::string::value_type *)__p;
                      if (v49 >= 0)
                        v35 = HIBYTE(v49);
                      else
                        v35 = v48;
                      std::string::append(&v46, v34, v35);
                      std::string::append(&v46, ":::");
                      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v36 = &v46;
                      else
                        v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
                      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v37 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
                      else
                        v37 = LODWORD(v46.__r_.__value_.__r.__words[1]);
                      (**(void (***)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t))a2)(a2, 12, v36, v37, v30);
                    }
                  }
                  ++v30;
                }
                while (v31 != v32);
LABEL_102:
                if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v46.__r_.__value_.__l.__data_);
                break;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 12, -1);
              break;
            case 4u:
              __p = 0;
              v48 = 0;
              v49 = 0;
              v45 = 0;
              if (TXMPMeta<std::string>::GetProperty(a1, "http://iptc.org/std/Iptc4xmpCore/1.0/xmlns/", "IntellectualGenre", (uint64_t)&__p, (uint64_t *)&v45))
              {
                if ((v45 & 0x1F00) != 0)
                  break;
                v18 = HIBYTE(v49);
                v19 = HIBYTE(v49);
                v20 = (void **)__p;
                v21 = &__p;
                if (v49 < 0)
                {
                  v21 = __p;
                  v18 = v48;
                }
                if (v18 >= 1)
                {
                  v22 = &v21[v18];
                  do
                  {
                    if (*v21 == 10)
                      *v21 = 13;
                    ++v21;
                  }
                  while (v21 < v22);
                  v19 = HIBYTE(v49);
                  v20 = (void **)__p;
                }
                v23 = (const char *)(v19 >= 0 ? &__p : v20);
                v24 = "Current";
                if (!"Current")
                  break;
                v25 = kIntellectualGenreMappings;
                while (strcmp(v23, v24))
                {
                  v24 = v25[3];
                  v25 += 2;
                  if (!v24)
                    goto LABEL_104;
                }
                memset(&v46, 0, sizeof(v46));
                std::string::basic_string[abi:ne180100]<0>(&v46, *v25);
                std::string::push_back(&v46, 58);
                if (v49 >= 0)
                  v39 = (const std::string::value_type *)&__p;
                else
                  v39 = (const std::string::value_type *)__p;
                if (v49 >= 0)
                  v40 = HIBYTE(v49);
                else
                  v40 = v48;
                std::string::append(&v46, v39, v40);
                v41 = IPTC_Manager::GetDataSet(a2, 4, 0, 0);
                if (v42 >= 2)
                  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 8))(a2, 4, -1, v41);
                if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v43 = &v46;
                else
                  v43 = (std::string *)v46.__r_.__value_.__r.__words[0];
                if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v44 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
                else
                  v44 = LODWORD(v46.__r_.__value_.__r.__words[1]);
                (**(void (***)(uint64_t, uint64_t, std::string *, uint64_t, _QWORD))a2)(a2, 4, v43, v44, 0);
                goto LABEL_102;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 4, -1);
              break;
            default:
              v17 = 776;
LABEL_107:
              __assert_rtn("ExportIPTC", "ReconcileIPTC.cpp", v17, "false");
          }
LABEL_104:
          if (SHIBYTE(v49) < 0)
            operator delete(__p);
LABEL_4:
          ++v5;
          v6 = &kKnownDataSets[32 * v5];
          v2 = *v6;
          if (v2 == 255)
            return;
          break;
        case 4:
          v17 = 792;
          if (v2 > 0x73u)
          {
            v26 = "rights";
            if (v2 != 116)
            {
              if (v2 != 120)
                goto LABEL_107;
              v26 = "description";
            }
            ExportIPTC_LangAlt(a1, a2, "http://purl.org/dc/elements/1.1/", v26, v2);
          }
          else if (v2 == 62)
          {
            IPTC_Manager::GetDataSet(a2, 62, 0, 0);
            if (v38)
            {
              LOBYTE(v2) = *v6;
LABEL_84:
              ExportIPTC_Date(v2, a1, a2);
            }
          }
          else
          {
            if (v2 != 80)
              goto LABEL_107;
            ExportIPTC_Array(a1, a2, "http://purl.org/dc/elements/1.1/", "creator", 80);
          }
          goto LABEL_4;
        default:
          goto LABEL_4;
      }
    }
  }
}

void PhotoDataUtils::ImportPSIR(unsigned int (***a1)(_QWORD, uint64_t, void **), uint64_t a2, int a3)
{
  BOOL DoesPropertyExist;
  BOOL v6;
  std::string *p_p;
  std::string __p;
  void *v9;
  ReconcileUtils *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  if (a3 != 1)
  {
    if ((**a1)(a1, 1034, &v9))
    {
      DoesPropertyExist = TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/rights/", "Marked");
      v6 = HIDWORD(v9) != 1 || DoesPropertyExist;
      if (!v6 && *(_BYTE *)v10)
        TXMPMeta<std::string>::SetProperty_Bool(a2, "http://ns.adobe.com/xap/1.0/rights/", "Marked", 1, 0);
    }
    if ((**a1)(a1, 1035, &v9)
      && !TXMPMeta<std::string>::DoesPropertyExist(a2, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement"))
    {
      memset(&__p, 0, sizeof(__p));
      if (ReconcileUtils::IsUTF8(v10, HIDWORD(v9)))
      {
        MEMORY[0x18D761A20](&__p, v10, HIDWORD(v9));
      }
      else
      {
        if (ignoreLocalText)
          return;
        ReconcileUtils::LocalToUTF8((const UInt8 *)v10, HIDWORD(v9), &__p);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      TXMPMeta<std::string>::SetProperty(a2, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", (uint64_t)p_p, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_188113EA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188113E94);
}

void sub_188113ED0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188113DD0);
}

void ExportIPTC_LangAlt(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v10;
  _BYTE *p_p;
  _BYTE *v12;
  __n128 DataSet;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  if (!TXMPMeta<std::string>::GetProperty(a1, a3, a4, 0, (uint64_t *)&v17))
    goto LABEL_20;
  if ((v17 & 0x1000) == 0)
    goto LABEL_21;
  if (TXMPMeta<std::string>::GetLocalizedText(a1, a3, a4, "", "x-default", 0, (uint64_t)&__p, 0))
  {
    v10 = HIBYTE(v20);
    p_p = &__p;
    if (v20 < 0)
    {
      p_p = __p;
      v10 = v19;
    }
    if (v10 >= 1)
    {
      v12 = &p_p[v10];
      do
      {
        if (*p_p == 10)
          *p_p = 13;
        ++p_p;
      }
      while (p_p < v12);
    }
    DataSet = IPTC_Manager::GetDataSet(a2, a5, 0, 0);
    if (v14 >= 2)
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 8))(a2, a5, -1, DataSet);
    if (v20 >= 0)
      v15 = &__p;
    else
      v15 = __p;
    if (v20 >= 0)
      v16 = HIBYTE(v20);
    else
      v16 = v19;
    (**(void (***)(uint64_t, uint64_t, void *, uint64_t, _QWORD))a2)(a2, a5, v15, v16, 0);
  }
  else
  {
LABEL_20:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a5, -1);
  }
LABEL_21:
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_18811405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ExportIPTC_Array(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, uint64_t a5)
{
  int v10;
  __n128 DataSet;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  void **v19;
  _BYTE *p_p;
  uint64_t v21;
  _BYTE *v22;
  void **v23;
  uint64_t v24;
  int v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;

  __p = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, a3, a4, 0, (uint64_t *)&v25))
  {
    if ((v25 & 0x200) != 0)
    {
      v10 = TXMPMeta<std::string>::CountArrayItems(a1, a3, a4);
      DataSet = IPTC_Manager::GetDataSet(a2, a5, 0, 0);
      if (v10 != v12)
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a2 + 8))(a2, a5, -1, DataSet);
      if (v10 >= 1)
      {
        v13 = 0;
        v14 = v10;
        do
        {
          v15 = v13 + 1;
          TXMPMeta<std::string>::GetArrayItem(a1, a3, a4, v13 + 1, (uint64_t)&__p, (uint64_t *)&v25);
          if ((v25 & 0x1F00) == 0)
          {
            v16 = HIBYTE(v28);
            v17 = HIBYTE(v28);
            v19 = (void **)__p;
            v18 = v27;
            if (v28 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (v28 >= 0)
              v21 = HIBYTE(v28);
            else
              v21 = v27;
            if (v21 >= 1)
            {
              v22 = &p_p[v21];
              do
              {
                if (*p_p == 10)
                  *p_p = 13;
                ++p_p;
              }
              while (p_p < v22);
              v16 = HIBYTE(v28);
              v19 = (void **)__p;
              v18 = v27;
              v17 = HIBYTE(v28);
            }
            if (v17 >= 0)
              v23 = &__p;
            else
              v23 = v19;
            if (v17 >= 0)
              v24 = v16;
            else
              v24 = v18;
            (**(void (***)(uint64_t, uint64_t, void **, uint64_t, uint64_t))a2)(a2, a5, v23, v24, v13);
          }
          ++v13;
        }
        while (v15 != v14);
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a5, -1);
  }
}

void sub_188114234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t ExportIPTC_Date(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *exception;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char __str[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a1 == 55)
  {
    v6 = 60;
    v7 = "http://ns.adobe.com/photoshop/1.0/";
    v8 = "DateCreated";
  }
  else
  {
    if ((_DWORD)a1 != 62)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      *(_DWORD *)exception = 4;
      exception[1] = "Unrecognized dateID";
      *((_BYTE *)exception + 16) = 0;
    }
    v6 = 63;
    v7 = "http://ns.adobe.com/xap/1.0/";
    v8 = "CreateDate";
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, a1, -1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, v6, -1);
  v14 = 0;
  v12 = 0u;
  v13 = 0u;
  result = TXMPMeta<std::string>::GetProperty_Date(a2, v7, v8, &v12, 0);
  if ((_DWORD)result)
  {
    *(_QWORD *)__str = 0;
    v16 = 0;
    snprintf(__str, 0x10uLL, "%04d%02d%02d", (_DWORD)v12, DWORD1(v12), DWORD2(v12));
    (**(void (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, a1, __str, 8, -1);
    if (BYTE10(v13))
    {
      v10 = 43;
      if (BYTE11(v13) == 255)
        v10 = 45;
      snprintf(__str, 0x10uLL, "%02d%02d%02d%c%02d%02d", HIDWORD(v12), (_DWORD)v13, DWORD1(v13), v10, HIDWORD(v13), v14);
      return (**(uint64_t (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, v6, __str, 11, -1);
    }
    else if (BYTE9(v13))
    {
      snprintf(__str, 0x10uLL, "%02d%02d%02d", HIDWORD(v12), (_DWORD)v13, DWORD1(v13));
      return (**(uint64_t (***)(uint64_t, uint64_t, char *, uint64_t, uint64_t))a3)(a3, v6, __str, 6, -1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, v6, -1);
    }
  }
  return result;
}

void PhotoDataUtils::ExportPSIR(uint64_t a1, uint64_t a2)
{
  ReconcileUtils *p_p;
  char *v5;
  void *v6;
  uint64_t v7;
  const UInt8 *v8;
  CFIndex v9;
  std::string *v10;
  uint64_t v11;
  std::string v12;
  void *__p;
  char *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  if (TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/xap/1.0/rights/", "Marked", (uint64_t)&__p, 0))
  {
    v12.__r_.__value_.__s.__data_[0] = TXMPUtils<std::string>::ConvertToBool((char *)&__p);
    (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)a2 + 8))(a2, 1034, &v12, 1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1034);
  }
  if (!TXMPMeta<std::string>::GetProperty(a1, "http://ns.adobe.com/xap/1.0/rights/", "WebStatement", (uint64_t)&__p, 0))goto LABEL_20;
  if (ignoreLocalText)
  {
    if (v15 >= 0)
      p_p = (ReconcileUtils *)&__p;
    else
      p_p = (ReconcileUtils *)__p;
    if (v15 >= 0)
      v5 = (char *)HIBYTE(v15);
    else
      v5 = v14;
    if (ReconcileUtils::IsASCII(p_p, v5))
    {
      if (v15 >= 0)
        v6 = &__p;
      else
        v6 = __p;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 8))(a2, 1035, v6, v7);
      goto LABEL_21;
    }
LABEL_20:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1035);
    goto LABEL_21;
  }
  memset(&v12, 0, sizeof(v12));
  if (v15 >= 0)
    v8 = (const UInt8 *)&__p;
  else
    v8 = (const UInt8 *)__p;
  if (v15 >= 0)
    v9 = HIBYTE(v15);
  else
    v9 = (CFIndex)v14;
  ReconcileUtils::UTF8ToLocal(v8, v9, &v12);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v12;
  else
    v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    v11 = LODWORD(v12.__r_.__value_.__r.__words[1]);
  (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)a2 + 8))(a2, 1035, v10, v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
LABEL_21:
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

void sub_188114664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1881145D0);
}

void sub_1881146A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  AdobeXMPCore_Int::IMemoryAllocator_I **v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 344)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 304)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 312)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 352)) = a2[6];
  v4 = (char *)this + 80;
  std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 10);
  std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 3);
  std::shared_ptr<AdobeXMPCore::INode_v1>::reset[abi:ne180100]((_QWORD *)this + 5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  v5 = (AdobeXMPCore_Int::IMemoryAllocator_I **)((char *)this + 56);
  std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

void AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104), (uint64_t *)&off_1E1BAB440);
}

{
  uint64_t v2;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v2 + 104), (uint64_t *)&off_1E1BAB440);
  AdobeXMPCore_Int::MemoryManagedObject::operator delete(this);
}

void `virtual thunk to'AdobeXMPCore_Int::ErrorImpl::~ErrorImpl(AdobeXMPCore_Int::ErrorImpl *this)
{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104), (uint64_t *)&off_1E1BAB440);
}

{
  uint64_t v1;

  AdobeXMPCore_Int::SharedObjectImpl::~SharedObjectImpl((AdobeXMPCore_Int::SharedObjectImpl *)(v1 + 104), (uint64_t *)&off_1E1BAB440);
}

{
  AdobeXMPCore_Int::ErrorImpl::~ErrorImpl((AdobeXMPCore_Int::ErrorImpl *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 48)));
}

{
  AdobeXMPCore_Int::ErrorImpl::~ErrorImpl((AdobeXMPCore_Int::ErrorImpl *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetCode(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetDomain(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetSeverity(AdobeXMPCore_Int::ErrorImpl *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetMessage@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetLocation@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetParameter@<X0>(uint64_t this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  AdobeXMPCore_Int::IErrorNotifier_I *v10;
  unint64_t *v11;
  unint64_t v12;
  void (***ErrorNotifier)(_QWORD, __int128 *);
  _OWORD *exception;
  __int128 v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;

  v18 = a2;
  v3 = *(_QWORD *)(this + 56);
  if (a2 >= (*(_QWORD *)(this + 64) - v3) >> 4)
  {
    v16 = 0;
    v17 = 0;
    v7 = this;
    AdobeXMPCore_Int::IError_I::CreateError(1, 1, 2, &v16);
    v8 = v16;
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)] + 120))(&v16[*(_QWORD *)(*(_QWORD *)v16 - 304)], "/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ErrorImpl.cpp", 65);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 304)] + 112))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 304)], "Parameter to IError::GetParamater() is out of range", -1);
    v9 = &v8[*(_QWORD *)(*(_QWORD *)v8 - 304)];
    *(_QWORD *)&v15 = (uint64_t)(*(_QWORD *)(v7 + 64) - *(_QWORD *)(v7 + 56)) >> 4;
    (*(void (**)(char *, __int128 *))(*(_QWORD *)v9 + 152))(v9, &v15);
    v10 = (AdobeXMPCore_Int::IErrorNotifier_I *)(*(uint64_t (**)(char *, unint64_t *))(*(_QWORD *)&v8[*(_QWORD *)(*(_QWORD *)v8 - 304)] + 152))(&v8[*(_QWORD *)(*(_QWORD *)v8 - 304)], &v18);
    *(_QWORD *)&v15 = &v8[*(_QWORD *)(*(_QWORD *)v8 - 304)];
    *((_QWORD *)&v15 + 1) = v17;
    if (v17)
    {
      v11 = (unint64_t *)(v17 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    ErrorNotifier = (void (***)(_QWORD, __int128 *))AdobeXMPCore_Int::IErrorNotifier_I::GetErrorNotifier(v10);
    (**ErrorNotifier)(ErrorNotifier, &v15);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v15;
    v15 = 0uLL;
  }
  v4 = *(_OWORD *)(v3 + 16 * a2);
  *a3 = v4;
  if (*((_QWORD *)&v4 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

void sub_188114AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *AdobeXMPCore_Int::IError_I::CreateError@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v8 = AdobeXMPCore_Int::MemoryManagedObject::operator new((AdobeXMPCore_Int::MemoryManagedObject *)0x80);
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)v8 = off_1E1BBBBE0;
  *(_QWORD *)(v8 + 96) = off_1E1BBBD30;
  *(_QWORD *)(v8 + 104) = off_1E1BBBD98;
  *(_DWORD *)(v8 + 8) = a2;
  *(_DWORD *)(v8 + 12) = a1;
  *(_QWORD *)(v8 + 16) = a3;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_QWORD *)(v8 + 88) = 0;
  result = AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ErrorImpl>((char *)v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCommon/source/ErrorImpl.cpp", 190, 1, v12);
  v10 = v12[0];
  if (v12[0])
    v10 = v12[0] + *(_QWORD *)(*(_QWORD *)v12[0] - 344);
  v11 = v12[1];
  *a4 = v10;
  a4[1] = v11;
  return result;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetParametersCount(AdobeXMPCore_Int::ErrorImpl *this)
{
  return (uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 4;
}

uint64_t AdobeXMPCore_Int::ErrorImpl::GetNextError@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 88);
  *a2 = *(_QWORD *)(this + 80);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *AdobeXMPCore_Int::ErrorImpl::SetNextError@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v5 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v3 = (_QWORD *)(a1 + 80);
  *a3 = v5;
  a3[1] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return std::shared_ptr<IIOBaseObject>::operator=[abi:ne180100](v3, a2);
}

void AdobeXMPCore_Int::ErrorImpl::SetMessage(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 56))(&v10);
    v5 = v11;
    if (!v11)
      return;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
  }
  else
  {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, (uint64_t *)&v9);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v4, &v9);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (!*((_QWORD *)&v9 + 1))
      return;
    v8 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
  }
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t AdobeXMPCore_Int::ErrorImpl::SetLocation(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  AdobeXMPCore_Int::IMemoryAllocator_I *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t MemoryAllocator;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  unsigned __int8 v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33[5];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[9];
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 56))(&v41);
    v4 = v42;
    if (!v42)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
  }
  else
  {
    AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, (const char *)0xFFFFFFFFFFFFFFFFLL, (uint64_t *)v33);
    std::shared_ptr<IIOTextureDataImp>::operator=[abi:ne180100]<BCTextureImp,void>((uint64_t)v3, v33);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v33[0] + 1);
    if (!*((_QWORD *)&v33[0] + 1))
      goto LABEL_11;
    v7 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
    do
      v6 = __ldaxr(v7);
    while (__stlxr(v6 - 1, v7));
  }
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_11:
  (*(void (**)(uint64_t *__return_ptr, _QWORD, const char *, uint64_t))(*(_QWORD *)*v3 + 40))(&v39, *v3, ":", 1);
  v8 = v40;
  if (v40)
  {
    v9 = (unint64_t *)&v40->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v38 = 0;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v33);
  std::ostream::operator<<();
  v11 = *v3;
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((_BYTE *)&v33[1] + 8, (uint64_t)v29);
  v12 = v30;
  v13 = (_QWORD *)v29[0];
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((_BYTE *)&v33[1] + 8, (uint64_t)v27);
  if (v12 >= 0)
    v14 = v29;
  else
    v14 = v13;
  if ((v28 & 0x80u) == 0)
    v15 = v28;
  else
    v15 = v27[1];
  v16 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v11 + 40))(&v31, v11, v14, v15);
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((char)v28 < 0)
  {
    v20 = v27[0];
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v16);
    v16 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator
                                                                                              + 8))(MemoryAllocator, v20);
  }
  if (v30 < 0)
  {
    v22 = v29[0];
    v23 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v16);
    v16 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 8))(v23, v22);
  }
  *(_QWORD *)&v33[0] = off_1E1BBC1B8;
  *(_QWORD *)&v37[0] = off_1E1BBC208;
  *(_QWORD *)&v33[1] = off_1E1BBC1E0;
  *((_QWORD *)&v33[1] + 1) = off_1E1BBC108;
  if (SHIBYTE(v35) < 0)
  {
    v24 = *((_QWORD *)&v34 + 1);
    v25 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 8))(v25, v24);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D761BE8](v37);
}

void sub_188114F2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  __cxa_call_unexpected(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = &unk_1E1BA69B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = off_1E1BBC1E0;
  *(_QWORD *)a1 = &unk_1E1BA6990;
  std::ios_base::init((std::ios_base *)(a1 + 128), (void *)(a1 + 24));
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = -1;
  *(_QWORD *)a1 = off_1E1BBC1B8;
  *(_QWORD *)(a1 + 128) = off_1E1BBC208;
  *(_QWORD *)(a1 + 16) = off_1E1BBC1E0;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = off_1E1BBC108;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_188115040(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t MemoryAllocator;

  *(_QWORD *)a1 = off_1E1BBC1B8;
  *(_QWORD *)(a1 + 128) = off_1E1BBC208;
  v2 = a1 + 128;
  *(_QWORD *)(a1 + 16) = off_1E1BBC1E0;
  *(_QWORD *)(a1 + 24) = off_1E1BBC108;
  if (*(char *)(a1 + 111) < 0)
  {
    v3 = *(_QWORD *)(a1 + 88);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v3);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v2);
  return a1;
}

void AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, AdobeXMPCore_Int::IUTF8String_I *a2, char *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;

  AdobeXMPCore_Int::IUTF8String_I::CreateUTF8String(a2, a3, (uint64_t *)&v10);
  v11 = v10;
  v10 = 0uLL;
  std::vector<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>::push_back[abi:ne180100]((uint64_t *)this + 7, &v11);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1881151C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  __cxa_call_unexpected(a1);
}

uint64_t *std::vector<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCommon::IUTF8String_v1 const>>>::push_back[abi:ne180100](uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[5];

  v3 = result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v10 = ((uint64_t)v5 - *result) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
    v12 = v4 - *result;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v20[4] = (uint64_t)(result + 2);
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    v15 = (**MemoryAllocator)(MemoryAllocator, 16 * v13);
    v16 = (_OWORD *)(v15 + 16 * v10);
    v20[0] = v15;
    v20[1] = (uint64_t)v16;
    v20[3] = v15 + 16 * v13;
    v17 = *a2;
    *v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20[2] = (uint64_t)(v16 + 1);
    std::vector<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>>>::__swap_out_circular_buffer(v3, v20);
    v9 = (_QWORD *)v3[1];
    result = std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer(v20);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
    result[1] = (uint64_t)(v5 + 2);
  }
  v3[1] = (uint64_t)v9;
  return result;
}

void sub_18811530C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>,AdobeXMPCore_Int::TAllocator<std::shared_ptr<AdobeXMPCore::IPathSegment_v1 const>> &>::~__split_buffer((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, void *a2)
{
  AdobeXMPCore_Int::IMemoryAllocator_I *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t MemoryAllocator;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  AdobeXMPCore_Int::IMemoryAllocator_I *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[20];
  __int128 v32;
  _QWORD v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[20];

  v36 = 0u;
  memset(v37, 0, 152);
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  v32 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  *(_DWORD *)((char *)&v33[-1] + *(_QWORD *)(v32 - 24)) |= 8u;
  v30 = 0u;
  memset(v31, 0, 152);
  v28 = 0u;
  v29 = 0u;
  memset(v27, 0, sizeof(v27));
  v26 = 0u;
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  *(_DWORD *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24) + 8) |= 8u;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"0x", 2);
  std::ostream::operator<<();
  v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((_BYTE *)v27 + 8, (uint64_t)&v23);
  if (SHIBYTE(v25) < 0)
  {
    v4 = v23;
    v5 = v24;
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator
                                                                                             + 8))(MemoryAllocator, v4);
    if (v5 < 5)
      goto LABEL_15;
  }
  else if (HIBYTE(v25) <= 4u)
  {
    goto LABEL_15;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str((_BYTE *)v27 + 8, (uint64_t)&v23);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (BYTE2(v23) == 48)
    {
      v7 = BYTE3(v23);
      goto LABEL_10;
    }
LABEL_15:
    *(_QWORD *)&v26 = off_1E1BBC1B8;
    *(_QWORD *)&v27[0] = off_1E1BBC1E0;
    *((_QWORD *)&v27[0] + 1) = off_1E1BBC108;
    v31[0] = off_1E1BBC208;
    if (SHIBYTE(v29) < 0)
    {
      v14 = *((_QWORD *)&v28 + 1);
      v15 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 8))(v15, v14);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x18D761BE8](v31);
LABEL_18:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"0x", 2);
    goto LABEL_19;
  }
  v8 = v23;
  if (*(_BYTE *)(v23 + 2) != 48)
  {
    v13 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 8))(v13, v8);
    goto LABEL_15;
  }
  v7 = *(_BYTE *)(v23 + 3);
  v9 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
  v3 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, v8);
LABEL_10:
  v10 = (v7 - 88) & 0xDF;
  *(_QWORD *)&v26 = off_1E1BBC1B8;
  *(_QWORD *)&v27[0] = off_1E1BBC1E0;
  *((_QWORD *)&v27[0] + 1) = off_1E1BBC108;
  v31[0] = off_1E1BBC208;
  if (SHIBYTE(v29) < 0)
  {
    v11 = *((_QWORD *)&v28 + 1);
    v12 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 8))(v12, v11);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v31);
  if (v10)
    goto LABEL_18;
LABEL_19:
  std::ostream::operator<<();
  std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str(&v33[1], (uint64_t)&v26);
  if ((SBYTE7(v27[0]) & 0x80u) == 0)
    v16 = &v26;
  else
    v16 = (__int128 *)v26;
  v17 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(AdobeXMPCore_Int::ErrorImpl *, __int128 *, uint64_t))(*(_QWORD *)this + 128))(this, v16, -1);
  if (SBYTE7(v27[0]) < 0)
  {
    v18 = v26;
    v19 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v17);
    v17 = (AdobeXMPCore_Int::IMemoryAllocator_I *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 8))(v19, v18);
  }
  *(_QWORD *)&v32 = off_1E1BBC1B8;
  v33[0] = off_1E1BBC1E0;
  v33[1] = off_1E1BBC108;
  v37[0] = off_1E1BBC208;
  if (SHIBYTE(v35) < 0)
  {
    v20 = *((_QWORD *)&v34 + 1);
    v21 = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(v17);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 8))(v21, v20);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D761BE8](v37);
}

void sub_18811569C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream((uint64_t)&a13);
  std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream((uint64_t)&a49);
  __cxa_call_unexpected(a1);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<double>(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  __int128 v8;
  __int128 v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v7 = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  v2 = *(_QWORD *)&v6[0];
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v6
                                                                                  + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)
                                                                                  + 8) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v6[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v10);
}

void sub_188115828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<float>(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  __int128 v8;
  __int128 v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v7 = 0u;
  memset(v6, 0, sizeof(v6));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  v2 = *(_QWORD *)&v6[0];
  *(_DWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v6
                                                                                  + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)
                                                                                  + 8) & 0xFFFFFEFB | 4;
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v2 - 24)) = 6;
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*(_QWORD *)&v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v6[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v10);
}

void sub_188115990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const unsigned int *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<unsigned int>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<unsigned int>(uint64_t a1)
{
  void *__p[2];
  uint64_t v4;
  _OWORD v5[4];
  void *v6[2];
  __int128 v7;
  __int128 v8;
  _BYTE v9[144];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v5[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v9);
}

void sub_188115AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const unint64_t *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<unsigned long long>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<unsigned long long>(uint64_t a1)
{
  void *__p[2];
  uint64_t v4;
  _OWORD v5[4];
  void *v6[2];
  __int128 v7;
  __int128 v8;
  _BYTE v9[144];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v5[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v9);
}

void sub_188115C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const int *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<int>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<int>(uint64_t a1)
{
  void *__p[2];
  uint64_t v4;
  _OWORD v5[4];
  void *v6[2];
  __int128 v7;
  __int128 v8;
  _BYTE v9[144];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v5[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v9);
}

void sub_188115D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const uint64_t *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<long long>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::TAppendParameter<long long>(uint64_t a1)
{
  void *__p[2];
  uint64_t v4;
  _OWORD v5[4];
  void *v6[2];
  __int128 v7;
  __int128 v8;
  _BYTE v9[144];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)v6 = 0u;
  memset(v5, 0, sizeof(v5));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v5);
  std::ostream::operator<<();
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  std::stringbuf::str();
  (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 128))(a1, __p, 0);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v5[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)&v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v5[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D761BE8](v9);
}

void sub_188115EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const float *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<float>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this, const double *a2)
{
  return AdobeXMPCore_Int::TAppendParameter<double>((uint64_t)this);
}

uint64_t AdobeXMPCore_Int::ErrorImpl::AppendParameter(AdobeXMPCore_Int::ErrorImpl *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)this + 128))();
}

_QWORD *AdobeXMPCore_Int::MakeUncheckedSharedPointer<AdobeXMPCore_Int::ErrorImpl>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  char *v10;
  _QWORD *exception;
  char *v12;
  uint64_t v13;

  if (!a1 && a4)
  {
    v12 = 0;
    v13 = 0;
    AdobeXMPCore_Int::IError_I::CreateError(&v12, 1, 6, 2);
    v10 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 304)] + 120))(&v12[*(_QWORD *)(*(_QWORD *)v12 - 304)], a2, a3);
    (*(void (**)(char *, const char *, uint64_t))(*(_QWORD *)&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)] + 112))(&v10[*(_QWORD *)(*(_QWORD *)v10 - 304)], "NULL pointer provided for creating shared pointer", -1);
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = v10;
    exception[1] = v13;
    v12 = 0;
    v13 = 0;
  }
  (**(void (***)(char *))&a1[*(_QWORD *)(*(_QWORD *)a1 - 352)])(&a1[*(_QWORD *)(*(_QWORD *)a1 - 352)]);
  return std::shared_ptr<AdobeXMPCore_Int::ErrorImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(a5, (uint64_t)a1, 8, 1);
}

void sub_188116068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v1;
  uint64_t MemoryAllocator;

  *(_QWORD *)(a1 - 16) = off_1E1BBC1B8;
  *(_QWORD *)(a1 + 112) = off_1E1BBC208;
  *(_QWORD *)a1 = off_1E1BBC1E0;
  *(_QWORD *)(a1 + 8) = off_1E1BBC108;
  if (*(char *)(a1 + 95) < 0)
  {
    v1 = *(_QWORD *)(a1 + 72);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x18D761BE8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t MemoryAllocator;

  *(_QWORD *)(a1 - 16) = off_1E1BBC1B8;
  *(_QWORD *)(a1 + 112) = off_1E1BBC208;
  v1 = a1 + 112;
  *(_QWORD *)a1 = off_1E1BBC1E0;
  *(_QWORD *)(a1 + 8) = off_1E1BBC108;
  if (*(char *)(a1 + 95) < 0)
  {
    v2 = *(_QWORD *)(a1 + 72);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v1);
  JUMPOUT(0x18D761C30);
}

void `virtual thunk to'std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(AdobeXMPCore_Int::IMemoryAllocator_I *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t MemoryAllocator;

  v1 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_QWORD *)v1 = off_1E1BBC1B8;
  *((_QWORD *)v1 + 16) = off_1E1BBC208;
  *((_QWORD *)v1 + 2) = off_1E1BBC1E0;
  *((_QWORD *)v1 + 3) = off_1E1BBC108;
  if (v1[111] < 0)
  {
    v2 = *((_QWORD *)v1 + 11);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  JUMPOUT(0x18D761BE8);
}

{
  char *v1;
  uint64_t v2;
  uint64_t MemoryAllocator;

  v1 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_QWORD *)v1 = off_1E1BBC1B8;
  *((_QWORD *)v1 + 16) = off_1E1BBC208;
  *((_QWORD *)v1 + 2) = off_1E1BBC1E0;
  *((_QWORD *)v1 + 3) = off_1E1BBC108;
  if (v1[111] < 0)
  {
    v2 = *((_QWORD *)v1 + 11);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v1 + 128);
  JUMPOUT(0x18D761C30);
}

void std::basic_stringstream<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t MemoryAllocator;

  *(_QWORD *)a1 = off_1E1BBC1B8;
  *(_QWORD *)(a1 + 128) = off_1E1BBC208;
  v1 = a1 + 128;
  *(_QWORD *)(a1 + 16) = off_1E1BBC1E0;
  *(_QWORD *)(a1 + 24) = off_1E1BBC108;
  if (*(char *)(a1 + 111) < 0)
  {
    v2 = *(_QWORD *)(a1 + 88);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D761BE8](v1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  uint64_t v1;
  uint64_t MemoryAllocator;

  *(_QWORD *)a1 = off_1E1BBC108;
  if (*(char *)(a1 + 87) < 0)
  {
    v1 = *(_QWORD *)(a1 + 64);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }
  return std::streambuf::~streambuf();
}

void std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::~basic_stringbuf(uint64_t a1)
{
  uint64_t v1;
  uint64_t MemoryAllocator;

  *(_QWORD *)a1 = off_1E1BBC108;
  if (*(char *)(a1 + 87) < 0)
  {
    v1 = *(_QWORD *)(a1 + 64);
    MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v1);
  }
  std::streambuf::~streambuf();
  JUMPOUT(0x18D761C30);
}

double std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::seekoff@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 48);
  if (v5 < v6)
  {
    *(_QWORD *)(a1 + 88) = v6;
    v5 = v6;
  }
  if ((a4 & 0x18) == 0 || a3 == 1 && (a4 & 0x18) == 0x18)
    goto LABEL_14;
  if (v5)
  {
    v7 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v7 = (_QWORD *)*v7;
    v8 = v5 - (_QWORD)v7;
    if (a3)
      goto LABEL_10;
LABEL_17:
    v9 = a3;
    goto LABEL_20;
  }
  v8 = 0;
  if (!a3)
    goto LABEL_17;
LABEL_10:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      if ((a4 & 8) != 0)
        v9 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
      else
        v9 = v6 - *(_QWORD *)(a1 + 40);
      goto LABEL_20;
    }
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  v9 = v8;
LABEL_20:
  v10 = -1;
  v12 = v9 + a2;
  if (v12 >= 0 && v8 >= v12 && (!v12 || ((a4 & 8) == 0 || *(_QWORD *)(a1 + 24)) && ((a4 & 0x10) == 0 || v6)))
  {
    if ((a4 & 8) != 0)
    {
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16) + v12;
      *(_QWORD *)(a1 + 32) = v5;
    }
    if ((a4 & 0x10) != 0)
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40) + v12;
    v10 = v12;
  }
LABEL_15:
  result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_QWORD *)(a5 + 128) = v10;
  return result;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::seekpos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, *(_QWORD *)(a2 + 128), 0, a3);
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::underflow(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;

  v1 = *(_QWORD *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 < v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    v1 = v2;
  }
  if ((*(_BYTE *)(a1 + 96) & 8) == 0)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < v1)
  {
    *(_QWORD *)(a1 + 32) = v1;
    v3 = v1;
  }
  v4 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)v4 < v3)
    return *v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::pbackfail(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 48);
  if (v2 < v3)
  {
    *(_QWORD *)(a1 + 88) = v3;
    v2 = v3;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 16) >= v4)
    return 0xFFFFFFFFLL;
  if ((_DWORD)a2 == -1)
  {
    a2 = 0;
    *(_QWORD *)(a1 + 24) = v4 - 1;
    *(_QWORD *)(a1 + 32) = v2;
    return a2;
  }
  if ((*(_BYTE *)(a1 + 96) & 0x10) == 0 && *(unsigned __int8 *)(v4 - 1) != a2)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v4 - 1;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(v4 - 1) = a2;
  return a2;
}

uint64_t std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::overflow(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;

  if (a2 == -1)
    return 0;
  v2 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 **)(a1 + 48);
  v6 = *(unsigned __int8 **)(a1 + 56);
  if (v7 == v6)
  {
    if ((*(_BYTE *)(a1 + 96) & 0x10) == 0)
      return 0xFFFFFFFFLL;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 88);
    v12 = a1 + 64;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::push_back((char *)(a1 + 64), 0);
    if (*(char *)(a1 + 87) < 0)
      v13 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    else
      v13 = 22;
    std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::resize((AdobeXMPCore_Int::IMemoryAllocator_I *)(a1 + 64), v13, 0);
    v14 = &v7[-v10];
    if (*(char *)(a1 + 87) < 0)
    {
      v12 = *(_QWORD *)(a1 + 64);
      v15 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v15 = *(unsigned __int8 *)(a1 + 87);
    }
    v6 = (unsigned __int8 *)(v12 + v15);
    v7 = &v14[v12];
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = &v14[v12];
    *(_QWORD *)(a1 + 56) = v6;
    v8 = v12 + v11 - v10;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 88);
  }
  if ((unint64_t)(v7 + 1) >= v8)
    v8 = (unint64_t)(v7 + 1);
  *(_QWORD *)(a1 + 88) = v8;
  if ((*(_BYTE *)(a1 + 96) & 8) != 0)
  {
    v16 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v16 = (_QWORD *)*v16;
    *(_QWORD *)(a1 + 16) = v16;
    *(_QWORD *)(a1 + 24) = (char *)v16 + v4 - v5;
    *(_QWORD *)(a1 + 32) = v8;
  }
  if (v7 == v6)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 104))(a1, v2);
  *(_QWORD *)(a1 + 48) = v7 + 1;
  *v7 = v2;
  return v2;
}

void sub_188116778(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x188116674);
}

char *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::push_back(char *result, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v3 = result;
  if ((result[23] & 0x80000000) == 0)
  {
    if (result[23] != 22)
    {
      v5 = result[23];
      result[23] = (result[23] + 1) & 0x7F;
      goto LABEL_8;
    }
    v4 = 22;
    goto LABEL_5;
  }
  v5 = *((_QWORD *)result + 1);
  v4 = (*((_QWORD *)result + 2) & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v5 == v4)
  {
LABEL_5:
    result = std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__grow_by((AdobeXMPCore_Int::IMemoryAllocator_I *)result, v4, 1uLL, v4, v4, 0, 0);
    v5 = v4;
  }
  v3[1] = v5 + 1;
  v3 = (_QWORD *)*v3;
LABEL_8:
  v6 = (char *)v3 + v5;
  *v6 = a2;
  v6[1] = 0;
  return result;
}

_BYTE *std::basic_stringbuf<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::str@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char *v3;
  char *v4;
  char *v5;

  v2 = *((_DWORD *)result + 24);
  if ((v2 & 0x10) != 0)
  {
    v3 = (char *)*((_QWORD *)result + 11);
    v4 = (char *)*((_QWORD *)result + 6);
    if (v3 < v4)
    {
      *((_QWORD *)result + 11) = v4;
      v3 = v4;
    }
    v5 = (char *)*((_QWORD *)result + 5);
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      return result;
    }
    v5 = (char *)*((_QWORD *)result + 2);
    v3 = (char *)*((_QWORD *)result + 4);
  }
  return std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__init_with_size[abi:ne180100]<char *,char *>((_BYTE *)a2, v5, v3, v3 - v5);
}

_BYTE *std::basic_string<char,std::char_traits<char>,AdobeXMPCore_Int::TAllocator<char>>::__init_with_size[abi:ne180100]<char *,char *>(_BYTE *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t (***MemoryAllocator)(_QWORD, uint64_t);
  char v11;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    MemoryAllocator = (uint64_t (***)(_QWORD, uint64_t))AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator((AdobeXMPCore_Int::IMemoryAllocator_I *)result);
    result = (_BYTE *)(**MemoryAllocator)(MemoryAllocator, v9);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    result[23] = a4;
  }
  while (a2 != a3)
  {
    v11 = *a2++;
    *(_BYTE *)v4 = v11;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x18D761AA4](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x18D761AB0](v13);
  return a1;
}

void sub_188116A34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x18D761AB0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x188116A14);
}

void sub_188116A7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_188116BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

_QWORD *std::shared_ptr<AdobeXMPCore_Int::ErrorImpl>::shared_ptr[abi:ne180100]<AdobeXMPCore_Int::ErrorImpl,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,void>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;

  *a1 = a2;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E1BBC998;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  a1[1] = v8;
  return a1;
}

void sub_188116CE4(void *a1)
{
  void (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  __cxa_begin_catch(a1);
  v4 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 352) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(void (**)(_QWORD *))(*v4 + v1);
  v1(v4);
  __cxa_rethrow();
}

void sub_188116D14(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D761C30);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[4];
  v2 = a1[5];
  v3 = (_QWORD *)(a1[3] + *(_QWORD *)(*(_QWORD *)a1[3] - 352) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t std::__shared_ptr_pointer<AdobeXMPCore_Int::ErrorImpl *,std::__mem_fn<void (AdobeXMPCore_Int::SharedObjectImpl::*)(void)const>,std::allocator<AdobeXMPCore_Int::ErrorImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t AdobeXMPCore_Int::ErrorImpl::SetLocation(AdobeXMPCore_Int::IMemoryAllocator_I *a1)
{
  uint64_t v1;
  uint64_t MemoryAllocator;

  v1 = *(_QWORD *)a1;
  MemoryAllocator = AdobeXMPCore_Int::IMemoryAllocator_I::GetMemoryAllocator(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)MemoryAllocator + 8))(MemoryAllocator, v1);
}

void PSIR_FileWriter::DeleteExistingInfo(PSIR_FileWriter *this)
{
  PSIR_FileWriter *v2;
  PSIR_FileWriter *v3;
  PSIR_FileWriter *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*((_BYTE *)this + 10))
  {
    if (*((_BYTE *)this + 11))
      PSIR_FileWriter::DeleteExistingInfo();
    if (*((_BYTE *)this + 12))
      free(*((void **)this + 3));
  }
  else if (*((_BYTE *)this + 11))
  {
    v2 = (PSIR_FileWriter *)*((_QWORD *)this + 4);
    if (v2 != (PSIR_FileWriter *)((char *)this + 40))
    {
      do
      {
        *((_BYTE *)v2 + 40) = 1;
        v3 = (PSIR_FileWriter *)*((_QWORD *)v2 + 1);
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = *(PSIR_FileWriter **)v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (PSIR_FileWriter *)*((_QWORD *)v2 + 2);
            v5 = *(_QWORD *)v4 == (_QWORD)v2;
            v2 = v4;
          }
          while (!v5);
        }
        v2 = v4;
      }
      while (v4 != (PSIR_FileWriter *)((char *)this + 40));
    }
  }
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = (_QWORD *)((char *)this + 40);
  std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy((uint64_t)(v6 - 1), v7);
  *v6 = 0;
  v6[1] = 0;
  *(v6 - 2) = 0;
  *(v6 - 1) = v6;
  *((_DWORD *)v6 - 6) = 0;
  *((_DWORD *)v6 - 8) = 0;
  *((_BYTE *)v6 - 28) = 0;
}

void PSIR_FileWriter::~PSIR_FileWriter(PSIR_FileWriter *this)
{
  void *v2;
  void *v3;
  const char *v4;
  int v5;

  *(_QWORD *)this = &off_1E1BB0BD8;
  if (*((_BYTE *)this + 10) && *((_BYTE *)this + 11))
  {
    v4 = "! (this->memParsed && this->fileParsed)";
    v5 = 76;
    goto LABEL_11;
  }
  if (!*((_BYTE *)this + 12))
    goto LABEL_6;
  v2 = (void *)*((_QWORD *)this + 3);
  if (!v2)
  {
    v4 = "this->memContent != 0";
    v5 = 79;
LABEL_11:
    __assert_rtn("~PSIR_FileWriter", "PSIR_FileWriter.cpp", v5, v4);
  }
  free(v2);
LABEL_6:
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  PSIR_FileWriter::~PSIR_FileWriter(this);
  JUMPOUT(0x18D761C30);
}

uint64_t PSIR_FileWriter::GetImgRsrc(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;

  v5 = *(_QWORD *)(a1 + 40);
  v3 = a1 + 40;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(unsigned __int16 *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(unsigned __int16 *)(v6 + 32) > a2)
    return 0;
  if (a3)
  {
    *(_WORD *)a3 = *(_WORD *)(v6 + 42);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v6 + 44);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(v6 + 48);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v6 + 56);
  }
  return 1;
}

uint64_t PSIR_FileWriter::SetImgRsrc(PSIR_FileWriter *this, unsigned int a2, const void *__s2, size_t __n)
{
  unsigned int v4;
  char **v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  char **v12;
  char v13;
  char *v14;
  void *v15;
  uint64_t result;
  void *v17;
  _QWORD *exception;
  _QWORD v19[2];
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = __n;
  v8 = (uint64_t *)((char *)this + 40);
  v7 = (char **)*((_QWORD *)this + 5);
  if (!v7)
    goto LABEL_12;
  v9 = (uint64_t *)((char *)this + 40);
  do
  {
    v10 = *((unsigned __int16 *)v7 + 16);
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = (uint64_t *)v7;
    v7 = (char **)*v12;
  }
  while (*v12);
  if (v9 != v8 && *((unsigned __int16 *)v9 + 16) <= a2)
  {
    if (*((_DWORD *)v9 + 11) == (_DWORD)__n)
    {
      result = memcmp((const void *)v9[6], __s2, __n);
      if (!(_DWORD)result)
        return result;
    }
    v14 = (char *)(v9 + 5);
    if (*((_BYTE *)v9 + 41) || *v14)
    {
      v17 = (void *)v9[6];
      if (v17)
      {
        free(v17);
        v9[6] = 0;
      }
    }
    *((_DWORD *)v9 + 11) = v4;
  }
  else
  {
LABEL_12:
    v13 = *((_BYTE *)this + 11);
    LOBYTE(v19[0]) = 0;
    BYTE1(v19[0]) = v13;
    WORD1(v19[0]) = a2;
    HIDWORD(v19[0]) = __n;
    v19[1] = 0;
    LODWORD(v20) = 0;
    v21 = 0;
    v23[0] = v19[0];
    v23[1] = v20;
    v22 = (unsigned __int16)a2;
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v19);
    v14 = (char *)std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>((uint64_t **)v8 - 1, v8, (unsigned __int16 *)&v22, (uint64_t)&v22)+ 40;
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v23);
  }
  *v14 = 1;
  v15 = malloc_type_malloc(v4, 0xC32B07BEuLL);
  *((_QWORD *)v14 + 1) = v15;
  if (!v15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    exception[1] = "Out of memory";
    *((_BYTE *)exception + 16) = 0;
  }
  result = (uint64_t)memcpy(v15, __s2, v4);
  *((_BYTE *)this + 8) = 1;
  return result;
}

void sub_188117184(_Unwind_Exception *a1)
{
  PSIR_FileWriter::InternalRsrcInfo *v1;

  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t PSIR_FileWriter::DeleteImgRsrc(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  unsigned __int16 v9;

  v9 = a2;
  v2 = this + 40;
  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = this;
    this += 32;
    v5 = v2;
    do
    {
      v6 = *(unsigned __int16 *)(v3 + 32);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(unsigned __int16 *)(v5 + 32) <= a2)
    {
      this = std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__erase_unique<unsigned short>(this, &v9);
      *(_BYTE *)(v4 + 8) = 1;
      if (v9 != 1060)
        *(_BYTE *)(v4 + 9) = 1;
    }
  }
  return this;
}

uint64_t PSIR_FileWriter::IsLegacyChanged(PSIR_FileWriter *this)
{
  PSIR_FileWriter *v2;
  PSIR_FileWriter *v3;
  PSIR_FileWriter *v4;
  BOOL v5;

  if (*((_BYTE *)this + 8))
  {
    if (*((_BYTE *)this + 9))
      return 1;
    v2 = (PSIR_FileWriter *)*((_QWORD *)this + 4);
    if (v2 != (PSIR_FileWriter *)((char *)this + 40))
    {
      while (!*((_BYTE *)v2 + 40) || *((_WORD *)v2 + 21) == 1060)
      {
        v3 = (PSIR_FileWriter *)*((_QWORD *)v2 + 1);
        if (v3)
        {
          do
          {
            v4 = v3;
            v3 = *(PSIR_FileWriter **)v3;
          }
          while (v3);
        }
        else
        {
          do
          {
            v4 = (PSIR_FileWriter *)*((_QWORD *)v2 + 2);
            v5 = *(_QWORD *)v4 == (_QWORD)v2;
            v2 = v4;
          }
          while (!v5);
        }
        v2 = v4;
        if (v4 == (PSIR_FileWriter *)((char *)this + 40))
          return 0;
      }
      return 1;
    }
  }
  return 0;
}

void PSIR_FileWriter::ParseMemoryResources(uint64_t **this, uint64_t *a2, unsigned int a3, char a4)
{
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  PSIR_FileWriter::InternalRsrcInfo *v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  __int128 v30;
  unsigned int v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  PSIR_FileWriter::InternalRsrcInfo *v35;
  char *v36;
  unsigned int v37;
  uint64_t *v38;
  unint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *exception;
  const char *v52;
  uint64_t **v53;
  unsigned int v54;
  unsigned __int16 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;

  PSIR_FileWriter::DeleteExistingInfo((PSIR_FileWriter *)this);
  *((_BYTE *)this + 10) = 1;
  if (!a3)
    return;
  if ((a4 & 1) == 0)
  {
    this[3] = a2;
    if (*((_BYTE *)this + 12))
      PSIR_FileWriter::ParseMemoryResources();
    v8 = a3;
    goto LABEL_8;
  }
  if (a3 >= 0x6400001)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 209;
    v52 = "Outrageous length for memory-based PSIR";
    goto LABEL_63;
  }
  v8 = a3;
  v9 = (uint64_t *)malloc_type_malloc(a3, 0xD083DF56uLL);
  this[3] = v9;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    v52 = "Out of memory";
LABEL_63:
    exception[1] = v52;
    *((_BYTE *)exception + 16) = 0;
  }
  memcpy(v9, a2, a3);
  *((_BYTE *)this + 12) = 1;
  a2 = this[3];
LABEL_8:
  *((_DWORD *)this + 4) = a3;
  v10 = (char *)a2 + v8;
  v11 = (char *)a2 + v8 - 12;
  if (a2 <= (uint64_t *)v11)
  {
    v12 = v10 - 4;
    v53 = this + 7;
    v13 = (uint64_t *)(this + 5);
    v14 = (PSIR_FileWriter::InternalRsrcInfo *)&v56;
    v54 = a3;
    do
    {
      v15 = *((unsigned __int8 *)a2 + 6);
      v16 = (unsigned int *)((char *)a2 + (((unsigned __int16)v15 + 2) & 0x1FE) + 6);
      if (v16 > (unsigned int *)v12)
        break;
      v19 = *v16;
      v18 = v16 + 1;
      v17 = v19;
      v20 = bswap32(v19);
      if (v20 > a3 || v18 > (unsigned int *)&v10[-v20])
        break;
      v22 = this[3];
      v23 = (uint64_t *)((char *)v18 + (((_DWORD)v20 + 1) & 0xFFFFFFFE));
      if (*(_DWORD *)a2 == 1296646712)
      {
        v24 = bswap32(*((unsigned __int16 *)a2 + 2)) >> 16;
        LOWORD(v57) = 0;
        v58 = 0u;
        WORD1(v57) = v24;
        DWORD1(v57) = v20;
        *((_QWORD *)&v57 + 1) = v18;
        LODWORD(v58) = (_DWORD)v18 - (_DWORD)v22;
        if (v15)
          *((_QWORD *)&v58 + 1) = (char *)a2 + 6;
        v25 = *v13;
        if (!*v13)
          goto LABEL_29;
        v26 = (uint64_t)v13;
        do
        {
          v27 = *(unsigned __int16 *)(v25 + 32);
          v28 = v27 >= v24;
          if (v27 >= v24)
            v29 = (uint64_t *)v25;
          else
            v29 = (uint64_t *)(v25 + 8);
          if (v28)
            v26 = v25;
          v25 = *v29;
        }
        while (*v29);
        if ((uint64_t *)v26 != v13 && v24 >= *(unsigned __int16 *)(v26 + 32))
        {
          if (!*(_DWORD *)(v26 + 44) && v17 != 0)
            PSIR_FileWriter::InternalRsrcInfo::operator=(v26 + 40, (uint64_t)&v57);
        }
        else
        {
LABEL_29:
          v55 = v24;
          v30 = v58;
          *(_OWORD *)v14 = v57;
          *((_OWORD *)v14 + 1) = v30;
          std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(this + 4, v13, &v55, (uint64_t)&v55);
          PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(v14);
        }
        PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)&v57);
      }
      else
      {
        v31 = (_DWORD)v23 - (_DWORD)a2;
        if ((((_DWORD)v23 - (_DWORD)a2) & 1) != 0)
          PSIR_FileWriter::ParseMemoryResources();
        v32 = v13;
        v33 = v10;
        v34 = v11;
        v35 = v14;
        v36 = v12;
        v37 = (_DWORD)a2 - (_DWORD)v22;
        v39 = (unint64_t *)this[8];
        v38 = this[9];
        if (v39 >= (unint64_t *)v38)
        {
          v41 = ((char *)v39 - (char *)*v53) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
          v42 = (char *)v38 - (char *)*v53;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>((uint64_t)(this + 9), v44);
          else
            v45 = 0;
          v47 = (uint64_t *)&v45[8 * v41];
          *v47 = v37 | ((unint64_t)v31 << 32);
          v40 = v47 + 1;
          v49 = this[7];
          v48 = this[8];
          v12 = v36;
          if (v48 == v49)
          {
            v14 = v35;
          }
          else
          {
            do
            {
              v50 = *--v48;
              *--v47 = v50;
            }
            while (v48 != v49);
            v48 = *v53;
            v14 = v35;
          }
          this[7] = v47;
          this[8] = v40;
          this[9] = (uint64_t *)&v45[8 * v44];
          v11 = v34;
          if (v48)
            operator delete(v48);
          v10 = v33;
        }
        else
        {
          *v39 = v37 | ((unint64_t)v31 << 32);
          v40 = (uint64_t *)(v39 + 1);
          v12 = v36;
          v14 = v35;
          v11 = v34;
          v10 = v33;
        }
        this[8] = v40;
        v13 = v32;
        a3 = v54;
      }
      a2 = v23;
    }
    while (v23 <= (uint64_t *)v11);
  }
}

void sub_188117638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)va);
  _Unwind_Resume(a1);
}

__n128 PSIR_FileWriter::InternalRsrcInfo::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  __n128 result;
  __int128 v6;

  if (*(_BYTE *)(a1 + 1) || *(_BYTE *)a1)
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void PSIR_FileWriter::ParseFileResources(_BYTE *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  void *v27;
  __int16 *v28;
  unsigned int v29;
  BOOL v30;
  void *v31;
  unsigned int v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;
  unint64_t *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  _QWORD *exception;
  uint64_t v49;
  uint64_t **v50;
  char **v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  _OWORD v57[2];
  __int128 v58;
  __int128 v59;
  _OWORD __src[16];
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  PSIR_FileWriter::DeleteExistingInfo((PSIR_FileWriter *)a1);
  a1[11] = 1;
  if (a3)
  {
    v54 = a1;
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1);
    v61 = 0;
    memset(__src, 0, sizeof(__src));
    v55 = v6 + a3;
    if ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) < v55)
    {
      v49 = (uint64_t)(a1 + 72);
      v50 = (uint64_t **)(a1 + 32);
      v51 = (char **)(a1 + 56);
      v52 = (uint64_t *)(a1 + 40);
      do
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        if (v7 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) < 12)
          return;
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1);
        v56 = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 4, 1);
        v9 = v56;
        LOWORD(v56) = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 2, 1);
        v10 = (unsigned __int16)v56;
        LOBYTE(v56) = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 1, 1);
        v11 = v56;
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v13 = ((_WORD)v11 + 2) & 0x1FE;
        if (v12 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) < v13 + 4)
          return;
        LOBYTE(__src[0]) = v11;
        (**(void (***)(uint64_t, char *, _QWORD, uint64_t))a2)(a2, (char *)__src + 1, (v13 - 1), 1);
        v56 = 0;
        (**(void (***)(uint64_t, unsigned int *, uint64_t, uint64_t))a2)(a2, &v56, 4, 1);
        v14 = v56;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v16 = bswap32(v14);
        v17 = (v16 + 1) & 0xFFFFFFFE;
        if (v15 - (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) < v17)
          return;
        v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1);
        v19 = v18;
        v20 = v18 + v17;
        if (v9 != 1296646712)
        {
          v32 = v20 - v8;
          v33 = v54;
          v35 = (unint64_t *)v54[8];
          v34 = v54[9];
          if ((unint64_t)v35 >= v34)
          {
            v37 = ((char *)v35 - *v51) >> 3;
            if ((unint64_t)(v37 + 1) >> 61)
              std::vector<IIOTag *>::__throw_length_error[abi:ne180100]();
            v38 = v18 + v17;
            v39 = v34 - (_QWORD)*v51;
            v40 = v39 >> 2;
            if (v39 >> 2 <= (unint64_t)(v37 + 1))
              v40 = v37 + 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IIOTag *>>(v49, v41);
              v33 = v54;
            }
            else
            {
              v42 = 0;
            }
            v44 = (unint64_t *)&v42[8 * v37];
            *v44 = v8 | ((unint64_t)v32 << 32);
            v36 = v44 + 1;
            v46 = (char *)v33[7];
            v45 = (char *)v33[8];
            if (v45 != v46)
            {
              do
              {
                v47 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *--v44 = v47;
              }
              while (v45 != v46);
              v45 = *v51;
            }
            v33[7] = v44;
            v33[8] = v36;
            v33[9] = &v42[8 * v41];
            if (v45)
              operator delete(v45);
            v20 = v38;
          }
          else
          {
            *v35 = v8 | ((unint64_t)v32 << 32);
            v36 = v35 + 1;
          }
          v33[8] = v36;
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v20, 0);
          continue;
        }
        v53 = v18 + v17;
        v21 = __rev16(v10);
        v58 = 0u;
        v59 = 0u;
        BYTE1(v58) = 1;
        WORD1(v58) = v21;
        DWORD1(v58) = v16;
        LODWORD(v59) = 0;
        v22 = *v52;
        if (!*v52)
          goto LABEL_19;
        v23 = v52;
        do
        {
          v24 = *(unsigned __int16 *)(v22 + 32);
          v25 = v24 >= v21;
          if (v24 >= v21)
            v26 = (uint64_t *)v22;
          else
            v26 = (uint64_t *)(v22 + 8);
          if (v25)
            v23 = (uint64_t *)v22;
          v22 = *v26;
        }
        while (*v26);
        if (v23 != v52 && v21 >= *((unsigned __int16 *)v23 + 16))
        {
          if (*((_DWORD *)v23 + 11))
            v43 = 1;
          else
            v43 = v14 == 0;
          if (v43)
            goto LABEL_32;
          PSIR_FileWriter::InternalRsrcInfo::operator=((uint64_t)(v23 + 5), (uint64_t)&v58);
        }
        else
        {
LABEL_19:
          LOWORD(v56) = v21;
          v57[0] = v58;
          v57[1] = v59;
          v23 = (uint64_t *)std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(v50, v52, (unsigned __int16 *)&v56, (uint64_t)&v56);
          PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)v57);
        }
        *((_DWORD *)v23 + 14) = v19;
        if (v11)
        {
          v27 = malloc_type_malloc(((_WORD)v11 + 2) & 0x1FE, 0xA6CCD1B5uLL);
          v23[8] = (uint64_t)v27;
          if (!v27)
            goto LABEL_58;
          memcpy(v27, __src, ((_WORD)v11 + 2) & 0x1FE);
        }
        if (v10)
        {
          v28 = &word_1882B8A2C;
          do
          {
            v29 = (unsigned __int16)*v28++;
            v30 = v29 == v21;
          }
          while (v29 > v21);
          if (v30)
          {
            v31 = malloc_type_malloc((v16 + 1) & 0xFFFFFFFE, 0x228DAB1FuLL);
            v23[6] = (uint64_t)v31;
            if (!v31)
            {
LABEL_58:
              exception = __cxa_allocate_exception(0x18uLL);
              *(_DWORD *)exception = 15;
              exception[1] = "Out of memory";
              *((_BYTE *)exception + 16) = 0;
            }
            (**(void (***)(uint64_t, void *, _QWORD, uint64_t))a2)(a2, v31, (v16 + 1) & 0xFFFFFFFE, 1);
            goto LABEL_33;
          }
        }
LABEL_32:
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v53, 0);
LABEL_33:
        PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)&v58);
      }
      while ((*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, 0, 1) < v55);
    }
  }
}

void sub_188117C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)va);
  _Unwind_Resume(a1);
}

uint64_t PSIR_FileWriter::UpdateMemoryResources(PSIR_FileWriter *this, void **a2)
{
  char *v3;
  char *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  _QWORD *exception;
  const char *v37;

  if (*((_BYTE *)this + 11))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    v37 = "Not memory based";
    goto LABEL_49;
  }
  v3 = (char *)*((_QWORD *)this + 4);
  v4 = (char *)this + 40;
  if (v3 == (char *)this + 40)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v5 + ((*((_DWORD *)v3 + 11) + 1) & 0xFFFFFFFE) + 10;
      v7 = (unsigned __int8 *)*((_QWORD *)v3 + 8);
      if (v7)
        v5 = ((*v7 + 2) & 0x1FE) + v6;
      else
        v5 = v6 + 2;
      v8 = (char *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)this + 8) - v11;
  if (v12)
  {
    v13 = v12 >> 3;
    if (v13 <= 1)
      v13 = 1;
    v14 = (int *)(v11 + 4);
    do
    {
      v15 = *v14;
      v14 += 2;
      v5 += v15;
      --v13;
    }
    while (v13);
  }
  v16 = v5;
  v17 = (char *)malloc_type_malloc(v5, 0x4B7F5921uLL);
  if (!v17)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 15;
    v37 = "Out of memory";
    goto LABEL_49;
  }
  v18 = v17;
  v19 = (char *)*((_QWORD *)this + 4);
  v20 = v17;
  if (v19 != v4)
  {
    v21 = &v17[v16];
    v20 = v17;
    do
    {
      *(_DWORD *)v20 = 1296646712;
      *((_WORD *)v20 + 2) = bswap32(*((unsigned __int16 *)v19 + 21)) >> 16;
      v22 = (_BYTE *)*((_QWORD *)v19 + 8);
      if (v22)
      {
        v23 = *v22;
        if (!*v22)
          PSIR_FileWriter::UpdateMemoryResources();
        v24 = v20 + 6;
        if (v21 - v24 < v23 + 1)
          goto LABEL_48;
        memcpy(v24, v22, v23 + 1);
        v25 = &v24[v23 + 1];
        if ((v23 & 1) == 0)
          *v25++ = 0;
      }
      else
      {
        *((_WORD *)v20 + 3) = 0;
        v25 = v20 + 8;
      }
      *(_DWORD *)v25 = bswap32(*((_DWORD *)v19 + 11));
      v26 = v25 + 4;
      v27 = *((unsigned int *)v19 + 11);
      if (v21 - v26 < v27)
        goto LABEL_48;
      memcpy(v26, *((const void **)v19 + 6), v27);
      v28 = *((unsigned int *)v19 + 11);
      v20 = &v26[v28];
      if ((v28 & 1) != 0)
        *v20++ = 0;
      v29 = (char *)*((_QWORD *)v19 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(char **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (char *)*((_QWORD *)v19 + 2);
          v10 = *(_QWORD *)v30 == (_QWORD)v19;
          v19 = v30;
        }
        while (!v10);
      }
      v19 = v30;
    }
    while (v30 != v4);
  }
  v31 = *((_QWORD *)this + 7);
  if (*((_QWORD *)this + 8) != v31)
  {
    v32 = 0;
    v33 = 0;
    while (1)
    {
      v34 = *(unsigned int *)(v31 + v32 + 4);
      if (&v18[v16] - v20 < v34)
        break;
      memcpy(v20, (const void *)(*((_QWORD *)this + 3) + *(unsigned int *)(v31 + v32)), v34);
      v20 += v34;
      ++v33;
      v31 = *((_QWORD *)this + 7);
      v32 += 8;
      if (v33 >= (*((_QWORD *)this + 8) - v31) >> 3)
        goto LABEL_42;
    }
LABEL_48:
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 9;
    v37 = "Buffer overrun";
LABEL_49:
    exception[1] = v37;
    *((_BYTE *)exception + 16) = 0;
  }
LABEL_42:
  if (v20 != &v18[v16])
    PSIR_FileWriter::UpdateMemoryResources();
  (*(void (**)(PSIR_FileWriter *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)this + 40))(this, v18, v16, 0);
  *((_BYTE *)this + 12) = (_DWORD)v16 != 0;
  if (a2)
    *a2 = v18;
  return v16;
}

uint64_t PSIR_FileWriter::UpdateFileResources(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, XMP_ProgressTracker *this)
{
  _QWORD *v9;
  _QWORD *v10;
  float v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *exception;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;

  v39 = 0;
  if (*(_BYTE *)(a1 + 10))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    *(_DWORD *)exception = 7;
    exception[1] = "Not file based";
    *((_BYTE *)exception + 16) = 0;
  }
  v9 = (_QWORD *)(a1 + 40);
  if (this)
  {
    v10 = *(_QWORD **)(a1 + 32);
    v11 = 8.0;
    if (v10 != v9)
    {
      do
      {
        v12 = (_QWORD *)v10[1];
        v13 = v10;
        if (v12)
        {
          do
          {
            v14 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v13[2];
            v15 = *v14 == (_QWORD)v13;
            v13 = v14;
          }
          while (!v15);
        }
        v11 = v11 + (float)(*((_DWORD *)v10 + 11) + 12);
        v10 = v14;
      }
      while (v14 != v9);
    }
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64) - v16;
    if (v17)
    {
      v18 = v17 >> 3;
      if (v18 <= 1)
        v18 = 1;
      v19 = (unsigned int *)(v16 + 4);
      do
      {
        v20 = *v19;
        v19 += 2;
        v11 = v11 + (float)v20;
        --v18;
      }
      while (v18);
    }
    if (!*((_BYTE *)this + 32))
      PSIR_FileWriter::UpdateFileResources();
    XMP_ProgressTracker::AddTotalWork(this, v11);
  }
  v38 = 0;
  v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, 0, 1);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v38, 4);
  v37 = 1296646712;
  v22 = *(_QWORD **)(a1 + 32);
  if (v22 != v9)
  {
    do
    {
      WORD2(v37) = bswap32(*((unsigned __int16 *)v22 + 21)) >> 16;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v37, 6);
      v38 += 6;
      v23 = (_BYTE *)v22[8];
      if (v23)
      {
        if (!*v23)
          PSIR_FileWriter::UpdateFileResources();
        v24 = (*v23 + 2) & 0x1FE;
        (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
        v25 = v38 + v24;
      }
      else
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v39, 2);
        v25 = v38 + 2;
      }
      v38 = v25;
      v36 = bswap32(*((_DWORD *)v22 + 11));
      (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v36, 4);
      v26 = v22[6];
      if (v26)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, v26, *((unsigned int *)v22 + 11));
      }
      else
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *((unsigned int *)v22 + 14), 0);
        XIO::Copy(a2, a3);
      }
      v27 = *((_DWORD *)v22 + 11);
      v38 += v27 + 4;
      if ((v27 & 1) != 0)
      {
        (*(void (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v39, 1);
        ++v38;
      }
      v28 = (_QWORD *)v22[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v22[2];
          v15 = *v29 == (_QWORD)v22;
          v22 = v29;
        }
        while (!v15);
      }
      v22 = v29;
    }
    while (v29 != v9);
  }
  v30 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) != v30)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(v30 + v31), 0);
      XIO::Copy(a2, a3);
      v30 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 64);
      v38 += *(_DWORD *)(v30 + v31 + 4);
      ++v32;
      v31 += 8;
    }
    while (v32 < (v33 - v30) >> 3);
  }
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, v21, 0);
  v36 = bswap32(v38);
  (*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a3 + 8))(a3, &v36, 4);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, 0, 2);
  return v38;
}

uint64_t PSIR_FileWriter::IsChanged(PSIR_FileWriter *this)
{
  return *((unsigned __int8 *)this + 8);
}

void PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo(PSIR_FileWriter::InternalRsrcInfo *this)
{
  int v2;
  void *v3;
  void *v4;

  v2 = *((unsigned __int8 *)this + 1);
  if (*((_BYTE *)this + 1) || *(_BYTE *)this)
  {
    v3 = (void *)*((_QWORD *)this + 1);
    if (v3)
    {
      free(v3);
      *((_QWORD *)this + 1) = 0;
      v2 = *((unsigned __int8 *)this + 1);
    }
    if (v2)
    {
      v4 = (void *)*((_QWORD *)this + 3);
      if (v4)
      {
        free(v4);
        *((_QWORD *)this + 3) = 0;
      }
    }
  }
}

void std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::destroy(a1, a2[1]);
    PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(a2 + 5));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,PSIR_FileWriter::InternalRsrcInfo> const&>(uint64_t **a1, uint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v13 = 0;
  v14 = 0;
  v6 = std::__tree<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,TIFF_FileWriter::InternalTagInfo>>>::__find_equal<unsigned short>(a1, a2, &v14, &v13, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v12 = 0;
    v7 = operator new(0x48uLL);
    v11[1] = (uint64_t)(a1 + 1);
    v9 = *(_OWORD *)(a4 + 16);
    v7[2] = *(_OWORD *)a4;
    v7[3] = v9;
    *((_QWORD *)v7 + 8) = *(_QWORD *)(a4 + 32);
    LOBYTE(v12) = 1;
    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__insert_node_at(a1, (uint64_t)v14, v8, (uint64_t *)v7);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>>>>::reset[abi:ne180100](v11, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(v2 + 40));
    operator delete((void *)v2);
  }
}

uint64_t std::__tree<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,PSIR_FileWriter::InternalRsrcInfo>>>::__erase_unique<unsigned short>(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  PSIR_FileWriter::InternalRsrcInfo::~InternalRsrcInfo((PSIR_FileWriter::InternalRsrcInfo *)(v4 + 40));
  operator delete((void *)v4);
  return 1;
}

void PSIR_FileWriter::DeleteExistingInfo()
{
  __assert_rtn("DeleteExistingInfo", "PSIR_FileWriter.cpp", 47, "! (this->memParsed && this->fileParsed)");
}

void PSIR_FileWriter::ParseMemoryResources()
{
  __assert_rtn("ParseMemoryResources", "PSIR_FileWriter.cpp", 245, "(rsrcLength & 1) == 0");
}

{
  __assert_rtn("ParseMemoryResources", "PSIR_FileWriter.cpp", 198, "! this->ownedContent");
}

void PSIR_FileWriter::UpdateMemoryResources()
{
  __assert_rtn("UpdateMemoryResources", "PSIR_FileWriter.cpp", 469, "rsrcPtr == (newContent + newLength)");
}

{
  __assert_rtn("UpdateMemoryResources", "PSIR_FileWriter.cpp", 433, "nameLen > 0");
}

void PSIR_FileWriter::UpdateFileResources()
{
  __assert_rtn("UpdateFileResources", "PSIR_FileWriter.cpp", 559, "nameLen > 0");
}

{
  __assert_rtn("UpdateFileResources", "PSIR_FileWriter.cpp", 516, "progressTracker->WorkInProgress()");
}

_QWORD *AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal(this, a2, a3, 1);
}

_QWORD *AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal(_QWORD *this, uint64_t a2, int a3, int a4)
{
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *exception;

  if (a2 == 0x63536D6C4E6F6465)
  {
    if (a3 != -1)
    {
      if (a3 == 1)
        return (_QWORD *)((char *)this + *(_QWORD *)(*this - 632));
      exception = __cxa_allocate_exception(0x10uLL);
      AdobeXMPCore_Int::IError_I::CreateInterfaceVersionNotAvailableError(2, 0x63536D6C4E6F6465, a3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 0x29u, exception);
LABEL_12:
    }
  }
  else
  {
    this = AdobeXMPCore_Int::INode_I::GetInterfacePointerInternal((_QWORD *)((char *)this + *(_QWORD *)(*this - 640)), a2, a3, 0);
    if (this)
      v6 = 1;
    else
      v6 = a4 == 0;
    if (!v6)
    {
      v7 = __cxa_allocate_exception(0x10uLL);
      v8 = a2;
      exception = v7;
      AdobeXMPCore_Int::IError_I::CreateInterfaceNotAvailableError(2, 0x63536D6C4E6F6465, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 0x32u, v7);
      goto LABEL_12;
    }
  }
  return this;
}

void sub_1881187BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *`virtual thunk to'AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, int a3)
{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)), a2, a3, 1);
}

{
  return AdobeXMPCore_Int::ISimpleNode_I::GetInterfacePointerInternal((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 600)), a2, a3, 1);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ISimpleNode_I,void *,void *,unsigned long long,unsigned int>(a4, (uint64_t)this, 0, (uint64_t (*)(_QWORD *, uint64_t, _QWORD))0x248, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 24, a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunction<AdobeXMPCore_Int::ISimpleNode_I,void *,void *,unsigned long long,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;

  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v9 + a4);
  return a4(v9, a8, a9);
}

uint64_t `virtual thunk to'AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer(AdobeXMPCore_Int::ISimpleNode_I *this, uint64_t a2, unsigned int a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2, a3, a4);
}

{
  return AdobeXMPCore_Int::ISimpleNode_I::getInterfacePointer((AdobeXMPCore_Int::ISimpleNode_I *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 656)), a2, a3, a4);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::getValue(AdobeXMPCore_Int::ISimpleNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 632), (void (*)(char **__return_ptr, _QWORD *))0x1F8, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunctionReturningSharedPointer<AdobeXMPCore::ISimpleNode_v1,AdobeXMPCommon::IUTF8String_v1 const*,AdobeXMPCommon::IUTF8String_v1 const>(_QWORD *a1, uint64_t a2, void (*a3)(char **__return_ptr, _QWORD *), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v11;
  std::__shared_weak_count *v12;

  *a1 = 0;
  v11 = 0;
  v12 = 0;
  v4 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(void (**)(char **__return_ptr, _QWORD *))(*v4 + a3);
  a3(&v11, v4);
  if (v11)
  {
    v5 = (*(uint64_t (**)(char *))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)] + 16))(&v11[*(_QWORD *)(*(_QWORD *)v11 - 64)], 0x6E55544638537472, 1);
  }
  else
  {
    v6 = 0;
  }
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_188118A94(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, char *a10)
{
  char **v10;
  unsigned int v11;
  uint64_t v12;
  char **exception_ptr;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 2)
  {
    exception_ptr = (char **)__cxa_get_exception_ptr(a1);
    v16 = exception_ptr[1];
    a9 = *exception_ptr;
    a10 = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __cxa_begin_catch(a1);
    v19 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)a9 + 200))(a9);
    *v10 = v19;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)] + 16))(&v19[*(_QWORD *)(*(_QWORD *)v19 - 56)]);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  }
  else
  {
    __cxa_begin_catch(a1);
    AdobeXMPCore_Int::IError_I::CreateUnknownExceptionCaughtError(2, v12, v11, &a9);
    v21 = a9;
    std::shared_ptr<IIOTextureDataImp>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    (*(void (**)(char *))(*(_QWORD *)&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)] + 40))(&v21[*(_QWORD *)(*(_QWORD *)v21 - 312)]);
    *v10 = &v21[*(_QWORD *)(*(_QWORD *)v21 - 304)];
  }
  __cxa_end_catch();
  JUMPOUT(0x188118A78);
}

void sub_188118B90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::setValue(AdobeXMPCore_Int::ISimpleNode_I *this, const char *a2, uint64_t a3, const AdobeXMPCommon::IError_v1 **a4)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,char const*,unsigned long long>(a4, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 632), (uint64_t (*)(_QWORD *, uint64_t, uint64_t))0x200, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 61, (uint64_t)a2, a3);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,char const*,unsigned long long>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD *, uint64_t, uint64_t);
  _QWORD *v9;

  v8 = a3;
  *a1 = 0;
  v9 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    v8 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v9 + a3);
  return v8(v9, a7, a8);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::isURIType(AdobeXMPCore_Int::ISimpleNode_I *this, const AdobeXMPCommon::IError_v1 **a2)
{
  return AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ISimpleNode_v1,unsigned int,BOOL>(a2, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 632), 0, (uint64_t (*)(_QWORD *))0x208, 1);
}

uint64_t AdobeXMPCore_Int::CallConstUnSafeFunction<AdobeXMPCore::ISimpleNode_v1,unsigned int,BOOL>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *), uint64_t a5)
{
  _QWORD *v5;

  *a1 = 0;
  v5 = (_QWORD *)(a2 + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(uint64_t (**)(_QWORD *))(*v5 + a4);
  return a4(v5);
}

uint64_t AdobeXMPCore_Int::ISimpleNode_I::setURIType(AdobeXMPCore_Int::ISimpleNode_I *this, int a2, const AdobeXMPCommon::IError_v1 **a3)
{
  return AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,BOOL>(a3, (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 632), (uint64_t (*)(_QWORD *, uint64_t))0x210, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/ImageIO/XMP-Toolkit-SDK/XMPCore/source/ISimpleNode_I.cpp", 71, a2 != 0);
}

uint64_t AdobeXMPCore_Int::CallUnSafeFunctionReturningVoid<AdobeXMPCore::ISimpleNode_v1,BOOL>(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  *a1 = 0;
  v7 = (_QWORD *)(a2 + (a4 >> 1));
  if ((a4 & 1) != 0)
    a3 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + a3);
  return a3(v7, a7);
}

void WebPInitAlphaProcessingNEON()
{
  WebPApplyAlphaMultiply = ApplyAlphaMultiply_NEON;
  WebPDispatchAlpha = DispatchAlpha_NEON;
  WebPDispatchAlphaToGreen = (uint64_t)DispatchAlphaToGreen_NEON;
  WebPExtractAlpha = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ExtractAlpha_NEON;
  WebPExtractGreen = ExtractGreen_NEON;
}

char *ApplyAlphaMultiply_NEON(char *result, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  char *v13;
  uint64_t j;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  int8x8x4_t v26;
  int8x8x4_t v27;

  if (a4 >= 1)
  {
    v5 = 3;
    if (a2)
      v5 = 0;
    v6 = a5;
    do
    {
      if (a2)
      {
        if (a3 >= 8)
        {
          v7 = result;
          for (i = 8; i <= a3; i += 8)
          {
            v26 = vld4_s8(v7);
            v9 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[1], (uint8x8_t)v26.val[0]);
            v10 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[2], (uint8x8_t)v26.val[0]);
            v11 = (int8x16_t)vmull_u8((uint8x8_t)v26.val[3], (uint8x8_t)v26.val[0]);
            v26.val[1] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v9, 8uLL), (int16x8_t)vmvnq_s8(v9));
            v26.val[2] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v10, 8uLL), (int16x8_t)vmvnq_s8(v10));
            v26.val[3] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v11, 8uLL), (int16x8_t)vmvnq_s8(v11));
            vst4_s8(v7, v26);
            v7 += 32;
          }
LABEL_14:
          v12 = a3 & 0x7FFFFFF8;
          goto LABEL_15;
        }
      }
      else if (a3 >= 8)
      {
        v13 = result;
        for (j = 8; j <= a3; j += 8)
        {
          v27 = vld4_s8(v13);
          v15 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[1], (uint8x8_t)v27.val[3]);
          v16 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[2], (uint8x8_t)v27.val[3]);
          v17 = (int8x16_t)vmull_u8((uint8x8_t)v27.val[0], (uint8x8_t)v27.val[3]);
          v27.val[1] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v15, 8uLL), (int16x8_t)vmvnq_s8(v15));
          v27.val[2] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v16, 8uLL), (int16x8_t)vmvnq_s8(v16));
          v27.val[0] = vsubhn_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v17, 8uLL), (int16x8_t)vmvnq_s8(v17));
          vst4_s8(v13, v27);
          v13 += 32;
        }
        goto LABEL_14;
      }
      v12 = 0;
LABEL_15:
      if (v12 < a3)
      {
        v18 = &result[a2 != 0];
        v19 = 4 * v12;
        do
        {
          v20 = v19;
          v21 = result[v5 + v19];
          if (v21 != 255)
          {
            v22 = 32897 * v21;
            v18[v20] = (v22 * v18[v20]) >> 23;
            v18[(v20 + 1)] = (v22 * v18[(v20 + 1)]) >> 23;
            v18[(v20 + 2)] = (v22 * v18[(v20 + 2)]) >> 23;
          }
          v19 = v20 + 4;
          ++v12;
        }
        while (v12 < a3);
      }
      result += v6;
      v25 = __OFSUB__(a4, 1);
      v23 = a4 == 1;
      v24 = --a4 < 0;
    }
    while (!(v24 ^ v25 | v23));
  }
  return result;
}

BOOL DispatchAlpha_NEON(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  int8x8_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int8x8x4_t v21;

  if (a4 < 1)
  {
    v8 = (int8x8_t)-1;
    v9 = 255;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    v8 = (int8x8_t)-1;
    v9 = 255;
    do
    {
      if (a3 < 9)
      {
        v14 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = (char *)(a5 + (v10 & 0xFFFFFFE0));
          v21 = vld4_s8(v12);
          v21.val[0] = *(int8x8_t *)(a1 + v11);
          vst4_s8(v12, v21);
          v13 = v11 + 16;
          v11 += 8;
          v8 = vand_s8(v21.val[0], v8);
          v10 += 32;
        }
        while (v13 < a3);
        v14 = ((a3 - 9) & 0xFFFFFFF8) + 8;
      }
      if ((int)v14 < a3)
      {
        v15 = 0;
        v16 = v14;
        v17 = 4 * v14;
        v18 = a1 + v14;
        do
        {
          v19 = *(unsigned __int8 *)(v18 + v15);
          *(_BYTE *)(a5 + (v17 & 0xFFFFFFFC)) = v19;
          v9 &= v19;
          v17 += 4;
          ++v15;
        }
        while ((int)(v16 + v15) < a3);
      }
      a1 += v7;
      a5 += a6;
      ++v6;
    }
    while (v6 != a4);
  }
  return ((16843009 * v9) & v8.i32[0] & v8.i32[1]) != -1;
}

uint64_t DispatchAlphaToGreen_NEON(uint64_t result, int a2, int a3, int a4, char *a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (a3 >= 8)
      {
        v9 = 0;
        v10 = a5;
        do
        {
          v11 = *(_QWORD *)(result + v9);
          v12 = 0;
          v13 = 0;
          vst4_s8(v10, *(int8x8x4_t *)&v7);
          v10 += 32;
          v14 = v9 + 16;
          v9 += 8;
        }
        while (v14 <= a3);
        LODWORD(v8) = a3 & 0x7FFFFFF8;
      }
      else
      {
        LODWORD(v8) = 0;
      }
      if ((int)v8 < a3)
      {
        v8 = v8;
        do
        {
          *(_DWORD *)&a5[4 * v8] = *(unsigned __int8 *)(result + v8) << 8;
          ++v8;
        }
        while ((int)v8 < a3);
      }
      result += a2;
      ++v6;
      a5 += 4 * a6;
    }
    while (v6 != a4);
  }
  return result;
}

BOOL ExtractAlpha_NEON(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  int32x2_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (a4 < 1)
  {
    v8 = (int32x2_t)-1;
    v9 = 255;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    v8 = (int32x2_t)-1;
    v9 = 255;
    do
    {
      if (a3 < 9)
      {
        v15 = 0;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        do
        {
          v12 = (const char *)(a1 + (v10 & 0xFFFFFFE0));
          v13 = (unint64_t)vld4_s8(v12);
          *(_QWORD *)(a5 + v11) = v13;
          v14 = v11 + 16;
          v11 += 8;
          v8 = (int32x2_t)vand_s8((int8x8_t)v13, (int8x8_t)v8);
          v10 += 32;
        }
        while (v14 < a3);
        v15 = ((a3 - 9) & 0xFFFFFFF8) + 8;
      }
      if ((int)v15 < a3)
      {
        v16 = 0;
        v17 = v15;
        v18 = 4 * v15;
        v19 = a5 + v15;
        do
        {
          v20 = *(unsigned __int8 *)(a1 + (v18 & 0xFFFFFFFC));
          *(_BYTE *)(v19 + v16) = v20;
          v9 &= v20;
          v18 += 4;
          ++v16;
        }
        while ((int)(v17 + v16) < a3);
      }
      a1 += v7;
      a5 += a6;
      ++v6;
    }
    while (v6 != a4);
  }
  return (vand_s8((int8x8_t)vdup_lane_s32(v8, 1), (int8x8_t)v8).u32[0] & (16843009 * v9)) == -1;
}

const char *ExtractGreen_NEON(const char *result, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  unint64_t v6;
  _BYTE *v7;
  const char *v8;
  int v9;
  int8x16x4_t v10;

  if (a3 >= 16)
  {
    v4 = 0;
    v3 = a3 & 0xFFFFFFF0;
    v5 = result;
    do
    {
      v10 = vld4q_s8(v5);
      v5 += 64;
      *(int8x16_t *)(a2 + v4) = v10.val[1];
      v6 = v4 + 32;
      v4 += 16;
    }
    while (v6 <= a3);
  }
  else
  {
    v3 = 0;
  }
  if ((int)v3 < a3)
  {
    v7 = (_BYTE *)(a2 + v3);
    v8 = &result[4 * v3];
    do
    {
      v9 = *(_DWORD *)v8;
      v8 += 4;
      *v7++ = BYTE1(v9);
      ++v3;
    }
    while ((int)v3 < a3);
  }
  return result;
}

uint64_t VP8InitBitReader(uint64_t result, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  if (!result)
    VP8InitBitReader_cold_1();
  if (!a2)
    VP8InitBitReader_cold_2();
  if (a3 >> 31)
    VP8InitBitReader_cold_3();
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0xFFFFFFF8000000FELL;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = (char *)a2 + a3;
  v3 = (unint64_t)a2 + a3 - 7;
  if (a3 <= 7)
    v3 = (unint64_t)a2;
  *(_QWORD *)(result + 32) = v3;
  if (v3 <= (unint64_t)a2)
    return VP8LoadFinalBytes(result);
  v4 = *a2;
  *(_QWORD *)(result + 16) = (char *)a2 + 7;
  *(_QWORD *)result = bswap64(v4) >> 8;
  *(_DWORD *)(result + 12) = 48;
  return result;
}

uint64_t VP8LoadFinalBytes(uint64_t result)
{
  unsigned __int8 *v1;

  if (!result || (v1 = *(unsigned __int8 **)(result + 16)) == 0)
    VP8LoadFinalBytes_cold_1();
  if ((unint64_t)v1 >= *(_QWORD *)(result + 24))
  {
    if (*(_DWORD *)(result + 40))
    {
      *(_DWORD *)(result + 12) = 0;
    }
    else
    {
      *(_QWORD *)result <<= 8;
      *(_DWORD *)(result + 12) += 8;
      *(_DWORD *)(result + 40) = 1;
    }
  }
  else
  {
    *(_DWORD *)(result + 12) += 8;
    *(_QWORD *)(result + 16) = v1 + 1;
    *(_QWORD *)result = *v1 | (*(_QWORD *)result << 8);
  }
  return result;
}

uint64_t VP8GetValue(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  if (a2 < 1)
    return 0;
  LODWORD(v3) = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v6 = a2 + 1;
  do
  {
    if (v4 < 0)
    {
      v7 = *(unint64_t **)(a1 + 16);
      if (!v7)
        VP8GetValue_cold_1();
      if ((unint64_t)v7 >= *(_QWORD *)(a1 + 32))
      {
        VP8LoadFinalBytes(a1);
        v4 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v8 = *v7;
        *(_QWORD *)(a1 + 16) = (char *)v7 + 7;
        *((_QWORD *)&v9 + 1) = *(_QWORD *)a1;
        *(_QWORD *)&v9 = bswap64(v8);
        *(_QWORD *)a1 = v9 >> 8;
        v4 += 56;
      }
    }
    v10 = (v5 >> 1) & 0xFFFFFF;
    v11 = v4;
    v12 = *(_QWORD *)a1 >> v4;
    if (v10 >= v12)
    {
      v13 = v10 + 1;
    }
    else
    {
      v13 = v5 - v10;
      *(_QWORD *)a1 -= (unint64_t)(v10 + 1) << v11;
    }
    v14 = v10 < v12;
    v15 = __clz(v13) ^ 0x18;
    v16 = v13 << v15;
    v4 = v11 - v15;
    v5 = v16 - 1;
    *(_DWORD *)(a1 + 8) = v16 - 1;
    *(_DWORD *)(a1 + 12) = v4;
    v3 = (v14 << (v6-- - 2)) | v3;
  }
  while (v6 > 1);
  return v3;
}

uint64_t VP8GetSignedValue(uint64_t a1, int a2)
{
  unsigned int Value;

  Value = VP8GetValue(a1, a2);
  if (VP8GetValue(a1, 1))
    return -Value;
  else
    return Value;
}

_QWORD *VP8LInitBitReader(_QWORD *result, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;

  if (!result)
    VP8LInitBitReader_cold_1();
  if (!a2)
    VP8LInitBitReader_cold_2();
  if (a3 >= 0xFFFFFFF8)
    VP8LInitBitReader_cold_3();
  result[2] = a3;
  *result = 0;
  result[4] = 0;
  v3 = 8;
  if (a3 < 8)
    v3 = a3;
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = a2;
    do
    {
      v7 = *v6++;
      v5 |= (unint64_t)v7 << v4;
      v4 += 8;
    }
    while (8 * v3 != v4);
  }
  else
  {
    v5 = 0;
  }
  result[3] = v3;
  *result = v5;
  result[1] = a2;
  return result;
}

double VP8LDoFillBitWindow(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  double result;

  v1 = *(_DWORD *)(a1 + 32);
  if (v1 <= 31)
    VP8LDoFillBitWindow_cold_1();
  v2 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)(v2 + 8) >= *(_QWORD *)(a1 + 16))
    return ShiftBytes((unint64_t *)a1);
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 >>= 32;
  *(_DWORD *)(a1 + 32) = v1 - 32;
  *((_QWORD *)&v5 + 1) = *(unsigned int *)(v4 + v2);
  *(_QWORD *)&v5 = v3;
  *(_QWORD *)a1 = v5 >> 32;
  *(_QWORD *)(a1 + 24) = v2 + 4;
  return result;
}

double ShiftBytes(unint64_t *a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  int v8;
  BOOL v9;
  BOOL v10;
  double result;

  v1 = *((_DWORD *)a1 + 8);
  v3 = a1[2];
  v2 = a1[3];
  if (v1 >= 8)
  {
    if (v2 <= v3)
      v4 = a1[2];
    else
      v4 = a1[3];
    while (v4 != v2)
    {
      v5 = *a1;
      v6 = a1[1];
      *a1 >>= 8;
      *((_QWORD *)&v7 + 1) = *(unsigned __int8 *)(v6 + v2);
      *(_QWORD *)&v7 = v5;
      *a1 = v7 >> 8;
      a1[3] = ++v2;
      v8 = v1 - 8;
      *((_DWORD *)a1 + 8) = v1 - 8;
      v9 = v1 <= 15;
      v1 -= 8;
      if (v9)
        goto LABEL_11;
    }
    v2 = v4;
  }
  v8 = v1;
LABEL_11:
  if (v2 > v3)
    ShiftBytes_cold_1();
  if (*((_DWORD *)a1 + 9) || (v8 >= 65 ? (v10 = v2 == v3) : (v10 = 0), v10))
  {
    *(_QWORD *)&result = 0x100000000;
    a1[4] = 0x100000000;
  }
  return result;
}

uint64_t VP8LReadBits(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  if ((a2 & 0x80000000) != 0)
    VP8LReadBits_cold_1();
  if (a2 > 0x18 || *(_DWORD *)(a1 + 36))
  {
    v3 = 0;
    *(_QWORD *)(a1 + 32) = 0x100000000;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 32);
    v3 = kBitMask[a2] & (*(_QWORD *)a1 >> v2);
    *(_DWORD *)(a1 + 32) = v2 + a2;
    ShiftBytes((unint64_t *)a1);
  }
  return v3;
}

void VP8InitBitReader_cold_1()
{
  __assert_rtn("VP8InitBitReader", "bit_reader_utils.c", 37, "br != NULL");
}

void VP8InitBitReader_cold_2()
{
  __assert_rtn("VP8InitBitReader", "bit_reader_utils.c", 38, "start != NULL");
}

void VP8InitBitReader_cold_3()
{
  __assert_rtn("VP8InitBitReader", "bit_reader_utils.c", 39, "size < (1u << 31)");
}

void VP8LoadFinalBytes_cold_1()
{
  __assert_rtn("VP8LoadFinalBytes", "bit_reader_utils.c", 89, "br != NULL && br->buf_ != NULL");
}

void VP8GetValue_cold_1()
{
  __assert_rtn("VP8LoadNewBytes", "bit_reader_inl_utils.h", 59, "br != NULL && br->buf_ != NULL");
}

void VP8LInitBitReader_cold_1()
{
  __assert_rtn("VP8LInitBitReader", "bit_reader_utils.c", 145, "br != NULL");
}

void VP8LInitBitReader_cold_2()
{
  __assert_rtn("VP8LInitBitReader", "bit_reader_utils.c", 146, "start != NULL");
}

void VP8LInitBitReader_cold_3()
{
  __assert_rtn("VP8LInitBitReader", "bit_reader_utils.c", 147, "length < 0xfffffff8u");
}

void VP8LDoFillBitWindow_cold_1()
{
  __assert_rtn("VP8LDoFillBitWindow", "bit_reader_utils.c", 195, "br->bit_pos_ >= VP8L_WBITS");
}

void ShiftBytes_cold_1()
{
  __assert_rtn("VP8LIsEndOfStream", "bit_reader_utils.h", 172, "br->pos_ <= br->len_");
}

void VP8LReadBits_cold_1()
{
  __assert_rtn("VP8LReadBits", "bit_reader_utils.c", 210, "n_bits >= 0");
}

void VP8DspInit(uint64_t a1, uint64_t a2, const char *a3)
{
  if ((BOOL (*)(int))VP8DspInit_VP8DspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    _cg_jpeg_mem_term(a1, a2, a3);
    VP8TransformUV = (uint64_t)TransformUV_C;
    VP8TransformDCUV = (uint64_t)TransformDCUV_C;
    qword_1EDF095B0 = (uint64_t)HE4_C;
    qword_1EDF095C0 = (uint64_t)VR4_C;
    qword_1EDF095D0 = (uint64_t)VL4_C;
    qword_1EDF095D8 = (uint64_t)HD4_C;
    qword_1EDF095E0 = (uint64_t)HU4_C;
    VP8DitherCombine8x8 = (uint64_t (*)(_QWORD, __n128, __n128))DitherCombine8x8_C;
    VP8DspInitNEON();
    if (!VP8TransformWHT)
      VP8DspInit_cold_1();
    if (!VP8Transform)
      VP8DspInit_cold_2();
    if (!VP8TransformDC)
      VP8DspInit_cold_3();
    if (!VP8TransformAC3)
      VP8DspInit_cold_4();
    if (!VP8TransformUV)
      VP8DspInit_cold_5();
    if (!VP8TransformDCUV)
      VP8DspInit_cold_6();
    if (!VP8VFilter16)
      VP8DspInit_cold_7();
    if (!VP8HFilter16)
      VP8DspInit_cold_8();
    if (!VP8VFilter8)
      VP8DspInit_cold_9();
    if (!VP8HFilter8)
      VP8DspInit_cold_10();
    if (!VP8VFilter16i)
      VP8DspInit_cold_11();
    if (!VP8HFilter16i)
      VP8DspInit_cold_12();
    if (!VP8VFilter8i)
      VP8DspInit_cold_13();
    if (!VP8HFilter8i)
      VP8DspInit_cold_14();
    if (!VP8SimpleVFilter16)
      VP8DspInit_cold_15();
    if (!VP8SimpleHFilter16)
      VP8DspInit_cold_16();
    if (!VP8SimpleVFilter16i)
      VP8DspInit_cold_17();
    if (!VP8SimpleHFilter16i)
      VP8DspInit_cold_18();
    if (!VP8PredLuma4[0])
      VP8DspInit_cold_19();
    if (!qword_1EDF095A0)
      VP8DspInit_cold_20();
    if (!qword_1EDF095A8)
      VP8DspInit_cold_21();
    if (!qword_1EDF095B0)
      VP8DspInit_cold_22();
    if (!qword_1EDF095B8)
      VP8DspInit_cold_23();
    if (!qword_1EDF095C0)
      VP8DspInit_cold_24();
    if (!qword_1EDF095C8)
      VP8DspInit_cold_25();
    if (!qword_1EDF095D0)
      VP8DspInit_cold_26();
    if (!qword_1EDF095D8)
      VP8DspInit_cold_27();
    if (!qword_1EDF095E0)
      VP8DspInit_cold_28();
    if (!VP8PredLuma16[0])
      VP8DspInit_cold_29();
    if (!qword_1EDF09568)
      VP8DspInit_cold_30();
    if (!qword_1EDF09570)
      VP8DspInit_cold_31();
    if (!qword_1EDF09578)
      VP8DspInit_cold_32();
    if (!qword_1EDF09580)
      VP8DspInit_cold_33();
    if (!qword_1EDF09588)
      VP8DspInit_cold_34();
    if (!qword_1EDF09590)
      VP8DspInit_cold_35();
    if (!VP8PredChroma8[0])
      VP8DspInit_cold_36();
    if (!qword_1EDF09530)
      VP8DspInit_cold_37();
    if (!qword_1EDF09538)
      VP8DspInit_cold_38();
    if (!qword_1EDF09540)
      VP8DspInit_cold_39();
    if (!qword_1EDF09548)
      VP8DspInit_cold_40();
    if (!qword_1EDF09550)
      VP8DspInit_cold_41();
    if (!qword_1EDF09558)
      VP8DspInit_cold_42();
    if (!VP8DitherCombine8x8)
      VP8DspInit_cold_43();
    VP8DspInit_VP8DspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t TransformUV_C(uint64_t a1, uint64_t a2)
{
  VP8Transform(a1, a2, 1);
  return VP8Transform(a1 + 64, a2 + 128, 1);
}

uint64_t TransformDCUV_C(_WORD *a1, uint64_t a2)
{
  uint64_t result;
  _WORD *v5;
  int v6;

  if (*a1)
    VP8TransformDC(a1, a2);
  if (a1[16])
    VP8TransformDC(a1 + 16, a2 + 4);
  result = (uint64_t)(a1 + 32);
  if (a1[32])
    result = VP8TransformDC(result, a2 + 128);
  v6 = (unsigned __int16)a1[48];
  v5 = a1 + 48;
  if (v6)
    return VP8TransformDC(v5, a2 + 132);
  return result;
}

uint64_t HE4_C(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v1 = *(unsigned __int8 *)(result - 1);
  v2 = *(unsigned __int8 *)(result + 31);
  v3 = *(unsigned __int8 *)(result + 63);
  v4 = *(unsigned __int8 *)(result + 95);
  *(_DWORD *)result = 16843009 * ((v2 + 2 + *(unsigned __int8 *)(result - 33) + 2 * v1) >> 2);
  *(_DWORD *)(result + 32) = 16843009 * ((v3 + 2 + v1 + 2 * v2) >> 2);
  *(_DWORD *)(result + 64) = 16843009 * ((v2 + 2 + 2 * v3 + v4) >> 2);
  *(_DWORD *)(result + 96) = 16843009 * ((v3 + 2 + v4 + 2 * v4) >> 2);
  return result;
}

_BYTE *VR4_C(_BYTE *result)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = *(result - 33);
  v2 = *(result - 32);
  v3 = *(result - 31);
  v4 = (v2 + 1 + v1) >> 1;
  v5 = (v2 + 1 + v3) >> 1;
  v6 = *(result - 1);
  v7 = result[31];
  v8 = v6 + 2;
  v9 = v6 + 2 + result[63] + 2 * v7;
  v10 = *(result - 30);
  result[65] = v4;
  *result = v4;
  v11 = (v3 + v10 + 1) >> 1;
  result[66] = v5;
  result[1] = v5;
  v12 = v1 + 2;
  v13 = v1 + 2 + v7 + 2 * v6;
  v14 = *(result - 29);
  result[67] = v11;
  result[2] = v11;
  result[3] = (v10 + v14 + 1) >> 1;
  result[96] = v9 >> 2;
  result[64] = v13 >> 2;
  v15 = (v8 + 2 * v1 + v2) >> 2;
  result[97] = v15;
  result[32] = v15;
  v16 = (v12 + 2 * v2 + v3) >> 2;
  result[98] = v16;
  result[33] = v16;
  v17 = (v2 + 2 * v3 + v10 + 2) >> 2;
  result[99] = v17;
  result[34] = v17;
  result[35] = (v3 + 2 * v10 + v14 + 2) >> 2;
  return result;
}

_BYTE *VL4_C(_BYTE *result)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;

  v1 = *(result - 32);
  v2 = *(result - 31);
  v3 = *(result - 30);
  v4 = (v2 + 1 + v3) >> 1;
  v5 = *(result - 29);
  v6 = *(result - 28);
  v7 = *(result - 27);
  *result = (v2 + 1 + v1) >> 1;
  result[64] = v4;
  result[1] = v4;
  v8 = (v3 + v5 + 1) >> 1;
  v9 = (v5 + v6 + 1) >> 1;
  v10 = v3 + 2;
  v11 = *(result - 26);
  result[65] = v8;
  result[2] = v8;
  v12 = (v3 + 2 + v1 + 2 * v2) >> 2;
  v13 = (v5 + 2 + v2 + 2 * v3) >> 2;
  v14 = *(result - 25);
  result[66] = v9;
  result[3] = v9;
  result[32] = v12;
  result[96] = v13;
  result[33] = v13;
  v15 = (v10 + 2 * v5 + v6) >> 2;
  result[97] = v15;
  result[34] = v15;
  v16 = (v5 + 2 + 2 * v6 + v7) >> 2;
  result[98] = v16;
  result[35] = v16;
  result[67] = (v6 + 2 * v7 + v11 + 2) >> 2;
  result[99] = (v7 + 2 * v11 + v14 + 2) >> 2;
  return result;
}

_BYTE *HD4_C(_BYTE *result)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v1 = *(result - 1);
  v2 = result[31];
  v3 = *(result - 33);
  v4 = (v1 + 1 + v3) >> 1;
  v5 = (v1 + 1 + v2) >> 1;
  v6 = result[63];
  v7 = *(result - 32);
  v8 = (v2 + v6 + 1) >> 1;
  v9 = *(result - 31);
  v10 = *(result - 30);
  result[34] = v4;
  *result = v4;
  result[66] = v5;
  result[32] = v5;
  v11 = v7 + 2 * v9 + v10;
  v12 = result[95];
  result[98] = v8;
  result[64] = v8;
  result[96] = (v6 + v12 + 1) >> 1;
  result[3] = (v11 + 2) >> 2;
  result[2] = (v3 + 2 * v7 + v9 + 2) >> 2;
  v13 = v1 + 2;
  v14 = (v1 + 2 + 2 * v3 + v7) >> 2;
  result[35] = v14;
  result[1] = v14;
  v15 = (v2 + 2 + 2 * v1 + v3) >> 2;
  result[67] = v15;
  result[33] = v15;
  v16 = (v13 + v6 + 2 * v2) >> 2;
  result[99] = v16;
  result[65] = v16;
  result[97] = (v2 + 2 + v12 + 2 * v6) >> 2;
  return result;
}

int8x8_t HU4_C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int8x8_t result;

  v1 = *(unsigned __int8 *)(a1 - 1);
  v2 = *(unsigned __int8 *)(a1 + 31);
  v3 = *(unsigned __int8 *)(a1 + 63);
  v4 = *(unsigned __int8 *)(a1 + 95);
  *(_BYTE *)a1 = (v2 + 1 + v1) >> 1;
  v5 = (v2 + 1 + v3) >> 1;
  *(_BYTE *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 2) = v5;
  v6 = (v3 + v4 + 1) >> 1;
  *(_BYTE *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 34) = v6;
  *(_BYTE *)(a1 + 1) = (v3 + 2 + v1 + 2 * v2) >> 2;
  v7 = (v4 + v2 + 2 * v3 + 2) >> 2;
  *(_BYTE *)(a1 + 33) = v7;
  *(_BYTE *)(a1 + 3) = v7;
  v8 = (v3 + 2 + v4 + 2 * v4) >> 2;
  *(_BYTE *)(a1 + 65) = v8;
  *(_BYTE *)(a1 + 35) = v8;
  result = vdup_n_s8(v4);
  *(_DWORD *)(a1 + 96) = result.i32[0];
  *(_BYTE *)(a1 + 66) = v4;
  *(_BYTE *)(a1 + 67) = v4;
  return result;
}

uint64_t DitherCombine8x8_C(uint64_t result, uint64_t a2, int a3)
{
  int i;
  uint64_t j;
  int v5;
  int v6;

  for (i = 0; i != 8; ++i)
  {
    for (j = 0; j != 8; ++j)
    {
      v5 = *(unsigned __int8 *)(a2 + j) + ((*(unsigned __int8 *)(result + j) - 120) >> 4);
      v6 = v5 & ~(v5 >> 31);
      if (v6 >= 255)
        LOBYTE(v6) = -1;
      *(_BYTE *)(a2 + j) = v6;
    }
    a2 += a3;
    result += 8;
  }
  return result;
}

void VP8DspInit_cold_1()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 845, "VP8TransformWHT != NULL");
}

void VP8DspInit_cold_2()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 846, "VP8Transform != NULL");
}

void VP8DspInit_cold_3()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 847, "VP8TransformDC != NULL");
}

void VP8DspInit_cold_4()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 848, "VP8TransformAC3 != NULL");
}

void VP8DspInit_cold_5()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 849, "VP8TransformUV != NULL");
}

void VP8DspInit_cold_6()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 850, "VP8TransformDCUV != NULL");
}

void VP8DspInit_cold_7()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 851, "VP8VFilter16 != NULL");
}

void VP8DspInit_cold_8()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 852, "VP8HFilter16 != NULL");
}

void VP8DspInit_cold_9()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 853, "VP8VFilter8 != NULL");
}

void VP8DspInit_cold_10()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 854, "VP8HFilter8 != NULL");
}

void VP8DspInit_cold_11()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 855, "VP8VFilter16i != NULL");
}

void VP8DspInit_cold_12()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 856, "VP8HFilter16i != NULL");
}

void VP8DspInit_cold_13()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 857, "VP8VFilter8i != NULL");
}

void VP8DspInit_cold_14()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 858, "VP8HFilter8i != NULL");
}

void VP8DspInit_cold_15()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 859, "VP8SimpleVFilter16 != NULL");
}

void VP8DspInit_cold_16()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 860, "VP8SimpleHFilter16 != NULL");
}

void VP8DspInit_cold_17()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 861, "VP8SimpleVFilter16i != NULL");
}

void VP8DspInit_cold_18()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 862, "VP8SimpleHFilter16i != NULL");
}

void VP8DspInit_cold_19()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 863, "VP8PredLuma4[0] != NULL");
}

void VP8DspInit_cold_20()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 864, "VP8PredLuma4[1] != NULL");
}

void VP8DspInit_cold_21()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 865, "VP8PredLuma4[2] != NULL");
}

void VP8DspInit_cold_22()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 866, "VP8PredLuma4[3] != NULL");
}

void VP8DspInit_cold_23()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 867, "VP8PredLuma4[4] != NULL");
}

void VP8DspInit_cold_24()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 868, "VP8PredLuma4[5] != NULL");
}

void VP8DspInit_cold_25()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 869, "VP8PredLuma4[6] != NULL");
}

void VP8DspInit_cold_26()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 870, "VP8PredLuma4[7] != NULL");
}

void VP8DspInit_cold_27()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 871, "VP8PredLuma4[8] != NULL");
}

void VP8DspInit_cold_28()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 872, "VP8PredLuma4[9] != NULL");
}

void VP8DspInit_cold_29()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 873, "VP8PredLuma16[0] != NULL");
}

void VP8DspInit_cold_30()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 874, "VP8PredLuma16[1] != NULL");
}

void VP8DspInit_cold_31()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 875, "VP8PredLuma16[2] != NULL");
}

void VP8DspInit_cold_32()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 876, "VP8PredLuma16[3] != NULL");
}

void VP8DspInit_cold_33()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 877, "VP8PredLuma16[4] != NULL");
}

void VP8DspInit_cold_34()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 878, "VP8PredLuma16[5] != NULL");
}

void VP8DspInit_cold_35()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 879, "VP8PredLuma16[6] != NULL");
}

void VP8DspInit_cold_36()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 880, "VP8PredChroma8[0] != NULL");
}

void VP8DspInit_cold_37()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 881, "VP8PredChroma8[1] != NULL");
}

void VP8DspInit_cold_38()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 882, "VP8PredChroma8[2] != NULL");
}

void VP8DspInit_cold_39()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 883, "VP8PredChroma8[3] != NULL");
}

void VP8DspInit_cold_40()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 884, "VP8PredChroma8[4] != NULL");
}

void VP8DspInit_cold_41()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 885, "VP8PredChroma8[5] != NULL");
}

void VP8DspInit_cold_42()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 886, "VP8PredChroma8[6] != NULL");
}

void VP8DspInit_cold_43()
{
  __assert_rtn("VP8DspInit_body", "dec.c", 887, "VP8DitherCombine8x8 != NULL");
}

BOOL armCPUInfo(int a1)
{
  return a1 == 6;
}

uint64_t VP8LPredictor0_C()
{
  return 4278190080;
}

uint64_t VP8LPredictor1_C(unsigned int *a1)
{
  return *a1;
}

uint64_t VP8LPredictor2_C(uint64_t a1, unsigned int *a2)
{
  return *a2;
}

uint64_t VP8LPredictor3_C(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t VP8LPredictor4_C(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 - 4);
}

uint64_t VP8LPredictor5_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;

  v2 = (((a2[1] ^ *a1) >> 1) & 0x7F7F7F7F) + (a2[1] & *a1);
  return (((v2 ^ *a2) >> 1) & 0x7F7F7F7F) + (v2 & *a2);
}

uint64_t VP8LPredictor6_C(_DWORD *a1, uint64_t a2)
{
  return (((*(_DWORD *)(a2 - 4) ^ *a1) >> 1) & 0x7F7F7F7F) + (*(_DWORD *)(a2 - 4) & *a1);
}

uint64_t VP8LPredictor7_C(_DWORD *a1, _DWORD *a2)
{
  return (((*a2 ^ *a1) >> 1) & 0x7F7F7F7F) + (*a2 & *a1);
}

uint64_t VP8LPredictor8_C(uint64_t a1, _DWORD *a2)
{
  return (((*a2 ^ *(a2 - 1)) >> 1) & 0x7F7F7F7F) + (*a2 & *(a2 - 1));
}

uint64_t VP8LPredictor9_C(uint64_t a1, _DWORD *a2)
{
  return (((a2[1] ^ *a2) >> 1) & 0x7F7F7F7F) + (a2[1] & *a2);
}

uint64_t VP8LPredictor10_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = (((*(a2 - 1) ^ *a1) >> 1) & 0x7F7F7F7F) + (*(a2 - 1) & *a1);
  v3 = (((a2[1] ^ *a2) >> 1) & 0x7F7F7F7F) + (a2[1] & *a2);
  return (((v3 ^ v2) >> 1) & 0x7F7F7F7F) + (v3 & v2);
}

uint64_t VP8LPredictor11_C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v3 = *(a2 - 1);
  v2 = *a2;
  v4 = *a1;
  v5 = HIBYTE(*a1) - HIBYTE(v3);
  v6 = HIBYTE(*a2) - HIBYTE(v3);
  if (v5 < 0)
    v5 = HIBYTE(v3) - HIBYTE(*a1);
  if (v6 < 0)
    v6 = HIBYTE(v3) - HIBYTE(*a2);
  v7 = BYTE2(v4) - BYTE2(v3);
  v8 = BYTE2(v2) - BYTE2(v3);
  if (v7 < 0)
    v7 = BYTE2(v3) - BYTE2(v4);
  if (v8 < 0)
    v8 = BYTE2(v3) - BYTE2(v2);
  v9 = BYTE1(v4) - BYTE1(v3);
  v10 = BYTE1(v2) - BYTE1(v3);
  if (v9 < 0)
    v9 = BYTE1(v3) - BYTE1(v4);
  if (v10 < 0)
    v10 = BYTE1(v3) - BYTE1(v2);
  v11 = *a1 - v3;
  v12 = *a2 - v3;
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = -v11;
  if (v12 < 0)
    v12 = -v12;
  if (v13 + v5 + v9 - (v6 + v12 + v10 + v8) + v7 >= 1)
    return v4;
  else
    return v2;
}

uint64_t VP8LPredictor12_C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int8x8_t v6;
  uint32x2_t v7;

  v2 = *a1;
  v3 = *(a2 - 1);
  v4 = HIBYTE(*a2) + HIBYTE(*a1) - HIBYTE(v3);
  if (v4 >= 0x100)
    v4 = ~v4 >> 24;
  v5 = *a2 + v2 - v3;
  if (v5 >= 0x100)
    v5 = ~v5 >> 24;
  v6 = (int8x8_t)vsub_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*a2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL)), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL));
  v7 = vshl_u32((uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x10000000100, (uint32x2_t)v6), v6, (int8x8_t)vshr_n_u32((uint32x2_t)vmvn_s8(v6), 0x18uLL)), (uint32x2_t)0x800000010);
  return v5 | (v4 << 24) | v7.i32[0] | v7.i32[1];
}

uint64_t VP8LPredictor13_C(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int32x2_t v6;
  int32x2_t v7;
  int8x8_t v8;
  uint32x2_t v9;

  v2 = *(a2 - 1);
  v3 = (((*a2 ^ *a1) >> 1) & 0x7F7F7F7F) + (*a2 & *a1);
  v4 = HIBYTE(v3) + ((int)(HIBYTE(v3) - HIBYTE(v2) + (((HIBYTE(v3) - HIBYTE(v2)) & 0x8000) >> 15)) >> 1);
  if (v4 >= 0x100)
    v4 = ~v4 >> 24;
  v5 = ((int)(v3 - v2 + (((v3 - v2) & 0x8000u) >> 15)) >> 1)
     + v3;
  if (v5 >= 0x100)
    v5 = ~v5 >> 24;
  v6 = (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v3), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL);
  v7 = vsub_s32(v6, (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v2), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF000000FFLL));
  v8 = (int8x8_t)vsra_n_s32(v6, vshl_n_s32(vhadd_s32(v7, (int32x2_t)vshr_n_u32((uint32x2_t)vand_s8((int8x8_t)v7, (int8x8_t)0xFFFF0000FFFFLL), 0xFuLL)), 0x10uLL), 0x10uLL);
  v9 = vshl_u32((uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)0x10000000100, (uint32x2_t)v8), v8, (int8x8_t)vshr_n_u32((uint32x2_t)vmvn_s8(v8), 0x18uLL)), (uint32x2_t)0x800000010);
  return v5 | (v4 << 24) | v9.i32[0] | v9.i32[1];
}

unsigned int *VP8LAddGreenToBlueAndRed_C(unsigned int *result, int a2, unsigned int *a3)
{
  uint64_t v3;
  unsigned int v4;

  if (a2 >= 1)
  {
    v3 = a2;
    do
    {
      v4 = *result++;
      *a3++ = ((v4 & 0xFF00FF) + BYTE1(v4) + (v4 >> 8 << 16)) & 0xFF00FF | v4 & 0xFF00FF00;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *VP8LTransformColorInverse_C(char *result, int *a2, int a3, unsigned int *a4)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  if (a3 >= 1)
  {
    v4 = *result;
    v5 = result[1];
    v6 = a3;
    v7 = result[2];
    do
    {
      v8 = *a2++;
      *a4++ = v8 & 0xFF00FF00 | ((((((__int16)v8 >> 8) * v4) >> 5) + BYTE2(v8)) << 16) | (v8 + ((((__int16)v8 >> 8) * v5) >> 5) + (((char)(((((__int16)v8 >> 8) * v4) >> 5) + BYTE2(v8)) * v7) >> 5));
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t VP8LColorIndexInverseTransformAlpha(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v7 = *(_DWORD *)(result + 4);
  v6 = *(unsigned int *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  if (!v7)
    return VP8LMapColor8b(a4, v8, a5, a2, a3, v6);
  if ((int)a2 < (int)a3)
  {
    v9 = 8u >> v7;
    v10 = ~(-1 << v7);
    do
    {
      if ((int)v6 >= 1)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          if ((v11 & v10) == 0)
          {
            v13 = *a4++;
            v12 = v13;
          }
          *(_BYTE *)(a5 + v11) = BYTE1(*(_DWORD *)(v8 + 4 * (v12 & ~(-1 << v9))));
          v12 >>= v9;
          ++v11;
        }
        while ((_DWORD)v6 != (_DWORD)v11);
        a5 += v11;
      }
      LODWORD(a2) = a2 + 1;
    }
    while ((_DWORD)a2 != (_DWORD)a3);
  }
  return result;
}

uint64_t VP8LInverseTransform(uint64_t result, uint64_t a2, uint64_t a3, int *__src, unsigned int *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  char v14;
  uint64_t v15;
  int v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  unint64_t v21;
  int v22;
  signed int v23;
  int *v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  int v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t (*v35)(int *, unsigned int *, _QWORD);
  int v36;
  int v37;
  signed int v38;
  int v39;
  int v40;
  signed int v41;
  char *v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int *v54;
  uint64_t v55;
  __int16 v56;
  char v57;

  v5 = a3 - a2;
  if ((int)a3 <= (int)a2)
    VP8LInverseTransform_cold_2();
  v6 = a3;
  v7 = result;
  if (*(_DWORD *)(result + 12) < (int)a3)
    VP8LInverseTransform_cold_1();
  v8 = a5;
  v9 = __src;
  v10 = a2;
  v11 = *(int *)(result + 8);
  v51 = a3;
  switch(*(_DWORD *)result)
  {
    case 0:
      v43 = a5;
      v44 = result;
      v52 = a2;
      if ((_DWORD)a2)
      {
        v12 = a2;
        v13 = a5;
      }
      else
      {
        v24 = __src + 1;
        v25 = *__src - 0x1000000;
        *a5 = v25;
        v26 = a5 + 1;
        if ((int)v11 >= 2)
        {
          v27 = (v11 - 1);
          do
          {
            v28 = *v24++;
            v25 = ((v28 & 0xFF00FF00) + (v25 & 0xFF00FF00)) & 0xFF00FF00 | ((v28 & 0xFF00FF) + (v25 & 0xFF00FF)) & 0xFF00FF;
            *v26++ = v25;
            --v27;
          }
          while (v27);
        }
        v9 = &__src[v11];
        v12 = 1;
        v13 = &a5[v11];
      }
      if (v12 < (int)a3)
      {
        v29 = *(_DWORD *)(result + 4);
        v30 = 1 << v29;
        v48 = (1 << v29) - 1;
        v47 = (v48 + v11) >> v29;
        v55 = *(_QWORD *)(result + 16) + 4 * (int)(v47 * (v12 >> v29));
        v31 = -(1 << v29);
        do
        {
          v50 = v12;
          result = (uint64_t)PredictorAdd2_C(v9, (int *)&v13[-v11], 1, v13);
          if ((int)v11 >= 2)
          {
            v32 = 1;
            v33 = (unsigned int *)v55;
            do
            {
              v34 = *v33++;
              v35 = (uint64_t (*)(int *, unsigned int *, _QWORD))VP8LPredictorsAdd[((unint64_t)v34 >> 8) & 0xF];
              v36 = (v32 & v31) + v30;
              if (v36 >= (int)v11)
                v37 = v11;
              else
                v37 = (v32 & v31) + v30;
              result = v35(&v9[v32], &v13[v32 - v11], (v37 - v32));
              v32 = v37;
            }
            while ((int)v11 > v36);
          }
          v9 += v11;
          v13 += v11;
          v12 = v50 + 1;
          v38 = v47;
          if (((v50 + 1) & v48) != 0)
            v38 = 0;
          v55 += 4 * v38;
          LODWORD(v6) = v51;
        }
        while (v12 != v51);
      }
      if (*(_DWORD *)(v44 + 12) != (_DWORD)v6)
        result = (uint64_t)memcpy(&v43[-v11], &v43[(int)v11 * (~v52 + (int)v6)], 4 * v11);
      break;
    case 1:
      v14 = *(_DWORD *)(result + 4);
      v15 = (1 << v14);
      v16 = v11 & -(int)v15;
      v46 = (v15 - 1 + v11) >> v14;
      v17 = (int *)(*(_QWORD *)(result + 16) + 4 * (int)(v46 * ((int)a2 >> v14)));
      v18 = v16;
      v45 = (int)v11 - v16;
      v49 = v16;
      do
      {
        v57 = 0;
        v56 = 0;
        v54 = v17;
        if ((int)v18 < 1)
        {
          v21 = (unint64_t)v9;
        }
        else
        {
          v53 = v10;
          v10 = 0;
          v19 = &v9[v18];
          do
          {
            v20 = *v17++;
            v56 = v20;
            v57 = BYTE2(v20);
            result = VP8LTransformColorInverse(&v56, (char *)v9 + v10, v15, (char *)v8 + v10);
            v10 += 4 * (int)v15;
            v21 = (unint64_t)v9 + v10;
          }
          while ((int *)((char *)v9 + v10) < v19);
          v8 = (unsigned int *)((char *)v8 + v10);
          LODWORD(v6) = v51;
          LODWORD(v10) = v53;
        }
        if (v21 < (unint64_t)&v9[v11])
        {
          v22 = *v17;
          LOBYTE(v56) = *v17;
          HIBYTE(v56) = BYTE1(v22);
          v57 = BYTE2(v22);
          result = VP8LTransformColorInverse(&v56, v21, v45, v8);
          v21 += 4 * v45;
          v8 += v45;
        }
        v18 = v49;
        LODWORD(v10) = v10 + 1;
        v23 = v46;
        if ((v10 & ((_DWORD)v15 - 1)) != 0)
          v23 = 0;
        v17 = &v54[v23];
        v9 = (int *)v21;
      }
      while ((_DWORD)v10 != (_DWORD)v6);
      break;
    case 2:
      result = VP8LAddGreenToBlueAndRed(__src, (v11 * v5), a5);
      break;
    case 3:
      if (__src == (int *)a5)
      {
        v39 = *(_DWORD *)(result + 4);
        if (v39 >= 1)
        {
          v40 = v11 * v5;
          v41 = ((v11 + (1 << v39) - 1) >> v39) * v5;
          v42 = (char *)&__src[v40 - v41];
          memmove(v42, __src, 4 * v41);
          result = v7;
          a2 = v10;
          a3 = v6;
          __src = (int *)v42;
          a5 = (unsigned int *)v9;
        }
      }
      result = ColorIndexInverseTransform_C(result, a2, a3, (uint64_t)__src, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ColorIndexInverseTransform_C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v7 = *(_DWORD *)(result + 4);
  v6 = *(unsigned int *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  if (!v7)
    return VP8LMapColor32b(a4, v8, a5, a2, a3, v6);
  if ((int)a2 < (int)a3)
  {
    v9 = 8u >> v7;
    v10 = ~(-1 << v7);
    do
    {
      if ((int)v6 >= 1)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          if ((v11 & v10) == 0)
          {
            v12 = *(unsigned __int8 *)(a4 + 1);
            a4 += 4;
          }
          *a5++ = *(_DWORD *)(v8 + 4 * (v12 & ~(-1 << v9)));
          v12 >>= v9;
          ++v11;
        }
        while ((_DWORD)v6 != v11);
      }
      LODWORD(a2) = a2 + 1;
    }
    while ((_DWORD)a2 != (_DWORD)a3);
  }
  return result;
}

int *VP8LConvertBGRAToRGB_C(int *result, int a2, _BYTE *a3)
{
  int *v3;
  int v4;

  if (a2 >= 1)
  {
    v3 = &result[a2];
    do
    {
      v4 = *result++;
      *a3 = BYTE2(v4);
      a3[1] = BYTE1(v4);
      a3[2] = v4;
      a3 += 3;
    }
    while (result < v3);
  }
  return result;
}

int *VP8LConvertBGRAToRGBA_C(int *result, int a2, _BYTE *a3)
{
  int *v3;
  int v4;

  if (a2 >= 1)
  {
    v3 = &result[a2];
    do
    {
      v4 = *result++;
      *a3 = BYTE2(v4);
      a3[1] = BYTE1(v4);
      a3[2] = v4;
      a3[3] = HIBYTE(v4);
      a3 += 4;
    }
    while (result < v3);
  }
  return result;
}

unsigned int *VP8LConvertBGRAToRGBA4444_C(unsigned int *result, int a2, _BYTE *a3)
{
  unsigned int *v3;
  unsigned int v4;

  if (a2 >= 1)
  {
    v3 = &result[a2];
    do
    {
      v4 = *result++;
      *a3 = BYTE2(v4) & 0xF0 | ((unsigned __int16)v4 >> 12);
      a3[1] = v4 & 0xF0 | (v4 >> 28);
      a3 += 2;
    }
    while (result < v3);
  }
  return result;
}

const float *VP8LConvertBGRAToRGB565_C(const float *result, int a2, _BYTE *a3)
{
  const float *v3;
  uint32x2_t v4;
  int8x8_t v5;

  if (a2 >= 1)
  {
    v3 = &result[a2];
    do
    {
      v4 = (uint32x2_t)vld1_dup_f32(result++);
      v5 = vorr_s8(vand_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFBFFFFFFF0), (int8x8_t)0xE0000000F8), vand_s8((int8x8_t)vshl_u32(v4, (uint32x2_t)0xFFFFFFFDFFFFFFF3), (int8x8_t)0x1F00000007));
      a3[1] = v5.i8[4];
      *a3 = v5.i8[0];
      a3 += 2;
    }
    while (result < v3);
  }
  return result;
}

int *VP8LConvertBGRAToBGR_C(int *result, int a2, uint64_t a3)
{
  int *v3;
  int v4;

  if (a2 >= 1)
  {
    v3 = &result[a2];
    do
    {
      v4 = *result++;
      *(_WORD *)a3 = v4;
      *(_BYTE *)(a3 + 2) = BYTE2(v4);
      a3 += 3;
    }
    while (result < v3);
  }
  return result;
}

unsigned int *VP8LConvertFromBGRA(unsigned int *__src, uint64_t a2, int a3, _DWORD *__dst)
{
  _DWORD *v4;
  unsigned int *v6;
  uint64_t (*v7)(unsigned int *, uint64_t, _DWORD *);
  unsigned int v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t, uint64_t, _QWORD);
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  unsigned int v13;

  v4 = __dst;
  v6 = __src;
  switch(a3)
  {
    case 0:
      v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGB;
      return (unsigned int *)v7(__src, a2, v4);
    case 1:
      v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGBA;
      return (unsigned int *)v7(__src, a2, v4);
    case 2:
      v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToBGR;
      return (unsigned int *)v7(__src, a2, v4);
    case 3:
      return (unsigned int *)memcpy(__dst, __src, 4 * (int)a2);
    case 4:
      if ((int)a2 >= 1)
      {
        do
        {
          v8 = *v6++;
          *v4++ = bswap32(v8);
        }
        while (v6 < &__src[(int)a2]);
      }
      return __src;
    case 5:
      v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGBA4444;
      return (unsigned int *)v7(__src, a2, v4);
    case 6:
      v7 = (uint64_t (*)(unsigned int *, uint64_t, _DWORD *))VP8LConvertBGRAToRGB565;
      return (unsigned int *)v7(__src, a2, v4);
    case 7:
      VP8LConvertBGRAToRGBA(__src, a2, __dst);
      goto LABEL_14;
    case 8:
      memcpy(__dst, __src, 4 * (int)a2);
LABEL_14:
      v9 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, _QWORD))WebPApplyAlphaMultiply;
      v10 = v4;
      v11 = 0;
      goto LABEL_19;
    case 9:
      if ((int)a2 >= 1)
      {
        v12 = __dst;
        do
        {
          v13 = *v6++;
          *v12++ = bswap32(v13);
        }
        while (v6 < &__src[(int)a2]);
      }
      v9 = (uint64_t (*)(void *, uint64_t, uint64_t, uint64_t, _QWORD))WebPApplyAlphaMultiply;
      v10 = __dst;
      v11 = 1;
LABEL_19:
      __src = (unsigned int *)v9(v10, v11, a2, 1, 0);
      break;
    case 10:
      VP8LConvertBGRAToRGBA4444(__src, a2, __dst);
      __src = (unsigned int *)WebPApplyAlphaMultiply4444(v4, a2, 1, 0);
      break;
    default:
      VP8LConvertFromBGRA_cold_1();
  }
  return __src;
}

void VP8LDspInit()
{
  if ((uint64_t (*)())VP8LDspInit_VP8LDspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    VP8LPredictors = (uint64_t)VP8LPredictor0_C;
    unk_1EDF09770 = VP8LPredictor1_C;
    qword_1EDF09778 = (uint64_t)VP8LPredictor2_C;
    unk_1EDF09780 = VP8LPredictor3_C;
    qword_1EDF09788 = (uint64_t)VP8LPredictor4_C;
    qword_1EDF09790 = (uint64_t)VP8LPredictor5_C;
    qword_1EDF09798 = (uint64_t)VP8LPredictor6_C;
    qword_1EDF097A0 = (uint64_t)VP8LPredictor7_C;
    qword_1EDF097A8 = (uint64_t)VP8LPredictor8_C;
    unk_1EDF097B0 = VP8LPredictor9_C;
    qword_1EDF097B8 = (uint64_t)VP8LPredictor10_C;
    unk_1EDF097C0 = VP8LPredictor11_C;
    qword_1EDF097C8 = (uint64_t)VP8LPredictor12_C;
    qword_1EDF097D0 = (uint64_t)VP8LPredictor13_C;
    qword_1EDF097D8 = (uint64_t)VP8LPredictor0_C;
    unk_1EDF097E0 = VP8LPredictor0_C;
    VP8LPredictorsAdd = (uint64_t)PredictorAdd0_C;
    unk_1EDF097F0 = PredictorAdd1_C;
    qword_1EDF097F8 = (uint64_t)PredictorAdd2_C;
    unk_1EDF09800 = PredictorAdd3_C;
    qword_1EDF09808 = (uint64_t)PredictorAdd4_C;
    unk_1EDF09810 = PredictorAdd5_C;
    qword_1EDF09818 = (uint64_t)PredictorAdd6_C;
    unk_1EDF09820 = PredictorAdd7_C;
    qword_1EDF09828 = (uint64_t)PredictorAdd8_C;
    unk_1EDF09830 = PredictorAdd9_C;
    qword_1EDF09838 = (uint64_t)PredictorAdd10_C;
    unk_1EDF09840 = PredictorAdd11_C;
    qword_1EDF09848 = (uint64_t)PredictorAdd12_C;
    unk_1EDF09850 = PredictorAdd13_C;
    qword_1EDF09858 = (uint64_t)PredictorAdd0_C;
    unk_1EDF09860 = PredictorAdd0_C;
    VP8LPredictorsAdd_C = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd0_C;
    off_1EDF09870 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd1_C;
    off_1EDF09878 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd2_C;
    off_1EDF09880 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd3_C;
    off_1EDF09888 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd4_C;
    off_1EDF09890 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd5_C;
    off_1EDF09898 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd6_C;
    off_1EDF098A0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd7_C;
    off_1EDF098A8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd8_C;
    off_1EDF098B0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd9_C;
    off_1EDF098B8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd10_C;
    off_1EDF098C0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd11_C;
    off_1EDF098C8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd12_C;
    off_1EDF098D0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))PredictorAdd13_C;
    qword_1EDF098D8 = (uint64_t)PredictorAdd0_C;
    unk_1EDF098E0 = PredictorAdd0_C;
    VP8LConvertBGRAToRGBA4444 = VP8LConvertBGRAToRGBA4444_C;
    VP8LConvertBGRAToRGB565 = (uint64_t)VP8LConvertBGRAToRGB565_C;
    VP8LMapColor32b = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MapARGB_C;
    VP8LMapColor8b = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MapAlpha_C;
    VP8LDspInitNEON();
    if (!VP8LAddGreenToBlueAndRed)
      VP8LDspInit_cold_1();
    if (!VP8LTransformColorInverse)
      VP8LDspInit_cold_2();
    if (!VP8LConvertBGRAToRGBA)
      VP8LDspInit_cold_3();
    if (!VP8LConvertBGRAToRGB)
      VP8LDspInit_cold_4();
    if (!VP8LConvertBGRAToBGR)
      VP8LDspInit_cold_5();
    if (!VP8LConvertBGRAToRGBA4444)
      VP8LDspInit_cold_6();
    if (!VP8LConvertBGRAToRGB565)
      VP8LDspInit_cold_7();
    if (!VP8LMapColor32b)
      VP8LDspInit_cold_8();
    if (!VP8LMapColor8b)
      VP8LDspInit_cold_9();
    VP8LDspInit_VP8LDspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

int *PredictorAdd0_C(int *result, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t v4;
  int v5;

  if (a3 >= 1)
  {
    v4 = a3;
    do
    {
      v5 = *result++;
      *a4++ = v5 - 0x1000000;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd1_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;

  if (a3 >= 1)
  {
    v4 = *(a4 - 1);
    v5 = a3;
    do
    {
      v6 = *result++;
      v4 = ((v6 & 0xFF00FF00) + (v4 & 0xFF00FF00)) & 0xFF00FF00 | ((v6 & 0xFF00FF) + (v4 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd2_C(int *result, int *a2, int a3, unsigned int *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;

  if (!a2)
    PredictorAdd2_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a3;
    do
    {
      v6 = *a2++;
      v5 = v6;
      v7 = *result++;
      *a4++ = ((v7 & 0xFF00FF00) + (v5 & 0xFF00FF00)) & 0xFF00FF00 | ((v7 & 0xFF00FF) + (v5 & 0xFF00FF)) & 0xFF00FF;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd3_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (!a2)
    PredictorAdd3_C_cold_1();
  if (a3 >= 1)
  {
    v4 = (int *)(a2 + 4);
    v5 = a3;
    do
    {
      v7 = *v4++;
      v6 = v7;
      v8 = *result++;
      *a4++ = ((v8 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd4_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (!a2)
    PredictorAdd4_C_cold_1();
  if (a3 >= 1)
  {
    v4 = (int *)(a2 - 4);
    v5 = a3;
    do
    {
      v7 = *v4++;
      v6 = v7;
      v8 = *result++;
      *a4++ = ((v8 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd5_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;

  if (!a2)
    PredictorAdd5_C_cold_1();
  if (a3 >= 1)
  {
    v4 = *(a4 - 1);
    v5 = (_DWORD *)(a2 + 4);
    v6 = a3;
    do
    {
      v7 = (((*v5 ^ v4) >> 1) & 0x7F7F7F7F) + (*v5 & v4);
      v8 = (((v7 ^ *(v5 - 1)) >> 1) & 0x7F7F7F7F) + (v7 & *(v5 - 1));
      v9 = *result++;
      v4 = ((v8 & 0xFF00FF00) + (v9 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v9 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      ++v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

int *PredictorAdd6_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  int *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;

  if (!a2)
    PredictorAdd6_C_cold_1();
  if (a3 >= 1)
  {
    v4 = (int *)(a2 - 4);
    v5 = *(a4 - 1);
    v6 = a3;
    do
    {
      v7 = *v4++;
      v8 = (((v7 ^ v5) >> 1) & 0x7F7F7F7F) + (v7 & v5);
      v9 = *result++;
      v5 = ((v8 & 0xFF00FF00) + (v9 & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (v9 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v5;
      --v6;
    }
    while (v6);
  }
  return result;
}

int *PredictorAdd7_C(int *result, int *a2, int a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (!a2)
    PredictorAdd7_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a3;
    v5 = *(a4 - 1);
    do
    {
      v6 = *a2++;
      v7 = (((v6 ^ v5) >> 1) & 0x7F7F7F7F) + (v6 & v5);
      v8 = *result++;
      v5 = ((v7 & 0xFF00FF00) + (v8 & 0xFF00FF00)) & 0xFF00FF00 | ((v7 & 0xFF00FF) + (v8 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd8_C(int *result, _DWORD *a2, int a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;

  if (!a2)
    PredictorAdd8_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a3;
    do
    {
      v5 = (((*a2 ^ *(a2 - 1)) >> 1) & 0x7F7F7F7F) + (*a2 & *(a2 - 1));
      v6 = *result++;
      *a4++ = ((v5 & 0xFF00FF00) + (v6 & 0xFF00FF00)) & 0xFF00FF00 | ((v5 & 0xFF00FF) + (v6 & 0xFF00FF)) & 0xFF00FF;
      ++a2;
      --v4;
    }
    while (v4);
  }
  return result;
}

int *PredictorAdd9_C(int *result, uint64_t a2, int a3, unsigned int *a4)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (!a2)
    PredictorAdd9_C_cold_1();
  if (a3 >= 1)
  {
    v4 = (_DWORD *)(a2 + 4);
    v5 = a3;
    do
    {
      v6 = (((*v4 ^ *(v4 - 1)) >> 1) & 0x7F7F7F7F) + (*v4 & *(v4 - 1));
      v7 = *result++;
      *a4++ = ((v6 & 0xFF00FF00) + (v7 & 0xFF00FF00)) & 0xFF00FF00 | ((v6 & 0xFF00FF) + (v7 & 0xFF00FF)) & 0xFF00FF;
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

int *PredictorAdd10_C(int *result, unsigned int *a2, int a3, unsigned int *a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    PredictorAdd10_C_cold_1();
  if (a3 >= 1)
  {
    v4 = *(a4 - 1);
    v5 = a3;
    do
    {
      v6 = *(a2 - 1);
      v7 = *a2;
      v8 = a2[1];
      ++a2;
      v9 = (((v6 ^ v4) >> 1) & 0x7F7F7F7F) + (v6 & v4);
      v10 = (((v8 ^ v7) >> 1) & 0x7F7F7F7F) + (v8 & v7);
      v11 = (((v10 ^ v9) >> 1) & 0x7F7F7F7F) + (v10 & v9);
      v12 = *result++;
      v4 = ((v11 & 0xFF00FF00) + (v12 & 0xFF00FF00)) & 0xFF00FF00 | ((v11 & 0xFF00FF) + (v12 & 0xFF00FF)) & 0xFF00FF;
      *a4++ = v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t PredictorAdd11_C(uint64_t result, unsigned int *a2, int a3, uint64_t a4)
{
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;

  if (!a2)
    PredictorAdd11_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a2;
    v5 = (int *)result;
    v6 = (unsigned int *)(a4 - 4);
    v7 = a3;
    do
    {
      result = VP8LPredictor11_C(v6, v4);
      v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PredictorAdd12_C(uint64_t result, unsigned int *a2, int a3, uint64_t a4)
{
  unsigned int *v4;
  int *v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;

  if (!a2)
    PredictorAdd12_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a2;
    v5 = (int *)result;
    v6 = (unsigned int *)(a4 - 4);
    v7 = a3;
    do
    {
      result = VP8LPredictor12_C(v6, v4);
      v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t PredictorAdd13_C(uint64_t result, _DWORD *a2, int a3, uint64_t a4)
{
  _DWORD *v4;
  int *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;

  if (!a2)
    PredictorAdd13_C_cold_1();
  if (a3 >= 1)
  {
    v4 = a2;
    v5 = (int *)result;
    v6 = (_DWORD *)(a4 - 4);
    v7 = a3;
    do
    {
      result = VP8LPredictor13_C(v6, v4);
      v8 = *v5++;
      v6[1] = ((v8 & 0xFF00FF00) + (result & 0xFF00FF00)) & 0xFF00FF00 | ((v8 & 0xFF00FF) + (result & 0xFF00FF)) & 0xFF00FF;
      ++v6;
      ++v4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t MapARGB_C(uint64_t result, uint64_t a2, _DWORD *a3, int a4, int a5, int a6)
{
  int v6;
  uint64_t v7;

  if (a4 < a5)
  {
    do
    {
      if (a6 < 1)
      {
        v7 = result;
      }
      else
      {
        v6 = a6;
        do
        {
          v7 = result + 4;
          *a3++ = *(_DWORD *)(a2 + 4 * *(unsigned __int8 *)(result + 1));
          result += 4;
          --v6;
        }
        while (v6);
      }
      ++a4;
      result = v7;
    }
    while (a4 != a5);
  }
  return result;
}

unsigned __int8 *MapAlpha_C(unsigned __int8 *result, uint64_t a2, _BYTE *a3, int a4, int a5, int a6)
{
  int v6;
  unsigned int v7;

  if (a4 < a5)
  {
    do
    {
      if (a6 >= 1)
      {
        v6 = a6;
        do
        {
          v7 = *result++;
          *a3++ = BYTE1(*(_DWORD *)(a2 + 4 * v7));
          --v6;
        }
        while (v6);
      }
      ++a4;
    }
    while (a4 != a5);
  }
  return result;
}

void VP8LInverseTransform_cold_1()
{
  __assert_rtn("VP8LInverseTransform", "lossless.c", 396, "row_end <= transform->ysize_");
}

void VP8LInverseTransform_cold_2()
{
  __assert_rtn("VP8LInverseTransform", "lossless.c", 395, "row_start < row_end");
}

void VP8LConvertFromBGRA_cold_1()
{
  __assert_rtn("VP8LConvertFromBGRA", "lossless.c", 567, "0");
}

void VP8LDspInit_cold_1()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 669, "VP8LAddGreenToBlueAndRed != NULL");
}

void VP8LDspInit_cold_2()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 670, "VP8LTransformColorInverse != NULL");
}

void VP8LDspInit_cold_3()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 671, "VP8LConvertBGRAToRGBA != NULL");
}

void VP8LDspInit_cold_4()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 672, "VP8LConvertBGRAToRGB != NULL");
}

void VP8LDspInit_cold_5()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 673, "VP8LConvertBGRAToBGR != NULL");
}

void VP8LDspInit_cold_6()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 674, "VP8LConvertBGRAToRGBA4444 != NULL");
}

void VP8LDspInit_cold_7()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 675, "VP8LConvertBGRAToRGB565 != NULL");
}

void VP8LDspInit_cold_8()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 676, "VP8LMapColor32b != NULL");
}

void VP8LDspInit_cold_9()
{
  __assert_rtn("VP8LDspInit_body", "lossless.c", 677, "VP8LMapColor8b != NULL");
}

void PredictorAdd2_C_cold_1()
{
  __assert_rtn("PredictorAdd2_C", "lossless.c", 199, "upper != NULL");
}

void PredictorAdd3_C_cold_1()
{
  __assert_rtn("PredictorAdd3_C", "lossless.c", 200, "upper != NULL");
}

void PredictorAdd4_C_cold_1()
{
  __assert_rtn("PredictorAdd4_C", "lossless.c", 201, "upper != NULL");
}

void PredictorAdd5_C_cold_1()
{
  __assert_rtn("PredictorAdd5_C", "lossless.c", 202, "upper != NULL");
}

void PredictorAdd6_C_cold_1()
{
  __assert_rtn("PredictorAdd6_C", "lossless.c", 203, "upper != NULL");
}

void PredictorAdd7_C_cold_1()
{
  __assert_rtn("PredictorAdd7_C", "lossless.c", 204, "upper != NULL");
}

void PredictorAdd8_C_cold_1()
{
  __assert_rtn("PredictorAdd8_C", "lossless.c", 205, "upper != NULL");
}

void PredictorAdd9_C_cold_1()
{
  __assert_rtn("PredictorAdd9_C", "lossless.c", 206, "upper != NULL");
}

void PredictorAdd10_C_cold_1()
{
  __assert_rtn("PredictorAdd10_C", "lossless.c", 207, "upper != NULL");
}

void PredictorAdd11_C_cold_1()
{
  __assert_rtn("PredictorAdd11_C", "lossless.c", 208, "upper != NULL");
}

void PredictorAdd12_C_cold_1()
{
  __assert_rtn("PredictorAdd12_C", "lossless.c", 209, "upper != NULL");
}

void PredictorAdd13_C_cold_1()
{
  __assert_rtn("PredictorAdd13_C", "lossless.c", 210, "upper != NULL");
}

uint64_t VP8LColorCacheInit(uint64_t a1, int a2)
{
  uint64_t result;

  if (!a1)
    VP8LColorCacheInit_cold_1();
  if (a2 <= 0)
    VP8LColorCacheInit_cold_2();
  result = (uint64_t)WebPSafeCalloc(1 << a2, 4uLL);
  *(_QWORD *)a1 = result;
  if (result)
  {
    *(_DWORD *)(a1 + 8) = 32 - a2;
    *(_DWORD *)(a1 + 12) = a2;
    return 1;
  }
  return result;
}

void VP8LColorCacheClear(void **a1)
{
  if (a1)
  {
    _TIFFfree(*a1);
    *a1 = 0;
  }
}

void *VP8LColorCacheCopy(uint64_t a1, uint64_t a2)
{
  int v2;

  if (!a1)
    VP8LColorCacheCopy_cold_1();
  if (!a2)
    VP8LColorCacheCopy_cold_2();
  v2 = *(_DWORD *)(a1 + 12);
  if (v2 != *(_DWORD *)(a2 + 12))
    VP8LColorCacheCopy_cold_3();
  return memcpy(*(void **)a2, *(const void **)a1, 4 << v2);
}

void VP8LColorCacheInit_cold_1()
{
  __assert_rtn("VP8LColorCacheInit", "color_cache_utils.c", 25, "color_cache != NULL");
}

void VP8LColorCacheInit_cold_2()
{
  __assert_rtn("VP8LColorCacheInit", "color_cache_utils.c", 26, "hash_bits > 0");
}

void VP8LColorCacheCopy_cold_1()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 44, "src != NULL");
}

void VP8LColorCacheCopy_cold_2()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 45, "dst != NULL");
}

void VP8LColorCacheCopy_cold_3()
{
  __assert_rtn("VP8LColorCacheCopy", "color_cache_utils.c", 46, "src->hash_bits_ == dst->hash_bits_");
}

void *VP8LHtreeGroupsNew(int a1)
{
  void *result;

  result = WebPSafeMalloc(a1, 0x238uLL);
  if (a1 > 0x10000)
  {
    if (result)
      VP8LHtreeGroupsNew_cold_1();
  }
  return result;
}

void VP8LHtreeGroupsFree(void *a1)
{
  if (a1)
    _TIFFfree(a1);
}

uint64_t VP8LBuildHuffmanTable(uint64_t a1, int a2, int *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE v20[1024];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = BuildHuffmanTable(0, a2, a3, a4, 0);
  if (a4 >= 2329)
    VP8LBuildHuffmanTable_cold_1();
  v9 = v8;
  if (a1 && (_DWORD)v8)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(int *)(v10 + 24);
    if (v11 + 4 * (int)v8 >= (unint64_t)(*(_QWORD *)v10 + 4 * v12))
    {
      v13 = WebPSafeMalloc(1uLL, 0x20uLL);
      if (!v13)
        return 0;
      v14 = v13;
      if ((int)v9 <= (int)v12)
        v15 = v12;
      else
        v15 = v9;
      *((_DWORD *)v13 + 6) = v15;
      v16 = WebPSafeMalloc(v15, 4uLL);
      *v14 = v16;
      if (!v16)
      {
        _TIFFfree(v14);
        return 0;
      }
      v11 = (uint64_t)v16;
      v14[1] = v16;
      v14[2] = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v14;
      *(_QWORD *)(a1 + 32) = v14;
    }
    if (a4 <= 512)
    {
      bzero(v20, 0x400uLL);
      BuildHuffmanTable(v11, a2, a3, a4, (unint64_t)v20);
      return v9;
    }
    v17 = WebPSafeMalloc(a4, 2uLL);
    if (v17)
    {
      v18 = v17;
      BuildHuffmanTable(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, (unint64_t)v17);
      _TIFFfree(v18);
      return v9;
    }
    return 0;
  }
  return v9;
}

uint64_t BuildHuffmanTable(uint64_t a1, int a2, int *a3, int a4, unint64_t a5)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  _OWORD v60[3];
  __int128 v61;
  _OWORD v62[4];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  memset(v62, 0, sizeof(v62));
  if (!a4)
    BuildHuffmanTable_cold_1();
  if (!a3)
    BuildHuffmanTable_cold_2();
  if ((!a1 || !a5) && a1 | a5)
    BuildHuffmanTable_cold_6();
  if (a2 < 1)
    BuildHuffmanTable_cold_3();
  if (a4 < 1)
  {
    v9 = 0;
  }
  else
  {
    v5 = a4;
    v6 = a3;
    do
    {
      v8 = *v6++;
      v7 = v8;
      if ((int)v8 > 15)
        return 0;
      ++*((_DWORD *)v62 + v7);
      --v5;
    }
    while (v5);
    v9 = v62[0];
  }
  if (v9 == a4)
    return 0;
  v12 = 0;
  v13 = 0;
  v10 = (1 << a2);
  v61 = 0u;
  memset(v60, 0, sizeof(v60));
  DWORD1(v60[0]) = 0;
  do
  {
    v14 = *((_DWORD *)v62 + v12 + 1);
    if (v14 > 1 << (v12 + 1))
      return 0;
    v13 += v14;
    *((_DWORD *)v60 + v12++ + 2) = v13;
  }
  while (v12 != 14);
  if (a4 >= 1)
  {
    for (i = 0; i != a4; ++i)
    {
      v16 = a3[i];
      if ((int)v16 >= 1)
      {
        if (a5)
        {
          v17 = *((int *)v60 + v16);
          *((_DWORD *)v60 + v16) = v17 + 1;
          *(_WORD *)(a5 + 2 * v17) = i;
        }
        else
        {
          ++*((_DWORD *)v60 + v16);
        }
      }
    }
  }
  v18 = HIDWORD(v61);
  if (HIDWORD(v61) != 1)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    v24 = v10 - 1;
    v25 = (a2 + 1);
    v26 = 2;
    v27 = 1;
    v28 = 1;
    v29 = 1;
    do
    {
      v30 = v28;
      v31 = *((_DWORD *)v62 + v27);
      v28 = 2 * v28 - v31;
      if (v28 < 0)
        return 0;
      if (a1 && v31 >= 1)
      {
        if (((v26 - 1) & v10) != 0)
          BuildHuffmanTable_cold_4();
        v23 = (int)v23;
        do
        {
          v32 = v27 | (*(unsigned __int16 *)(a5 + 2 * v23) << 16);
          v33 = 1 << a2;
          do
          {
            *(_DWORD *)(a1 + 4 * v22 + 4 * (v33 - v26)) = v32;
            v33 -= v26;
          }
          while (v33 > 0);
          v34 = 1 << (v27 - 1);
          do
          {
            v35 = v34;
            v34 >>= 1;
          }
          while ((v35 & v22) != 0);
          ++v23;
          v22 = ((v35 - 1) & v22) + v35;
          v36 = __OFSUB__(v31--, 1);
        }
        while (!((v31 < 0) ^ v36 | (v31 == 0)));
        *((_DWORD *)v62 + v27) = 0;
      }
      v29 += 2 * v30;
      ++v27;
      v26 *= 2;
    }
    while (v27 != v25);
    if (a2 > 14)
    {
      v42 = 1 << a2;
    }
    else
    {
      v37 = a2;
      v38 = (char *)v62 + 4 * a2 + 4;
      v39 = 2;
      v40 = -1;
      v41 = a1;
      v42 = 1 << a2;
      do
      {
        v43 = v37 + 1;
        v44 = *((_DWORD *)v62 + v37 + 1);
        if (2 * v28 - v44 < 0)
          return 0;
        if (v44 >= 1)
        {
          do
          {
            if ((v22 & v24) == v40)
            {
              if (a1)
                goto LABEL_62;
            }
            else
            {
              v45 = 1 << (v43 - a2);
              v46 = v43 - a2;
              if (v37 <= 13)
              {
                v47 = 0;
                v48 = 1 << (v43 - a2);
                while (1)
                {
                  v49 = v48 - *(_DWORD *)&v38[4 * v47];
                  if (v49 < 1)
                    break;
                  v50 = v37 + v47;
                  v48 = 2 * v49;
                  ++v47;
                  if (v50 == 13)
                  {
                    v51 = 15;
                    goto LABEL_59;
                  }
                }
                v51 = v25 + v47;
LABEL_59:
                v46 = v51 - a2;
                v45 = 1 << (v51 - a2);
              }
              v42 += v45;
              if (a1)
              {
                v41 += 4 * (int)v10;
                v52 = v46 + a2;
                v53 = a1 + 4 * (v22 & v24);
                *(_BYTE *)v53 = v52;
                *(_WORD *)(v53 + 2) = ((v41 - a1) >> 2) - (v22 & v24);
                LODWORD(v10) = v45;
                v40 = v22 & v24;
LABEL_62:
                if ((v10 & (v39 - 1)) != 0)
                  BuildHuffmanTable_cold_4();
                v54 = v23 + 1;
                v55 = (v43 - a2) | (*(unsigned __int16 *)(a5 + 2 * (int)v23) << 16);
                v56 = v10;
                do
                {
                  *(_DWORD *)(v41 + 4 * (v22 >> a2) + 4 * (v56 - v39)) = v55;
                  v56 -= v39;
                }
                while (v56 > 0);
                LODWORD(v23) = v54;
                goto LABEL_67;
              }
              LODWORD(v10) = v45;
              v40 = v22 & v24;
            }
LABEL_67:
            v57 = 1 << v37;
            do
            {
              v58 = v57;
              v57 >>= 1;
            }
            while ((v58 & v22) != 0);
            v22 = ((v58 - 1) & v22) + v58;
            v59 = *((_DWORD *)v62 + v43);
            v36 = __OFSUB__(v59--, 1);
            *((_DWORD *)v62 + v43) = v59;
          }
          while (!((v59 < 0) ^ v36 | (v59 == 0)));
        }
        v39 *= 2;
        LOBYTE(v25) = v25 + 1;
        v38 += 4;
        v29 += 2 * v28;
        ++v37;
        v28 = 2 * v28 - v44;
      }
      while (v43 != 15);
      v18 = HIDWORD(v61);
    }
    if (v29 == 2 * v18 - 1)
      return v42;
    else
      return 0;
  }
  if (a5)
  {
    v19 = *(unsigned __int16 *)a5 << 16;
    v20 = (int)v10;
    do
      *(_DWORD *)(a1 - 4 + 4 * v20) = v19;
    while (v20-- > 1);
  }
  return v10;
}

uint64_t VP8LHuffmanTablesAllocate(int a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a2 + 32) = a2;
  *(_QWORD *)(a2 + 16) = 0;
  result = (uint64_t)WebPSafeMalloc(a1, 4uLL);
  *(_QWORD *)a2 = result;
  if (result)
  {
    *(_QWORD *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 24) = a1;
    return 1;
  }
  return result;
}

void VP8LHuffmanTablesDeallocate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    _TIFFfree(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v2)
    {
      do
      {
        v3 = *(_QWORD *)(v2 + 16);
        _TIFFfree(*(void **)v2);
        _TIFFfree((void *)v2);
        v2 = v3;
      }
      while (v3);
    }
  }
}

void VP8LHtreeGroupsNew_cold_1()
{
  __assert_rtn("VP8LHtreeGroupsNew", "huffman_utils.c", 31, "num_htree_groups <= MAX_HTREE_GROUPS");
}

void VP8LBuildHuffmanTable_cold_1()
{
  __assert_rtn("VP8LBuildHuffmanTable", "huffman_utils.c", 221, "code_lengths_size <= MAX_CODE_LENGTHS_SIZE");
}

void BuildHuffmanTable_cold_1()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 92, "code_lengths_size != 0");
}

void BuildHuffmanTable_cold_2()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 93, "code_lengths != NULL");
}

void BuildHuffmanTable_cold_3()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 96, "root_bits > 0");
}

void BuildHuffmanTable_cold_4()
{
  __assert_rtn("ReplicateValue", "huffman_utils.c", 56, "end % step == 0");
}

void BuildHuffmanTable_cold_6()
{
  __assert_rtn("BuildHuffmanTable", "huffman_utils.c", 95, "(root_table != NULL && sorted != NULL) || (root_table == NULL && sorted == NULL)");
}

uint64_t WebPFlipBuffer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 2;
  v1 = *(int *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)a1 <= 0xAu)
  {
    v9 = 0;
    v11 = *(int *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v2 + (v1 - 1) * v11;
    *(_DWORD *)(a1 + 24) = -(int)v11;
  }
  else
  {
    v3 = v1 - 1;
    v4 = *(int *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 52);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 24) + (int)(v3 >> 1) * (uint64_t)v5;
    *(_QWORD *)(a1 + 16) = v2 + v3 * v4;
    *(_QWORD *)(a1 + 24) = v7;
    *(_DWORD *)(a1 + 48) = -(int)v4;
    *(_DWORD *)(a1 + 52) = -v5;
    LODWORD(v4) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 32) = v6 + (int)(v3 >> 1) * (uint64_t)(int)v4;
    *(_DWORD *)(a1 + 56) = -(int)v4;
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 0;
    if (v8)
    {
      v10 = *(int *)(a1 + 60);
      *(_QWORD *)(a1 + 40) = v8 + v3 * v10;
      *(_DWORD *)(a1 + 60) = -(int)v10;
    }
  }
  return v9;
}

uint64_t WebPAllocateDecBuffer(int a1, int a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  int v22;
  int v23;

  v4 = 2;
  if (a2 < 1 || a1 < 1 || !a4)
    return v4;
  if (a3)
  {
    if (a3[2])
    {
      v7 = a3[5];
      v8 = a3[6];
      if (!WebPCheckCropDimensions(a1, a2, a3[3] & 0xFFFFFFFE, a3[4] & 0xFFFFFFFE, v7, v8))
        return 2;
      a2 = v8;
      a1 = v7;
    }
    if (a3[7])
    {
      v9 = a3[8];
      v22 = a3[9];
      v23 = v9;
      if (!WebPRescalerGetScaledDimensions(a1, a2, &v23, &v22))
        return 2;
      a2 = v22;
      a1 = v23;
    }
  }
  a4[1] = a1;
  a4[2] = a2;
  v4 = 2;
  if (a1 < 1)
    return v4;
  if (a2 < 1)
    return v4;
  v10 = *a4;
  if (v10 > 0xC)
    return v4;
  if ((int)a4[3] > 0 || *((_QWORD *)a4 + 14))
    goto LABEL_16;
  if ((kModeBpp[v10] * (unint64_t)a1) >> 31)
    return 2;
  v13 = kModeBpp[v10] * (uint64_t)a1;
  v14 = v13 * a2;
  v15 = a1 * (unint64_t)a2;
  if ((_DWORD)v10 == 12)
    v16 = a1;
  else
    v16 = 0;
  if ((_DWORD)v10 != 12)
    v15 = 0;
  if (v10 >= 0xB)
    v17 = (a1 + 1) >> 1;
  else
    v17 = 0;
  if (v10 >= 0xB)
    v18 = v16;
  else
    v18 = 0;
  if (v10 >= 0xB)
    v19 = ((a1 + 1) >> 1) * (unint64_t)((a2 + 1) >> 1);
  else
    v19 = 0;
  if (v10 >= 0xB)
    v20 = v15;
  else
    v20 = 0;
  v4 = 1;
  v21 = (char *)WebPSafeMalloc(v14 + 2 * v19 + v20, 1uLL);
  if (v21)
  {
    *((_QWORD *)a4 + 14) = v21;
    *((_QWORD *)a4 + 2) = v21;
    if (v10 < 0xB)
    {
      a4[6] = v13;
      *((_QWORD *)a4 + 4) = v14;
    }
    else
    {
      a4[12] = v13;
      a4[13] = v17;
      *((_QWORD *)a4 + 8) = v14;
      *((_QWORD *)a4 + 9) = v19;
      *((_QWORD *)a4 + 3) = &v21[v14];
      *((_QWORD *)a4 + 4) = &v21[v14 + v19];
      a4[14] = v17;
      *((_QWORD *)a4 + 10) = v19;
      if ((_DWORD)v10 == 12)
        *((_QWORD *)a4 + 5) = &v21[2 * v19 + v14];
      *((_QWORD *)a4 + 11) = v20;
      a4[15] = v18;
    }
LABEL_16:
    v11 = CheckDecBuffer(a4);
    v4 = v11;
    if (a3 && !(_DWORD)v11)
    {
      if (a3[12])
        return WebPFlipBuffer((uint64_t)a4);
      else
        return 0;
    }
  }
  return v4;
}

uint64_t WebPInitDecBufferInternal(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 0;
  if (a1 && (a2 & 0xFFFFFF00) == 0x200)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    v2 = 1;
    *(_OWORD *)a1 = 0u;
  }
  return v2;
}

void WebPFreeDecBuffer(uint64_t a1)
{
  if (a1)
  {
    if (*(int *)(a1 + 12) <= 0)
      _TIFFfree(*(void **)(a1 + 112));
    *(_QWORD *)(a1 + 112) = 0;
  }
}

uint64_t WebPCopyDecBufferPixels(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  char *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  if (!a1 || !a2)
    WebPCopyDecBufferPixels_cold_1();
  v4 = *a1;
  if ((_DWORD)v4 != *(_DWORD *)a2)
    WebPCopyDecBufferPixels_cold_2();
  *(_QWORD *)(a2 + 4) = *(_QWORD *)(a1 + 1);
  if (CheckDecBuffer((unsigned int *)a2))
    return 2;
  v6 = (char *)*((_QWORD *)a1 + 2);
  v7 = *(char **)(a2 + 16);
  v8 = a1[1];
  if (v4 <= 0xA)
  {
    v20 = a1[6];
    v21 = *(_DWORD *)(a2 + 24);
    v22 = v8 * kModeBpp[v4];
  }
  else
  {
    WebPCopyPlane(v6, a1[12], v7, *(_DWORD *)(a2 + 48), v8, a1[2]);
    v9 = a1[1];
    v10 = a1[2];
    if (v9 >= -1)
      v11 = v9 + 1;
    else
      v11 = v9 + 2;
    v12 = v11 >> 1;
    v13 = v10 + 2;
    if (v10 >= -1)
      v13 = v10 + 1;
    WebPCopyPlane(*((char **)a1 + 3), a1[13], *(char **)(a2 + 24), *(_DWORD *)(a2 + 52), v12, v13 >> 1);
    v14 = a1[1];
    v15 = a1[2];
    if (v14 >= -1)
      v16 = v14 + 1;
    else
      v16 = v14 + 2;
    v17 = v16 >> 1;
    v18 = v15 + 2;
    if (v15 >= -1)
      v18 = v15 + 1;
    WebPCopyPlane(*((char **)a1 + 4), a1[14], *(char **)(a2 + 32), *(_DWORD *)(a2 + 56), v17, v18 >> 1);
    v19 = *a1;
    if ((*a1 > 0xC || ((1 << v19) & 0x103A) == 0) && (v19 - 11) < 0xFFFFFFFC)
      return 0;
    v6 = (char *)*((_QWORD *)a1 + 5);
    v20 = a1[15];
    v7 = *(char **)(a2 + 40);
    v21 = *(_DWORD *)(a2 + 60);
    v22 = a1[1];
  }
  WebPCopyPlane(v6, v20, v7, v21, v22, a1[2]);
  return 0;
}

uint64_t CheckDecBuffer(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL4 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;

  v1 = *a1;
  if (v1 > 0xC)
    return 2;
  v3 = (int)a1[1];
  v4 = (int)a1[2];
  if (v1 < 0xB)
  {
    LODWORD(v30) = a1[6];
    if ((int)v30 >= 0)
      v30 = v30;
    else
      v30 = -(int)v30;
    v31 = kModeBpp[v1];
    v32 = v30 * ((int)v4 - 1) + v31 * (uint64_t)(int)v3;
    v33 = v3 * v31;
    if (v32 > *((_QWORD *)a1 + 4) || (int)v30 < v33 || *((_QWORD *)a1 + 2) == 0)
      return 2;
  }
  else
  {
    v5 = v3 + 2;
    if ((int)v3 >= -1)
      v5 = v3 + 1;
    v6 = v5 >> 1;
    v7 = v4 + 2;
    if ((int)v4 >= -1)
      v7 = v4 + 1;
    v8 = v7 >> 1;
    LODWORD(v9) = a1[12];
    LODWORD(v10) = a1[13];
    if ((int)v9 >= 0)
      v9 = v9;
    else
      v9 = -(int)v9;
    if ((int)v10 >= 0)
      v10 = v10;
    else
      v10 = -(int)v10;
    LODWORD(v11) = a1[14];
    if ((int)v11 >= 0)
      v11 = v11;
    else
      v11 = -(int)v11;
    v12 = v4 - 1;
    v13 = v8 - 1;
    v14 = v10 * v13 + v6;
    v15 = v11 * v13 + v6;
    v24 = (unint64_t)(v3 + v9 * v12) <= *((_QWORD *)a1 + 8)
       && v14 <= *((_QWORD *)a1 + 9)
       && v15 <= *((_QWORD *)a1 + 10)
       && (int)v9 >= (int)v3
       && (int)v10 >= v6
       && (int)v11 >= v6
       && *((_QWORD *)a1 + 2) != 0
       && *((_QWORD *)a1 + 3) != 0
       && *((_QWORD *)a1 + 4) != 0;
    if ((_DWORD)v1 == 12)
    {
      LODWORD(v25) = a1[15];
      if ((int)v25 >= 0)
        v25 = v25;
      else
        v25 = -(int)v25;
      v26 = v3 + v25 * v12;
      v29 = (int)v25 >= (int)v3 && v26 <= *((_QWORD *)a1 + 11) && *((_QWORD *)a1 + 5) != 0;
      if (!v24 || !v29)
        return 2;
    }
    else if (!v24)
    {
      return 2;
    }
  }
  return 0;
}

BOOL WebPAvoidSlowMemory(_DWORD *a1, uint64_t a2)
{
  _BOOL8 result;

  if (!a1)
    WebPAvoidSlowMemory_cold_1();
  if ((int)a1[3] < 2)
    return 0;
  result = 0;
  if (a2)
  {
    if ((*a1 - 7) <= 3)
      return *(_DWORD *)(a2 + 8) != 0;
  }
  return result;
}

void WebPCopyDecBufferPixels_cold_1()
{
  __assert_rtn("WebPCopyDecBufferPixels", "buffer_dec.c", 271, "src_buf != NULL && dst_buf != NULL");
}

void WebPCopyDecBufferPixels_cold_2()
{
  __assert_rtn("WebPCopyDecBufferPixels", "buffer_dec.c", 272, "src_buf->colorspace == dst_buf->colorspace");
}

void WebPAvoidSlowMemory_cold_1()
{
  __assert_rtn("WebPAvoidSlowMemory", "buffer_dec.c", 304, "output != NULL");
}

uint64_t VP8ParseQuant(uint64_t a1)
{
  uint64_t v2;
  int Value;
  int SignedValue;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;

  v2 = a1 + 16;
  Value = VP8GetValue(a1 + 16, 7);
  if (VP8GetValue(v2, 1))
    SignedValue = VP8GetSignedValue(v2, 4);
  else
    SignedValue = 0;
  if (VP8GetValue(v2, 1))
    v5 = VP8GetSignedValue(v2, 4);
  else
    v5 = 0;
  if (VP8GetValue(v2, 1))
    v6 = VP8GetSignedValue(v2, 4);
  else
    v6 = 0;
  if (VP8GetValue(v2, 1))
    v7 = VP8GetSignedValue(v2, 4);
  else
    v7 = 0;
  result = VP8GetValue(v2, 1);
  if ((_DWORD)result)
    result = VP8GetSignedValue(v2, 4);
  v9 = 144;
  v10 = *(_DWORD *)(a1 + 132);
  v11 = a1 + 1060;
  do
  {
    if (v10)
    {
      if (*(_DWORD *)(a1 + 140))
        v12 = 0;
      else
        v12 = Value;
      v13 = v12 + *(char *)(a1 + v9);
    }
    else
    {
      v13 = Value;
      if (v9 != 144)
      {
        v29 = *(_OWORD *)(a1 + 1076);
        *(_OWORD *)v11 = *(_OWORD *)(a1 + 1060);
        *(_OWORD *)(v11 + 16) = v29;
        goto LABEL_39;
      }
    }
    v14 = v13 + SignedValue;
    if (v13 + SignedValue >= 127)
      v14 = 127;
    v15 = kDcTable[v14 & ~(v14 >> 31)];
    if (v13 >= 127)
      v16 = 127;
    else
      v16 = v13;
    v17 = kAcTable[v16 & ~(v16 >> 31)];
    *(_DWORD *)v11 = v15;
    *(_DWORD *)(v11 + 4) = v17;
    v18 = v13 + v5;
    if (v13 + v5 >= 127)
      v18 = 127;
    v19 = 2 * kDcTable[v18 & ~(v18 >> 31)];
    v20 = v13 + v6;
    if (v13 + v6 >= 127)
      v20 = 127;
    v21 = 101581 * kAcTable[v20 & ~(v20 >> 31)];
    v22 = v21 >= 0x80000;
    v23 = HIWORD(v21);
    if (!v22)
      v23 = 8;
    *(_DWORD *)(v11 + 8) = v19;
    *(_DWORD *)(v11 + 12) = v23;
    v24 = v13 + v7;
    if (v13 + v7 >= 117)
      v24 = 117;
    v25 = kDcTable[v24 & ~(v24 >> 31)];
    v26 = v13 + result;
    if (v26 >= 127)
      v27 = 127;
    else
      v27 = v26;
    v28 = kAcTable[v27 & ~(v27 >> 31)];
    *(_DWORD *)(v11 + 16) = v25;
    *(_DWORD *)(v11 + 20) = v28;
    *(_DWORD *)(v11 + 24) = v26;
LABEL_39:
    v11 += 32;
    ++v9;
  }
  while (v9 != 148);
  return result;
}

void WebPInitUpsamplersNEON()
{
  WebPUpsamplers = (uint64_t)UpsampleRgbLinePair_NEON;
  qword_1EDF096C8 = (uint64_t)UpsampleRgbaLinePair_NEON;
  qword_1EDF096D0 = (uint64_t)UpsampleBgrLinePair_NEON;
  qword_1EDF096D8 = (uint64_t)UpsampleBgraLinePair_NEON;
  qword_1EDF09700 = (uint64_t)UpsampleBgraLinePair_NEON;
  qword_1EDF09708 = (uint64_t)UpsampleArgbLinePair_NEON;
  qword_1EDF096F0 = (uint64_t)UpsampleRgb565LinePair_NEON;
  qword_1EDF096F8 = (uint64_t)UpsampleRgbaLinePair_NEON;
  qword_1EDF096E0 = (uint64_t)UpsampleArgbLinePair_NEON;
  qword_1EDF096E8 = (uint64_t)UpsampleRgba4444LinePair_NEON;
  qword_1EDF09710 = (uint64_t)UpsampleRgba4444LinePair_NEON;
}

uint64_t UpsampleRgbaLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, char *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  signed int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint8x8_t v72;
  char v73;
  uint64_t v74;
  int v75;
  uint8x8_t v76;
  uint8x8_t *v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  int v87;
  uint8x8_t v88;
  uint8x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  char *v96;
  size_t v97;
  uint8x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  uint8x8_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t result;
  uint8x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  uint8x8_t v111;
  char *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BYTE *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  signed int v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned __int8 *v137;
  int v138;
  unsigned __int8 *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  char v150;
  signed int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  char v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  int v161;
  int v162;
  uint8x8_t v163[2];
  uint8x8_t v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[32];
  uint64_t v169;
  int8x8x2_t v170;
  int8x8x2_t v171;
  int8x8x2_t v172;

  v169 = *MEMORY[0x1E0C80C00];
  v167 = 0u;
  memset(v168, 0, 31);
  v165 = 0u;
  v166 = 0u;
  if (!a1)
    UpsampleRgbaLinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v16 = (uint64_t)(a9 + 1) >> 1;
  v17 = ((int)v16 - 1) >> 3;
  v160 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  v18 = *a3;
  v19 = ((*a5 + v18) >> 1) + 1;
  v20 = *a4;
  v21 = ((*a6 + v20) >> 1) + 1;
  v22 = (v19 + v18) >> 1;
  v23 = (v21 + v20) >> 1;
  v24 = (19077 * *a1) >> 8;
  v25 = v24 + ((26149 * v23) >> 8);
  if (v25 >= 0x379A)
    v26 = -1;
  else
    v26 = 0;
  if (v25 - 14234 >= 0x4000)
    v27 = v26;
  else
    v27 = (v25 - 14234) >> 6;
  *a7 = v27;
  v28 = v24 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  v29 = v28 + 8708;
  v30 = (v28 + 8708) >> 6;
  if (v28 >= -8708)
    v31 = -1;
  else
    v31 = 0;
  if (v29 < 0x4000)
    v31 = v30;
  a7[1] = v31;
  v32 = v24 + ((33050 * v22) >> 8);
  v33 = v32 - 17685;
  v34 = (v32 - 17685) >> 6;
  if (v32 >= 0x4515)
    v35 = -1;
  else
    v35 = 0;
  if (v33 < 0x4000)
    v35 = v34;
  a7[2] = v35;
  a7[3] = -1;
  if (a2)
  {
    v36 = (v19 + *v12) >> 1;
    v37 = (v21 + *v11) >> 1;
    v38 = 19077 * *a2;
    v39 = ((26149 * v37) >> 8) + (v38 >> 8);
    v40 = v39 - 14234;
    v41 = (v39 - 14234) >> 6;
    if (v39 >= 0x379A)
      v42 = -1;
    else
      v42 = 0;
    if (v40 < 0x4000)
      v42 = v41;
    *a8 = v42;
    v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    v44 = v43 + 8708;
    v45 = (v43 + 8708) >> 6;
    if (v43 >= -8708)
      v46 = -1;
    else
      v46 = 0;
    if (v44 < 0x4000)
      v46 = v45;
    a8[1] = v46;
    v47 = ((33050 * v36) >> 8) + (v38 >> 8);
    v48 = v47 - 17685;
    v49 = (v47 - 17685) >> 6;
    if (v47 >= 0x4515)
      v50 = -1;
    else
      v50 = 0;
    if (v48 < 0x4000)
      v50 = v49;
    a8[2] = v50;
    a8[3] = -1;
  }
  v161 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    v51 = 0;
    v54 = vdupq_n_s16(0x11Au);
    v55 = vdupq_n_s16(0xC866u);
    v56 = vdupq_n_s16(0x2204u);
    v57 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1)
      v58 = 1;
    else
      v58 = v17;
    v59 = -1;
    v60 = -1;
    do
    {
      v61 = 0;
      v62 = *(uint8x8_t *)(a3 + 1);
      v63 = *(uint8x8_t *)(v12 + 1);
      v64 = (int16x8_t)vaddl_u8(v63, *(uint8x8_t *)a3);
      v65 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v62);
      v66 = vaddq_s16(v64, v65);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v64, v64)), 3uLL);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v65, v65)), 3uLL);
      *(uint8x8_t *)v66.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v65.i8);
      v67 = vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v64.i8);
      v172.val[1] = (int8x8_t)vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      vst2_s8((char *)&v165, (int8x8x2_t)v66);
      vst2_s8((char *)&v167, v172);
      v172.val[1] = *(int8x8_t *)(v13 + 1);
      v68 = *(uint8x8_t *)(v11 + 1);
      v69 = (int16x8_t)vaddl_u8(v68, *(uint8x8_t *)v13);
      v70 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v172.val[1]);
      v71 = vaddq_s16(v69, v70);
      *(int8x8_t *)v69.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v69, v69)), 3uLL);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v70, v70)), 3uLL);
      *(uint8x8_t *)v71.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v70.i8);
      v72 = vrhadd_u8((uint8x8_t)v172.val[1], *(uint8x8_t *)v69.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v69.i8);
      v52 = (char *)&v166;
      vst2_s8(v52, (int8x8x2_t)v71);
      v172.val[1] = (int8x8_t)vrhadd_u8(v68, *(uint8x8_t *)v70.i8);
      v53 = v168;
      vst2_s8(v53, v172);
      v73 = 1;
      v74 = (16 * v51) | 1;
      do
      {
        v75 = 4 * (v61 | v74);
        v76 = *(uint8x8_t *)&a1[v74 + v61];
        v77 = (uint8x8_t *)((char *)&v165 + v61);
        v78 = (int16x8_t)vshll_n_u8(*v77, 7uLL);
        v79 = (int16x8_t)vshll_n_u8(v77[2], 7uLL);
        v80 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v76, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v81 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v80, v55)), 6uLL);
        v82 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v80, v56), vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v83 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v78, v54), vqaddq_s16(v80, v57)), v78), 6uLL);
        v84 = &a7[v75 & 0xFFFFFFE4];
        vst4_s8(v84, *(int8x8x4_t *)(&v60 - 3));
        LOBYTE(v75) = v73;
        v61 = 8;
        v73 = 0;
      }
      while ((v75 & 1) != 0);
      if (a2)
      {
        v85 = 0;
        v86 = 1;
        do
        {
          v87 = 4 * (v85 | v74);
          v88 = *(uint8x8_t *)&a2[v74 + v85];
          v89 = (uint8x8_t *)&v168[v85 - 16];
          v90 = (int16x8_t)vshll_n_u8(*v89, 7uLL);
          v91 = (int16x8_t)vshll_n_u8(v89[2], 7uLL);
          v92 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v88, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v93 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v92, v55)), 6uLL);
          v94 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v92, v56), vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v95 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v90, v54), vqaddq_s16(v92, v57)), v90), 6uLL);
          v96 = &a8[v87 & 0xFFFFFFE4];
          vst4_s8(v96, *(int8x8x4_t *)(&v59 - 3));
          LOBYTE(v87) = v86;
          v85 = 8;
          v86 = 0;
        }
        while ((v87 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  v159 = a1;
  v162 = v17;
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v97 = 9 - (int)v160;
  memset((char *)v164 + (int)v160, v164[0].u8[(_QWORD)(v160 - 1)], v97);
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v97);
  v98 = *(uint8x8_t *)((char *)v163 + 1);
  v99 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  v100 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  v101 = vaddq_s16(v99, v100);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v99, v99)), 3uLL);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v100, v100)), 3uLL);
  *(uint8x8_t *)v101.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  v102 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v99.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v101);
  v170.val[1] = (int8x8_t)vrhadd_u8(v98, *(uint8x8_t *)v100.i8);
  v105 = (char *)&v167;
  vst2_s8(v105, v170);
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v164 + (int)v160, v164[0].u8[(_QWORD)(v160 - 1)], v97);
  result = (uint64_t)memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v97);
  v107 = *(uint8x8_t *)((char *)v163 + 1);
  v108 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  v109 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  v110 = vaddq_s16(v108, v109);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v108, v108)), 3uLL);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v109, v109)), 3uLL);
  *(uint8x8_t *)v110.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  v111 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v108.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v110);
  v171.val[1] = (int8x8_t)vrhadd_u8(v107, *(uint8x8_t *)v109.i8);
  v112 = v168;
  vst2_s8(v112, v171);
  v113 = (a9 - v161);
  if ((int)v113 >= 1)
  {
    v114 = (unsigned __int8 *)&v166;
    result = 8708;
    v115 = &v159[v161];
    v116 = (a9 - v161);
    v117 = (v162 << 6) | 4;
    do
    {
      v119 = *v115++;
      v118 = v119;
      v120 = *(v114 - 16);
      v122 = *v114++;
      v121 = v122;
      v123 = &a7[v117];
      v124 = 19077 * v118;
      v125 = ((26149 * v122) >> 8) + (v124 >> 8);
      v126 = v125 - 14234;
      v127 = (v125 - 14234) >> 6;
      if (v125 >= 0x379A)
        v128 = -1;
      else
        v128 = 0;
      if (v126 >= 0x4000)
        LOBYTE(v127) = v128;
      *v123 = v127;
      v129 = (v124 >> 8) - (((6419 * v120) >> 8) + ((13320 * v121) >> 8));
      v130 = v129 + 8708;
      v131 = (v129 + 8708) >> 6;
      if (v129 >= -8708)
        v132 = -1;
      else
        v132 = 0;
      if (v130 < 0x4000)
        v132 = v131;
      v123[1] = v132;
      v133 = ((33050 * v120) >> 8) + (v124 >> 8);
      v134 = v133 - 17685;
      v135 = (v133 - 17685) >> 6;
      if (v133 >= 0x4515)
        v136 = -1;
      else
        v136 = 0;
      if (v134 < 0x4000)
        v136 = v135;
      v123[2] = v136;
      v123[3] = -1;
      v117 += 4;
      --v116;
    }
    while (v116);
    if (a2)
    {
      v137 = v168;
      v138 = (v162 << 6) | 4;
      v139 = &a2[v161];
      result = 13320;
      do
      {
        v141 = *v139++;
        v140 = v141;
        v142 = *(v137 - 16);
        v144 = *v137++;
        v143 = v144;
        v145 = &a8[v138];
        v146 = 19077 * v140;
        v147 = ((26149 * v144) >> 8) + (v146 >> 8);
        v148 = v147 - 14234;
        v149 = (v147 - 14234) >> 6;
        if (v147 >= 0x379A)
          v150 = -1;
        else
          v150 = 0;
        if (v148 < 0x4000)
          v150 = v149;
        *v145 = v150;
        v151 = (v146 >> 8) - (((6419 * v142) >> 8) + ((13320 * v143) >> 8));
        v152 = v151 + 8708;
        v153 = (v151 + 8708) >> 6;
        if (v151 >= -8708)
          v154 = -1;
        else
          v154 = 0;
        if (v152 < 0x4000)
          v154 = v153;
        v145[1] = v154;
        v155 = ((33050 * v142) >> 8) + (v146 >> 8);
        v156 = v155 - 17685;
        v157 = (v155 - 17685) >> 6;
        if (v155 >= 0x4515)
          v158 = -1;
        else
          v158 = 0;
        if (v156 < 0x4000)
          v158 = v157;
        v145[2] = v158;
        v145[3] = -1;
        v138 += 4;
        --v113;
      }
      while (v113);
    }
  }
  return result;
}

uint64_t UpsampleBgraLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, char *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  signed int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  uint8x8_t v72;
  char v73;
  uint64_t v74;
  int v75;
  uint8x8_t v76;
  uint8x8_t *v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  int v87;
  uint8x8_t v88;
  uint8x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  char *v96;
  size_t v97;
  uint8x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  uint8x8_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t result;
  uint8x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  uint8x8_t v111;
  char *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  _BYTE *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  char v128;
  signed int v129;
  unsigned int v130;
  unsigned int v131;
  char v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unsigned __int8 *v137;
  int v138;
  unsigned __int8 *v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  char *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  char v150;
  signed int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  char v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  int v161;
  int v162;
  uint8x8_t v163[2];
  uint8x8_t v164[2];
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _BYTE v168[32];
  uint64_t v169;
  int8x8x2_t v170;
  int8x8x2_t v171;
  int8x8x2_t v172;

  v169 = *MEMORY[0x1E0C80C00];
  v167 = 0u;
  memset(v168, 0, 31);
  v165 = 0u;
  v166 = 0u;
  if (!a1)
    UpsampleBgraLinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v16 = (uint64_t)(a9 + 1) >> 1;
  v17 = ((int)v16 - 1) >> 3;
  v160 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  v18 = *a3;
  v19 = ((*a5 + v18) >> 1) + 1;
  v20 = *a4;
  v21 = ((*a6 + v20) >> 1) + 1;
  v22 = (v19 + v18) >> 1;
  v23 = (v21 + v20) >> 1;
  v24 = (19077 * *a1) >> 8;
  v25 = v24 + ((33050 * v22) >> 8);
  if (v25 >= 0x4515)
    v26 = -1;
  else
    v26 = 0;
  if (v25 - 17685 >= 0x4000)
    v27 = v26;
  else
    v27 = (v25 - 17685) >> 6;
  *a7 = v27;
  v28 = v24 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  v29 = v28 + 8708;
  v30 = (v28 + 8708) >> 6;
  if (v28 >= -8708)
    v31 = -1;
  else
    v31 = 0;
  if (v29 < 0x4000)
    v31 = v30;
  a7[1] = v31;
  v32 = v24 + ((26149 * v23) >> 8);
  v33 = v32 - 14234;
  v34 = (v32 - 14234) >> 6;
  if (v32 >= 0x379A)
    v35 = -1;
  else
    v35 = 0;
  if (v33 < 0x4000)
    v35 = v34;
  a7[2] = v35;
  a7[3] = -1;
  if (a2)
  {
    v36 = (v19 + *v12) >> 1;
    v37 = (v21 + *v11) >> 1;
    v38 = 19077 * *a2;
    v39 = ((33050 * v36) >> 8) + (v38 >> 8);
    v40 = v39 - 17685;
    v41 = (v39 - 17685) >> 6;
    if (v39 >= 0x4515)
      v42 = -1;
    else
      v42 = 0;
    if (v40 < 0x4000)
      v42 = v41;
    *a8 = v42;
    v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    v44 = v43 + 8708;
    v45 = (v43 + 8708) >> 6;
    if (v43 >= -8708)
      v46 = -1;
    else
      v46 = 0;
    if (v44 < 0x4000)
      v46 = v45;
    a8[1] = v46;
    v47 = ((26149 * v37) >> 8) + (v38 >> 8);
    v48 = v47 - 14234;
    v49 = (v47 - 14234) >> 6;
    if (v47 >= 0x379A)
      v50 = -1;
    else
      v50 = 0;
    if (v48 < 0x4000)
      v50 = v49;
    a8[2] = v50;
    a8[3] = -1;
  }
  v161 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    v51 = 0;
    v54 = vdupq_n_s16(0x11Au);
    v55 = vdupq_n_s16(0xC866u);
    v56 = vdupq_n_s16(0x2204u);
    v57 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1)
      v58 = 1;
    else
      v58 = v17;
    v59 = -1;
    v60 = -1;
    do
    {
      v61 = 0;
      v62 = *(uint8x8_t *)(a3 + 1);
      v63 = *(uint8x8_t *)(v12 + 1);
      v64 = (int16x8_t)vaddl_u8(v63, *(uint8x8_t *)a3);
      v65 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v62);
      v66 = vaddq_s16(v64, v65);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v64, v64)), 3uLL);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v66, vaddq_s16(v65, v65)), 3uLL);
      *(uint8x8_t *)v66.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v65.i8);
      v67 = vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v64.i8);
      v172.val[1] = (int8x8_t)vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      vst2_s8((char *)&v165, (int8x8x2_t)v66);
      vst2_s8((char *)&v167, v172);
      v172.val[1] = *(int8x8_t *)(v13 + 1);
      v68 = *(uint8x8_t *)(v11 + 1);
      v69 = (int16x8_t)vaddl_u8(v68, *(uint8x8_t *)v13);
      v70 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v172.val[1]);
      v71 = vaddq_s16(v69, v70);
      *(int8x8_t *)v69.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v69, v69)), 3uLL);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v71, vaddq_s16(v70, v70)), 3uLL);
      *(uint8x8_t *)v71.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v70.i8);
      v72 = vrhadd_u8((uint8x8_t)v172.val[1], *(uint8x8_t *)v69.i8);
      v172.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v69.i8);
      v52 = (char *)&v166;
      vst2_s8(v52, (int8x8x2_t)v71);
      v172.val[1] = (int8x8_t)vrhadd_u8(v68, *(uint8x8_t *)v70.i8);
      v53 = v168;
      vst2_s8(v53, v172);
      v73 = 1;
      v74 = (16 * v51) | 1;
      do
      {
        v75 = 4 * (v61 | v74);
        v76 = *(uint8x8_t *)&a1[v74 + v61];
        v77 = (uint8x8_t *)((char *)&v165 + v61);
        v78 = (int16x8_t)vshll_n_u8(*v77, 7uLL);
        v79 = (int16x8_t)vshll_n_u8(v77[2], 7uLL);
        v80 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v76, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v81 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v80, v55)), 6uLL);
        v82 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v80, v56), vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v83 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v78, v54), vqaddq_s16(v80, v57)), v78), 6uLL);
        v84 = &a7[v75 & 0xFFFFFFE4];
        vst4_s8(v84, *(int8x8x4_t *)(&v60 - 3));
        LOBYTE(v75) = v73;
        v61 = 8;
        v73 = 0;
      }
      while ((v75 & 1) != 0);
      if (a2)
      {
        v85 = 0;
        v86 = 1;
        do
        {
          v87 = 4 * (v85 | v74);
          v88 = *(uint8x8_t *)&a2[v74 + v85];
          v89 = (uint8x8_t *)&v168[v85 - 16];
          v90 = (int16x8_t)vshll_n_u8(*v89, 7uLL);
          v91 = (int16x8_t)vshll_n_u8(v89[2], 7uLL);
          v92 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v88, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v93 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v92, v55)), 6uLL);
          v94 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v92, v56), vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v95 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v90, v54), vqaddq_s16(v92, v57)), v90), 6uLL);
          v96 = &a8[v87 & 0xFFFFFFE4];
          vst4_s8(v96, *(int8x8x4_t *)(&v59 - 3));
          LOBYTE(v87) = v86;
          v85 = 8;
          v86 = 0;
        }
        while ((v87 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  v159 = a1;
  v162 = v17;
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v97 = 9 - (int)v160;
  memset((char *)v164 + (int)v160, v164[0].u8[(_QWORD)(v160 - 1)], v97);
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v97);
  v98 = *(uint8x8_t *)((char *)v163 + 1);
  v99 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  v100 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  v101 = vaddq_s16(v99, v100);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v99, v99)), 3uLL);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v101, vaddq_s16(v100, v100)), 3uLL);
  *(uint8x8_t *)v101.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  v102 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v99.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v101);
  v170.val[1] = (int8x8_t)vrhadd_u8(v98, *(uint8x8_t *)v100.i8);
  v105 = (char *)&v167;
  vst2_s8(v105, v170);
  memset(v164, 0, 9);
  memset(v163, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v164 + (int)v160, v164[0].u8[(_QWORD)(v160 - 1)], v97);
  result = (uint64_t)memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v97);
  v107 = *(uint8x8_t *)((char *)v163 + 1);
  v108 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v163 + 1), v164[0]);
  v109 = (int16x8_t)vaddl_u8(v163[0], *(uint8x8_t *)((char *)v164 + 1));
  v110 = vaddq_s16(v108, v109);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v108, v108)), 3uLL);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v110, vaddq_s16(v109, v109)), 3uLL);
  *(uint8x8_t *)v110.i8 = vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  v111 = vrhadd_u8(*(uint8x8_t *)((char *)v164 + 1), *(uint8x8_t *)v108.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v110);
  v171.val[1] = (int8x8_t)vrhadd_u8(v107, *(uint8x8_t *)v109.i8);
  v112 = v168;
  vst2_s8(v112, v171);
  v113 = (a9 - v161);
  if ((int)v113 >= 1)
  {
    v114 = (unsigned __int8 *)&v166;
    result = 8708;
    v115 = &v159[v161];
    v116 = (a9 - v161);
    v117 = (v162 << 6) | 4;
    do
    {
      v119 = *v115++;
      v118 = v119;
      v120 = *(v114 - 16);
      v122 = *v114++;
      v121 = v122;
      v123 = &a7[v117];
      v124 = 19077 * v118;
      v125 = ((33050 * v120) >> 8) + (v124 >> 8);
      v126 = v125 - 17685;
      v127 = (v125 - 17685) >> 6;
      if (v125 >= 0x4515)
        v128 = -1;
      else
        v128 = 0;
      if (v126 >= 0x4000)
        LOBYTE(v127) = v128;
      *v123 = v127;
      v129 = (v124 >> 8) - (((6419 * v120) >> 8) + ((13320 * v121) >> 8));
      v130 = v129 + 8708;
      v131 = (v129 + 8708) >> 6;
      if (v129 >= -8708)
        v132 = -1;
      else
        v132 = 0;
      if (v130 < 0x4000)
        v132 = v131;
      v123[1] = v132;
      v133 = ((26149 * v121) >> 8) + (v124 >> 8);
      v134 = v133 - 14234;
      v135 = (v133 - 14234) >> 6;
      if (v133 >= 0x379A)
        v136 = -1;
      else
        v136 = 0;
      if (v134 < 0x4000)
        v136 = v135;
      v123[2] = v136;
      v123[3] = -1;
      v117 += 4;
      --v116;
    }
    while (v116);
    if (a2)
    {
      v137 = v168;
      v138 = (v162 << 6) | 4;
      v139 = &a2[v161];
      result = 13320;
      do
      {
        v141 = *v139++;
        v140 = v141;
        v142 = *(v137 - 16);
        v144 = *v137++;
        v143 = v144;
        v145 = &a8[v138];
        v146 = 19077 * v140;
        v147 = ((33050 * v142) >> 8) + (v146 >> 8);
        v148 = v147 - 17685;
        v149 = (v147 - 17685) >> 6;
        if (v147 >= 0x4515)
          v150 = -1;
        else
          v150 = 0;
        if (v148 < 0x4000)
          v150 = v149;
        *v145 = v150;
        v151 = (v146 >> 8) - (((6419 * v142) >> 8) + ((13320 * v143) >> 8));
        v152 = v151 + 8708;
        v153 = (v151 + 8708) >> 6;
        if (v151 >= -8708)
          v154 = -1;
        else
          v154 = 0;
        if (v152 < 0x4000)
          v154 = v153;
        v145[1] = v154;
        v155 = ((26149 * v143) >> 8) + (v146 >> 8);
        v156 = v155 - 14234;
        v157 = (v155 - 14234) >> 6;
        if (v155 >= 0x379A)
          v158 = -1;
        else
          v158 = 0;
        if (v156 < 0x4000)
          v158 = v157;
        v145[2] = v158;
        v145[3] = -1;
        v138 += 4;
        --v113;
      }
      while (v113);
    }
  }
  return result;
}

uint64_t UpsampleRgbLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, char *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  signed int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint8x8_t v66;
  char v67;
  uint64_t v68;
  char v69;
  int v70;
  uint8x8_t v71;
  uint8x8_t *v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  char *v76;
  uint64_t v77;
  char v78;
  char v79;
  int v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  char *v86;
  size_t v87;
  uint8x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint8x8_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t result;
  uint8x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  uint8x8_t v101;
  char *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  char *v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  signed int v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  char v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  char *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  char v140;
  signed int v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  char v148;
  unsigned __int8 *v150;
  uint64_t v151;
  uint8x8_t v152[2];
  uint8x8_t v153[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[32];
  uint64_t v158;
  int8x8x2_t v159;
  int8x8x2_t v160;
  int8x8x2_t v161;
  int8x8x3_t v162;
  int8x8x3_t v163;

  v158 = *MEMORY[0x1E0C80C00];
  v156 = 0u;
  memset(v157, 0, 31);
  v154 = 0u;
  v155 = 0u;
  if (!a1)
    UpsampleRgbLinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v15 = (uint64_t)(a9 + 1) >> 1;
  v16 = ((int)v15 - 1) >> 3;
  v150 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  LODWORD(v15) = *a3;
  v17 = ((*a5 + v15) >> 1) + 1;
  v18 = *a4;
  v19 = ((*a6 + v18) >> 1) + 1;
  v20 = (v17 + v15) >> 1;
  v21 = (v19 + v18) >> 1;
  v22 = (19077 * *a1) >> 8;
  v23 = v22 + ((26149 * v21) >> 8);
  if (v23 >= 0x379A)
    v24 = -1;
  else
    v24 = 0;
  if (v23 - 14234 >= 0x4000)
    v25 = v24;
  else
    v25 = (v23 - 14234) >> 6;
  *a7 = v25;
  v26 = v22 - (((13320 * v21) >> 8) + ((6419 * v20) >> 8));
  v27 = v26 + 8708;
  v28 = (v26 + 8708) >> 6;
  if (v26 >= -8708)
    v29 = -1;
  else
    v29 = 0;
  if (v27 < 0x4000)
    v29 = v28;
  a7[1] = v29;
  v30 = v22 + ((33050 * v20) >> 8);
  v31 = v30 - 17685;
  v32 = (v30 - 17685) >> 6;
  if (v30 >= 0x4515)
    v33 = -1;
  else
    v33 = 0;
  if (v31 < 0x4000)
    v33 = v32;
  a7[2] = v33;
  if (a2)
  {
    v34 = (v17 + *v12) >> 1;
    v35 = (v19 + *v11) >> 1;
    v36 = 19077 * *a2;
    v37 = ((26149 * v35) >> 8) + (v36 >> 8);
    v38 = v37 - 14234;
    v39 = (v37 - 14234) >> 6;
    if (v37 >= 0x379A)
      v40 = -1;
    else
      v40 = 0;
    if (v38 < 0x4000)
      v40 = v39;
    *a8 = v40;
    v41 = (v36 >> 8) - (((6419 * v34) >> 8) + ((13320 * v35) >> 8));
    v42 = v41 + 8708;
    v43 = (v41 + 8708) >> 6;
    if (v41 >= -8708)
      v44 = -1;
    else
      v44 = 0;
    if (v42 < 0x4000)
      v44 = v43;
    a8[1] = v44;
    v45 = ((33050 * v34) >> 8) + (v36 >> 8);
    if (v45 >= 0x4515)
      v46 = -1;
    else
      v46 = 0;
    if (v45 - 17685 < 0x4000)
      v46 = (v45 - 17685) >> 6;
    a8[2] = v46;
  }
  v151 = (16 * v16) | 1u;
  if (a9 >= 17)
  {
    v47 = 0;
    v50 = vdupq_n_s16(0x11Au);
    v51 = vdupq_n_s16(0xC866u);
    v52 = vdupq_n_s16(0x2204u);
    v53 = vdupq_n_s16(0xBAEBu);
    if (v16 <= 1)
      v54 = 1;
    else
      v54 = v16;
    do
    {
      v55 = 0;
      v56 = *(uint8x8_t *)(a3 + 1);
      v57 = *(uint8x8_t *)(v12 + 1);
      v58 = (int16x8_t)vaddl_u8(v57, *(uint8x8_t *)a3);
      v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v56);
      v60 = vaddq_s16(v58, v59);
      *(int8x8_t *)v58.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v58, v58)), 3uLL);
      *(int8x8_t *)v59.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v59, v59)), 3uLL);
      *(uint8x8_t *)v60.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v59.i8);
      v61 = vrhadd_u8(v56, *(uint8x8_t *)v58.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v58.i8);
      v161.val[1] = (int8x8_t)vrhadd_u8(v57, *(uint8x8_t *)v59.i8);
      vst2_s8((char *)&v154, (int8x8x2_t)v60);
      vst2_s8((char *)&v156, v161);
      v161.val[1] = *(int8x8_t *)(v13 + 1);
      v62 = *(uint8x8_t *)(v11 + 1);
      v63 = (int16x8_t)vaddl_u8(v62, *(uint8x8_t *)v13);
      v64 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v161.val[1]);
      v65 = vaddq_s16(v63, v64);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v63, v63)), 3uLL);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v64, v64)), 3uLL);
      *(uint8x8_t *)v65.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v64.i8);
      v66 = vrhadd_u8((uint8x8_t)v161.val[1], *(uint8x8_t *)v63.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v63.i8);
      v48 = (char *)&v155;
      vst2_s8(v48, (int8x8x2_t)v65);
      v161.val[1] = (int8x8_t)vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v49 = v157;
      vst2_s8(v49, v161);
      v67 = 1;
      v68 = (16 * v47) | 1;
      do
      {
        v69 = v67;
        v70 = 3 * (v55 | v68);
        v71 = *(uint8x8_t *)&a1[v68 + v55];
        v72 = (uint8x8_t *)((char *)&v154 + v55);
        v73 = (int16x8_t)vshll_n_u8(*v72, 7uLL);
        v74 = (int16x8_t)vshll_n_u8(v72[2], 7uLL);
        v75 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v71, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v162.val[0] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v75, v51)), 6uLL);
        v162.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v75, v52), vqaddq_s16(vqdmulhq_lane_s16(v73, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v162.val[2] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v73, v50), vqaddq_s16(v75, v53)), v73), 6uLL);
        v76 = &a7[v70 & 0xFFFFFFFB];
        vst3_s8(v76, v162);
        v55 = 8;
        v67 = 0;
      }
      while ((v69 & 1) != 0);
      if (a2)
      {
        v77 = 0;
        v78 = 1;
        do
        {
          v79 = v78;
          v80 = 3 * (v77 | v68);
          v81 = *(uint8x8_t *)&a2[v68 + v77];
          v82 = (uint8x8_t *)&v157[v77 - 16];
          v83 = (int16x8_t)vshll_n_u8(*v82, 7uLL);
          v84 = (int16x8_t)vshll_n_u8(v82[2], 7uLL);
          v85 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v81, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v163.val[0] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v85, v51)), 6uLL);
          v163.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v85, v52), vqaddq_s16(vqdmulhq_lane_s16(v83, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v163.val[2] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v83, v50), vqaddq_s16(v85, v53)), v83), 6uLL);
          v86 = &a8[v80 & 0xFFFFFFFB];
          vst3_s8(v86, v163);
          v77 = 8;
          v78 = 0;
        }
        while ((v79 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v47;
    }
    while (v47 != v54);
  }
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v87 = 9 - (int)v150;
  memset((char *)v153 + (int)v150, v153[0].u8[(_QWORD)(v150 - 1)], v87);
  memset((char *)v152 + (int)v150, v152[0].u8[(_QWORD)(v150 - 1)], v87);
  v88 = *(uint8x8_t *)((char *)v152 + 1);
  v89 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  v90 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  v91 = vaddq_s16(v89, v90);
  *(int8x8_t *)v89.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v89, v89)), 3uLL);
  *(int8x8_t *)v90.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v90, v90)), 3uLL);
  *(uint8x8_t *)v91.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v90.i8);
  v92 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v89.i8);
  v159.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v89.i8);
  v93 = (char *)&v154;
  vst2_s8(v93, (int8x8x2_t)v91);
  v159.val[1] = (int8x8_t)vrhadd_u8(v88, *(uint8x8_t *)v90.i8);
  v95 = (char *)&v156;
  vst2_s8(v95, v159);
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v153 + (int)v150, v153[0].u8[(_QWORD)(v150 - 1)], v87);
  result = (uint64_t)memset((char *)v152 + (int)v150, v152[0].u8[(_QWORD)(v150 - 1)], v87);
  v97 = *(uint8x8_t *)((char *)v152 + 1);
  v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  v99 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v99.i8);
  v101 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v98.i8);
  v160.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v98.i8);
  v94 = (char *)&v155;
  vst2_s8(v94, (int8x8x2_t)v100);
  v160.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  v102 = v157;
  vst2_s8(v102, v160);
  v103 = (a9 - v151);
  if ((int)v103 >= 1)
  {
    v104 = &a1[(int)v151];
    v105 = 16 * v16;
    v106 = (unsigned __int8 *)&v155;
    v107 = &a7[48 * v16 + 5];
    result = 255;
    v108 = (a9 - v151);
    do
    {
      v110 = *v104++;
      v109 = v110;
      v111 = *(v106 - 16);
      v113 = *v106++;
      v112 = v113;
      v114 = 19077 * v109;
      v115 = ((26149 * v113) >> 8) + (v114 >> 8);
      v116 = v115 - 14234;
      v117 = (v115 - 14234) >> 6;
      if (v115 >= 0x379A)
        v118 = -1;
      else
        v118 = 0;
      if (v116 < 0x4000)
        v118 = v117;
      *(v107 - 2) = v118;
      v119 = (v114 >> 8) - (((6419 * v111) >> 8) + ((13320 * v112) >> 8));
      v120 = v119 + 8708;
      v121 = (v119 + 8708) >> 6;
      if (v119 >= -8708)
        v122 = -1;
      else
        v122 = 0;
      if (v120 < 0x4000)
        v122 = v121;
      *(v107 - 1) = v122;
      v123 = ((33050 * v111) >> 8) + (v114 >> 8);
      v124 = v123 - 17685;
      v125 = (v123 - 17685) >> 6;
      if (v123 >= 0x4515)
        v126 = -1;
      else
        v126 = 0;
      if (v124 < 0x4000)
        v126 = v125;
      *v107 = v126;
      v107 += 3;
      --v108;
    }
    while (v108);
    if (a2)
    {
      v127 = 3 * v105;
      v128 = &a2[(int)v151];
      v129 = v157;
      v130 = &a8[v127 + 5];
      result = 13320;
      do
      {
        v132 = *v128++;
        v131 = v132;
        v133 = *(v129 - 16);
        v135 = *v129++;
        v134 = v135;
        v136 = 19077 * v131;
        v137 = ((26149 * v135) >> 8) + (v136 >> 8);
        v138 = v137 - 14234;
        v139 = (v137 - 14234) >> 6;
        if (v137 >= 0x379A)
          v140 = -1;
        else
          v140 = 0;
        if (v138 < 0x4000)
          v140 = v139;
        *(v130 - 2) = v140;
        v141 = (v136 >> 8) - (((6419 * v133) >> 8) + ((13320 * v134) >> 8));
        v142 = v141 + 8708;
        v143 = (v141 + 8708) >> 6;
        if (v141 >= -8708)
          v144 = -1;
        else
          v144 = 0;
        if (v142 < 0x4000)
          v144 = v143;
        *(v130 - 1) = v144;
        v145 = ((33050 * v133) >> 8) + (v136 >> 8);
        v146 = v145 - 17685;
        v147 = (v145 - 17685) >> 6;
        if (v145 >= 0x4515)
          v148 = -1;
        else
          v148 = 0;
        if (v146 < 0x4000)
          v148 = v147;
        *v130 = v148;
        v130 += 3;
        --v103;
      }
      while (v103);
    }
  }
  return result;
}

uint64_t UpsampleBgrLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, char *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  signed int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8x8_t v56;
  uint8x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  uint8x8_t v66;
  char v67;
  uint64_t v68;
  char v69;
  int v70;
  uint8x8_t v71;
  uint8x8_t *v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  char *v76;
  uint64_t v77;
  char v78;
  char v79;
  int v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  char *v86;
  size_t v87;
  uint8x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint8x8_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t result;
  uint8x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  uint8x8_t v101;
  char *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  unsigned __int8 *v106;
  char *v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  signed int v119;
  unsigned int v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  char v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  char *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  char v140;
  signed int v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  char v148;
  unsigned __int8 *v150;
  uint64_t v151;
  uint8x8_t v152[2];
  uint8x8_t v153[2];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  _BYTE v157[32];
  uint64_t v158;
  int8x8x2_t v159;
  int8x8x2_t v160;
  int8x8x2_t v161;
  int8x8x3_t v162;
  int8x8x3_t v163;

  v158 = *MEMORY[0x1E0C80C00];
  v156 = 0u;
  memset(v157, 0, 31);
  v154 = 0u;
  v155 = 0u;
  if (!a1)
    UpsampleBgrLinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v15 = (uint64_t)(a9 + 1) >> 1;
  v16 = ((int)v15 - 1) >> 3;
  v150 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  LODWORD(v15) = *a3;
  v17 = ((*a5 + v15) >> 1) + 1;
  v18 = *a4;
  v19 = ((*a6 + v18) >> 1) + 1;
  v20 = (v17 + v15) >> 1;
  v21 = (v19 + v18) >> 1;
  v22 = (19077 * *a1) >> 8;
  v23 = v22 + ((33050 * v20) >> 8);
  if (v23 >= 0x4515)
    v24 = -1;
  else
    v24 = 0;
  if (v23 - 17685 >= 0x4000)
    v25 = v24;
  else
    v25 = (v23 - 17685) >> 6;
  *a7 = v25;
  v26 = v22 - (((13320 * v21) >> 8) + ((6419 * v20) >> 8));
  v27 = v26 + 8708;
  v28 = (v26 + 8708) >> 6;
  if (v26 >= -8708)
    v29 = -1;
  else
    v29 = 0;
  if (v27 < 0x4000)
    v29 = v28;
  a7[1] = v29;
  v30 = v22 + ((26149 * v21) >> 8);
  v31 = v30 - 14234;
  v32 = (v30 - 14234) >> 6;
  if (v30 >= 0x379A)
    v33 = -1;
  else
    v33 = 0;
  if (v31 < 0x4000)
    v33 = v32;
  a7[2] = v33;
  if (a2)
  {
    v34 = (v17 + *v12) >> 1;
    v35 = (v19 + *v11) >> 1;
    v36 = 19077 * *a2;
    v37 = ((33050 * v34) >> 8) + (v36 >> 8);
    v38 = v37 - 17685;
    v39 = (v37 - 17685) >> 6;
    if (v37 >= 0x4515)
      v40 = -1;
    else
      v40 = 0;
    if (v38 < 0x4000)
      v40 = v39;
    *a8 = v40;
    v41 = (v36 >> 8) - (((6419 * v34) >> 8) + ((13320 * v35) >> 8));
    v42 = v41 + 8708;
    v43 = (v41 + 8708) >> 6;
    if (v41 >= -8708)
      v44 = -1;
    else
      v44 = 0;
    if (v42 < 0x4000)
      v44 = v43;
    a8[1] = v44;
    v45 = ((26149 * v35) >> 8) + (v36 >> 8);
    if (v45 >= 0x379A)
      v46 = -1;
    else
      v46 = 0;
    if (v45 - 14234 < 0x4000)
      v46 = (v45 - 14234) >> 6;
    a8[2] = v46;
  }
  v151 = (16 * v16) | 1u;
  if (a9 >= 17)
  {
    v47 = 0;
    v50 = vdupq_n_s16(0x11Au);
    v51 = vdupq_n_s16(0xC866u);
    v52 = vdupq_n_s16(0x2204u);
    v53 = vdupq_n_s16(0xBAEBu);
    if (v16 <= 1)
      v54 = 1;
    else
      v54 = v16;
    do
    {
      v55 = 0;
      v56 = *(uint8x8_t *)(a3 + 1);
      v57 = *(uint8x8_t *)(v12 + 1);
      v58 = (int16x8_t)vaddl_u8(v57, *(uint8x8_t *)a3);
      v59 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v56);
      v60 = vaddq_s16(v58, v59);
      *(int8x8_t *)v58.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v58, v58)), 3uLL);
      *(int8x8_t *)v59.i8 = vshrn_n_s16(vaddq_s16(v60, vaddq_s16(v59, v59)), 3uLL);
      *(uint8x8_t *)v60.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v59.i8);
      v61 = vrhadd_u8(v56, *(uint8x8_t *)v58.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v58.i8);
      v161.val[1] = (int8x8_t)vrhadd_u8(v57, *(uint8x8_t *)v59.i8);
      vst2_s8((char *)&v154, (int8x8x2_t)v60);
      vst2_s8((char *)&v156, v161);
      v161.val[1] = *(int8x8_t *)(v13 + 1);
      v62 = *(uint8x8_t *)(v11 + 1);
      v63 = (int16x8_t)vaddl_u8(v62, *(uint8x8_t *)v13);
      v64 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v161.val[1]);
      v65 = vaddq_s16(v63, v64);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v63, v63)), 3uLL);
      *(int8x8_t *)v64.i8 = vshrn_n_s16(vaddq_s16(v65, vaddq_s16(v64, v64)), 3uLL);
      *(uint8x8_t *)v65.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v64.i8);
      v66 = vrhadd_u8((uint8x8_t)v161.val[1], *(uint8x8_t *)v63.i8);
      v161.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v63.i8);
      v48 = (char *)&v155;
      vst2_s8(v48, (int8x8x2_t)v65);
      v161.val[1] = (int8x8_t)vrhadd_u8(v62, *(uint8x8_t *)v64.i8);
      v49 = v157;
      vst2_s8(v49, v161);
      v67 = 1;
      v68 = (16 * v47) | 1;
      do
      {
        v69 = v67;
        v70 = 3 * (v55 | v68);
        v71 = *(uint8x8_t *)&a1[v68 + v55];
        v72 = (uint8x8_t *)((char *)&v154 + v55);
        v73 = (int16x8_t)vshll_n_u8(*v72, 7uLL);
        v74 = (int16x8_t)vshll_n_u8(v72[2], 7uLL);
        v75 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v71, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v162.val[2] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v75, v51)), 6uLL);
        v162.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v75, v52), vqaddq_s16(vqdmulhq_lane_s16(v73, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v74, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v162.val[0] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v73, v50), vqaddq_s16(v75, v53)), v73), 6uLL);
        v76 = &a7[v70 & 0xFFFFFFFB];
        vst3_s8(v76, v162);
        v55 = 8;
        v67 = 0;
      }
      while ((v69 & 1) != 0);
      if (a2)
      {
        v77 = 0;
        v78 = 1;
        do
        {
          v79 = v78;
          v80 = 3 * (v77 | v68);
          v81 = *(uint8x8_t *)&a2[v68 + v77];
          v82 = (uint8x8_t *)&v157[v77 - 16];
          v83 = (int16x8_t)vshll_n_u8(*v82, 7uLL);
          v84 = (int16x8_t)vshll_n_u8(v82[2], 7uLL);
          v85 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v81, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v163.val[2] = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v85, v51)), 6uLL);
          v163.val[1] = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v85, v52), vqaddq_s16(vqdmulhq_lane_s16(v83, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v84, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v163.val[0] = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v83, v50), vqaddq_s16(v85, v53)), v83), 6uLL);
          v86 = &a8[v80 & 0xFFFFFFFB];
          vst3_s8(v86, v163);
          v77 = 8;
          v78 = 0;
        }
        while ((v79 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v47;
    }
    while (v47 != v54);
  }
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v87 = 9 - (int)v150;
  memset((char *)v153 + (int)v150, v153[0].u8[(_QWORD)(v150 - 1)], v87);
  memset((char *)v152 + (int)v150, v152[0].u8[(_QWORD)(v150 - 1)], v87);
  v88 = *(uint8x8_t *)((char *)v152 + 1);
  v89 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  v90 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  v91 = vaddq_s16(v89, v90);
  *(int8x8_t *)v89.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v89, v89)), 3uLL);
  *(int8x8_t *)v90.i8 = vshrn_n_s16(vaddq_s16(v91, vaddq_s16(v90, v90)), 3uLL);
  *(uint8x8_t *)v91.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v90.i8);
  v92 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v89.i8);
  v159.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v89.i8);
  v93 = (char *)&v154;
  vst2_s8(v93, (int8x8x2_t)v91);
  v159.val[1] = (int8x8_t)vrhadd_u8(v88, *(uint8x8_t *)v90.i8);
  v95 = (char *)&v156;
  vst2_s8(v95, v159);
  memset(v153, 0, 9);
  memset(v152, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v153 + (int)v150, v153[0].u8[(_QWORD)(v150 - 1)], v87);
  result = (uint64_t)memset((char *)v152 + (int)v150, v152[0].u8[(_QWORD)(v150 - 1)], v87);
  v97 = *(uint8x8_t *)((char *)v152 + 1);
  v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v152 + 1), v153[0]);
  v99 = (int16x8_t)vaddl_u8(v152[0], *(uint8x8_t *)((char *)v153 + 1));
  v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v153[0], *(uint8x8_t *)v99.i8);
  v101 = vrhadd_u8(*(uint8x8_t *)((char *)v153 + 1), *(uint8x8_t *)v98.i8);
  v160.val[0] = (int8x8_t)vrhadd_u8(v152[0], *(uint8x8_t *)v98.i8);
  v94 = (char *)&v155;
  vst2_s8(v94, (int8x8x2_t)v100);
  v160.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  v102 = v157;
  vst2_s8(v102, v160);
  v103 = (a9 - v151);
  if ((int)v103 >= 1)
  {
    v104 = &a1[(int)v151];
    v105 = 16 * v16;
    v106 = (unsigned __int8 *)&v155;
    v107 = &a7[48 * v16 + 5];
    result = 255;
    v108 = (a9 - v151);
    do
    {
      v110 = *v104++;
      v109 = v110;
      v111 = *(v106 - 16);
      v113 = *v106++;
      v112 = v113;
      v114 = 19077 * v109;
      v115 = ((33050 * v111) >> 8) + (v114 >> 8);
      v116 = v115 - 17685;
      v117 = (v115 - 17685) >> 6;
      if (v115 >= 0x4515)
        v118 = -1;
      else
        v118 = 0;
      if (v116 < 0x4000)
        v118 = v117;
      *(v107 - 2) = v118;
      v119 = (v114 >> 8) - (((6419 * v111) >> 8) + ((13320 * v112) >> 8));
      v120 = v119 + 8708;
      v121 = (v119 + 8708) >> 6;
      if (v119 >= -8708)
        v122 = -1;
      else
        v122 = 0;
      if (v120 < 0x4000)
        v122 = v121;
      *(v107 - 1) = v122;
      v123 = ((26149 * v112) >> 8) + (v114 >> 8);
      v124 = v123 - 14234;
      v125 = (v123 - 14234) >> 6;
      if (v123 >= 0x379A)
        v126 = -1;
      else
        v126 = 0;
      if (v124 < 0x4000)
        v126 = v125;
      *v107 = v126;
      v107 += 3;
      --v108;
    }
    while (v108);
    if (a2)
    {
      v127 = 3 * v105;
      v128 = &a2[(int)v151];
      v129 = v157;
      v130 = &a8[v127 + 5];
      result = 13320;
      do
      {
        v132 = *v128++;
        v131 = v132;
        v133 = *(v129 - 16);
        v135 = *v129++;
        v134 = v135;
        v136 = 19077 * v131;
        v137 = ((33050 * v133) >> 8) + (v136 >> 8);
        v138 = v137 - 17685;
        v139 = (v137 - 17685) >> 6;
        if (v137 >= 0x4515)
          v140 = -1;
        else
          v140 = 0;
        if (v138 < 0x4000)
          v140 = v139;
        *(v130 - 2) = v140;
        v141 = (v136 >> 8) - (((6419 * v133) >> 8) + ((13320 * v134) >> 8));
        v142 = v141 + 8708;
        v143 = (v141 + 8708) >> 6;
        if (v141 >= -8708)
          v144 = -1;
        else
          v144 = 0;
        if (v142 < 0x4000)
          v144 = v143;
        *(v130 - 1) = v144;
        v145 = ((26149 * v134) >> 8) + (v136 >> 8);
        v146 = v145 - 14234;
        v147 = (v145 - 14234) >> 6;
        if (v145 >= 0x379A)
          v148 = -1;
        else
          v148 = 0;
        if (v146 < 0x4000)
          v148 = v147;
        *v130 = v148;
        v130 += 3;
        --v103;
      }
      while (v103);
    }
  }
  return result;
}

uint64_t UpsampleArgbLinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, _BYTE *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  signed int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  char v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8x8_t v63;
  uint8x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  uint8x8_t v68;
  uint8x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  uint8x8_t v73;
  char v74;
  uint64_t v75;
  int v76;
  uint8x8_t v77;
  uint8x8_t *v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int8x8_t v82;
  int8x8_t v83;
  int8x8_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  int v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int8x8_t v96;
  char *v97;
  size_t v98;
  uint8x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  uint8x8_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t result;
  uint8x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint8x8_t v112;
  char *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  _BYTE *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  char v129;
  signed int v130;
  unsigned int v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  char v137;
  unsigned __int8 *v138;
  int v139;
  unsigned __int8 *v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  _BYTE *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  char v151;
  signed int v152;
  unsigned int v153;
  unsigned int v154;
  char v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  uint8x8_t v164[2];
  uint8x8_t v165[2];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _BYTE v169[32];
  uint64_t v170;
  int8x8x2_t v171;
  int8x8x2_t v172;
  int8x8x2_t v173;

  v170 = *MEMORY[0x1E0C80C00];
  v168 = 0u;
  memset(v169, 0, 31);
  v166 = 0u;
  v167 = 0u;
  if (!a1)
    UpsampleArgbLinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v16 = (uint64_t)(a9 + 1) >> 1;
  v17 = ((int)v16 - 1) >> 3;
  v161 = (unsigned __int8 *)(v16 - ((v16 - 1) & 0xFFFFFFFFFFFFFFF8));
  v18 = *a3;
  v19 = ((*a5 + v18) >> 1) + 1;
  v20 = *a4;
  v21 = ((*a6 + v20) >> 1) + 1;
  v22 = (v19 + v18) >> 1;
  v23 = (v21 + v20) >> 1;
  v24 = *a1;
  *a7 = -1;
  v25 = (19077 * v24) >> 8;
  v26 = v25 + ((26149 * v23) >> 8);
  v27 = v26 - 14234;
  v28 = (v26 - 14234) >> 6;
  if (v26 >= 0x379A)
    v29 = -1;
  else
    v29 = 0;
  if (v27 < 0x4000)
    v29 = v28;
  a7[1] = v29;
  v30 = v25 - (((13320 * v23) >> 8) + ((6419 * v22) >> 8));
  v31 = v30 + 8708;
  v32 = (v30 + 8708) >> 6;
  if (v30 >= -8708)
    v33 = -1;
  else
    v33 = 0;
  if (v31 < 0x4000)
    v33 = v32;
  a7[2] = v33;
  v34 = v25 + ((33050 * v22) >> 8);
  v35 = v34 - 17685;
  v36 = (v34 - 17685) >> 6;
  if (v34 >= 0x4515)
    v37 = -1;
  else
    v37 = 0;
  if (v35 < 0x4000)
    v37 = v36;
  a7[3] = v37;
  if (a2)
  {
    v38 = (v19 + *v12) >> 1;
    v39 = (v21 + *v11) >> 1;
    v40 = *a2;
    *a8 = -1;
    v41 = 19077 * v40;
    v42 = ((26149 * v39) >> 8) + ((19077 * v40) >> 8);
    v43 = v42 - 14234;
    v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A)
      v45 = -1;
    else
      v45 = 0;
    if (v43 < 0x4000)
      v45 = v44;
    a8[1] = v45;
    v46 = (v41 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    v47 = v46 + 8708;
    v48 = (v46 + 8708) >> 6;
    if (v46 >= -8708)
      v49 = -1;
    else
      v49 = 0;
    if (v47 < 0x4000)
      v49 = v48;
    a8[2] = v49;
    v50 = ((33050 * v38) >> 8) + (v41 >> 8);
    if (v50 >= 0x4515)
      v51 = -1;
    else
      v51 = 0;
    if (v50 - 17685 < 0x4000)
      v51 = (v50 - 17685) >> 6;
    a8[3] = v51;
  }
  v162 = (16 * v17) | 1;
  if (a9 >= 17)
  {
    v52 = 0;
    v55 = vdupq_n_s16(0x11Au);
    v56 = vdupq_n_s16(0xC866u);
    v57 = vdupq_n_s16(0x2204u);
    v58 = vdupq_n_s16(0xBAEBu);
    if (v17 <= 1)
      v59 = 1;
    else
      v59 = v17;
    v60 = -1;
    v61 = -1;
    do
    {
      v62 = 0;
      v63 = *(uint8x8_t *)(a3 + 1);
      v64 = *(uint8x8_t *)(v12 + 1);
      v65 = (int16x8_t)vaddl_u8(v64, *(uint8x8_t *)a3);
      v66 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v63);
      v67 = vaddq_s16(v65, v66);
      *(int8x8_t *)v65.i8 = vshrn_n_s16(vaddq_s16(v67, vaddq_s16(v65, v65)), 3uLL);
      *(int8x8_t *)v66.i8 = vshrn_n_s16(vaddq_s16(v67, vaddq_s16(v66, v66)), 3uLL);
      *(uint8x8_t *)v67.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v66.i8);
      v68 = vrhadd_u8(v63, *(uint8x8_t *)v65.i8);
      v173.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v65.i8);
      v173.val[1] = (int8x8_t)vrhadd_u8(v64, *(uint8x8_t *)v66.i8);
      vst2_s8((char *)&v166, (int8x8x2_t)v67);
      vst2_s8((char *)&v168, v173);
      v173.val[1] = *(int8x8_t *)(v13 + 1);
      v69 = *(uint8x8_t *)(v11 + 1);
      v70 = (int16x8_t)vaddl_u8(v69, *(uint8x8_t *)v13);
      v71 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v173.val[1]);
      v72 = vaddq_s16(v70, v71);
      *(int8x8_t *)v70.i8 = vshrn_n_s16(vaddq_s16(v72, vaddq_s16(v70, v70)), 3uLL);
      *(int8x8_t *)v71.i8 = vshrn_n_s16(vaddq_s16(v72, vaddq_s16(v71, v71)), 3uLL);
      *(uint8x8_t *)v72.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v71.i8);
      v73 = vrhadd_u8((uint8x8_t)v173.val[1], *(uint8x8_t *)v70.i8);
      v173.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v70.i8);
      v53 = (char *)&v167;
      vst2_s8(v53, (int8x8x2_t)v72);
      v173.val[1] = (int8x8_t)vrhadd_u8(v69, *(uint8x8_t *)v71.i8);
      v54 = v169;
      vst2_s8(v54, v173);
      v74 = 1;
      v75 = (16 * v52) | 1;
      do
      {
        v76 = 4 * (v62 | v75);
        v77 = *(uint8x8_t *)&a1[v75 + v62];
        v78 = (uint8x8_t *)((char *)&v166 + v62);
        v79 = (int16x8_t)vshll_n_u8(*v78, 7uLL);
        v80 = (int16x8_t)vshll_n_u8(v78[2], 7uLL);
        v81 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v77, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v82 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v80, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v81, v56)), 6uLL);
        v83 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v81, v57), vqaddq_s16(vqdmulhq_lane_s16(v79, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v80, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
        v84 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v79, v55), vqaddq_s16(v81, v58)), v79), 6uLL);
        v85 = &a7[v76 & 0xFFFFFFE4];
        vst4_s8(v85, *(int8x8x4_t *)&v61);
        LOBYTE(v76) = v74;
        v62 = 8;
        v74 = 0;
      }
      while ((v76 & 1) != 0);
      if (a2)
      {
        v86 = 0;
        v87 = 1;
        do
        {
          v88 = 4 * (v86 | v75);
          v89 = *(uint8x8_t *)&a2[v75 + v86];
          v90 = (uint8x8_t *)&v169[v86 - 16];
          v91 = (int16x8_t)vshll_n_u8(*v90, 7uLL);
          v92 = (int16x8_t)vshll_n_u8(v90[2], 7uLL);
          v93 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v89, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v94 = vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v92, (int16x4_t)0x3408191366254A85, 1), vqaddq_s16(v93, v56)), 6uLL);
          v95 = vqshrun_n_s16(vqsubq_s16(vqaddq_s16(v93, v57), vqaddq_s16(vqdmulhq_lane_s16(v91, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v92, (int16x4_t)0x3408191366254A85, 3))), 6uLL);
          v96 = vqshrun_n_s16(vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v91, v55), vqaddq_s16(v93, v58)), v91), 6uLL);
          v97 = &a8[v88 & 0xFFFFFFE4];
          vst4_s8(v97, *(int8x8x4_t *)&v60);
          LOBYTE(v88) = v87;
          v86 = 8;
          v87 = 0;
        }
        while ((v88 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v52;
    }
    while (v52 != v59);
  }
  v160 = a1;
  v163 = v17;
  memset(v165, 0, 9);
  memset(v164, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v98 = 9 - (int)v161;
  memset((char *)v165 + (int)v161, v165[0].u8[(_QWORD)(v161 - 1)], v98);
  memset((char *)v164 + (int)v161, v164[0].u8[(_QWORD)(v161 - 1)], v98);
  v99 = *(uint8x8_t *)((char *)v164 + 1);
  v100 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v164 + 1), v165[0]);
  v101 = (int16x8_t)vaddl_u8(v164[0], *(uint8x8_t *)((char *)v165 + 1));
  v102 = vaddq_s16(v100, v101);
  *(int8x8_t *)v100.i8 = vshrn_n_s16(vaddq_s16(v102, vaddq_s16(v100, v100)), 3uLL);
  *(int8x8_t *)v101.i8 = vshrn_n_s16(vaddq_s16(v102, vaddq_s16(v101, v101)), 3uLL);
  *(uint8x8_t *)v102.i8 = vrhadd_u8(v165[0], *(uint8x8_t *)v101.i8);
  v103 = vrhadd_u8(*(uint8x8_t *)((char *)v165 + 1), *(uint8x8_t *)v100.i8);
  v171.val[0] = (int8x8_t)vrhadd_u8(v164[0], *(uint8x8_t *)v100.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, (int8x8x2_t)v102);
  v171.val[1] = (int8x8_t)vrhadd_u8(v99, *(uint8x8_t *)v101.i8);
  v106 = (char *)&v168;
  vst2_s8(v106, v171);
  memset(v165, 0, 9);
  memset(v164, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v165 + (int)v161, v165[0].u8[(_QWORD)(v161 - 1)], v98);
  result = (uint64_t)memset((char *)v164 + (int)v161, v164[0].u8[(_QWORD)(v161 - 1)], v98);
  v108 = *(uint8x8_t *)((char *)v164 + 1);
  v109 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v164 + 1), v165[0]);
  v110 = (int16x8_t)vaddl_u8(v164[0], *(uint8x8_t *)((char *)v165 + 1));
  v111 = vaddq_s16(v109, v110);
  *(int8x8_t *)v109.i8 = vshrn_n_s16(vaddq_s16(v111, vaddq_s16(v109, v109)), 3uLL);
  *(int8x8_t *)v110.i8 = vshrn_n_s16(vaddq_s16(v111, vaddq_s16(v110, v110)), 3uLL);
  *(uint8x8_t *)v111.i8 = vrhadd_u8(v165[0], *(uint8x8_t *)v110.i8);
  v112 = vrhadd_u8(*(uint8x8_t *)((char *)v165 + 1), *(uint8x8_t *)v109.i8);
  v172.val[0] = (int8x8_t)vrhadd_u8(v164[0], *(uint8x8_t *)v109.i8);
  v105 = (char *)&v167;
  vst2_s8(v105, (int8x8x2_t)v111);
  v172.val[1] = (int8x8_t)vrhadd_u8(v108, *(uint8x8_t *)v110.i8);
  v113 = v169;
  vst2_s8(v113, v172);
  v114 = (a9 - v162);
  if ((int)v114 >= 1)
  {
    v115 = (unsigned __int8 *)&v167;
    result = 8708;
    v116 = &v160[v162];
    v117 = (a9 - v162);
    v118 = (v163 << 6) | 4;
    do
    {
      v120 = *v116++;
      v119 = v120;
      v121 = *(v115 - 16);
      v123 = *v115++;
      v122 = v123;
      v124 = &a7[v118];
      *v124 = -1;
      v125 = 19077 * v119;
      v126 = ((26149 * v123) >> 8) + (v125 >> 8);
      v127 = v126 - 14234;
      v128 = (v126 - 14234) >> 6;
      if (v126 >= 0x379A)
        v129 = -1;
      else
        v129 = 0;
      if (v127 >= 0x4000)
        LOBYTE(v128) = v129;
      v124[1] = v128;
      v130 = (v125 >> 8) - (((6419 * v121) >> 8) + ((13320 * v122) >> 8));
      v131 = v130 + 8708;
      v132 = (v130 + 8708) >> 6;
      if (v130 >= -8708)
        v133 = -1;
      else
        v133 = 0;
      if (v131 < 0x4000)
        v133 = v132;
      v124[2] = v133;
      v134 = ((33050 * v121) >> 8) + (v125 >> 8);
      v135 = v134 - 17685;
      v136 = (v134 - 17685) >> 6;
      if (v134 >= 0x4515)
        v137 = -1;
      else
        v137 = 0;
      if (v135 < 0x4000)
        v137 = v136;
      v124[3] = v137;
      v118 += 4;
      --v117;
    }
    while (v117);
    if (a2)
    {
      v138 = v169;
      v139 = (v163 << 6) | 4;
      v140 = &a2[v162];
      result = 13320;
      do
      {
        v142 = *v140++;
        v141 = v142;
        v143 = *(v138 - 16);
        v145 = *v138++;
        v144 = v145;
        v146 = &a8[v139];
        *v146 = -1;
        v147 = 19077 * v141;
        v148 = ((26149 * v145) >> 8) + (v147 >> 8);
        v149 = v148 - 14234;
        v150 = (v148 - 14234) >> 6;
        if (v148 >= 0x379A)
          v151 = -1;
        else
          v151 = 0;
        if (v149 < 0x4000)
          v151 = v150;
        v146[1] = v151;
        v152 = (v147 >> 8) - (((6419 * v143) >> 8) + ((13320 * v144) >> 8));
        v153 = v152 + 8708;
        v154 = (v152 + 8708) >> 6;
        if (v152 >= -8708)
          v155 = -1;
        else
          v155 = 0;
        if (v153 < 0x4000)
          v155 = v154;
        v146[2] = v155;
        v156 = ((33050 * v143) >> 8) + (v147 >> 8);
        v157 = v156 - 17685;
        v158 = (v156 - 17685) >> 6;
        if (v156 >= 0x4515)
          v159 = -1;
        else
          v159 = 0;
        if (v157 < 0x4000)
          v159 = v158;
        v146[3] = v159;
        v139 += 4;
        --v114;
      }
      while (v114);
    }
  }
  return result;
}

uint64_t UpsampleRgb565LinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, _BYTE *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  char v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  signed int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint8x8_t v64;
  uint8x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  uint8x8_t v69;
  char v70;
  uint64_t v71;
  char v72;
  int v73;
  uint8x8_t v74;
  uint8x8_t *v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  uint64_t v83;
  char v84;
  char v85;
  int v86;
  uint8x8_t v87;
  uint8x8_t *v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  size_t v96;
  uint8x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  uint8x8_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t result;
  uint8x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  uint8x8_t v110;
  char *v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  _BYTE *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  char v127;
  signed int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  char v135;
  unsigned __int8 *v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _BYTE *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  char v149;
  signed int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  char v157;
  int v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint8x8_t v162[2];
  uint8x8_t v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _BYTE v167[32];
  uint64_t v168;
  int8x8x2_t v169;
  int8x8x2_t v170;
  int8x8x2_t v171;

  v168 = *MEMORY[0x1E0C80C00];
  v166 = 0u;
  memset(v167, 0, 31);
  v164 = 0u;
  v165 = 0u;
  if (!a1)
    UpsampleRgb565LinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v15 = (uint64_t)(a9 + 1) >> 1;
  v16 = v15 - 1;
  v160 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  v17 = *a3;
  v18 = ((*a5 + v17) >> 1) + 1;
  v19 = *a4;
  v20 = ((*a6 + v19) >> 1) + 1;
  v21 = (v18 + v17) >> 1;
  v22 = (v20 + v19) >> 1;
  v23 = (19077 * *a1) >> 8;
  v24 = v23 + ((26149 * v22) >> 8);
  if (v24 >= 0x379A)
    v25 = -8;
  else
    v25 = 0;
  if (v24 - 14234 >= 0x4000)
    v26 = v25;
  else
    v26 = (v24 - 14234) >> 6;
  v27 = v23 - (((13320 * v22) >> 8) + ((6419 * v21) >> 8));
  if (v27 >= -8708)
    v28 = 255;
  else
    v28 = 0;
  if ((v27 + 8708) < 0x4000)
    v28 = (v27 + 8708) >> 6;
  v29 = v23 + ((33050 * v21) >> 8);
  v30 = v29 - 17685;
  if (v29 >= 0x4515)
    v31 = 31;
  else
    v31 = 0;
  v32 = v30 >= 0x4000;
  v33 = v30 >> 9;
  if (v32)
    LOBYTE(v33) = v31;
  *a7 = v26 & 0xF8 | (v28 >> 5);
  v34 = v16 >> 3;
  a7[1] = (8 * v28) & 0xE0 | v33;
  if (a2)
  {
    v35 = (v18 + *a5) >> 1;
    v36 = (v20 + *v11) >> 1;
    v37 = 19077 * *a2;
    v38 = ((26149 * v36) >> 8) + (v37 >> 8);
    v39 = v38 - 14234;
    v40 = (v38 - 14234) >> 6;
    if (v38 >= 0x379A)
      v41 = -8;
    else
      v41 = 0;
    if (v39 < 0x4000)
      v41 = v40;
    v42 = (v37 >> 8) - (((6419 * v35) >> 8) + ((13320 * v36) >> 8));
    v43 = v42 + 8708;
    v44 = (v42 + 8708) >> 6;
    if (v42 >= -8708)
      v45 = 255;
    else
      v45 = 0;
    if (v43 < 0x4000)
      v45 = v44;
    v46 = ((33050 * v35) >> 8) + (v37 >> 8);
    v47 = v46 - 17685;
    v48 = (v46 - 17685) >> 9;
    if (v46 >= 0x4515)
      v49 = 31;
    else
      v49 = 0;
    if (v47 < 0x4000)
      v49 = v48;
    *a8 = v41 & 0xF8 | (v45 >> 5);
    a8[1] = (8 * v45) & 0xE0 | v49;
  }
  v159 = (16 * v34) | 1;
  if (a9 >= 17)
  {
    v50 = 0;
    v53 = vdupq_n_s16(0x11Au);
    v54 = vdupq_n_s16(0xC866u);
    v55 = vdupq_n_s16(0x2204u);
    v56 = vdupq_n_s16(0xBAEBu);
    if (v34 <= 1)
      v57 = 1;
    else
      v57 = v34;
    do
    {
      v58 = 0;
      v59 = *(uint8x8_t *)(a3 + 1);
      v60 = *(uint8x8_t *)(v12 + 1);
      v61 = (int16x8_t)vaddl_u8(v60, *(uint8x8_t *)a3);
      v62 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v59);
      v63 = vaddq_s16(v61, v62);
      *(int8x8_t *)v61.i8 = vshrn_n_s16(vaddq_s16(v63, vaddq_s16(v61, v61)), 3uLL);
      *(int8x8_t *)v62.i8 = vshrn_n_s16(vaddq_s16(v63, vaddq_s16(v62, v62)), 3uLL);
      *(uint8x8_t *)v63.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v62.i8);
      v64 = vrhadd_u8(v59, *(uint8x8_t *)v61.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v61.i8);
      v171.val[1] = (int8x8_t)vrhadd_u8(v60, *(uint8x8_t *)v62.i8);
      vst2_s8((char *)&v164, (int8x8x2_t)v63);
      vst2_s8((char *)&v166, v171);
      v171.val[1] = *(int8x8_t *)(v13 + 1);
      v65 = *(uint8x8_t *)(v11 + 1);
      v66 = (int16x8_t)vaddl_u8(v65, *(uint8x8_t *)v13);
      v67 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v171.val[1]);
      v68 = vaddq_s16(v66, v67);
      *(int8x8_t *)v66.i8 = vshrn_n_s16(vaddq_s16(v68, vaddq_s16(v66, v66)), 3uLL);
      *(int8x8_t *)v67.i8 = vshrn_n_s16(vaddq_s16(v68, vaddq_s16(v67, v67)), 3uLL);
      *(uint8x8_t *)v68.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v67.i8);
      v69 = vrhadd_u8((uint8x8_t)v171.val[1], *(uint8x8_t *)v66.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v66.i8);
      v51 = (char *)&v165;
      vst2_s8(v51, (int8x8x2_t)v68);
      v171.val[1] = (int8x8_t)vrhadd_u8(v65, *(uint8x8_t *)v67.i8);
      v52 = v167;
      vst2_s8(v52, v171);
      v70 = 1;
      v71 = (16 * v50) | 1;
      do
      {
        v72 = v70;
        v73 = 2 * (v58 | v71);
        v74 = *(uint8x8_t *)&a1[v71 + v58];
        v75 = (uint8x8_t *)((char *)&v164 + v58);
        v76 = (int16x8_t)vshll_n_u8(*v75, 7uLL);
        v77 = (int16x8_t)vshll_n_u8(v75[2], 7uLL);
        v78 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v74, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v79 = vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 1);
        v80 = vqaddq_s16(v78, v54);
        v81 = vqsubq_s16(vqaddq_s16(v78, v55), vqaddq_s16(vqdmulhq_lane_s16(v76, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 3)));
        v82 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v76, v53), vqaddq_s16(v78, v56)), v76);
        *(int8x8_t *)v81.i8 = vqshrun_n_s16(v81, 6uLL);
        *(int8x8_t *)v76.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(v79, v80), 6uLL), *(int8x8_t *)v81.i8, 5uLL);
        *(int8x8_t *)v81.i8 = vsri_n_s8(vshl_n_s8(*(int8x8_t *)v81.i8, 3uLL), vqshrun_n_s16(v82, 6uLL), 3uLL);
        *(int8x16_t *)&a7[v73 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v76, (int8x16_t)v81);
        v58 = 8;
        v70 = 0;
      }
      while ((v72 & 1) != 0);
      if (a2)
      {
        v83 = 0;
        v84 = 1;
        do
        {
          v85 = v84;
          v86 = 2 * (v83 | v71);
          v87 = *(uint8x8_t *)&a2[v71 + v83];
          v88 = (uint8x8_t *)&v167[v83 - 16];
          v89 = (int16x8_t)vshll_n_u8(*v88, 7uLL);
          v90 = (int16x8_t)vshll_n_u8(v88[2], 7uLL);
          v91 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v87, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v92 = vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 1);
          v93 = vqaddq_s16(v91, v54);
          v94 = vqsubq_s16(vqaddq_s16(v91, v55), vqaddq_s16(vqdmulhq_lane_s16(v89, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 3)));
          v95 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v89, v53), vqaddq_s16(v91, v56)), v89);
          *(int8x8_t *)v94.i8 = vqshrun_n_s16(v94, 6uLL);
          *(int8x8_t *)v89.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(v92, v93), 6uLL), *(int8x8_t *)v94.i8, 5uLL);
          *(int8x8_t *)v94.i8 = vsri_n_s8(vshl_n_s8(*(int8x8_t *)v94.i8, 3uLL), vqshrun_n_s16(v95, 6uLL), 3uLL);
          *(int8x16_t *)&a8[v86 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v89, (int8x16_t)v94);
          v83 = 8;
          v84 = 0;
        }
        while ((v85 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v50;
    }
    while (v50 != v57);
  }
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v96 = 9 - (int)v160;
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v96);
  memset((char *)v162 + (int)v160, v162[0].u8[(_QWORD)(v160 - 1)], v96);
  v97 = *(uint8x8_t *)((char *)v162 + 1);
  v98 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  v99 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  v100 = vaddq_s16(v98, v99);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v98, v98)), 3uLL);
  *(int8x8_t *)v99.i8 = vshrn_n_s16(vaddq_s16(v100, vaddq_s16(v99, v99)), 3uLL);
  *(uint8x8_t *)v100.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v99.i8);
  v101 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v98.i8);
  v169.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v98.i8);
  v102 = (char *)&v164;
  vst2_s8(v102, (int8x8x2_t)v100);
  v169.val[1] = (int8x8_t)vrhadd_u8(v97, *(uint8x8_t *)v99.i8);
  v104 = (char *)&v166;
  vst2_s8(v104, v169);
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v96);
  result = (uint64_t)memset((char *)v162 + (int)v160, v162[0].u8[(_QWORD)(v160 - 1)], v96);
  v106 = *(uint8x8_t *)((char *)v162 + 1);
  v107 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  v108 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  v109 = vaddq_s16(v107, v108);
  *(int8x8_t *)v107.i8 = vshrn_n_s16(vaddq_s16(v109, vaddq_s16(v107, v107)), 3uLL);
  *(int8x8_t *)v108.i8 = vshrn_n_s16(vaddq_s16(v109, vaddq_s16(v108, v108)), 3uLL);
  *(uint8x8_t *)v109.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v108.i8);
  v110 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v107.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v107.i8);
  v103 = (char *)&v165;
  vst2_s8(v103, (int8x8x2_t)v109);
  v170.val[1] = (int8x8_t)vrhadd_u8(v106, *(uint8x8_t *)v108.i8);
  v111 = v167;
  vst2_s8(v111, v170);
  v112 = (a9 - v159);
  if ((int)v112 >= 1)
  {
    v161 = a2;
    v113 = (unsigned __int8 *)&v165;
    result = 8708;
    v114 = &a1[v159];
    v115 = (a9 - v159);
    v116 = (32 * v34) | 2;
    do
    {
      v118 = *v114++;
      v117 = v118;
      v119 = *(v113 - 16);
      v121 = *v113++;
      v120 = v121;
      v122 = &a7[v116];
      v123 = 19077 * v117;
      v124 = ((26149 * v121) >> 8) + (v123 >> 8);
      v125 = v124 - 14234;
      v126 = (v124 - 14234) >> 6;
      if (v124 >= 0x379A)
        v127 = -8;
      else
        v127 = 0;
      if (v125 < 0x4000)
        v127 = v126;
      v128 = (v123 >> 8) - (((6419 * v119) >> 8) + ((13320 * v120) >> 8));
      v129 = v128 + 8708;
      v130 = (v128 + 8708) >> 6;
      if (v128 >= -8708)
        v131 = 255;
      else
        v131 = 0;
      if (v129 < 0x4000)
        v131 = v130;
      v132 = ((33050 * v119) >> 8) + (v123 >> 8);
      v133 = v132 - 17685;
      v134 = (v132 - 17685) >> 9;
      if (v132 >= 0x4515)
        v135 = 31;
      else
        v135 = 0;
      if (v133 < 0x4000)
        v135 = v134;
      *v122 = v127 & 0xF8 | (v131 >> 5);
      v122[1] = (8 * v131) & 0xE0 | v135;
      v116 += 2;
      --v115;
    }
    while (v115);
    if (v161)
    {
      v136 = v167;
      v137 = (32 * v34) | 2;
      v138 = &v161[v159];
      result = 13320;
      do
      {
        v140 = *v138++;
        v139 = v140;
        v141 = *(v136 - 16);
        v143 = *v136++;
        v142 = v143;
        v144 = &a8[v137];
        v145 = 19077 * v139;
        v146 = ((26149 * v143) >> 8) + (v145 >> 8);
        v147 = v146 - 14234;
        v148 = (v146 - 14234) >> 6;
        if (v146 >= 0x379A)
          v149 = -8;
        else
          v149 = 0;
        if (v147 < 0x4000)
          v149 = v148;
        v150 = (v145 >> 8) - (((6419 * v141) >> 8) + ((13320 * v142) >> 8));
        v151 = v150 + 8708;
        v152 = (v150 + 8708) >> 6;
        if (v150 >= -8708)
          v153 = 255;
        else
          v153 = 0;
        if (v151 < 0x4000)
          v153 = v152;
        v154 = ((33050 * v141) >> 8) + (v145 >> 8);
        v155 = v154 - 17685;
        v156 = (v154 - 17685) >> 9;
        if (v154 >= 0x4515)
          v157 = 31;
        else
          v157 = 0;
        if (v155 < 0x4000)
          v157 = v156;
        *v144 = v149 & 0xF8 | (v153 >> 5);
        v144[1] = (8 * v153) & 0xE0 | v157;
        v137 += 2;
        --v112;
      }
      while (v112);
    }
  }
  return result;
}

uint64_t UpsampleRgba4444LinePair_NEON(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6, _BYTE *a7, _BYTE *a8, int a9)
{
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  char v26;
  int v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  signed int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8x8_t v60;
  uint8x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x8_t v65;
  uint8x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  uint8x8_t v70;
  char v71;
  uint64_t v72;
  char v73;
  int v74;
  uint8x8_t v75;
  uint8x8_t *v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  uint64_t v83;
  char v84;
  char v85;
  int v86;
  uint8x8_t v87;
  uint8x8_t *v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  size_t v95;
  uint8x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  uint8x8_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t result;
  uint8x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  uint8x8_t v109;
  char *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  _BYTE *v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  char v126;
  signed int v127;
  unsigned int v128;
  unsigned int v129;
  char v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  char v135;
  unsigned __int8 *v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _BYTE *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  char v149;
  signed int v150;
  unsigned int v151;
  unsigned int v152;
  char v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  char v157;
  int v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint8x8_t v162[2];
  uint8x8_t v163[2];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _BYTE v167[32];
  uint64_t v168;
  int8x8x2_t v169;
  int8x8x2_t v170;
  int8x8x2_t v171;

  v168 = *MEMORY[0x1E0C80C00];
  v166 = 0u;
  memset(v167, 0, 31);
  v164 = 0u;
  v165 = 0u;
  if (!a1)
    UpsampleRgba4444LinePair_NEON_cold_1();
  v11 = a6;
  v12 = a5;
  v13 = a4;
  v15 = (uint64_t)(a9 + 1) >> 1;
  v16 = v15 - 1;
  v160 = (unsigned __int8 *)(v15 - ((v15 - 1) & 0xFFFFFFFFFFFFFFF8));
  v17 = *a3;
  v18 = ((*a5 + v17) >> 1) + 1;
  v19 = *a4;
  v20 = ((*a6 + v19) >> 1) + 1;
  v21 = (v18 + v17) >> 1;
  v22 = (v20 + v19) >> 1;
  v23 = (19077 * *a1) >> 8;
  v24 = v23 + ((26149 * v22) >> 8);
  if (v24 >= 0x379A)
    v25 = -16;
  else
    v25 = 0;
  if (v24 - 14234 >= 0x4000)
    v26 = v25;
  else
    v26 = (v24 - 14234) >> 6;
  v27 = v23 - (((13320 * v22) >> 8) + ((6419 * v21) >> 8));
  v28 = (v27 + 8708) >> 10;
  if (v27 >= -8708)
    v29 = 15;
  else
    v29 = 0;
  if ((v27 + 8708) >= 0x4000)
    LOBYTE(v28) = v29;
  v30 = v23 + ((33050 * v21) >> 8);
  v31 = v30 >= 0x4515;
  v32 = v30 - 17685;
  *a7 = v26 & 0xF0 | v28;
  if (v31)
    v33 = -16;
  else
    v33 = 0;
  v31 = v32 >= 0x4000;
  v34 = v32 >> 6;
  if (!v31)
    v33 = v34;
  v35 = v16 >> 3;
  a7[1] = v33 | 0xF;
  if (a2)
  {
    v36 = (v18 + *a5) >> 1;
    v37 = (v20 + *v11) >> 1;
    v38 = 19077 * *a2;
    v39 = ((26149 * v37) >> 8) + (v38 >> 8);
    v40 = v39 - 14234;
    v41 = (v39 - 14234) >> 6;
    if (v39 >= 0x379A)
      v42 = -16;
    else
      v42 = 0;
    if (v40 < 0x4000)
      v42 = v41;
    v43 = (v38 >> 8) - (((6419 * v36) >> 8) + ((13320 * v37) >> 8));
    v44 = v43 + 8708;
    v45 = (v43 + 8708) >> 10;
    if (v43 >= -8708)
      v46 = 15;
    else
      v46 = 0;
    if (v44 < 0x4000)
      v46 = v45;
    v47 = ((33050 * v36) >> 8) + (v38 >> 8);
    v48 = v47 - 17685;
    v49 = (v47 - 17685) >> 6;
    if (v47 >= 0x4515)
      v50 = -16;
    else
      v50 = 0;
    *a8 = v42 & 0xF0 | v46;
    if (v48 < 0x4000)
      v50 = v49;
    a8[1] = v50 | 0xF;
  }
  v159 = (16 * v35) | 1;
  if (a9 >= 17)
  {
    v51 = 0;
    v54 = vdupq_n_s16(0x11Au);
    v55 = vdupq_n_s16(0xC866u);
    v56 = vdupq_n_s16(0x2204u);
    v57 = vdupq_n_s16(0xBAEBu);
    if (v35 <= 1)
      v58 = 1;
    else
      v58 = v35;
    do
    {
      v59 = 0;
      v60 = *(uint8x8_t *)(a3 + 1);
      v61 = *(uint8x8_t *)(v12 + 1);
      v62 = (int16x8_t)vaddl_u8(v61, *(uint8x8_t *)a3);
      v63 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v12, v60);
      v64 = vaddq_s16(v62, v63);
      *(int8x8_t *)v62.i8 = vshrn_n_s16(vaddq_s16(v64, vaddq_s16(v62, v62)), 3uLL);
      *(int8x8_t *)v63.i8 = vshrn_n_s16(vaddq_s16(v64, vaddq_s16(v63, v63)), 3uLL);
      *(uint8x8_t *)v64.i8 = vrhadd_u8(*(uint8x8_t *)a3, *(uint8x8_t *)v63.i8);
      v65 = vrhadd_u8(v60, *(uint8x8_t *)v62.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v12, *(uint8x8_t *)v62.i8);
      v171.val[1] = (int8x8_t)vrhadd_u8(v61, *(uint8x8_t *)v63.i8);
      vst2_s8((char *)&v164, (int8x8x2_t)v64);
      vst2_s8((char *)&v166, v171);
      v171.val[1] = *(int8x8_t *)(v13 + 1);
      v66 = *(uint8x8_t *)(v11 + 1);
      v67 = (int16x8_t)vaddl_u8(v66, *(uint8x8_t *)v13);
      v68 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v11, (uint8x8_t)v171.val[1]);
      v69 = vaddq_s16(v67, v68);
      *(int8x8_t *)v67.i8 = vshrn_n_s16(vaddq_s16(v69, vaddq_s16(v67, v67)), 3uLL);
      *(int8x8_t *)v68.i8 = vshrn_n_s16(vaddq_s16(v69, vaddq_s16(v68, v68)), 3uLL);
      *(uint8x8_t *)v69.i8 = vrhadd_u8(*(uint8x8_t *)v13, *(uint8x8_t *)v68.i8);
      v70 = vrhadd_u8((uint8x8_t)v171.val[1], *(uint8x8_t *)v67.i8);
      v171.val[0] = (int8x8_t)vrhadd_u8(*(uint8x8_t *)v11, *(uint8x8_t *)v67.i8);
      v52 = (char *)&v165;
      vst2_s8(v52, (int8x8x2_t)v69);
      v171.val[1] = (int8x8_t)vrhadd_u8(v66, *(uint8x8_t *)v68.i8);
      v53 = v167;
      vst2_s8(v53, v171);
      v71 = 1;
      v72 = (16 * v51) | 1;
      do
      {
        v73 = v71;
        v74 = 2 * (v59 | v72);
        v75 = *(uint8x8_t *)&a1[v72 + v59];
        v76 = (uint8x8_t *)((char *)&v164 + v59);
        v77 = (int16x8_t)vshll_n_u8(*v76, 7uLL);
        v78 = (int16x8_t)vshll_n_u8(v76[2], 7uLL);
        v79 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v75, 7uLL), (int16x4_t)0x3408191366254A85, 0);
        v80 = vqaddq_s16(v79, v55);
        v81 = vqaddq_s16(v79, v56);
        v82 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v77, v54), vqaddq_s16(v79, v57)), v77);
        *(int8x8_t *)v77.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 1), v80), 6uLL), vqshrun_n_s16(vqsubq_s16(v81, vqaddq_s16(vqdmulhq_lane_s16(v77, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v78, (int16x4_t)0x3408191366254A85, 3))), 6uLL), 4uLL);
        *(int8x8_t *)v82.i8 = vsri_n_s8(vqshrun_n_s16(v82, 6uLL), (int8x8_t)-1, 4uLL);
        *(int8x16_t *)&a7[v74 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v77, (int8x16_t)v82);
        v59 = 8;
        v71 = 0;
      }
      while ((v73 & 1) != 0);
      if (a2)
      {
        v83 = 0;
        v84 = 1;
        do
        {
          v85 = v84;
          v86 = 2 * (v83 | v72);
          v87 = *(uint8x8_t *)&a2[v72 + v83];
          v88 = (uint8x8_t *)&v167[v83 - 16];
          v89 = (int16x8_t)vshll_n_u8(*v88, 7uLL);
          v90 = (int16x8_t)vshll_n_u8(v88[2], 7uLL);
          v91 = vqdmulhq_lane_s16((int16x8_t)vshll_n_u8(v87, 7uLL), (int16x4_t)0x3408191366254A85, 0);
          v92 = vqaddq_s16(v91, v55);
          v93 = vqaddq_s16(v91, v56);
          v94 = vqaddq_s16(vqaddq_s16(vqdmulhq_s16(v89, v54), vqaddq_s16(v91, v57)), v89);
          *(int8x8_t *)v89.i8 = vsri_n_s8(vqshrun_n_s16(vqaddq_s16(vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 1), v92), 6uLL), vqshrun_n_s16(vqsubq_s16(v93, vqaddq_s16(vqdmulhq_lane_s16(v89, (int16x4_t)0x3408191366254A85, 2), vqdmulhq_lane_s16(v90, (int16x4_t)0x3408191366254A85, 3))), 6uLL), 4uLL);
          *(int8x8_t *)v94.i8 = vsri_n_s8(vqshrun_n_s16(v94, 6uLL), (int8x8_t)-1, 4uLL);
          *(int8x16_t *)&a8[v86 & 0xFFFFFFF2] = vzip1q_s8((int8x16_t)v89, (int8x16_t)v94);
          v83 = 8;
          v84 = 0;
        }
        while ((v85 & 1) != 0);
      }
      a3 += 8;
      v12 += 8;
      v13 += 8;
      v11 += 8;
      ++v51;
    }
    while (v51 != v58);
  }
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  v95 = 9 - (int)v160;
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v95);
  memset((char *)v162 + (int)v160, v162[0].u8[(_QWORD)(v160 - 1)], v95);
  v96 = *(uint8x8_t *)((char *)v162 + 1);
  v97 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  v98 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  v99 = vaddq_s16(v97, v98);
  *(int8x8_t *)v97.i8 = vshrn_n_s16(vaddq_s16(v99, vaddq_s16(v97, v97)), 3uLL);
  *(int8x8_t *)v98.i8 = vshrn_n_s16(vaddq_s16(v99, vaddq_s16(v98, v98)), 3uLL);
  *(uint8x8_t *)v99.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v98.i8);
  v100 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v97.i8);
  v169.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v97.i8);
  v101 = (char *)&v164;
  vst2_s8(v101, (int8x8x2_t)v99);
  v169.val[1] = (int8x8_t)vrhadd_u8(v96, *(uint8x8_t *)v98.i8);
  v103 = (char *)&v166;
  vst2_s8(v103, v169);
  memset(v163, 0, 9);
  memset(v162, 0, 9);
  __memcpy_chk();
  __memcpy_chk();
  memset((char *)v163 + (int)v160, v163[0].u8[(_QWORD)(v160 - 1)], v95);
  result = (uint64_t)memset((char *)v162 + (int)v160, v162[0].u8[(_QWORD)(v160 - 1)], v95);
  v105 = *(uint8x8_t *)((char *)v162 + 1);
  v106 = (int16x8_t)vaddl_u8(*(uint8x8_t *)((char *)v162 + 1), v163[0]);
  v107 = (int16x8_t)vaddl_u8(v162[0], *(uint8x8_t *)((char *)v163 + 1));
  v108 = vaddq_s16(v106, v107);
  *(int8x8_t *)v106.i8 = vshrn_n_s16(vaddq_s16(v108, vaddq_s16(v106, v106)), 3uLL);
  *(int8x8_t *)v107.i8 = vshrn_n_s16(vaddq_s16(v108, vaddq_s16(v107, v107)), 3uLL);
  *(uint8x8_t *)v108.i8 = vrhadd_u8(v163[0], *(uint8x8_t *)v107.i8);
  v109 = vrhadd_u8(*(uint8x8_t *)((char *)v163 + 1), *(uint8x8_t *)v106.i8);
  v170.val[0] = (int8x8_t)vrhadd_u8(v162[0], *(uint8x8_t *)v106.i8);
  v102 = (char *)&v165;
  vst2_s8(v102, (int8x8x2_t)v108);
  v170.val[1] = (int8x8_t)vrhadd_u8(v105, *(uint8x8_t *)v107.i8);
  v110 = v167;
  vst2_s8(v110, v170);
  v111 = (a9 - v159);
  if ((int)v111 >= 1)
  {
    v161 = a2;
    v112 = (unsigned __int8 *)&v165;
    result = 8708;
    v113 = &a1[v159];
    v114 = (a9 - v159);
    v115 = (32 * v35) | 2;
    do
    {
      v117 = *v113++;
      v116 = v117;
      v118 = *(v112 - 16);
      v120 = *v112++;
      v119 = v120;
      v121 = &a7[v115];
      v122 = 19077 * v116;
      v123 = ((26149 * v120) >> 8) + (v122 >> 8);
      v124 = v123 - 14234;
      v125 = (v123 - 14234) >> 6;
      if (v123 >= 0x379A)
        v126 = -16;
      else
        v126 = 0;
      if (v124 < 0x4000)
        v126 = v125;
      v127 = (v122 >> 8) - (((6419 * v118) >> 8) + ((13320 * v119) >> 8));
      v128 = v127 + 8708;
      v129 = (v127 + 8708) >> 10;
      if (v127 >= -8708)
        v130 = 15;
      else
        v130 = 0;
      if (v128 < 0x4000)
        v130 = v129;
      v131 = ((33050 * v118) >> 8) + (v122 >> 8);
      v132 = v131 - 17685;
      v133 = (v131 - 17685) >> 6;
      if (v131 >= 0x4515)
        v134 = -16;
      else
        v134 = 0;
      *v121 = v126 & 0xF0 | v130;
      if (v132 >= 0x4000)
        v135 = v134;
      else
        v135 = v133;
      v121[1] = v135 | 0xF;
      v115 += 2;
      --v114;
    }
    while (v114);
    if (v161)
    {
      v136 = v167;
      v137 = (32 * v35) | 2;
      v138 = &v161[v159];
      result = 13320;
      do
      {
        v140 = *v138++;
        v139 = v140;
        v141 = *(v136 - 16);
        v143 = *v136++;
        v142 = v143;
        v144 = &a8[v137];
        v145 = 19077 * v139;
        v146 = ((26149 * v143) >> 8) + (v145 >> 8);
        v147 = v146 - 14234;
        v148 = (v146 - 14234) >> 6;
        if (v146 >= 0x379A)
          v149 = -16;
        else
          v149 = 0;
        if (v147 < 0x4000)
          v149 = v148;
        v150 = (v145 >> 8) - (((6419 * v141) >> 8) + ((13320 * v142) >> 8));
        v151 = v150 + 8708;
        v152 = (v150 + 8708) >> 10;
        if (v150 >= -8708)
          v153 = 15;
        else
          v153 = 0;
        if (v151 < 0x4000)
          v153 = v152;
        v154 = ((33050 * v141) >> 8) + (v145 >> 8);
        v155 = v154 - 17685;
        v156 = (v154 - 17685) >> 6;
        if (v154 >= 0x4515)
          v157 = -16;
        else
          v157 = 0;
        *v144 = v149 & 0xF0 | v153;
        if (v155 < 0x4000)
          v157 = v156;
        v144[1] = v157 | 0xF;
        v137 += 2;
        --v111;
      }
      while (v111);
    }
  }
  return result;
}

void UpsampleRgbaLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgbaLinePair_NEON", "upsampling_neon.c", 246, "top_y != NULL");
}

void UpsampleBgraLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleBgraLinePair_NEON", "upsampling_neon.c", 247, "top_y != NULL");
}

void UpsampleRgbLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgbLinePair_NEON", "upsampling_neon.c", 249, "top_y != NULL");
}

void UpsampleBgrLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleBgrLinePair_NEON", "upsampling_neon.c", 250, "top_y != NULL");
}

void UpsampleArgbLinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleArgbLinePair_NEON", "upsampling_neon.c", 251, "top_y != NULL");
}

void UpsampleRgb565LinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgb565LinePair_NEON", "upsampling_neon.c", 253, "top_y != NULL");
}

void UpsampleRgba4444LinePair_NEON_cold_1()
{
  __assert_rtn("UpsampleRgba4444LinePair_NEON", "upsampling_neon.c", 252, "top_y != NULL");
}

void VP8LDspInitNEON()
{
  qword_1EDF09790 = (uint64_t)Predictor5_NEON;
  qword_1EDF09798 = (uint64_t)Predictor6_NEON;
  qword_1EDF097A0 = (uint64_t)Predictor7_NEON;
  qword_1EDF097D0 = (uint64_t)Predictor13_NEON;
  VP8LPredictorsAdd = (uint64_t)PredictorAdd0_NEON;
  unk_1EDF097F0 = PredictorAdd1_NEON;
  qword_1EDF097F8 = (uint64_t)PredictorAdd2_NEON;
  unk_1EDF09800 = PredictorAdd3_NEON;
  qword_1EDF09808 = (uint64_t)PredictorAdd4_NEON;
  unk_1EDF09810 = PredictorAdd5_NEON;
  qword_1EDF09818 = (uint64_t)PredictorAdd6_NEON;
  unk_1EDF09820 = PredictorAdd7_NEON;
  qword_1EDF09828 = (uint64_t)PredictorAdd8_NEON;
  unk_1EDF09830 = PredictorAdd9_NEON;
  qword_1EDF09838 = (uint64_t)PredictorAdd10_NEON;
  unk_1EDF09840 = PredictorAdd11_NEON;
  qword_1EDF09848 = (uint64_t)PredictorAdd12_NEON;
  unk_1EDF09850 = PredictorAdd13_NEON;
  VP8LConvertBGRAToRGBA = ConvertBGRAToRGBA_NEON;
  VP8LConvertBGRAToBGR = (uint64_t)ConvertBGRAToBGR_NEON;
  VP8LConvertBGRAToRGB = ConvertBGRAToRGB_NEON;
  VP8LAddGreenToBlueAndRed = AddGreenToBlueAndRed_NEON;
  VP8LTransformColorInverse = TransformColorInverse_NEON;
}

float Predictor5_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2;
  const float *v3;
  uint8x8_t v4;
  uint8x8_t v5;
  float result;

  v2 = (uint8x8_t)vld1_dup_f32(a1);
  v4 = (uint8x8_t)vld1_dup_f32(a2);
  v3 = a2 + 1;
  v5 = (uint8x8_t)vld1_dup_f32(v3);
  LODWORD(result) = vhadd_u8(vhadd_u8(v2, v5), v4).u32[0];
  return result;
}

float Predictor6_NEON(const float *a1, uint64_t a2)
{
  uint8x8_t v2;
  const float *v3;
  uint8x8_t v4;
  float result;

  v2 = (uint8x8_t)vld1_dup_f32(a1);
  v3 = (const float *)(a2 - 4);
  v4 = (uint8x8_t)vld1_dup_f32(v3);
  LODWORD(result) = vhadd_u8(v2, v4).u32[0];
  return result;
}

float Predictor7_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2;
  uint8x8_t v3;
  float result;

  v2 = (uint8x8_t)vld1_dup_f32(a1);
  v3 = (uint8x8_t)vld1_dup_f32(a2);
  LODWORD(result) = vhadd_u8(v2, v3).u32[0];
  return result;
}

float Predictor13_NEON(const float *a1, const float *a2)
{
  uint8x8_t v2;
  uint8x8_t v3;
  const float *v4;
  uint8x8_t v5;
  int8x8_t v6;
  float result;

  v2 = (uint8x8_t)vld1_dup_f32(a1);
  v3 = (uint8x8_t)vld1_dup_f32(a2);
  v4 = a2 - 1;
  v5 = vhadd_u8(v2, v3);
  v6 = (int8x8_t)vld1_dup_f32(v4);
  LODWORD(result) = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)vhsub_u8(v5, (uint8x8_t)vadd_s8((int8x8_t)vcgt_u8((uint8x8_t)v6, v5), v6))), v5)).u32[0];
  return result;
}

uint64_t PredictorAdd0_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = 4;
    v6.i64[0] = 0xFF000000FF000000;
    v6.i64[1] = 0xFF000000FF000000;
    v7 = a1;
    v8 = a4;
    do
    {
      v9 = *v7++;
      *v8++ = vaddq_s8(v9, v6);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return VP8LPredictorsAdd_C((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd1_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  const float *v10;
  int8x16_t v11;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = 4;
    v6 = a1;
    v7 = a4;
    do
    {
      v8 = *v6++;
      v9 = vaddq_s8(vextq_s8((int8x16_t)0, v8, 0xCuLL), v8);
      v10 = (const float *)&v7[-1].i32[3];
      v11 = (int8x16_t)vld1q_dup_f32(v10);
      *v7++ = vaddq_s8(vextq_s8((int8x16_t)0, v9, 8uLL), vaddq_s8(v9, v11));
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09870((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd2_NEON(int8x16_t *a1, int8x16_t *a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = 4;
    v6 = a1;
    v7 = a2;
    v8 = a4;
    do
    {
      v9 = *v6++;
      v10 = v9;
      v11 = *v7++;
      *v8++ = vaddq_s8(v11, v10);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09878((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd3_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = (int8x16_t *)(a2 + 4);
    v6 = 4;
    v7 = a1;
    v8 = a4;
    do
    {
      v9 = *v7++;
      v10 = v9;
      v11 = *v5++;
      *v8++ = vaddq_s8(v11, v10);
      v6 += 4;
    }
    while (v6 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09880((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd4_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  int8x16_t *v5;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = (int8x16_t *)(a2 - 4);
    v6 = 4;
    v7 = a1;
    v8 = a4;
    do
    {
      v9 = *v7++;
      v10 = v9;
      v11 = *v5++;
      *v8++ = vaddq_s8(v11, v10);
      v6 += 4;
    }
    while (v6 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09888((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd5_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  uint8x16_t v6;
  _QWORD *v7;
  uint8x16_t *v8;
  unint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (uint8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = (uint8x16_t *)(a2 + 4);
    v9 = 4;
    v10 = a1;
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *(uint8x16_t *)((char *)v8 - 4);
      v14 = *v8++;
      v15 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8(v6, v14), v13), v12);
      v16 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v14), v13), v12);
      v15.i32[1] = v16.i32[1];
      *(v7 - 1) = v15.i64[0];
      v17 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v14), v13), v12);
      v18 = vaddq_s8((int8x16_t)vhaddq_u8(vhaddq_u8((uint8x16_t)vextq_s8(v17, v17, 0xCuLL), v14), v13), v12);
      v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
      v17.i32[1] = vextq_s8(v18, v18, 8uLL).i32[1];
      *v7 = v17.i64[0];
      v7 += 2;
      v6 = (uint8x16_t)vextq_s8(v18, v18, 0xCuLL);
      v9 += 4;
    }
    while (v9 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09890((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd6_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  uint8x16_t v6;
  _QWORD *v7;
  uint8x16_t *v8;
  unint64_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (uint8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = (uint8x16_t *)(a2 - 4);
    v9 = 4;
    v10 = a1;
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v8++;
      v14 = vaddq_s8((int8x16_t)vhaddq_u8(v6, v13), v12);
      v15 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v13), v12);
      v14.i32[1] = v15.i32[1];
      v16 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v13), v12);
      v17 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v13), v12);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      *(v7 - 1) = v14.i64[0];
      *v7 = v16.i64[0];
      v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v9 += 4;
      v7 += 2;
    }
    while (v9 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF09898((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd7_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  uint8x16_t v6;
  _QWORD *v7;
  unint64_t v8;
  int8x16_t *v9;
  uint8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (uint8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = 4;
    v9 = a1;
    v10 = a2;
    do
    {
      v11 = *v9++;
      v12 = v11;
      v13 = *v10++;
      v14 = vaddq_s8((int8x16_t)vhaddq_u8(v6, v13), v12);
      v15 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v13), v12);
      v14.i32[1] = v15.i32[1];
      v16 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v13), v12);
      v17 = vaddq_s8((int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v13), v12);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      *(v7 - 1) = v14.i64[0];
      *v7 = v16.i64[0];
      v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v8 += 4;
      v7 += 2;
    }
    while (v8 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098A0((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd8_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  int8x16_t *v6;
  uint8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = 4;
    v6 = a1;
    v7 = a2;
    v8 = a4;
    do
    {
      v9 = *v6++;
      v10 = v9;
      v11 = *(uint8x16_t *)((char *)v7 - 4);
      v12 = *v7++;
      *v8++ = vaddq_s8((int8x16_t)vhaddq_u8(v12, v11), v10);
      v5 += 4;
    }
    while (v5 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098A8((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd9_NEON(int8x16_t *a1, uint64_t a2, int a3, int8x16_t *a4)
{
  unsigned int v4;
  uint8x16_t *v5;
  unint64_t v6;
  int8x16_t *v7;
  int8x16_t *v8;
  int8x16_t v9;

  if (a3 >= 4)
  {
    v4 = a3 & 0xFFFFFFFC;
    v5 = (uint8x16_t *)(a2 + 4);
    v6 = 4;
    v7 = a1;
    v8 = a4;
    do
    {
      v9 = *v7++;
      *v8++ = vaddq_s8((int8x16_t)vhaddq_u8(*(uint8x16_t *)((char *)v5 - 4), *v5), v9);
      v6 += 4;
      ++v5;
    }
    while (v6 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098B0((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd10_NEON(int8x16_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  uint8x16_t v6;
  _QWORD *v7;
  unint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  int8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (uint8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = 4;
    v9 = a1;
    v10 = a2;
    do
    {
      v11 = *v9++;
      v12 = *(uint8x16_t *)(v10 - 4);
      v13 = vhaddq_u8(*(uint8x16_t *)v10, *(uint8x16_t *)(v10 + 4));
      v14 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8(v6, v12)), v11);
      v15 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v14, v14, 0xCuLL), v12)), v11);
      v14.i32[1] = v15.i32[1];
      *(v7 - 1) = v14.i64[0];
      v16 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), v12)), v11);
      v17 = vaddq_s8((int8x16_t)vhaddq_u8(v13, vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12)), v11);
      v16.i32[0] = vextq_s8(v16, v16, 8uLL).u32[0];
      v16.i32[1] = vextq_s8(v17, v17, 8uLL).i32[1];
      *v7 = v16.i64[0];
      v7 += 2;
      v6 = (uint8x16_t)vextq_s8(v17, v17, 0xCuLL);
      v8 += 4;
      v10 += 16;
    }
    while (v8 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098B8((char *)a1 + 4 * v4, a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd11_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  int8x16_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x16_t *v9;
  int8x16_t *v10;
  uint8x16_t v11;
  int8x16_t v12;
  uint32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (int8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = 4;
    v9 = a2;
    v10 = a1;
    do
    {
      v11 = *(uint8x16_t *)((char *)v9 - 4);
      v12 = *v10++;
      v13 = vpaddlq_u16(vpaddlq_u8(vabdq_u8(*v9, v11)));
      v14 = vaddq_s8(v12, *(int8x16_t *)v9);
      v15 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v6, v11)))), v14, vaddq_s8(v12, v6));
      v16 = vextq_s8(v15, v15, 0xCuLL);
      v17 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v16, v11)))), v14, vaddq_s8(v16, v12));
      v15.i32[1] = v17.i32[1];
      *(v7 - 1) = v15.i64[0];
      v18 = vextq_s8(v17, v17, 0xCuLL);
      v19 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v18, v11)))), v14, vaddq_s8(v18, v12));
      v20 = vextq_s8(v19, v19, 0xCuLL);
      v21 = vbslq_s8((int8x16_t)vcgeq_u32(v13, vpaddlq_u16(vpaddlq_u8(vabdq_u8((uint8x16_t)v20, v11)))), v14, vaddq_s8(v20, v12));
      v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
      v19.i32[1] = vextq_s8(v21, v21, 8uLL).i32[1];
      *v7 = v19.i64[0];
      v7 += 2;
      v6 = vextq_s8(v21, v21, 0xCuLL);
      v8 += 4;
      ++v9;
    }
    while (v8 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098C0((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

uint64_t PredictorAdd12_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint8x8_t *a4)
{
  unsigned int v4;
  const float *v5;
  uint8x8_t v6;
  int16x8_t v7;
  uint8x8_t *v8;
  unint64_t v9;
  int8x16_t *v10;
  uint8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint8x8_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;

  if (a3 >= 4)
  {
    v5 = (const float *)&a4[-1] + 1;
    v6 = (uint8x8_t)vld1_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (int16x8_t)vmovl_u8(v6);
    v8 = a4 + 1;
    v9 = 4;
    v10 = a1;
    v11 = a2;
    do
    {
      v12 = *v10++;
      v13 = v12;
      v14 = *(uint8x16_t *)((char *)v11 - 4);
      v15 = *v11++;
      v16 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v14.i8);
      v17 = (int16x8_t)vsubl_high_u8(v15, v14);
      v18 = (uint8x8_t)vadd_s8(vqmovun_s16(vaddq_s16(v16, v7)), *(int8x8_t *)v13.i8);
      v19 = (int8x16_t)vmovl_u8(v18);
      *(int8x8_t *)v19.i8 = vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v19, v19, 8uLL), v16)), *(int8x8_t *)v13.i8);
      v20 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v19.i8);
      v18.i32[1] = v19.i32[1];
      v8[-1] = v18;
      v13.i64[0] = vextq_s8(v13, v13, 8uLL).u64[0];
      v21 = (uint8x8_t)vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v20, v20, 8uLL), v17)), *(int8x8_t *)v13.i8);
      v22 = (int8x16_t)vmovl_u8(v21);
      *(int8x8_t *)v13.i8 = vadd_s8(vqmovun_s16(vaddq_s16((int16x8_t)vextq_s8(v22, v22, 8uLL), v17)), *(int8x8_t *)v13.i8);
      v23 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      v21.i32[1] = v13.i32[1];
      *v8 = v21;
      v8 += 2;
      v7 = (int16x8_t)vextq_s8(v23, v23, 8uLL);
      v9 += 4;
    }
    while (v9 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098C8((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, (char *)a4 + 4 * v4);
}

uint64_t PredictorAdd13_NEON(int8x16_t *a1, uint8x16_t *a2, int a3, uint64_t a4)
{
  unsigned int v4;
  const float *v5;
  uint8x16_t v6;
  _QWORD *v7;
  unint64_t v8;
  int8x16_t *v9;
  uint8x16_t *v10;
  int8x16_t v11;
  uint8x16_t v12;
  int8x16_t v13;
  uint8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  int8x8_t v18;
  uint8x16_t v19;
  int8x16_t v20;

  if (a3 >= 4)
  {
    v5 = (const float *)(a4 - 4);
    v6 = (uint8x16_t)vld1q_dup_f32(v5);
    v4 = a3 & 0xFFFFFFFC;
    v7 = (_QWORD *)(a4 + 8);
    v8 = 4;
    v9 = a1;
    v10 = a2;
    do
    {
      v11 = *v9++;
      v12 = *v10;
      v13 = *(int8x16_t *)((char *)&v10[-1] + 12);
      v14 = vhaddq_u8(v6, *v10);
      *(int8x8_t *)v14.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)*(_OWORD *)&vhsubq_u8(v14, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v14)))), *(uint8x8_t *)v14.i8)), *(int8x8_t *)v11.i8);
      v15.i64[0] = v14.i64[0];
      v15.i64[1] = v14.i64[0];
      v16 = (int8x16_t)vhaddq_u8((uint8x16_t)vextq_s8(v15, v15, 0xCuLL), *v10);
      *(int8x8_t *)v16.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)vmovl_s8((int8x8_t)*(_OWORD *)&vhsubq_u8((uint8x16_t)v16, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, (uint8x16_t)v16)))), *(uint8x8_t *)v16.i8)), *(int8x8_t *)v11.i8);
      v14.i32[1] = v16.i32[1];
      v16.i64[1] = v16.i64[0];
      *(v7 - 1) = v14.i64[0];
      v17 = vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12);
      v18 = (int8x8_t)vextq_s8(v11, v11, 8uLL).u64[0];
      *(int8x8_t *)v17.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vmovl_high_s8((int8x16_t)vhsubq_u8(v17, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v17)))), v17)), v18);
      v16.i64[0] = v17.i64[0];
      v16.i64[1] = v17.i64[0];
      v19 = vhaddq_u8((uint8x16_t)vextq_s8(v16, v16, 0xCuLL), v12);
      *(int8x8_t *)v20.i8 = vadd_s8(vqmovun_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vmovl_high_s8((int8x16_t)vhsubq_u8(v19, (uint8x16_t)vaddq_s8(v13, (int8x16_t)vcgtq_u8((uint8x16_t)v13, v19)))), v19)), v18);
      v17.i32[1] = v20.i32[1];
      v20.i64[1] = v20.i64[0];
      *v7 = v17.i64[0];
      v7 += 2;
      v6 = (uint8x16_t)vextq_s8(v20, v20, 0xCuLL);
      v8 += 4;
      ++v10;
    }
    while (v8 <= a3);
  }
  else
  {
    v4 = 0;
  }
  return off_1EDF098D0((char *)a1 + 4 * v4, (char *)a2 + 4 * v4, a3 - v4, a4 + 4 * v4);
}

int *ConvertBGRAToRGBA_NEON(char *a1, int a2, char *a3)
{
  char *v3;
  int8x16x4_t v5;
  int8x16x4_t v6;

  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      v5 = vld4q_s8(a1);
      a1 += 64;
      v6.val[0] = v5.val[2];
      v6.val[1] = v5.val[1];
      v6.val[2] = v5.val[0];
      v6.val[3] = v5.val[3];
      vst4q_s8(a3, v6);
      a3 += 64;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToRGBA_C((int *)a1, a2 & 0xF, a3);
}

int *ConvertBGRAToBGR_NEON(char *a1, int a2, char *a3)
{
  char *v3;
  int8x16x4_t v5;

  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      v5 = vld4q_s8(a1);
      a1 += 64;
      vst3q_s8(a3, *(int8x16x3_t *)v5.val[0].i8);
      a3 += 48;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToBGR_C((int *)a1, a2 & 0xF, (uint64_t)a3);
}

int *ConvertBGRAToRGB_NEON(char *a1, int a2, char *a3)
{
  char *v3;
  int8x16x3_t v5;
  int8x16x4_t v6;

  if ((int)(a2 & 0xFFFFFFF0) >= 1)
  {
    v3 = &a1[4 * (a2 & 0xFFFFFFF0)];
    do
    {
      v6 = vld4q_s8(a1);
      a1 += 64;
      v5.val[0] = v6.val[2];
      v5.val[1] = v6.val[1];
      v5.val[2] = v6.val[0];
      vst3q_s8(a3, v5);
      a3 += 48;
    }
    while (a1 < v3);
  }
  return VP8LConvertBGRAToRGB_C((int *)a1, a2 & 0xF, a3);
}

unsigned int *AddGreenToBlueAndRed_NEON(unsigned int *a1, int a2, unsigned int *a3)
{
  unsigned int *v3;
  int8x16_t v4;
  int8x16_t v5;

  if ((int)(a2 & 0xFFFFFFFC) >= 1)
  {
    v3 = &a1[a2 & 0xFFFFFFFC];
    do
    {
      v4 = *(int8x16_t *)a1;
      a1 += 4;
      *(int8x8_t *)v5.i8 = vqtbl1_s8((int8x16_t)v4.u64[0], (int8x8_t)0xFF05FF05FF01FF01);
      v5.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)vextq_s8(v4, v4, 8uLL).u64[0], (int8x8_t)0xFF05FF05FF01FF01);
      *(int8x16_t *)a3 = vaddq_s8(v5, v4);
      a3 += 4;
    }
    while (a1 < v3);
  }
  return VP8LAddGreenToBlueAndRed_C(a1, a2 & 3, a3);
}

char *TransformColorInverse_NEON(char *a1, int8x16_t *a2, int a3, int8x16_t *a4, int32x4_t a5)
{
  unsigned int v5;
  int16x8_t v6;
  int16x8_t v7;
  unint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;

  if (a3 >= 4)
  {
    a5.i8[0] = *a1;
    a5.i8[4] = a1[1];
    *(int32x2_t *)a5.i8 = vshr_n_s32(vshr_n_s32(vshl_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 8uLL), 0x10uLL), 0x10uLL), 6uLL);
    *(int16x4_t *)a5.i8 = vmovn_s32(a5);
    v6 = (int16x8_t)vqtbl1q_s8((int8x16_t)a5, (int8x16_t)xmmword_1882315B0);
    v7.i16[0] = 0;
    v7.i16[2] = 0;
    v7.i16[4] = 0;
    v7.i16[6] = 0;
    v7.i16[1] = 4 * a1[2];
    v7.i16[3] = v7.i16[1];
    v7.i16[5] = v7.i16[1];
    v7.i16[7] = v7.i16[1];
    v5 = a3 & 0xFFFFFFFC;
    v8 = 4;
    v9 = a2;
    v10 = a4;
    do
    {
      v11 = *v9++;
      *(int8x8_t *)v12.i8 = vqtbl1_s8((int8x16_t)v11.u64[0], (int8x8_t)0x5FF05FF01FF01FFLL);
      v12.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)vextq_s8(v11, v11, 8uLL).u64[0], (int8x8_t)0x5FF05FF01FF01FFLL);
      v13 = vshlq_n_s16((int16x8_t)vaddq_s8(v11, (int8x16_t)vqdmulhq_s16(v12, v6)), 8uLL);
      *v10++ = vorrq_s8((int8x16_t)(*(_OWORD *)&v11 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s8((int8x16_t)v13, (int8x16_t)vshrq_n_u32((uint32x4_t)vqdmulhq_s16(v13, v7), 8uLL)), 8uLL));
      v8 += 4;
    }
    while (v8 <= a3);
  }
  else
  {
    v5 = 0;
  }
  return VP8LTransformColorInverse_C(a1, &a2->i32[v5], a3 - v5, (unsigned int *)a4 + v5);
}

uint64_t VP8InitDithering(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!a2)
    VP8InitDithering_cold_1();
  v2 = result;
  if (!result)
    return result;
  v4 = *(_DWORD *)(result + 44);
  if ((v4 & 0x80000000) == 0)
  {
    if (v4 > 0x64)
    {
      LODWORD(v5) = 255;
      goto LABEL_8;
    }
    if ((unsigned __int16)*(_DWORD *)(result + 44))
    {
      v5 = (42949673 * (unint64_t)(255 * (unsigned __int16)*(_DWORD *)(result + 44))) >> 32;
LABEL_8:
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = a2 + v6;
        v9 = *(_DWORD *)(a2 + v6 + 1084);
        if (v9 >= 12)
        {
          v10 = *(_DWORD *)(v8 + 1088);
        }
        else
        {
          v10 = (v5 * kQuantToDitherAmp[v9 & ~(v9 >> 31)]) >> 3;
          *(_DWORD *)(v8 + 1088) = v10;
        }
        v7 |= v10;
        v6 += 32;
      }
      while (v6 != 128);
      if (v7)
      {
        result = VP8InitRandom(a2 + 828, 1.0);
        *(_DWORD *)(a2 + 824) = 1;
      }
    }
  }
  v11 = *(_DWORD *)(v2 + 52);
  *(_DWORD *)(a2 + 3016) = v11;
  if (v11 <= 100)
  {
    if ((v11 & 0x80000000) == 0)
      return result;
    v12 = 0;
  }
  else
  {
    v12 = 100;
  }
  *(_DWORD *)(a2 + 3016) = v12;
  return result;
}

uint64_t VP8ProcessRow(uint64_t a1, int *a2)
{
  int *v4;
  int v5;
  _BOOL4 v6;
  uint64_t (**v7)();
  char v8;
  double v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (**v23)();
  int v24;
  int v25;

  v4 = (int *)(a1 + 216);
  v6 = *(int *)(a1 + 2920) >= 1
    && (v5 = *(_DWORD *)(a1 + 2908), v5 >= *(_DWORD *)(a1 + 420))
    && v5 <= *(_DWORD *)(a1 + 428);
  if (!*(_DWORD *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 2908);
    *(_DWORD *)(a1 + 224) = v6;
    ReconstructRow(a1, (int *)(a1 + 216));
    return FinishRow(a1, a2, v10, v11);
  }
  v7 = WebPGetWorkerInterface();
  v8 = ((uint64_t (*)(uint64_t))v7[2])(a1 + 152);
  if (*(_DWORD *)(a1 + 160) != 1)
    VP8ProcessRow_cold_1();
  if ((v8 & 1) == 0)
    return 0;
  v12 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 264) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 248) = v12;
  v13 = *((_OWORD *)a2 + 2);
  v14 = *((_OWORD *)a2 + 3);
  v15 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 312) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 328) = v15;
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 296) = v14;
  v16 = *((_OWORD *)a2 + 6);
  v17 = *((_OWORD *)a2 + 7);
  v18 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 376) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 392) = v18;
  *(_OWORD *)(a1 + 344) = v16;
  *(_OWORD *)(a1 + 360) = v17;
  v19 = *(_DWORD *)(a1 + 2908);
  v20 = *(_DWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 204);
  *(_DWORD *)(a1 + 220) = v19;
  *(_DWORD *)(a1 + 224) = v6;
  if (v20 == 2)
  {
    v21 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 2912);
    *(_QWORD *)(a1 + 2912) = v21;
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  ReconstructRow(a1, v4);
  if (v6)
  {
LABEL_14:
    v22 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 2840);
    *(_QWORD *)(a1 + 2840) = v22;
  }
LABEL_15:
  v23 = WebPGetWorkerInterface();
  ((void (*)(uint64_t))v23[3])(a1 + 152);
  v24 = *(_DWORD *)(a1 + 204);
  if (v24 + 1 == *(_DWORD *)(a1 + 208))
    v25 = 0;
  else
    v25 = v24 + 1;
  *(_DWORD *)(a1 + 204) = v25;
  return 1;
}

uint64_t ReconstructRow(uint64_t result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t k;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = result;
  v3 = 0;
  v4 = a2[1];
  v5 = *a2;
  v6 = *(_QWORD *)(result + 2848);
  v7 = v6 + 40;
  do
  {
    *(_BYTE *)(v6 + 39 + v3) = -127;
    v3 += 32;
  }
  while (v3 != 512);
  for (i = 0; i != 256; i += 32)
  {
    v9 = v6 + i;
    *(_BYTE *)(v9 + 583) = -127;
    *(_BYTE *)(v9 + 599) = -127;
  }
  if (v4 < 1)
  {
    *(_QWORD *)(v6 + 20) = 0x7F7F7F7F7F7F7F7FLL;
    *(_QWORD *)(v6 + 15) = 0x7F7F7F7F7F7F7F7FLL;
    *(_QWORD *)(v6 + 7) = 0x7F7F7F7F7F7F7F7FLL;
    *(_QWORD *)(v6 + 551) = 0x7F7F7F7F7F7F7F7FLL;
    *(_BYTE *)(v6 + 559) = 127;
    *(_QWORD *)(v6 + 567) = 0x7F7F7F7F7F7F7F7FLL;
    *(_BYTE *)(v6 + 575) = 127;
  }
  else
  {
    *(_BYTE *)(v6 + 567) = -127;
    *(_BYTE *)(v6 + 551) = -127;
    *(_BYTE *)(v6 + 7) = -127;
  }
  if (*(int *)(result + 408) < 1)
    return result;
  v10 = 0;
  v11 = 0;
  v57 = 4 * (v4 == 0);
  v12 = 5;
  if (!v4)
    v12 = 6;
  v56 = v12;
  v58 = 8 * v5;
  v59 = 16 * v5;
  v13 = 769;
  v60 = v6 + 600;
  v61 = v6 + 584;
  v62 = v4;
  do
  {
    v14 = *((_QWORD *)a2 + 3);
    if (v11)
    {
      for (j = 0; j != 544; j += 32)
        *(_DWORD *)(v6 + j + 4) = *(_DWORD *)(v6 + j + 20);
      for (k = 0; k != 288; k += 32)
      {
        v17 = v6 + k;
        *(_DWORD *)(v17 + 548) = *(_DWORD *)(v6 + k + 556);
        *(_DWORD *)(v17 + 564) = *(_DWORD *)(v6 + k + 572);
      }
    }
    v18 = *(_QWORD *)(v2 + 2824) + 32 * v11;
    v19 = *(_DWORD *)(v14 + 800 * v11 + 788);
    v67 = v13;
    v68 = v10;
    v64 = (_OWORD *)v18;
    v65 = *(_QWORD *)(v2 + 2824);
    if (v4 >= 1)
    {
      *(_OWORD *)(v6 + 8) = *(_OWORD *)v18;
      *(_QWORD *)(v6 + 552) = *(_QWORD *)(v18 + 16);
      *(_QWORD *)(v6 + 568) = *(_QWORD *)(v18 + 24);
      if (!*(_BYTE *)(v14 + 800 * v11 + 768))
        goto LABEL_22;
      if (v11 >= *(int *)(v2 + 408) - 1)
        v20 = 16843009 * *(unsigned __int8 *)(v18 + 15);
      else
        v20 = *(_DWORD *)(v18 + 32);
      *(_DWORD *)(v6 + 24) = v20;
      goto LABEL_40;
    }
    if (!*(_BYTE *)(v14 + 800 * v11 + 768))
    {
LABEL_22:
      v21 = *(unsigned __int8 *)(v14 + 800 * v11 + 769);
      if (v11)
        v22 = v57;
      else
        v22 = v56;
      if (!*(_BYTE *)(v14 + 800 * v11 + 769))
        v21 = v22;
      v23 = v14;
      ((void (*)(uint64_t))VP8PredLuma16[v21])(v6 + 40);
      if (!v19)
        goto LABEL_53;
      v24 = 0;
      v66 = v23;
      v25 = v23 + v10;
      while (1)
      {
        v26 = v7 + (unsigned __int16)kScan[v24];
        v27 = v19 >> 30;
        if (v19 >> 30 == 1)
        {
          v28 = (uint64_t *)&VP8TransformDC;
        }
        else
        {
          if (v27 != 2)
          {
            if (v27 == 3)
              VP8Transform(v25, v26, 0);
            goto LABEL_36;
          }
          v28 = &VP8TransformAC3;
        }
        ((void (*)(uint64_t, uint64_t))*v28)(v25, v26);
LABEL_36:
        ++v24;
        v19 *= 4;
        v25 += 32;
        if (v24 == 16)
          goto LABEL_52;
      }
    }
LABEL_40:
    v29 = 0;
    v30 = *(_DWORD *)(v6 + 24);
    *(_DWORD *)(v6 + 408) = v30;
    *(_DWORD *)(v6 + 280) = v30;
    *(_DWORD *)(v6 + 152) = v30;
    v31 = v14 + v13;
    v66 = v14;
    v32 = v14 + v10;
    do
    {
      v33 = v7 + (unsigned __int16)kScan[v29];
      ((void (*)(uint64_t))VP8PredLuma4[*(unsigned __int8 *)(v31 + v29)])(v33);
      v34 = v19 >> 30;
      if (v19 >> 30 == 1)
      {
        v35 = (uint64_t *)&VP8TransformDC;
LABEL_47:
        ((void (*)(uint64_t, uint64_t))*v35)(v32, v33);
        goto LABEL_48;
      }
      if (v34 == 2)
      {
        v35 = &VP8TransformAC3;
        goto LABEL_47;
      }
      if (v34 == 3)
        VP8Transform(v32, v33, 0);
LABEL_48:
      ++v29;
      v19 *= 4;
      v32 += 32;
    }
    while (v29 != 16);
    if (v11)
      v22 = v57;
    else
      v22 = v56;
LABEL_52:
    v23 = v66;
LABEL_53:
    v36 = v23 + 800 * v11;
    v37 = *(_DWORD *)(v36 + 792);
    if (*(_BYTE *)(v36 + 785))
      v38 = *(unsigned __int8 *)(v36 + 785);
    else
      v38 = v22;
    ((void (*)(uint64_t))VP8PredChroma8[v38])(v61);
    v39 = (uint64_t (*)(uint64_t))VP8PredChroma8[v38];
    v40 = (uint64_t *)(v6 + 600);
    result = v39(v60);
    if ((_BYTE)v37)
    {
      v41 = &VP8TransformDCUV;
      if ((v37 & 0xAA) != 0)
        v41 = &VP8TransformUV;
      result = ((uint64_t (*)(uint64_t, uint64_t))*v41)(v36 + 512, v61);
    }
    v4 = v62;
    if ((v37 & 0xFF00) != 0)
    {
      v42 = &VP8TransformDCUV;
      if ((v37 & 0xAA00) != 0)
        v42 = &VP8TransformUV;
      result = ((uint64_t (*)(uint64_t, uint64_t))*v42)(v36 + 640, v60);
    }
    if (v62 < *(_DWORD *)(v2 + 412) - 1)
    {
      *v64 = *(_OWORD *)(v6 + 520);
      v43 = v65 + 32 * v11;
      *(_QWORD *)(v43 + 16) = *(_QWORD *)(v6 + 808);
      *(_QWORD *)(v43 + 24) = *(_QWORD *)(v6 + 824);
    }
    v44 = 0;
    v45 = v58 * *(int *)(v2 + 2884);
    v46 = *(_QWORD *)(v2 + 2856) + (16 * v11) + v59 * *(int *)(v2 + 2880);
    v47 = *(_QWORD *)(v2 + 2864);
    v48 = (8 * v11);
    v49 = *(_QWORD *)(v2 + 2872) + v48;
    v50 = (__int128 *)(v6 + 40);
    do
    {
      v51 = *v50;
      v50 += 2;
      *(_OWORD *)(v46 + *(int *)(v2 + 2880) * (uint64_t)(int)v44++) = v51;
    }
    while (v44 != 16);
    v52 = 0;
    v53 = v47 + v48 + v45;
    v54 = v49 + v45;
    do
    {
      *(_QWORD *)(v53 + *(int *)(v2 + 2884) * (uint64_t)(int)v52) = *(v40 - 2);
      v55 = *v40;
      v40 += 4;
      *(_QWORD *)(v54 + *(int *)(v2 + 2884) * (uint64_t)(int)v52++) = v55;
    }
    while (v52 != 8);
    ++v11;
    v13 = v67 + 800;
    v10 = v68 + 800;
  }
  while (v11 < *(int *)(v2 + 408));
  return result;
}

uint64_t FinishRow(uint64_t a1, int *a2, double a3, __n128 a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  double v30;
  __n128 v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v59 = *(_DWORD *)(a1 + 216);
  v60 = kFilterExtraRows[*(int *)(a1 + 2920)];
  v57 = *(_DWORD *)(a1 + 2880);
  v51 = *(_DWORD *)(a1 + 2884);
  v53 = *(_QWORD *)(a1 + 2864);
  v54 = *(_QWORD *)(a1 + 2856);
  v52 = *(_QWORD *)(a1 + 2872);
  v55 = *(_DWORD *)(a1 + 428);
  v56 = *(_DWORD *)(a1 + 220);
  if (*(_DWORD *)(a1 + 200) == 2)
    ReconstructRow(a1, (int *)(a1 + 216));
  if (*(_DWORD *)(a1 + 224))
  {
    v5 = *(int *)(a1 + 416);
    if ((int)v5 < *(_DWORD *)(a1 + 424))
    {
      v61 = *(_DWORD *)(a1 + 220);
      v6 = 4 * v5;
      v7 = 8 * v5;
      v8 = 16 * v5;
      do
      {
        v9 = *(_QWORD *)(a1 + 232);
        v10 = *(unsigned __int8 *)(v9 + v6);
        if (*(_BYTE *)(v9 + v6))
        {
          if (v10 <= 2)
            FinishRow_cold_2();
          v11 = *(_DWORD *)(a1 + 216);
          v12 = *(unsigned int *)(a1 + 2880);
          v13 = *(_QWORD *)(a1 + 2856) + 16 * v11 * (int)v12 + v8;
          if (*(_DWORD *)(a1 + 2920) == 1)
          {
            if (v5 >= 1)
              VP8SimpleHFilter16(*(_QWORD *)(a1 + 2856) + 16 * v11 * (int)v12 + v8, *(unsigned int *)(a1 + 2880), (v10 + 4));
            v14 = v9 + v6;
            if (*(_BYTE *)(v14 + 2))
              VP8SimpleHFilter16i(v13, v12, v10);
            if (v61 >= 1)
              VP8SimpleVFilter16(v13, v12, (v10 + 4));
            if (*(_BYTE *)(v14 + 2))
              VP8SimpleVFilter16i(v13, v12, v10);
          }
          else
          {
            v62 = *(_DWORD *)(a1 + 2880);
            v68 = *(_QWORD *)(a1 + 2856) + 16 * v11 * (int)v12 + v8;
            v15 = *(unsigned __int8 *)(v9 + v6 + 1);
            v16 = *(unsigned int *)(a1 + 2884);
            v17 = 8 * v11 * v16;
            v18 = v9 + v6;
            v19 = *(unsigned __int8 *)(v18 + 3);
            v66 = *(_QWORD *)(a1 + 2864) + v17 + v7;
            v64 = *(_QWORD *)(a1 + 2872) + v17 + v7;
            if (v5 >= 1)
            {
              VP8HFilter16(v68, v62, (v10 + 4), v15, v19);
              VP8HFilter8(v66, v64, v16, (v10 + 4), v15, v19);
            }
            if (*(_BYTE *)(v18 + 2))
            {
              VP8HFilter16i(v68, v62, v10, v15, v19);
              VP8HFilter8i(v66, v64, v16, v10, v15, v19);
            }
            if (v61 >= 1)
            {
              VP8VFilter16(v68, v62, (v10 + 4), v15, v19);
              VP8VFilter8(v66, v64, v16, (v10 + 4), v15, v19);
            }
            if (*(_BYTE *)(v18 + 2))
            {
              VP8VFilter16i(v68, v62, v10, v15, v19);
              VP8VFilter8i(v66, v64, v16, v10, v15, v19);
            }
          }
        }
        ++v5;
        v6 += 4;
        v7 += 8;
        v8 += 16;
      }
      while (v5 < *(int *)(a1 + 424));
    }
  }
  v69 = v59 * (uint64_t)v57;
  v20 = 8 * v59 * v51;
  v63 = (v60 >> 1) * v51;
  v65 = v54 - v57 * (uint64_t)(int)v60;
  v67 = v52 - v63;
  if (*(_DWORD *)(a1 + 824))
  {
    v21 = *(int *)(a1 + 416);
    v22 = *(_DWORD *)(a1 + 424);
    if ((int)v21 < v22)
    {
      v23 = 8 * v21;
      v24 = 800 * (int)v21 + 796;
      do
      {
        v25 = *(_QWORD *)(a1 + 240);
        v26 = *(unsigned __int8 *)(v25 + v24);
        if (v26 >= 4)
        {
          v27 = *(unsigned int *)(a1 + 2884);
          v28 = 8 * v27 * *(_DWORD *)(a1 + 216);
          v29 = *(_QWORD *)(a1 + 2872) + v28 + v23;
          Dither8x8((int32x2_t *)(a1 + 828), a3, a4, *(_QWORD *)(a1 + 2864) + v28 + v23, v27, v26);
          Dither8x8((int32x2_t *)(a1 + 828), v30, v31, v29, v27, *(unsigned __int8 *)(v25 + v24));
          v22 = *(_DWORD *)(a1 + 424);
        }
        ++v21;
        v23 += 8;
        v24 += 800;
      }
      while (v21 < v22);
    }
  }
  v32 = v55 - 1;
  if (*((_QWORD *)a2 + 8))
  {
    v33 = v56;
    if (v56)
    {
      v34 = v60;
      v35 = 16 * v56 - v60;
      v36 = v65 + 16 * v69;
      v37 = v53 - v63 + v20;
      v38 = v67 + v20;
    }
    else
    {
      v35 = 0;
      v36 = *(_QWORD *)(a1 + 2856) + 16 * v69;
      v37 = *(_QWORD *)(a1 + 2864) + v20;
      v38 = *(_QWORD *)(a1 + 2872) + v20;
      v34 = v60;
    }
    v40 = 0;
    *((_QWORD *)a2 + 3) = v36;
    *((_QWORD *)a2 + 4) = v37;
    *((_QWORD *)a2 + 5) = v38;
    if (v56 < v32)
      v41 = v34;
    else
      v41 = 0;
    if ((int)(16 * v56 + 16 - v41) >= a2[33])
      v42 = a2[33];
    else
      v42 = 16 * v56 + 16 - v41;
    *((_QWORD *)a2 + 19) = 0;
    if (*(_QWORD *)(a1 + 2968))
    {
      if (v42 > (int)v35)
      {
        v40 = VP8DecompressAlphaRows(a1, a2, v35, v42 - (int)v35);
        *((_QWORD *)a2 + 19) = v40;
        if (!v40)
          return VP8SetError(a1, 3, (uint64_t)"Could not decode alpha data.");
      }
    }
    v43 = a2[32];
    v44 = v43 - v35;
    if (v43 > (int)v35)
    {
      if ((v44 & 1) != 0)
        FinishRow_cold_1();
      v45 = *(_DWORD *)(a1 + 2884);
      v46 = *((_QWORD *)a2 + 4) + v45 * (uint64_t)(v44 >> 1);
      *((_QWORD *)a2 + 3) += *(int *)(a1 + 2880) * (uint64_t)v44;
      *((_QWORD *)a2 + 4) = v46;
      *((_QWORD *)a2 + 5) += v45 * (uint64_t)(v44 >> 1);
      if (v40)
      {
        v40 += *a2 * (uint64_t)v44;
        *((_QWORD *)a2 + 19) = v40;
      }
      LODWORD(v35) = v43;
    }
    if (v42 <= (int)v35)
    {
      v39 = 1;
    }
    else
    {
      v47 = a2[30];
      v48 = *((_QWORD *)a2 + 4) + ((int)v47 >> 1);
      *((_QWORD *)a2 + 3) += v47;
      *((_QWORD *)a2 + 4) = v48;
      *((_QWORD *)a2 + 5) += (int)v47 >> 1;
      if (v40)
        *((_QWORD *)a2 + 19) = v40 + v47;
      v49 = a2[31] - v47;
      a2[2] = v35 - v43;
      a2[3] = v49;
      a2[4] = v42 - v35;
      v39 = (*((uint64_t (**)(int *))a2 + 8))(a2);
    }
  }
  else
  {
    v39 = 1;
    v34 = v60;
    v33 = v56;
  }
  if (v59 + 1 == *(_DWORD *)(a1 + 208) && v33 < v32)
  {
    memcpy((void *)(*(_QWORD *)(a1 + 2856) - v57 * (uint64_t)(int)v34), (const void *)(v65 + 16 * v69 + 16 * *(int *)(a1 + 2880)), v57 * (uint64_t)(int)v34);
    memcpy((void *)(*(_QWORD *)(a1 + 2864) - v63), (const void *)(v53 - v63 + v20 + 8 * *(int *)(a1 + 2884)), v63);
    memcpy((void *)(*(_QWORD *)(a1 + 2872) - v63), (const void *)(v67 + v20 + 8 * *(int *)(a1 + 2884)), v63);
  }
  return v39;
}

uint64_t VP8EnterCritical(unsigned int *a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t);
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  char v26;
  signed int v27;
  int v28;
  uint64_t v29;
  char v30;

  v4 = *(unsigned int (**)(uint64_t))(a2 + 72);
  if (v4 && !v4(a2))
  {
    VP8SetError((uint64_t)a1, 6, (uint64_t)"Frame setup failed");
    return *a1;
  }
  if (*(_DWORD *)(a2 + 112))
  {
    v5 = 0;
    LODWORD(v6) = 0;
    a1[730] = 0;
  }
  else
  {
    v6 = (int)a1[730];
    v5 = kFilterExtraRows[v6];
    if ((_DWORD)v6 == 2)
    {
      a1[104] = 0;
      v7 = a1 + 105;
      LODWORD(v6) = 2;
LABEL_13:
      *v7 = 0;
      goto LABEL_14;
    }
  }
  v8 = *(_DWORD *)(a2 + 120) - v5;
  a1[104] = v8 >> 4;
  v9 = *(_DWORD *)(a2 + 128) - v5;
  a1[105] = v9 >> 4;
  if (v8 < 0)
  {
    a1[104] = 0;
    if (v9 < 0)
    {
LABEL_12:
      v7 = a1 + 105;
      goto LABEL_13;
    }
  }
  else if (v9 < 0)
  {
    goto LABEL_12;
  }
LABEL_14:
  v11 = v5 + 15;
  v12 = (v11 + *(_DWORD *)(a2 + 132)) >> 4;
  a1[107] = v12;
  v13 = (v11 + *(_DWORD *)(a2 + 124)) >> 4;
  if (v13 >= (int)a1[102])
    v13 = a1[102];
  a1[106] = v13;
  v14 = a1[103];
  if (v12 > v14)
    a1[107] = v14;
  if ((int)v6 >= 1)
  {
    v15 = 0;
    v16 = a1[33];
    v17 = a1[24];
    do
    {
      if (v16)
      {
        v18 = *((char *)a1 + v15 + 148);
        if (!a1[35])
          v18 += a1[22];
      }
      else
      {
        v18 = a1[22];
      }
      v19 = 0;
      v20 = 1;
      do
      {
        v21 = v20;
        v22 = v18;
        if (v17)
        {
          v22 = a1[25] + v18;
          if ((v20 & 1) == 0)
            v22 += a1[29];
        }
        v23 = &a1[2 * v15 + 731 + v19];
        if (v22 >= 63)
          v22 = 63;
        if (v22 < 1)
        {
          *(_BYTE *)v23 = 0;
        }
        else
        {
          v24 = v22 & ~(v22 >> 31);
          v25 = a1[23];
          if (v25 <= 4)
            v26 = 1;
          else
            v26 = 2;
          v27 = v24 >> v26;
          if (v27 >= 9 - v25)
            v27 = 9 - v25;
          if (v25 >= 1)
            v28 = v27;
          else
            v28 = v24;
          if (v28 <= 1)
            LOBYTE(v28) = 1;
          v29 = (uint64_t)&a1[2 * v15 + v19];
          *(_BYTE *)(v29 + 2925) = v28;
          *(_BYTE *)v23 = v28 + 2 * v24;
          v30 = v24 > 0xE;
          if (v24 > 0x27)
            v30 = 2;
          *(_BYTE *)(v29 + 2927) = v30;
        }
        v20 = 0;
        BYTE2(a1[2 * v15 + 731 + v19]) = v19;
        v19 = 1;
      }
      while ((v21 & 1) != 0);
      ++v15;
    }
    while (v15 != 4);
  }
  return 0;
}

uint64_t VP8ExitCritical(uint64_t a1, uint64_t a2)
{
  uint64_t (**v4)();
  uint64_t v5;
  void (*v6)(uint64_t);

  if (*(int *)(a1 + 200) < 1)
  {
    v5 = 1;
  }
  else
  {
    v4 = WebPGetWorkerInterface();
    v5 = ((uint64_t (*)(uint64_t))v4[2])(a1 + 152);
  }
  v6 = *(void (**)(uint64_t))(a2 + 80);
  if (v6)
    v6(a2);
  return v5;
}

uint64_t VP8GetThreadMethod(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(_DWORD *)(a1 + 40) && *(_DWORD *)(a2 + 64))
    VP8GetThreadMethod_cold_1();
  return 0;
}

uint64_t VP8InitFrame(uint64_t a1, uint64_t a2)
{
  uint64_t (**v4)();
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;

  *(_DWORD *)(a1 + 204) = 0;
  if (*(int *)(a1 + 200) < 1)
  {
    v5 = 1;
LABEL_7:
    *(_DWORD *)(a1 + 208) = v5;
    goto LABEL_8;
  }
  v4 = WebPGetWorkerInterface();
  if (((unsigned int (*)(uint64_t))v4[1])(a1 + 152))
  {
    *(_QWORD *)(a1 + 176) = a1;
    *(_QWORD *)(a1 + 184) = a1 + 248;
    *(_QWORD *)(a1 + 168) = FinishRow;
    if (*(int *)(a1 + 2920) <= 0)
      v5 = 2;
    else
      v5 = 3;
    goto LABEL_7;
  }
  result = VP8SetError(a1, 1, (uint64_t)"thread initialization failed.");
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)(a1 + 208);
LABEL_8:
  v6 = *(int *)(a1 + 408);
  v7 = 4 * v6;
  v8 = 32 * v6;
  v9 = 2 * ((int)v6 + 1);
  v10 = *(int *)(a1 + 2920);
  v11 = *(_DWORD *)(a1 + 200);
  if (v10 <= 0)
    v12 = 0;
  else
    v12 = 4 * (int)((_DWORD)v6 << (v11 > 0));
  v13 = 800 * (int)((_DWORD)v6 << (v11 == 2));
  v14 = 16 * v5;
  v15 = 3 * (v14 + kFilterExtraRows[v10]);
  v16 = v15 + (v15 < 0);
  v17 = v8 * ((uint64_t)v16 >> 1);
  if (*(_QWORD *)(a1 + 2968))
    v18 = *(unsigned __int16 *)(a1 + 78) * (unint64_t)*(unsigned __int16 *)(a1 + 76);
  else
    v18 = 0;
  v19 = v7 + v8 + v9 + v12 + v13 + v18 + v17 + 863;
  v20 = *(char **)(a1 + 2888);
  if (v19 <= *(_QWORD *)(a1 + 2896))
  {
    v19 = *(_QWORD *)(a1 + 2896);
LABEL_18:
    *(_QWORD *)(a1 + 2808) = v20;
    *(_QWORD *)(a1 + 2824) = &v20[v7];
    v21 = &v20[v7 + v8];
    *(_QWORD *)(a1 + 2832) = v21 + 2;
    if (v12)
      v22 = &v21[v9];
    else
      v22 = 0;
    *(_QWORD *)(a1 + 2840) = v22;
    v23 = (uint64_t)&v21[v9 + v12];
    *(_DWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 232) = v22;
    if ((int)v10 >= 1)
    {
      if (v11 <= 0)
      {
        v24 = (v23 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)(a1 + 2848) = v24;
        v26 = v24 + 832;
        *(_QWORD *)(a1 + 2912) = v24 + 832;
LABEL_31:
        *(_QWORD *)(a1 + 240) = v26;
        v28 = v24 + v13 + 832;
        *(_DWORD *)(a1 + 2880) = 16 * v6;
        *(_DWORD *)(a1 + 2884) = 8 * v6;
        v29 = kFilterExtraRows[(int)v10];
        v30 = v29 >> 1;
        v31 = v28 + 16 * v6 * v29;
        *(_QWORD *)(a1 + 2856) = v31;
        v32 = v31 + 16 * (int)v6 * v14 + v30 * (uint64_t)(8 * (int)v6);
        *(_QWORD *)(a1 + 2864) = v32;
        *(_QWORD *)(a1 + 2872) = v32 + 8 * v5 * 8 * v6 + v30 * (uint64_t)(8 * (int)v6);
        *(_DWORD *)(a1 + 204) = 0;
        v33 = v28 + v17;
        if (v18)
          v34 = v28 + v17;
        else
          v34 = 0;
        *(_QWORD *)(a1 + 3000) = v34;
        if (v33 + v18 > (unint64_t)&v20[v19])
          VP8InitFrame_cold_1();
        v35 = v7;
        bzero(&v20[v7 + v8], 2 * ((int)v6 + 1));
        VP8InitScanline(a1);
        bzero(*(void **)(a1 + 2808), v35);
        goto LABEL_36;
      }
      *(_QWORD *)(a1 + 232) = &v22[4 * v6];
    }
    v24 = (v23 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 2848) = v24;
    *(_QWORD *)(a1 + 2912) = v24 + 832;
    if (v11 == 2)
      v25 = v6;
    else
      v25 = 0;
    v26 = v24 + 832 + 800 * v25;
    goto LABEL_31;
  }
  v38 = v8 * ((uint64_t)v16 >> 1);
  _TIFFfree(v20);
  *(_QWORD *)(a1 + 2896) = 0;
  v20 = (char *)WebPSafeMalloc(v19, 1uLL);
  *(_QWORD *)(a1 + 2888) = v20;
  if (v20)
  {
    *(_QWORD *)(a1 + 2896) = v19;
    LODWORD(v10) = *(_DWORD *)(a1 + 2920);
    v11 = *(_DWORD *)(a1 + 200);
    v17 = v38;
    v7 = 4 * v6;
    v14 = 16 * v5;
    goto LABEL_18;
  }
  result = VP8SetError(a1, 1, (uint64_t)"no memory during frame initialization.");
  if ((_DWORD)result)
  {
LABEL_36:
    *(_DWORD *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 2856);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 2880);
    *(_QWORD *)(a2 + 152) = 0;
    VP8DspInit(result, v36, v37);
    return 1;
  }
  return result;
}

uint64_t Dither8x8(int32x2_t *a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v6;
  int8x8_t v7;
  unsigned int v8;
  int32x2_t v9;
  _OWORD v11[4];
  uint64_t v12;

  v6 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v7 = (int8x8_t)*a1;
  a3.n128_u64[0] = 0x3700000037;
  do
  {
    v8 = a1[1].i32[v7.i32[0]] - a1[1].i32[v7.i32[1]];
    a1[1].i32[v7.i32[0]] = v8 & 0x7FFFFFFF;
    v9 = vadd_s32(*a1, (int32x2_t)0x100000001);
    v7 = vbic_s8((int8x8_t)v9, (int8x8_t)vceq_s32(v9, (int32x2_t)0x3700000037));
    *a1 = (int32x2_t)v7;
    *((_BYTE *)v11 + v6++) = ((unsigned __int16)(((__int16)(v8 >> 15) >> 8) * a6) >> 8) ^ 0x80;
  }
  while (v6 != 64);
  return VP8DitherCombine8x8(v11, (__n128)0x100000001uLL, a3);
}

void VP8InitDithering_cold_1()
{
  __assert_rtn("VP8InitDithering", "frame_dec.c", 330, "dec != NULL");
}

void VP8ProcessRow_cold_1()
{
  __assert_rtn("VP8ProcessRow", "frame_dec.c", 517, "worker->status_ == OK");
}

void FinishRow_cold_1()
{
  __assert_rtn("FinishRow", "frame_dec.c", 464, "!(delta_y & 1)");
}

void FinishRow_cold_2()
{
  __assert_rtn("DoFilter", "frame_dec.c", 214, "limit >= 3");
}

void VP8GetThreadMethod_cold_1()
{
  __assert_rtn("VP8GetThreadMethod", "frame_dec.c", 669, "headers == NULL || !headers->is_lossless");
}

void VP8InitFrame_cold_1()
{
  __assert_rtn("AllocateMemory", "frame_dec.c", 772, "mem <= (uint8_t*)dec->mem_ + dec->mem_size_");
}

void VP8DspInitNEON()
{
  VP8Transform = (uint64_t (*)(_QWORD, _QWORD, _QWORD))TransformTwo_NEON;
  VP8TransformAC3 = (uint64_t)TransformAC3_NEON;
  VP8TransformDC = (uint64_t (*)(_QWORD, _QWORD))TransformDC_NEON;
  VP8TransformWHT = TransformWHT_NEON;
  VP8VFilter16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))VFilter16_NEON;
  VP8VFilter16i = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))VFilter16i_NEON;
  VP8HFilter16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))HFilter16_NEON;
  VP8HFilter16i = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))HFilter16i_NEON;
  VP8VFilter8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))VFilter8_NEON;
  VP8VFilter8i = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))VFilter8i_NEON;
  VP8HFilter8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))HFilter8_NEON;
  VP8HFilter8i = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))HFilter8i_NEON;
  VP8SimpleVFilter16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))SimpleVFilter16_NEON;
  VP8SimpleHFilter16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))SimpleHFilter16_NEON;
  VP8SimpleVFilter16i = (uint64_t (*)(_QWORD, _QWORD, _QWORD))SimpleVFilter16i_NEON;
  VP8SimpleHFilter16i = (uint64_t (*)(_QWORD, _QWORD, _QWORD))SimpleHFilter16i_NEON;
  VP8PredLuma4[0] = (uint64_t)DC4_NEON;
  qword_1EDF095A0 = (uint64_t)TM4_NEON;
  qword_1EDF095A8 = (uint64_t)VE4_NEON;
  qword_1EDF095B8 = (uint64_t)RD4_NEON;
  qword_1EDF095C8 = (uint64_t)LD4_NEON;
  VP8PredLuma16[0] = (uint64_t)DC16TopLeft_NEON;
  qword_1EDF09568 = (uint64_t)TM16_NEON;
  qword_1EDF09570 = (uint64_t)VE16_NEON;
  qword_1EDF09578 = (uint64_t)HE16_NEON;
  qword_1EDF09580 = (uint64_t)DC16NoTop_NEON;
  qword_1EDF09588 = (uint64_t)DC16NoLeft_NEON;
  qword_1EDF09590 = (uint64_t)DC16NoTopLeft_NEON;
  VP8PredChroma8[0] = (uint64_t)DC8uv_NEON;
  qword_1EDF09530 = (uint64_t)TM8uv_NEON;
  qword_1EDF09538 = (uint64_t)VE8uv_NEON;
  qword_1EDF09540 = (uint64_t)HE8uv_NEON;
  qword_1EDF09548 = (uint64_t)DC8uvNoTop_NEON;
  qword_1EDF09550 = (uint64_t)DC8uvNoLeft_NEON;
  qword_1EDF09558 = (uint64_t)DC8uvNoTopLeft_NEON;
}

int8x8_t TransformTwo_NEON(int8x16_t *a1, __int32 *a2, int a3)
{
  int8x8_t result;

  result = TransformOne_NEON(a1, a2);
  if (a3)
    return TransformOne_NEON(a1 + 2, a2 + 1);
  return result;
}

int8x8_t TransformAC3_NEON(uint64_t a1, __int32 *a2)
{
  const __int16 *v2;
  int16x4_t v3;
  int v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int8x8_t v10;
  int8x8_t result;

  v2 = (const __int16 *)a1;
  v3 = vld1_dup_s16(v2++);
  v4 = *(__int16 *)(a1 + 8);
  v5 = vdup_n_s16((35468 * v4) >> 16);
  v6 = vdup_n_s16((85627 * v4) >> 16);
  v7 = vqadd_s16(v3, (int16x4_t)((35468 * *v2) & 0xFFFF0000 | ((85627 * *v2) >> 16) | ((unint64_t)(unsigned __int16)-((35468 * *v2) >> 16) << 32) | ((unint64_t)-((85627 * *v2) >> 16) << 48)));
  *(int16x4_t *)v8.i8 = vqadd_s16(v7, v6);
  v8.u64[1] = (unint64_t)vqadd_s16(v7, v5);
  *(int16x4_t *)v9.i8 = vqsub_s16(v7, v5);
  v9.u64[1] = (unint64_t)vqsub_s16(v7, v6);
  v7.i32[0] = *a2;
  v7.i32[1] = a2[8];
  v6.i32[0] = a2[16];
  v6.i32[1] = a2[24];
  v10 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v7), v8, 3uLL));
  *a2 = v10.i32[0];
  a2[8] = v10.i32[1];
  result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)v6), v9, 3uLL));
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

int8x8_t TransformDC_NEON(const __int16 *a1, __int32 *a2)
{
  int16x8_t v2;
  uint8x8_t v3;
  uint8x8_t v4;
  int16x8_t v5;
  int8x8_t result;

  v2 = vld1q_dup_s16(a1);
  v3.i32[0] = *a2;
  v3.i32[1] = a2[8];
  v4.i32[0] = a2[16];
  v4.i32[1] = a2[24];
  v5 = vrsraq_n_s16((int16x8_t)vmovl_u8(v4), v2, 3uLL);
  *(int8x8_t *)v2.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(v3), v2, 3uLL));
  *a2 = v2.i32[0];
  a2[8] = v2.i32[1];
  result = vqmovun_s16(v5);
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

uint32x4_t TransformWHT_NEON(int16x4_t *a1, _WORD *a2)
{
  int16x4_t v2;
  int16x4_t v3;
  int16x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = vaddl_s16(v4, *a1);
  v6 = vaddl_s16(v3, v2);
  v7 = vsubl_s16(v2, v3);
  v8 = vsubl_s16(*a1, v4);
  v9 = vaddq_s32(v5, v6);
  v10 = vaddq_s32(v8, v7);
  v11 = (int64x2_t)vsubq_s32(v5, v6);
  v12 = (int64x2_t)vsubq_s32(v8, v7);
  v13 = (int32x4_t)vzip2q_s64((int64x2_t)v9, v11);
  v9.i64[1] = v11.i64[0];
  v14 = (int32x4_t)vzip2q_s64((int64x2_t)v10, v12);
  v10.i64[1] = v12.i64[0];
  v15 = vtrn1q_s32(v9, v10);
  v16 = vtrn2q_s32(v9, v10);
  v17 = vtrn1q_s32(v13, v14);
  v18 = vtrn2q_s32(v13, v14);
  v14.i64[0] = 0x300000003;
  v14.i64[1] = 0x300000003;
  v19 = vaddq_s32(v15, v14);
  v20 = vaddq_s32(v19, v18);
  v21 = vaddq_s32(v16, v17);
  v22 = vsubq_s32(v16, v17);
  v23 = vsubq_s32(v19, v18);
  v24 = vshrq_n_u32((uint32x4_t)vaddq_s32(v20, v21), 3uLL);
  v25 = vshrq_n_u32((uint32x4_t)vaddq_s32(v23, v22), 3uLL);
  *a2 = v24.i16[0];
  a2[16] = v25.i16[0];
  v26 = (uint32x4_t)vsubq_s32(v23, v22);
  v27 = vshrq_n_u32((uint32x4_t)vsubq_s32(v20, v21), 3uLL);
  result = vshrq_n_u32(v26, 3uLL);
  a2[32] = v27.i16[0];
  a2[48] = result.i16[0];
  a2[64] = v24.i16[2];
  a2[80] = v25.i16[2];
  a2[96] = v27.i16[2];
  a2[112] = result.i16[2];
  a2[128] = v24.i16[4];
  a2[144] = v25.i16[4];
  a2[160] = v27.i16[4];
  a2[176] = result.i16[4];
  a2[192] = v24.i16[6];
  a2[208] = v25.i16[6];
  a2[224] = v27.i16[6];
  a2[240] = result.i16[6];
  return result;
}

double VFilter16_NEON(uint8x16_t *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint8x16_t *v7;
  uint8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint8x16_t *v12;
  int8x16_t v13;
  uint8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  double result;
  int8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x16_t v30;

  v7 = (uint8x16_t *)((char *)a1 - 2 * a2);
  v8 = (uint8x16_t *)((char *)v7 - a2);
  v9 = *(int8x16_t *)v8;
  v10 = *(int8x16_t *)((char *)v7 + a2);
  v11 = *(int8x16_t *)v7;
  v12 = (uint8x16_t *)((char *)a1 + 2 * a2);
  v13 = *(int8x16_t *)a1;
  v14 = (uint8x16_t *)((char *)v12 - a2);
  v15 = *(int8x16_t *)v14;
  v16 = *(int8x16_t *)v12;
  v17 = vabdq_u8(*v7, (uint8x16_t)v10);
  v18 = vabdq_u8(*v14, *a1);
  v19 = vabdq_u8((uint8x16_t)v10, *a1);
  v20 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v19, v19), vshrq_n_u8(vabdq_u8(*v7, *v14), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(*(uint8x16_t *)((char *)v7 - 2 * a2), *v8), vabdq_u8(*v8, *v7)), vmaxq_u8(v17, vabdq_u8(*(uint8x16_t *)((char *)v12 + a2), *v12))), vmaxq_u8(vabdq_u8(*v12, *v14), v18))));
  v30 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  DoFilter6_NEON((int8x16_t *)&v30, &v29, &v28, &v27, (int8x16_t *)&v26, &v25, v9, v11, v10, v13, v15, v16, v20, (int8x16_t)vcgtq_u8(vmaxq_u8(v17, v18), (uint8x16_t)vdupq_n_s8(a5)));
  v21 = v29;
  *v8 = v30;
  *v7 = (uint8x16_t)v21;
  v22 = v27;
  *(int8x16_t *)((char *)a1 - a2) = v28;
  *a1 = (uint8x16_t)v22;
  v24 = v25;
  result = *(double *)v26.i64;
  *v14 = v26;
  *v12 = (uint8x16_t)v24;
  return result;
}

uint8x16_t *VFilter16i_NEON(uint8x16_t *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int8x16_t *v5;
  uint8x16_t v6;
  uint8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t *v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int8x16_t v22;
  uint8x16_t v23;
  uint8x16_t v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v27;
  uint8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;

  v5 = (int8x16_t *)((char *)result + 2 * a2);
  v6 = *result;
  v7 = *(uint8x16_t *)((char *)v5 - a2);
  v8 = *v5;
  v9 = *(int8x16_t *)((char *)v5 + a2);
  v10 = (uint8x16_t)vdupq_n_s8(a4);
  v11 = (uint8x16_t)vdupq_n_s8(a3);
  v12 = (uint8x16_t)vdupq_n_s8(a5);
  v13 = (uint8x16_t *)((char *)result + 4 * a2);
  v14 = -3;
  v15.i64[0] = 0x8080808080808080;
  v15.i64[1] = 0x8080808080808080;
  v16.i64[0] = 0x303030303030303;
  v16.i64[1] = 0x303030303030303;
  v17.i64[0] = 0x404040404040404;
  v17.i64[1] = 0x404040404040404;
  do
  {
    v18 = *(int8x16_t *)((char *)v13 + a2);
    v19 = vabdq_u8(v7, (uint8x16_t)v8);
    v20 = vabdq_u8((uint8x16_t)v8, (uint8x16_t)v9);
    v21 = vabdq_u8((uint8x16_t)v8, (uint8x16_t)v18);
    v22 = veorq_s8(v8, v15);
    v23 = *(uint8x16_t *)((char *)v13 + 2 * a2);
    v24 = vabdq_u8((uint8x16_t)v9, *v13);
    v25 = veorq_s8(v9, v15);
    v26 = *(uint8x16_t *)((char *)v13 + 3 * a2);
    v27 = vabdq_u8(v6, v7);
    v28 = vabdq_u8((uint8x16_t)v18, *v13);
    v29 = vandq_s8((int8x16_t)vcgeq_u8(v11, vqaddq_u8(vqaddq_u8(v24, v24), vshrq_n_u8(v21, 1uLL))), (int8x16_t)vcgeq_u8(v10, vmaxq_u8(vmaxq_u8(vmaxq_u8(v27, v19), vmaxq_u8(v20, vabdq_u8(v26, v23))), vmaxq_u8(vabdq_u8(v23, (uint8x16_t)v18), v28))));
    v30 = veorq_s8(*(int8x16_t *)v13, v15);
    v31 = veorq_s8(v18, v15);
    v32 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v20, v28), v12), v29);
    v33 = vqsubq_s8(v30, v25);
    v34 = vandq_s8(vqaddq_s8(v33, vqaddq_s8(v33, vqaddq_s8(vqsubq_s8(v22, v31), v33))), v32);
    v35 = vqaddq_s8(v25, vshrq_n_s8(vqaddq_s8(v34, v16), 3uLL));
    v36 = vqsubq_s8(v30, vshrq_n_s8(vqaddq_s8(v34, v17), 3uLL));
    v37 = vqsubq_s8(v36, v35);
    v38 = vandq_s8(vqaddq_s8(v37, vqaddq_s8(v37, v37)), veorq_s8(v32, v29));
    v39 = vshrq_n_s8(vqaddq_s8(v38, v17), 3uLL);
    v40 = vrshrq_n_s8(v39, 1uLL);
    v41 = veorq_s8(vqaddq_s8(v35, vshrq_n_s8(vqaddq_s8(v38, v16), 3uLL)), v15);
    v6 = (uint8x16_t)veorq_s8(vqsubq_s8(v36, v39), v15);
    v7 = (uint8x16_t)veorq_s8(vqsubq_s8(v31, v40), v15);
    *(int8x16_t *)((char *)v13 - 2 * a2) = veorq_s8(vqaddq_s8(v22, v40), v15);
    *(int8x16_t *)((char *)v13 - a2) = v41;
    *v13 = v6;
    *(uint8x16_t *)((char *)v13 + a2) = v7;
    v13 = (uint8x16_t *)((char *)v13 + 4 * a2);
    v8 = (int8x16_t)v23;
    v9 = (int8x16_t)v26;
  }
  while (!__CFADD__(v14++, 1));
  return result;
}

int8x16_t HFilter16_NEON(__int8 *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v7;
  __int8 *v8;
  __int8 *v9;
  __int8 *v10;
  int8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint64_t v15;
  __int8 *v16;
  __int8 *v17;
  uint64_t v18;
  __int8 *v19;
  __int8 *v20;
  uint64_t v21;
  __int8 *v22;
  __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  uint8x16_t v32;
  uint8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  __int8 *v36;
  __int8 *v37;
  __int8 *v38;
  __int8 *v39;
  __int8 *v40;
  __int8 *v41;
  __int8 *v42;
  __int8 *v43;
  __int8 *v44;
  __int8 *v45;
  __int8 *v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  __int8 *v52;
  __int8 *v53;
  __int8 *v54;
  __int8 *v55;
  __int8 *v56;
  __int8 *v57;
  __int8 *v58;
  __int8 *v59;
  __int8 *v60;
  unint64_t v61;
  unint64_t v62;
  __int8 *v63;
  __int8 *v64;
  __int8 *v65;
  __int8 *v66;
  __int8 *v67;
  __int8 *v68;
  __int8 *v69;
  int8x16_t v70;
  int8x16_t v71;
  __int8 *v72;
  __int8 *v73;
  __int8 *v74;
  __int8 *v75;
  __int8 *v76;
  __int8 *v77;
  __int8 *v78;
  __int8 *v79;
  unint64_t v80;
  unint64_t v81;
  __int8 *v82;
  __int8 *v83;
  __int8 *v84;
  __int8 *v85;
  __int8 *v86;
  __int8 *v87;
  __int8 *v88;
  int8x16_t result;
  int8x16_t v90;
  __int8 *v91;
  __int8 *v92;
  __int8 *v93;
  __int8 *v94;
  __int8 *v95;
  __int8 *v96;
  __int8 *v97;
  __int8 *v98;
  unint64_t v99;
  unint64_t v100;
  __int8 *v101;
  __int8 *v102;
  __int8 *v103;
  __int8 *v104;
  __int8 *v105;
  __int8 *v106;
  __int8 *v107;
  int8x16_t v108;
  __n128 v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;

  v7 = 8 * a2;
  v8 = &a1[a2 - 4];
  v9 = &a1[2 * a2 - 4];
  v14.i8[0] = *(a1 - 4);
  v11.i8[0] = *(a1 - 3);
  v12.i8[0] = *(a1 - 2);
  v13.i8[0] = *(a1 - 1);
  v10 = &a1[v7 - 4];
  v14.i8[1] = *v8;
  v11.i8[1] = v8[1];
  v12.i8[1] = v8[2];
  v13.i8[1] = v8[3];
  v14.i8[2] = *v9;
  v11.i8[2] = v9[1];
  v12.i8[2] = v9[2];
  v13.i8[2] = v9[3];
  v15 = 3 * a2;
  v16 = &a1[v15 - 4];
  v14.i8[3] = *v16;
  v11.i8[3] = v16[1];
  v12.i8[3] = v16[2];
  v13.i8[3] = v16[3];
  v17 = &a1[4 * a2 - 4];
  v18 = 5 * a2;
  v19 = &a1[v18 - 4];
  v14.i8[4] = *v17;
  v11.i8[4] = v17[1];
  v12.i8[4] = v17[2];
  v13.i8[4] = v17[3];
  v20 = &a1[6 * a2 - 4];
  v14.i8[5] = *v19;
  v11.i8[5] = v19[1];
  v12.i8[5] = v19[2];
  v13.i8[5] = v19[3];
  v14.i8[6] = *v20;
  v11.i8[6] = v20[1];
  v12.i8[6] = v20[2];
  v13.i8[6] = v20[3];
  v21 = 7 * a2;
  v22 = &a1[v21 - 4];
  v14.i8[7] = *v22;
  v11.i8[7] = v22[1];
  v12.i8[7] = v22[2];
  v13.i8[7] = v22[3];
  LOBYTE(v24) = *v10;
  LOBYTE(v25) = v10[1];
  LOBYTE(v26) = v10[2];
  LOBYTE(v27) = v10[3];
  v23 = &v10[v21];
  v28 = &v10[a2];
  BYTE1(v24) = *v28;
  BYTE1(v25) = v28[1];
  BYTE1(v26) = v28[2];
  BYTE1(v27) = v28[3];
  v29 = &v10[2 * a2];
  BYTE2(v24) = *v29;
  BYTE2(v25) = v29[1];
  BYTE2(v26) = v29[2];
  BYTE2(v27) = v29[3];
  BYTE3(v24) = v10[v15];
  BYTE3(v25) = v10[v15 + 1];
  BYTE3(v26) = v10[v15 + 2];
  BYTE3(v27) = v10[v15 + 3];
  v30 = &v10[4 * a2];
  BYTE4(v24) = *v30;
  BYTE4(v25) = v30[1];
  BYTE4(v26) = v30[2];
  BYTE4(v27) = v30[3];
  BYTE5(v24) = v10[v18];
  BYTE5(v25) = v10[v18 + 1];
  BYTE5(v26) = v10[v18 + 2];
  BYTE5(v27) = v10[v18 + 3];
  v31 = &v10[6 * a2];
  BYTE6(v24) = *v31;
  BYTE6(v25) = v31[1];
  BYTE6(v26) = v31[2];
  BYTE6(v27) = v31[3];
  HIBYTE(v24) = *v23;
  HIBYTE(v25) = v23[1];
  HIBYTE(v26) = v23[2];
  HIBYTE(v27) = v23[3];
  v14.i64[1] = v24;
  v11.i64[1] = v25;
  v32.i8[0] = *a1;
  v33.i8[0] = a1[1];
  v34.i8[0] = a1[2];
  v35.i8[0] = a1[3];
  v36 = &a1[a2];
  v32.i8[1] = *v36;
  v33.i8[1] = v36[1];
  v34.i8[1] = v36[2];
  v35.i8[1] = v36[3];
  v37 = &a1[2 * a2];
  v32.i8[2] = *v37;
  v33.i8[2] = v37[1];
  v34.i8[2] = v37[2];
  v35.i8[2] = v37[3];
  v32.i8[3] = a1[v15];
  v33.i8[3] = a1[v15 + 1];
  v34.i8[3] = a1[v15 + 2];
  v35.i8[3] = a1[v15 + 3];
  v38 = &a1[4 * a2];
  v32.i8[4] = *v38;
  v33.i8[4] = v38[1];
  v34.i8[4] = v38[2];
  v35.i8[4] = v38[3];
  v32.i8[5] = a1[v18];
  v33.i8[5] = a1[v18 + 1];
  v34.i8[5] = a1[v18 + 2];
  v35.i8[5] = a1[v18 + 3];
  v39 = &a1[6 * a2];
  v32.i8[6] = *v39;
  v33.i8[6] = v39[1];
  v34.i8[6] = v39[2];
  v35.i8[6] = v39[3];
  v32.i8[7] = a1[v21];
  v33.i8[7] = a1[v21 + 1];
  v34.i8[7] = a1[v21 + 2];
  v35.i8[7] = a1[v21 + 3];
  v12.i64[1] = v26;
  v13.i64[1] = v27;
  LOBYTE(v24) = a1[v7];
  LOBYTE(v25) = a1[v7 + 1];
  LOBYTE(v26) = a1[v7 + 2];
  LOBYTE(v27) = a1[v7 + 3];
  v40 = &a1[v7 + v21];
  v41 = &a1[v7 + a2];
  BYTE1(v24) = *v41;
  BYTE1(v25) = v41[1];
  BYTE1(v26) = v41[2];
  BYTE1(v27) = v41[3];
  v42 = &a1[2 * a2 + v7];
  BYTE2(v24) = *v42;
  BYTE2(v25) = v42[1];
  BYTE2(v26) = v42[2];
  BYTE2(v27) = v42[3];
  v43 = &a1[v7 + v15];
  BYTE3(v24) = *v43;
  BYTE3(v25) = v43[1];
  BYTE3(v26) = v43[2];
  BYTE3(v27) = v43[3];
  v44 = &a1[4 * a2 + v7];
  BYTE4(v24) = *v44;
  BYTE4(v25) = v44[1];
  BYTE4(v26) = v44[2];
  BYTE4(v27) = v44[3];
  v45 = &a1[v7 + v18];
  BYTE5(v24) = *v45;
  BYTE5(v25) = v45[1];
  BYTE5(v26) = v45[2];
  BYTE5(v27) = v45[3];
  v46 = &a1[6 * a2 + v7];
  BYTE6(v24) = *v46;
  BYTE6(v25) = v46[1];
  BYTE6(v26) = v46[2];
  BYTE6(v27) = v46[3];
  HIBYTE(v24) = *v40;
  HIBYTE(v25) = v40[1];
  HIBYTE(v26) = v40[2];
  HIBYTE(v27) = v40[3];
  v32.i64[1] = v24;
  v33.i64[1] = v25;
  v34.i64[1] = v26;
  v35.i64[1] = v27;
  v47 = vabdq_u8(v12, v13);
  v48 = vabdq_u8(v33, v32);
  v49 = vabdq_u8(v13, v32);
  v113 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v108 = 0u;
  DoFilter6_NEON(&v113, &v112, &v111, &v110, (int8x16_t *)&v109, &v108, v11, (int8x16_t)v12, (int8x16_t)v13, (int8x16_t)v32, (int8x16_t)v33, v34, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a3), vqaddq_u8(vqaddq_u8(v49, v49), vshrq_n_u8(vabdq_u8(v12, v33), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vmaxq_u8(
                     vmaxq_u8(vmaxq_u8(vabdq_u8(v14, (uint8x16_t)v11), vabdq_u8((uint8x16_t)v11, v12)), vmaxq_u8(v47, vabdq_u8(v35, (uint8x16_t)v34))), vmaxq_u8(vabdq_u8((uint8x16_t)v34, v33), v48)))), (int8x16_t)vcgtq_u8(vmaxq_u8(v47, v48), (uint8x16_t)vdupq_n_s8(a5)));
  v50 = v113;
  v51 = v112;
  v52 = &a1[a2 - 3];
  v53 = &a1[2 * a2 - 3];
  v54 = &a1[v15 - 3];
  v55 = &a1[4 * a2 - 3];
  v56 = &a1[v18 - 3];
  v57 = a1 - 3;
  *v57 = v113.i8[0];
  v57[1] = v51.i8[0];
  v58 = &a1[v7 - 3];
  v59 = &a1[2 * v15 - 3];
  v60 = &a1[v21 - 3];
  *v52 = v50.i8[1];
  v52[1] = v51.i8[1];
  *v53 = v50.i8[2];
  v53[1] = v51.i8[2];
  *v54 = v50.i8[3];
  v54[1] = v51.i8[3];
  *v55 = v50.i8[4];
  v55[1] = v51.i8[4];
  *v56 = v50.i8[5];
  v56[1] = v51.i8[5];
  v61 = vextq_s8(v50, v50, 8uLL).u64[0];
  v62 = vextq_s8(v51, v51, 8uLL).u64[0];
  *v59 = v50.i8[6];
  v59[1] = v51.i8[6];
  *v60 = v50.i8[7];
  v60[1] = v51.i8[7];
  v63 = &v58[a2];
  v64 = &v58[2 * a2];
  v65 = &v58[v15];
  v66 = &v58[4 * a2];
  v67 = &v58[v18];
  v68 = &v58[2 * v15];
  *v58 = v61;
  v58[1] = v62;
  v69 = &v58[v21];
  *v63 = BYTE1(v61);
  v63[1] = BYTE1(v62);
  *v64 = BYTE2(v61);
  v64[1] = BYTE2(v62);
  *v65 = BYTE3(v61);
  v65[1] = BYTE3(v62);
  *v66 = BYTE4(v61);
  v66[1] = BYTE4(v62);
  *v67 = BYTE5(v61);
  v67[1] = BYTE5(v62);
  *v68 = BYTE6(v61);
  v68[1] = BYTE6(v62);
  v71 = v110;
  v70 = v111;
  v72 = &a1[a2 - 1];
  v73 = &a1[v15 - 1];
  v74 = &a1[v18 - 1];
  v75 = &a1[2 * a2 - 1];
  v76 = &a1[v21 - 1];
  v77 = &a1[4 * a2 - 1];
  v78 = &a1[2 * v15 - 1];
  *(a1 - 1) = v111.i8[0];
  *a1 = v71.i8[0];
  v79 = &a1[v7 - 1];
  *v69 = HIBYTE(v61);
  v69[1] = HIBYTE(v62);
  *v72 = v70.i8[1];
  v72[1] = v71.i8[1];
  *v75 = v70.i8[2];
  v75[1] = v71.i8[2];
  *v73 = v70.i8[3];
  v73[1] = v71.i8[3];
  *v77 = v70.i8[4];
  v77[1] = v71.i8[4];
  *v74 = v70.i8[5];
  v74[1] = v71.i8[5];
  v80 = vextq_s8(v70, v70, 8uLL).u64[0];
  v81 = vextq_s8(v71, v71, 8uLL).u64[0];
  *v78 = v70.i8[6];
  v78[1] = v71.i8[6];
  *v76 = v70.i8[7];
  v76[1] = v71.i8[7];
  v82 = &v79[a2];
  v83 = &v79[2 * a2];
  v84 = &v79[v15];
  v85 = &v79[v18];
  v86 = &v79[4 * a2];
  v87 = &v79[2 * v15];
  *v79 = v80;
  v79[1] = v81;
  v88 = &v79[v21];
  *v82 = BYTE1(v80);
  v82[1] = BYTE1(v81);
  *v83 = BYTE2(v80);
  v83[1] = BYTE2(v81);
  *v84 = BYTE3(v80);
  v84[1] = BYTE3(v81);
  *v86 = BYTE4(v80);
  v86[1] = BYTE4(v81);
  *v85 = BYTE5(v80);
  v85[1] = BYTE5(v81);
  *v87 = BYTE6(v80);
  v87[1] = BYTE6(v81);
  v90 = v108;
  result = (int8x16_t)v109;
  v91 = &a1[a2 + 1];
  v92 = &a1[2 * a2 + 1];
  v93 = &a1[v15 + 1];
  v94 = &a1[4 * a2 + 1];
  v95 = &a1[v18 + 1];
  v96 = &a1[v21 + 1];
  v97 = &a1[2 * v15 + 1];
  a1[1] = v109.n128_u8[0];
  a1[2] = v90.i8[0];
  v98 = &a1[v7 + 1];
  *v88 = HIBYTE(v80);
  v88[1] = HIBYTE(v81);
  *v91 = result.i8[1];
  v91[1] = v90.i8[1];
  *v92 = result.i8[2];
  v92[1] = v90.i8[2];
  *v93 = result.i8[3];
  v93[1] = v90.i8[3];
  *v94 = result.i8[4];
  v94[1] = v90.i8[4];
  *v95 = result.i8[5];
  v95[1] = v90.i8[5];
  v99 = vextq_s8(result, result, 8uLL).u64[0];
  v100 = vextq_s8(v90, v90, 8uLL).u64[0];
  *v97 = result.i8[6];
  v97[1] = v90.i8[6];
  *v96 = result.i8[7];
  v96[1] = v90.i8[7];
  v101 = &v98[a2];
  v102 = &v98[2 * a2];
  v103 = &v98[v15];
  v104 = &v98[4 * a2];
  v105 = &v98[v18];
  v106 = &v98[2 * v15];
  *v98 = v99;
  v98[1] = v100;
  v107 = &v98[v21];
  *v101 = BYTE1(v99);
  v101[1] = BYTE1(v100);
  *v102 = BYTE2(v99);
  v102[1] = BYTE2(v100);
  *v103 = BYTE3(v99);
  v103[1] = BYTE3(v100);
  *v104 = BYTE4(v99);
  v104[1] = BYTE4(v100);
  *v105 = BYTE5(v99);
  v105[1] = BYTE5(v100);
  *v106 = BYTE6(v99);
  v106[1] = BYTE6(v100);
  *v107 = HIBYTE(v99);
  v107[1] = HIBYTE(v100);
  return result;
}

__int8 *HFilter16i_NEON(__int8 *result, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  __int8 *v11;
  uint64_t v12;
  __int8 *v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int8 *v19;
  __int8 *v20;
  __int8 *v21;
  __int8 *v22;
  int8x16_t v23;
  int8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  __int8 *v27;
  uint8x16_t v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  __int8 *v32;
  __int8 *v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v40;
  uint8x16_t v41;
  uint8x16_t v42;
  __int8 *v43;
  __int8 *v44;
  __int8 *v45;
  __int8 *v46;
  __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint8x16_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  __int8 *v73;
  __int8 *v74;
  __int8 *v75;
  __int8 *v76;
  __int8 *v77;
  __int8 *v78;
  __int8 *v79;
  __int8 *v80;
  __int8 *v81;
  __int8 *v82;
  __int8 *v83;
  __int8 *v84;
  __int8 *v85;
  __int8 *v86;
  __int8 *v87;
  __int8 *v88;

  v5 = 0;
  v6.i8[0] = *result;
  v7.i8[0] = result[1];
  v23.i8[0] = result[2];
  v24.i8[0] = result[3];
  v87 = &result[a2];
  v88 = &result[9 * a2];
  v6.i8[1] = *v87;
  v7.i8[1] = v87[1];
  v23.i8[1] = v87[2];
  v24.i8[1] = v87[3];
  v86 = &result[2 * a2];
  v6.i8[2] = *v86;
  v7.i8[2] = v86[1];
  v23.i8[2] = v86[2];
  v24.i8[2] = v86[3];
  v8 = 3 * a2;
  v85 = &result[v8];
  v6.i8[3] = result[v8];
  v7.i8[3] = result[v8 + 1];
  v23.i8[3] = result[v8 + 2];
  v24.i8[3] = result[v8 + 3];
  v84 = &result[4 * a2];
  v6.i8[4] = *v84;
  v7.i8[4] = v84[1];
  v23.i8[4] = v84[2];
  v24.i8[4] = v84[3];
  v9 = 5 * a2;
  v10 = &result[v9];
  v6.i8[5] = result[v9];
  v7.i8[5] = result[v9 + 1];
  v23.i8[5] = result[v9 + 2];
  v24.i8[5] = result[v9 + 3];
  v11 = &result[6 * a2];
  v6.i8[6] = *v11;
  v7.i8[6] = v11[1];
  v23.i8[6] = v11[2];
  v24.i8[6] = v11[3];
  v12 = 7 * a2;
  v13 = &result[v12];
  v6.i8[7] = result[v12];
  v7.i8[7] = result[v12 + 1];
  v23.i8[7] = result[v12 + 2];
  v24.i8[7] = result[v12 + 3];
  v14 = &result[8 * a2];
  LOBYTE(v15) = *v14;
  LOBYTE(v16) = v14[1];
  LOBYTE(v17) = v14[2];
  LOBYTE(v18) = v14[3];
  v19 = &v14[a2];
  BYTE1(v15) = *v19;
  BYTE1(v16) = v19[1];
  BYTE1(v17) = v19[2];
  BYTE1(v18) = v19[3];
  v20 = &v14[2 * a2];
  BYTE2(v15) = *v20;
  BYTE2(v16) = v20[1];
  BYTE2(v17) = v20[2];
  BYTE2(v18) = v20[3];
  BYTE3(v15) = v14[v8];
  BYTE3(v16) = v14[v8 + 1];
  BYTE3(v17) = v14[v8 + 2];
  BYTE3(v18) = v14[v8 + 3];
  v21 = &v14[4 * a2];
  BYTE4(v15) = *v21;
  BYTE4(v16) = v21[1];
  BYTE4(v17) = v21[2];
  BYTE4(v18) = v21[3];
  BYTE5(v15) = v14[v9];
  BYTE5(v16) = v14[v9 + 1];
  BYTE5(v17) = v14[v9 + 2];
  BYTE5(v18) = v14[v9 + 3];
  v22 = &v14[6 * a2];
  BYTE6(v15) = *v22;
  BYTE6(v16) = v22[1];
  BYTE6(v17) = v22[2];
  BYTE6(v18) = v22[3];
  HIBYTE(v15) = v14[v12];
  HIBYTE(v16) = v14[v12 + 1];
  HIBYTE(v17) = v14[v12 + 2];
  HIBYTE(v18) = v14[v12 + 3];
  v6.i64[1] = v15;
  v7.i64[1] = v16;
  v23.i64[1] = v17;
  v24.i64[1] = v18;
  v25 = (uint8x16_t)vdupq_n_s8(a4);
  v26 = (uint8x16_t)vdupq_n_s8(a3);
  v27 = &result[15 * a2];
  v28 = (uint8x16_t)vdupq_n_s8(a5);
  v29 = &result[14 * a2];
  v30 = &result[13 * a2];
  v31 = &result[12 * a2];
  v32 = &result[11 * a2];
  v33 = &result[10 * a2];
  v34.i64[0] = 0x8080808080808080;
  v34.i64[1] = 0x8080808080808080;
  v35.i64[0] = 0x303030303030303;
  v35.i64[1] = 0x303030303030303;
  v36.i64[0] = 0x404040404040404;
  v36.i64[1] = 0x404040404040404;
  v37 = v6;
  v38 = v7;
  do
  {
    v39.i8[0] = result[v5 + 4];
    v40.i8[0] = result[v5 + 5];
    v41.i8[0] = result[v5 + 6];
    v42.i8[0] = result[v5 + 7];
    v43 = &v87[v5];
    v44 = &v86[v5];
    v39.i8[1] = v87[v5 + 4];
    v40.i8[1] = v87[v5 + 5];
    v41.i8[1] = v87[v5 + 6];
    v42.i8[1] = v87[v5 + 7];
    v39.i8[2] = v86[v5 + 4];
    v40.i8[2] = v86[v5 + 5];
    v41.i8[2] = v86[v5 + 6];
    v42.i8[2] = v86[v5 + 7];
    v45 = &v85[v5];
    v46 = &v84[v5];
    v39.i8[3] = v85[v5 + 4];
    v40.i8[3] = v85[v5 + 5];
    v41.i8[3] = v85[v5 + 6];
    v42.i8[3] = v85[v5 + 7];
    v39.i8[4] = v84[v5 + 4];
    v40.i8[4] = v84[v5 + 5];
    v41.i8[4] = v84[v5 + 6];
    v42.i8[4] = v84[v5 + 7];
    v39.i8[5] = v10[v5 + 4];
    v40.i8[5] = v10[v5 + 5];
    v41.i8[5] = v10[v5 + 6];
    v42.i8[5] = v10[v5 + 7];
    v39.i8[6] = v11[v5 + 4];
    v40.i8[6] = v11[v5 + 5];
    v41.i8[6] = v11[v5 + 6];
    v42.i8[6] = v11[v5 + 7];
    v39.i8[7] = v13[v5 + 4];
    v40.i8[7] = v13[v5 + 5];
    v41.i8[7] = v13[v5 + 6];
    v42.i8[7] = v13[v5 + 7];
    v47 = &v88[v5];
    LOBYTE(v48) = v14[v5 + 4];
    LOBYTE(v49) = v14[v5 + 5];
    LOBYTE(v50) = v14[v5 + 6];
    LOBYTE(v51) = v14[v5 + 7];
    BYTE1(v48) = v88[v5 + 4];
    BYTE1(v49) = v88[v5 + 5];
    BYTE1(v50) = v88[v5 + 6];
    BYTE1(v51) = v88[v5 + 7];
    BYTE2(v48) = v33[v5 + 4];
    BYTE2(v49) = v33[v5 + 5];
    BYTE2(v50) = v33[v5 + 6];
    BYTE2(v51) = v33[v5 + 7];
    BYTE3(v48) = v32[v5 + 4];
    BYTE3(v49) = v32[v5 + 5];
    BYTE3(v50) = v32[v5 + 6];
    BYTE3(v51) = v32[v5 + 7];
    BYTE4(v48) = v31[v5 + 4];
    BYTE4(v49) = v31[v5 + 5];
    BYTE4(v50) = v31[v5 + 6];
    BYTE4(v51) = v31[v5 + 7];
    BYTE5(v48) = v30[v5 + 4];
    BYTE5(v49) = v30[v5 + 5];
    BYTE5(v50) = v30[v5 + 6];
    BYTE5(v51) = v30[v5 + 7];
    BYTE6(v48) = v29[v5 + 4];
    BYTE6(v49) = v29[v5 + 5];
    BYTE6(v50) = v29[v5 + 6];
    BYTE6(v51) = v29[v5 + 7];
    HIBYTE(v48) = v27[v5 + 4];
    HIBYTE(v49) = v27[v5 + 5];
    HIBYTE(v50) = v27[v5 + 6];
    HIBYTE(v51) = v27[v5 + 7];
    v39.i64[1] = v48;
    v40.i64[1] = v49;
    v41.i64[1] = v50;
    v42.i64[1] = v51;
    v52 = vabdq_u8((uint8x16_t)v37, (uint8x16_t)v38);
    v53 = vabdq_u8((uint8x16_t)v23, (uint8x16_t)v24);
    v54 = vabdq_u8(v40, v39);
    v55 = vabdq_u8((uint8x16_t)v24, v39);
    v56 = (int8x16_t)vcgeq_u8(v25, vmaxq_u8(vmaxq_u8(vmaxq_u8(v52, vabdq_u8((uint8x16_t)v38, (uint8x16_t)v23)), vmaxq_u8(v53, vabdq_u8(v42, v41))), vmaxq_u8(vabdq_u8(v41, v40), v54)));
    v57 = veorq_s8(v23, v34);
    v58 = veorq_s8(v24, v34);
    v59 = veorq_s8((int8x16_t)v39, v34);
    v60 = vandq_s8((int8x16_t)vcgeq_u8(v26, vqaddq_u8(vqaddq_u8(v55, v55), vshrq_n_u8(vabdq_u8((uint8x16_t)v23, v40), 1uLL))), v56);
    v61 = veorq_s8((int8x16_t)v40, v34);
    v62 = vqsubq_s8(v59, v58);
    v63 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v53, v54), v28), v60);
    v64 = vandq_s8(vqaddq_s8(v62, vqaddq_s8(v62, vqaddq_s8(vqsubq_s8(v57, v61), v62))), v63);
    v65 = vqaddq_s8(v58, vshrq_n_s8(vqaddq_s8(v64, v35), 3uLL));
    v66 = vqsubq_s8(v59, vshrq_n_s8(vqaddq_s8(v64, v36), 3uLL));
    v67 = vqsubq_s8(v66, v65);
    v68 = vandq_s8(vqaddq_s8(v67, vqaddq_s8(v67, v67)), veorq_s8(v63, v60));
    v69 = vshrq_n_s8(vqaddq_s8(v68, v36), 3uLL);
    v70 = vrshrq_n_s8(v69, 1uLL);
    v71 = veorq_s8(vqaddq_s8(v65, vshrq_n_s8(vqaddq_s8(v68, v35), 3uLL)), v34);
    v37 = veorq_s8(vqsubq_s8(v66, v69), v34);
    v72 = veorq_s8(vqaddq_s8(v57, v70), v34);
    v38 = veorq_s8(vqsubq_s8(v61, v70), v34);
    v73 = &result[v5 + 2];
    *v73 = v72.i8[0];
    v73[1] = v71.i8[0];
    v73[2] = v37.i8[0];
    v73[3] = v38.i8[0];
    v43[2] = v72.i8[1];
    v43[3] = v71.i8[1];
    v43[4] = v37.i8[1];
    v43[5] = v38.i8[1];
    v44[2] = v72.i8[2];
    v44[3] = v71.i8[2];
    v44[4] = v37.i8[2];
    v44[5] = v38.i8[2];
    v45[2] = v72.i8[3];
    v45[3] = v71.i8[3];
    v45[4] = v37.i8[3];
    v45[5] = v38.i8[3];
    v46[2] = v72.i8[4];
    v46[3] = v71.i8[4];
    v46[4] = v37.i8[4];
    v46[5] = v38.i8[4];
    v74 = &v10[v5 + 2];
    *v74 = v72.i8[5];
    v74[1] = v71.i8[5];
    v74[2] = v37.i8[5];
    v74[3] = v38.i8[5];
    v75 = &v11[v5 + 2];
    *v75 = v72.i8[6];
    v75[1] = v71.i8[6];
    v75[2] = v37.i8[6];
    v75[3] = v38.i8[6];
    v76 = &v13[v5 + 2];
    *v76 = v72.i8[7];
    v76[1] = v71.i8[7];
    v76[2] = v37.i8[7];
    v76[3] = v38.i8[7];
    v65.i64[0] = vextq_s8(v72, v72, 8uLL).u64[0];
    v66.i64[0] = vextq_s8(v71, v71, 8uLL).u64[0];
    v68.i64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
    v61.i64[0] = vextq_s8(v38, v38, 8uLL).u64[0];
    v77 = &v14[v5 + 2];
    *v77 = v65.i8[0];
    v77[1] = v66.i8[0];
    v77[2] = v68.i8[0];
    v77[3] = v61.i8[0];
    v47[2] = v65.i8[1];
    v47[3] = v66.i8[1];
    v47[4] = v68.i8[1];
    v47[5] = v61.i8[1];
    v78 = &v33[v5 + 2];
    *v78 = v65.i8[2];
    v78[1] = v66.i8[2];
    v78[2] = v68.i8[2];
    v78[3] = v61.i8[2];
    v79 = &v32[v5 + 2];
    *v79 = v65.i8[3];
    v79[1] = v66.i8[3];
    v79[2] = v68.i8[3];
    v79[3] = v61.i8[3];
    v80 = &v31[v5 + 2];
    *v80 = v65.i8[4];
    v80[1] = v66.i8[4];
    v80[2] = v68.i8[4];
    v80[3] = v61.i8[4];
    v81 = &v30[v5 + 2];
    *v81 = v65.i8[5];
    v81[1] = v66.i8[5];
    v81[2] = v68.i8[5];
    v81[3] = v61.i8[5];
    v82 = &v29[v5 + 2];
    *v82 = v65.i8[6];
    v82[1] = v66.i8[6];
    v82[2] = v68.i8[6];
    v82[3] = v61.i8[6];
    v83 = &v27[v5 + 2];
    *v83 = v65.i8[7];
    v83[1] = v66.i8[7];
    v83[2] = v68.i8[7];
    v83[3] = v61.i8[7];
    v5 += 4;
    v23 = (int8x16_t)v41;
    v24 = (int8x16_t)v42;
  }
  while ((_DWORD)v5 != 12);
  return result;
}

double VFilter8_NEON(uint8x16_t *a1, _QWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t *v12;
  uint8x16_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint8x16_t v16;
  uint64_t *v17;
  int8x16_t v18;
  uint8x16_t v19;
  uint64_t *v20;
  int8x16_t v21;
  uint64_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  double result;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;

  v9.i64[0] = *(uint64_t *)((char *)a1->i64 - 4 * a3);
  v9.i64[1] = *(_QWORD *)((char *)a2 - 4 * a3);
  v10 = 3 * a3;
  v11.i64[0] = *(uint64_t *)((char *)a1->i64 - v10);
  v11.i64[1] = *(_QWORD *)((char *)a2 - v10);
  v12 = (uint64_t *)((char *)a1->i64 - 2 * a3);
  v13.i64[0] = *v12;
  v14 = (_QWORD *)((char *)a2 - 2 * a3);
  v13.i64[1] = *v14;
  v15 = (uint64_t *)((char *)a1->i64 - a3);
  v16.i64[0] = *v15;
  v17 = (_QWORD *)((char *)a2 - a3);
  v16.i64[1] = *v17;
  v18 = *(int8x16_t *)a1;
  v19.i64[0] = *(uint64_t *)((char *)a1->i64 + a3);
  v19.i64[1] = *(_QWORD *)((char *)a2 + a3);
  v20 = (uint64_t *)((char *)a1->i64 + 2 * a3);
  v21.i64[0] = *v20;
  v22 = (_QWORD *)((char *)a2 + 2 * a3);
  v21.i64[1] = *v22;
  v23.i64[0] = *(uint64_t *)((char *)a1->i64 + v10);
  v23.i64[1] = *(_QWORD *)((char *)a2 + v10);
  v24 = vabdq_u8(v13, v16);
  v25 = vabdq_u8(v19, *a1);
  v26 = vabdq_u8(v16, *a1);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  DoFilter6_NEON(&v39, &v38, &v37, &v36, &v35, &v34, v11, (int8x16_t)v13, (int8x16_t)v16, v18, (int8x16_t)v19, v21, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8(v26, v26), vshrq_n_u8(vabdq_u8(v13, v19), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(
                     vmaxq_u8(vmaxq_u8(vabdq_u8(v9, (uint8x16_t)v11), vabdq_u8((uint8x16_t)v11, v13)), vmaxq_u8(v24, vabdq_u8(v23, (uint8x16_t)v21))), vmaxq_u8(vabdq_u8((uint8x16_t)v21, v19), v25)))), (int8x16_t)vcgtq_u8(vmaxq_u8(v24, v25), (uint8x16_t)vdupq_n_s8(a6)));
  v28 = v38;
  v27 = v39;
  *(uint64_t *)((char *)v12 - a3) = v39.i64[0];
  *v12 = v28.i64[0];
  *(uint64_t *)((char *)v14 - a3) = vextq_s8(v27, v27, 8uLL).u64[0];
  *v14 = vextq_s8(v28, v28, 8uLL).u64[0];
  v30 = v36;
  v29 = v37;
  *v15 = v37.i64[0];
  a1->i64[0] = v30.i64[0];
  *v17 = vextq_s8(v29, v29, 8uLL).u64[0];
  *a2 = vextq_s8(v30, v30, 8uLL).u64[0];
  v32 = v34;
  v31 = v35;
  *(uint64_t *)((char *)v20 - a3) = v35.i64[0];
  *v20 = v32.i64[0];
  *(uint64_t *)((char *)v22 - a3) = vextq_s8(v31, v31, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v32, v32, 8uLL).u64[0];
  *(double *)v22 = result;
  return result;
}

double VFilter8i_NEON(uint8x16_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint64_t *v12;
  uint8x16_t v13;
  uint64_t *v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  double result;

  v6 = (uint64_t *)((char *)a1->i64 + 4 * a3);
  v7 = (uint64_t *)(a2 + 4 * a3);
  v8 = 2 * a3;
  v9 = 3 * a3;
  v10.i64[0] = *(uint64_t *)((char *)v6 - v9);
  v10.i64[1] = *(uint64_t *)((char *)v7 - v9);
  v11.i64[0] = *(uint64_t *)((char *)v6 - v8);
  v11.i64[1] = *(uint64_t *)((char *)v7 - v8);
  v12 = (uint64_t *)((char *)v6 - a3);
  v13.i64[0] = *v12;
  v14 = (uint64_t *)((char *)v7 - a3);
  v13.i64[1] = *v14;
  v15.i64[0] = *v6;
  v15.i64[1] = *v7;
  v16.i64[0] = *(uint64_t *)((char *)v6 + a3);
  v16.i64[1] = *(uint64_t *)((char *)v7 + a3);
  v17.i64[0] = *(uint64_t *)((char *)v6 + v8);
  v17.i64[1] = *(uint64_t *)((char *)v7 + v8);
  v18.i64[0] = *(uint64_t *)((char *)v6 + v9);
  v18.i64[1] = *(uint64_t *)((char *)v7 + v9);
  v19 = vabdq_u8(v11, v13);
  v20 = (int8x16_t)vabdq_u8(v16, v15);
  v21 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(*a1, v10), vabdq_u8(v10, v11)), vmaxq_u8(v19, vabdq_u8(v18, v17))), vmaxq_u8(vabdq_u8(v17, v16), (uint8x16_t)v20)));
  v22 = (int8x16_t)vabdq_u8(v13, v15);
  v23 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8((uint8x16_t)v22, (uint8x16_t)v22), vshrq_n_u8(vabdq_u8(v11, v16), 1uLL))), v21);
  v22.i64[0] = 0x8080808080808080;
  v22.i64[1] = 0x8080808080808080;
  v24 = veorq_s8((int8x16_t)v11, v22);
  v25 = veorq_s8((int8x16_t)v13, v22);
  v26 = veorq_s8((int8x16_t)v15, v22);
  v27 = veorq_s8((int8x16_t)v16, v22);
  v28 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v19, (uint8x16_t)v20), (uint8x16_t)vdupq_n_s8(a6)), v23);
  v29 = vqsubq_s8(v26, v25);
  v30 = vandq_s8(vqaddq_s8(v29, vqaddq_s8(v29, vqaddq_s8(vqsubq_s8(v24, v27), v29))), v28);
  v31.i64[0] = 0x303030303030303;
  v31.i64[1] = 0x303030303030303;
  v20.i64[0] = 0x404040404040404;
  v20.i64[1] = 0x404040404040404;
  v32 = vqaddq_s8(v25, vshrq_n_s8(vqaddq_s8(v30, v31), 3uLL));
  v33 = vqsubq_s8(v26, vshrq_n_s8(vqaddq_s8(v30, v20), 3uLL));
  v34 = vqsubq_s8(v33, v32);
  v35 = vandq_s8(vqaddq_s8(v34, vqaddq_s8(v34, v34)), veorq_s8(v28, v23));
  v36 = vshrq_n_s8(vqaddq_s8(v35, v20), 3uLL);
  v37 = vrshrq_n_s8(v36, 1uLL);
  v38 = veorq_s8(vqaddq_s8(v32, vshrq_n_s8(vqaddq_s8(v35, v31), 3uLL)), v22);
  v39 = veorq_s8(vqsubq_s8(v33, v36), v22);
  v40 = veorq_s8(vqaddq_s8(v24, v37), v22);
  *(uint64_t *)((char *)v12 - a3) = v40.i64[0];
  *v12 = v38.i64[0];
  v41 = veorq_s8(vqsubq_s8(v27, v37), v22);
  *(uint64_t *)((char *)v14 - a3) = vextq_s8(v40, v40, 8uLL).u64[0];
  *v14 = vextq_s8(v38, v38, 8uLL).u64[0];
  *v6 = v39.i64[0];
  *(uint64_t *)((char *)v6 + a3) = v41.i64[0];
  *v7 = vextq_s8(v39, v39, 8uLL).u64[0];
  *(_QWORD *)&result = vextq_s8(v41, v41, 8uLL).u64[0];
  *(double *)((char *)v7 + a3) = result;
  return result;
}

double HFilter8_NEON(_BYTE *a1, _BYTE *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  double result;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  unint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;

  v8.i64[0] = *(_QWORD *)(a1 - 4);
  v8.i64[1] = *(_QWORD *)(a2 - 4);
  v9.i64[0] = *(_QWORD *)&a1[a3 - 4];
  v9.i64[1] = *(_QWORD *)&a2[a3 - 4];
  v10 = 2 * a3;
  v11.i64[0] = *(_QWORD *)&a1[v10 - 4];
  v11.i64[1] = *(_QWORD *)&a2[v10 - 4];
  v12 = 3 * a3;
  v13.i64[0] = *(_QWORD *)&a1[v12 - 4];
  v13.i64[1] = *(_QWORD *)&a2[v12 - 4];
  v14 = 4 * a3;
  v15.i64[0] = *(_QWORD *)&a1[v14 - 4];
  v15.i64[1] = *(_QWORD *)&a2[v14 - 4];
  v16 = 5 * a3;
  v17.i64[0] = *(_QWORD *)&a1[v16 - 4];
  v18 = a3;
  v17.i64[1] = *(_QWORD *)&a2[v16 - 4];
  v19 = 6 * a3;
  v20.i64[0] = *(_QWORD *)&a1[v19 - 4];
  v20.i64[1] = *(_QWORD *)&a2[v19 - 4];
  v21 = 7 * a3;
  v22.i64[0] = *(_QWORD *)&a1[v21 - 4];
  v22.i64[1] = *(_QWORD *)&a2[v21 - 4];
  v23 = (int16x8_t)vtrn1q_s8(v8, v9);
  v24 = (int16x8_t)vtrn2q_s8(v8, v9);
  v25 = (int16x8_t)vtrn1q_s8(v11, v13);
  v26 = (int16x8_t)vtrn2q_s8(v11, v13);
  v27 = (int16x8_t)vtrn1q_s8(v15, v17);
  v28 = (int16x8_t)vtrn2q_s8(v15, v17);
  v29 = (int16x8_t)vtrn1q_s8(v20, v22);
  v30 = (int16x8_t)vtrn2q_s8(v20, v22);
  v31 = (int32x4_t)vtrn1q_s16(v23, v25);
  v32 = (int32x4_t)vtrn2q_s16(v23, v25);
  v33 = (int32x4_t)vtrn1q_s16(v24, v26);
  v34 = (int32x4_t)vtrn2q_s16(v24, v26);
  v35 = (int32x4_t)vtrn1q_s16(v27, v29);
  v36 = (int32x4_t)vtrn2q_s16(v27, v29);
  v37 = (int32x4_t)vtrn1q_s16(v28, v30);
  v38 = (int32x4_t)vtrn2q_s16(v28, v30);
  v39 = (uint8x16_t)vtrn1q_s32(v31, v35);
  v40 = (int8x16_t)vtrn2q_s32(v31, v35);
  v41 = (int8x16_t)vtrn1q_s32(v32, v36);
  v42 = (int8x16_t)vtrn2q_s32(v32, v36);
  v43 = (int8x16_t)vtrn1q_s32(v33, v37);
  v44 = (int8x16_t)vtrn2q_s32(v33, v37);
  v45 = (int8x16_t)vtrn1q_s32(v34, v38);
  v46 = (uint8x16_t)vtrn2q_s32(v34, v38);
  v47 = vabdq_u8(v39, (uint8x16_t)v43);
  v48 = vabdq_u8((uint8x16_t)v41, (uint8x16_t)v45);
  v49 = vabdq_u8((uint8x16_t)v44, (uint8x16_t)v40);
  v50 = (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), vmaxq_u8(vmaxq_u8(vmaxq_u8(v47, vabdq_u8((uint8x16_t)v43, (uint8x16_t)v41)), vmaxq_u8(v48, vabdq_u8(v46, (uint8x16_t)v42))), vmaxq_u8(vabdq_u8((uint8x16_t)v42, (uint8x16_t)v44), v49)));
  v51 = vabdq_u8((uint8x16_t)v45, (uint8x16_t)v40);
  v99 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v94 = 0u;
  DoFilter6_NEON(&v99, &v98, &v97, &v96, &v95, &v94, v43, v41, v45, v40, v44, v42, vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8(v51, v51), vshrq_n_u8(vabdq_u8((uint8x16_t)v41, (uint8x16_t)v44), 1uLL))), v50), (int8x16_t)vcgtq_u8(vmaxq_u8(v48, v49), (uint8x16_t)vdupq_n_s8(a6)));
  v52 = v99;
  v54 = v97;
  v53 = v98;
  v56 = v95;
  v55 = v96;
  v57 = v94;
  *(_QWORD *)&result = vextq_s8(v52, v52, 8uLL).u64[0];
  v59 = vextq_s8(v53, v53, 8uLL).u64[0];
  v60 = vextq_s8(v54, v54, 8uLL).u64[0];
  v61 = vextq_s8(v55, v55, 8uLL).u64[0];
  v62 = vextq_s8(v56, v56, 8uLL).u64[0];
  v63 = a1 - 3;
  *v63 = v99.i8[0];
  v63[1] = v53.i8[0];
  v63[2] = v54.i8[0];
  *a1 = v55.i8[0];
  a1[1] = v56.i8[0];
  a1[2] = v57.i8[0];
  v64 = &a1[v18];
  v65 = v64 - 3;
  *v65 = v52.i8[1];
  v65[1] = v53.i8[1];
  v65[2] = v54.i8[1];
  *v64 = v55.i8[1];
  v64[1] = v56.i8[1];
  v64[2] = v57.i8[1];
  v66 = &v64[v18];
  v67 = v66 - 3;
  *v67 = v52.i8[2];
  v67[1] = v53.i8[2];
  v67[2] = v54.i8[2];
  *v66 = v55.i8[2];
  v66[1] = v56.i8[2];
  v66[2] = v57.i8[2];
  v68 = &v66[v18];
  v69 = v68 - 3;
  *v69 = v52.i8[3];
  v69[1] = v53.i8[3];
  v69[2] = v54.i8[3];
  *v68 = v55.i8[3];
  v68[1] = v56.i8[3];
  v68[2] = v57.i8[3];
  v70 = &v68[v18];
  v71 = v70 - 3;
  *v71 = v52.i8[4];
  v71[1] = v53.i8[4];
  v71[2] = v54.i8[4];
  *v70 = v55.i8[4];
  v70[1] = v56.i8[4];
  v70[2] = v57.i8[4];
  v72 = &v70[v18];
  v73 = v72 - 3;
  *v73 = v52.i8[5];
  v73[1] = v53.i8[5];
  v73[2] = v54.i8[5];
  *v72 = v55.i8[5];
  v72[1] = v56.i8[5];
  v72[2] = v57.i8[5];
  v74 = &v72[v18];
  v75 = v74 - 3;
  *v75 = v52.i8[6];
  v75[1] = v53.i8[6];
  v75[2] = v54.i8[6];
  *v74 = v55.i8[6];
  v74[1] = v56.i8[6];
  v74[2] = v57.i8[6];
  v76 = &v74[v18];
  v77 = vextq_s8(v57, v57, 8uLL).u64[0];
  v78 = v76 - 3;
  *v78 = v52.i8[7];
  v78[1] = v53.i8[7];
  v78[2] = v54.i8[7];
  *v76 = v55.i8[7];
  v76[1] = v56.i8[7];
  v76[2] = v57.i8[7];
  v79 = a2 - 3;
  *v79 = LOBYTE(result);
  v79[1] = v59;
  v79[2] = v60;
  *a2 = v61;
  a2[1] = v62;
  a2[2] = v77;
  v80 = &a2[v18];
  v81 = v80 - 3;
  *v81 = BYTE1(result);
  v81[1] = BYTE1(v59);
  v81[2] = BYTE1(v60);
  *v80 = BYTE1(v61);
  v80[1] = BYTE1(v62);
  v80[2] = BYTE1(v77);
  v82 = &v80[v18];
  v83 = v82 - 3;
  *v83 = BYTE2(result);
  v83[1] = BYTE2(v59);
  v83[2] = BYTE2(v60);
  *v82 = BYTE2(v61);
  v82[1] = BYTE2(v62);
  v82[2] = BYTE2(v77);
  v84 = &v82[v18];
  v85 = v84 - 3;
  *v85 = BYTE3(result);
  v85[1] = BYTE3(v59);
  v85[2] = BYTE3(v60);
  *v84 = BYTE3(v61);
  v84[1] = BYTE3(v62);
  v84[2] = BYTE3(v77);
  v86 = &v84[v18];
  v87 = v86 - 3;
  *v87 = BYTE4(result);
  v87[1] = BYTE4(v59);
  v87[2] = BYTE4(v60);
  *v86 = BYTE4(v61);
  v86[1] = BYTE4(v62);
  v86[2] = BYTE4(v77);
  v88 = &v86[v18];
  v89 = v88 - 3;
  *v89 = BYTE5(result);
  v89[1] = BYTE5(v59);
  v89[2] = BYTE5(v60);
  *v88 = BYTE5(v61);
  v88[1] = BYTE5(v62);
  v88[2] = BYTE5(v77);
  v90 = &v88[v18];
  v91 = v90 - 3;
  *v91 = BYTE6(result);
  v91[1] = BYTE6(v59);
  v91[2] = BYTE6(v60);
  *v90 = BYTE6(v61);
  v90[1] = BYTE6(v62);
  v90[2] = BYTE6(v77);
  v92 = &v90[v18];
  v93 = v92 - 3;
  *v93 = HIBYTE(result);
  v93[1] = HIBYTE(v59);
  v93[2] = HIBYTE(v60);
  *v92 = HIBYTE(v61);
  v92[1] = HIBYTE(v62);
  v92[2] = HIBYTE(v77);
  return result;
}

double HFilter8i_NEON(int8x16_t *a1, _BYTE *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint64_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  __int8 *v64;
  __int8 *v65;
  __int8 *v66;
  __int8 *v67;
  __int8 *v68;
  __int8 *v69;
  __int8 *v70;
  double result;
  _BYTE *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;

  v6.i64[0] = *(uint64_t *)((char *)a1->i64 + a3);
  v6.i64[1] = *(_QWORD *)&a2[a3];
  v7 = 2 * a3;
  v8.i64[0] = *(uint64_t *)((char *)a1->i64 + v7);
  v8.i64[1] = *(_QWORD *)&a2[v7];
  v9 = 3 * a3;
  v10.i64[0] = *(uint64_t *)((char *)a1->i64 + v9);
  v10.i64[1] = *(_QWORD *)&a2[v9];
  v11 = 4 * a3;
  v12.i64[0] = *(uint64_t *)((char *)a1->i64 + v11);
  v12.i64[1] = *(_QWORD *)&a2[v11];
  v13 = 5 * a3;
  v14.i64[0] = *(uint64_t *)((char *)a1->i64 + v13);
  v14.i64[1] = *(_QWORD *)&a2[v13];
  v15 = 6 * a3;
  v16.i64[0] = *(uint64_t *)((char *)a1->i64 + v15);
  v16.i64[1] = *(_QWORD *)&a2[v15];
  v17 = 7 * a3;
  v18.i64[0] = *(uint64_t *)((char *)a1->i64 + v17);
  v18.i64[1] = *(_QWORD *)&a2[v17];
  v19 = (int16x8_t)vtrn1q_s8(*a1, v6);
  v20 = (int16x8_t)vtrn2q_s8(*a1, v6);
  v21 = (int16x8_t)vtrn1q_s8(v8, v10);
  v22 = (int16x8_t)vtrn2q_s8(v8, v10);
  v23 = (int16x8_t)vtrn1q_s8(v12, v14);
  v24 = (int16x8_t)vtrn2q_s8(v12, v14);
  v25 = (int16x8_t)vtrn1q_s8(v16, v18);
  v26 = (int16x8_t)vtrn2q_s8(v16, v18);
  v27 = (int32x4_t)vtrn1q_s16(v19, v21);
  v28 = (int32x4_t)vtrn2q_s16(v19, v21);
  v29 = (int32x4_t)vtrn1q_s16(v20, v22);
  v30 = (int32x4_t)vtrn2q_s16(v20, v22);
  v31 = (int32x4_t)vtrn1q_s16(v23, v25);
  v32 = (int32x4_t)vtrn2q_s16(v23, v25);
  v33 = (int32x4_t)vtrn1q_s16(v24, v26);
  v34 = (int32x4_t)vtrn2q_s16(v24, v26);
  v35 = (uint8x16_t)vtrn1q_s32(v27, v31);
  v36 = (int8x16_t)vtrn2q_s32(v27, v31);
  v37 = (int8x16_t)vtrn1q_s32(v28, v32);
  v38 = (uint8x16_t)vtrn2q_s32(v28, v32);
  v39 = (uint8x16_t)vtrn1q_s32(v29, v33);
  v40 = (int8x16_t)vtrn2q_s32(v29, v33);
  v41 = (int8x16_t)vtrn1q_s32(v30, v34);
  v42 = vabdq_u8((uint8x16_t)v37, (uint8x16_t)v41);
  v43 = (int8x16_t)vabdq_u8((uint8x16_t)v40, (uint8x16_t)v36);
  v44 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vabdq_u8(v35, v39), vabdq_u8(v39, (uint8x16_t)v37)), vmaxq_u8(v42, vabdq_u8((uint8x16_t)vtrn2q_s32(v30, v34), v38))), vmaxq_u8(vabdq_u8(v38, (uint8x16_t)v40), (uint8x16_t)v43));
  v45 = (int8x16_t)vabdq_u8((uint8x16_t)v41, (uint8x16_t)v36);
  v46 = vandq_s8((int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a4), vqaddq_u8(vqaddq_u8((uint8x16_t)v45, (uint8x16_t)v45), vshrq_n_u8(vabdq_u8((uint8x16_t)v37, (uint8x16_t)v40), 1uLL))), (int8x16_t)vcgeq_u8((uint8x16_t)vdupq_n_s8(a5), v44));
  v45.i64[0] = 0x8080808080808080;
  v45.i64[1] = 0x8080808080808080;
  v47 = veorq_s8(v37, v45);
  v48 = veorq_s8(v41, v45);
  v49 = veorq_s8(v36, v45);
  v50 = veorq_s8(v40, v45);
  v51 = vandq_s8((int8x16_t)vcgtq_u8(vmaxq_u8(v42, (uint8x16_t)v43), (uint8x16_t)vdupq_n_s8(a6)), v46);
  v52 = vqsubq_s8(v49, v48);
  v53 = vandq_s8(vqaddq_s8(v52, vqaddq_s8(v52, vqaddq_s8(vqsubq_s8(v47, v50), v52))), v51);
  v41.i64[0] = 0x303030303030303;
  v41.i64[1] = 0x303030303030303;
  v43.i64[0] = 0x404040404040404;
  v43.i64[1] = 0x404040404040404;
  v54 = vqaddq_s8(v48, vshrq_n_s8(vqaddq_s8(v53, v41), 3uLL));
  v55 = vqsubq_s8(v49, vshrq_n_s8(vqaddq_s8(v53, v43), 3uLL));
  v56 = vqsubq_s8(v55, v54);
  v57 = vandq_s8(vqaddq_s8(v56, vqaddq_s8(v56, v56)), veorq_s8(v51, v46));
  v58 = vshrq_n_s8(vqaddq_s8(v57, v43), 3uLL);
  v59 = vrshrq_n_s8(v58, 1uLL);
  v60 = veorq_s8(vqaddq_s8(v54, vshrq_n_s8(vqaddq_s8(v57, v41), 3uLL)), v45);
  v61 = veorq_s8(vqsubq_s8(v55, v58), v45);
  v62 = veorq_s8(vqaddq_s8(v47, v59), v45);
  v63 = veorq_s8(vqsubq_s8(v50, v59), v45);
  v64 = &a1->i8[a3 + 2];
  v65 = &a1->i8[2 * a3 + 2];
  v66 = &a1->i8[v9 + 2];
  v67 = &a1->i8[4 * a3 + 2];
  a1->i8[2] = v62.i8[0];
  a1->i8[3] = v60.i8[0];
  a1->i8[4] = v61.i8[0];
  a1->i8[5] = v63.i8[0];
  v68 = &a1->i8[v17 + 2];
  *v64 = v62.i8[1];
  v64[1] = v60.i8[1];
  v64[2] = v61.i8[1];
  v64[3] = v63.i8[1];
  *v65 = v62.i8[2];
  v65[1] = v60.i8[2];
  v65[2] = v61.i8[2];
  v65[3] = v63.i8[2];
  v69 = &a1->i8[v13 + 2];
  v70 = &a1->i8[6 * a3 + 2];
  *v66 = v62.i8[3];
  v66[1] = v60.i8[3];
  v66[2] = v61.i8[3];
  v66[3] = v63.i8[3];
  *(_QWORD *)&result = vextq_s8(v62, v62, 8uLL).u64[0];
  v58.i64[0] = vextq_s8(v60, v60, 8uLL).u64[0];
  v55.i64[0] = vextq_s8(v61, v61, 8uLL).u64[0];
  v45.i64[0] = vextq_s8(v63, v63, 8uLL).u64[0];
  *v67 = v62.i8[4];
  v67[1] = v60.i8[4];
  v67[2] = v61.i8[4];
  v67[3] = v63.i8[4];
  *v69 = v62.i8[5];
  v69[1] = v60.i8[5];
  v69[2] = v61.i8[5];
  v69[3] = v63.i8[5];
  *v70 = v62.i8[6];
  v70[1] = v60.i8[6];
  v70[2] = v61.i8[6];
  v70[3] = v63.i8[6];
  *v68 = v62.i8[7];
  v68[1] = v60.i8[7];
  v68[2] = v61.i8[7];
  v68[3] = v63.i8[7];
  v72 = &a2[a3 + 2];
  v73 = &a2[2 * a3 + 2];
  v74 = &a2[v9 + 2];
  a2[2] = LOBYTE(result);
  a2[3] = v58.i8[0];
  a2[4] = v55.i8[0];
  a2[5] = v45.i8[0];
  v75 = &a2[v17 + 2];
  v76 = &a2[4 * a3 + 2];
  v77 = &a2[v13 + 2];
  v78 = &a2[6 * a3 + 2];
  *v72 = BYTE1(result);
  v72[1] = v58.i8[1];
  v72[2] = v55.i8[1];
  v72[3] = v45.i8[1];
  *v73 = BYTE2(result);
  v73[1] = v58.i8[2];
  v73[2] = v55.i8[2];
  v73[3] = v45.i8[2];
  *v74 = BYTE3(result);
  v74[1] = v58.i8[3];
  v74[2] = v55.i8[3];
  v74[3] = v45.i8[3];
  *v76 = BYTE4(result);
  v76[1] = v58.i8[4];
  v76[2] = v55.i8[4];
  v76[3] = v45.i8[4];
  *v77 = BYTE5(result);
  v77[1] = v58.i8[5];
  v77[2] = v55.i8[5];
  v77[3] = v45.i8[5];
  *v78 = BYTE6(result);
  v78[1] = v58.i8[6];
  v78[2] = v55.i8[6];
  v78[3] = v45.i8[6];
  *v75 = HIBYTE(result);
  v75[1] = v58.i8[7];
  v75[2] = v55.i8[7];
  v75[3] = v45.i8[7];
  return result;
}

uint8x16_t SimpleVFilter16_NEON(uint8x16_t *a1, int a2, unsigned int a3)
{
  int8x16_t v3;
  uint8x16_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t result;

  v3 = *(int8x16_t *)((char *)a1 - 2 * a2);
  v4 = (uint8x16_t *)((char *)a1 - a2);
  v5 = *(int8x16_t *)((char *)a1 + a2);
  v6 = (int8x16_t)vabdq_u8(*v4, *a1);
  v7 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8((uint8x16_t)v6, (uint8x16_t)v6), vshrq_n_u8(vabdq_u8((uint8x16_t)v3, (uint8x16_t)v5), 1uLL)), (uint8x16_t)vdupq_n_s8(a3));
  v6.i64[0] = 0x8080808080808080;
  v6.i64[1] = 0x8080808080808080;
  v8 = veorq_s8(*(int8x16_t *)v4, v6);
  v9 = veorq_s8(*(int8x16_t *)a1, v6);
  v10 = vqsubq_s8(v9, v8);
  v11 = vbicq_s8(vqaddq_s8(v10, vqaddq_s8(v10, vqaddq_s8(vqsubq_s8(veorq_s8(v3, v6), veorq_s8(v5, v6)), v10))), v7);
  v5.i64[0] = 0x303030303030303;
  v5.i64[1] = 0x303030303030303;
  v12 = vqaddq_s8(v11, v5);
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  result = (uint8x16_t)veorq_s8(vqsubq_s8(v9, vshrq_n_s8(vqaddq_s8(v11, v7), 3uLL)), v6);
  *(int8x16_t *)v4 = veorq_s8(vqaddq_s8(v8, vshrq_n_s8(v12, 3uLL)), v6);
  *a1 = result;
  return result;
}

__int8 *SimpleHFilter16_NEON(__int8 *a1, int a2, unsigned int a3)
{
  uint64_t v3;
  __int8 *v4;
  uint8x16_t v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  __int8 *v9;
  __int8 *v10;
  uint64_t v11;
  __int8 *v12;
  __int8 *v13;
  uint64_t v14;
  __int8 *v15;
  __int8 *v16;
  uint64_t v17;
  __int8 *v18;
  __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  __int8 *v36;
  __int8 *v37;
  __int8 *v38;
  __int8 *v39;
  __int8 *v40;
  __int8 *v41;
  __int8 *v42;
  __int8 *v43;
  __int8 *v44;
  __int8 *v45;
  __int8 *v46;
  __int8 *v47;
  __int8 *v48;
  __int8 *v49;
  __int8 *v50;
  __int8 *result;

  v3 = 8 * a2;
  v5.i8[0] = *(a1 - 2);
  v6.i8[0] = *(a1 - 1);
  v7.i8[0] = *a1;
  v8.i8[0] = a1[1];
  v4 = &a1[v3 - 2];
  v9 = &a1[a2 - 2];
  v5.i8[1] = *v9;
  v6.i8[1] = v9[1];
  v7.i8[1] = a1[a2];
  v8.i8[1] = v9[3];
  v10 = &a1[2 * a2 - 2];
  v5.i8[2] = *v10;
  v6.i8[2] = v10[1];
  v7.i8[2] = a1[2 * a2];
  v8.i8[2] = v10[3];
  v11 = 3 * a2;
  v12 = &a1[v11 - 2];
  v13 = &a1[4 * a2 - 2];
  v14 = 5 * a2;
  v15 = &a1[v14 - 2];
  v5.i8[3] = *v12;
  v6.i8[3] = v12[1];
  v7.i8[3] = a1[v11];
  v8.i8[3] = v12[3];
  v16 = &a1[6 * a2 - 2];
  v5.i8[4] = *v13;
  v6.i8[4] = v13[1];
  v7.i8[4] = a1[4 * a2];
  v8.i8[4] = v13[3];
  v5.i8[5] = *v15;
  v6.i8[5] = v15[1];
  v7.i8[5] = a1[v14];
  v8.i8[5] = v15[3];
  v17 = 7 * a2;
  v18 = &a1[v17 - 2];
  v5.i8[6] = *v16;
  v6.i8[6] = v16[1];
  v7.i8[6] = a1[6 * a2];
  v8.i8[6] = v16[3];
  v5.i8[7] = *v18;
  v6.i8[7] = v18[1];
  v7.i8[7] = a1[v17];
  v8.i8[7] = v18[3];
  LOBYTE(v20) = *v4;
  LOBYTE(v21) = v4[1];
  LOBYTE(v22) = a1[v3];
  LOBYTE(v23) = v4[3];
  v19 = &v4[v17];
  v24 = &v4[a2];
  BYTE1(v20) = *v24;
  BYTE1(v21) = v24[1];
  BYTE1(v22) = v24[2];
  BYTE1(v23) = v24[3];
  v25 = &v4[2 * a2];
  BYTE2(v20) = *v25;
  BYTE2(v21) = v25[1];
  BYTE2(v22) = v25[2];
  BYTE2(v23) = v25[3];
  BYTE3(v20) = v4[v11];
  BYTE3(v21) = v4[v11 + 1];
  BYTE3(v22) = a1[v3 + v11];
  BYTE3(v23) = v4[v11 + 3];
  v26 = &v4[4 * a2];
  BYTE4(v20) = *v26;
  BYTE4(v21) = v26[1];
  BYTE4(v22) = v26[2];
  BYTE4(v23) = v26[3];
  BYTE5(v20) = v4[v14];
  BYTE5(v21) = v4[v14 + 1];
  BYTE5(v22) = a1[v3 + v14];
  BYTE5(v23) = v4[v14 + 3];
  v27 = &v4[6 * a2];
  BYTE6(v20) = *v27;
  BYTE6(v21) = v27[1];
  BYTE6(v22) = v27[2];
  BYTE6(v23) = v27[3];
  HIBYTE(v20) = *v19;
  HIBYTE(v21) = v19[1];
  HIBYTE(v22) = v19[2];
  HIBYTE(v23) = v19[3];
  v5.i64[1] = v20;
  v6.i64[1] = v21;
  v7.i64[1] = v22;
  v8.i64[1] = v23;
  v28 = (int8x16_t)vabdq_u8(v6, v7);
  v29 = (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8((uint8x16_t)v28, (uint8x16_t)v28), vshrq_n_u8(vabdq_u8(v5, v8), 1uLL)), (uint8x16_t)vdupq_n_s8(a3));
  v28.i64[0] = 0x8080808080808080;
  v28.i64[1] = 0x8080808080808080;
  v30 = veorq_s8((int8x16_t)v6, v28);
  v31 = veorq_s8((int8x16_t)v7, v28);
  v32 = vqsubq_s8(v31, v30);
  v33 = vbicq_s8(vqaddq_s8(v32, vqaddq_s8(v32, vqaddq_s8(vqsubq_s8(veorq_s8((int8x16_t)v5, v28), veorq_s8((int8x16_t)v8, v28)), v32))), v29);
  v32.i64[0] = 0x303030303030303;
  v32.i64[1] = 0x303030303030303;
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  v34 = veorq_s8(vqaddq_s8(v30, vshrq_n_s8(vqaddq_s8(v33, v32), 3uLL)), v28);
  v35 = veorq_s8(vqsubq_s8(v31, vshrq_n_s8(vqaddq_s8(v33, (int8x16_t)v7), 3uLL)), v28);
  v37 = &a1[a2 - 1];
  v38 = &a1[2 * a2 - 1];
  v39 = &a1[v11 - 1];
  v40 = &a1[4 * a2 - 1];
  v41 = &a1[v14 - 1];
  v36 = a1 - 1;
  *v36 = v34.i8[0];
  *a1 = v35.i8[0];
  v42 = &a1[v3 - 1];
  v43 = &v36[6 * a2];
  v44 = &v36[v17];
  *v37 = v34.i8[1];
  v37[1] = v35.i8[1];
  *v38 = v34.i8[2];
  v38[1] = v35.i8[2];
  *v39 = v34.i8[3];
  v39[1] = v35.i8[3];
  *v40 = v34.i8[4];
  v40[1] = v35.i8[4];
  *v41 = v34.i8[5];
  v41[1] = v35.i8[5];
  v8.i64[0] = vextq_s8(v34, v34, 8uLL).u64[0];
  v29.i64[0] = vextq_s8(v35, v35, 8uLL).u64[0];
  *v43 = v34.i8[6];
  v43[1] = v35.i8[6];
  *v44 = v34.i8[7];
  v44[1] = v35.i8[7];
  v45 = &v42[a2];
  v46 = &v42[2 * a2];
  v47 = &v42[v11];
  v48 = &v42[4 * a2];
  v49 = &v42[v14];
  v50 = &v42[6 * a2];
  *v42 = v8.i8[0];
  v42[1] = v29.i8[0];
  result = &v42[v17];
  *v45 = v8.i8[1];
  v45[1] = v29.i8[1];
  *v46 = v8.i8[2];
  v46[1] = v29.i8[2];
  *v47 = v8.i8[3];
  v47[1] = v29.i8[3];
  *v48 = v8.i8[4];
  v48[1] = v29.i8[4];
  *v49 = v8.i8[5];
  v49[1] = v29.i8[5];
  *v50 = v8.i8[6];
  v50[1] = v29.i8[6];
  *result = v8.i8[7];
  result[1] = v29.i8[7];
  return result;
}

uint64_t SimpleVFilter16i_NEON(uint64_t result, int a2, unsigned int a3)
{
  uint8x16_t v3;
  int v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint8x16_t *v8;
  int8x16_t v9;
  uint8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;

  v3 = (uint8x16_t)vdupq_n_s8(a3);
  v4 = -3;
  v5.i64[0] = 0x8080808080808080;
  v5.i64[1] = 0x8080808080808080;
  v6.i64[0] = 0x303030303030303;
  v6.i64[1] = 0x303030303030303;
  v7.i64[0] = 0x404040404040404;
  v7.i64[1] = 0x404040404040404;
  v8 = (uint8x16_t *)(result + 4 * a2);
  do
  {
    v9 = *(int8x16_t *)((char *)v8 - a2);
    v10 = vabdq_u8((uint8x16_t)v9, *v8);
    v11 = veorq_s8(v9, v5);
    v12 = veorq_s8(*(int8x16_t *)v8, v5);
    v13 = vqsubq_s8(v12, v11);
    v14 = vbicq_s8(vqaddq_s8(v13, vqaddq_s8(v13, vqaddq_s8(vqsubq_s8(veorq_s8(*(int8x16_t *)((char *)v8 - 2 * a2), v5), veorq_s8(*(int8x16_t *)((char *)v8 + a2), v5)), v13))), (int8x16_t)vcgtq_u8(vqaddq_u8(vqaddq_u8(v10, v10), vshrq_n_u8(vabdq_u8(*(uint8x16_t *)((char *)v8 - 2 * a2), *(uint8x16_t *)((char *)v8 + a2)), 1uLL)), v3));
    *(int8x16_t *)((char *)v8 - a2) = veorq_s8(vqaddq_s8(v11, vshrq_n_s8(vqaddq_s8(v14, v6), 3uLL)), v5);
    *(int8x16_t *)v8 = veorq_s8(vqsubq_s8(v12, vshrq_n_s8(vqaddq_s8(v14, v7), 3uLL)), v5);
    v8 = (uint8x16_t *)((char *)v8 + 4 * a2);
  }
  while (!__CFADD__(v4++, 1));
  return result;
}

__int8 *SimpleHFilter16i_NEON(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  __int8 *result;

  v6 = 4;
  do
  {
    result = SimpleHFilter16_NEON((__int8 *)(a1 + v6), a2, a3);
    v6 += 4;
  }
  while ((_DWORD)v6 != 16);
  return result;
}

double DC4_NEON(uint64_t a1, uint16x8_t a2)
{
  *(uint16x4_t *)a2.i8 = vpaddl_u8(*(uint8x8_t *)(a1 - 32));
  *(int16x4_t *)a2.i8 = vpadd_s16(*(int16x4_t *)a2.i8, *(int16x4_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(a2, *(uint8x8_t *)(a1 - 1)), *(uint8x8_t *)(a1 + 31)), *(uint8x8_t *)(a1 + 63)), *(uint8x8_t *)(a1 + 95)), 3uLL), 0);
  *(_DWORD *)a1 = a2.i32[0];
  *(_DWORD *)(a1 + 32) = a2.i32[0];
  *(_DWORD *)(a1 + 64) = a2.i32[0];
  *(_DWORD *)(a1 + 96) = a2.i32[0];
  return *(double *)a2.i64;
}

int8x8_t TM4_NEON(char *a1)
{
  const char *v1;
  uint8x8_t v2;
  uint16x8_t v3;
  const char *v4;
  uint8x8_t v5;
  const char *v6;
  uint8x8_t v7;
  const char *v8;
  uint8x8_t v9;
  const char *v10;
  uint8x8_t v11;
  int16x8_t v12;
  int8x8_t result;

  v1 = a1 - 33;
  v2 = (uint8x8_t)vld1_dup_s8(v1);
  v3 = vsubl_u8(*(uint8x8_t *)(a1 - 32), v2);
  v4 = a1 - 1;
  v5 = (uint8x8_t)vld1_dup_s8(v4);
  v6 = a1 + 31;
  v7 = (uint8x8_t)vld1_dup_s8(v6);
  v8 = a1 + 63;
  v9 = (uint8x8_t)vld1_dup_s8(v8);
  v10 = a1 + 95;
  v11 = (uint8x8_t)vld1_dup_s8(v10);
  v12 = (int16x8_t)vaddw_u8(v3, v9);
  *(_DWORD *)a1 = vqmovun_s16((int16x8_t)vaddw_u8(v3, v5)).u32[0];
  *((_DWORD *)a1 + 8) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v7)).u32[0];
  result = vqmovun_s16((int16x8_t)vaddw_u8(v3, v11));
  *((_DWORD *)a1 + 16) = vqmovun_s16(v12).u32[0];
  *((_DWORD *)a1 + 24) = result.i32[0];
  return result;
}

uint8x8_t VE4_NEON(_DWORD *a1)
{
  uint8x8_t result;

  result = vrhadd_u8(vhadd_u8(*(uint8x8_t *)((char *)a1 - 33), (uint8x8_t)vshrd_n_u64(*(_QWORD *)((char *)a1 - 33), 0x10uLL)), (uint8x8_t)vshrd_n_u64(*(_QWORD *)((char *)a1 - 33), 8uLL));
  *a1 = result.i32[0];
  a1[8] = result.i32[0];
  a1[16] = result.i32[0];
  a1[24] = result.i32[0];
  return result;
}

uint8x8_t RD4_NEON(uint64_t a1)
{
  unint64_t v1;
  uint8x8_t v2;
  uint8x8_t result;

  v1 = (unint64_t)vorr_s8((int8x8_t)(((unint64_t)*(unsigned __int8 *)(a1 - 1) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 31) << 16) | *(unsigned __int8 *)(a1 + 95) | ((unint64_t)*(unsigned __int8 *)(a1 + 63) << 8)), (int8x8_t)vshld_n_s64(*(_QWORD *)(a1 - 33), 0x20uLL));
  v2 = (uint8x8_t)vshrd_n_u64(v1, 0x10uLL);
  v2.i8[6] = BYTE4(*(_QWORD *)(a1 - 33));
  result = vrhadd_u8(vhadd_u8(v2, (uint8x8_t)v1), (uint8x8_t)vshrd_n_u64(v1, 8uLL));
  *(_DWORD *)a1 = vshrd_n_u64(*(_QWORD *)&result, 0x18uLL);
  *(_DWORD *)(a1 + 32) = vshrd_n_u64(*(_QWORD *)&result, 0x10uLL);
  *(_DWORD *)(a1 + 64) = vshrd_n_u64(*(_QWORD *)&result, 8uLL);
  *(_DWORD *)(a1 + 96) = result.i32[0];
  return result;
}

uint8x8_t LD4_NEON(_DWORD *a1)
{
  uint8x8_t v1;
  uint8x8_t result;

  v1 = *(uint8x8_t *)((char *)a1 - 30);
  v1.i8[6] = v1.i8[5];
  result = vrhadd_u8(vhadd_u8(*(uint8x8_t *)(a1 - 8), v1), *(uint8x8_t *)((char *)a1 - 31));
  *a1 = result.i32[0];
  a1[8] = vshrd_n_u64(*(_QWORD *)&result, 8uLL);
  a1[16] = vshrd_n_u64(*(_QWORD *)&result, 0x10uLL);
  a1[24] = vshrd_n_u64(*(_QWORD *)&result, 0x18uLL);
  return result;
}

uint64_t DC16TopLeft_NEON(uint64_t result)
{
  uint64_t v1;
  int16x8_t v2;
  uint64_t v3;
  int16x8_t v4;
  char v5;
  char v6;
  uint64_t v7;
  int8x16_t v8;

  v1 = 0;
  v2 = *(int16x8_t *)(result - 32);
  v2.i16[0] = vaddlvq_u8((uint8x16_t)v2);
  v4 = 0uLL;
  v5 = 1;
  do
  {
    v6 = v5;
    v3 = result - 1;
    v4 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8((uint16x8_t)v4, *(uint8x8_t *)(v3 + v1)), *(uint8x8_t *)(v3 + (v1 | 0x20))), *(uint8x8_t *)(v3 + (v1 | 0x40))), *(uint8x8_t *)(v3 + (v1 | 0x60))), *(uint8x8_t *)(v3 + (v1 | 0x80))), *(uint8x8_t *)(v3 + (v1 | 0xA0))), *(uint8x8_t *)(v3 + (v1 | 0xC0))), *(uint8x8_t *)(v3 + (v1 | 0xE0)));
    v1 = 256;
    v5 = 0;
  }
  while ((v6 & 1) != 0);
  v7 = 0;
  v8 = vdupq_lane_s8(vrshrn_n_s16(vaddq_s16(v4, v2), 5uLL), 0);
  do
  {
    *(int8x16_t *)(result + v7) = v8;
    v7 += 32;
  }
  while (v7 != 512);
  return result;
}

uint64_t TM16_NEON(uint64_t result)
{
  unsigned int v1;
  uint8x16_t v2;
  uint16x8_t v3;
  uint16x8_t v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  uint8x8_t v8;
  const char *v9;
  uint8x8_t v10;
  int8x16_t *v11;
  uint8x8_t v12;
  const char *v13;
  uint8x8_t v14;

  v1 = *(unsigned __int8 *)(result - 33);
  v2 = *(uint8x16_t *)(result - 32);
  v3 = vsubl_u8(*(uint8x8_t *)v2.i8, (uint8x8_t)vdup_n_s8(v1));
  v4 = vsubl_high_u8(v2, (uint8x16_t)vdupq_n_s8(v1));
  v5 = result + 63;
  v6 = -4;
  do
  {
    v7 = (const char *)(v5 - 64);
    v8 = (uint8x8_t)vld1_dup_s8(v7);
    v9 = (const char *)(v5 - 32);
    v10 = (uint8x8_t)vld1_dup_s8(v9);
    v11 = (int8x16_t *)v5;
    v12 = (uint8x8_t)vld1_dup_s8(v11->i8);
    v11 = (int8x16_t *)((char *)v11 + 1);
    v13 = (const char *)(v5 + 32);
    v14 = (uint8x8_t)vld1_dup_s8(v13);
    *(int8x16_t *)(v5 - 63) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v8)), (int16x8_t)vaddw_u8(v4, v8));
    *(int8x16_t *)(v5 - 31) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v10)), (int16x8_t)vaddw_u8(v4, v10));
    *v11 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v12)), (int16x8_t)vaddw_u8(v4, v12));
    *(int8x16_t *)(v5 + 33) = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(v3, v14)), (int16x8_t)vaddw_u8(v4, v14));
    v6 += 4;
    v5 += 128;
  }
  while (v6 < 0xC);
  return result;
}

uint64_t VE16_NEON(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = 0;
  v2 = *(_OWORD *)(result - 32);
  do
  {
    *(_OWORD *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

int8x16_t HE16_NEON(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  int8x16_t result;

  v1 = 0;
  do
  {
    v2 = (const char *)(a1 + v1 - 1);
    result = vld1q_dup_s8(v2);
    *(int8x16_t *)(a1 + v1) = result;
    v1 += 32;
  }
  while ((_DWORD)v1 != 512);
  return result;
}

uint64_t DC16NoTop_NEON(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int16x8_t v3;
  char v4;
  char v5;
  uint64_t v6;
  int8x16_t v7;

  v1 = 0;
  v3 = 0uLL;
  v4 = 1;
  do
  {
    v5 = v4;
    v2 = result - 1;
    v3 = (int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8((uint16x8_t)v3, *(uint8x8_t *)(v2 + v1)), *(uint8x8_t *)(v2 + (v1 | 0x20))), *(uint8x8_t *)(v2 + (v1 | 0x40))), *(uint8x8_t *)(v2 + (v1 | 0x60))), *(uint8x8_t *)(v2 + (v1 | 0x80))), *(uint8x8_t *)(v2 + (v1 | 0xA0))), *(uint8x8_t *)(v2 + (v1 | 0xC0))), *(uint8x8_t *)(v2 + (v1 | 0xE0)));
    v1 = 256;
    v4 = 0;
  }
  while ((v5 & 1) != 0);
  v6 = 0;
  v7 = vdupq_lane_s8(vrshrn_n_s16(v3, 4uLL), 0);
  do
  {
    *(int8x16_t *)(result + v6) = v7;
    v6 += 32;
  }
  while (v6 != 512);
  return result;
}

uint64_t DC16NoLeft_NEON(uint64_t result)
{
  uint64_t v1;
  int16x8_t v2;
  int8x16_t v3;

  v1 = 0;
  v2 = *(int16x8_t *)(result - 32);
  v2.i16[0] = vaddlvq_u8((uint8x16_t)v2);
  v3 = vdupq_lane_s8(vrshrn_n_s16(v2, 4uLL), 0);
  do
  {
    *(int8x16_t *)(result + v1) = v3;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

uint64_t DC16NoTopLeft_NEON(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = 0;
  *(_QWORD *)&v2 = 0x8080808080808080;
  *((_QWORD *)&v2 + 1) = 0x8080808080808080;
  do
  {
    *(_OWORD *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 512);
  return result;
}

uint64_t DC8uv_NEON(uint64_t result, uint16x8_t a2)
{
  uint64_t v2;

  v2 = 0;
  a2.i64[0] = *(_QWORD *)(result - 32);
  a2.i16[0] = vaddlv_u8(*(uint8x8_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(a2, *(uint8x8_t *)(result - 1)), *(uint8x8_t *)(result + 31)), *(uint8x8_t *)(result + 63)), *(uint8x8_t *)(result + 95)), *(uint8x8_t *)(result + 127)), *(uint8x8_t *)(result + 159)), *(uint8x8_t *)(result + 191)), *(uint8x8_t *)(result + 223)), 4uLL), 0);
  do
  {
    *(_QWORD *)(result + v2) = a2.i64[0];
    v2 += 32;
  }
  while (v2 != 256);
  return result;
}

uint64_t TM8uv_NEON(uint64_t result)
{
  const char *v1;
  uint8x8_t v2;
  uint16x8_t v3;
  uint64_t v4;
  char v5;
  const char *v6;
  uint8x8_t v7;
  const char *v8;
  uint8x8_t v9;
  int8x8_t *v10;
  uint8x8_t v11;
  char v12;
  const char *v13;
  uint8x8_t v14;

  v1 = (const char *)(result - 33);
  v2 = (uint8x8_t)vld1_dup_s8(v1);
  v3 = vsubl_u8(*(uint8x8_t *)(result - 32), v2);
  v4 = result + 63;
  v5 = 1;
  do
  {
    v6 = (const char *)(v4 - 64);
    v7 = (uint8x8_t)vld1_dup_s8(v6);
    v8 = (const char *)(v4 - 32);
    v9 = (uint8x8_t)vld1_dup_s8(v8);
    v10 = (int8x8_t *)v4;
    v11 = (uint8x8_t)vld1_dup_s8((const char *)v10);
    v10 = (int8x8_t *)((char *)v10 + 1);
    v12 = v5;
    v13 = (const char *)(v4 + 32);
    v14 = (uint8x8_t)vld1_dup_s8(v13);
    *(int8x8_t *)(v4 - 63) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v7));
    *(int8x8_t *)(v4 - 31) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v9));
    *v10 = vqmovun_s16((int16x8_t)vaddw_u8(v3, v11));
    *(int8x8_t *)(v4 + 33) = vqmovun_s16((int16x8_t)vaddw_u8(v3, v14));
    v4 += 128;
    v5 = 0;
  }
  while ((v12 & 1) != 0);
  return result;
}

uint64_t VE8uv_NEON(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  v2 = *(_QWORD *)(result - 32);
  do
  {
    *(_QWORD *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 256);
  return result;
}

int8x8_t HE8uv_NEON(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  int8x8_t result;

  v1 = 0;
  do
  {
    v2 = (const char *)(a1 + v1 - 1);
    result = vld1_dup_s8(v2);
    *(int8x8_t *)(a1 + v1) = result;
    v1 += 32;
  }
  while ((_DWORD)v1 != 256);
  return result;
}

uint64_t DC8uvNoTop_NEON(uint64_t result)
{
  uint64_t v1;
  int8x8_t v2;

  v1 = 0;
  v2 = vdup_lane_s8(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)(result + 31), *(uint8x8_t *)(result - 1)), *(uint8x8_t *)(result + 63)), *(uint8x8_t *)(result + 95)), *(uint8x8_t *)(result + 127)), *(uint8x8_t *)(result + 159)), *(uint8x8_t *)(result + 191)), *(uint8x8_t *)(result + 223)), 3uLL), 0);
  do
  {
    *(int8x8_t *)(result + v1) = v2;
    v1 += 32;
  }
  while (v1 != 256);
  return result;
}

uint64_t DC8uvNoLeft_NEON(uint64_t result, int16x8_t a2)
{
  uint64_t v2;

  v2 = 0;
  a2.i64[0] = *(_QWORD *)(result - 32);
  a2.i16[0] = vaddlv_u8(*(uint8x8_t *)a2.i8);
  *(int8x8_t *)a2.i8 = vdup_lane_s8(vrshrn_n_s16(a2, 3uLL), 0);
  do
  {
    *(_QWORD *)(result + v2) = a2.i64[0];
    v2 += 32;
  }
  while (v2 != 256);
  return result;
}

uint64_t DC8uvNoTopLeft_NEON(uint64_t result)
{
  uint64_t i;

  for (i = 0; i != 256; i += 32)
    *(_QWORD *)(result + i) = 0x8080808080808080;
  return result;
}

int8x8_t TransformOne_NEON(int8x16_t *a1, __int32 *a2)
{
  int8x16_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int8x16_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x4_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int8x8_t result;

  v2 = a1[1];
  v3.i64[0] = vextq_s8(*a1, *a1, 8uLL).u64[0];
  v3.i64[1] = vextq_s8(v2, v2, 8uLL).u64[0];
  v4 = vdupq_n_s16(0x4E7Bu);
  v5 = vdupq_n_s16(0x4546u);
  v6 = (int8x16_t)vqdmulhq_s16(v3, v5);
  v7 = vsraq_n_s16(v3, vqdmulhq_s16(v3, v4), 1uLL);
  *(int16x4_t *)v8.i8 = vqadd_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v2.i8);
  v9 = vqsub_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v2.i8);
  *(int16x4_t *)v2.i8 = vqsub_s16(*(int16x4_t *)v6.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL));
  *(int16x4_t *)v7.i8 = vqadd_s16(*(int16x4_t *)v7.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v8.u64[1] = (unint64_t)v9;
  v7.i64[1] = v2.i64[0];
  v10 = vqaddq_s16(v8, v7);
  v11 = (int8x16_t)vqsubq_s16(v8, v7);
  v7.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
  v7.i64[1] = v11.i64[0];
  v12 = vzip1q_s16(v10, v7);
  v13 = vzip2q_s16(v10, v7);
  v14 = vzip1q_s16(v12, v13);
  v15 = (int8x16_t)vzip2q_s16(v12, v13);
  v12.i64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v12.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
  v16 = (int8x16_t)vqdmulhq_s16(v12, v5);
  v17 = vsraq_n_s16(v12, vqdmulhq_s16(v12, v4), 1uLL);
  *(int16x4_t *)v4.i8 = vqadd_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
  *(int16x4_t *)v15.i8 = vqsub_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
  *(int16x4_t *)v14.i8 = vqsub_s16(*(int16x4_t *)v16.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL));
  *(int16x4_t *)v17.i8 = vqadd_s16(*(int16x4_t *)v17.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  v4.i64[1] = v15.i64[0];
  v17.i64[1] = v14.i64[0];
  v18 = vqaddq_s16(v4, v17);
  v19 = (int8x16_t)vqsubq_s16(v4, v17);
  v14.i64[0] = vextq_s8(v19, v19, 8uLL).u64[0];
  v14.i64[1] = v19.i64[0];
  v20 = vzip1q_s16(v18, v14);
  v21 = vzip2q_s16(v18, v14);
  v22 = vzip1q_s16(v20, v21);
  v23 = vzip2q_s16(v20, v21);
  v20.i32[0] = *a2;
  v20.i32[1] = a2[8];
  v4.i32[0] = a2[16];
  v4.i32[1] = a2[24];
  v24 = vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v4.i8), v23, 3uLL);
  *(int8x8_t *)v23.i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v20.i8), v22, 3uLL));
  *a2 = v23.i32[0];
  a2[8] = v23.i32[1];
  result = vqmovun_s16(v24);
  a2[16] = result.i32[0];
  a2[24] = result.i32[1];
  return result;
}

int8x16_t DoFilter6_NEON(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int8x16_t *a4, int8x16_t *a5, int8x16_t *a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14)
{
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int16x8_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t result;

  v14.i64[0] = 0x8080808080808080;
  v14.i64[1] = 0x8080808080808080;
  v15 = veorq_s8(a8, v14);
  v16 = veorq_s8(a9, v14);
  v17 = veorq_s8(a10, v14);
  v18 = veorq_s8(a11, v14);
  v19 = vandq_s8(a14, a13);
  v20 = vqsubq_s8(v17, v16);
  v21 = vqaddq_s8(v20, vqaddq_s8(v20, vqaddq_s8(vqsubq_s8(v15, v18), v20)));
  v22 = (int16x8_t)vandq_s8(v21, v19);
  v23.i64[0] = 0x303030303030303;
  v23.i64[1] = 0x303030303030303;
  v24.i64[0] = 0x404040404040404;
  v24.i64[1] = 0x404040404040404;
  v25 = vqaddq_s8(v16, vshrq_n_s8(vqaddq_s8((int8x16_t)v22, v23), 3uLL));
  v26 = vqsubq_s8(v17, vshrq_n_s8(vqaddq_s8((int8x16_t)v22, v24), 3uLL));
  v27 = vandq_s8(v21, veorq_s8(v19, a13));
  v19.i64[0] = 0x909090909090909;
  v19.i64[1] = 0x909090909090909;
  v22.i64[0] = -1;
  v22.i64[1] = -1;
  v23.i64[0] = -1;
  v23.i64[1] = -1;
  v28 = vmlal_s8((int16x8_t)v23, (int8x8_t)0x909090909090909, *(int8x8_t *)v27.i8);
  v29 = vmlal_high_s8(v22, v19, v27);
  v19.i64[0] = 0x1212121212121212;
  v19.i64[1] = 0x1212121212121212;
  v30 = vqrshrn_high_n_s16(vqrshrn_n_s16(v28, 6uLL), v29, 6uLL);
  v31 = vqrshrn_high_n_s16(vqrshrn_n_s16(v28, 7uLL), v29, 7uLL);
  v32 = vqrshrn_high_n_s16(vqrshrn_n_s16(vmlal_s8(v28, (int8x8_t)0x1212121212121212, *(int8x8_t *)v27.i8), 7uLL), vmlal_high_s8(v29, v19, v27), 7uLL);
  *a3 = veorq_s8(vqaddq_s8(v25, v32), v14);
  *a4 = veorq_s8(vqsubq_s8(v26, v32), v14);
  *a5 = veorq_s8(vqsubq_s8(v18, v30), v14);
  *a2 = veorq_s8(vqaddq_s8(v15, v30), v14);
  *a6 = veorq_s8(vqsubq_s8(veorq_s8(a12, v14), v31), v14);
  result = veorq_s8(vqaddq_s8(veorq_s8(a7, v14), v31), v14);
  *a1 = result;
  return result;
}

uint64_t WebPRescalerImportRowExpand_C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(result + 60) >= *(_DWORD *)(result + 48))
    WebPRescalerImportRowExpand_C_cold_4();
  if (!*(_DWORD *)result)
    WebPRescalerImportRowExpand_C_cold_1();
  v2 = *(_DWORD *)(result + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(unsigned int *)(result + 8);
    v5 = *(int *)(result + 52) * (uint64_t)v2;
    v6 = *(_QWORD *)(result + 96);
    v7 = *(_DWORD *)(result + 8);
    do
    {
      v8 = *(unsigned __int8 *)(a2 + v3);
      v9 = v3 + v4;
      v10 = v8;
      if (*(int *)(result + 44) >= 2)
        v10 = *(unsigned __int8 *)(a2 + v9);
      v11 = *(_DWORD *)(result + 36);
      *(_DWORD *)(v6 + 4 * v3) = v11 * v8;
      if (v9 < v5)
      {
        v12 = v7;
        do
        {
          v11 -= *(_DWORD *)(result + 40);
          if (v11 < 0)
          {
            LODWORD(v9) = v9 + v2;
            if ((int)v9 >= *(_DWORD *)(result + 44) * v2)
              WebPRescalerImportRowExpand_C_cold_3();
            v8 = v10;
            v10 = *(unsigned __int8 *)(a2 + (int)v9);
            v13 = *(_DWORD *)(result + 36);
            v11 += v13;
          }
          else
          {
            v13 = *(_DWORD *)(result + 36);
          }
          *(_DWORD *)(v6 + 4 * v12) = (v8 - v10) * v11 + v13 * v10;
          v12 += v4;
        }
        while (v12 < v5);
      }
      if (*(_DWORD *)(result + 40))
      {
        if (v11)
          WebPRescalerImportRowExpand_C_cold_2();
      }
      ++v3;
      ++v7;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t WebPRescalerImportRowShrink_C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;

  if (*(_DWORD *)(result + 60) >= *(_DWORD *)(result + 48))
    WebPRescalerImportRowShrink_C_cold_4();
  if (*(_DWORD *)result)
    WebPRescalerImportRowShrink_C_cold_3();
  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = *(int *)(result + 52) * (uint64_t)*(int *)(result + 8);
    do
    {
      if ((int)v4 > (int)v3)
      {
        v5 = 0;
        LODWORD(v6) = 0;
        v7 = v3;
        v8 = v3;
        do
        {
          v9 = *(_DWORD *)(result + 36);
          v10 = __OFADD__(v9, v5);
          v5 += v9;
          if ((v5 < 0) ^ v10 | (v5 == 0))
          {
            v13 = 0;
            v12 = *(_DWORD *)(result + 40);
          }
          else
          {
            v11 = 0;
            do
            {
              if (v8 + v11 >= *(int *)(result + 44) * (uint64_t)(int)v2)
                WebPRescalerImportRowShrink_C_cold_2();
              v12 = *(_DWORD *)(result + 40);
              v13 = *(unsigned __int8 *)(a2 + v8 + v11);
              LODWORD(v6) = v6 + v13;
              v11 += v2;
              v10 = __OFSUB__(v5, v12);
              v5 -= v12;
            }
            while (!((v5 < 0) ^ v10 | (v5 == 0)));
            v8 += v11;
          }
          *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v7) = v13 * v5 + v12 * v6;
          v6 = (*(unsigned int *)(result + 12) * (unint64_t)-(v13 * v5) + 0x80000000) >> 32;
          v7 += v2;
        }
        while (v7 < v4);
        if (v5)
          WebPRescalerImportRowShrink_C_cold_1();
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t WebPRescalerImportRow(_DWORD *a1)
{
  uint64_t *v1;

  if (a1[15] >= a1[12])
    WebPRescalerImportRow_cold_1();
  v1 = &WebPRescalerImportRowShrink;
  if (*a1)
    v1 = &WebPRescalerImportRowExpand;
  return ((uint64_t (*)(void))*v1)();
}

uint64_t WebPRescalerExportRow(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  if (*(int *)(result + 24) <= 0)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 56);
    if (*(_DWORD *)(result + 64) >= v2)
      WebPRescalerExportRow_cold_3();
    if (*(_DWORD *)(result + 4))
    {
      v3 = &WebPRescalerExportRowExpand;
    }
    else
    {
      if (!*(_DWORD *)(result + 20))
      {
        if (*(_DWORD *)(result + 48) != v2 || *(_DWORD *)(result + 36) != 1)
          WebPRescalerExportRow_cold_2();
        if (*(_DWORD *)(result + 44) != 1 || (v4 = *(_DWORD *)(result + 52), v4 > 2))
          WebPRescalerExportRow_cold_1();
        if (v4 * *(_DWORD *)(result + 8) >= 1)
        {
          v5 = 0;
          v6 = *(_QWORD *)(result + 88);
          do
          {
            *(_BYTE *)(*(_QWORD *)(result + 72) + v5) = *(_DWORD *)(v6 + 4 * v5);
            v6 = *(_QWORD *)(result + 88);
            *(_DWORD *)(v6 + 4 * v5++) = 0;
          }
          while (v5 < *(int *)(result + 52) * (uint64_t)*(int *)(result + 8));
        }
        goto LABEL_8;
      }
      v3 = &WebPRescalerExportRowShrink;
    }
    result = ((uint64_t (*)(uint64_t))*v3)(result);
LABEL_8:
    *(_DWORD *)(v1 + 24) += *(_DWORD *)(v1 + 28);
    *(_QWORD *)(v1 + 72) += *(int *)(v1 + 80);
    ++*(_DWORD *)(v1 + 64);
  }
  return result;
}

void WebPRescalerDspInit()
{
  if ((uint64_t (*)())WebPRescalerDspInit_WebPRescalerDspInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPRescalerImportRowExpand = (uint64_t)WebPRescalerImportRowExpand_C;
    WebPRescalerImportRowShrink = (uint64_t)WebPRescalerImportRowShrink_C;
    WebPRescalerDspInitNEON();
    if (!WebPRescalerExportRowExpand)
      WebPRescalerDspInit_cold_1();
    if (!WebPRescalerExportRowShrink)
      WebPRescalerDspInit_cold_2();
    if (!WebPRescalerImportRowExpand)
      WebPRescalerDspInit_cold_3();
    if (!WebPRescalerImportRowShrink)
      WebPRescalerDspInit_cold_4();
    WebPRescalerDspInit_WebPRescalerDspInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void WebPRescalerImportRowExpand_C_cold_1()
{
  __assert_rtn("WebPRescalerImportRowExpand_C", "rescaler.c", 35, "wrk->x_expand");
}

void WebPRescalerImportRowExpand_C_cold_2()
{
  __assert_rtn("WebPRescalerImportRowExpand_C", "rescaler.c", 58, "wrk->x_sub == 0 || accum == 0");
}

void WebPRescalerImportRowExpand_C_cold_3()
{
  __assert_rtn("WebPRescalerImportRowExpand_C", "rescaler.c", 53, "x_in < wrk->src_width * x_stride");
}

void WebPRescalerImportRowExpand_C_cold_4()
{
  __assert_rtn("WebPRescalerImportRowExpand_C", "rescaler.c", 34, "!WebPRescalerInputDone(wrk)");
}

void WebPRescalerImportRowShrink_C_cold_1()
{
  __assert_rtn("WebPRescalerImportRowShrink_C", "rescaler.c", 92, "accum == 0");
}

void WebPRescalerImportRowShrink_C_cold_2()
{
  __assert_rtn("WebPRescalerImportRowShrink_C", "rescaler.c", 79, "x_in < wrk->src_width * x_stride");
}

void WebPRescalerImportRowShrink_C_cold_3()
{
  __assert_rtn("WebPRescalerImportRowShrink_C", "rescaler.c", 68, "!wrk->x_expand");
}

void WebPRescalerImportRowShrink_C_cold_4()
{
  __assert_rtn("WebPRescalerImportRowShrink_C", "rescaler.c", 67, "!WebPRescalerInputDone(wrk)");
}

void WebPRescalerImportRow_cold_1()
{
  __assert_rtn("WebPRescalerImportRow", "rescaler.c", 162, "!WebPRescalerInputDone(wrk)");
}

void WebPRescalerExportRow_cold_1()
{
  __assert_rtn("WebPRescalerExportRow", "rescaler.c", 180, "wrk->src_width == 1 && wrk->dst_width <= 2");
}

void WebPRescalerExportRow_cold_2()
{
  __assert_rtn("WebPRescalerExportRow", "rescaler.c", 179, "wrk->src_height == wrk->dst_height && wrk->x_add == 1");
}

void WebPRescalerExportRow_cold_3()
{
  __assert_rtn("WebPRescalerExportRow", "rescaler.c", 172, "!WebPRescalerOutputDone(wrk)");
}

void WebPRescalerDspInit_cold_1()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 247, "WebPRescalerExportRowExpand != NULL");
}

void WebPRescalerDspInit_cold_2()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 248, "WebPRescalerExportRowShrink != NULL");
}

void WebPRescalerDspInit_cold_3()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 249, "WebPRescalerImportRowExpand != NULL");
}

void WebPRescalerDspInit_cold_4()
{
  __assert_rtn("WebPRescalerDspInit_body", "rescaler.c", 250, "WebPRescalerImportRowShrink != NULL");
}

void WebPRescalerDspInitNEON()
{
  WebPRescalerExportRowExpand = (uint64_t)RescalerExportRowExpand_NEON;
  WebPRescalerExportRowShrink = (uint64_t)RescalerExportRowShrink_NEON;
}

int32x4_t *RescalerExportRowExpand_NEON(int32x4_t *result, int32x2_t a2, uint32x2_t a3, uint32x2_t a4)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int32x4_t *v9;
  unsigned int v10;
  uint32x4_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint32x4_t *v14;
  int32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  unint64_t v19;
  int32x4_t *v20;
  _BYTE *v21;
  __int32 *v22;
  __int32 *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  _BYTE *v29;
  __int32 *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;

  if (result[4].i32[0] >= result[3].i32[2])
    RescalerExportRowExpand_NEON_cold_4();
  v4 = result[1].i32[2];
  if (v4 >= 1)
    RescalerExportRowExpand_NEON_cold_1();
  if (!result->i32[1])
    RescalerExportRowExpand_NEON_cold_2();
  v5 = result[2].i32[0];
  if (!(_DWORD)v5)
    RescalerExportRowExpand_NEON_cold_3();
  v6 = result[4].i64[1];
  v7 = (result->i32[2] * result[3].i32[1]);
  v8 = v7 & 0xFFFFFFF8;
  v9 = (int32x4_t *)result[6].i64[0];
  v10 = result[1].u32[0];
  a2.i32[0] = v10 >> 1;
  if (v4)
  {
    v11 = (uint32x4_t *)result[5].i64[1];
    v12 = ((unint64_t)-v4 << 32) / v5;
    if ((int)v8 < 1)
    {
      LODWORD(v13) = 0;
    }
    else
    {
      v13 = 0;
      a3.i32[0] = -(int)v12;
      a4.i32[0] = v12;
      v14 = v11 + 1;
      result = v9 + 1;
      do
      {
        v15 = vraddhn_high_s64(vraddhn_s64((int64x2_t)vmlal_lane_u32(vmull_lane_u32(*(uint32x2_t *)v14[-1].i8, a4, 0), *(uint32x2_t *)result[-1].i8, a3, 0), (int64x2_t)0), (int64x2_t)vmlal_high_lane_u32(vmull_high_lane_u32(v14[-1], a4, 0), (uint32x4_t)result[-1], a3, 0), (int64x2_t)0);
        v16 = *(uint32x4_t *)result;
        result += 2;
        v17 = v16;
        v18 = *v14;
        v14 += 2;
        *(uint8x8_t *)(v6 + v13) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(v15, a2, 0), (int16x8_t)vqrdmulhq_lane_s32(vraddhn_high_s64(vraddhn_s64((int64x2_t)vmlal_lane_u32(vmull_lane_u32(*(uint32x2_t *)v18.i8, a4, 0), *(uint32x2_t *)v17.i8, a3, 0), (int64x2_t)0), (int64x2_t)vmlal_high_lane_u32(vmull_high_lane_u32(v18, a4, 0), v17, a3, 0), (int64x2_t)0),
                                                                         a2,
                                                                         0)));
        v13 += 8;
      }
      while (v13 < v8);
    }
    if ((int)v13 < (int)v7)
    {
      v21 = (_BYTE *)(v6 + v13);
      v22 = &v11->i32[v13];
      v23 = &v9->i32[v13];
      v24 = v7 - v13;
      do
      {
        v26 = *v23++;
        v25 = v26;
        v27 = *v22++;
        v28 = (((v12 * (unint64_t)v27 + v25 * (unint64_t)-(int)v12 + 0x80000000) >> 32)
             * v10
             + 0x80000000) >> 32;
        if ((int)v28 > 255)
          LOBYTE(v28) = -1;
        *v21++ = v28;
        --v24;
      }
      while (v24);
    }
  }
  else
  {
    if ((int)v8 < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v19 = 0;
      v20 = v9 + 1;
      do
      {
        *(uint8x8_t *)(v6 + v19) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(v20[-1], a2, 0), (int16x8_t)vqrdmulhq_lane_s32(*v20, a2, 0)));
        v19 += 8;
        v20 += 2;
      }
      while (v19 < v8);
    }
    if ((int)v19 < (int)v7)
    {
      v29 = (_BYTE *)(v6 + v19);
      v30 = &v9->i32[v19];
      v31 = v7 - v19;
      do
      {
        v32 = *v30++;
        v33 = (v32 * (unint64_t)v10 + 0x80000000) >> 32;
        if ((int)v33 > 255)
          LOBYTE(v33) = -1;
        *v29++ = v33;
        --v31;
      }
      while (v31);
    }
  }
  return result;
}

uint64_t RescalerExportRowShrink_NEON(uint64_t result, int32x2_t a2, int32x2_t a3)
{
  int v3;
  uint64_t v4;
  uint32x4_t *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int32x4_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint32x4_t *v13;
  int32x4_t *v14;
  uint32x4_t v15;
  uint32x4_t v16;
  unint64_t v17;
  int32x4_t *v18;
  _BYTE *v19;
  __int32 *v20;
  __int32 *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  __int32 *v27;
  uint64_t v28;
  unint64_t v29;

  if (*(_DWORD *)(result + 64) >= *(_DWORD *)(result + 56))
    RescalerExportRowShrink_NEON_cold_3();
  v3 = *(_DWORD *)(result + 24);
  if (v3 >= 1)
    RescalerExportRowShrink_NEON_cold_1();
  if (*(_DWORD *)(result + 4))
    RescalerExportRowShrink_NEON_cold_2();
  v4 = *(_QWORD *)(result + 72);
  v5 = *(uint32x4_t **)(result + 88);
  v6 = (*(_DWORD *)(result + 8) * *(_DWORD *)(result + 52));
  v7 = v6 & 0xFFFFFFF8;
  v9 = *(_DWORD *)(result + 16);
  v8 = *(_DWORD *)(result + 20);
  a2.i32[0] = v8 >> 1;
  if (v3 * v9)
  {
    v10 = *(int32x4_t **)(result + 96);
    v11 = -(v3 * v9);
    if ((int)v7 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v12 = 0;
      a3.i32[0] = v11 >> 1;
      v13 = v5 + 1;
      v14 = v10 + 1;
      do
      {
        v15 = (uint32x4_t)vqdmulhq_lane_s32(v14[-1], a3, 0);
        v16 = (uint32x4_t)vqdmulhq_lane_s32(*v14, a3, 0);
        *(uint8x8_t *)(v4 + v12) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32((int32x4_t)vqsubq_u32(v13[-1], v15), a2, 0), (int16x8_t)vqrdmulhq_lane_s32((int32x4_t)vqsubq_u32(*v13, v16), a2, 0)));
        v13[-1] = v15;
        *v13 = v16;
        v12 += 8;
        v13 += 2;
        v14 += 2;
      }
      while (v12 < v7);
    }
    if ((int)v12 < (int)v6)
    {
      v19 = (_BYTE *)(v4 + v12);
      v20 = &v5->i32[v12];
      v21 = &v10->i32[v12];
      v22 = v6 - v12;
      do
      {
        v23 = *v21++;
        v24 = (v23 * (unint64_t)v11) >> 32;
        v25 = (v8 * (unint64_t)(*v20 - v24) + 0x80000000) >> 32;
        if ((int)v25 > 255)
          LOBYTE(v25) = -1;
        *v19++ = v25;
        *v20++ = v24;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    if ((int)v7 < 1)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v17 = 0;
      v18 = *(int32x4_t **)(result + 88);
      do
      {
        *(uint8x8_t *)(v4 + v17) = vqmovn_u16((uint16x8_t)vuzp1q_s16((int16x8_t)vqrdmulhq_lane_s32(*v18, a2, 0), (int16x8_t)vqrdmulhq_lane_s32(v18[1], a2, 0)));
        v17 += 8;
        *v18 = 0uLL;
        v18[1] = 0uLL;
        v18 += 2;
      }
      while (v17 < v7);
    }
    if ((int)v17 < (int)v6)
    {
      v26 = (_BYTE *)(v4 + v17);
      v27 = &v5->i32[v17];
      v28 = v6 - v17;
      do
      {
        v29 = (*v27 * (unint64_t)v8 + 0x80000000) >> 32;
        if ((int)v29 > 255)
          LOBYTE(v29) = -1;
        *v26++ = v29;
        *v27++ = 0;
        --v28;
      }
      while (v28);
    }
  }
  return result;
}

void RescalerExportRowExpand_NEON_cold_1()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 73, "wrk->y_accum <= 0");
}

void RescalerExportRowExpand_NEON_cold_2()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 74, "wrk->y_expand");
}

void RescalerExportRowExpand_NEON_cold_3()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 75, "wrk->y_sub != 0");
}

void RescalerExportRowExpand_NEON_cold_4()
{
  __assert_rtn("RescalerExportRowExpand_NEON", "rescaler_neon.c", 72, "!WebPRescalerOutputDone(wrk)");
}

void RescalerExportRowShrink_NEON_cold_1()
{
  __assert_rtn("RescalerExportRowShrink_NEON", "rescaler_neon.c", 130, "wrk->y_accum <= 0");
}

void RescalerExportRowShrink_NEON_cold_2()
{
  __assert_rtn("RescalerExportRowShrink_NEON", "rescaler_neon.c", 131, "!wrk->y_expand");
}

void RescalerExportRowShrink_NEON_cold_3()
{
  __assert_rtn("RescalerExportRowShrink_NEON", "rescaler_neon.c", 129, "!WebPRescalerOutputDone(wrk)");
}

uint64_t WebPDequantizeLevels(_BYTE *a1, int a2, int a3, int a4, signed int a5)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  size_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _WORD *v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _WORD *v53;
  unsigned int v54;
  _BYTE *v55;
  uint64_t v56;
  __int16 v57;
  __int16 v58;
  char *v59;
  uint64_t v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  _BYTE *v72;
  uint64_t v73;
  char *v74;
  int v75;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v83;
  int v84;
  char *v85;
  int v86;
  _BYTE *v87;
  int v88;
  _OWORD v89[16];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a5 > 0x64)
    return 0;
  result = 0;
  if (a1)
  {
    if (a2 >= 1)
    {
      v9 = a3 - 1;
      if (a3 >= 1)
      {
        v87 = a1;
        v10 = a5 / 25;
        result = 1;
        v11 = a2;
        v12 = a2 - 1;
        if (((2 * (a5 / 25)) | 1) > a2)
          v10 = v12 >> 1;
        if ((int)((2 * v10) | 1) <= a3)
          v13 = v10;
        else
          v13 = v9 >> 1;
        v86 = v13 - 1;
        if (v13 >= 1)
        {
          v14 = 2 * v13;
          v15 = (2 * v13 + 2) * a2;
          v16 = 2 * a2;
          result = (uint64_t)WebPSafeMalloc(1uLL, v16 + 2 * v15 + 4094);
          if (result)
          {
            v84 = v9;
            v88 = v13;
            v17 = -v13;
            v80 = 2 * a2;
            v81 = 2 * v15;
            v18 = a2;
            v19 = v14 | 1;
            v83 = a2;
            v79 = (v14 | 1) * a2;
            v20 = result + 2 * v79;
            v21 = (void *)(v20 - 2 * v18);
            v85 = (char *)result;
            bzero(v21, v16);
            v22 = v85;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            v26 = &v85[v81];
            v27 = 255;
            v28 = 255;
            v29 = v87;
            memset(v89, 0, sizeof(v89));
            do
            {
              v30 = 0;
              v31 = v24;
              v32 = v28;
              do
              {
                v33 = v29[v30];
                if (v32 > (int)v33)
                {
                  v27 = v29[v30];
                  v28 = v27;
                }
                if (v32 >= (int)v33)
                  v32 = v29[v30];
                if (v31 < (int)v33)
                {
                  v23 = v29[v30];
                  v24 = v23;
                }
                if (v31 <= (int)v33)
                  v31 = v29[v30];
                *((_BYTE *)v89 + v33) = 1;
                ++v30;
              }
              while (v18 != v30);
              v29 += a4;
              ++v25;
            }
            while (v25 != a3);
            v34 = 0;
            v35 = 0;
            v36 = &v26[v80];
            v37 = v24 - v28;
            v38 = -1;
            do
            {
              v39 = v35 - v38;
              if ((int)v35 - v38 >= v37)
                v39 = v37;
              if (v38 < 0)
                v39 = v37;
              if (*((_BYTE *)v89 + v35))
              {
                ++v34;
                v37 = v39;
                v38 = v35;
              }
              ++v35;
            }
            while (v35 != 256);
            v40 = 0;
            v41 = v36 + 2046;
            v42 = 4 * v37;
            v43 = 12 * v37;
            v44 = (12 * v37) >> 2;
            v45 = 4 * v37;
            v46 = (uint64_t)v43 >> 2;
            v47 = v44 * (v42 - 1);
            v48 = 2044;
            v49 = v42 - (v43 >> 2);
            do
            {
              v50 = v40 + 1;
              if (v40 + 1 > v46)
              {
                if (v50 >= v45)
                  LODWORD(v50) = 0;
                else
                  LODWORD(v50) = v47 / v49;
              }
              *(_WORD *)&v36[2 * v40 + 2048] = v50 >> 2;
              *(_WORD *)&v36[v48] = -(__int16)(v50 >> 2);
              ++v40;
              v48 -= 2;
              v47 -= v46;
            }
            while (v40 != 1023);
            *v41 = 0;
            if (v34 >= 3 && v17 < a3)
            {
              v51 = v88 + 1;
              v52 = v83 - v88;
              v53 = v85;
              v54 = 0x40000u / (v19 * v19);
              v55 = v87;
              do
              {
                v56 = 0;
                v57 = 0;
                do
                {
                  v57 += v55[v56];
                  v58 = *((_WORD *)v21 + v56) + v57;
                  *(_WORD *)(v20 + 2 * v56) = v58 - v53[v56];
                  v53[v56++] = v58;
                }
                while (v18 != v56);
                if (&v53[v11] == (_WORD *)v20)
                  v59 = v22;
                else
                  v59 = (char *)&v53[v11];
                if (v17 >= v84 || v17 <= -1)
                  v61 = 0;
                else
                  v61 = a4;
                v62 = v86;
                v63 = &v85[2 * v79 + 2 * v88];
                v64 = &v85[v81];
                v65 = (v88 + 1);
                if (v17 >= v88)
                {
                  do
                  {
                    v66 = *(_WORD *)v63;
                    v63 -= 2;
                    *(_WORD *)v64 = (v54 * (unsigned __int16)(v66 + *(_WORD *)(v20 + 2 * v62))) >> 16;
                    v64 += 2;
                    ++v62;
                    --v65;
                  }
                  while (v65);
                  v67 = v88 + 1;
                  if (v51 < (int)v52)
                  {
                    v68 = 0;
                    do
                    {
                      *(_WORD *)&v26[2 * (v51 + v68)] = (v54
                                                                     * (unsigned __int16)(*(_WORD *)&v85[2 * v88 + 2 * (uint64_t)v51 + 2 * v79 + 2 * v68]
                                                                                        - *(_WORD *)(v20 + 2 * (int)v68))) >> 16;
                      ++v68;
                    }
                    while (v51 + v68 < v52);
                    v67 = v51 + v68;
                  }
                  if (v67 < v83)
                  {
                    v69 = v67;
                    v70 = 2 * v83 - 2 - (v88 + v67);
                    v71 = ~v88 + v67;
                    do
                      *(_WORD *)&v26[2 * v69++] = (v54
                                                               * (unsigned __int16)(2 * *(_WORD *)(v20 + 2 * v12)
                                                                                  - (*(_WORD *)(v20 + 2 * v70--)
                                                                                   + *(_WORD *)(v20 + 2 * v71++)))) >> 16;
                    while (v11 != v69);
                  }
                  v72 = v87;
                  v73 = v18;
                  v74 = &v85[v81];
                  do
                  {
                    v75 = *v72;
                    if (v23 > v75 && v27 < v75)
                    {
                      v77 = (__int16)v41[*(unsigned __int16 *)v74 - 4 * v75];
                      v78 = (v77 + v75) & ~((v77 + v75) >> 31);
                      if (v78 >= 255)
                        LOBYTE(v78) = -1;
                      *v72 = v78;
                    }
                    v74 += 2;
                    ++v72;
                    --v73;
                  }
                  while (v73);
                  v87 += a4;
                }
                v55 += v61;
                ++v17;
                v21 = v53;
                v53 = v59;
                v22 = v85;
              }
              while (v17 != a3);
            }
            _TIFFfree(v22);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

void WebPDeallocateAlphaMemory(uint64_t a1)
{
  if (!a1)
    WebPDeallocateAlphaMemory_cold_1();
  _TIFFfree(*(void **)(a1 + 2992));
  *(_OWORD *)(a1 + 2992) = 0u;
  ALPHDelete(*(void ***)(a1 + 2960));
  *(_QWORD *)(a1 + 2960) = 0;
}

void ALPHDelete(void **a1)
{
  if (a1)
  {
    VP8LDelete(a1[3]);
    a1[3] = 0;
    _TIFFfree(a1);
  }
}

uint64_t VP8DecompressAlphaRows(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t result;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  signed int v26;
  unsigned __int8 *v27;
  int *v28;
  unint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int *v40;
  int v41;

  if (!a1)
    VP8DecompressAlphaRows_cold_1();
  v4 = a3;
  result = 0;
  if ((a3 & 0x80000000) == 0)
  {
    v7 = a4;
    if (a4 >= 1)
    {
      v8 = a2;
      v9 = a2[33];
      v10 = (a4 + a3);
      if ((int)v10 <= v9)
      {
        v11 = *a2;
        if (*(_DWORD *)(a1 + 2984))
          return *(_QWORD *)(a1 + 3000) + v11 * (uint64_t)v4;
        v12 = *(int **)(a1 + 2960);
        if (!v12)
        {
          v14 = WebPSafeCalloc(1uLL, 0xD8uLL);
          *(_QWORD *)(a1 + 2960) = v14;
          if (!v14)
          {
            VP8SetError(a1, 1, (uint64_t)"Alpha decoder initialization failed.");
            return 0;
          }
          if (*(_QWORD *)(a1 + 2992))
            VP8DecompressAlphaRows_cold_9();
          v15 = WebPSafeMalloc(v8[33] * (uint64_t)*v8, 1uLL);
          *(_QWORD *)(a1 + 2992) = v15;
          if (v15)
          {
            v16 = v15;
            *(_QWORD *)(a1 + 3000) = v15;
            *(_QWORD *)(a1 + 3008) = 0;
          }
          else
          {
            if (!VP8SetError(a1, 1, (uint64_t)"Alpha decoder initialization failed."))
              goto LABEL_45;
            v16 = *(void **)(a1 + 3000);
          }
          v27 = *(unsigned __int8 **)(a1 + 2968);
          if (!v27 || !v16)
            VP8DecompressAlphaRows_cold_2();
          v28 = *(int **)(a1 + 2960);
          v29 = *(_QWORD *)(a1 + 2976);
          VP8FiltersInit();
          *((_QWORD *)v28 + 25) = v16;
          v31 = *v8;
          v30 = v8[1];
          *v28 = *v8;
          v28[1] = v30;
          if (v31 < 1 || v30 <= 0)
            VP8DecompressAlphaRows_cold_3();
          if (v29 < 2)
            goto LABEL_41;
          v32 = *v27 & 3;
          v28[2] = v32;
          v28[3] = (*v27 >> 2) & 3;
          v33 = (*v27 >> 4) & 3;
          v28[4] = v33;
          if (v32 > 1 || v33 > 1 || *v27 > 0x3Fu)
            goto LABEL_41;
          VP8InitIoInternal((_OWORD *)v28 + 2, 521);
          WebPInitCustomIo(0, (_QWORD *)v28 + 4);
          *((_QWORD *)v28 + 11) = v28;
          *((_QWORD *)v28 + 4) = *(_QWORD *)v8;
          *(_OWORD *)(v28 + 37) = *(_OWORD *)(v8 + 29);
          v28[41] = v8[33];
          v36 = v28[2];
          if (v36)
          {
            if (v36 != 1)
              VP8DecompressAlphaRows_cold_4();
            v37 = VP8LDecodeAlphaHeader(v28, v27 + 1, v29 - 1);
          }
          else
          {
            v37 = v29 - 1 >= v28[1] * (uint64_t)*v28;
          }
          if (!v37)
          {
LABEL_41:
            v34 = *(int **)(*(_QWORD *)(a1 + 2960) + 24);
            if (v34)
              v35 = *v34;
            else
              v35 = 1;
            VP8SetError(a1, v35, (uint64_t)"Alpha decoder initialization failed.");
            goto LABEL_45;
          }
          v12 = *(int **)(a1 + 2960);
          if (v12[4] == 1)
            v7 = v9 - v4;
          else
            *(_DWORD *)(a1 + 3016) = 0;
          v10 = (v7 + v4);
        }
        if ((int)v10 > v9)
          VP8DecompressAlphaRows_cold_5();
        v13 = v12[41];
        if (v12[2])
        {
          if (!*((_QWORD *)v12 + 3))
            VP8DecompressAlphaRows_cold_8();
          if (!VP8LDecodeAlphaImageStream((uint64_t)v12, v10, a3))
            goto LABEL_45;
        }
        else
        {
          v17 = *v12;
          v18 = *(_QWORD *)(a1 + 2968);
          v19 = v18 + 1;
          if (v18 + 1 + (int)v17 * (uint64_t)v4 > (unint64_t)(v18 + *(_QWORD *)(a1 + 2976)))
            VP8DecompressAlphaRows_cold_6();
          v41 = v11;
          v20 = WebPUnfilters;
          if (!WebPUnfilters[v12[3]])
            VP8DecompressAlphaRows_cold_7();
          v21 = *(_QWORD *)(a1 + 3008);
          if (v7 >= 1)
          {
            v38 = v4;
            v39 = v12[41];
            v40 = v8;
            v22 = (int)v17 * (uint64_t)v4;
            v23 = *(_QWORD *)(a1 + 3000);
            do
            {
              v24 = v23 + v22;
              v25 = v20;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v20[v12[3]])(v21, v19 + v22, v23 + v22, v17);
              v20 = v25;
              v22 += v17;
              v21 = v24;
              --v7;
            }
            while (v7);
            v21 = v23 - v17 + v22;
            v8 = v40;
            v4 = v38;
            v13 = v39;
          }
          *(_QWORD *)(a1 + 3008) = v21;
          v11 = v41;
        }
        if ((int)v10 >= v13)
        {
          *(_DWORD *)(a1 + 2984) = 1;
        }
        else if (!*(_DWORD *)(a1 + 2984))
        {
          return *(_QWORD *)(a1 + 3000) + v11 * (uint64_t)v4;
        }
        ALPHDelete(*(void ***)(a1 + 2960));
        *(_QWORD *)(a1 + 2960) = 0;
        v26 = *(_DWORD *)(a1 + 3016);
        if (v26 < 1
          || WebPDequantizeLevels((_BYTE *)(*(_QWORD *)(a1 + 3000) + v8[32] * v11 + v8[30]), v8[31] - v8[30], v8[33] - v8[32], v11, v26))
        {
          return *(_QWORD *)(a1 + 3000) + v11 * (uint64_t)v4;
        }
LABEL_45:
        _TIFFfree(*(void **)(a1 + 2992));
        *(_OWORD *)(a1 + 2992) = 0u;
        ALPHDelete(*(void ***)(a1 + 2960));
        result = 0;
        *(_QWORD *)(a1 + 2960) = 0;
      }
    }
  }
  return result;
}

void WebPDeallocateAlphaMemory_cold_1()
{
  __assert_rtn("WebPDeallocateAlphaMemory", "alpha_dec.c", 158, "dec != NULL");
}

void VP8DecompressAlphaRows_cold_1()
{
  __assert_rtn("VP8DecompressAlphaRows", "alpha_dec.c", 175, "dec != NULL && io != NULL");
}

void VP8DecompressAlphaRows_cold_2()
{
  __assert_rtn("ALPHInit", "alpha_dec.c", 57, "data != NULL && output != NULL && src_io != NULL");
}

void VP8DecompressAlphaRows_cold_3()
{
  __assert_rtn("ALPHInit", "alpha_dec.c", 63, "dec->width_ > 0 && dec->height_ > 0");
}

void VP8DecompressAlphaRows_cold_4()
{
  __assert_rtn("ALPHInit", "alpha_dec.c", 99, "dec->method_ == ALPHA_LOSSLESS_COMPRESSION");
}

void VP8DecompressAlphaRows_cold_5()
{
  __assert_rtn("VP8DecompressAlphaRows", "alpha_dec.c", 208, "row + num_rows <= height");
}

void VP8DecompressAlphaRows_cold_6()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 119, "deltas <= &dec->alpha_data_[dec->alpha_data_size_]");
}

void VP8DecompressAlphaRows_cold_7()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 120, "WebPUnfilters[alph_dec->filter_] != NULL");
}

void VP8DecompressAlphaRows_cold_8()
{
  __assert_rtn("ALPHDecode", "alpha_dec.c", 129, "alph_dec->vp8l_dec_ != NULL");
}

void VP8DecompressAlphaRows_cold_9()
{
  __assert_rtn("AllocateAlphaPlane", "alpha_dec.c", 145, "dec->alpha_plane_mem_ == NULL");
}

void *WebPSafeMalloc(unint64_t a1, unint64_t a2)
{
  size_t v3;

  if (a1 && 0x400000000 / a1 < a2)
    return 0;
  v3 = a2 * a1;
  if (!v3)
    WebPSafeMalloc_cold_1();
  return malloc_type_malloc(v3, 0x5779198FuLL);
}

void *WebPSafeCalloc(size_t a1, size_t a2)
{
  if (a1 && 0x400000000 / a1 < a2)
    return 0;
  if (!(a2 * a1))
    WebPSafeCalloc_cold_1();
  return malloc_type_calloc(a1, a2, 0xF306AD2FuLL);
}

char *WebPCopyPlane(char *__src, int a2, char *__dst, int a4, int a5, int a6)
{
  char *v6;
  int v7;
  int v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  if (!__src || (v6 = __dst) == 0)
    WebPCopyPlane_cold_1();
  if (a2 >= 0)
    v7 = a2;
  else
    v7 = -a2;
  if (a4 >= 0)
    v8 = a4;
  else
    v8 = -a4;
  if (v7 < a5 || v8 < a5)
    WebPCopyPlane_cold_2();
  if (a6 >= 1)
  {
    v9 = __src;
    v10 = a5;
    v11 = a2;
    v12 = a6 + 1;
    v13 = a4;
    do
    {
      __src = (char *)memcpy(v6, v9, v10);
      v9 += v11;
      v6 += v13;
      --v12;
    }
    while (v12 > 1);
  }
  return __src;
}

void WebPSafeMalloc_cold_1()
{
  __assert_rtn("WebPSafeMalloc", "utils.c", 198, "nmemb * size > 0");
}

void WebPSafeCalloc_cold_1()
{
  __assert_rtn("WebPSafeCalloc", "utils.c", 208, "nmemb * size > 0");
}

void WebPCopyPlane_cold_1()
{
  __assert_rtn("WebPCopyPlane", "utils.c", 236, "src != NULL && dst != NULL");
}

void WebPCopyPlane_cold_2()
{
  __assert_rtn("WebPCopyPlane", "utils.c", 237, "abs(src_stride) >= width && abs(dst_stride) >= width");
}

uint64_t WebPSamplerProcessPlane(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (a9 >= 1)
  {
    v15 = result;
    v16 = 0;
    v17 = a2;
    v18 = a7;
    do
    {
      result = a10(v15, a3, a4, a6, a8);
      v15 += v17;
      v19 = (v16 << 31 >> 31) & a5;
      a4 += v19;
      a3 += v19;
      a6 += v18;
      ++v16;
    }
    while (a9 != v16);
  }
  return result;
}

void WebPInitSamplers()
{
  if ((uint64_t (*)())WebPInitSamplers_WebPInitSamplers_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPSamplers = (uint64_t)YuvToRgbRow;
    unk_1EDF09660 = YuvToRgbaRow;
    qword_1EDF09668 = (uint64_t)YuvToBgrRow;
    unk_1EDF09670 = YuvToBgraRow;
    qword_1EDF09678 = (uint64_t)YuvToArgbRow;
    unk_1EDF09680 = YuvToRgba4444Row;
    qword_1EDF09688 = (uint64_t)YuvToRgb565Row;
    unk_1EDF09690 = YuvToRgbaRow;
    qword_1EDF09698 = (uint64_t)YuvToBgraRow;
    unk_1EDF096A0 = YuvToArgbRow;
    qword_1EDF096A8 = (uint64_t)YuvToRgba4444Row;
    WebPInitSamplers_WebPInitSamplers_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t WebPConvertARGBToUV_C(uint64_t result, _BYTE *a2, unsigned __int8 *a3, int a4, int a5)
{
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  if (a4 < 2)
  {
    v5 = 0;
    if ((a4 & 1) == 0)
      return result;
    goto LABEL_10;
  }
  v5 = a4 >> 1;
  v6 = (_DWORD *)(result + 4);
  v7 = a4 >> 1;
  v8 = a2;
  v9 = a3;
  do
  {
    v10 = *(v6 - 1);
    v11 = ((*v6 >> 15) & 0x1FE) + ((v10 >> 15) & 0x1FE);
    v12 = ((*v6 >> 7) & 0x1FE) + ((v10 >> 7) & 0x1FE);
    v13 = 2 * *v6 + 2 * v10;
    v14 = (-19081 * v12 - 9719 * v11 + 28800 * v13 + 33685504) >> 18;
    v15 = (-24116 * v12 + 28800 * v11 - 4684 * v13 + 33685504) >> 18;
    if (a5)
    {
      *v8 = v14;
    }
    else
    {
      *v8 = (v14 + *v8 + 1) >> 1;
      v15 = (v15 + *v9 + 1) >> 1;
    }
    *v9++ = v15;
    v6 += 2;
    ++v8;
    --v7;
  }
  while (v7);
  if ((a4 & 1) != 0)
  {
LABEL_10:
    v16 = *(_DWORD *)(result + 8 * v5);
    v17 = (v16 >> 14) & 0x3FC;
    v18 = (v16 >> 6) & 0x3FC;
    v19 = (-19081 * v18 - 9719 * v17 + 115200 * v16 + 33685504) >> 18;
    v20 = (-24116 * v18 + 28800 * v17 - 18736 * *(_DWORD *)(result + 8 * v5) + 33685504) >> 18;
    if (a5)
    {
      a2[v5] = v19;
      a3[v5] = v20;
    }
    else
    {
      a2[v5] = (v19 + a2[v5] + 1) >> 1;
      a3[v5] = (v20 + a3[v5] + 1) >> 1;
    }
  }
  return result;
}

unsigned __int16 *WebPConvertRGBA32ToUV_C(unsigned __int16 *result, char *a2, char *a3, int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  if (a4 >= 1)
  {
    v4 = a4;
    do
    {
      v5 = *result;
      v6 = result[1];
      v7 = result[2];
      v8 = -9719 * v5 - 19081 * v6 + 28800 * v7;
      v9 = v8 + 33685504;
      v10 = (v8 + 33685504) >> 18;
      if (v8 >= -33685504)
        v11 = -1;
      else
        v11 = 0;
      if (!(v9 >> 26))
        v11 = v10;
      *a2++ = v11;
      v12 = 28800 * v5 - 24116 * v6 - 4684 * v7;
      v13 = v12 + 33685504;
      v14 = (v12 + 33685504) >> 18;
      if (v12 >= -33685504)
        v15 = -1;
      else
        v15 = 0;
      if (!(v13 >> 26))
        v15 = v14;
      *a3++ = v15;
      result += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

void WebPInitConvertARGBToYUV()
{
  if ((uint64_t (*)())WebPInitConvertARGBToYUV_WebPInitConvertARGBToYUV_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPConvertARGBToY = (uint64_t (*)(_QWORD, _QWORD, _QWORD))ConvertARGBToY_C;
    WebPConvertARGBToUV = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))WebPConvertARGBToUV_C;
    WebPConvertRGB24ToY = (uint64_t)ConvertRGB24ToY_C;
    WebPConvertBGR24ToY = (uint64_t)ConvertBGR24ToY_C;
    WebPConvertRGBA32ToUV = (uint64_t)WebPConvertRGBA32ToUV_C;
    WebPInitConvertARGBToYUVNEON();
    if (!WebPConvertARGBToY)
      WebPInitConvertARGBToYUV_cold_1();
    if (!WebPConvertARGBToUV)
      WebPInitConvertARGBToYUV_cold_2();
    if (!WebPConvertRGB24ToY)
      WebPInitConvertARGBToYUV_cold_3();
    if (!WebPConvertBGR24ToY)
      WebPInitConvertARGBToYUV_cold_4();
    if (!WebPConvertRGBA32ToUV)
      WebPInitConvertARGBToYUV_cold_5();
    WebPInitConvertARGBToYUV_WebPInitConvertARGBToYUV_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

unsigned __int8 *YuvToRgbRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  char *v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  signed int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  signed int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  signed int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;

  if ((a5 & 0xFFFFFFFE) != 0)
  {
    v5 = &a4[3 * (a5 & 0xFFFFFFFE)];
    do
    {
      v6 = *a2;
      v7 = *a3;
      v8 = 19077 * *result;
      v9 = ((26149 * v7) >> 8) + (v8 >> 8);
      v10 = v9 - 14234;
      v11 = (v9 - 14234) >> 6;
      if (v9 >= 0x379A)
        v12 = -1;
      else
        v12 = 0;
      if (v10 < 0x4000)
        v12 = v11;
      *a4 = v12;
      v13 = (v8 >> 8) - (((6419 * v6) >> 8) + ((13320 * v7) >> 8));
      v14 = v13 + 8708;
      v15 = (v13 + 8708) >> 6;
      if (v13 >= -8708)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      a4[1] = v16;
      v17 = ((33050 * v6) >> 8) + (v8 >> 8);
      v18 = v17 - 17685;
      v19 = (v17 - 17685) >> 6;
      if (v17 >= 0x4515)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      a4[2] = v20;
      v22 = *a2++;
      v21 = v22;
      v24 = *a3++;
      v23 = v24;
      v25 = 19077 * result[1];
      v26 = ((26149 * v24) >> 8) + (v25 >> 8);
      v27 = v26 - 14234;
      v28 = (v26 - 14234) >> 6;
      if (v26 >= 0x379A)
        v29 = -1;
      else
        v29 = 0;
      if (v27 < 0x4000)
        v29 = v28;
      a4[3] = v29;
      v30 = (v25 >> 8) - (((6419 * v21) >> 8) + ((13320 * v23) >> 8));
      v31 = v30 + 8708;
      v32 = (v30 + 8708) >> 6;
      if (v30 >= -8708)
        v33 = -1;
      else
        v33 = 0;
      if (v31 < 0x4000)
        v33 = v32;
      a4[4] = v33;
      v34 = ((33050 * v21) >> 8) + (v25 >> 8);
      v35 = v34 - 17685;
      v36 = (v34 - 17685) >> 6;
      if (v34 >= 0x4515)
        v37 = -1;
      else
        v37 = 0;
      if (v35 < 0x4000)
        v37 = v36;
      a4[5] = v37;
      result += 2;
      a4 += 6;
    }
    while (a4 != v5);
    a4 = v5;
  }
  if ((a5 & 1) != 0)
  {
    v38 = *a2;
    v39 = *a3;
    v40 = 19077 * *result;
    v41 = ((26149 * v39) >> 8) + (v40 >> 8);
    if (v41 >= 0x379A)
      v42 = -1;
    else
      v42 = 0;
    if (v41 - 14234 >= 0x4000)
      v43 = v42;
    else
      v43 = (v41 - 14234) >> 6;
    *a4 = v43;
    v44 = (v40 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    v45 = v44 + 8708;
    v46 = (v44 + 8708) >> 6;
    if (v44 >= -8708)
      v47 = -1;
    else
      v47 = 0;
    if (v45 < 0x4000)
      v47 = v46;
    a4[1] = v47;
    v48 = ((33050 * v38) >> 8) + (v40 >> 8);
    v49 = v48 - 17685;
    v50 = (v48 - 17685) >> 6;
    if (v48 >= 0x4515)
      v51 = -1;
    else
      v51 = 0;
    if (v49 < 0x4000)
      v51 = v50;
    a4[2] = v51;
  }
  return result;
}

unsigned __int8 *YuvToRgbaRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  signed int v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  signed int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  char v44;
  signed int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;

  v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    v6 = &a4[v5];
    do
    {
      v7 = *a2;
      v8 = *a3;
      v9 = 19077 * *result;
      v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      v11 = v10 - 14234;
      v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A)
        v13 = -1;
      else
        v13 = 0;
      if (v11 < 0x4000)
        v13 = v12;
      *a4 = v13;
      v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      v15 = v14 + 8708;
      v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708)
        v17 = -1;
      else
        v17 = 0;
      if (v15 < 0x4000)
        v17 = v16;
      a4[1] = v17;
      v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      v19 = v18 - 17685;
      v20 = (v18 - 17685) >> 6;
      if (v18 >= 0x4515)
        v21 = -1;
      else
        v21 = 0;
      if (v19 < 0x4000)
        v21 = v20;
      a4[2] = v21;
      a4[3] = -1;
      v23 = *a2++;
      v22 = v23;
      v25 = *a3++;
      v24 = v25;
      v26 = 19077 * result[1];
      v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      v28 = v27 - 14234;
      v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A)
        v30 = -1;
      else
        v30 = 0;
      if (v28 < 0x4000)
        v30 = v29;
      a4[4] = v30;
      v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      v32 = v31 + 8708;
      v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708)
        v34 = -1;
      else
        v34 = 0;
      if (v32 < 0x4000)
        v34 = v33;
      a4[5] = v34;
      v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      v36 = v35 - 17685;
      v37 = (v35 - 17685) >> 6;
      if (v35 >= 0x4515)
        v38 = -1;
      else
        v38 = 0;
      if (v36 < 0x4000)
        v38 = v37;
      a4[6] = v38;
      a4[7] = -1;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if ((a5 & 1) != 0)
  {
    v39 = *a2;
    v40 = *a3;
    v41 = 19077 * *result;
    v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    if (v42 >= 0x379A)
      v43 = -1;
    else
      v43 = 0;
    if (v42 - 14234 >= 0x4000)
      v44 = v43;
    else
      v44 = (v42 - 14234) >> 6;
    *a4 = v44;
    v45 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    v46 = v45 + 8708;
    v47 = (v45 + 8708) >> 6;
    if (v45 >= -8708)
      v48 = -1;
    else
      v48 = 0;
    if (v46 < 0x4000)
      v48 = v47;
    a4[1] = v48;
    v49 = ((33050 * v39) >> 8) + (v41 >> 8);
    v50 = v49 - 17685;
    v51 = (v49 - 17685) >> 6;
    if (v49 >= 0x4515)
      v52 = -1;
    else
      v52 = 0;
    if (v50 < 0x4000)
      v52 = v51;
    a4[2] = v52;
    a4[3] = -1;
  }
  return result;
}

unsigned __int8 *YuvToBgrRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  char *v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  signed int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  signed int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  signed int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;

  if ((a5 & 0xFFFFFFFE) != 0)
  {
    v5 = &a4[3 * (a5 & 0xFFFFFFFE)];
    do
    {
      v6 = *a2;
      v7 = *a3;
      v8 = 19077 * *result;
      v9 = ((33050 * v6) >> 8) + (v8 >> 8);
      v10 = v9 - 17685;
      v11 = (v9 - 17685) >> 6;
      if (v9 >= 0x4515)
        v12 = -1;
      else
        v12 = 0;
      if (v10 < 0x4000)
        v12 = v11;
      *a4 = v12;
      v13 = (v8 >> 8) - (((6419 * v6) >> 8) + ((13320 * v7) >> 8));
      v14 = v13 + 8708;
      v15 = (v13 + 8708) >> 6;
      if (v13 >= -8708)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      a4[1] = v16;
      v17 = ((26149 * v7) >> 8) + (v8 >> 8);
      v18 = v17 - 14234;
      v19 = (v17 - 14234) >> 6;
      if (v17 >= 0x379A)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      a4[2] = v20;
      v22 = *a2++;
      v21 = v22;
      v24 = *a3++;
      v23 = v24;
      v25 = 19077 * result[1];
      v26 = ((33050 * v21) >> 8) + (v25 >> 8);
      v27 = v26 - 17685;
      v28 = (v26 - 17685) >> 6;
      if (v26 >= 0x4515)
        v29 = -1;
      else
        v29 = 0;
      if (v27 < 0x4000)
        v29 = v28;
      a4[3] = v29;
      v30 = (v25 >> 8) - (((6419 * v21) >> 8) + ((13320 * v23) >> 8));
      v31 = v30 + 8708;
      v32 = (v30 + 8708) >> 6;
      if (v30 >= -8708)
        v33 = -1;
      else
        v33 = 0;
      if (v31 < 0x4000)
        v33 = v32;
      a4[4] = v33;
      v34 = ((26149 * v23) >> 8) + (v25 >> 8);
      v35 = v34 - 14234;
      v36 = (v34 - 14234) >> 6;
      if (v34 >= 0x379A)
        v37 = -1;
      else
        v37 = 0;
      if (v35 < 0x4000)
        v37 = v36;
      a4[5] = v37;
      result += 2;
      a4 += 6;
    }
    while (a4 != v5);
    a4 = v5;
  }
  if ((a5 & 1) != 0)
  {
    v38 = *a2;
    v39 = *a3;
    v40 = 19077 * *result;
    v41 = ((33050 * v38) >> 8) + (v40 >> 8);
    if (v41 >= 0x4515)
      v42 = -1;
    else
      v42 = 0;
    if (v41 - 17685 >= 0x4000)
      v43 = v42;
    else
      v43 = (v41 - 17685) >> 6;
    *a4 = v43;
    v44 = (v40 >> 8) - (((6419 * v38) >> 8) + ((13320 * v39) >> 8));
    v45 = v44 + 8708;
    v46 = (v44 + 8708) >> 6;
    if (v44 >= -8708)
      v47 = -1;
    else
      v47 = 0;
    if (v45 < 0x4000)
      v47 = v46;
    a4[1] = v47;
    v48 = ((26149 * v39) >> 8) + (v40 >> 8);
    v49 = v48 - 14234;
    v50 = (v48 - 14234) >> 6;
    if (v48 >= 0x379A)
      v51 = -1;
    else
      v51 = 0;
    if (v49 < 0x4000)
      v51 = v50;
    a4[2] = v51;
  }
  return result;
}

unsigned __int8 *YuvToBgraRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, char *a4, int a5)
{
  signed int v5;
  char *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  signed int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  char v44;
  signed int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;

  v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    v6 = &a4[v5];
    do
    {
      v7 = *a2;
      v8 = *a3;
      v9 = 19077 * *result;
      v10 = ((33050 * v7) >> 8) + (v9 >> 8);
      v11 = v10 - 17685;
      v12 = (v10 - 17685) >> 6;
      if (v10 >= 0x4515)
        v13 = -1;
      else
        v13 = 0;
      if (v11 < 0x4000)
        v13 = v12;
      *a4 = v13;
      v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      v15 = v14 + 8708;
      v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708)
        v17 = -1;
      else
        v17 = 0;
      if (v15 < 0x4000)
        v17 = v16;
      a4[1] = v17;
      v18 = ((26149 * v8) >> 8) + (v9 >> 8);
      v19 = v18 - 14234;
      v20 = (v18 - 14234) >> 6;
      if (v18 >= 0x379A)
        v21 = -1;
      else
        v21 = 0;
      if (v19 < 0x4000)
        v21 = v20;
      a4[2] = v21;
      a4[3] = -1;
      v23 = *a2++;
      v22 = v23;
      v25 = *a3++;
      v24 = v25;
      v26 = 19077 * result[1];
      v27 = ((33050 * v22) >> 8) + (v26 >> 8);
      v28 = v27 - 17685;
      v29 = (v27 - 17685) >> 6;
      if (v27 >= 0x4515)
        v30 = -1;
      else
        v30 = 0;
      if (v28 < 0x4000)
        v30 = v29;
      a4[4] = v30;
      v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      v32 = v31 + 8708;
      v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708)
        v34 = -1;
      else
        v34 = 0;
      if (v32 < 0x4000)
        v34 = v33;
      a4[5] = v34;
      v35 = ((26149 * v24) >> 8) + (v26 >> 8);
      v36 = v35 - 14234;
      v37 = (v35 - 14234) >> 6;
      if (v35 >= 0x379A)
        v38 = -1;
      else
        v38 = 0;
      if (v36 < 0x4000)
        v38 = v37;
      a4[6] = v38;
      a4[7] = -1;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if ((a5 & 1) != 0)
  {
    v39 = *a2;
    v40 = *a3;
    v41 = 19077 * *result;
    v42 = ((33050 * v39) >> 8) + (v41 >> 8);
    if (v42 >= 0x4515)
      v43 = -1;
    else
      v43 = 0;
    if (v42 - 17685 >= 0x4000)
      v44 = v43;
    else
      v44 = (v42 - 17685) >> 6;
    *a4 = v44;
    v45 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    v46 = v45 + 8708;
    v47 = (v45 + 8708) >> 6;
    if (v45 >= -8708)
      v48 = -1;
    else
      v48 = 0;
    if (v46 < 0x4000)
      v48 = v47;
    a4[1] = v48;
    v49 = ((26149 * v40) >> 8) + (v41 >> 8);
    v50 = v49 - 14234;
    v51 = (v49 - 14234) >> 6;
    if (v49 >= 0x379A)
      v52 = -1;
    else
      v52 = 0;
    if (v50 < 0x4000)
      v52 = v51;
    a4[2] = v52;
    a4[3] = -1;
  }
  return result;
}

unsigned __int8 *YuvToArgbRow(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, _BYTE *a4, int a5)
{
  signed int v5;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  signed int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  signed int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char v48;
  signed int v49;
  unsigned int v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  char v56;

  v5 = (4 * a5) & 0xFFFFFFF8;
  if (v5)
  {
    v6 = &a4[v5];
    do
    {
      v7 = *result;
      v8 = *a2;
      v9 = *a3;
      *a4 = -1;
      v10 = 19077 * v7;
      v11 = ((26149 * v9) >> 8) + (v10 >> 8);
      v12 = v11 - 14234;
      v13 = (v11 - 14234) >> 6;
      if (v11 >= 0x379A)
        v14 = -1;
      else
        v14 = 0;
      if (v12 < 0x4000)
        v14 = v13;
      a4[1] = v14;
      v15 = (v10 >> 8) - (((6419 * v8) >> 8) + ((13320 * v9) >> 8));
      v16 = v15 + 8708;
      v17 = (v15 + 8708) >> 6;
      if (v15 >= -8708)
        v18 = -1;
      else
        v18 = 0;
      if (v16 < 0x4000)
        v18 = v17;
      a4[2] = v18;
      v19 = ((33050 * v8) >> 8) + (v10 >> 8);
      v20 = v19 - 17685;
      v21 = (v19 - 17685) >> 6;
      if (v19 >= 0x4515)
        v22 = -1;
      else
        v22 = 0;
      if (v20 < 0x4000)
        v22 = v21;
      a4[3] = v22;
      v23 = result[1];
      v25 = *a2++;
      v24 = v25;
      v27 = *a3++;
      v26 = v27;
      a4[4] = -1;
      v28 = 19077 * v23;
      v29 = ((26149 * v27) >> 8) + (v28 >> 8);
      v30 = v29 - 14234;
      v31 = (v29 - 14234) >> 6;
      if (v29 >= 0x379A)
        v32 = -1;
      else
        v32 = 0;
      if (v30 < 0x4000)
        v32 = v31;
      a4[5] = v32;
      v33 = (v28 >> 8) - (((6419 * v24) >> 8) + ((13320 * v26) >> 8));
      v34 = v33 + 8708;
      v35 = (v33 + 8708) >> 6;
      if (v33 >= -8708)
        v36 = -1;
      else
        v36 = 0;
      if (v34 < 0x4000)
        v36 = v35;
      a4[6] = v36;
      v37 = ((33050 * v24) >> 8) + (v28 >> 8);
      v38 = v37 - 17685;
      v39 = (v37 - 17685) >> 6;
      if (v37 >= 0x4515)
        v40 = -1;
      else
        v40 = 0;
      if (v38 < 0x4000)
        v40 = v39;
      a4[7] = v40;
      result += 2;
      a4 += 8;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if ((a5 & 1) != 0)
  {
    v41 = *result;
    v42 = *a2;
    v43 = *a3;
    *a4 = -1;
    v44 = 19077 * v41;
    v45 = ((26149 * v43) >> 8) + (v44 >> 8);
    v46 = v45 - 14234;
    v47 = (v45 - 14234) >> 6;
    if (v45 >= 0x379A)
      v48 = -1;
    else
      v48 = 0;
    if (v46 < 0x4000)
      v48 = v47;
    a4[1] = v48;
    v49 = (v44 >> 8) - (((6419 * v42) >> 8) + ((13320 * v43) >> 8));
    v50 = v49 + 8708;
    v51 = (v49 + 8708) >> 6;
    if (v49 >= -8708)
      v52 = -1;
    else
      v52 = 0;
    if (v50 < 0x4000)
      v52 = v51;
    a4[2] = v52;
    v53 = ((33050 * v42) >> 8) + (v44 >> 8);
    v54 = v53 - 17685;
    v55 = (v53 - 17685) >> 6;
    if (v53 >= 0x4515)
      v56 = -1;
    else
      v56 = 0;
    if (v54 < 0x4000)
      v56 = v55;
    a4[3] = v56;
  }
  return result;
}

unsigned __int8 *YuvToRgba4444Row(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, _BYTE *a4, int a5)
{
  signed int v5;
  _BYTE *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  signed int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  signed int v46;
  unsigned int v47;
  unsigned int v48;
  char v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;

  v5 = (2 * a5) & 0xFFFFFFFC;
  if (v5)
  {
    v6 = &a4[v5];
    do
    {
      v7 = *a2;
      v8 = *a3;
      v9 = 19077 * *result;
      v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      v11 = v10 - 14234;
      v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A)
        v13 = -16;
      else
        v13 = 0;
      if (v11 < 0x4000)
        v13 = v12;
      v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      v15 = v14 + 8708;
      v16 = (v14 + 8708) >> 10;
      if (v14 >= -8708)
        v17 = 15;
      else
        v17 = 0;
      if (v15 < 0x4000)
        v17 = v16;
      v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      v19 = v18 - 17685;
      v20 = (v18 - 17685) >> 6;
      if (v18 >= 0x4515)
        v21 = -16;
      else
        v21 = 0;
      *a4 = v13 & 0xF0 | v17;
      if (v19 < 0x4000)
        v21 = v20;
      a4[1] = v21 | 0xF;
      v23 = *a2++;
      v22 = v23;
      v25 = *a3++;
      v24 = v25;
      v26 = 19077 * result[1];
      v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      v28 = v27 - 14234;
      v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A)
        v30 = -16;
      else
        v30 = 0;
      if (v28 < 0x4000)
        v30 = v29;
      v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      v32 = v31 + 8708;
      v33 = (v31 + 8708) >> 10;
      if (v31 >= -8708)
        v34 = 15;
      else
        v34 = 0;
      if (v32 < 0x4000)
        v34 = v33;
      v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      v36 = v35 - 17685;
      v37 = (v35 - 17685) >> 6;
      if (v35 >= 0x4515)
        v38 = -16;
      else
        v38 = 0;
      a4[2] = v30 & 0xF0 | v34;
      if (v36 < 0x4000)
        v38 = v37;
      a4[3] = v38 | 0xF;
      result += 2;
      a4 += 4;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if ((a5 & 1) != 0)
  {
    v39 = *a2;
    v40 = *a3;
    v41 = 19077 * *result;
    v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    v43 = v42 - 14234;
    v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A)
      v45 = -16;
    else
      v45 = 0;
    if (v43 < 0x4000)
      v45 = v44;
    v46 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    v47 = v46 + 8708;
    v48 = (v46 + 8708) >> 10;
    if (v46 >= -8708)
      v49 = 15;
    else
      v49 = 0;
    if (v47 < 0x4000)
      v49 = v48;
    v50 = ((33050 * v39) >> 8) + (v41 >> 8);
    v51 = v50 - 17685;
    v52 = (v50 - 17685) >> 6;
    if (v50 >= 0x4515)
      v53 = -16;
    else
      v53 = 0;
    *a4 = v45 & 0xF0 | v49;
    if (v51 < 0x4000)
      v53 = v52;
    a4[1] = v53 | 0xF;
  }
  return result;
}

unsigned __int8 *YuvToRgb565Row(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, _BYTE *a4, int a5)
{
  signed int v5;
  _BYTE *v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  signed int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  signed int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;

  v5 = (2 * a5) & 0xFFFFFFFC;
  if (v5)
  {
    v6 = &a4[v5];
    do
    {
      v7 = *a2;
      v8 = *a3;
      v9 = 19077 * *result;
      v10 = ((26149 * v8) >> 8) + (v9 >> 8);
      v11 = v10 - 14234;
      v12 = (v10 - 14234) >> 6;
      if (v10 >= 0x379A)
        v13 = -8;
      else
        v13 = 0;
      if (v11 < 0x4000)
        v13 = v12;
      v14 = (v9 >> 8) - (((6419 * v7) >> 8) + ((13320 * v8) >> 8));
      v15 = v14 + 8708;
      v16 = (v14 + 8708) >> 6;
      if (v14 >= -8708)
        v17 = 255;
      else
        v17 = 0;
      if (v15 < 0x4000)
        v17 = v16;
      v18 = ((33050 * v7) >> 8) + (v9 >> 8);
      v19 = v18 - 17685;
      v20 = (v18 - 17685) >> 9;
      if (v18 >= 0x4515)
        v21 = 31;
      else
        v21 = 0;
      if (v19 < 0x4000)
        v21 = v20;
      *a4 = v13 & 0xF8 | (v17 >> 5);
      a4[1] = (8 * v17) & 0xE0 | v21;
      v23 = *a2++;
      v22 = v23;
      v25 = *a3++;
      v24 = v25;
      v26 = 19077 * result[1];
      v27 = ((26149 * v25) >> 8) + (v26 >> 8);
      v28 = v27 - 14234;
      v29 = (v27 - 14234) >> 6;
      if (v27 >= 0x379A)
        v30 = -8;
      else
        v30 = 0;
      if (v28 < 0x4000)
        v30 = v29;
      v31 = (v26 >> 8) - (((6419 * v22) >> 8) + ((13320 * v24) >> 8));
      v32 = v31 + 8708;
      v33 = (v31 + 8708) >> 6;
      if (v31 >= -8708)
        v34 = 255;
      else
        v34 = 0;
      if (v32 < 0x4000)
        v34 = v33;
      v35 = ((33050 * v22) >> 8) + (v26 >> 8);
      v36 = v35 - 17685;
      v37 = (v35 - 17685) >> 9;
      if (v35 >= 0x4515)
        v38 = 31;
      else
        v38 = 0;
      if (v36 < 0x4000)
        v38 = v37;
      a4[2] = v30 & 0xF8 | (v34 >> 5);
      a4[3] = (8 * v34) & 0xE0 | v38;
      result += 2;
      a4 += 4;
    }
    while (a4 != v6);
    a4 = v6;
  }
  if ((a5 & 1) != 0)
  {
    v39 = *a2;
    v40 = *a3;
    v41 = 19077 * *result;
    v42 = ((26149 * v40) >> 8) + (v41 >> 8);
    v43 = v42 - 14234;
    v44 = (v42 - 14234) >> 6;
    if (v42 >= 0x379A)
      v45 = -8;
    else
      v45 = 0;
    if (v43 < 0x4000)
      v45 = v44;
    v46 = (v41 >> 8) - (((6419 * v39) >> 8) + ((13320 * v40) >> 8));
    v47 = v46 + 8708;
    v48 = (v46 + 8708) >> 6;
    if (v46 >= -8708)
      v49 = 255;
    else
      v49 = 0;
    if (v47 < 0x4000)
      v49 = v48;
    v50 = ((33050 * v39) >> 8) + (v41 >> 8);
    v51 = v50 - 17685;
    v52 = (v50 - 17685) >> 9;
    if (v50 >= 0x4515)
      v53 = 31;
    else
      v53 = 0;
    if (v51 < 0x4000)
      v53 = v52;
    *a4 = v45 & 0xF8 | (v49 >> 5);
    a4[1] = (8 * v49) & 0xE0 | v53;
  }
  return result;
}

int *ConvertARGBToY_C(int *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      v4 = *result++;
      *a2++ = (16839 * BYTE2(v4) + 6420 * v4 + 33059 * BYTE1(v4) + 1081344) >> 16;
      --v3;
    }
    while (v3);
  }
  return result;
}

unsigned __int8 *ConvertRGB24ToY_C(unsigned __int8 *result, _BYTE *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      *a2++ = (33059 * result[1] + 16839 * *result + 6420 * result[2] + 1081344) >> 16;
      result += 3;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t ConvertBGR24ToY_C(uint64_t result, _BYTE *a2, int a3)
{
  unsigned __int8 *v3;
  uint64_t v4;

  if (a3 >= 1)
  {
    v3 = (unsigned __int8 *)(result + 2);
    v4 = a3;
    do
    {
      *a2++ = (33059 * *(v3 - 1) + 16839 * *v3 + 6420 * *(v3 - 2) + 1081344) >> 16;
      v3 += 3;
      --v4;
    }
    while (v4);
  }
  return result;
}

void WebPInitConvertARGBToYUV_cold_1()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 240, "WebPConvertARGBToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_2()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 241, "WebPConvertARGBToUV != NULL");
}

void WebPInitConvertARGBToYUV_cold_3()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 242, "WebPConvertRGB24ToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_4()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 243, "WebPConvertBGR24ToY != NULL");
}

void WebPInitConvertARGBToYUV_cold_5()
{
  __assert_rtn("WebPInitConvertARGBToYUV_body", "yuv.c", 244, "WebPConvertRGBA32ToUV != NULL");
}

char *WebPDemuxInternal(uint64_t a1, int a2, int *a3, int a4)
{
  char *v5;
  _DWORD *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  char *v20;
  const char *v21;
  uint64_t (*v22)(uint64_t);
  int v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  _OWORD v30[2];
  uint64_t v31;

  if (a3)
    *a3 = -1;
  v5 = 0;
  if (!a1 || (a4 & 0xFFFFFF00) != 0x100)
    return v5;
  v6 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    return 0;
  if (v7 < 0x14)
  {
    v8 = 1;
    if (!a3)
      return 0;
    goto LABEL_27;
  }
  if (*v6 == 1179011410 && v6[2] == 1346520407)
  {
    v9 = v6[1];
    if ((v9 + 9) >= 0x11)
    {
      v18 = (v9 + 8);
      if (v7 <= v18)
      {
        v19 = v7 < v18;
        if (!a2 && v7 < v18)
          return 0;
      }
      else
      {
        v19 = 0;
        v7 = (v9 + 8);
      }
      v20 = (char *)WebPSafeCalloc(1uLL, 0x68uLL);
      v5 = v20;
      if (!v20)
        return v5;
      *((_DWORD *)v20 + 10) = 0;
      *(_OWORD *)(v20 + 52) = xmmword_1882315F0;
      *((_QWORD *)v20 + 10) = v20 + 72;
      *((_QWORD *)v20 + 12) = v20 + 88;
      *(_QWORD *)v20 = 12;
      *((_QWORD *)v20 + 1) = v7;
      *((_QWORD *)v20 + 2) = v18;
      *((_QWORD *)v20 + 3) = v7;
      *((_QWORD *)v20 + 4) = v6;
      if (v6[3] == 540561494)
      {
        v24 = "VP8 ";
        v22 = ParseSingleImage;
LABEL_42:
        v25 = v22((uint64_t)v20);
        v26 = v25;
        if (!v25)
          *((_DWORD *)v5 + 10) = 2;
        v27 = v25 != 1 || v19;
        v28 = v25 == 2 || v27 == 0;
        if (!v28 && (*((unsigned int (**)(char *))v24 + 2))(v5))
          goto LABEL_54;
        *((_DWORD *)v5 + 10) = -1;
      }
      else
      {
        v21 = "VP8L";
        while (1)
        {
          v22 = (uint64_t (*)(uint64_t))*((_QWORD *)v21 + 1);
          if (!v22)
            break;
          v23 = *(_DWORD *)v21;
          v21 += 24;
          if (v23 == v6[3])
          {
            v24 = v21 - 24;
            goto LABEL_42;
          }
        }
      }
      v26 = 2;
LABEL_54:
      if (a3)
        *a3 = *((_DWORD *)v5 + 10);
      if (v26 != 2)
        return v5;
      WebPDemuxDelete(v5);
      return 0;
    }
  }
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v10 = WebPGetFeaturesInternal((uint64_t)v6, v7, (uint64_t)v30, 521);
  if (v10)
  {
    if (v10 == 7)
      v8 = 1;
    else
      v8 = 2;
    if (!a3)
      return 0;
    goto LABEL_27;
  }
  v5 = (char *)WebPSafeCalloc(1uLL, 0x68uLL);
  v11 = (char *)WebPSafeCalloc(1uLL, 0x50uLL);
  v12 = v11;
  if (!v5)
    goto LABEL_26;
  if (!v11)
    goto LABEL_26;
  *((_DWORD *)v5 + 10) = 0;
  *(_OWORD *)(v5 + 52) = xmmword_1882315F0;
  *((_QWORD *)v5 + 10) = v5 + 72;
  *((_QWORD *)v5 + 12) = v5 + 88;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = v7;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v7;
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = v7;
  v13 = v30[0];
  v14 = DWORD1(v30[0]);
  *((_DWORD *)v11 + 2) = v30[0];
  *((_DWORD *)v11 + 3) = v14;
  v15 = *((_DWORD *)v11 + 4) | DWORD2(v30[0]);
  *((_DWORD *)v11 + 4) = v15;
  *((_QWORD *)v11 + 4) = 0x100000001;
  v16 = *((_QWORD *)v5 + 9);
  if (v16)
  {
    if (!*(_DWORD *)(v16 + 36))
    {
LABEL_26:
      _TIFFfree(v5);
      _TIFFfree(v12);
      v8 = 2;
      if (a3)
      {
LABEL_27:
        v5 = 0;
        if (v8 == 1)
          v17 = 0;
        else
          v17 = -1;
        goto LABEL_30;
      }
      return 0;
    }
  }
  *((_QWORD *)v5 + 9) = v11;
  *((_QWORD *)v11 + 9) = 0;
  *((_QWORD *)v5 + 10) = v11 + 72;
  *((_DWORD *)v5 + 10) = 2;
  *((_DWORD *)v5 + 13) = v13;
  *((_DWORD *)v5 + 14) = v14;
  *((_DWORD *)v5 + 12) |= 16 * (v15 != 0);
  *((_DWORD *)v5 + 17) = 1;
  if (!IsValidSimpleFormat((uint64_t)v5))
    WebPDemuxInternal_cold_1();
  if (a3)
  {
    v17 = 2;
LABEL_30:
    *a3 = v17;
  }
  return v5;
}

void WebPDemuxDelete(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a1)
  {
    v2 = (_QWORD *)a1[9];
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)v2[9];
        _TIFFfree(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = (_QWORD *)a1[11];
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)v4[2];
        _TIFFfree(v4);
        v4 = v5;
      }
      while (v5);
    }
    _TIFFfree(a1);
  }
}

unsigned int *WebPDemuxGetI(unsigned int *result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 0:
        result = (unsigned int *)result[12];
        break;
      case 1:
        result = (unsigned int *)result[13];
        break;
      case 2:
        result = (unsigned int *)result[14];
        break;
      case 3:
        result = (unsigned int *)result[15];
        break;
      case 4:
        result = (unsigned int *)result[16];
        break;
      case 5:
        result = (unsigned int *)result[17];
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t WebPDemuxGetFrame(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3)
    return 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)(a3 + 72) = a1;
  return SetFrame(a2, a3);
}

uint64_t SetFrame(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = 0;
  if ((a1 & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    if (v4)
    {
      v5 = *(_DWORD *)(v4 + 68);
      if (v5 < a1)
        return 0;
      v6 = a1 ? a1 : *(_DWORD *)(v4 + 68);
      v7 = *(_QWORD *)(v4 + 72);
      if (!v7)
        return 0;
      while (*(_DWORD *)(v7 + 32) != v6)
      {
        v7 = *(_QWORD *)(v7 + 72);
        if (!v7)
          return 0;
      }
      v8 = *(_QWORD *)(v4 + 32);
      v10 = *(_QWORD *)(v7 + 40);
      v9 = *(_QWORD *)(v7 + 48);
      v11 = *(_QWORD *)(v7 + 64);
      if (v11)
      {
        if (v10)
          v12 = v10 - (v11 + *(_QWORD *)(v7 + 56));
        else
          v12 = 0;
        v9 += v11 + v12;
        v10 = *(_QWORD *)(v7 + 56);
      }
      if (v8)
      {
        *(_DWORD *)a2 = v6;
        *(_DWORD *)(a2 + 4) = v5;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)v7;
        *(_DWORD *)(a2 + 56) = *(_DWORD *)(v7 + 16);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(v7 + 20);
        *(_DWORD *)(a2 + 60) = *(_DWORD *)(v7 + 28);
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(v7 + 36);
        *(_QWORD *)(a2 + 40) = v8 + v10;
        *(_QWORD *)(a2 + 48) = v9;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebPDemuxGetChunk(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  if (!a4)
    return 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_QWORD *)(a4 + 48) = a1;
  return SetChunk(a2, a3, a4);
}

uint64_t SetChunk(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (a1)
    {
      v4 = *(_QWORD *)(a3 + 48);
      if (v4)
      {
        v5 = *(_QWORD **)(v4 + 88);
        if (!v5)
          return 0;
        LODWORD(v3) = 0;
        v6 = *(_QWORD *)(v4 + 32);
        v7 = v5;
        do
        {
          if (*(_DWORD *)(v6 + *v7) == *a1)
            v3 = (v3 + 1);
          else
            v3 = v3;
          v7 = (_QWORD *)v7[2];
        }
        while (v7);
        if ((_DWORD)v3)
        {
          if (a2)
            v8 = a2;
          else
            v8 = v3;
          if (v8 > (int)v3)
            return 0;
          v9 = *v5;
          v10 = *(_DWORD *)(v6 + *v5) == *a1;
          while (v10 != v8)
          {
            v5 = (_QWORD *)v5[2];
            v9 = *v5;
            if (*(_DWORD *)(v6 + *v5) == *a1)
              ++v10;
          }
          v11 = v5[1] - 8;
          *(_QWORD *)(a3 + 8) = v6 + v9 + 8;
          *(_QWORD *)(a3 + 16) = v11;
          *(_DWORD *)a3 = v8;
          *(_DWORD *)(a3 + 4) = v3;
          return 1;
        }
      }
    }
  }
  return v3;
}

BOOL IsValidSimpleFormat(uint64_t a1)
{
  int v1;
  uint64_t v2;
  BOOL v3;

  v1 = *(_DWORD *)(a1 + 40);
  if (!v1)
    return 1;
  if (*(int *)(a1 + 52) < 1 || *(int *)(a1 + 56) < 1)
    return 0;
  v2 = *(_QWORD *)(a1 + 72);
  v3 = v1 == 2 && v2 == 0;
  if (v3 || *(int *)(v2 + 8) < 1)
    return 0;
  return *(_DWORD *)(v2 + 12) > 0;
}

uint64_t ParseSingleImage(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 16) - *(_QWORD *)a1 < 8uLL)
    return 2;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 < 8uLL)
    return 1;
  v3 = WebPSafeCalloc(1uLL, 0x50uLL);
  if (!v3)
    return 2;
  v4 = v3;
  result = StoreFrame(1, 0, (uint64_t *)a1, (uint64_t)v3);
  if ((_DWORD)result == 2)
    goto LABEL_7;
  v5 = *(_DWORD *)(a1 + 48);
  if ((v5 & 0x10) == 0 && *((_QWORD *)v4 + 8))
  {
    v4[4] = 0;
    *((_QWORD *)v4 + 7) = 0;
    *((_QWORD *)v4 + 8) = 0;
  }
  if (!*(_DWORD *)(a1 + 44))
  {
    v6 = v4[2];
    if (v6 >= 1)
    {
      v7 = v4[3];
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 40) = 1;
        *(_DWORD *)(a1 + 56) = v7;
        *(_DWORD *)(a1 + 48) = v5 | (16 * (v4[4] != 0));
        *(_DWORD *)(a1 + 52) = v6;
      }
    }
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)v8)
  {
    if (!*(_DWORD *)(*(_QWORD *)v8 + 36))
    {
LABEL_7:
      _TIFFfree(v4);
      return 2;
    }
  }
  *(_QWORD *)v8 = v4;
  *((_QWORD *)v4 + 9) = 0;
  *(_QWORD *)(a1 + 80) = v4 + 18;
  *(_DWORD *)(a1 + 68) = 1;
  return result;
}

uint64_t ParseVP8X(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)a1;
  v1 = *(_QWORD *)(a1 + 8);
  v3 = 1;
  if ((unint64_t)(v1 - *(_QWORD *)a1) < 8)
    return v3;
  *(_DWORD *)(a1 + 44) = 1;
  *(_QWORD *)a1 = v2 + 4;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_DWORD *)(v4 + v2 + 4);
  v6 = v2 + 8;
  *(_QWORD *)a1 = v2 + 8;
  if ((v5 + 9) < 0x13)
    return 2;
  v7 = (v5 & 1u) + v5;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 - v6 < v7)
    return 2;
  if (v1 - v6 >= v7)
  {
    *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(v4 + v6);
    *(_QWORD *)a1 = v2 + 12;
    v9 = *(unsigned __int16 *)(v4 + v2 + 12) | (*(unsigned __int8 *)(v4 + v2 + 12 + 2) << 16);
    *(_QWORD *)a1 = v2 + 15;
    *(_DWORD *)(a1 + 52) = ++v9;
    v10 = *(unsigned __int16 *)(v4 + v2 + 15) | (*(unsigned __int8 *)(v4 + v2 + 15 + 2) << 16);
    v11 = v2 + 18;
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 56) = ++v10;
    if (((v9 * (unint64_t)v10) & 0xFFFFFFFF00000000) == 0)
    {
      v12 = v11 + (v7 - 10);
      *(_QWORD *)a1 = v12;
      *(_DWORD *)(a1 + 40) = 1;
      if ((unint64_t)(v8 - v12) >= 8)
      {
        if ((unint64_t)(v1 - v12) >= 8)
          return ParseVP8XChunks(a1);
        return 1;
      }
    }
    return 2;
  }
  return 1;
}

uint64_t IsValidExtendedFormat(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int *v5;
  BOOL v6;
  uint64_t result;
  int v9;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    v2 = *(_DWORD *)(a1 + 52);
    if (v2 < 1)
      return 0;
    v3 = *(_DWORD *)(a1 + 56);
    if (v3 < 1 || (*(_DWORD *)(a1 + 60) & 0x80000000) != 0)
      return 0;
    v4 = *(_DWORD *)(a1 + 48);
    v5 = *(int **)(a1 + 72);
    v6 = !v5 && v1 == 2;
    if (v6 || (v4 & 0xFFFFFFC1) != 0)
      return 0;
    if (v5)
    {
LABEL_14:
      v9 = v5[8];
      v11 = (v4 & 2) == 0 && v9 > 1;
      while (1)
      {
        if (v5[8] != v9)
          goto LABEL_14;
        if (v11)
          return 0;
        if (v5[9])
        {
          if (*((_QWORD *)v5 + 8))
          {
            if (*((_QWORD *)v5 + 7) > *((_QWORD *)v5 + 5))
              return 0;
          }
          else if (!*((_QWORD *)v5 + 6))
          {
            return 0;
          }
          v12 = v5[2];
          if (v12 < 1 || v5[3] < 1)
            return 0;
        }
        else
        {
          if (v1 == 2
            || *((_QWORD *)v5 + 8) && *((_QWORD *)v5 + 6) && *((_QWORD *)v5 + 7) > *((_QWORD *)v5 + 5)
            || *((_QWORD *)v5 + 9))
          {
            return 0;
          }
          v12 = v5[2];
          if (v12 < 1)
            goto LABEL_47;
        }
        v13 = v5[3];
        if (v13 >= 1)
        {
          v14 = *v5;
          if ((v4 & 2) != 0)
          {
            if (v14 < 0)
              return 0;
            result = 0;
            v15 = v5[1];
            if (v15 < 0 || v14 + v12 > v2 || v15 + v13 > v3)
              return result;
          }
          else
          {
            if (v14)
              return 0;
            result = 0;
            if (v13 != v3 || v12 != v2 || v5[1])
              return result;
          }
        }
LABEL_47:
        v5 = (int *)*((_QWORD *)v5 + 9);
        result = 1;
        if (!v5)
          return result;
      }
    }
  }
  return 1;
}

uint64_t StoreFrame(int a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  int v26;
  _OWORD v29[2];
  uint64_t v30;

  v5 = *a3;
  v4 = a3[1];
  v6 = v4 - *a3;
  if (v6 >= 8 && v6 >= a2)
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = a3[4];
      v15 = v14 + v5;
      v16 = *(_DWORD *)(v14 + v5);
      *a3 = v5 + 4;
      v17 = *(_DWORD *)(v14 + v5 + 4);
      v18 = v5 + 8;
      *a3 = v5 + 8;
      if (v17 > 0xFFFFFFF6)
        return 2;
      v19 = (v17 & 1) + v17;
      v20 = v4 - v18;
      v21 = v4 - v18 >= v19 ? (v17 & 1) + v17 : v4 - v18;
      v22 = a3[2];
      if (v22 - v18 < v19)
        return 2;
      v23 = v21 + 8;
      v8 = v20 < v19;
      if (v16 != 540561494)
      {
        if (v16 != 1278758998)
        {
          if (v16 == 1213221953 && v12 == 0)
          {
            *(_QWORD *)(a4 + 56) = v5;
            *(_QWORD *)(a4 + 64) = v23;
            v12 = 1;
            *(_DWORD *)(a4 + 16) = 1;
            *(_DWORD *)(a4 + 32) = a1;
            v5 = v21 + v18;
            v25 = 1;
          }
          else
          {
LABEL_22:
            v25 = 0;
          }
          *a3 = v5;
          goto LABEL_24;
        }
        if (v12 > 0)
          return 2;
      }
      if (v13)
        goto LABEL_22;
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      v26 = WebPGetFeaturesInternal(v15, v21 + 8, (uint64_t)v29, 521);
      if (v20 < v19 && v26 == 7)
        return 1;
      if (v26)
        return 2;
      *(_QWORD *)(a4 + 40) = v5;
      *(_QWORD *)(a4 + 48) = v23;
      *(_QWORD *)(a4 + 8) = *(_QWORD *)&v29[0];
      *(_DWORD *)(a4 + 16) |= DWORD2(v29[0]);
      *(_DWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 36) = v20 >= v19;
      v5 = *a3 + v21;
      *a3 = v5;
      v22 = a3[2];
      v13 = 1;
      v25 = 1;
LABEL_24:
      if (v5 != v22)
      {
        v4 = a3[1];
        v8 = (unint64_t)(v4 - v5) < 8 || (unint64_t)(v20 < v19);
        if (v8)
          v25 = 0;
        if ((v25 & 1) != 0)
          continue;
      }
      return v8;
    }
  }
  return 1;
}

uint64_t ParseVP8XChunks(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  unsigned int v14;
  BOOL v15;
  int v16;
  _QWORD *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = 0;
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 48) & 2;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_DWORD *)(v5 + v3);
    *(_QWORD *)a1 = v3 + 4;
    v7 = *(unsigned int *)(v5 + v3 + 4);
    v8 = v3 + 8;
    *(_QWORD *)a1 = v3 + 8;
    if (v7 > 0xFFFFFFF6)
      return 2;
    v9 = (v7 & 1) + v7;
    v10 = *(_QWORD *)(a1 + 16) - v8;
    if (v10 < v9)
      return 2;
    if (v6 > 1213221952)
    {
      if (v6 <= 1296649792)
      {
        if (v6 == 1213221953 || v6 == 1278758998)
        {
LABEL_18:
          result = 2;
          if (v2 > 0 || v4)
            return result;
          *(_QWORD *)a1 = v3;
          result = ParseSingleImage(a1);
          v2 = 0;
          goto LABEL_46;
        }
      }
      else
      {
        switch(v6)
        {
          case 1296649793:
            if (v9 < 6)
              return 2;
            if (*(_QWORD *)(a1 + 8) - v8 < v9)
              goto LABEL_42;
            if (!v2)
            {
              result = 0;
              v16 = *(_DWORD *)(v5 + v8);
              *(_QWORD *)a1 = v3 + 12;
              *(_DWORD *)(a1 + 64) = v16;
              *(_DWORD *)(a1 + 60) = *(unsigned __int16 *)(v5 + v3 + 12);
              *(_QWORD *)a1 = v3 + (v9 - 6) + 14;
              goto LABEL_33;
            }
            goto LABEL_45;
          case 1346585417:
            v11 = 5;
            goto LABEL_35;
          case 1480085590:
            return 2;
        }
      }
      goto LABEL_41;
    }
    if (v6 <= 1179211844)
    {
      if (v6 == 540561494)
        goto LABEL_18;
      if (v6 == 542133592)
      {
        v11 = 2;
        goto LABEL_35;
      }
LABEL_41:
      if (*(_QWORD *)(a1 + 8) - v8 < v9)
        goto LABEL_42;
      goto LABEL_43;
    }
    if (v6 == 1179211845)
    {
      v11 = 3;
LABEL_35:
      if (*(_QWORD *)(a1 + 8) - v8 < v9)
        goto LABEL_42;
      if (((*(_DWORD *)(a1 + 48) >> v11) & 1) == 0)
      {
LABEL_45:
        result = 0;
        *(_QWORD *)a1 = v8 + v9;
        goto LABEL_46;
      }
LABEL_43:
      v17 = WebPSafeCalloc(1uLL, 0x18uLL);
      if (!v17)
        return 2;
      *v17 = v3;
      v17[1] = v7 + 8;
      **(_QWORD **)(a1 + 96) = v17;
      v17[2] = 0;
      *(_QWORD *)(a1 + 96) = v17 + 2;
      v8 = *(_QWORD *)a1;
      goto LABEL_45;
    }
    if (v6 != 1179471425)
      goto LABEL_41;
    if (!v2)
      return 2;
    v15 = v9 >= 0x10;
    v14 = v9 - 16;
    v15 = v15 && v10 >= 0x10;
    if (!v15)
      goto LABEL_28;
    if ((unint64_t)(*(_QWORD *)(a1 + 8) - v8) < 0x10)
    {
      v2 = 1;
LABEL_42:
      result = 1;
      goto LABEL_46;
    }
    v18 = *(_DWORD *)(a1 + 48);
    v2 = 1;
    v19 = WebPSafeCalloc(1uLL, 0x50uLL);
    if (!v19)
    {
      result = 2;
      goto LABEL_46;
    }
    v20 = v19;
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)a1;
    v23 = (unsigned __int8 *)(v21 + *(_QWORD *)a1);
    v24 = *v23;
    v25 = v23[1];
    LODWORD(v23) = v23[2];
    v26 = *(_QWORD *)a1 + 3;
    *(_QWORD *)a1 = v26;
    *v19 = (2 * v24) | (v25 << 9) | ((_DWORD)v23 << 17);
    v27 = *(unsigned __int8 *)(v21 + v26);
    v28 = *(unsigned __int8 *)(v21 + v26 + 1);
    LODWORD(v23) = *(unsigned __int8 *)(v21 + v26 + 2);
    *(_QWORD *)a1 = v22 + 6;
    v19[1] = (2 * v27) | (v28 << 9) | ((_DWORD)v23 << 17);
    LODWORD(v23) = *(unsigned __int16 *)(v21 + v22 + 6) | (*(unsigned __int8 *)(v21 + v22 + 6 + 2) << 16);
    *(_QWORD *)a1 = v22 + 9;
    LODWORD(v23) = (_DWORD)v23 + 1;
    v19[2] = (_DWORD)v23;
    v29 = *(unsigned __int16 *)(v21 + v22 + 9) | (*(unsigned __int8 *)(v21 + v22 + 9 + 2) << 16);
    *(_QWORD *)a1 = v22 + 12;
    v19[3] = ++v29;
    v30 = *(unsigned __int16 *)(v21 + v22 + 12) | (*(unsigned __int8 *)(v21 + v22 + 12 + 2) << 16);
    *(_QWORD *)a1 = v22 + 15;
    v19[5] = v30;
    LODWORD(v21) = *(unsigned __int8 *)(v21 + v22 + 15);
    v31 = v22 + 16;
    *(_QWORD *)a1 = v22 + 16;
    v19[6] = v21 & 1;
    v19[7] = (v21 >> 1) & 1;
    if (((v23 * (unint64_t)v29) & 0xFFFFFFFF00000000) != 0)
    {
      _TIFFfree(v19);
LABEL_28:
      result = 2;
LABEL_33:
      v2 = 1;
      goto LABEL_46;
    }
    result = StoreFrame(*(_DWORD *)(a1 + 68) + 1, v14, (uint64_t *)a1, (uint64_t)v19);
    if ((_DWORD)result != 2)
    {
      if (*(_QWORD *)a1 - v31 <= (unint64_t)v14)
        v32 = result;
      else
        v32 = 2;
      if ((_DWORD)v32 == 2 || (v18 & 2) == 0)
        goto LABEL_58;
      if ((int)v20[8] < 1)
      {
        v32 = result;
        goto LABEL_58;
      }
      v33 = *(_QWORD *)(a1 + 80);
      if (!*(_QWORD *)v33 || *(_DWORD *)(*(_QWORD *)v33 + 36))
      {
        *(_QWORD *)v33 = v20;
        *((_QWORD *)v20 + 9) = 0;
        *(_QWORD *)(a1 + 80) = v20 + 18;
        ++*(_DWORD *)(a1 + 68);
        goto LABEL_33;
      }
    }
    v32 = 2;
LABEL_58:
    _TIFFfree(v20);
    v2 = 1;
    result = v32;
LABEL_46:
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 16))
    {
      result = (unint64_t)(*(_QWORD *)(a1 + 8) - v3) < 8 ? 1 : result;
      if (!(_DWORD)result)
        continue;
    }
    return result;
  }
}

void WebPDemuxInternal_cold_1()
{
  __assert_rtn("CreateRawImageDemuxer", "demux.c", 694, "IsValidSimpleFormat(dmux)");
}

uint64_t VP8ResetProba(uint64_t result)
{
  *(_BYTE *)(result + 2) = -1;
  *(_WORD *)result = -1;
  return result;
}

BOOL VP8ParseIntraModeRow(uint64_t FinalBytes, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  unsigned int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  int v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  unsigned int v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  int v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  int v111;
  unint64_t *v112;
  unint64_t v113;
  __int128 v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  int v123;
  unint64_t *v124;
  unint64_t v125;
  __int128 v126;
  int v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  unint64_t *v138;
  unint64_t v139;
  __int128 v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  int v147;
  unsigned int v148;
  int v149;
  unint64_t *v150;
  unint64_t v151;
  __int128 v152;
  unsigned int v153;
  int v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  unint64_t *v162;
  unint64_t v163;
  __int128 v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unint64_t *v170;
  unint64_t v171;
  __int128 v172;
  unsigned int v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unint64_t *v182;
  unint64_t v183;
  __int128 v184;
  unint64_t *v185;
  unint64_t v186;
  __int128 v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  unint64_t *v203;
  unint64_t v204;
  __int128 v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  uint64_t v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  unint64_t *v215;
  unint64_t v216;
  __int128 v217;
  char v218;
  unsigned int v219;
  int v220;
  unint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  unsigned int v226;
  unint64_t *v227;
  unint64_t v228;
  __int128 v229;
  unsigned int v230;
  int v231;
  unsigned int v232;
  unsigned int v233;
  uint64_t v236;
  uint64_t v237;
  int *v238;
  int *v239;

  v3 = a2;
  if (*(int *)(a2 + 408) >= 1)
  {
    v4 = FinalBytes;
    v5 = 0;
    v238 = (int *)(a2 + 2816);
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 2808);
      v7 = *(_QWORD *)(v3 + 2912);
      LODWORD(v8) = *(_DWORD *)(v3 + 136);
      v237 = v7;
      if ((_DWORD)v8)
      {
        v9 = *(unsigned __int8 *)(v3 + 1192);
        v11 = *(_DWORD *)(v4 + 8);
        v10 = *(_DWORD *)(v4 + 12);
        if (v10 < 0)
        {
          v12 = *(unint64_t **)(v4 + 16);
          if (!v12)
            VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
          if ((unint64_t)v12 >= *(_QWORD *)(v4 + 32))
          {
            FinalBytes = VP8LoadFinalBytes(v4);
            v10 = *(_DWORD *)(v4 + 12);
          }
          else
          {
            v13 = *v12;
            *(_QWORD *)(v4 + 16) = (char *)v12 + 7;
            *((_QWORD *)&v14 + 1) = *(_QWORD *)v4;
            *(_QWORD *)&v14 = bswap64(v13);
            *(_QWORD *)v4 = v14 >> 8;
            v10 += 56;
          }
        }
        v15 = (v11 * v9) >> 8;
        v8 = *(_QWORD *)v4;
        v16 = v10;
        v17 = *(_QWORD *)v4 >> v10;
        if (v15 >= v17)
        {
          v18 = v15 + 1;
        }
        else
        {
          v18 = v11 - v15;
          v8 -= (unint64_t)(v15 + 1) << v16;
          *(_QWORD *)v4 = v8;
        }
        v19 = __clz(v18) ^ 0x18;
        v20 = v18 << v19;
        v21 = v16 - v19;
        v22 = v20 - 1;
        *(_DWORD *)(v4 + 8) = v20 - 1;
        *(_DWORD *)(v4 + 12) = v16 - v19;
        if (v15 >= v17)
        {
          v27 = *(unsigned __int8 *)(v3 + 1193);
          if (v21 < 0)
          {
            v28 = *(unint64_t **)(v4 + 16);
            if (!v28)
              VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
            if ((unint64_t)v28 >= *(_QWORD *)(v4 + 32))
            {
              FinalBytes = VP8LoadFinalBytes(v4);
              v21 = *(_DWORD *)(v4 + 12);
              v8 = *(_QWORD *)v4;
            }
            else
            {
              v29 = *v28;
              *(_QWORD *)(v4 + 16) = (char *)v28 + 7;
              *((_QWORD *)&v30 + 1) = v8;
              *(_QWORD *)&v30 = bswap64(v29);
              v8 = v30 >> 8;
              *(_QWORD *)v4 = v8;
              v21 += 56;
            }
          }
          v35 = (v22 * v27) >> 8;
          v36 = v21;
          v37 = v8 >> v21;
          if (v35 >= v37)
          {
            v38 = v35 + 1;
          }
          else
          {
            v38 = v22 - v35;
            *(_QWORD *)v4 = v8 - ((unint64_t)(v35 + 1) << v36);
          }
          v7 = v237;
          LOBYTE(v8) = v35 < v37;
          v39 = __clz(v38) ^ 0x18;
          *(_DWORD *)(v4 + 8) = (v38 << v39) - 1;
          *(_DWORD *)(v4 + 12) = v36 - v39;
        }
        else
        {
          v23 = *(unsigned __int8 *)(v3 + 1194);
          if (v21 < 0)
          {
            v24 = *(unint64_t **)(v4 + 16);
            if (!v24)
              VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
            if ((unint64_t)v24 >= *(_QWORD *)(v4 + 32))
            {
              FinalBytes = VP8LoadFinalBytes(v4);
              v21 = *(_DWORD *)(v4 + 12);
              v8 = *(_QWORD *)v4;
            }
            else
            {
              v25 = *v24;
              *(_QWORD *)(v4 + 16) = (char *)v24 + 7;
              *((_QWORD *)&v26 + 1) = v8;
              *(_QWORD *)&v26 = bswap64(v25);
              v8 = v26 >> 8;
              *(_QWORD *)v4 = v8;
              v21 += 56;
            }
          }
          v31 = (v22 * v23) >> 8;
          if (v31 >= (v8 >> v21))
          {
            v32 = v31 + 1;
          }
          else
          {
            v32 = v22 - v31;
            *(_QWORD *)v4 = v8 - ((unint64_t)(v31 + 1) << v21);
          }
          v7 = v237;
          v33 = v31 < (v8 >> v21);
          v34 = __clz(v32) ^ 0x18;
          *(_DWORD *)(v4 + 8) = (v32 << v34) - 1;
          *(_DWORD *)(v4 + 12) = v21 - v34;
          LOBYTE(v8) = v33 | 2;
        }
      }
      *(_BYTE *)(v7 + 800 * v5 + 798) = v8;
      if (!*(_DWORD *)(v3 + 2800))
        break;
      v40 = *(unsigned __int8 *)(v3 + 2804);
      v42 = *(_DWORD *)(v4 + 8);
      v41 = *(_DWORD *)(v4 + 12);
      if (v41 < 0)
      {
        v43 = *(unint64_t **)(v4 + 16);
        if (!v43)
          VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
        if ((unint64_t)v43 >= *(_QWORD *)(v4 + 32))
        {
          FinalBytes = VP8LoadFinalBytes(v4);
          v41 = *(_DWORD *)(v4 + 12);
        }
        else
        {
          v44 = *v43;
          *(_QWORD *)(v4 + 16) = (char *)v43 + 7;
          *((_QWORD *)&v45 + 1) = *(_QWORD *)v4;
          *(_QWORD *)&v45 = bswap64(v44);
          *(_QWORD *)v4 = v45 >> 8;
          v41 += 56;
        }
      }
      v48 = (v42 * v40) >> 8;
      v49 = v41;
      v50 = *(_QWORD *)v4 >> v41;
      if (v48 >= v50)
      {
        v51 = v48 + 1;
      }
      else
      {
        v51 = v42 - v48;
        *(_QWORD *)v4 -= (unint64_t)(v48 + 1) << v49;
      }
      v52 = v48 < v50;
      v53 = __clz(v51) ^ 0x18;
      v54 = v51 << v53;
      v46 = v49 - v53;
      v47 = v54 - 1;
      *(_DWORD *)(v4 + 8) = v54 - 1;
      *(_DWORD *)(v4 + 12) = v46;
      *(_BYTE *)(v7 + 800 * v5 + 797) = v52;
      if (v46 < 0)
        goto LABEL_43;
LABEL_47:
      v58 = (145 * v47) >> 8;
      v59 = v46;
      v60 = *(_QWORD *)v4 >> v46;
      if (v58 < v60)
      {
        v61 = v47 - v58;
        *(_QWORD *)v4 -= (unint64_t)(v58 + 1) << v59;
      }
      else
      {
        v61 = v58 + 1;
      }
      v239 = (int *)(v6 + (4 * v5));
      v62 = __clz(v61) ^ 0x18;
      v63 = v59 - v62;
      v64 = (v61 << v62) - 1;
      *(_DWORD *)(v4 + 8) = v64;
      *(_DWORD *)(v4 + 12) = v63;
      *(_BYTE *)(v7 + 800 * v5 + 768) = v58 >= v60;
      v236 = v5;
      if (v58 >= v60)
      {
        v65 = 0;
        v66 = (int *)(v7 + 800 * v5 + 769);
        v67 = v6 + 4 * (v5 & 0x3FFFFFFF);
        v68 = v238;
        while (1)
        {
          v69 = 0;
          v70 = *((unsigned __int8 *)v68 + v65);
          do
          {
            v71 = (unsigned __int8 *)&kBModesProba + 90 * *(unsigned __int8 *)(v67 + v69) + 9 * v70;
            v72 = *v71;
            v74 = *(_DWORD *)(v4 + 8);
            v73 = *(_DWORD *)(v4 + 12);
            if (v73 < 0)
            {
              v75 = *(unint64_t **)(v4 + 16);
              if (!v75)
                VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
              if ((unint64_t)v75 >= *(_QWORD *)(v4 + 32))
              {
                FinalBytes = VP8LoadFinalBytes(v4);
                v73 = *(_DWORD *)(v4 + 12);
              }
              else
              {
                v76 = *v75;
                *(_QWORD *)(v4 + 16) = (char *)v75 + 7;
                *((_QWORD *)&v77 + 1) = *(_QWORD *)v4;
                *(_QWORD *)&v77 = bswap64(v76);
                *(_QWORD *)v4 = v77 >> 8;
                v73 += 56;
              }
            }
            v78 = (v74 * v72) >> 8;
            v79 = *(_QWORD *)v4;
            v80 = v73;
            v81 = *(_QWORD *)v4 >> v73;
            if (v78 >= v81)
            {
              v82 = v78 + 1;
            }
            else
            {
              v82 = v74 - v78;
              v79 -= (unint64_t)(v78 + 1) << v80;
              *(_QWORD *)v4 = v79;
            }
            v83 = __clz(v82) ^ 0x18;
            v84 = v82 << v83;
            v85 = v80 - v83;
            v86 = v84 - 1;
            *(_DWORD *)(v4 + 8) = v84 - 1;
            *(_DWORD *)(v4 + 12) = v80 - v83;
            if (v78 >= v81)
            {
              v70 = 0;
              goto LABEL_139;
            }
            v87 = v71[1];
            if (v85 < 0)
            {
              v88 = *(unint64_t **)(v4 + 16);
              if (!v88)
                VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
              if ((unint64_t)v88 >= *(_QWORD *)(v4 + 32))
              {
                FinalBytes = VP8LoadFinalBytes(v4);
                v85 = *(_DWORD *)(v4 + 12);
                v79 = *(_QWORD *)v4;
              }
              else
              {
                v89 = *v88;
                *(_QWORD *)(v4 + 16) = (char *)v88 + 7;
                *((_QWORD *)&v90 + 1) = v79;
                *(_QWORD *)&v90 = bswap64(v89);
                v79 = v90 >> 8;
                *(_QWORD *)v4 = v79;
                v85 += 56;
              }
            }
            v91 = (v86 * v87) >> 8;
            v92 = v85;
            v93 = v79 >> v85;
            if (v91 >= (v79 >> v85))
            {
              v94 = v91 + 1;
            }
            else
            {
              v94 = v86 - v91;
              v79 -= (unint64_t)(v91 + 1) << v92;
              *(_QWORD *)v4 = v79;
            }
            v95 = __clz(v94) ^ 0x18;
            v96 = v94 << v95;
            v97 = v92 - v95;
            v98 = v96 - 1;
            *(_DWORD *)(v4 + 8) = v96 - 1;
            *(_DWORD *)(v4 + 12) = v92 - v95;
            if (v91 >= v93)
            {
              v70 = 1;
              goto LABEL_139;
            }
            v99 = v71[2];
            if (v97 < 0)
            {
              v100 = *(unint64_t **)(v4 + 16);
              if (!v100)
                VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
              if ((unint64_t)v100 >= *(_QWORD *)(v4 + 32))
              {
                FinalBytes = VP8LoadFinalBytes(v4);
                v97 = *(_DWORD *)(v4 + 12);
                v79 = *(_QWORD *)v4;
              }
              else
              {
                v101 = *v100;
                *(_QWORD *)(v4 + 16) = (char *)v100 + 7;
                *((_QWORD *)&v102 + 1) = v79;
                *(_QWORD *)&v102 = bswap64(v101);
                v79 = v102 >> 8;
                *(_QWORD *)v4 = v79;
                v97 += 56;
              }
            }
            v103 = (v98 * v99) >> 8;
            v104 = v97;
            v105 = v79 >> v97;
            if (v103 >= (v79 >> v97))
            {
              v106 = v103 + 1;
            }
            else
            {
              v106 = v98 - v103;
              v79 -= (unint64_t)(v103 + 1) << v104;
              *(_QWORD *)v4 = v79;
            }
            v107 = __clz(v106) ^ 0x18;
            v108 = v106 << v107;
            v109 = v104 - v107;
            v110 = v108 - 1;
            *(_DWORD *)(v4 + 8) = v108 - 1;
            *(_DWORD *)(v4 + 12) = v104 - v107;
            if (v103 >= v105)
            {
              v70 = 2;
              goto LABEL_139;
            }
            v111 = v71[3];
            if (v109 < 0)
            {
              v112 = *(unint64_t **)(v4 + 16);
              if (!v112)
                VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
              if ((unint64_t)v112 >= *(_QWORD *)(v4 + 32))
              {
                FinalBytes = VP8LoadFinalBytes(v4);
                v109 = *(_DWORD *)(v4 + 12);
                v79 = *(_QWORD *)v4;
              }
              else
              {
                v113 = *v112;
                *(_QWORD *)(v4 + 16) = (char *)v112 + 7;
                *((_QWORD *)&v114 + 1) = v79;
                *(_QWORD *)&v114 = bswap64(v113);
                v79 = v114 >> 8;
                *(_QWORD *)v4 = v79;
                v109 += 56;
              }
            }
            v115 = (v110 * v111) >> 8;
            v116 = v109;
            v117 = v79 >> v109;
            if (v115 >= (v79 >> v109))
            {
              v118 = v115 + 1;
            }
            else
            {
              v118 = v110 - v115;
              v79 -= (unint64_t)(v115 + 1) << v116;
              *(_QWORD *)v4 = v79;
            }
            v119 = __clz(v118) ^ 0x18;
            v120 = v118 << v119;
            v121 = v116 - v119;
            v122 = v120 - 1;
            *(_DWORD *)(v4 + 8) = v120 - 1;
            *(_DWORD *)(v4 + 12) = v116 - v119;
            if (v115 >= v117)
            {
              v127 = v71[4];
              if (v121 < 0)
              {
                v128 = *(unint64_t **)(v4 + 16);
                if (!v128)
                  VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
                if ((unint64_t)v128 >= *(_QWORD *)(v4 + 32))
                {
                  FinalBytes = VP8LoadFinalBytes(v4);
                  v121 = *(_DWORD *)(v4 + 12);
                  v79 = *(_QWORD *)v4;
                }
                else
                {
                  v129 = *v128;
                  *(_QWORD *)(v4 + 16) = (char *)v128 + 7;
                  *((_QWORD *)&v130 + 1) = v79;
                  *(_QWORD *)&v130 = bswap64(v129);
                  v79 = v130 >> 8;
                  *(_QWORD *)v4 = v79;
                  v121 += 56;
                }
              }
              v141 = (v122 * v127) >> 8;
              v142 = v121;
              v143 = v79 >> v121;
              if (v141 >= (v79 >> v121))
              {
                v144 = v141 + 1;
              }
              else
              {
                v144 = v122 - v141;
                v79 -= (unint64_t)(v141 + 1) << v142;
                *(_QWORD *)v4 = v79;
              }
              v145 = __clz(v144) ^ 0x18;
              v146 = v144 << v145;
              v147 = v142 - v145;
              v148 = v146 - 1;
              *(_DWORD *)(v4 + 8) = v146 - 1;
              *(_DWORD *)(v4 + 12) = v142 - v145;
              if (v141 >= v143)
              {
                v70 = 3;
                goto LABEL_139;
              }
              v149 = v71[5];
              if (v147 < 0)
              {
                v150 = *(unint64_t **)(v4 + 16);
                if (!v150)
                  VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
                if ((unint64_t)v150 >= *(_QWORD *)(v4 + 32))
                {
                  FinalBytes = VP8LoadFinalBytes(v4);
                  v147 = *(_DWORD *)(v4 + 12);
                  v79 = *(_QWORD *)v4;
                }
                else
                {
                  v151 = *v150;
                  *(_QWORD *)(v4 + 16) = (char *)v150 + 7;
                  *((_QWORD *)&v152 + 1) = v79;
                  *(_QWORD *)&v152 = bswap64(v151);
                  v79 = v152 >> 8;
                  *(_QWORD *)v4 = v79;
                  v147 += 56;
                }
              }
              v165 = (v148 * v149) >> 8;
              v166 = v147;
              if (v165 >= (v79 >> v147))
              {
                v167 = v165 + 1;
                v70 = 4;
              }
              else
              {
                v167 = v148 - v165;
                *(_QWORD *)v4 = v79 - ((unint64_t)(v165 + 1) << v166);
                v70 = 5;
              }
            }
            else
            {
              v123 = v71[6];
              if (v121 < 0)
              {
                v124 = *(unint64_t **)(v4 + 16);
                if (!v124)
                  VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
                if ((unint64_t)v124 >= *(_QWORD *)(v4 + 32))
                {
                  FinalBytes = VP8LoadFinalBytes(v4);
                  v121 = *(_DWORD *)(v4 + 12);
                  v79 = *(_QWORD *)v4;
                }
                else
                {
                  v125 = *v124;
                  *(_QWORD *)(v4 + 16) = (char *)v124 + 7;
                  *((_QWORD *)&v126 + 1) = v79;
                  *(_QWORD *)&v126 = bswap64(v125);
                  v79 = v126 >> 8;
                  *(_QWORD *)v4 = v79;
                  v121 += 56;
                }
              }
              v131 = (v122 * v123) >> 8;
              v132 = v79 >> v121;
              if (v131 >= (v79 >> v121))
              {
                v133 = v131 + 1;
              }
              else
              {
                v133 = v122 - v131;
                v79 -= (unint64_t)(v131 + 1) << v121;
                *(_QWORD *)v4 = v79;
              }
              v134 = __clz(v133) ^ 0x18;
              v135 = v121 - v134;
              v136 = (v133 << v134) - 1;
              *(_DWORD *)(v4 + 8) = v136;
              *(_DWORD *)(v4 + 12) = v135;
              if (v131 >= v132)
              {
                v70 = 6;
                goto LABEL_139;
              }
              v137 = v71[7];
              if (v135 < 0)
              {
                v138 = *(unint64_t **)(v4 + 16);
                if (!v138)
                  VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
                if ((unint64_t)v138 >= *(_QWORD *)(v4 + 32))
                {
                  FinalBytes = VP8LoadFinalBytes(v4);
                  v135 = *(_DWORD *)(v4 + 12);
                  v79 = *(_QWORD *)v4;
                }
                else
                {
                  v139 = *v138;
                  *(_QWORD *)(v4 + 16) = (char *)v138 + 7;
                  *((_QWORD *)&v140 + 1) = v79;
                  *(_QWORD *)&v140 = bswap64(v139);
                  v79 = v140 >> 8;
                  *(_QWORD *)v4 = v79;
                  v135 += 56;
                }
              }
              v153 = (v136 * v137) >> 8;
              v154 = v135;
              v155 = v79 >> v135;
              if (v153 >= (v79 >> v135))
              {
                v156 = v153 + 1;
              }
              else
              {
                v156 = v136 - v153;
                v79 -= (unint64_t)(v153 + 1) << v154;
                *(_QWORD *)v4 = v79;
              }
              v157 = __clz(v156) ^ 0x18;
              v158 = v156 << v157;
              v159 = v154 - v157;
              v160 = v158 - 1;
              *(_DWORD *)(v4 + 8) = v158 - 1;
              *(_DWORD *)(v4 + 12) = v154 - v157;
              if (v153 >= v155)
              {
                v70 = 7;
                goto LABEL_139;
              }
              v161 = v71[8];
              if (v159 < 0)
              {
                v162 = *(unint64_t **)(v4 + 16);
                if (!v162)
                  VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
                if ((unint64_t)v162 >= *(_QWORD *)(v4 + 32))
                {
                  FinalBytes = VP8LoadFinalBytes(v4);
                  v159 = *(_DWORD *)(v4 + 12);
                  v79 = *(_QWORD *)v4;
                }
                else
                {
                  v163 = *v162;
                  *(_QWORD *)(v4 + 16) = (char *)v162 + 7;
                  *((_QWORD *)&v164 + 1) = v79;
                  *(_QWORD *)&v164 = bswap64(v163);
                  v79 = v164 >> 8;
                  *(_QWORD *)v4 = v79;
                  v159 += 56;
                }
              }
              v168 = (v160 * v161) >> 8;
              v166 = v159;
              if (v168 >= (v79 >> v159))
              {
                v167 = v168 + 1;
                v70 = 8;
              }
              else
              {
                v167 = v160 - v168;
                *(_QWORD *)v4 = v79 - ((unint64_t)(v168 + 1) << v166);
                v70 = 9;
              }
            }
            v169 = __clz(v167) ^ 0x18;
            *(_DWORD *)(v4 + 8) = (v167 << v169) - 1;
            *(_DWORD *)(v4 + 12) = v166 - v169;
LABEL_139:
            *(_BYTE *)(v67 + v69++) = v70;
          }
          while (v69 != 4);
          *v66++ = *v239;
          *((_BYTE *)v238 + v65) = v70;
          v68 = v238;
          if (++v65 == 4)
            goto LABEL_170;
        }
      }
      if (v63 < 0)
      {
        v170 = *(unint64_t **)(v4 + 16);
        if (!v170)
          VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
        if ((unint64_t)v170 >= *(_QWORD *)(v4 + 32))
        {
          FinalBytes = VP8LoadFinalBytes(v4);
          v63 = *(_DWORD *)(v4 + 12);
        }
        else
        {
          v171 = *v170;
          *(_QWORD *)(v4 + 16) = (char *)v170 + 7;
          *((_QWORD *)&v172 + 1) = *(_QWORD *)v4;
          *(_QWORD *)&v172 = bswap64(v171);
          *(_QWORD *)v4 = v172 >> 8;
          v63 += 56;
        }
      }
      v173 = (156 * v64) >> 8;
      v174 = *(_QWORD *)v4;
      v175 = v63;
      v176 = *(_QWORD *)v4 >> v63;
      if (v173 >= v176)
      {
        v177 = v173 + 1;
      }
      else
      {
        v177 = v64 - v173;
        v174 -= (unint64_t)(v173 + 1) << v175;
        *(_QWORD *)v4 = v174;
      }
      v178 = __clz(v177) ^ 0x18;
      v179 = v177 << v178;
      v180 = v175 - v178;
      v181 = v179 - 1;
      *(_DWORD *)(v4 + 8) = v179 - 1;
      *(_DWORD *)(v4 + 12) = v175 - v178;
      if (v173 >= v176)
      {
        if (v180 < 0)
        {
          v185 = *(unint64_t **)(v4 + 16);
          if (!v185)
            VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
          if ((unint64_t)v185 >= *(_QWORD *)(v4 + 32))
          {
            FinalBytes = VP8LoadFinalBytes(v4);
            v180 = *(_DWORD *)(v4 + 12);
            v174 = *(_QWORD *)v4;
          }
          else
          {
            v186 = *v185;
            *(_QWORD *)(v4 + 16) = (char *)v185 + 7;
            *((_QWORD *)&v187 + 1) = v174;
            *(_QWORD *)&v187 = bswap64(v186);
            v174 = v187 >> 8;
            *(_QWORD *)v4 = v174;
            v180 += 56;
          }
        }
        v196 = (163 * v181) >> 8;
        if (v196 >= (v174 >> v180))
        {
          v191 = 0;
          v197 = v196 + 1;
        }
        else
        {
          v197 = v181 - v196;
          *(_QWORD *)v4 = v174 - ((unint64_t)(v196 + 1) << v180);
          v191 = 2;
        }
        v198 = __clz(v197);
        v199 = v198 ^ 0x18;
        v194 = v197 << (v198 ^ 0x18);
        v195 = v180 - v199;
      }
      else
      {
        if (v180 < 0)
        {
          v182 = *(unint64_t **)(v4 + 16);
          if (!v182)
            VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
          if ((unint64_t)v182 >= *(_QWORD *)(v4 + 32))
          {
            FinalBytes = VP8LoadFinalBytes(v4);
            v180 = *(_DWORD *)(v4 + 12);
            v174 = *(_QWORD *)v4;
          }
          else
          {
            v183 = *v182;
            *(_QWORD *)(v4 + 16) = (char *)v182 + 7;
            *((_QWORD *)&v184 + 1) = v174;
            *(_QWORD *)&v184 = bswap64(v183);
            v174 = v184 >> 8;
            *(_QWORD *)v4 = v174;
            v180 += 56;
          }
        }
        v188 = (v181 >> 1) & 0xFFFFFF;
        v189 = v180;
        if (v188 >= (v174 >> v180))
        {
          v190 = v188 + 1;
          v191 = 3;
        }
        else
        {
          v190 = v181 - v188;
          *(_QWORD *)v4 = v174 - ((unint64_t)(v188 + 1) << v189);
          v191 = 1;
        }
        v192 = __clz(v190);
        v193 = v192 ^ 0x18;
        v194 = v190 << (v192 ^ 0x18);
        v195 = v189 - v193;
      }
      *(_DWORD *)(v4 + 8) = v194 - 1;
      *(_DWORD *)(v4 + 12) = v195;
      *(_BYTE *)(v7 + 800 * v5 + 769) = v191;
      v200 = 16843009 * v191;
      *v239 = v200;
      *v238 = v200;
LABEL_170:
      v202 = *(_DWORD *)(v4 + 8);
      v201 = *(_DWORD *)(v4 + 12);
      v3 = a2;
      if (v201 < 0)
      {
        v203 = *(unint64_t **)(v4 + 16);
        if (!v203)
          VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
        if ((unint64_t)v203 >= *(_QWORD *)(v4 + 32))
        {
          FinalBytes = VP8LoadFinalBytes(v4);
          v201 = *(_DWORD *)(v4 + 12);
        }
        else
        {
          v204 = *v203;
          *(_QWORD *)(v4 + 16) = (char *)v203 + 7;
          *((_QWORD *)&v205 + 1) = *(_QWORD *)v4;
          *(_QWORD *)&v205 = bswap64(v204);
          *(_QWORD *)v4 = v205 >> 8;
          v201 += 56;
        }
      }
      v206 = (142 * v202) >> 8;
      v207 = *(_QWORD *)v4;
      v208 = v201;
      v209 = *(_QWORD *)v4 >> v201;
      if (v206 >= v209)
      {
        v210 = v206 + 1;
      }
      else
      {
        v210 = v202 - v206;
        v207 -= (unint64_t)(v206 + 1) << v208;
        *(_QWORD *)v4 = v207;
      }
      v211 = __clz(v210) ^ 0x18;
      v212 = v210 << v211;
      v213 = v208 - v211;
      v214 = v212 - 1;
      *(_DWORD *)(v4 + 8) = v212 - 1;
      *(_DWORD *)(v4 + 12) = v208 - v211;
      if (v206 >= v209)
      {
        v218 = 0;
      }
      else
      {
        if (v213 < 0)
        {
          v215 = *(unint64_t **)(v4 + 16);
          if (!v215)
            VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
          if ((unint64_t)v215 >= *(_QWORD *)(v4 + 32))
          {
            FinalBytes = VP8LoadFinalBytes(v4);
            v213 = *(_DWORD *)(v4 + 12);
            v207 = *(_QWORD *)v4;
          }
          else
          {
            v216 = *v215;
            *(_QWORD *)(v4 + 16) = (char *)v215 + 7;
            *((_QWORD *)&v217 + 1) = v207;
            *(_QWORD *)&v217 = bswap64(v216);
            v207 = v217 >> 8;
            *(_QWORD *)v4 = v207;
            v213 += 56;
          }
        }
        v219 = (114 * v214) >> 8;
        v220 = v213;
        v221 = v207 >> v213;
        if (v219 >= (v207 >> v213))
        {
          v222 = v219 + 1;
        }
        else
        {
          v222 = v214 - v219;
          v207 -= (unint64_t)(v219 + 1) << v220;
          *(_QWORD *)v4 = v207;
        }
        v223 = __clz(v222) ^ 0x18;
        v224 = v222 << v223;
        v225 = v220 - v223;
        v226 = v224 - 1;
        *(_DWORD *)(v4 + 8) = v224 - 1;
        *(_DWORD *)(v4 + 12) = v220 - v223;
        if (v219 >= v221)
        {
          v218 = 2;
        }
        else
        {
          if (v225 < 0)
          {
            v227 = *(unint64_t **)(v4 + 16);
            if (!v227)
              VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
            if ((unint64_t)v227 >= *(_QWORD *)(v4 + 32))
            {
              FinalBytes = VP8LoadFinalBytes(v4);
              v225 = *(_DWORD *)(v4 + 12);
              v207 = *(_QWORD *)v4;
            }
            else
            {
              v228 = *v227;
              *(_QWORD *)(v4 + 16) = (char *)v227 + 7;
              *((_QWORD *)&v229 + 1) = v207;
              *(_QWORD *)&v229 = bswap64(v228);
              v207 = v229 >> 8;
              *(_QWORD *)v4 = v207;
              v225 += 56;
            }
          }
          v230 = (183 * v226) >> 8;
          v231 = v225;
          if (v230 >= (v207 >> v225))
          {
            v232 = v230 + 1;
            v218 = 3;
          }
          else
          {
            v232 = v226 - v230;
            *(_QWORD *)v4 = v207 - ((unint64_t)(v230 + 1) << v231);
            v218 = 1;
          }
          v233 = __clz(v232) ^ 0x18;
          *(_DWORD *)(v4 + 8) = (v232 << v233) - 1;
          *(_DWORD *)(v4 + 12) = v231 - v233;
        }
      }
      *(_BYTE *)(v237 + 800 * v236 + 785) = v218;
      v5 = v236 + 1;
      if (v236 + 1 >= *(int *)(a2 + 408))
        return *(_DWORD *)(v3 + 56) == 0;
    }
    v47 = *(_DWORD *)(v4 + 8);
    v46 = *(_DWORD *)(v4 + 12);
    if ((v46 & 0x80000000) == 0)
      goto LABEL_47;
LABEL_43:
    v55 = *(unint64_t **)(v4 + 16);
    if (!v55)
      VP8ParseIntraModeRow_cold_1(FinalBytes, a2, a3);
    if ((unint64_t)v55 >= *(_QWORD *)(v4 + 32))
    {
      FinalBytes = VP8LoadFinalBytes(v4);
      v46 = *(_DWORD *)(v4 + 12);
    }
    else
    {
      v56 = *v55;
      *(_QWORD *)(v4 + 16) = (char *)v55 + 7;
      *((_QWORD *)&v57 + 1) = *(_QWORD *)v4;
      *(_QWORD *)&v57 = bswap64(v56);
      *(_QWORD *)v4 = v57 >> 8;
      v46 += 56;
    }
    goto LABEL_47;
  }
  return *(_DWORD *)(v3 + 56) == 0;
}

uint64_t VP8ParseProba(uint64_t Value, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t i;
  int v14;
  int v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t j;
  uint64_t result;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = Value;
  v4 = 0;
  v5 = a2 + 1195;
  v6 = (char *)&CoeffsUpdateProba;
  v7 = a2 + 2256;
  v8 = (char *)&CoeffsProba0;
  do
  {
    v28 = v8;
    v29 = v7;
    v31 = v5;
    v32 = v4;
    v9 = 0;
    v30 = v6;
    do
    {
      v33 = v5;
      v34 = v9;
      v10 = 0;
      v11 = v8;
      v12 = v6;
      do
      {
        for (i = 0; i != 11; ++i)
        {
          v14 = v12[i];
          v16 = *(_DWORD *)(v3 + 8);
          v15 = *(_DWORD *)(v3 + 12);
          if (v15 < 0)
          {
            v17 = *(unint64_t **)(v3 + 16);
            if (!v17)
              VP8ParseIntraModeRow_cold_1(Value, a2, a3);
            if ((unint64_t)v17 >= *(_QWORD *)(v3 + 32))
            {
              VP8LoadFinalBytes(v3);
              v15 = *(_DWORD *)(v3 + 12);
            }
            else
            {
              v18 = *v17;
              *(_QWORD *)(v3 + 16) = (char *)v17 + 7;
              *((_QWORD *)&v19 + 1) = *(_QWORD *)v3;
              *(_QWORD *)&v19 = bswap64(v18);
              *(_QWORD *)v3 = v19 >> 8;
              v15 += 56;
            }
          }
          v20 = (v16 * v14) >> 8;
          v21 = v15;
          v22 = *(_QWORD *)v3 >> v15;
          if (v20 >= v22)
          {
            v23 = v20 + 1;
          }
          else
          {
            v23 = v16 - v20;
            *(_QWORD *)v3 -= (unint64_t)(v20 + 1) << v21;
          }
          v24 = __clz(v23) ^ 0x18;
          *(_DWORD *)(v3 + 8) = (v23 << v24) - 1;
          *(_DWORD *)(v3 + 12) = v21 - v24;
          if (v20 >= v22)
            Value = v11[i];
          else
            Value = VP8GetValue(v3, 8);
          *(_BYTE *)(v5 + i) = Value;
        }
        ++v10;
        v12 += 11;
        v11 += 11;
        v5 += 11;
      }
      while (v10 != 3);
      v9 = v34 + 1;
      v6 += 33;
      v8 += 33;
      v5 = v33 + 33;
    }
    while (v34 != 7);
    for (j = 0; j != 17; ++j)
      *(_QWORD *)(v29 + 8 * j) = a2 + 264 * v32 + 33 * kBands[j] + 1195;
    v4 = v32 + 1;
    v6 = v30 + 264;
    v8 = v28 + 264;
    v5 = v31 + 264;
    v7 = v29 + 136;
  }
  while (v32 != 3);
  result = VP8GetValue(v3, 1);
  *(_DWORD *)(a2 + 2800) = result;
  if ((_DWORD)result)
  {
    result = VP8GetValue(v3, 8);
    *(_BYTE *)(a2 + 2804) = result;
  }
  return result;
}

void OUTLINED_FUNCTION_0_7(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 59, a4);
}

void VP8ParseIntraModeRow_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_7("VP8LoadNewBytes", "bit_reader_inl_utils.h", a3, "br != NULL && br->buf_ != NULL");
}

uint64_t WebPParseHeaders(uint64_t a1)
{
  int v3;
  unsigned int v4;

  v4 = 0;
  v3 = 0;
  if (!a1)
    WebPParseHeaders_cold_1();
  v4 = ParseHeadersInternal(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), 0, 0, 0, &v3, 0, a1);
  if (!v4)
  {
    if (!v3)
      return v4;
    return 4;
  }
  if (v4 == 7 && v3 != 0)
    return 4;
  return v4;
}

uint64_t ParseHeadersInternal(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int *a5, int *a6, int *a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  unint64_t v30;
  int v32;
  int v33;
  __int128 v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned __int8 *v43;

  v42 = a2;
  v43 = (unsigned __int8 *)a1;
  if (a8)
    v13 = *(_DWORD *)(a8 + 16);
  else
    v13 = 0;
  v14 = 7;
  if (!a1 || a2 < 0xC)
    return v14;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  *(_QWORD *)&v36 = a1;
  *((_QWORD *)&v36 + 1) = a2;
  v15 = bswap32(*(_DWORD *)a1);
  v16 = v15 >= 0x52494646;
  v17 = v15 > 0x52494646;
  v18 = !v16;
  v19 = v17 - v18;
  if (v19)
  {
    v20 = 0;
  }
  else
  {
    if (*(_DWORD *)(a1 + 8) != 1346520407)
      return 3;
    v20 = *(unsigned int *)(a1 + 4);
    if ((v20 + 9) < 0x15)
      return 3;
    if (v13 && a2 - 8 < v20)
      return 7;
    *((_QWORD *)&v38 + 1) = *(unsigned int *)(a1 + 4);
    a1 += 12;
    v42 = a2 - 12;
    v43 = (unsigned __int8 *)a1;
    if (a2 - 12 < 8)
      return 7;
    a2 -= 12;
  }
  v21 = bswap32(*(_DWORD *)a1);
  v16 = v21 >= 0x56503858;
  v22 = v21 > 0x56503858;
  v23 = !v16;
  v24 = v22 - v23;
  if (v22 != v23)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    if (!a5)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a1 + 4) != 10)
    return 3;
  v16 = a2 >= 0x12;
  a2 -= 18;
  if (!v16)
    return 7;
  v28 = (*(unsigned __int16 *)(a1 + 12) | (*(unsigned __int8 *)(a1 + 14) << 16)) + 1;
  v27 = (*(unsigned __int16 *)(a1 + 15) | (*(unsigned __int8 *)(a1 + 17) << 16)) + 1;
  if (((v28 * (unint64_t)v27) & 0xFFFFFFFF00000000) != 0)
    return 3;
  v26 = *(_DWORD *)(a1 + 8);
  a1 += 18;
  v42 = a2;
  v43 = (unsigned __int8 *)a1;
  if (v19)
    return 3;
  v25 = (v26 >> 1) & 1;
  if (a5)
LABEL_16:
    *a5 = (v26 >> 4) & 1;
LABEL_17:
  if (a6)
    *a6 = v25;
  if (a7)
    *a7 = 0;
  v40 = v27;
  v41 = v28;
  if (a8)
    v29 = 0;
  else
    v29 = v25;
  if ((v29 & 1) == 0)
  {
    if (a2 < 4)
    {
LABEL_26:
      v14 = 7;
LABEL_48:
      if (a8 || v24 || (_DWORD)v14 != 7)
        return v14;
      goto LABEL_51;
    }
    if (v19 | v24)
    {
      if (!v19 || !v24)
        goto LABEL_47;
      if (*(_DWORD *)a1 != 1213221953)
      {
        v20 = 0;
        goto LABEL_47;
      }
    }
    v14 = ParseOptionalChunks((_DWORD **)&v43, &v42, v20, &v37, (_QWORD *)&v37 + 1);
    if ((_DWORD)v14)
      goto LABEL_48;
    v20 = *((_QWORD *)&v38 + 1);
LABEL_47:
    v14 = ParseVP8Header((uint64_t *)&v43, &v42, v13, v20, (unint64_t *)&v38, (_BOOL4 *)&v39);
    if ((_DWORD)v14)
      goto LABEL_48;
    v30 = v38;
    if ((unint64_t)v38 > 0xFFFFFFF6)
      return 3;
    v32 = v39;
    if (a7 && !v25)
    {
      if ((_DWORD)v39)
        v33 = 2;
      else
        v33 = 1;
      *a7 = v33;
    }
    if (v32)
    {
      if (v42 < 5)
        goto LABEL_26;
      if (!VP8LGetInfo(v43, v42, &v41, &v40, a5))
        return 3;
    }
    else
    {
      if (v42 < 0xA)
        goto LABEL_26;
      if (!VP8GetInfo(v43, v42, v30, (int *)&v41, (int *)&v40))
        return 3;
    }
    if (!v24)
    {
      v14 = 3;
      if (v28 != v41 || v27 != v40)
        return v14;
    }
    if (a8)
    {
      *(_OWORD *)a8 = v36;
      *(_OWORD *)(a8 + 16) = 0u;
      v34 = v38;
      *(_OWORD *)(a8 + 32) = v37;
      *(_OWORD *)(a8 + 48) = v34;
      *(_QWORD *)(a8 + 64) = v39;
      v35 = (char *)&v43[-*(_QWORD *)a8];
      *(_QWORD *)(a8 + 24) = v35;
      if ((unint64_t)v35 > 0xFFFFFFF5)
        ParseHeadersInternal_cold_1();
      if (v35 != (char *)(*(_QWORD *)(a8 + 8) - v42))
        ParseHeadersInternal_cold_2();
    }
  }
LABEL_51:
  if (a5)
    *a5 |= (_QWORD)v37 != 0;
  if (a3)
    *a3 = v41;
  v14 = 0;
  if (a4)
    *a4 = v40;
  return v14;
}

uint64_t WebPDecodeRGBInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(0, a1, a2, a3, a5, a4);
}

uint64_t DecodeIntoRGBABuffer(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (!a4)
    return 0;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  WebPInitDecBufferInternal((uint64_t)&v13, 521);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v21 = &v13;
  *(_QWORD *)&v14 = a4;
  DWORD2(v14) = a5;
  *(_QWORD *)&v15 = a6;
  LODWORD(v13) = a1;
  HIDWORD(v13) = 1;
  if (DecodeInto(a2, a3, (uint64_t)&v21))
    return 0;
  else
    return a4;
}

uint64_t WebPDecodeRGBAInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(1, a1, a2, a3, a5, a4);
}

uint64_t WebPDecodeBGRAInto(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return DecodeIntoRGBABuffer(3, a1, a2, a3, a5, a4);
}

uint64_t DecodeInto(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  v16 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = a1;
  v13 = a2;
  LODWORD(v14) = 1;
  v4 = WebPParseHeaders((uint64_t)&v12);
  if ((_DWORD)v4)
    return v4;
  if (!a3)
    DecodeInto_cold_1();
  VP8InitIoInternal(v18, 521);
  *(_QWORD *)&v19 = v13 - *((_QWORD *)&v14 + 1);
  *((_QWORD *)&v19 + 1) = v12 + *((_QWORD *)&v14 + 1);
  WebPInitCustomIo(a3, v18);
  if (!(_DWORD)v17)
  {
    v8 = (unsigned int *)VP8New();
    if (!v8)
      return 1;
    v9 = v8;
    v10 = *((_QWORD *)&v15 + 1);
    *((_QWORD *)v8 + 371) = v15;
    *((_QWORD *)v8 + 372) = v10;
    if (!VP8GetHeaders((uint64_t)v8, (uint64_t)v18))
      goto LABEL_19;
    v4 = WebPAllocateDecBuffer(v18[0], SDWORD1(v18[0]), *(_DWORD **)(a3 + 40), *(unsigned int **)a3);
    if ((_DWORD)v4)
      goto LABEL_20;
    v9[50] = VP8GetThreadMethod(*(_QWORD *)(a3 + 40), (uint64_t)&v12);
    VP8InitDithering(*(_QWORD *)(a3 + 40), (uint64_t)v9);
    if (VP8Decode((uint64_t)v9, (int *)v18))
      v4 = 0;
    else
LABEL_19:
      v4 = *v9;
LABEL_20:
    VP8Delete(v9);
    if ((_DWORD)v4)
      goto LABEL_18;
    goto LABEL_21;
  }
  v6 = (unsigned int *)VP8LNew();
  if (!v6)
    return 1;
  v7 = v6;
  if (!VP8LDecodeHeader((uint64_t)v6, (uint64_t)v18))
    goto LABEL_16;
  v4 = WebPAllocateDecBuffer(v18[0], SDWORD1(v18[0]), *(_DWORD **)(a3 + 40), *(unsigned int **)a3);
  if ((_DWORD)v4)
    goto LABEL_17;
  if (VP8LDecodeImage((uint64_t)v7))
    v4 = 0;
  else
LABEL_16:
    v4 = *v7;
LABEL_17:
  VP8LDelete(v7);
  if ((_DWORD)v4)
  {
LABEL_18:
    WebPFreeDecBuffer(*(_QWORD *)a3);
    return v4;
  }
LABEL_21:
  v11 = *(_QWORD *)(a3 + 40);
  if (v11 && *(_DWORD *)(v11 + 48))
    return WebPFlipBuffer(*(_QWORD *)a3);
  else
    return 0;
}

uint64_t GetFeatures(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a1 || !a3)
    return 2;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)a3 = 0u;
  return ParseHeadersInternal(a1, a2, (unsigned int *)a3, (unsigned int *)(a3 + 4), (int *)(a3 + 8), (int *)(a3 + 12), (int *)(a3 + 16), 0);
}

uint64_t WebPInitDecoderConfigInternal(_OWORD *a1, int a2)
{
  uint64_t v2;

  v2 = 0;
  if (a1 && (a2 & 0xFFFFFF00) == 0x200)
  {
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    *((_QWORD *)a1 + 4) = 0;
    WebPInitDecBufferInternal((uint64_t)a1 + 40, 521);
    return 1;
  }
  return v2;
}

uint64_t WebPGetFeaturesInternal(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  if (a3 && (a4 & 0xFFFFFF00) == 0x200)
    return GetFeatures(a1, a2, a3);
  else
    return 2;
}

uint64_t WebPDecode(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned int Features;
  uint64_t v7;
  _OWORD v9[7];
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (!a3)
    return 2;
  Features = GetFeatures(a1, a2, a3);
  if (Features)
  {
    if (Features == 7)
      return 3;
    else
      return Features;
  }
  else
  {
    v14 = 0u;
    v18 = 0;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v13 = 0u;
    v12 = 0u;
    *(_QWORD *)&v14 = a3 + 160;
    v11 = (_OWORD *)(a3 + 40);
    if (WebPAvoidSlowMemory((_DWORD *)(a3 + 40), a3))
    {
      v10 = 0;
      memset(v9, 0, sizeof(v9));
      WebPInitDecBufferInternal((uint64_t)v9, 521);
      LODWORD(v9[0]) = *(_DWORD *)(a3 + 40);
      *(_QWORD *)((char *)v9 + 4) = *(_QWORD *)a3;
      v11 = v9;
      v7 = DecodeInto(a1, a2, (uint64_t)&v11);
      if (!(_DWORD)v7)
        v7 = WebPCopyDecBufferPixels((unsigned int *)v9, a3 + 40);
      WebPFreeDecBuffer((uint64_t)v9);
    }
    else
    {
      return DecodeInto(a1, a2, (uint64_t)&v11);
    }
  }
  return v7;
}

BOOL WebPCheckCropDimensions(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return (a4 | a3) >= 0
      && a5 > 0
      && a6 > 0
      && a1 > a3
      && a5 <= a1
      && a1 - a3 >= a5
      && a2 > a4
      && a6 <= a2
      && a2 - a4 >= a6;
}

uint64_t WebPIoInitFromOptions(_DWORD *a1, signed int *a2, unsigned int a3)
{
  signed int v5;
  signed int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  signed int v11;
  signed int v12;
  BOOL v17;
  int v19;
  signed int v20;
  signed int v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  signed int v27;
  signed int v28;

  v6 = *a2;
  v5 = a2[1];
  if (a1)
  {
    v7 = a1[2];
    a2[29] = v7 != 0;
    if (v7)
    {
      v8 = 0;
      v9 = a1[5];
      v10 = a1[6];
      v11 = a1[3] & 0xFFFFFFFE;
      if (a3 > 0xA)
      {
        v12 = a1[4] & 0xFFFFFFFE;
      }
      else
      {
        v11 = a1[3];
        v12 = a1[4];
      }
      v17 = v10 > v5 || v5 <= v12 || v9 > v6 || v6 <= v11 || v10 < 1 || v9 < 1;
      if (v17 || (v12 | v11) < 0)
        return v8;
      if (v6 - v11 < v9 || v5 - v12 < v10)
        return v8;
      goto LABEL_32;
    }
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    a2[29] = 0;
  }
  v9 = v6;
  v10 = v5;
LABEL_32:
  a2[30] = v11;
  a2[31] = v9 + v11;
  a2[32] = v12;
  a2[33] = v10 + v12;
  a2[3] = v9;
  a2[4] = v10;
  if (a1)
  {
    v19 = a1[7];
    a2[34] = v19 != 0;
    if (v19)
    {
      v20 = a1[8];
      v27 = a1[9];
      v28 = v20;
      if (!WebPRescalerGetScaledDimensions(v9, v10, &v28, &v27))
        return 0;
      v21 = v27;
      a2[35] = v28;
      a2[36] = v21;
      v22 = a2[34] == 0;
    }
    else
    {
      v22 = 1;
    }
    v23 = a1[1];
    v24 = *a1 != 0;
    a2[28] = v24;
    a2[22] = v23 == 0;
    if (!v22)
    {
      v25 = a2[35] < 3 * v6 / 4 && a2[36] < 3 * v5 / 4;
      a2[28] = v25 || v24;
      a2[22] = 0;
    }
    return 1;
  }
  else
  {
    a2[34] = 0;
    a2[28] = 0;
    v8 = 1;
    a2[22] = 1;
  }
  return v8;
}

uint64_t ParseOptionalChunks(_DWORD **a1, unint64_t *a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _DWORD *v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    ParseOptionalChunks_cold_1();
  if (!a2)
    ParseOptionalChunks_cold_2();
  if (!a4)
    ParseOptionalChunks_cold_3();
  if (!a5)
    ParseOptionalChunks_cold_4();
  v5 = *a1;
  v6 = *a2;
  *a4 = 0;
  *a5 = 0;
  *a1 = v5;
  *a2 = v6;
  if (v6 < 8)
    return 7;
  LODWORD(v8) = 22;
  while (1)
  {
    v9 = v5[1];
    if (v9 > 0xFFFFFFF6)
      return 3;
    v10 = ((_DWORD)v9 + 9) & 0xFFFFFFFE;
    v8 = (v10 + v8);
    if (a3)
    {
      if (v8 > a3)
        return 3;
    }
    if (*v5 == 540561494 || *v5 == 1278758998)
      break;
    if (v6 >= v10)
    {
      if (*v5 == 1213221953)
      {
        *a4 = v5 + 2;
        *a5 = v9;
      }
      v5 = (_DWORD *)((char *)v5 + v10);
      v6 -= v10;
      *a1 = v5;
      *a2 = v6;
      if (v6 > 7)
        continue;
    }
    return 7;
  }
  return 0;
}

uint64_t ParseVP8Header(uint64_t *a1, unint64_t *a2, int a3, unint64_t a4, unint64_t *a5, _BOOL4 *a6)
{
  uint64_t v7;
  _BOOL4 v8;
  unint64_t v12;
  uint64_t v13;
  unint64_t v15;
  _BOOL4 v16;

  v7 = *a1;
  v8 = *(_DWORD *)v7 == 1278758998;
  if (!v7)
    ParseVP8Header_cold_1();
  if (!a2)
    ParseVP8Header_cold_2();
  if (!a5)
    ParseVP8Header_cold_3();
  if (!a6)
    ParseVP8Header_cold_4();
  v12 = *a2;
  if (*a2 >= 8)
  {
    if (*(_DWORD *)v7 != 540561494 && *(_DWORD *)v7 != 1278758998)
    {
      v16 = VP8LCheckSignature((_BYTE *)v7, v12);
      v13 = 0;
      *a6 = v16;
      *a5 = *a2;
      return v13;
    }
    v15 = *(unsigned int *)(v7 + 4);
    if (a4 >= 0xC && a4 - 12 < v15)
      return 3;
    if (!a3 || *a2 - 8 >= v15)
    {
      v13 = 0;
      *a5 = v15;
      *a1 = v7 + 8;
      *a2 -= 8;
      *a6 = v8;
      return v13;
    }
  }
  return 7;
}

void WebPParseHeaders_cold_1()
{
  __assert_rtn("WebPParseHeaders", "webp_dec.c", 418, "headers != NULL");
}

void ParseHeadersInternal_cold_1()
{
  __assert_rtn("ParseHeadersInternal", "webp_dec.c", 395, "(uint64_t)(data - headers->data) < MAX_CHUNK_PAYLOAD");
}

void ParseHeadersInternal_cold_2()
{
  __assert_rtn("ParseHeadersInternal", "webp_dec.c", 396, "headers->offset == headers->data_size - data_size");
}

void DecodeInto_cold_1()
{
  __assert_rtn("DecodeInto", "webp_dec.c", 461, "params != NULL");
}

void ParseOptionalChunks_cold_1()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 156, "data != NULL");
}

void ParseOptionalChunks_cold_2()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 157, "data_size != NULL");
}

void ParseOptionalChunks_cold_3()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 161, "alpha_data != NULL");
}

void ParseOptionalChunks_cold_4()
{
  __assert_rtn("ParseOptionalChunks", "webp_dec.c", 162, "alpha_size != NULL");
}

void ParseVP8Header_cold_1()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 232, "data != NULL");
}

void ParseVP8Header_cold_2()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 233, "data_size != NULL");
}

void ParseVP8Header_cold_3()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 234, "chunk_size != NULL");
}

void ParseVP8Header_cold_4()
{
  __assert_rtn("ParseVP8Header", "webp_dec.c", 235, "is_lossless != NULL");
}

uint64_t VP8InitRandom(uint64_t result, float a2)
{
  unsigned int v2;

  *(_OWORD *)(result + 168) = xmmword_18823227C;
  *(_OWORD *)(result + 184) = unk_18823228C;
  *(_OWORD *)(result + 200) = xmmword_18823229C;
  *(_OWORD *)(result + 212) = *(__int128 *)((char *)&xmmword_18823229C + 12);
  *(_OWORD *)(result + 104) = xmmword_18823223C;
  *(_OWORD *)(result + 120) = unk_18823224C;
  *(_OWORD *)(result + 136) = xmmword_18823225C;
  *(_OWORD *)(result + 152) = unk_18823226C;
  *(_OWORD *)(result + 40) = xmmword_1882321FC;
  *(_OWORD *)(result + 56) = unk_18823220C;
  *(_OWORD *)(result + 72) = xmmword_18823221C;
  *(_OWORD *)(result + 88) = unk_18823222C;
  *(_OWORD *)(result + 8) = kRandomTable;
  *(_OWORD *)(result + 24) = unk_1882321EC;
  v2 = vcvts_n_u32_f32(a2, 8uLL);
  if (a2 > 1.0)
    v2 = 256;
  *(_QWORD *)result = 0x1F00000000;
  if (a2 < 0.0)
    v2 = 0;
  *(_DWORD *)(result + 228) = v2;
  return result;
}

void WebPInitConvertARGBToYUVNEON()
{
  WebPConvertRGB24ToY = (uint64_t)ConvertRGB24ToY_NEON;
  WebPConvertBGR24ToY = (uint64_t)ConvertBGR24ToY_NEON;
  WebPConvertARGBToY = (uint64_t (*)(_QWORD, _QWORD, _QWORD))ConvertARGBToY_NEON;
  WebPConvertARGBToUV = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ConvertARGBToUV_NEON;
  WebPConvertRGBA32ToUV = (uint64_t)ConvertRGBA32ToUV_NEON;
}

const char *ConvertRGB24ToY_NEON(const char *result, uint64_t a2, int a3)
{
  signed int v3;
  uint64_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  unint64_t v11;
  _BYTE *v12;
  int8x8x3_t v13;

  if (a3 >= 8)
  {
    v4 = 0;
    v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    v3 = a3 & 0xFFFFFFF8;
    v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    do
    {
      v13 = vld3_s8(result);
      result += 24;
      v9 = vmovl_u8((uint8x8_t)v13.val[0]);
      v10 = vmovl_u8((uint8x8_t)v13.val[1]);
      *(uint16x8_t *)v13.val[0].i8 = vmovl_u8((uint8x8_t)v13.val[2]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v9.i8, *(uint16x4_t *)v5.i8), (uint16x4_t)v13.val[0], *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v10, v6), v9, v5), *(uint16x8_t *)v13.val[0].i8, v7), (int32x4_t)0), v8));
      v11 = v4 + 16;
      v4 += 8;
    }
    while (v11 <= a3);
  }
  else
  {
    v3 = 0;
  }
  if (v3 < a3)
  {
    v12 = (_BYTE *)(a2 + v3);
    do
    {
      *v12++ = (33059 * *((unsigned __int8 *)result + 1)
              + 16839 * *(unsigned __int8 *)result
              + 6420 * *((unsigned __int8 *)result + 2)
              + 1081344) >> 16;
      result += 3;
      ++v3;
    }
    while (v3 < a3);
  }
  return result;
}

const char *ConvertBGR24ToY_NEON(const char *result, uint64_t a2, int a3)
{
  signed int v3;
  uint64_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  int8x8x3_t v14;

  if (a3 >= 8)
  {
    v4 = 0;
    v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    v3 = a3 & 0xFFFFFFF8;
    v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    do
    {
      v14 = vld3_s8(result);
      result += 24;
      v9 = vmovl_u8((uint8x8_t)v14.val[2]);
      v10 = vmovl_u8((uint8x8_t)v14.val[1]);
      *(uint16x8_t *)v14.val[0].i8 = vmovl_u8((uint8x8_t)v14.val[0]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v9.i8, *(uint16x4_t *)v5.i8), (uint16x4_t)v14.val[0], *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v10, v6), v9, v5), *(uint16x8_t *)v14.val[0].i8, v7), (int32x4_t)0), v8));
      v11 = v4 + 16;
      v4 += 8;
    }
    while (v11 <= a3);
  }
  else
  {
    v3 = 0;
  }
  if (v3 < a3)
  {
    v12 = (unsigned __int8 *)(result + 2);
    v13 = (_BYTE *)(a2 + v3);
    do
    {
      *v13++ = (33059 * *(v12 - 1) + 16839 * *v12 + 6420 * *(v12 - 2) + 1081344) >> 16;
      ++v3;
      v12 += 3;
    }
    while (v3 < a3);
  }
  return result;
}

const char *ConvertARGBToY_NEON(const char *result, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int16x8_t v8;
  const char *v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  unint64_t v13;
  _BYTE *v14;
  const char *v15;
  int v16;
  int8x8x4_t v17;

  if (a3 >= 8)
  {
    v4 = 0;
    v3 = a3 & 0xFFFFFFF8;
    v5 = (uint16x8_t)vdupq_n_s16(0x41C7u);
    v6 = (uint16x8_t)vdupq_n_s16(0x8123u);
    v7 = (uint16x8_t)vdupq_n_s16(0x1914u);
    v8.i64[0] = 0x10001000100010;
    v8.i64[1] = 0x10001000100010;
    v9 = result;
    do
    {
      v17 = vld4_s8(v9);
      v9 += 32;
      v10 = vmovl_u8((uint8x8_t)v17.val[2]);
      v11 = vmovl_u8((uint8x8_t)v17.val[1]);
      v12 = vmovl_u8((uint8x8_t)v17.val[0]);
      *(uint8x8_t *)(a2 + v4) = vqmovn_u16((uint16x8_t)vaddq_s16(vraddhn_high_s32(vraddhn_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v11.i8, *(uint16x4_t *)v6.i8), *(uint16x4_t *)v10.i8, *(uint16x4_t *)v5.i8), *(uint16x4_t *)v12.i8, *(uint16x4_t *)v7.i8), (int32x4_t)0), (int32x4_t)vmlal_high_u16(vmlal_high_u16(vmull_high_u16(v11, v6), v10, v5), v12, v7), (int32x4_t)0), v8));
      v13 = v4 + 16;
      v4 += 8;
    }
    while (v13 <= a3);
  }
  else
  {
    v3 = 0;
  }
  if ((int)v3 < a3)
  {
    v14 = (_BYTE *)(a2 + v3);
    v15 = &result[4 * v3];
    do
    {
      v16 = *(_DWORD *)v15;
      v15 += 4;
      *v14++ = (16839 * BYTE2(v16) + 6420 * v16 + 33059 * BYTE1(v16) + 1081344) >> 16;
      ++v3;
    }
    while ((int)v3 < a3);
  }
  return result;
}

uint64_t ConvertARGBToUV_NEON(uint64_t result, uint8x8_t *a2, uint8x8_t *a3, int a4, int a5)
{
  unsigned int v5;
  int16x8_t v6;
  int16x8_t v7;
  unint64_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  const char *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  BOOL v19;
  int v20;
  int8x16x4_t v21;

  if (a4 >= 16)
  {
    v5 = a4 & 0x7FFFFFF0;
    v6 = vdupq_n_s16(0xDA09u);
    v7 = vdupq_n_s16(0xB577u);
    v8 = 16;
    v9 = vdupq_n_s16(0x7080u);
    v10.i64[0] = 0x100010001000100;
    v10.i64[1] = 0x100010001000100;
    v11 = vdupq_n_s16(0xA1CCu);
    v12 = vdupq_n_s16(0xEDB4u);
    v13 = (const char *)result;
    do
    {
      v21 = vld4q_s8(v13);
      v14 = (int16x8_t)vpaddlq_u8((uint8x16_t)v21.val[2]);
      v15 = (int16x8_t)vpaddlq_u8((uint8x16_t)v21.val[1]);
      v21.val[0] = (int8x16_t)vpaddlq_u8((uint8x16_t)v21.val[0]);
      v21.val[1] = (int8x16_t)vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v6.i8), vmull_s16(*(int16x4_t *)v21.val[0].i8, *(int16x4_t *)v9.i8)), vmlal_high_s16(vmull_high_s16(v15, v7), v14, v6), vmull_high_s16((int16x8_t)v21.val[0], v9)), v10);
      v16 = vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v9.i8), vmull_s16(*(int16x4_t *)v21.val[0].i8, *(int16x4_t *)v12.i8)), vmlal_high_s16(vmull_high_s16(v15, v11), v14, v9), vmull_high_s16((int16x8_t)v21.val[0], v12)), v10);
      v17 = (uint8x8_t)vqrshrun_n_s16((int16x8_t)v21.val[1], 1uLL);
      v18 = (uint8x8_t)vqrshrun_n_s16(v16, 1uLL);
      if (!a5)
      {
        v17 = vrhadd_u8(v17, *a2);
        v18 = vrhadd_u8(v18, *a3);
      }
      *a2++ = v17;
      *a3++ = v18;
      v8 += 16;
      v13 += 64;
    }
    while (v8 <= a4);
  }
  else
  {
    v5 = 0;
  }
  v19 = __OFSUB__(a4, v5);
  v20 = a4 - v5;
  if (!((v20 < 0) ^ v19 | (v20 == 0)))
    return WebPConvertARGBToUV_C(result + 4 * v5, a2, (unsigned __int8 *)a3, v20, a5);
  return result;
}

const __int16 *ConvertRGBA32ToUV_NEON(const __int16 *result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  int16x8x4_t v26;

  if (a4 >= 8)
  {
    v5 = 0;
    v4 = a4 & 0xFFFFFFF8;
    v6 = vdupq_n_s16(0xDA09u);
    v7 = vdupq_n_s16(0xB577u);
    v8 = vdupq_n_s16(0x7080u);
    v9.i64[0] = 0x200020002000200;
    v9.i64[1] = 0x200020002000200;
    v10 = vdupq_n_s16(0xA1CCu);
    v11 = vdupq_n_s16(0xEDB4u);
    do
    {
      v26 = vld4q_s16(result);
      result += 32;
      *(int8x8_t *)(a2 + v5) = vqrshrun_n_s16(vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.val[1].i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v26.val[0].i8, *(int16x4_t *)v6.i8), vmull_s16(*(int16x4_t *)v26.val[2].i8, *(int16x4_t *)v8.i8)), vmlal_high_s16(vmull_high_s16(v26.val[1], v7), v26.val[0], v6), vmull_high_s16(v26.val[2], v8)), v9), 2uLL);
      *(int8x8_t *)(a3 + v5) = vqrshrun_n_s16(vaddq_s16(vaddhn_high_s32(vaddhn_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.val[1].i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v26.val[0].i8, *(int16x4_t *)v8.i8), vmull_s16(*(int16x4_t *)v26.val[2].i8, *(int16x4_t *)v11.i8)), vmlal_high_s16(vmull_high_s16(v26.val[1], v10), v26.val[0], v8), vmull_high_s16(v26.val[2], v11)), v9), 2uLL);
      v12 = v5 + 16;
      v5 += 8;
    }
    while (v12 <= a4);
  }
  else
  {
    v4 = 0;
  }
  if ((int)v4 < a4)
  {
    v13 = (char *)(a3 + v4);
    v14 = (char *)(a2 + v4);
    do
    {
      v15 = *(unsigned __int16 *)result;
      v16 = *((unsigned __int16 *)result + 1);
      v17 = *((unsigned __int16 *)result + 2);
      v18 = -9719 * v15 - 19081 * v16 + 28800 * v17;
      v19 = v18 + 33685504;
      v20 = (v18 + 33685504) >> 18;
      if (v18 >= -33685504)
        v21 = -1;
      else
        v21 = 0;
      if (!(v19 >> 26))
        v21 = v20;
      *v14++ = v21;
      v22 = 28800 * v15 - 24116 * v16 - 4684 * v17;
      v23 = v22 + 33685504;
      v24 = (v22 + 33685504) >> 18;
      if (v22 >= -33685504)
        v25 = -1;
      else
        v25 = 0;
      if (!(v23 >> 26))
        v25 = v24;
      *v13++ = v25;
      ++v4;
      result += 4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

void WebPInitUpsamplers()
{
  if ((uint64_t (*)())WebPInitUpsamplers_WebPInitUpsamplers_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPInitUpsamplersNEON();
    if (!qword_1EDF096C8)
      WebPInitUpsamplers_cold_1();
    if (!qword_1EDF096D8)
      WebPInitUpsamplers_cold_2();
    if (!qword_1EDF096F8)
      WebPInitUpsamplers_cold_3();
    if (!qword_1EDF09700)
      WebPInitUpsamplers_cold_4();
    if (!WebPUpsamplers)
      WebPInitUpsamplers_cold_5();
    if (!qword_1EDF096D0)
      WebPInitUpsamplers_cold_6();
    if (!qword_1EDF096E0)
      WebPInitUpsamplers_cold_7();
    if (!qword_1EDF096E8)
      WebPInitUpsamplers_cold_8();
    if (!qword_1EDF096F0)
      WebPInitUpsamplers_cold_9();
    if (!qword_1EDF09708)
      WebPInitUpsamplers_cold_10();
    if (!qword_1EDF09710)
      WebPInitUpsamplers_cold_11();
    WebPInitUpsamplers_WebPInitUpsamplers_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

unsigned __int8 *WebPYuv444ToRgba_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (_BYTE *)(a4 + 3);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      v14 = v13 - 14234;
      v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      *(v5 - 3) = v16;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      *(v5 - 2) = v20;
      v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      v22 = v21 - 17685;
      v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515)
        v24 = -1;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *(v5 - 1) = v24;
      *v5 = -1;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToBgra_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (_BYTE *)(a4 + 3);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((33050 * v8) >> 8) + (v12 >> 8);
      v14 = v13 - 17685;
      v15 = (v13 - 17685) >> 6;
      if (v13 >= 0x4515)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      *(v5 - 3) = v16;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      *(v5 - 2) = v20;
      v21 = ((26149 * v10) >> 8) + (v12 >> 8);
      v22 = v21 - 14234;
      v23 = (v21 - 14234) >> 6;
      if (v21 >= 0x379A)
        v24 = -1;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *(v5 - 1) = v24;
      *v5 = -1;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgb_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (char *)(a4 + 2);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      v14 = v13 - 14234;
      v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      *(v5 - 2) = v16;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      *(v5 - 1) = v20;
      v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      v22 = v21 - 17685;
      v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515)
        v24 = -1;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *v5 = v24;
      v5 += 3;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToBgr_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (char *)(a4 + 2);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((33050 * v8) >> 8) + (v12 >> 8);
      v14 = v13 - 17685;
      v15 = (v13 - 17685) >> 6;
      if (v13 >= 0x4515)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      *(v5 - 2) = v16;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      *(v5 - 1) = v20;
      v21 = ((26149 * v10) >> 8) + (v12 >> 8);
      v22 = v21 - 14234;
      v23 = (v21 - 14234) >> 6;
      if (v21 >= 0x379A)
        v24 = -1;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *v5 = v24;
      v5 += 3;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToArgb_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (char *)(a4 + 3);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      *(v5 - 3) = -1;
      v12 = 19077 * v6;
      v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      v14 = v13 - 14234;
      v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A)
        v16 = -1;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      *(v5 - 2) = v16;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = -1;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      *(v5 - 1) = v20;
      v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      v22 = v21 - 17685;
      v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515)
        v24 = -1;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *v5 = v24;
      v5 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgba4444_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (_BYTE *)(a4 + 1);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      v14 = v13 - 14234;
      v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A)
        v16 = -16;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 10;
      if (v17 >= -8708)
        v20 = 15;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      v22 = v21 - 17685;
      v23 = (v21 - 17685) >> 6;
      if (v21 >= 0x4515)
        v24 = -16;
      else
        v24 = 0;
      *(v5 - 1) = v16 & 0xF0 | v20;
      if (v22 < 0x4000)
        v24 = v23;
      *v5 = v24 | 0xF;
      v5 += 2;
      --a5;
    }
    while (a5);
  }
  return result;
}

unsigned __int8 *WebPYuv444ToRgb565_C(unsigned __int8 *result, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  signed int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;

  if ((int)a5 >= 1)
  {
    v5 = (_BYTE *)(a4 + 1);
    a5 = a5;
    do
    {
      v7 = *result++;
      v6 = v7;
      v9 = *a2++;
      v8 = v9;
      v11 = *a3++;
      v10 = v11;
      v12 = 19077 * v6;
      v13 = ((26149 * v11) >> 8) + (v12 >> 8);
      v14 = v13 - 14234;
      v15 = (v13 - 14234) >> 6;
      if (v13 >= 0x379A)
        v16 = -8;
      else
        v16 = 0;
      if (v14 < 0x4000)
        v16 = v15;
      v17 = (v12 >> 8) - (((6419 * v8) >> 8) + ((13320 * v10) >> 8));
      v18 = v17 + 8708;
      v19 = (v17 + 8708) >> 6;
      if (v17 >= -8708)
        v20 = 255;
      else
        v20 = 0;
      if (v18 < 0x4000)
        v20 = v19;
      v21 = ((33050 * v8) >> 8) + (v12 >> 8);
      v22 = v21 - 17685;
      v23 = (v21 - 17685) >> 9;
      if (v21 >= 0x4515)
        v24 = 31;
      else
        v24 = 0;
      if (v22 < 0x4000)
        v24 = v23;
      *(v5 - 1) = v16 & 0xF8 | (v20 >> 5);
      *v5 = (8 * v20) & 0xE0 | v24;
      v5 += 2;
      --a5;
    }
    while (a5);
  }
  return result;
}

void WebPInitYUV444Converters()
{
  if ((uint64_t (*)())WebPInitYUV444Converters_WebPInitYUV444Converters_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPYUV444Converters = (uint64_t)WebPYuv444ToRgb_C;
    unk_1EDF0A680 = WebPYuv444ToRgba_C;
    qword_1EDF0A688 = (uint64_t)WebPYuv444ToBgr_C;
    unk_1EDF0A690 = WebPYuv444ToBgra_C;
    qword_1EDF0A698 = (uint64_t)WebPYuv444ToArgb_C;
    unk_1EDF0A6A0 = WebPYuv444ToRgba4444_C;
    qword_1EDF0A6A8 = (uint64_t)WebPYuv444ToRgb565_C;
    unk_1EDF0A6B0 = WebPYuv444ToRgba_C;
    qword_1EDF0A6B8 = (uint64_t)WebPYuv444ToBgra_C;
    unk_1EDF0A6C0 = WebPYuv444ToArgb_C;
    qword_1EDF0A6C8 = (uint64_t)WebPYuv444ToRgba4444_C;
    WebPInitYUV444Converters_WebPInitYUV444Converters_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void WebPInitUpsamplers_cold_1()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 311, "WebPUpsamplers[MODE_RGBA] != NULL");
}

void WebPInitUpsamplers_cold_2()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 312, "WebPUpsamplers[MODE_BGRA] != NULL");
}

void WebPInitUpsamplers_cold_3()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 313, "WebPUpsamplers[MODE_rgbA] != NULL");
}

void WebPInitUpsamplers_cold_4()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 314, "WebPUpsamplers[MODE_bgrA] != NULL");
}

void WebPInitUpsamplers_cold_5()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 316, "WebPUpsamplers[MODE_RGB] != NULL");
}

void WebPInitUpsamplers_cold_6()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 317, "WebPUpsamplers[MODE_BGR] != NULL");
}

void WebPInitUpsamplers_cold_7()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 318, "WebPUpsamplers[MODE_ARGB] != NULL");
}

void WebPInitUpsamplers_cold_8()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 319, "WebPUpsamplers[MODE_RGBA_4444] != NULL");
}

void WebPInitUpsamplers_cold_9()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 320, "WebPUpsamplers[MODE_RGB_565] != NULL");
}

void WebPInitUpsamplers_cold_10()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 321, "WebPUpsamplers[MODE_Argb] != NULL");
}

void WebPInitUpsamplers_cold_11()
{
  __assert_rtn("WebPInitUpsamplers_body", "upsampling.c", 322, "WebPUpsamplers[MODE_rgbA_4444] != NULL");
}

void VP8FiltersInitNEON()
{
  qword_1EDF08888 = (uint64_t)HorizontalUnfilter_NEON;
  qword_1EDF08890 = (uint64_t)VerticalUnfilter_NEON;
  qword_1EDF08868 = (uint64_t)HorizontalFilter_NEON;
  qword_1EDF08870 = (uint64_t)VerticalFilter_NEON;
  qword_1EDF08878 = (uint64_t)GradientFilter_NEON;
}

char *HorizontalUnfilter_NEON(char *result, _BYTE *a2, unsigned __int8 *a3, int a4)
{
  char v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  unint64_t v14;

  if (result)
    v4 = *result;
  else
    v4 = 0;
  v5 = v4 + *a2;
  *a3 = v5;
  if (a4 >= 2)
  {
    if (a4 >= 0x11)
    {
      v7 = 0;
      v8 = (int8x16_t)v5;
      do
      {
        v9 = vaddq_s8(*(int8x16_t *)&a2[v7 + 1], v8);
        v10 = vaddq_s8(vextq_s8((int8x16_t)0, v9, 0xFuLL), v9);
        v11 = vaddq_s8(vextq_s8((int8x16_t)0, v10, 0xEuLL), v10);
        v12 = vaddq_s8(vextq_s8((int8x16_t)0, v11, 0xCuLL), v11);
        v13 = vaddq_s8(vextq_s8((int8x16_t)0, v12, 8uLL), v12);
        v8 = vextq_s8(v13, (int8x16_t)0, 0xFuLL);
        *(int8x16_t *)&a3[v7 + 1] = v13;
        v14 = v7 + 33;
        v7 += 16;
      }
      while (v14 <= a4);
      LODWORD(v6) = ((a4 - 17) & 0xFFFFFFF0) + 17;
    }
    else
    {
      LODWORD(v6) = 1;
    }
    if ((int)v6 < a4)
    {
      v6 = (int)v6;
      do
      {
        a3[v6] = a3[v6 - 1] + a2[v6];
        ++v6;
      }
      while (a4 != v6);
    }
  }
  return result;
}

char *VerticalUnfilter_NEON(char *result, _BYTE *a2, unsigned __int8 *a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  char v10;
  char v11;
  char v12;

  if (!result)
    return HorizontalUnfilter_NEON(0, a2, a3, a4);
  if (a4 < 0)
    VerticalUnfilter_NEON_cold_1();
  if (a4 >= 0x10)
  {
    v5 = 0;
    v4 = a4 & 0xFFFFFFF0;
    do
    {
      *(int8x16_t *)&a3[v5] = vaddq_s8(*(int8x16_t *)&result[v5], *(int8x16_t *)&a2[v5]);
      v6 = v5 + 32;
      v5 += 16;
    }
    while (v6 <= a4);
  }
  else
  {
    v4 = 0;
  }
  if ((int)v4 < a4)
  {
    v7 = &a3[v4];
    v8 = &result[v4];
    v9 = &a2[v4];
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = *v8++;
      *v7++ = v12 + v10;
      ++v4;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t HorizontalFilter_NEON(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  _BYTE *v5;
  unsigned int v6;
  _BYTE *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;

  if (!a1)
    HorizontalFilter_NEON_cold_1(0, a2, a3);
  v5 = a5;
  if (!a5)
    HorizontalFilter_NEON_cold_2((uint64_t)a1, a2, a3);
  if ((int)a2 <= 0)
    HorizontalFilter_NEON_cold_3((uint64_t)a1, a2, a3);
  v6 = a3;
  if ((int)a3 <= 0)
    HorizontalFilter_NEON_cold_4((uint64_t)a1, a2, a3);
  if (a4 < (int)a2)
    HorizontalFilter_NEON_cold_5((uint64_t)a1, a2, a3);
  v8 = a1;
  *a5 = *a1;
  v9 = a2 - 1;
  result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), (int)a2 - 1);
  if (v6 >= 2)
  {
    v11 = v6 - 1;
    do
    {
      v5 += a4;
      *v5 = v8[a4] - *v8;
      result = PredictLine_NEON((uint64_t)&v8[a4 + 1], (uint64_t)&v8[a4], (uint64_t)(v5 + 1), v9);
      v8 += a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t VerticalFilter_NEON(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;

  if (!a1)
    VerticalFilter_NEON_cold_1(0, a2, a3);
  v5 = (uint64_t)a5;
  if (!a5)
    VerticalFilter_NEON_cold_2((uint64_t)a1, a2, a3);
  v6 = a2;
  if ((int)a2 <= 0)
    VerticalFilter_NEON_cold_3((uint64_t)a1, a2, a3);
  v7 = a3;
  if ((int)a3 <= 0)
    VerticalFilter_NEON_cold_4((uint64_t)a1, a2, a3);
  if (a4 < (int)a2)
    VerticalFilter_NEON_cold_5((uint64_t)a1, a2, a3);
  v9 = (uint64_t)a1;
  *a5 = *a1;
  result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), (int)a2 - 1);
  if (v7 >= 2)
  {
    v11 = v7 - 1;
    do
    {
      v5 += a4;
      result = PredictLine_NEON(v9 + a4, v9, v5, v6);
      v9 += a4;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t GradientFilter_NEON(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v9;
  unint64_t v10;
  uint64_t result;
  _BYTE *v12;
  int i;
  _BYTE *v14;
  uint64_t v15;
  int16x8_t v16;
  int8x8_t v17;
  _BYTE *v18;
  unint64_t v19;
  int v20;
  int v21;

  if (!a1)
    GradientFilter_NEON_cold_1(0, a2, a3);
  v5 = a5;
  if (!a5)
    GradientFilter_NEON_cold_2((uint64_t)a1, a2, a3);
  v6 = a2;
  if ((int)a2 <= 0)
    GradientFilter_NEON_cold_3((uint64_t)a1, a2, a3);
  v7 = a3;
  if ((int)a3 <= 0)
    GradientFilter_NEON_cold_4((uint64_t)a1, a2, a3);
  if (a4 < (int)a2)
    GradientFilter_NEON_cold_5((uint64_t)a1, a2, a3);
  v9 = a1;
  *a5 = *a1;
  v10 = (a2 - 1);
  result = PredictLine_NEON((uint64_t)(a1 + 1), (uint64_t)a1, (uint64_t)(a5 + 1), (int)a2 - 1);
  if (v7 >= 2)
  {
    v12 = &v9[a4];
    for (i = 1; i != v7; ++i)
    {
      v5 += a4;
      v14 = &v9[a4];
      *v5 = *v14 - *v9;
      if (v6 >= 9)
      {
        v15 = 0;
        do
        {
          v16 = (int16x8_t)vsubw_u8(vaddl_u8(*(uint8x8_t *)&v9[v15 + 1], *(uint8x8_t *)&v14[v15]), *(uint8x8_t *)&v9[v15]);
          v17 = *(int8x8_t *)&v14[v15 + 1];
          v18 = &v5[v15];
          v19 = v15 + 16;
          v15 += 8;
          *(int8x8_t *)(v18 + 1) = vsub_s8(v17, vqmovun_s16(v16));
        }
        while (v19 <= v10);
        result = v10 & 0xFFFFFFF8;
      }
      else
      {
        result = 0;
      }
      if ((int)result < (int)v10)
      {
        result = (int)result;
        do
        {
          v20 = v14[result + 1 - a4]
              + v12[result]
              - v9[result];
          v21 = v20 & ~(v20 >> 31);
          if (v21 >= 255)
            LOBYTE(v21) = -1;
          v5[result + 1] = v14[result + 1] - v21;
          ++result;
        }
        while (v10 != result);
      }
      v12 += a4;
      v9 += a4;
    }
  }
  return result;
}

uint64_t PredictLine_NEON(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char v10;
  char v11;
  char v12;

  if ((a4 & 0x80000000) != 0)
    PredictLine_NEON_cold_1();
  if (a4 >= 0x10)
  {
    v5 = 0;
    v4 = a4 & 0xFFFFFFF0;
    do
    {
      *(int8x16_t *)(a3 + v5) = vsubq_s8(*(int8x16_t *)(result + v5), *(int8x16_t *)(a2 + v5));
      v6 = v5 + 32;
      v5 += 16;
    }
    while (v6 <= a4);
  }
  else
  {
    v4 = 0;
  }
  if ((int)v4 < (int)a4)
  {
    v7 = (_BYTE *)(a3 + v4);
    v8 = (char *)(a2 + v4);
    v9 = (char *)(result + v4);
    do
    {
      v11 = *v9++;
      v10 = v11;
      v12 = *v8++;
      *v7++ = v10 - v12;
      ++v4;
    }
    while ((int)v4 < (int)a4);
  }
  return result;
}

void OUTLINED_FUNCTION_0_8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 175, a4);
}

void OUTLINED_FUNCTION_1_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 74, a4);
}

void OUTLINED_FUNCTION_2_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 113, a4);
}

void VerticalUnfilter_NEON_cold_1()
{
  __assert_rtn("VerticalUnfilter_NEON", "filters_neon.c", 240, "width >= 0");
}

void HorizontalFilter_NEON_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_5("DoHorizontalFilter_NEON", "filters_neon.c", a3, "in != NULL");
}

void HorizontalFilter_NEON_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_5("DoHorizontalFilter_NEON", "filters_neon.c", a3, "out != NULL");
}

void HorizontalFilter_NEON_cold_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_5("DoHorizontalFilter_NEON", "filters_neon.c", a3, "width > 0");
}

void HorizontalFilter_NEON_cold_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_5("DoHorizontalFilter_NEON", "filters_neon.c", a3, "height > 0");
}

void HorizontalFilter_NEON_cold_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_5("DoHorizontalFilter_NEON", "filters_neon.c", a3, "stride >= width");
}

void VerticalFilter_NEON_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_3("DoVerticalFilter_NEON", "filters_neon.c", a3, "in != NULL");
}

void VerticalFilter_NEON_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_3("DoVerticalFilter_NEON", "filters_neon.c", a3, "out != NULL");
}

void VerticalFilter_NEON_cold_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_3("DoVerticalFilter_NEON", "filters_neon.c", a3, "width > 0");
}

void VerticalFilter_NEON_cold_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_3("DoVerticalFilter_NEON", "filters_neon.c", a3, "height > 0");
}

void VerticalFilter_NEON_cold_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_2_3("DoVerticalFilter_NEON", "filters_neon.c", a3, "stride >= width");
}

void GradientFilter_NEON_cold_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_8("DoGradientFilter_NEON", "filters_neon.c", a3, "in != NULL");
}

void GradientFilter_NEON_cold_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_8("DoGradientFilter_NEON", "filters_neon.c", a3, "out != NULL");
}

void GradientFilter_NEON_cold_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_8("DoGradientFilter_NEON", "filters_neon.c", a3, "width > 0");
}

void GradientFilter_NEON_cold_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_8("DoGradientFilter_NEON", "filters_neon.c", a3, "height > 0");
}

void GradientFilter_NEON_cold_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_8("DoGradientFilter_NEON", "filters_neon.c", a3, "stride >= width");
}

void PredictLine_NEON_cold_1()
{
  __assert_rtn("PredictLine_NEON", "filters_neon.c", 49, "length >= 0");
}

BOOL VP8LCheckSignature(_BYTE *a1, unint64_t a2)
{
  return a2 >= 5 && *a1 == 47 && a1[4] < 0x20u;
}

BOOL VP8LGetInfo(unsigned __int8 *a1, unint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _BOOL8 result;
  _OWORD v11[2];
  uint64_t v12;
  int v13;
  uint64_t v14;

  result = 0;
  if (a1 && a2 >= 5)
  {
    if (*a1 == 47 && a1[4] <= 0x1Fu)
    {
      v14 = 0;
      v13 = 0;
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      VP8LInitBitReader(v11, a1, a2);
      result = ReadImageInfo((uint64_t)v11, (_DWORD *)&v14 + 1, &v14, &v13);
      if (result)
      {
        if (a3)
          *a3 = HIDWORD(v14);
        if (a4)
          *a4 = v14;
        if (a5)
          *a5 = v13;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL ReadImageInfo(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (VP8LReadBits(a1, 8u) == 47
    && (*a2 = VP8LReadBits(a1, 0xEu) + 1,
        *a3 = VP8LReadBits(a1, 0xEu) + 1,
        *a4 = VP8LReadBits(a1, 1u),
        !VP8LReadBits(a1, 3u)))
  {
    return *(_DWORD *)(a1 + 36) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t ReadHuffmanCodesHelper(int a1, int a2, int a3, uint64_t a4, _DWORD *a5, uint64_t a6, void **a7)
{
  int *v9;
  BOOL v10;
  uint64_t v11;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _BOOL4 v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  int HuffmanCode;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  int *v36;
  int v37;
  int v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  int *v46;
  uint64_t i;
  unsigned __int16 *v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void **v59;
  unint64_t v60;
  int v61;

  v9 = 0;
  v10 = a2 != a3;
  if (a4)
    v10 = 0;
  if (a2 > a3 || v10)
    goto LABEL_62;
  v11 = a4;
  v14 = kTableSize[a1];
  v61 = 1 << a1;
  v15 = (1 << a1) + 280;
  if (a1 <= 0)
    v15 = 280;
  v9 = (int *)WebPSafeCalloc(v15, 4uLL);
  v16 = VP8LHtreeGroupsNew(a2);
  *a7 = v16;
  if (!v16 || !v9 || !VP8LHuffmanTablesAllocate(v14 * a2, a6))
  {
    if (*a5 == 5 || !*a5)
      *a5 = 1;
    goto LABEL_62;
  }
  if (a3 < 1)
  {
LABEL_57:
    _TIFFfree(v9);
    return 1;
  }
  v17 = 0;
  v55 = a3;
  v59 = a7;
  v56 = v11;
LABEL_12:
  v58 = v17;
  if (!v11)
  {
    v18 = v17;
LABEL_25:
    v22 = 0;
    v23 = 0;
    LODWORD(v24) = 0;
    v57 = v18;
    v60 = (unint64_t)*a7;
    v25 = (char *)*a7 + 568 * v18;
    v26 = 1;
    while (1)
    {
      v27 = v22 || a1 <= 0;
      v28 = (unsigned __int16)kAlphabetSize[v22];
      v29 = v27 ? 0 : v61;
      v30 = v29 + v28;
      HuffmanCode = ReadHuffmanCode(v29 + v28, (uint64_t)a5, (char *)v9, a6);
      v32 = *(unsigned __int8 **)(*(_QWORD *)(a6 + 32) + 8);
      v25[v22] = v32;
      if (!HuffmanCode)
        goto LABEL_61;
      if (v26)
      {
        v33 = *v32;
        v26 = (v22 & 0x7FFFFFFB) == 0 || v33 == 0;
      }
      else
      {
        v33 = *v32;
      }
      *(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) += 4 * HuffmanCode;
      if (v22 <= 3)
      {
        v34 = *v9;
        if ((int)v30 >= 2)
        {
          v35 = v28 + v29 - 1;
          v36 = v9 + 1;
          do
          {
            v38 = *v36++;
            v37 = v38;
            if (v38 > v34)
              v34 = v37;
            --v35;
          }
          while (v35);
        }
        v23 = (v34 + v23);
      }
      v24 = (v24 + v33);
      if (++v22 == 5)
      {
        v39 = v60 + 568 * v57;
        *(_DWORD *)(v39 + 48) = 0;
        v40 = (_QWORD *)(v39 + 48);
        *((_DWORD *)v40 - 2) = v26;
        if (!v26
          || (v41 = *(unsigned __int16 *)(v25[2] + 2) | (*(unsigned __int16 *)(v25[1] + 2) << 16) | (*(unsigned __int16 *)(v25[3] + 2) << 24),
              v42 = v60 + 568 * v57,
              *(_DWORD *)(v42 + 44) = v41,
              v43 = (unsigned int *)(v42 + 44),
              (_DWORD)v24)
          || (v44 = *(unsigned __int16 *)(*v25 + 2), v44 > 0xFF))
        {
          *(_DWORD *)(v60 + 568 * v57 + 52) = (int)v23 < 6;
          if ((int)v23 <= 5)
          {
            v45 = 0;
            v46 = (int *)(v60 + 568 * v57 + 56);
            for (i = 2; i != 258; i += 4)
            {
              v48 = (unsigned __int16 *)(*v25 + i);
              v49 = *((unsigned __int8 *)v48 - 2);
              v50 = *v48;
              if (v50 < 0x100)
              {
                v51 = *((unsigned __int8 *)v48 - 1);
                *(_QWORD *)v46 = 0;
                v30 = v30 & 0xFFFFFFFF00000000 | v49 | (v50 << 16) | (v51 << 8);
                v52 = v45 >> AccumulateHCode(v30, 8, v46);
                v24 = v24 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[1] + 4 * v52);
                v53 = v52 >> AccumulateHCode(v24, 16, v46);
                v23 = v23 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[2] + 4 * v53);
                v60 = v60 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25[3] + 4
                                                                            * (v53 >> AccumulateHCode(v23, 0, v46)));
                AccumulateHCode(v60, 24, v46);
              }
              else
              {
                *v46 = v49 | 0x100;
                v46[1] = v50;
              }
              ++v45;
              v46 += 2;
            }
          }
        }
        else
        {
          *v43 = v41 | (v44 << 8);
          *v40 = 1;
        }
LABEL_56:
        a7 = v59;
        v17 = v58 + 1;
        v11 = v56;
        if (v58 + 1 != v55)
          goto LABEL_12;
        goto LABEL_57;
      }
    }
  }
  v18 = *(_DWORD *)(v11 + 4 * v17);
  if (v18 != -1)
    goto LABEL_25;
  v19 = 0;
  while (1)
  {
    v20 = v61;
    if (v19 * 2 || a1 <= 0)
      v20 = 0;
    if (!ReadHuffmanCode(v20 + (unsigned __int16)kAlphabetSize[v19], (uint64_t)a5, (char *)v9, 0))break;
    if (++v19 == 5)
      goto LABEL_56;
  }
LABEL_61:
  a7 = v59;
LABEL_62:
  _TIFFfree(v9);
  VP8LHuffmanTablesDeallocate(a6);
  VP8LHtreeGroupsFree(*a7);
  result = 0;
  *a7 = 0;
  return result;
}

uint64_t ReadHuffmanCode(int a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  unsigned int v27;
  uint64_t result;
  _OWORD v30[2];
  _QWORD *v31;
  _OWORD v32[5];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = a2 + 40;
  v9 = VP8LReadBits(a2 + 40, 1u);
  bzero(a3, 4 * a1);
  if (v9)
  {
    v10 = VP8LReadBits(v8, 1u);
    if (VP8LReadBits(v8, 1u))
      v11 = 8;
    else
      v11 = 1;
    *(_DWORD *)&a3[4 * (int)VP8LReadBits(v8, v11)] = 1;
    if (v10 == 1)
      *(_DWORD *)&a3[4 * (int)VP8LReadBits(v8, 8u)] = 1;
    goto LABEL_36;
  }
  memset(v32, 0, 76);
  v12 = VP8LReadBits(v8, 4u) + 4;
  if ((int)v12 > 19)
    ReadHuffmanCode_cold_1();
  if ((int)v12 >= 1)
  {
    v13 = &kCodeLengthCodeOrder;
    do
    {
      v14 = VP8LReadBits(v8, 3u);
      v15 = *v13++;
      *((_DWORD *)v32 + v15) = v14;
      --v12;
    }
    while (v12);
  }
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  if (VP8LHuffmanTablesAllocate(128, (uint64_t)v30))
  {
    if (VP8LBuildHuffmanTable((uint64_t)v30, 7, (int *)v32, 19))
    {
      v16 = a1;
      if (!VP8LReadBits(v8, 1u)
        || (v17 = VP8LReadBits(v8, 3u), v16 = VP8LReadBits(v8, 2 * v17 + 2) + 2, v16 <= a1))
      {
        if (a1 >= 1)
        {
          v18 = 0;
          v19 = 8;
          do
          {
            if (!v16)
              break;
            v20 = *(_DWORD *)(a2 + 72);
            if (v20 >= 32)
            {
              VP8LDoFillBitWindow(v8);
              v20 = *(_DWORD *)(a2 + 72);
            }
            v21 = (unsigned __int8 *)(*v31 + 4 * ((*(_QWORD *)(a2 + 40) >> v20) & 0x7FLL));
            *(_DWORD *)(a2 + 72) = v20 + *v21;
            v22 = *((unsigned __int16 *)v21 + 1);
            if (v22 > 0xF)
            {
              v23 = kCodeLengthRepeatOffsets[v22 - 16];
              v24 = VP8LReadBits(v8, kCodeLengthExtraBits[v22 - 16]);
              if (v24 + v23 + v18 > a1)
                goto LABEL_15;
              if (v22 == 16)
                v25 = v19;
              else
                v25 = 0;
              if (v24 + v23 >= 1)
              {
                v26 = (int *)&a3[4 * v18];
                v27 = v24 + v23 + 1;
                do
                {
                  *v26++ = v25;
                  --v27;
                }
                while (v27 > 1);
                v18 += v24 + v23;
              }
            }
            else
            {
              *(_DWORD *)&a3[4 * v18++] = v22;
              if (v22)
                v19 = v22;
            }
            --v16;
          }
          while (v18 < a1);
        }
        VP8LHuffmanTablesDeallocate((uint64_t)v30);
LABEL_36:
        if (!*(_DWORD *)(a2 + 76))
        {
          result = VP8LBuildHuffmanTable(a4, 8, (int *)a3, a1);
          if ((_DWORD)result)
            return result;
        }
        goto LABEL_37;
      }
    }
  }
LABEL_15:
  VP8LHuffmanTablesDeallocate((uint64_t)v30);
  if (*(_DWORD *)a2 == 5 || !*(_DWORD *)a2)
    *(_DWORD *)a2 = 3;
LABEL_37:
  result = 0;
  if (*(_DWORD *)a2 == 5 || *(_DWORD *)a2 == 0)
    *(_DWORD *)a2 = 3;
  return result;
}

_QWORD *VP8LNew()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = WebPSafeCalloc(1uLL, 0x190uLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0x200000000;
    VP8LDspInit();
  }
  return v1;
}

void VP8LClear(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  if (a1)
  {
    ClearMetadata(a1 + 152);
    _TIFFfree(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    if (*(int *)(a1 + 272) >= 1)
    {
      v2 = 0;
      v3 = (void **)(a1 + 296);
      do
      {
        _TIFFfree(*v3);
        *v3 = 0;
        v3 += 3;
        ++v2;
      }
      while (v2 < *(int *)(a1 + 272));
    }
    *(_DWORD *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 376) = 0;
    _TIFFfree(*(void **)(a1 + 384));
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

double ClearMetadata(uint64_t a1)
{
  double result;

  if (!a1)
    ClearMetadata_cold_1();
  _TIFFfree(*(void **)(a1 + 56));
  VP8LHuffmanTablesDeallocate(a1 + 80);
  VP8LHtreeGroupsFree(*(void **)(a1 + 72));
  VP8LColorCacheClear((void **)(a1 + 8));
  VP8LColorCacheClear((void **)(a1 + 24));
  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void VP8LDelete(void *a1)
{
  if (a1)
  {
    VP8LClear((uint64_t)a1);
    _TIFFfree(a1);
  }
}

uint64_t VP8LDecodeAlphaHeader(int *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;

  result = (uint64_t)VP8LNew();
  if (result)
  {
    if (!a1)
      VP8LDecodeAlphaHeader_cold_1();
    v7 = (_DWORD *)result;
    v8 = *a1;
    v9 = a1[1];
    a1[8] = *a1;
    *(_DWORD *)(result + 132) = v8;
    *(_DWORD *)(result + 136) = v9;
    *(_QWORD *)(result + 8) = a1 + 8;
    *((_QWORD *)a1 + 11) = a1;
    a1[9] = v9;
    *(_DWORD *)result = 0;
    VP8LInitBitReader((_QWORD *)(result + 40), a2, a3);
    if (!DecodeImageStream(*a1, a1[1], 1, (uint64_t)v7, 0))
      goto LABEL_13;
    if (v7[68] == 1 && v7[70] == 3 && Is8bOptimizable((uint64_t)(v7 + 38)))
    {
      a1[48] = 1;
      v10 = (int)v7[34] * (uint64_t)(int)v7[33];
      *((_QWORD *)v7 + 4) = 0;
      v11 = WebPSafeMalloc(v10, 1uLL);
      *((_QWORD *)v7 + 3) = v11;
      if (!v11)
      {
        if (*v7 == 5 || !*v7)
          *v7 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      a1[48] = 0;
      if (!AllocateInternalBuffers32b((uint64_t)v7, *a1))
      {
LABEL_13:
        VP8LClear((uint64_t)v7);
        _TIFFfree(v7);
        return 0;
      }
    }
    *((_QWORD *)a1 + 3) = v7;
    return 1;
  }
  return result;
}

uint64_t DecodeImageStream(uint64_t a1, int a2, int a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  int v7;
  int v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  void **v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  int v50;
  int v51;
  _DWORD *v53;
  int *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  void *v60;
  void *v61;
  int v64;
  _DWORD *v65;
  void *v67;
  void *v68;

  v5 = a5;
  v7 = a3;
  v8 = a2;
  v10 = a4 + 40;
  v65 = (_DWORD *)(a4 + 152);
  if (!a3)
  {
LABEL_33:
    if (VP8LReadBits(v10, 1u))
    {
      v36 = VP8LReadBits(v10, 4u);
      if ((v36 - 1) >= 0xB)
        goto LABEL_94;
    }
    else
    {
      v36 = 0;
    }
    v67 = 0;
    v68 = 0;
    if (*(_QWORD *)(a4 + 232))
      DecodeImageStream_cold_3();
    if (*(_QWORD *)(a4 + 264))
      DecodeImageStream_cold_2();
    if (v7)
    {
      v37 = 1;
      if (VP8LReadBits(v10, 1u))
      {
        v38 = VP8LReadBits(v10, 3u);
        v39 = v8;
        v40 = v38 + 2;
        v41 = 1 << (v38 + 2);
        v42 = (a1 + v41 - 1) >> (v38 + 2);
        v43 = (v39 + v41 - 1) >> (v38 + 2);
        if (DecodeImageStream(v42, v43, 0, a4, &v68))
        {
          v64 = v7;
          v44 = v42 * v43;
          *(_DWORD *)(a4 + 196) = v40;
          if ((int)v44 < 1)
          {
            v46 = 1;
            v8 = a2;
          }
          else
          {
            v45 = (char *)v68;
            v46 = 1;
            v47 = v44;
            v8 = a2;
            do
            {
              v48 = *(unsigned __int16 *)(v45 + 1);
              *(_DWORD *)v45 = v48;
              v45 += 4;
              if (v48 >= v46)
                v46 = v48 + 1;
              --v47;
            }
            while (v47);
          }
          if (v46 <= 1000 && v46 <= (int)a1 * v8)
          {
            v49 = 0;
            v37 = v46;
LABEL_67:
            v7 = v64;
            goto LABEL_68;
          }
          v53 = WebPSafeMalloc(v46, 4uLL);
          if (v53)
          {
            v49 = v53;
            memset(v53, 255, 4 * v46);
            if ((int)v44 < 1)
            {
              v37 = 0;
            }
            else
            {
              v37 = 0;
              v54 = (int *)v68;
              do
              {
                v55 = *v54;
                v56 = v49[v55];
                if (v56 == -1)
                {
                  v49[v55] = v37;
                  v56 = v37++;
                }
                *v54++ = v56;
                --v44;
              }
              while (v44);
            }
            goto LABEL_67;
          }
          if (*(_DWORD *)a4 == 5 || !*(_DWORD *)a4)
          {
            v49 = 0;
            *(_DWORD *)a4 = 1;
            goto LABEL_93;
          }
        }
        v49 = 0;
        goto LABEL_93;
      }
      v49 = 0;
    }
    else
    {
      v49 = 0;
      v37 = 1;
    }
    v46 = 1;
LABEL_68:
    if (!*(_DWORD *)(a4 + 76)
      && ReadHuffmanCodesHelper(v36, v37, v46, (uint64_t)v49, (_DWORD *)a4, a4 + 232, &v67))
    {
      *(_QWORD *)(a4 + 208) = v68;
      *(_DWORD *)(a4 + 216) = v37;
      *(_QWORD *)(a4 + 224) = v67;
      _TIFFfree(v49);
      if (v36 < 1)
      {
        *v65 = 0;
      }
      else
      {
        *(_DWORD *)(a4 + 152) = 1 << v36;
        if (!VP8LColorCacheInit(a4 + 160, v36))
        {
LABEL_87:
          v50 = *(_DWORD *)a4;
          v51 = 1;
          if (*(_DWORD *)a4)
            goto LABEL_96;
          goto LABEL_97;
        }
      }
      v57 = *(_DWORD *)(a4 + 196);
      *(_DWORD *)(a4 + 132) = a1;
      *(_DWORD *)(a4 + 136) = v8;
      *(_DWORD *)(a4 + 200) = (a1 + (1 << v57) - 1) >> v57;
      if (v57)
        v58 = ~(-1 << v57);
      else
        v58 = -1;
      *(_DWORD *)(a4 + 192) = v58;
      if (v7)
      {
        *(_DWORD *)(a4 + 4) = 1;
        if (v5)
          *v5 = 0;
        *(_DWORD *)(a4 + 144) = 0;
      }
      else
      {
        v60 = WebPSafeMalloc((int)a1 * (uint64_t)v8, 4uLL);
        if (!v60)
          goto LABEL_87;
        v61 = v60;
        if (!DecodeImageData(a4, (uint64_t)v60, a1, v8, v8, 0) || *(_DWORD *)(a4 + 76))
          goto LABEL_99;
        if (!v5)
          DecodeImageStream_cold_1();
        *v5 = v61;
        *(_DWORD *)(a4 + 144) = 0;
        ClearMetadata((uint64_t)v65);
      }
      return 1;
    }
LABEL_93:
    _TIFFfree(v49);
    _TIFFfree(v68);
    VP8LHuffmanTablesDeallocate(a4 + 232);
    VP8LHtreeGroupsFree(v67);
LABEL_94:
    v50 = *(_DWORD *)a4;
    goto LABEL_95;
  }
  while (1)
  {
    if (!VP8LReadBits(v10, 1u))
    {
      v5 = a5;
      v7 = a3;
      goto LABEL_33;
    }
    v11 = *(_DWORD *)(a4 + 272);
    v12 = VP8LReadBits(v10, 2u);
    v13 = *(_DWORD *)(a4 + 376);
    if ((v13 & (1 << v12)) != 0)
      goto LABEL_94;
    v14 = a4 + 24 * v11;
    *(_DWORD *)(a4 + 376) = v13 | (1 << v12);
    *(_DWORD *)(v14 + 280) = v12;
    *(_DWORD *)(v14 + 288) = a1;
    *(_DWORD *)(v14 + 292) = v8;
    *(_QWORD *)(v14 + 296) = 0;
    v15 = *(_DWORD *)(a4 + 272);
    *(_DWORD *)(a4 + 272) = v15 + 1;
    if (v15 >= 4)
      DecodeImageStream_cold_4();
    v16 = (int *)(v14 + 288);
    v17 = (void **)(v14 + 296);
    if (v12 >= 2)
      break;
    v21 = (int *)(v14 + 292);
    v22 = VP8LReadBits(v10, 3u);
    *(_DWORD *)(a4 + 24 * v11 + 284) = v22 + 2;
    v23 = *v21;
    v8 = a2;
    v24 = DecodeImageStream((*v16 + ~(-1 << (v22 + 2))) >> (v22 + 2), (v23 + ~(-1 << (v22 + 2))) >> (v22 + 2), 0, a4, v17);
LABEL_30:
    if (!v24)
      goto LABEL_94;
  }
  if (v12 == 2)
  {
    v24 = 1;
    goto LABEL_30;
  }
  if (v12 != 3)
    DecodeImageStream_cold_5();
  v18 = VP8LReadBits(v10, 8u);
  v19 = v18 + 1;
  if (v18 + 1 <= 16)
  {
    if (v19 <= 4)
    {
      if (v19 > 2)
        v20 = 2;
      else
        v20 = 3;
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  v25 = *v16;
  v26 = a4 + 24 * v11;
  *(_DWORD *)(v26 + 284) = v20;
  if (!DecodeImageStream((v18 + 1), 1, 0, a4, v17))
    goto LABEL_94;
  v27 = 8uLL >> *(_DWORD *)(v26 + 284);
  v28 = WebPSafeMalloc(1 << v27, 4uLL);
  if (v28)
  {
    v29 = v28;
    v30 = *v17;
    *v28 = *(_DWORD *)*v17;
    if (v19 < 2)
    {
      LODWORD(v31) = 4;
    }
    else
    {
      LODWORD(v31) = 4 * v19;
      if (4 * v19 <= 5)
        v31 = 5;
      else
        v31 = v31;
      v32 = v31 - 4;
      v33 = v28 + 1;
      v34 = (char *)(v30 + 1);
      do
      {
        v35 = *v34++;
        *v33 = *(v33 - 4) + v35;
        ++v33;
        --v32;
      }
      while (v32);
    }
    if (v31 < 4 << v27)
      bzero((char *)v28 + v31, ((4 << v27) + ~(_DWORD)v31) + 1);
    a1 = (v25 + (1 << v20) - 1) >> v20;
    _TIFFfree(*v17);
    *v17 = v29;
    v24 = 1;
    v8 = a2;
    goto LABEL_30;
  }
  v50 = *(_DWORD *)a4;
  v51 = 1;
  if (!*(_DWORD *)a4 || v50 == 5)
    goto LABEL_97;
LABEL_95:
  v51 = 3;
  if (!v50)
    goto LABEL_97;
LABEL_96:
  if (v50 == 5)
  {
LABEL_97:
    v61 = 0;
    *(_DWORD *)a4 = v51;
  }
  else
  {
    v61 = 0;
  }
LABEL_99:
  _TIFFfree(v61);
  ClearMetadata((uint64_t)v65);
  return 0;
}

uint64_t Is8bOptimizable(uint64_t a1)
{
  uint64_t v2;
  _BYTE **i;

  if (*(int *)a1 > 0)
    return 0;
  v2 = *(unsigned int *)(a1 + 64);
  if ((int)v2 >= 1)
  {
    for (i = (_BYTE **)(*(_QWORD *)(a1 + 72) + 24); !**(i - 2) && !**(i - 1) && !**i; i += 71)
    {
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t AllocateInternalBuffers32b(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 132);
  if (v2 > a2)
    AllocateInternalBuffers32b_cold_1();
  v4 = *(int *)(a1 + 136) * (uint64_t)v2;
  v5 = (unsigned __int16)a2;
  v6 = (char *)WebPSafeMalloc((unsigned __int16)a2 + 16 * a2 + v4, 4uLL);
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = &v6[4 * v4 + 4 * v5];
    return 1;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0;
    if (*(_DWORD *)a1 == 5 || *(_DWORD *)a1 == 0)
      *(_DWORD *)a1 = 1;
  }
  return result;
}

uint64_t VP8LDecodeAlphaImageStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t PalettedAlphaRows;
  unsigned __int16 *v16;
  uint64_t v17;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  char v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  _BOOL4 v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  uint64_t result;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t *v69;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    VP8LDecodeAlphaImageStream_cold_1();
  v4 = a2;
  v5 = *(_DWORD *)(v3 + 136);
  if (v5 < (int)a2)
    VP8LDecodeAlphaImageStream_cold_2();
  if (*(_DWORD *)(v3 + 140) >= (int)a2)
    return 1;
  if (!*(_DWORD *)(a1 + 192))
  {
    WebPInitAlphaProcessing();
    v5 = *(_DWORD *)(v3 + 136);
    if (!*(_DWORD *)(a1 + 192))
      return DecodeImageData(v3, *(_QWORD *)(v3 + 24), *(unsigned int *)(v3 + 132), v5, v4, (uint64_t (*)(uint64_t, uint64_t))ExtractAlphaRows);
  }
  v68 = *(_QWORD *)(v3 + 24);
  v7 = *(_DWORD *)(v3 + 132);
  v8 = *(_DWORD *)(v3 + 144);
  LODWORD(v9) = v8 / v7;
  v10 = v8 % v7;
  v11 = (v7 * v4);
  v12 = *(_DWORD *)(v3 + 192);
  if (v8 >= (int)v11)
  {
    v14 = 0;
  }
  else
  {
    v13 = *(_DWORD *)(v3 + 196);
    if (v13)
      v13 = *(_DWORD *)(*(_QWORD *)(v3 + 208) + 4 * ((v10 >> v13) + *(_DWORD *)(v3 + 200) * ((int)v9 >> v13)));
    if (v13 >= *(_DWORD *)(v3 + 216))
      VP8LDecodeAlphaImageStream_cold_9(a1, a2, a3);
    v14 = (_QWORD *)(*(_QWORD *)(v3 + 224) + 568 * v13);
  }
  v67 = v5 * v7;
  if (v8 > v5 * v7)
    VP8LDecodeAlphaImageStream_cold_3();
  if (v5 < v4)
    VP8LDecodeAlphaImageStream_cold_4();
  PalettedAlphaRows = Is8bOptimizable(v3 + 152);
  if (!(_DWORD)PalettedAlphaRows)
    VP8LDecodeAlphaImageStream_cold_5();
  if (v8 >= (int)v11 || *(_DWORD *)(v3 + 76) != 0)
    goto LABEL_101;
  v69 = (unint64_t *)(v3 + 40);
  v66 = v12;
  while (1)
  {
    if ((v10 & v12) == 0)
    {
      v19 = *(_DWORD *)(v3 + 196);
      if (v19)
        v19 = *(_DWORD *)(*(_QWORD *)(v3 + 208) + 4 * ((v10 >> v19) + *(_DWORD *)(v3 + 200) * ((int)v9 >> v19)));
      if (v19 >= *(_DWORD *)(v3 + 216))
        VP8LDecodeAlphaImageStream_cold_9(PalettedAlphaRows, (uint64_t)v16, v17);
      v14 = (_QWORD *)(*(_QWORD *)(v3 + 224) + 568 * v19);
    }
    if (!v14)
      VP8LDecodeAlphaImageStream_cold_6();
    v20 = *(_DWORD *)(v3 + 72);
    if (v20 >= 32)
    {
      VP8LDoFillBitWindow((uint64_t)v69);
      v20 = *(_DWORD *)(v3 + 72);
    }
    v21 = *v69;
    v22 = *v69 >> v20;
    v23 = (unsigned __int8 *)(*v14 + 4 * v22);
    v24 = *v23;
    if (v24 >= 9)
    {
      v20 += 8;
      v23 += 4 * *(unsigned __int16 *)(*v14 + 4 * v22 + 2)
           + 4 * ((v21 >> v20) & ~(-1 << (v24 - 8)));
      v24 = *v23;
    }
    v25 = v20 + v24;
    *(_DWORD *)(v3 + 72) = v25;
    v26 = *((unsigned __int16 *)v23 + 1);
    if (v26 <= 0xFF)
    {
      *(_BYTE *)(v68 + v8++) = v26;
      if (++v10 >= v7)
      {
        v10 = 0;
        if ((int)v9 < v4 && (((_BYTE)v9 + 1) & 0xF) == 0)
        {
          PalettedAlphaRows = ExtractPalettedAlphaRows(v3, (v9 + 1));
          v10 = 0;
        }
        LODWORD(v9) = v9 + 1;
      }
      goto LABEL_91;
    }
    if (v26 > 0x117)
      goto LABEL_99;
    v27 = v11;
    v28 = v26 - 256;
    if (v26 - 256 >= 4)
    {
      v29 = (v26 - 258) >> 1;
      v30 = (v26 & 1 | 2) << v29;
      PalettedAlphaRows = VP8LReadBits((uint64_t)v69, v29);
      v28 = PalettedAlphaRows + v30;
      v21 = *(_QWORD *)(v3 + 40);
      v25 = *(_DWORD *)(v3 + 72);
    }
    v31 = v14[4];
    v32 = v21 >> v25;
    v33 = (unsigned __int8 *)(v31 + 4 * (v21 >> v25));
    v34 = *v33;
    if (v34 >= 9)
    {
      v25 += 8;
      v33 += 4 * *(unsigned __int16 *)(v31 + 4 * v32 + 2)
           + 4 * ((v21 >> v25) & ~(-1 << (v34 - 8)));
      v34 = *v33;
    }
    *(_DWORD *)(v3 + 72) = v25 + v34;
    v35 = *((unsigned __int16 *)v33 + 1);
    if ((int)(v25 + v34) >= 32)
      VP8LDoFillBitWindow((uint64_t)v69);
    if (v35 >= 4)
    {
      v36 = (v35 - 2) >> 1;
      v37 = (v35 & 1 | 2) << v36;
      PalettedAlphaRows = VP8LReadBits((uint64_t)v69, v36);
      v35 = PalettedAlphaRows + v37;
    }
    if ((int)(v35 + 1) < 121)
    {
      v38 = (kCodeToPlane[v35] >> 4) * v7 - (kCodeToPlane[v35] & 0xF) + 8;
      if (v38 <= 1)
        v38 = 1;
    }
    else
    {
      v38 = v35 - 119;
    }
    v39 = v28 + 1;
    v40 = v8 < v38 || v67 - v8 < (int)v39;
    if (v40)
    {
LABEL_99:
      v59 = 1;
      goto LABEL_105;
    }
    PalettedAlphaRows = v68 + v8;
    v16 = (unsigned __int16 *)(PalettedAlphaRows - v38);
    if ((int)v39 < 8)
    {
LABEL_59:
      if (v38 >= (int)v39)
      {
        PalettedAlphaRows = (uint64_t)memcpy((void *)PalettedAlphaRows, v16, (int)v39);
        v11 = v27;
        v12 = v66;
      }
      else
      {
        v40 = v28 > 0x7FFFFFFE;
        v11 = v27;
        v12 = v66;
        if (!v40)
        {
          v42 = -(uint64_t)v38;
          v43 = v39;
          do
          {
            *(_BYTE *)PalettedAlphaRows = *(_BYTE *)(PalettedAlphaRows + v42);
            ++PalettedAlphaRows;
            --v43;
          }
          while (v43);
        }
      }
      goto LABEL_79;
    }
    switch(v38)
    {
      case 4:
        v41 = *(_DWORD *)v16;
        break;
      case 2:
        v41 = *v16 | (*v16 << 16);
        break;
      case 1:
        v41 = 16843009 * *(unsigned __int8 *)v16;
        break;
      default:
        goto LABEL_59;
    }
    if ((PalettedAlphaRows & 3) != 0)
    {
      v44 = 0;
      do
      {
        *(_BYTE *)(PalettedAlphaRows + v44) = *((_BYTE *)v16 + v44);
        HIDWORD(v45) = v41;
        LODWORD(v45) = v41;
        v41 = v45 >> 8;
        v46 = v68 + 1 + v8 + v44++;
      }
      while ((v46 & 3) != 0);
      v47 = v28 - v44 + 1;
      PalettedAlphaRows += v44;
      v16 = (unsigned __int16 *)((char *)v16 + v44);
      if ((int)(v28 - v44 + 2) < 5)
      {
        v48 = 0;
        v11 = v27;
        v12 = v66;
        goto LABEL_76;
      }
    }
    else
    {
      v47 = v28 + 1;
    }
    v11 = v27;
    v49 = 0;
    v12 = v66;
    do
      *(_DWORD *)(PalettedAlphaRows + 4 * v49++) = v41;
    while (v47 >> 2 != v49);
    v48 = v47 & 0xFFFFFFFC;
LABEL_76:
    if ((int)v48 < (int)v47)
    {
      v50 = v47 - (unint64_t)v48;
      v51 = (_BYTE *)(PalettedAlphaRows + v48);
      v52 = (char *)v16 + v48;
      do
      {
        v53 = *v52++;
        *v51++ = v53;
        --v50;
      }
      while (v50);
    }
LABEL_79:
    for (v10 += v39; v10 >= v7; v10 -= v7)
    {
      v54 = v9;
      v9 = (v9 + 1);
      if (v54 < v4 && (v9 & 0xF) == 0)
        PalettedAlphaRows = ExtractPalettedAlphaRows(v3, v9);
    }
    v8 += v39;
    if (v8 < (int)v11 && (v10 & v12) != 0)
    {
      v55 = *(_DWORD *)(v3 + 196);
      if (v55)
        v55 = *(_DWORD *)(*(_QWORD *)(v3 + 208) + 4 * ((v10 >> v55) + *(_DWORD *)(v3 + 200) * ((int)v9 >> v55)));
      if (v55 >= *(_DWORD *)(v3 + 216))
        VP8LDecodeAlphaImageStream_cold_9(PalettedAlphaRows, (uint64_t)v16, v17);
      v14 = (_QWORD *)(*(_QWORD *)(v3 + 224) + 568 * v55);
    }
LABEL_91:
    v57 = *(_QWORD *)(v3 + 56);
    v56 = *(_QWORD *)(v3 + 64);
    if (v56 > v57)
      VP8LDecodeAlphaImageStream_cold_7(PalettedAlphaRows, (uint64_t)v16, v17);
    if (*(_DWORD *)(v3 + 76))
      break;
    v58 = v56 == v57 && *(_DWORD *)(v3 + 72) > 64;
    *(_DWORD *)(v3 + 76) = v58;
    if (v58 || v8 >= (int)v11)
      goto LABEL_101;
  }
  *(_DWORD *)(v3 + 76) = 1;
LABEL_101:
  if ((int)v9 >= v4)
    v60 = v4;
  else
    v60 = v9;
  PalettedAlphaRows = ExtractPalettedAlphaRows(v3, v60);
  v59 = 0;
LABEL_105:
  v62 = *(_QWORD *)(v3 + 56);
  v61 = *(_QWORD *)(v3 + 64);
  if (v61 > v62)
    VP8LDecodeAlphaImageStream_cold_7(PalettedAlphaRows, (uint64_t)v16, v17);
  if (*(_DWORD *)(v3 + 76))
    v63 = 1;
  else
    v63 = v61 == v62 && *(_DWORD *)(v3 + 72) > 64;
  *(_DWORD *)(v3 + 76) = v63;
  if ((v59 & 1) == 0 && (!v63 || v8 >= v67))
  {
    *(_DWORD *)(v3 + 144) = v8;
    return 1;
  }
  if (*(_DWORD *)v3 != 5 && *(_DWORD *)v3)
    return 0;
  result = 0;
  if (v63)
    v65 = 5;
  else
    v65 = 3;
  *(_DWORD *)v3 = v65;
  return result;
}

uint64_t DecodeImageData(uint64_t HtreeGroupForPos, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  unsigned int v45;
  signed int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned __int8 *v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  _BOOL4 v81;
  int v83;
  __int128 v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v100;
  int v101;

  v6 = HtreeGroupForPos;
  v7 = 0;
  v8 = *(_DWORD *)(HtreeGroupForPos + 152);
  v9 = *(int *)(HtreeGroupForPos + 144);
  v10 = ((int)v9 / (int)a3);
  LODWORD(i) = (int)v9 % (int)a3;
  v12 = a5 * a3;
  if (*(_DWORD *)(HtreeGroupForPos + 80))
    v13 = (int)v9 / (int)a3;
  else
    v13 = 0x1000000;
  v100 = v13;
  v101 = a3;
  v94 = *(_DWORD *)(HtreeGroupForPos + 152);
  v91 = (uint64_t *)(HtreeGroupForPos + 160);
  if (v8 <= 0)
    v14 = 0;
  else
    v14 = HtreeGroupForPos + 160;
  v98 = *(_DWORD *)(HtreeGroupForPos + 192);
  if ((int)v9 < v12)
  {
    v15 = *(_DWORD *)(HtreeGroupForPos + 196);
    if (v15)
      v15 = *(_DWORD *)(*(_QWORD *)(HtreeGroupForPos + 208)
                      + 4 * (((int)i >> v15) + *(_DWORD *)(HtreeGroupForPos + 200) * ((int)v10 >> v15)));
    if (v15 >= *(_DWORD *)(HtreeGroupForPos + 216))
      VP8LDecodeAlphaImageStream_cold_9(HtreeGroupForPos, a2, a3);
    v7 = *(_QWORD *)(HtreeGroupForPos + 224) + 568 * v15;
  }
  if (*(_DWORD *)(HtreeGroupForPos + 140) >= a5)
    DecodeImageData_cold_15();
  if (v12 > a4 * (int)a3)
    DecodeImageData_cold_1();
  v97 = HtreeGroupForPos + 40;
  v16 = (uint64_t *)(a2 + 4 * v9);
  v17 = a2 + 4 * v12;
  v93 = a2;
  if ((int)v9 < v12)
  {
    v87 = HtreeGroupForPos + 152;
    v88 = v8 + 280;
    v92 = HtreeGroupForPos + 88;
    v89 = a2 + 4 * a4 * (int)a3;
    v90 = HtreeGroupForPos + 176;
    v18 = (uint64_t *)(a2 + 4 * v9);
    v96 = a2 + 4 * v12;
    while (1)
    {
      if ((int)v10 >= v100)
      {
        if (!*(_DWORD *)(v6 + 80))
          DecodeImageData_cold_14();
        v19 = *(_OWORD *)(v97 + 16);
        *(_OWORD *)v92 = *(_OWORD *)v97;
        *(_OWORD *)(v92 + 16) = v19;
        *(_QWORD *)(v92 + 32) = *(_QWORD *)(v97 + 32);
        *(_DWORD *)(v6 + 128) = ((unint64_t)v18 - v93) >> 2;
        if (*(int *)(v6 + 152) >= 1)
        {
          HtreeGroupForPos = (uint64_t)VP8LColorCacheCopy((uint64_t)v91, v90);
          v17 = v96;
        }
        v100 = v10 + 8;
      }
      if ((i & v98) == 0)
      {
        v20 = *(_DWORD *)(v6 + 196);
        if (v20)
          v20 = *(_DWORD *)(*(_QWORD *)(v6 + 208) + 4 * (((int)i >> v20) + *(_DWORD *)(v6 + 200) * ((int)v10 >> v20)));
        if (v20 >= *(_DWORD *)(v6 + 216))
          VP8LDecodeAlphaImageStream_cold_9(HtreeGroupForPos, a2, a3);
        v7 = *(_QWORD *)(v6 + 224) + 568 * v20;
      }
      if (!v7)
        DecodeImageData_cold_2();
      if (*(_DWORD *)(v7 + 48))
        break;
      if (*(int *)(v6 + 72) >= 32)
      {
        VP8LDoFillBitWindow(v97);
        v17 = v96;
      }
      if (*(_DWORD *)(v7 + 52))
      {
        v27 = *(_QWORD *)(v6 + 40);
        v28 = *(_DWORD *)(v6 + 72);
        v29 = *(_DWORD *)(v7 + 8 * ((v27 >> v28) & 0x3F) + 56);
        v30 = *(_DWORD *)(v7 + 8 * ((v27 >> v28) & 0x3F) + 60);
        v31 = v29 + v28;
        if (v29 > 255)
        {
          *(_DWORD *)(v6 + 72) = v31 - 256;
          if (v30 <= 0xFF)
            DecodeImageData_cold_12();
        }
        else
        {
          *(_DWORD *)(v6 + 72) = v31;
          *(_DWORD *)v18 = v30;
          v30 = 0;
        }
        v37 = *(_QWORD *)(v6 + 56);
        v36 = *(_QWORD *)(v6 + 64);
        if (v36 > v37)
          VP8LDecodeAlphaImageStream_cold_7(HtreeGroupForPos, a2, a3);
        if (*(_DWORD *)(v6 + 76) || v36 == v37 && *(int *)(v6 + 72) > 64)
        {
LABEL_120:
          v22 = v18;
          goto LABEL_121;
        }
        if (!v30)
          goto LABEL_30;
      }
      else
      {
        v27 = *(_QWORD *)(v6 + 40);
        v32 = *(_DWORD *)(v6 + 72);
        v33 = v27 >> v32;
        v34 = (unsigned __int8 *)(*(_QWORD *)v7 + 4 * (v27 >> v32));
        v35 = *v34;
        if (v35 >= 9)
        {
          v32 += 8;
          v34 += 4 * *(unsigned __int16 *)(*(_QWORD *)v7 + 4 * v33 + 2)
               + 4 * ((v27 >> v32) & ~(-1 << (v35 - 8)));
          v35 = *v34;
        }
        *(_DWORD *)(v6 + 72) = v32 + v35;
        v30 = *((unsigned __int16 *)v34 + 1);
        v37 = *(_QWORD *)(v6 + 56);
        v36 = *(_QWORD *)(v6 + 64);
      }
      if (v36 > v37)
        VP8LDecodeAlphaImageStream_cold_7(HtreeGroupForPos, a2, a3);
      if (*(_DWORD *)(v6 + 76) || v36 == v37 && *(int *)(v6 + 72) > 64)
        goto LABEL_120;
      if (v30 <= 255)
      {
        if (*(_DWORD *)(v7 + 40))
        {
          v21 = *(_DWORD *)(v7 + 44) | (v30 << 8);
        }
        else
        {
          v51 = *(_QWORD *)(v7 + 8);
          v52 = *(_DWORD *)(v6 + 72);
          v53 = v27 >> v52;
          v54 = (unsigned __int8 *)(v51 + 4 * (v27 >> v52));
          v55 = *v54;
          if (v55 >= 9)
          {
            v52 += 8;
            v54 += 4 * *(unsigned __int16 *)(v51 + 4 * v53 + 2)
                 + 4 * ((v27 >> v52) & ~(-1 << (v55 - 8)));
            v55 = *v54;
          }
          v56 = v52 + v55;
          *(_DWORD *)(v6 + 72) = v56;
          v57 = *((unsigned __int16 *)v54 + 1);
          if (v56 >= 32)
          {
            VP8LDoFillBitWindow(v97);
            v17 = v96;
            v27 = *(_QWORD *)(v6 + 40);
            v56 = *(_DWORD *)(v6 + 72);
          }
          v58 = *(_QWORD *)(v7 + 16);
          v59 = v27 >> v56;
          v60 = (unsigned __int8 *)(v58 + 4 * (v27 >> v56));
          v61 = *v60;
          if (v61 >= 9)
          {
            v56 += 8;
            v60 += 4 * *(unsigned __int16 *)(v58 + 4 * v59 + 2)
                 + 4 * ((v27 >> v56) & ~(-1 << (v61 - 8)));
            v61 = *v60;
          }
          v62 = v56 + v61;
          v63 = *((unsigned __int16 *)v60 + 1);
          v64 = *(_QWORD *)(v7 + 24);
          v65 = v27 >> v62;
          v66 = (unsigned __int8 *)(v64 + 4 * (v27 >> v62));
          v67 = *v66;
          if (v67 >= 9)
          {
            v62 += 8;
            v66 += 4 * *(unsigned __int16 *)(v64 + 4 * v65 + 2)
                 + 4 * ((v27 >> v62) & ~(-1 << (v67 - 8)));
            v67 = *v66;
          }
          v68 = v62 + v67;
          *(_DWORD *)(v6 + 72) = v62 + v67;
          v70 = *(_QWORD *)(v6 + 56);
          v69 = *(_QWORD *)(v6 + 64);
          if (v69 > v70)
            VP8LDecodeAlphaImageStream_cold_7(HtreeGroupForPos, a2, a3);
          if (*(_DWORD *)(v6 + 76))
            goto LABEL_120;
          v71 = *((unsigned __int16 *)v66 + 1);
          if (v69 == v70 && v68 > 64)
            goto LABEL_120;
          v21 = (v57 << 16) | (v30 << 8) | v63 | (v71 << 24);
        }
        goto LABEL_29;
      }
      if (v30 > 0x117)
      {
        if (v30 >= v88)
          goto LABEL_143;
        if (v94 < 1)
          DecodeImageData_cold_10();
        if (v16 < v18)
        {
          v49 = *v91;
          do
          {
            v50 = *(_DWORD *)v16;
            v16 = (uint64_t *)((char *)v16 + 4);
            *(_DWORD *)(v49 + 4 * (int)((506832829 * v50) >> *(_DWORD *)(v14 + 8))) = v50;
          }
          while (v16 < v18);
        }
        if ((v30 - 280) >> *(_DWORD *)(v14 + 12))
          DecodeImageData_cold_9();
        v21 = *(_DWORD *)(*(_QWORD *)v14 + 4 * (v30 - 280));
        goto LABEL_29;
      }
      v38 = v30 - 256;
      if ((v30 - 256) >= 4)
      {
        v39 = (v30 - 258) >> 1;
        v40 = (v30 & 1 | 2) << v39;
        HtreeGroupForPos = VP8LReadBits(v97, v39);
        v17 = v96;
        v27 = *(_QWORD *)v97;
        v38 = HtreeGroupForPos + v40;
      }
      v41 = *(_QWORD *)(v7 + 32);
      v42 = *(_DWORD *)(v6 + 72);
      v43 = v27 >> v42;
      v44 = (unsigned __int8 *)(v41 + 4 * (v27 >> v42));
      v45 = *v44;
      if (v45 >= 9)
      {
        v42 += 8;
        v44 += 4 * *(unsigned __int16 *)(v41 + 4 * v43 + 2)
             + 4 * ((v27 >> v42) & ~(-1 << (v45 - 8)));
        v45 = *v44;
      }
      *(_DWORD *)(v6 + 72) = v42 + v45;
      v46 = *((unsigned __int16 *)v44 + 1);
      if ((int)(v42 + v45) >= 32)
      {
        VP8LDoFillBitWindow(v97);
        v17 = v96;
      }
      if (v46 >= 4)
      {
        v47 = (v46 - 2) >> 1;
        v48 = (v46 & 1 | 2) << v47;
        HtreeGroupForPos = VP8LReadBits(v97, v47);
        v17 = v96;
        v46 = HtreeGroupForPos + v48;
      }
      if (v46 + 1 < 121)
      {
        v72 = (kCodeToPlane[v46] >> 4) * v101 - (kCodeToPlane[v46] & 0xF) + 8;
        if (v72 <= 1)
          a2 = 1;
        else
          a2 = v72;
      }
      else
      {
        a2 = (v46 - 119);
      }
      v74 = *(_QWORD *)(v6 + 56);
      v73 = *(_QWORD *)(v6 + 64);
      if (v73 > v74)
        VP8LDecodeAlphaImageStream_cold_7(HtreeGroupForPos, a2, a3);
      if (*(_DWORD *)(v6 + 76) || v73 == v74 && *(int *)(v6 + 72) > 64)
        goto LABEL_120;
      if (a2 > ((uint64_t)v18 - v93) >> 2)
        goto LABEL_143;
      v75 = v38 + 1;
      if (v38 + 1 > (uint64_t)(v89 - (_QWORD)v18) >> 2)
        goto LABEL_143;
      HtreeGroupForPos = (uint64_t)CopyBlock32b(v18, a2, v75);
      for (i = (v75 + i); (int)i >= v101; i = (i - v101))
      {
        v76 = v10;
        v10 = (v10 + 1);
        if (a6 && v76 < a5 && (v10 & 0xF) == 0)
          HtreeGroupForPos = a6(v6, v10);
      }
      v22 = (uint64_t *)((char *)v18 + 4 * v75);
      if ((unint64_t)v22 > v89)
        DecodeImageData_cold_8();
      if ((i & v98) != 0)
      {
        HtreeGroupForPos = GetHtreeGroupForPos(v87, i, v10);
        v7 = HtreeGroupForPos;
      }
      if (v94 < 1)
      {
        v23 = v10;
        v17 = v96;
        goto LABEL_41;
      }
      v17 = v96;
      if (v16 < v22)
      {
        v77 = *(_QWORD *)v14;
        do
        {
          v78 = *(_DWORD *)v16;
          v16 = (uint64_t *)((char *)v16 + 4);
          *(_DWORD *)(v77 + 4 * (int)((506832829 * v78) >> *(_DWORD *)(v14 + 8))) = v78;
        }
        while (v16 < v22);
      }
LABEL_31:
      v23 = v10;
LABEL_41:
      v10 = v23;
      v18 = v22;
      if ((unint64_t)v22 >= v17)
        goto LABEL_122;
    }
    v21 = *(_DWORD *)(v7 + 44);
LABEL_29:
    *(_DWORD *)v18 = v21;
LABEL_30:
    v22 = (uint64_t *)((char *)v18 + 4);
    LODWORD(i) = i + 1;
    if ((int)i >= v101)
    {
      v23 = (v10 + 1);
      if (a6 && (int)v10 < a5 && (((_BYTE)v10 + 1) & 0xF) == 0)
      {
        HtreeGroupForPos = a6(v6, (v10 + 1));
        v17 = v96;
      }
      LODWORD(i) = 0;
      if (v94 >= 1 && v16 < v22)
      {
        v24 = *(_QWORD *)v14;
        do
        {
          v25 = v16;
          v26 = *(_DWORD *)v16;
          v16 = (uint64_t *)((char *)v16 + 4);
          *(_DWORD *)(v24 + 4 * (int)((506832829 * v26) >> *(_DWORD *)(v14 + 8))) = v26;
        }
        while (v25 < v18);
        LODWORD(i) = 0;
      }
      goto LABEL_41;
    }
    goto LABEL_31;
  }
  v22 = (uint64_t *)(a2 + 4 * v9);
LABEL_121:
  LODWORD(v23) = v10;
LABEL_122:
  v80 = *(_QWORD *)(v6 + 56);
  v79 = *(_QWORD *)(v6 + 64);
  if (v79 > v80)
    VP8LDecodeAlphaImageStream_cold_7(HtreeGroupForPos, a2, a3);
  if (*(_DWORD *)(v6 + 76))
  {
    v81 = 1;
    *(_DWORD *)(v6 + 76) = 1;
    if (!*(_DWORD *)(v6 + 80))
      goto LABEL_143;
  }
  else
  {
    v81 = v79 == v80 && *(_DWORD *)(v6 + 72) > 64;
    *(_DWORD *)(v6 + 76) = v81;
    if (!*(_DWORD *)(v6 + 80))
      goto LABEL_142;
  }
  v83 = v81 && (unint64_t)v22 < v17;
  if (v83 != 1 && (unint64_t)v22 < v17)
    DecodeImageData_cold_6();
  if (v83)
  {
    *(_DWORD *)v6 = 5;
    v84 = *(_OWORD *)(v6 + 104);
    *(_OWORD *)v97 = *(_OWORD *)(v6 + 88);
    *(_OWORD *)(v97 + 16) = v84;
    *(_QWORD *)(v97 + 32) = *(_QWORD *)(v6 + 120);
    *(_DWORD *)(v6 + 144) = *(_DWORD *)(v6 + 128);
    if (*(int *)(v6 + 152) >= 1)
      VP8LColorCacheCopy(v6 + 176, (uint64_t)v91);
    return 1;
  }
  if ((unint64_t)v22 >= v17)
  {
LABEL_146:
    if (a6)
    {
      if ((int)v23 >= a5)
        v86 = a5;
      else
        v86 = v23;
      a6(v6, v86);
    }
    *(_DWORD *)v6 = 0;
    *(_DWORD *)(v6 + 144) = ((unint64_t)v22 - v93) >> 2;
    return 1;
  }
LABEL_142:
  if (!v81)
    goto LABEL_146;
LABEL_143:
  if (*(_DWORD *)v6 != 5 && *(_DWORD *)v6)
    return 0;
  result = 0;
  *(_DWORD *)v6 = 3;
  return result;
}

uint64_t ExtractAlphaRows(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;

  if (*(_DWORD *)(*(_QWORD *)(result + 8) + 132) < a2)
    ExtractAlphaRows_cold_1();
  v2 = result;
  v3 = *(unsigned int *)(result + 140);
  v4 = a2 - v3;
  if (a2 - (int)v3 < 1)
  {
    v12 = *(_DWORD *)(result + 140);
  }
  else
  {
    v5 = (unsigned int *)(*(_QWORD *)(result + 24) + 4 * *(_DWORD *)(result + 132) * (int)v3);
    do
    {
      if (v4 >= 16)
        v6 = 16;
      else
        v6 = v4;
      v7 = *(unsigned int **)(v2 + 8);
      v8 = *((_QWORD *)v7 + 7);
      v9 = *v7;
      v10 = *(_QWORD *)(v8 + 200) + (int)v9 * (int)v3;
      v11 = *(_QWORD *)(v2 + 32);
      ApplyInverseTransforms((void **)v2, v3, v6, v5);
      WebPExtractGreen(v11, v10, (v9 * v6));
      v12 = v3 + v6;
      result = AlphaApplyFilter(v8, v3, (int)v3 + v6, v10, v9);
      v5 += *(_DWORD *)(v2 + 132) * v6;
      v3 = (v3 + v6);
      v13 = __OFSUB__(v4, v6);
      v4 -= v6;
    }
    while (!((v4 < 0) ^ v13 | (v4 == 0)));
  }
  if (v12 != a2)
    ExtractAlphaRows_cold_2();
  *(_DWORD *)(v2 + 148) = a2;
  *(_DWORD *)(v2 + 140) = a2;
  return result;
}

uint64_t VP8LDecodeHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;

  if (!a1)
    return 0;
  if (a2)
  {
    v10 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    *(_DWORD *)a1 = 0;
    VP8LInitBitReader((_QWORD *)(a1 + 40), *(unsigned __int8 **)(a2 + 104), *(_QWORD *)(a2 + 96));
    if (!ReadImageInfo(a1 + 40, (_DWORD *)&v10 + 1, &v10, &v9))
    {
      if (*(_DWORD *)a1 == 5 || !*(_DWORD *)a1)
        *(_DWORD *)a1 = 3;
      goto LABEL_15;
    }
    *(_DWORD *)(a1 + 4) = 2;
    v5 = v10;
    v4 = HIDWORD(v10);
    *(_DWORD *)a2 = HIDWORD(v10);
    *(_DWORD *)(a2 + 4) = v5;
    v6 = 1;
    if (!DecodeImageStream(v4, v5, 1, a1, 0))
    {
LABEL_15:
      VP8LClear(a1);
      if (!*(_DWORD *)a1)
        VP8LDecodeHeader_cold_1();
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)a1 != 5 && *(_DWORD *)a1 != 0)
      return 0;
    v6 = 0;
    *(_DWORD *)a1 = 2;
  }
  return v6;
}

uint64_t VP8LDecodeImage(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!result)
    return result;
  v1 = result;
  if (!*(_QWORD *)(result + 232))
    VP8LDecodeImage_cold_1();
  if (!*(_QWORD *)(result + 224))
    VP8LDecodeImage_cold_2();
  if (*(int *)(result + 216) <= 0)
    VP8LDecodeImage_cold_3();
  v2 = *(_QWORD *)(result + 8);
  if (!v2)
    VP8LDecodeImage_cold_4();
  v3 = *(uint64_t **)(v2 + 56);
  if (!v3)
    VP8LDecodeImage_cold_5();
  if (!*(_DWORD *)(result + 4))
    goto LABEL_26;
  v4 = *v3;
  *(_QWORD *)(result + 16) = *v3;
  if (!v4)
    VP8LDecodeImage_cold_7();
  if (WebPIoInitFromOptions((_DWORD *)v3[5], (signed int *)v2, 3u))
  {
    if (!AllocateInternalBuffers32b(v1, *(_DWORD *)v2))
      goto LABEL_33;
    if (*(_DWORD *)(v2 + 136))
    {
      v5 = *(_DWORD *)(v2 + 12);
      v6 = *(_DWORD *)(v2 + 16);
      v7 = *(unsigned int *)(v2 + 144);
      v8 = *(int *)(v2 + 140);
      v9 = (char *)WebPSafeMalloc(36 * v8 + 104, 1uLL);
      if (!v9)
        goto LABEL_30;
      if (*(_QWORD *)(v1 + 384))
        VP8LDecodeImage_cold_8();
      *(_QWORD *)(v1 + 384) = v9;
      *(_QWORD *)(v1 + 392) = v9;
      if (!WebPRescalerInit((uint64_t)v9, v5, v6, (uint64_t)&v9[32 * v8 + 104], v8, v7, 0, 4, v9 + 104))
        goto LABEL_33;
      if (*(_DWORD *)(v2 + 136))
        goto LABEL_17;
    }
    v10 = **(_DWORD **)(v1 + 16);
    if (v10 - 11 >= 0xFFFFFFFC)
    {
LABEL_17:
      WebPInitAlphaProcessing();
      v10 = **(_DWORD **)(v1 + 16);
    }
    if (v10 >= 0xB)
    {
      WebPInitConvertARGBToYUV();
      if (*(_QWORD *)(*(_QWORD *)(v1 + 16) + 40))
        WebPInitAlphaProcessing();
    }
    if (!*(_DWORD *)(v1 + 80)
      || *(int *)(v1 + 152) < 1
      || *(_QWORD *)(v1 + 176)
      || VP8LColorCacheInit(v1 + 176, *(_DWORD *)(v1 + 172)))
    {
      *(_DWORD *)(v1 + 4) = 0;
LABEL_26:
      if (DecodeImageData(v1, *(_QWORD *)(v1 + 24), *(unsigned int *)(v1 + 132), *(_DWORD *)(v1 + 136), *(_DWORD *)(v2 + 132), (uint64_t (*)(uint64_t, uint64_t))ProcessRows))
      {
        *((_DWORD *)v3 + 8) = *(_DWORD *)(v1 + 148);
        return 1;
      }
      goto LABEL_33;
    }
LABEL_30:
    v11 = *(_DWORD *)v1;
    v12 = 1;
    if (!*(_DWORD *)v1)
    {
LABEL_32:
      *(_DWORD *)v1 = v12;
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  v11 = *(_DWORD *)v1;
  v12 = 2;
  if (!*(_DWORD *)v1)
    goto LABEL_32;
LABEL_31:
  if (v11 == 5)
    goto LABEL_32;
LABEL_33:
  VP8LClear(v1);
  if (!*(_DWORD *)v1)
    VP8LDecodeImage_cold_6();
  return 0;
}

uint64_t ProcessRows(uint64_t result, int a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  int v38;
  uint64_t v39;
  int v40;
  _DWORD *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;

  v2 = *(int **)(result + 8);
  if (v2[33] < a2)
    ProcessRows_cold_1();
  v3 = a2;
  v4 = result;
  v5 = *(unsigned int *)(result + 140);
  v6 = v3 - v5;
  if (v3 - (int)v5 >= 17)
    ProcessRows_cold_2();
  if (v6 >= 1)
  {
    v7 = *(_QWORD *)(result + 32);
    v8 = *v2;
    result = (uint64_t)ApplyInverseTransforms((void **)result, v5, v6, (unsigned int *)(*(_QWORD *)(result + 24) + 4 * (int)v5 * *(_DWORD *)(result + 132)));
    v9 = *(_DWORD *)(v4 + 140);
    if (v9 >= v3)
      ProcessRows_cold_9();
    v10 = v2[31];
    v11 = v2[30];
    if (v10 <= (int)v11)
      ProcessRows_cold_8();
    v12 = v2[32];
    if (v2[33] >= v3)
      v13 = v3;
    else
      v13 = v2[33];
    if (v12 <= v9)
      v14 = *(_DWORD *)(v4 + 140);
    else
      v14 = v2[32];
    v15 = v13 - v14;
    if (v13 > v14)
    {
      v16 = __OFSUB__(v12, v9);
      v17 = v12 - v9;
      v37 = (v17 < 0) ^ v16 | (v17 == 0);
      v51 = 4 * v8;
      v18 = v17 * 4 * v8;
      if (v37)
        v18 = 0;
      v19 = (unsigned int *)(v7 + v18 + 4 * v11);
      v20 = (v10 - v11);
      v2[2] = v14 - v12;
      v2[3] = v20;
      v2[4] = v15;
      v21 = *(_QWORD *)(v4 + 16);
      v52 = *(_DWORD *)v21;
      v50 = v13 - v14;
      v47 = v3;
      v46 = v21;
      if (*(_DWORD *)v21 <= 0xAu)
      {
        v30 = *(_DWORD *)(v4 + 148);
        v31 = *(int *)(v21 + 24);
        v32 = (_DWORD *)(*(_QWORD *)(v21 + 16) + (int)v31 * (uint64_t)v30);
        if (v2[34])
        {
          if (v15 < 1)
          {
            v33 = 0;
          }
          else
          {
            v33 = 0;
            v34 = 0;
            v48 = *(_QWORD *)(v21 + 16) + (int)v31 * (uint64_t)v30;
            do
            {
              v35 = (v15 - v34);
              v36 = WebPRescaleNeededLines(*(_QWORD *)(v4 + 392), v15 - v34);
              v37 = v36 >= 1 && v36 <= (int)v35;
              if (!v37)
                ProcessRows_cold_6();
              v38 = v36;
              WebPMultARGBRows((uint64_t)v19 + v51 * (uint64_t)v34, v51, *(unsigned int *)(*(_QWORD *)(v4 + 392) + 44), v36, 0);
              result = WebPRescalerImport(*(_QWORD *)(v4 + 392), v35, (uint64_t)v19 + v51 * (uint64_t)v34, v51);
              if ((_DWORD)result != v38)
                ProcessRows_cold_7();
              v39 = *(_QWORD *)(v4 + 392);
              v49 = v33;
              v40 = 0;
              if (*(_DWORD *)(v39 + 64) < *(_DWORD *)(v39 + 56))
              {
                v41 = (_DWORD *)((char *)v32 + (int)v31 * (uint64_t)v33);
                v42 = *(unsigned int **)(v39 + 72);
                v43 = *(unsigned int *)(v39 + 52);
                do
                {
                  if (*(int *)(v39 + 24) > 0)
                    break;
                  WebPRescalerExportRow(v39);
                  WebPMultARGBRow(v42, v43, 1);
                  result = (uint64_t)VP8LConvertFromBGRA(v42, v43, v52, v41);
                  v41 = (_DWORD *)((char *)v41 + v31);
                  ++v40;
                }
                while (*(_DWORD *)(v39 + 64) < *(_DWORD *)(v39 + 56));
              }
              v34 += v38;
              v15 = v50;
              v33 = v40 + v49;
              v32 = (_DWORD *)v48;
            }
            while (v34 < v50);
          }
        }
        else
        {
          if (v15 >= 1)
          {
            v45 = v15 + 1;
            do
            {
              result = (uint64_t)VP8LConvertFromBGRA(v19, v20, v52, v32);
              v19 = (unsigned int *)((char *)v19 + v51);
              v32 = (_DWORD *)((char *)v32 + v31);
              --v45;
            }
            while (v45 > 1);
          }
          v33 = v15;
        }
        v22 = *(_DWORD *)(v4 + 148) + v33;
      }
      else
      {
        v22 = *(_DWORD *)(v4 + 148);
        if (v2[34])
        {
          if (v15 >= 1)
          {
            v23 = 0;
            v24 = v51;
            do
            {
              v25 = WebPRescaleNeededLines(*(_QWORD *)(v4 + 392), v15 - v23);
              WebPMultARGBRows((uint64_t)v19, v24, *(unsigned int *)(*(_QWORD *)(v4 + 392) + 44), v25, 0);
              result = WebPRescalerImport(*(_QWORD *)(v4 + 392), (v15 - v23), (uint64_t)v19, v24);
              if ((_DWORD)result != v25)
                ProcessRows_cold_5();
              v26 = *(_QWORD *)(v4 + 392);
              if (*(_DWORD *)(v26 + 64) >= *(_DWORD *)(v26 + 56))
              {
                v27 = 0;
              }
              else
              {
                v27 = 0;
                v28 = *(_QWORD *)(v26 + 72);
                v29 = *(unsigned int *)(v26 + 52);
                do
                {
                  if (*(int *)(v26 + 24) > 0)
                    break;
                  WebPRescalerExportRow(v26);
                  WebPMultARGBRow(v28, v29, 1);
                  result = ConvertToYUVA(v28, v29, v22 + v27++, *(_QWORD *)(v4 + 16));
                }
                while (*(_DWORD *)(v26 + 64) < *(_DWORD *)(v26 + 56));
              }
              v23 += v25;
              v24 = v51;
              v19 = (unsigned int *)((char *)v19 + v25 * (uint64_t)v51);
              v22 += v27;
              v15 = v50;
            }
            while (v23 < v50);
          }
        }
        else if (v15 >= 1)
        {
          v44 = v15 + 1;
          do
          {
            result = ConvertToYUVA((uint64_t)v19, v20, v22, *(_QWORD *)(v4 + 16));
            v19 = (unsigned int *)((char *)v19 + v51);
            ++v22;
            --v44;
          }
          while (v44 > 1);
        }
      }
      *(_DWORD *)(v4 + 148) = v22;
      v3 = v47;
      if (v22 > *(_DWORD *)(v46 + 8))
        ProcessRows_cold_3();
    }
  }
  *(_DWORD *)(v4 + 140) = v3;
  if (*(_DWORD *)(v4 + 136) < v3)
    ProcessRows_cold_4();
  return result;
}

uint64_t AccumulateHCode(uint64_t result, char a2, int *a3)
{
  int v3;
  int v4;

  v3 = *a3 + result;
  v4 = a3[1] | (WORD1(result) << a2);
  *a3 = v3;
  a3[1] = v4;
  if (v3 >= 9)
    AccumulateHCode_cold_1();
  return result;
}

uint64_t GetHtreeGroupForPos(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 44);
  if (v3)
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * (((int)a2 >> v3) + *(_DWORD *)(a1 + 48) * ((int)a3 >> v3)));
  if (v3 >= *(_DWORD *)(a1 + 64))
    VP8LDecodeAlphaImageStream_cold_9(a1, a2, a3);
  return *(_QWORD *)(a1 + 72) + 568 * v3;
}

uint64_t ExtractPalettedAlphaRows(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = (unsigned int *)(result + 140);
  v3 = *(_DWORD *)(result + 140);
  v4 = *(unsigned int **)(result + 8);
  v5 = *((_QWORD *)v4 + 7);
  if (*(_DWORD *)(v5 + 12) < 2u)
    v2 = v4 + 32;
  v6 = *v2;
  if ((int)v3 <= (int)v6)
    v7 = v6;
  else
    v7 = v3;
  if ((int)v4[33] < (int)a2)
    ExtractPalettedAlphaRows_cold_1();
  v8 = a2;
  v9 = result;
  if ((int)v7 < (int)a2)
  {
    if (*(_DWORD *)(result + 272) != 1)
      ExtractPalettedAlphaRows_cold_3();
    v10 = result + 280;
    if (*(_DWORD *)(v9 + 280) != 3)
      ExtractPalettedAlphaRows_cold_2();
    v11 = *v4;
    v12 = *(_QWORD *)(v5 + 200) + (int)v11 * (int)v7;
    VP8LColorIndexInverseTransformAlpha(v10, v7, a2, (unsigned __int8 *)(*(_QWORD *)(v9 + 24) + *(int *)(v9 + 132) * (uint64_t)(int)v7), v12);
    result = AlphaApplyFilter(v5, v7, v8, v12, v11);
  }
  *(_DWORD *)(v9 + 148) = v8;
  *(_DWORD *)(v9 + 140) = v8;
  return result;
}

uint64_t AlphaApplyFilter(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned int *)(result + 12);
  if ((_DWORD)v5)
  {
    if (!WebPUnfilters[v5])
      AlphaApplyFilter_cold_1();
    v6 = result;
    result = *(_QWORD *)(result + 208);
    v7 = a3 - a2;
    if (a3 > a2)
    {
      v10 = (int)a5;
      do
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))WebPUnfilters[*(unsigned int *)(v6 + 12)])(result, a4, a4, a5);
        v11 = a4 + v10;
        result = a4;
        a4 += v10;
        --v7;
      }
      while (v7);
      result = v11 - v10;
    }
    *(_QWORD *)(v6 + 208) = result;
  }
  return result;
}

uint64_t *CopyBlock32b(uint64_t *result, int a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = (unsigned int *)result - a2;
  if ((result & 3) == 0 && a2 <= 2 && a3 >= 4)
  {
    if (a2 == 1)
    {
      v5 = *v4;
      v6 = v5 | (v5 << 32);
      if ((result & 4) == 0)
        goto LABEL_14;
    }
    else
    {
      v6 = *(_QWORD *)v4;
      v5 = *(_QWORD *)v4;
      if ((result & 4) == 0)
      {
LABEL_14:
        if ((result & 7) != 0)
          CopyBlock32b_cold_1();
        v10 = a3 >> 1;
        v11 = result;
        do
        {
          *v11++ = v6;
          --v10;
        }
        while (v10);
        if ((a3 & 1) != 0)
          *((_DWORD *)result + (int)(a3 & 0xFFFFFFFE)) = v4[a3 & 0xFFFFFFFE];
        return result;
      }
    }
    ++v4;
    *(_DWORD *)result = v5;
    result = (uint64_t *)((char *)result + 4);
    --a3;
    v6 = __ROR8__(v6, 32);
    goto LABEL_14;
  }
  if (a2 >= a3)
    return (uint64_t *)memcpy(result, v4, 4 * a3);
  if (a3 >= 1)
  {
    v7 = a2;
    v8 = a3;
    v9 = -4 * v7;
    do
    {
      *(_DWORD *)result = *(_DWORD *)((char *)result + v9);
      result = (uint64_t *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  return result;
}

void **ApplyInverseTransforms(void **result, uint64_t a2, int a3, unsigned int *__src)
{
  void **v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v8;
  unint64_t v9;

  v4 = result;
  v5 = *((unsigned int *)result + 68);
  v6 = (unsigned int *)result[4];
  if ((int)v5 < 1)
  {
    if (v6 != __src)
      return (void **)memcpy(result[4], __src, 4 * *((_DWORD *)result + 33) * a3);
  }
  else
  {
    v8 = (a3 + a2);
    v9 = v5 + 1;
    do
    {
      result = (void **)VP8LInverseTransform((uint64_t)&v4[3 * (v9-- - 2) + 35], a2, v8, (int *)__src, v6);
      __src = v6;
    }
    while (v9 > 1);
  }
  return result;
}

uint64_t ConvertToYUVA(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  WebPConvertARGBToY(a1, *(_QWORD *)(a4 + 16) + *(int *)(a4 + 48) * (uint64_t)a3, a2);
  result = WebPConvertARGBToUV(a1, *(_QWORD *)(a4 + 24) + *(int *)(a4 + 52) * (uint64_t)(a3 >> 1), *(_QWORD *)(a4 + 32) + *(int *)(a4 + 56) * (uint64_t)(a3 >> 1), a2, (a3 & 1) == 0);
  v9 = *(_QWORD *)(a4 + 40);
  if (v9)
    return WebPExtractAlpha(a1 + 3, 0, a2, 1, v9 + *(int *)(a4 + 60) * (uint64_t)a3, 0);
  return result;
}

void OUTLINED_FUNCTION_0_9(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 172, a4);
}

void OUTLINED_FUNCTION_1_6(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 778, a4);
}

void ReadHuffmanCode_cold_1()
{
  __assert_rtn("ReadHuffmanCode", "vp8l_dec.c", 345, "num_codes <= NUM_CODE_LENGTH_CODES");
}

void ClearMetadata_cold_1()
{
  __assert_rtn("ClearMetadata", "vp8l_dec.c", 1395, "hdr != NULL");
}

void VP8LDecodeAlphaHeader_cold_1()
{
  __assert_rtn("VP8LDecodeAlphaHeader", "vp8l_dec.c", 1612, "alph_dec != NULL");
}

void DecodeImageStream_cold_1()
{
  __assert_rtn("DecodeImageStream", "vp8l_dec.c", 1533, "data == NULL");
}

void DecodeImageStream_cold_2()
{
  __assert_rtn("ReadHuffmanCodes", "vp8l_dec.c", 380, "huffman_tables->curr_segment == NULL");
}

void DecodeImageStream_cold_3()
{
  __assert_rtn("ReadHuffmanCodes", "vp8l_dec.c", 379, "huffman_tables->root.start == NULL");
}

void DecodeImageStream_cold_4()
{
  __assert_rtn("ReadTransform", "vp8l_dec.c", 1349, "dec->next_transform_ <= NUM_TRANSFORMS");
}

void DecodeImageStream_cold_5()
{
  __assert_rtn("ReadTransform", "vp8l_dec.c", 1379, "0");
}

void AllocateInternalBuffers32b_cold_1()
{
  __assert_rtn("AllocateInternalBuffers32b", "vp8l_dec.c", 1554, "dec->width_ <= final_width");
}

void VP8LDecodeAlphaImageStream_cold_1()
{
  __assert_rtn("VP8LDecodeAlphaImageStream", "vp8l_dec.c", 1656, "dec != NULL");
}

void VP8LDecodeAlphaImageStream_cold_2()
{
  __assert_rtn("VP8LDecodeAlphaImageStream", "vp8l_dec.c", 1657, "last_row <= dec->height_");
}

void VP8LDecodeAlphaImageStream_cold_3()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1049, "pos <= end");
}

void VP8LDecodeAlphaImageStream_cold_4()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1050, "last_row <= height");
}

void VP8LDecodeAlphaImageStream_cold_5()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1051, "Is8bOptimizable(hdr)");
}

void VP8LDecodeAlphaImageStream_cold_6()
{
  __assert_rtn("DecodeAlphaData", "vp8l_dec.c", 1059, "htree_group != NULL");
}

void VP8LDecodeAlphaImageStream_cold_7(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_9("VP8LIsEndOfStream", "bit_reader_utils.h", a3, "br->pos_ <= br->len_");
}

void VP8LDecodeAlphaImageStream_cold_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_6("GetHtreeGroupForPos", "vp8l_dec.c", a3, "meta_index < hdr->num_htree_groups_");
}

void DecodeImageData_cold_1()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1158, "src_last <= src_end");
}

void DecodeImageData_cold_2()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1172, "htree_group != NULL");
}

void DecodeImageData_cold_6()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1274, "!dec->incremental_ || (br->eos_ && src < src_last) || src >= src_last");
}

void DecodeImageData_cold_8()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1243, "src <= src_end");
}

void DecodeImageData_cold_9()
{
  __assert_rtn("VP8LColorCacheLookup", "color_cache_utils.h", 43, "(key >> cc->hash_bits_) == 0u");
}

void DecodeImageData_cold_10()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1252, "color_cache != NULL");
}

void DecodeImageData_cold_12()
{
  __assert_rtn("ReadPackedSymbols", "vp8l_dec.c", 223, "code.value >= NUM_LITERAL_CODES");
}

void DecodeImageData_cold_14()
{
  __assert_rtn("SaveState", "vp8l_dec.c", 1119, "dec->incremental_");
}

void DecodeImageData_cold_15()
{
  __assert_rtn("DecodeImageData", "vp8l_dec.c", 1157, "dec->last_row_ < last_row");
}

void ExtractAlphaRows_cold_1()
{
  __assert_rtn("ExtractAlphaRows", "vp8l_dec.c", 1582, "last_row <= dec->io_->crop_bottom");
}

void ExtractAlphaRows_cold_2()
{
  __assert_rtn("ExtractAlphaRows", "vp8l_dec.c", 1601, "cur_row == last_row");
}

void VP8LDecodeHeader_cold_1()
{
  __assert_rtn("VP8LDecodeHeader", "vp8l_dec.c", 1702, "dec->status_ != VP8_STATUS_OK");
}

void VP8LDecodeImage_cold_1()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1712, "dec->hdr_.huffman_tables_.root.start != NULL");
}

void VP8LDecodeImage_cold_2()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1713, "dec->hdr_.htree_groups_ != NULL");
}

void VP8LDecodeImage_cold_3()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1714, "dec->hdr_.num_htree_groups_ > 0");
}

void VP8LDecodeImage_cold_4()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1717, "io != NULL");
}

void VP8LDecodeImage_cold_5()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1719, "params != NULL");
}

void VP8LDecodeImage_cold_6()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1774, "dec->status_ != VP8_STATUS_OK");
}

void VP8LDecodeImage_cold_7()
{
  __assert_rtn("VP8LDecodeImage", "vp8l_dec.c", 1724, "dec->output_ != NULL");
}

void VP8LDecodeImage_cold_8()
{
  __assert_rtn("AllocateAndInitRescaler", "vp8l_dec.c", 579, "dec->rescaler_memory == NULL");
}

void ProcessRows_cold_1()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 814, "row <= dec->io_->crop_bottom");
}

void ProcessRows_cold_2()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 817, "num_rows <= NUM_ARGB_CACHE_ROWS");
}

void ProcessRows_cold_3()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 846, "dec->last_out_row_ <= output->height");
}

void ProcessRows_cold_4()
{
  __assert_rtn("ProcessRows", "vp8l_dec.c", 852, "dec->last_row_ <= dec->height_");
}

void ProcessRows_cold_5()
{
  __assert_rtn("EmitRescaledRowsYUVA", "vp8l_dec.c", 716, "lines_imported == needed_lines");
}

void ProcessRows_cold_6()
{
  __assert_rtn("EmitRescaledRowsRGBA", "vp8l_dec.c", 632, "needed_lines > 0 && needed_lines <= lines_left");
}

void ProcessRows_cold_7()
{
  __assert_rtn("EmitRescaledRowsRGBA", "vp8l_dec.c", 637, "lines_imported == needed_lines");
}

void ProcessRows_cold_8()
{
  __assert_rtn("SetCropWindow", "vp8l_dec.c", 747, "io->crop_left < io->crop_right");
}

void ProcessRows_cold_9()
{
  __assert_rtn("SetCropWindow", "vp8l_dec.c", 746, "y_start < y_end");
}

void AccumulateHCode_cold_1()
{
  __assert_rtn("AccumulateHCode", "vp8l_dec.c", 232, "huff->bits <= HUFFMAN_TABLE_BITS");
}

void ExtractPalettedAlphaRows_cold_1()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 896, "last_row <= dec->io_->crop_bottom");
}

void ExtractPalettedAlphaRows_cold_2()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 905, "transform->type_ == COLOR_INDEXING_TRANSFORM");
}

void ExtractPalettedAlphaRows_cold_3()
{
  __assert_rtn("ExtractPalettedAlphaRows", "vp8l_dec.c", 904, "dec->next_transform_ == 1");
}

void AlphaApplyFilter_cold_1()
{
  __assert_rtn("AlphaApplyFilter", "vp8l_dec.c", 877, "WebPUnfilters[alph_dec->filter_] != NULL");
}

void CopyBlock32b_cold_1()
{
  __assert_rtn("CopySmallPattern32b", "vp8l_dec.c", 1004, "0 == ((uintptr_t)dst & 7)");
}

uint64_t WebPRescalerInit(uint64_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, char *a9)
{
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  int v13;
  unint64_t v14;

  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a5;
  *(_DWORD *)(a1 + 56) = a6;
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  *(_DWORD *)(a1 + 80) = a7;
  *(_DWORD *)(a1 + 4) = a3 < (int)a6;
  *(_DWORD *)(a1 + 8) = a8;
  *(_DWORD *)a1 = a2 < a5;
  if (a2 >= a5)
    v9 = a2;
  else
    v9 = a5 - 1;
  if (a2 >= a5)
    v10 = a5;
  else
    v10 = a2 - 1;
  *(_DWORD *)(a1 + 36) = v9;
  *(_DWORD *)(a1 + 40) = v10;
  if (a2 >= a5)
    *(_DWORD *)(a1 + 12) = 0x100000000uLL / a5;
  v11 = a3 < (int)a6;
  v12 = a3 - v11;
  v13 = a6 - v11;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 32) = v13;
  if (a3 >= (int)a6)
  {
    v14 = (a6 << 32) / (unint64_t)(v12 * (uint64_t)v9);
    if (v14 >= 0x100000000)
      LODWORD(v14) = 0;
    *(_DWORD *)(a1 + 20) = v14;
    *(_DWORD *)(a1 + 24) = v12;
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v13;
    v13 = v9;
  }
  *(_DWORD *)(a1 + 16) = 0x100000000uLL / v13;
  *(_QWORD *)(a1 + 88) = a9;
  *(_QWORD *)(a1 + 96) = &a9[4 * a8 * a5];
  bzero(a9, 8 * a5 * (uint64_t)a8);
  WebPRescalerDspInit();
  return 1;
}

uint64_t WebPRescalerGetScaledDimensions(int a1, int a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v5;

  if (!a3)
    WebPRescalerGetScaledDimensions_cold_1();
  if (!a4)
    WebPRescalerGetScaledDimensions_cold_2();
  LODWORD(v4) = *a3;
  LODWORD(v5) = *a4;
  if (a2 >= 1 && !(_DWORD)v4)
    v4 = ((unint64_t)a2 + (int)v5 * (uint64_t)a1 - 1) / a2;
  if (a1 >= 1 && !(_DWORD)v5)
    v5 = ((unint64_t)a1 + (int)v4 * (uint64_t)a2 - 1) / a1;
  if ((v4 - 0x40000000) < 0xC0000001 || (int)v5 < 1 || (int)v5 > 0x3FFFFFFF)
    return 0;
  *a3 = v4;
  *a4 = v5;
  return 1;
}

uint64_t WebPRescaleNeededLines(uint64_t a1, int a2)
{
  int v2;

  v2 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 32) - 1) / *(_DWORD *)(a1 + 32);
  if (v2 >= a2)
    return a2;
  else
    return v2;
}

uint64_t WebPRescalerImport(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((int)a2 < 1)
    return 0;
  v7 = 0;
  v8 = a4;
  while (*(_DWORD *)(a1 + 64) >= *(_DWORD *)(a1 + 56) || *(int *)(a1 + 24) >= 1)
  {
    if (*(_DWORD *)(a1 + 4))
      *(int8x16_t *)(a1 + 88) = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
    WebPRescalerImportRow((_DWORD *)a1);
    if (!*(_DWORD *)(a1 + 4) && *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 8) >= 1)
    {
      v9 = 0;
      v11 = *(_QWORD *)(a1 + 88);
      v10 = *(_QWORD *)(a1 + 96);
      do
      {
        *(_DWORD *)(v11 + 4 * v9) += *(_DWORD *)(v10 + 4 * v9);
        ++v9;
      }
      while (v9 < *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 8));
    }
    ++*(_DWORD *)(a1 + 60);
    a3 += v8;
    v7 = (v7 + 1);
    *(_DWORD *)(a1 + 24) -= *(_DWORD *)(a1 + 32);
    if ((_DWORD)v7 == (_DWORD)a2)
      return a2;
  }
  return v7;
}

uint64_t WebPRescalerExport(int *a1)
{
  uint64_t v2;

  if (a1[16] >= a1[14])
    return 0;
  v2 = 0;
  do
  {
    if (a1[6] > 0)
      break;
    WebPRescalerExportRow((uint64_t)a1);
    v2 = (v2 + 1);
  }
  while (a1[16] < a1[14]);
  return v2;
}

void WebPRescalerGetScaledDimensions_cold_1()
{
  __assert_rtn("WebPRescalerGetScaledDimensions", "rescaler_utils.c", 88, "scaled_width != NULL");
}

void WebPRescalerGetScaledDimensions_cold_2()
{
  __assert_rtn("WebPRescalerGetScaledDimensions", "rescaler_utils.c", 89, "scaled_height != NULL");
}

uint64_t WebPInitCustomIo(uint64_t result, _QWORD *a2)
{
  a2[9] = CustomSetup;
  a2[10] = CustomTeardown;
  a2[7] = result;
  a2[8] = CustomPut;
  return result;
}

uint64_t CustomPut(uint64_t a1)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    CustomPut_cold_1();
  if (*(int *)(a1 + 12) < 1 || *(_DWORD *)(a1 + 16) < 1)
    return 0;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = (*(uint64_t (**)(uint64_t, _QWORD))(v4 + 88))(a1, *(_QWORD *)(a1 + 56));
  v6 = v5;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 96);
  if (v7)
    v7(a1, v4, v5);
  *(_DWORD *)(v4 + 32) += v6;
  return 1;
}

uint64_t CustomSetup(uint64_t a1)
{
  int **v2;
  unsigned int v3;
  _BOOL4 v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t (*v41)(int **, int, int);
  int *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;

  v2 = *(int ***)(a1 + 56);
  v3 = **v2;
  v4 = v3 - 1 < 0xC && ((0x81Du >> (v3 - 1)) & 1) != 0 || v3 - 7 < 4;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  v5 = (uint64_t *)(v2 + 10);
  if (v4)
    v6 = 11;
  else
    v6 = 12;
  result = WebPIoInitFromOptions(v2[5], (signed int *)a1, v6);
  if ((_DWORD)result)
  {
    if (v3 - 11 >= 0xFFFFFFFC && v4)
      WebPInitUpsamplers();
    if (!*(_DWORD *)(a1 + 136))
    {
      if (v3 <= 0xA)
      {
        WebPInitSamplers();
        v2[11] = (int *)EmitSampledRGB;
        if (*(_DWORD *)(a1 + 88))
        {
          v14 = *(int *)(a1 + 12);
          v15 = v14 + 1;
          result = (uint64_t)WebPSafeMalloc(1uLL, ((v14 + 1) & 0xFFFFFFFFFFFFFFFELL) + v14);
          *v5 = result;
          if (!result)
            return result;
          v16 = result + *(int *)(a1 + 12);
          v2[1] = (int *)result;
          v2[2] = (int *)v16;
          v2[3] = (int *)(v16 + (v15 >> 1));
          v2[11] = (int *)EmitFancyRGB;
          WebPInitUpsamplers();
        }
      }
      else
      {
        v2[11] = (int *)EmitYUV;
      }
      if (!v4)
        return 1;
      if (v3 != 10 && v3 != 5)
      {
        v42 = (int *)EmitAlphaRGB;
        if (v3 > 0xA)
          v42 = (int *)EmitAlphaYUV;
        v2[12] = v42;
        if (v3 > 0xA)
          return 1;
        goto LABEL_35;
      }
      v18 = (int *)EmitAlphaRGBA4444;
      goto LABEL_34;
    }
    v9 = (unsigned int *)*v2;
    v10 = **v2;
    v11 = v10 - 1;
    if (v3 <= 0xA)
    {
      v13 = (v11 >= 0xC || ((0x81Du >> v11) & 1) == 0) && (v10 - 11) < 0xFFFFFFFC;
      v29 = *(unsigned int *)(a1 + 144);
      v30 = *(int *)(a1 + 140);
      v46 = *(_DWORD *)(a1 + 12);
      v47 = *(_DWORD *)(a1 + 16);
      v31 = 2 * v30;
      v32 = 3;
      if (!v13)
        v32 = 4;
      v33 = v31 * v32;
      v34 = v32 * v30 + 4 * v31 * v32;
      result = (uint64_t)WebPSafeMalloc(1uLL, v34 + 104 * v32 + 31);
      *v5 = result;
      if (result)
      {
        v35 = (char *)result;
        v36 = result + 4 * v33;
        v37 = (result + v34 + 31) & 0xFFFFFFFFFFFFFFE0;
        v2[6] = (int *)v37;
        v2[7] = (int *)(v37 + 104);
        v38 = v37 + 312;
        if (v13)
          v38 = 0;
        v2[8] = (int *)(v37 + 208);
        v2[9] = (int *)v38;
        result = WebPRescalerInit(v37, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v36, v30, v29, 0, 1, v35);
        if ((_DWORD)result)
        {
          result = WebPRescalerInit((uint64_t)v2[7], (v46 + 1) >> 1, (v47 + 1) >> 1, v36 + v30, v30, v29, 0, 1, &v35[8 * v30]);
          if ((_DWORD)result)
          {
            result = WebPRescalerInit((uint64_t)v2[8], (v46 + 1) >> 1, (v47 + 1) >> 1, v36 + 2 * v30, v30, v29, 0, 1, &v35[16 * v30]);
            if ((_DWORD)result)
            {
              v2[11] = (int *)EmitRescaledRGB;
              WebPInitYUV444Converters();
              if (v13)
                return 1;
              result = WebPRescalerInit((uint64_t)v2[9], *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), v36 + 3 * (int)v30, v30, v29, 0, 1, &v35[24 * (int)v30]);
              if ((_DWORD)result)
              {
                v39 = **v2;
                v40 = v39 == 10 || v39 == 5;
                v41 = ExportAlphaRGBA4444;
                if (!v40)
                  v41 = ExportAlpha;
                v2[12] = (int *)EmitRescaledAlphaRGB;
                v2[13] = (int *)v41;
                goto LABEL_35;
              }
            }
          }
        }
      }
    }
    else
    {
      v12 = (v11 >= 0xC || ((0x81Du >> v11) & 1) == 0) && (v10 - 11) < 0xFFFFFFFC;
      v19 = *(unsigned int *)(a1 + 144);
      v20 = *(int *)(a1 + 140);
      v21 = v20 + 1;
      v44 = *(_DWORD *)(a1 + 12);
      v45 = *(_DWORD *)(a1 + 16);
      v43 = (v20 + 1) & 0xFFFFFFFE;
      v22 = 8 * v20;
      v23 = 447;
      if (v12)
      {
        v23 = 343;
        v22 = 0;
      }
      v24 = v22 + 4 * (2 * v20 + 2 * v43);
      result = (uint64_t)WebPSafeMalloc(1uLL, v24 + v23);
      *v5 = result;
      if (result)
      {
        v25 = (char *)result;
        v26 = (result + v24 + 31) & 0xFFFFFFFFFFFFFFE0;
        v2[6] = (int *)v26;
        v2[7] = (int *)(v26 + 104);
        v27 = v26 + 312;
        if (v12)
          v27 = 0;
        v2[8] = (int *)(v26 + 208);
        v2[9] = (int *)v27;
        result = WebPRescalerInit(v26, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *((_QWORD *)v9 + 2), v20, v19, v9[12], 1, v25);
        if ((_DWORD)result)
        {
          v28 = &v25[8 * v20];
          result = WebPRescalerInit((uint64_t)v2[7], (v44 + 1) >> 1, (v45 + 1) >> 1, *((_QWORD *)v9 + 3), v21 >> 1, (((int)v19 + 1) >> 1), v9[13], 1, v28);
          if ((_DWORD)result)
          {
            result = WebPRescalerInit((uint64_t)v2[8], (v44 + 1) >> 1, (v45 + 1) >> 1, *((_QWORD *)v9 + 4), v21 >> 1, (((int)v19 + 1) >> 1), v9[14], 1, &v28[4 * v43]);
            if ((_DWORD)result)
            {
              v2[11] = (int *)EmitRescaledYUV;
              if (v12)
                return 1;
              result = WebPRescalerInit((uint64_t)v2[9], *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 16), *((_QWORD *)v9 + 5), v20, v19, v9[15], 1, &v28[8 * v43]);
              if ((_DWORD)result)
              {
                v18 = (int *)EmitRescaledAlphaYUV;
LABEL_34:
                v2[12] = v18;
LABEL_35:
                WebPInitAlphaProcessing();
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void CustomTeardown(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  _TIFFfree(*(void **)(v1 + 80));
  *(_QWORD *)(v1 + 80) = 0;
}

uint64_t EmitSampledRGB(uint64_t a1, unsigned int **a2)
{
  WebPSamplerProcessPlane(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 52), *((_QWORD *)*a2 + 2) + (int)(*a2)[6] * (uint64_t)*(int *)(a1 + 8), (*a2)[6], *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))WebPSamplers[**a2]);
  return *(unsigned int *)(a1 + 16);
}

uint64_t EmitFancyRGB(uint64_t a1, void **a2)
{
  int v3;
  size_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t, void *, void *, char *, char *, uint64_t, uint64_t, unint64_t);
  char *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v25;
  void (*v27)(uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, _DWORD);
  unsigned int v28;
  int *v29;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(int *)(a1 + 12);
  v29 = (int *)*a2;
  v5 = *((int *)*a2 + 6);
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *((_QWORD *)*a2 + 2) + (int)v5 * (uint64_t)v6;
  v8 = (void (*)(void *, uint64_t, void *, void *, char *, char *, uint64_t, uint64_t, unint64_t))WebPUpsamplers[*(unsigned int *)*a2];
  v9 = *(char **)(a1 + 24);
  v10 = *(char **)(a1 + 32);
  v11 = *(char **)(a1 + 40);
  v12 = v4 + 2;
  if ((int)v4 >= -1)
    v12 = v4 + 1;
  v27 = (void (*)(uint64_t, uint64_t, char *, char *, char *, char *, uint64_t, uint64_t, _DWORD))WebPUpsamplers[*(unsigned int *)*a2];
  if (v6)
  {
    v8(a2[1], (uint64_t)v9, a2[2], a2[3], v10, v11, v7 - v5, v7, __PAIR64__(v12, v4));
    v13 = v3 + 1;
  }
  else
  {
    v8(v9, 0, v10, v11, v10, v11, v7, 0, __PAIR64__(v12, v4));
    v13 = v3;
  }
  v28 = v13;
  v14 = (v6 + v3);
  if (v3 < 3)
  {
    v18 = v10;
    v19 = v11;
  }
  else
  {
    v15 = v6 + 2;
    do
    {
      v17 = *(int *)(a1 + 48);
      v16 = *(int *)(a1 + 52);
      v18 = &v10[v16];
      v19 = &v11[v16];
      v20 = v29[6];
      v7 += 2 * v20;
      v9 += 2 * v17;
      v21 = v11;
      v22 = v14;
      v27((uint64_t)&v9[-v17], (uint64_t)v9, v10, v21, v18, v19, v7 - v20, v7, v4);
      v14 = v22;
      v15 += 2;
      v11 = v19;
      v10 = v18;
    }
    while (v15 < (int)v14);
  }
  v23 = &v9[*(int *)(a1 + 48)];
  if (*(_DWORD *)(a1 + 128) + (int)v14 >= *(_DWORD *)(a1 + 132))
  {
    if ((v14 & 1) == 0)
      v27((uint64_t)v23, 0, v18, v19, v18, v19, v7 + v29[6], 0, v4);
    return v28;
  }
  else
  {
    memcpy(a2[1], v23, v4);
    memcpy(a2[2], v18, v25 >> 1);
    memcpy(a2[3], v19, v25 >> 1);
    return v28 - 1;
  }
}

uint64_t EmitYUV(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  v3 = *a2;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (char *)(*(_QWORD *)(*a2 + 24) + *(int *)(*a2 + 52) * (uint64_t)(v5 >> 1));
  v7 = (char *)(*(_QWORD *)(*a2 + 32) + *(int *)(*a2 + 56) * (uint64_t)(v5 >> 1));
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v4 + 2;
  if (v4 >= -1)
    v9 = v4 + 1;
  v10 = v9 >> 1;
  v11 = v8 + 2;
  if (v8 >= -1)
    v11 = v8 + 1;
  v12 = v11 >> 1;
  WebPCopyPlane(*(char **)(a1 + 24), *(_DWORD *)(a1 + 48), (char *)(*(_QWORD *)(*a2 + 16) + *(int *)(*a2 + 48) * (uint64_t)v5), *(_DWORD *)(*a2 + 48), v4, v8);
  WebPCopyPlane(*(char **)(a1 + 32), *(_DWORD *)(a1 + 52), v6, *(_DWORD *)(v3 + 52), v10, v12);
  WebPCopyPlane(*(char **)(a1 + 40), *(_DWORD *)(a1 + 52), v7, *(_DWORD *)(v3 + 56), v10, v12);
  return *(unsigned int *)(a1 + 16);
}

uint64_t EmitAlphaRGBA4444(int *a1, int **a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  int v7;
  int AlphaSourceRow;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v21;
  unsigned __int8 *v22;

  v22 = (unsigned __int8 *)*((_QWORD *)a1 + 19);
  if (v22)
  {
    v5 = a1[3];
    v6 = *a2;
    v7 = **a2;
    v21 = 0;
    AlphaSourceRow = GetAlphaSourceRow((unsigned int *)a1, &v22, (unsigned int *)&v21);
    v9 = v6[6];
    v10 = *((_QWORD *)v6 + 2) + (int)v9 * (uint64_t)AlphaSourceRow;
    v11 = v21;
    if (v21 < 1)
    {
      v15 = 15;
    }
    else
    {
      v12 = 0;
      v13 = v22;
      v14 = (_BYTE *)(v10 + 1);
      v15 = 15;
      do
      {
        if ((int)v5 >= 1)
        {
          v16 = v5;
          v17 = v14;
          v18 = v13;
          do
          {
            v19 = *v18++;
            *v17 = *v17 & 0xF0 | (v19 >> 4);
            v17 += 2;
            v15 &= v19 >> 4;
            --v16;
          }
          while (v16);
          v9 = v6[6];
        }
        v13 += *a1;
        v14 += (int)v9;
        ++v12;
      }
      while (v12 != v11);
    }
    if (v11 != (_DWORD)a3)
      EmitAlphaRGBA4444_cold_1();
    if (v15 != 15 && (v7 - 11) >= 0xFFFFFFFC)
      WebPApplyAlphaMultiply4444(v10, v5, a3, v9);
  }
  return 0;
}

uint64_t EmitAlphaRGB(unsigned int *a1, int **a2, uint64_t a3)
{
  uint64_t v5;
  int *v6;
  int v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v17;
  uint64_t v18;

  v18 = *((_QWORD *)a1 + 19);
  if (v18)
  {
    v5 = a1[3];
    v6 = *a2;
    v7 = **a2;
    v9 = v7 == 4 || v7 == 9;
    v17 = 0;
    v10 = *((_QWORD *)v6 + 2) + v6[6] * (uint64_t)(int)GetAlphaSourceRow(a1, &v18, &v17);
    v11 = 3;
    if (v9)
      v11 = 0;
    v12 = *a1;
    v13 = v17;
    v14 = WebPDispatchAlpha(v18, v12, v5, v17, v10 + v11);
    if (v13 != (_DWORD)a3)
      EmitAlphaRGB_cold_1();
    if ((v7 - 11) >= 0xFFFFFFFC && v14 != 0)
      WebPApplyAlphaMultiply(v10, v9, v5, a3, v6[6]);
  }
  return 0;
}

uint64_t EmitAlphaYUV(int *a1, uint64_t *a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  char *v10;

  if (a1[4] != a3)
    EmitAlphaYUV_cold_1();
  v3 = a3;
  v5 = *a2;
  v6 = *(_QWORD *)(*a2 + 40);
  v7 = a1[3];
  v8 = *(int *)(*a2 + 60);
  v9 = (char *)(v6 + (int)v8 * (uint64_t)a1[2]);
  v10 = (char *)*((_QWORD *)a1 + 19);
  if (v10)
  {
    if (a3 >= 1)
    {
      do
      {
        memcpy(v9, v10, v7);
        v10 += *a1;
        v9 += *(int *)(v5 + 60);
        --v3;
      }
      while (v3);
    }
  }
  else if (a3 >= 1 && v6)
  {
    do
    {
      memset(v9, 255, v7);
      v9 += v8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EmitRescaledRGB(uint64_t a1, unsigned int **a2)
{
  int v2;
  uint64_t v5;
  int v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v20;
  int v21;
  int v22;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 1)
    return 0;
  LODWORD(v5) = 0;
  v6 = 0;
  v7 = 0;
  v20 = *(_DWORD *)(a1 + 16);
  v21 = (v2 + 1) >> 1;
  v8 = (int *)a2[6];
  do
  {
    v9 = WebPRescalerImport((uint64_t)v8, (v2 - v7), *(_QWORD *)(a1 + 24) + *(int *)(a1 + 48) * (uint64_t)v7, *(_DWORD *)(a1 + 48));
    v10 = (v21 - v6);
    if (WebPRescaleNeededLines((uint64_t)a2[7], v21 - v6))
    {
      v11 = WebPRescalerImport((uint64_t)a2[7], v10, *(_QWORD *)(a1 + 32) + *(int *)(a1 + 52) * (uint64_t)v6, *(_DWORD *)(a1 + 52));
      if (v11 != WebPRescalerImport((uint64_t)a2[8], v10, *(_QWORD *)(a1 + 40) + *(int *)(a1 + 52) * (uint64_t)v6, *(_DWORD *)(a1 + 52)))EmitRescaledRGB_cold_3();
      v6 += v11;
    }
    v22 = v9;
    v8 = (int *)a2[6];
    if (v8[16] >= v8[14])
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v13 = *((_DWORD *)a2 + 8) + v5;
      v14 = (uint64_t)*a2;
      v15 = (void (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))WebPYUV444Converters[**a2];
      v16 = *((_QWORD *)*a2 + 2) + (int)(*a2)[6] * (uint64_t)v13;
      do
      {
        if (v8[6] > 0)
          break;
        v17 = a2[7];
        if ((int)v17[16] >= (int)v17[14])
          break;
        v18 = v17[6];
        if (v18 > 0)
          break;
        if (v13 + v12 >= (int)(*a2)[2])
          EmitRescaledRGB_cold_2();
        if (v18 != a2[8][6])
          EmitRescaledRGB_cold_1();
        WebPRescalerExportRow((uint64_t)v8);
        WebPRescalerExportRow((uint64_t)a2[7]);
        WebPRescalerExportRow((uint64_t)a2[8]);
        v15(*((_QWORD *)a2[6] + 9), *((_QWORD *)a2[7] + 9), *((_QWORD *)a2[8] + 9), v16, a2[6][13]);
        v16 += *(int *)(v14 + 24);
        ++v12;
        v8 = (int *)a2[6];
      }
      while (v8[16] < v8[14]);
    }
    v7 += v22;
    v5 = (v12 + v5);
    v2 = v20;
  }
  while (v7 < v20);
  return v5;
}

uint64_t EmitRescaledAlphaRGB(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;

  if (*((_QWORD *)a1 + 19))
  {
    v3 = a3;
    if ((int)a3 >= 1)
    {
      v6 = *(_QWORD *)(a2 + 72);
      v7 = *(_DWORD *)(a2 + 32) + a3;
      do
      {
        WebPRescalerImport(v6, (a1[2] - *(_DWORD *)(v6 + 60) + a1[4]), *((_QWORD *)a1 + 19) + (*(int *)(v6 + 60) - (uint64_t)a1[2]) * *a1, *a1);
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a2 + 104))(a2, (v7 - v3), v3);
        v9 = __OFSUB__((_DWORD)v3, v8);
        v3 = (v3 - v8);
      }
      while (!(((int)v3 < 0) ^ v9 | ((_DWORD)v3 == 0)));
    }
  }
  return 0;
}

uint64_t ExportAlphaRGBA4444(int **a1, int a2, int a3)
{
  int *v4;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;

  v4 = a1[9];
  if (v4[16] >= v4[14])
    return 0;
  v7 = *a1;
  v8 = (*a1)[6];
  v9 = *((_QWORD *)*a1 + 2) + (int)v8 * (uint64_t)a2;
  v10 = **a1;
  v11 = v4[13];
  v12 = 0;
  if (v4[6] > 0 || a3 < 1)
  {
    v15 = 15;
  }
  else
  {
    v14 = (_BYTE *)(v9 + 1);
    v15 = 15;
    do
    {
      if ((int)v12 + a2 >= (*a1)[2])
        ExportAlphaRGBA4444_cold_1();
      WebPRescalerExportRow((uint64_t)v4);
      if ((int)v11 >= 1)
      {
        v16 = 0;
        v17 = v14;
        do
        {
          v18 = *(unsigned __int8 *)(*((_QWORD *)a1[9] + 9) + v16);
          *v17 = *v17 & 0xF0 | (*(_BYTE *)(*((_QWORD *)a1[9] + 9) + v16) >> 4);
          v17 += 2;
          v15 &= v18 >> 4;
          ++v16;
        }
        while (v11 != v16);
      }
      v8 = v7[6];
      v12 = (v12 + 1);
      v4 = a1[9];
      if (v4[16] >= v4[14])
        break;
      v14 += (int)v8;
    }
    while (v4[6] <= 0 && (int)v12 < a3);
  }
  if ((v10 - 7) <= 3 && v15 != 15)
    WebPApplyAlphaMultiply4444(v9, v11, v12, v8);
  return v12;
}

uint64_t ExportAlpha(int **a1, int a2, int a3)
{
  int *v5;
  int v6;
  uint64_t v8;
  int *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v23;
  unsigned int v24;

  v5 = *a1;
  v6 = **a1;
  v8 = v6 == 4 || v6 == 9;
  v9 = a1[9];
  if (v9[16] >= v9[14])
    return 0;
  v11 = v5[6];
  v12 = *((_QWORD *)v5 + 2) + (int)v11 * (uint64_t)a2;
  v13 = v9[13];
  v14 = 0;
  if (v9[6] > 0 || a3 < 1)
  {
    v16 = 0;
  }
  else
  {
    v17 = 0;
    v24 = v8;
    v18 = 3;
    if ((_DWORD)v8)
      v18 = 0;
    v23 = *((_QWORD *)v5 + 2) + (int)v11 * (uint64_t)a2;
    v19 = v12 + v18;
    do
    {
      if (a2 + (int)v14 >= (*a1)[2])
        ExportAlpha_cold_1();
      WebPRescalerExportRow((uint64_t)v9);
      v17 |= WebPDispatchAlpha(*((_QWORD *)a1[9] + 9), 0, v13, 1, v19);
      v11 = v5[6];
      v14 = (v14 + 1);
      v9 = a1[9];
      if (v9[16] >= v9[14])
        break;
      v19 += (int)v11;
    }
    while (v9[6] <= 0 && (int)v14 < a3);
    v16 = v17 != 0;
    v8 = v24;
    v12 = v23;
  }
  if ((v6 - 7) <= 3 && v16)
    WebPApplyAlphaMultiply(v12, v8, v13, v14, v11);
  return v14;
}

uint64_t EmitRescaledYUV(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(int **)(a2 + 48);
  v6 = **(_DWORD **)a2;
  v7 = v6 > 0xC || ((1 << v6) & 0x103A) == 0;
  if (!v7 || v6 - 11 >= 0xFFFFFFFC)
  {
    v8 = *(_QWORD *)(a1 + 152);
    if (v8)
      WebPMultRows(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 48), v8, *(_DWORD *)a1, *(unsigned int *)(a1 + 12), v4, 0);
  }
  v9 = (((int)v4 + 1) >> 1);
  v10 = Rescale(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 48), v4, v5);
  Rescale(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 52), v9, *(int **)(a2 + 56));
  Rescale(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 52), v9, *(int **)(a2 + 64));
  return v10;
}

uint64_t EmitRescaledAlphaYUV(uint64_t a1, uint64_t *a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  int v11;
  size_t v12;

  v3 = a3;
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 40);
  v6 = *((_DWORD *)a2 + 8);
  v7 = *(int *)(*a2 + 60);
  v8 = (char *)(v5 + (int)v7 * (uint64_t)v6);
  if (*(_QWORD *)(a1 + 152))
  {
    v10 = *(_QWORD *)(v4 + 16);
    v11 = *(_DWORD *)(v4 + 48);
    if (Rescale(*(_QWORD *)(a1 + 152), *(_DWORD *)a1, *(unsigned int *)(a1 + 16), (int *)a2[9]) != a3)
      EmitRescaledAlphaYUV_cold_2();
    if (v3 >= 1)
      WebPMultRows(v10 + v11 * (uint64_t)v6, *(_DWORD *)(v4 + 48), (uint64_t)v8, *(_DWORD *)(v4 + 60), *(unsigned int *)(a2[9] + 52), v3, 1);
  }
  else if (v5)
  {
    if (v6 + a3 > *(_DWORD *)(a1 + 144))
      EmitRescaledAlphaYUV_cold_1();
    if (a3 >= 1)
    {
      v12 = *(int *)(a1 + 140);
      do
      {
        memset(v8, 255, v12);
        v8 += v7;
        --v3;
      }
      while (v3);
    }
  }
  return 0;
}

uint64_t Rescale(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  int v9;

  if ((int)a3 < 1)
    return 0;
  v5 = a3;
  LODWORD(v8) = 0;
  do
  {
    v9 = WebPRescalerImport((uint64_t)a4, v5, a1, a2);
    a1 += v9 * a2;
    v5 = (v5 - v9);
    v8 = WebPRescalerExport(a4) + v8;
  }
  while ((int)v5 > 0);
  return v8;
}

uint64_t GetAlphaSourceRow(unsigned int *a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  result = a1[2];
  v5 = a1[4];
  *a3 = v5;
  if (a1[22])
  {
    if ((_DWORD)result)
    {
      result = (result - 1);
      *a2 -= (int)*a1;
    }
    else
    {
      *a3 = v5 - 1;
    }
    v6 = a1[32];
    v7 = a1[33];
    v8 = a1[2] + v6 + a1[4];
    if (v8 == v7)
      *a3 = v8 - (v6 + result);
  }
  return result;
}

void CustomPut_cold_1()
{
  __assert_rtn("CustomPut", "io_dec.c", 631, "!(io->mb_y & 1)");
}

void EmitAlphaRGBA4444_cold_1()
{
  __assert_rtn("EmitAlphaRGBA4444", "io_dec.c", 228, "expected_num_lines_out == num_rows");
}

void EmitAlphaRGB_cold_1()
{
  __assert_rtn("EmitAlphaRGB", "io_dec.c", 190, "expected_num_lines_out == num_rows");
}

void EmitAlphaYUV_cold_1()
{
  __assert_rtn("EmitAlphaYUV", "io_dec.c", 134, "expected_num_lines_out == mb_h");
}

void EmitRescaledRGB_cold_1()
{
  __assert_rtn("ExportRGB", "io_dec.c", 372, "p->scaler_u->y_accum == p->scaler_v->y_accum");
}

void EmitRescaledRGB_cold_2()
{
  __assert_rtn("ExportRGB", "io_dec.c", 371, "y_pos + num_lines_out < p->output->height");
}

void EmitRescaledRGB_cold_3()
{
  __assert_rtn("EmitRescaledRGB", "io_dec.c", 402, "u_lines_in == v_lines_in");
}

void ExportAlphaRGBA4444_cold_1()
{
  __assert_rtn("ExportAlphaRGBA4444", "io_dec.c", 455, "y_pos + num_lines_out < p->output->height");
}

void ExportAlpha_cold_1()
{
  __assert_rtn("ExportAlpha", "io_dec.c", 424, "y_pos + num_lines_out < p->output->height");
}

void EmitRescaledAlphaYUV_cold_1()
{
  __assert_rtn("EmitRescaledAlphaYUV", "io_dec.c", 285, "p->last_y + expected_num_lines_out <= io->scaled_height");
}

void EmitRescaledAlphaYUV_cold_2()
{
  __assert_rtn("EmitRescaledAlphaYUV", "io_dec.c", 278, "expected_num_lines_out == num_lines_out");
}

void VP8FiltersInit()
{
  if ((BOOL (*)(int))VP8FiltersInit_VP8FiltersInit_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPUnfilters[0] = (uint64_t)NoneUnfilter_C;
    qword_1EDF08898 = (uint64_t)GradientUnfilter_C;
    WebPFilters = 0;
    VP8FiltersInitNEON();
    if (!WebPUnfilters[0])
      VP8FiltersInit_cold_1();
    if (!qword_1EDF08888)
      VP8FiltersInit_cold_2();
    if (!qword_1EDF08890)
      VP8FiltersInit_cold_3();
    if (!qword_1EDF08898)
      VP8FiltersInit_cold_4();
    if (!qword_1EDF08868)
      VP8FiltersInit_cold_5();
    if (!qword_1EDF08870)
      VP8FiltersInit_cold_6();
    if (!qword_1EDF08878)
      VP8FiltersInit_cold_7();
    VP8FiltersInit_VP8FiltersInit_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

void *NoneUnfilter_C(int a1, const void *a2, void *__dst, int a4)
{
  void *result;

  if (__dst != a2)
    return memcpy(__dst, a2, a4);
  return result;
}

unsigned __int8 *GradientUnfilter_C(unsigned __int8 *result, char *a2, unsigned __int8 *a3, int a4)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  int v7;
  int v8;
  char v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;

  if (result)
  {
    if (a4 >= 1)
    {
      v4 = *result;
      v5 = a4;
      v6 = *result;
      do
      {
        v8 = *result++;
        v7 = v8;
        LOBYTE(v8) = *a2++;
        v9 = v8;
        v10 = (v7 - v6 + v4) & ~((v7 - v6 + v4) >> 31);
        if (v10 >= 255)
          LOBYTE(v10) = -1;
        v4 = v9 + v10;
        *a3++ = v4;
        v6 = v7;
        --v5;
      }
      while (v5);
    }
  }
  else if (a4 >= 1)
  {
    v11 = 0;
    v12 = a4;
    do
    {
      v13 = *a2++;
      v11 += v13;
      *a3++ = v11;
      --v12;
    }
    while (v12);
  }
  return result;
}

void VP8FiltersInit_cold_1()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 288, "WebPUnfilters[WEBP_FILTER_NONE] != NULL");
}

void VP8FiltersInit_cold_2()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 289, "WebPUnfilters[WEBP_FILTER_HORIZONTAL] != NULL");
}

void VP8FiltersInit_cold_3()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 290, "WebPUnfilters[WEBP_FILTER_VERTICAL] != NULL");
}

void VP8FiltersInit_cold_4()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 291, "WebPUnfilters[WEBP_FILTER_GRADIENT] != NULL");
}

void VP8FiltersInit_cold_5()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 292, "WebPFilters[WEBP_FILTER_HORIZONTAL] != NULL");
}

void VP8FiltersInit_cold_6()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 293, "WebPFilters[WEBP_FILTER_VERTICAL] != NULL");
}

void VP8FiltersInit_cold_7()
{
  __assert_rtn("VP8FiltersInit_body", "filters.c", 294, "WebPFilters[WEBP_FILTER_GRADIENT] != NULL");
}

unsigned int *WebPMultARGBRow_C(unsigned int *result, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int8x8_t v8;

  if (a2 >= 1)
  {
    v3 = a2;
    do
    {
      v4 = HIBYTE(*result);
      if (v4 != 255)
      {
        if (v4)
        {
          v6 = 65793 * v4;
          v7 = 0xFF000000 / v4;
          if (!a3)
            v7 = v6;
          v8 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vmla_s32((int32x2_t)0x80000000800000, vdup_n_s32(v7), (int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(*result), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)0xFFFFFFF8FFFFFFF0), (int8x8_t)0xFF00000000FF00);
          v5 = *result & 0xFF000000 | ((v7 * *result + 0x800000) >> 24) | v8.i32[0] | v8.i32[1];
        }
        else
        {
          v5 = 0;
        }
        *result = v5;
      }
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

_BYTE *WebPMultRow_C(_BYTE *result, unsigned __int8 *a2, int a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;

  if (a3 >= 1)
  {
    v4 = a3;
    do
    {
      v6 = *a2++;
      v5 = v6;
      if (v6 != 255)
      {
        if (v5)
        {
          v7 = 65793 * v5;
          v8 = 0xFF000000 / v5;
          if (!a4)
            v8 = v7;
          *result = (v8 * *result + 0x800000) >> 24;
        }
        else
        {
          *result = 0;
        }
      }
      ++result;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WebPMultARGBRows(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  if (a4 >= 1)
  {
    v6 = a4;
    v8 = result;
    v9 = a2;
    do
    {
      result = WebPMultARGBRow(v8, a3, a5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t WebPMultRows(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a6 >= 1)
  {
    v8 = a6;
    v11 = result;
    v12 = a2;
    v13 = a4;
    do
    {
      result = WebPMultRow(v11, a3, a5, a7);
      v11 += v12;
      a3 += v13;
      --v8;
    }
    while (v8);
  }
  return result;
}

void WebPInitAlphaProcessing()
{
  if ((uint64_t (*)())WebPInitAlphaProcessing_WebPInitAlphaProcessing_body_last_cpuinfo_used != VP8GetCPUInfo)
  {
    WebPMultARGBRow = (uint64_t (*)(_QWORD, _QWORD, _QWORD))WebPMultARGBRow_C;
    WebPMultRow = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))WebPMultRow_C;
    WebPApplyAlphaMultiply4444 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))ApplyAlphaMultiply_16b_C;
    WebPPackRGB = (uint64_t)PackRGB_C;
    WebPHasAlpha8b = (uint64_t)HasAlpha8b_C;
    WebPHasAlpha32b = (uint64_t)HasAlpha32b_C;
    WebPAlphaReplace = (uint64_t)AlphaReplace_C;
    WebPInitAlphaProcessingNEON();
    if (!WebPMultARGBRow)
      WebPInitAlphaProcessing_cold_1();
    if (!WebPMultRow)
      WebPInitAlphaProcessing_cold_2();
    if (!WebPApplyAlphaMultiply)
      WebPInitAlphaProcessing_cold_3();
    if (!WebPApplyAlphaMultiply4444)
      WebPInitAlphaProcessing_cold_4();
    if (!WebPDispatchAlpha)
      WebPInitAlphaProcessing_cold_5();
    if (!WebPDispatchAlphaToGreen)
      WebPInitAlphaProcessing_cold_6();
    if (!WebPExtractAlpha)
      WebPInitAlphaProcessing_cold_7();
    if (!WebPExtractGreen)
      WebPInitAlphaProcessing_cold_8();
    if (!WebPPackRGB)
      WebPInitAlphaProcessing_cold_9();
    if (!WebPHasAlpha8b)
      WebPInitAlphaProcessing_cold_10();
    if (!WebPHasAlpha32b)
      WebPInitAlphaProcessing_cold_11();
    if (!WebPAlphaReplace)
      WebPInitAlphaProcessing_cold_12();
    WebPInitAlphaProcessing_WebPInitAlphaProcessing_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
  }
}

uint64_t ApplyAlphaMultiply_16b_C(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;
  int v7;

  if (a3 >= 1)
  {
    do
    {
      if (a2 >= 1)
      {
        v4 = 0;
        do
        {
          v5 = (_BYTE *)(result + v4);
          v6 = *(unsigned __int8 *)(result + v4 + 1);
          v7 = 4369 * (v6 & 0xF);
          *v5 = ((v7 * (*(_BYTE *)(result + v4) & 0xF0 | (*(unsigned __int8 *)(result + v4) >> 4))) >> 16) & 0xF0 | ((v7 * (*(_BYTE *)(result + v4) & 0xFu | (16 * *(_BYTE *)(result + v4)))) >> 20);
          v5[1] = ((v7 * (v6 & 0xF0 | (v6 >> 4))) >> 16) & 0xF0 | v6 & 0xF;
          v4 += 2;
        }
        while (2 * a2 != v4);
      }
      result += a4;
    }
    while (a3-- > 1);
  }
  return result;
}

uint64_t PackRGB_C(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int *a6)
{
  uint64_t v6;
  uint64_t v7;

  if (a4 >= 1)
  {
    v6 = 0;
    v7 = a4;
    do
    {
      *a6++ = (*(unsigned __int8 *)(a2 + v6) << 8) | (*(unsigned __int8 *)(result + v6) << 16) | *(unsigned __int8 *)(a3 + v6) | 0xFF000000;
      v6 += a5;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t HasAlpha8b_C(unsigned __int8 *a1, int a2)
{
  BOOL v2;
  int v3;

  while (1)
  {
    v2 = __OFSUB__(a2--, 1);
    if (a2 < 0 != v2)
      break;
    v3 = *a1++;
    if (v3 != 255)
      return 1;
  }
  return 0;
}

uint64_t HasAlpha32b_C(unsigned __int8 *a1, int a2)
{
  int v2;
  int v3;

  if (a2 < 1)
    return 0;
  v2 = a2 + 1;
  while (1)
  {
    v3 = *a1;
    a1 += 4;
    if (v3 != 255)
      break;
    if (--v2 < 2)
      return 0;
  }
  return 1;
}

uint64_t AlphaReplace_C(uint64_t result, int a2, int a3)
{
  uint64_t v3;

  if (a2 >= 1)
  {
    v3 = a2;
    do
    {
      if (!*(_BYTE *)(result + 3))
        *(_DWORD *)result = a3;
      result += 4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void WebPInitAlphaProcessing_cold_1()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 481, "WebPMultARGBRow != NULL");
}

void WebPInitAlphaProcessing_cold_2()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 482, "WebPMultRow != NULL");
}

void WebPInitAlphaProcessing_cold_3()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 483, "WebPApplyAlphaMultiply != NULL");
}

void WebPInitAlphaProcessing_cold_4()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 484, "WebPApplyAlphaMultiply4444 != NULL");
}

void WebPInitAlphaProcessing_cold_5()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 485, "WebPDispatchAlpha != NULL");
}

void WebPInitAlphaProcessing_cold_6()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 486, "WebPDispatchAlphaToGreen != NULL");
}

void WebPInitAlphaProcessing_cold_7()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 487, "WebPExtractAlpha != NULL");
}

void WebPInitAlphaProcessing_cold_8()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 488, "WebPExtractGreen != NULL");
}

void WebPInitAlphaProcessing_cold_9()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 492, "WebPPackRGB != NULL");
}

void WebPInitAlphaProcessing_cold_10()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 493, "WebPHasAlpha8b != NULL");
}

void WebPInitAlphaProcessing_cold_11()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 494, "WebPHasAlpha32b != NULL");
}

void WebPInitAlphaProcessing_cold_12()
{
  __assert_rtn("WebPInitAlphaProcessing_body", "alpha_processing.c", 495, "WebPAlphaReplace != NULL");
}

uint64_t (**WebPGetWorkerInterface())()
{
  return g_worker_interface;
}

double Init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t Reset(uint64_t a1)
{
  int v1;

  *(_DWORD *)(a1 + 40) = 0;
  v1 = *(_DWORD *)(a1 + 8);
  if (v1 != 1)
  {
    if (v1)
      Reset_cold_1();
    *(_DWORD *)(a1 + 8) = 1;
  }
  return 1;
}

BOOL Sync(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) >= 2u)
    Reset_cold_1();
  return *(_DWORD *)(a1 + 40) == 0;
}

_QWORD *Launch(_QWORD *result)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  _QWORD *v2;

  v1 = (uint64_t (*)(_QWORD, _QWORD))result[2];
  if (v1)
  {
    v2 = result;
    result = (_QWORD *)v1(result[3], result[4]);
    *((_DWORD *)v2 + 10) |= (_DWORD)result == 0;
  }
  return result;
}

_QWORD *Execute(_QWORD *result)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  _QWORD *v2;

  v1 = (uint64_t (*)(_QWORD, _QWORD))result[2];
  if (v1)
  {
    v2 = result;
    result = (_QWORD *)v1(result[3], result[4]);
    *((_DWORD *)v2 + 10) |= (_DWORD)result == 0;
  }
  return result;
}

uint64_t End(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  if (*(_QWORD *)result)
    End_cold_1();
  return result;
}

void Reset_cold_1()
{
  __assert_rtn("Sync", "thread_utils.c", 272, "worker->status_ <= OK");
}

void End_cold_1()
{
  __assert_rtn("End", "thread_utils.c", 343, "worker->impl_ == NULL");
}

uint64_t WebPAnimDecoderOptionsInitInternal(_QWORD *a1, int a2)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if ((a2 & 0xFFFFFF00) == 0x100)
    {
      *a1 = 1;
      return 1;
    }
  }
  return result;
}

char *WebPAnimDecoderNewInternal(uint64_t a1, int *a2, int a3)
{
  char *v3;
  char *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  _OWORD *v10;
  void *v11;
  unsigned int *v12;
  void *v13;
  void *v14;
  _OWORD v16[2];
  uint64_t v17;

  v3 = 0;
  if (a1)
  {
    if ((a3 & 0xFFFFFF00) == 0x100)
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v3 = 0;
      if (!WebPGetFeaturesInternal(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v16, 521))
      {
        v6 = (char *)WebPSafeCalloc(1uLL, 0x198uLL);
        v3 = v6;
        if (v6)
        {
          if (a2)
          {
            v9 = *a2;
            if (*a2 > 8 || ((1 << v9) & 0x18A) == 0)
              goto LABEL_16;
            LODWORD(a2) = a2[1];
          }
          else
          {
            v9 = 1;
          }
          v10 = v6 + 8;
          v11 = BlendPixelRowPremult;
          if ((v9 & 0xFFFFFFFD) == 1)
            v11 = BlendPixelRowNonPremult;
          *((_QWORD *)v3 + 31) = v11;
          WebPInitDecoderConfigInternal(v10, 521);
          *((_DWORD *)v3 + 12) = v9;
          *((_DWORD *)v3 + 15) = 1;
          *((_DWORD *)v3 + 52) = (_DWORD)a2;
          v12 = (unsigned int *)WebPDemuxInternal(a1, 0, 0, 263);
          *(_QWORD *)v3 = v12;
          if (v12)
          {
            *((_DWORD *)v3 + 64) = WebPDemuxGetI(v12, 1);
            *((_DWORD *)v3 + 65) = WebPDemuxGetI(*(unsigned int **)v3, 2);
            *((_DWORD *)v3 + 66) = WebPDemuxGetI(*(unsigned int **)v3, 3);
            *((_DWORD *)v3 + 67) = WebPDemuxGetI(*(unsigned int **)v3, 4);
            *((_DWORD *)v3 + 68) = WebPDemuxGetI(*(unsigned int **)v3, 5);
            v13 = WebPSafeCalloc((4 * *((_DWORD *)v3 + 64)), *((unsigned int *)v3 + 65));
            *((_QWORD *)v3 + 37) = v13;
            if (v13)
            {
              v14 = WebPSafeCalloc((4 * *((_DWORD *)v3 + 64)), *((unsigned int *)v3 + 65));
              *((_QWORD *)v3 + 38) = v14;
              if (v14)
              {
                *((_DWORD *)v3 + 78) = 0;
                _cg_jpeg_mem_term(v3 + 320, v7, v8);
                *((_OWORD *)v3 + 23) = 0u;
                *((_OWORD *)v3 + 24) = 0u;
                *((_OWORD *)v3 + 21) = 0u;
                *((_OWORD *)v3 + 22) = 0u;
                *((_OWORD *)v3 + 20) = 0u;
                *((_QWORD *)v3 + 50) = 0x100000000;
                return v3;
              }
            }
          }
        }
LABEL_16:
        WebPAnimDecoderDelete((void **)v3, v7, v8);
        return 0;
      }
    }
  }
  return v3;
}

void WebPAnimDecoderDelete(void **a1, uint64_t a2, const char *a3)
{
  if (a1)
  {
    _cg_jpeg_mem_term(a1 + 40, a2, a3);
    WebPDemuxDelete(*a1);
    _TIFFfree(a1[37]);
    _TIFFfree(a1[38]);
    _TIFFfree(a1);
  }
}

uint64_t WebPAnimDecoderGetInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      v4 = *(_OWORD *)(a1 + 256);
      v5 = *(_OWORD *)(a1 + 272);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 288);
      *(_OWORD *)a2 = v4;
      *(_OWORD *)(a2 + 16) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t WebPAnimDecoderGetNext(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  unsigned int v8;
  unsigned int v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  BOOL v32;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  size_t v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  result = 0;
  if (!a1 || !a2 || !a3)
    return result;
  v7 = *(_DWORD *)(a1 + 404);
  if (v7 > *(_DWORD *)(a1 + 272))
    return 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v8 = *(_DWORD *)(a1 + 256);
  v9 = *(_DWORD *)(a1 + 260);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 248);
  result = WebPDemuxGetFrame(*(_QWORD *)a1, v7, (uint64_t)&v48);
  if (!(_DWORD)result)
    return result;
  v11 = *(_DWORD *)(a1 + 312);
  v12 = DWORD2(v49);
  if ((_DWORD)v48 == 1
    || (!DWORD2(v51) || HIDWORD(v51) == 1) && (_QWORD)v49 == __PAIR64__(v9, v8)
    || *(_DWORD *)(a1 + 348) == 1
    && (*(_DWORD *)(a1 + 336) == v8 ? (v14 = *(_DWORD *)(a1 + 340) == v9) : (v14 = 0),
        !v14 ? (v15 = 0) : (v15 = 1),
        *(_DWORD *)(a1 + 400) | v15))
  {
    bzero(*(void **)(a1 + 296), 4 * v8 * (unint64_t)v9);
    v13 = 1;
  }
  else
  {
    CopyCanvas(*(void **)(a1 + 304), *(void **)(a1 + 296), v8, v9);
    v13 = 0;
  }
  v16 = 4 * v8;
  v17 = SDWORD1(v49) * v16;
  v18 = SHIDWORD(v48) * v16 + 4 * SDWORD2(v48);
  v19 = *((_QWORD *)&v50 + 1);
  v20 = v51;
  *(_DWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 296) + v18;
  if (WebPDecode(v19, v20, a1 + 8))
  {
    _cg_jpeg_mem_term(&v48, v21, (const char *)v22);
    return 0;
  }
  v47 = v13;
  v44 = v12;
  v45 = v11;
  v46 = v9;
  if ((int)v48 >= 2 && !(HIDWORD(v51) | v13))
  {
    v23 = *(_DWORD *)(a1 + 348);
    if (!v23)
    {
      if (SDWORD1(v49) >= 1)
      {
        v24 = 0;
        do
        {
          v10(*(_QWORD *)(a1 + 296) + 4 * (DWORD2(v48) + (v24 + HIDWORD(v48)) * v8), *(_QWORD *)(a1 + 304) + 4 * (DWORD2(v48) + (v24 + HIDWORD(v48)) * v8), v49);
          ++v24;
        }
        while (v24 < SDWORD1(v49));
      }
      goto LABEL_59;
    }
    if (v23 != 1)
      WebPAnimDecoderGetNext_cold_2();
    if (SDWORD1(v49) < 1)
      goto LABEL_59;
    v25 = 0;
    while (1)
    {
      v26 = v25 + HIDWORD(v48);
      v22 = v49;
      v27 = v49 + DWORD2(v48);
      v28 = *(_DWORD *)(a1 + 328);
      v29 = *(_DWORD *)(a1 + 336) + v28;
      v30 = *(_DWORD *)(a1 + 332);
      v31 = v30 > v25 + HIDWORD(v48) || v30 + *(_DWORD *)(a1 + 340) <= v26;
      v32 = !v31 && SDWORD2(v48) < v29;
      if (!v32 || v27 <= v28)
        break;
      v36 = __OFSUB__(v27, v29);
      v37 = v27 - v29;
      if ((v37 < 0) ^ v36 | (v37 == 0))
        v35 = -1;
      else
        v35 = *(_DWORD *)(a1 + 336) + v28;
      if ((v37 < 0) ^ v36 | (v37 == 0))
        v34 = 0;
      else
        v34 = v37;
      v22 = (v28 - DWORD2(v48));
      if (v28 > SDWORD2(v48))
        goto LABEL_54;
LABEL_56:
      if ((int)v34 >= 1)
        v10(*(_QWORD *)(a1 + 296) + 4 * (v35 + v26 * v8), *(_QWORD *)(a1 + 304) + 4 * (v35 + v26 * v8), v34);
      if (++v25 >= SDWORD1(v49))
        goto LABEL_59;
    }
    v34 = 0;
    v35 = -1;
LABEL_54:
    if ((int)v22 >= 1)
      ((void (*)(uint64_t, uint64_t))v10)(*(_QWORD *)(a1 + 296) + 4 * (DWORD2(v48) + v26 * v8), *(_QWORD *)(a1 + 304) + 4 * (DWORD2(v48) + v26 * v8));
    goto LABEL_56;
  }
LABEL_59:
  *(_DWORD *)(a1 + 312) = v44 + v45;
  _cg_jpeg_mem_term(a1 + 320, v21, (const char *)v22);
  v38 = v51;
  *(_OWORD *)(a1 + 352) = v50;
  *(_OWORD *)(a1 + 368) = v38;
  *(_OWORD *)(a1 + 384) = v52;
  v39 = v49;
  *(_OWORD *)(a1 + 320) = v48;
  *(_OWORD *)(a1 + 336) = v39;
  *(_DWORD *)(a1 + 400) = v47;
  CopyCanvas(*(void **)(a1 + 296), *(void **)(a1 + 304), v8, v46);
  if (*(_DWORD *)(a1 + 348) == 1)
  {
    v40 = *(int *)(a1 + 336);
    v41 = 4 * v40;
    if (4 * (int)v40 > (int)v16)
      WebPAnimDecoderGetNext_cold_1();
    v42 = *(_DWORD *)(a1 + 340);
    if (v42 >= 1)
    {
      v43 = (char *)(*(_QWORD *)(a1 + 304) + 4 * *(int *)(a1 + 328) + *(int *)(a1 + 332) * (uint64_t)(int)v16);
      do
      {
        bzero(v43, v41);
        v43 += (int)v16;
        --v42;
      }
      while (v42);
    }
  }
  ++*(_DWORD *)(a1 + 404);
  *a2 = *(_QWORD *)(a1 + 296);
  *a3 = v44 + v45;
  return 1;
}

BOOL WebPAnimDecoderHasMoreFrames(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 404) <= *(_DWORD *)(result + 272);
  return result;
}

void *CopyCanvas(void *__src, void *__dst, unsigned int a3, unsigned int a4)
{
  if (!__src || !__dst)
    CopyCanvas_cold_1();
  return memcpy(__dst, __src, 4 * a3 * (unint64_t)a4);
}

uint64_t BlendPixelRowNonPremult(uint64_t result, unsigned int *a2, int a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;

  if (a3 >= 1)
  {
    v4 = (unsigned int *)result;
    v5 = a3;
    do
    {
      v6 = *v4;
      if (HIBYTE(*v4) != 255)
      {
        v7 = *a2;
        if (HIBYTE(*v4))
        {
          v8 = HIBYTE(v7) * (256 - HIBYTE(v6));
          v9 = (v8 >> 8) + HIBYTE(v6);
          v13 = 0x1000000u / (BYTE1(v8) + HIBYTE(*v4));
          v10 = BYTE1(v8);
          v11 = BlendChannelNonPremult(v6, HIBYTE(v6), v7, BYTE1(v8), v13, 0);
          v12 = BlendChannelNonPremult(v6, HIBYTE(v6), v7, v10, v13, 8);
          result = BlendChannelNonPremult(v6, HIBYTE(v6), v7, v10, v13, 16);
          if (v9 >= 0x100)
            BlendPixelRowNonPremult_cold_1();
          v7 = v11 | (v12 << 8) | ((_DWORD)result << 16) | (v9 << 24);
        }
        *v4 = v7;
      }
      ++a2;
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

_DWORD *BlendPixelRowPremult(_DWORD *result, _DWORD *a2, int a3)
{
  uint64_t v3;

  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (HIBYTE(*result) != 255)
        *result += ((((*a2 >> 8) & 0xFF00FF) * (256 - HIBYTE(*result))) & 0xFF00FF00)
                 + ((((*a2 & 0xFF00FFu) * (256 - HIBYTE(*result))) >> 8) & 0xFF00FF);
      ++a2;
      ++result;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t BlendChannelNonPremult(unsigned int a1, int a2, unsigned int a3, int a4, unsigned int a5, char a6)
{
  unint64_t v6;

  v6 = (a3 >> a6) * a4 + (a1 >> a6) * a2;
  if (0x100000000uLL / a5 <= v6)
    BlendChannelNonPremult_cold_1();
  return (v6 * a5) >> 24;
}

void WebPAnimDecoderGetNext_cold_1()
{
  __assert_rtn("ZeroFillFrameRect", "anim_decode.c", 173, "width * NUM_CHANNELS <= buf_stride");
}

void WebPAnimDecoderGetNext_cold_2()
{
  __assert_rtn("WebPAnimDecoderGetNext", "anim_decode.c", 398, "dec->prev_iter_.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND");
}

void CopyCanvas_cold_1()
{
  __assert_rtn("CopyCanvas", "anim_decode.c", 186, "src != NULL && dst != NULL");
}

void BlendPixelRowNonPremult_cold_1()
{
  __assert_rtn("BlendPixelNonPremult", "anim_decode.c", 243, "src_a + dst_factor_a < 256");
}

void BlendChannelNonPremult_cold_1()
{
  __assert_rtn("BlendChannelNonPremult", "anim_decode.c", 219, "blend_unscaled < (1ULL << 32) / scale");
}

uint64_t VP8InitIoInternal(_OWORD *a1, int a2)
{
  uint64_t v2;

  if ((a2 & 0xFFFFFF00) != 0x200)
    return 0;
  if (!a1)
    return 1;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  v2 = 1;
  *a1 = 0u;
  a1[1] = 0u;
  return v2;
}

_QWORD *VP8New()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (**v2)();
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v0 = WebPSafeCalloc(1uLL, 0xBD0uLL);
  v1 = v0;
  if (v0)
  {
    *(_DWORD *)v0 = 0;
    v0[1] = "OK";
    v2 = WebPGetWorkerInterface();
    ((void (*)(_QWORD *))*v2)(v1 + 19);
    *((_DWORD *)v1 + 1) = 0;
    *((_DWORD *)v1 + 108) = 0;
    if ((BOOL (*)(int))InitGetCoeffs_InitGetCoeffs_body_last_cpuinfo_used != VP8GetCPUInfo)
    {
      if (VP8GetCPUInfo && VP8GetCPUInfo(2))
        v3 = GetCoeffsAlt;
      else
        v3 = GetCoeffsFast;
      GetCoeffs = v3;
      InitGetCoeffs_InitGetCoeffs_body_last_cpuinfo_used = (uint64_t)VP8GetCPUInfo;
    }
  }
  return v1;
}

void VP8Delete(void *a1)
{
  if (a1)
  {
    VP8Clear((uint64_t)a1);
    _TIFFfree(a1);
  }
}

double VP8Clear(uint64_t a1)
{
  uint64_t (**v2)();
  double result;

  if (a1)
  {
    v2 = WebPGetWorkerInterface();
    ((void (*)(uint64_t))v2[5])(a1 + 152);
    WebPDeallocateAlphaMemory(a1);
    _TIFFfree(*(void **)(a1 + 2888));
    result = 0.0;
    *(_OWORD *)(a1 + 2888) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_DWORD *)(a1 + 4) = 0;
  }
  return result;
}

uint64_t VP8SetError(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 5 && !*(_DWORD *)(a1 + 64))
    VP8SetError_cold_1();
  if (!*(_DWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = a3;
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = 0;
  }
  return 0;
}

uint64_t VP8GetInfo(unsigned __int8 *a1, unint64_t a2, unint64_t a3, int *a4, int *a5)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;

  result = 0;
  if (a1 && a2 >= 0xA)
  {
    if (a1[3] == 157 && a1[4] == 1 && a1[5] == 42)
    {
      result = 0;
      v7 = *a1;
      if ((v7 & 0x19) == 0x10 && ((a1[2] << 16) | (a1[1] << 8) | v7) >> 5 < a3)
      {
        result = 0;
        v8 = a1[6] | ((a1[7] & 0x3F) << 8);
        if (v8)
        {
          v9 = a1[8] | ((a1[9] & 0x3F) << 8);
          if (v9)
          {
            if (a4)
              *a4 = v8;
            if (a5)
              *a5 = v9;
            return 1;
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t VP8GetHeaders(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  unint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int Value;
  uint64_t v19;
  int v20;
  uint64_t i;
  int v22;
  uint64_t j;
  char v24;
  int v25;
  uint64_t v27;

  if (!a1)
    return 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = "OK";
  if (!a2)
  {
    v5 = 0;
    *(_QWORD *)(a1 + 8) = "null VP8Io passed to VP8GetHeaders()";
    v7 = 2;
    goto LABEL_13;
  }
  v3 = *(_QWORD *)(a2 + 96);
  v4 = v3 - 3;
  if (v3 > 3)
  {
    v8 = *(unsigned __int8 **)(a2 + 104);
    v9 = *v8;
    v10 = (v8[2] << 16) | (v8[1] << 8) | v9;
    *(_BYTE *)(a1 + 68) = (v9 & 1) == 0;
    *(_BYTE *)(a1 + 69) = (v9 >> 1) & 7;
    *(_BYTE *)(a1 + 70) = (v9 & 0x10) != 0;
    v11 = v10 >> 5;
    *(_DWORD *)(a1 + 72) = v11;
    if (((v9 >> 1) & 7) >= 4)
    {
      v5 = 0;
      v12 = "Incorrect keyframe parameters.";
LABEL_9:
      *(_QWORD *)(a1 + 8) = v12;
      v7 = 3;
      goto LABEL_13;
    }
    if (((v9 >> 4) & 1) == 0)
    {
      v5 = 0;
      v13 = "Frame not displayable.";
LABEL_12:
      *(_QWORD *)(a1 + 8) = v13;
      v7 = 4;
      goto LABEL_13;
    }
    v14 = (unint64_t *)(v8 + 3);
    if ((v9 & 1) == 0)
    {
      if (v4 <= 6)
      {
        v5 = 0;
        v6 = "cannot parse picture header";
        goto LABEL_5;
      }
      if (*(unsigned __int8 *)v14 != 157 || v8[4] != 1 || v8[5] != 42)
      {
        v5 = 0;
        v12 = "Bad code word";
        goto LABEL_9;
      }
      v15 = v8[6] | ((v8[7] & 0x3F) << 8);
      *(_WORD *)(a1 + 76) = v8[6] | ((v8[7] & 0x3F) << 8);
      *(_BYTE *)(a1 + 80) = v8[7] >> 6;
      v16 = v8[8] | ((v8[9] & 0x3F) << 8);
      *(_WORD *)(a1 + 78) = v8[8] | ((v8[9] & 0x3F) << 8);
      *(_BYTE *)(a1 + 81) = v8[9] >> 6;
      v14 = (unint64_t *)(v8 + 10);
      v4 = v3 - 10;
      *(_DWORD *)(a1 + 408) = (v15 + 15) >> 4;
      *(_DWORD *)(a1 + 412) = (v16 + 15) >> 4;
      *(_DWORD *)a2 = v15;
      *(_DWORD *)(a2 + 4) = v16;
      *(_DWORD *)(a2 + 116) = 0;
      *(_DWORD *)(a2 + 120) = 0;
      *(_QWORD *)(a2 + 124) = v15;
      *(_QWORD *)(a2 + 132) = v16;
      *(_DWORD *)(a2 + 140) = v15;
      *(_DWORD *)(a2 + 144) = v16;
      *(_DWORD *)(a2 + 12) = v15;
      *(_DWORD *)(a2 + 16) = v16;
      VP8ResetProba(a1 + 1192);
      ResetSegmentHeader(a1 + 132);
      v11 = *(_DWORD *)(a1 + 72);
    }
    if (v4 >= v11)
    {
      VP8InitBitReader(a1 + 16, v14, v11);
      v17 = *(unsigned int *)(a1 + 72);
      if (*(_BYTE *)(a1 + 68))
      {
        *(_BYTE *)(a1 + 82) = VP8GetValue(a1 + 16, 1);
        *(_BYTE *)(a1 + 83) = VP8GetValue(a1 + 16, 1);
      }
      Value = VP8GetValue(a1 + 16, 1);
      *(_DWORD *)(a1 + 132) = Value;
      if (Value)
      {
        *(_DWORD *)(a1 + 136) = VP8GetValue(a1 + 16, 1);
        if (VP8GetValue(a1 + 16, 1))
        {
          v19 = 0;
          *(_DWORD *)(a1 + 140) = VP8GetValue(a1 + 16, 1);
          do
          {
            v20 = VP8GetValue(a1 + 16, 1);
            if (v20)
              LOBYTE(v20) = VP8GetSignedValue(a1 + 16, 7);
            *(_BYTE *)(a1 + 144 + v19++) = v20;
          }
          while (v19 != 4);
          for (i = 0; i != 4; ++i)
          {
            v22 = VP8GetValue(a1 + 16, 1);
            if (v22)
              LOBYTE(v22) = VP8GetSignedValue(a1 + 16, 6);
            *(_BYTE *)(a1 + 148 + i) = v22;
          }
        }
        if (*(_DWORD *)(a1 + 136))
        {
          for (j = 0; j != 3; ++j)
          {
            if (VP8GetValue(a1 + 16, 1))
              v24 = VP8GetValue(a1 + 16, 8);
            else
              v24 = -1;
            *(_BYTE *)(a1 + 1192 + j) = v24;
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 136) = 0;
      }
      if (*(_DWORD *)(a1 + 56))
      {
        if (!*(_DWORD *)a1)
        {
          v5 = 0;
          v12 = "cannot parse segment header";
          goto LABEL_9;
        }
      }
      else if (ParseFilterHeader(a1 + 16, (_DWORD *)a1))
      {
        v25 = ParsePartitions(a1, (unsigned __int16 *)((char *)v14 + v17), v4 - v17);
        if (v25)
        {
          VP8SetError(a1, v25, (uint64_t)"cannot parse partitions");
        }
        else
        {
          VP8ParseQuant(a1);
          if (*(_BYTE *)(a1 + 68))
          {
            v5 = 1;
            VP8GetValue(a1 + 16, 1);
            VP8ParseProba(a1 + 16, a1, v27);
            *(_DWORD *)(a1 + 4) = 1;
            return v5;
          }
          if (!*(_DWORD *)a1)
          {
            v5 = 0;
            v13 = "Not a key frame.";
            goto LABEL_12;
          }
        }
      }
      else if (!*(_DWORD *)a1)
      {
        v5 = 0;
        v12 = "cannot parse filter header";
        goto LABEL_9;
      }
    }
    else if (!*(_DWORD *)a1)
    {
      v5 = 0;
      v6 = "bad partition length";
      goto LABEL_5;
    }
    return 0;
  }
  v5 = 0;
  v6 = "Truncated header.";
LABEL_5:
  *(_QWORD *)(a1 + 8) = v6;
  v7 = 7;
LABEL_13:
  *(_QWORD *)a1 = v7;
  return v5;
}

double ResetSegmentHeader(uint64_t a1)
{
  double result;

  if (!a1)
    ResetSegmentHeader_cold_1();
  result = 0.0;
  *(_OWORD *)a1 = xmmword_18820C490;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

BOOL ParseFilterHeader(uint64_t a1, _DWORD *a2)
{
  int Value;
  uint64_t i;
  uint64_t j;
  int v7;

  a2[21] = VP8GetValue(a1, 1);
  a2[22] = VP8GetValue(a1, 6);
  a2[23] = VP8GetValue(a1, 3);
  Value = VP8GetValue(a1, 1);
  a2[24] = Value;
  if (Value && VP8GetValue(a1, 1))
  {
    for (i = 0; i != 4; ++i)
    {
      if (VP8GetValue(a1, 1))
        a2[i + 25] = VP8GetSignedValue(a1, 6);
    }
    for (j = 0; j != 4; ++j)
    {
      if (VP8GetValue(a1, 1))
        a2[j + 29] = VP8GetSignedValue(a1, 6);
    }
  }
  v7 = a2[22];
  if (v7)
  {
    if (a2[21])
      v7 = 1;
    else
      v7 = 2;
  }
  a2[730] = v7;
  return *(_DWORD *)(a1 + 40) == 0;
}

uint64_t ParsePartitions(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  int Value;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  Value = VP8GetValue(a1 + 16, 2);
  v7 = ~(-1 << Value);
  *(_DWORD *)(a1 + 432) = v7;
  v8 = a3 - 3 * v7;
  if (a3 < 3 * v7)
    return 7;
  v10 = (unint64_t *)((char *)a2 + a3);
  v11 = (unint64_t *)((char *)a2 + 3 * v7);
  if (Value)
  {
    v12 = a1 + 440;
    if (v7 <= 1)
      v13 = 1;
    else
      v13 = ~(-1 << Value);
    do
    {
      v14 = *((unsigned __int8 *)a2 + 2);
      if ((*a2 | (unint64_t)(v14 << 16)) >= v8)
        v15 = v8;
      else
        v15 = *a2 | (unint64_t)(v14 << 16);
      VP8InitBitReader(v12, v11, v15);
      v11 = (unint64_t *)((char *)v11 + v15);
      v8 -= v15;
      a2 = (unsigned __int16 *)((char *)a2 + 3);
      v12 += 48;
      --v13;
    }
    while (v13);
  }
  VP8InitBitReader(a1 + 48 * v7 + 440, v11, v8);
  if (v11 < v10)
    return 0;
  if (*(_DWORD *)(a1 + 64))
    return 5;
  return 7;
}

BOOL VP8DecodeMB(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int Coeffs;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  int v31;
  char v32;
  int v33;
  unsigned int v34;
  int v35;
  char v36;
  int v37;
  char v38;
  char v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char v54;
  char v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  char v60;
  char v61;
  int v62;
  unsigned __int8 v63;
  _OWORD v64[2];
  uint64_t v65;

  v3 = a1;
  v65 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 2832);
  v5 = *(int *)(a1 + 2904);
  v53 = (_BYTE *)(v4 + 2 * v5);
  v6 = *(_QWORD *)(a1 + 2912);
  if (*(_DWORD *)(a1 + 2800) && *(_BYTE *)(v6 + 800 * (int)v5 + 797))
  {
    *v53 = 0;
    *(_BYTE *)(v4 - 2) = 0;
    if (!*(_BYTE *)(v6 + 800 * (int)v5 + 768))
    {
      *(_BYTE *)(v4 + 2 * v5 + 1) = 0;
      *(_BYTE *)(v4 - 1) = 0;
    }
    v7 = 0;
    v8 = v6 + 800 * (int)v5;
    *(_BYTE *)(v8 + 796) = 0;
    *(_QWORD *)(v8 + 788) = 0;
  }
  else
  {
    v48 = *(_QWORD *)(a1 + 2912);
    v9 = (_BYTE *)(v6 + 800 * (int)v5);
    v50 = v9[798];
    v10 = a1 + 32 * v50;
    v11 = v10 + 1060;
    bzero(v9, 0x300uLL);
    v51 = v3;
    v49 = v5;
    if (v9[768])
    {
      v12 = 0;
      v13 = v3 + 2664;
    }
    else
    {
      v13 = v3 + 2256;
      memset(v64, 0, sizeof(v64));
      v14 = v4 + 2 * v5;
      Coeffs = GetCoeffs(a2, v3 + 2392, *(unsigned __int8 *)(v4 - 1) + *(unsigned __int8 *)(v14 + 1), v10 + 1068, 0, v64);
      *(_BYTE *)(v4 - 1) = Coeffs > 0;
      *(_BYTE *)(v14 + 1) = Coeffs > 0;
      if (Coeffs < 2)
      {
        v16 = 0;
        v17 = (SLOWORD(v64[0]) + 3) >> 3;
        do
        {
          *(_WORD *)&v9[2 * v16] = v17;
          v18 = v16 >= 0xF0;
          v16 += 16;
        }
        while (!v18);
      }
      else
      {
        VP8TransformWHT(v64, v9);
      }
      v12 = 1;
    }
    v19 = 0;
    v59 = 0;
    LOBYTE(v20) = *v53 & 0xF;
    v52 = v4;
    LOBYTE(v21) = *(_BYTE *)(v4 - 2) & 0xF;
    do
    {
      v60 = v21;
      v62 = v19;
      v22 = 0;
      v23 = 0;
      v24 = v21 & 1;
      do
      {
        v25 = v20;
        v26 = GetCoeffs(a2, v13, v24 + (v20 & 1), v11, v12, &v9[v22]);
        v24 = v26 > (int)v12;
        if (v26 <= (int)v12)
          v27 = 0;
        else
          v27 = -128;
        v20 = (v25 >> 1) | (v24 << 7);
        v28 = *(_WORD *)&v9[v22] != 0;
        if (v26 >= 2)
          v28 = 2;
        if (v26 > 3)
          v28 = 3;
        v23 = v28 | (4 * v23);
        v22 += 32;
      }
      while ((_DWORD)v22 != 128);
      v20 >>= 4;
      v21 = v27 | ((v60 & 0xFE) >> 1);
      v19 = v62 + 1;
      v9 += v22;
      v59 = v23 | (v59 << 8);
    }
    while (v62 != 3);
    v29 = 0;
    v30 = 0;
    v31 = v21 >> 4;
    v32 = 1;
    do
    {
      v56 = v31;
      v57 = v30;
      v58 = v20;
      v33 = 0;
      v54 = v32;
      v55 = v29;
      v34 = *v53 >> (v29 | 4);
      v35 = *(unsigned __int8 *)(v52 - 2) >> (v29 | 4);
      v36 = 1;
      do
      {
        v61 = v36;
        v63 = v35;
        v37 = v35 & 1;
        v38 = 1;
        do
        {
          v39 = v38;
          v40 = GetCoeffs(a2, v51 + 2528, (v34 & 1) + v37, v51 + 32 * v50 + 1076, 0, v9);
          v38 = 0;
          v37 = v40 > 0;
          v34 = (v34 >> 1) | (8 * v37);
          v41 = *(unsigned __int16 *)v9;
          v9 += 32;
          v42 = v41 != 0;
          if (v40 >= 2)
            v42 = 2;
          if (v40 > 3)
            v42 = 3;
          v33 = v42 | (4 * v33);
        }
        while ((v39 & 1) != 0);
        v36 = 0;
        v34 >>= 2;
        LOBYTE(v35) = (v63 >> 1) | (32 * (v40 > 0));
      }
      while ((v61 & 1) != 0);
      v32 = 0;
      v30 = (v33 << (4 * v55)) | v57;
      v20 = ((16 * v34) << v55) | v58;
      v31 = ((v35 & 0x70) << v55) | v56;
      v29 = 2;
    }
    while ((v54 & 1) != 0);
    *v53 = v20;
    *(_BYTE *)(v52 - 2) = v31;
    v6 = v48;
    LODWORD(v5) = v49;
    v43 = v48 + 800 * v49;
    *(_DWORD *)(v43 + 788) = v59;
    *(_DWORD *)(v43 + 792) = v30;
    if ((v30 & 0xAAAA) != 0)
    {
      LOBYTE(v44) = 0;
      v3 = v51;
    }
    else
    {
      v3 = v51;
      v44 = *(_DWORD *)(v51 + 32 * v50 + 1088);
    }
    *(_BYTE *)(v48 + 800 * v49 + 796) = v44;
    v7 = (v30 | v59) != 0;
  }
  if (*(int *)(v3 + 2920) >= 1)
  {
    v45 = *(_QWORD *)(v3 + 2840) + 4 * *(int *)(v3 + 2904);
    v46 = *(_DWORD *)(v3
                    + 8 * *(unsigned __int8 *)(v6 + 800 * (int)v5 + 798)
                    + 4 * *(unsigned __int8 *)(v6 + 800 * (int)v5 + 768)
                    + 2924);
    *(_DWORD *)v45 = v46;
    *(_BYTE *)(v45 + 2) = BYTE2(v46) | v7;
  }
  return *(_DWORD *)(a2 + 40) == 0;
}

uint64_t VP8InitScanline(uint64_t result)
{
  *(_WORD *)(*(_QWORD *)(result + 2832) - 2) = 0;
  *(_DWORD *)(result + 2816) = 0;
  *(_DWORD *)(result + 2904) = 0;
  return result;
}

uint64_t VP8Decode(uint64_t result, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t (**v9)();
  int v10;
  const char *v11;
  uint64_t v12;

  if (!result)
    return result;
  v3 = result;
  if (!a2)
  {
    if (!*(_DWORD *)result)
    {
      result = 0;
      *(_QWORD *)(v3 + 8) = "NULL VP8Io parameter in VP8Decode().";
      *(_QWORD *)v3 = 2;
      return result;
    }
    return 0;
  }
  if (!*(_DWORD *)(result + 4))
  {
    result = VP8GetHeaders(result, (uint64_t)a2);
    if (!(_DWORD)result)
      return result;
    if (!*(_DWORD *)(v3 + 4))
      VP8Decode_cold_1();
  }
  if (VP8EnterCritical((unsigned int *)v3, (uint64_t)a2))
    goto LABEL_7;
  if (!VP8InitFrame(v3, (uint64_t)a2))
    goto LABEL_26;
  *(_DWORD *)(v3 + 2908) = 0;
  if (*(int *)(v3 + 428) < 1)
  {
LABEL_21:
    if (*(int *)(v3 + 200) >= 1)
    {
      v9 = WebPGetWorkerInterface();
      if (!((unsigned int (*)(uint64_t))v9[2])(v3 + 152))
        goto LABEL_26;
    }
    v10 = 1;
    goto LABEL_27;
  }
  v5 = 0;
  while (1)
  {
    v6 = *(_DWORD *)(v3 + 432);
    if (!VP8ParseIntraModeRow(v3 + 16, v3, v4))
    {
      if (*(_DWORD *)v3)
        goto LABEL_26;
      v10 = 0;
      v11 = "Premature end-of-partition0 encountered.";
      goto LABEL_30;
    }
    if (*(_DWORD *)(v3 + 2904) < *(_DWORD *)(v3 + 408))
    {
      v7 = v3 + 48 * (v6 & v5) + 440;
      while (VP8DecodeMB(v3, v7))
      {
        v8 = *(_DWORD *)(v3 + 2904) + 1;
        *(_DWORD *)(v3 + 2904) = v8;
        if (v8 >= *(_DWORD *)(v3 + 408))
          goto LABEL_19;
      }
      if (*(_DWORD *)v3)
        goto LABEL_26;
      v10 = 0;
      v11 = "Premature end-of-file encountered.";
LABEL_30:
      *(_QWORD *)(v3 + 8) = v11;
      v12 = 7;
LABEL_31:
      *(_QWORD *)v3 = v12;
      goto LABEL_27;
    }
LABEL_19:
    *(_WORD *)(*(_QWORD *)(v3 + 2832) - 2) = 0;
    *(_DWORD *)(v3 + 2816) = 0;
    *(_DWORD *)(v3 + 2904) = 0;
    if (!VP8ProcessRow(v3, a2))
      break;
    v5 = *(_DWORD *)(v3 + 2908) + 1;
    *(_DWORD *)(v3 + 2908) = v5;
    if (v5 >= *(_DWORD *)(v3 + 428))
      goto LABEL_21;
  }
  if (!*(_DWORD *)v3)
  {
    v10 = 0;
    *(_QWORD *)(v3 + 8) = "Output aborted.";
    v12 = 6;
    goto LABEL_31;
  }
LABEL_26:
  v10 = 0;
LABEL_27:
  if ((VP8ExitCritical(v3, (uint64_t)a2) & v10) != 0)
  {
    *(_DWORD *)(v3 + 4) = 0;
    return 1;
  }
LABEL_7:
  VP8Clear(v3);
  return 0;
}

uint64_t GetCoeffsAlt(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  __int16 v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  BOOL v55;

  if ((int)a5 > 15)
    return 16;
  v6 = a5;
  v8 = result;
  v9 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * (int)a5) + 11 * (int)a3);
  v11 = *(_DWORD *)(result + 8);
  v10 = *(_DWORD *)(result + 12);
  while (1)
  {
    v12 = *v9;
    if (v10 < 0)
    {
      v13 = *(unint64_t **)(v8 + 16);
      if (!v13)
        VP8ParseIntraModeRow_cold_1(result, a2, a3);
      if ((unint64_t)v13 >= *(_QWORD *)(v8 + 32))
      {
        result = VP8LoadFinalBytes(v8);
        v10 = *(_DWORD *)(v8 + 12);
      }
      else
      {
        v14 = *v13;
        *(_QWORD *)(v8 + 16) = (char *)v13 + 7;
        *((_QWORD *)&v15 + 1) = *(_QWORD *)v8;
        *(_QWORD *)&v15 = bswap64(v14);
        *(_QWORD *)v8 = v15 >> 8;
        v10 += 56;
        *(_DWORD *)(v8 + 12) = v10;
      }
    }
    v16 = (v11 * v12) >> 8;
    v17 = *(_QWORD *)v8;
    v18 = *(_QWORD *)v8 >> v10;
    if (v16 >= v18)
    {
      v20 = (v11 * v12) >> 8;
    }
    else
    {
      v19 = v16 + 1;
      v20 = v11 - v19;
      v17 -= v19 << v10;
      *(_QWORD *)v8 = v17;
    }
    if (v20 <= 0x7E)
    {
      v21 = kVP8Log2Range[v20];
      v20 = kVP8NewRange[v20];
      v10 -= v21;
      *(_DWORD *)(v8 + 12) = v10;
    }
    *(_DWORD *)(v8 + 8) = v20;
    if (v16 >= v18)
      return v6;
    v22 = v6 << 32;
    v23 = (int)v6 + 1;
    while (1)
    {
      v24 = v9[1];
      if (v10 < 0)
      {
        v25 = *(unint64_t **)(v8 + 16);
        if (!v25)
          VP8ParseIntraModeRow_cold_1(result, a2, a3);
        if ((unint64_t)v25 >= *(_QWORD *)(v8 + 32))
        {
          result = VP8LoadFinalBytes(v8);
          v10 = *(_DWORD *)(v8 + 12);
          v17 = *(_QWORD *)v8;
        }
        else
        {
          v26 = *v25;
          *(_QWORD *)(v8 + 16) = (char *)v25 + 7;
          *((_QWORD *)&v27 + 1) = v17;
          *(_QWORD *)&v27 = bswap64(v26);
          v17 = v27 >> 8;
          *(_QWORD *)v8 = v17;
          v10 += 56;
          *(_DWORD *)(v8 + 12) = v10;
        }
      }
      v28 = (v20 * v24) >> 8;
      v29 = v17 >> v10;
      if (v28 >= (v17 >> v10))
      {
        v20 = (v20 * v24) >> 8;
      }
      else
      {
        v30 = v28 + 1;
        v20 -= v30;
        v17 -= v30 << v10;
        *(_QWORD *)v8 = v17;
      }
      if (v20 <= 0x7E)
      {
        v31 = kVP8Log2Range[v20];
        v20 = kVP8NewRange[v20];
        v10 -= v31;
        *(_DWORD *)(v8 + 12) = v10;
      }
      *(_DWORD *)(v8 + 8) = v20;
      if (v28 < v29)
        break;
      v9 = *(unsigned __int8 **)(a2 + 8 * v23);
      v22 += 0x100000000;
      LODWORD(v6) = v6 + 1;
      if ((_DWORD)v23++ == 16)
        return 16;
    }
    v33 = (v6 + 1);
    v34 = *(_QWORD *)(a2 + 8 * (int)v33);
    v35 = v9[2];
    if (v10 < 0)
    {
      v36 = *(unint64_t **)(v8 + 16);
      if (!v36)
        VP8ParseIntraModeRow_cold_1(result, a2, a3);
      if ((unint64_t)v36 >= *(_QWORD *)(v8 + 32))
      {
        result = VP8LoadFinalBytes(v8);
        v33 = (v6 + 1);
        v10 = *(_DWORD *)(v8 + 12);
        v17 = *(_QWORD *)v8;
      }
      else
      {
        v37 = *v36;
        *(_QWORD *)(v8 + 16) = (char *)v36 + 7;
        *((_QWORD *)&v38 + 1) = v17;
        *(_QWORD *)&v38 = bswap64(v37);
        v17 = v38 >> 8;
        *(_QWORD *)v8 = v17;
        v10 += 56;
        *(_DWORD *)(v8 + 12) = v10;
      }
    }
    v39 = (v20 * v35) >> 8;
    v40 = v17 >> v10;
    v41 = v39;
    if (v39 < (v17 >> v10))
    {
      v42 = v39 + 1;
      v41 = v20 - v42;
      *(_QWORD *)v8 = v17 - (v42 << v10);
    }
    if (v41 <= 0x7E)
    {
      v43 = kVP8Log2Range[v41];
      v41 = kVP8NewRange[v41];
      v10 -= v43;
      *(_DWORD *)(v8 + 12) = v10;
    }
    *(_DWORD *)(v8 + 8) = v41;
    if (v39 >= v40)
    {
      v9 = (unsigned __int8 *)(v34 + 11);
      v46 = 1;
      if (v10 < 0)
      {
LABEL_42:
        v47 = *(unint64_t **)(v8 + 16);
        if (!v47)
          VP8ParseIntraModeRow_cold_1(result, a2, a3);
        if ((unint64_t)v47 >= *(_QWORD *)(v8 + 32))
        {
          v50 = v33;
          VP8LoadFinalBytes(v8);
          v33 = v50;
          v10 = *(_DWORD *)(v8 + 12);
        }
        else
        {
          v48 = *v47;
          *(_QWORD *)(v8 + 16) = (char *)v47 + 7;
          *((_QWORD *)&v49 + 1) = *(_QWORD *)v8;
          *(_QWORD *)&v49 = bswap64(v48);
          *(_QWORD *)v8 = v49 >> 8;
          v10 += 56;
        }
      }
    }
    else
    {
      v44 = v9;
      v45 = v33;
      result = GetLargeValue(v8, v44, a3);
      v33 = v45;
      v46 = result;
      v9 = (unsigned __int8 *)(v34 + 22);
      v10 = *(_DWORD *)(v8 + 12);
      if (v10 < 0)
        goto LABEL_42;
    }
    v51 = v10;
    v52 = *(_DWORD *)(v8 + 8);
    v53 = *(_QWORD *)v8;
    v54 = (v52 >> 1) - (*(_QWORD *)v8 >> v10--);
    v11 = (v52 + (v54 >> 31)) | 1;
    *(_DWORD *)(v8 + 8) = v11;
    *(_DWORD *)(v8 + 12) = v10;
    *(_QWORD *)v8 = v53 - ((unint64_t)(((v52 >> 1) + 1) & (v54 >> 31)) << v51);
    *(_WORD *)(a6 + 2 * kZigzag[v22 >> 32]) = ((v46 ^ (v54 >> 31)) - (v54 >> 31))
                                              * *(_WORD *)(a4 + 4 * ((int)v6 > 0));
    result = 16;
    v55 = (int)v6 < 15;
    v6 = v33;
    if (!v55)
      return result;
  }
}

uint64_t GetCoeffsFast(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  int v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  __int16 v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  unsigned int v55;
  unint64_t v56;
  int v57;
  BOOL v58;

  if ((int)a5 > 15)
    return 16;
  v6 = a5;
  v8 = result;
  v9 = (unsigned __int8 *)(*(_QWORD *)(a2 + 8 * (int)a5) + 11 * (int)a3);
  v11 = *(_DWORD *)(result + 8);
  v10 = *(_DWORD *)(result + 12);
  while (1)
  {
    v12 = *v9;
    if (v10 < 0)
    {
      v13 = *(unint64_t **)(v8 + 16);
      if (!v13)
        VP8ParseIntraModeRow_cold_1(result, a2, a3);
      if ((unint64_t)v13 >= *(_QWORD *)(v8 + 32))
      {
        result = VP8LoadFinalBytes(v8);
        v10 = *(_DWORD *)(v8 + 12);
      }
      else
      {
        v14 = *v13;
        *(_QWORD *)(v8 + 16) = (char *)v13 + 7;
        *((_QWORD *)&v15 + 1) = *(_QWORD *)v8;
        *(_QWORD *)&v15 = bswap64(v14);
        *(_QWORD *)v8 = v15 >> 8;
        v10 += 56;
      }
    }
    v16 = (v11 * v12) >> 8;
    v17 = *(_QWORD *)v8;
    v18 = v10;
    v19 = *(_QWORD *)v8 >> v10;
    if (v16 >= v19)
    {
      v20 = v16 + 1;
    }
    else
    {
      v20 = v11 - v16;
      v17 -= (unint64_t)(v16 + 1) << v18;
      *(_QWORD *)v8 = v17;
    }
    v21 = __clz(v20) ^ 0x18;
    v22 = v20 << v21;
    v23 = v18 - v21;
    v24 = v22 - 1;
    *(_DWORD *)(v8 + 8) = v22 - 1;
    *(_DWORD *)(v8 + 12) = v18 - v21;
    if (v16 >= v19)
      return v6;
    v25 = v6 << 32;
    v26 = (int)v6 + 1;
    while (1)
    {
      v27 = v9[1];
      if (v23 < 0)
      {
        v28 = *(unint64_t **)(v8 + 16);
        if (!v28)
          VP8ParseIntraModeRow_cold_1(result, a2, a3);
        if ((unint64_t)v28 >= *(_QWORD *)(v8 + 32))
        {
          result = VP8LoadFinalBytes(v8);
          v23 = *(_DWORD *)(v8 + 12);
          v17 = *(_QWORD *)v8;
        }
        else
        {
          v29 = *v28;
          *(_QWORD *)(v8 + 16) = (char *)v28 + 7;
          *((_QWORD *)&v30 + 1) = v17;
          *(_QWORD *)&v30 = bswap64(v29);
          v17 = v30 >> 8;
          *(_QWORD *)v8 = v17;
          v23 += 56;
        }
      }
      v31 = (v24 * v27) >> 8;
      v32 = v23;
      v33 = v17 >> v23;
      if (v31 >= (v17 >> v23))
      {
        v34 = v31 + 1;
      }
      else
      {
        v34 = v24 - v31;
        v17 -= (unint64_t)(v31 + 1) << v32;
        *(_QWORD *)v8 = v17;
      }
      v35 = __clz(v34) ^ 0x18;
      v36 = v34 << v35;
      v23 = v32 - v35;
      v24 = v36 - 1;
      *(_DWORD *)(v8 + 8) = v36 - 1;
      *(_DWORD *)(v8 + 12) = v32 - v35;
      if (v31 < v33)
        break;
      v9 = *(unsigned __int8 **)(a2 + 8 * v26);
      v25 += 0x100000000;
      LODWORD(v6) = v6 + 1;
      if ((_DWORD)v26++ == 16)
        return 16;
    }
    v38 = *(_QWORD *)(a2 + 8 * ((int)v6 + 1));
    v39 = v9[2];
    if (v23 < 0)
    {
      v40 = *(unint64_t **)(v8 + 16);
      if (!v40)
        VP8ParseIntraModeRow_cold_1(result, a2, a3);
      if ((unint64_t)v40 >= *(_QWORD *)(v8 + 32))
      {
        result = VP8LoadFinalBytes(v8);
        v23 = *(_DWORD *)(v8 + 12);
        v17 = *(_QWORD *)v8;
      }
      else
      {
        v41 = *v40;
        *(_QWORD *)(v8 + 16) = (char *)v40 + 7;
        *((_QWORD *)&v42 + 1) = v17;
        *(_QWORD *)&v42 = bswap64(v41);
        v17 = v42 >> 8;
        *(_QWORD *)v8 = v17;
        v23 += 56;
      }
    }
    v43 = v23;
    v44 = (v24 * v39) >> 8;
    v45 = v43;
    v46 = v17 >> v43;
    if (v44 >= v46)
    {
      v47 = v44 + 1;
    }
    else
    {
      v47 = v24 - v44;
      *(_QWORD *)v8 = v17 - ((unint64_t)(v44 + 1) << v45);
    }
    v48 = __clz(v47) ^ 0x18;
    v49 = v47 << v48;
    v50 = v45 - v48;
    *(_DWORD *)(v8 + 8) = v49 - 1;
    *(_DWORD *)(v8 + 12) = v50;
    if (v44 >= v46)
    {
      v9 = (unsigned __int8 *)(v38 + 11);
      v51 = 1;
      if (v50 < 0)
      {
LABEL_37:
        v52 = *(unint64_t **)(v8 + 16);
        if (!v52)
          VP8ParseIntraModeRow_cold_1(result, a2, a3);
        if ((unint64_t)v52 >= *(_QWORD *)(v8 + 32))
        {
          VP8LoadFinalBytes(v8);
          v50 = *(_DWORD *)(v8 + 12);
        }
        else
        {
          v53 = *v52;
          *(_QWORD *)(v8 + 16) = (char *)v52 + 7;
          *((_QWORD *)&v54 + 1) = *(_QWORD *)v8;
          *(_QWORD *)&v54 = bswap64(v53);
          *(_QWORD *)v8 = v54 >> 8;
          v50 += 56;
        }
      }
    }
    else
    {
      result = GetLargeValue(v8, v9, a3);
      v51 = result;
      v9 = (unsigned __int8 *)(v38 + 22);
      v50 = *(_DWORD *)(v8 + 12);
      if (v50 < 0)
        goto LABEL_37;
    }
    v55 = *(_DWORD *)(v8 + 8);
    v56 = *(_QWORD *)v8;
    v57 = (v55 >> 1) - (*(_QWORD *)v8 >> v50);
    v10 = v50 - 1;
    v11 = (v55 + (v57 >> 31)) | 1;
    *(_DWORD *)(v8 + 8) = v11;
    *(_DWORD *)(v8 + 12) = v50 - 1;
    *(_QWORD *)v8 = v56 - ((unint64_t)(((v55 >> 1) + 1) & (v57 >> 31)) << v50);
    *(_WORD *)(a6 + 2 * kZigzag[v25 >> 32]) = ((v51 ^ (v57 >> 31)) - (v57 >> 31))
                                              * *(_WORD *)(a4 + 4 * ((int)v6 > 0));
    result = 16;
    v58 = (int)v6 < 15;
    v6 = (v6 + 1);
    if (!v58)
      return result;
  }
}

uint64_t GetLargeValue(uint64_t FinalBytes, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t result;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  unsigned int v66;
  int v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  unsigned int v86;
  _BOOL4 v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  _BYTE *v93;
  int v94;
  int v95;
  unsigned __int8 *v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  unsigned int v100;
  int v101;
  unint64_t v102;
  unsigned int v103;
  _BOOL4 v104;
  unsigned int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  unint64_t *v114;
  unint64_t v115;
  __int128 v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;

  v4 = FinalBytes;
  v5 = a2[3];
  v7 = *(_DWORD *)(FinalBytes + 8);
  v6 = *(_DWORD *)(FinalBytes + 12);
  if (v6 < 0)
  {
    v8 = *(unint64_t **)(FinalBytes + 16);
    if (!v8)
      VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
    if ((unint64_t)v8 >= *(_QWORD *)(FinalBytes + 32))
    {
      FinalBytes = VP8LoadFinalBytes(FinalBytes);
      v6 = *(_DWORD *)(v4 + 12);
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(FinalBytes + 16) = (char *)v8 + 7;
      *((_QWORD *)&v10 + 1) = *(_QWORD *)FinalBytes;
      *(_QWORD *)&v10 = bswap64(v9);
      *(_QWORD *)FinalBytes = v10 >> 8;
      v6 += 56;
    }
  }
  v11 = (v7 * v5) >> 8;
  v12 = *(_QWORD *)v4;
  v13 = v6;
  v14 = *(_QWORD *)v4 >> v6;
  if (v11 >= v14)
  {
    v15 = v11 + 1;
  }
  else
  {
    v15 = v7 - v11;
    v12 -= (unint64_t)(v11 + 1) << v13;
    *(_QWORD *)v4 = v12;
  }
  v16 = __clz(v15) ^ 0x18;
  v17 = v15 << v16;
  v18 = v13 - v16;
  v19 = v17 - 1;
  *(_DWORD *)(v4 + 8) = v17 - 1;
  *(_DWORD *)(v4 + 12) = v13 - v16;
  if (v11 >= v14)
  {
    v24 = a2[4];
    if (v18 < 0)
    {
      v25 = *(unint64_t **)(v4 + 16);
      if (!v25)
        VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
      if ((unint64_t)v25 >= *(_QWORD *)(v4 + 32))
      {
        FinalBytes = VP8LoadFinalBytes(v4);
        v18 = *(_DWORD *)(v4 + 12);
        v12 = *(_QWORD *)v4;
      }
      else
      {
        v26 = *v25;
        *(_QWORD *)(v4 + 16) = (char *)v25 + 7;
        *((_QWORD *)&v27 + 1) = v12;
        *(_QWORD *)&v27 = bswap64(v26);
        v12 = v27 >> 8;
        *(_QWORD *)v4 = v12;
        v18 += 56;
      }
    }
    v42 = (v19 * v24) >> 8;
    v43 = v18;
    v44 = v12 >> v18;
    if (v42 >= (v12 >> v18))
    {
      v45 = v42 + 1;
    }
    else
    {
      v45 = v19 - v42;
      v12 -= (unint64_t)(v42 + 1) << v43;
      *(_QWORD *)v4 = v12;
    }
    v46 = __clz(v45) ^ 0x18;
    v47 = v45 << v46;
    v48 = v43 - v46;
    v49 = v47 - 1;
    *(_DWORD *)(v4 + 8) = v47 - 1;
    *(_DWORD *)(v4 + 12) = v43 - v46;
    if (v42 >= v44)
      return 2;
    v50 = a2[5];
    if (v48 < 0)
    {
      v51 = *(unint64_t **)(v4 + 16);
      if (!v51)
        VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
      if ((unint64_t)v51 >= *(_QWORD *)(v4 + 32))
      {
        VP8LoadFinalBytes(v4);
        v48 = *(_DWORD *)(v4 + 12);
        v12 = *(_QWORD *)v4;
      }
      else
      {
        v52 = *v51;
        *(_QWORD *)(v4 + 16) = (char *)v51 + 7;
        *((_QWORD *)&v53 + 1) = v12;
        *(_QWORD *)&v53 = bswap64(v52);
        v12 = v53 >> 8;
        *(_QWORD *)v4 = v12;
        v48 += 56;
      }
    }
    v80 = (v49 * v50) >> 8;
    v81 = v48;
    if (v80 >= (v12 >> v48))
    {
      v82 = v80 + 1;
      result = 3;
    }
    else
    {
      v82 = v49 - v80;
      *(_QWORD *)v4 = v12 - ((unint64_t)(v80 + 1) << v81);
      result = 4;
    }
    goto LABEL_96;
  }
  v20 = a2[6];
  if (v18 < 0)
  {
    v21 = *(unint64_t **)(v4 + 16);
    if (!v21)
      VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
    if ((unint64_t)v21 >= *(_QWORD *)(v4 + 32))
    {
      FinalBytes = VP8LoadFinalBytes(v4);
      v18 = *(_DWORD *)(v4 + 12);
      v12 = *(_QWORD *)v4;
    }
    else
    {
      v22 = *v21;
      *(_QWORD *)(v4 + 16) = (char *)v21 + 7;
      *((_QWORD *)&v23 + 1) = v12;
      *(_QWORD *)&v23 = bswap64(v22);
      v12 = v23 >> 8;
      *(_QWORD *)v4 = v12;
      v18 += 56;
    }
  }
  v28 = (v19 * v20) >> 8;
  v29 = v12 >> v18;
  if (v28 >= (v12 >> v18))
  {
    v30 = v28 + 1;
  }
  else
  {
    v30 = v19 - v28;
    v12 -= (unint64_t)(v28 + 1) << v18;
    *(_QWORD *)v4 = v12;
  }
  v31 = __clz(v30) ^ 0x18;
  v32 = v18 - v31;
  v33 = (v30 << v31) - 1;
  *(_DWORD *)(v4 + 8) = v33;
  *(_DWORD *)(v4 + 12) = v32;
  if (v28 < v29)
  {
    v34 = a2[8];
    if (v32 < 0)
    {
      v35 = *(unint64_t **)(v4 + 16);
      if (!v35)
        VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
      if ((unint64_t)v35 >= *(_QWORD *)(v4 + 32))
      {
        FinalBytes = VP8LoadFinalBytes(v4);
        v32 = *(_DWORD *)(v4 + 12);
        v12 = *(_QWORD *)v4;
      }
      else
      {
        v36 = *v35;
        *(_QWORD *)(v4 + 16) = (char *)v35 + 7;
        *((_QWORD *)&v37 + 1) = v12;
        *(_QWORD *)&v37 = bswap64(v36);
        v12 = v37 >> 8;
        *(_QWORD *)v4 = v12;
        v32 += 56;
      }
    }
    v55 = (v33 * v34) >> 8;
    v56 = v12 >> v32;
    if (v55 >= (v12 >> v32))
    {
      v57 = v55 + 1;
      v58 = 9;
    }
    else
    {
      v57 = v33 - v55;
      v12 -= (unint64_t)(v55 + 1) << v32;
      *(_QWORD *)v4 = v12;
      v58 = 10;
    }
    v59 = __clz(v57) ^ 0x18;
    v60 = v32 - v59;
    v61 = (v57 << v59) - 1;
    *(_DWORD *)(v4 + 8) = v61;
    *(_DWORD *)(v4 + 12) = v60;
    v62 = a2[v58];
    if (v60 < 0)
    {
      v63 = *(unint64_t **)(v4 + 16);
      if (!v63)
        VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
      if ((unint64_t)v63 >= *(_QWORD *)(v4 + 32))
      {
        FinalBytes = VP8LoadFinalBytes(v4);
        v60 = *(_DWORD *)(v4 + 12);
        v12 = *(_QWORD *)v4;
      }
      else
      {
        v64 = *v63;
        *(_QWORD *)(v4 + 16) = (char *)v63 + 7;
        *((_QWORD *)&v65 + 1) = v12;
        *(_QWORD *)&v65 = bswap64(v64);
        v12 = v65 >> 8;
        *(_QWORD *)v4 = v12;
        v60 += 56;
      }
    }
    v83 = (v61 * v62) >> 8;
    v84 = v60;
    v85 = v12 >> v60;
    if (v83 >= v85)
    {
      v86 = v83 + 1;
    }
    else
    {
      v86 = v61 - v83;
      v12 -= (unint64_t)(v83 + 1) << v84;
      *(_QWORD *)v4 = v12;
    }
    v87 = v83 < v85;
    v88 = __clz(v86) ^ 0x18;
    v89 = v86 << v88;
    v90 = v84 - v88;
    v91 = v89 - 1;
    *(_DWORD *)(v4 + 8) = v89 - 1;
    *(_DWORD *)(v4 + 12) = v90;
    v92 = v87 | (2 * (v55 < v56));
    v93 = *(&kCat3456 + v92);
    v94 = *v93;
    if (*v93)
    {
      v95 = 0;
      v96 = v93 + 1;
      do
      {
        if (v90 < 0)
        {
          v97 = *(unint64_t **)(v4 + 16);
          if (!v97)
            VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
          if ((unint64_t)v97 >= *(_QWORD *)(v4 + 32))
          {
            FinalBytes = VP8LoadFinalBytes(v4);
            v90 = *(_DWORD *)(v4 + 12);
            v12 = *(_QWORD *)v4;
          }
          else
          {
            v98 = *v97;
            *(_QWORD *)(v4 + 16) = (char *)v97 + 7;
            *((_QWORD *)&v99 + 1) = v12;
            *(_QWORD *)&v99 = bswap64(v98);
            v12 = v99 >> 8;
            *(_QWORD *)v4 = v12;
            v90 += 56;
          }
        }
        v100 = (v91 * v94) >> 8;
        v101 = v90;
        v102 = v12 >> v90;
        if (v100 >= v102)
        {
          v103 = v100 + 1;
        }
        else
        {
          v103 = v91 - v100;
          v12 -= (unint64_t)(v100 + 1) << v101;
          *(_QWORD *)v4 = v12;
        }
        v104 = v100 < v102;
        v105 = __clz(v103) ^ 0x18;
        v106 = v103 << v105;
        v90 = v101 - v105;
        v91 = v106 - 1;
        *(_DWORD *)(v4 + 8) = v106 - 1;
        *(_DWORD *)(v4 + 12) = v90;
        v95 = v104 | (2 * v95);
        v107 = *v96++;
        v94 = v107;
      }
      while (v107);
    }
    else
    {
      v95 = 0;
    }
    return (v95 + (8 << v92) + 3);
  }
  v38 = a2[7];
  if (v32 < 0)
  {
    v39 = *(unint64_t **)(v4 + 16);
    if (!v39)
      VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
    if ((unint64_t)v39 >= *(_QWORD *)(v4 + 32))
    {
      FinalBytes = VP8LoadFinalBytes(v4);
      v32 = *(_DWORD *)(v4 + 12);
      v12 = *(_QWORD *)v4;
    }
    else
    {
      v40 = *v39;
      *(_QWORD *)(v4 + 16) = (char *)v39 + 7;
      *((_QWORD *)&v41 + 1) = v12;
      *(_QWORD *)&v41 = bswap64(v40);
      v12 = v41 >> 8;
      *(_QWORD *)v4 = v12;
      v32 += 56;
    }
  }
  v66 = (v33 * v38) >> 8;
  v67 = v32;
  v68 = v12 >> v32;
  if (v66 >= (v12 >> v32))
  {
    v69 = v66 + 1;
  }
  else
  {
    v69 = v33 - v66;
    v12 -= (unint64_t)(v66 + 1) << v67;
    *(_QWORD *)v4 = v12;
  }
  v70 = __clz(v69) ^ 0x18;
  v71 = v69 << v70;
  v72 = v67 - v70;
  v73 = v71 - 1;
  *(_DWORD *)(v4 + 8) = v71 - 1;
  *(_DWORD *)(v4 + 12) = v67 - v70;
  if (v66 >= v68)
  {
    if (v72 < 0)
    {
      v77 = *(unint64_t **)(v4 + 16);
      if (!v77)
        VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
      if ((unint64_t)v77 >= *(_QWORD *)(v4 + 32))
      {
        VP8LoadFinalBytes(v4);
        v72 = *(_DWORD *)(v4 + 12);
        v12 = *(_QWORD *)v4;
      }
      else
      {
        v78 = *v77;
        *(_QWORD *)(v4 + 16) = (char *)v77 + 7;
        *((_QWORD *)&v79 + 1) = v12;
        *(_QWORD *)&v79 = bswap64(v78);
        v12 = v79 >> 8;
        *(_QWORD *)v4 = v12;
        v72 += 56;
      }
    }
    v117 = (159 * v73) >> 8;
    v81 = v72;
    if (v117 >= (v12 >> v72))
    {
      v82 = v117 + 1;
      result = 5;
    }
    else
    {
      v82 = v73 - v117;
      *(_QWORD *)v4 = v12 - ((unint64_t)(v117 + 1) << v81);
      result = 6;
    }
LABEL_96:
    v118 = __clz(v82) ^ 0x18;
    *(_DWORD *)(v4 + 8) = (v82 << v118) - 1;
    *(_DWORD *)(v4 + 12) = v81 - v118;
    return result;
  }
  if (v72 < 0)
  {
    v74 = *(unint64_t **)(v4 + 16);
    if (!v74)
      VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
    if ((unint64_t)v74 >= *(_QWORD *)(v4 + 32))
    {
      FinalBytes = VP8LoadFinalBytes(v4);
      v72 = *(_DWORD *)(v4 + 12);
      v12 = *(_QWORD *)v4;
    }
    else
    {
      v75 = *v74;
      *(_QWORD *)(v4 + 16) = (char *)v74 + 7;
      *((_QWORD *)&v76 + 1) = v12;
      *(_QWORD *)&v76 = bswap64(v75);
      v12 = v76 >> 8;
      *(_QWORD *)v4 = v12;
      v72 += 56;
    }
  }
  v108 = (165 * v73) >> 8;
  if (v108 >= (v12 >> v72))
  {
    v109 = v108 + 1;
    v110 = 7;
  }
  else
  {
    v109 = v73 - v108;
    v12 -= (unint64_t)(v108 + 1) << v72;
    *(_QWORD *)v4 = v12;
    v110 = 9;
  }
  v111 = __clz(v109) ^ 0x18;
  v112 = v72 - v111;
  v113 = (v109 << v111) - 1;
  *(_DWORD *)(v4 + 8) = v113;
  *(_DWORD *)(v4 + 12) = v112;
  if (v112 < 0)
  {
    v114 = *(unint64_t **)(v4 + 16);
    if (!v114)
      VP8ParseIntraModeRow_cold_1(FinalBytes, (uint64_t)a2, a3);
    if ((unint64_t)v114 >= *(_QWORD *)(v4 + 32))
    {
      VP8LoadFinalBytes(v4);
      v112 = *(_DWORD *)(v4 + 12);
      v12 = *(_QWORD *)v4;
    }
    else
    {
      v115 = *v114;
      *(_QWORD *)(v4 + 16) = (char *)v114 + 7;
      *((_QWORD *)&v116 + 1) = v12;
      *(_QWORD *)&v116 = bswap64(v115);
      v12 = v116 >> 8;
      *(_QWORD *)v4 = v12;
      v112 += 56;
    }
  }
  v119 = (145 * v113) >> 8;
  v120 = v112;
  v121 = v12 >> v112;
  if (v119 >= v121)
  {
    v122 = v119 + 1;
  }
  else
  {
    v122 = v113 - v119;
    *(_QWORD *)v4 = v12 - ((unint64_t)(v119 + 1) << v120);
  }
  v123 = __clz(v122) ^ 0x18;
  *(_DWORD *)(v4 + 8) = (v122 << v123) - 1;
  *(_DWORD *)(v4 + 12) = v120 - v123;
  if (v119 >= v121)
    return v110;
  else
    return v110 + 1;
}

void VP8SetError_cold_1()
{
  __assert_rtn("VP8SetError", "vp8_dec.c", 90, "dec->incremental_ || error != VP8_STATUS_SUSPENDED");
}

void ResetSegmentHeader_cold_1()
{
  __assert_rtn("ResetSegmentHeader", "vp8_dec.c", 153, "hdr != NULL");
}

void VP8Decode_cold_1()
{
  __assert_rtn("VP8Decode", "vp8_dec.c", 691, "dec->ready_");
}

void compute_ideal_colors_and_weights_1plane(uint64_t a1, unsigned __int16 *a2, _BYTE *a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  unsigned __int8 v13;
  int16x4_t v14;
  uint16x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t v21;
  float v22;
  uint64_t v23;
  unsigned __int16 *v24;
  int8x16_t v25;
  char v26;
  float v27;
  int32x4_t *v28;
  float32x4_t v29;
  int8x16_t v30;
  int32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float v35;
  float v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  __int32 *v40;
  float32x4_t v41;
  int8x16_t v42;
  float v43;
  float v44;
  float v45;
  float32x4_t *v46;
  uint64_t v47;
  float v48;
  float v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  int v58;
  float32x4_t v59;
  float32x4_t v60;
  _OWORD v61[8];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v11 = *(float32x4_t *)(a1 + 3488);
  v12 = *(float32x4_t *)(a1 + 3520);
  if ((v13 & 1) == 0)
  {
    v59 = *(float32x4_t *)(a1 + 3520);
    v60 = *(float32x4_t *)(a1 + 3488);
    v12 = v59;
    v11 = v60;
    if (v58)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v12 = v59;
      v11 = v60;
    }
  }
  v14 = vmovn_s32(vceqq_f32(v11, v12));
  v15.i32[0] = 0;
  v15.i16[2] = 0;
  v15.i16[3] = v14.i16[3];
  v16 = (int8x16_t)vmovl_u16(v15);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v18 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v16, v17), (uint32x4_t)mask(vmask4)::shift);
  v18.i32[0] = vaddvq_s32(v18);
  if (v18.i32[0])
  {
    compute_ideal_colors_and_weights_3_comp(a1, a2, (uint64_t)a3, 3, *(double *)v18.i64, *(double *)&mask(vmask4)::shift, a6, a7, a8);
  }
  else
  {
    v19 = *(unsigned __int8 *)(a1 + 3456);
    if (!*(_BYTE *)(a1 + 3456))
      compute_ideal_colors_and_weights_1plane();
    v20 = *a2;
    if (!*a2)
      compute_ideal_colors_and_weights_1plane();
    v21 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), *(float32x2_t *)(a1 + 3536));
    v22 = 0.25 * vpadd_f32(v21, v21).f32[0];
    memset(v61, 0, sizeof(v61));
    v25 = compute_avgs_and_dirs_4_comp(a2, (float32x4_t *)a1, (uint64_t)v61);
    v23 = 0;
    v24 = a2 + 112;
    v25.i32[0] = 0;
    v26 = 1;
    v27 = 0.0;
    do
    {
      v28 = (int32x4_t *)&v61[2 * v23];
      v29 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v25, vaddq_f32((float32x4_t)vdupq_laneq_s32(v28[1], 2), vaddq_f32((float32x4_t)v28[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v28[1]), (int8x16_t)v28[1]);
      v30 = (int8x16_t)vmulq_f32(v29, v29);
      *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v30.i8);
      v31 = (int32x2_t)vpadd_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8);
      if (*(float *)v31.i32 == 0.0)
      {
        v32.i64[0] = 0x3F0000003F000000;
        v32.i64[1] = 0x3F0000003F000000;
      }
      else
      {
        v32 = vdivq_f32(v29, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v31, 0)));
      }
      v33 = *(float32x4_t *)v28;
      v34 = *((unsigned __int8 *)a2 + v23 + 4);
      v35 = -1.0e10;
      v36 = 1.0e10;
      if (*((_BYTE *)a2 + v23 + 4))
      {
        v37 = v24;
        v38 = *((unsigned __int8 *)a2 + v23 + 4);
        v36 = 1.0e10;
        v35 = -1.0e10;
        do
        {
          v39 = *(unsigned __int8 *)v37;
          v37 = (unsigned __int16 *)((char *)v37 + 1);
          v40 = (__int32 *)(a1 + 4 * v39);
          v41.i32[0] = *v40;
          v41.i32[1] = v40[216];
          v41.i32[2] = v40[432];
          v41.i32[3] = v40[648];
          v42 = (int8x16_t)vmulq_f32(v32, vsubq_f32(v41, v33));
          *(float32x2_t *)v42.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), *(float32x2_t *)v42.i8);
          v43 = vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8).f32[0];
          *(float *)&a3[4 * v39 + 160] = v43;
          if (v43 < v36)
            v36 = v43;
          if (v43 > v35)
            v35 = v43;
          --v38;
        }
        while (v38);
      }
      if (v35 <= v36)
        v44 = 0.0000001;
      else
        v44 = v35;
      if (v35 <= v36)
        v36 = 0.0;
      v45 = v44 - v36;
      if (v23)
        v26 &= (float)(v45 * v45) == v27;
      else
        v27 = v45 * v45;
      v46 = (float32x4_t *)&a3[16 * v23];
      v46[2] = vaddq_f32(v33, vmulq_n_f32(v32, v36));
      v46[6] = vaddq_f32(v33, vmulq_n_f32(v32, v44));
      if ((_DWORD)v34)
      {
        v47 = 0;
        v48 = v22 * (float)(v45 * v45);
        v49 = 1.0 / v45;
        do
        {
          v50 = (float *)&a3[4 * *((unsigned __int8 *)v24 + v47)];
          v51 = v49 * (float)(v50[40] - v36);
          v52 = fmaxf(v51, 0.0);
          if (v51 <= 1.0)
            v53 = v52;
          else
            v53 = 1.0;
          v50[40] = v53;
          v50[256] = v48;
          ++v47;
        }
        while (v34 != v47);
      }
      ++v23;
      v24 += 108;
    }
    while (v23 != v20);
    v54 = ((_WORD)v19 + 3) & 0x1FC;
    if (v54 > v19)
    {
      v55 = v19 - v54;
      v56 = &a3[4 * v19];
      do
      {
        *((_DWORD *)v56 + 40) = 0;
        *((_DWORD *)v56 + 256) = 0;
        v56 += 4;
      }
      while (!__CFADD__(v55++, 1));
    }
    *a3 = v26 & 1;
  }
}

void compute_ideal_colors_and_weights_3_comp(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v11;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  float v21;
  int8x16_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  char v27;
  float v28;
  int32x4_t *v29;
  float32x4_t v30;
  int8x16_t v31;
  int32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float v36;
  float v37;
  uint64_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  float32x4_t v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v61;
  float32x2_t v62;
  double v63;
  float32x2_t v64;
  _OWORD v65[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  *(_DWORD *)(a3 + 16) = v9;
  if (!v9)
    compute_ideal_colors_and_weights_3_comp();
  v11 = *(unsigned __int8 *)(a1 + 3456);
  if (!*(_BYTE *)(a1 + 3456))
    compute_ideal_colors_and_weights_3_comp();
  v15.i64[0] = 0;
  v15.i32[3] = 0;
  memset(v65, 0, sizeof(v65));
  switch(a4)
  {
    case 2:
      v15.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      *(float32x2_t *)v15.i8 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      v18 = a1 + 864;
LABEL_9:
      v17 = a1;
      goto LABEL_10;
    case 1:
      v19.i32[0] = *(_OWORD *)(a1 + 3536);
      v19.i32[1] = *(_QWORD *)(a1 + 3544);
      v19.i32[2] = HIDWORD(*(_OWORD *)(a1 + 3536));
      v19.i32[3] = 0;
      *(float32x2_t *)v15.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v19.i8);
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      v18 = a1 + 1728;
      goto LABEL_9;
    case 0:
      v16 = *(int8x16_t *)(a1 + 3536);
      v16.i32[3] = 0;
      *(float32x2_t *)v15.i8 = vadd_f32(*(float32x2_t *)(a1 + 3536), (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      v15.i32[0] = vpadd_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8).u32[0];
      v17 = a1 + 864;
      v18 = a1 + 1728;
LABEL_10:
      v20 = a1 + 2592;
      v21 = *(float *)v15.i32 * 0.33333;
      goto LABEL_11;
  }
  v61 = *(int8x16_t *)(a1 + 3536);
  v61.i32[3] = 0;
  v64 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
  v62 = vadd_f32(*(float32x2_t *)(a1 + 3536), v64);
  v63 = COERCE_DOUBLE(vpadd_f32(v62, v62));
  v18 = a1 + 864;
  v20 = a1 + 1728;
  v64.i32[0] = 1051372203;
  v21 = 0.33333 * *(float *)&v63;
  if (a4 == 3)
  {
    v22 = compute_avgs_and_dirs_3_comp_rgb(a2, a1, (uint64_t)v65, v63, *(double *)&v64, a7, a8, a9);
    v17 = a1;
    goto LABEL_12;
  }
  v17 = a1;
LABEL_11:
  v22 = compute_avgs_and_dirs_3_comp(a2, (float32x4_t *)a1, a4, (uint64_t)v65);
LABEL_12:
  v24 = 0;
  if (v9 <= 1)
    v25 = 1;
  else
    v25 = v9;
  v26 = a2 + 112;
  v22.i32[0] = 0;
  v27 = 1;
  v28 = 0.0;
  do
  {
    v29 = (int32x4_t *)&v65[2 * v24];
    v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v22, vaddq_f32((float32x4_t)vdupq_laneq_s32(v29[1], 2), vaddq_f32((float32x4_t)v29[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29[1].i8, 1)))), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v29[1]), (int8x16_t)v29[1]);
    v31 = (int8x16_t)vmulq_f32(v30, v30);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    v32 = (int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8);
    v33 = (float32x4_t)xmmword_1882323C0;
    if (*(float *)v32.i32 != 0.0)
      v33 = vdivq_f32(v30, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v32, 0)));
    v34 = *(float32x4_t *)v29;
    v35 = *((unsigned __int8 *)a2 + v24 + 4);
    v36 = -1.0e10;
    v37 = 1.0e10;
    if (*((_BYTE *)a2 + v24 + 4))
    {
      v38 = *((unsigned __int8 *)a2 + v24 + 4);
      v39 = v26;
      v37 = 1.0e10;
      v36 = -1.0e10;
      do
      {
        v40 = *(unsigned __int8 *)v39;
        v39 = (unsigned __int16 *)((char *)v39 + 1);
        v23.i32[0] = *(_DWORD *)(v17 + 4 * v40);
        v23.i32[1] = *(_DWORD *)(v18 + 4 * v40);
        v23.i32[2] = *(_DWORD *)(v20 + 4 * v40);
        v41 = vmulq_f32(v33, vsubq_f32(v23, v34));
        v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)));
        *(_DWORD *)(a3 + 4 * v40 + 160) = v23.i32[0];
        if (v23.f32[0] < v37)
          v37 = v23.f32[0];
        if (v23.f32[0] > v36)
          v36 = v23.f32[0];
        --v38;
      }
      while (v38);
    }
    if (v36 <= v37)
    {
      v36 = 0.0000001;
      v37 = 0.0;
    }
    v42 = v36 - v37;
    if (v24)
      v27 &= (float)(v42 * v42) == v28;
    else
      v28 = v42 * v42;
    if ((_DWORD)v35)
    {
      v43 = 0;
      v44 = v21 * (float)(v42 * v42);
      v45 = 1.0 / v42;
      do
      {
        v46 = a3 + 4 * *((unsigned __int8 *)v26 + v43);
        v47 = v45 * (float)(*(float *)(v46 + 160) - v37);
        v48 = fmaxf(v47, 0.0);
        if (v47 <= 1.0)
          v49 = v48;
        else
          v49 = 1.0;
        *(float *)(v46 + 160) = v49;
        *(float *)(v46 + 1024) = v44;
        ++v43;
      }
      while (v35 != v43);
    }
    v50 = (int8x16_t)vaddq_f32(v34, vmulq_n_f32(v33, v37));
    v51 = (int8x16_t)vaddq_f32(v34, vmulq_n_f32(v33, v36));
    v52 = *(int8x16_t *)(a1 + 3488);
    v53 = *(int8x16_t *)(a1 + 3520);
    if (a4)
    {
      if (a4 == 1)
      {
        v56 = vzip1q_s32((int32x4_t)v52, (int32x4_t)v50);
        *(int32x4_t *)(a3 + 16 * v24 + 32) = vtrn2q_s32(v56, vuzp1q_s32(v56, (int32x4_t)v50));
        v57 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v51);
        v55 = (int8x16_t)vtrn2q_s32(v57, vuzp1q_s32(v57, (int32x4_t)v51));
      }
      else if (a4 == 2)
      {
        v54 = vtrn1q_s32((int32x4_t)v52, (int32x4_t)v50);
        v54.i64[0] = v50.i64[0];
        *(int32x4_t *)(a3 + 16 * v24 + 32) = v54;
        v55 = (int8x16_t)vtrn1q_s32((int32x4_t)v53, (int32x4_t)v51);
        v55.i64[0] = v51.i64[0];
      }
      else
      {
        v50.i32[3] = HIDWORD(*(_OWORD *)(a1 + 3488));
        *(int8x16_t *)(a3 + 16 * v24 + 32) = v50;
        v51.i32[3] = v53.i32[3];
        v55 = v51;
      }
    }
    else
    {
      *(int8x16_t *)(a3 + 16 * v24 + 32) = vextq_s8(vextq_s8(v52, v52, 4uLL), v50, 0xCuLL);
      v55 = vextq_s8(vextq_s8(v53, v53, 4uLL), v51, 0xCuLL);
    }
    *(int8x16_t *)(a3 + 16 * v24++ + 96) = v55;
    v26 += 108;
  }
  while (v24 != v25);
  if ((((_WORD)v11 + 3) & 0x1FCu) > v11)
  {
    v58 = a3 + 4 * v11;
    v59 = v11 - (((_WORD)v11 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v58 + 160) = 0;
      *(_DWORD *)(v58 + 1024) = 0;
      v58 += 4;
    }
    while (!__CFADD__(v59++, 1));
  }
  *(_BYTE *)a3 = v27 & 1;
}

uint64_t compute_ideal_colors_and_weights_2planes(block_size_descriptor *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  char *partition_info;
  double v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  uint32x4_t *v16;
  int16x4_t v17;
  uint16x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  int v30;
  float32x4_t v31;
  float32x4_t v32;

  partition_info = block_size_descriptor::get_partition_info(a1, 1u, 0);
  v13 = *(float32x4_t *)(a2 + 3488);
  v14 = *(float32x4_t *)(a2 + 3520);
  v16 = (uint32x4_t *)&unk_1EDF03000;
  if ((v15 & 1) == 0)
  {
    v31 = *(float32x4_t *)(a2 + 3520);
    v32 = *(float32x4_t *)(a2 + 3488);
    v14 = v31;
    v13 = v32;
    v16 = (uint32x4_t *)&unk_1EDF03000;
    if (v30)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v14 = v31;
      v13 = v32;
      v16 = (uint32x4_t *)&unk_1EDF03000;
    }
  }
  if (a3 >= 4)
    compute_ideal_colors_and_weights_2planes();
  v17 = vmovn_s32(vceqq_f32(v13, v14));
  v18.i32[0] = 0;
  v18.i16[2] = 0;
  v18.i16[3] = v17.i16[3];
  v19 = (int8x16_t)vmovl_u16(v18);
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  v21 = (uint32x4_t)vandq_s8(v19, v20);
  v22 = v16[59];
  v23 = (int32x4_t)vshlq_u32(v21, v22);
  v23.i32[0] = vaddvq_s32(v23);
  if (a3 == 2)
  {
    if (v23.i32[0])
    {
      compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 0, 1u, *(double *)v23.i64, *(double *)v22.i64, v10, v11);
      v24 = 2;
      return compute_ideal_colors_and_weights_1_comp(a2, (unsigned __int16 *)partition_info, a5, v24);
    }
    v24 = 2;
    v25 = a2;
    v26 = (unsigned __int16 *)partition_info;
    v27 = a4;
    v28 = 2;
LABEL_18:
    compute_ideal_colors_and_weights_3_comp(v25, v26, v27, v28, *(double *)v23.i64, *(double *)v22.i64, v10, *(double *)v11.i64, v12);
    return compute_ideal_colors_and_weights_1_comp(a2, (unsigned __int16 *)partition_info, a5, v24);
  }
  if (a3 == 1)
  {
    if (v23.i32[0])
    {
      compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 0, 2u, *(double *)v23.i64, *(double *)v22.i64, v10, v11);
      v24 = 1;
      return compute_ideal_colors_and_weights_1_comp(a2, (unsigned __int16 *)partition_info, a5, v24);
    }
    v24 = 1;
    v25 = a2;
    v26 = (unsigned __int16 *)partition_info;
    v27 = a4;
    v28 = 1;
    goto LABEL_18;
  }
  if (a3)
  {
    if (v23.i32[0])
      compute_ideal_colors_and_weights_2planes();
    v24 = 3;
    v25 = a2;
    v26 = (unsigned __int16 *)partition_info;
    v27 = a4;
    v28 = 3;
    goto LABEL_18;
  }
  if (v23.i32[0])
    compute_ideal_colors_and_weights_2_comp(a2, partition_info, a4, 1u, 2u, *(double *)v23.i64, *(double *)v22.i64, v10, v11);
  else
    compute_ideal_colors_and_weights_3_comp(a2, (unsigned __int16 *)partition_info, a4, 0, *(double *)v23.i64, *(double *)v22.i64, v10, *(double *)v11.i64, v12);
  v24 = 0;
  return compute_ideal_colors_and_weights_1_comp(a2, (unsigned __int16 *)partition_info, a5, v24);
}

char *block_size_descriptor::get_partition_info(block_size_descriptor *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  char *v5;

  if (a2 < 2)
  {
    v3 = 0;
  }
  else
  {
    v3 = *((unsigned __int16 *)this + 1024 * (unint64_t)(a2 - 2) + a3 + 7330328);
    if (v3 == 0xFFFF)
LABEL_10:
      block_size_descriptor::get_partition_info();
  }
  if (v3 >= *((_DWORD *)this + a2 + 11))
    goto LABEL_10;
  v4 = (a2 << 10) - 2048;
  if (a2 == 1)
    v4 = 3072;
  v5 = (char *)this + 1088 * v4 + 11317232;
  if (*(unsigned __int16 *)&v5[1088 * v3 + 2] != a3)
    block_size_descriptor::get_partition_info();
  return &v5[1088 * v3];
}

_WORD *compute_ideal_colors_and_weights_2_comp(uint64_t a1, _WORD *a2, uint64_t a3, unsigned int a4, unsigned int a5, double a6, double a7, double a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v11;
  double v16;
  float32x2_t v17;
  float32x2_t v18;
  uint64_t v19;
  const float *v20;
  float32x2_t v21;
  float32x2_t v22;
  uint64_t v23;
  float32x2_t v24;
  float v25;
  _WORD *result;
  int8x16_t v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  float v35;
  int8x16_t *v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int32x2_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float v45;
  float v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  float v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  float v56;
  float v57;
  int32x2_t v58;
  int32x2_t v59;
  int8x16_t v60;
  int8x16_t *v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v65[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int16)*a2;
  *(_DWORD *)(a3 + 16) = v9;
  if (!v9)
    compute_ideal_colors_and_weights_2_comp();
  v11 = *(unsigned __int8 *)(a1 + 3456);
  if (!*(_BYTE *)(a1 + 3456))
    compute_ideal_colors_and_weights_2_comp();
  memset(v65, 0, sizeof(v65));
  if (!a4 && a5 == 1)
  {
    HIDWORD(v16) = 0;
    v17 = vadd_f32(*(float32x2_t *)(a1 + 3536), 0);
    v18 = vpadd_f32(v17, v17);
    v19 = a1 + 864;
LABEL_9:
    v23 = a1;
    goto LABEL_13;
  }
  if (!a4 && a5 == 2)
  {
    v20 = (const float *)(a1 + 3536);
    *(float32x2x2_t *)(&v16 - 1) = vld2_f32(v20);
    a8 = 0.0;
    v22 = vadd_f32(v21, 0);
    v18 = vpadd_f32(v22, v22);
    v19 = a1 + 1728;
    goto LABEL_9;
  }
  if (a4 != 1 || a5 != 2)
    compute_ideal_colors_and_weights_2_comp();
  HIDWORD(v16) = 0;
  v24 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)(a1 + 3536), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a1 + 3536), *(int8x16_t *)(a1 + 3536), 8uLL), 4uLL), 0);
  v18 = vpadd_f32(v24, v24);
  v23 = a1 + 864;
  v19 = a1 + 1728;
LABEL_13:
  LODWORD(v16) = 0.5;
  v25 = v18.f32[0] * 0.5;
  result = compute_avgs_and_dirs_2_comp(a2, (int8x16_t *)a1, a4, a5, (uint64_t)v65, *(double *)&v18, v16, a8, a9);
  v28 = 0;
  v29 = (float32x4_t)vdupq_n_s32(a5);
  v30 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_18820BF90);
  v31 = (int8x16_t)vceqq_s32((int32x4_t)v29, (int32x4_t)xmmword_18820BF90);
  if (v9 <= 1)
    v32 = 1;
  else
    v32 = v9;
  v33 = (unsigned __int8 *)(a2 + 112);
  v29.i32[0] = 0;
  v34 = 1;
  v35 = 0.0;
  do
  {
    v36 = (int8x16_t *)&v65[2 * v28];
    v37 = v36[1];
    v38 = (float32x4_t)vextq_s8(v37, v37, 8uLL);
    *(float32x2_t *)v38.f32 = vadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v37.i8);
    *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32);
    v39 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v29, v38), 0), (int8x16_t)vsubq_f32((float32x4_t)0, (float32x4_t)v37), v37);
    v40 = (int8x16_t)vmulq_f32(v39, v39);
    *(float32x2_t *)v40.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL), *(float32x2_t *)v40.i8);
    v41 = (int32x2_t)vpadd_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8);
    v42 = (float32x4_t)xmmword_1882323D0;
    if (*(float *)v41.i32 != 0.0)
      v42 = vdivq_f32(v39, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v41, 0)));
    v43 = *(float32x4_t *)v36;
    v44 = *((unsigned __int8 *)a2 + v28 + 4);
    v45 = -1.0e10;
    v46 = 1.0e10;
    if (*((_BYTE *)a2 + v28 + 4))
    {
      v47 = *((unsigned __int8 *)a2 + v28 + 4);
      v48 = v33;
      v46 = 1.0e10;
      v45 = -1.0e10;
      do
      {
        v49 = *v48++;
        v27.i32[0] = *(_DWORD *)(v23 + 4 * v49);
        v27.i32[1] = *(_DWORD *)(v19 + 4 * v49);
        v27 = (int8x16_t)vmulq_f32(v42, vsubq_f32((float32x4_t)v27, v43));
        *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
        *(float *)v27.i32 = vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8).f32[0];
        *(_DWORD *)(a3 + 4 * v49 + 160) = v27.i32[0];
        if (*(float *)v27.i32 < v46)
          v46 = *(float *)v27.i32;
        if (*(float *)v27.i32 > v45)
          v45 = *(float *)v27.i32;
        --v47;
      }
      while (v47);
    }
    if (v45 <= v46)
    {
      v45 = 0.0000001;
      v46 = 0.0;
    }
    v50 = v45 - v46;
    if (v28)
      v34 &= (float)(v50 * v50) == v35;
    else
      v35 = v50 * v50;
    if ((_DWORD)v44)
    {
      v51 = 0;
      v52 = v25 * (float)(v50 * v50);
      v53 = 1.0 / v50;
      do
      {
        v54 = a3 + 4 * v33[v51];
        v55 = v53 * (float)(*(float *)(v54 + 160) - v46);
        v56 = fmaxf(v55, 0.0);
        if (v55 <= 1.0)
          v57 = v56;
        else
          v57 = 1.0;
        *(float *)(v54 + 160) = v57;
        *(float *)(v54 + 1024) = v52;
        ++v51;
      }
      while (v44 != v51);
    }
    v58 = (int32x2_t)vaddq_f32(v43, vmulq_n_f32(v42, v46)).u64[0];
    v59 = (int32x2_t)vaddq_f32(v43, vmulq_n_f32(v42, v45)).u64[0];
    v27 = vandq_s8((int8x16_t)vdupq_lane_s32(v59, 0), v30);
    v60 = vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3520), v30), v27);
    v61 = (int8x16_t *)(a3 + 16 * v28);
    v61[2] = vorrq_s8(vbicq_s8(vorrq_s8(vbicq_s8(*(int8x16_t *)(a1 + 3488), v30), vandq_s8((int8x16_t)vdupq_lane_s32(v58, 0), v30)), v31), vandq_s8((int8x16_t)vdupq_lane_s32(v58, 1), v31));
    v61[6] = vorrq_s8(vbicq_s8(v60, v31), vandq_s8((int8x16_t)vdupq_lane_s32(v59, 1), v31));
    ++v28;
    v33 += 216;
  }
  while (v28 != v32);
  if ((((_WORD)v11 + 3) & 0x1FCu) > v11)
  {
    v62 = a3 + 4 * v11;
    v63 = v11 - (((_WORD)v11 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v62 + 160) = 0;
      *(_DWORD *)(v62 + 1024) = 0;
      v62 += 4;
    }
    while (!__CFADD__(v63++, 1));
  }
  *(_BYTE *)a3 = v34 & 1;
  return result;
}

uint64_t compute_ideal_colors_and_weights_1_comp(uint64_t result, unsigned __int16 *a2, uint64_t a3, unsigned int a4)
{
  int8x16_t v4;
  int8x16_t v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  char v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a2;
  *(_DWORD *)(a3 + 16) = v6;
  if (!v6)
    compute_ideal_colors_and_weights_1_comp();
  v7 = *(unsigned __int8 *)(result + 3456);
  if (!*(_BYTE *)(result + 3456))
    compute_ideal_colors_and_weights_1_comp();
  switch(a4)
  {
    case 0u:
      v8 = *(float *)(result + 3536);
      v9 = result;
      break;
    case 1u:
      v8 = *(float *)(result + 3540);
      v9 = result + 864;
      break;
    case 2u:
      v8 = *(float *)(result + 3544);
      v9 = result + 1728;
      break;
    case 3u:
      v8 = *(float *)(result + 3548);
      v9 = result + 2592;
      break;
    default:
      compute_ideal_colors_and_weights_1_comp();
  }
  v10 = 0;
  v11 = (int8x16_t)vceqq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_18820BF90);
  if (v6 <= 1)
    v12 = 1;
  else
    v12 = v6;
  v13 = a2 + 112;
  v14 = 1;
  v15 = 0.0;
  do
  {
    v16 = *((unsigned __int8 *)a2 + v10 + 4);
    v4.i32[0] = -803929351;
    v5.i32[0] = 1343554297;
    if (*((_BYTE *)a2 + v10 + 4))
    {
      v17 = *((unsigned __int8 *)a2 + v10 + 4);
      v18 = v13;
      v5.i32[0] = 1343554297;
      v4.i32[0] = -803929351;
      do
      {
        v19 = *(unsigned __int8 *)v18;
        v18 = (unsigned __int16 *)((char *)v18 + 1);
        v20 = *(float *)(v9 + 4 * v19);
        if (v20 < *(float *)v5.i32)
          *(float *)v5.i32 = v20;
        if (v20 > *(float *)v4.i32)
          *(float *)v4.i32 = v20;
        --v17;
      }
      while (v17);
    }
    if (*(float *)v4.i32 <= *(float *)v5.i32)
    {
      *(float *)v4.i32 = 0.0000001;
      *(float *)v5.i32 = 0.0;
    }
    v21 = *(float *)v4.i32 - *(float *)v5.i32;
    if (v10)
      v14 &= (float)(v21 * v21) == v15;
    else
      v15 = v21 * v21;
    if (*((_BYTE *)a2 + v10 + 4))
    {
      v22 = 0;
      v23 = v8 * (float)(v21 * v21);
      v24 = 1.0 / v21;
      do
      {
        v25 = *((unsigned __int8 *)v13 + v22);
        v26 = v24 * (float)(*(float *)(v9 + 4 * v25) - *(float *)v5.i32);
        v27 = fmaxf(v26, 0.0);
        if (v26 <= 1.0)
          v28 = v27;
        else
          v28 = 1.0;
        v29 = a3 + 4 * v25;
        *(float *)(v29 + 160) = v28;
        *(float *)(v29 + 1024) = v23;
        ++v22;
      }
      while (v16 != v22);
    }
    v30 = (int8x16_t *)(a3 + 16 * v10);
    v30[2] = vorrq_s8(vbicq_s8(*(int8x16_t *)(result + 3488), v11), vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0), v11));
    v5 = vbicq_s8(*(int8x16_t *)(result + 3520), v11);
    v4 = vorrq_s8(v5, vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.i8, 0), v11));
    v30[6] = v4;
    ++v10;
    v13 += 108;
  }
  while (v10 != v12);
  if ((((_WORD)v7 + 3) & 0x1FCu) > v7)
  {
    v31 = a3 + 4 * v7;
    v32 = v7 - (((_WORD)v7 + 3) & 0x1FC);
    do
    {
      *(_DWORD *)(v31 + 160) = 0;
      *(_DWORD *)(v31 + 1024) = 0;
      v31 += 4;
    }
    while (!__CFADD__(v32++, 1));
  }
  *(_BYTE *)a3 = v14 & 1;
  return result;
}

float32x2_t compute_error_of_weight_set_1plane(float32x4_t *a1, unsigned __int8 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, double a6, uint8x8_t a7)
{
  unint64_t v7;
  unsigned int v11;
  unint64_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v24;
  float32x4_t v25;

  v7 = *a2;
  if (!*a2)
    compute_error_of_weight_set_1plane();
  v11 = a2[1];
  if (v11 < 3)
  {
    if (v11 == 2)
    {
      v16 = 0;
      v13 = 0uLL;
      do
      {
        v25 = (float32x4_t)v13;
        *(double *)v17.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)a3, v16, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32);
        v18 = vsubq_f32(v17, a1[10]);
        a5 = a1[64];
        a4 = vmulq_f32(a5, vmulq_f32(v18, v18));
        v13 = (int8x16_t)vaddq_f32(v25, a4);
        v16 += 4;
        ++a1;
      }
      while (v16 < v7);
    }
    else
    {
      v19 = 0;
      v13 = 0uLL;
      do
      {
        v20 = *a3++;
        v21 = vsubq_f32(v20, a1[10]);
        v13 = (int8x16_t)vaddq_f32((float32x4_t)v13, vmulq_f32(a1[64], vmulq_f32(v21, v21)));
        v19 += 4;
        ++a1;
      }
      while (v19 < v7);
    }
  }
  else
  {
    v12 = 0;
    v13 = 0uLL;
    do
    {
      v24 = (float32x4_t)v13;
      *(double *)v14.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)a3, v12, *(uint8x8_t *)a4.f32, *(uint8x8_t *)a5.f32, *(uint8x8_t *)v13.i8, a7);
      v15 = vsubq_f32(v14, a1[10]);
      a5 = a1[64];
      a4 = vmulq_f32(a5, vmulq_f32(v15, v15));
      v13 = (int8x16_t)vaddq_f32(v24, a4);
      v12 += 4;
      ++a1;
    }
    while (v12 < v7);
  }
  v22 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), *(float32x2_t *)v13.i8);
  return vpadd_f32(v22, v22);
}

double bilinear_infill_vla(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5, uint8x8_t a6, uint8x8_t a7)
{
  _DWORD *v7;
  __int32 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;

  v7 = (_DWORD *)(a1 + a3);
  v8 = *(_DWORD *)((char *)v7 + 222);
  v7 = (_DWORD *)((char *)v7 + 222);
  a4.i32[0] = v8;
  a5.i32[0] = v7[54];
  a6.i32[0] = v7[108];
  a7.i32[0] = v7[162];
  v9 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v9.i32[0] = *(_DWORD *)(a2 + 4 * v9.u32[0]);
  v9.i32[1] = *(_DWORD *)(a2 + 4 * v9.u32[1]);
  v9.i32[2] = *(_DWORD *)(a2 + 4 * v9.u32[2]);
  v9.i32[3] = *(_DWORD *)(a2 + 4 * v9.u32[3]);
  v10 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v10.i32[0] = *(_DWORD *)(a2 + 4 * v10.u32[0]);
  v10.i32[1] = *(_DWORD *)(a2 + 4 * v10.u32[1]);
  v10.i32[2] = *(_DWORD *)(a2 + 4 * v10.u32[2]);
  v10.i32[3] = *(_DWORD *)(a2 + 4 * v10.u32[3]);
  v11 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a6));
  v11.i32[0] = *(_DWORD *)(a2 + 4 * v11.u32[0]);
  v11.i32[1] = *(_DWORD *)(a2 + 4 * v11.u32[1]);
  v11.i32[2] = *(_DWORD *)(a2 + 4 * v11.u32[2]);
  v11.i32[3] = *(_DWORD *)(a2 + 4 * v11.u32[3]);
  v12 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a7));
  v12.i32[0] = *(_DWORD *)(a2 + 4 * v12.u32[0]);
  v12.i32[1] = *(_DWORD *)(a2 + 4 * v12.u32[1]);
  v12.i32[2] = *(_DWORD *)(a2 + 4 * v12.u32[2]);
  v12.i32[3] = *(_DWORD *)(a2 + 4 * v12.u32[3]);
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(vmulq_f32(v9, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v10, *(float32x4_t *)(a1 + 4 * a3 + 2816))), vaddq_f32(vmulq_f32(v11, *(float32x4_t *)(a1 + 4 * a3 + 3680)), vmulq_f32(v12, *(float32x4_t *)(a1 + 4 * a3 + 4544)))).u64[0];
  return result;
}

double bilinear_infill_vla_2(uint64_t a1, uint64_t a2, unsigned int a3, uint8x8_t a4, uint8x8_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;

  v5 = a1 + a3;
  a4.i32[0] = *(_DWORD *)(v5 + 222);
  a5.i32[0] = *(_DWORD *)(v5 + 438);
  v6 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4));
  v6.i32[0] = *(_DWORD *)(a2 + 4 * v6.u32[0]);
  v6.i32[1] = *(_DWORD *)(a2 + 4 * v6.u32[1]);
  v6.i32[2] = *(_DWORD *)(a2 + 4 * v6.u32[2]);
  v6.i32[3] = *(_DWORD *)(a2 + 4 * v6.u32[3]);
  v7 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  v7.i32[0] = *(_DWORD *)(a2 + 4 * v7.u32[0]);
  v7.i32[1] = *(_DWORD *)(a2 + 4 * v7.u32[1]);
  v7.i32[2] = *(_DWORD *)(a2 + 4 * v7.u32[2]);
  v7.i32[3] = *(_DWORD *)(a2 + 4 * v7.u32[3]);
  *(_QWORD *)&result = vaddq_f32(vmulq_f32(v6, *(float32x4_t *)(a1 + 4 * a3 + 1952)), vmulq_f32(v7, *(float32x4_t *)(a1 + 4 * a3 + 2816))).u64[0];
  return result;
}

float32x2_t compute_error_of_weight_set_2planes(float32x4_t *a1, float32x4_t *a2, unsigned __int8 *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t a6, uint8x8_t a7, uint8x8_t a8)
{
  unint64_t v8;
  unsigned int v14;
  unint64_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v8 = *a3;
  if (!*a3)
    compute_error_of_weight_set_2planes();
  v14 = a3[1];
  if (v14 < 3)
  {
    if (v14 == 2)
    {
      v24 = 0;
      v16 = 0uLL;
      do
      {
        v40 = (float32x4_t)v16;
        *(double *)v25.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a4, v24, *(uint8x8_t *)a6.f32, a7);
        v26 = vsubq_f32(v25, a1[10]);
        v27 = a1[64];
        v38 = vmulq_f32(v27, vmulq_f32(v26, v26));
        *(double *)v28.i64 = bilinear_infill_vla_2((uint64_t)a3, (uint64_t)a5, v24, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32);
        v29 = vsubq_f32(v28, a2[10]);
        a7 = *(uint8x8_t *)v38.f32;
        a6 = vaddq_f32(v38, vmulq_f32(a2[64], vmulq_f32(v29, v29)));
        v16 = (int8x16_t)vaddq_f32(v40, a6);
        v24 += 4;
        ++a1;
        ++a2;
      }
      while (v24 < v8);
    }
    else
    {
      v30 = 0;
      v16 = 0uLL;
      do
      {
        v31 = *a4++;
        v32 = vsubq_f32(v31, a1[10]);
        v33 = *a5++;
        v34 = vsubq_f32(v33, a2[10]);
        v16 = (int8x16_t)vaddq_f32((float32x4_t)v16, vaddq_f32(vmulq_f32(a1[64], vmulq_f32(v32, v32)), vmulq_f32(a2[64], vmulq_f32(v34, v34))));
        v30 += 4;
        ++a1;
        ++a2;
      }
      while (v30 < v8);
    }
  }
  else
  {
    v15 = 0;
    v16 = 0uLL;
    do
    {
      v39 = (float32x4_t)v16;
      *(double *)v17.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a4, v15, *(uint8x8_t *)a6.f32, a7, a8, *(uint8x8_t *)v16.i8);
      v18 = vsubq_f32(v17, a1[10]);
      v19 = a1[64];
      v37 = vmulq_f32(v19, vmulq_f32(v18, v18));
      *(double *)v22.i64 = bilinear_infill_vla((uint64_t)a3, (uint64_t)a5, v15, *(uint8x8_t *)v37.f32, *(uint8x8_t *)v19.f32, v20, v21);
      v23 = vsubq_f32(v22, a2[10]);
      a7 = *(uint8x8_t *)v37.f32;
      a6 = vaddq_f32(v37, vmulq_f32(a2[64], vmulq_f32(v23, v23)));
      v16 = (int8x16_t)vaddq_f32(v39, a6);
      v15 += 4;
      ++a1;
      ++a2;
    }
    while (v15 < v8);
  }
  v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v16.i8);
  return vpadd_f32(v35, v35);
}

__int32 *compute_ideal_weights_for_decimation(__int32 *result, float32x4_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  _OWORD *v6;
  int32x2_t *v7;
  _QWORD *v8;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  int32x2_t *v14;
  float32x4_t v15;
  unsigned __int8 *v16;
  int32x2_t *v17;
  uint64_t v18;
  int32x4_t v19;
  const float *v20;
  uint8x8_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  const float *v28;
  uint8x8_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int32 *v36;
  float32x4_t v37;
  float32x4_t v38;
  unint64_t v39;
  int32x4_t *v40;
  unint64_t v41;
  int32x4_t *v42;
  unint64_t v43;
  unsigned int *v44;
  float32x4_t *v45;
  int32x4_t v46;
  float32x4_t v54;
  const float *v55;
  uint8x8_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  unsigned int *v60;
  float32x4_t v61;
  unsigned int v62;
  int8x16_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  __int32 *v71;
  float32x4_t v72;
  float32x4_t v73;
  _DWORD v74[216];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = a2->u8[0];
  if (!a2->i8[0])
    compute_ideal_weights_for_decimation();
  v5 = a2->u8[2];
  if (!a2->i8[2])
    compute_ideal_weights_for_decimation();
  v6 = a3;
  v7 = (int32x2_t *)result;
  v8 = (_QWORD *)((char *)a3 + 4 * (((_DWORD)v5 - 1) & 0xFFFFFFFC));
  *v8 = 0;
  v8[1] = 0;
  if ((_DWORD)v3 == (_DWORD)v5)
  {
    v9 = 0;
    v10 = (__int128 *)(result + 40);
    do
    {
      v11 = *v10++;
      *v6++ = v11;
      v9 += 4;
    }
    while (v9 < v3);
  }
  else
  {
    bzero(v74, 0x360uLL);
    v12 = 0;
    v13 = v7->u8[0];
    v14 = v7 + 128;
    v15 = (float32x4_t)vdupq_lane_s32(v7[128], 0);
    v16 = (unsigned __int8 *)&a2[338];
    v17 = v7 + 20;
    v18 = 19296;
    v19 = vdupq_n_s32(0x2EDBE6FFu);
    do
    {
      v20 = (const float *)&v16[v12];
      v21 = (uint8x8_t)vld1_dup_f32(v20);
      v22 = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v21)));
      if (!v22)
        compute_ideal_weights_for_decimation();
      v23 = 0;
      v24 = (unint64_t)v22 << 6;
      v25 = 0uLL;
      v26 = v18;
      v27 = (float32x4_t)v19;
      do
      {
        v28 = &a2[342].f32[v12 / 4 + v23 / 4];
        v29 = (uint8x8_t)vld1_dup_f32(v28);
        v30 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v29));
        v31 = v30.u32[0];
        v32 = v30.u32[1];
        *(int32x2_t *)v30.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
        v33.i64[0] = v30.u32[0];
        v33.i64[1] = v30.u32[1];
        v34 = v33;
        if (!v13)
        {
          v15.i32[0] = v14->i32[v31];
          v15.i32[1] = v14->i32[v32];
          v15.i32[2] = v14->i32[v34.i64[1]];
          v15.i32[3] = v14->i32[v34.i64[0]];
        }
        v23 += 64;
        v35 = vmulq_f32(*(float32x4_t *)((char *)a2 + v26), v15);
        v27 = vaddq_f32(v27, v35);
        v36 = (__int32 *)v17 + v34.i64[0];
        v34.i32[0] = v17->i32[v31];
        v34.i32[1] = v17->i32[v32];
        v34.i32[2] = v17->i32[v34.i64[1]];
        v34.i32[3] = *v36;
        v37 = vmulq_f32(v35, v34);
        v25 = vaddq_f32(v25, v37);
        v26 += 256;
      }
      while (v24 != v23);
      v38 = vdivq_f32(v25, v27);
      v6[v12 / 4] = v38;
      v12 += 4;
      v18 += 16;
    }
    while (v12 < v5);
    v73 = v15;
    if (a2->u8[1] >= 3u)
    {
      v41 = 0;
      v42 = (int32x4_t *)v74;
      do
      {
        *(double *)v19.i64 = bilinear_infill_vla((uint64_t)a2, (uint64_t)v6, v41, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v38.f32, *(uint8x8_t *)v27.f32, *(uint8x8_t *)v37.f32);
        *v42++ = v19;
        v41 += 4;
      }
      while (v41 < v3);
    }
    else
    {
      v39 = 0;
      v40 = (int32x4_t *)v74;
      do
      {
        *(double *)v19.i64 = bilinear_infill_vla_2((uint64_t)a2, (uint64_t)v6, v39, *(uint8x8_t *)v19.i8, *(uint8x8_t *)v38.f32);
        *v40++ = v19;
        v39 += 4;
      }
      while (v39 < v3);
    }
    v43 = 0;
    v44 = (unsigned int *)&a2[342];
    v45 = a2 + 1206;
    v46 = vdupq_n_s32(0x2EDBE6FFu);
    __asm
    {
      FMOV            V1.4S, #-16.0
      FMOV            V2.4S, #-0.25
      FMOV            V3.4S, #0.25
    }
    v54 = v73;
    do
    {
      v55 = (const float *)&v16[v43];
      v56 = (uint8x8_t)vld1_dup_f32(v55);
      v56.i32[0] = vmaxvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v56)));
      v57 = v56.u32[0];
      if (!v56.i32[0])
        compute_ideal_weights_for_decimation();
      v58 = 0uLL;
      v59 = v45;
      v60 = v44;
      v61 = (float32x4_t)v46;
      do
      {
        v62 = *v60;
        v60 += 16;
        v63 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)vdup_n_s32(v62)));
        v64 = v63.u32[0];
        v65 = v63.u32[1];
        *(int32x2_t *)v63.i8 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
        v66.i64[0] = v63.u32[0];
        v66.i64[1] = v63.u32[1];
        v67 = v66;
        if (!v13)
        {
          v54.i32[0] = v14->i32[v64];
          v54.i32[1] = v14->i32[v65];
          v54.i32[2] = v14->i32[v67.i64[1]];
          v54.i32[3] = v14->i32[v67.i64[0]];
        }
        v68 = vmulq_f32(*v59, v54);
        v69 = v67.i64[1];
        v70 = v67.i64[0];
        v71 = &v74[v67.i64[0]];
        v67.i32[0] = v74[v64];
        v67.i32[1] = v74[v65];
        v67.i32[2] = v74[v67.i64[1]];
        v67.i32[3] = *v71;
        result = (__int32 *)v17 + v69;
        v72.i32[0] = v17->i32[v64];
        v72.i32[1] = v17->i32[v65];
        v72.i32[2] = *result;
        v72.i32[3] = v17->i32[v70];
        v61 = vaddq_f32(v61, vmulq_f32(*v59, v68));
        v58 = vaddq_f32(v58, vmulq_f32(v68, vsubq_f32(v67, v72)));
        v59 += 16;
        --v57;
      }
      while (v57);
      v6[v43 / 4] = vaddq_f32((float32x4_t)v6[v43 / 4], vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(v58, _Q1), v61), _Q2), _Q3));
      v43 += 4;
      ++v44;
      ++v45;
    }
    while (v43 < v5);
  }
  return result;
}

uint64_t compute_quantized_weights_for_decimation(uint64_t result, float32x4_t *a2, float32x4_t *a3, uint64_t a4, unsigned int a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  int8x16_t *v12;
  unsigned int v13;
  int32x4_t v14;
  const float *v15;
  float v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  int32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;

  v11 = *(unsigned __int8 *)(result + 2);
  if (!*(_BYTE *)(result + 2))
    compute_quantized_weights_for_decimation();
  v12 = (int8x16_t *)((char *)&quant_and_xfer_tables + 226 * a5);
  if (a5 > 0x14)
    v13 = -1;
  else
    v13 = dword_188232440[a5];
  v14 = vdupq_n_s32(v13);
  if (*(float *)&a7 > a6)
  {
    *(float *)&a11 = a6;
  }
  else
  {
    *(float *)&a7 = 1.0;
    *(float *)&a11 = 0.0;
  }
  v16 = *(float *)&a7 - *(float *)&a11;
  v17 = 1.0 / (float)(*(float *)&a7 - *(float *)&a11);
  *(float *)&a7 = *(float *)&a11 * v17;
  v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
  v15 = (const float *)((char *)&compute_quantized_weights_for_decimation(decimation_info const&,float,float,float const*,float *,unsigned char *,quant_method)::quant_levels_m1
                      + 4 * a5);
  v19 = vld1q_dup_f32(v15);
  v20 = v16 * 0.015625;
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  v22 = *v12;
  if (a5 - 9 >= 0xC)
  {
    v42 = 0;
    __asm { FMOV            V17.4S, #1.0 }
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    v45.i64[0] = 0xFFFFFF00FFFFFF00;
    v45.i64[1] = 0xFFFFFF00FFFFFF00;
    v46.i64[0] = 0x4300000043000000;
    v46.i64[1] = 0x4300000043000000;
    do
    {
      v47 = *a2++;
      v48 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v47, v17), v18), (float32x4_t)0), _Q17);
      v49 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v19, v48));
      v50 = (int8x16_t)vminq_s32(vaddq_s32((int32x4_t)v49, v44), v14);
      v51 = vqtbl1q_s8(v22, vorrq_s8(v49, v45));
      v52 = vqtbl1q_s8(v22, vorrq_s8(v50, v45));
      v53 = (int8x16_t)vcvtq_f32_s32((int32x4_t)v51);
      v54 = (int8x16_t)vcvtq_f32_s32((int32x4_t)v52);
      v55 = (int8x16_t)vcgtq_f32(vmulq_f32(v48, v46), vaddq_f32((float32x4_t)v53, (float32x4_t)v54));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v55, v54, v53), v20));
      *(_DWORD *)(a4 + v42) = vqtbl1q_s8(vbslq_s8(v55, v52, v51), (int8x16_t)xmmword_1882323E0).u32[0];
      v42 += 4;
    }
    while (v42 < v11);
  }
  else
  {
    v23 = 0;
    v24 = v12[1];
    __asm { FMOV            V17.4S, #1.0 }
    v30.i64[0] = 0x100000001;
    v30.i64[1] = 0x100000001;
    v31.i64[0] = 0xFFFFFF00FFFFFF00;
    v31.i64[1] = 0xFFFFFF00FFFFFF00;
    v32.i64[0] = 0x4300000043000000;
    v32.i64[1] = 0x4300000043000000;
    do
    {
      v33 = *a2++;
      v34 = vminnmq_f32(vmaxnmq_f32(vsubq_f32(vmulq_n_f32(v33, v17), v18), (float32x4_t)0), _Q17);
      v35 = (int8x16_t)vcvtq_s32_f32(vmulq_f32(v19, v34));
      v36 = (int8x16_t)vminq_s32(vaddq_s32((int32x4_t)v35, v30), v14);
      v37 = vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8(v35, v31));
      v38 = vqtbl2q_s8(*(int8x16x2_t *)v22.i8, vorrq_s8(v36, v31));
      v39 = (int8x16_t)vcvtq_f32_s32((int32x4_t)v37);
      v40 = (int8x16_t)vcvtq_f32_s32((int32x4_t)v38);
      v41 = (int8x16_t)vcgtq_f32(vmulq_f32(v34, v32), vaddq_f32((float32x4_t)v39, (float32x4_t)v40));
      *a3++ = vaddq_f32(v21, vmulq_n_f32((float32x4_t)vbslq_s8(v41, v40, v39), v20));
      *(_DWORD *)(a4 + v23) = vqtbl1q_s8(vbslq_s8(v41, v38, v37), (int8x16_t)xmmword_1882323E0).u32[0];
      v23 += 4;
    }
    while (v23 < v11);
  }
  return result;
}

void recompute_ideal_colors_1plane(float32x4_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v7;
  unint64_t v9;
  unsigned int v11;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  const float *v19;
  uint8x8_t v20;
  __int128 v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int8x16_t v25;
  unsigned int v26;
  _BYTE *v27;
  unint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float32x4_t v36;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  __int32 *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float32x4_t v63;
  uint64_t v65;
  __int32 *v66;
  float32x4_t v67;
  float v68;
  float v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float v79;
  float v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v92;
  float32x4_t v93;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t *v99;
  float v100;
  float v101;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t *v105;
  float32x4_t v106;
  float32x4_t v108;
  float v109;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  _BYTE v122[864];
  _OWORD v123[16];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a3 + 2);
  if (!*(_BYTE *)(a3 + 2))
    recompute_ideal_colors_1plane();
  v9 = a1[216].u8[0];
  if (!a1[216].i8[0])
    recompute_ideal_colors_1plane();
  v11 = (unsigned __int16)*a2;
  if (!*a2)
    recompute_ideal_colors_1plane();
  v16 = 0;
  memset(v123, 0, sizeof(v123));
  v17 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v18 = (float32x4_t *)v123;
  do
  {
    v19 = (const float *)(a4 + v16);
    v20 = (uint8x8_t)vld1_dup_f32(v19);
    *v18++ = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v20))), v17);
    v16 += 4;
  }
  while (v16 < v7);
  bzero(v122, 0x360uLL);
  v26 = *(unsigned __int8 *)(a3 + 1);
  if (v26 == 1)
  {
    v27 = v123;
  }
  else
  {
    if (v26 >= 3)
    {
      v30 = 0;
      v31 = v122;
      do
      {
        *(double *)&v21 = bilinear_infill_vla(a3, (uint64_t)v123, v30, *(uint8x8_t *)&v21, v22, v23, v24);
        *v31++ = v21;
        v30 += 4;
      }
      while (v30 < v9);
    }
    else
    {
      v28 = 0;
      v29 = v122;
      do
      {
        *(double *)&v21 = bilinear_infill_vla_2(a3, (uint64_t)v123, v28, *(uint8x8_t *)&v21, v22);
        *v29++ = v21;
        v28 += 4;
      }
      while (v28 < v9);
    }
    v27 = v122;
  }
  v32 = 0;
  v33 = vmulq_n_f32(a1[219], (float)v9);
  if (v11 <= 1)
    v34 = 1;
  else
    v34 = v11;
  v35 = (unsigned __int8 *)(a2 + 112);
  v36 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  __asm { FMOV            V16.4S, #1.0 }
  v41 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  do
  {
    v42 = *((unsigned __int8 *)a2 + v32 + 4);
    if (v11 >= 2)
    {
      if (!*((_BYTE *)a2 + v32 + 4))
        recompute_ideal_colors_1plane();
      v33 = 0uLL;
      v43 = *((unsigned __int8 *)a2 + v32 + 4);
      v44 = v35;
      do
      {
        v45 = *v44++;
        v46 = &a1->i32[v45];
        v47.i32[0] = *v46;
        v47.i32[1] = v46[216];
        v47.i32[2] = v46[432];
        v47.i32[3] = v46[648];
        v33 = vaddq_f32(v33, v47);
        --v43;
      }
      while (v43);
    }
    v48 = a1[221];
    v33 = vmulq_f32(v33, v48);
    _Q22 = vmaxnmq_f32(vmulq_n_f32(v48, (float)v42), v36);
    v50 = vdivq_f32(v33, _Q22);
    v50.i32[3] = 0;
    v51 = (int8x16_t)vmulq_f32(v50, v50);
    *(float32x2_t *)v51.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)v51.i8);
    v52 = vdivq_f32(v50, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v51.i8, *(float32x2_t *)v51.i8), 0)));
    v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)));
    if (*((_BYTE *)a2 + v32 + 4))
    {
      v54 = 0;
      v55 = 0uLL;
      v56 = 1.0;
      v57 = 0.0;
      v58 = 1.0e-17;
      v59 = 1.0e10;
      v60 = 0.0;
      v25.i32[0] = 0;
      v61 = 0.0;
      v62 = 0.0;
      v63 = 0uLL;
      _Q28 = 0uLL;
      do
      {
        v65 = v35[v54];
        v66 = &a1->i32[v65];
        v67.i32[0] = *v66;
        v67.i32[1] = v66[216];
        v67.i32[2] = v66[432];
        v67.i32[3] = v66[648];
        v68 = *(float *)&v27[4 * v65];
        v69 = 1.0 - v68;
        if (v68 < v56)
          v56 = *(float *)&v27[4 * v65];
        v70 = vmulq_f32(v52, v67);
        v71 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
        v72 = vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1));
        if (v68 > v60)
          v60 = *(float *)&v27[4 * v65];
        v73 = vaddq_f32(v71, v72);
        *(float *)v25.i32 = *(float *)v25.i32 + (float)(v69 * v69);
        v61 = v61 + (float)(v69 * v68);
        if (v73.f32[0] < v59)
          v59 = v73.f32[0];
        v62 = v62 + (float)(v68 * v68);
        v58 = v58 + v68;
        v74 = vmulq_n_f32(v67, v68);
        v63 = vaddq_f32(v63, v74);
        v75 = vsubq_f32(v67, v74);
        v76.i64[1] = 0;
        if (v73.f32[0] > v57)
          v57 = v73.f32[0];
        v55 = vaddq_f32(v55, v75);
        v76.i32[1] = *(_DWORD *)&v27[4 * v65];
        v76.f32[0] = 1.0 - v68;
        _Q28 = vaddq_f32(_Q28, vmulq_n_f32(v76, vmulq_f32(v53, v73).f32[0]));
        ++v54;
      }
      while (v42 != v54);
    }
    else
    {
      v56 = 1.0;
      v62 = 0.0;
      _Q28.i64[0] = 0;
      v63 = 0uLL;
      v55 = 0uLL;
      v58 = 1.0e-17;
      v61 = 0.0;
      v25.i32[0] = 0;
      v60 = 0.0;
      v59 = 1.0e10;
      v57 = 0.0;
    }
    v77 = vmulq_f32(v48, v55);
    v78 = vmulq_f32(v48, v63);
    v79 = v59 / fmaxf(v57, 1.0e-10);
    v80 = fmaxf(v79, 0.0);
    if (v79 <= 1.0)
      v81 = v80;
    else
      v81 = 1.0;
    v82 = vmulq_n_f32(v52, v57);
    v83 = v82;
    v83.f32[3] = v81;
    *(float32x4_t *)(a6 + 16 * v32) = v83;
    if (v56 >= (float)(v60 * 0.999))
    {
      v103 = (int8x16_t)vdivq_f32(vaddq_f32(v78, v77), _Q22);
      v104 = vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v103), (int8x16_t)vcgezq_f32((float32x4_t)v103));
      v105 = (int8x16_t *)(a5 + 16 * v32);
      v105[1] = vbslq_s8(v104, v103, v105[1]);
      v105[5] = vbslq_s8(v104, v103, v105[5]);
      v82.i32[3] = 1.0;
      goto LABEL_47;
    }
    v84 = (float32x4_t)v25;
    v84.f32[1] = v61;
    v84.f32[2] = v62;
    _Q18 = vmulq_n_f32(v84, v53.f32[0]);
    v86 = vmulq_n_f32(v48, v62);
    v87 = vmulq_n_f32(v48, v61);
    v88 = vmulq_n_f32(v48, *(float *)v25.i32);
    v89 = vsubq_f32(vmulq_f32(v86, v88), vmulq_f32(v87, v87));
    v90 = vdivq_f32(_Q16, v89);
    _S10 = _Q18.i32[2];
    v92 = vmlas_n_f32(vmuls_lane_f32(-_Q18.f32[1], *(float32x2_t *)_Q18.f32, 1), _Q18.f32[2], _Q18.f32[0]);
    v93 = vaddq_f32(vmulq_f32(v86, v86), vaddq_f32(vmulq_f32(v88, v88), vmulq_f32(v87, vaddq_f32(v87, v87))));
    __asm { FMLA            S11, S10, V18.S[2] }
    _Q20 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v77, v86), vmulq_f32(v78, v87)), v90);
    v96 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v78, v88), vmulq_f32(v77, v87)), v90);
    v97 = (int8x16_t)vcgtq_f32(vmaxq_f32(v89, vsubq_f32((float32x4_t)0, v89)), vmulq_f32(v93, v41));
    v25 = (int8x16_t)vcgtq_f32((float32x4_t)v96, (float32x4_t)_Q20);
    v98 = vandq_s8(v97, vorrq_s8(v25, (int8x16_t)vcgeq_f32((float32x4_t)_Q20, (float32x4_t)v96)));
    v99 = (int8x16_t *)(a5 + 16 * v32);
    v99[1] = vbslq_s8(v98, _Q20, v99[1]);
    v99[5] = vbslq_s8(v98, v96, v99[5]);
    __asm { FMLA            S20, S28, V18.S[2] }
    v100 = *(float *)_Q20.i32 * (float)(1.0 / v92);
    v101 = vmlas_n_f32((float)-_Q18.f32[1] * _Q28.f32[0], _Q28.f32[1], _Q18.f32[0]) * (float)(1.0 / v92);
    if (fabsf(v92) > (float)(_S11 * 0.0001) && v100 < v101)
    {
      v82 = vmulq_n_f32(v52, v101);
      v82.f32[3] = v100 / v101;
LABEL_47:
      *(float32x4_t *)(a6 + 16 * v32) = v82;
    }
    if (a1[222].u8[1] | a1[235].u8[9])
    {
      v106 = vmulq_n_f32(v48, v58);
      _S24 = v53.f32[0] * v62;
      v108 = vaddq_f32(v78, v77);
      v108.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u32[0];
      v109 = vmulq_f32(v106, v106).f32[0];
      __asm
      {
        FMLA            S31, S24, V22.S[2]
        FMLA            S20, S31, V22.S[1]
      }
      *(float *)v25.i32 = vmuls_lane_f32(_Q22.f32[2], *(float32x2_t *)v106.f32, 1) * v106.f32[0];
      *(float32x2_t *)v112.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q22.f32), *(float32x2_t *)v106.f32);
      *(float32x2_t *)v113.f32 = vmul_laneq_f32(*(float32x2_t *)v112.f32, v106, 2);
      v114 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q22, 2);
      v114.f32[0] = -_Q22.f32[2];
      v114.f32[1] = -_Q22.f32[2];
      v114.f32[2] = -v106.f32[2];
      v112.i32[2] = vmuls_lane_f32(_Q22.f32[0], *(float32x2_t *)_Q22.f32, 1);
      v112.i32[3] = v112.i32[2];
      v115 = vmulq_f32(v114, v112);
      _Q20.i32[1] = v25.i32[0];
      _Q20.i64[1] = __PAIR64__(v115.u32[0], v113.u32[0]);
      v25.i32[1] = vmlas_n_f32((float)-_Q22.f32[2] * v109, _S31, _Q22.f32[0]);
      v25.i64[1] = __PAIR64__(v115.u32[1], v113.u32[1]);
      __asm { FMLA            S21, S24, V22.S[1] }
      v113.i64[1] = __PAIR64__(v115.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q22.f32[1] * v109, _S21, _Q22.f32[0])));
      v117 = vmulq_n_f32(v108, 1.0 / vmlas_n_f32(vmulq_f32(v106, v115).f32[0], _Q20.f32[0], _Q22.f32[0]));
      v118 = (int8x16_t)vmulq_f32(_Q20, v117);
      *(float32x2_t *)v118.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v118.i8);
      v119 = (int8x16_t)vmulq_f32((float32x4_t)v25, v117);
      *(float32x2_t *)v119.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), *(float32x2_t *)v119.i8);
      v120 = (int8x16_t)vmulq_f32(v113, v117);
      *(float32x2_t *)v120.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), *(float32x2_t *)v120.i8);
      v121 = (int8x16_t)vmulq_f32(v115, v117);
      *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), *(float32x2_t *)v121.i8);
      *(int32x2_t *)v117.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v118.i8, *(float32x2_t *)v118.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v119.i8));
      v117.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v121.i8, *(float32x2_t *)v121.i8).u32[0], vpadd_f32(*(float32x2_t *)v120.i8, *(float32x2_t *)v120.i8).u32[0]);
      *(float32x4_t *)(a7 + 16 * v32) = v117;
    }
    ++v32;
    v35 += 216;
  }
  while (v32 != v34);
}

void recompute_ideal_colors_2planes(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int8x16_t *a6, float32x4_t *a7, int8x16_t *a8, unsigned int a9)
{
  int32x2_t v9;
  int32x2_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  const float *v22;
  uint8x8_t v23;
  const float *v24;
  uint8x8_t v25;
  __int128 v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  float32x4_t v30;
  unsigned int v31;
  float *v32;
  float *v33;
  int8x16_t *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint8x8_t v42;
  uint8x8_t v43;
  uint8x8_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  __int32 *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float32x4_t v68;
  float32x4_t v70;
  float v71;
  float v72;
  float32x4_t v73;
  float v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float v83;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  float v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v101;
  float v103;
  float32x4_t v104;
  int8x16_t v106;
  int8x16_t v107;
  float v108;
  float v109;
  int8x16_t v110;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float v127;
  float32x4_t v128;
  float v129;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  float32x4_t *v142;
  _BYTE v143[864];
  _BYTE v144[864];
  _OWORD v145[8];
  _OWORD v146[8];
  uint64_t v147;

  v147 = *MEMORY[0x1E0C80C00];
  v11 = a1[216].u8[0];
  if (!a1[216].i8[0])
    recompute_ideal_colors_2planes();
  v13 = *(unsigned __int8 *)(a3 + 2);
  if (!*(_BYTE *)(a3 + 2))
    recompute_ideal_colors_2planes();
  memset(v146, 0, sizeof(v146));
  memset(v145, 0, sizeof(v145));
  if (v13 > 0x20)
    recompute_ideal_colors_2planes();
  v19 = 0;
  v20 = 0;
  v21 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  do
  {
    v22 = (const float *)(a4 + v20);
    v23 = (uint8x8_t)vld1_dup_f32(v22);
    v146[v19] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v23))), v21);
    v24 = (const float *)(a5 + v20);
    v25 = (uint8x8_t)vld1_dup_f32(v24);
    v145[v19] = vmulq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v25))), v21);
    v20 += 4;
    ++v19;
  }
  while (v20 < v13);
  bzero(v144, 0x360uLL);
  bzero(v143, 0x360uLL);
  v31 = *(unsigned __int8 *)(a3 + 1);
  if (v31 == 1)
  {
    v32 = (float *)v146;
    v33 = (float *)v145;
  }
  else
  {
    v142 = a7;
    v34 = a8;
    if (v31 >= 3)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        *(double *)&v41 = bilinear_infill_vla(a3, (uint64_t)v146, v40, *(uint8x8_t *)&v26, v27, v28, v29);
        v32 = (float *)v144;
        *(_OWORD *)&v144[v39] = v41;
        *(double *)&v26 = bilinear_infill_vla(a3, (uint64_t)v145, v40, *(uint8x8_t *)&v41, v42, v43, v44);
        v33 = (float *)v143;
        *(_OWORD *)&v143[v39] = v26;
        v40 += 4;
        v39 += 16;
      }
      while (v40 < v11);
    }
    else
    {
      v35 = 0;
      v36 = 0;
      do
      {
        *(double *)&v37 = bilinear_infill_vla_2(a3, (uint64_t)v146, v36, *(uint8x8_t *)&v26, v27);
        v32 = (float *)v144;
        *(_OWORD *)&v144[v35] = v37;
        *(double *)&v26 = bilinear_infill_vla_2(a3, (uint64_t)v145, v36, *(uint8x8_t *)&v37, v38);
        v33 = (float *)v143;
        *(_OWORD *)&v143[v35] = v26;
        v36 += 4;
        v35 += 16;
      }
      while (v36 < v11);
    }
    a8 = v34;
    a7 = v142;
  }
  v45 = *(unsigned __int8 *)(a2 + 3);
  v46 = a1[221];
  v47 = vmulq_n_f32(v46, (float)v45);
  v48 = (float32x4_t)vdupq_n_s32(0x233877AAu);
  v49 = a1[219];
  v49.i32[3] = 0;
  v50 = (int8x16_t)vmulq_f32(v49, v49);
  *(float32x2_t *)v50.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), *(float32x2_t *)v50.i8);
  v51 = vdivq_f32(v49, vsqrtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8), 0)));
  v52 = (int8x16_t)vceqq_s32(vdupq_n_s32(a9), (int32x4_t)xmmword_18820BF90);
  v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
  if (*(_BYTE *)(a2 + 3))
  {
    v54 = (float32x4_t)vdupq_n_s32(0x233877AAu);
    v55 = 0uLL;
    v56 = 0.0;
    v57 = 1.0e10;
    v58 = (__int32 *)a1;
    v59 = 1.0;
    v60 = 0.0;
    v61 = 1.0;
    v62 = 0.0;
    v30.i32[0] = 0;
    v63 = 0.0;
    v64 = 0.0;
    v65 = 0.0;
    v66 = 0.0;
    v67 = 0.0;
    v68 = 0uLL;
    _Q17 = 0uLL;
    do
    {
      v70.i32[0] = *v58;
      v70.i32[1] = v58[216];
      v70.i32[2] = v58[432];
      v70.i32[3] = v58[648];
      v71 = *v32++;
      *(float *)v9.i32 = v71;
      v72 = 1.0 - v71;
      if (v71 < v59)
        v59 = *(float *)v9.i32;
      v73 = vmulq_f32(v51, v70);
      v74 = *v33++;
      *(float *)v10.i32 = v74;
      v65 = v65 + (float)((float)(1.0 - v74) * (float)(1.0 - v74));
      v66 = v66 + (float)((float)(1.0 - v74) * v74);
      v75 = (int8x16_t)vdupq_lane_s32(v10, 0);
      v76 = (int8x16_t)vdupq_lane_s32(v9, 0);
      if (*(float *)v9.i32 > v60)
        v60 = *(float *)v9.i32;
      v77 = (float32x4_t)vorrq_s8(vandq_s8(v75, v52), vbicq_s8(v76, v52));
      v78 = vmulq_f32(v70, v77);
      v68 = vaddq_f32(v68, v78);
      v79 = vsubq_f32(v70, v78);
      v80 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1)));
      if (v80.f32[0] < v57)
        v57 = v80.f32[0];
      v30.f32[0] = v30.f32[0] + (float)(v72 * v72);
      v63 = v63 + (float)(v72 * *(float *)v9.i32);
      if (v80.f32[0] > v56)
        v56 = v80.f32[0];
      v64 = v64 + (float)(*(float *)v9.i32 * *(float *)v9.i32);
      if (*(float *)v10.i32 < v61)
        v61 = *(float *)v10.i32;
      v67 = v67 + (float)(*(float *)v10.i32 * *(float *)v10.i32);
      v55 = vaddq_f32(v55, v79);
      v81 = (float32x4_t)__PAIR64__(v9.u32[0], LODWORD(v72));
      if (*(float *)v10.i32 > v62)
        v62 = *(float *)v10.i32;
      v9 = (int32x2_t)vmulq_f32(v53, v80).u64[0];
      _Q17 = vaddq_f32(_Q17, vmulq_n_f32(v81, *(float *)v9.i32));
      v54 = vaddq_f32(v54, v77);
      ++v58;
      --v45;
    }
    while (v45);
    v82 = v60 * 0.999;
    v83 = v62 * 0.999;
  }
  else
  {
    _Q17.i64[0] = 0;
    v57 = 1.0e10;
    v68 = 0uLL;
    v54 = v48;
    v55 = 0uLL;
    v67 = 0.0;
    v66 = 0.0;
    v65 = 0.0;
    v64 = 0.0;
    v63 = 0.0;
    v30.i32[0] = 0;
    v83 = 0.0;
    v61 = 1.0;
    v82 = 0.0;
    v59 = 1.0;
    v56 = 0.0;
  }
  _Q16 = vmaxnmq_f32(v47, v48);
  v85 = (int8x16_t)vmulq_n_f32(v46, v64);
  v86 = vmulq_f32(v46, v55);
  v87 = vmulq_f32(v46, v68);
  v88 = v57 / fmaxf(v56, 1.0e-10);
  v89 = fmaxf(v88, 0.0);
  if (v88 > 1.0)
    v89 = 1.0;
  v90 = vmulq_n_f32(v51, v56);
  v91 = v90;
  v91.f32[3] = v89;
  *a7 = v91;
  if (v59 >= v82)
  {
    v112 = (int8x16_t)vdivq_f32(vaddq_f32(v87, v86), _Q16);
    v113 = vornq_s8(v52, vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v112), (int8x16_t)vcgezq_f32((float32x4_t)v112)));
    a6[1] = vbslq_s8(v113, a6[1], v112);
    a6[5] = vbslq_s8(v113, a6[5], v112);
    v90.i32[3] = 1.0;
    goto LABEL_42;
  }
  v92 = v30;
  v92.f32[1] = v63;
  v92.f32[2] = v64;
  _Q20 = vmulq_n_f32(v92, v53.f32[0]);
  _Q18 = vmulq_n_f32(v46, v63);
  v95 = vmulq_n_f32(v46, v30.f32[0]);
  v96 = vsubq_f32(vmulq_f32((float32x4_t)v85, v95), vmulq_f32(_Q18, _Q18));
  __asm { FMOV            V25.4S, #1.0 }
  v101 = vdivq_f32(_Q25, v96);
  _S26 = _Q20.i32[2];
  v103 = vmlas_n_f32(vmuls_lane_f32(-_Q20.f32[1], *(float32x2_t *)_Q20.f32, 1), _Q20.f32[2], _Q20.f32[0]);
  v104 = vaddq_f32(vmulq_f32((float32x4_t)v85, (float32x4_t)v85), vaddq_f32(vmulq_f32(v95, v95), vmulq_f32(_Q18, vaddq_f32(_Q18, _Q18))));
  __asm { FMLA            S27, S26, V20.S[2] }
  v106 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v86, (float32x4_t)v85), vmulq_f32(v87, _Q18)), v101);
  v107 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v87, v95), vmulq_f32(v86, _Q18)), v101);
  __asm { FMLA            S18, S17, V20.S[2] }
  v108 = _Q18.f32[0] * (float)(1.0 / v103);
  v109 = vmlas_n_f32((float)-_Q20.f32[1] * _Q17.f32[0], _Q17.f32[1], _Q20.f32[0]) * (float)(1.0 / v103);
  v110 = vbicq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32((float32x4_t)v107, (float32x4_t)v106), (int8x16_t)vcgeq_f32((float32x4_t)v106, (float32x4_t)v107)), (int8x16_t)vcgtq_f32(vmaxq_f32(v96, vsubq_f32((float32x4_t)0, v96)), vmulq_f32(v104, (float32x4_t)vdupq_n_s32(0x38D1B717u)))), v52);
  a6[1] = vbslq_s8(v110, v106, a6[1]);
  a6[5] = vbslq_s8(v110, v107, a6[5]);
  if (fabsf(v103) > (float)(_S27 * 0.0001) && v108 < v109)
  {
    v90 = vmulq_n_f32(v51, v109);
    v90.f32[3] = v108 / v109;
LABEL_42:
    *a7 = v90;
  }
  v114 = (int8x16_t)vmulq_n_f32(v46, v67);
  if (v61 >= v83)
  {
    v122 = (int8x16_t)vdivq_f32(vaddq_f32(v87, v86), _Q16);
    v123 = vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32((float32x4_t)v122), (int8x16_t)vcgezq_f32((float32x4_t)v122)), v52);
    v124 = vbslq_s8(v123, v122, a6[1]);
  }
  else
  {
    v115 = vmulq_n_f32(v46, v65);
    v116 = vmulq_n_f32(v46, v66);
    v117 = vsubq_f32(vmulq_f32((float32x4_t)v114, v115), vmulq_f32(v116, v116));
    __asm { FMOV            V7.4S, #1.0 }
    v119 = vdivq_f32(_Q7, v117);
    v120 = vaddq_f32(vmulq_f32((float32x4_t)v114, (float32x4_t)v114), vaddq_f32(vmulq_f32(v115, v115), vmulq_f32(v116, vaddq_f32(v116, v116))));
    v121 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v86, (float32x4_t)v114), vmulq_f32(v87, v116)), v119);
    v122 = (int8x16_t)vmulq_f32(vsubq_f32(vmulq_f32(v87, v115), vmulq_f32(v86, v116)), v119);
    v123 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgtq_f32((float32x4_t)v122, (float32x4_t)v121), (int8x16_t)vcgeq_f32((float32x4_t)v121, (float32x4_t)v122)), v52), (int8x16_t)vcgtq_f32(vmaxq_f32(v117, vsubq_f32((float32x4_t)0, v117)), vmulq_f32(v120, (float32x4_t)vdupq_n_s32(0x38D1B717u))));
    v124 = vbslq_s8(v123, v121, a6[1]);
  }
  a6[1] = v124;
  a6[5] = vbslq_s8(v123, v122, a6[5]);
  if (a1[222].u8[1] | a1[235].u8[9])
  {
    v125 = vmulq_f32(v46, v54);
    v126 = vmulq_f32(v46, (float32x4_t)vorrq_s8(vbicq_s8(v85, v52), vandq_s8(v114, v52)));
    LODWORD(v127) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).u32[0];
    v128 = vaddq_f32(v87, v86);
    v128.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).u32[0];
    v129 = vmulq_f32(v125, v125).f32[0];
    _S7 = vmlas_n_f32(vmuls_lane_f32(-v125.f32[2], v125, 2), _Q16.f32[2], v127);
    __asm { FMLA            S18, S7, V16.S[1] }
    *(float32x2_t *)v132.f32 = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)_Q16.f32), *(float32x2_t *)v125.f32);
    *(float32x2_t *)v133.f32 = vmul_laneq_f32(*(float32x2_t *)v132.f32, v125, 2);
    v134 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q16, 2);
    v134.f32[0] = -_Q16.f32[2];
    v134.f32[1] = -_Q16.f32[2];
    v134.f32[2] = -v125.f32[2];
    v132.i32[2] = vmuls_lane_f32(_Q16.f32[0], *(float32x2_t *)_Q16.f32, 1);
    v135.f32[0] = vmuls_lane_f32(_Q16.f32[2], *(float32x2_t *)v125.f32, 1) * v125.f32[0];
    v132.i32[3] = v132.i32[2];
    v136 = vmulq_f32(v134, v132);
    _Q18.i32[1] = v135.i32[0];
    _Q18.i64[1] = __PAIR64__(v136.u32[0], v133.u32[0]);
    v135.i32[1] = vmlas_n_f32((float)-_Q16.f32[2] * v129, _S7, _Q16.f32[0]);
    v135.i64[1] = __PAIR64__(v136.u32[1], v133.u32[1]);
    v133.i64[1] = __PAIR64__(v136.u32[2], COERCE_UNSIGNED_INT(vmlas_n_f32((float)-_Q16.f32[1] * v129, vmlas_n_f32(-(float)(v125.f32[1] * v125.f32[1]), _Q16.f32[1], v127), _Q16.f32[0])));
    v137 = vmulq_n_f32(v128, 1.0 / vmlas_n_f32(vmulq_f32(v125, v136).f32[0], _Q18.f32[0], _Q16.f32[0]));
    v138 = (int8x16_t)vmulq_f32(_Q18, v137);
    *(float32x2_t *)v138.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL), *(float32x2_t *)v138.i8);
    v139 = (int8x16_t)vmulq_f32(v135, v137);
    *(float32x2_t *)v139.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL), *(float32x2_t *)v139.i8);
    v140 = (int8x16_t)vmulq_f32(v133, v137);
    *(float32x2_t *)v140.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), *(float32x2_t *)v140.i8);
    v141 = (int8x16_t)vmulq_f32(v136, v137);
    *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL), *(float32x2_t *)v141.i8);
    *(int32x2_t *)v138.i8 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v138.i8), (int32x2_t)vpadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v139.i8));
    v138.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)v141.i8).u32[0], vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v140.i8).u32[0]);
    *a8 = v138;
  }
}

void compute_ideal_colors_and_weights_1plane()
{
  __assert_rtn("compute_ideal_colors_and_weights_4_comp", "astcenc_ideal_endpoints_and_weights.cpp", 530, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_4_comp", "astcenc_ideal_endpoints_and_weights.cpp", 531, "partition_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_4_comp", "astcenc_ideal_endpoints_and_weights.cpp", 596, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_ideal_colors_and_weights_3_comp()
{
  __assert_rtn("compute_ideal_colors_and_weights_3_comp", "astcenc_ideal_endpoints_and_weights.cpp", 362, "partition_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_3_comp", "astcenc_ideal_endpoints_and_weights.cpp", 365, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_3_comp", "astcenc_ideal_endpoints_and_weights.cpp", 471, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_ideal_colors_and_weights_2planes()
{
  __assert_rtn("compute_ideal_colors_and_weights_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 640, "plane2_component < BLOCK_MAX_COMPONENTS");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 680, "uses_alpha");
}

void block_size_descriptor::get_partition_info()
{
  __assert_rtn("get_partition_info", "astcenc_internal.h", 707, "packed_index != BLOCK_BAD_PARTITIONING && packed_index < this->partitioning_count_all[partition_count - 1]");
}

{
  __assert_rtn("get_partition_info", "astcenc_internal.h", 709, "index == result.partition_index");
}

void compute_ideal_colors_and_weights_2_comp()
{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 226, "partition_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 229, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 322, "!astc::isnan(ei.weight_error_scale[tix])");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_2_comp", "astcenc_ideal_endpoints_and_weights.cpp", 253, "component1 == 1 && component2 == 2");
}

void compute_ideal_colors_and_weights_1_comp()
{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 115, "partition_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 118, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 139, "component == 3");
}

{
  __assert_rtn("compute_ideal_colors_and_weights_1_comp", "astcenc_ideal_endpoints_and_weights.cpp", 190, "!astc::isnan(ei.weight_error_scale[tix])");
}

void compute_error_of_weight_set_1plane()
{
  __assert_rtn("compute_error_of_weight_set_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 695, "texel_count > 0");
}

void compute_error_of_weight_set_2planes()
{
  __assert_rtn("compute_error_of_weight_set_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 761, "texel_count > 0");
}

void compute_ideal_weights_for_decimation()
{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 853, "texel_count > 0");
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 854, "weight_count > 0");
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 893, "max_texel_count > 0");
}

{
  __assert_rtn("compute_ideal_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 951, "max_texel_count > 0");
}

void compute_quantized_weights_for_decimation()
{
  __assert_rtn("compute_quantized_weights_for_decimation", "astcenc_ideal_endpoints_and_weights.cpp", 990, "weight_count > 0");
}

void recompute_ideal_colors_1plane()
{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1170, "weight_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1171, "total_texel_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1172, "partition_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_1plane", "astcenc_ideal_endpoints_and_weights.cpp", 1220, "texel_count > 0");
}

void recompute_ideal_colors_2planes()
{
  __assert_rtn("recompute_ideal_colors_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 1394, "total_texel_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 1395, "weight_count > 0");
}

{
  __assert_rtn("recompute_ideal_colors_2planes", "astcenc_ideal_endpoints_and_weights.cpp", 1400, "weight_count <= BLOCK_MAX_WEIGHTS_2PLANE");
}

block_size_descriptor *symbolic_to_physical(block_size_descriptor *result, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  block_size_descriptor *v6;
  uint64_t v7;
  unsigned __int8 *block_mode;
  uint64_t v9;
  uint64_t v10;
  float v11;
  unsigned __int8 v12;
  unsigned int v13;
  int ise_sequence_bitcount;
  float v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  char *v26;
  int8x16_t v27;
  unsigned int v28;
  int v29;
  char v30;
  char v31;
  int v32;
  unsigned int v33;
  int v34;
  char v35;
  int v36;
  char v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  int v61;
  uint64_t v62;
  char v63;
  _OWORD v64[2];
  _OWORD v65[4];
  int8x16_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (v5 == 2)
  {
    v19 = 0;
    *(_QWORD *)a3 = -516;
    v20 = a3 + 9;
    do
    {
      *(_WORD *)(v20 - 1) = *(_DWORD *)&a2[v19 + 20];
      v20 += 2;
      v19 += 4;
    }
    while (v19 != 16);
    return result;
  }
  if (v5 == 1)
  {
    v21 = 0;
    *(_QWORD *)a3 = -4;
    v22 = a3 + 9;
    do
    {
      *(_WORD *)(v22 - 1) = *(_DWORD *)&a2[v21 + 20];
      v22 += 2;
      v21 += 4;
    }
    while (v21 != 16);
    return result;
  }
  if (!*a2)
    symbolic_to_physical();
  v6 = result;
  v7 = a2[1];
  v66 = 0uLL;
  block_mode = (unsigned __int8 *)block_size_descriptor::get_block_mode(result, *((unsigned __int16 *)a2 + 2));
  v9 = *((unsigned __int8 *)v6 + 129888 * block_mode[2] + 594);
  v10 = block_mode[3];
  v11 = -1.0;
  if (v10 <= 0x14)
    v11 = flt_188232494[(char)v10];
  v12 = block_mode[5];
  v13 = (_DWORD)v9 << (v12 & 1);
  ise_sequence_bitcount = get_ise_sequence_bitcount(v13, v10);
  memset(v65, 0, sizeof(v65));
  if ((v12 & 1) != 0)
  {
    if ((_DWORD)v9)
    {
      v23 = a2 + 84;
      v24 = (char *)v65 + 1;
      do
      {
        LOBYTE(v15) = *(v23 - 32);
        *(float *)&v25 = (float)(v11 * (float)((float)LODWORD(v15) * 0.015625)) + 0.5;
        v26 = &quant_and_xfer_tables[226 * v10 + 32];
        *(v24 - 1) = v26[*(float *)&v25];
        LOBYTE(v25) = *v23;
        v15 = (float)(v11 * (float)((float)v25 * 0.015625)) + 0.5;
        *v24 = v26[v15];
        v24 += 2;
        ++v23;
        --v9;
      }
      while (v9);
    }
  }
  else if ((_DWORD)v9)
  {
    v16 = a2 + 52;
    v17 = v65;
    do
    {
      v18 = *v16++;
      *v17++ = quant_and_xfer_tables[226 * v10
                                   + 32
                                   + (int)(float)((float)(v11 * (float)((float)v18 * 0.015625)) + 0.5)];
      --v9;
    }
    while (v9);
  }
  encode_ise(v10, v13, (unsigned __int8 *)v65, (uint64_t)&v66, 0);
  v27 = vrev64q_s8(v66);
  *(int8x16_t *)a3 = vrbitq_s8(vextq_s8(v27, v27, 8uLL));
  v28 = *((unsigned __int16 *)a2 + 2);
  *(_BYTE *)a3 = v28;
  v29 = (v28 >> 8) & 7;
  v30 = (8 * v7 + 24) & 0x18;
  *(_BYTE *)(a3 + 1) = *(_BYTE *)(a3 + 1) & 0xE0 | v30 | BYTE1(v28) & 7;
  v31 = *(_BYTE *)(a3 + 2);
  v32 = 128 - ise_sequence_bitcount;
  if (v7 >= 2)
  {
    v33 = *((unsigned __int16 *)a2 + 3);
    *(_BYTE *)(a3 + 1) = v30 | (32 * v33) | v29;
    v34 = (v33 >> 3) & 7;
    v35 = v31 & 0xF8 | (v33 >> 3) & 7;
    *(_BYTE *)(a3 + 2) = v35;
    v36 = (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    *(_BYTE *)(a3 + 2) = v35 & 0x87 | (*((unsigned __int16 *)a2 + 3) >> 3) & 0x78;
    v37 = *(_BYTE *)(a3 + 3);
    if (a2[2])
    {
      v38 = a2[8];
      *(_BYTE *)(a3 + 2) = v36 | v34;
      *(_BYTE *)(a3 + 3) = v37 & 0xE0 | (2 * (v38 & 0xF));
      if ((v12 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      v52 = a2 + 8;
      v53 = 4;
      v54 = v7;
      do
      {
        v55 = *v52++;
        v56 = v55 >> 2;
        if ((int)(v55 >> 2) < v53)
          v53 = v56;
        --v54;
      }
      while (v54);
      v57 = 0;
      if (v53 == 3)
        v58 = 2;
      else
        v58 = v53;
      v59 = v58 + 1;
      do
      {
        v59 |= ((a2[v57 + 8] >> 2) - v58) << (v57 + 2);
        ++v57;
      }
      while (v7 != v57);
      v60 = (char *)(a2 + 8);
      v61 = v7 + 2;
      v62 = v7;
      do
      {
        v63 = *v60++;
        v59 |= (v63 & 3) << v61;
        v61 += 2;
        --v62;
      }
      while (v62);
      v32 -= 3 * v7 - 4;
      *(_BYTE *)(a3 + 2) = v34 | ((_BYTE)v59 << 7) | v36;
      *(_BYTE *)(a3 + 3) = v37 & 0xE0 | (v59 >> 1) & 0x1F;
      *(_WORD *)(a3 + (v32 >> 3)) = *(_WORD *)(a3 + (v32 >> 3)) & ~(unsigned __int16)(~(-1 << (3 * v7 - 4)) << (v32 & 7)) | (((v59 >> 6) & ~(-1 << (3 * v7 - 4))) << (v32 & 7));
      if ((v12 & 1) == 0)
        goto LABEL_26;
    }
    goto LABEL_25;
  }
  v39 = a2[8];
  *(_BYTE *)(a3 + 1) = v30 | (32 * v39) | v29;
  *(_BYTE *)(a3 + 2) = v31 & 0xFE | ((v39 & 8) != 0);
  if ((v12 & 1) != 0)
LABEL_25:
    *(_WORD *)(a3 + ((v32 - 2) >> 3)) = *(_WORD *)(a3 + ((v32 - 2) >> 3)) & ~(unsigned __int16)(3 << ((v32 - 2) & 7)) | ((a2[3] & 3) << ((v32 - 2) & 7));
LABEL_26:
  memset(v64, 0, sizeof(v64));
  v40 = *((int *)a2 + 3);
  v41 = a2[1];
  if (a2[1])
  {
    v42 = 0;
    v43 = 0;
    v44 = a2 + 20;
    do
    {
      v45 = ((unint64_t)a2[v42 + 8] >> 1) & 0x7E;
      if (v45 > 6)
        symbolic_to_physical();
      v46 = v45 + 2;
      v47 = (char *)v64 + v43;
      v48 = v46;
      v49 = v44;
      do
      {
        v50 = *v49++;
        *v47++ = color_uquant_to_scrambled_pquant_tables[256 * v40 - 1024 + v50];
        --v48;
      }
      while (v48);
      v43 += v46;
      ++v42;
      v44 += 8;
    }
    while (v42 != v41);
  }
  else
  {
    v43 = 0;
  }
  if ((_DWORD)v41 == 1)
    v51 = 17;
  else
    v51 = 29;
  return (block_size_descriptor *)encode_ise(v40, v43, (unsigned __int8 *)v64, a3, v51);
}

uint64_t block_size_descriptor::get_block_mode(block_size_descriptor *this, unsigned int a2)
{
  unsigned int v2;

  v2 = *((unsigned __int16 *)this + a2 + 5650424);
  if (v2 == 0xFFFF || *((_DWORD *)this + 7) <= v2)
    block_size_descriptor::get_block_mode();
  return (uint64_t)this + 6 * *((unsigned __int16 *)this + a2 + 5650424) + 11304944;
}

void symbolic_to_physical()
{
  __assert_rtn("symbolic_to_physical", "astcenc_symbolic_physical.cpp", 276, "vals <= 8");
}

{
  __assert_rtn("symbolic_to_physical", "astcenc_symbolic_physical.cpp", 107, "scb.block_type != SYM_BTYPE_ERROR");
}

void block_size_descriptor::get_block_mode()
{
  __assert_rtn("get_block_mode", "astcenc_internal.h", 638, "packed_index != BLOCK_BAD_BLOCK_MODE && packed_index < this->block_mode_count_all");
}

int8x16_t compute_avgs_and_dirs_4_comp(_BYTE *a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  float32x4_t v10;
  int8x16_t v11;
  unsigned __int8 *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int v16;
  __int32 *v17;
  float32x4_t v18;
  int8x16_t v19;
  int16x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t result;
  float32x4_t v33[4];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1)
    compute_avgs_and_dirs_4_comp();
  memset(v33, 0, sizeof(v33));
  compute_partition_averages_rgba(a1, a2, v33);
  v7 = 0;
  v8 = a1 + 224;
  do
  {
    v9 = a1[v7 + 4];
    if (!a1[v7 + 4])
      compute_avgs_and_dirs_4_comp();
    v10 = v33[v7];
    *(float32x4_t *)(a3 + 32 * v7) = v10;
    v11 = 0uLL;
    v12 = v8;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    do
    {
      v16 = *v12++;
      v17 = &a2->i32[v16];
      v18.i32[0] = *v17;
      v18.i32[1] = v17[216];
      v18.i32[2] = v17[432];
      v18.i32[3] = v17[648];
      v19 = (int8x16_t)vsubq_f32(v18, v10);
      v20 = vmovn_s32(vcgtzq_f32((float32x4_t)v19));
      v11 = (int8x16_t)vaddq_f32((float32x4_t)v11, (float32x4_t)vandq_s8(v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 0))));
      v13 = (int8x16_t)vaddq_f32((float32x4_t)v13, (float32x4_t)vandq_s8(v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 1))));
      v14 = (int8x16_t)vaddq_f32((float32x4_t)v14, (float32x4_t)vandq_s8(v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 2))));
      v15 = (int8x16_t)vaddq_f32((float32x4_t)v15, (float32x4_t)vandq_s8(v19, (int8x16_t)vmovl_s16(vdup_lane_s16(v20, 3))));
      --v9;
    }
    while (v9);
    v21 = (int8x16_t)vmulq_f32((float32x4_t)v11, (float32x4_t)v11);
    *(float32x2_t *)v21.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), *(float32x2_t *)v21.i8);
    v22 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), 0);
    v23 = (int8x16_t)vmulq_f32((float32x4_t)v13, (float32x4_t)v13);
    *(float32x2_t *)v23.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), *(float32x2_t *)v23.i8);
    v24 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8), 0);
    v25 = (int8x16_t)vmulq_f32((float32x4_t)v14, (float32x4_t)v14);
    *(float32x2_t *)v25.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), *(float32x2_t *)v25.i8);
    v26 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8), 0);
    v27 = (int8x16_t)vmulq_f32((float32x4_t)v15, (float32x4_t)v15);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    v28 = (int8x16_t)vcgtq_f32((float32x4_t)v24, (float32x4_t)v22);
    v29 = vbslq_s8(v28, v13, v11);
    v30 = vbslq_s8(v28, v24, v22);
    v31 = (int8x16_t)vcgtq_f32((float32x4_t)v26, (float32x4_t)v30);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), 0), (float32x4_t)vbslq_s8(v31, v26, v30)), v15, vbslq_s8(v31, v14, v29));
    *(int8x16_t *)(a3 + 32 * v7++ + 16) = result;
    v8 += 216;
  }
  while (v7 != v3);
  return result;
}

float32x4_t compute_partition_averages_rgba(_BYTE *a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  const float *v18;
  uint8x8_t v19;
  int16x4_t v20;
  int8x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t result;
  unint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t *v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  const float *v51;
  uint8x8_t v52;
  int8x8_t v53;
  int8x16_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  int32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  unint64_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int8x16_t *v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  const float *v80;
  uint8x8_t v81;
  int16x4_t v82;
  int8x8_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  unsigned __int32 v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  int32x2_t v104;
  float32x2_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;

  v3 = a2[216].u8[0];
  if (!a2[216].i8[0])
    compute_partition_averages_rgba();
  v4 = *(unsigned __int16 *)a1;
  switch(v4)
  {
    case 1:
      result = a2[219];
      *a3 = result;
      break;
    case 2:
      v42 = 0;
      v43 = vdupq_n_s32(v3);
      v44 = (int32x4_t)xmmword_18820BF90;
      v45 = 0uLL;
      v46.i64[0] = 0x400000004;
      v46.i64[1] = 0x400000004;
      v47 = (int8x16_t *)a2;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v51 = (const float *)&a1[v42 + 8];
        v52 = (uint8x8_t)vld1_dup_f32(v51);
        v53 = (int8x8_t)vmovn_s32(vcgtq_s32(v43, v44));
        v44 = vaddq_s32(v44, v46);
        v54 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v52)), v53));
        v50 = (int8x16_t)vaddq_f32((float32x4_t)v50, (float32x4_t)vandq_s8(*v47, v54));
        v49 = (int8x16_t)vaddq_f32((float32x4_t)v49, (float32x4_t)vandq_s8(v47[54], v54));
        v48 = (int8x16_t)vaddq_f32((float32x4_t)v48, (float32x4_t)vandq_s8(v47[108], v54));
        v45 = (int8x16_t)vaddq_f32((float32x4_t)v45, (float32x4_t)vandq_s8(v47[162], v54));
        v42 += 4;
        ++v47;
      }
      while (v42 < v3);
      v55 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL), *(float32x2_t *)v50.i8);
      v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL), *(float32x2_t *)v49.i8);
      v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), *(float32x2_t *)v48.i8);
      v58 = (int32x2_t)vpadd_f32(v57, v57);
      v59 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), *(float32x2_t *)v45.i8);
      *(int32x2_t *)v60.f32 = vzip1_s32((int32x2_t)vpadd_f32(v55, v55), (int32x2_t)vpadd_f32(v56, v56));
      v60.i64[1] = __PAIR64__(vpadd_f32(v59, v59).u32[0], v58.u32[0]);
      v61 = vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v60);
      v58.i8[0] = a1[4];
      *(float *)v58.i32 = (float)v58.u32[0];
      v62 = vdivq_f32(v60, (float32x4_t)vdupq_lane_s32(v58, 0));
      *a3 = v62;
      v62.i8[0] = a1[5];
      v62.f32[0] = (float)v62.u32[0];
      result = vdivq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 0));
      a3[1] = result;
      break;
    case 3:
      v5 = 0;
      v6 = vdupq_n_s32(v3);
      v7 = 0uLL;
      v8.i64[0] = 0x400000004;
      v8.i64[1] = 0x400000004;
      v9 = 0uLL;
      v10 = (int32x4_t)xmmword_18820BF90;
      v11 = (int8x16_t *)a2;
      v12 = 0uLL;
      v13 = 0uLL;
      v14 = 0uLL;
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      do
      {
        v18 = (const float *)&a1[v5 + 8];
        v19 = (uint8x8_t)vld1_dup_f32(v18);
        v20 = (int16x4_t)vmovl_u8(v19).u64[0];
        v21 = (int8x8_t)vmovn_s32(vcgtq_s32(v6, v10));
        v10 = vaddq_s32(v10, v8);
        v22 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v20), v21));
        v23 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v20, (int16x4_t)0x1000100010001), v21));
        v12 = (int8x16_t)vaddq_f32((float32x4_t)v12, (float32x4_t)vandq_s8(*v11, v22));
        v16 = (int8x16_t)vaddq_f32((float32x4_t)v16, (float32x4_t)vandq_s8(*v11, v23));
        v24 = v11[54];
        v13 = (int8x16_t)vaddq_f32((float32x4_t)v13, (float32x4_t)vandq_s8(v24, v22));
        v17 = (int8x16_t)vaddq_f32((float32x4_t)v17, (float32x4_t)vandq_s8(v24, v23));
        v25 = v11[108];
        v14 = (int8x16_t)vaddq_f32((float32x4_t)v14, (float32x4_t)vandq_s8(v25, v22));
        v9 = (int8x16_t)vaddq_f32((float32x4_t)v9, (float32x4_t)vandq_s8(v25, v23));
        v26 = v11[162];
        v15 = (int8x16_t)vaddq_f32((float32x4_t)v15, (float32x4_t)vandq_s8(v26, v22));
        v7 = (int8x16_t)vaddq_f32((float32x4_t)v7, (float32x4_t)vandq_s8(v26, v23));
        v5 += 4;
        ++v11;
      }
      while (v5 < v3);
      v27 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), *(float32x2_t *)v12.i8);
      v28 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), *(float32x2_t *)v13.i8);
      v29 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), *(float32x2_t *)v14.i8);
      v30 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), *(float32x2_t *)v15.i8);
      *(int32x2_t *)v31.f32 = vzip1_s32((int32x2_t)vpadd_f32(v27, v27), (int32x2_t)vpadd_f32(v28, v28));
      v31.i32[2] = vpadd_f32(v29, v29).u32[0];
      v31.i32[3] = vpadd_f32(v30, v30).u32[0];
      v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v16.i8);
      v33 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)v17.i8);
      v34 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(float32x2_t *)v9.i8);
      v35 = (int32x2_t)vpadd_f32(v34, v34);
      v36 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), *(float32x2_t *)v7.i8);
      *(int32x2_t *)v37.f32 = vzip1_s32((int32x2_t)vpadd_f32(v32, v32), (int32x2_t)vpadd_f32(v33, v33));
      v37.i32[2] = v35.i32[0];
      v37.i32[3] = vpadd_f32(v36, v36).u32[0];
      v38 = vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v31), v37);
      v35.i8[0] = a1[4];
      *(float *)v35.i32 = (float)v35.u32[0];
      v39 = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v35, 0));
      *a3 = v39;
      v39.i8[0] = a1[5];
      v39.f32[0] = (float)v39.u32[0];
      v40 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      a3[1] = v40;
      v40.i8[0] = a1[6];
      v40.f32[0] = (float)v40.u32[0];
      result = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
      a3[2] = result;
      break;
    default:
      v63 = 0;
      v64 = vdupq_n_s32(v3);
      v65 = 0uLL;
      v66.i64[0] = 0x400000004;
      v66.i64[1] = 0x400000004;
      v67 = (int32x4_t)xmmword_18820BF90;
      v68 = 0uLL;
      v69 = (int8x16_t *)a2;
      v70 = 0uLL;
      v71 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = 0uLL;
      v78 = 0uLL;
      v79 = 0uLL;
      do
      {
        v80 = (const float *)&a1[v63 + 8];
        v81 = (uint8x8_t)vld1_dup_f32(v80);
        v82 = (int16x4_t)vmovl_u8(v81).u64[0];
        v83 = (int8x8_t)vmovn_s32(vcgtq_s32(v64, v67));
        v67 = vaddq_s32(v67, v66);
        v84 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v82), v83));
        v85 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x1000100010001), v83));
        v86 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v82, (int16x4_t)0x2000200020002), v83));
        v65 = (int8x16_t)vaddq_f32((float32x4_t)v65, (float32x4_t)vandq_s8(*v69, v84));
        v72 = (int8x16_t)vaddq_f32((float32x4_t)v72, (float32x4_t)vandq_s8(*v69, v85));
        v76 = (int8x16_t)vaddq_f32((float32x4_t)v76, (float32x4_t)vandq_s8(*v69, v86));
        v87 = v69[54];
        v68 = (int8x16_t)vaddq_f32((float32x4_t)v68, (float32x4_t)vandq_s8(v87, v84));
        v73 = (int8x16_t)vaddq_f32((float32x4_t)v73, (float32x4_t)vandq_s8(v87, v85));
        v77 = (int8x16_t)vaddq_f32((float32x4_t)v77, (float32x4_t)vandq_s8(v87, v86));
        v88 = v69[108];
        v70 = (int8x16_t)vaddq_f32((float32x4_t)v70, (float32x4_t)vandq_s8(v88, v84));
        v74 = (int8x16_t)vaddq_f32((float32x4_t)v74, (float32x4_t)vandq_s8(v88, v85));
        v78 = (int8x16_t)vaddq_f32((float32x4_t)v78, (float32x4_t)vandq_s8(v88, v86));
        v89 = v69[162];
        v71 = (int8x16_t)vaddq_f32((float32x4_t)v71, (float32x4_t)vandq_s8(v89, v84));
        v75 = (int8x16_t)vaddq_f32((float32x4_t)v75, (float32x4_t)vandq_s8(v89, v85));
        v79 = (int8x16_t)vaddq_f32((float32x4_t)v79, (float32x4_t)vandq_s8(v89, v86));
        v63 += 4;
        ++v69;
      }
      while (v63 < v3);
      v90 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), *(float32x2_t *)v65.i8);
      v91 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
      v92 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), *(float32x2_t *)v70.i8);
      v93 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), *(float32x2_t *)v71.i8);
      v94 = vpadd_f32(v93, v93).u32[0];
      *(int32x2_t *)v95.f32 = vzip1_s32((int32x2_t)vpadd_f32(v90, v90), (int32x2_t)vpadd_f32(v91, v91));
      v95.i64[1] = __PAIR64__(v94, vpadd_f32(v92, v92).u32[0]);
      v96 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), *(float32x2_t *)v72.i8);
      v97 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), *(float32x2_t *)v73.i8);
      v98 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), *(float32x2_t *)v74.i8);
      v99 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL), *(float32x2_t *)v75.i8);
      *(int32x2_t *)v100.f32 = vzip1_s32((int32x2_t)vpadd_f32(v96, v96), (int32x2_t)vpadd_f32(v97, v97));
      v100.i32[2] = vpadd_f32(v98, v98).u32[0];
      v100.i32[3] = vpadd_f32(v99, v99).u32[0];
      v101 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), *(float32x2_t *)v76.i8);
      v102 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), *(float32x2_t *)v77.i8);
      v103 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), *(float32x2_t *)v78.i8);
      v104 = (int32x2_t)vpadd_f32(v103, v103);
      v105 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), *(float32x2_t *)v79.i8);
      *(int32x2_t *)v106.f32 = vzip1_s32((int32x2_t)vpadd_f32(v101, v101), (int32x2_t)vpadd_f32(v102, v102));
      v106.i32[2] = v104.i32[0];
      v106.i32[3] = vpadd_f32(v105, v105).u32[0];
      v107 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(a2[219], (float)v3), v95), v100), v106);
      v104.i8[0] = a1[4];
      *(float *)v104.i32 = (float)v104.u32[0];
      v108 = vdivq_f32(v95, (float32x4_t)vdupq_lane_s32(v104, 0));
      *a3 = v108;
      v108.i8[0] = a1[5];
      v108.f32[0] = (float)v108.u32[0];
      v109 = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0));
      a3[1] = v109;
      v109.i8[0] = a1[6];
      v109.f32[0] = (float)v109.u32[0];
      v110 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0));
      a3[2] = v110;
      v110.i8[0] = a1[7];
      v110.f32[0] = (float)v110.u32[0];
      result = vdivq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0));
      a3[3] = result;
      break;
  }
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp(_BYTE *a1, float32x4_t *a2, int a3, uint64_t a4)
{
  int8x16_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  int8x16_t v11;
  float32x4_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  float32x4_t v23;
  int8x16_t v24;
  unsigned __int8 *v25;
  int8x16_t v26;
  int8x16_t v27;
  int v28;
  int8x16_t v29;
  int16x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t result;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  compute_partition_averages_rgba(a1, a2, (float32x4_t *)&v37);
  v9 = a2 + 54;
  if (a3 == 2)
  {
    v13.i64[0] = v37.i64[0];
    v14.i64[0] = v38.i64[0];
    v13.i64[1] = v37.u32[3];
    v14.i64[1] = v38.u32[3];
    v15.i64[0] = v39.i64[0];
    v16.i64[0] = v40.i64[0];
    v15.i64[1] = v39.u32[3];
    v16.i64[1] = v40.u32[3];
    v37 = v13;
    v38 = v14;
    v39 = v15;
    v40 = v16;
    v12 = a2 + 162;
    v10 = a2 + 54;
LABEL_7:
    v9 = a2;
    goto LABEL_9;
  }
  v10 = a2 + 108;
  if (a3 == 1)
  {
    v17.i64[0] = __PAIR64__(v37.u32[2], v37.u32[0]);
    v17.i64[1] = v37.u32[3];
    v18.i64[0] = __PAIR64__(v38.u32[2], v38.u32[0]);
    v18.i64[1] = v38.u32[3];
    v37 = v17;
    v38 = v18;
    v17.i64[0] = __PAIR64__(v39.u32[2], v39.u32[0]);
    v17.i64[1] = v39.u32[3];
    v18.i64[0] = __PAIR64__(v40.u32[2], v40.u32[0]);
    v18.i64[1] = v40.u32[3];
    v39 = v17;
    v40 = v18;
    v12 = a2 + 162;
    goto LABEL_7;
  }
  if (a3)
  {
    v37.i32[3] = 0;
    v38.i32[3] = 0;
    v12 = a2 + 108;
    v10 = a2 + 54;
    v9 = a2;
    v39.i32[3] = 0;
    v40.i32[3] = 0;
  }
  else
  {
    v11 = vextq_s8((int8x16_t)0, (int8x16_t)0, 0xCuLL);
    v37 = vextq_s8(v37, v11, 4uLL);
    v38 = vextq_s8(v38, v11, 4uLL);
    v39 = vextq_s8(v39, v11, 4uLL);
    v40 = vextq_s8(v40, v11, 4uLL);
    v12 = a2 + 162;
  }
LABEL_9:
  v19 = *(unsigned __int16 *)a1;
  if (!*(_WORD *)a1)
    compute_avgs_and_dirs_3_comp();
  v20 = 0;
  v21 = a1 + 224;
  do
  {
    v22 = a1[v20 + 4];
    if (!a1[v20 + 4])
      compute_avgs_and_dirs_3_comp();
    v23 = *((float32x4_t *)&v37 + v20);
    *(float32x4_t *)(a4 + 32 * v20) = v23;
    v24 = 0uLL;
    v25 = v21;
    v26 = 0uLL;
    v27 = 0uLL;
    do
    {
      v28 = *v25++;
      v8.i32[0] = v9->i32[v28];
      v8.i32[1] = v10->i32[v28];
      v8.i32[2] = v12->i32[v28];
      v29 = (int8x16_t)vsubq_f32((float32x4_t)v8, v23);
      v30 = vmovn_s32(vcgtzq_f32((float32x4_t)v29));
      v24 = (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vandq_s8(v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 0))));
      v26 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vandq_s8(v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 1))));
      v8 = vandq_s8(v29, (int8x16_t)vmovl_s16(vdup_lane_s16(v30, 2)));
      v27 = (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)v8);
      --v22;
    }
    while (v22);
    v31 = (int8x16_t)vmulq_f32((float32x4_t)v24, (float32x4_t)v24);
    *(float32x2_t *)v31.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), *(float32x2_t *)v31.i8);
    v32 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), 0);
    v33 = (int8x16_t)vmulq_f32((float32x4_t)v26, (float32x4_t)v26);
    *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), *(float32x2_t *)v33.i8);
    v8 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8), 0);
    v34 = (int8x16_t)vmulq_f32((float32x4_t)v27, (float32x4_t)v27);
    *(float32x2_t *)v34.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), *(float32x2_t *)v34.i8);
    v35 = (int8x16_t)vcgtq_f32((float32x4_t)v8, (float32x4_t)v32);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), 0), (float32x4_t)vbslq_s8(v35, v8, v32)), v27, vbslq_s8(v35, v26, v24));
    *(int8x16_t *)(a4 + 32 * v20++ + 16) = result;
    v21 += 216;
  }
  while (v20 != v19);
  return result;
}

int8x16_t compute_avgs_and_dirs_3_comp_rgb(unsigned __int16 *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  uint64_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  const float *v21;
  uint8x8_t v22;
  int16x4_t v23;
  int8x8_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  int32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  const float *v48;
  uint8x8_t v49;
  int8x8_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  int32x2_t v55;
  float32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  unint64_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  int8x16_t *v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  const float *v71;
  uint8x8_t v72;
  int16x4_t v73;
  int8x8_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x4_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  int32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  unsigned __int16 *v96;
  uint64_t v97;
  float32x4_t v98;
  int8x16_t v99;
  unsigned __int16 *v100;
  int8x16_t v101;
  int8x16_t v102;
  unsigned int v103;
  unsigned __int32 *v104;
  int8x16_t v105;
  int16x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t result;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  LODWORD(v8) = *a1;
  if (!*a1)
    compute_avgs_and_dirs_3_comp_rgb();
  v9 = 0uLL;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v10 = *(unsigned __int8 *)(a2 + 3456);
  if (!*(_BYTE *)(a2 + 3456))
    compute_avgs_and_dirs_3_comp_rgb();
  switch((_DWORD)v8)
  {
    case 1:
      v40 = *(float32x4_t *)(a2 + 3504);
      v40.i32[3] = 0;
      v113 = v40;
      break;
    case 2:
      v41 = 0;
      v42 = vdupq_n_s32(v10);
      v43 = (int32x4_t)xmmword_18820BF90;
      v44.i64[0] = 0x400000004;
      v44.i64[1] = 0x400000004;
      v45 = (int8x16_t *)a2;
      v46 = 0uLL;
      v47 = 0uLL;
      do
      {
        v48 = (const float *)&a1[v41 / 2 + 4];
        v49 = (uint8x8_t)vld1_dup_f32(v48);
        v50 = (int8x8_t)vmovn_s32(vcgtq_s32(v42, v43));
        v43 = vaddq_s32(v43, v44);
        v51 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v49)), v50));
        v47 = (int8x16_t)vaddq_f32((float32x4_t)v47, (float32x4_t)vandq_s8(*v45, v51));
        v46 = (int8x16_t)vaddq_f32((float32x4_t)v46, (float32x4_t)vandq_s8(v45[54], v51));
        v9 = (int8x16_t)vaddq_f32((float32x4_t)v9, (float32x4_t)vandq_s8(v45[108], v51));
        v41 += 4;
        ++v45;
      }
      while (v41 < v10);
      v52 = *(float32x4_t *)(a2 + 3504);
      v52.i32[3] = 0;
      *(float32x2_t *)v53.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(float32x2_t *)v47.i8);
      v53.i32[0] = vpadd_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32).u32[0];
      v54 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL), *(float32x2_t *)v46.i8);
      v55 = (int32x2_t)vpadd_f32(v54, v54);
      a8 = vextq_s8(v9, v9, 8uLL);
      v56 = vadd_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v9.i8);
      v53.i32[1] = v55.i32[0];
      v53.i64[1] = vpadd_f32(v56, v56).u32[0];
      v57 = vsubq_f32(vmulq_n_f32(v52, (float)v10), v53);
      v55.i8[0] = *((_BYTE *)a1 + 4);
      *(float *)v55.i32 = (float)v55.u32[0];
      v58 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32(v55, 0));
      v53.i8[0] = *((_BYTE *)a1 + 5);
      v53.f32[0] = (float)v53.u32[0];
      v113 = v58;
      v114 = vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0));
      break;
    case 3:
      v11 = 0;
      v12 = vdupq_n_s32(v10);
      v13.i64[0] = 0x400000004;
      v13.i64[1] = 0x400000004;
      v14 = (int32x4_t)xmmword_18820BF90;
      v15 = (int8x16_t *)a2;
      v16 = 0uLL;
      v17 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v21 = (const float *)&a1[v11 / 2 + 4];
        v22 = (uint8x8_t)vld1_dup_f32(v21);
        v23 = (int16x4_t)vmovl_u8(v22).u64[0];
        v24 = (int8x8_t)vmovn_s32(vcgtq_s32(v12, v14));
        v14 = vaddq_s32(v14, v13);
        v25 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v23), v24));
        v26 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v23, (int16x4_t)0x1000100010001), v24));
        v19 = (int8x16_t)vaddq_f32((float32x4_t)v19, (float32x4_t)vandq_s8(*v15, v25));
        v17 = (int8x16_t)vaddq_f32((float32x4_t)v17, (float32x4_t)vandq_s8(*v15, v26));
        v27 = v15[54];
        v20 = (int8x16_t)vaddq_f32((float32x4_t)v20, (float32x4_t)vandq_s8(v27, v25));
        v16 = (int8x16_t)vaddq_f32((float32x4_t)v16, (float32x4_t)vandq_s8(v27, v26));
        v28 = v15[108];
        v18 = (int8x16_t)vaddq_f32((float32x4_t)v18, (float32x4_t)vandq_s8(v28, v25));
        v9 = (int8x16_t)vaddq_f32((float32x4_t)v9, (float32x4_t)vandq_s8(v28, v26));
        v11 += 4;
        ++v15;
      }
      while (v11 < v10);
      v29 = *(float32x4_t *)(a2 + 3504);
      v29.i32[3] = 0;
      *(float32x2_t *)v30.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v19.i8);
      v31 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), *(float32x2_t *)v20.i8);
      v32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), *(float32x2_t *)v18.i8);
      v30.i32[0] = vpadd_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32).u32[0];
      v30.i32[1] = vpadd_f32(v31, v31).u32[0];
      v30.i64[1] = vpadd_f32(v32, v32).u32[0];
      v33 = vmulq_n_f32(v29, (float)v10);
      *(float32x2_t *)v34.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), *(float32x2_t *)v17.i8);
      v34.i32[0] = vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).u32[0];
      v35 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), *(float32x2_t *)v16.i8);
      v36 = (int32x2_t)vpadd_f32(v35, v35);
      a8 = vextq_s8(v9, v9, 8uLL);
      v37 = vadd_f32(*(float32x2_t *)a8.i8, *(float32x2_t *)v9.i8);
      v34.i32[1] = v36.i32[0];
      v34.i64[1] = vpadd_f32(v37, v37).u32[0];
      v38 = vsubq_f32(vsubq_f32(v33, v30), v34);
      v36.i8[0] = *((_BYTE *)a1 + 4);
      *(float *)v36.i32 = (float)v36.u32[0];
      v39 = vdivq_f32(v30, (float32x4_t)vdupq_lane_s32(v36, 0));
      v33.i8[0] = *((_BYTE *)a1 + 5);
      v33.f32[0] = (float)v33.u32[0];
      v113 = v39;
      v114 = vdivq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0));
      v39.i8[0] = *((_BYTE *)a1 + 6);
      v39.f32[0] = (float)v39.u32[0];
      v115 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      break;
    default:
      v59 = 0;
      v60 = vdupq_n_s32(v10);
      v61 = 0uLL;
      v62.i64[0] = 0x400000004;
      v62.i64[1] = 0x400000004;
      v63 = (int32x4_t)xmmword_18820BF90;
      v64 = 0uLL;
      v65 = (int8x16_t *)a2;
      v66 = 0uLL;
      v67 = 0uLL;
      a8 = 0uLL;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      do
      {
        v71 = (const float *)&a1[v59 / 2 + 4];
        v72 = (uint8x8_t)vld1_dup_f32(v71);
        v73 = (int16x4_t)vmovl_u8(v72).u64[0];
        v74 = (int8x8_t)vmovn_s32(vcgtq_s32(v60, v63));
        v63 = vaddq_s32(v63, v62);
        v75 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceqz_s16(v73), v74));
        v76 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v73, (int16x4_t)0x1000100010001), v74));
        v77 = (int8x16_t)vmovl_s16((int16x4_t)vand_s8((int8x8_t)vceq_s16(v73, (int16x4_t)0x2000200020002), v74));
        v61 = (int8x16_t)vaddq_f32((float32x4_t)v61, (float32x4_t)vandq_s8(*v65, v75));
        v67 = (int8x16_t)vaddq_f32((float32x4_t)v67, (float32x4_t)vandq_s8(*v65, v76));
        v69 = (int8x16_t)vaddq_f32((float32x4_t)v69, (float32x4_t)vandq_s8(*v65, v77));
        v78 = v65[54];
        v64 = (int8x16_t)vaddq_f32((float32x4_t)v64, (float32x4_t)vandq_s8(v78, v75));
        a8 = (int8x16_t)vaddq_f32((float32x4_t)a8, (float32x4_t)vandq_s8(v78, v76));
        v70 = (int8x16_t)vaddq_f32((float32x4_t)v70, (float32x4_t)vandq_s8(v78, v77));
        v79 = v65[108];
        v66 = (int8x16_t)vaddq_f32((float32x4_t)v66, (float32x4_t)vandq_s8(v79, v75));
        v68 = (int8x16_t)vaddq_f32((float32x4_t)v68, (float32x4_t)vandq_s8(v79, v76));
        v9 = (int8x16_t)vaddq_f32((float32x4_t)v9, (float32x4_t)vandq_s8(v79, v77));
        v59 += 4;
        ++v65;
      }
      while (v59 < v10);
      v80 = *(float32x4_t *)(a2 + 3504);
      v80.i32[3] = 0;
      *(float32x2_t *)v81.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), *(float32x2_t *)v61.i8);
      v82 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), *(float32x2_t *)v64.i8);
      v83 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), *(float32x2_t *)v66.i8);
      v81.i32[0] = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
      v81.i32[1] = vpadd_f32(v82, v82).u32[0];
      v81.i64[1] = vpadd_f32(v83, v83).u32[0];
      *(float32x2_t *)v84.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), *(float32x2_t *)v67.i8);
      v84.i32[0] = vpadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v84.f32).u32[0];
      v85 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(a8, a8, 8uLL), *(float32x2_t *)a8.i8);
      v86 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), *(float32x2_t *)v68.i8);
      v84.i32[1] = vpadd_f32(v85, v85).u32[0];
      v84.i64[1] = vpadd_f32(v86, v86).u32[0];
      *(float32x2_t *)v87.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL), *(float32x2_t *)v69.i8);
      v87.i32[0] = vpadd_f32(*(float32x2_t *)v87.f32, *(float32x2_t *)v87.f32).u32[0];
      v88 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), *(float32x2_t *)v70.i8);
      v89 = (int32x2_t)vpadd_f32(v88, v88);
      v90 = (float32x2_t)vextq_s8(v9, v9, 8uLL).u64[0];
      v91 = vadd_f32(v90, *(float32x2_t *)v9.i8);
      v87.i32[1] = v89.i32[0];
      v87.i64[1] = vpadd_f32(v91, v91).u32[0];
      v92 = vsubq_f32(vsubq_f32(vsubq_f32(vmulq_n_f32(v80, (float)v10), v81), v84), v87);
      v89.i8[0] = *((_BYTE *)a1 + 4);
      *(float *)v89.i32 = (float)v89.u32[0];
      v93 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32(v89, 0));
      v90.i8[0] = *((_BYTE *)a1 + 5);
      v90.f32[0] = (float)v90.u32[0];
      v113 = v93;
      v114 = vdivq_f32(v84, (float32x4_t)vdupq_lane_s32((int32x2_t)v90, 0));
      v93.i8[0] = *((_BYTE *)a1 + 6);
      v93.f32[0] = (float)v93.u32[0];
      v94 = vdivq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 0));
      v87.i8[0] = *((_BYTE *)a1 + 7);
      v87.f32[0] = (float)v87.u32[0];
      v115 = v94;
      v116 = vdivq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 0));
      break;
  }
  v95 = 0;
  if (v8 <= 1)
    v8 = 1;
  else
    v8 = v8;
  v96 = a1 + 112;
  do
  {
    v97 = *((unsigned __int8 *)a1 + v95 + 4);
    if (!*((_BYTE *)a1 + v95 + 4))
      compute_avgs_and_dirs_3_comp_rgb();
    v98 = *(&v113 + v95);
    *(float32x4_t *)(a3 + 32 * v95) = v98;
    v99 = 0uLL;
    v100 = v96;
    v101 = 0uLL;
    v102 = 0uLL;
    do
    {
      v103 = *(unsigned __int8 *)v100;
      v100 = (unsigned __int16 *)((char *)v100 + 1);
      v104 = (unsigned __int32 *)(a2 + 4 * v103);
      a8.i32[0] = *v104;
      a8.i32[1] = v104[216];
      a8.i32[2] = v104[432];
      v105 = (int8x16_t)vsubq_f32((float32x4_t)a8, v98);
      v106 = vmovn_s32(vcgtzq_f32((float32x4_t)v105));
      v99 = (int8x16_t)vaddq_f32((float32x4_t)v99, (float32x4_t)vandq_s8(v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 0))));
      v101 = (int8x16_t)vaddq_f32((float32x4_t)v101, (float32x4_t)vandq_s8(v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 1))));
      a8 = vandq_s8(v105, (int8x16_t)vmovl_s16(vdup_lane_s16(v106, 2)));
      v102 = (int8x16_t)vaddq_f32((float32x4_t)v102, (float32x4_t)a8);
      --v97;
    }
    while (v97);
    v107 = (int8x16_t)vmulq_f32((float32x4_t)v99, (float32x4_t)v99);
    *(float32x2_t *)v107.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL), *(float32x2_t *)v107.i8);
    v108 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8), 0);
    v109 = (int8x16_t)vmulq_f32((float32x4_t)v101, (float32x4_t)v101);
    *(float32x2_t *)v109.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), *(float32x2_t *)v109.i8);
    a8 = (int8x16_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v109.i8), 0);
    v110 = (int8x16_t)vmulq_f32((float32x4_t)v102, (float32x4_t)v102);
    *(float32x2_t *)v110.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(float32x2_t *)v110.i8);
    v111 = (int8x16_t)vcgtq_f32((float32x4_t)a8, (float32x4_t)v108);
    result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v110.i8), 0), (float32x4_t)vbslq_s8(v111, a8, v108)), v102, vbslq_s8(v111, v101, v99));
    *(int8x16_t *)(a3 + 32 * v95++ + 16) = result;
    v96 += 108;
  }
  while (v95 != v8);
  return result;
}

_WORD *compute_avgs_and_dirs_2_comp(_WORD *result, int8x16_t *a2, int a3, int a4, uint64_t a5, double a6, double a7, double a8, int8x16_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  int16x4_t v25;
  int8x16_t v26;
  int8x16_t v27;

  if (a3 || a4 != 1)
  {
    if (a3 || a4 != 2)
    {
      if (a3 != 1 || a4 != 2)
        compute_avgs_and_dirs_2_comp();
      v9.i64[1] = 0;
      v10 = (float32x4_t)vextq_s8(a2[219], (int8x16_t)0, 4uLL).u64[0];
      v11 = a2 + 108;
      a2 += 54;
    }
    else
    {
      v9 = (float32x4_t)vzip2q_s32((int32x4_t)0, (int32x4_t)0);
      v10 = (float32x4_t)vuzp1q_s32((int32x4_t)a2[219], (int32x4_t)v9);
      v11 = a2 + 108;
    }
  }
  else
  {
    v10 = (float32x4_t)a2[219];
    v9.i64[1] = 0;
    v10.i64[1] = 0;
    v11 = a2 + 54;
  }
  v12 = (unsigned __int16)*result;
  if (!*result)
    compute_avgs_and_dirs_2_comp();
  v13 = 0;
  v14 = (unsigned __int8 *)(result + 112);
  do
  {
    LODWORD(v15) = *((unsigned __int8 *)result + v13 + 4);
    if (!*((_BYTE *)result + v13 + 4))
      compute_avgs_and_dirs_2_comp();
    if ((_DWORD)v12 != 1)
    {
      v16 = 0uLL;
      v17 = *((unsigned __int8 *)result + v13 + 4);
      v18 = v14;
      do
      {
        v19 = *v18++;
        v9.i32[0] = a2->i32[v19];
        v9.i32[1] = v11->i32[v19];
        v16 = vaddq_f32(v16, v9);
        --v17;
      }
      while (v17);
      v9.f32[0] = (float)v15;
      v10 = vdivq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0));
    }
    v20 = 0;
    *(float32x4_t *)(a5 + 32 * v13) = v10;
    if (v15 <= 1)
      v15 = 1;
    else
      v15 = v15;
    v21 = 0uLL;
    v22 = 0uLL;
    do
    {
      v23 = v14[v20];
      a9.i32[0] = a2->i32[v23];
      a9.i32[1] = v11->i32[v23];
      v24 = (int8x16_t)vsubq_f32((float32x4_t)a9, v10);
      v25 = vmovn_s32(vcgtzq_f32((float32x4_t)v24));
      v21 = (int8x16_t)vaddq_f32((float32x4_t)v21, (float32x4_t)vandq_s8(v24, (int8x16_t)vmovl_s16(vdup_lane_s16(v25, 0))));
      a9 = vandq_s8(v24, (int8x16_t)vmovl_s16(vdup_lane_s16(v25, 1)));
      v22 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)a9);
      ++v20;
    }
    while (v15 != v20);
    v26 = (int8x16_t)vmulq_f32((float32x4_t)v21, (float32x4_t)v21);
    *(float32x2_t *)v26.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), *(float32x2_t *)v26.i8);
    v27 = (int8x16_t)vmulq_f32((float32x4_t)v22, (float32x4_t)v22);
    *(float32x2_t *)v27.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), *(float32x2_t *)v27.i8);
    a9 = (int8x16_t)vmovl_s16(vdup_lane_s16((int16x4_t)vcgt_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), vpadd_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8)), 0));
    v9 = (float32x4_t)vbslq_s8(a9, v22, v21);
    *(float32x4_t *)(a5 + 32 * v13++ + 16) = v9;
    v14 += 216;
  }
  while (v13 != v12);
  return result;
}

float32x2_t compute_error_squared_rgba(_WORD *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t *v12;
  _WORD *v13;
  int8x16_t v14;
  __int128 v15;
  uint32x4_t *v16;
  int8x16_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  float *v21;
  int8x16_t v22;
  unint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  _OWORD *v27;
  int32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int32 *v45;
  float32x4_t v46;
  __int32 *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int v62;
  int v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t result;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  __int128 v71;
  int8x16_t v72;
  _DWORD *v73;
  uint64_t v74;
  float32x4_t *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t *v82;
  float32x4_t *v83;
  float32x4_t *v84;
  _WORD *v85;
  unint64_t v86;

  v8 = (unsigned __int16)*a1;
  if (!*a1)
    compute_error_squared_rgba();
  v9 = 0;
  v10 = a2 + 54;
  v11 = a2 + 108;
  v12 = a2 + 162;
  v13 = a1 + 112;
  v14 = 0uLL;
  v15 = xmmword_18820BF90;
  v16 = (uint32x4_t *)&unk_1EDF03000;
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  v18 = vdupq_n_s32(0x501502F9u);
  v19 = vdupq_n_s32(0xD01502F9);
  v20.i64[0] = 0x400000004;
  v20.i64[1] = 0x400000004;
  v21 = (float *)&unk_188232000;
  v22 = 0uLL;
  do
  {
    v23 = *((unsigned __int8 *)a1 + v9 + 4);
    if (!*((_BYTE *)a1 + v9 + 4))
      compute_error_squared_rgba();
    v24 = (float32x4_t *)(a4 + 32 * v9);
    v25 = *v24;
    v26 = v24[1];
    v27 = (_OWORD *)(a3 + 32 * v9);
    v28 = *(int32x4_t *)v27;
    v29 = *((float32x4_t *)v27 + 1);
    if ((v27 & 1) == 0)
    {
      v79 = a1;
      v76 = a7;
      v77 = a5;
      v73 = a6;
      v74 = a4;
      v78 = a3;
      v75 = a2;
      v80 = v8;
      v81 = v9;
      v82 = v10;
      v83 = v11;
      v84 = v12;
      v85 = v13;
      v86 = *((unsigned __int8 *)a1 + v9 + 4);
      v71 = v15;
      v72 = v14;
      v69 = v19;
      v70 = v18;
      v68 = v28;
      v67 = v25;
      v25 = v67;
      v28 = v68;
      v19 = v69;
      v20.i64[0] = 0x400000004;
      v20.i64[1] = 0x400000004;
      v18 = v70;
      v15 = v71;
      v17.i64[0] = 0x100000001;
      v17.i64[1] = 0x100000001;
      v14 = v72;
      v13 = v85;
      v23 = v86;
      v21 = (float *)&unk_188232000;
      v16 = (uint32x4_t *)&unk_1EDF03000;
      v11 = v83;
      v12 = v84;
      v9 = v81;
      v10 = v82;
      a4 = v74;
      a2 = v75;
      a5 = v77;
      a3 = v78;
      a6 = v73;
      a7 = v76;
      v63 = v62;
      a1 = v79;
      v8 = v80;
      if (v63)
      {
        mask(vmask4)::shift = v71;
        v25 = v67;
        v28 = v68;
        v19 = v69;
        v20.i64[0] = 0x400000004;
        v20.i64[1] = 0x400000004;
        v18 = v70;
        v15 = v71;
        v17.i64[0] = 0x100000001;
        v17.i64[1] = 0x100000001;
        v14 = v72;
        v13 = v85;
        v23 = v86;
        v21 = (float *)&unk_188232000;
        v16 = (uint32x4_t *)&unk_1EDF03000;
        v11 = v83;
        v12 = v84;
        v9 = v81;
        v10 = v82;
        a1 = v79;
        v8 = v80;
        a4 = v74;
        a2 = v75;
        a5 = v77;
        a3 = v78;
        a6 = v73;
        a7 = v76;
      }
    }
    if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqzq_f32(v25), v17), v16[59])) != 15)
      compute_error_squared_rgba();
    v30 = 0;
    v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 0);
    v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 1);
    v33 = (float32x4_t)vdupq_laneq_s32(v28, 2);
    v34 = (float32x4_t)vdupq_laneq_s32(v28, 3);
    v35 = a2[221];
    v36 = (int32x4_t)v15;
    v37 = (float32x4_t)v19;
    v38 = (float32x4_t)v18;
    v39 = vdupq_n_s32(v23);
    do
    {
      v7.i32[0] = *(_DWORD *)&v13[v30 / 2];
      v40 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.f32));
      v41 = v40.u32[1];
      v42 = v40.u32[3];
      v43 = v40.u32[0];
      v44 = v40.u32[2];
      v40.i32[0] = a2->i32[v40.u32[0]];
      v45 = &v10->i32[v40.u32[1]];
      v40.i32[1] = a2->i32[v40.u32[1]];
      v46.i32[0] = v10->i32[v43];
      v46.i32[1] = *v45;
      v40.i32[2] = a2->i32[v40.u32[2]];
      v47 = &v10->i32[v40.u32[3]];
      v46.i32[2] = v10->i32[v44];
      v40.i32[3] = a2->i32[v40.u32[3]];
      v48.i32[0] = v11->i32[v43];
      v46.i32[3] = *v47;
      v48.i32[1] = v11->i32[v41];
      v48.i32[2] = v11->i32[v44];
      v49.i32[0] = v12->i32[v43];
      v48.i32[3] = v11->i32[v42];
      v49.i32[1] = v12->i32[v41];
      v49.i32[2] = v12->i32[v44];
      v49.i32[3] = v12->i32[v42];
      v50 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v40, v29.f32[0]), vmulq_lane_f32(v46, *(float32x2_t *)v29.f32, 1)), vmulq_laneq_f32(v48, v29, 2)), vmulq_laneq_f32(v49, v29, 3));
      v38 = vminnmq_f32(v50, v38);
      v37 = vmaxnmq_f32(v50, v37);
      v51 = vaddq_f32(vsubq_f32(v31, v40), vmulq_n_f32(v50, v29.f32[0]));
      v52 = vaddq_f32(vsubq_f32(v32, v46), vmulq_lane_f32(v50, *(float32x2_t *)v29.f32, 1));
      v53 = vaddq_f32(vsubq_f32(v33, v48), vmulq_laneq_f32(v50, v29, 2));
      v54 = vaddq_f32(vsubq_f32(v34, v49), vmulq_laneq_f32(v50, v29, 3));
      v55 = (int8x16_t)vcgtq_s32(v39, v36);
      v56 = vaddq_f32(vmulq_f32(v51, vmulq_n_f32(v51, v35.f32[0])), vmulq_f32(v52, vmulq_lane_f32(v52, *(float32x2_t *)v35.f32, 1)));
      v57 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v40, v26.f32[0]), vmulq_lane_f32(v46, *(float32x2_t *)v26.f32, 1)), vmulq_laneq_f32(v48, v26, 2)), vmulq_laneq_f32(v49, v26, 3));
      v58 = vsubq_f32(vmulq_n_f32(v57, v26.f32[0]), v40);
      v59 = vsubq_f32(vmulq_lane_f32(v57, *(float32x2_t *)v26.f32, 1), v46);
      v60 = vsubq_f32(vmulq_laneq_f32(v57, v26, 2), v48);
      v61 = vsubq_f32(vmulq_laneq_f32(v57, v26, 3), v49);
      v22 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v54, vmulq_laneq_f32(v54, v35, 3)), vaddq_f32(vmulq_f32(v53, vmulq_laneq_f32(v53, v35, 2)), v56)), v55));
      v7 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v61, vmulq_laneq_f32(v61, v35, 3)), vaddq_f32(vmulq_f32(v60, vmulq_laneq_f32(v60, v35, 2)), vaddq_f32(vmulq_f32(v58, vmulq_n_f32(v58, v35.f32[0])), vmulq_f32(v59, vmulq_lane_f32(v59, *(float32x2_t *)v35.f32, 1))))), v55);
      v14 = (int8x16_t)vaddq_f32((float32x4_t)v14, v7);
      v36 = vaddq_s32(v36, v20);
      v30 += 4;
    }
    while (v30 < v23);
    *(float *)(a5 + 4 * v9++) = fmaxf(vmaxvq_f32(v37) - vminvq_f32(v38), v21[254]);
    v13 += 108;
  }
  while (v9 != v8);
  v64 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL), *(float32x2_t *)v22.i8);
  *a6 = vpadd_f32(v64, v64).u32[0];
  v65 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL), *(float32x2_t *)v14.i8);
  result = vpadd_f32(v65, v65);
  *a7 = result.i32[0];
  return result;
}

float32x2_t compute_error_squared_rgb(_WORD *a1, float32x4_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t *v9;
  _WORD *v10;
  int8x16_t v11;
  __int128 v12;
  uint32x4_t *v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float *v18;
  int8x16_t v19;
  unint64_t v20;
  _OWORD *v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  __int32 *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int v54;
  int v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t result;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  __int128 v65;
  int8x16_t v66;
  _DWORD *v67;
  float32x4_t *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _WORD *v72;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  _WORD *v76;
  unint64_t v77;

  v6 = (unsigned __int16)*a1;
  if (!*a1)
    compute_error_squared_rgb();
  v7 = 0;
  v8 = a2 + 54;
  v9 = a2 + 108;
  v10 = a1 + 112;
  v11 = 0uLL;
  v12 = xmmword_18820BF90;
  v13 = (uint32x4_t *)&unk_1EDF03000;
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vdupq_n_s32(0x501502F9u);
  v16 = vdupq_n_s32(0xD01502F9);
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18 = (float *)&unk_188232000;
  v19 = 0uLL;
  do
  {
    v20 = *((unsigned __int8 *)a1 + v7 + 4);
    if (!*((_BYTE *)a1 + v7 + 4))
      compute_error_squared_rgb();
    v21 = (_OWORD *)(a3 + 144 * v7);
    v22 = *((int32x4_t *)v21 + 4);
    v23 = *((float32x4_t *)v21 + 5);
    v24 = *((float32x4_t *)v21 + 6);
    v25 = *((float32x4_t *)v21 + 7);
    if ((v21 & 1) == 0)
    {
      v72 = a1;
      v69 = a5;
      v67 = a4;
      v70 = a3;
      v71 = v6;
      v68 = a2;
      v73 = v7;
      v74 = v8;
      v75 = v9;
      v76 = v10;
      v77 = *((unsigned __int8 *)a1 + v7 + 4);
      v65 = v12;
      v66 = v11;
      v63 = v16;
      v64 = v15;
      v61 = v23;
      v62 = v19;
      v60 = v22;
      v59 = v24;
      v24 = v59;
      v22 = v60;
      v23 = v61;
      v19 = v62;
      v16 = v63;
      v17.i64[0] = 0x400000004;
      v17.i64[1] = 0x400000004;
      v15 = v64;
      v12 = v65;
      v14.i64[0] = 0x100000001;
      v14.i64[1] = 0x100000001;
      v11 = v66;
      v10 = v76;
      v20 = v77;
      v18 = (float *)&unk_188232000;
      v13 = (uint32x4_t *)&unk_1EDF03000;
      v8 = v74;
      v9 = v75;
      a3 = v70;
      v6 = v71;
      a2 = v68;
      a5 = v69;
      a4 = v67;
      v55 = v54;
      a1 = v72;
      v7 = v73;
      if (v55)
      {
        mask(vmask4)::shift = v65;
        v24 = v59;
        v22 = v60;
        v23 = v61;
        v19 = v62;
        v16 = v63;
        v17.i64[0] = 0x400000004;
        v17.i64[1] = 0x400000004;
        v15 = v64;
        v12 = v65;
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        v11 = v66;
        v10 = v76;
        v20 = v77;
        v18 = (float *)&unk_188232000;
        v13 = (uint32x4_t *)&unk_1EDF03000;
        v8 = v74;
        v9 = v75;
        a1 = v72;
        v7 = v73;
        a3 = v70;
        v6 = v71;
        a2 = v68;
        a5 = v69;
        a4 = v67;
      }
    }
    if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqzq_f32(v24), v14), v13[59])) != 15)
      compute_error_squared_rgb();
    v26 = 0;
    v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
    v29 = (float32x4_t)vdupq_laneq_s32(v22, 2);
    v30 = a2[221];
    v31 = (int32x4_t)v12;
    v32 = (float32x4_t)v16;
    v33 = (float32x4_t)v15;
    v34 = vdupq_n_s32(v20);
    do
    {
      v5.i32[0] = *(_DWORD *)&v10[v26 / 2];
      v35 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v5.f32));
      v36 = v35.u32[1];
      v37 = v35.u32[1];
      v38 = v35.u32[0];
      v39 = v35.u32[3];
      v40 = v35.u32[2];
      v35.i32[0] = a2->i32[v35.u32[0]];
      v35.i32[1] = a2->i32[v35.u32[1]];
      v41.i32[0] = v8->i32[v38];
      v35.i32[2] = a2->i32[v35.u32[2]];
      v41.i32[1] = v8->i32[v36];
      v42 = &v8->i32[v35.u32[3]];
      v35.i32[3] = a2->i32[v35.u32[3]];
      v41.i32[2] = v8->i32[v40];
      v41.i32[3] = *v42;
      v43.i32[0] = v9->i32[v38];
      v43.i32[1] = v9->i32[v37];
      v43.i32[2] = v9->i32[v40];
      v43.i32[3] = v9->i32[v39];
      v44 = vaddq_f32(vaddq_f32(vmulq_n_f32(v35, v23.f32[0]), vmulq_lane_f32(v41, *(float32x2_t *)v23.f32, 1)), vmulq_laneq_f32(v43, v23, 2));
      v33 = vminnmq_f32(v44, v33);
      v32 = vmaxnmq_f32(v44, v32);
      v45 = vaddq_f32(vsubq_f32(v27, v35), vmulq_n_f32(v44, v23.f32[0]));
      v46 = vaddq_f32(vsubq_f32(v28, v41), vmulq_lane_f32(v44, *(float32x2_t *)v23.f32, 1));
      v47 = vaddq_f32(vsubq_f32(v29, v43), vmulq_laneq_f32(v44, v23, 2));
      v48 = (int8x16_t)vcgtq_s32(v34, v31);
      v49 = vaddq_f32(vmulq_f32(v45, vmulq_n_f32(v45, v30.f32[0])), vmulq_f32(v46, vmulq_lane_f32(v46, *(float32x2_t *)v30.f32, 1)));
      v50 = vaddq_f32(vaddq_f32(vmulq_n_f32(v35, v25.f32[0]), vmulq_lane_f32(v41, *(float32x2_t *)v25.f32, 1)), vmulq_laneq_f32(v43, v25, 2));
      v51 = vsubq_f32(vmulq_n_f32(v50, v25.f32[0]), v35);
      v52 = vsubq_f32(vmulq_lane_f32(v50, *(float32x2_t *)v25.f32, 1), v41);
      v53 = vsubq_f32(vmulq_laneq_f32(v50, v25, 2), v43);
      v19 = (int8x16_t)vaddq_f32((float32x4_t)v19, (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v47, vmulq_laneq_f32(v47, v30, 2)), v49), v48));
      v5 = (float32x4_t)vandq_s8((int8x16_t)vaddq_f32(vmulq_f32(v53, vmulq_laneq_f32(v53, v30, 2)), vaddq_f32(vmulq_f32(v51, vmulq_n_f32(v51, v30.f32[0])), vmulq_f32(v52, vmulq_lane_f32(v52, *(float32x2_t *)v30.f32, 1)))), v48);
      v11 = (int8x16_t)vaddq_f32((float32x4_t)v11, v5);
      v31 = vaddq_s32(v31, v17);
      v26 += 4;
    }
    while (v26 < v20);
    *(float *)(a3 + 144 * v7++ + 128) = fmaxf(vmaxvq_f32(v32) - vminvq_f32(v33), v18[254]);
    v10 += 108;
  }
  while (v7 != v6);
  v56 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v19.i8);
  *a4 = vpadd_f32(v56, v56).u32[0];
  v57 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), *(float32x2_t *)v11.i8);
  result = vpadd_f32(v57, v57);
  *a5 = result.i32[0];
  return result;
}

void compute_avgs_and_dirs_4_comp()
{
  __assert_rtn("compute_avgs_and_dirs_4_comp", "astcenc_averages_and_directions.cpp", 394, "partition_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_4_comp", "astcenc_averages_and_directions.cpp", 404, "texel_count > 0");
}

void compute_partition_averages_rgba()
{
  __assert_rtn("compute_partition_averages_rgba", "astcenc_averages_and_directions.cpp", 225, "texel_count > 0");
}

void compute_avgs_and_dirs_3_comp()
{
  __assert_rtn("compute_avgs_and_dirs_3_comp", "astcenc_averages_and_directions.cpp", 513, "partition_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_3_comp", "astcenc_averages_and_directions.cpp", 519, "texel_count > 0");
}

void compute_avgs_and_dirs_3_comp_rgb()
{
  __assert_rtn("compute_avgs_and_dirs_3_comp_rgb", "astcenc_averages_and_directions.cpp", 574, "partition_count > 0");
}

{
  __assert_rtn("compute_partition_averages_rgb", "astcenc_averages_and_directions.cpp", 54, "texel_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_3_comp_rgb", "astcenc_averages_and_directions.cpp", 584, "texel_count > 0");
}

void compute_avgs_and_dirs_2_comp()
{
  __assert_rtn("compute_avgs_and_dirs_2_comp", "astcenc_averages_and_directions.cpp", 668, "partition_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_2_comp", "astcenc_averages_and_directions.cpp", 674, "texel_count > 0");
}

{
  __assert_rtn("compute_avgs_and_dirs_2_comp", "astcenc_averages_and_directions.cpp", 659, "component1 == 1 && component2 == 2");
}

void compute_error_squared_rgba()
{
  __assert_rtn("compute_error_squared_rgba", "astcenc_averages_and_directions.cpp", 733, "partition_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgba", "astcenc_averages_and_directions.cpp", 746, "texel_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgba", "astcenc_averages_and_directions.cpp", 764, "all(l_samec.amod == vfloat4(0.0f))");
}

void compute_error_squared_rgb()
{
  __assert_rtn("compute_error_squared_rgb", "astcenc_averages_and_directions.cpp", 851, "partition_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgb", "astcenc_averages_and_directions.cpp", 861, "texel_count > 0");
}

{
  __assert_rtn("compute_error_squared_rgb", "astcenc_averages_and_directions.cpp", 879, "all(l_samec.amod == vfloat4(0.0f))");
}

block_size_descriptor *compress_block(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  float v6;
  float v7;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unsigned __int8 v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int32x4_t v20;
  char v21;
  float v22;
  int8x16_t v23;
  float32x2_t v24;
  float v25;
  float v26;
  float v27;
  unsigned __int8 v28;
  float32x4_t *v29;
  _BYTE *v30;
  _BOOL8 v31;
  float32x4_t v36;
  block_size_descriptor *v37;
  uint64_t v38;
  float v39;
  float v40;
  _BOOL8 v41;
  float v42;
  float v43;
  uint64_t block_mode;
  float32x2_t v45;
  float v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  int v94;
  int v95;
  int32x4_t *v96;
  float v97;
  int8x16_t v98;
  unsigned int v99;
  float32x4_t v100;
  float32x4_t v101;
  unsigned __int8 v102;
  int8x16_t v103;
  float v104;
  int8x16_t *v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned __int16 *v109;
  float32x4_t *v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float v124;
  float v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  char v135;
  uint64_t v136;
  unsigned __int8 *v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  float32x4_t v143;
  uint8x8_t v144;
  uint8x8_t v145;
  int8x16_t v146;
  char *partition_info;
  unsigned int v148;
  float v149;
  float v150;
  float v151;
  int v152;
  int v154;
  _WORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char v162;
  unsigned int v163;
  int v164;
  float v165;
  float v166;
  unsigned int *v167;
  unsigned int v168;
  char v169;
  block_size_descriptor *v170;
  char v171;
  float v172;
  unsigned int v173;
  char v174;
  int v175;
  uint64_t v176;
  int8x16_t v177;
  unsigned __int8 *v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int best_partition_candidates;
  float v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  float v189;
  float32x4_t v192;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  unsigned __int16 *v198;
  float32x4_t *v199;
  uint64_t v200;
  float32x4_t v201;
  uint64_t v202;
  int8x16_t v203;
  _BYTE *v204;
  int v205;
  unsigned int v206;
  int v207;
  float32x4_t v208;
  float32x4_t *v209;
  unsigned int v210;
  uint64_t v211;
  float32x4_t *v212;
  float32x4_t v213;
  _DWORD *v214;
  unsigned int v215;
  uint64_t v217;
  unsigned int v219;
  float32x4_t v220;
  float32x4_t v221;
  int v222;
  unsigned __int8 *v223;
  float32x4_t v224;
  float32x4_t v225;
  unsigned int *v226;
  block_size_descriptor *v227[2];
  int8x16_t v229;
  float32x4_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  float32x4_t v234;
  __int128 v235;
  __int128 v236;
  float32x4_t v237;
  int32x4_t v238;
  int8x16_t v239;
  float v240[2];
  int v241;
  uint64_t v242;
  int v243;
  __int128 v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  unsigned int v249[4];
  _OWORD v250[2];
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  int v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  int v263;
  _OWORD v264[2];
  _OWORD v265[2];
  _OWORD v266[2];
  _OWORD v267[2];
  int8x16_t v268;
  int8x16_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  float32x4_t v273;
  __int128 v274;
  __int128 v275;
  float32x4_t v276[8];
  uint64_t v277;

  v5 = a1;
  v277 = *MEMORY[0x1E0C80C00];
  v6 = 30720.0;
  if (!*(_BYTE *)(a2 + 3769))
    v6 = 65535.0;
  if (*(float *)(a2 + 3500) == v6)
  {
    v7 = *(float *)(a2 + 3532);
    v8 = *(_BYTE *)(a2 + 3552) != 0;
    v204 = (_BYTE *)(a2 + 3552);
    v9 = v7 == v6 && *(_BYTE *)(a2 + 3552) != 0;
    v10 = v7 != v6;
  }
  else
  {
    v9 = 0;
    v204 = (_BYTE *)(a2 + 3552);
    v8 = *(_BYTE *)(a2 + 3552) != 0;
    v10 = 1;
  }
  v11 = *(_QWORD *)(a1 + 112);
  v12 = *(_DWORD *)a1;
  v255 = 0;
  v253 = 0u;
  v254 = 0u;
  v251 = 0u;
  v252 = 0u;
  memset(v250, 0, sizeof(v250));
  *(_OWORD *)v249 = 0u;
  v13 = *(unsigned int *)(a1 + 44);
  v247 = *(_QWORD *)(a1 + 48);
  v248 = *(_DWORD *)(a1 + 56);
  v245 = *(_QWORD *)(a1 + 72);
  v246 = *(_DWORD *)(a1 + 80);
  v14 = *(float32x4_t *)(a2 + 3488);
  v15 = *(float32x4_t *)(a2 + 3520);
  if ((v16 & 1) == 0)
  {
    v194 = v13;
    v225 = *(float32x4_t *)(a2 + 3520);
    *(_OWORD *)v227 = *(_OWORD *)(a2 + 3488);
    v15 = v225;
    v14 = *(float32x4_t *)v227;
    v13 = v194;
    v5 = a1;
    if (v195)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v15 = v225;
      v14 = *(float32x4_t *)v227;
      v13 = v194;
      v5 = a1;
    }
  }
  v17 = (int8x16_t)vceqq_f32(v14, v15);
  v18.i64[0] = 0x100000001;
  v18.i64[1] = 0x100000001;
  if (vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v17, v18), (uint32x4_t)mask(vmask4)::shift)) == 15)
  {
    BYTE1(v249[0]) = 0;
    v19 = *(float32x4_t *)(a2 + 3472);
    if ((v12 & 0xFFFFFFFE) == 2)
    {
      v20 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32(v19));
      v21 = 1;
    }
    else
    {
      __asm { FMOV            V1.4S, #1.0 }
      v36 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v19, (float32x4_t)0), _Q1), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      _Q1.i64[0] = 0x3F0000003F000000;
      _Q1.i64[1] = 0x3F0000003F000000;
      v20 = vcvtq_s32_f32(vaddq_f32(v36, _Q1));
      v21 = 2;
    }
    LOBYTE(v249[0]) = v21;
    *(int32x4_t *)((char *)v250 + 4) = v20;
    v37 = (block_size_descriptor *)v11;
    v38 = a3;
    return symbolic_to_physical(v37, (unsigned __int8 *)v249, v38);
  }
  v200 = v13;
  if (v8 && v10)
    v22 = 0.95238;
  else
    v22 = 1.0;
  v23 = *(int8x16_t *)(a2 + 3536);
  v24 = (float32x2_t)vextq_s8(v23, v23, 8uLL).u64[0];
  *(float32x2_t *)v23.i8 = vadd_f32(v24, *(float32x2_t *)v23.i8);
  v24.i8[0] = *(_BYTE *)(v11 + 3);
  v25 = *(float *)(v5 + 88);
  v26 = *(float *)(v5 + 84)
      * (float)((float)v24.u32[0] * vpadd_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8).f32[0]);
  v244 = xmmword_188235D10;
  v242 = *(_QWORD *)(v5 + 92);
  if (v9)
    v27 = 0.66667;
  else
    v27 = 1.0;
  LODWORD(v250[0]) = 1900671690;
  LOBYTE(v249[0]) = 0;
  v241 = 0;
  v243 = 0;
  v240[0] = 1.0 / v25;
  v240[1] = 1.0;
  if ((v28 & 1) == 0)
  {
    v5 = a1;
    if (v196)
    {
      *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot = 1.0 / *(float *)(a1 + 88);
      v5 = a1;
    }
  }
  v29 = (float32x4_t *)a4;
  v30 = v204;
  v202 = a3;
  v31 = *(float *)(v5 + 104) < 0.85 || *(unsigned __int8 *)(v11 + 2) != 1;
  v39 = v22 * (float)(v27 * v26);
  v40 = *(float *)&v244;
  do
  {
    v41 = v31;
    v42 = v39 * v240[v31];
    v43 = compress_symbolic_block_for_partition_1plane((unsigned int *)v5, (block_size_descriptor *)v11, a2, !v31, 1u, 0, (uint64_t)v249, v29, v42* *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot, 11);
    block_mode = block_size_descriptor::get_block_mode((block_size_descriptor *)v11, LOWORD(v249[1]));
    if (v43 < v42)
      goto LABEL_146;
    if (v40 >= v43)
      v40 = v43;
    v31 = 1;
    v29 = (float32x4_t *)a4;
    v5 = a1;
  }
  while (!v41);
  v205 = *(unsigned __int8 *)(block_mode + 3);
  *(float *)&v244 = v40;
  if (!*(_BYTE *)(v11 + 3))
    compress_block();
  v45 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(a2 + 3536), *(int8x16_t *)(a2 + 3536), 8uLL), *(float32x2_t *)(a2 + 3536));
  v46 = 0.25 * vpadd_f32(v45, v45).f32[0];
  if (v46 < 0.0)
    compress_block();
  v47 = 0;
  v48 = 0.0;
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  v54 = 0.0;
  v55 = 0.0;
  v56 = 0.0;
  v57 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v62 = 0.0;
  do
  {
    v59 = v46 + v59;
    v63 = *(float *)(a2 + v47);
    v64 = *(float *)(a2 + v47 + 864);
    v65 = *(float *)(a2 + v47 + 1728);
    v66 = *(float *)(a2 + v47 + 2592);
    v48 = v48 + (float)(v46 * v63);
    v52 = v52 + (float)(v63 * (float)(v46 * v63));
    v56 = v56 + (float)(v64 * (float)(v46 * v63));
    v57 = v57 + (float)(v65 * (float)(v46 * v63));
    v58 = v58 + (float)(v66 * (float)(v46 * v63));
    v49 = v49 + (float)(v46 * v64);
    v53 = v53 + (float)(v64 * (float)(v46 * v64));
    v62 = v62 + (float)(v65 * (float)(v46 * v64));
    v61 = v61 + (float)(v66 * (float)(v46 * v64));
    v50 = v50 + (float)(v46 * v65);
    v54 = v54 + (float)(v65 * (float)(v46 * v65));
    v60 = v60 + (float)(v66 * (float)(v46 * v65));
    v51 = v51 + (float)(v46 * v66);
    v55 = v55 + (float)(v66 * (float)(v46 * v66));
    v47 += 4;
  }
  while (4 * *(unsigned __int8 *)(v11 + 3) != v47);
  v67 = 1.0 / v59;
  if (v59 <= 0.0000001)
    v67 = 10000000.0;
  v68 = v67 * v48;
  v69 = v52 - (float)(v48 * (float)(v67 * v48));
  v70 = v56 - (float)(v49 * v68);
  v71 = v57 - (float)(v50 * v68);
  v72 = v58 - (float)(v51 * v68);
  v73 = v67 * v49;
  v74 = v53 - (float)(v49 * (float)(v67 * v49));
  v75 = v62 - (float)(v50 * v73);
  v76 = v61 - (float)(v51 * v73);
  v77 = v67 * v50;
  v78 = v54 - (float)(v50 * (float)(v67 * v50));
  v79 = v60 - (float)(v51 * v77);
  v80 = v55 - (float)(v51 * (float)(v67 * v51));
  v81 = sqrtf(v69 * v74);
  v82 = v71 * (float)(1.0 / sqrtf(v69 * v78));
  v83 = v72 * (float)(1.0 / sqrtf(v69 * v80));
  v84 = v75 * (float)(1.0 / sqrtf(v74 * v78));
  v85 = v76 * (float)(1.0 / sqrtf(v74 * v80));
  v86 = v79 * (float)(1.0 / sqrtf(v78 * v80));
  v87 = fabsf(v70 * (float)(1.0 / v81));
  v88 = fabsf(v82);
  if (v87 >= v88)
    v87 = v88;
  v89 = fabsf(v83);
  if (v87 >= v89)
    v87 = v89;
  v90 = fabsf(v84);
  if (v87 >= v90)
    v87 = v90;
  v91 = fabsf(v85);
  if (v87 >= v91)
    v87 = v91;
  v92 = fabsf(v86);
  if (v87 >= v92)
    v93 = v92;
  else
    v93 = v87;
  v94 = v205;
  if (v205 >= 11)
    v94 = 11;
  v211 = a4 + 3776;
  v212 = (float32x4_t *)(a4 + 1888);
  v217 = a4 + 26048;
  v206 = v94;
  v207 = ~(-2 << v94);
  v198 = (unsigned __int16 *)(v11 + 68);
  v199 = (float32x4_t *)(v11 + 592);
  v197 = v11 + 11304949;
  v95 = 3;
  v96 = (int32x4_t *)&unk_18820B000;
  v97 = *(float *)(a1 + 100);
  v98.i64[0] = 0x100000001;
  v98.i64[1] = 0x100000001;
  v226 = (unsigned int *)v11;
  while (1)
  {
    v99 = v95;
    if (v93 <= v97 && (v95 == 3 || !*v30))
    {
      v100 = *(float32x4_t *)(a2 + 3488);
      v101 = *(float32x4_t *)(a2 + 3520);
      if ((v102 & 1) == 0)
      {
        v220 = *(float32x4_t *)(a2 + 3520);
        v224 = *(float32x4_t *)(a2 + 3488);
        v101 = v220;
        v100 = v224;
        v98.i64[0] = 0x100000001;
        v98.i64[1] = 0x100000001;
        if (v175)
        {
          mask(vmask4)::shift = (__int128)v96[249];
          v101 = v220;
          v100 = v224;
          v98.i64[0] = 0x100000001;
          v98.i64[1] = 0x100000001;
        }
      }
      v103 = (int8x16_t)vceqq_s32(vdupq_n_s32(v99), v96[249]);
      if (!vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v100, v101), v98), v103), (uint32x4_t)mask(vmask4)::shift)))break;
    }
LABEL_121:
    v95 = v99 - 1;
    if (!v99)
      goto LABEL_125;
  }
  if (!*(_DWORD *)(a1 + 68))
    compress_block();
  if (!*(_DWORD *)(a1 + 64))
    compress_block();
  if (!*(_DWORD *)(v11 + 8))
    compress_block();
  v203 = v103;
  v104 = *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot;
  v219 = v99;
  v105 = (int8x16_t *)a4;
  compute_ideal_colors_and_weights_2planes((block_size_descriptor *)v11, a2, v99, a4, (uint64_t)v212);
  v106 = *(unsigned int *)(v11 + 8);
  if ((_DWORD)v106)
  {
    v107 = 0;
    v108 = 0;
    v109 = v198;
    v110 = v199;
    do
    {
      v111 = *v109;
      v109 += 3;
      if ((v111 & v207) != 0)
      {
        compute_ideal_weights_for_decimation((__int32 *)a4, v110, (_OWORD *)(v211 + 4 * (v107 & 0xFFFFFFC0)));
        compute_ideal_weights_for_decimation((__int32 *)v212, v110, (_OWORD *)(v211 + 4 * (v107 & 0xFFFFFFC0) + 128));
        v106 = v226[2];
      }
      ++v108;
      v107 += 64;
      v110 += 8118;
    }
    while (v108 < v106);
  }
  v221 = *(float32x4_t *)(a4 + 32);
  v213 = *(float32x4_t *)(a4 + 96);
  v208 = *(float32x4_t *)(a4 + 1920);
  v201 = *(float32x4_t *)(a4 + 1984);
  compute_angular_endpoints_2planes((unint64_t)v226, v211, v206, a4);
  v112 = v226[5];
  v113 = v226[6];
  if (v113 > v112)
  {
    __asm { FMOV            V0.4S, #1.0 }
    v115 = (int8x16_t)vdivq_f32(vsubq_f32(_Q0, v208), vsubq_f32(v201, v208));
    v116.i64[0] = 0x3F0000003F000000;
    v116.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V3.4S, #10.0 }
    v123 = (int8x16_t)vdupq_n_s32(0x7149F2CAu);
    v118 = (float32x4_t)vorrq_s8(vandq_s8(vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)v115, v116), (int8x16_t)vcgtq_f32((float32x4_t)_Q3, (float32x4_t)v115)), v115, _Q3), v203), vbicq_s8(v123, v203));
    v119 = (int8x16_t)vdivq_f32(vsubq_f32(_Q0, v221), vsubq_f32(v213, v221));
    v120 = (int8x16_t)vcgtq_f32((float32x4_t)v119, v116);
    v121 = (int8x16_t)vcgtq_f32((float32x4_t)_Q3, (float32x4_t)v119);
    v122 = vandq_s8(v120, v121);
    *(float *)v119.i32 = vminvq_f32((float32x4_t)vbslq_s8(v203, v123, vbslq_s8(v122, v119, _Q3)));
    v123.i32[0] = 1065520988;
    v124 = *(float *)v119.i32 * 1.02;
    v125 = vminvq_f32(v118) * 1.02;
    v126 = 4 * v112 + 179648;
    v127 = v113 - v112;
    v128 = 4 * v112 + 209792;
    v129 = (_DWORD)v112 << 6;
    v130 = (_BYTE *)(v197 + 6 * v112);
    v131 = 4 * v112 + 217984;
    v132 = 4 * v112 + 196032;
    v133 = v112 + 177600;
    v134 = v130;
    do
    {
      v135 = *v134;
      v134 += 6;
      if ((v135 & 1) == 0)
        compress_block();
      if (v206 >= *(v130 - 2))
      {
        v105->i8[v133] = 109 - *(v130 - 1);
        v118.i32[0] = *(__int32 *)((char *)v105->i32 + v132);
        if (v118.f32[0] > v124)
        {
          *(__int32 *)((char *)v105->i32 + v132) = 1065353216;
          v118.i32[0] = 1.0;
        }
        v222 = v127;
        if (*(float *)((char *)v105->i32 + v131) > v125)
          *(__int32 *)((char *)v105->i32 + v131) = 1065353216;
        v136 = *(v130 - 3);
        v137 = (unsigned __int8 *)&v226[32472 * v136 + 148];
        memset(v276, 0, sizeof(v276));
        v275 = 0u;
        v274 = 0u;
        v273 = 0u;
        v272 = 0u;
        v271 = 0u;
        v269 = 0u;
        v270 = 0u;
        v268 = 0u;
        v214 = (__int32 *)((char *)v105->i32 + v126);
        v209 = (float32x4_t *)(v211 + (v136 << 8));
        compute_quantized_weights_for_decimation((uint64_t)v137, v209, (float32x4_t *)&v268, v217 + (v129 & 0xFFFFFFC0), *(v130 - 2), *(float *)((char *)v105[512].i32 + v126), *(double *)v118.i64, *(double *)v123.i64, *(double *)_Q3.i64, *(double *)v122.i64, *(double *)v121.i64);
        LODWORD(v138) = *(_DWORD *)(a4 + v131);
        v105 = (int8x16_t *)a4;
        compute_quantized_weights_for_decimation((uint64_t)v137, v209 + 8, v276, v217 + (v129 & 0xFFFFFFC0) + 32, *(v130 - 2), *(float *)(a4 + v128), v138, v139, v140, v141, v142);
        *v214 = compute_error_of_weight_set_2planes((float32x4_t *)a4, v212, v137, (float32x4_t *)&v268, v276, v143, v144, v145).u32[0];
        v127 = v222;
      }
      else
      {
        *(__int32 *)((char *)v105->i32 + v126) = 2123789977;
      }
      v126 += 4;
      v128 += 4;
      v129 += 64;
      v131 += 4;
      v132 += 4;
      ++v133;
      v130 = v134;
      --v127;
    }
    while (v127);
  }
  memset(v267, 0, sizeof(v267));
  memset(v266, 0, sizeof(v266));
  memset(v265, 0, sizeof(v265));
  memset(v264, 0, sizeof(v264));
  v276[0] = 0u;
  v275 = 0u;
  v274 = 0u;
  v273 = 0u;
  v272 = 0u;
  v271 = 0u;
  v269 = 0u;
  v270 = 0u;
  v268 = 0u;
  if (v105[1].i32[0] != 1)
    compress_block();
  v268.i32[0] = 1;
  v146 = vorrq_s8(vandq_s8(v105[124], v203), vbicq_s8(v105[6], v203));
  v269 = vorrq_s8(vandq_s8(v105[120], v203), vbicq_s8(v105[2], v203));
  v273 = (float32x4_t)v146;
  v11 = (uint64_t)v226;
  partition_info = block_size_descriptor::get_partition_info((block_size_descriptor *)v226, 1u, 0);
  v215 = compute_ideal_endpoint_formats((uint64_t)partition_info, a2, (uint64_t)&v268, a4 + 177600, a4 + 179648, *(unsigned int *)(a1 + 68), *(unsigned int *)(v11 + 20), *(unsigned int *)(v11 + 24), v267, (uint64_t)v266, (uint64_t)v265, (uint64_t)v264, (uint64_t)v105);
  if (v215)
  {
    v148 = 0;
    v149 = v39 * v104;
    v150 = *(float *)v250;
    v151 = 1.0e30;
    do
    {
      v152 = *((_DWORD *)v266 + v148);
      if (v152 < *(_DWORD *)(v11 + 20) || v152 >= *(_DWORD *)(v11 + 24))
        compress_block();
      v154 = *((_DWORD *)v266 + v148);
      v155 = (_WORD *)(v11 + 6 * v152 + 11304944);
      v156 = v11 + 129888 * *(unsigned __int8 *)(v11 + 6 * v152 + 11304946);
      v157 = *(unsigned __int8 *)(v156 + 594);
      if (!*(_BYTE *)(v156 + 594))
        compress_block();
      v239 = 0uLL;
      v158 = v148;
      v159 = v156 + 592;
      v223 = (unsigned __int8 *)(v156 + 594);
      v238 = 0uLL;
      v263 = 0;
      v261 = 0u;
      v262 = 0u;
      v259 = 0u;
      v260 = 0u;
      v257 = 0u;
      v258 = 0u;
      v256 = 0u;
      v235 = v274;
      v236 = v275;
      v237 = v276[0];
      v231 = v270;
      v232 = v271;
      v233 = v272;
      v234 = v273;
      v160 = (char *)(v217 + (v154 << 6) + 32);
      v161 = (char *)&v261 + 4;
      v229 = v268;
      v230 = (float32x4_t)v269;
      do
      {
        *(v161 - 32) = *(v160 - 32);
        v162 = *v160++;
        *v161++ = v162;
        --v157;
      }
      while (v157);
      if (*(_DWORD *)(a1 + 64))
      {
        v210 = v148;
        v163 = 1;
        v164 = -1;
        while (1)
        {
          recompute_ideal_colors_2planes((float32x4_t *)a2, v11, v159, (uint64_t)&v259 + 4, (uint64_t)&v261 + 4, &v229, (float32x4_t *)&v239, (int8x16_t *)&v238, v219);
          BYTE8(v256) = pack_color_endpoints(*((unsigned __int8 *)v267 + 4 * v158), (unsigned __int8 *)&v257 + 4, *((_DWORD *)v265 + v158), v230, v234, v239, v238);
          WORD3(v256) = 0;
          HIDWORD(v256) = *((_DWORD *)v265 + v158);
          BYTE2(v256) = 0;
          WORD2(v256) = *v155;
          BYTE3(v256) = v219;
          LOWORD(v256) = 259;
          if (v163 == 1)
          {
            compute_symbolic_block_difference_2plane(a1, (block_size_descriptor *)v11, (uint64_t)&v256, (float32x4_t *)a2);
            v166 = v165;
            if (v165 == -1.0e30)
            {
              LOBYTE(v256) = 0;
              v166 = 1.0e30;
            }
            if (v166 < v151)
              v151 = v166;
            v167 = (unsigned int *)a1;
            if (v166 > (float)(v150 * (float)((float)((float)*(unsigned int *)(a1 + 64) * 0.045) + 1.08)))
              goto LABEL_114;
            if (v166 >= v150)
            {
              v166 = v150;
            }
            else
            {
              *(float *)&v257 = v166;
              v252 = v260;
              v253 = v261;
              v254 = v262;
              v255 = v263;
              v250[1] = v258;
              v251 = v259;
              *(_OWORD *)v249 = v256;
              v250[0] = v257;
              if (v166 < v149)
              {
                v150 = v166;
                v148 = v215;
                goto LABEL_116;
              }
            }
          }
          else
          {
            v166 = v150;
            v167 = (unsigned int *)a1;
          }
          v168 = *v167;
          if (*v223 == *(unsigned __int8 *)(v11 + 3))
            v169 = realign_weights_undecimated(v168, (block_size_descriptor *)v11, (float32x4_t *)a2, (uint64_t)&v256);
          else
            v169 = realign_weights_decimated(v168, (block_size_descriptor *)v11, (float32x4_t *)a2, (uint64_t)&v256);
          v170 = (block_size_descriptor *)v11;
          v171 = v169;
          compute_symbolic_block_difference_2plane(a1, v170, (uint64_t)&v256, (float32x4_t *)a2);
          if (v172 == -1.0e30)
          {
            LOBYTE(v256) = 0;
            v172 = 1.0e30;
          }
          if (v172 < v151)
            v151 = v172;
          v173 = *(_DWORD *)(a1 + 64);
          if (v172 > (float)(v166 * (float)((float)((float)(v164 + v173) * 0.045) + 1.0)))
          {
            v150 = v166;
            v11 = (uint64_t)v226;
LABEL_114:
            v148 = v210;
            goto LABEL_116;
          }
          v150 = v166;
          if (v172 < v166)
          {
            *(float *)&v257 = v172;
            v252 = v260;
            v253 = v261;
            v254 = v262;
            v250[1] = v258;
            v251 = v259;
            *(_OWORD *)v249 = v256;
            v250[0] = v257;
            v150 = v172;
            v255 = v263;
            if (v172 < v149)
              break;
          }
          if (v163 < v173)
            v174 = v171;
          else
            v174 = 0;
          ++v163;
          --v164;
          v11 = (uint64_t)v226;
          if ((v174 & 1) == 0)
            goto LABEL_114;
        }
        v150 = v172;
        v148 = v215;
        v11 = (uint64_t)v226;
      }
LABEL_116:
      ++v148;
    }
    while (v148 < v215);
  }
  else
  {
    v151 = 1.0e30;
  }
  v30 = v204;
  v96 = (int32x4_t *)&unk_18820B000;
  v98.i64[0] = 0x100000001;
  v98.i64[1] = 0x100000001;
  if (v151 <= (float)(*(float *)&v244 * 1.85))
  {
    v99 = v219;
    if (v151 < v39)
      goto LABEL_146;
    goto LABEL_121;
  }
LABEL_125:
  if ((int)v200 >= 2)
  {
    v176 = 2;
    v177 = 0uLL;
    while (1)
    {
      v268 = v177;
      v269 = v177;
      v178 = (unsigned __int8 *)v11;
      v179 = 4 * v176 - 8;
      v180 = *(_DWORD *)((char *)&v247 + v179);
      v181 = *(_DWORD *)((char *)&v245 + v179) >= v180
           ? *(_DWORD *)((char *)&v247 + v179)
           : *(_DWORD *)((char *)&v245 + v179);
      best_partition_candidates = find_best_partition_candidates(v178, a2, v176, v180, (uint64_t)&v268, v181);
      v183 = *(float *)((char *)&v244 + v179);
      v184 = v176 - 1;
      if (best_partition_candidates)
        break;
      v189 = *((float *)&v241 + v184);
      v188 = *((float *)&v244 + v184);
LABEL_139:
      _ZF = v188 > (float)(v183 * v189) || ++v176 == v200 + 1;
      v11 = (uint64_t)v226;
      v177 = 0uLL;
      if (_ZF)
        goto LABEL_146;
    }
    v185 = 0;
    v186 = 4 * best_partition_candidates;
    while (1)
    {
      v187 = compress_symbolic_block_for_partition_1plane((unsigned int *)a1, (block_size_descriptor *)v226, a2, 0, v176, v268.i32[v185 / 4], (uint64_t)v249, (float32x4_t *)a4, v39* *(float *)&compress_block(astcenc_contexti const&,image_block const&,unsigned char *,compression_working_buffers &)::errorval_overshoot, v205);
      v188 = *((float *)&v244 + v184);
      if (v188 >= v187)
        v188 = v187;
      *((float *)&v244 + v184) = v188;
      v189 = *((float *)&v241 + v184);
      if (v188 > (float)(v183 * (float)(v189 * 1.85)) || v187 < v39)
        break;
      v185 += 4;
      if (v186 == v185)
        goto LABEL_139;
    }
    v11 = (uint64_t)v226;
  }
LABEL_146:
  if (!LOBYTE(v249[0]))
  {
    LOBYTE(v249[0]) = 2;
    __asm { FMOV            V1.4S, #1.0 }
    v192 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(a2 + 3472), (float32x4_t)0), _Q1), (float32x4_t)vdupq_n_s32(0x477FFF00u));
    _Q1.i64[0] = 0x3F0000003F000000;
    _Q1.i64[1] = 0x3F0000003F000000;
    *(int32x4_t *)((char *)v250 + 4) = vcvtq_s32_f32(vaddq_f32(v192, _Q1));
  }
  v37 = (block_size_descriptor *)v11;
  v38 = v202;
  return symbolic_to_physical(v37, (unsigned __int8 *)v249, v38);
}

float compress_symbolic_block_for_partition_1plane(unsigned int *a1, block_size_descriptor *a2, uint64_t a3, int a4, unsigned int a5, __int16 a6, uint64_t a7, float32x4_t *a8, float a9, int a10)
{
  int v15;
  float (*v17)(unsigned int *, block_size_descriptor *, __int128 *, float32x4_t *);
  double v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  float32x4_t *v26;
  int v27;
  float32x4_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v37;
  int8x16_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _DWORD *v44;
  uint64_t v45;
  float32x4_t *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  int v52;
  int v53;
  int v54;
  float32x4_t *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  float32x4_t v58;
  float32x4_t v59;
  double v60;
  uint8x8_t v61;
  float32x4_t *v62;
  unsigned int v63;
  float v64;
  float v65;
  block_size_descriptor *v66;
  unsigned int v67;
  char *v68;
  size_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  unsigned int *v74;
  _DWORD *v75;
  uint64_t v76;
  char v77;
  float32x4_t *v78;
  unsigned __int8 *v79;
  float32x4_t v80;
  float32x4_t v81;
  int v82;
  char v83;
  uint64_t v84;
  unsigned __int8 *v85;
  float32x4_t *v86;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int *v90;
  float v91;
  float v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int v96;
  char v97;
  char v98;
  float v99;
  unsigned int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  char v104;
  float32x4_t *v106;
  unsigned int v107;
  unsigned int v108;
  float32x4_t *v109;
  uint64_t v111;
  unsigned __int16 *partition_info;
  unsigned __int8 *v114;
  uint64_t v115;
  _WORD *v116;
  float (*v118)(unsigned int *, block_size_descriptor *, __int128 *, float32x4_t *);
  unsigned int v119;
  float32x4_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  unsigned int *v125;
  int v126;
  _OWORD v127[2];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  int32x4_t v136[4];
  int8x16_t v137[4];
  _DWORD v138[8];
  _DWORD v139[8];
  _DWORD v140[8];
  _BYTE v141[32];
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  if (!a5)
    compress_symbolic_block_for_partition_1plane();
  if (!a1[17])
    compress_symbolic_block_for_partition_1plane();
  if (!a1[16])
    compress_symbolic_block_for_partition_1plane();
  if (a10 >= 11)
    v15 = 11;
  else
    v15 = a10;
  _ZF = (a1[1] & 0x40) == 0 && a5 == 1;
  v17 = (float (*)(unsigned int *, block_size_descriptor *, __int128 *, float32x4_t *))compute_symbolic_block_difference_1plane;
  if (_ZF)
    v17 = (float (*)(unsigned int *, block_size_descriptor *, __int128 *, float32x4_t *))compute_symbolic_block_difference_1plane_1partition;
  v118 = v17;
  partition_info = (unsigned __int16 *)block_size_descriptor::get_partition_info(a2, a5, a6);
  compute_ideal_colors_and_weights_1plane(a3, partition_info, a8, v18, v19, v20, v21, v22);
  v23 = 8;
  if (a4)
    v23 = 4;
  v24 = *(_DWORD *)((char *)a2 + v23);
  if (!v24)
    compress_symbolic_block_for_partition_1plane();
  v111 = a3;
  v119 = a5;
  v25 = 0;
  v26 = a8 + 236;
  v109 = a8 + 1628;
  v124 = v15;
  v27 = ~(-1 << (v15 + 1));
  v28 = (float32x4_t *)((char *)a2 + 592);
  v29 = (unint64_t)v24 << 6;
  v30 = 66;
  do
  {
    if ((*(_WORD *)((_BYTE *)a2 + v30) & (unsigned __int16)v27) != 0)
      compute_ideal_weights_for_decimation((__int32 *)a8, v28, &v26->f32[v25 & 0xFFFFFFC0]);
    v25 += 64;
    v28 += 8118;
    v30 += 6;
  }
  while (v29 != v25);
  v31 = 0;
  __asm
  {
    FMOV            V5.4S, #10.0
    FMOV            V0.4S, #1.0
  }
  v37.i64[0] = 0x3F0000003F000000;
  v37.i64[1] = 0x3F0000003F000000;
  do
  {
    v38 = (int8x16_t)vdivq_f32(vsubq_f32(_Q0, a8[v31 + 2]), vsubq_f32(a8[v31 + 6], a8[v31 + 2]));
    _Q5 = vbslq_s8(vandq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, v37), (int8x16_t)vcgtq_f32((float32x4_t)_Q5, (float32x4_t)v38)), v38, _Q5);
    ++v31;
  }
  while (v119 != v31);
  v121 = (float32x4_t)_Q5;
  compute_angular_endpoints_1plane(a4, (uint64_t)a2, (uint64_t)&a8[236], v124, (uint64_t)a8);
  v44 = (_DWORD *)((char *)a2 + 16);
  if (!a4)
    v44 = (_DWORD *)((char *)a2 + 20);
  if (!*v44)
    compress_symbolic_block_for_partition_1plane();
  v45 = 0;
  v46 = a8 + 11228;
  v47 = vminvq_f32(v121) * 1.02;
  v122 = *v44;
  v48 = 177600;
  v49 = 11304946;
  v50 = v124;
  do
  {
    v51 = (char *)a2 + v49;
    if (v50 < *((unsigned __int8 *)a2 + v49 + 1))
      goto LABEL_31;
    if ((v51[3] & 1) != 0)
      compress_symbolic_block_for_partition_1plane();
    v52 = compress_symbolic_block_for_partition_1plane(astcenc_config const&,block_size_descriptor const&,image_block const&,BOOL,float,unsigned int,unsigned int,symbolic_compressed_block &,compression_working_buffers &,int)::free_bits_for_partition_count[v119 - 1];
    v53 = *((unsigned __int8 *)a2 + v49 + 2);
    _VF = __OFSUB__(v52, v53);
    v54 = v52 - v53;
    if ((v54 < 0) ^ _VF | (v54 == 0))
    {
LABEL_31:
      v46->i32[0] = 2123789977;
    }
    else
    {
      v55 = v46 + 1024;
      if (v46[1024].f32[0] > v47)
        v55->i32[0] = 1065353216;
      v56 = *((unsigned __int8 *)a2 + v49);
      a8->i8[v48] = v54;
      v57 = (unsigned __int8 *)a2 + 129888 * v56 + 592;
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      LODWORD(v39) = v55->i32[0];
      compute_quantized_weights_for_decimation((uint64_t)v57, &v26[16 * v56], &v142, (uint64_t)v109 + (v45 & 0xFFFFFFC0), v51[1], v46[512].f32[0], v39, v40, v41, v42, v43);
      v46->i32[0] = compute_error_of_weight_set_1plane(a8, v57, &v142, v58, v59, v60, v61).u32[0];
      v50 = v124;
    }
    v45 += 64;
    v46 = (float32x4_t *)((char *)v46 + 4);
    ++v48;
    v49 += 6;
  }
  while (v122 << 6 != v45);
  memset(v141, 0, sizeof(v141));
  memset(v140, 0, sizeof(v140));
  memset(v139, 0, sizeof(v139));
  memset(v138, 0, sizeof(v138));
  v62 = (float32x4_t *)v111;
  v106 = a8 + 1;
  v108 = compute_ideal_endpoint_formats((uint64_t)partition_info, v111, (uint64_t)&a8[1], (uint64_t)&a8[11100], (uint64_t)&a8[11228], a1[17], 0, v122, v141, (uint64_t)v140, (uint64_t)v139, (uint64_t)v138, (uint64_t)a8);
  if (!v108)
    return 1.0e30;
  v63 = 0;
  v64 = *(float *)(a7 + 16);
  v65 = 1.0e30;
  v66 = a2;
  do
  {
    v67 = v140[v63];
    if ((v67 & 0x80000000) != 0 || (signed int)v67 >= *((_DWORD *)v66 + 5))
      compress_symbolic_block_for_partition_1plane();
    v116 = (_WORD *)((char *)v66 + 6 * v67 + 11304944);
    v68 = (char *)v66 + 129888 * *((unsigned __int8 *)v66 + 6 * v67 + 11304946);
    v69 = v68[594];
    if (!v68[594])
      compress_symbolic_block_for_partition_1plane();
    memset(v137, 0, sizeof(v137));
    memset(v136, 0, sizeof(v136));
    v135 = 0;
    v134 = 0u;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v70 = v106[7];
    v148 = v106[6];
    v149 = v70;
    v150 = v106[8];
    v71 = v106[3];
    v144 = v106[2];
    v145 = v71;
    v72 = v106[5];
    v146 = v106[4];
    v147 = v72;
    v73 = v106[1];
    v142 = *v106;
    v143 = v73;
    memcpy((char *)&v131 + 4, &v109[4 * v67], v69);
    if (!a1[16])
      goto LABEL_86;
    v123 = 0;
    v107 = v63;
    v114 = (unsigned __int8 *)(v68 + 594);
    v115 = (uint64_t)(v68 + 592);
    v74 = &v139[v63];
    v125 = &v138[v63];
    v75 = &v141[4 * v63];
    while (1)
    {
      recompute_ideal_colors_1plane(v62, partition_info, v115, (uint64_t)&v131 + 4, (uint64_t)&v142, (uint64_t)v137, (uint64_t)v136);
      v76 = 0;
      v77 = *v74 != *v125;
      v78 = &v147;
      v79 = (unsigned __int8 *)&v129 + 4;
      do
      {
        v80 = v78[-4];
        v81 = *v78++;
        v82 = pack_color_endpoints(*((unsigned __int8 *)v75 + v76), v79, *v74, v80, v81, v137[v76], v136[v76]);
        *((_BYTE *)&v128 + v76 + 8) = v82;
        v77 &= v82 == BYTE8(v128);
        ++v76;
        v79 += 8;
      }
      while (v119 != v76);
      BYTE2(v128) = 0;
      v83 = v119 > 1 ? v77 : 0;
      if ((v83 & 1) != 0)
      {
        v84 = 0;
        memset(v127, 0, sizeof(v127));
        v85 = (unsigned __int8 *)v127;
        v86 = &v147;
        v126 = 0;
        v66 = a2;
        while (1)
        {
          v87 = pack_color_endpoints(*((unsigned __int8 *)v75 + v84), v85, *v125, v86[-4], *v86, v137[v84], v136[v84]);
          *((_BYTE *)&v126 + v84) = v87;
          if (v87 != v126)
            break;
          ++v84;
          v85 += 8;
          ++v86;
          if (v119 == v84)
          {
            v88 = 0;
            BYTE2(v128) = 1;
            v62 = (float32x4_t *)v111;
            v89 = a1;
            do
            {
              *(_QWORD *)((char *)&v129 + 8 * v88 + 4) = *((_QWORD *)v127 + v88);
              *((_BYTE *)&v128 + v88 + 8) = *((_BYTE *)&v126 + v88);
              ++v88;
            }
            while (v88 != 4);
            BYTE1(v128) = v119;
            WORD3(v128) = a6;
            v90 = v125;
            BYTE3(v128) = -1;
            goto LABEL_55;
          }
        }
        BYTE1(v128) = v119;
        WORD3(v128) = a6;
        v90 = v125;
        BYTE3(v128) = -1;
        v62 = (float32x4_t *)v111;
        v89 = a1;
        if (!BYTE2(v128))
          goto LABEL_53;
      }
      else
      {
        BYTE1(v128) = v119;
        WORD3(v128) = a6;
        BYTE3(v128) = -1;
        v62 = (float32x4_t *)v111;
        v66 = a2;
        v89 = a1;
LABEL_53:
        v90 = v74;
      }
LABEL_55:
      HIDWORD(v128) = *v90;
      WORD2(v128) = *v116;
      LOBYTE(v128) = 3;
      if (v123)
        goto LABEL_65;
      v91 = v118(v89, v66, &v128, v62);
      if (v91 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        v92 = 1.0e30;
      }
      else
      {
        v92 = v91;
      }
      if (v92 < v65)
        v65 = v92;
      if (v92 > (float)(v64 * (float)((float)((float)v89[16] * 0.045) + 1.08)))
        goto LABEL_83;
      if (v92 >= v64)
      {
LABEL_65:
        v92 = v64;
      }
      else
      {
        *(float *)&v129 = v92;
        v93 = v133;
        *(_OWORD *)(a7 + 64) = v132;
        *(_OWORD *)(a7 + 80) = v93;
        *(_OWORD *)(a7 + 96) = v134;
        *(_DWORD *)(a7 + 112) = v135;
        v94 = v131;
        *(_OWORD *)(a7 + 32) = v130;
        *(_OWORD *)(a7 + 48) = v94;
        v95 = v129;
        *(_OWORD *)a7 = v128;
        *(_OWORD *)(a7 + 16) = v95;
        if (v92 < a9)
        {
          v64 = v92;
          goto LABEL_85;
        }
      }
      v96 = *v89;
      if (*v114 == *((unsigned __int8 *)v66 + 3))
        v97 = realign_weights_undecimated(v96, v66, v62, (uint64_t)&v128);
      else
        v97 = realign_weights_decimated(v96, v66, v62, (uint64_t)&v128);
      v98 = v97;
      v99 = v118(v89, v66, &v128, v62);
      if (v99 == -1.0e30)
      {
        LOBYTE(v128) = 0;
        v99 = 1.0e30;
      }
      if (v99 < v65)
        v65 = v99;
      v100 = v89[16];
      if (v99 > (float)(v92 * (float)((float)((float)(v100 + ~v123) * 0.045) + 1.0)))
      {
        v64 = v92;
LABEL_83:
        v63 = v107;
        goto LABEL_86;
      }
      v64 = v92;
      if (v99 < v92)
        break;
LABEL_77:
      if (++v123 < v100)
        v104 = v98;
      else
        v104 = 0;
      if ((v104 & 1) == 0)
        goto LABEL_83;
    }
    *(float *)&v129 = v99;
    v101 = v133;
    *(_OWORD *)(a7 + 64) = v132;
    *(_OWORD *)(a7 + 80) = v101;
    *(_OWORD *)(a7 + 96) = v134;
    *(_DWORD *)(a7 + 112) = v135;
    v102 = v131;
    *(_OWORD *)(a7 + 32) = v130;
    *(_OWORD *)(a7 + 48) = v102;
    v103 = v129;
    *(_OWORD *)a7 = v128;
    *(_OWORD *)(a7 + 16) = v103;
    if (v99 >= a9)
    {
      v100 = v89[16];
      v64 = v99;
      goto LABEL_77;
    }
    v64 = v99;
LABEL_85:
    v63 = v108;
LABEL_86:
    ++v63;
  }
  while (v63 < v108);
  return v65;
}

uint64_t realign_weights_decimated(unsigned int a1, block_size_descriptor *this, float32x4_t *a3, uint64_t a4)
{
  uint64_t v8;
  char *partition_info;
  unsigned __int8 *block_mode;
  int32x4_t v11;
  int32x4_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  __n128 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  float32x4_t v31;
  _BYTE *v32;
  int8x16_t v33;
  unint64_t v34;
  int32x4_t v35;
  int32x4_t v36;
  unint64_t v37;
  float32x4_t *v38;
  const float *v39;
  uint8x8_t v40;
  uint64_t v41;
  char *v42;
  float *v43;
  uint64_t v44;
  unsigned int v45;
  float v46;
  float v47;
  unsigned int v48;
  float v49;
  float v50;
  float32x4_t v51;
  float *v52;
  char *v53;
  float32x4_t v54;
  float32x4_t v55;
  int v56;
  char *v57;
  unsigned __int8 *v58;
  float *v59;
  float v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int32 *v64;
  float v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x2_t v73;
  int8x16_t v74;
  float32x2_t v75;
  int8x16_t v76;
  float32x2_t v77;
  int v79;
  int v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  __n128 v85;
  int v86;
  __int16 v87;
  _OWORD v88[16];
  float32x4_t v89[4];
  float32x4_t v90[4];
  _BYTE v91[64];
  _BYTE v92[72];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a4 + 1);
  partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a4 + 1), *(unsigned __int16 *)(a4 + 6));
  block_mode = (unsigned __int8 *)block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a4 + 4));
  v13 = block_mode[2];
  v14 = *((unsigned __int8 *)this + 129888 * block_mode[2] + 594);
  if ((_DWORD)v14 == *((unsigned __int8 *)this + 3))
    realign_weights_decimated();
  v15 = block_mode[3];
  v16 = block_mode[5];
  v17 = *(char *)(a4 + 3);
  v87 = 0;
  memset(v92, 0, 64);
  memset(v91, 0, sizeof(v91));
  memset(v90, 0, sizeof(v90));
  memset(v89, 0, sizeof(v89));
  if (!(_DWORD)v8)
    realign_weights_decimated();
  if (!(_DWORD)v14)
    realign_weights_decimated();
  v79 = v15;
  v18 = 0;
  v81 = v16 & 1;
  v19 = 0x100000000;
  v20 = (unsigned __int8 *)(a4 + 20);
  v21 = (__n128)vceqq_s32(vdupq_n_s32(v17), (int32x4_t)xmmword_18820BF90);
  v85 = v21;
  v83 = a4;
  v22 = (unsigned __int8 *)(a4 + 8);
  v23 = 16 * v8;
  do
  {
    v24 = *v22++;
    v21 = unpack_color_endpoints(a1, v24, v20, (unsigned __int8 *)&v87 + 1, &v87, (uint64_t)&v92[v18], (__n128 *)&v91[v18], v21, *(double *)&v19, v11, v12);
    v20 += 8;
    v18 += 16;
  }
  while (v23 != v18);
  v25 = 0;
  v26 = 0;
  v27 = v83 + 52;
  v28 = (char *)this + 129888 * v13;
  v29 = v28 + 814;
  v30 = v28 + 2544;
  v80 = v81 + 1;
  v82 = v28 + 75184;
  v84 = v28 + 6064;
  v31 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v32 = &quant_and_xfer_tables[226 * v79];
  v33 = (int8x16_t)v85;
  do
  {
    v34 = 0;
    v33 = vmvnq_s8(v33);
    do
    {
      v35 = *(int32x4_t *)&v92[v34];
      v36 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v91[v34], v35), v33);
      v90[v34 / 0x10] = vcvtq_f32_s32(v35);
      v89[v34 / 0x10] = vmulq_f32(vcvtq_f32_s32(v36), v31);
      v34 += 16;
    }
    while (v23 != v34);
    v86 = v26;
    v37 = 0;
    v38 = (float32x4_t *)v88;
    memset(v88, 0, sizeof(v88));
    do
    {
      v39 = (const float *)(v27 + v37);
      v40 = (uint8x8_t)vld1_dup_f32(v39);
      *v38++ = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v40)));
      v37 += 4;
    }
    while (v37 < v14);
    v41 = 0;
    v43 = (float *)v82;
    v42 = v84;
    do
    {
      v44 = *((unsigned __int8 *)this + 129888 * v13 + v41 + 6000);
      if (!*((_BYTE *)this + 129888 * v13 + v41 + 6000))
        realign_weights_decimated();
      v45 = *(unsigned __int16 *)&v32[2 * *(unsigned __int8 *)(v27 + v41) + 96];
      v46 = *((float *)v88 + v41);
      v47 = (float)*(_WORD *)&v32[2 * *(unsigned __int8 *)(v27 + v41) + 96];
      v48 = v45 >> 8;
      v49 = v47 - v46;
      v50 = (float)(v45 >> 8) - v46;
      v51 = 0uLL;
      v52 = v43;
      v53 = v42;
      v54 = 0uLL;
      v55 = 0uLL;
      do
      {
        v56 = *v53;
        v53 += 64;
        v57 = (char *)this + 129888 * v13;
        v58 = (unsigned __int8 *)&v57[v56];
        v59 = (float *)&v57[4 * v56];
        v60 = (float)((float)(*((float *)v88 + v58[1030]) * v59[852])
                    + (float)(*((float *)v88 + v29[v56]) * *(float *)&v30[4 * v56]))
            + (float)((float)(*((float *)v88 + v58[1462]) * v59[1284]) + (float)(*((float *)v88 + v58[1246]) * v59[1068]));
        v61 = partition_info[v56 + 8];
        v62 = v89[v61];
        v63 = vaddq_f32(v90[v61], vmulq_n_f32(v62, v60));
        v64 = &a3->i32[v56];
        v65 = (float)(v60 + (float)(v49 * *v52)) - v60;
        v66.i32[0] = *v64;
        v66.i32[1] = v64[216];
        v67 = (float)(v60 + (float)(v50 * *v52)) - v60;
        v66.i32[2] = v64[432];
        v66.i32[3] = v64[648];
        v68 = vsubq_f32(v63, v66);
        v69 = vaddq_f32(vmulq_n_f32(v62, v65), v68);
        v70 = vaddq_f32(vmulq_n_f32(v62, v67), v68);
        v51 = vaddq_f32(v51, vmulq_f32(v68, v68));
        v54 = vaddq_f32(v54, vmulq_f32(v69, v69));
        v55 = vaddq_f32(v55, vmulq_f32(v70, v70));
        v52 += 64;
        --v44;
      }
      while (v44);
      v71 = a3[221];
      v72 = (int8x16_t)vmulq_f32(v51, v71);
      *(float32x2_t *)v72.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), *(float32x2_t *)v72.i8);
      v73 = vpadd_f32(*(float32x2_t *)v72.i8, *(float32x2_t *)v72.i8);
      v74 = (int8x16_t)vmulq_f32(v54, v71);
      *(float32x2_t *)v74.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), *(float32x2_t *)v74.i8);
      v75 = vpadd_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8);
      v76 = (int8x16_t)vmulq_f32(v55, v71);
      *(float32x2_t *)v76.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), *(float32x2_t *)v76.i8);
      v77 = vpadd_f32(*(float32x2_t *)v76.i8, *(float32x2_t *)v76.i8);
      if ((vcgt_f32(v73, v77).u8[0] & 1) != 0
        && *(unsigned __int8 *)(v27 + v41) <= 0x3Fu
        && (vcgt_f32(v75, v77).u8[0] & 1) != 0)
      {
        *((float *)v88 + v41) = (float)(v45 >> 8);
LABEL_22:
        *(_BYTE *)(v27 + v41) = v48;
        v25 = 1;
        goto LABEL_23;
      }
      if (*(_BYTE *)(v27 + v41) && (vcgt_f32(v73, v75).u8[0] & 1) != 0)
      {
        *((float *)v88 + v41) = v47;
        LOBYTE(v48) = v45;
        goto LABEL_22;
      }
LABEL_23:
      ++v41;
      ++v42;
      ++v43;
    }
    while (v41 != v14);
    v27 += 32;
    v26 = v86 + 1;
  }
  while (v86 + 1 != v80);
  return v25 & 1;
}

uint64_t realign_weights_undecimated(unsigned int a1, block_size_descriptor *this, float32x4_t *a3, uint64_t a4)
{
  uint64_t v8;
  char *partition_info;
  uint64_t block_mode;
  int32x4_t v11;
  int v12;
  char v13;
  unsigned int v14;
  __n128 v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  uint64_t v25;
  float32x4_t v26;
  _BYTE *v27;
  int8x16_t v28;
  unint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  unint64_t v32;
  __int32 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  int8x16_t v45;
  float32x2_t v46;
  int8x16_t v47;
  float32x2_t v48;
  int v50;
  char *v51;
  int v52;
  int8x16_t v53;
  __int16 v54;
  _OWORD v55[4];
  _OWORD v56[4];
  _BYTE v57[64];
  _BYTE v58[72];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a4 + 1);
  partition_info = block_size_descriptor::get_partition_info(this, *(unsigned __int8 *)(a4 + 1), *(unsigned __int16 *)(a4 + 6));
  block_mode = block_size_descriptor::get_block_mode(this, *(unsigned __int16 *)(a4 + 4));
  v12 = *(unsigned __int8 *)(block_mode + 3);
  v13 = *(_BYTE *)(block_mode + 5);
  v14 = *(char *)(a4 + 3);
  v15 = 0uLL;
  memset(v56, 0, sizeof(v56));
  memset(v55, 0, sizeof(v55));
  if (!(_DWORD)v8)
    realign_weights_undecimated();
  v51 = partition_info;
  v52 = v12;
  v16 = 0;
  v17 = (int32x4_t)xmmword_18820BF90;
  v50 = v13 & 1;
  v54 = 0;
  v18 = vceqq_s32(vdupq_n_s32(v14), (int32x4_t)xmmword_18820BF90);
  v53 = (int8x16_t)v18;
  memset(v58, 0, 64);
  memset(v57, 0, sizeof(v57));
  v19 = (unsigned __int8 *)(a4 + 20);
  v20 = (unsigned __int8 *)(a4 + 8);
  v21 = 16 * v8;
  do
  {
    v22 = *v20++;
    v15 = unpack_color_endpoints(a1, v22, v19, (unsigned __int8 *)&v54 + 1, &v54, (uint64_t)&v58[v16], (__n128 *)&v57[v16], v15, *(double *)v18.i64, v17, v11);
    v19 += 8;
    v16 += 16;
  }
  while (v21 != v16);
  v23 = 0;
  v24 = 0;
  v25 = a4 + 52;
  v26 = (float32x4_t)vdupq_n_s32(0x3C800000u);
  v27 = &quant_and_xfer_tables[226 * v52];
  v28 = v53;
  do
  {
    v29 = 0;
    v28 = vmvnq_s8(v28);
    do
    {
      v30 = *(int32x4_t *)&v58[v29];
      v31 = (int32x4_t)vandq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)&v57[v29], v30), v28);
      v56[v29 / 0x10] = vcvtq_f32_s32(v30);
      v55[v29 / 0x10] = vmulq_f32(vcvtq_f32_s32(v31), v26);
      v29 += 16;
    }
    while (v21 != v29);
    if (!*((_BYTE *)this + 3))
      realign_weights_undecimated();
    v32 = 0;
    v33 = (__int32 *)a3;
    do
    {
      v34 = *(unsigned __int8 *)(v25 + v32);
      v35 = HIBYTE(*(unsigned __int16 *)&v27[2 * v34 + 96]);
      v36 = v51[v32 + 8];
      v37 = (float32x4_t)v55[v36];
      v38.i32[0] = *v33;
      v38.i32[1] = v33[216];
      v38.i32[2] = v33[432];
      v38.i32[3] = v33[648];
      v39 = a3[221];
      v40 = vsubq_f32(vaddq_f32((float32x4_t)v56[v36], vmulq_n_f32(v37, (float)v34)), v38);
      v41 = vaddq_f32(vmulq_n_f32(v37, (float)(*(_WORD *)&v27[2 * v34 + 96] - (int)v34)), v40);
      v42 = vaddq_f32(vmulq_n_f32(v37, (float)(v35 - v34)), v40);
      v43 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v40, v40));
      *(float32x2_t *)v43.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), *(float32x2_t *)v43.i8);
      v44 = vpadd_f32(*(float32x2_t *)v43.i8, *(float32x2_t *)v43.i8);
      v45 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v41, v41));
      *(float32x2_t *)v45.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), *(float32x2_t *)v45.i8);
      v46 = vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8);
      v47 = (int8x16_t)vmulq_f32(v39, vmulq_f32(v42, v42));
      *(float32x2_t *)v47.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(float32x2_t *)v47.i8);
      v48 = vpadd_f32(*(float32x2_t *)v47.i8, *(float32x2_t *)v47.i8);
      if ((vcgt_f32(v44, v48).u8[0] & 1) != 0 && v34 <= 0x3F && (vcgt_f32(v46, v48).u8[0] & 1) != 0)
        goto LABEL_15;
      if (*(_BYTE *)(v25 + v32) && (vcgt_f32(v44, v46).u8[0] & 1) != 0)
      {
        LOBYTE(v35) = *(_WORD *)&v27[2 * v34 + 96];
LABEL_15:
        *(_BYTE *)(v25 + v32) = v35;
        v23 = 1;
      }
      ++v32;
      ++v33;
    }
    while (v32 < *((unsigned __int8 *)this + 3));
    v25 += 32;
    ++v24;
  }
  while (v24 != v50 + 1);
  return v23 & 1;
}

void compress_block()
{
  __assert_rtn("prepare_block_statistics", "astcenc_compress_symbolic.cpp", 1071, "texels_per_block > 0");
}

{
  __assert_rtn("prepare_block_statistics", "astcenc_compress_symbolic.cpp", 1075, "weight >= 0.0f");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 726, "config.tune_candidate_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 727, "config.tune_refinement_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 728, "bsd.decimation_mode_count_selected > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 810, "bm.is_dual_plane");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 896, "di.weight_count > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_2planes", "astcenc_compress_symbolic.cpp", 891, "bm_packed_index >= static_cast<int>(bsd.block_mode_count_1plane_selected) && bm_packed_index < static_cast<int>(bsd.block_mode_count_1plane_2plane_selected)");
}

{
  __assert_rtn("merge_endpoints", "astcenc_compress_symbolic.cpp", 44, "partition_count == 1");
}

void compress_symbolic_block_for_partition_1plane()
{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 365, "partition_count > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 366, "config.tune_candidate_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 367, "config.tune_refinement_limit > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 390, "max_decimation_modes > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 441, "max_block_modes > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 515, "di.weight_count > 0");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 510, "bm_packed_index >= 0 && bm_packed_index < static_cast<int>(bsd.block_mode_count_1plane_selected)");
}

{
  __assert_rtn("compress_symbolic_block_for_partition_1plane", "astcenc_compress_symbolic.cpp", 452, "!bm.is_dual_plane");
}

void realign_weights_decimated()
{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 206, "weight_count != bsd.texel_count");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 220, "partition_count > 0");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 221, "weight_count > 0");
}

{
  __assert_rtn("realign_weights_decimated", "astcenc_compress_symbolic.cpp", 277, "texels_to_evaluate > 0");
}

void realign_weights_undecimated()
{
  __assert_rtn("realign_weights_undecimated", "astcenc_compress_symbolic.cpp", 96, "partition_count > 0");
}

{
  __assert_rtn("realign_weights_undecimated", "astcenc_compress_symbolic.cpp", 125, "bsd.texel_count > 0");
}

uint64_t find_best_partition_candidates(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unint64_t v7;
  float v8;
  float v9;
  int v11;
  float32x4_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  __int32 *v16;
  unint64_t v17;
  unsigned int v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int32 *v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  int8x16_t v29;
  float v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  _BOOL4 v35;
  uint64_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  __int32 *v48;
  float32x4_t v49;
  float *v50;
  __int32 *v51;
  unint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  __int128 v62;
  __int128 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 v68;
  unsigned __int16 v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  unsigned __int16 v72;
  unsigned __int16 v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  unsigned int v85;
  __int128 *v86;
  __int128 v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  unsigned __int8 *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 v98;
  unsigned __int16 v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 v102;
  unsigned __int8 *v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  unsigned __int16 v106;
  unsigned __int16 v107;
  unsigned __int16 v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  unsigned __int16 v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  unsigned __int8 v153;
  uint16x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int v157;
  unsigned int v158;
  size_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned __int16 *raw_partition_info;
  double v167;
  double v168;
  double v169;
  int8x16_t v170;
  uint64_t v171;
  float32x4_t *v172;
  float32x4_t v173;
  int8x16_t v174;
  int32x2_t v175;
  float32x4_t v176;
  float32x4_t *v177;
  float32x4_t v178;
  int8x16_t v179;
  int32x2_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  uint64_t v187;
  float v188;
  float v189;
  unsigned __int8 *v190;
  unsigned int v191;
  float v192;
  float v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  uint64_t v198;
  _BYTE *v199;
  _WORD *v200;
  unint64_t v201;
  float32x4_t v202;
  int8x16_t v203;
  int32x2_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t *v210;
  float32x4_t v211;
  float32x4_t *v212;
  float32x4_t v213;
  int8x16_t v214;
  int32x2_t v215;
  float32x4_t *v216;
  float v217;
  uint64_t v218;
  float v219;
  float v220;
  uint64_t v221;
  float v222;
  float v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  uint64_t v228;
  unsigned int *v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t result;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  __int32 *v248;
  unsigned int v249;
  uint64_t v250;
  float32x4_t v251;
  float32x4_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257[4];
  unint64_t v260;
  _QWORD v261[2];
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  float32x4_t v270[1];
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _OWORD v278[2];
  float v279[8];
  _OWORD v280[2];
  float __b[8];
  _WORD v282[1024];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  _BYTE v291[896];
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;

  v314 = *MEMORY[0x1E0C80C00];
  v7 = a1[3];
  if (v7 >= 0x15)
  {
    if (v7 >= 0x20)
      v8 = flt_188235D30[v7 < 0x2A];
    else
      v8 = 0.04;
  }
  else
  {
    v8 = 0.03;
  }
  if (!a3)
    find_best_partition_candidates();
  if (!a4)
    find_best_partition_candidates();
  v244 = a1 + 14707848;
  v242 = a1 + 14666872;
  v243 = a1 + 14683264;
  v9 = v8 * v8;
  bzero(v282, 0x800uLL);
  v11 = 0;
  v272 = 0u;
  v273 = 0u;
  v270[0] = 0u;
  v271 = 0u;
  v305 = 0;
  v304 = 0u;
  v303 = 0u;
  v302 = 0u;
  v301 = 0u;
  v300 = 0u;
  v299 = 0u;
  v298 = 0u;
  v297 = 0u;
  v296 = 0u;
  v295 = 0u;
  v294 = 0u;
  v293 = 0u;
  v292 = 0u;
  v12 = *(float32x4_t *)(a2 + 3536);
  if (a3 <= 2)
    v13 = 2;
  else
    v13 = a3;
  v14 = (v13 - 1);
  v248 = (__int32 *)(a2 + 4 * (0x239E9 % v7));
  v252 = *(float32x4_t *)(a2 + 3536);
  do
  {
    if (v11)
    {
      if (!(_DWORD)v7)
        find_best_partition_candidates();
      v286 = 0u;
      v285 = 0u;
      v284 = 0u;
      v283 = 0u;
      v15 = (unsigned __int8 *)&v292;
      v16 = (__int32 *)a2;
      v17 = v7;
      LODWORD(v306) = 0;
      do
      {
        v18 = *v15++;
        v19.i32[0] = *v16;
        v19.i32[1] = v16[216];
        v19.i32[2] = v16[432];
        v19.i32[3] = v16[648];
        v20 = vaddq_f32(*((float32x4_t *)&v283 + v18), v19);
        *(&v283 + v18) = (__int128)v20;
        ++*((_BYTE *)&v306 + v18);
        ++v16;
        --v17;
      }
      while (v17);
      v21 = 0;
      do
      {
        v20.i8[0] = *((_BYTE *)&v306 + v21);
        v20 = vmulq_n_f32(*((float32x4_t *)&v283 + v21), 1.0 / (float)v20.u32[0]);
        v270[v21++] = v20;
      }
      while (a3 != v21);
    }
    else
    {
      if (!(_DWORD)v7)
        find_best_partition_candidates();
      bzero(&v283, 0x360uLL);
      v12 = v252;
      v36 = 0;
      v37.i32[0] = *v248;
      v37.i32[1] = v248[216];
      v37.i32[2] = v248[432];
      v37.i32[3] = v248[648];
      v270[0] = v37;
      v38 = 0.0;
      do
      {
        v39.i32[0] = *(_DWORD *)(a2 + v36);
        v39.i32[1] = *(_DWORD *)(a2 + v36 + 864);
        v39.i32[2] = *(_DWORD *)(a2 + v36 + 1728);
        v39.i32[3] = *(_DWORD *)(a2 + v36 + 2592);
        v40 = vsubq_f32(v39, v37);
        v41 = (int8x16_t)vmulq_f32(v252, vmulq_f32(v40, v40));
        *(float32x2_t *)v41.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL), *(float32x2_t *)v41.i8);
        *(float *)v41.i32 = vpadd_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8).f32[0];
        v38 = v38 + *(float *)v41.i32;
        *(_DWORD *)((char *)&v283 + v36) = v41.i32[0];
        v36 += 4;
      }
      while (4 * v7 != v36);
      v42 = 1;
      v43 = 3 * a3 - 6;
      v11 = 0;
      while (1)
      {
        v44 = 0;
        v45 = flt_188235D38[v43++];
        v46 = v38 * v45;
        v47 = 0.0;
        while (1)
        {
          v47 = v47 + *((float *)&v283 + v44);
          if (v47 >= v46)
            break;
          if (v7 == ++v44)
          {
            LODWORD(v44) = v7;
            break;
          }
        }
        if (v44 >= (int)v7 - 1)
          LODWORD(v44) = v7 - 1;
        v48 = (__int32 *)(a2 + 4 * v44);
        v49.i32[0] = *v48;
        v49.i32[1] = v48[216];
        v49.i32[2] = v48[432];
        v49.i32[3] = v48[648];
        v270[v42] = v49;
        if (v42 == v14)
          break;
        ++v42;
        v38 = 0.0;
        v50 = (float *)&v283;
        v51 = (__int32 *)a2;
        v52 = v7;
        do
        {
          v53.i32[0] = *v51;
          v53.i32[1] = v51[216];
          v53.i32[2] = v51[432];
          v53.i32[3] = v51[648];
          v54 = vsubq_f32(v53, v49);
          v55 = (int8x16_t)vmulq_f32(v252, vmulq_f32(v54, v54));
          *(float32x2_t *)v55.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), *(float32x2_t *)v55.i8);
          v56 = vpadd_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8).f32[0];
          if (v56 >= *v50)
            v56 = *v50;
          v38 = v38 + v56;
          *v50++ = v56;
          ++v51;
          --v52;
        }
        while (v52);
      }
    }
    v22 = 0;
    LODWORD(v283) = 0;
    do
    {
      v23 = 0;
      v24 = 0;
      v25 = (__int32 *)(a2 + 4 * v22);
      v27 = 3.4028e38;
      do
      {
        v26.i32[3] = v25[648];
        v26.i32[2] = v25[432];
        v26.i32[1] = v25[216];
        v26.i32[0] = *v25;
        v28 = vsubq_f32(v26, v270[v23]);
        v29 = (int8x16_t)vmulq_f32(v12, vmulq_f32(v28, v28));
        *(float32x2_t *)v29.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), *(float32x2_t *)v29.i8);
        v30 = vpadd_f32(*(float32x2_t *)v29.i8, *(float32x2_t *)v29.i8).f32[0];
        if (v30 < v27)
        {
          v24 = v23;
          v27 = v30;
        }
        ++v23;
      }
      while (a3 != v23);
      *((_BYTE *)&v292 + v22) = v24;
      ++*((_BYTE *)&v283 + v24);
      ++v22;
    }
    while (v22 != v7);
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = v32;
      if (!*((_BYTE *)&v283 + v31))
      {
        --*((_BYTE *)&v283 + *((unsigned __int8 *)&v292 + v31));
        ++*((_BYTE *)&v283 + v31);
        *((_BYTE *)&v292 + v31) = v31;
        v33 = 1;
      }
      v34 = v31 + 1 == a3;
      v35 = v31 + 1 != a3;
      if (v31 + 1 == a3)
        v31 = 0;
      else
        ++v31;
      v32 = v35 & v33;
    }
    while (!v34 || (v33 & 1) != 0);
    ++v11;
  }
  while (v11 != 3);
  v57 = 0;
  if (v7 >= 0x40)
    v58 = 64;
  else
    v58 = v7;
  v262 = 0uLL;
  v263 = 0uLL;
  do
  {
    v59 = *((unsigned __int8 *)&v292 + a1[v57 + 14666800]);
    *((_QWORD *)&v262 + v59) |= 1 << v57++;
  }
  while (v58 != v57);
  v255 = v58;
  bzero(&v283, 0x400uLL);
  v60 = &a1[4 * a3 - 4];
  v61 = *((unsigned int *)v60 + 8);
  if (!(_DWORD)v61)
    find_best_partition_candidates();
  v253 = *((unsigned int *)v60 + 8);
  if (a3 == 2)
  {
    v86 = &v283;
    v87 = v262;
    v88 = v242;
    do
    {
      v89 = *((_QWORD *)v88 - 1);
      v90 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v88 ^ *((_QWORD *)&v87 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v89 ^ v87)));
      v91 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v89 ^ *((_QWORD *)&v87 + 1))))
          + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v88 ^ v87)));
      if ((int)v90 >= v91)
        v90 = v91;
      *(_BYTE *)v86 = v90 >> 1;
      if ((v90 >> 1) >= 0x40u)
        find_best_partition_candidates();
      if (v7 <= (v90 >> 1))
        find_best_partition_candidates();
      v88 += 16;
      v86 = (__int128 *)((char *)v86 + 1);
      --v61;
    }
    while (v61);
  }
  else if (a3 == 3)
  {
    v62 = v262;
    v63 = &v283;
    v64 = v263;
    v65 = v243;
    do
    {
      v66 = *((_QWORD *)v65 - 2);
      v67 = *((_QWORD *)v65 - 1);
      v68 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ v62)));
      v69 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ v62)));
      v70 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v65 ^ v62)));
      v71 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ *((_QWORD *)&v62 + 1))));
      v72 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ *((_QWORD *)&v62 + 1))));
      v73 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v65 ^ *((_QWORD *)&v62 + 1))));
      v74 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v66 ^ v64)));
      v75 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v67 ^ v64)));
      v76 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v65 ^ v64)));
      v77 = v76 + v72;
      if (v77 >= v75 + v73)
        v77 = v75 + v73;
      v78 = v77 + v68;
      v79 = v76 + v71;
      v80 = v74 + v73;
      if (v79 >= v80)
        v79 = v80;
      v81 = v79 + v69;
      v82 = v75 + v71;
      v83 = v74 + v72;
      if (v82 < v83)
        v83 = v82;
      v84 = v83 + v70;
      if (v78 >= v81)
        v85 = v81;
      else
        v85 = v78;
      if ((int)v85 >= v84)
        v85 = v84;
      *(_BYTE *)v63 = v85 >> 1;
      if ((v85 >> 1) >= 0x40u)
        find_best_partition_candidates();
      if (v7 <= (v85 >> 1))
        find_best_partition_candidates();
      v65 += 24;
      v63 = (__int128 *)((char *)v63 + 1);
      --v61;
    }
    while (v61);
  }
  else
  {
    v92 = v262;
    v93 = &v283;
    v94 = v263;
    v95 = v244;
    do
    {
      v96 = *((_QWORD *)v95 - 3);
      v97 = *((_QWORD *)v95 - 2);
      v98 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ v92)));
      v99 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ v92)));
      v100 = *((_QWORD *)v95 - 1);
      v101 = *(_QWORD *)v95;
      v102 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ v92)));
      v103 = v95;
      v104 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v95 ^ v92)));
      v105 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ *((_QWORD *)&v92 + 1))));
      v106 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ *((_QWORD *)&v92 + 1))));
      v107 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ *((_QWORD *)&v92 + 1))));
      v108 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ *((_QWORD *)&v92 + 1))));
      v109 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ v94)));
      v110 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ v94)));
      v111 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ v94)));
      v112 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ v94)));
      v113 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v96 ^ *((_QWORD *)&v94 + 1))));
      v114 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v97 ^ *((_QWORD *)&v94 + 1))));
      v115 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v100 ^ *((_QWORD *)&v94 + 1))));
      v116 = vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)(v101 ^ *((_QWORD *)&v94 + 1))));
      v117 = v116 + v111;
      if (v117 >= v115 + v112)
        v117 = v115 + v112;
      v118 = v116 + v110;
      if (v118 >= v114 + v112)
        v118 = v114 + v112;
      v119 = v114 + v111;
      if (v115 + v110 < v119)
        v119 = v115 + v110;
      v120 = v116 + v109;
      v121 = v113 + v112;
      if (v120 >= v121)
        v120 = v121;
      v122 = v115 + v109;
      v123 = v113 + v111;
      if (v122 >= v123)
        v122 = v123;
      v124 = v113 + v110;
      v125 = v114 + v109;
      if (v124 >= v125)
        v124 = v125;
      v126 = v117 + v106;
      if (v126 >= v118 + v107)
        v126 = v118 + v107;
      if (v126 >= v119 + v108)
        v126 = v119 + v108;
      v127 = v126 + v98;
      v128 = v117 + v105;
      if (v128 >= v120 + v107)
        v128 = v120 + v107;
      if (v128 >= v122 + v108)
        v128 = v122 + v108;
      v129 = v128 + v99;
      v130 = v120 + v106;
      v131 = v124 + v108;
      if (v130 >= v118 + v105)
        v130 = v118 + v105;
      if (v130 < v131)
        v131 = v130;
      v132 = v131 + v102;
      v133 = v122 + v106;
      v134 = v124 + v107;
      v135 = v119 + v105;
      if (v133 >= v134)
        v133 = v134;
      if (v133 < v135)
        v135 = v133;
      v136 = v135 + v104;
      if (v127 < v129)
        v129 = v127;
      if (v132 < v136)
        v136 = v132;
      if (v129 >= v136)
        v137 = v136;
      else
        v137 = v129;
      *(_BYTE *)v93 = v137 >> 1;
      if ((v137 >> 1) >= 0x40u)
        find_best_partition_candidates();
      if (v7 <= (v137 >> 1))
        find_best_partition_candidates();
      v95 = v103 + 32;
      v93 = (__int128 *)((char *)v93 + 1);
      --v61;
    }
    while (v61);
  }
  v138 = 0;
  v313 = 0u;
  v312 = 0u;
  v311 = 0u;
  v310 = 0u;
  v309 = 0u;
  v308 = 0u;
  v307 = 0u;
  v306 = 0u;
  v139 = v253;
  do
    ++*((_WORD *)&v306 + *((unsigned __int8 *)&v283 + v138++));
  while (v253 != v138);
  v140 = 0;
  v141 = 0;
  v143 = a6;
  v142 = a4;
  do
  {
    v144 = *((unsigned __int16 *)&v306 + v140);
    *((_WORD *)&v306 + v140) = v141;
    v141 += v144;
    ++v140;
  }
  while (v255 != v140);
  v145 = 0;
  if (v253 <= 1)
    v146 = 1;
  else
    v146 = v253;
  do
  {
    v147 = *((unsigned __int8 *)&v283 + v145);
    v148 = *((unsigned __int16 *)&v306 + v147);
    *((_WORD *)&v306 + v147) = v148 + 1;
    v282[v148] = v145++;
  }
  while (v146 != v145);
  if (a4 >= v253)
    v149 = v253;
  else
    v149 = a4;
  if (v149 >= a6)
    v150 = a6;
  else
    v150 = v149;
  v151 = *(float32x4_t *)(a2 + 3488);
  v152 = *(float32x4_t *)(a2 + 3520);
  if ((v153 & 1) == 0)
  {
    *(_OWORD *)v257 = *(_OWORD *)(a2 + 3488);
    v251 = *(float32x4_t *)(a2 + 3520);
    v152 = v251;
    v151 = *(float32x4_t *)v257;
    v139 = v253;
    v143 = a6;
    v142 = a4;
    if (v241)
    {
      mask(vmask4)::shift = xmmword_18820BF90;
      v152 = v251;
      v151 = *(float32x4_t *)v257;
      v139 = v253;
      v143 = a6;
      v142 = a4;
    }
  }
  v154.i32[0] = 0;
  v154.i16[2] = 0;
  v154.i16[3] = vmovn_s32(vceqq_f32(v151, v152)).i16[3];
  v155 = (int8x16_t)vmovl_u16(v154);
  v156.i64[0] = 0x100000001;
  v156.i64[1] = 0x100000001;
  memset(__b, 0, sizeof(__b));
  memset(v280, 0, sizeof(v280));
  v157 = vaddvq_s32((int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v155, v156), (uint32x4_t)mask(vmask4)::shift));
  memset(v279, 0, sizeof(v279));
  memset(v278, 0, sizeof(v278));
  if ((_DWORD)v150)
  {
    if (v139 >= v143)
      v158 = v143;
    else
      v158 = v139;
    if (v158 >= v142)
      v158 = v142;
    v159 = 4 * v158;
    memset_pattern16(__b, &xmmword_188235D10, v159);
    memset_pattern16(v279, &xmmword_188235D10, v159);
  }
  v256 = v150;
  if (a3 <= 1)
    v160 = 1;
  else
    v160 = a3;
  if (v149 <= 1)
    v161 = 1;
  else
    v161 = v149;
  v254 = v161;
  if (v157)
  {
    v162 = 0;
    v163 = 32 * v160;
    v164 = 144 * v160;
    do
    {
      v165 = (unsigned __int16)v282[v162];
      raw_partition_info = (unsigned __int16 *)block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v165);
      v299 = 0u;
      v298 = 0u;
      v297 = 0u;
      v296 = 0u;
      v295 = 0u;
      v294 = 0u;
      v293 = 0u;
      v292 = 0u;
      compute_avgs_and_dirs_3_comp_rgb(raw_partition_info, a2, (uint64_t)&v292, 0.0, v167, v168, v169, v170);
      bzero(&v283, 0x240uLL);
      v171 = 0;
      v172 = (float32x4_t *)&v287;
      do
      {
        v173 = *(float32x4_t *)((char *)&v292 + v171 + 16);
        v172[-4] = *(float32x4_t *)((char *)&v292 + v171);
        v174 = (int8x16_t)vmulq_f32(v173, v173);
        *(float32x2_t *)v174.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL), *(float32x2_t *)v174.i8);
        v175 = (int32x2_t)vpadd_f32(*(float32x2_t *)v174.i8, *(float32x2_t *)v174.i8);
        v176 = (float32x4_t)xmmword_1882323C0;
        if (*(float *)v175.i32 != 0.0)
          v176 = vdivq_f32(v173, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v175, 0)));
        v172[-3] = v176;
        v177 = v172 - 3;
        v177[1].i64[0] = 0;
        v177[1].i64[1] = 0;
        v178 = *(float32x4_t *)((char *)&v292 + v171);
        v179 = (int8x16_t)vmulq_f32(v178, v178);
        *(float32x2_t *)v179.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v179, v179, 8uLL), *(float32x2_t *)v179.i8);
        v180 = (int32x2_t)vpadd_f32(*(float32x2_t *)v179.i8, *(float32x2_t *)v179.i8);
        v181 = (float32x4_t)xmmword_1882323C0;
        if (*(float *)v180.i32 != 0.0)
          v181 = vdivq_f32(v178, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v180, 0)));
        v172[-1] = v181;
        v182 = v172[-4];
        v183 = vmulq_f32(v176, v182);
        v184 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v183, 2), vaddq_f32(v183, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v183.f32, 1))), 0);
        v184.i32[3] = 0;
        v185 = vsubq_f32(v182, vmulq_f32(v176, v184));
        v186 = *v177;
        *v172 = v185;
        v172[1] = v186;
        v172[2].i64[0] = 0;
        v172[2].i64[1] = 0;
        v172[3] = v172[-1];
        v171 += 32;
        v172 += 9;
      }
      while (v163 != v171);
      LODWORD(v306) = 0;
      v270[0].i32[0] = 0;
      compute_error_squared_rgb(raw_partition_info, (float32x4_t *)a2, (uint64_t)&v283, &v306, v270);
      v187 = 0;
      v188 = *(float *)&v306;
      v189 = v270[0].f32[0];
      v190 = (unsigned __int8 *)(raw_partition_info + 2);
      do
      {
        v191 = *v190++;
        v192 = v9 * (float)v191;
        v193 = *(float *)&v291[v187];
        v194 = vmulq_n_f32(*(float32x4_t *)((char *)&v283 + v187 + 16), v193);
        v195 = vmulq_n_f32(*(float32x4_t *)((char *)&v286 + v187), v193);
        v196 = vmulq_n_f32(vmulq_f32(v194, v194), v192);
        v197 = vmulq_n_f32(vmulq_f32(v195, v195), v192);
        v188 = v188
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))).f32[0];
        v189 = v189
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v197, 2), vaddq_f32(v197, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v197.f32, 1))).f32[0];
        v187 += 144;
      }
      while (v164 != v187);
      *(float *)&v306 = v188;
      v270[0].f32[0] = v189;
      insert_result(v256, v188, v165, __b, (unsigned int *)v280);
      insert_result(v256, v270[0].f32[0], v165, v279, (unsigned int *)v278);
      ++v162;
    }
    while (v162 != v254);
  }
  else
  {
    v198 = 0;
    do
    {
      v250 = v198;
      v249 = (unsigned __int16)v282[v198];
      v199 = (_BYTE *)block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v249);
      v290 = 0u;
      v289 = 0u;
      v288 = 0u;
      v287 = 0u;
      v286 = 0u;
      v285 = 0u;
      v284 = 0u;
      v283 = 0u;
      v200 = v199;
      compute_avgs_and_dirs_4_comp(v199, (float32x4_t *)a2, (uint64_t)&v283);
      v201 = 0;
      v299 = 0u;
      v298 = 0u;
      v297 = 0u;
      v296 = 0u;
      v295 = 0u;
      v294 = 0u;
      v293 = 0u;
      v292 = 0u;
      v313 = 0u;
      v312 = 0u;
      v311 = 0u;
      v310 = 0u;
      v309 = 0u;
      v308 = 0u;
      v307 = 0u;
      v306 = 0u;
      v276 = 0u;
      v277 = 0u;
      v274 = 0u;
      v275 = 0u;
      v272 = 0u;
      v273 = 0u;
      v270[0] = 0u;
      v271 = 0u;
      v269 = 0u;
      v267 = 0u;
      v268 = 0u;
      v265 = 0u;
      v266 = 0u;
      v263 = 0u;
      v264 = 0u;
      v262 = 0u;
      v261[0] = 0;
      v261[1] = 0;
      do
      {
        v202 = *(float32x4_t *)((char *)&v283 + v201 + 16);
        *(__int128 *)((char *)&v292 + v201) = *(__int128 *)((char *)&v283 + v201);
        v203 = (int8x16_t)vmulq_f32(v202, v202);
        *(float32x2_t *)v203.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL), *(float32x2_t *)v203.i8);
        v204 = (int32x2_t)vpadd_f32(*(float32x2_t *)v203.i8, *(float32x2_t *)v203.i8);
        v205.i64[0] = 0x3F0000003F000000;
        v205.i64[1] = 0x3F0000003F000000;
        v206.i64[0] = 0x3F0000003F000000;
        v206.i64[1] = 0x3F0000003F000000;
        if (*(float *)v204.i32 != 0.0)
          v206 = vdivq_f32(v202, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v204, 0)));
        *(__int128 *)((char *)&v293 + v201) = (__int128)v206;
        v207 = *(float32x4_t *)((char *)&v292 + v201);
        v208 = (int8x16_t)vmulq_f32(v206, v207);
        *(float32x2_t *)v208.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), *(float32x2_t *)v208.i8);
        v209 = vsubq_f32(v207, vmulq_n_f32(v206, vpadd_f32(*(float32x2_t *)v208.i8, *(float32x2_t *)v208.i8).f32[0]));
        v210 = &v270[v201 / 0x10];
        v211 = *(float32x4_t *)((char *)&v293 + v201);
        *v210 = v209;
        v210[1] = v211;
        v212 = (float32x4_t *)((char *)&v306 + v201);
        v212->i64[0] = 0;
        v212->i64[1] = 0;
        v213 = *(float32x4_t *)((char *)&v283 + v201);
        v214 = (int8x16_t)vmulq_f32(v213, v213);
        *(float32x2_t *)v214.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v214, v214, 8uLL), *(float32x2_t *)v214.i8);
        v215 = (int32x2_t)vpadd_f32(*(float32x2_t *)v214.i8, *(float32x2_t *)v214.i8);
        if (*(float *)v215.i32 != 0.0)
          v205 = vdivq_f32(v213, vsqrtq_f32((float32x4_t)vdupq_lane_s32(v215, 0)));
        v212[1] = v205;
        v216 = (float32x4_t *)((char *)&v262 + v201);
        v216->i64[0] = 0;
        v216->i64[1] = 0;
        v216[1] = v212[1];
        v201 += 32;
      }
      while (32 * v160 != v201);
      v260 = 0;
      compute_error_squared_rgba(v200, (float32x4_t *)a2, (uint64_t)v270, (uint64_t)&v262, (uint64_t)v261, (_DWORD *)&v260 + 1, &v260);
      v218 = 0;
      v219 = *((float *)&v260 + 1);
      LODWORD(v220) = v260;
      v221 = 16;
      do
      {
        LOBYTE(v217) = *((_BYTE *)v200 + v218 + 4);
        v222 = v9 * (float)LODWORD(v217);
        v223 = *((float *)v261 + v218);
        v224 = vmulq_n_f32(*(float32x4_t *)((char *)&v292 + v221), v223);
        v225 = vmulq_n_f32(*(float32x4_t *)((char *)&v306 + v221), v223);
        v226 = (int8x16_t)vmulq_n_f32(vmulq_f32(v224, v224), v222);
        *(float32x2_t *)v226.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL), *(float32x2_t *)v226.i8);
        v219 = v219 + vpadd_f32(*(float32x2_t *)v226.i8, *(float32x2_t *)v226.i8).f32[0];
        v227 = (int8x16_t)vmulq_n_f32(vmulq_f32(v225, v225), v222);
        *(float32x2_t *)v227.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL), *(float32x2_t *)v227.i8);
        v217 = vpadd_f32(*(float32x2_t *)v227.i8, *(float32x2_t *)v227.i8).f32[0];
        v220 = v220 + v217;
        ++v218;
        v221 += 32;
      }
      while (v160 != v218);
      v260 = __PAIR64__(LODWORD(v219), LODWORD(v220));
      insert_result(v150, v219, v249, __b, (unsigned int *)v280);
      insert_result(v150, *(float *)&v260, v249, v279, (unsigned int *)v278);
      v198 = v250 + 1;
    }
    while (v250 + 1 != v254);
  }
  v295 = 0u;
  v294 = 0u;
  v293 = 0u;
  v292 = 0u;
  if (!(_DWORD)v256)
    return 0;
  v228 = 0;
  v229 = (unsigned int *)v280;
  v230 = (unsigned int *)v278;
  do
  {
    v231 = *v229++;
    *((_DWORD *)&v292 + v228) = *(unsigned __int16 *)(block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v231)+ 2);
    v232 = *v230++;
    *((_DWORD *)&v292 + (v228 + 1)) = *(unsigned __int16 *)(block_size_descriptor::get_raw_partition_info((block_size_descriptor *)a1, a3, v232)+ 2);
    v228 += 2;
  }
  while (2 * v256 != v228);
  v290 = 0u;
  v289 = 0u;
  v288 = 0u;
  v287 = 0u;
  v286 = 0u;
  v285 = 0u;
  v284 = 0u;
  v233 = (2 * v256);
  v283 = 0u;
  if (!(_DWORD)v233)
    return 0;
  result = 0;
  v235 = (unsigned int *)&v292;
  while (1)
  {
    v237 = *v235++;
    v236 = v237;
    v238 = (unint64_t)v237 >> 6;
    v239 = *((_QWORD *)&v283 + v238);
    v240 = 1 << v237;
    if (((1 << v237) & v239) == 0)
    {
      *(_DWORD *)(a5 + 4 * result) = v236;
      *((_QWORD *)&v283 + v238) = v240 | v239;
      result = (result + 1);
      if ((_DWORD)result == (_DWORD)v256)
        break;
    }
    if (!--v233)
      return result;
  }
  return v256;
}

uint64_t block_size_descriptor::get_raw_partition_info(block_size_descriptor *this, int a2, unsigned int a3)
{
  int v3;

  if (a3 == 0xFFFF || *((_DWORD *)this + (a2 - 1) + 12) <= a3)
    block_size_descriptor::get_raw_partition_info();
  v3 = (a2 << 10) - 2048;
  if (a2 == 1)
    v3 = 3072;
  return (uint64_t)this + 1088 * v3 + 1088 * a3 + 11317232;
}

uint64_t insert_result(uint64_t result, float a2, unsigned int a3, float *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  float *v10;

  if (!(_DWORD)result)
    insert_result();
  v5 = (result - 1);
  if (a4[v5] > a2)
  {
    v6 = 0;
    while (a4[v6] < a2)
    {
      if (result == ++v6)
        return result;
    }
    if (v5 > v6)
    {
      v7 = (result - 2);
      v8 = result - 1;
      v9 = a5;
      v10 = a4;
      do
      {
        v10[v5] = v10[v7];
        v9[v5] = v9[v7];
        --v10;
        --v9;
        --v8;
      }
      while (v8 > v6);
    }
    a4[v6] = a2;
    a5[v6] = a3;
  }
  return result;
}

void find_best_partition_candidates()
{
  __assert_rtn("find_best_partition_candidates", "astcenc_find_best_partitioning.cpp", 576, "partition_count > 0");
}

{
  __assert_rtn("find_best_partition_candidates", "astcenc_find_best_partitioning.cpp", 577, "partition_search_limit > 0");
}

{
  __assert_rtn("kmeans_init", "astcenc_find_best_partitioning.cpp", 66, "texel_count > 0");
}

{
  __assert_rtn("kmeans_assign", "astcenc_find_best_partitioning.cpp", 153, "texel_count > 0");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 372, "active_count > 0");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 397, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 398, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 379, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 380, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 388, "mismatch_counts[i] < BLOCK_MAX_KMEANS_TEXELS");
}

{
  __assert_rtn("count_partition_mismatch_bits", "astcenc_find_best_partitioning.cpp", 389, "mismatch_counts[i] < bsd.texel_count");
}

{
  __assert_rtn("kmeans_update", "astcenc_find_best_partitioning.cpp", 217, "texel_count > 0");
}

void block_size_descriptor::get_raw_partition_info()
{
  __assert_rtn("get_raw_partition_info", "astcenc_internal.h", 723, "packed_index != BLOCK_BAD_PARTITIONING && packed_index < this->partitioning_count_all[partition_count - 1]");
}

void insert_result()
{
  __assert_rtn("insert_result", "astcenc_find_best_partitioning.cpp", 519, "max_values > 0");
}

int32x4_t rgba_delta_unpack(int32x4_t *a1, int32x4_t *a2, uint32x4_t a3, int8x16_t a4)
{
  int32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t result;

  v4.i64[0] = -1;
  v4.i64[1] = -1;
  v5.i64[0] = 0x8000000080;
  v5.i64[1] = 0x8000000080;
  v6 = (int32x4_t)vorrq_s8((int8x16_t)vshlq_u32(a3, (uint32x4_t)v4), vandq_s8(a4, v5));
  v7 = (int32x4_t)vshlq_u32((uint32x4_t)a4, (uint32x4_t)v4);
  v5.i64[0] = 0x3F0000003FLL;
  v5.i64[1] = 0x3F0000003FLL;
  v8.i64[0] = 0x2000000020;
  v8.i64[1] = 0x2000000020;
  v9 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32(v7, v8) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8((int8x16_t)v7, v5));
  v5.i32[0] = vaddq_s32(vaddq_s32(v9, vdupq_lane_s32(*(int32x2_t *)v9.i8, 1)), vdupq_laneq_s32(v9, 2)).u32[0];
  v10 = vaddq_s32(v9, v6);
  if (v5.i32[0] < 0)
  {
    v11.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v6, 2), v6), v4).u64[0];
    v11.i64[1] = v6.i64[1];
    v6.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v10, 2), v10), v4).u64[0];
    v6.i64[1] = v10.i64[1];
    v10 = v11;
  }
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  *a1 = vminq_s32(vmaxq_s32(v6, (int32x4_t)0), v12);
  result = vminq_s32(vmaxq_s32(v10, (int32x4_t)0), v12);
  *a2 = result;
  return result;
}

__n128 *rgba_unpack(__n128 *result, __n128 *a2, int32x4_t a3, int32x4_t a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;

  v4 = vdupq_laneq_s32(a3, 2);
  v5 = vdupq_laneq_s32(a4, 2);
  if ((vmovn_s32(vcgtq_s32(vaddq_s32(vaddq_s32(a3, vdupq_lane_s32(*(int32x2_t *)a3.i8, 1)), v4), vaddq_s32(vaddq_s32(a4, vdupq_lane_s32(*(int32x2_t *)a4.i8, 1)), v5))).u8[0] & 1) != 0)
  {
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7.i64[0] = vshlq_s32(vaddq_s32(v4, a3), v6).u64[0];
    v7.i64[1] = a3.i64[1];
    a3.i64[0] = vshlq_s32(vaddq_s32(v5, a4), v6).u64[0];
    a3.i64[1] = a4.i64[1];
    a4 = v7;
  }
  *result = (__n128)a3;
  *a2 = (__n128)a4;
  return result;
}

__n128 unpack_color_endpoints(unsigned int a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, _BYTE *a5, uint64_t a6, __n128 *a7, __n128 a8, double a9, int32x4_t a10, int32x4_t a11)
{
  unsigned int v17;
  int v18;
  unsigned __int8 v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  __n128 v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x2_t v39;
  unint64_t v40;
  uint32x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  _BOOL4 v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  int v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  uint32x4_t v94;
  uint32x4_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int8x16_t v104;
  int32x4_t v105;
  int32x4_t v106;
  unsigned __int32 v107;
  int32x4_t v108;
  int32x4_t v109;
  uint32x4_t v110;
  int8x8_t v111;
  uint32x4_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int32x4_t v136;
  int8x16_t v137;
  int8x16_t v138;
  __n128 result;

  *a4 = 0;
  *a5 = 0;
  switch(a2)
  {
    case 0:
      v17 = *a3;
      v18 = a3[1];
      goto LABEL_5;
    case 1:
      v19 = a3[1];
      v17 = v19 & 0xC0 | (*a3 >> 2);
      v18 = v17 + (v19 & 0x3F);
      if (v18 >= 255)
        v18 = 255;
LABEL_5:
      a8.n128_u32[3] = 255;
      LODWORD(v20) = v17;
      DWORD1(v20) = v17;
      *((_QWORD *)&v20 + 1) = v17 | 0xFF00000000;
      a8.n128_u32[0] = v18;
      *(_OWORD *)a6 = v20;
      a8.n128_u32[1] = v18;
      a8.n128_u32[2] = v18;
      goto LABEL_105;
    case 2:
      *a4 = 1;
      v21 = *a3;
      v22 = a3[1];
      v23 = 16 * v21 - 8;
      v24 = v22 >= v21;
      if (v22 >= v21)
        v25 = v21 << 8;
      else
        v25 = (v22 << 8) | 0x80;
      if (v24)
        v26 = 16 * v22;
      else
        v26 = v23;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = v25;
      a8.n128_u32[1] = v25;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = v25;
      v28 = 16 * v26;
      goto LABEL_28;
    case 3:
      *a4 = 1;
      v29 = *a3;
      v30 = a3[1];
      if ((v29 & 0x80u) != 0)
        v31 = 3584;
      else
        v31 = 3840;
      if ((v29 & 0x80u) == 0)
        v32 = 1;
      else
        v32 = 2;
      if ((v29 & 0x80u) != 0)
        v33 = 508;
      else
        v33 = 254;
      if ((v29 & 0x80u) != 0)
        v34 = 124;
      else
        v34 = 30;
      v35 = v31 & (16 * v30) | (v29 << v32) & v33;
      v36 = v35 + ((v30 << v32) & v34);
      if (v36 >= 4095)
        v36 = 4095;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * v35;
      a8.n128_u32[1] = 16 * v35;
      v27.n128_u32[3] = 30720;
      a8.n128_u32[2] = 16 * v35;
      v28 = 16 * v36;
LABEL_28:
      v27.n128_u32[0] = v28;
      *(__n128 *)a6 = a8;
      v27.n128_u32[1] = v28;
      goto LABEL_85;
    case 4:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[2];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      goto LABEL_31;
    case 5:
      a8.n128_u8[0] = a3[1];
      a8.n128_u8[4] = a3[3];
      a8.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v39 = vadd_s32((int32x2_t)a8.n128_u64[0], (int32x2_t)a8.n128_u64[0]);
      v40 = *(_QWORD *)&vtst_s32((int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40), (int32x2_t)(a8.n128_u64[0] & 0xFFFFFF40FFFFFF40)) & 0xFFFFFF80FFFFFF80;
      a8.n128_u64[0] = (unint64_t)vorr_s8((int8x8_t)v40, (int8x8_t)(a8.n128_u64[0] & 0xFFFFFF7EFFFFFF7ELL));
      LOBYTE(v40) = *a3;
      BYTE4(v40) = a3[2];
      v41 = (uint32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v39 & 0xFFFFFF01FFFFFF01), vand_s8((int8x8_t)v40, (int8x8_t)0xFF000000FFLL));
      a8.n128_u64[0] = (unint64_t)vmin_s32(vmax_s32((int32x2_t)vsra_n_u32((uint32x2_t)vshr_n_s32((int32x2_t)a8.n128_u64[0], 1uLL), v41, 1uLL), 0), (int32x2_t)0xFF000000FFLL);
      v38 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v38.i32[2] = a8.n128_u32[0];
      a8.n128_u64[0] = (unint64_t)vshr_n_u32(v41, 1uLL);
      v37 = vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
      v37.i32[2] = a8.n128_u32[0];
LABEL_31:
      *(int32x4_t *)a6 = v37;
      goto LABEL_101;
    case 6:
      v42.i32[0] = *a3;
      v42.i32[1] = a3[1];
      v42.i64[1] = a3[2];
      v43 = vmulq_s32(vdupq_n_s32(a3[3]), v42);
      v42.i32[3] = 255;
      *a7 = (__n128)v42;
      v42.i64[0] = 0x700000007;
      v42.i64[1] = 0x700000007;
      a8 = (__n128)vshlq_s32(v43, v42);
      a8.n128_u32[3] = 255;
      *(__n128 *)a6 = a8;
      goto LABEL_117;
    case 7:
      *a4 = 1;
      v44 = *a3;
      v45 = a3[1];
      v46 = a3[2];
      v47 = a3[3];
      v48 = (v46 >> 4) & 8 | (v45 >> 5) & 4;
      v49 = v44 >> 6 == 3;
      if (v44 >> 6 == 3)
        v50 = 0;
      else
        v50 = v44 >> 6;
      if (v44 >> 6 == 3)
        v51 = 5;
      else
        v51 = 4;
      v80 = v48 == 12;
      v52 = v48 == 12;
      v53 = v48 >> 2;
      if (v80)
        v53 = v50;
      else
        v51 = v44 >> 6;
      v54 = (v45 >> 6) & 1;
      v55 = (v45 >> 5) & 1;
      v56 = (v46 >> 6) & 1;
      v57 = (v46 >> 5) & 1;
      v58 = (v47 >> 6) & 1;
      v59 = (v47 >> 5) & 1;
      v60 = 1 << v51;
      v61 = v54 << 6;
      if (((1 << v51) & 0x30) == 0)
        v61 = 0;
      v62 = v61 & 0xFFFFFFE0 | v45 & 0x1F;
      v63 = 32 * v55;
      v64 = v56 << 6;
      if ((v60 & 0x30) == 0)
        v64 = 0;
      if ((v60 & 0x3A) == 0)
        v63 = 0;
      v65 = v62 | v63;
      v66 = v64 & 0xFFFFFFE0 | v46 & 0x1F;
      v67 = 32 * v57;
      if ((v60 & 0x3A) == 0)
        v67 = 0;
      v68 = v66 | v67;
      v69 = (16 * v60) & (v57 << 6);
      v70 = (v47 >> 1) & 0x40;
      if ((v60 & 0x3B) == 0)
        v70 = 0;
      v71 = v56 << 7;
      if (v51 > 3)
        v71 = 0;
      v72 = v55 << 8;
      v73 = v54 << 8;
      if ((v60 & 0xA) == 0)
        v73 = 0;
      if ((v60 & 5) == 0)
        v72 = 0;
      v74 = v54 << 9;
      if ((v60 & 5) == 0)
        v74 = 0;
      v75 = v57 << 10;
      if (v51)
        v75 = 0;
      v76 = hdr_rgbo_unpack(unsigned char const*,vint4 &,vint4 &)::shamts[v51];
      v77 = (v71 & 0xFFFFFFC0 | v44 & 0x3F | v75 | v70 | v69 | (8 * v60) & (v58 << 7) | v72 | v73 | v74 | (v60 << 8) & (v59 << 9) | (v60 << 9) & (v58 << 10)) << v76;
      v78 = v65 << v76;
      v79 = v68 << v76;
      v80 = !v52 || !v49;
      if (v52 && v49)
        v81 = v78;
      else
        v81 = v77 - v78;
      if (v80)
        v82 = v77 - v79;
      else
        v82 = v79;
      if (v53 == 1)
        v83 = v81;
      else
        v83 = v77;
      if (v53 == 1)
        v84 = v77;
      else
        v84 = v81;
      v85 = v53 == 2;
      if (v53 == 2)
        v86 = v82;
      else
        v86 = v83;
      if (v85)
        v82 = v77;
      else
        v81 = v84;
      v87 = 32 * v59;
      if ((v60 & 0x3D) == 0)
        v87 = 0;
      v88 = v87 & 0xFFFFFFE0 | v47 & 0x1F;
      v89 = v58 << 6;
      if ((v60 & 0x2D) == 0)
        v89 = 0;
      v90 = (v88 | v89 | v47 & (32 * v60) & 0x80) << v76;
      a8.n128_u32[3] = 30720;
      a8.n128_u32[0] = 16 * ((v86 - v90) & ~((v86 - v90) >> 31));
      a8.n128_u32[1] = 16 * ((v81 - v90) & ~((v81 - v90) >> 31));
      a8.n128_u32[2] = 16 * ((v82 - v90) & ~((v82 - v90) >> 31));
      v27.n128_u32[3] = 30720;
      *(__n128 *)a6 = a8;
      v27.n128_u32[0] = 16 * (v86 & ~(v86 >> 31));
      v28 = 16 * (v82 & ~(v82 >> 31));
      v27.n128_u32[1] = 16 * (v81 & ~(v81 >> 31));
LABEL_85:
      v27.n128_u32[2] = v28;
      *a7 = v27;
      goto LABEL_95;
    case 8:
      a8.n128_u8[12] = 0;
      a8.n128_u8[13] = 0;
      a8.n128_u8[14] = 0;
      a8.n128_u8[15] = 0;
      a8.n128_u32[0] = *a3;
      a8.n128_u32[1] = a3[2];
      a8.n128_u32[2] = a3[4];
      v91.i32[0] = a3[1];
      v91.i32[1] = a3[3];
      v91.i64[1] = a3[5];
      if (a8.n128_u32[1] + a8.n128_u32[0] + a8.n128_u32[2] > v91.i32[1] + v91.i32[0] + v91.i32[2])
      {
        v92.i64[0] = -1;
        v92.i64[1] = -1;
        v93.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32((int32x4_t)a8, 2), (int32x4_t)a8), v92).u64[0];
        v93.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v91, 2), v91), v92).u64[0];
        a8.n128_u64[1] = a3[5];
        v91 = v93;
      }
      *(__n128 *)a6 = a8;
      *a7 = (__n128)v91;
      goto LABEL_92;
    case 9:
      v94.i32[0] = *a3;
      v94.i32[1] = a3[2];
      v94.i64[1] = a3[4];
      v95.i32[0] = a3[1];
      v95.i32[1] = a3[3];
      v95.i64[1] = a3[5];
      v96.i64[0] = -1;
      v96.i64[1] = -1;
      v97 = (int8x16_t)vshlq_u32(v95, (uint32x4_t)v96);
      v95.i64[0] &= 0xFFFFFF80FFFFFF80;
      v95.i64[1] = v95.i8[8] & 0x80;
      v98 = (int32x4_t)vorrq_s8((int8x16_t)v95, (int8x16_t)vshlq_u32(v94, (uint32x4_t)v96));
      v95.i64[0] = 0x3F0000003FLL;
      v95.i64[1] = 0x3F0000003FLL;
      v99.i64[0] = 0x2000000020;
      v99.i64[1] = 0x2000000020;
      v100 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v97, v99) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v97, (int8x16_t)v95));
      v97.i32[0] = vaddq_s32(vaddq_s32(v100, vdupq_lane_s32(*(int32x2_t *)v100.i8, 1)), vdupq_laneq_s32(v100, 2)).u32[0];
      v101 = vaddq_s32(v100, v98);
      if (v97.i32[0] < 0)
      {
        v102.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v98, 2), v98), v96).u64[0];
        v102.i64[1] = v98.i64[1];
        v98.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v101, 2), v101), v96).u64[0];
        v98.i64[1] = v101.i64[1];
        v101 = v102;
      }
      v103.i64[0] = 0xFF000000FFLL;
      v103.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v98, (int32x4_t)0), v103);
      a8 = (__n128)vminq_s32(vmaxq_s32(v101, (int32x4_t)0), v103);
      *a7 = a8;
LABEL_92:
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      goto LABEL_117;
    case 10:
      a8.n128_u8[0] = *a3;
      a8.n128_u8[4] = a3[1];
      a8.n128_u16[1] = a8.n128_u16[2];
      a8.n128_u8[4] = a3[2];
      a8.n128_u8[6] = a3[4];
      v104.i64[0] = 0xFF000000FFLL;
      v104.i64[1] = 0xFF000000FFLL;
      a8 = (__n128)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)a8.n128_u64[0]), v104);
      v105.i64[0] = 0x700000007;
      v105.i64[1] = 0x700000007;
      v106 = vshlq_s32(vmulq_s32(vdupq_n_s32(a3[3]), (int32x4_t)a8), v105);
      v106.i32[3] = a8.n128_i32[3];
      a8.n128_u32[3] = a3[5];
      *a7 = a8;
      *(int32x4_t *)a6 = v106;
      goto LABEL_117;
    case 11:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
LABEL_95:
      if (a1 == 3)
      {
        *(_DWORD *)(a6 + 12) = 30720;
        a7->n128_u32[3] = 30720;
        v107 = 1;
        *a5 = 1;
LABEL_121:
        a8.n128_u8[0] = *a4;
        a8.n128_u32[1] = v107;
        a8.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(vneg_s32((int32x2_t)a8.n128_u64[0]), 0x18uLL), 0x18uLL);
        v137 = (int8x16_t)vzip1q_s32((int32x4_t)a8, (int32x4_t)a8);
        v137.i32[2] = a8.n128_u32[0];
        v138.i64[0] = 0x100000001;
        v138.i64[1] = 0x100000001;
        v136 = (int32x4_t)vbslq_s8(v137, v138, (int8x16_t)vdupq_n_s32(0x101u));
        goto LABEL_123;
      }
      *(_DWORD *)(a6 + 12) = 255;
      a7->n128_u32[3] = 255;
      *a5 = 0;
LABEL_117:
      if (a1 >= 2)
      {
        v107 = *a5;
        goto LABEL_121;
      }
      if (*a4)
      {
        *(_OWORD *)a6 = xmmword_188235D60;
        *a7 = (__n128)xmmword_188235D60;
        *a4 = 0;
        *a5 = 0;
        v136.i64[0] = 0x100000001;
        v136.i64[1] = 0x100000001;
      }
      else
      {
        v136 = vdupq_n_s32(0x101u);
      }
LABEL_123:
      *(int32x4_t *)a6 = vmulq_s32(*(int32x4_t *)a6, v136);
      result = (__n128)vmulq_s32(*(int32x4_t *)a7, v136);
      *a7 = result;
      return result;
    case 12:
      a10.i32[0] = *a3;
      a10.i32[1] = a3[2];
      a10.i32[2] = a3[4];
      a8 = (__n128)a10;
      a8.n128_u32[3] = a3[6];
      a11.i32[0] = a3[1];
      a11.i32[1] = a3[3];
      a11.i32[2] = a3[5];
      v38 = a11;
      v38.i32[3] = a3[7];
      if (a10.i32[1] + a10.i32[0] + a10.i32[2] > (a11.i32[1] + a11.i32[0] + a11.i32[2]))
      {
        v108.i64[0] = -1;
        v108.i64[1] = -1;
        v109.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a10, 2), (int32x4_t)a8), v108).u64[0];
        v109.i64[1] = a8.n128_i64[1];
        a8.n128_u64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(a11, 2), v38), v108).u64[0];
        a8.n128_u64[1] = v38.u64[1];
        v38 = v109;
      }
      *(__n128 *)a6 = a8;
LABEL_101:
      *a7 = (__n128)v38;
      goto LABEL_117;
    case 13:
      a8.n128_u8[0] = a3[4];
      a8.n128_u8[4] = a3[6];
      v110.i32[0] = *a3;
      v110.i32[1] = a3[2];
      v111 = vand_s8((int8x8_t)a8.n128_u64[0], (int8x8_t)0xFF000000FFLL);
      v110.u64[1] = (unint64_t)v111;
      v111.i8[0] = a3[5];
      v111.i8[4] = a3[7];
      v112.i32[0] = a3[1];
      v112.i32[1] = a3[3];
      v112.u64[1] = (unint64_t)vand_s8(v111, (int8x8_t)0xFF000000FFLL);
      v113.i64[0] = -1;
      v113.i64[1] = -1;
      v114 = (int8x16_t)vshlq_u32(v110, (uint32x4_t)v113);
      v115 = (int8x16_t)vshlq_u32(v112, (uint32x4_t)v113);
      v116 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&v112 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80)), v114);
      v112.i64[0] = 0x3F0000003FLL;
      v112.i64[1] = 0x3F0000003FLL;
      v117.i64[0] = 0x2000000020;
      v117.i64[1] = 0x2000000020;
      v118 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)v115, v117) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), vandq_s8(v115, (int8x16_t)v112));
      v112.i32[0] = vaddq_s32(vaddq_s32(v118, vdupq_lane_s32(*(int32x2_t *)v118.i8, 1)), vdupq_laneq_s32(v118, 2)).u32[0];
      v119 = vaddq_s32(v118, v116);
      if (v112.i32[0] < 0)
      {
        v120.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v116, 2), v116), v113).u64[0];
        v120.i64[1] = v116.i64[1];
        v116.i64[0] = vshlq_s32(vaddq_s32(vdupq_laneq_s32(v119, 2), v119), v113).u64[0];
        v116.i64[1] = v119.i64[1];
        v119 = v120;
      }
      v121.i64[0] = 0xFF000000FFLL;
      v121.i64[1] = 0xFF000000FFLL;
      *(int32x4_t *)a6 = vminq_s32(vmaxq_s32(v116, (int32x4_t)0), v121);
      a8 = (__n128)vminq_s32(vmaxq_s32(v119, (int32x4_t)0), v121);
LABEL_105:
      *a7 = a8;
      goto LABEL_117;
    case 14:
      *a4 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      v122 = a3[6];
      v123 = a3[7];
      goto LABEL_116;
    case 15:
      *a4 = 1;
      *a5 = 1;
      a8 = hdr_rgb_unpack(a3, (_OWORD *)a6, a7);
      v124 = a3[6];
      v125 = a3[7];
      v126 = (v125 >> 6) & 2 | (v124 >> 7);
      v127 = v124 & 0x7F;
      v128 = v125 & 0x7F;
      v129 = (v128 << (v126 + 1)) & 0x780 | v127;
      v130 = v129 << (4 - v126);
      v131 = ((0x3Fu >> v126) & v125 ^ (0x20u >> v126)) - (0x20u >> v126) + v129;
      v132 = v131 << (4 - v126);
      if (v132 >= 4095)
        v132 = 4095;
      if (v131 >= 0)
        v133 = v132;
      else
        v133 = 0;
      v134 = 32 * v127;
      v135 = 32 * v128;
      if (v126 == 3)
        v133 = v135;
      else
        v134 = v130;
      v122 = 16 * v134;
      v123 = 16 * v133;
LABEL_116:
      *(_DWORD *)(a6 + 12) = v122;
      a7->n128_u32[3] = v123;
      goto LABEL_117;
    default:
      goto LABEL_117;
  }
}

__n128 hdr_rgb_unpack(unsigned __int8 *a1, _OWORD *a2, __n128 *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  char v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  __int128 v72;
  __n128 result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = (v8 >> 6) & 2 | (v7 >> 7);
  if (v9 == 3)
  {
    HIDWORD(v10) = 30720;
    LODWORD(v10) = v3 << 8;
    DWORD1(v10) = v5 << 8;
    DWORD2(v10) = (v7 & 0x7F) << 9;
    v11 = v4 << 8;
    *a2 = v10;
    v12 = v6 << 8;
    v13 = (v8 & 0x7F) << 9;
  }
  else
  {
    v14 = (v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4;
    v15 = v7 & 0x7F;
    v16 = v8 & 0x7F;
    v17 = (v5 >> 6) & 1;
    v18 = (v6 >> 6) & 1;
    v19 = (v7 >> 6) & 1;
    v20 = (v8 >> 6) & 1;
    v21 = (v7 >> 5) & 1;
    v22 = (v8 >> 5) & 1;
    v23 = 1 << ((v5 >> 6) & 2 | (v4 >> 7) | (v6 >> 5) & 4);
    v24 = v17 << 9;
    if ((v23 & 0xA4) == 0)
      v24 = 0;
    v25 = v21 << 9;
    if ((v23 & 0x50) == 0)
      v25 = 0;
    v26 = v22 << 10;
    if ((v23 & 0x50) == 0)
      v26 = 0;
    v27 = v18 << 10;
    if ((v23 & 0xA0) == 0)
      v27 = 0;
    v28 = v19 << 11;
    if (v14 < 6)
      v28 = 0;
    v29 = v28 & 0xFFFFFEFF | (((v4 >> 6) & 1) << 8) | v24 | (v23 << 6) & (v19 << 9) | v25 | v26 | v27 | v3;
    v30 = (16 * v23) & (v18 << 6);
    v31 = v18 << 6;
    v32 = v30 & 0xFFFFFFC0 | v4 & 0x3F;
    v33 = v20 << 6;
    if ((v23 & 0xE8) != 0)
      v34 = v20 << 6;
    else
      v34 = 0;
    v35 = v32 | v34 | (4 * v23) & (v19 << 7);
    v36 = v17 << 6;
    if ((v23 & 0x5B) == 0)
      v36 = 0;
    v37 = v36 & 0xFFFFFFC0 | v5 & 0x3F;
    if ((v23 & 0x5B) != 0)
      v38 = v31;
    else
      v38 = 0;
    v39 = v38 & 0xFFFFFFC0 | v6 & 0x3F;
    v40 = v20 << 7;
    if ((v23 & 0x12) != 0)
      v41 = v19 << 7;
    else
      v41 = 0;
    v42 = v37 | v41;
    if ((v23 & 0x12) == 0)
      v40 = 0;
    v43 = v39 | v40;
    v44 = 32 * v21;
    if ((v23 & 0xAF) == 0)
      v44 = 0;
    v45 = v44 | v15;
    if ((v23 & 0xAF) != 0)
      v46 = 32 * v22;
    else
      v46 = 0;
    v47 = v46 | v16;
    v48 = v19 << 6;
    if ((v23 & 5) == 0)
      v48 = 0;
    v49 = v45 | v48;
    if ((v23 & 5) == 0)
      v33 = 0;
    v50 = -hdr_rgb_unpack(unsigned char const*,vint4 &,vint4 &)::dbits_tab[v14];
    v51 = v49 << v50 >> v50;
    v52 = (v47 | v33) << v50 >> v50;
    v53 = (v14 >> 1) ^ 3;
    v54 = v29 << v53;
    v55 = (v29 - v42) << v53;
    v56 = v29 - v43;
    v57 = v56 << v53;
    v58 = (v29 - v42 - (v35 + v51)) << v53;
    v59 = (v56 - (v35 + v52)) << v53;
    v60 = ((v29 - v35) << v53) & ~((int)((v29 - v35) << v53) >> 31);
    if (v60 >= 4095)
      v60 = 4095;
    v61 = v58 & ~(v58 >> 31);
    if (v61 >= 4095)
      v61 = 4095;
    v62 = v59 & ~(v59 >> 31);
    if (v62 >= 4095)
      v62 = 4095;
    if (v54 >= 0xFFF)
      v54 = 4095;
    v63 = v55 & ~(v55 >> 31);
    if (v63 >= 4095)
      v63 = 4095;
    if ((v57 & ~(v57 >> 31)) >= 4095)
      v64 = 4095;
    else
      v64 = v57 & ~(v57 >> 31);
    if (v9 == 1)
      v65 = v63;
    else
      v65 = v54;
    if (v9 == 1)
      v66 = v54;
    else
      v66 = v63;
    if (v9 == 1)
      v67 = v61;
    else
      v67 = v60;
    if (v9 == 1)
      v68 = v60;
    else
      v68 = v61;
    v69 = v9 == 2;
    if (v9 == 2)
      v70 = v64;
    else
      v70 = v65;
    if (v69)
      v64 = v54;
    else
      v63 = v66;
    if (v69)
      v71 = v62;
    else
      v71 = v67;
    if (v69)
      v62 = v60;
    else
      v61 = v68;
    HIDWORD(v72) = 30720;
    LODWORD(v72) = 16 * v71;
    DWORD1(v72) = 16 * v61;
    v11 = 16 * v70;
    DWORD2(v72) = 16 * v62;
    *a2 = v72;
    v12 = 16 * v63;
    v13 = 16 * v64;
  }
  result.n128_u64[0] = __PAIR64__(v12, v11);
  result.n128_u64[1] = v13 | 0x780000000000;
  *a3 = result;
  return result;
}

uint64_t pack_color_endpoints(int a1, unsigned __int8 *a2, unsigned int a3, float32x4_t a4, float32x4_t a5, int8x16_t a6, int32x4_t a7)
{
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  unsigned __int8 *v27;
  float v28;
  float v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  unsigned __int8 *v57;
  float v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int32x2_t v68;
  int32x2_t v69;
  unsigned __int8 *v70;
  float v71;
  float v72;
  float v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  int v81;
  int v82;
  signed int v83;
  signed int v84;
  int v86;
  int v87;
  unsigned __int8 *v88;
  __int16 v89;
  unsigned __int8 *v90;
  int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned __int8 v96;
  __int16 v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int v108;
  int v109;
  unsigned __int8 *v110;
  int v111;
  unsigned __int8 *v112;
  int v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float v118;
  unsigned __int8 *v119;
  float32x4_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float v123;
  unsigned __int8 *v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  unint64_t v128;
  float v129;
  float v130;
  int v131;
  int v132;
  uint64_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float v136;
  BOOL v137;
  float v138;
  unsigned int v139;
  float v140;
  char *v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  unsigned __int8 v146;
  int v147;
  float32x2_t v148;
  float32x2_t v149;
  int32x2_t v150;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  char v157;
  unsigned int v158;
  int v159;
  unsigned __int8 v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int8x8_t v165;
  float32x2_t v166;
  float v167;
  float v168;
  int v169;
  uint64_t v170;
  float v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  unsigned __int8 *v179;
  __int32 v180;
  unsigned __int8 v181;
  int v182;
  float32x4_t v183;
  float32x4_t v184;
  int8x16_t v185;
  float v186;
  float32x4_t v187;
  float32x4_t v188;
  int8x16_t v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  int8x16_t v193;
  uint32x4_t v194;
  int8x16_t v195;
  unsigned int v197;
  int v198;
  char v199;
  unsigned int v200;
  int v201;
  unsigned __int8 *v202;
  unsigned __int8 v203;
  int v204;
  float v205;
  float v206;
  float32x4_t v207;
  __n128 v208;
  float v209;
  float32x4_t v210;
  __n128 v211;
  float v212;
  int8x16_t v213;
  uint32x4_t v214;
  int8x16_t v215;
  uint32x4_t v216;
  int8x8_t v217;
  int v218;
  unsigned __int32 v219;
  uint64_t v220;
  float v221;
  int32x4_t v222;
  int32x4_t v223;
  uint64_t v224;
  int8x16x2_t v225;

  v224 = *MEMORY[0x1E0C80C00];
  if (a3 - 21 <= 0xFFFFFFEE)
    pack_color_endpoints();
  v8 = 0;
  v216 = 0uLL;
  v215 = 0uLL;
  v214 = 0uLL;
  v213 = 0uLL;
  v11 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
  v12 = (int8x16_t)vminnmq_f32(vmaxnmq_f32(a4, (float32x4_t)0), v11);
  v13 = (int8x16_t)vminnmq_f32(vmaxnmq_f32(a5, (float32x4_t)0), v11);
  v14 = (float32x4_t)vdupq_n_s32(0x3B7F00FFu);
  v15 = vmulq_f32((float32x4_t)v12, v14);
  v16 = vmulq_f32((float32x4_t)v13, v14);
  switch(a1)
  {
    case 0:
      v8 = 0;
      v24 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      v25 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      v26 = (float)(v24 + v25) * 0.5;
      if (v24 > v25)
      {
        v25 = (float)(v24 + v25) * 0.5;
        v24 = v26;
      }
      v27 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      *a2 = v27[((float)(v24 - (float)(int)(float)(v24 + 0.5)) >= -0.1) | (2 * (int)(float)(v24 + 0.5))];
      a2[1] = v27[((float)(v25 - (float)(int)(float)(v25 + 0.5)) >= -0.1) | (2 * (int)(float)(v25 + 0.5))];
      return v8;
    case 2:
    case 3:
      v17 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32((float32x4_t)v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1))).f32[0];
      v18 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32((float32x4_t)v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.i8, 1))).f32[0];
      v19 = (float)(v17 + v18) * 0.5;
      v20 = v18 < v17;
      if (v18 < v17)
        v18 = (float)(v17 + v18) * 0.5;
      v21 = (int)(float)(v18 + 0.5);
      if (v20)
        v17 = v19;
      v22 = (int)(float)(v17 + 0.5);
      if (v21 - v22 < 2049)
      {
        if ((((v22 + 16) >> 5) & ~((v22 + 16) >> 31)) >= 2047)
          v89 = 2047;
        else
          v89 = ((v22 + 16) >> 5) & ~(unsigned __int16)((v22 + 16) >> 31);
        v23 = a3 - 4;
        v90 = &color_unquant_to_uquant_tables[512 * v23];
        v91 = (char)v90[(2 * (v89 & 0x7F)) | 1];
        if ((v91 & 0x80000000) == 0)
        {
          v92 = (((v21 + 16) >> 5) & ~((v21 + 16) >> 31)) >= 2047 ? 2047 : ((v21 + 16) >> 5) & ~((v21 + 16) >> 31);
          v93 = v89 & 0x780 | v90[(2 * (v89 & 0x7F)) | 1];
          v94 = v92 - v93;
          if (v94 <= 0xF)
          {
            v95 = (v93 >> 3) & 0xF0 | v94;
            v96 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v95) | 1u)];
            if ((v95 & 0xF0) == (v96 & 0xF0))
              goto LABEL_75;
          }
        }
        v97 = (((v22 + 32) >> 6) & ~((v22 + 32) >> 31)) >= 1023
            ? 1023
            : ((v22 + 32) >> 6) & ~(unsigned __int16)((v22 + 32) >> 31);
        v91 = (char)v90[(2 * (v97 & 0x7F)) | 0x101];
        if (v91 < 0)
        {
          v98 = (((v21 + 32) >> 6) & ~((v21 + 32) >> 31)) >= 1023 ? 1023 : ((v21 + 32) >> 6) & ~((v21 + 32) >> 31);
          v99 = v98 - (v97 & 0x380 | v91 & 0x7F);
          if (v99 <= 0x1F)
          {
            v100 = v99 | ((unsigned __int16)(v97 & 0x380) >> 2);
            v96 = color_unquant_to_uquant_tables[512 * v23 + ((2 * v100) | 1u)];
            if ((v100 & 0xE0) == (v96 & 0xE0))
            {
LABEL_75:
              *a2 = v91;
              a2[1] = v96;
              return 3;
            }
          }
        }
      }
      else
      {
        v23 = a3 - 4;
      }
      v101 = ((v22 + 128) >> 8) & ~((v22 + 128) >> 31);
      if (v101 >= 255)
        v101 = 255;
      v102 = ((v21 + 128) >> 8) & ~((v21 + 128) >> 31);
      if (v102 >= 255)
        v102 = 255;
      v103 = ((v21 + 256) >> 8) & ~((v21 + 256) >> 31);
      if (v103 >= 255)
        v103 = 255;
      if (((v22 >> 8) & ~(v22 >> 31)) >= 255)
        v104 = 255;
      else
        v104 = (v22 >> 8) & ~(v22 >> 31);
      v105 = ((v102 << 8) - v21) * ((v102 << 8) - v21) + ((v101 << 8) - v22) * ((v101 << 8) - v22);
      v106 = ((v104 << 8) - v22 + 128) * ((v104 << 8) - v22 + 128)
           + ((v103 << 8) - v21 - 128) * ((v103 << 8) - v21 - 128);
      v107 = v105 >= v106;
      if (v105 >= v106)
        v108 = v103;
      else
        v108 = v101;
      if (v107)
        v109 = v104;
      else
        v109 = v102;
      v110 = &color_unquant_to_uquant_tables[512 * v23];
      *a2 = v110[(2 * v108) | 1];
      a2[1] = v110[(2 * v109) | 1];
      return 2;
    case 4:
      v28 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
      v29 = 0.33333
          * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0];
      v30 = (int)(float)(v28 + 0.5);
      if (a3 >= 0x13)
      {
        v32 = 2 * v30;
        v34 = a3 - 4;
        v37 = (int)(float)(v29 + 0.5);
        v31 = (int)(float)(v15.f32[3] + 0.5);
        v40 = 2 * v37;
        v33 = 2 * v31;
        v38 = (int)(float)(v16.f32[3] + 0.5);
        v41 = 2 * v38;
      }
      else
      {
        v31 = (int)(float)(v15.f32[3] + 0.5);
        v32 = 2 * v30;
        v33 = 2 * v31;
        v34 = a3 - 4;
        v35 = &color_unquant_to_uquant_tables[512 * v34];
        v36 = v35[(4 * ((int)(float)(v28 + 0.5) & 0x7F)) | 1];
        v37 = (int)(float)(v29 + 0.5);
        v38 = (int)(float)(v16.f32[3] + 0.5);
        v39 = v36 | (((v30 >> 7) & 1) << 8);
        v40 = 2 * v37;
        v41 = 2 * v38;
        v42 = 2 * v37 - v39;
        if ((v42 - 64) >= 0xFFFFFF80)
        {
          v43 = v35[(4 * ((int)(float)(v15.f32[3] + 0.5) & 0x7F)) | 1];
          v44 = v43 & 0xFFFFFEFF | (((v31 >> 7) & 1) << 8);
          if (v41 - v44 - 64 >= 0xFFFFFF80)
          {
            v45 = v42 & 0x7F | ((unsigned __int16)(v32 & 0x100) >> 1);
            v46 = &color_unquant_to_uquant_tables[512 * v34];
            v47 = v46[(2 * v45) | 1];
            if ((v45 ^ v47) <= 0x3F)
            {
              v48 = ((_BYTE)v41 - (_BYTE)v43) & 0x7F | ((unsigned __int16)(v33 & 0x100) >> 1);
              v49 = v46[(2 * v48) | 1];
              if ((v48 ^ v49) <= 0x3F
                && (v47 & 0x7F) + v39 + (((int)(v47 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF
                && (v49 & 0x7F) + v44 + (((int)(v49 << 25) >> 31) & 0xFFFFFF80) <= 0x1FF)
              {
                *a2 = v36;
                a2[1] = v47;
                a2[2] = v43;
                v8 = 5;
                a2[3] = v49;
                return v8;
              }
            }
          }
        }
      }
      v111 = v32 | ((float)(v28 - (float)v30) >= -0.1);
      v112 = &color_unquant_to_uquant_tables[512 * v34];
      *a2 = v112[v111];
      a2[1] = v112[v40 | ((float)(v29 - (float)v37) >= -0.1)];
      a2[2] = v112[v33 | ((float)(v15.f32[3] - (float)v31) >= -0.1)];
      a2[3] = v112[v41 | ((float)(v16.f32[3] - (float)v38) >= -0.1)];
      return 4;
    case 6:
      quantize_rgbs(a2, a3, a6);
      return 6;
    case 7:
      v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
      *(float32x2_t *)v51.f32 = vadd_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)v50.f32);
      v51.i32[3] = vextq_s8(*(int8x16_t *)&a7, *(int8x16_t *)&a7, 8uLL).i32[1];
      v51.i32[2] = vaddq_f32(*(float32x4_t *)&a7, v50).i32[2];
      v52 = (int32x4_t)vminnmq_f32(vmaxnmq_f32(v51, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x477FFF00u));
      if (*(float *)v52.i32 <= *(float *)&v52.i32[1] || *(float *)v52.i32 <= *(float *)&v52.i32[2])
      {
        v114 = (int8x16_t)vrev64q_s32(v52);
        if (*(float *)&v52.i32[1] <= *(float *)&v52.i32[2])
        {
          v114 = vextq_s8(v114, v114, 0xCuLL);
          v113 = 2;
        }
        else
        {
          v114.i64[1] = v52.i64[1];
          v113 = 1;
        }
      }
      else
      {
        v113 = 0;
        v114 = (int8x16_t)v52;
      }
      v128 = 0;
      LODWORD(v129) = vsubq_f32((float32x4_t)v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.i8, 1)).u32[0];
      LODWORD(v130) = vsubq_f32((float32x4_t)v114, (float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2)).u32[0];
      v131 = 4 * v113;
      v132 = v113 | 0xC;
      v133 = a3 - 4;
      v134 = (float32x2_t)vextq_s8(v114, v114, 4uLL).u64[0];
      v135 = (float32x2_t)vdup_n_s32(0x477FFF00u);
      while (1)
      {
        v136 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v128];
        v137 = v129 <= v136 && v130 <= v136;
        if (v137
          && *(float *)&v114.i32[3] <= quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_cutoffs[2 * v128 + 1])
        {
          v138 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_scales[v128];
          v139 = v128 >= 4 ? v132 : v131 | v128;
          v140 = quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_rscales[v128];
          v141 = (char *)&quantize_hdr_rgbo(vfloat4,unsigned char *,quant_method)::mode_bits + 12 * v128;
          v143 = *((_DWORD *)v141 + 1);
          v142 = *((_DWORD *)v141 + 2);
          v144 = (int)(float)((float)(*(float *)v114.i32 * v138) + 0.5);
          v145 = v144 & 0x3F | (v139 << 6);
          do
          {
            v146 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v145) | 1u)];
            v147 = v145 & 0xC0;
            v145 -= v147 != (v146 & 0xC0);
          }
          while (v147 != (v146 & 0xC0));
          *(float *)v7.i32 = v140 * (float)(int)(v144 & 0xFFFFFFC0 | v146 & 0x3F);
          v148 = (float32x2_t)vdup_lane_s32(v7, 0);
          v149 = vsub_f32(v148, v134);
          v150 = vcvt_s32_f32(vadd_f32(vmul_n_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v149, v135), (int8x8_t)v135, (int8x8_t)vmaxnm_f32(v149, 0)), v138), (float32x2_t)0x3F0000003F000000));
          if (1 << v143 > v150.i32[0] && 1 << v143 > v150.i32[1])
          {
            if (v128 > 5)
            {
              v152 = 0;
            }
            else if (((1 << v128) & 5) != 0)
            {
              v152 = (v144 >> 9) & 1;
            }
            else
            {
              v152 = ((1 << v128) & 0xA) != 0 ? (v144 >> 8) & 1 : ((unsigned __int32)v150.i32[0] >> 6) & 1;
            }
            if (v128 >= 4)
              v153 = (v128 - 4) < 2 && ((unsigned __int32)v150.i32[1] >> 6) & 1;
            else
              v153 = (v144 >> 7) & 1;
            if (v128 > 5)
              v154 = 0;
            else
              v154 = ((1 << v128) & 0x3A) != 0 ? ((unsigned __int32)v150.i32[0] >> 5) & 1 : (v144 >> 8) & 1;
            switch((int)v128)
            {
              case 0:
                v155 = (v144 >> 10) & 1;
                break;
              case 1:
              case 3:
              case 4:
              case 5:
                v155 = ((unsigned __int32)v150.i32[1] >> 5) & 1;
                break;
              case 2:
                v155 = (v144 >> 6) & 1;
                break;
              default:
                v155 = 0;
                break;
            }
            v156 = 1 << v142;
            v157 = 16 * v139;
            v158 = v150.i8[0] & 0x1F | (((v139 >> 2) & 1) << 7) | (v152 << 6) | (32 * v154);
            v159 = v153 << 6;
            do
            {
              v160 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v158) | 1u)];
              v161 = v158 & 0xF0;
              v158 -= v161 != (v160 & 0xF0);
            }
            while (v161 != (v160 & 0xF0));
            v162 = v159 | v157 & 0x80 | v150.i8[4] & 0x1F | (32 * v155);
            do
            {
              v163 = color_unquant_to_uquant_tables[512 * v133 + ((2 * v162) | 1u)];
              v164 = v162 & 0xF0;
              v162 -= v164 != (v163 & 0xF0);
            }
            while (v164 != (v163 & 0xF0));
            v165.i32[0] = v160 & 0x1F;
            v165.i32[1] = v163 & 0xFFFFFF1F;
            v166 = vsub_f32(vsub_f32(v148, vmul_n_f32(vcvt_f32_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&v150 & 0xFFFFFFE0FFFFFFE0), v165)), v140)), v134);
            v166.f32[0] = *(float *)&v114.i32[3]
                        + (float)((float)((float)((float)(*(float *)v7.i32 - *(float *)v114.i32) + v166.f32[0])
                                        + v166.f32[1])
                                * 0.33333);
            v167 = fmaxf(v166.f32[0], 0.0);
            v168 = v166.f32[0] <= 1000000000.0 ? v167 : *(float *)"(knN";
            v169 = (int)(float)((float)(v138 * v168) + 0.5);
            if (v156 > v169)
              break;
          }
        }
        if (++v128 == 5)
        {
          v170 = 0;
          v223 = v52;
          v222.i32[2] = 0;
          v222.i64[0] = 0;
          v221 = 0.0;
          v220 = 0;
          do
          {
            v171 = *(float *)&v223.i32[v170];
            v172 = fmaxf(v171, 0.0);
            if (v171 <= 65020.0)
              v173 = v172;
            else
              v173 = *(float *)"";
            *(float *)&v223.i32[v170] = v173;
            v174 = (float)(v173 * 0.0019531) + 0.5;
            v222.i32[v170] = (int)v174;
            *(float *)((char *)&v220 + v170 * 4) = (float)(int)v174 * 512.0;
            ++v170;
          }
          while (v170 != 3);
          v175 = 0;
          v176 = *(float *)&v223.i32[3]
               + (float)((float)((float)((float)(*(float *)&v220 - *(float *)v223.i32)
                                       + (float)(*((float *)&v220 + 1) - *(float *)&v223.i32[1]))
                               + (float)(v221 - *(float *)&v223.i32[2]))
                       * 0.33333);
          v177 = (float)(v176 * 0.0019531) + 0.5;
          if (v176 <= 0.0)
            v177 = 0.5;
          v178 = 127.49;
          if (v176 <= 65020.0)
            v178 = v177;
          v217 = vorr_s8(vand_s8(*(int8x8_t *)v222.i8, (int8x8_t)0x7F0000003FLL), (int8x8_t)0x80000000C0);
          v218 = v222.i8[8] & 0x7F | 0x80;
          v219 = (2 * v222.i32[0]) & 0x80 | (int)v178 & 0x7F;
          v179 = &color_unquant_to_uquant_tables[512 * v133];
          do
          {
            v180 = v217.i32[v175];
            do
            {
              v181 = v179[(2 * v180) | 1];
              v182 = v180 & 0xF0;
              v180 -= v182 != (v181 & 0xF0);
            }
            while (v182 != (v181 & 0xF0));
            a2[v175++] = v181;
          }
          while (v175 != 4);
          return 7;
        }
      }
      v197 = v144 >> 9;
      v198 = v169 >> 6;
      if ((_DWORD)v128 == 4)
        LOBYTE(v198) = (int)v144 >> 7;
      if ((_DWORD)v128 == 1)
      {
        v199 = v144 >> 10;
      }
      else
      {
        LOBYTE(v197) = v169 >> 5;
        v199 = v198;
      }
      if ((_DWORD)v128 == 2)
        v200 = v169 >> 7;
      else
        v200 = v144 >> 6;
      v201 = (int)(float)((float)(v138 * v168) + 0.5) & 0x1F | (v200 << 7) | (32 * (v197 & 1)) & 0xBF | ((v199 & 1) << 6);
      v202 = &color_unquant_to_uquant_tables[512 * v133];
      do
      {
        v203 = v202[(2 * v201) | 1];
        v204 = v201 & 0xF0;
        v201 -= v204 != (v203 & 0xF0);
      }
      while (v204 != (v203 & 0xF0));
      *a2 = v146;
      a2[1] = v160;
      a2[2] = v163;
      v8 = 7;
      a2[3] = v203;
      return v8;
    case 8:
      v207 = v16;
      v210 = v15;
      if (a3 > 0x12)
      {
        v8 = 0;
        v205 = 1.0e30;
        if (a3 != 19)
          goto LABEL_182;
      }
      else
      {
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v216, &v215, a3, v15, v16))
        {
          v223 = 0uLL;
          v222 = 0uLL;
          rgba_delta_unpack(&v223, &v222, v216, v215);
          v54 = vsubq_f32(v210, vcvtq_f32_s32(v223));
          v55 = vsubq_f32(v207, vcvtq_f32_s32(v222));
          v56 = (int8x16_t)vaddq_f32(vmulq_f32(v54, v54), vmulq_f32(v55, v55));
          *(float32x2_t *)v56.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL), *(float32x2_t *)v56.i8);
          LODWORD(v205) = vpadd_f32(*(float32x2_t *)v56.i8, *(float32x2_t *)v56.i8).u32[0];
          v8 = 9;
        }
        else
        {
          v8 = 0;
          v205 = 1.0e30;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v214, &v213, a3, v210, v207))
        {
          v223 = 0uLL;
          v222 = 0uLL;
          rgba_delta_unpack(&v223, &v222, v214, v213);
          v16 = v207;
          v15 = v210;
          v183 = vsubq_f32(v210, vcvtq_f32_s32(v223));
          v184 = vsubq_f32(v207, vcvtq_f32_s32(v222));
          v185 = (int8x16_t)vaddq_f32(vmulq_f32(v183, v183), vmulq_f32(v184, v184));
          *(float32x2_t *)v185.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v185, v185, 8uLL), *(float32x2_t *)v185.i8);
          v186 = vpadd_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8).f32[0];
          if (v186 < v205)
          {
            v215 = v213;
            v216 = v214;
            v8 = 9;
            v205 = v186;
          }
        }
        else
        {
          v16 = v207;
          v15 = v210;
        }
      }
      if (try_quantize_rgb_blue_contract(&v214, &v213, a3, v15, v16))
      {
        v223 = 0uLL;
        v222 = 0uLL;
        rgba_unpack((__n128 *)&v223, (__n128 *)&v222, (int32x4_t)v214, (int32x4_t)v213);
        v16 = v207;
        v15 = v210;
        v187 = vsubq_f32(v210, vcvtq_f32_s32(v223));
        v188 = vsubq_f32(v207, vcvtq_f32_s32(v222));
        v189 = (int8x16_t)vaddq_f32(vmulq_f32(v187, v187), vmulq_f32(v188, v188));
        *(float32x2_t *)v189.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v189, v189, 8uLL), *(float32x2_t *)v189.i8);
        v190 = vpadd_f32(*(float32x2_t *)v189.i8, *(float32x2_t *)v189.i8).f32[0];
        if (v190 < v205)
        {
          v215 = v213;
          v216 = v214;
          v8 = 8;
          v205 = v190;
        }
      }
      else
      {
        v16 = v207;
        v15 = v210;
      }
LABEL_182:
      quantize_rgb(&v214, &v213, a3, v15, v16);
      v223 = 0uLL;
      v222 = 0uLL;
      rgba_unpack((__n128 *)&v223, (__n128 *)&v222, (int32x4_t)v214, (int32x4_t)v213);
      v191 = vsubq_f32(v210, vcvtq_f32_s32(v223));
      v192 = vsubq_f32(v207, vcvtq_f32_s32(v222));
      v193 = (int8x16_t)vaddq_f32(vmulq_f32(v191, v191), vmulq_f32(v192, v192));
      *(float32x2_t *)v193.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v193, v193, 8uLL), *(float32x2_t *)v193.i8);
      if (vpadd_f32(*(float32x2_t *)v193.i8, *(float32x2_t *)v193.i8).f32[0] < v205)
      {
        v215 = v213;
        v216 = v214;
        v8 = 8;
      }
      v195 = v215;
      v194 = v216;
      *a2 = v216.i8[0];
      a2[1] = v195.i8[0];
      a2[2] = v194.u8[4];
      a2[3] = v195.u8[4];
      a2[4] = v194.u8[8];
      a2[5] = v195.u8[8];
      return v8;
    case 10:
      v57 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      a2[4] = v57[((float)(v15.f32[3] - (float)(int)(float)(v15.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v15.f32[3] + 0.5))];
      a2[5] = v57[((float)(v16.f32[3] - (float)(int)(float)(v16.f32[3] + 0.5)) >= -0.1) | (2
                                                                                         * (int)(float)(v16.f32[3] + 0.5))];
      quantize_rgbs(a2, a3, a6);
      return 10;
    case 11:
      quantize_hdr_rgb(a2, a3, (float32x4_t)v12, (float32x4_t)v13);
      return 11;
    case 12:
      v58 = v15.f32[3];
      v59 = v16.f32[3];
      v208 = (__n128)v16;
      v211 = (__n128)v15;
      if (a3 > 0x12)
      {
        v8 = 0;
        v206 = 1.0e30;
        if (a3 != 19)
          goto LABEL_108;
      }
      else
      {
        v206 = 1.0e30;
        if (try_quantize_rgb_delta_blue_contract((int8x16_t *)&v216, &v215, a3, v15, v16)
          && try_quantize_alpha_delta((uint64_t)&v216, (uint64_t)&v215, a3, v208, v211))
        {
          v223 = 0uLL;
          v222 = 0uLL;
          rgba_delta_unpack(&v223, &v222, v216, v215);
          v60 = vsubq_f32((float32x4_t)v211, vcvtq_f32_s32(v223));
          v61 = vsubq_f32((float32x4_t)v208, vcvtq_f32_s32(v222));
          v62 = (int8x16_t)vaddq_f32(vmulq_f32(v60, v60), vmulq_f32(v61, v61));
          *(float32x2_t *)v62.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), *(float32x2_t *)v62.i8);
          LODWORD(v206) = vpadd_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8).u32[0];
          v8 = 13;
          v63 = (float32x4_t)v208;
          v64 = (float32x4_t)v211;
        }
        else
        {
          v8 = 0;
          v63 = (float32x4_t)v208;
          v64 = (float32x4_t)v211;
        }
        if (try_quantize_rgb_delta((int8x16_t *)&v214, &v213, a3, v64, v63)
          && try_quantize_alpha_delta((uint64_t)&v214, (uint64_t)&v213, a3, v211, v208))
        {
          v223 = 0uLL;
          v222 = 0uLL;
          rgba_delta_unpack(&v223, &v222, v214, v213);
          v16 = (float32x4_t)v208;
          v15 = (float32x4_t)v211;
          v115 = vsubq_f32((float32x4_t)v211, vcvtq_f32_s32(v223));
          v116 = vsubq_f32((float32x4_t)v208, vcvtq_f32_s32(v222));
          v117 = (int8x16_t)vaddq_f32(vmulq_f32(v115, v115), vmulq_f32(v116, v116));
          *(float32x2_t *)v117.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL), *(float32x2_t *)v117.i8);
          v118 = vpadd_f32(*(float32x2_t *)v117.i8, *(float32x2_t *)v117.i8).f32[0];
          if (v118 < v206)
          {
            v215 = v213;
            v216 = v214;
            v8 = 13;
            v206 = v118;
          }
        }
        else
        {
          v16 = (float32x4_t)v208;
          v15 = (float32x4_t)v211;
        }
      }
      if (try_quantize_rgb_blue_contract(&v214, &v213, a3, v15, v16))
      {
        v119 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
        v214.i32[3] = v119[((float)(v59 - (float)(int)(float)(v59 + 0.5)) >= -0.1) | (2 * (int)(float)(v59 + 0.5))];
        v213.i32[3] = v119[((float)(v58 - (float)(int)(float)(v58 + 0.5)) >= -0.1) | (2 * (int)(float)(v58 + 0.5))];
        v223 = 0uLL;
        v222 = 0uLL;
        rgba_unpack((__n128 *)&v223, (__n128 *)&v222, (int32x4_t)v214, (int32x4_t)v213);
        v16 = (float32x4_t)v208;
        v15 = (float32x4_t)v211;
        v120 = vsubq_f32((float32x4_t)v211, vcvtq_f32_s32(v223));
        v121 = vsubq_f32((float32x4_t)v208, vcvtq_f32_s32(v222));
        v122 = (int8x16_t)vaddq_f32(vmulq_f32(v120, v120), vmulq_f32(v121, v121));
        *(float32x2_t *)v122.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), *(float32x2_t *)v122.i8);
        v123 = vpadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v122.i8).f32[0];
        if (v123 < v206)
        {
          v215 = v213;
          v216 = v214;
          v8 = 12;
          v206 = v123;
        }
      }
      else
      {
        v16 = (float32x4_t)v208;
        v15 = (float32x4_t)v211;
      }
LABEL_108:
      quantize_rgb(&v214, &v213, a3, v15, v16);
      v124 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      v214.i32[3] = v124[((float)(v58 - (float)(int)(float)(v58 + 0.5)) >= -0.1) | (2 * (int)(float)(v58 + 0.5))];
      v213.i32[3] = v124[((float)(v59 - (float)(int)(float)(v59 + 0.5)) >= -0.1) | (2 * (int)(float)(v59 + 0.5))];
      v223 = 0uLL;
      v222 = 0uLL;
      rgba_unpack((__n128 *)&v223, (__n128 *)&v222, (int32x4_t)v214, (int32x4_t)v213);
      v125 = vsubq_f32((float32x4_t)v211, vcvtq_f32_s32(v223));
      v126 = vsubq_f32((float32x4_t)v208, vcvtq_f32_s32(v222));
      v127 = (int8x16_t)vaddq_f32(vmulq_f32(v125, v125), vmulq_f32(v126, v126));
      *(float32x2_t *)v127.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL), *(float32x2_t *)v127.i8);
      if (vpadd_f32(*(float32x2_t *)v127.i8, *(float32x2_t *)v127.i8).f32[0] < v206)
      {
        v215 = v213;
        v216 = v214;
        v8 = 12;
      }
      v225.val[1] = v215;
      v225.val[0] = (int8x16_t)v216;
      *(_QWORD *)a2 = vqtbl2q_s8(v225, (int8x16_t)xmmword_188235E00).u64[0];
      return v8;
    case 14:
      v65 = vmul_f32((float32x2_t)vzip2_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), (float32x2_t)vdup_n_s32(0x3B7F00FFu));
      v66 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v67 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v65, v66), (int8x8_t)v66, (int8x8_t)vmaxnm_f32(v65, 0));
      v68 = vcvt_s32_f32(vadd_f32(v67, (float32x2_t)0x3F0000003F000000));
      v69 = vcge_f32(vsub_f32(v67, vcvt_f32_s32(v68)), (float32x2_t)vdup_n_s32(0xBDCCCCCD));
      v70 = &color_unquant_to_uquant_tables[512 * (unint64_t)(a3 - 4)];
      a2[6] = v70[2 * v68.i32[1] - v69.i32[1]];
      a2[7] = v70[2 * v68.i32[0] - v69.i32[0]];
      quantize_hdr_rgb(a2, a3, (float32x4_t)v12, (float32x4_t)v13);
      return 14;
    case 15:
      v209 = *(float *)&v12.i32[3];
      v212 = *(float *)&v13.i32[3];
      quantize_hdr_rgb(a2, a3, (float32x4_t)v12, (float32x4_t)v13);
      v71 = 0.5;
      v72 = v209 + 0.5;
      if (v209 <= 0.0)
        v72 = 0.5;
      if (v212 > 0.0)
        v71 = v212 + 0.5;
      v73 = 65280.0;
      if (v209 > 65280.0)
        v72 = 65280.0;
      v74 = (int)v72;
      if (v212 <= 65280.0)
        v73 = v71;
      v75 = (int)v73;
      v76 = a3 - 4;
      v77 = -3;
      v78 = 256;
      v79 = 2;
      v80 = 0x80;
      while (1)
      {
        v81 = (int)((0x80u >> v79) + v74) >> (v77 + 9);
        v82 = color_unquant_to_uquant_tables[512 * v76 + ((2 * (v78 & 0x80 | v81 & 0x7F)) | 1u)];
        if (((v78 ^ v82) & 0x80) == 0)
        {
          v83 = ((int)((0x80u >> v79) + v75) >> (v77 + 9)) - (v81 & 0xFFFFFF80 | v82 & 0x7F);
          v84 = 0x20u >> v79;
          if (v83 >= (signed int)-(0x20u >> v79) && v83 < v84)
          {
            v86 = (v81 >> 7 << (v77 + 7)) | v80 & 0x80 | v83 & (2 * v84 - 1);
            v87 = color_unquant_to_uquant_tables[512 * v76 + 1 + 2 * v86];
            if (((v86 ^ v87) & quantize_hdr_alpha(float,float,unsigned char *,quant_method)::testbits[v79]) == 0)
              break;
          }
        }
        --v79;
        v80 -= 64;
        v78 -= 128;
        v107 = __CFADD__(v77++, 1);
        if (v107)
        {
          v88 = &color_unquant_to_uquant_tables[512 * v76];
          a2[6] = v88[((uint64_t)(v74 + 256) >> 8) | 0x101];
          LOBYTE(v87) = v88[((uint64_t)(v75 + 256) >> 8) | 0x101];
          goto LABEL_186;
        }
      }
      a2[6] = v82;
LABEL_186:
      a2[7] = v87;
      return 15;
    default:
      return v8;
  }
}

