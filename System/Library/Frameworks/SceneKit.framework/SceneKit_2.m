void C3DEffectSlotSetImageTransform(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererContextExecuteSlotTextureProxy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_OWORD **)(a1 + 64);
  if (a2)
  {
    if (!v12)
    {
      v12 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
      *(_QWORD *)(a1 + 64) = v12;
    }
    v13 = *a2;
    v14 = a2[1];
    v15 = a2[3];
    v12[2] = a2[2];
    v12[3] = v15;
    *v12 = v13;
    v12[1] = v14;
  }
  else
  {
    if (!v12)
      return;
    C3DMatrix4x4MakeIdentity((uint64_t)v12);
  }
  __PostParentDidChangeNotification(a1, 0, 0);
}

void C3DEffectSlotSetSRGB(uint64_t a1, int a2)
{
  __int16 v2;
  __int16 v3;

  v2 = *(_WORD *)(a1 + 48);
  if (((((v2 & 0x400) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v3 = 1024;
    else
      v3 = 0;
    *(_WORD *)(a1 + 48) = v2 & 0xFBFF | v3;
    __PostParentDidChangeNotification(a1, 0, 0);
  }
}

char *C3DEffectPropertyGetNameStr(unsigned int a1)
{
  if (a1 > 0x10)
    return 0;
  else
    return off_1EA5A10D0[a1];
}

__CFString *_C3DEffectCommonProfileCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  unsigned int LightingModel;
  const __CFString *v4;
  unsigned int IsPerPixelLit;
  unsigned int IsOpaque;
  unsigned int TransparencyMode;
  uint64_t i;
  int v9;
  uint64_t EffectSlot;
  uint64_t v11;
  __CFString *v12;
  _BOOL4 HasImageOrTexture;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DEffectCommonProfile %p :"), a1);
  LightingModel = C3DEffectCommonProfileGetLightingModel(a1);
  if (LightingModel > 6)
    v4 = CFSTR("SCNLightingModelInvalid");
  else
    v4 = off_1EA5A1158[LightingModel];
  CFStringAppendFormat(Mutable, 0, CFSTR(" lightingModel:%@"), v4);
  IsPerPixelLit = C3DEffectCommonProfileIsPerPixelLit(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR(" perPixelLit:%d"), IsPerPixelLit);
  IsOpaque = C3DEffectCommonProfileIsOpaque(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR(" isOpaque:%d"), IsOpaque);
  TransparencyMode = C3DEffectCommonProfileGetTransparencyMode(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR(" transparencyMode:%d"), TransparencyMode);
  for (i = 0; i != 21; ++i)
  {
    v9 = C3DEffectCommonProfileGetLightingModel(a1);
    if (C3DEffectCommonProfileIsEffectPropertyEnabledForLightingModel(v9, (char)i))
    {
      EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, (char)i, 0);
      if (EffectSlot)
      {
        v11 = EffectSlot;
        v12 = _C3DEffectCommonProfileCFCopyDebugDescription_propertyNames[i];
        HasImageOrTexture = C3DEffectSlotHasImageOrTexture(EffectSlot);
        CFStringAppendFormat(Mutable, 0, CFSTR("[%@] texture:%d xform:%d"), v12, HasImageOrTexture, *(_QWORD *)(v11 + 64) != 0);
      }
    }
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t _C3DEffectCommonProfileInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const __CFString *Value;
  int v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  _BOOL4 v60;
  int v61;
  _BOOL4 v62;
  int v63;
  const __CFNumber *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  BOOL v73;
  const __CFNumber *v96;
  uint64_t EffectSlot;
  const __CFNumber *v98;
  uint64_t v99;
  const __CFNumber *v100;
  uint64_t v101;
  const __CFNumber *v102;
  uint64_t v103;
  const __CFNumber *v104;
  uint64_t v105;
  const __CFNumber *v106;
  uint64_t v107;
  const __CFNumber *v108;
  uint64_t v109;
  const __CFNumber *v110;
  uint64_t v111;
  const __CFNumber *v112;
  uint64_t v113;
  const __CFNumber *v114;
  uint64_t v115;
  const __CFNumber *v116;
  uint64_t v117;
  const __CFNumber *v118;
  uint64_t v119;
  const __CFNumber *v120;
  uint64_t v121;
  const void *v122;
  const void *v123;
  const void *v124;
  const void *v125;
  const void *v126;
  uint64_t v127;
  CFTypeRef *v128;
  _BOOL4 v129;
  uint64_t v130;
  _BOOL4 v131;
  __int16 v132;
  char v133;
  _BOOL4 v134;
  const void *v135;
  _BOOL4 v136;
  int v138;
  int v139;
  int v140;
  int v141;
  _BOOL4 v142;
  _BOOL4 v143;
  _BOOL4 v144;
  _BOOL4 v145;
  _BOOL4 v146;
  _BOOL4 v147;
  _BOOL4 v148;
  _BOOL4 v149;
  _BOOL4 v150;
  _BOOL4 v151;
  _BOOL4 v152;
  int v153;
  double valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  if ((C3DCFTypeIsDictionary() & 1) != 0)
  {
    if (!a2 && (v22 = scn_default_log(), os_log_type_enabled(v22, OS_LOG_TYPE_FAULT)))
    {
      _C3DTextureSamplerInitWithPropertyList_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
      if (!CFSTR("function"))
      {
LABEL_10:
        v30 = scn_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
          C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
    else if (!CFSTR("function"))
    {
      goto LABEL_10;
    }
    if (!a1)
    {
      v38 = scn_default_log();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
        C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("function"));
    if (Value)
    {
      v47 = C3DEffectCommonProfileLightingModelForName(Value);
      C3DEffectCommonProfileSetLightingModel(a1, v47);
      v48 = 1;
    }
    else
    {
      v58 = scn_default_log();
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        _C3DEffectCommonProfileInitWithPropertyList_cold_1();
      v48 = 0;
    }
    v59 = __DeserializeColor(a1, a2, CFSTR("emissionColor")) & v48;
    v60 = __DeserializeColor(a1, a2, CFSTR("ambientColor"));
    v61 = v59 & v60 & __DeserializeColor(a1, a2, CFSTR("diffuseColor"));
    v62 = __DeserializeColor(a1, a2, CFSTR("filterColor"));
    v63 = v61 & v62 & __DeserializeColor(a1, a2, CFSTR("specularColor"));
    valuePtr = 0.0;
    v64 = (const __CFNumber *)CFDictionaryGetValue(a3, CFSTR("versionNumber"));
    if (v64)
      CFNumberGetValue(v64, kCFNumberDoubleType, &valuePtr);
    if (valuePtr >= 0.12)
      v63 &= __DeserializeColor(a1, a2, CFSTR("reflectiveColor"));
    v152 = __DeserializeColor(a1, a2, CFSTR("transparentColor"));
    v151 = __DeserializeColor(a1, a2, CFSTR("normalColor"));
    v150 = __DeserializeUVSet(a1, a2, CFSTR("emissionUVSet"));
    v149 = __DeserializeUVSet(a1, a2, CFSTR("ambientUVSet"));
    v148 = __DeserializeUVSet(a1, a2, CFSTR("diffuseUVSet"));
    v147 = __DeserializeUVSet(a1, a2, CFSTR("filterUVSet"));
    v146 = __DeserializeUVSet(a1, a2, CFSTR("specularUVSet"));
    v145 = __DeserializeUVSet(a1, a2, CFSTR("reflectiveUVSet"));
    v144 = __DeserializeUVSet(a1, a2, CFSTR("transparentUVSet"));
    v143 = __DeserializeUVSet(a1, a2, CFSTR("normalUVSet"));
    v142 = __DeserializeUVSet(a1, a2, CFSTR("shininessUVSet"));
    v141 = __DeserializeTextureSampler(a1, a2, CFSTR("emissionTextureSampler"));
    v140 = __DeserializeTextureSampler(a1, a2, CFSTR("ambientTextureSampler"));
    v139 = __DeserializeTextureSampler(a1, a2, CFSTR("diffuseTextureSampler"));
    v138 = __DeserializeTextureSampler(a1, a2, CFSTR("specularTextureSampler"));
    v65 = __DeserializeTextureSampler(a1, a2, CFSTR("reflectiveTextureSampler"));
    v66 = __DeserializeTextureSampler(a1, a2, CFSTR("transparentTextureSampler"));
    v67 = __DeserializeTextureSampler(a1, a2, CFSTR("filterTextureSampler"));
    v68 = __DeserializeTextureSampler(a1, a2, CFSTR("normalTextureSampler"));
    v69 = __DeserializeTextureSampler(a1, a2, CFSTR("shininessTextureSampler"));
    v70 = __DeserializeFloat(a1, a2, CFSTR("shininess"));
    v71 = __DeserializeFloat(a1, a2, CFSTR("reflectivity"));
    v72 = __DeserializeFloat(a1, a2, CFSTR("transparency"));
    if (v63)
      v73 = !v152;
    else
      v73 = 1;
    v57 = !v73
       && v151
       && v150
       && v149
       && v148
       && v147
       && v146
       && v145
       && v144
       && v143
       && v142
       && v141 != 0
       && v140 != 0
       && v139 != 0
       && v138 != 0
       && v65 != 0
       && v66 != 0
       && v67 != 0
       && v68 != 0
       && v69 != 0
       && v70 != 0
       && v71 != 0
       && v72 != 0;
    if (__DeserializeFloat(a1, a2, CFSTR("fresnelExponent")))
    {
      if (__DeserializeFloat(a1, a2, CFSTR("indexOfRefraction")))
        v57 = v57;
      else
        v57 = 0;
    }
    v96 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ambientIntensity"));
    if (v96)
    {
      v153 = 0;
      CFNumberGetValue(v96, kCFNumberFloatType, &v153);
      EffectSlot = C3DEffectCommonProfileGetEffectSlot(a1, 1, 1);
      *(_DWORD *)(EffectSlot + 72) = v153;
    }
    v98 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("diffuseIntensity"));
    if (v98)
    {
      v153 = 0;
      CFNumberGetValue(v98, kCFNumberFloatType, &v153);
      v99 = C3DEffectCommonProfileGetEffectSlot(a1, 2, 1);
      *(_DWORD *)(v99 + 72) = v153;
    }
    v100 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("specularIntensity"));
    if (v100)
    {
      v153 = 0;
      CFNumberGetValue(v100, kCFNumberFloatType, &v153);
      v101 = C3DEffectCommonProfileGetEffectSlot(a1, 3, 1);
      *(_DWORD *)(v101 + 72) = v153;
    }
    v102 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("emissionIntensity"));
    if (v102)
    {
      v153 = 0;
      CFNumberGetValue(v102, kCFNumberFloatType, &v153);
      v103 = C3DEffectCommonProfileGetEffectSlot(a1, 0, 1);
      *(_DWORD *)(v103 + 72) = v153;
    }
    v104 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("multiplyIntensity"));
    if (v104)
    {
      v153 = 0;
      CFNumberGetValue(v104, kCFNumberFloatType, &v153);
      v105 = C3DEffectCommonProfileGetEffectSlot(a1, 6, 1);
      *(_DWORD *)(v105 + 72) = v153;
    }
    v106 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("transparentIntensity"));
    if (v106)
    {
      v153 = 0;
      CFNumberGetValue(v106, kCFNumberFloatType, &v153);
      v107 = C3DEffectCommonProfileGetEffectSlot(a1, 5, 1);
      *(_DWORD *)(v107 + 72) = v153;
    }
    v108 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("normalIntensity"));
    if (v108)
    {
      v153 = 0;
      CFNumberGetValue(v108, kCFNumberFloatType, &v153);
      v109 = C3DEffectCommonProfileGetEffectSlot(a1, 7, 1);
      *(_DWORD *)(v109 + 72) = v153;
    }
    v110 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ambientOcclusionIntensity"));
    if (v110)
    {
      v153 = 0;
      CFNumberGetValue(v110, kCFNumberFloatType, &v153);
      v111 = C3DEffectCommonProfileGetEffectSlot(a1, 8, 1);
      *(_DWORD *)(v111 + 72) = v153;
    }
    v112 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("selfIlluminationIntensity"));
    if (v112)
    {
      v153 = 0;
      CFNumberGetValue(v112, kCFNumberFloatType, &v153);
      v113 = C3DEffectCommonProfileGetEffectSlot(a1, 9, 1);
      *(_DWORD *)(v113 + 72) = v153;
    }
    v114 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("metalness"));
    if (v114)
    {
      v153 = 0;
      CFNumberGetValue(v114, kCFNumberFloatType, &v153);
      v115 = C3DEffectCommonProfileGetEffectSlot(a1, 10, 1);
      *(_DWORD *)(v115 + 72) = v153;
    }
    v116 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("roughness"));
    if (v116)
    {
      v153 = 0;
      CFNumberGetValue(v116, kCFNumberFloatType, &v153);
      v117 = C3DEffectCommonProfileGetEffectSlot(a1, 11, 1);
      *(_DWORD *)(v117 + 72) = v153;
    }
    v118 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("displacementIntensity"));
    if (v118)
    {
      v153 = 0;
      CFNumberGetValue(v118, kCFNumberFloatType, &v153);
      v119 = C3DEffectCommonProfileGetEffectSlot(a1, 15, 1);
      *(_DWORD *)(v119 + 72) = v153;
    }
    v120 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("reflectiveIntensity"));
    if (v120)
    {
      v153 = 0;
      CFNumberGetValue(v120, kCFNumberFloatType, &v153);
      v121 = C3DEffectCommonProfileGetEffectSlot(a1, 4, 1);
      *(_DWORD *)(v121 + 72) = v153;
    }
    v122 = CFDictionaryGetValue(a2, CFSTR("double sided"));
    v123 = CFDictionaryGetValue(a2, CFSTR("cullMode"));
    v124 = CFDictionaryGetValue(a2, CFSTR("avoidsOverlighting"));
    v125 = CFDictionaryGetValue(a2, CFSTR("locksAmbientWithDiffuse"));
    v126 = CFDictionaryGetValue(a2, CFSTR("litPerPixel"));
    v127 = *(_QWORD *)(a1 + 16);
    v128 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (v127)
    {
      if (v122)
        v129 = CFEqual(v122, (CFTypeRef)*MEMORY[0x1E0C9AE50]) != 0;
      else
        v129 = 0;
      C3DMaterialSetDoubleSided(v127, v129);
      v130 = *(_QWORD *)(a1 + 16);
      if (v123)
        v131 = CFEqual(v123, CFSTR("cullFront")) != 0;
      else
        v131 = 0;
      C3DMaterialSetCullMode(v130, v131);
    }
    if (v124)
      v132 = CFEqual(v124, *v128) != 0;
    else
      v132 = 0;
    *(_WORD *)(a1 + 194) = *(_WORD *)(a1 + 194) & 0xFFFE | v132;
    if (v125)
      v133 = CFEqual(v125, *v128) != 0;
    else
      v133 = C3DWasLinkedBeforeMajorOSYear2014() ^ 1;
    *(_BYTE *)(a1 + 193) = v133;
    if (v126)
    {
      v134 = CFEqual(v126, *v128) != 0;
      C3DEffectCommonProfileSetPerPixelLit(a1, v134);
    }
    v135 = CFDictionaryGetValue(a2, CFSTR("transparencyMode"));
    if (v135)
      v136 = CFEqual(v135, CFSTR("A_ONE")) == 0;
    else
      v136 = 0;
    C3DEffectCommonProfileSetTransparencyMode(a1, v136);
    return v57;
  }
  v49 = scn_default_log();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    _C3DEffectCommonProfileInitWithPropertyList_cold_5(v49, v50, v51, v52, v53, v54, v55, v56);
  return 0;
}

__CFDictionary *_C3DEffectCommonProfileCopyPropertyList(uint64_t *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFAllocator *v22;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v24;
  uint64_t v25;
  int CullMode;
  __CFString **v27;
  const void **v28;
  int LightingModel;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __CFString *v38;
  uint64_t v39;
  const __CFString *v40;
  int Property;
  unsigned int v42;
  const void *v43;
  NSObject *v44;
  uint64_t v45;
  float v46;
  char *NameStr;
  size_t v48;
  CFStringRef v49;
  uint64_t i;
  const __CFString *v51;
  int v52;
  int v53;
  uint64_t Image;
  const void *v55;
  NSObject *v56;
  CFDictionaryRef *EntryID;
  __int32 v58;
  NSObject *v59;
  const __CFAllocator *v60;
  CFNumberRef v61;
  CFNumberRef v62;
  uint64_t EffectSlot;
  int v64;
  CFNumberRef v65;
  uint64_t j;
  const __CFString *v67;
  int v68;
  uint64_t TextureSampler;
  const void *v70;
  NSObject *v71;
  const void *v72;
  const void *v73;
  uint64_t k;
  const __CFString *v75;
  int v76;
  float FloatProperty;
  __CFString **v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __CFString *v88;
  float32x4_t cStr;
  _QWORD v91[9];
  _QWORD v92[5];
  _QWORD v93[9];
  _QWORD v94[9];
  _QWORD v95[8];
  uint8_t v96[4];
  uint64_t v97;
  uint8_t v98[4];
  uint64_t v99;
  uint8_t v100[4];
  _QWORD v101[3];

  *(_QWORD *)((char *)&v101[1] + 4) = *MEMORY[0x1E0C80C00];
  v95[0] = CFSTR("emissionColor");
  v95[1] = CFSTR("ambientColor");
  v95[2] = CFSTR("diffuseColor");
  v95[3] = CFSTR("specularColor");
  v95[4] = CFSTR("reflectiveColor");
  v95[5] = CFSTR("transparentColor");
  v95[6] = CFSTR("filterColor");
  v95[7] = CFSTR("normalColor");
  v94[0] = CFSTR("emissionImageID");
  v94[1] = CFSTR("ambientImageID");
  v94[2] = CFSTR("diffuseImageID");
  v94[3] = CFSTR("specularImageID");
  v94[4] = CFSTR("reflectiveImageID");
  v94[5] = CFSTR("transparentImageID");
  v94[6] = CFSTR("filterImageID");
  v94[7] = CFSTR("normalImageID");
  v94[8] = CFSTR("shininessImageID");
  v93[0] = CFSTR("emissionUVSet");
  v93[1] = CFSTR("ambientUVSet");
  v93[2] = CFSTR("diffuseUVSet");
  v93[3] = CFSTR("specularUVSet");
  v93[4] = CFSTR("reflectiveUVSet");
  v93[5] = CFSTR("transparentUVSet");
  v93[6] = CFSTR("filterUVSet");
  v93[7] = CFSTR("normalUVSet");
  v93[8] = CFSTR("shininessUVSet");
  v92[0] = CFSTR("shininess");
  v92[1] = CFSTR("reflectivity");
  v92[2] = CFSTR("transparency");
  v92[3] = CFSTR("indexOfRefraction");
  v92[4] = CFSTR("fresnelExponent");
  v91[0] = CFSTR("emissionTextureSampler");
  v91[1] = CFSTR("ambientTextureSampler");
  v91[2] = CFSTR("diffuseTextureSampler");
  v91[3] = CFSTR("specularTextureSampler");
  v91[4] = CFSTR("reflectiveTextureSampler");
  v91[5] = CFSTR("transparentTextureSampler");
  v91[6] = CFSTR("filterTextureSampler");
  v91[7] = CFSTR("normalTextureSampler");
  v91[8] = CFSTR("shininessTextureSampler");
  if (!cf)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v24 = Mutable;
    v25 = cf[2];
    if (v25)
    {
      if (C3DMaterialIsDoubleSided(cf[2]))
        CFDictionarySetValue(v24, CFSTR("double sided"), (const void *)*MEMORY[0x1E0C9AE50]);
      CullMode = C3DMaterialGetCullMode(v25);
      v27 = kC3DCullBackValue;
      if (CullMode)
        v27 = kC3DCullFrontValue;
      CFDictionarySetValue(v24, CFSTR("cullMode"), *v27);
    }
    if ((*((_WORD *)cf + 97) & 1) != 0)
      CFDictionarySetValue(v24, CFSTR("avoidsOverlighting"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (*((_BYTE *)cf + 193))
      CFDictionarySetValue(v24, CFSTR("locksAmbientWithDiffuse"), (const void *)*MEMORY[0x1E0C9AE50]);
    if ((*((_WORD *)cf + 97) & 2) != 0)
    {
      v28 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)cf + 192))
        v28 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(v24, CFSTR("litPerPixel"), *v28);
    }
    LightingModel = C3DEffectCommonProfileGetLightingModel((uint64_t)cf);
    if (!CFSTR("function"))
    {
      v30 = scn_default_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
        C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    v38 = C3DEffectCommonProfileNameForLightingModel(LightingModel);
    if (v38)
      CFDictionarySetValue(v24, CFSTR("function"), v38);
    v88 = v38;
    v39 = 0;
    while (1)
    {
      v40 = (const __CFString *)v95[v39];
      Property = __GetProperty(v40);
      if (Property != -1)
        break;
LABEL_40:
      if (++v39 == 8)
      {
        for (i = 0; i != 9; ++i)
        {
          v51 = (const __CFString *)v94[i];
          v52 = __GetProperty(v51);
          if (v52 != -1)
          {
            v53 = v52;
            Image = C3DEffectCommonProfileGetImage((uint64_t)cf, v52);
            if (Image)
            {
              v55 = (const void *)Image;
              if (!v51)
              {
                v56 = scn_default_log();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
                  _C3DEffectCommonProfileCopyPropertyList_cold_2(v100, v101, v56);
              }
              EntryID = C3DLibraryGetEntryID(a2, v55);
              if (EntryID)
              {
                v58 = (int)EntryID;
                if ((unint64_t)EntryID >= 0x7FFFFFFF)
                {
                  v59 = scn_default_log();
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_FAULT))
                    _C3DEffectCommonProfileCopyPropertyList_cold_3(v98, &v99, v59);
                }
                cStr.i32[0] = v58;
                v60 = CFGetAllocator(v24);
                v61 = CFNumberCreate(v60, kCFNumberIntType, &cStr);
                if (v61)
                {
                  v62 = v61;
                  CFDictionarySetValue(v24, v51, v61);
                  CFRelease(v62);
                }
              }
            }
            EffectSlot = C3DEffectCommonProfileGetEffectSlot((uint64_t)cf, v53, 0);
            if (EffectSlot)
            {
              v64 = *(_DWORD *)(EffectSlot + 76);
              if (v64 == -2)
              {
                if (*(_BYTE *)(EffectSlot + 50) == 4)
                  v64 = -1;
                else
                  v64 = 0;
              }
              cStr.i64[0] = v64;
              if (v64 != -1)
              {
                v65 = CFNumberCreate(0, kCFNumberLongType, &cStr);
                CFDictionarySetValue(v24, (const void *)v93[i], v65);
                CFRelease(v65);
              }
            }
          }
        }
        for (j = 0; j != 9; ++j)
        {
          v67 = (const __CFString *)v91[j];
          v68 = __GetProperty(v67);
          if (v68 != -1)
          {
            TextureSampler = C3DEffectCommonProfileGetTextureSampler((uint64_t)cf, v68);
            if (TextureSampler)
            {
              v70 = (const void *)TextureSampler;
              if (!v67)
              {
                v71 = scn_default_log();
                if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
                  _C3DEffectCommonProfileCopyPropertyList_cold_2((uint8_t *)&cStr, (uint64_t *)((char *)cStr.i64 + 4), v71);
              }
              v72 = (const void *)C3DCopyPropertyList(v70, 0, 0, a4);
              if (v72)
              {
                v73 = v72;
                CFDictionarySetValue(v24, v67, v72);
                CFRelease(v73);
              }
            }
          }
        }
        for (k = 0; k != 5; ++k)
        {
          v75 = (const __CFString *)v92[k];
          v76 = __GetProperty(v75);
          if (v76 != -1)
          {
            FloatProperty = C3DEffectCommonProfileGetFloatProperty((float *)cf, v76);
            C3DSerializeFloatAsNumber(v24, v75, FloatProperty);
          }
        }
        if (*((_BYTE *)cf + 180))
          v78 = kC3DTransparency_RGB_ZEROValue;
        else
          v78 = kC3DTransparency_A_ONEValue;
        CFDictionarySetValue(v24, CFSTR("transparencyMode"), *v78);
        if (!v88)
        {
          CFRelease(v24);
          return 0;
        }
        return v24;
      }
    }
    v42 = Property;
    cStr = *(float32x4_t *)C3DEffectCommonProfileGetColor((uint64_t)cf, Property);
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToNonLinear(&cStr);
    v43 = (const void *)C3DColor4CopyPropertyList((uint64_t)&cStr);
    if (!v40 && (v44 = scn_default_log(), os_log_type_enabled(v44, OS_LOG_TYPE_FAULT)))
    {
      _C3DEffectCommonProfileCopyPropertyList_cold_2(v96, &v97, v44);
      if (!v43)
        goto LABEL_34;
    }
    else if (!v43)
    {
LABEL_34:
      v45 = C3DEffectCommonProfileGetEffectSlot((uint64_t)cf, v42, 0);
      if (v45)
      {
        v46 = *(float *)(v45 + 72);
        if (v46 != 1.0)
        {
          if (v42 == 6)
          {
            strcpy((char *)&cStr, "multiplyIntensity");
          }
          else
          {
            NameStr = C3DEffectPropertyGetNameStr(v42);
            v48 = strlen(NameStr);
            __strcpy_chk();
            strcpy((char *)&cStr + v48, "Intensity");
          }
          v49 = CFStringCreateWithCString(0, (const char *)&cStr, 0x8000100u);
          C3DSerializeFloatAsNumber(v24, v49, v46);
          CFRelease(v49);
        }
      }
      goto LABEL_40;
    }
    CFDictionarySetValue(v24, v40, v43);
    CFRelease(v43);
    goto LABEL_34;
  }
  v79 = scn_default_log();
  if (os_log_type_enabled(v79, OS_LOG_TYPE_FAULT))
    _C3DGeometryFinalizeDeserialization_cold_4(v79, v80, v81, v82, v83, v84, v85, v86);
  return 0;
}

uint64_t _C3DEffectCommonProfileFinalizeDeserialization(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  result = __DeserializeImage(a1, a2, a3, CFSTR("emissionImageID"), a4);
  if ((_DWORD)result)
  {
    result = __DeserializeImage(a1, a2, a3, CFSTR("ambientImageID"), a4);
    if ((_DWORD)result)
    {
      result = __DeserializeImage(a1, a2, a3, CFSTR("diffuseImageID"), a4);
      if ((_DWORD)result)
      {
        result = __DeserializeImage(a1, a2, a3, CFSTR("specularImageID"), a4);
        if ((_DWORD)result)
        {
          result = __DeserializeImage(a1, a2, a3, CFSTR("reflectiveImageID"), a4);
          if ((_DWORD)result)
          {
            result = __DeserializeImage(a1, a2, a3, CFSTR("transparentImageID"), a4);
            if ((_DWORD)result)
            {
              result = __DeserializeImage(a1, a2, a3, CFSTR("normalImageID"), a4);
              if ((_DWORD)result)
              {
                result = __DeserializeImage(a1, a2, a3, CFSTR("shininessImageID"), a4);
                if ((_DWORD)result)
                  return __DeserializeImage(a1, a2, a3, CFSTR("filterImageID"), a4);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

const void *_C3DEffectCommonProfileFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  const void *result;
  const void *v16;
  unsigned int v17;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = 0;
  do
  {
    result = (const void *)C3DEffectCommonProfileGetImage(a1, (char)v14);
    if (result)
    {
      v16 = result;
      C3DLibraryAddEntry(a2, result);
      result = C3DFillLibraryForSerialization(v16, a2, a3);
    }
    v17 = v14++;
  }
  while (v17 < 0x14);
  return result;
}

BOOL __DeserializeColor(uint64_t a1, CFDictionaryRef theDict, const __CFString *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *Value;
  int Property;
  _BOOL8 result;
  NSObject *v33;
  NSObject *v34;
  float32x4_t v35;

  v35 = 0uLL;
  if (!theDict && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a1)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  Value = CFDictionaryGetValue(theDict, key);
  if (!Value)
    return 1;
  if (!C3DColor4InitWithPropertyList((uint64_t)&v35, (uint64_t)Value, 0, 0))
  {
    v33 = scn_default_log();
    result = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    __DeserializeColor_cold_2();
    return 0;
  }
  if (C3DLinearRenderingIsEnabled())
    C3DColor4ConvertToLinear(&v35);
  Property = __GetProperty(key);
  if (Property != -1)
  {
    C3DEffectCommonProfileSetColor(a1, Property, v35.f32);
    return 1;
  }
  v34 = scn_default_log();
  result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __DeserializeColor_cold_1();
    return 0;
  }
  return result;
}

BOOL __DeserializeUVSet(uint64_t a1, CFDictionaryRef theDict, const __CFString *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFNumber *Value;
  int Property;
  _BOOL8 result;
  NSObject *v33;
  NSObject *v34;
  uint64_t valuePtr;

  valuePtr = 0;
  if (!theDict && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a1)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (!Value)
    return 1;
  if (!CFNumberGetValue(Value, kCFNumberLongType, &valuePtr))
  {
    v33 = scn_default_log();
    result = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    __DeserializeUVSet_cold_1();
    return 0;
  }
  Property = __GetProperty(key);
  if (Property != -1)
  {
    C3DEffectCommonProfileSetUVSet(a1, Property, valuePtr);
    return 1;
  }
  v34 = scn_default_log();
  result = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (result)
  {
    __DeserializeUVSet_cold_2();
    return 0;
  }
  return result;
}

uint64_t __DeserializeTextureSampler(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  int Property;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *Value;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  NSObject *v35;

  Property = __GetProperty(a3);
  if (!a2 && (v7 = scn_default_log(), os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v7, v8, v9, v10, v11, v12, v13, v14);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v15 = scn_default_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_6:
  if (!a1)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  Value = CFDictionaryGetValue(a2, a3);
  if (!Value)
    return 1;
  v32 = (uint64_t)Value;
  v33 = (const void *)C3DTextureSamplerCreate();
  if (C3DInitWithPropertyList(v33, v32, 0, 0))
  {
    C3DEffectCommonProfileSetTextureSampler(a1, Property, v33);
    v34 = 1;
  }
  else
  {
    v35 = scn_default_log();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      __DeserializeTextureSampler_cold_1();
    v34 = 0;
  }
  CFRelease(v33);
  return v34;
}

uint64_t __DeserializeFloat(uint64_t a1, CFDictionaryRef theDict, const __CFString *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int Property;
  NSObject *v32;
  NSObject *v33;
  float valuePtr;

  valuePtr = 0.0;
  if (!theDict && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a1)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  result = (uint64_t)CFDictionaryGetValue(theDict, key);
  if (!result)
    return result;
  if (!CFNumberGetValue((CFNumberRef)result, kCFNumberFloatType, &valuePtr))
  {
    v32 = scn_default_log();
    result = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    __DeserializeUVSet_cold_1();
    return 0;
  }
  Property = __GetProperty(key);
  if (Property != -1)
  {
    C3DEffectCommonProfileSetFloatProperty(a1, Property, valuePtr);
    return 1;
  }
  v33 = scn_default_log();
  result = os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    __DeserializeUVSet_cold_2();
    return 0;
  }
  return result;
}

uint64_t __GetProperty(const __CFString *a1)
{
  CFRange v4;
  CFRange v5;
  CFRange v6;
  CFRange v7;
  CFRange v8;
  CFRange v9;
  CFRange v10;
  CFRange v11;
  CFRange v12;
  CFRange v13;
  CFRange v14;

  v4.length = CFStringGetLength(CFSTR("emission"));
  v4.location = 0;
  if (CFStringCompareWithOptions(a1, CFSTR("emission"), v4, 0))
  {
    v5.length = CFStringGetLength(CFSTR("ambient"));
    v5.location = 0;
    if (CFStringCompareWithOptions(a1, CFSTR("ambient"), v5, 0))
    {
      v6.length = CFStringGetLength(CFSTR("diffuse"));
      v6.location = 0;
      if (CFStringCompareWithOptions(a1, CFSTR("diffuse"), v6, 0))
      {
        v7.length = CFStringGetLength(CFSTR("specular"));
        v7.location = 0;
        if (CFStringCompareWithOptions(a1, CFSTR("specular"), v7, 0))
        {
          v8.length = CFStringGetLength(CFSTR("reflective"));
          v8.location = 0;
          if (CFStringCompareWithOptions(a1, CFSTR("reflective"), v8, 0))
          {
            v9.length = CFStringGetLength(CFSTR("transparent"));
            v9.location = 0;
            if (CFStringCompareWithOptions(a1, CFSTR("transparent"), v9, 0))
            {
              v10.length = CFStringGetLength(CFSTR("filter"));
              v10.location = 0;
              if (CFStringCompareWithOptions(a1, CFSTR("filter"), v10, 0))
              {
                v11.length = CFStringGetLength(CFSTR("normal"));
                v11.location = 0;
                if (CFStringCompareWithOptions(a1, CFSTR("normal"), v11, 0))
                {
                  v12.length = CFStringGetLength(CFSTR("ambientOcclusion"));
                  v12.location = 0;
                  if (CFStringCompareWithOptions(a1, CFSTR("ambientOcclusion"), v12, 0))
                  {
                    v13.length = CFStringGetLength(CFSTR("selfIllumination"));
                    v13.location = 0;
                    if (CFStringCompareWithOptions(a1, CFSTR("selfIllumination"), v13, 0))
                    {
                      v14.length = CFStringGetLength(CFSTR("shininess"));
                      v14.location = 0;
                      if (CFStringCompareWithOptions(a1, CFSTR("shininess"), v14, 0))
                      {
                        if (CFStringCompare(a1, CFSTR("reflectivity"), 0)
                          && CFStringCompare(a1, CFSTR("reflectivity"), 0))
                        {
                          if (CFStringCompare(a1, CFSTR("transparency"), 0))
                          {
                            if (CFStringCompare(a1, CFSTR("indexOfRefraction"), 0))
                            {
                              if (CFStringCompare(a1, CFSTR("fresnelExponent"), 0))
                                return -1;
                              else
                                return 20;
                            }
                            else
                            {
                              return 19;
                            }
                          }
                          else
                          {
                            return 18;
                          }
                        }
                        else
                        {
                          return 17;
                        }
                      }
                      else
                      {
                        return 16;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t __DeserializeImage(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, const __CFString *key, CFErrorRef *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFNumber *Value;
  uint64_t v35;
  uint64_t TypeID;
  const void *RemappedID;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *Entry;
  const void *v48;
  int Property;
  NSObject *v50;
  uint64_t result;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFErrorRef MalformedDocumentError;
  int valuePtr;

  if (!theDict && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    _C3DTextureSamplerInitWithPropertyList_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  if (!a1)
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DEnginePipelineGetRenderComponentsForRenderPass_cold_2(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, key);
  if (!Value)
    return 1;
  valuePtr = 0;
  if (!CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
  {
    v50 = scn_default_log();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      __DeserializeImage_cold_1();
      if (!a5)
        return 1;
    }
    else if (!a5)
    {
      return 1;
    }
    if (!*a5)
      *a5 = C3DSceneSourceCreateMalformedDocumentError(0);
    return 1;
  }
  v35 = valuePtr;
  if (!valuePtr)
    return 1;
  TypeID = C3DImageGetTypeID();
  RemappedID = (const void *)C3DLibraryGetRemappedID(a2, v35, TypeID);
  if (!RemappedID)
  {
    v38 = scn_default_log();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
      __DeserializeImage_cold_3(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  v46 = (void *)C3DImageGetTypeID();
  Entry = C3DLibraryGetEntry(a2, v46, RemappedID);
  if (Entry)
  {
    v48 = Entry;
    Property = __GetProperty(key);
    if (Property != -1)
      C3DEffectCommonProfileSetImage(a1, Property, v48);
    return 1;
  }
  v52 = scn_default_log();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    __DeserializeImage_cold_2(v52, v53, v54, v55, v56, v57, v58, v59);
    if (!a5)
      return 0;
  }
  else if (!a5)
  {
    return 0;
  }
  if (*a5)
    return 0;
  MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
  result = 0;
  *a5 = MalformedDocumentError;
  return result;
}

__CFArray *_C3DEffectCommonProfileCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  const CFDictionaryKeyCallBacks *v44;
  const CFDictionaryValueCallBacks *v45;
  __CFDictionary *v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  __CFArray *v50;
  const CFDictionaryKeyCallBacks *v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  const CFDictionaryValueCallBacks *v56;
  __CFDictionary *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  __CFDictionary *v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  __CFArray *v65;
  __CFDictionary *v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  const CFDictionaryValueCallBacks *v70;
  __CFDictionary *v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  const CFDictionaryKeyCallBacks *v75;
  __CFDictionary *v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  __CFDictionary *v80;
  CFNumberRef v81;
  CFNumberRef v82;
  CFNumberRef v83;
  const CFDictionaryKeyCallBacks *v84;
  __CFDictionary *v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  __CFDictionary *v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  __CFDictionary *v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  __CFDictionary *v97;
  CFNumberRef v98;
  CFNumberRef v99;
  CFNumberRef v100;
  uint64_t v102;
  int v103;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 32;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("emission"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 40;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("ambient"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 48;
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v12, CFSTR("name"), CFSTR("diffuse"));
  CFDictionarySetValue(v12, CFSTR("type"), v13);
  CFDictionarySetValue(v12, CFSTR("address"), v15);
  CFDictionarySetValue(v12, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v15);
  CFRelease(v13);
  v16 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 56;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v19 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v16, CFSTR("name"), CFSTR("specular"));
  CFDictionarySetValue(v16, CFSTR("type"), v17);
  CFDictionarySetValue(v16, CFSTR("address"), v19);
  CFDictionarySetValue(v16, CFSTR("semantic"), v18);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v18);
  CFRelease(v16);
  CFRelease(v19);
  CFRelease(v17);
  v20 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 64;
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v23 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v20, CFSTR("name"), CFSTR("reflective"));
  CFDictionarySetValue(v20, CFSTR("type"), v21);
  CFDictionarySetValue(v20, CFSTR("address"), v23);
  CFDictionarySetValue(v20, CFSTR("semantic"), v22);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  v24 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 72;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v24, CFSTR("name"), CFSTR("transparent"));
  CFDictionarySetValue(v24, CFSTR("type"), v25);
  CFDictionarySetValue(v24, CFSTR("address"), v27);
  CFDictionarySetValue(v24, CFSTR("semantic"), v26);
  CFArrayAppendValue(Mutable, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  v28 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 80;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v31 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v28, CFSTR("name"), CFSTR("filter"));
  CFDictionarySetValue(v28, CFSTR("type"), v29);
  CFDictionarySetValue(v28, CFSTR("address"), v31);
  CFDictionarySetValue(v28, CFSTR("semantic"), v30);
  CFArrayAppendValue(Mutable, v28);
  CFRelease(v30);
  CFRelease(v28);
  CFRelease(v31);
  CFRelease(v29);
  v32 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 88;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("normal"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  v36 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 112;
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v39 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v36, CFSTR("name"), CFSTR("metalness"));
  CFDictionarySetValue(v36, CFSTR("type"), v37);
  CFDictionarySetValue(v36, CFSTR("address"), v39);
  CFDictionarySetValue(v36, CFSTR("semantic"), v38);
  CFArrayAppendValue(Mutable, v36);
  CFRelease(v38);
  CFRelease(v36);
  CFRelease(v39);
  CFRelease(v37);
  v40 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 120;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("roughness"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = v3;
  v45 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v46 = CFDictionaryCreateMutable(0, 4, v44, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 128;
  v47 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v49 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v46, CFSTR("name"), CFSTR("displacement"));
  CFDictionarySetValue(v46, CFSTR("type"), v47);
  CFDictionarySetValue(v46, CFSTR("address"), v49);
  CFDictionarySetValue(v46, CFSTR("semantic"), v48);
  v50 = Mutable;
  CFArrayAppendValue(Mutable, v46);
  CFRelease(v48);
  CFRelease(v46);
  CFRelease(v49);
  CFRelease(v47);
  v51 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v52 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v45);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 136;
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v55 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v52, CFSTR("name"), CFSTR("clearCoat"));
  CFDictionarySetValue(v52, CFSTR("type"), v53);
  CFDictionarySetValue(v52, CFSTR("address"), v55);
  CFDictionarySetValue(v52, CFSTR("semantic"), v54);
  CFArrayAppendValue(v50, v52);
  CFRelease(v54);
  CFRelease(v52);
  CFRelease(v55);
  CFRelease(v53);
  v56 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v57 = CFDictionaryCreateMutable(0, 4, v51, MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 144;
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v60 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v57, CFSTR("name"), CFSTR("clearCoatRoughness"));
  CFDictionarySetValue(v57, CFSTR("type"), v58);
  CFDictionarySetValue(v57, CFSTR("address"), v60);
  CFDictionarySetValue(v57, CFSTR("semantic"), v59);
  CFArrayAppendValue(v50, v57);
  CFRelease(v59);
  CFRelease(v57);
  CFRelease(v60);
  CFRelease(v58);
  v61 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v56);
  v103 = 2;
  valuePtr = 5;
  v102 = a1 + 152;
  v62 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v63 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v64 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v61, CFSTR("name"), CFSTR("clearCoatNormal"));
  CFDictionarySetValue(v61, CFSTR("type"), v62);
  CFDictionarySetValue(v61, CFSTR("address"), v64);
  CFDictionarySetValue(v61, CFSTR("semantic"), v63);
  v65 = v50;
  CFArrayAppendValue(v50, v61);
  CFRelease(v63);
  CFRelease(v61);
  CFRelease(v64);
  CFRelease(v62);
  v66 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v56);
  v103 = 0;
  valuePtr = 1;
  v102 = a1 + 160;
  v67 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v68 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v69 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v66, CFSTR("name"), CFSTR("shininess"));
  CFDictionarySetValue(v66, CFSTR("type"), v67);
  CFDictionarySetValue(v66, CFSTR("address"), v69);
  CFDictionarySetValue(v66, CFSTR("semantic"), v68);
  CFArrayAppendValue(v50, v66);
  CFRelease(v68);
  CFRelease(v66);
  CFRelease(v69);
  CFRelease(v67);
  v70 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v71 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = a1 + 164;
  v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v73 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v74 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v71, CFSTR("name"), CFSTR("transparency"));
  CFDictionarySetValue(v71, CFSTR("type"), v72);
  CFDictionarySetValue(v71, CFSTR("address"), v74);
  CFDictionarySetValue(v71, CFSTR("semantic"), v73);
  CFArrayAppendValue(v50, v71);
  CFRelease(v73);
  CFRelease(v71);
  CFRelease(v74);
  CFRelease(v72);
  v75 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v76 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v70);
  v103 = 0;
  valuePtr = 1;
  v102 = a1 + 168;
  v77 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v78 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v79 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v76, CFSTR("name"), CFSTR("indexOfRefraction"));
  CFDictionarySetValue(v76, CFSTR("type"), v77);
  CFDictionarySetValue(v76, CFSTR("address"), v79);
  CFDictionarySetValue(v76, CFSTR("semantic"), v78);
  CFArrayAppendValue(v50, v76);
  CFRelease(v78);
  CFRelease(v76);
  CFRelease(v79);
  CFRelease(v77);
  v80 = CFDictionaryCreateMutable(0, 4, v75, v70);
  v103 = 0;
  valuePtr = 1;
  v102 = a1 + 172;
  v81 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v82 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v83 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v80, CFSTR("name"), CFSTR("fresnelExponent"));
  CFDictionarySetValue(v80, CFSTR("type"), v81);
  CFDictionarySetValue(v80, CFSTR("address"), v83);
  CFDictionarySetValue(v80, CFSTR("semantic"), v82);
  CFArrayAppendValue(v50, v80);
  CFRelease(v82);
  CFRelease(v80);
  CFRelease(v83);
  CFRelease(v81);
  v84 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v85 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v70);
  v103 = 0;
  valuePtr = 3;
  v102 = a1 + 193;
  v86 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v87 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v88 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v85, CFSTR("name"), CFSTR("locksAmbientWithDiffuse"));
  CFDictionarySetValue(v85, CFSTR("type"), v86);
  CFDictionarySetValue(v85, CFSTR("address"), v88);
  CFDictionarySetValue(v85, CFSTR("semantic"), v87);
  CFArrayAppendValue(v65, v85);
  CFRelease(v87);
  CFRelease(v85);
  CFRelease(v88);
  CFRelease(v86);
  v89 = CFDictionaryCreateMutable(0, 4, v84, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 2;
  v102 = a1 + 24;
  v90 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v91 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v92 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v89, CFSTR("name"), CFSTR("lightingModel"));
  CFDictionarySetValue(v89, CFSTR("type"), v90);
  CFDictionarySetValue(v89, CFSTR("address"), v92);
  CFDictionarySetValue(v89, CFSTR("semantic"), v91);
  CFArrayAppendValue(v65, v89);
  CFRelease(v91);
  CFRelease(v89);
  CFRelease(v92);
  CFRelease(v90);
  v93 = CFDictionaryCreateMutable(0, 4, v84, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 2;
  v102 = a1 + 180;
  v94 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v95 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v96 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v93, CFSTR("name"), CFSTR("transparencyMode"));
  CFDictionarySetValue(v93, CFSTR("type"), v94);
  CFDictionarySetValue(v93, CFSTR("address"), v96);
  CFDictionarySetValue(v93, CFSTR("semantic"), v95);
  CFArrayAppendValue(v65, v93);
  CFRelease(v95);
  CFRelease(v93);
  CFRelease(v96);
  CFRelease(v94);
  v97 = CFDictionaryCreateMutable(0, 4, v84, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 2;
  v102 = a1 + 184;
  v98 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v99 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v100 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v97, CFSTR("name"), CFSTR("imagesCount"));
  CFDictionarySetValue(v97, CFSTR("type"), v98);
  CFDictionarySetValue(v97, CFSTR("address"), v100);
  CFDictionarySetValue(v97, CFSTR("semantic"), v99);
  CFArrayAppendValue(v65, v97);
  CFRelease(v99);
  CFRelease(v97);
  CFRelease(v100);
  CFRelease(v98);
  return v65;
}

void _C3DEffectCommonProfileSetValue(uint64_t a1, float *a2, float *a3, size_t a4)
{
  float *v8;
  float v9;
  float v10;
  int HashCode;
  int v12;
  BOOL v13;

  v8 = (float *)(a1 + 164);
  v9 = 0.0;
  v10 = 0.0;
  if ((float *)(a1 + 164) == a2)
  {
    v9 = *a2;
    v10 = *a3;
  }
  HashCode = C3DEffectCommonProfileGetHashCode(a1);
  memcpy(a2, a3, a4);
  v12 = C3DEffectCommonProfileGetHashCode(a1);
  if (v8 != a2)
  {
    if (HashCode == v12)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13 = v9 != 1.0 || v10 == 1.0;
  if (!v13 || v9 != 1.0 && v10 == 1.0)
  {
    *(_WORD *)(a1 + 194) &= ~0x80u;
LABEL_14:
    __PostCommonProfileDidChangeNotification(a1);
  }
LABEL_15:
  C3DMaterialTouchValueStorageModificationCount(*(_QWORD *)(a1 + 16));
}

void _C3DEffectSlotCFFinalize(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (void *)a1[8];
  if (v2)
    free(v2);
  v3 = (const void *)a1[5];
  if (v3)
  {
    CFRelease(v3);
    a1[5] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
}

CFStringRef _C3DEffectSlotCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DEffectSlot>"));
}

CFStringRef _C3DEffectSlotCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DEffectSlot>"));
}

void _C3DEffectSlotSetValue(uint64_t a1, void *__s1, void *__s2, size_t __n)
{
  uint64_t CommonProfile;
  __int16 v9;

  if (memcmp(__s1, __s2, __n))
  {
    memcpy(__s1, __s2, __n);
    CommonProfile = _C3DEffectSlotGetCommonProfile(a1);
    if (CommonProfile)
    {
      if ((void *)(a1 + 40) == __s2)
      {
        v9 = -193;
      }
      else
      {
        if ((void *)(a1 + 16) != __s2)
        {
LABEL_9:
          __PostCommonProfileDidChangeNotification(CommonProfile);
          return;
        }
        v9 = -129;
      }
      *(_WORD *)(CommonProfile + 194) &= v9;
      goto LABEL_9;
    }
  }
}

__CFArray *_C3DEffectSlotCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  __int16 v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  uint64_t v45;
  int v46;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = 0;
  valuePtr = 13;
  v45 = a1 + 16;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v45);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("color"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  if (!*(_BYTE *)(a1 + 48))
  {
    v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = 2;
    valuePtr = 5;
    v45 = a1 + 40;
    v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
    v10 = CFNumberCreate(0, kCFNumberLongType, &v45);
    CFDictionarySetValue(v7, CFSTR("name"), CFSTR("image"));
    CFDictionarySetValue(v7, CFSTR("type"), v8);
    CFDictionarySetValue(v7, CFSTR("address"), v10);
    CFDictionarySetValue(v7, CFSTR("semantic"), v9);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v9);
    CFRelease(v7);
    CFRelease(v10);
    CFRelease(v8);
  }
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = 2;
  valuePtr = 5;
  v45 = a1 + 56;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
  v14 = CFNumberCreate(0, kCFNumberLongType, &v45);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("sampler"));
  CFDictionarySetValue(v11, CFSTR("type"), v12);
  CFDictionarySetValue(v11, CFSTR("address"), v14);
  CFDictionarySetValue(v11, CFSTR("semantic"), v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  v15 = *(_WORD *)(a1 + 48);
  if (v15 == 1)
  {
    v16 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = 2;
    valuePtr = 5;
    v45 = a1 + 40;
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
    v19 = CFNumberCreate(0, kCFNumberLongType, &v45);
    CFDictionarySetValue(v16, CFSTR("name"), CFSTR("texture"));
    CFDictionarySetValue(v16, CFSTR("type"), v17);
    CFDictionarySetValue(v16, CFSTR("address"), v19);
    CFDictionarySetValue(v16, CFSTR("semantic"), v18);
    CFArrayAppendValue(Mutable, v16);
    CFRelease(v18);
    CFRelease(v16);
    CFRelease(v19);
    CFRelease(v17);
    v15 = *(_WORD *)(a1 + 48);
  }
  if (v15 == 3)
  {
    v20 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = 2;
    valuePtr = 5;
    v45 = a1 + 40;
    v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
    v23 = CFNumberCreate(0, kCFNumberLongType, &v45);
    CFDictionarySetValue(v20, CFSTR("name"), CFSTR("mtltexture"));
    CFDictionarySetValue(v20, CFSTR("type"), v21);
    CFDictionarySetValue(v20, CFSTR("address"), v23);
    CFDictionarySetValue(v20, CFSTR("semantic"), v22);
    CFArrayAppendValue(Mutable, v20);
    CFRelease(v22);
    CFRelease(v20);
    CFRelease(v23);
    CFRelease(v21);
    v15 = *(_WORD *)(a1 + 48);
  }
  if (v15 == 2)
  {
    v24 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = 2;
    valuePtr = 5;
    v45 = a1 + 40;
    v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
    v27 = CFNumberCreate(0, kCFNumberLongType, &v45);
    CFDictionarySetValue(v24, CFSTR("name"), CFSTR("imageProxy"));
    CFDictionarySetValue(v24, CFSTR("type"), v25);
    CFDictionarySetValue(v24, CFSTR("address"), v27);
    CFDictionarySetValue(v24, CFSTR("semantic"), v26);
    CFArrayAppendValue(Mutable, v24);
    CFRelease(v26);
    CFRelease(v24);
    CFRelease(v27);
    CFRelease(v25);
    v15 = *(_WORD *)(a1 + 48);
  }
  if (v15 == 4)
  {
    v28 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v46 = 2;
    valuePtr = 5;
    v45 = a1 + 40;
    v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
    v31 = CFNumberCreate(0, kCFNumberLongType, &v45);
    CFDictionarySetValue(v28, CFSTR("name"), CFSTR("precomputedLightingEnvironment"));
    CFDictionarySetValue(v28, CFSTR("type"), v29);
    CFDictionarySetValue(v28, CFSTR("address"), v31);
    CFDictionarySetValue(v28, CFSTR("semantic"), v30);
    CFArrayAppendValue(Mutable, v28);
    CFRelease(v30);
    CFRelease(v28);
    CFRelease(v31);
    CFRelease(v29);
  }
  v32 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = 2;
  valuePtr = 5;
  v45 = a1 + 64;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v45);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("transforms"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  v36 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = 0;
  valuePtr = 2;
  v45 = a1 + 76;
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
  v39 = CFNumberCreate(0, kCFNumberLongType, &v45);
  CFDictionarySetValue(v36, CFSTR("name"), CFSTR("uvSet"));
  CFDictionarySetValue(v36, CFSTR("type"), v37);
  CFDictionarySetValue(v36, CFSTR("address"), v39);
  CFDictionarySetValue(v36, CFSTR("semantic"), v38);
  CFArrayAppendValue(Mutable, v36);
  CFRelease(v38);
  CFRelease(v36);
  CFRelease(v39);
  CFRelease(v37);
  v40 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v46 = 0;
  valuePtr = 1;
  v45 = a1 + 72;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v46);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v45);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("intensity"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  return Mutable;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::CompositePass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 272, 16, 0);
  C3D::CompositePass::CompositePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::HDRAverageLuminancePass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::HDRAverageLuminancePass::HDRAverageLuminancePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::HDRFrameLuminancePass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::HDRFrameLuminancePass::HDRFrameLuminancePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::DownSampleBloomCoCPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::DownSampleBloomCoCPass::DownSampleBloomCoCPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::GaussianBlurPass *C3D::RenderGraph::createPass<C3D::GaussianBlurPass,C3D::MainPass *&,C3D::GaussianBlurPass::Parameters>(uint64_t a1, C3D::Pass **a2, const Parameters *a3)
{
  C3D::GaussianBlurPass *Aligned;

  Aligned = (C3D::GaussianBlurPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 272, 16, 0);
  C3D::GaussianBlurPass::GaussianBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::GaussianBlurPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::CustomPass *C3D::RenderGraph::createPass<C3D::BloomDownSamplePass,C3D::Pass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::CustomPass *Aligned;

  Aligned = (C3D::CustomPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 144, 8, 0);
  C3D::BloomDownSamplePass::BloomDownSamplePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CustomPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::BloomUpSamplePass,C3D::Pass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::BloomUpSamplePass::BloomUpSamplePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::DOFDownsampleCoCPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::DOFDownsampleCoCPass::DOFDownsampleCoCPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::DOFBlurCoCXPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::DOFBlurCoCXPass::DOFBlurCoCXPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::DOFBlurCoCYPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::DOFBlurCoCYPass::DOFBlurCoCYPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::DOFFinalBlurPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::DOFFinalBlurPass::DOFFinalBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::MBTileMaxPass *C3D::RenderGraph::createPass<C3D::MBTileMaxPass,C3D::MainPass *&>(uint64_t a1, C3D::Pass **a2)
{
  C3D::MBTileMaxPass *Aligned;

  Aligned = (C3D::MBTileMaxPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 120, 8, 0);
  C3D::MBTileMaxPass::MBTileMaxPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::MBTileMaxPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::MBNeighborMaxPass *C3D::RenderGraph::createPass<C3D::MBNeighborMaxPass,C3D::MainPass *&,BOOL>(uint64_t a1, C3D::Pass **a2, char *a3)
{
  C3D::MBNeighborMaxPass *Aligned;

  Aligned = (C3D::MBNeighborMaxPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::MBNeighborMaxPass::MBNeighborMaxPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::MBNeighborMaxPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::MBFinalBlurPass,C3D::MainPass *&,C3D::PostProcessPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::MBFinalBlurPass::MBFinalBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void C3D::PostProcessPassesComputeUniforms(uint64_t a1, uint64_t a2, C3D::DrawNodesPass *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,__int128 a28,uint64_t a29,float a30,float AverageGray,float a32,float a33,float a34,float ExposureAdaptationDuration,int8x8_t a36,float BloomThreshold,int a38,float BloomIntensity,int a40,float a41,float VignettingPower,float VignettingIntensity,float ColorFringeStrength,float ColorFringeIntensity,float Saturation,float Contrast,float a48,float a49,uint64_t a50,float32x2_t a51,float a52,int a53,int a54,unsigned int a55,unsigned int a56,unint64_t a57,float DepthOfFieldIntensity,int a59,float a60,float MotionBlurIntensity,float GrainIntensity,__int128 a63)
{
  float ARGrainSlice;
  uint64_t a78;
  uint64_t RenderContext;
  void *v74;
  SCNMTLBufferPool *v75;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t v78;
  float WhitePoint;
  float ExposureOffset;
  float ExposureAdaptationDarkeningSpeedFactor;
  float MinimumExposure;
  float MaximumExposure;
  float WhiteBalanceTemperature;
  float WhiteBalanceTint;
  float v86;
  float GrainScale;
  float v88;
  BOOL v89;
  double v90;
  float v91;
  double v92;
  long double v93;
  long double v94;
  __int128 v95;
  float Intensity;
  uint64_t ColorGradingEffectSlot;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  BOOL v102;
  double v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  double v111;
  double v112;
  float v113;
  double v114;
  double v115;
  float v116;
  double v117;
  float FocusDistance;
  float v119;
  float FStop;
  float v121;
  float v122;
  int BladeCount;
  float v124;
  char v125;
  C3D::PassDescriptor *v126;
  uint64_t v127;
  unsigned int v128;
  _WORD *v129;
  float v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  unsigned int FrameIndex;
  unsigned int v136;
  double v137;
  double v138;
  unsigned int v139;
  float v140;
  float ExposureAdaptationBrighteningSpeedFactor;
  float v142;
  float v143;

  a78 = *MEMORY[0x1E0C80C00];
  RenderContext = C3DEngineContextGetRenderContext(a1);
  v74 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v75 = (SCNMTLBufferPool *)-[SCNMTLRenderContext frameConstantBufferPool](RenderContext);
  PointOfView = C3DEngineContextGetPointOfView(a1);
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    if (Camera)
    {
      v78 = (uint64_t)Camera;
      WhitePoint = C3DCameraGetWhitePoint((uint64_t)Camera);
      a30 = WhitePoint * C3DCameraGetWhitePoint(v78);
      AverageGray = C3DCameraGetAverageGray(v78);
      ExposureOffset = C3DCameraGetExposureOffset(v78);
      a34 = exp2f(ExposureOffset);
      ExposureAdaptationDuration = C3DCameraGetExposureAdaptationDuration(v78);
      ExposureAdaptationBrighteningSpeedFactor = C3DCameraGetExposureAdaptationBrighteningSpeedFactor(v78);
      ExposureAdaptationDarkeningSpeedFactor = C3DCameraGetExposureAdaptationDarkeningSpeedFactor(v78);
      a36 = vbsl_s8((int8x8_t)vmovn_s64(vcgtq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(ExposureAdaptationDarkeningSpeedFactor), LODWORD(ExposureAdaptationBrighteningSpeedFactor))), (float64x2_t)vdupq_n_s64(0x3F847AE147AE147BuLL))), (int8x8_t)__PAIR64__(LODWORD(ExposureAdaptationDarkeningSpeedFactor), LODWORD(ExposureAdaptationBrighteningSpeedFactor)), (int8x8_t)vdup_n_s32(0x3C23D70Au));
      MinimumExposure = C3DCameraGetMinimumExposure(v78);
      a32 = exp2f(MinimumExposure);
      MaximumExposure = C3DCameraGetMaximumExposure(v78);
      a33 = exp2f(MaximumExposure);
      BloomThreshold = C3DCameraGetBloomThreshold(v78);
      a40 = *(_DWORD *)(a2 + 24);
      a38 = 1056964608;
      BloomIntensity = C3DCameraGetBloomIntensity(v78);
      VignettingPower = C3DCameraGetVignettingPower(v78);
      VignettingIntensity = C3DCameraGetVignettingIntensity(v78);
      ColorFringeStrength = C3DCameraGetColorFringeStrength(v78);
      ColorFringeIntensity = C3DCameraGetColorFringeIntensity(v78);
      Saturation = C3DCameraGetSaturation(v78);
      Contrast = C3DCameraGetContrast(v78);
      WhiteBalanceTemperature = C3DCameraGetWhiteBalanceTemperature(v78);
      a48 = WhiteBalanceTemperature;
      WhiteBalanceTint = C3DCameraGetWhiteBalanceTint(v78);
      a49 = WhiteBalanceTint;
      v86 = floor(-[SCNMTLRenderContext renderTime](RenderContext) * 30.0);
      GrainScale = C3DCameraGetGrainScale(v78);
      if (GrainScale <= 0.0039062)
        v88 = 1.0;
      else
        v88 = 0.0039062 / GrainScale;
      v89 = -[SCNMTLRenderContext contentScaleFactor](RenderContext) <= 1.0;
      v90 = 2.0;
      if (!v89)
        v90 = 1.0;
      v91 = v90 * v88;
      v142 = v91;
      GrainIntensity = C3DCameraGetGrainIntensity(v78);
      v92 = v86;
      v93 = sin(v92 * 0.01);
      *(float *)&v93 = fmin(v93 * 4242.0 - floor(v93 * 4242.0), 1.0);
      v139 = LODWORD(v93);
      v94 = sin(v92 * 0.1 + 0.05);
      *(float *)&v95 = v142;
      *((float *)&v95 + 1) = v142;
      *(float *)&v94 = fmin(v94 * 4242.0 - floor(v94 * 4242.0), 1.0);
      *((_QWORD *)&v95 + 1) = __PAIR64__(LODWORD(v94), v139);
      a63 = v95;
      ARGrainSlice = C3DCameraGetARGrainSlice(v78);
      if (!*(_BYTE *)(a2 + 10))
        BloomIntensity = 0.0;
      if (*(_BYTE *)(a2 + 11))
        MotionBlurIntensity = C3DCameraGetMotionBlurIntensity(v78);
      Intensity = 0.0;
      if (*(_BYTE *)(a2 + 17))
      {
        ColorGradingEffectSlot = C3DCameraGetColorGradingEffectSlot(v78, 0);
        if (ColorGradingEffectSlot)
        {
          v98 = ColorGradingEffectSlot;
          if (C3DEffectSlotHasImageOrTexture(ColorGradingEffectSlot))
            objc_msgSend(v74, "renderResourceForEffectSlot:withEngineContext:didFallbackToDefaultTexture:", v98, a1, 0);
          Intensity = C3DEffectSlotGetIntensity(v98);
        }
      }
      a41 = Intensity;
      if (*(_BYTE *)(a2 + 22))
      {
        v99 = WhiteBalanceTemperature;
        v100 = -5.0;
        if (WhiteBalanceTemperature < -5.0)
          v99 = -5.0;
        v101 = v99 * 0.5;
        v102 = v99 < 5.0;
        v103 = 2.5;
        if (!v102)
          v101 = 2.5;
        v104 = v101;
        if (WhiteBalanceTint >= -5.0)
          v100 = WhiteBalanceTint;
        if (v100 < 5.0)
          v103 = v100 * 0.5;
        v105 = v103;
        v106 = 0.31271 - v104 * dbl_1DD02A1B0[v104 < 0.0];
        v107 = (float)((float)(v106 * -3.0) * v106) + v106 * 2.87 + -0.27509507;
        v108 = v107 + v105 * 0.05;
        v109 = v106 / v108;
        v110 = (float)((float)(1.0 - v106) - v108) / v108;
        v111 = v109;
        v112 = v110;
        v113 = v109 * 0.003 + 0.0136 + v112 * 0.9834;
        a52 = 1.0873 / v113;
        a51 = vdiv_f32((float32x2_t)0x3F8488A43F730132, vcvt_f32_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1DD02A1D0, (float64x2_t)xmmword_1DD02A1C0, v111), (float64x2_t)xmmword_1DD02A1E0, v112)));
      }
      v114 = *(double *)(C3D::DrawNodesPass::getCullingContext(a3) + 4744);
      v115 = *(double *)(C3D::DrawNodesPass::getCullingContext(a3) + 4752);
      v116 = C3DCameraGetFocalLength(v78) / 1000.0;
      v117 = v116 + 0.01;
      FocusDistance = C3DCameraGetFocusDistance(v78);
      if (v117 >= FocusDistance)
        v119 = v117;
      else
        v119 = FocusDistance;
      FStop = C3DCameraGetFStop(v78);
      if (FStop <= 0.0001)
        v121 = 0.0001;
      else
        v121 = FStop;
      v122 = C3DCameraGetAperture(v78) / 1000.0;
      BladeCount = C3DCameraGetBladeCount(v78);
      v124 = (float)((float)(v116 * v122) / (float)(v119 - v116)) / *(float *)a2;
      v125 = *(_BYTE *)C3DCameraGetProjectionInfosPtr(v78);
      v126 = (C3D::PassDescriptor *)C3D::Pass::descriptor(a3);
      v127 = C3D::PassDescriptor::outputAtIndex(v126, 0);
      v129 = (_WORD *)(v127 + 16);
      if ((v125 & 0x20) == 0)
        v129 = (_WORD *)(v127 + 18);
      LOWORD(v128) = *v129;
      v130 = v124 * (float)v128;
      *(float *)&v131 = (v115 - v114) * (float)(v119 * v130) / (v114 * v115);
      *(float *)&v132 = (1.0 - v119 / v114) * v130;
      v140 = *(float *)&v132;
      v143 = *(float *)&v131;
      a57 = __PAIR64__(v132, v131);
      if ((C3DEngineContextGetCoordinatesSystemOptions(a1) & 8) != 0)
      {
        *(float *)&v133 = -v143;
        *((float *)&v133 + 1) = v140 + v143;
        a57 = v133;
      }
      DepthOfFieldIntensity = C3DCameraGetDepthOfFieldIntensity(v78);
      a60 = v121;
      if (BladeCount <= 5)
        v134 = 5;
      else
        v134 = BladeCount;
      a59 = v134;
      if (*(_BYTE *)(a2 + 9))
      {
        a54 = 1015580809;
        FrameIndex = C3DEngineContextGetFrameIndex(a1);
        v136 = FrameIndex + 1;
        v137 = ExposureAdaptationDuration * 60.0;
        if (v137 < 1.0)
          v137 = 1.0;
        v138 = fmin(v137, 240.0);
        if (v138 > (double)v136)
          v138 = (double)v136;
        a55 = FrameIndex % 0xF0;
        a56 = v138;
      }
      SCNMTLBufferPool::allocateAndCopy(v75, &a30, 0x100uLL, (void **)&a28);
      *(_OWORD *)(a2 + 32) = a28;
      *(_QWORD *)(a2 + 48) = a29;
      *(float *)(a2 + 64) = C3DCameraGetAverageGray(v78);
    }
  }
}

void vmesh::SubdivideMidPoint(std::vector<int>::size_type a1, int a2, int a3, std::vector<int> *a4, _QWORD *a5, _QWORD *a6)
{
  int v10;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  std::vector<int>::size_type v15;
  uint64_t v16;
  std::vector<int>::pointer begin;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  std::vector<int>::pointer v34;
  std::vector<int>::pointer v35;
  std::vector<int>::pointer v36;
  std::vector<int>::value_type v37;
  uint64_t v38;
  uint64_t v39;
  std::vector<int>::value_type v40;
  std::vector<int>::value_type v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  std::vector<int>::value_type *v46;
  uint64_t v47;
  int v48;
  int v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  int *v53;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  std::vector<int>::size_type v58;
  uint64_t v59;
  int v60;
  std::vector<int>::value_type __x[2];
  int v62;

  v10 = a2;
  v12 = a2 << (2 * a3);
  std::vector<ClippedCorner>::resize((uint64_t)a6, a3 + 1);
  v13 = (_DWORD *)*a6;
  *v13 = a1;
  v13[1] = v10;
  std::vector<vmesh::Triangle>::resize(a5, v12);
  if (a3 >= 1)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    v56 = a3;
    do
    {
      v57 = v14;
      v58 = a1;
      __x[0] = 0;
      std::vector<int>::resize(a4, (int)a1 + 1, __x);
      v16 = v10;
      if (v10 >= 1)
      {
        begin = a4->__begin_;
        v18 = (int *)(*a5 + 8);
        v19 = v10;
        do
        {
          v20 = *(v18 - 2);
          v21 = *(v18 - 1);
          if (v20 <= v21)
            v22 = *(v18 - 1);
          else
            v22 = *(v18 - 2);
          v24 = *v18;
          v18 += 3;
          v23 = v24;
          ++begin[v22 + 1];
          if (v21 <= v24)
            v21 = v23;
          ++begin[v21 + 1];
          if (v23 > v20)
            v20 = v23;
          ++begin[v20 + 1];
          --v19;
        }
        while (v19);
      }
      if ((int)v15 >= (int)a1)
      {
        a1 = (int)a1;
        v15 = v58;
      }
      else
      {
        a1 = (int)a1;
        v25 = &a4->__begin_[(int)v15];
        v28 = *v25;
        v26 = v25 + 1;
        v27 = v28;
        v29 = (int)v58 - (uint64_t)(int)v15;
        do
        {
          v27 += *v26;
          *v26++ = v27;
          --v29;
        }
        while (v29);
        v15 = v58;
      }
      std::vector<ClippedCorner>::resize((uint64_t)&a4[2], *(a4->__end_ - 1));
      __x[0] = 0;
      std::vector<int>::resize(a4 + 1, a1, __x);
      a1 = v15;
      if (v10 >= 1)
      {
        a1 = v15;
        do
        {
          v30 = 0;
          v31 = v16 - 1;
          v32 = *a5;
          v33 = *a5 + 12 * (v16 - 1);
          *(_QWORD *)__x = *(_QWORD *)v33;
          v62 = *(_DWORD *)(v33 + 8);
          v59 = -1;
          v60 = -1;
          v34 = a4->__begin_;
          v35 = a4[1].__begin_;
          v36 = a4[2].__begin_;
          do
          {
            v37 = __x[v30];
            v38 = v30 + 1;
            v39 = (v30 + 1);
            if (v30 == 2)
              v39 = 0;
            v40 = __x[v39];
            if (v37 <= v40)
              v41 = v40;
            else
              v41 = __x[v30];
            if (v40 < v37)
              v37 = v40;
            v42 = v34[v41];
            v43 = v35[v41];
            v44 = v43 + v42;
            if ((int)v43 >= 1)
            {
              v45 = &v36[2 * v42 + 1];
              while (*(v45 - 1) != v37)
              {
                ++v42;
                v45 += 2;
                if (v42 >= v44)
                  goto LABEL_34;
              }
              *((_DWORD *)&v59 + v30) = *v45;
            }
LABEL_34:
            if (*((_DWORD *)&v59 + v30) == -1)
            {
              if ((int)v44 >= v34[v41 + 1])
                vmesh::SubdivideMidPoint();
              v46 = &v36[2 * (int)v44];
              *v46 = v37;
              v46[1] = a1;
              ++v35[v41];
              *((_DWORD *)&v59 + v30) = a1;
              a1 = (a1 + 1);
            }
            ++v30;
          }
          while (v38 != 3);
          v47 = v32 + 48 * v31;
          *(_QWORD *)v47 = v59;
          v49 = HIDWORD(v59);
          v48 = v60;
          *(_DWORD *)(v47 + 8) = v60;
          v50 = (_DWORD *)(*a5 + 12 * ((4 * v31) | 1));
          v51 = v59;
          *v50 = __x[0];
          v50[1] = v51;
          v50[2] = v48;
          LODWORD(v47) = __x[1];
          v52 = (_DWORD *)(*a5 + 12 * ((4 * v31) | 2));
          *v52 = v51;
          v52[1] = v47;
          v52[2] = v49;
          LODWORD(v47) = v62;
          v53 = (int *)(*a5 + 12 * ((4 * v31) | 3));
          *v53 = v48;
          v53[1] = v49;
          v53[2] = v47;
        }
        while (v16-- > 1);
      }
      v10 *= 4;
      v14 = v57 + 1;
      v55 = (_DWORD *)(*a6 + 8 * (v57 + 1));
      *v55 = a1;
      v55[1] = v10;
    }
    while (v57 + 1 != v56);
  }
}

void std::vector<vmesh::Triangle>::resize(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<vmesh::Triangle>::__append((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v3, __x);
  }
}

float32x4_t vmesh::TriangleMesh::computeNormals(vmesh::TriangleMesh *this, char a2)
{
  float32x4_t result;
  void *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;

  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)this + 48, (int)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4));
  v5 = (void *)*((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7) - (_QWORD)v5;
  if (v6 >= 1)
    bzero(v5, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
  v7 = (int *)*((_QWORD *)this + 9);
  v8 = (int *)*((_QWORD *)this + 10);
  while (v7 != v8)
  {
    v9 = *v7;
    v10 = *(float32x4_t *)(*(_QWORD *)this + 16 * v9);
    v11 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)this + 16 * v7[1]), v10);
    v12 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)this + 16 * v7[2]), v10);
    v13 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v11)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), v13, 0xCuLL);
    *(float32x4_t *)(*((_QWORD *)this + 6) + 16 * v9) = vaddq_f32(*(float32x4_t *)(*((_QWORD *)this + 6) + 16 * v9), v14);
    *(float32x4_t *)(*((_QWORD *)this + 6) + 16 * v7[1]) = vaddq_f32(v14, *(float32x4_t *)(*((_QWORD *)this + 6) + 16 * v7[1]));
    v15 = v7[2];
    v16 = *((_QWORD *)this + 6);
    result = vaddq_f32(v14, *(float32x4_t *)(v16 + 16 * v15));
    *(float32x4_t *)(v16 + 16 * v15) = result;
    v7 += 3;
  }
  if ((a2 & 1) != 0)
  {
    v17 = (float32x4_t *)*((_QWORD *)this + 6);
    v18 = (float32x4_t *)*((_QWORD *)this + 7);
    while (v17 != v18)
    {
      v19 = (int32x4_t)vmulq_f32(*v17, *v17);
      v19.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))).u32[0];
      v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
      v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)));
      result = vmulq_n_f32(*v17, vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]);
      *v17++ = result;
    }
  }
  return result;
}

void vmesh::TriangleMesh::subdivideMidPoint(_QWORD *a1, int a2, void **a3, __int128 *a4, void **a5, std::vector<int> *a6, void **p_p, std::vector<int> *a8)
{
  _QWORD *v14;
  int v15;
  std::vector<int>::size_type v16;
  void **v17;
  std::vector<int> *v18;
  unint64_t v19;
  int v20;
  std::vector<int>::size_type v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::vector<int>::size_type v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;
  __int128 v38;

  v14 = a1 + 9;
  v15 = -1431655765 * ((a1[10] - a1[9]) >> 2);
  if (v15)
  {
    v16 = (a1[1] - *a1) >> 4;
    if ((_DWORD)v16)
    {
      __p = 0;
      v36 = 0;
      v37 = 0;
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v17 = a3 ? a3 : &__p;
      v18 = (std::vector<int> *)(a4 ? a4 : &v30);
      v30 = 0uLL;
      v31 = 0uLL;
      vmesh::SubdivideMidPoint(v16, v15, a2, v18, v14, v17);
      vmesh::StaticAdjacencyInformation<Pair>::optimize(v18);
      v19 = *((int *)*v17 + 2 * a2);
      v38 = 0u;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEmRKS1_((uint64_t)a1, v19, &v38);
      _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE((uint64_t)a1, v18);
      vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&v30);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
  }
  v20 = -1431655765 * ((a1[16] - a1[15]) >> 2);
  if (v20)
  {
    v21 = (a1[7] - a1[6]) >> 4;
    if ((_DWORD)v21)
    {
      __p = 0;
      v36 = 0;
      v37 = 0;
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      if (!p_p)
        p_p = &__p;
      if (!a8)
        a8 = (std::vector<int> *)&v30;
      v30 = 0uLL;
      v31 = 0uLL;
      vmesh::SubdivideMidPoint(v21, v20, a2, a8, a1 + 15, p_p);
      vmesh::StaticAdjacencyInformation<Pair>::optimize(a8);
      v22 = *((int *)*p_p + 2 * a2);
      v38 = 0u;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEmRKS1_((uint64_t)(a1 + 6), v22, &v38);
      vmesh::InterpolateNormals((uint64_t)(a1 + 6), a8);
      vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&v30);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
  }
  v23 = a1 + 12;
  v24 = -1431655765 * ((a1[13] - a1[12]) >> 2);
  if (v24)
  {
    v25 = a1[3];
    v26 = a1[4];
    v27 = (uint64_t)(a1 + 3);
    v28 = (unint64_t)(v26 - v25) >> 3;
    if ((_DWORD)v28)
    {
      __p = 0;
      v36 = 0;
      v37 = 0;
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      if (!a5)
        a5 = &__p;
      if (!a6)
        a6 = (std::vector<int> *)&v30;
      v30 = 0uLL;
      v31 = 0uLL;
      vmesh::SubdivideMidPoint(v28, v24, a2, a6, v23, a5);
      vmesh::StaticAdjacencyInformation<Pair>::optimize(a6);
      v29 = *((int *)*a5 + 2 * a2);
      *(_QWORD *)&v38 = 0;
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEmRKS1_(v27, v29, &v38);
      _ZN5vmesh19InterpolateMidPointIDv2_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE(v27, a6);
      vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&v30);
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
  }
}

_QWORD *vmesh::DisplacedSubdivisionMesh::preprocessForSCN(vmesh::DisplacedSubdivisionMesh *this, int a2)
{
  void *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  std::chrono::steady_clock::now();
  *(_DWORD *)this = a2;
  if (((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) & 0xFFFFFFFF0) == 0)
    vmesh::TriangleMesh::computeNormals((vmesh::DisplacedSubdivisionMesh *)((char *)this + 32), 1);
  v4 = (void *)*((_QWORD *)this + 7);
  if (((*((_QWORD *)this + 8) - (_QWORD)v4) & 0x7FFFFFFF8) == 0)
  {
    v5 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
    v21 = 0;
    v22 = 0;
    v20 = 0;
    if (((unint64_t)v5 >> 4))
    {
      v7 = (int)(v5 >> 4);
      std::vector<Statement *>::__vallocate[abi:nn180100](&v20, v7);
      v8 = (char *)v21;
      bzero(v21, 8 * v7);
      v6 = &v8[8 * v7];
      v21 = v6;
      v4 = (void *)*((_QWORD *)this + 7);
      if (!v4)
      {
LABEL_9:
        v9 = v22;
        *((_QWORD *)this + 7) = v20;
        *((_QWORD *)this + 8) = v6;
        *((_QWORD *)this + 9) = v9;
        goto LABEL_10;
      }
    }
    else
    {
      v6 = 0;
      if (!v4)
        goto LABEL_9;
    }
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
    v6 = (char *)v21;
    goto LABEL_9;
  }
LABEL_10:
  vmesh::TriangleMesh::subdivideMidPoint((_QWORD *)this + 4, a2, (void **)this + 1, (__int128 *)((char *)this + 392), 0, 0, 0, 0);
  std::chrono::steady_clock::now();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"preprocess() ", 13);
  v10 = (_QWORD *)std::ostream::operator<<();
  result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)" ms\n", 4);
  v12 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if ((int)(v12 >> 3) >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 & 0x7FFFFFFF8;
    v16 = (_QWORD *)MEMORY[0x1E0DE4A60];
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"\t LOD[", 6);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)"V ", 2);
      v19 = (_QWORD *)std::ostream::operator<<();
      result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"T\n", 2);
      ++v14;
      v13 += 8;
    }
    while (v15 != v13);
  }
  return result;
}

void vmesh::StaticAdjacencyInformation<Pair>::optimize(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int started;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  int *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;

  v2 = a1[4] - a1[3];
  v3 = v2 >> 2;
  if ((int)(v2 >> 2) <= 0)
  {
    v12 = (_DWORD *)*a1;
    *(_DWORD *)*a1 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      started = vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex(a1, v5);
      v7 = vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex(a1, v5) - started;
      if ((int)v7 >= 1 && started != v4)
      {
        v9 = 0;
        do
        {
          *(_QWORD *)(a1[6] + 8 * v4 + 8 * v9) = *(_QWORD *)(a1[6] + 8 * started + 8 * v9);
          ++v9;
        }
        while (v9 < v7);
      }
      v4 += v7;
      ++v5;
    }
    while (v5 != (_DWORD)v3);
    v10 = 0;
    v11 = (int *)a1[3];
    v12 = (_DWORD *)*a1;
    *(_DWORD *)*a1 = 0;
    v15 = *v11;
    v13 = v11 + 1;
    v14 = v15;
    do
    {
      v12[v10 / 4 + 1] = v14;
      v14 += v13[v10 / 4];
      v10 += 4;
    }
    while ((v2 & 0x3FFFFFFFCLL) != v10);
  }
  std::vector<ClippedCorner>::resize((uint64_t)(a1 + 6), (int)v12[(int)v3]);
}

uint64_t _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int started;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;

  v2 = a2[4] - a2[3];
  if ((int)(v2 >> 2) >= 1)
  {
    v4 = (_QWORD *)result;
    v5 = 0;
    v6 = (v2 >> 2);
    do
    {
      v15 = *(float32x4_t *)(*v4 + 16 * v5);
      started = vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex(a2, v5);
      result = vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex(a2, v5);
      v8.i64[0] = 0x3F0000003F000000;
      v8.i64[1] = 0x3F0000003F000000;
      v9 = result - started;
      if ((int)result > started)
      {
        v10 = 8 * started;
        do
        {
          v11 = (unsigned int *)(a2[6] + v10);
          v12 = *v11;
          if ((v12 & 0x80000000) != 0 || (v13 = (v4[1] - *v4) >> 4, (int)v12 >= (int)v13))
            _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE_cold_2();
          v14 = v11[1];
          if ((v14 & 0x80000000) != 0 || (int)v14 >= (int)v13)
            _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE_cold_1();
          *(float32x4_t *)(*v4 + 16 * v14) = vmulq_f32(vaddq_f32(v15, *(float32x4_t *)(*v4 + 16 * v12)), v8);
          v10 += 8;
          --v9;
        }
        while (v9);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t vmesh::InterpolateNormals(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int started;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;

  v2 = a2[4] - a2[3];
  if ((int)(v2 >> 2) >= 1)
  {
    v4 = (uint64_t *)result;
    v5 = 0;
    v6 = (v2 >> 2);
    do
    {
      v20 = *(float32x4_t *)(*v4 + 16 * v5);
      started = vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex(a2, v5);
      result = vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex(a2, v5);
      v8.i64[0] = 0x3F0000003F000000;
      v8.i64[1] = 0x3F0000003F000000;
      v9 = result - started;
      if ((int)result > started)
      {
        v10 = 8 * started;
        do
        {
          v11 = (unsigned int *)(a2[6] + v10);
          v12 = *v11;
          if ((v12 & 0x80000000) != 0 || (v13 = *v4, v14 = (unint64_t)(v4[1] - *v4) >> 4, (int)v12 >= (int)v14))
            vmesh::InterpolateNormals();
          v15 = v11[1];
          if ((v15 & 0x80000000) != 0 || (int)v15 >= (int)v14)
            vmesh::InterpolateNormals();
          v16 = vmulq_f32(vaddq_f32(v20, *(float32x4_t *)(v13 + 16 * v12)), v8);
          v17 = (int32x4_t)vmulq_f32(v16, v16);
          v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
          v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
          v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
          *(float32x4_t *)(v13 + 16 * v15) = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
          v10 += 8;
          --v9;
        }
        while (v9);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t _ZN5vmesh19InterpolateMidPointIDv2_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  int started;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2[4] - a2[3];
  if ((int)(v2 >> 2) >= 1)
  {
    v4 = (_QWORD *)result;
    v5 = 0;
    v6 = (v2 >> 2);
    do
    {
      v7 = *(float32x2_t *)(*v4 + 8 * v5);
      started = vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex(a2, v5);
      result = vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex(a2, v5);
      v9 = result - started;
      if ((int)result > started)
      {
        v10 = 8 * started;
        do
        {
          v11 = (unsigned int *)(a2[6] + v10);
          v12 = *v11;
          if ((v12 & 0x80000000) != 0 || (v13 = (v4[1] - *v4) >> 3, (int)v12 >= (int)v13))
            _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE_cold_2();
          v14 = v11[1];
          if ((v14 & 0x80000000) != 0 || (int)v14 >= (int)v13)
            _ZN5vmesh19InterpolateMidPointIDv3_fEEvRNSt3__16vectorIT_NS2_9allocatorIS4_EEEERKNS_26StaticAdjacencyInformationI4PairEE_cold_1();
          *(float32x2_t *)(*v4 + 8 * v14) = vmul_f32(vadd_f32(v7, *(float32x2_t *)(*v4 + 8 * v12)), (float32x2_t)0x3F0000003F000000);
          v10 += 8;
          --v9;
        }
        while (v9);
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex(_QWORD *a1, int a2)
{
  if ((int)((a1[4] - a1[3]) >> 2) <= a2)
    vmesh::StaticAdjacencyInformation<Pair>::neighborsStartIndex();
  return *(unsigned int *)(*a1 + 4 * a2);
}

uint64_t vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex(_QWORD *a1, int a2)
{
  uint64_t v2;

  v2 = a1[3];
  if ((int)((unint64_t)(a1[4] - v2) >> 2) <= a2)
    vmesh::StaticAdjacencyInformation<Pair>::neighborsEndIndex();
  return (*(_DWORD *)(v2 + 4 * a2) + *(_DWORD *)(*a1 + 4 * a2));
}

char *vmesh::TriangleMesh::loadBaseMeshFromVectors(char **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  uint64_t *v78;

  v5 = a2[1] - *a2;
  if (!v5)
    vmesh::TriangleMesh::loadBaseMeshFromVectors();
  v11 = *a3;
  v10 = a3[1];
  v12 = v5 >> 4;
  v14 = *a4;
  v13 = a4[1];
  if (v10 != *a3)
  {
    if ((v10 - v11) >> 3 != v12)
      vmesh::TriangleMesh::loadBaseMeshFromVectors();
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm((void **)a1 + 3, v12);
  }
  if (v13 != v14)
  {
    if (v12 != (a4[1] - *a4) >> 4)
      vmesh::TriangleMesh::loadBaseMeshFromVectors();
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a1 + 6, v12);
  }
  v78 = a4;
  v15 = *a2;
  if (a2[1] != *a2)
  {
    v16 = 0;
    do
    {
      v18 = a1[1];
      v17 = (unint64_t)a1[2];
      if ((unint64_t)v18 >= v17)
      {
        v20 = (v18 - *a1) >> 4;
        if ((unint64_t)(v20 + 1) >> 60)
          goto LABEL_90;
        v21 = v17 - (_QWORD)*a1;
        v22 = v21 >> 3;
        if (v21 >> 3 <= (unint64_t)(v20 + 1))
          v22 = v20 + 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
          v24 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), v23);
        else
          v24 = 0;
        v25 = &v24[16 * v20];
        *(_OWORD *)v25 = *(_OWORD *)(v15 + 16 * v16);
        v19 = v25 + 16;
        v27 = *a1;
        v26 = a1[1];
        if (v26 != *a1)
        {
          do
          {
            v28 = *((_OWORD *)v26 - 1);
            v26 -= 16;
            *((_OWORD *)v25 - 1) = v28;
            v25 -= 16;
          }
          while (v26 != v27);
          v26 = *a1;
        }
        *a1 = v25;
        a1[1] = v19;
        a1[2] = &v24[16 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_OWORD *)v18 = *(_OWORD *)(v15 + 16 * v16);
        v19 = v18 + 16;
      }
      a1[1] = v19;
      if (v10 != v11)
      {
        v29 = *a3;
        v31 = a1[4];
        v30 = (unint64_t)a1[5];
        if ((unint64_t)v31 >= v30)
        {
          v33 = a1[3];
          v34 = (v31 - v33) >> 3;
          if ((unint64_t)(v34 + 1) >> 61)
            goto LABEL_90;
          v35 = v30 - (_QWORD)v33;
          v36 = v35 >> 2;
          if (v35 >> 2 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(a1 + 5), v37);
          else
            v38 = 0;
          v39 = &v38[8 * v34];
          *(_QWORD *)v39 = *(_QWORD *)(v29 + 8 * v16);
          v32 = v39 + 8;
          v41 = a1[3];
          v40 = a1[4];
          if (v40 != v41)
          {
            do
            {
              v42 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v39 - 1) = v42;
              v39 -= 8;
            }
            while (v40 != v41);
            v40 = a1[3];
          }
          a1[3] = v39;
          a1[4] = v32;
          a1[5] = &v38[8 * v37];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)v31 = *(_QWORD *)(v29 + 8 * v16);
          v32 = v31 + 8;
        }
        a1[4] = v32;
      }
      if (v13 != v14)
      {
        v43 = *v78;
        v45 = a1[7];
        v44 = (unint64_t)a1[8];
        if ((unint64_t)v45 >= v44)
        {
          v47 = a1[6];
          v48 = (v45 - v47) >> 4;
          if ((unint64_t)(v48 + 1) >> 60)
LABEL_90:
            abort();
          v49 = v44 - (_QWORD)v47;
          v50 = v49 >> 3;
          if (v49 >> 3 <= (unint64_t)(v48 + 1))
            v50 = v48 + 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
            v51 = 0xFFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
            v52 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 8), v51);
          else
            v52 = 0;
          v53 = &v52[16 * v48];
          *(_OWORD *)v53 = *(_OWORD *)(v43 + 16 * v16);
          v46 = v53 + 16;
          v55 = a1[6];
          v54 = a1[7];
          if (v54 != v55)
          {
            do
            {
              v56 = *((_OWORD *)v54 - 1);
              v54 -= 16;
              *((_OWORD *)v53 - 1) = v56;
              v53 -= 16;
            }
            while (v54 != v55);
            v54 = a1[6];
          }
          a1[6] = v53;
          a1[7] = v46;
          a1[8] = &v52[16 * v51];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *(_OWORD *)v45 = *(_OWORD *)(v43 + 16 * v16);
          v46 = v45 + 16;
        }
        a1[7] = v46;
      }
      ++v16;
      v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 4);
  }
  v57 = *a5;
  v58 = a5[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v58 - *a5) >> 2) > 0x5555555555555555)
    vmesh::TriangleMesh::loadBaseMeshFromVectors();
  if (v58 == v57)
  {
    v61 = a1[10];
  }
  else
  {
    v59 = 0;
    v60 = a1 + 11;
    v61 = a1[10];
    do
    {
      v62 = (int *)(v57 + 4 * v59);
      v63 = *v62;
      v64 = v62[1];
      v65 = v62[2];
      if ((unint64_t)v61 >= *v60)
      {
        v66 = a1[9];
        v67 = 0xAAAAAAAAAAAAAAABLL * ((v61 - v66) >> 2);
        v68 = v67 + 1;
        if (v67 + 1 > 0x1555555555555555)
          goto LABEL_90;
        if (0x5555555555555556 * ((uint64_t)(*v60 - (_QWORD)v66) >> 2) > v68)
          v68 = 0x5555555555555556 * ((uint64_t)(*v60 - (_QWORD)v66) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v60 - (_QWORD)v66) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v69 = 0x1555555555555555;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>((uint64_t)(a1 + 11), v69);
        else
          v70 = 0;
        v71 = &v70[12 * v67];
        *(_DWORD *)v71 = v63;
        *((_DWORD *)v71 + 1) = v64;
        *((_DWORD *)v71 + 2) = v65;
        v73 = a1[9];
        v72 = a1[10];
        v74 = v71;
        if (v72 != v73)
        {
          do
          {
            v75 = *(_QWORD *)(v72 - 12);
            v72 -= 12;
            v76 = *((_DWORD *)v72 + 2);
            *(_QWORD *)(v74 - 12) = v75;
            v74 -= 12;
            *((_DWORD *)v74 + 2) = v76;
          }
          while (v72 != v73);
          v72 = a1[9];
        }
        v61 = v71 + 12;
        a1[9] = v74;
        a1[10] = v71 + 12;
        a1[11] = &v70[12 * v69];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *(_DWORD *)v61 = v63;
        *((_DWORD *)v61 + 1) = v64;
        *((_DWORD *)v61 + 2) = v65;
        v61 += 12;
      }
      a1[10] = v61;
      v59 += 3;
      v57 = *a5;
    }
    while (v59 < (a5[1] - *a5) >> 2);
  }
  std::vector<vmesh::Triangle>::__assign_with_size[abi:nn180100]<vmesh::Triangle*,vmesh::Triangle*>((char *)a1 + 96, a1[9], (uint64_t)v61, 0xAAAAAAAAAAAAAAABLL * ((v61 - a1[9]) >> 2));
  return std::vector<vmesh::Triangle>::__assign_with_size[abi:nn180100]<vmesh::Triangle*,vmesh::Triangle*>((char *)a1 + 120, a1[9], (uint64_t)a1[10], 0xAAAAAAAAAAAAAAABLL * ((a1[10] - a1[9]) >> 2));
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEmRKS1_(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEmRKS1_((void **)a1, a2 - v3, a3);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEmRKS1_(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_OWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 4)
  {
    if (a2)
    {
      v16 = 16 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 16;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 4);
    if (v11 >> 60)
      abort();
    v12 = v10 >> 4;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 3 > v11)
      v11 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v6, v14);
    else
      v15 = 0;
    v18 = &v15[16 * v12];
    v19 = &v18[16 * a2];
    v20 = 16 * a2;
    v21 = v18;
    do
    {
      *(_OWORD *)v21 = *a3;
      v21 += 16;
      v20 -= 16;
    }
    while (v20);
    v22 = &v15[16 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_OWORD *)v23 - 1);
        v23 -= 16;
        *((_OWORD *)v18 - 1) = v25;
        v18 -= 16;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEmRKS1_(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEmRKS1_((void **)a1, a2 - v3, a3);
  }
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEmRKS1_(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(12 * a2);
}

uint64_t vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<vmesh::Triangle>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  int v20;

  v6 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      memset(*(void **)(v4 - 8), 255, v14);
      v7 = (_DWORD *)((char *)v7 + v14);
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  else
  {
    v8 = *(_DWORD **)a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(_QWORD *)a1) >> 2);
    v10 = v9 + a2;
    if (v9 + a2 > 0x1555555555555555)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v15 = &v13[12 * v9];
    v16 = &v13[12 * v12];
    v17 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    memset(v15, 255, v17);
    v18 = &v15[v17];
    if (v7 != v8)
    {
      do
      {
        v19 = *(_QWORD *)(v7 - 3);
        v7 -= 3;
        v20 = v7[2];
        *(_QWORD *)(v15 - 12) = v19;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v20;
      }
      while (v7 != v8);
      v8 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

char *std::vector<vmesh::Triangle>::__assign_with_size[abi:nn180100]<vmesh::Triangle*,vmesh::Triangle*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<vmesh::Triangle>::__vallocate[abi:nn180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<vmesh::Triangle>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1DF0D40F4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1DF0D4100](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

C3D::RenderPass *C3D::DrawQuadPass::DrawQuadPass(C3D::DrawQuadPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, __C3DFXPass *a4)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA598C58;
  *((_QWORD *)result + 30) = a4;
  *((_QWORD *)result + 31) = 0;
  return result;
}

const char *C3D::DrawQuadPass::name(C3D::DrawQuadPass *this, uint64_t a2, uint64_t a3, void *a4)
{
  const char **v4;

  v4 = (const char **)*((_QWORD *)this + 30);
  if (v4)
    return C3D::CachedFXPassName((void **)this + 31, v4, *(__C3DFXPass **)(*((_QWORD *)this + 3) + 16), a4);
  else
    return "DrawQuadPass";
}

double C3D::DrawQuadPass::execute(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t RenderContext;
  uint64_t Scene;
  uint64_t EnginePipeline;
  uint64_t v6;
  uint64_t BackgroundEffectSlot;
  _QWORD v9[3];
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13[6];

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(v1 + 16));
  v13[4] = 0;
  v13[5] = 0;
  Scene = C3DEngineContextGetScene(*(_QWORD *)(v2 + 16));
  EnginePipeline = C3DSceneGetEnginePipeline(Scene);
  v6 = *(_QWORD *)(v2 + 16);
  v13[0] = EnginePipeline;
  v13[1] = v6;
  v13[3] = v2;
  bzero(v9, 0x1400uLL);
  v9[0] = *(_QWORD *)(v2 + 240);
  v10 = 1;
  v11 = 0;
  v12 = 0u;
  v13[2] = (uint64_t)v9;
  C3DEnginePipelineApplyNotificationQueue(v13);
  if (C3DFXPassGetUsesSceneBackgroundColor(*(_QWORD *)(v2 + 240)))
  {
    BackgroundEffectSlot = C3DSceneGetBackgroundEffectSlot(Scene, 0);
    if (BackgroundEffectSlot)
      C3DEngineContextRenderBackgroundMap(*(_QWORD *)(v2 + 16), BackgroundEffectSlot, (uint64_t)v9);
  }
  -[SCNMTLRenderContext startProcessingRendererElementsWithEngineIterationContext:](RenderContext, (uint64_t)v13);
  -[SCNMTLRenderContext drawFullScreenQuadForPass:](RenderContext, *(_QWORD *)(v2 + 240));
  return -[SCNMTLRenderContext stopProcessingRendererElements:](RenderContext, 0);
}

BOOL Tokenizer::NextChar(Tokenizer *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;

  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  if (v1 < v2)
  {
    v3 = *((_QWORD *)this + 3);
    *((_BYTE *)this + 64) = *((_BYTE *)this + 65);
    if (v3 >= v2)
    {
      v5 = 0;
    }
    else
    {
      v4 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *((unsigned __int8 *)v4 + v3);
    }
    *((_BYTE *)this + 65) = v5;
    *((_QWORD *)this + 3) = v3 + 1;
    ++*((_DWORD *)this + 18);
    if (v5 == 10)
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
  }
  return v1 < v2;
}

uint64_t Tokenizer::ParseNumber(Tokenizer *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 < v1)
  {
    *((_BYTE *)this + 64) = *((_BYTE *)this + 65);
    if (v3 >= v1)
    {
      v5 = 0;
    }
    else
    {
      v4 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *((unsigned __int8 *)v4 + v3);
    }
    *((_BYTE *)this + 65) = v5;
    *((_QWORD *)this + 3) = ++v3;
    v6 = *((_DWORD *)this + 18) + 1;
    *((_DWORD *)this + 18) = v6;
    if (v5 == 10)
    {
      v6 = 0;
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    }
    v7 = MEMORY[0x1E0C80978];
    while (1)
    {
      while (1)
      {
        if (((v5 & 0x80) != 0 || (*(_DWORD *)(v7 + 4 * v5 + 60) & 0x400) == 0)
          && (v5 - 46 > 0x37 || ((1 << (v5 - 46)) & 0x80000000800001) == 0))
        {
          goto LABEL_21;
        }
        *((_BYTE *)this + 64) = v5;
        if (v3 < v1)
          break;
        v5 = 0;
        *((_BYTE *)this + 65) = 0;
        *((_QWORD *)this + 3) = ++v3;
        ++v6;
LABEL_20:
        *((_DWORD *)this + 18) = v6;
      }
      v8 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v8 = (_QWORD *)*v8;
      v5 = *((unsigned __int8 *)v8 + v3);
      *((_BYTE *)this + 65) = v5;
      *((_QWORD *)this + 3) = ++v3;
      *((_DWORD *)this + 18) = ++v6;
      if (v5 == 10)
      {
        v6 = 0;
        ++*((_DWORD *)this + 17);
        v5 = 10;
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  *((_QWORD *)this + 4) = *(_QWORD *)this;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = v3 + ~v2;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 2) = v3 - 1;
  return (uint64_t)this + 32;
}

uint64_t Tokenizer::ParseString(Tokenizer *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 >= v1)
  {
    v5 = *((unsigned __int8 *)this + 65);
  }
  else
  {
    v3 = *((_QWORD *)this + 3);
    *((_BYTE *)this + 64) = *((_BYTE *)this + 65);
    if (v3 >= v1)
    {
      v5 = 0;
    }
    else
    {
      v4 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *((unsigned __int8 *)v4 + v3);
    }
    *((_BYTE *)this + 65) = v5;
    *((_QWORD *)this + 3) = v3 + 1;
    ++*((_DWORD *)this + 18);
    if (v5 == 10)
    {
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
      goto LABEL_11;
    }
  }
  if (v5 == 34)
  {
LABEL_23:
    if (v2 >= v1)
    {
      v6 = *((_QWORD *)this + 3);
    }
    else
    {
LABEL_24:
      v9 = *((_QWORD *)this + 3);
      *((_BYTE *)this + 64) = v5;
      if (v9 >= v1)
      {
        v11 = 0;
      }
      else
      {
        v10 = *(_QWORD **)this;
        if (*(char *)(*(_QWORD *)this + 23) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *((unsigned __int8 *)v10 + v9);
      }
      *((_BYTE *)this + 65) = v11;
      v6 = v9 + 1;
      *((_QWORD *)this + 3) = v6;
      ++*((_DWORD *)this + 18);
      if (v11 == 10)
        *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    }
    v12 = v6 + ~v2;
    goto LABEL_33;
  }
LABEL_11:
  v6 = *((_QWORD *)this + 3);
  if (v6 <= v1)
    v7 = v1;
  else
    v7 = *((_QWORD *)this + 3);
  if (v6 >= v1)
    goto LABEL_23;
  while (v2 < v1)
  {
    *((_BYTE *)this + 64) = v5;
    v8 = *(_QWORD **)this;
    if (*(char *)(*(_QWORD *)this + 23) < 0)
      v8 = (_QWORD *)*v8;
    v5 = *((unsigned __int8 *)v8 + v6);
    *((_BYTE *)this + 65) = v5;
    *((_QWORD *)this + 3) = ++v6;
    ++*((_DWORD *)this + 18);
    if (v5 == 10)
    {
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    }
    else if (v5 == 34)
    {
      goto LABEL_24;
    }
    if (v7 == v6)
      goto LABEL_23;
  }
  v12 = ~v2 + v6;
LABEL_33:
  *((_QWORD *)this + 4) = *(_QWORD *)this;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = v12;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 2) = v6 - 1;
  return (uint64_t)this + 32;
}

uint64_t Tokenizer::ParseMultiLineComment(Tokenizer *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t *v19;
  int v20;
  int v21;

  v1 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  if (v2 >= v1)
  {
    v6 = *((unsigned __int8 *)this + 65);
  }
  else
  {
    v3 = *((_QWORD *)this + 3);
    *((_BYTE *)this + 64) = *((_BYTE *)this + 65);
    if (v3 >= v1)
    {
      v5 = 0;
    }
    else
    {
      v4 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v4 = (_QWORD *)*v4;
      v5 = *((unsigned __int8 *)v4 + v3);
    }
    *((_BYTE *)this + 65) = v5;
    v7 = v3 + 1;
    *((_QWORD *)this + 3) = v3 + 1;
    v8 = *((_DWORD *)this + 18) + 1;
    *((_DWORD *)this + 18) = v8;
    if (v5 == 10)
    {
      v8 = 0;
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    }
    *((_BYTE *)this + 64) = v5;
    if (v7 >= v1)
    {
      v6 = 0;
      *((_BYTE *)this + 65) = 0;
      *((_QWORD *)this + 3) = v3 + 2;
      *((_DWORD *)this + 18) = v8 + 1;
    }
    else
    {
      v9 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v9 = (_QWORD *)*v9;
      v6 = *((unsigned __int8 *)v9 + v7);
      *((_BYTE *)this + 65) = v6;
      *((_QWORD *)this + 3) = v3 + 2;
      *((_DWORD *)this + 18) = v8 + 1;
      if (v6 == 10)
        *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    }
  }
  v10 = *((_QWORD *)this + 3);
  while (1)
  {
    if (v6 != 42)
    {
      if (v2 >= v1)
        goto LABEL_32;
      goto LABEL_24;
    }
    if (v2 >= v1)
      goto LABEL_32;
    v11 = *(uint64_t **)this;
    v12 = *(_QWORD *)this;
    if (*(char *)(*(_QWORD *)this + 23) < 0)
      v12 = *v11;
    if (*(_BYTE *)(v12 + v10) == 47)
      break;
LABEL_24:
    *((_BYTE *)this + 64) = v6;
    if (v10 >= v1)
    {
      v6 = 0;
    }
    else
    {
      v13 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v13 = (_QWORD *)*v13;
      v6 = *((unsigned __int8 *)v13 + v10);
    }
    *((_BYTE *)this + 65) = v6;
    *((_QWORD *)this + 3) = ++v10;
    ++*((_DWORD *)this + 18);
    if (v6 == 10)
      *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
    if (v10 >= v1)
    {
LABEL_32:
      v14 = v10 + ~v2;
      v11 = *(uint64_t **)this;
      goto LABEL_33;
    }
  }
  *((_BYTE *)this + 64) = 42;
  if (v10 >= v1)
  {
    v17 = 0;
  }
  else
  {
    v16 = v11;
    if (*((char *)v11 + 23) < 0)
      v16 = (uint64_t *)*v11;
    v17 = *((unsigned __int8 *)v16 + v10);
  }
  *((_BYTE *)this + 65) = v17;
  *((_QWORD *)this + 3) = v10 + 1;
  v18 = *((_DWORD *)this + 18) + 1;
  *((_DWORD *)this + 18) = v18;
  if (v17 == 10)
  {
    v18 = 0;
    *(_QWORD *)((char *)this + 68) = (*((_DWORD *)this + 17) + 1);
  }
  *((_BYTE *)this + 64) = v17;
  if (v10 + 1 >= v1)
  {
    *((_BYTE *)this + 65) = 0;
    v10 += 2;
    *((_QWORD *)this + 3) = v10;
    v21 = v18 + 1;
LABEL_47:
    *((_DWORD *)this + 18) = v21;
  }
  else
  {
    v19 = v11;
    if (*((char *)v11 + 23) < 0)
      v19 = (uint64_t *)*v11;
    v20 = *((unsigned __int8 *)v19 + v10 + 1);
    *((_BYTE *)this + 65) = v20;
    v10 += 2;
    *((_QWORD *)this + 3) = v10;
    *((_DWORD *)this + 18) = v18 + 1;
    if (v20 == 10)
    {
      v21 = 0;
      ++*((_DWORD *)this + 17);
      goto LABEL_47;
    }
  }
  v14 = v10 + ~v2;
LABEL_33:
  *((_QWORD *)this + 4) = v11;
  *((_QWORD *)this + 5) = v2;
  *((_QWORD *)this + 6) = v14;
  *((_DWORD *)this + 14) = 12;
  *((_QWORD *)this + 2) = v10 - 1;
  return (uint64_t)this + 32;
}

uint64_t Tokenizer::GetNextChar(Tokenizer *this)
{
  if (*((_QWORD *)this + 2) >= *((_QWORD *)this + 1))
    return 0;
  else
    return (char)*((_BYTE *)this + 65);
}

uint64_t _C3DLODEnumerateSubEntities(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 64);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

__CFArray *_C3DLODCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t v22;
  int v23;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("LOD"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v23 = 0;
  valuePtr = 7;
  v22 = a1 + 72;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("threshold"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 2;
  v22 = a1 + 76;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("thresholdType"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 2;
  v22 = a1 + 48;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("sceneRef"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  return Mutable;
}

uint64_t C3DLODCreate(const void *a1, int a2, float a3)
{
  uint64_t Instance;
  const void *v7;
  CFTypeRef v8;

  if (C3DLODGetTypeID_onceToken != -1)
    dispatch_once(&C3DLODGetTypeID_onceToken, &__block_literal_global_54);
  Instance = C3DTypeCreateInstance_(C3DLODGetTypeID_typeID, 0x40uLL);
  *(_DWORD *)(Instance + 76) = a2;
  *(float *)(Instance + 72) = a3;
  v7 = *(const void **)(Instance + 64);
  if (v7 != a1)
  {
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(Instance + 64) = 0;
    }
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    *(_QWORD *)(Instance + 64) = v8;
  }
  return Instance;
}

uint64_t C3DLODGetEntity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DLODGetEntity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

uint64_t C3DLODGetThresholdType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DLODGetEntity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 76);
}

float C3DLODGetThreshold(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DLODGetEntity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 72);
}

id _C3DLODCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return C3DEntityCFFinalize(a1);
}

CFStringRef _C3DLODCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLOD>"));
}

CFStringRef _C3DLODCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLOD>"));
}

C3D::DrawNodesPass *C3D::SSAODepthNormalPass::SSAODepthNormalPass(C3D::DrawNodesPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::DrawNodesPass *result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  v7 = 0;
  v9 = 0u;
  v10 = 0x20000;
  memset(v6, 0, sizeof(v6));
  v8 = -1;
  BYTE8(v9) = 1;
  result = C3D::DrawNodesPass::DrawNodesPass(a1, a2, a3, (const Parameters *)v6);
  *(_QWORD *)result = off_1EA599BF8;
  *((_QWORD *)result + 670) = 0;
  *((_QWORD *)result + 671) = a4;
  return result;
}

const char *C3D::SSAODepthNormalPass::name(C3D::SSAODepthNormalPass *this)
{
  return "SSAODepthNormalPass";
}

const char *C3D::SSAODepthNormalPass::programHashCodeStoreName(C3D::SSAODepthNormalPass *this)
{
  return "SSAODepthNormalPass";
}

void C3D::SSAODepthNormalPass::setup(C3D::SSAODepthNormalPass *this)
{
  uint64_t RenderContext;
  uint64_t v3;
  C3D::PassDescriptor *v4;
  C3D::PassDescriptor *v5;
  unsigned int v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  C3D::PassDescriptor *v10;
  C3D::PassDescriptor *v11;
  BOOL v12;
  int PreferredRenderMode;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  C3D::Pass::setOutputCount(this, 2u);
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::SSAODepthNormalPass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "SSAO-DepthNormal";
  *(_BYTE *)(v3 + 65) = 0;
  *(_WORD *)(v3 + 28) = 115;
  v4 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 671));
  *(_WORD *)(v3 + 16) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 16);
  v5 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 671));
  v6 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v5, 0) + 18);
  *(_WORD *)(v3 + 18) = v6;
  LOWORD(v7) = *(_WORD *)(v3 + 16);
  *(float *)&v7 = fmax((double)v7, (double)v6);
  *(_BYTE *)(v3 + 30) = (int)(float)(floorf(log2f(*(float *)&v7)) + 1.0);
  v8 = *(_WORD *)(v3 + 66);
  *(_OWORD *)(v3 + 48) = xmmword_1DD02A210;
  *(_WORD *)(v3 + 66) = v8 & 0xFFBC | 0x42;
  v9 = C3D::PassDescriptor::outputAtIndex((C3D::SSAODepthNormalPass *)((char *)this + 32), 1u);
  *(_BYTE *)(v9 + 64) = 2;
  *(_WORD *)(v9 + 66) |= 8u;
  v10 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 671));
  *(_WORD *)(v9 + 16) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v10, 0) + 16);
  v11 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 671));
  *(_WORD *)(v9 + 18) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v11, 0) + 18);
  *(_WORD *)(v9 + 28) = 252;
  *(_WORD *)(v9 + 66) = *(_WORD *)(v9 + 66) & 0xFFFC | 2;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 31) = C3DEngineContextGetPointOfView(*((_QWORD *)this + 2));
  if (*(_BYTE *)(v3 + 24) == 5)
  {
    v12 = (-[SCNMTLRenderContext features](RenderContext) & 0x20) != 0;
    *((_BYTE *)this + 117) = v12;
    *((_BYTE *)this + 118) = v12;
    *((_WORD *)this + 19) = 6;
  }
  else if (C3DEngineContextGetEyeCount(*((_QWORD *)this + 2)) >= 2)
  {
    PreferredRenderMode = C3DEngineContextGetPreferredRenderMode(*((_QWORD *)this + 2));
    *((_BYTE *)this + 117) = PreferredRenderMode;
    *((_BYTE *)this + 118) = PreferredRenderMode != 0;
    *((_WORD *)this + 19) = C3DEngineContextGetEyeCount(*((_QWORD *)this + 2));
    *((_BYTE *)this + 120) = 1;
  }
  C3D::DrawNodesPass::setup(this);
}

void C3D::SSAODepthNormalPass::compile(C3D::SSAODepthNormalPass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  CFTypeRef *v6;
  uint64_t CommonProfile;
  __CFArray *Mutable;
  const void *v9;
  CFTypeRef *v10;
  uint64_t v11;

  v2 = (*(uint64_t (**)(C3D::SSAODepthNormalPass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 670) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA59A458;
    *((_QWORD *)this + 670) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    v6 = (CFTypeRef *)C3DMaterialCreate();
    C3DEntitySetName((uint64_t)v6, CFSTR("--DepthAndNormalMaterial--"));
    CommonProfile = C3DMaterialGetCommonProfile((uint64_t)v6);
    C3DEffectCommonProfileSetLightingModel(CommonProfile, 4);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v9 = (const void *)C3DShaderModifiersCreate(CFSTR("#pragma body\n_output.color = float4(_surface.normal.xyz, _surface.position.z);\n"),
                         2,
                         0,
                         0,
                         1,
                         1);
    CFArrayAppendValue(Mutable, v9);
    CFRelease(v9);
    C3DEntitySetShaderModifiers(v6, Mutable);
    CFRelease(Mutable);
    v4 = *((_QWORD *)this + 670);
    v10 = *(CFTypeRef **)(v4 + 16);
    if (v10 != v6)
    {
      v11 = *((_QWORD *)this + 670);
      if (v10)
      {
        CFRelease(v10);
        v11 = *((_QWORD *)this + 670);
      }
      *(_QWORD *)(v4 + 16) = v6;
      v4 = v11;
    }
  }
  *((_QWORD *)this + 32) = C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(v4 + 16);
  C3D::DrawNodesPass::compile(this);
}

void C3D::SSAODepthNormalPassResource::~SSAODepthNormalPassResource(C3D::SSAODepthNormalPassResource *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1EA59A458;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1EA59A458;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1DF0D41C0);
}

BOOL C3DGeometryOpenSubdivGetGPUCanBenefitFromSingleCreasePatches(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144) && *(_QWORD *)(a1 + 152) != 0;
}

BOOL C3DSubdivisionGetPathTypeSupportsSingleCrease(int a1)
{
  return (a1 - 1) < 3;
}

uint64_t C3DSubdivisionOsdGPUGetTessellationPartitionMode(uint64_t a1)
{
  return 2 * *(unsigned __int8 *)(a1 + 4);
}

uint64_t C3DGeometryOpenSubdivGetGPUHasPatchOfType(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 24);
  if (result)
    return __C3DSubdivisionOsdGPUHasPatchOfType(result, a2);
  return result;
}

BOOL __C3DSubdivisionOsdGPUHasPatchOfType(uint64_t a1, int a2)
{
  int v3;
  unint64_t v4;
  _DWORD *v5;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v3 = C3DPatchTypeToOsdPatchType(a2);
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    return 0;
  v5 = *(_DWORD **)(a1 + 40);
  if (*v5 == v3)
    return 1;
  v7 = v5 + 4;
  v8 = 1;
  do
  {
    v9 = v8;
    if (v4 == v8)
      break;
    v10 = *v7;
    v7 += 4;
    ++v8;
  }
  while (v10 != v3);
  return v9 < v4;
}

_QWORD *_C3DSubdivisionOsdGPURuntimeDataCFInit(_QWORD *result)
{
  result[11] = 0;
  result[12] = 0;
  result[13] = 0;
  return result;
}

void _C3DSubdivisionOsdGPURuntimeDataCFFinalize(char *a1)
{
  uint64_t v2;
  void ***v3;
  void **v4;
  void **v5;
  uint64_t i;
  void **v7;

  v2 = *((_QWORD *)a1 + 15);
  if (v2)
  {
    v7 = (void **)*((_QWORD *)a1 + 15);
    std::vector<std::vector<std::vector<CFRange>>>::__destroy_vector::operator()[abi:nn180100](&v7);
    MEMORY[0x1DF0D41C0](v2, 0x20C40960023A9);
  }
  __C3DSubdivisionOsdGPUPatchTableDestroy((void **)a1 + 4);
  v3 = (void ***)*((_QWORD *)a1 + 11);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        __C3DSubdivisionOsdGPUPatchTableDestroy(v4);
        v4 += 7;
      }
      while (v4 != v5);
      v3 = (void ***)*((_QWORD *)a1 + 11);
      if (!v3)
        goto LABEL_11;
      v4 = *v3;
    }
    if (v4)
    {
      v3[1] = v4;
      operator delete(v4);
    }
    MEMORY[0x1DF0D41C0](v3, 0x20C40960023A9);
  }
LABEL_11:

  __C3DSubdivisionOsdGPURefinerDestroy((id *)a1 + 18);
  for (i = 0; i != 80; i += 8)

}

__CFString *_C3DSubdivisionOsdGPURuntimeDataCFCopyDebugDescription(id *a1)
{
  __CFString *Mutable;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __CFString *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  id *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DSubdivisionOsdGPURuntimeDataRef %p>"), a1);
  v57 = 0;
  v58 = &v57;
  v59 = 0x2020000000;
  v60 = 0;
  v3 = objc_msgSend(a1[8], "length");
  v4 = a1[4];
  v5 = objc_msgSend(a1[6], "length");
  v6 = objc_msgSend(a1[7], "length");
  v58[3] += 16 * (_QWORD)v4 + v3 + v5 + v6;
  CFStringAppend(Mutable, CFSTR("\nVertex patch table:"));
  v7 = C3DGetByteCountDescriptionFromSize(16 * (_QWORD)v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch arrays (%@):"), v7);
  if (a1[4])
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (char *)a1[5] + v8;
      v11 = *((unsigned int *)v10 + 1);
      v12 = C3DGetPatchTypeDescription(*(_DWORD *)v10);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n    - %d x %@"), v11, v12);
      ++v9;
      v8 += 16;
    }
    while (v9 < (unint64_t)a1[4]);
  }
  v13 = a1[8];
  v14 = C3DGetByteCountDescriptionFromSize(v3);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Data buffer: %p (%@)"), v13, v14);
  v15 = a1[6];
  v16 = C3DGetByteCountDescriptionFromSize(v5);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch index buffer: %p (%@)"), v15, v16);
  v17 = a1[7];
  v18 = C3DGetByteCountDescriptionFromSize(v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch param buffer: %p (%@)"), v17, v18);
  v19 = a1[11];
  if (v19)
  {
    v20 = *((_QWORD *)a1[11] + 1) - *v19;
    if (v20)
    {
      v21 = 0;
      v51 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 3);
      v52 = a1;
      do
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("\nFVar patch table (channel %zu):"), v21);
        v22 = (uint64_t *)a1[11];
        v23 = *v22;
        if (0x6DB6DB6DB6DB6DB7 * ((v22[1] - *v22) >> 3) <= v21)
          abort();
        v24 = (unint64_t *)(v23 + 56 * v21);
        v55 = objc_msgSend((id)v24[4], "length");
        v25 = *v24;
        v54 = objc_msgSend((id)v24[2], "length");
        v26 = objc_msgSend((id)v24[3], "length");
        v58[3] += 16 * v25 + v55 + v54 + v26;
        v27 = C3DGetByteCountDescriptionFromSize(16 * v25);
        CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch arrays (%@):"), v27);
        v53 = v26;
        if (*v24)
        {
          v28 = 0;
          v29 = 0;
          v30 = (_QWORD *)(v23 + 56 * v21 + 8);
          do
          {
            v31 = *v30 + v28;
            v32 = *(unsigned int *)(v31 + 4);
            v33 = C3DGetPatchTypeDescription(*(_DWORD *)v31);
            CFStringAppendFormat(Mutable, 0, CFSTR("\n    - %d x %@"), v32, v33);
            ++v29;
            v28 += 16;
          }
          while (v29 < *v24);
        }
        v34 = v24[4];
        v35 = C3DGetByteCountDescriptionFromSize(v55);
        CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Data buffer: %p (%@)"), v34, v35);
        v36 = v24[2];
        v37 = C3DGetByteCountDescriptionFromSize(v54);
        CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch index buffer: %p (%@)"), v36, v37);
        v38 = v24[3];
        v39 = C3DGetByteCountDescriptionFromSize(v53);
        CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch param buffer: %p (%@)"), v38, v39);
        ++v21;
        a1 = v52;
      }
      while (v21 != v51);
    }
  }
  if (a1[12] && a1[13])
  {
    CFStringAppend(Mutable, CFSTR("\nLegacy Gregory patch table:"));
    v40 = objc_msgSend(a1[12], "length");
    v41 = objc_msgSend(a1[13], "length");
    v58[3] += v41 + v40;
    v42 = a1[12];
    v43 = C3DGetByteCountDescriptionFromSize(v40);
    CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Vertex valence buffer: %p (%@)"), v42, v43);
    v44 = a1[13];
    v45 = C3DGetByteCountDescriptionFromSize(v41);
    CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Quad offsets buffer: %p (%@)"), v44, v45);
  }
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 3221225472;
  v56[2] = ___ZL54_C3DSubdivisionOsdGPURuntimeDataCFCopyDebugDescriptionPKv_block_invoke;
  v56[3] = &unk_1EA5A1228;
  v56[4] = &v57;
  v56[5] = Mutable;
  CFStringAppend(Mutable, CFSTR("\nVertex Refiner:"));
  ___ZL54_C3DSubdivisionOsdGPURuntimeDataCFCopyDebugDescriptionPKv_block_invoke((uint64_t)v56, (uint64_t)(a1 + 18));
  v46 = objc_msgSend(a1[44], "length");
  v58[3] += v46;
  v47 = a1[44];
  v48 = C3DGetByteCountDescriptionFromSize(v46);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Skin/morph indexing table: %p (%@)"), v47, v48);
  v49 = C3DGetByteCountDescriptionFromSize(v58[3]);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nTotal memory usage: %@"), v49);
  _Block_object_dispose(&v57, 8);
  return Mutable;
}

void sub_1DCDE8C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___Z40C3DSubdivisionOsdGPURuntimeDataGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::typeID = result;
  return result;
}

uint64_t __C3DSubdivisionOsdGPURefine(__n128 *a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;

  if (!a1[5].n128_u64[0])
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DSubdivisionOsdGPURefine(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v23 = 0;
  v24 = 0;
  v12 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](a1[5].n128_i64[0]);
  if (!OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils(v12, a1[2].n128_i64[1], &a1[3].n128_u32[2], a1[3].n128_i64[0], &a1[4].n128_i32[1], 0, (uint64_t)&v23, 0, *a1, v13, (uint64_t)&v23, a1->n128_u64[0], a1->n128_i64[1], a1[1].n128_i64[0], a1[1].n128_i64[1], 0, 0, 0, a1[2].n128_i32[0],
          a2))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      __C3DSubdivisionOsdGPURefine(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  return C3DSceneSourcePerformConsistencyCheck(a2);
}

void __C3DSubdivisionOsdGPUCreateSynchronizeCoarsePositionsPipeline(uint64_t a1, __C3DGeometry *a2, void *a3, id *a4)
{
  uint64_t Mesh;
  uint64_t PositionOriginalToFirstDeindexedTable;
  _QWORD *var7;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  uint64_t v37;

  if (C3DGeometryGetEffectiveDataKindForRendering(a2))
  {
    *(_QWORD *)(a1 + 360) = (id)objc_msgSend(a3, "computePipelineStateForKernel:", CFSTR("scn_osd_synchronize_coarse_positions_no_argument_buffer"));
    Mesh = C3DGeometryGetMesh((uint64_t)a2);
    PositionOriginalToFirstDeindexedTable = C3DMeshGetPositionOriginalToFirstDeindexedTable(Mesh);
    var7 = a2->var10.var7;
    if (!var7)
    {
      v11 = scn_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        __C3DSubdivisionOsdGPUCreateSynchronizeCoarsePositionsPipeline(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    v20 = var7[4];
    v19 = var7[5];
    __p = 0;
    v36 = 0;
    v37 = 0;
    v21 = (v19 - v20) >> 2;
    if (v19 != v20)
    {
      std::vector<float>::__vallocate[abi:nn180100](&__p, (v19 - v20) >> 2);
      v22 = (char *)v36;
      bzero(v36, v19 - v20);
      v36 = &v22[v19 - v20];
    }
    if (v21 != *(_DWORD *)(a1 + 28))
    {
      v23 = scn_default_log();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
        __C3DSubdivisionOsdGPUCreateSynchronizeCoarsePositionsPipeline(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    v31 = __p;
    if (v19 != v20)
    {
      v32 = 0;
      v33 = var7[4];
      do
      {
        v34 = *(unsigned int *)(v33 + 4 * v32);
        if (PositionOriginalToFirstDeindexedTable)
          LODWORD(v34) = *(_DWORD *)(PositionOriginalToFirstDeindexedTable + 4 * v34);
        v31[v32++] = v34;
      }
      while (v21 > v32);
    }
    *(_QWORD *)(a1 + 352) = objc_msgSend(*a4, "newBufferWithBytes:length:options:", v31, (_BYTE *)v36 - (_BYTE *)v31, 0);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = (id)objc_msgSend(a3, "computePipelineStateForKernel:", CFSTR("scn_osd_synchronize_indexed_coarse_positions_no_argument_buffer"));
  }
}

void sub_1DCDE8F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *C3DSubdivisionOsdGPURuntimeDataCreateWithData(uint64_t a1, uint64_t a2, _BYTE *a3, SCNMTLResourceManager *a4, void *a5, uint64_t a6)
{
  NSKeyedUnarchiver *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t Instance;
  __int128 v22;
  int32_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int32_t v34;
  _QWORD *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned __int8 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void **v43;
  const uint8_t *v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void **v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  int32_t v66;
  unsigned int v67;
  id **v68;
  uint64_t v69;
  unint64_t j;
  unint64_t v71;
  id *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  id *v83;
  id *v84;
  __n128 *v85;
  NSObject *v86;
  uint64_t v88;
  _BYTE *v89;
  _QWORD *v90;
  unsigned int v91;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  id **v97;
  MTLContext v98;
  size_t *v99;
  size_t size[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  void *v105;

  v9 = (NSKeyedUnarchiver *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a1, 0);
  v10 = 0;
  if (-[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", CFSTR("version")) >= 2)
  {
    if (!a5)
    {
      v11 = scn_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        C3DSubdivisionOsdGPURuntimeDataCreateWithData(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    v19 = (void *)objc_msgSend(a5, "commandBuffer");
    v20 = (void *)objc_msgSend(v19, "computeCommandEncoder");
    v98.var0 = (id)objc_msgSend(a5, "device");
    v98.var1 = a5;
    v98.var2 = v19;
    v98.var3 = v20;
    if (C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::onceToken != -1)
      dispatch_once(&C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::onceToken, &__block_literal_global_55);
    Instance = C3DTypeCreateInstance_(C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::typeID, 0x160uLL);
    v97 = 0;
    *(_DWORD *)(Instance + 28) = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", CFSTR("coarseVertexCount"));
    __C3DSubdivisionOsdGPURuntimeDataDecodePatchTable(v9, CFSTR("vertexPatchTable"), &v98, size);
    v22 = v101;
    *(_OWORD *)(Instance + 32) = *(_OWORD *)size;
    *(_OWORD *)(Instance + 48) = v22;
    *(_OWORD *)(Instance + 64) = v102;
    *(_QWORD *)(Instance + 80) = v103;
    v23 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("fvarPatchTables"), "stringByAppendingString:", CFSTR(".count")));
    v89 = a3;
    v90 = (_QWORD *)Instance;
    v88 = a6;
    if (v23)
    {
      v24 = v23;
      v25 = (_QWORD *)operator new();
      std::vector<C3DSubdivisionOsdGPUPatchTable>::vector(v25, v24);
      v26 = 0;
      for (i = 0; i != v24; ++i)
      {
        __C3DSubdivisionOsdGPURuntimeDataDecodePatchTable(v9, (NSString *)objc_msgSend(CFSTR("fvarPatchTables"), "stringByAppendingFormat:", CFSTR(".[%d]"), i), &v98, size);
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25[1] - *v25) >> 3) <= i)
          goto LABEL_66;
        v28 = *v25 + v26;
        *(_OWORD *)v28 = *(_OWORD *)size;
        *(_OWORD *)(v28 + 16) = v101;
        *(_OWORD *)(v28 + 32) = v102;
        *(_QWORD *)(v28 + 48) = v103;
        v26 += 56;
      }
      Instance = (uint64_t)v90;
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)(Instance + 88) = v25;
    if (a3[6] == 2)
    {
      v29 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(v9, (NSString *)objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".vertexValenceBuffer")), &v98, 0);
      v30 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(v9, (NSString *)objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBuffer")), &v98, 0);
      v31 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBaseGregory")));
      v32 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBaseGregoryBoundary")));
    }
    else
    {
      v29 = 0;
      v30 = 0;
      v31 = -1;
      v32 = -1;
    }
    *(_QWORD *)(Instance + 96) = v29;
    *(_QWORD *)(Instance + 104) = v30;
    *(_DWORD *)(Instance + 112) = v31;
    *(_DWORD *)(Instance + 116) = v32;
    v33 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingString:", CFSTR(".elementCount")));
    v34 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingString:", CFSTR(".patchArrayCount")));
    v35 = 0;
    v91 = v33;
    if (v33)
    {
      v36 = v34;
      if (v34)
      {
        v35 = (_QWORD *)operator new();
        v37 = v36;
        v94 = v35;
        std::vector<std::vector<CFRange>>::vector(size, v36);
        std::vector<std::vector<std::vector<CFRange>>>::vector(v35, v33, (uint64_t *)size);
        v99 = size;
        std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
        v96 = 0;
        v38 = 0;
        v93 = v36;
        do
        {
          v39 = 0;
          v40 = v38;
          v95 = v38;
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35[1] - *v35) >> 3) <= v40)
              goto LABEL_66;
            v41 = (uint64_t *)(*v35 + 24 * v40);
            v42 = *v41;
            if (0xAAAAAAAAAAAAAAABLL * ((v41[1] - *v41) >> 3) <= v39)
              goto LABEL_66;
            v43 = (void **)(v42 + 24 * v39);
            size[0] = 0;
            v44 = -[NSKeyedUnarchiver decodeBytesForKey:returnedLength:](v9, "decodeBytesForKey:returnedLength:", objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingFormat:", CFSTR(".[%d][%d]"), v96, v39), size);
            v45 = (char *)malloc_type_malloc(size[0], 0xF0356B68uLL);
            memcpy(v45, v44, size[0]);
            v46 = size[0];
            std::vector<CFRange>::reserve(v43, v37);
            if ((v46 & 0xFFFFFFFF0) != 0)
            {
              v47 = 0;
              v48 = v42 + 24 * v39;
              v51 = *(char **)(v48 + 8);
              v50 = (void **)(v48 + 8);
              v49 = v51;
              v52 = v50 + 1;
              v53 = (v46 >> 4);
              do
              {
                v54 = &v45[16 * v47];
                if ((unint64_t)v49 >= *v52)
                {
                  v55 = (v49 - (_BYTE *)*v43) >> 4;
                  if ((unint64_t)(v55 + 1) >> 60)
                    goto LABEL_66;
                  v56 = *v52 - (_QWORD)*v43;
                  v57 = v56 >> 3;
                  if (v56 >> 3 <= (unint64_t)(v55 + 1))
                    v57 = v55 + 1;
                  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
                    v58 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v58 = v57;
                  if (v58)
                    v59 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v50 + 1), v58);
                  else
                    v59 = 0;
                  v60 = &v59[16 * v55];
                  *(_OWORD *)v60 = *(_OWORD *)v54;
                  v61 = (char *)*v50;
                  v62 = (char *)*v43;
                  v63 = v60;
                  if (*v50 != *v43)
                  {
                    do
                    {
                      *((_OWORD *)v63 - 1) = *((_OWORD *)v61 - 1);
                      v63 -= 16;
                      v61 -= 16;
                    }
                    while (v61 != v62);
                    v61 = (char *)*v43;
                  }
                  *v43 = v63;
                  v49 = v60 + 16;
                  *v50 = v60 + 16;
                  *v52 = &v59[16 * v58];
                  if (v61)
                    operator delete(v61);
                }
                else
                {
                  *(_OWORD *)v49 = *(_OWORD *)v54;
                  v49 += 16;
                }
                *v50 = v49;
                ++v47;
              }
              while (v47 != v53);
            }
            free(v45);
            ++v39;
            v37 = v93;
            v35 = v94;
            v40 = v95;
          }
          while (v39 != v93);
          v38 = v95 + 1;
          v96 = (v95 + 1);
        }
        while (v91 > (v95 + 1));
        Instance = (uint64_t)v90;
      }
    }
    *(_QWORD *)(Instance + 120) = v35;
    __C3DSubdivisionOsdGPURuntimeDataDecodeRefiner(v9, CFSTR("vertexRefiner"), a4, &v98, (uint64_t)size);
    v64 = v103;
    *(_OWORD *)(Instance + 176) = v102;
    *(_OWORD *)(Instance + 192) = v64;
    *(_OWORD *)(Instance + 208) = v104;
    *(_QWORD *)(Instance + 224) = v105;
    v65 = v101;
    *(_OWORD *)(Instance + 144) = *(_OWORD *)size;
    *(_OWORD *)(Instance + 160) = v65;
    *(_QWORD *)(Instance + 184) = *(id *)(Instance + 64);
    *(_QWORD *)(Instance + 192) = *(id *)(Instance + 64);
    __C3DSubdivisionOsdGPURefine((__n128 *)(Instance + 144), &v98);
    *(_DWORD *)(Instance + 16) = 0;
    v66 = -[NSKeyedUnarchiver decodeInt32ForKey:](v9, "decodeInt32ForKey:", objc_msgSend(CFSTR("fvarRefiners"), "stringByAppendingString:", CFSTR(".count")));
    if (v66)
    {
      v67 = v66;
      v68 = (id **)operator new();
      std::vector<C3DSubdivisionOsdGPURefiner>::vector(v68, v67);
      v69 = 0;
      for (j = 0; j != v67; ++j)
      {
        __C3DSubdivisionOsdGPURuntimeDataDecodeRefiner(v9, (NSString *)objc_msgSend(CFSTR("fvarRefiners"), "stringByAppendingFormat:", CFSTR(".[%d]"), j), a4, &v98, (uint64_t)size);
        v71 = 0x2E8BA2E8BA2E8BA3 * (v68[1] - *v68);
        if (v71 <= j)
          goto LABEL_66;
        v72 = &(*v68)[v69];
        v73 = v101;
        *(_OWORD *)v72 = *(_OWORD *)size;
        *((_OWORD *)v72 + 1) = v73;
        v74 = v102;
        v75 = v103;
        v76 = v104;
        v72[10] = v105;
        *((_OWORD *)v72 + 3) = v75;
        *((_OWORD *)v72 + 4) = v76;
        *((_OWORD *)v72 + 2) = v74;
        v69 += 11;
      }
      v97 = v68;
      v77 = v71;
      if ((_DWORD)v71)
      {
        v78 = 0;
        v79 = 6;
        v80 = 32;
        while (1)
        {
          v81 = (uint64_t *)v90[11];
          v82 = *v81;
          if (0x6DB6DB6DB6DB6DB7 * ((v81[1] - *v81) >> 3) <= v78)
            break;
          v83 = *v68;
          if (0x2E8BA2E8BA2E8BA3 * (v68[1] - *v68) <= v78)
            break;
          v84 = &v83[v79];
          v85 = (__n128 *)&v83[v79 - 6];
          *(v84 - 1) = *(id *)(v82 + v80);
          *v84 = *(id *)(v82 + v80);
          __C3DSubdivisionOsdGPURefine(v85, &v98);
          ++v78;
          v79 += 11;
          v80 += 56;
          if (v77 == v78)
            goto LABEL_55;
        }
LABEL_66:
        abort();
      }
    }
    else
    {
      v97 = 0;
    }
LABEL_55:
    v10 = v90;
    __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines((uint64_t)v90, v89, a4, &v98.var0);
    v90[44] = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(v9, CFSTR("skinMorphSubdivIndexToMetalIndexBuffer"), &v98, 0);
    if (-[NSKeyedUnarchiver containsValueForKey:](v9, "containsValueForKey:", CFSTR("synchronizeCoarsePositionsPipeline.functionName")))
    {
      v90[45] = -[SCNMTLResourceManager computePipelineStateForKernel:](a4, "computePipelineStateForKernel:", -[NSKeyedUnarchiver decodeObjectOfClass:forKey:](v9, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("synchronizeCoarsePositionsPipeline.functionName")));
    }
    v90[16] = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(v9, CFSTR("fvarChannelDescriptorsBuffer"), &v98, 0);
    v90[17] = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(v9, CFSTR("fvarChannelsPackedDataBuffer"), &v98, 0);
    objc_msgSend(v98.var3, "endEncoding");
    objc_msgSend(v98.var2, "commit");
    objc_msgSend(v98.var2, "waitUntilCompleted");
    if (objc_msgSend(v98.var2, "status") == 4)
      goto LABEL_62;
    v86 = scn_default_log();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      C3DSubdivisionOsdGPURuntimeDataCreateWithData(&v98.var2);
      if (!v88)
        goto LABEL_61;
    }
    else if (!v88)
    {
LABEL_61:
      CFRelease(v90);
      v10 = 0;
LABEL_62:
      __C3DSubdivisionOsdGPUSetupAdditionalDataDestroy(&v97);
      goto LABEL_63;
    }
    (*(void (**)(uint64_t, id, uint64_t))(v88 + 16))(v88, v98.var2, 1);
    goto LABEL_61;
  }
LABEL_63:
  -[NSKeyedUnarchiver finishDecoding](v9, "finishDecoding");

  return v10;
}

void sub_1DCDE9860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&a26);
  MEMORY[0x1DF0D41C0](a18, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t __C3DSubdivisionOsdGPURuntimeDataDecodePatchTable@<X0>(NSKeyedUnarchiver *a1@<X0>, NSString *a2@<X1>, MTLContext *a3@<X2>, size_t *a4@<X8>)
{
  const uint8_t *v8;
  size_t v9;
  void *v10;
  size_t v11;
  uint64_t result;
  size_t size;

  size = 0;
  v8 = -[NSKeyedUnarchiver decodeBytesForKey:returnedLength:](a1, "decodeBytesForKey:returnedLength:", -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".patchArrays")), &size);
  v9 = size;
  *a4 = size >> 4;
  v10 = malloc_type_malloc(v9, 0x127AB476uLL);
  a4[1] = (size_t)v10;
  memcpy(v10, v8, size);
  a4[5] = -[NSKeyedUnarchiver decodeInt32ForKey:](a1, "decodeInt32ForKey:", -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".dataBufferOffset")));
  a4[6] = -[NSKeyedUnarchiver decodeInt32ForKey:](a1, "decodeInt32ForKey:", -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".dataBufferCoarseDataSize")));
  v11 = -[NSKeyedUnarchiver decodeInt32ForKey:](a1, "decodeInt32ForKey:", -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".dataBufferFullDataSize")));
  a4[2] = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".patchIndexBuffer")), a3, 0);
  a4[3] = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".patchParamBuffer")), a3, 0);
  result = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".dataBuffer")), a3, v11);
  a4[4] = result;
  return result;
}

id __C3DSubdivisionOsdGPURuntimeDataDecodeRefiner@<X0>(NSKeyedUnarchiver *a1@<X0>, NSString *a2@<X1>, SCNMTLResourceManager *a3@<X2>, MTLContext *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32_t v15;
  NSString *v16;
  const uint8_t *v17;
  const uint8_t *v18;
  int v19;
  __int128 v20;
  id result;
  __int128 v23;
  _BYTE v24[24];
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(a5 + 56) = 0;
  v9 = a5 + 56;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  v10 = -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".stencilTable"));
  v11 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](v10, "stringByAppendingString:", CFSTR(".sizesBuffer")), a4, 0);
  v12 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](v10, "stringByAppendingString:", CFSTR(".offsetsBuffer")), a4, 0);
  v13 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](v10, "stringByAppendingString:", CFSTR(".indicesBuffer")), a4, 0);
  v14 = __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(a1, -[NSString stringByAppendingString:](v10, "stringByAppendingString:", CFSTR(".weightsBuffer")), a4, 0);
  v15 = -[NSKeyedUnarchiver decodeInt32ForKey:](a1, "decodeInt32ForKey:", -[NSString stringByAppendingString:](v10, "stringByAppendingString:", CFSTR(".numStencils")));
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v12;
  *(_QWORD *)(a5 + 16) = v13;
  *(_QWORD *)(a5 + 24) = v14;
  *(_DWORD *)(a5 + 32) = v15;
  v16 = -[NSString stringByAppendingString:](a2, "stringByAppendingString:", CFSTR(".evaluatorInput"));
  v23 = 0uLL;
  v25 = 0;
  v26 = 0;
  v17 = -[NSKeyedUnarchiver decodeBytesForKey:returnedLength:](a1, "decodeBytesForKey:returnedLength:", -[NSString stringByAppendingString:](v16, "stringByAppendingString:", CFSTR(".srcDesc")), &v26);
  v18 = -[NSKeyedUnarchiver decodeBytesForKey:returnedLength:](a1, "decodeBytesForKey:returnedLength:", -[NSString stringByAppendingString:](v16, "stringByAppendingString:", CFSTR(".dstDesc")), &v25);
  if (v26 != 12)
    __C3DSubdivisionOsdGPURuntimeDataDecodeRefiner();
  if (v25 != 12)
    __C3DSubdivisionOsdGPURuntimeDataDecodeRefiner();
  *(_DWORD *)&v24[8] = *((_DWORD *)v17 + 2);
  *(_QWORD *)v24 = *(_QWORD *)v17;
  *(_QWORD *)&v24[12] = *(_QWORD *)v18;
  v19 = *((_DWORD *)v18 + 2);
  v20 = *(_OWORD *)v24;
  *(_OWORD *)(a5 + 40) = v23;
  *(_DWORD *)&v24[20] = v19;
  *(_OWORD *)(a5 + 56) = v20;
  *(_QWORD *)(a5 + 72) = *(_QWORD *)&v24[16];
  *(_QWORD *)&v23 = 0;
  DWORD2(v23) = 0;
  result = -[SCNMTLResourceManager computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:](a3, "computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:", a4, v9, a5 + 68, &v23, &v23);
  *(_QWORD *)(a5 + 80) = result;
  return result;
}

void __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(uint64_t a1, _BYTE *a2, void *a3, id *a4)
{
  unint64_t v4;
  int v8;
  _BOOL4 IsVarying;
  int VaryingTextureCoordinatesCount;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  NSObject *v23;
  BOOL v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  id v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char v47;
  _BYTE v48[15];

  v8 = a2[4];
  IsVarying = C3DGeometryOsdGetColorIsVarying(*(_DWORD *)(a1 + 24));
  VaryingTextureCoordinatesCount = C3DGeometryOsdGetVaryingTextureCoordinatesCount(*(_DWORD *)(a1 + 24));
  if (IsVarying)
    v11 = 16;
  else
    v11 = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v43 = v8;
    v4 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v11 + 8 * VaryingTextureCoordinatesCount;
    do
    {
      v16 = (int *)(*(_QWORD *)(a1 + 40) + v4);
      v18 = *v16;
      v17 = v16[1];
      v19 = C3DPatchTypeFromOsdPatchType(*v16);
      v20 = 4;
      v21 = 16;
      v22 = 16;
      switch(v18)
      {
        case 1:
        case 2:
LABEL_10:
          v23 = scn_default_log();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(&v47, v48);
          break;
        case 3:
        case 7:
        case 8:
          goto LABEL_9;
        case 4:
          break;
        case 6:
LABEL_12:
          v24 = v19 >= 4 || a2[3] == 0;
          *(_WORD *)(a1 + 240) = 12 * v12;
          *(_WORD *)(a1 + 256) = v13;
          v25 = 36.0;
          if (v24)
            v25 = 12.0;
          v13 = (float)((float)v13 + (float)((float)(v25 * (float)v17) * (float)v21)) + v17 * v15 * v22;
          break;
        case 9:
          *(_WORD *)(a1 + 246) = 12 * v12;
          *(_WORD *)(a1 + 262) = v13;
          v13 += 20 * v17 * v15 + 240 * v17;
          break;
        default:
          v20 = -1;
LABEL_9:
          v22 = v20;
          v21 = v20;
          switch(v18)
          {
            case 0:
            case 1:
            case 2:
            case 5:
              goto LABEL_10;
            case 6:
              goto LABEL_12;
            case 7:
              *(_WORD *)(a1 + 242) = 12 * v12;
              *(_WORD *)(a1 + 258) = v13;
              goto LABEL_21;
            case 8:
              *(_WORD *)(a1 + 244) = 12 * v12;
              *(_WORD *)(a1 + 260) = v13;
LABEL_21:
              v13 += v17 * v15 * v20 + 60 * v17 * v20;
              break;
            default:
              goto LABEL_22;
          }
          break;
      }
LABEL_22:
      v12 += v17;
      ++v14;
      v4 += 16;
    }
    while (v14 < *(_QWORD *)(a1 + 32));
    if (v13)
      v26 = objc_msgSend(*a4, "newBufferWithLength:options:", v13, 32);
    else
      v26 = 0;
    v8 = v43;
  }
  else
  {
    v12 = 0;
    v26 = 0;
  }
  *(_QWORD *)(a1 + 248) = v26;
  if (v8)
    v27 = objc_msgSend(*a4, "newBufferWithLength:options:", 80 * v12, 32);
  else
    v27 = 0;
  *(_QWORD *)(a1 + 264) = v27;
  *(_QWORD *)(a1 + 232) = objc_msgSend(*a4, "newBufferWithLength:options:", 12 * v12, 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v28 = 0;
    v29 = 0;
    v44 = *(unsigned int *)(a1 + 24);
    v45 = (unint64_t)a2[4] << 16;
    do
    {
      v30 = *(_QWORD *)(a1 + 40);
      v31 = *(unsigned int *)(v30 + v28);
      v32 = C3DPatchTypeFromOsdPatchType(*(_DWORD *)(v30 + v28));
      if (a2[2])
      {
        v33 = v32;
        v34 = a2[3];
        v35 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v36 = v33 >= 4 || v34 == 0;
        v37 = 256;
        if (v36)
          v37 = 0;
        v4 = v4 & 0xFFFFFFFF00000000 | v44;
        v38 = C3DSubdivisionOsdGPUGetProgramGeneratorResources(v37 | v45 | v33 | 0x2000000000, v4, v35);
        v39 = objc_alloc_init(MEMORY[0x1E0CC6A68]);
        objc_msgSend(v39, "setLanguageVersion:", SCNMetalLanguageVersion());
        objc_msgSend(v39, "setFastMathEnabled:", 1);
        objc_msgSend(v39, "setPreprocessorMacros:", v35);
        objc_msgSend(v39, "setAdditionalCompilerArguments:", CFSTR(" -w "));

        v40 = objc_alloc(MEMORY[0x1E0CB3940]);
        v41 = C3DSubdivisionOsdGPUGetPerPatchTypeSources(v33);
        if (__C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::onceToken != -1)
          dispatch_once(&__C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::onceToken, &__block_literal_global_340);
        v42 = (void *)objc_msgSend(v40, "initWithFormat:", CFSTR("%@%@%@"), v38, v41, __C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::kC3DOpenSubdivComputeSource);
        *(_QWORD *)(a1 + 8 * v31 + 272) = objc_msgSend(a3, "newComputePipelineStateWithFunctionName:library:", CFSTR("compute_opensubdiv"), objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)a3), "libraryForSourceCode:options:", v42, v39));

      }
      ++v29;
      v28 += 16;
    }
    while (v29 < *(_QWORD *)(a1 + 32));
  }
}

uint64_t __C3DSubdivisionOsdGPURuntimeDataDecodeMTLBuffer(NSKeyedUnarchiver *a1, NSString *a2, MTLContext *a3, size_t a4)
{
  const uint8_t *v8;
  void *v9;
  uint64_t v10;
  size_t __n;

  if (!-[NSKeyedUnarchiver containsValueForKey:](a1, "containsValueForKey:", a2))
    return 0;
  __n = 0;
  v8 = -[NSKeyedUnarchiver decodeBytesForKey:returnedLength:](a1, "decodeBytesForKey:returnedLength:", a2, &__n);
  if (__n >= a4)
    return objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", v8);
  v9 = malloc_type_malloc(a4, 0xD55C3802uLL);
  memcpy(v9, v8, __n);
  v10 = objc_msgSend(a3->var0, "newBufferWithBytes:length:options:", v9, a4, 0);
  free(v9);
  return v10;
}

void __C3DSubdivisionOsdGPUSetupAdditionalDataDestroy(id ***a1)
{
  id **v1;
  id *v2;
  id *v3;

  v1 = *a1;
  if (*a1)
  {
    v2 = *v1;
    v3 = v1[1];
    if (*v1 == v3)
      goto LABEL_6;
    do
    {
      __C3DSubdivisionOsdGPURefinerDestroy(v2);
      v2 += 11;
    }
    while (v2 != v3);
    v1 = *a1;
    if (*a1)
    {
      v2 = *v1;
LABEL_6:
      if (v2)
      {
        v1[1] = v2;
        operator delete(v2);
      }
      JUMPOUT(0x1DF0D41C0);
    }
  }
}

uint64_t C3DSubdivisionOsdGPUGetSharedSources()
{
  if (C3DSubdivisionOsdGPUGetSharedSources::onceToken != -1)
    dispatch_once(&C3DSubdivisionOsdGPUGetSharedSources::onceToken, &__block_literal_global_29);
  return C3DSubdivisionOsdGPUGetSharedSources::kSources;
}

void sub_1DCDEA2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t C3DSubdivisionOsdGPUGetPerPatchTypeSources(int a1)
{
  uint64_t *v1;

  switch(a1)
  {
    case 1:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_Quads(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_Quads(void)::onceToken, &__block_literal_global_347);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_Quads(void)::kSources;
      break;
    case 2:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_Triangles(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_Triangles(void)::onceToken, &__block_literal_global_348);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_Triangles(void)::kSources;
      break;
    case 3:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_Regular(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_Regular(void)::onceToken, &__block_literal_global_349);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_Regular(void)::kSources;
      break;
    case 4:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_Gregory(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_Gregory(void)::onceToken, &__block_literal_global_350);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_Gregory(void)::kSources;
      break;
    case 5:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBoundary(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBoundary(void)::onceToken, &__block_literal_global_351);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBoundary(void)::kSources;
      break;
    case 6:
      if (C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBasis(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBasis(void)::onceToken, &__block_literal_global_352);
      v1 = &C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBasis(void)::kSources;
      break;
    default:
      C3DSubdivisionOsdGPUGetPerPatchTypeSources_cold_1();
  }
  return *v1;
}

uint64_t C3DSubdivisionOsdGPUGetProgramGeneratorResources(unint64_t a1, unsigned int a2, void *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  uint64_t v12;
  const __CFString *v13;
  _BOOL4 IsVarying;
  char VaryingTextureCoordinatesCount;
  char v16;
  _BOOL4 IsFaceVarying;
  char FaceVaryingTextureCoordinatesCount;
  char v19;
  int i;
  _QWORD *v21;
  std::string *v22;
  uint64_t v23;
  _QWORD *v24;
  int j;
  _QWORD *v26;
  std::string *v27;
  uint64_t v28;
  _QWORD *v29;
  int k;
  _QWORD *v31;
  std::string *v32;
  uint64_t v33;
  _QWORD *v34;
  int m;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  int n;
  _QWORD *v45;
  std::string *v46;
  std::string::size_type v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  int ii;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  _QWORD *v58;
  std::string *v59;
  std::string::size_type v60;
  _QWORD *v61;
  _QWORD *v62;
  std::string *v63;
  std::string::size_type v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type v72;
  _QWORD *v73;
  int v74;
  unsigned __int8 v75;
  _QWORD *v76;
  std::string *v77;
  std::string::size_type v78;
  _QWORD *v79;
  _QWORD *v80;
  std::string *v81;
  std::string::size_type v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  void *v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v94;
  unsigned int HasMultipleFaceVaryingChannels;
  char v96;
  char v97;
  char v98;
  unint64_t v99;
  void *v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  _QWORD v106[2];
  _QWORD v107[11];
  char v108;
  uint64_t v109;

  v6 = C3DPatchTypeToOsdPatchType(a1);
  v7 = v6 - 3;
  if (v7 > 6)
    v8 = -1;
  else
    v8 = qword_1DD02A258[v7];
  objc_msgSend(a3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("USE_OPENSUBDIV"));
  objc_msgSend(a3, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (v6 - 5) < 5), CFSTR("OSD_IS_ADAPTIVE"));
  v100 = a3;
  v94 = v6 - 5;
  switch(v6)
  {
    case 3:
      v99 = v8;
      v9 = (void *)MEMORY[0x1E0C9AAB0];
      v10 = CFSTR("OSD_PATCH_QUADS");
      goto LABEL_11;
    case 4:
      v99 = v8;
      v9 = (void *)MEMORY[0x1E0C9AAB0];
      v10 = CFSTR("OSD_PATCH_TRIANGLES");
      goto LABEL_11;
    case 5:
      v11 = scn_default_log();
      v99 = v8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        C3DSubdivisionOsdGPUGetProgramGeneratorResources_cold_1(v11);
      break;
    case 6:
      v99 = v8;
      objc_msgSend(a3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("OSD_PATCH_REGULAR"));
      v9 = &unk_1EA5FEEF8;
      v10 = CFSTR("CONTROL_POINTS_PER_PATCH");
LABEL_11:
      objc_msgSend(a3, "setObject:forKeyedSubscript:", v9, v10);
      break;
    case 7:
      v12 = MEMORY[0x1E0C9AAB0];
      v13 = CFSTR("OSD_PATCH_GREGORY");
      goto LABEL_15;
    case 8:
      v12 = MEMORY[0x1E0C9AAB0];
      v13 = CFSTR("OSD_PATCH_GREGORY_BOUNDARY");
      goto LABEL_15;
    case 9:
      v12 = MEMORY[0x1E0C9AAB0];
      v13 = CFSTR("OSD_PATCH_GREGORY_BASIS");
LABEL_15:
      objc_msgSend(a3, "setObject:forKeyedSubscript:", v12, v13);
      objc_msgSend(a3, "setObject:forKeyedSubscript:", &unk_1EA5FEF10, CFSTR("CONTROL_POINTS_PER_PATCH"));
      v99 = 4;
      break;
    default:
      v99 = v8;
      break;
  }
  IsVarying = C3DGeometryOsdGetColorIsVarying(a2);
  VaryingTextureCoordinatesCount = C3DGeometryOsdGetVaryingTextureCoordinatesCount(a2);
  if (IsVarying)
    v16 = 4;
  else
    v16 = 0;
  IsFaceVarying = C3DGeometryOsdGetColorIsFaceVarying(a2);
  FaceVaryingTextureCoordinatesCount = C3DGeometryOsdGetFaceVaryingTextureCoordinatesCount(a2);
  if (IsFaceVarying)
    v19 = 4;
  else
    v19 = 0;
  v96 = v19;
  v97 = FaceVaryingTextureCoordinatesCount;
  HasMultipleFaceVaryingChannels = C3DGeometryOsdGetHasMultipleFaceVaryingChannels(a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v106);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_UV_CORRECTION if (t > 0.5) { ti += 0.01f; } else { ti += 0.01f; }\n",
    78);
  v98 = v16 + 2 * VaryingTextureCoordinatesCount;
  if (v98)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"struct OsdInputVertexType { \n", 29);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"    metal::packed_float3 position; \n",
      36);
    for (i = 0; i != 8; ++i)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, i) == 2)
      {
        v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"    metal::packed_float2 texcoord", 33);
        std::to_string(&v105, i);
        v22 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v105
            : (std::string *)v105.__r_.__value_.__r.__words[0];
        v23 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v105.__r_.__value_.__r.__words[2])
            : v105.__r_.__value_.__l.__size_;
        v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)"; \n", 3);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"    metal::packed_float4 color; \n",
        33);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"}; \n", 4);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_DECLARE                             ", 61);
    for (j = 0; j != 8; ++j)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, j) == 2)
      {
        v26 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"float2 texcoord", 15);
        std::to_string(&v105, j);
        v27 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v105
            : (std::string *)v105.__r_.__value_.__r.__words[0];
        v28 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v105.__r_.__value_.__r.__words[2])
            : v105.__r_.__value_.__l.__size_;
        v29 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)"; ", 2);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"float4 color; ", 14);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_DECLARE_PACKED                             ", 68);
    for (k = 0; k != 8; ++k)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, k) == 2)
      {
        v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"metal::packed_float2 texcoord", 29);
        std::to_string(&v105, k);
        v32 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v105
            : (std::string *)v105.__r_.__value_.__r.__words[0];
        v33 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v105.__r_.__value_.__r.__words[2])
            : v105.__r_.__value_.__l.__size_;
        v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)"; ", 2);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"metal::packed_float4 color; ",
        28);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_PER_VERTEX(in, out)                 ", 61);
    for (m = 0; m != 8; ++m)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, m) == 2)
      {
        v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.texcoord", 12);
        std::to_string(&v105, m);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v105;
        else
          v37 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        else
          size = v105.__r_.__value_.__l.__size_;
        v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
        v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)" = in.texcoord", 14);
        std::to_string(&v104, m);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v104;
        else
          v41 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v42 = v104.__r_.__value_.__l.__size_;
        v43 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v43, (uint64_t)"; ", 2);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.color = in.color; ",
        22);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)          ", 61);
    for (n = 0; n != 8; ++n)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, n) == 2)
      {
        v45 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.texcoord", 12);
        std::to_string(&v105, n);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v105;
        else
          v46 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        else
          v47 = v105.__r_.__value_.__l.__size_;
        v48 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
        v49 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v48, (uint64_t)" = in.texcoord", 14);
        std::to_string(&v104, n);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v104;
        else
          v50 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v51 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v51 = v104.__r_.__value_.__l.__size_;
        v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)"; ", 2);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.color = in.color; ",
        22);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out) ", 61);
    for (ii = 0; ii != 8; ++ii)
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, ii) == 2)
      {
        v54 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.texcoord", 12);
        std::to_string(&v105, ii);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v105;
        else
          v55 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        else
          v56 = v105.__r_.__value_.__l.__size_;
        v57 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
        v58 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v57, (uint64_t)" = mix(mix(a.texcoord", 21);
        std::to_string(&v104, ii);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v104;
        else
          v59 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v60 = v104.__r_.__value_.__l.__size_;
        v61 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
        v62 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v61, (uint64_t)", b.texcoord", 12);
        std::to_string(&v103, ii);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &v103;
        else
          v63 = (std::string *)v103.__r_.__value_.__r.__words[0];
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        else
          v64 = v103.__r_.__value_.__l.__size_;
        v65 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
        v66 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v65, (uint64_t)", UV.x), mix(c.texcoord", 23);
        std::to_string(&v102, ii);
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v102;
        else
          v67 = (std::string *)v102.__r_.__value_.__r.__words[0];
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
        else
          v68 = v102.__r_.__value_.__l.__size_;
        v69 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        v70 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v69, (uint64_t)", d.texcoord", 12);
        std::to_string(&v101, ii);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = &v101;
        else
          v71 = (std::string *)v101.__r_.__value_.__r.__words[0];
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        else
          v72 = v101.__r_.__value_.__l.__size_;
        v73 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v73, (uint64_t)", UV.x), UV.y); ", 16);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"out.color = mix(mix(a.color, b.color, UV.x), mix(c.color, d.color, UV.x), UV.y); ",
        81);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"#define OSD_USER_VARYING_DECLARE_ATTRIBUTE                   ", 61);
    v74 = 0;
    v75 = 11;
    do
    {
      if (C3DGeometryOsdGetTextureCoordinatesDataType(a2, v74) == 2)
      {
        v76 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"float2 texcoord", 15);
        std::to_string(&v105, v74);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &v105;
        else
          v77 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v78 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        else
          v78 = v105.__r_.__value_.__l.__size_;
        v79 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v76, (uint64_t)v77, v78);
        v80 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v79, (uint64_t)" [[attribute(", 13);
        std::to_string(&v104, v75);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v104;
        else
          v81 = (std::string *)v104.__r_.__value_.__r.__words[0];
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v82 = v104.__r_.__value_.__l.__size_;
        v83 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v83, (uint64_t)")]]; ", 5);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        ++v75;
      }
      ++v74;
    }
    while (v74 != 8);
    if (C3DGeometryOsdGetColorDataType(a2) == 2)
    {
      v84 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"float4 color [[attribute(", 25);
      std::to_string(&v105, v75);
      v85 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v105
          : (std::string *)v105.__r_.__value_.__r.__words[0];
      v86 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v105.__r_.__value_.__r.__words[2])
          : v105.__r_.__value_.__l.__size_;
      v87 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v87, (uint64_t)")]]; ", 5);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"\n", 1);
  }
  else
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"struct OsdInputVertexType { \n", 29);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"    metal::packed_float3 position; \n",
      36);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v107, (uint64_t)"}; \n", 4);
  }
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF28, CFSTR("VERTEX_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF40, CFSTR("PATCH_INDICES_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF58, CFSTR("CONTROL_INDICES_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF70, CFSTR("OSD_PATCHPARAM_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF88, CFSTR("OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEFA0, CFSTR("OSD_PERPATCHTESSFACTORS_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEFB8, CFSTR("OSD_VALENCE_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEFD0, CFSTR("OSD_QUADOFFSET_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEFE8, CFSTR("TRANSFORMS_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF000, CFSTR("TESSELLATION_LEVEL_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF58, CFSTR("INDICES_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF018, CFSTR("QUAD_TESSFACTORS_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEF88, CFSTR("OSD_PERPATCHVERTEXGREGORY_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF030, CFSTR("OSD_PATCH_INDEX_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF048, CFSTR("OSD_DRAWINDIRECT_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF060, CFSTR("OSD_KERNELLIMIT_BUFFER_INDEX"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (a1 >> 8) & 1), CFSTR("OSD_PATCH_ENABLE_SINGLE_CREASE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0), CFSTR("OSD_FRACTIONAL_EVEN_SPACING"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (a1 >> 16) & 1), CFSTR("OSD_FRACTIONAL_ODD_SPACING"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEEF8, CFSTR("OSD_MAX_TESS_LEVEL"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF078, CFSTR("USE_STAGE_IN"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (a1 & 0x10000) == 0), CFSTR("USE_PTVS_FACTORS"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF090, CFSTR("USE_PTVS_SHARPNESS"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", WORD2(a1)), CFSTR("THREADS_PER_THREADGROUP"));
  if (v99 / WORD2(a1) <= 1)
    v88 = 1;
  else
    v88 = v99 / WORD2(a1);
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v88), CFSTR("CONTROL_POINTS_PER_THREAD"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v99), CFSTR("VERTEX_CONTROL_POINTS_PER_PATCH"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF060, CFSTR("OSD_MAX_VALENCE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", (v98 + 3)), CFSTR("OSD_NUM_ELEMENTS"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF078, CFSTR("OSD_ENABLE_BACKPATCH_CULL"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF078, CFSTR("OSD_USE_PATCH_INDEX_BUFFER"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", (a1 >> 16) & 1), CFSTR("OSD_ENABLE_SCREENSPACE_TESSELLATION"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF078, CFSTR("OSD_ENABLE_PATCH_CULL"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF090, CFSTR("NEEDS_BARRIER"));
  if (v96 + 2 * v97)
  {
    objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", (v96 + 2 * v97)), CFSTR("OSD_FVAR_WIDTH"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", HasMultipleFaceVaryingChannels), CFSTR("OSD_FVAR_USES_MULTIPLE_CHANNELS"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0A8, CFSTR("OSD_FVAR_DATA_BUFFER_INDEX"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0C0, CFSTR("OSD_FVAR_INDICES_BUFFER_INDEX"));
    if (v94 <= 4)
    {
      objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEEF8, CFSTR("OSD_FVAR_PATCHPARAM_BUFFER_INDEX"));
      objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0D8, CFSTR("OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX"));
    }
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0A8, CFSTR("OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0C0, CFSTR("OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FEEF8, CFSTR("OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX"));
    objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0D8, CFSTR("OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX"));
  }
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF0F0, CFSTR("OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF108, CFSTR("OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetColorDataType(a2)), CFSTR("OSD_COLOR_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 0)), CFSTR("OSD_TEXCOORD0_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 1)), CFSTR("OSD_TEXCOORD1_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 2)), CFSTR("OSD_TEXCOORD2_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 3)), CFSTR("OSD_TEXCOORD3_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 4)), CFSTR("OSD_TEXCOORD4_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 5)), CFSTR("OSD_TEXCOORD5_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 6)), CFSTR("OSD_TEXCOORD6_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", C3DGeometryOsdGetTextureCoordinatesDataType(a2, 7)), CFSTR("OSD_TEXCOORD7_INTERPOLATION_MODE"));
  objc_msgSend(v100, "setObject:forKeyedSubscript:", &unk_1EA5FF078, CFSTR("C3D_OPTIMIZE_OPENSUBDIV_STORAGE"));
  v89 = (void *)MEMORY[0x1E0CB3940];
  std::stringbuf::str();
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &v105;
  else
    v90 = (std::string *)v105.__r_.__value_.__r.__words[0];
  v91 = objc_msgSend(v89, "stringWithCString:encoding:", v90, 4);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  v106[0] = *MEMORY[0x1E0DE4F50];
  v92 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v106 + *(_QWORD *)(v106[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v107[0] = v92;
  v107[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v108 < 0)
    operator delete((void *)v107[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D4178](&v109);
  return v91;
}

void sub_1DCDEB750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t C3DPatchTypeToOsdPatchType(int a1)
{
  if ((a1 - 1) >= 6)
    C3DPatchTypeToOsdPatchType();
  return dword_1DD02A290[(char)(a1 - 1)];
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1DCDEB9A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D4178](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0D4178](a1 + 128);
  return a1;
}

uint64_t C3DSubdivisionOsdGPUGetAllPossibleMacros(void *a1, const char *a2)
{
  return objc_msgSend(a1, "addObject:", CFSTR("USE_OPENSUBDIV"));
}

char *C3DGeometryOpenSubdivGetGPUContext(uint64_t a1, int a2, uint64_t a3)
{
  char *v6;
  BOOL v7;
  _BOOL4 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  char v19;
  int v20;
  BOOL HasFeatures;
  __int16 v22;
  uint64_t v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t RenderContext;
  SCNMTLResourceManager *v34;
  void *v35;
  uint64_t v37;
  _QWORD v38[7];
  __n128 v39;
  uint64_t v40;

  C3DSubdivInitializeIfNeeded();
  v6 = *(char **)(a1 + 168);
  if (v6)
    v7 = 1;
  else
    v7 = a2 == 0;
  if (v7)
  {
    if (!v6)
      return v6;
    v37 = a3;
    v8 = *((_QWORD *)v6 + 3) == 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 136))
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        C3DGeometryOpenSubdivGetGPUContext_cold_2(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    v39 = 0uLL;
    v40 = 0;
    C3DGeometryGetTessellator(a1, &v39);
    v17 = (v40 & 0x100) != 0 && *(_QWORD *)(a1 + 144) && *(_QWORD *)(a1 + 152) != 0;
    v18 = *(_BYTE *)(a1 + 136);
    v19 = *(_BYTE *)(a1 + 137);
    v20 = (BYTE1(v40) >> 1) & 1;
    v37 = a3;
    HasFeatures = C3DEngineContextHasFeatures(a3, 64);
    v22 = *(_WORD *)(a1 + 139);
    v23 = *(_QWORD *)(a1 + 152) ^ *(_QWORD *)(a1 + 144);
    v6 = (char *)malloc_type_malloc(0x20uLL, 0x10200404C916D5DuLL);
    *(_QWORD *)(a1 + 168) = v6;
    *v6 = v18;
    v6[1] = 0;
    v6[2] = v19;
    v6[3] = v17;
    v6[4] = v20;
    v6[5] = HasFeatures;
    v6[6] = 0;
    *(_WORD *)(v6 + 7) = v22;
    *((_DWORD *)v6 + 3) = 0;
    *(_DWORD *)(v6 + 9) = 0;
    v8 = 1;
    *((_QWORD *)v6 + 2) = v23;
    *((_QWORD *)v6 + 3) = 0;
  }
  if (v8 && a2 != 0)
  {
    if (!v37)
    {
      v25 = scn_default_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
        C3DEngineContextGetStats_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    RenderContext = C3DEngineContextGetRenderContext(v37);
    v38[0] = MEMORY[0x1E0C809B0];
    v38[1] = 3221225472;
    v38[2] = __C3DGeometryOpenSubdivGetGPUContext_block_invoke;
    v38[3] = &unk_1EA5A1200;
    v38[4] = RenderContext;
    v38[5] = a1;
    v38[6] = v6;
    v34 = (SCNMTLResourceManager *)-[SCNMTLRenderContext resourceManager](RenderContext);
    v35 = (void *)-[SCNMTLRenderContext commandQueue](RenderContext);
    *((_QWORD *)v6 + 3) = C3DSubdivisionOsdGPURuntimeDataCreateWithGeometry((__C3DGeometry *)a1, v37, v6, v34, v35, (uint64_t)v38);
  }
  return v6;
}

_QWORD *C3DSubdivisionOsdGPURuntimeDataCreateWithGeometry(__C3DGeometry *a1, uint64_t a2, _BYTE *a3, SCNMTLResourceManager *a4, void *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t Mesh;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *Refiner;
  int v35;
  uint64_t v36;
  MTLContext *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *v69;
  char v70;
  uint64_t Instance;
  uint64_t v72;
  int64_t v73;
  void *v74;
  id v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  id **v87;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v88;
  unsigned __int8 v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id *v94;
  OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  void *v99;
  MTLContext *v100;
  BOOL v101;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v102;
  const OpenSubdiv::v3_1_1::Far::StencilTable **v103;
  uint64_t v104;
  const OpenSubdiv::v3_1_1::Far::StencilTable *appended;
  uint64_t v106;
  uint64_t v107;
  OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *v108;
  id v109;
  uint64_t v110;
  unsigned __int32 v111;
  uint64_t v112;
  uint64_t v113;
  __n128 *v114;
  unsigned __int32 v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  int v119;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v120;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v121;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v122;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  __n128 *v127;
  id v128;
  unsigned __int32 v129;
  id v130;
  __C3DMesh *v131;
  const OpenSubdiv::v3_1_1::Far::PatchTable *v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  id *v136;
  SCNMTLResourceManager *v137;
  unsigned __int8 v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  id *v151;
  id *v152;
  uint64_t v153;
  int64_t v154;
  int v155;
  uint64_t v156;
  BOOL v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const void *v163;
  int Semantic;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  unsigned int v170;
  _QWORD *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  id *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t RenderCallbacks;
  uint64_t Hash;
  uint64_t v193;
  uint64_t v194;
  OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *v195;
  uint64_t v196;
  _BYTE *v197;
  unsigned int v198;
  __C3DGeometry *v199;
  OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *v200;
  id **v201;
  OpenSubdiv::v3_1_1::Far::StencilTableFactory *v202;
  void *v203;
  SCNMTLResourceManager *v204;
  __C3DMesh *v205;
  uint64_t **v206;
  unint64_t v207;
  uint64_t v208;
  id *v209;
  unint64_t v210;
  uint64_t v211;
  _QWORD v212[7];
  MTLContext v213;
  uint64_t v214;
  int v215;
  char *v216;
  char *v217;
  char *v218;
  id v219;
  unsigned __int32 v220;
  id **v221;
  void **v222[2];
  const OpenSubdiv::v3_1_1::Far::StencilTable **v223;
  int v224;
  OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *v225;
  uint64_t v226;
  MTLContext *v227;
  unsigned int v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  unsigned int v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  MTLContext v238;
  _QWORD v239[7];

  v203 = a5;
  v204 = a4;
  v197 = a3;
  v239[5] = *MEMORY[0x1E0C80C00];
  v199 = a1;
  C3DEntityGetName((uint64_t)a1);
  if (!a2
    || (v8 = C3DEngineContextGetRenderCallbacks(a2), !*(_QWORD *)(v8 + 24))
    || (v9 = v8,
        v10 = C3DSubdivisionOsdGPURuntimeDataGetHash(v199),
        (v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(a2, v10)) == 0)
    || (v13 = C3DSubdivisionOsdGPURuntimeDataCreateWithData(v11, v12, v197, v204, v203, a6)) == 0)
  {
    if (!v203)
    {
      v14 = scn_default_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
        C3DSubdivisionOsdGPURuntimeDataCreateWithData(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    os_variant_has_internal_diagnostics();
    v22 = (void *)objc_msgSend(v203, "commandBuffer");
    v239[0] = MEMORY[0x1E0C809B0];
    v239[1] = 3221225472;
    v239[2] = ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke;
    v239[3] = &unk_1EA5A1330;
    v239[4] = a6;
    objc_msgSend(v22, "addCompletedHandler:", v239);
    v23 = (void *)objc_msgSend(v22, "computeCommandEncoder");
    v238.var0 = (id)objc_msgSend(v203, "device");
    v238.var1 = v203;
    v238.var2 = v22;
    v238.var3 = v23;
    if (C3DGeometryInitSubdivTopologyInfoIfNeeded(v199))
    {
      Mesh = C3DGeometryGetMesh((uint64_t)v199);
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(&v199->var10.var0, Mesh);
      v196 = a2;
      v231 = 0u;
      v230 = 0u;
      v229 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      v236 = 0u;
      v237 = 0;
      C3DSubdivInitGPUPrimvarDescriptor((uint64_t)&v228, (uint64_t)&v199->var10, Mesh);
      v25 = 16 * v197[3];
      v26 = v197[6];
      v205 = (__C3DMesh *)Mesh;
      switch(v26)
      {
        case 2:
          v25 |= 0x100uLL;
          break;
        case 1:
          v25 |= 0x80uLL;
          break;
        case 0:
          v25 |= 0x40uLL;
          break;
      }
      v27 = DWORD2(v236);
      v28 = v236;
      v29 = v228;
      v30 = v232;
      v31 = *v197;
      v32 = v197[2];
      v211 = *((_QWORD *)&v233 + 1);
      v33 = v233;
      Refiner = C3DSubdivCreateRefiner((uint64_t)&v199->var10);
      v35 = ((v27 - v28) >> 6);
      v36 = 9;
      if (!(_DWORD)v32)
        v36 = 0;
      v202 = Refiner;
      v194 = v31;
      OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::Mesh((uint64_t)v222, (uint64_t)Refiner, (v30 + v29), 0, v31, v36 | (4 * (v35 != 0)) | v25, 0, (uint64_t)&v238);
      v38 = v196;
      v39 = v197[6];
      v200 = (OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *)v223;
      if (v39 == 2)
        v195 = (OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *)OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::Create((OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *)v223, &v238.var0, v37);
      else
        v195 = 0;
      v40 = *(unsigned int *)(**((_QWORD **)v202 + 11) + 8);
      v208 = v32;
      if (v211 == v33)
      {
        OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::UpdateData(v225, *((const float **)&v230 + 1), 0, v40, v227);
        v70 = v194;
        v69 = v195;
      }
      else
      {
        LODWORD(v209) = v35;
        v216 = 0;
        v217 = 0;
        v218 = 0;
        std::vector<float>::reserve((void **)&v216, (v40 * (v30 + v29)));
        if ((int)v40 >= 1)
        {
          LODWORD(v211) = 0;
          LODWORD(v210) = v40;
          do
          {
            if ((_DWORD)v29)
            {
              v41 = 0;
              v42 = v211 * v29;
              v43 = v217;
              do
              {
                v44 = (v42 + v41);
                v45 = *((_QWORD *)&v230 + 1);
                if (v43 >= v218)
                {
                  v47 = v216;
                  v48 = (v43 - v216) >> 2;
                  v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62)
                    abort();
                  v50 = v218 - v216;
                  if ((v218 - v216) >> 1 > v49)
                    v49 = v50 >> 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                    v51 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v51 = v49;
                  if (v51)
                  {
                    v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v218, v51);
                    v47 = v216;
                    v43 = v217;
                  }
                  else
                  {
                    v52 = 0;
                  }
                  v53 = &v52[4 * v48];
                  *(_DWORD *)v53 = *(_DWORD *)(v45 + 4 * v44);
                  v46 = v53 + 4;
                  while (v43 != v47)
                  {
                    v54 = *((_DWORD *)v43 - 1);
                    v43 -= 4;
                    *((_DWORD *)v53 - 1) = v54;
                    v53 -= 4;
                  }
                  v216 = v53;
                  v217 = v46;
                  v218 = &v52[4 * v51];
                  if (v47)
                    operator delete(v47);
                }
                else
                {
                  *(_DWORD *)v43 = *(_DWORD *)(*((_QWORD *)&v230 + 1) + 4 * v44);
                  v46 = v43 + 4;
                }
                v217 = v46;
                ++v41;
                v43 = v46;
              }
              while (v41 != v29);
            }
            if ((_DWORD)v30)
            {
              v55 = 0;
              v56 = v211 * v30;
              v57 = v217;
              do
              {
                v58 = (v56 + v55);
                v59 = *((_QWORD *)&v234 + 1);
                if (v57 >= v218)
                {
                  v61 = v216;
                  v62 = (v57 - v216) >> 2;
                  v63 = v62 + 1;
                  if ((unint64_t)(v62 + 1) >> 62)
                    abort();
                  v64 = v218 - v216;
                  if ((v218 - v216) >> 1 > v63)
                    v63 = v64 >> 1;
                  if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                    v65 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v65 = v63;
                  if (v65)
                  {
                    v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v218, v65);
                    v61 = v216;
                    v57 = v217;
                  }
                  else
                  {
                    v66 = 0;
                  }
                  v67 = &v66[4 * v62];
                  *(_DWORD *)v67 = *(_DWORD *)(v59 + 4 * v58);
                  v60 = v67 + 4;
                  while (v57 != v61)
                  {
                    v68 = *((_DWORD *)v57 - 1);
                    v57 -= 4;
                    *((_DWORD *)v67 - 1) = v68;
                    v67 -= 4;
                  }
                  v216 = v67;
                  v217 = v60;
                  v218 = &v66[4 * v65];
                  if (v61)
                    operator delete(v61);
                }
                else
                {
                  *(_DWORD *)v57 = *(_DWORD *)(*((_QWORD *)&v234 + 1) + 4 * v58);
                  v60 = v57 + 4;
                }
                v217 = v60;
                ++v55;
                v57 = v60;
              }
              while (v55 != v30);
            }
            v40 = v210;
            LODWORD(v211) = v211 + 1;
          }
          while ((_DWORD)v211 != (_DWORD)v210);
        }
        OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::UpdateData(v225, (const float *)v216, 0, v40, v227);
        v69 = v195;
        v38 = v196;
        LODWORD(v32) = v208;
        v70 = v194;
        v35 = (int)v209;
        if (v216)
        {
          v217 = v216;
          operator delete(v216);
        }
      }
      if (C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::onceToken != -1)
        dispatch_once(&C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::onceToken, &__block_literal_global_55);
      Instance = C3DTypeCreateInstance_(C3DSubdivisionOsdGPURuntimeDataGetTypeID(void)::typeID, 0x160uLL);
      *(_DWORD *)(Instance + 28) = *(_DWORD *)(**((_QWORD **)v222[1] + 11) + 8);
      *(_QWORD *)(Instance + 64) = (id)C3DRendererElementGetNode((uint64_t)v225);
      *(_QWORD *)(Instance + 72) = 0;
      *(_QWORD *)(Instance + 80) = 4 * (*(_DWORD *)v225 * *(_DWORD *)(Instance + 28));
      v72 = v226;
      v73 = *(_QWORD *)(v72 + 8) - *(_QWORD *)v72;
      *(_QWORD *)(Instance + 32) = v73 >> 4;
      v74 = malloc_type_malloc(v73, 0xE7C50F13uLL);
      *(_QWORD *)(Instance + 40) = v74;
      memcpy(v74, *(const void **)v72, v73);
      *(_QWORD *)(Instance + 48) = *(id *)(v226 + 24);
      v75 = *(id *)(v226 + 32);
      v211 = Instance;
      *(_QWORD *)(Instance + 56) = v75;
      v207 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v226 + 80) - *(_QWORD *)(v226 + 72)) >> 3);
      if (v35 != (_DWORD)v207)
      {
        v76 = scn_default_log();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
          C3DSubdivisionOsdGPURuntimeDataCreateWithGeometry(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      if ((_DWORD)v207)
      {
        v84 = (_QWORD *)operator new();
        v85 = (int)v207;
        std::vector<C3DSubdivisionOsdGPUPatchTable>::vector(v84, (int)v207);
        v86 = v211;
        *(_QWORD *)(v211 + 88) = v84;
        v206 = (uint64_t **)(v86 + 88);
        v201 = (id **)operator new();
        v87 = v201;
        std::vector<C3DSubdivisionOsdGPURefiner>::vector(v201, v85);
        v221 = v201;
        if ((int)v207 >= 1)
        {
          v88 = 0;
          v89 = 0;
          v198 = (16 * (v32 & 0xF)) | ((v70 & 0xF) << 6);
          v210 = v198;
          do
          {
            v90 = v89;
            v91 = v236;
            v92 = v236 + ((unint64_t)v89 << 6);
            if (*(_QWORD *)(v92 + 24) != *(_QWORD *)(v92 + 16))
            {
              v93 = **v206;
              if (0x6DB6DB6DB6DB6DB7 * (((*v206)[1] - v93) >> 3) <= v90)
                abort();
              v94 = v87[1];
              v209 = *v87;
              if (0x2E8BA2E8BA2E8BA3 * (v94 - v209) <= v90)
                abort();
              v95 = (OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *)*(unsigned int *)(v92 + 8);
              v96 = v226;
              v97 = *(_QWORD *)(v226 + 72) + 24 * v90;
              v98 = *(_QWORD *)(v97 + 8) - *(_QWORD *)v97;
              *(_QWORD *)(v93 + 56 * v90) = v98 >> 4;
              v99 = malloc_type_malloc(v98, 0x643597F7uLL);
              *(_QWORD *)(v93 + 56 * v90 + 8) = v99;
              memcpy(v99, *(const void **)v97, v98);
              *(_QWORD *)(v93 + 56 * v90 + 16) = *(id *)(*(_QWORD *)(v96 + 96) + 8 * v90);
              *(_QWORD *)(v93 + 56 * v90 + 24) = *(id *)(*(_QWORD *)(v96 + 120) + 8 * v90);
              v102 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create((uint64_t)v202, v210 & 0xFC00 | (unsigned __int16)v198 | 0x26 | (v90 << 32));
              v103 = (const OpenSubdiv::v3_1_1::Far::StencilTable **)*((_QWORD *)v200 + 25);
              v104 = (*((_QWORD *)v200 + 26) - (_QWORD)v103) >> 3;
              v210 = v210 & 0xFFFFFC00 | v198 | 0x26;
              if ((int)v104 >= 1
                && *v103
                && (appended = (const OpenSubdiv::v3_1_1::Far::StencilTable *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::AppendLocalPointStencilTableFaceVarying(v202, v102, *v103, v88, 1, v101)) != 0)
              {
                if (v102)
                  (*(void (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v102 + 8))(v102);
              }
              else
              {
                appended = v102;
              }
              v106 = v91 + (v90 << 6);
              v107 = ((*(_QWORD *)(v106 + 48) - *(_QWORD *)(v106 + 40)) >> 2) / v95;
              v108 = (OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *)OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::Create(v95, v107+ ((*((_QWORD *)appended + 3)- *((_QWORD *)appended + 2)) >> 2), &v238, v100);
              OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::UpdateData(v108, *(const float **)(v106 + 40), 0, v107, &v238);
              v109 = (id)C3DRendererElementGetNode((uint64_t)v108);
              v110 = v93 + 56 * v90;
              v111 = v107 * (_DWORD)v95;
              if ((_DWORD)v208)
                v112 = 0;
              else
                v112 = 4 * (v107 * (_DWORD)v95);
              *(_QWORD *)(v110 + 32) = v109;
              *(_QWORD *)(v110 + 40) = v112;
              v113 = v110 + 32;
              *(_QWORD *)(v113 + 16) = 4 * (v107 * (_DWORD)v95);
              OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable((OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)&v216, appended, &v238);
              v114 = (__n128 *)&v209[11 * v90];
              v114->n128_u64[0] = (unint64_t)v216;
              v114->n128_u64[1] = (unint64_t)v217;
              v114[1].n128_u64[0] = (unint64_t)v218;
              v114[1].n128_u64[1] = (unint64_t)v219;
              v115 = v220;
              v114[4].n128_u32[1] = v111;
              v114[3].n128_u32[2] = 0;
              v114[2].n128_u32[0] = v115;
              v114[3].n128_u32[3] = v95;
              v114[4].n128_u32[0] = v95;
              v114[4].n128_u32[2] = v95;
              v114[4].n128_u32[3] = v95;
              v114[2].n128_u64[1] = (unint64_t)*(id *)v113;
              v114[3].n128_u64[0] = (unint64_t)*(id *)v113;
              v214 = 0;
              v215 = 0;
              v114[5].n128_u64[0] = (unint64_t)-[SCNMTLResourceManager computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:](v204, "computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:", &v238, &v114[3].n128_i8[8], &v114[4].n128_u8[4], &v214, &v214);
              __C3DSubdivisionOsdGPURefine(v114, &v238);
              LODWORD(v32) = v208;
              if (v108)
              {
                OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::~CPUMTLVertexBuffer((id *)v108);
                MEMORY[0x1DF0D41C0]();
              }
              (*(void (**)(const OpenSubdiv::v3_1_1::Far::StencilTable *))(*(_QWORD *)appended + 8))(appended);
              OpenSubdiv::v3_1_1::Osd::MTLStencilTable::~MTLStencilTable((OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)&v216);
              v87 = v201;
            }
            v89 = v90 + 1;
            v88 = (const OpenSubdiv::v3_1_1::Far::StencilTable *)(v90 + 1);
          }
          while ((int)v207 > (v90 + 1));
          v69 = v195;
          v38 = v196;
          v70 = v194;
        }
      }
      else
      {
        v87 = 0;
        v116 = v211;
        *(_QWORD *)(v211 + 88) = 0;
        v206 = (uint64_t **)(v116 + 88);
        v221 = 0;
      }
      v201 = v87;
      if (v69)
      {
        *(_QWORD *)(v211 + 96) = *((id *)v69 + 1);
        v117 = *((id *)v69 + 2);
        v118 = v211;
        *(_QWORD *)(v211 + 104) = v117;
        *(_DWORD *)(v118 + 112) = *((_DWORD *)v69 + 6);
        v119 = *((_DWORD *)v69 + 7);
      }
      else
      {
        v118 = v211;
        *(_QWORD *)(v211 + 96) = 0;
        *(_QWORD *)(v118 + 104) = 0;
        v119 = -1;
        *(_DWORD *)(v118 + 112) = -1;
      }
      *(_DWORD *)(v118 + 116) = v119;
      v120 = v202;
      v121 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create((uint64_t)v202, ((v70 & 0xF) << 6) | (16 * v32) | 0xFFFFFFFF00000024);
      v122 = v223[16];
      if (v122
        && (v123 = (const OpenSubdiv::v3_1_1::Far::StencilTable *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::AppendLocalPointStencilTable(v202, v121, v122, (const OpenSubdiv::v3_1_1::Far::StencilTable *)1)) != 0)
      {
        if (v121)
          (*(void (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v121 + 8))(v121);
      }
      else
      {
        v123 = v121;
      }
      v124 = *(_DWORD *)v225;
      OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable((OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)&v216, v123, &v238);
      v125 = v211;
      v126 = v211;
      *(_QWORD *)(v211 + 144) = v216;
      v127 = (__n128 *)(v126 + 144);
      *(_QWORD *)(v125 + 152) = v217;
      *(_QWORD *)(v125 + 160) = v218;
      v128 = v219;
      *(_DWORD *)(v125 + 212) = *(_DWORD *)(v125 + 28) * v124;
      *(_QWORD *)(v125 + 168) = v128;
      v129 = v220;
      *(_DWORD *)(v125 + 200) = 0;
      *(_DWORD *)(v125 + 176) = v129;
      *(_DWORD *)(v125 + 204) = v124;
      *(_DWORD *)(v125 + 208) = v124;
      *(_DWORD *)(v125 + 216) = v124;
      *(_DWORD *)(v125 + 220) = v124;
      *(_QWORD *)(v125 + 184) = *(id *)(v125 + 64);
      *(_QWORD *)(v125 + 192) = *(id *)(v125 + 64);
      v214 = 0;
      v215 = 0;
      v130 = -[SCNMTLResourceManager computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:](v204, "computeEvaluatorWithContext:srcDesc:dstDesc:duDesc:dvDesc:", &v238, v125 + 200, v125 + 212, &v214, &v214);
      v131 = v205;
      v132 = v200;
      *(_QWORD *)(v211 + 224) = v130;
      if (v123)
        (*(void (**)(const OpenSubdiv::v3_1_1::Far::StencilTable *))(*(_QWORD *)v123 + 8))(v123);
      if (v195)
      {
        OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::~MTLLegacyGregoryPatchTable(v195);
        MEMORY[0x1DF0D41C0]();
      }
      __C3DSubdivisionOsdGPURefine(v127, &v238);
      *(_DWORD *)(v211 + 16) = 0;
      *(_QWORD *)(v211 + 120) = C3DSubdivComputeElementToPatchRangeTable(v120, v132, v131);
      if (v224 >= 13)
      {
        v133 = scn_default_log();
        if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
          C3DSubdivisionOsdGPURuntimeDataCreateWithGeometry(&v224, v133);
      }
      __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(v211, v197, v204, &v238.var0);
      __C3DSubdivisionOsdGPUCreateSynchronizeCoarsePositionsPipeline(v211, v199, v204, &v238.var0);
      v134 = objc_msgSend(v238.var3, "endEncoding");
      v238.var3 = 0;
      if ((int)v207 >= 2)
      {
        v202 = (OpenSubdiv::v3_1_1::Far::StencilTableFactory *)&v193;
        MEMORY[0x1E0C80A78](v134);
        v136 = (id *)((char *)&v193 - v135);
        v204 = v137;
        bzero((char *)&v193 - v135, (size_t)v137);
        v138 = 0;
        v139 = 0;
        v209 = v136;
        do
        {
          v140 = **v206;
          if (0x6DB6DB6DB6DB6DB7 * (((*v206)[1] - v140) >> 3) <= (unint64_t)v138)
            abort();
          v141 = v138;
          v142 = (uint64_t *)(v140 + 56 * v138);
          v143 = objc_msgSend((id)v142[4], "length");
          v144 = v140 + 56 * v141;
          v145 = *(_QWORD *)(v144 + 40);
          v146 = objc_msgSend(*(id *)(v144 + 16), "length");
          v147 = objc_msgSend(*(id *)(v140 + 56 * v141 + 24), "length");
          v148 = v143 - v145;
          v149 = *v142;
          v150 = v208;
          v151 = v209;
          v152 = &v209[5 * v141];
          v153 = v148 + v139;
          *(_DWORD *)v152 = v153;
          *((_DWORD *)v152 + 1) = v139;
          v154 = v153 + v146;
          v155 = v147 + v154;
          v156 = v147 + v154 + 16 * v149;
          v157 = v150 == 0;
          if (v150)
            v158 = v154;
          else
            v158 = 0;
          if (v157)
            v155 = 0;
          else
            v154 = v156;
          v210 = v154;
          *((_DWORD *)v152 + 3) = v158;
          *((_DWORD *)v152 + 4) = v155;
          v159 = v236 + (v141 << 6);
          *((_DWORD *)v152 + 2) = *(_DWORD *)(v159 + 8);
          v161 = *(_QWORD *)(v159 + 16);
          v160 = *(_QWORD *)(v159 + 24);
          v162 = (uint64_t)v205;
          if (v161 != v160)
          {
            while (1)
            {
              v163 = *(const void **)(v161 + 8);
              Semantic = C3DMeshSourceGetSemantic((uint64_t)v163);
              v165 = (char *)&v151[5 * v141 + 2] + 4;
              if (Semantic == 2)
                goto LABEL_121;
              if (Semantic == 3)
                break;
LABEL_122:
              v161 += 16;
              if (v161 == v160)
                goto LABEL_123;
            }
            v165 = (char *)&v151[5 * v141 + 2] + 2 * C3DMeshGetInputSetForSource(v162, v163, 0) + 6;
LABEL_121:
            *v165 = 1;
            v165[1] = *(_DWORD *)v161;
            goto LABEL_122;
          }
LABEL_123:
          v138 = v141 + 1;
          v139 = v210;
        }
        while ((int)v207 > (v141 + 1));
        v205 = 0;
        v166 = objc_msgSend(v238.var0, "newBufferWithBytes:length:options:", v151, v204);
        v167 = v211;
        *(_QWORD *)(v211 + 128) = v166;
        *(_QWORD *)(v167 + 136) = objc_msgSend(v238.var0, "newBufferWithLength:options:", v139, 32);
        v210 = objc_msgSend(v238.var2, "blitCommandEncoder");
        v168 = 0;
        do
        {
          v169 = **v206;
          if (0x6DB6DB6DB6DB6DB7 * (((*v206)[1] - v169) >> 3) <= (unint64_t)v168)
            abort();
          v170 = v168;
          v171 = (_QWORD *)(v169 + 56 * v168);
          v172 = (void *)v171[4];
          v173 = v171[5];
          v174 = *(_QWORD *)(v211 + 136);
          v175 = &v209[5 * v168];
          v176 = *((unsigned int *)v175 + 1);
          v177 = objc_msgSend(v172, "length");
          objc_msgSend((id)v210, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v172, v173, v174, v176, v177 - v171[5]);
          v178 = *(void **)(v169 + 56 * v170 + 16);
          v179 = *(_QWORD *)(v211 + 136);
          v180 = *(unsigned int *)v175;
          v181 = objc_msgSend(v178, "length");
          objc_msgSend((id)v210, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v178, 0, v179, v180, v181);
          if ((_DWORD)v208)
          {
            v182 = *(void **)(v169 + 56 * v170 + 24);
            v183 = *(_QWORD *)(v211 + 136);
            v184 = HIDWORD(v209[5 * v170 + 1]);
            v185 = objc_msgSend(v182, "length");
            objc_msgSend((id)v210, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v182, 0, v183, v184, v185);
            v186 = (void *)objc_msgSend(v238.var0, "newBufferWithBytes:length:options:", *(_QWORD *)(v169 + 56 * v170 + 8), 16 * *v171, v205);
            v187 = *(_QWORD *)(v211 + 136);
            v188 = LODWORD(v209[5 * v170 + 2]);
            v189 = objc_msgSend(v186, "length");
            objc_msgSend((id)v210, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v186, 0, v187, v188, v189);

          }
          v168 = v170 + 1;
        }
        while ((int)v207 > (v170 + 1));
        objc_msgSend((id)v210, "endEncoding");
        v38 = v196;
      }
      objc_msgSend(v238.var2, "commit");
      if (v38)
      {
        RenderCallbacks = C3DEngineContextGetRenderCallbacks(v38);
        if (*(_QWORD *)(RenderCallbacks + 32))
        {
          Hash = C3DSubdivisionOsdGPURuntimeDataGetHash(v199);
          v212[0] = MEMORY[0x1E0C809B0];
          v212[1] = 3221225472;
          v212[2] = ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke_355;
          v212[3] = &unk_1EA5A1358;
          v212[5] = v211;
          v212[6] = v201;
          v212[4] = v203;
          v213 = v238;
          (*(void (**)(uint64_t, uint64_t, _QWORD *))(RenderCallbacks + 32))(v38, Hash, v212);
        }
      }
      __C3DSubdivisionOsdGPUSetupAdditionalDataDestroy(&v221);
      C3DSceneSourcePerformConsistencyCheck(&v228);
      OpenSubdiv::v3_1_1::Osd::MTLStencilTable::~MTLStencilTable((OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)&v216);
      OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::~Mesh(v222);
      v222[0] = (void **)&v236;
      std::vector<C3DSubdivGPUFVarPrimvarData>::__destroy_vector::operator()[abi:nn180100](v222);
      if (*((_QWORD *)&v234 + 1))
      {
        *(_QWORD *)&v235 = *((_QWORD *)&v234 + 1);
        operator delete(*((void **)&v234 + 1));
      }
      v13 = (_QWORD *)v211;
      if ((_QWORD)v233)
      {
        *((_QWORD *)&v233 + 1) = v233;
        operator delete((void *)v233);
      }
      if (*((_QWORD *)&v230 + 1))
      {
        *(_QWORD *)&v231 = *((_QWORD *)&v230 + 1);
        operator delete(*((void **)&v230 + 1));
      }
      if ((_QWORD)v229)
      {
        *((_QWORD *)&v229 + 1) = v229;
        operator delete((void *)v229);
      }
    }
    else
    {
      return 0;
    }
  }
  return v13;
}

void sub_1DCDECDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::~Mesh((_QWORD *)(v1 + 320));
  C3DSubdivGPUPrimvarDescriptor::~C3DSubdivGPUPrimvarDescriptor((C3DSubdivGPUPrimvarDescriptor *)(v1 + 432));
  _Unwind_Resume(a1);
}

uint64_t C3DSubdivisionOsdGPUSynchroniseCoarseMeshForDeformers(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int32 a4)
{
  __n128 *v4;
  unsigned __int32 v5;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _BOOL4 IsVarying;
  char VaryingTextureCoordinatesCount;
  char v24;
  _QWORD v25[4];
  unint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  int64x2_t v33;
  int v34;
  unsigned __int32 v35;

  v4 = *(__n128 **)(result + 24);
  if (v4)
  {
    v5 = v4[1].n128_u32[0];
    if (!v5 || v5 != a4)
    {
      v9 = result;
      v4[1].n128_u32[0] = a4;
      v35 = v4[1].n128_u32[3];
      if (!v4[22].n128_u64[1])
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          C3DSubdivisionOsdGPUSynchroniseCoarseMeshForDeformers_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      v18 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v4[22].n128_i64[1]), "threadExecutionWidth");
      v19 = (void *)-[SCNMTLRenderContext commandQueue](a3);
      v20 = (_QWORD *)-[SCNMTLRenderContext resourceComputeEncoder](a3);
      bzero(v20, 0x678uLL);
      v21 = (void *)v20[207];
      objc_msgSend(v21, "setComputePipelineState:", -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v4[22].n128_i64[1]));
      IsVarying = C3DGeometryOsdGetColorIsVarying(v4[1].n128_u32[2]);
      VaryingTextureCoordinatesCount = C3DGeometryOsdGetVaryingTextureCoordinatesCount(v4[1].n128_u32[2]);
      if (IsVarying)
        v24 = 4;
      else
        v24 = 0;
      v34 = ((v24 + 2 * VaryingTextureCoordinatesCount) & 0xFE) + 3;
      objc_msgSend(v21, "setBuffer:offset:atIndex:", a2, 0, 0);
      objc_msgSend(v21, "setBuffer:offset:atIndex:", v4[4].n128_u64[0], 0, 1);
      objc_msgSend(v21, "setBuffer:offset:atIndex:", v4[22].n128_u64[0], 0, 2);
      objc_msgSend(v21, "setBytes:length:atIndex:", &v34, 4, 3);
      objc_msgSend(v21, "setBytes:length:atIndex:", &v35, 4, 4);
      if (*(_BYTE *)(v9 + 5))
      {
        v32 = v35;
        v33 = vdupq_n_s64(1uLL);
        v30 = v18;
        v31 = v33;
        objc_msgSend(v21, "dispatchThreads:threadsPerThreadgroup:", &v32, &v30);
      }
      else
      {
        v28 = (v18 + v35 - 1) / v18;
        v29 = vdupq_n_s64(1uLL);
        v26 = v18;
        v27 = v29;
        objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v28, &v26);
      }
      v25[0] = objc_msgSend(v19, "device");
      v25[1] = v19;
      v25[2] = 0;
      v25[3] = v21;
      return __C3DSubdivisionOsdGPURefine(v4 + 9, v25);
    }
  }
  return result;
}

BOOL C3DSubdivisionOsdGPURequiresTessellationFactorsInitialization(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  result = 0;
  if (*(_BYTE *)(a1 + 2))
  {
    v1 = *(_QWORD *)(a1 + 24);
    if (v1)
    {
      if (!*(_DWORD *)(v1 + 20))
        return 1;
    }
  }
  return result;
}

uint64_t C3DSubdivisionOsdGPUComputeTessellationFactors(uint64_t result, uint64_t a2, uint64_t a3, int a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  NSObject *v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int64x2_t v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  int64x2_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int64x2_t v40;
  int v41;
  char v42;
  _BYTE v43[7];
  char v44;
  char v45[3];
  float v46[3];

  if (*(_BYTE *)(result + 2))
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 24);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 20);
      if (!v7 || v7 != a4)
      {
        *(_DWORD *)(v6 + 20) = a4;
        LOBYTE(a5) = *(_BYTE *)(result + 1);
        v46[0] = (float)LODWORD(a5);
        v10 = (_QWORD *)-[SCNMTLRenderContext resourceComputeEncoder](a2);
        bzero(v10, 0x678uLL);
        v11 = (void *)v10[207];
        objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72), 5);
        objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 48), 0, 6);
        objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 56), 0, 8);
        objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 264), 0, 11);
        objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 232), 0, 19);
        objc_msgSend(v11, "setBytes:length:atIndex:", v46, 4, 13);
        result = objc_msgSend(v11, "setBytes:length:atIndex:", a3, 192, 22);
        if (*(_BYTE *)(v5 + 6) == 2)
        {
          objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 104), 0, 10);
          result = objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 96), 0, 9);
        }
        if (*(_QWORD *)(v6 + 32))
        {
          v12 = 0;
          v13 = 0;
          v29 = v43;
          v30 = vdupq_n_s64(1uLL);
          v31 = v5;
          do
          {
            v14 = (unsigned int *)(*(_QWORD *)(v6 + 40) + v12);
            v16 = *v14;
            v15 = v14[1];
            v18 = (int)v14[2];
            v17 = (int)v14[3];
            v19 = 4;
            switch((int)v16)
            {
              case 1:
                v19 = 1;
                break;
              case 2:
                v19 = 2;
                break;
              case 3:
                break;
              case 4:
                v19 = 3;
                break;
              case 6:
                objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 248), 0, 7);
                v19 = 16;
                break;
              case 7:
              case 8:
                objc_msgSend(v11, "setBuffer:offset:atIndex:", *(_QWORD *)(v6 + 248), 0, 7);
                if ((v16 - 7) >= 2)
                  goto LABEL_13;
                break;
              case 9:
                v19 = 20;
                break;
              default:
LABEL_13:
                v19 = 0xFFFF;
                break;
            }
            if ((_DWORD)v16 == 9)
              v20 = 4;
            else
              v20 = v19;
            v21 = v20 >> 5;
            if (v20 >> 5 <= 1)
              v21 = 1;
            v32 = v21;
            objc_msgSend(v11, "setBufferOffset:atIndex:", 12 * v17, 8, v29);
            objc_msgSend(v11, "setBufferOffset:atIndex:", 4 * v18, 6);
            objc_msgSend(v11, "setComputePipelineState:", -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](*(_QWORD *)(v6 + 8 * v16 + 272)));
            switch((int)v16)
            {
              case 0:
              case 1:
              case 2:
              case 5:
                v22 = scn_default_log();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                  __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(&v44, v45);
                goto LABEL_29;
              case 3:
              case 4:
                v23 = scn_default_log();
                if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                  __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(&v42, v29);
                goto LABEL_29;
              case 6:
                v24 = v15 * v19;
                objc_msgSend(v11, "setBufferOffset:atIndex:", *(unsigned __int16 *)(v6 + 240), 19);
                v25 = *(unsigned __int16 *)(v6 + 256);
                v26 = v11;
                v27 = 7;
                goto LABEL_35;
              case 7:
                v24 = 4 * v15;
                objc_msgSend(v11, "setBufferOffset:atIndex:", *(unsigned __int16 *)(v6 + 242), 19);
                objc_msgSend(v11, "setBufferOffset:atIndex:", *(unsigned __int16 *)(v6 + 258), 7);
                v28 = *(int *)(v6 + 112);
                goto LABEL_33;
              case 8:
                v24 = 4 * v15;
                objc_msgSend(v11, "setBufferOffset:atIndex:", *(unsigned __int16 *)(v6 + 244), 19);
                objc_msgSend(v11, "setBufferOffset:atIndex:", *(unsigned __int16 *)(v6 + 260), 7);
                v28 = *(int *)(v6 + 116);
LABEL_33:
                v25 = 4 * v28;
                v26 = v11;
                v27 = 10;
                goto LABEL_35;
              case 9:
                v24 = 4 * v15;
                v25 = *(unsigned __int16 *)(v6 + 246);
                v26 = v11;
                v27 = 19;
LABEL_35:
                objc_msgSend(v26, "setBufferOffset:atIndex:", v25, v27);
                break;
              default:
LABEL_29:
                v24 = 0;
                break;
            }
            v41 = v24;
            objc_msgSend(v11, "setBytes:length:atIndex:", &v41, 4, 12);
            if (*(_BYTE *)(v31 + 5))
            {
              v39 = v15 * v20;
              v40 = vdupq_n_s64(1uLL);
              v37 = xmmword_1DD02A2B0;
              v38 = 1;
              result = objc_msgSend(v11, "dispatchThreads:threadsPerThreadgroup:", &v39, &v37);
            }
            else
            {
              v36 = v30;
              v33 = xmmword_1DD02A2B0;
              v34 = 1;
              v35 = ((unint64_t)(v15 * v20 / v32) + 31) >> 5;
              result = objc_msgSend(v11, "dispatchThreadgroups:threadsPerThreadgroup:", &v35, &v33);
            }
            ++v13;
            v12 += 16;
          }
          while (v13 < *(_QWORD *)(v6 + 32));
        }
      }
    }
  }
  return result;
}

void C3DSubdivisionOsdGPUDraw(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v5;
  NSObject *v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  SCNMTLRenderCommandEncoder *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  NSObject *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned __int16 *v58;
  unint64_t v59;
  unsigned __int16 *v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  char v65[7];
  uint64_t *v66;
  uint64_t *v67;
  _QWORD *v68;
  char v69;
  char v70[3];
  unsigned int v71;
  float v72;
  unsigned int v73;

  v5 = *(_QWORD **)(a1 + 24);
  if (!v5)
    return;
  if (!__C3DSubdivisionOsdGPUHasPatchOfType(*(_QWORD *)(a1 + 24), a3))
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DSubdivisionOsdGPUDraw_cold_4(v11);
  }
  v12 = C3DPatchTypeToOsdPatchType(a3);
  v13 = (_QWORD *)v5[11];
  if (v13)
    v14 = -1227133513 * ((v13[1] - *v13) >> 3);
  else
    v14 = 0;
  v61 = v14;
  v73 = v14;
  v15 = -[SCNMTLRenderContext renderEncoder](a2);
  LODWORD(v16) = 1.0;
  objc_msgSend(*(id *)(v15 + 3392), "setTessellationFactorScale:", v16);
  v18 = v5[8];
  v19 = v5[6];
  if (!v18)
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DSubdivisionOsdGPUDraw_cold_3(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  v57 = v12 - 5;
  LOBYTE(v17) = *(_BYTE *)(a1 + 1);
  v72 = (float)v17;
  SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v18, 0, 5);
  SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v19, 0, 6);
  SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v15, &v72, 4uLL, 13);
  SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[33], 0, 11);
  SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[7], 0, 8);
  v63 = v13;
  if (v13)
  {
    if (v61 >= 2)
    {
      SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v15, &v73, 4uLL, 14);
      SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[16], 0, 15);
      v28 = v5 + 17;
LABEL_17:
      SCNMTLRenderCommandEncoder::setVertexBuffer(v15, *v28, 0, 16);
      goto LABEL_18;
    }
    v29 = (uint64_t **)v5[11];
    v30 = *v29;
    if (v29[1] == *v29)
LABEL_66:
      abort();
    SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v30[4], v30[5], 14);
    SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v30[2], 0, 15);
    if (v57 <= 4)
    {
      v28 = v30 + 3;
      goto LABEL_17;
    }
  }
LABEL_18:
  if (*(_BYTE *)(a1 + 6) == 2)
  {
    SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[13], 0, 10);
    SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[12], 0, 9);
  }
  v71 = 0;
  v31 = v5[4];
  if (v31)
  {
    LODWORD(v32) = 0;
    v33 = 0;
    v59 = a4;
    v62 = v12 - 6;
    v34 = (char *)v5 + 2 * v62;
    v60 = (unsigned __int16 *)(v34 + 240);
    v58 = (unsigned __int16 *)(v34 + 256);
    do
    {
      v35 = v5[5];
      if (*(_DWORD *)(v35 + 16 * v33) != v12)
        goto LABEL_64;
      if (v62 <= 2)
        SCNMTLRenderCommandEncoder::setVertexBuffer(v15, v5[31], 0, 7);
      v36 = v35 + 16 * v33;
      *(_QWORD *)(v15 + 216) = 12 * *(int *)(v36 + 12);
      objc_msgSend(*(id *)(v15 + 3392), "setVertexBufferOffset:atIndex:");
      *(_QWORD *)(v15 + 184) = 4 * *(int *)(v36 + 8);
      objc_msgSend(*(id *)(v15 + 3392), "setVertexBufferOffset:atIndex:");
      if (v63)
      {
        if (v61 >= 2)
        {
          v37 = &v71;
          v38 = (SCNMTLRenderCommandEncoder *)v15;
          v39 = 4;
LABEL_31:
          SCNMTLRenderCommandEncoder::setVertexBytes(v38, v37, v39, 17);
          goto LABEL_32;
        }
        v40 = *(_QWORD *)v5[11];
        if (*(_QWORD *)(v5[11] + 8) == v40)
          goto LABEL_66;
        v41 = *(_QWORD *)(v40 + 8) + 16 * v71;
        *(_QWORD *)(v15 + 328) = 4 * *(int *)(v41 + 8);
        objc_msgSend(*(id *)(v15 + 3392), "setVertexBufferOffset:atIndex:");
        if (v57 <= 4)
        {
          *(_QWORD *)(v15 + 344) = 12 * *(int *)(v41 + 12);
          objc_msgSend(*(id *)(v15 + 3392), "setVertexBufferOffset:atIndex:");
          v38 = (SCNMTLRenderCommandEncoder *)v15;
          v37 = (_DWORD *)v41;
          v39 = 16;
          goto LABEL_31;
        }
      }
LABEL_32:
      if ((v12 - 6) < 3)
      {
        *(_QWORD *)(v15 + 200) = *v58;
        objc_msgSend(*(id *)(v15 + 3392), "setVertexBufferOffset:atIndex:");
        objc_msgSend(*(id *)(v15 + 3392), "setTessellationFactorBuffer:offset:instanceStride:", v5[29], *v60, 0);
LABEL_39:
        v43 = *(_DWORD *)(v35 + 16 * v33 + 4);
        v44 = 4;
        switch(v12)
        {
          case 3:
          case 7:
          case 8:
            goto LABEL_44;
          case 4:
            v44 = 3;
            break;
          case 6:
            v44 = 16;
            break;
          default:
            goto LABEL_41;
        }
        goto LABEL_44;
      }
      if (v12 != 9)
      {
        if (v12 == 5)
        {
          v42 = scn_default_log();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(&v69, v70);
          v43 = *(_DWORD *)(v35 + 16 * v33 + 4);
LABEL_41:
          v44 = -1;
          goto LABEL_44;
        }
        goto LABEL_39;
      }
      objc_msgSend(*(id *)(v15 + 3392), "setTessellationFactorBuffer:offset:instanceStride:", v5[29], *v60, 0);
      v43 = *(_DWORD *)(v35 + 16 * v33 + 4);
      v44 = 20;
LABEL_44:
      v45 = (uint64_t *)v5[15];
      if (v45)
      {
        v46 = *v45;
        if (0xAAAAAAAAAAAAAAABLL * ((v45[1] - *v45) >> 3) <= v59)
          goto LABEL_66;
        v47 = *(_QWORD *)(v46 + 24 * v59);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v46 + 24 * v59 + 8) - v47) >> 3) <= v71)
          goto LABEL_66;
        std::vector<CFRange>::vector(&v66, v47 + 24 * v71);
      }
      else
      {
        v48 = v43;
        v49 = (uint64_t *)operator new(0x10uLL);
        v67 = v49 + 2;
        v68 = v49 + 2;
        *v49 = 0;
        v49[1] = v48;
        v66 = v49;
      }
      switch(v12)
      {
        case 0:
        case 1:
        case 2:
        case 5:
          v50 = scn_default_log();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            __C3DSubdivisionOsdGPURuntimeDataInitializePerPatchComputePipelines(&v64, v65);
          break;
        case 3:
          v52 = v66;
          v55 = v67;
          if (v66 == v67)
            goto LABEL_61;
          do
          {
            SCNMTLRenderCommandEncoder::drawPrimitives((SCNMTLRenderCommandEncoder *)v15, MTLPrimitiveTypeTriangle, 6 * *v52, 6 * v52[1], a5, 0);
            v52 += 2;
          }
          while (v52 != v55);
          break;
        case 4:
          v52 = v66;
          v56 = v67;
          if (v66 == v67)
            goto LABEL_61;
          do
          {
            SCNMTLRenderCommandEncoder::drawPrimitives((SCNMTLRenderCommandEncoder *)v15, MTLPrimitiveTypeTriangle, 3 * *v52, 3 * v52[1], a5, 0);
            v52 += 2;
          }
          while (v52 != v56);
          break;
        case 6:
        case 7:
        case 8:
        case 9:
          v52 = v66;
          v51 = v67;
          if (v66 == v67)
            goto LABEL_61;
          do
          {
            v53 = *v52;
            v54 = v52[1];
            SCNMTLRenderCommandEncoder::_bindPendingTextures((SCNMTLRenderCommandEncoder *)v15);
            SCNMTLRenderCommandEncoder::applyChangedStates((SCNMTLRenderCommandEncoder *)v15);
            objc_msgSend(*(id *)(v15 + 3392), "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", v44, v53, v54, 0, 0, *(unsigned int *)(v15 + 64) * (unint64_t)a5, 0);
            v52 += 2;
          }
          while (v52 != v51);
          break;
        default:
          break;
      }
      v52 = v66;
LABEL_61:
      if (v52)
      {
        v67 = v52;
        operator delete(v52);
      }
      LODWORD(v32) = v71;
      v31 = v5[4];
LABEL_64:
      v32 = (v32 + 1);
      v71 = v32;
      v33 = v32;
    }
    while (v31 > v32);
  }
}

void sub_1DCDEDBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t C3DOpenSubdivMetalVersion(void)
{
  return 65537;
}

__CFString *C3DGetPatchTypeDescription(int a1)
{
  int v1;

  v1 = a1 - 3;
  if ((a1 - 3) >= 7 || ((0x7Bu >> v1) & 1) == 0)
    C3DGetPatchTypeDescription();
  return off_1EA5A13E8[v1];
}

void ___ZL54_C3DSubdivisionOsdGPURuntimeDataCFCopyDebugDescriptionPKv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  id v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = objc_msgSend(*(id *)a2, "length");
  v5 = objc_msgSend(*(id *)(a2 + 8), "length");
  v6 = objc_msgSend(*(id *)(a2 + 16), "length");
  v7 = objc_msgSend(*(id *)(a2 + 24), "length");
  v8 = *(__CFString **)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v5 + v4 + v6 + v7;
  CFStringAppendFormat(v8, 0, CFSTR("\n  - Vertex stencil table (%d stencils)"), *(unsigned int *)(a2 + 32));
  v9 = *(__CFString **)(a1 + 40);
  v10 = *(id *)a2;
  v11 = C3DGetByteCountDescriptionFromSize(v4);
  CFStringAppendFormat(v9, 0, CFSTR("\n    - Sizes buffer: %p (%@)"), v10, v11);
  v12 = *(__CFString **)(a1 + 40);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = C3DGetByteCountDescriptionFromSize(v5);
  CFStringAppendFormat(v12, 0, CFSTR("\n    - Offsets buffer: %p (%@)"), v13, v14);
  v15 = *(__CFString **)(a1 + 40);
  v16 = *(_QWORD *)(a2 + 16);
  v17 = C3DGetByteCountDescriptionFromSize(v6);
  CFStringAppendFormat(v15, 0, CFSTR("\n    - Indices buffer: %p (%@)"), v16, v17);
  v18 = *(__CFString **)(a1 + 40);
  v19 = *(_QWORD *)(a2 + 24);
  v20 = C3DGetByteCountDescriptionFromSize(v7);
  CFStringAppendFormat(v18, 0, CFSTR("\n    - Weights buffer: %p (%@)"), v19, v20);
  v21 = objc_msgSend(*(id *)(a2 + 40), "length");
  v22 = objc_msgSend(*(id *)(a2 + 40), "length");
  v23 = *(__CFString **)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v22 + v21;
  CFStringAppend(v23, CFSTR("\n  - Vertex evalutor input"));
  v24 = *(__CFString **)(a1 + 40);
  v25 = *(_QWORD *)(a2 + 40);
  v26 = *(unsigned int *)(a2 + 56);
  v27 = *(unsigned int *)(a2 + 60);
  v28 = *(unsigned int *)(a2 + 64);
  v29 = C3DGetByteCountDescriptionFromSize(v21);
  CFStringAppendFormat(v24, 0, CFSTR("\n    - Src buffer: [offset:%d length:%d stride:%d] %p (%@)"), v26, v27, v28, v25, v29);
  v30 = *(__CFString **)(a1 + 40);
  v31 = *(_QWORD *)(a2 + 48);
  v32 = *(unsigned int *)(a2 + 68);
  v33 = *(unsigned int *)(a2 + 72);
  v34 = *(unsigned int *)(a2 + 76);
  v35 = C3DGetByteCountDescriptionFromSize(v22);
  CFStringAppendFormat(v30, 0, CFSTR("\n    - Dst buffer: [offset:%d length:%d stride:%d] %p (%@)"), v32, v33, v34, v31, v35);
}

void std::vector<CFRange>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *std::vector<std::vector<CFRange>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<CFRange>>::__vallocate[abi:nn180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *std::vector<std::vector<CFRange>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *std::vector<std::vector<std::vector<CFRange>>>::vector(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<CFRange>>::__vallocate[abi:nn180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<std::vector<CFRange>>::__init_with_size[abi:nn180100]<std::vector<CFRange>*,std::vector<CFRange>*>(v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DCDEE03C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<CFRange>>::__init_with_size[abi:nn180100]<std::vector<CFRange>*,std::vector<CFRange>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<CFRange>>::__vallocate[abi:nn180100](result, a4);
    return std::vector<std::vector<CFRange>>::__construct_at_end<std::vector<CFRange>*,std::vector<CFRange>*>(v6, a2, a3);
  }
  return result;
}

_QWORD *std::vector<std::vector<CFRange>>::__construct_at_end<std::vector<CFRange>*,std::vector<CFRange>*>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = std::vector<CFRange>::vector((_QWORD *)(v4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_1DCDEE0FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<CFRange>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<CFRange>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

_QWORD *std::vector<C3DSubdivisionOsdGPURefiner>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<C3DSubdivisionOsdGPURefiner>::__vallocate[abi:nn180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *std::vector<C3DSubdivisionOsdGPURefiner>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<C3DSubdivisionOsdGPURefiner>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<C3DSubdivisionOsdGPURefiner>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(88 * a2);
}

unint64_t C3DPatchTypeFromOsdPatchType(int a1)
{
  char v1;

  v1 = a1 - 3;
  if ((a1 - 3) >= 7 || ((0x7Bu >> v1) & 1) == 0)
    C3DPatchTypeFromOsdPatchType();
  return (0x6050403010201uLL >> (8 * v1)) & 7;
}

id ___ZL42__C3DSubdivisionGetOpenSubdivComputeSourceP21SCNMTLResourceManager_block_invoke()
{
  __C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::kC3DOpenSubdivComputeSource = (uint64_t)C3DGetTextResourceWithNameAllowingHotReload(CFSTR("C3D-OpenSubdiv_compute.metal"));
  __C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::kC3DOpenSubdivComputeSource = objc_msgSend((id)__C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::kC3DOpenSubdivComputeSource, "stringByReplacingOccurrencesOfString:withString:", CFSTR("#import \"scn_metal\""), C3DGetTextResourceWithNameAllowingHotReload(CFSTR("scn_metal")));
  return (id)__C3DSubdivisionGetOpenSubdivComputeSource(SCNMTLResourceManager *)::kC3DOpenSubdivComputeSource;
}

void __C3DSubdivisionOsdGPURefinerDestroy(id *a1)
{

}

void __C3DSubdivisionOsdGPUPatchTableDestroy(void **a1)
{
  free(a1[1]);

}

void std::vector<std::vector<std::vector<CFRange>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZL48C3DSubdivisionOsdGPUGetPerPatchTypeSources_Quadsv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(3);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_Quads(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL52C3DSubdivisionOsdGPUGetPerPatchTypeSources_Trianglesv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(4);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_Triangles(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL50C3DSubdivisionOsdGPUGetPerPatchTypeSources_Regularv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(6);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_Regular(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL50C3DSubdivisionOsdGPUGetPerPatchTypeSources_Gregoryv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(7);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_Gregory(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL58C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBoundaryv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(8);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBoundary(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZL55C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBasisv_block_invoke()
{
  id v0;
  void *p_p;
  void *__p;
  char v3;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  OpenSubdiv::v3_1_1::Osd::MTLPatchShaderSource::GetHullShaderSource(9);
  if (v3 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  C3DSubdivisionOsdGPUGetPerPatchTypeSources_GregoryBasis(void)::kSources = objc_msgSend(v0, "initWithCString:encoding:", p_p, 4);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1DCDEE790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t C3DSubdivisionOsdGPURuntimeDataGetHash(__C3DGeometry *a1)
{
  uint64_t Mesh;
  uint64_t v3;
  uint64_t v4;
  const __CFArray *ElementsCount;
  const __CFArray *v6;
  CFIndex i;
  const void *ElementAtIndex;
  char Type;
  const __CFData *Indexes;
  const __CFData *v11;
  const UInt8 *BytePtr;
  CC_LONG Length;
  uint64_t v14;
  char *v15;
  uint8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  _QWORD v24[5];
  _QWORD v25[5];
  CC_SHA256_CTX c;
  _DWORD v27[16];
  char v28;
  unsigned __int8 md[33];
  uint64_t v30;
  int8x16x2_t v31;

  v30 = *MEMORY[0x1E0C80C00];
  CC_SHA256_Init(&c);
  Mesh = C3DGeometryGetMesh((uint64_t)a1);
  v3 = Mesh;
  v4 = MEMORY[0x1E0C809B0];
  if (Mesh)
  {
    ElementsCount = C3DMeshGetElementsCount(Mesh);
    if ((uint64_t)ElementsCount >= 1)
    {
      v6 = ElementsCount;
      for (i = 0; (const __CFArray *)i != v6; ++i)
      {
        ElementAtIndex = C3DMeshGetElementAtIndex(v3, i, 0);
        Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
        if (C3DMeshElementTypeDefinesSurface(Type))
        {
          v27[0] = 0;
          Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)ElementAtIndex, v27);
          if (Indexes)
          {
            v11 = Indexes;
            BytePtr = CFDataGetBytePtr(Indexes);
            Length = CFDataGetLength(v11);
            CC_SHA256_Update(&c, BytePtr, Length);
          }
          v25[0] = v4;
          v25[1] = 3221225472;
          v25[2] = ___ZL38C3DSubdivisionOsdGPURuntimeDataGetHashP13__C3DGeometry_block_invoke;
          v25[3] = &__block_descriptor_40_e13_v24__0___qq_8l;
          v25[4] = &c;
          C3DMeshElementEnumeratePrimitiveRanges((uint64_t)ElementAtIndex, (uint64_t)v25);
        }
      }
    }
  }
  v24[0] = v4;
  v24[1] = 3221225472;
  v24[2] = ___ZL38C3DSubdivisionOsdGPURuntimeDataGetHashP13__C3DGeometry_block_invoke_2;
  v24[3] = &__block_descriptor_40_e201_v32__0____C3DMeshSource____C3DGenericSource____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DSourceAccessor________CFData__v_v_qb1b1b1_SCC_8c16q20C28l;
  v24[4] = &c;
  C3DMeshApplySources(v3, 0, (uint64_t)v24);
  CC_SHA256_Final(md, &c);
  v14 = 0;
  v15 = (char *)v27;
  v16.i64[0] = 0xA0A0A0A0A0A0A0A0;
  v16.i64[1] = 0xA0A0A0A0A0A0A0A0;
  v17.i64[0] = 0x3737373737373737;
  v17.i64[1] = 0x3737373737373737;
  v18.i64[0] = 0x3030303030303030;
  v18.i64[1] = 0x3030303030303030;
  v19.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v19.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v20.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v20.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  do
  {
    v21 = *(int8x16_t *)&md[v14];
    v31.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v16, (uint8x16_t)v21), v18, v17), (uint8x16_t)v21, 4uLL);
    v22 = vandq_s8(v21, v19);
    v31.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v20, (uint8x16_t)v22), v18, v17), v22);
    vst2q_s8(v15, v31);
    v15 += 32;
    v14 += 16;
  }
  while (v14 != 32);
  v28 = 0;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%s"), C3DGeometryGetName((uint64_t)a1), v27);
}

uint64_t ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  NSObject *v5;

  result = objc_msgSend(a2, "status");
  if (result != 4)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke_cold_1(a2);
    result = *(_QWORD *)(a1 + 32);
    if (result)
      return (*(uint64_t (**)(uint64_t, void *, _QWORD))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetFarPatchTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::UpdateVertexBuffer(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4)
{
  return OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::UpdateData(*(OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer **)(a1 + 32), a2, a3, a4, *(MTLContext **)(a1 + 104));
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetTopologyRefiner(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::BindVertexBuffer(uint64_t a1)
{
  return C3DRendererElementGetNode(*(_QWORD *)(a1 + 32));
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetVertexBuffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetPatchTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetMaxValence(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

CFTypeRef ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke_355(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  NSObject *v56;
  NSObject *v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned __int8 v66;
  void *v67;
  _QWORD v68[6];
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  __n128 (*v72)(uint64_t, uint64_t);
  uint64_t (*v73)();
  const char *v74;
  __int128 v75;
  __int128 v76;
  uint8_t buf[4];
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  v3 = a1[5];
  v4 = (void *)a1[9];
  v67 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 0);
  if (!v2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DSubdivisionOsdGPURuntimeDataCreateWithData(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v62 = v4;
  v69 = 0;
  v70 = &v69;
  v71 = 0x5012000000;
  v72 = __Block_byref_object_copy__5;
  v73 = __Block_byref_object_dispose__5;
  v74 = "c";
  v75 = 0u;
  v76 = 0u;
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 3221225472;
  v68[2] = ___ZL51__C3DSubdivisionOsdGPURuntimeDataCreateArchivedDataP33__C3DSubdivisionOsdGPURuntimeDataPK39C3DSubdivisionOsdGPUSetupAdditionalDataPU26objcproto15MTLCommandQueue11objc_objectPU27objcproto16MTLCommandBuffer11objc_object_block_invoke;
  v68[3] = &unk_1EA5A13A0;
  v68[4] = v2;
  v68[5] = &v69;
  objc_msgSend(v67, "encodeInt32:forKey:", 2, CFSTR("version"));
  objc_msgSend(v67, "encodeInt32:forKey:", *(unsigned int *)(v3 + 28), CFSTR("coarseVertexCount"));
  __C3DSubdivisionOsdGPURuntimeDataEncodePatchTable(v67, CFSTR("vertexPatchTable"), v3 + 32, (uint64_t)v68);
  v63 = v3;
  v13 = *(_QWORD **)(v3 + 88);
  if (v13)
  {
    v14 = (uint64_t)(v13[1] - *v13) >> 3;
    v15 = 0x6DB6DB6DB6DB6DB7 * v14;
    if (-1227133513 * (_DWORD)v14)
    {
      objc_msgSend(v67, "encodeInt32:forKey:", v15, objc_msgSend(CFSTR("fvarPatchTables"), "stringByAppendingString:", CFSTR(".count")));
      v16 = 0;
      v17 = 0;
      while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13[1] - *v13) >> 3) > v17)
      {
        __C3DSubdivisionOsdGPURuntimeDataEncodePatchTable(v67, (void *)objc_msgSend(CFSTR("fvarPatchTables"), "stringByAppendingFormat:", CFSTR(".[%d]"), v17++), *v13 + v16, (uint64_t)v68);
        v16 += 56;
        if (v15 == v17)
          goto LABEL_9;
      }
LABEL_47:
      abort();
    }
  }
LABEL_9:
  if (*(_QWORD *)(v63 + 96) && *(_QWORD *)(v63 + 104))
  {
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v67, objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".vertexValenceBuffer")), *(void **)(v63 + 96), (uint64_t)v68, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v67, objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBuffer")), *(void **)(v63 + 104), (uint64_t)v68, 0);
    objc_msgSend(v67, "encodeInt32:forKey:", *(unsigned int *)(v63 + 112), objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBaseGregory")));
    objc_msgSend(v67, "encodeInt32:forKey:", *(unsigned int *)(v63 + 116), objc_msgSend(CFSTR("legacyGregoryPatchTable"), "stringByAppendingString:", CFSTR(".quadOffsetsBaseGregoryBoundary")));
  }
  v18 = *(uint64_t ***)(v63 + 120);
  if (v18)
  {
    v20 = *v18;
    v19 = v18[1];
    v22 = **v18;
    v21 = (*v18)[1];
    objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingString:", CFSTR(".elementCount"));
    v65 = -1431655765 * ((unint64_t)((char *)v19 - (char *)v20) >> 3);
    objc_msgSend(v67, "encodeInt32:forKey:");
    objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingString:", CFSTR(".patchArrayCount"));
    v64 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 3);
    objc_msgSend(v67, "encodeInt32:forKey:");
    if (v65)
    {
      v23 = 0;
      v66 = 0;
      while (!(_DWORD)v64)
      {
LABEL_20:
        v23 = ++v66;
        if (v66 >= v65)
          goto LABEL_21;
      }
      v24 = 0;
      v25 = 0;
      while (0xAAAAAAAAAAAAAAABLL * (v18[1] - *v18) > v66)
      {
        v27 = &(*v18)[3 * v66];
        v26 = *v27;
        if (0xAAAAAAAAAAAAAAABLL * ((v27[1] - *v27) >> 3) <= v25)
          break;
        objc_msgSend(v67, "encodeBytes:length:forKey:", *(_QWORD *)(v26 + v24), *(_QWORD *)(v26 + v24 + 8) - *(_QWORD *)(v26 + v24), objc_msgSend(CFSTR("patchRangesTable"), "stringByAppendingFormat:", CFSTR(".[%d][%d]"), v23, v25++));
        v24 += 24;
        if (v64 == v25)
          goto LABEL_20;
      }
      goto LABEL_47;
    }
  }
LABEL_21:
  __C3DSubdivisionOsdGPURuntimeDataEncodeRefiner((uint64_t)v67, CFSTR("vertexRefiner"), v63 + 144, (uint64_t)v68);
  v28 = (_QWORD *)a1[6];
  if (v28)
  {
    v29 = (uint64_t)(v28[1] - *v28) >> 3;
    v30 = 0x2E8BA2E8BA2E8BA3 * v29;
    if (-1171354717 * (_DWORD)v29)
    {
      objc_msgSend(v67, "encodeInt32:forKey:", v30, objc_msgSend(CFSTR("fvarRefiners"), "stringByAppendingString:", CFSTR(".count")));
      v31 = 0;
      v32 = 0;
      while (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v28[1] - *v28) >> 3) > v32)
      {
        __C3DSubdivisionOsdGPURuntimeDataEncodeRefiner((uint64_t)v67, (void *)objc_msgSend(CFSTR("fvarRefiners"), "stringByAppendingFormat:", CFSTR(".[%d]"), v32++), *v28 + v31, (uint64_t)v68);
        v31 += 88;
        if (v30 == v32)
          goto LABEL_26;
      }
      goto LABEL_47;
    }
  }
LABEL_26:
  __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v67, (uint64_t)CFSTR("skinMorphSubdivIndexToMetalIndexBuffer"), *(void **)(v63 + 352), (uint64_t)v68, 0);
  v33 = *(_QWORD *)(v63 + 360);
  if (v33)
    objc_msgSend(v67, "encodeObject:forKey:", objc_msgSend((id)-[SCNMTLResourceManager commandQueue](v33), "name"), CFSTR("synchronizeCoarsePositionsPipeline.functionName"));
  __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v67, (uint64_t)CFSTR("fvarChannelDescriptorsBuffer"), *(void **)(v63 + 128), (uint64_t)v68, 0);
  __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v67, (uint64_t)CFSTR("fvarChannelsPackedDataBuffer"), *(void **)(v63 + 136), (uint64_t)v68, 0);
  if (!v70[6])
    goto LABEL_37;
  if (!v70[9])
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke_355_cold_2(v34, v35, v36, v37, v38, v39, v40, v41);
  }
  if (!v70[8])
  {
    v42 = scn_default_log();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      ___ZL49C3DSubdivisionOsdGPURuntimeDataCreateWithGeometryP13__C3DGeometryP18__C3DEngineContextRK36C3DSubdivisionOsdGPUSubdivParametersP21SCNMTLResourceManagerPU26objcproto15MTLCommandQueue11objc_objectU13block_pointerFvPU27objcproto16MTLCommandBuffer11objc_objectbE_block_invoke_355_cold_1(v42, v43, v44, v45, v46, v47, v48, v49);
  }
  objc_msgSend((id)v70[9], "endEncoding");
  objc_msgSend((id)v70[8], "commit");
  objc_msgSend((id)v70[8], "waitUntilCompleted");
  if (objc_msgSend(v62, "status") != 4)
  {
    v51 = scn_default_log();
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      goto LABEL_41;
    v52 = objc_msgSend(v62, "status");
    v53 = objc_msgSend(v62, "error");
    v54 = objc_msgSend(v62, "logs");
    *(_DWORD *)buf = 67109634;
    v78 = v52;
    v79 = 2112;
    v80 = v53;
    v81 = 2112;
    v82 = v54;
    v55 = "Error: OpenSubdiv archiver dependency command buffer execution failed with status %d, error: %@\n%@";
    v56 = v51;
LABEL_46:
    _os_log_error_impl(&dword_1DCCB8000, v56, OS_LOG_TYPE_ERROR, v55, buf, 0x1Cu);
    goto LABEL_41;
  }
  if (objc_msgSend((id)v70[8], "status") == 4)
  {
LABEL_37:
    v50 = (id)objc_msgSend(v67, "encodedData");
    goto LABEL_42;
  }
  v57 = scn_default_log();
  if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
  {
    v59 = objc_msgSend((id)v70[8], "status");
    v60 = objc_msgSend((id)v70[8], "error");
    v61 = objc_msgSend((id)v70[8], "logs");
    *(_DWORD *)buf = 67109634;
    v78 = v59;
    v79 = 2112;
    v80 = v60;
    v81 = 2112;
    v82 = v61;
    v55 = "Error: OpenSubdiv archiver command buffer execution failed with status %d, error: %@\n%@";
    v56 = v57;
    goto LABEL_46;
  }
LABEL_41:
  v50 = 0;
LABEL_42:

  _Block_object_dispose(&v69, 8);
  if (v50)
    return CFAutorelease(v50);
  else
    return 0;
}

void sub_1DCDEF29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void C3DSubdivGPUPrimvarDescriptor::~C3DSubdivGPUPrimvarDescriptor(C3DSubdivGPUPrimvarDescriptor *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = (void **)((char *)this + 112);
  std::vector<C3DSubdivGPUFVarPrimvarData>::__destroy_vector::operator()[abi:nn180100](&v6);
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

uint64_t ___ZL38C3DSubdivisionOsdGPURuntimeDataGetHashP13__C3DGeometry_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 32), v4, 0x10u);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::Mesh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned int v10;
  int v11;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  MTLContext *v16;
  int v17;
  unsigned int v18;
  char v20;

  *(_QWORD *)a1 = &off_1EA598488;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a8;
  if (!a2)
    OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::Mesh();
  v9 = a5;
  v10 = a4;
  v11 = a3;
  if ((a6 & 1) != 0)
    OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineAdaptive((unsigned int *)a2, (16 * (_DWORD)a6) & 0x300 | a5 & 0xF | (((a6 >> 3) & 1) << 10) | 0xF0, a3, a4, a5, a6, a7, a8, v20);
  else
    OpenSubdiv::v3_1_1::Far::TopologyRefiner::RefineUniform((unsigned int *)a2, a5 & 0xF | (32* ((int)((*(_QWORD *)(**(_QWORD **)(a2 + 40) + 464)- *(_QWORD *)(**(_QWORD **)(a2 + 40) + 456)) >> 3) > 0)), a3, a4, a5, a6, a7, a8, v20);
  OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::initializeContext(a1, v11, v10, v9, a6);
  v13 = (a6 & 2) == 0;
  if ((a6 & 2) != 0)
    v14 = v10;
  else
    v14 = 0;
  v15 = v14 + v11;
  if (v13)
    v16 = (MTLContext *)v10;
  else
    v16 = 0;
  if (v13)
    v17 = 0;
  else
    v17 = v11;
  if (v13)
    v18 = v10;
  else
    v18 = v14 + v11;
  OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::initializeVertexBuffers(a1, *(_DWORD *)(a1 + 24), (OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *)(v14 + v11), v16);
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  *(_DWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 60) = v17;
  *(_DWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v18;
  return a1;
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::initializeContext(uint64_t a1, int a2, int a3, char a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v10;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v11;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v12;
  uint64_t v13;
  uint64_t v14;
  OpenSubdiv::v3_1_1::Far::PatchTable *v15;
  const OpenSubdiv::v3_1_1::Far::StencilTable *v16;
  uint64_t appended;
  uint64_t v18;
  uint64_t v19;
  const OpenSubdiv::v3_1_1::Far::TopologyRefiner *v20;
  OpenSubdiv::v3_1_1::Osd::MTLPatchTable *v21;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::initializeContext();
  v10 = ~(16 * *(unsigned __int8 *)(v6 + 8)) & 0x10;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create(v6, v10 | 0x2A4);
  if (a3 < 1)
    v12 = 0;
  else
    v12 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)OpenSubdiv::v3_1_1::Far::StencilTableFactory::Create(*(_QWORD *)(a1 + 8), v10 | 0x2A5);
  v13 = -4294956288;
  v14 = -4294956032;
  if ((a5 & 0x100) == 0)
    v14 = -4294956288;
  if ((a5 & 0x80) == 0)
    v13 = v14;
  if ((a5 & 0x40) != 0)
    v13 = -4294956544;
  v15 = OpenSubdiv::v3_1_1::Far::PatchTableFactory::Create(*(_QWORD *)(a1 + 8), (((_DWORD)a5 << 10) & 0x3000 | (16 * (a4 & 0xF)) | (a5 >> 2) & 0xC) ^ v13, 0);
  *(_QWORD *)(a1 + 16) = v15;
  v16 = (const OpenSubdiv::v3_1_1::Far::StencilTable *)*((_QWORD *)v15 + 16);
  if (!v16)
  {
    v18 = (uint64_t)v11;
    goto LABEL_24;
  }
  appended = OpenSubdiv::v3_1_1::Far::StencilTableFactory::AppendLocalPointStencilTable(*(OpenSubdiv::v3_1_1::Far::StencilTableFactory **)(a1 + 8), v11, v16, (const OpenSubdiv::v3_1_1::Far::StencilTable *)1);
  if (!appended)
  {
    v18 = (uint64_t)v11;
    if (!v12)
      goto LABEL_24;
    goto LABEL_22;
  }
  v18 = appended;
  if (v11)
    (*(void (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v11 + 8))(v11);
  if (v12)
  {
LABEL_22:
    v19 = OpenSubdiv::v3_1_1::Far::StencilTableFactory::AppendLocalPointStencilTable(*(OpenSubdiv::v3_1_1::Far::StencilTableFactory **)(a1 + 8), v12, *(const OpenSubdiv::v3_1_1::Far::StencilTable **)(*(_QWORD *)(a1 + 16) + 136), (const OpenSubdiv::v3_1_1::Far::StencilTable *)1);
    if (v19)
    {
      v20 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v19;
      (*(void (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v12 + 8))(v12);
      v12 = v20;
    }
  }
LABEL_24:
  v21 = *(OpenSubdiv::v3_1_1::Osd::MTLPatchTable **)(a1 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)v21;
  *(_QWORD *)(a1 + 96) = OpenSubdiv::v3_1_1::Osd::MTLPatchTable::Create(v21, *(MTLContext **)(a1 + 104), (MTLContext *)v16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v18 + 8) + ((*(_QWORD *)(v18 + 24) - *(_QWORD *)(v18 + 16)) >> 2);
  *(_QWORD *)(a1 + 72) = OpenSubdiv::v3_1_1::Osd::MTLStencilTable::Create<OpenSubdiv::v3_1_1::Far::StencilTable const,OpenSubdiv::v3_1_1::Osd::MTLContext *>((const OpenSubdiv::v3_1_1::Far::StencilTable *)v18, *(MTLContext **)(a1 + 104));
  if (v12)
  {
    *(_QWORD *)(a1 + 80) = OpenSubdiv::v3_1_1::Osd::MTLStencilTable::Create<OpenSubdiv::v3_1_1::Far::StencilTable const,OpenSubdiv::v3_1_1::Osd::MTLContext *>(v12, *(MTLContext **)(a1 + 104));
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
    v12 = (const OpenSubdiv::v3_1_1::Far::TopologyRefiner *)v18;
  }
  return (*(uint64_t (**)(const OpenSubdiv::v3_1_1::Far::TopologyRefiner *))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::initializeVertexBuffers(uint64_t result, int a2, OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *this, MTLContext *a4)
{
  uint64_t v6;

  v6 = result;
  if ((_DWORD)this)
  {
    result = OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::Create(this, a2, *(MTLContext **)(result + 104), a4);
    *(_QWORD *)(v6 + 32) = result;
  }
  if ((_DWORD)a4)
  {
    result = OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::Create((OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer *)a4, a2, *(MTLContext **)(v6 + 104), a4);
    *(_QWORD *)(v6 + 40) = result;
  }
  return result;
}

void OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::~Mesh(_QWORD *a1)
{
  OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::~Mesh(a1);
  JUMPOUT(0x1DF0D41C0);
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetNumVertices(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void *OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::UpdateVaryingBuffer(uint64_t a1, const float *a2, uint64_t a3, uint64_t a4)
{
  return OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::UpdateData(*(OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer **)(a1 + 40), a2, a3, a4, *(MTLContext **)(a1 + 104));
}

BOOL OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::Refine(uint64_t a1)
{
  int v2;
  void **v3;
  _BOOL8 result;
  void **v5;
  uint64_t v6;
  BufferDescriptor v7;
  BufferDescriptor v8;
  BufferDescriptor v9;
  BufferDescriptor v10;

  v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 88) + 8);
  v10 = *(BufferDescriptor *)(a1 + 48);
  v9 = *(BufferDescriptor *)(a1 + 48);
  v9.var0 += v9.var2 * v2;
  v3 = OpenSubdiv::v3_1_1::Osd::GetEvaluator<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLContext *>(*(void ***)(a1 + 88), &v10, &v9, *(MTLContext **)(a1 + 104));
  result = OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(*(_QWORD *)(a1 + 32), &v10, *(_QWORD *)(a1 + 32), &v9, *(__n128 **)(a1 + 72), (uint64_t)v3, *(MTLContext **)(a1 + 104));
  if (*(int *)(a1 + 64) >= 1)
  {
    v8 = *(BufferDescriptor *)(a1 + 60);
    v7 = *(BufferDescriptor *)(a1 + 60);
    v7.var0 += v7.var2 * v2;
    v5 = OpenSubdiv::v3_1_1::Osd::GetEvaluator<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLContext *>(*(void ***)(a1 + 88), &v8, &v7, *(MTLContext **)(a1 + 104));
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
      v6 = *(_QWORD *)(a1 + 32);
    return OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(v6, &v8, v6, &v7, *(__n128 **)(a1 + 80), (uint64_t)v5, *(MTLContext **)(a1 + 104));
  }
  return result;
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::Synchronize(uint64_t a1)
{
  return C3DSceneSourcePerformConsistencyCheck(*(_QWORD *)(a1 + 104));
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::BindVaryingBuffer(uint64_t a1)
{
  return C3DRendererElementGetNode(*(_QWORD *)(a1 + 40));
}

uint64_t OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::GetVaryingBuffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

OpenSubdiv::v3_1_1::Osd::MTLStencilTable *OpenSubdiv::v3_1_1::Osd::MTLStencilTable::Create<OpenSubdiv::v3_1_1::Far::StencilTable const,OpenSubdiv::v3_1_1::Osd::MTLContext *>(const OpenSubdiv::v3_1_1::Far::StencilTable *a1, MTLContext *a2)
{
  OpenSubdiv::v3_1_1::Osd::MTLStencilTable *v4;

  v4 = (OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)operator new();
  OpenSubdiv::v3_1_1::Osd::MTLStencilTable::MTLStencilTable(v4, a1, a2);
  return v4;
}

void sub_1DCDEF90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x1080C40ADB4D971);
  _Unwind_Resume(a1);
}

void **OpenSubdiv::v3_1_1::Osd::GetEvaluator<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLContext *>(void **result, const BufferDescriptor *a2, BufferDescriptor *a3, MTLContext *a4)
{
  BufferDescriptor v4;
  BufferDescriptor v5;

  if (result)
  {
    *(_QWORD *)&v5.var0 = 0;
    v5.var2 = 0;
    *(_QWORD *)&v4.var0 = 0;
    v4.var2 = 0;
    return (void **)OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::GetEvaluator<OpenSubdiv::v3_1_1::Osd::MTLContext>(result, a2, a3, &v5, &v4, a4);
  }
  return result;
}

BOOL OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(uint64_t a1, BufferDescriptor *this, uint64_t a3, BufferDescriptor *a4, __n128 *a5, uint64_t a6, MTLContext *a7)
{
  uint64_t v14;
  OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *v15;
  _BOOL8 v16;
  BufferDescriptor v17;
  BufferDescriptor v18;

  if (a6)
    return OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(a6, a1, this, a3, &a4->var0, a5, a7);
  *(_QWORD *)&v18.var0 = 0;
  v18.var2 = 0;
  *(_QWORD *)&v17.var0 = 0;
  v17.var2 = 0;
  v14 = OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create(this, a4, &v18, &v17, a7, 0);
  if (!v14)
    return 0;
  v15 = (OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable *)v14;
  v16 = OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(v14, a1, this, a3, &a4->var0, a5, a7);
  OpenSubdiv::v3_1_1::Osd::MTLLegacyGregoryPatchTable::~MTLLegacyGregoryPatchTable(v15);
  MEMORY[0x1DF0D41C0]();
  return v16;
}

uint64_t OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::GetEvaluator<OpenSubdiv::v3_1_1::Osd::MTLContext>(void **a1, const BufferDescriptor *this, BufferDescriptor *a3, BufferDescriptor *a4, BufferDescriptor *a5, MTLContext *a6)
{
  char *v11;
  char *v12;
  int var2;
  int var1;
  int var0;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v55[32];
  __int128 v56;

  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (*a1 == v12)
  {
LABEL_43:
    v38 = OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::Create(this, a3, a4, a5, a6, a6);
    *(_QWORD *)v55 = *(_QWORD *)&this->var0;
    *(_DWORD *)&v55[8] = this->var2;
    *(_QWORD *)&v55[12] = *(_QWORD *)&a3->var0;
    *(_DWORD *)&v55[20] = a3->var2;
    *(_QWORD *)&v55[24] = *(_QWORD *)&a4->var0;
    LODWORD(v56) = a4->var2;
    HIDWORD(v56) = a5->var2;
    *(_QWORD *)((char *)&v56 + 4) = *(_QWORD *)&a5->var0;
    v39 = (char *)a1[2];
    v40 = (char *)a1[1];
    if (v40 >= v39)
    {
      v42 = 0x6DB6DB6DB6DB6DB7 * ((v40 - (_BYTE *)*a1) >> 3);
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) > 0x492492492492492)
        abort();
      v44 = 0x6DB6DB6DB6DB6DB7 * ((v39 - (_BYTE *)*a1) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x249249249249249)
        v45 = 0x492492492492492;
      else
        v45 = v43;
      if (v45)
        v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::Entry>>((uint64_t)(a1 + 2), v45);
      else
        v46 = 0;
      v47 = &v46[56 * v42];
      v48 = &v46[56 * v45];
      *(_OWORD *)v47 = *(_OWORD *)v55;
      *((_OWORD *)v47 + 1) = *(_OWORD *)&v55[16];
      *((_OWORD *)v47 + 2) = v56;
      *((_QWORD *)v47 + 6) = v38;
      v41 = v47 + 56;
      v50 = (char *)*a1;
      v49 = (char *)a1[1];
      if (v49 != *a1)
      {
        do
        {
          v51 = *(_OWORD *)(v49 - 56);
          v52 = *(_OWORD *)(v49 - 40);
          v53 = *(_OWORD *)(v49 - 24);
          *((_QWORD *)v47 - 1) = *((_QWORD *)v49 - 1);
          *(_OWORD *)(v47 - 24) = v53;
          *(_OWORD *)(v47 - 40) = v52;
          *(_OWORD *)(v47 - 56) = v51;
          v47 -= 56;
          v49 -= 56;
        }
        while (v49 != v50);
        v49 = (char *)*a1;
      }
      *a1 = v47;
      a1[1] = v41;
      a1[2] = v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)v55;
      *((_OWORD *)v40 + 1) = *(_OWORD *)&v55[16];
      *((_OWORD *)v40 + 2) = v56;
      *((_QWORD *)v40 + 6) = v38;
      v41 = v40 + 56;
    }
    a1[1] = v41;
  }
  else
  {
    var1 = this->var1;
    var2 = this->var2;
    var0 = this->var0;
    v17 = a3->var1;
    v16 = a3->var2;
    v18 = a3->var0;
    v19 = a4->var1;
    v20 = a4->var2;
    v21 = a4->var0;
    v23 = a5->var1;
    v22 = a5->var2;
    v24 = a5->var0;
    while (1)
    {
      v25 = var2 ? var0 % var2 : 0;
      v26 = *((_DWORD *)v11 + 2);
      v27 = v26 ? *(_DWORD *)v11 % v26 : 0;
      if (v25 == v27 && var2 == v26 && var1 == *((_DWORD *)v11 + 1))
      {
        v29 = v16 ? v18 % v16 : 0;
        v30 = *((_DWORD *)v11 + 5);
        v31 = v30 ? *((_DWORD *)v11 + 3) % v30 : 0;
        if (v29 == v31 && v16 == v30 && v17 == *((_DWORD *)v11 + 4))
        {
          v32 = v20 ? v21 % v20 : 0;
          v33 = *((_DWORD *)v11 + 8);
          v34 = v33 ? *((_DWORD *)v11 + 6) % v33 : 0;
          if (v32 == v34 && v20 == v33 && v19 == *((_DWORD *)v11 + 7))
          {
            v35 = v22 ? v24 % v22 : 0;
            v36 = *((_DWORD *)v11 + 11);
            v37 = v36 ? *((_DWORD *)v11 + 9) % v36 : 0;
            if (v35 == v37 && v22 == v36 && v23 == *((_DWORD *)v11 + 10))
              return *((_QWORD *)v11 + 6);
          }
        }
      }
      v11 += 56;
      if (v11 == v12)
        goto LABEL_43;
    }
  }
  return v38;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(56 * a2);
}

BOOL OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, __n128 *a6, _QWORD *a7)
{
  uint64_t Node;
  uint64_t v14;
  __n128 v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  Node = C3DRendererElementGetNode(a2);
  v14 = C3DRendererElementGetNode(a4);
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  return OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator::EvalStencils(a1, Node, a3, v14, a5, 0, (uint64_t)&v19, 0, *a6, v15, (uint64_t)&v17, a6->n128_u64[0], a6->n128_i64[1], a6[1].n128_i64[0], a6[1].n128_i64[1], 0, 0, 0, a6[3].n128_i32[0],
           a7);
}

__n128 ___ZL51__C3DSubdivisionOsdGPURuntimeDataCreateArchivedDataP33__C3DSubdivisionOsdGPURuntimeDataPK39C3DSubdivisionOsdGPUSetupAdditionalDataPU26objcproto15MTLCommandQueue11objc_objectPU27objcproto16MTLCommandBuffer11objc_object_block_invoke@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v3 + 48))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = objc_msgSend(*(id *)(a1 + 32), "device");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 64) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 56), "commandBuffer");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 64), "blitCommandEncoder");
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  result = *(__n128 *)(v3 + 48);
  v6 = *(_OWORD *)(v3 + 64);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void *__C3DSubdivisionOsdGPURuntimeDataEncodePatchTable(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;

  if (a3)
  {
    v7 = result;
    objc_msgSend(result, "encodeBytes:length:forKey:", *(_QWORD *)(a3 + 8), 16 * *(_QWORD *)a3, objc_msgSend(a2, "stringByAppendingString:", CFSTR(".patchArrays")));
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(a2, "stringByAppendingString:", CFSTR(".patchIndexBuffer")), *(void **)(a3 + 16), a4, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(a2, "stringByAppendingString:", CFSTR(".patchParamBuffer")), *(void **)(a3 + 24), a4, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(a2, "stringByAppendingString:", CFSTR(".dataBuffer")), *(void **)(a3 + 32), a4, *(_QWORD *)(a3 + 48));
    objc_msgSend(v7, "encodeInt32:forKey:", *(unsigned int *)(a3 + 40), objc_msgSend(a2, "stringByAppendingString:", CFSTR(".dataBufferOffset")));
    objc_msgSend(v7, "encodeInt32:forKey:", *(unsigned int *)(a3 + 48), objc_msgSend(a2, "stringByAppendingString:", CFSTR(".dataBufferCoarseDataSize")));
    return (void *)objc_msgSend(v7, "encodeInt32:forKey:", objc_msgSend(*(id *)(a3 + 32), "length"), objc_msgSend(a2, "stringByAppendingString:", CFSTR(".dataBufferFullDataSize")));
  }
  return result;
}

uint64_t __C3DSubdivisionOsdGPURuntimeDataEncodeRefiner(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;

  if (a3)
  {
    v7 = (void *)result;
    v8 = (void *)objc_msgSend(a2, "stringByAppendingString:", CFSTR(".stencilTable"));
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(v8, "stringByAppendingString:", CFSTR(".sizesBuffer")), *(void **)a3, a4, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(v8, "stringByAppendingString:", CFSTR(".offsetsBuffer")), *(void **)(a3 + 8), a4, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(v8, "stringByAppendingString:", CFSTR(".indicesBuffer")), *(void **)(a3 + 16), a4, 0);
    __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(v7, objc_msgSend(v8, "stringByAppendingString:", CFSTR(".weightsBuffer")), *(void **)(a3 + 24), a4, 0);
    objc_msgSend(v7, "encodeInt32:forKey:", *(unsigned int *)(a3 + 32), objc_msgSend(v8, "stringByAppendingString:", CFSTR(".numStencils")));
    v9 = (void *)objc_msgSend(a2, "stringByAppendingString:", CFSTR(".evaluatorInput"));
    objc_msgSend(v7, "encodeBytes:length:forKey:", a3 + 56, 12, objc_msgSend(v9, "stringByAppendingString:", CFSTR(".srcDesc")));
    return objc_msgSend(v7, "encodeBytes:length:forKey:", a3 + 68, 12, objc_msgSend(v9, "stringByAppendingString:", CFSTR(".dstDesc")));
  }
  return result;
}

void __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  void *v10;
  _QWORD v11[8];
  _QWORD v12[4];

  if (a3)
  {
    v5 = a5;
    if (!a5)
      v5 = objc_msgSend(a3, "length");
    if (v5 > objc_msgSend(a3, "length"))
      __C3DSubdivisionOsdGPURuntimeDataEncodeMTLBuffer();
    if (objc_msgSend(a3, "storageMode") == 2)
    {
      v10 = (void *)objc_msgSend((id)objc_msgSend(a3, "device"), "newBufferWithLength:options:", v5, 0);
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(a4 + 16))(v12, a4);
      objc_msgSend((id)v12[3], "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", a3, 0, v10, 0, v5);
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___ZL48__C3DSubdivisionOsdGPURuntimeDataEncodeMTLBufferP15NSKeyedArchiverP8NSStringPU19objcproto9MTLBuffer11objc_objectU13block_pointerFN10OpenSubdiv6v3_1_13Osd10MTLContextEvEm_block_invoke;
      v11[3] = &unk_1EA5A13C8;
      v11[4] = a1;
      v11[5] = v10;
      v11[6] = a2;
      v11[7] = v5;
      objc_msgSend((id)v12[2], "addCompletedHandler:", v11);

    }
    else
    {
      objc_msgSend(a1, "encodeBytes:length:forKey:", objc_msgSend(a3, "contents"), v5, a2);
    }
  }
}

uint64_t ___ZL48__C3DSubdivisionOsdGPURuntimeDataEncodeMTLBufferP15NSKeyedArchiverP8NSStringPU19objcproto9MTLBuffer11objc_objectU13block_pointerFN10OpenSubdiv6v3_1_13Osd10MTLContextEvEm_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "encodeBytes:length:forKey:", objc_msgSend(*(id *)(a1 + 40), "contents"), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

_QWORD *OpenSubdiv::v3_1_1::Osd::Mesh<OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer,OpenSubdiv::v3_1_1::Osd::MTLStencilTable,OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator,OpenSubdiv::v3_1_1::Osd::MTLPatchTable,OpenSubdiv::v3_1_1::Osd::MTLContext>::~Mesh(_QWORD *a1)
{
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v2;
  OpenSubdiv::v3_1_1::Far::PatchTable *v3;
  id *v4;
  id *v5;
  OpenSubdiv::v3_1_1::Osd::MTLStencilTable *v6;
  OpenSubdiv::v3_1_1::Osd::MTLStencilTable *v7;
  OpenSubdiv::v3_1_1::Osd::MTLPatchTable *v8;

  *a1 = &off_1EA598488;
  v2 = (OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a1[1];
  if (v2)
  {
    OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner(v2);
    MEMORY[0x1DF0D41C0]();
  }
  v3 = (OpenSubdiv::v3_1_1::Far::PatchTable *)a1[2];
  if (v3)
  {
    OpenSubdiv::v3_1_1::Far::PatchTable::~PatchTable(v3);
    MEMORY[0x1DF0D41C0]();
  }
  v4 = (id *)a1[4];
  if (v4)
  {
    OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::~CPUMTLVertexBuffer(v4);
    MEMORY[0x1DF0D41C0]();
  }
  v5 = (id *)a1[5];
  if (v5)
  {
    OpenSubdiv::v3_1_1::Osd::CPUMTLVertexBuffer::~CPUMTLVertexBuffer(v5);
    MEMORY[0x1DF0D41C0]();
  }
  v6 = (OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)a1[9];
  if (v6)
  {
    OpenSubdiv::v3_1_1::Osd::MTLStencilTable::~MTLStencilTable(v6);
    MEMORY[0x1DF0D41C0]();
  }
  v7 = (OpenSubdiv::v3_1_1::Osd::MTLStencilTable *)a1[10];
  if (v7)
  {
    OpenSubdiv::v3_1_1::Osd::MTLStencilTable::~MTLStencilTable(v7);
    MEMORY[0x1DF0D41C0]();
  }
  v8 = (OpenSubdiv::v3_1_1::Osd::MTLPatchTable *)a1[12];
  if (v8)
  {
    OpenSubdiv::v3_1_1::Osd::MTLPatchTable::~MTLPatchTable(v8);
    MEMORY[0x1DF0D41C0]();
  }
  return a1;
}

void std::vector<C3DSubdivGPUFVarPrimvarData>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<C3DSubdivGPUFVarPrimvarData>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<C3DSubdivGPUFVarPrimvarData>::destroy[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[5];
  if (v3)
  {
    a2[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[2];
  if (v4)
  {
    a2[3] = v4;
    operator delete(v4);
  }
}

_QWORD *std::vector<C3DSubdivisionOsdGPUPatchTable>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<C3DSubdivisionOsdGPUPatchTable>::__vallocate[abi:nn180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *std::vector<C3DSubdivisionOsdGPUPatchTable>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<OpenSubdiv::v3_1_1::Osd::EvaluatorCacheT<OpenSubdiv::v3_1_1::Osd::MTLComputeEvaluator>::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

_QWORD *std::vector<CFRange>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void sub_1DCDF07DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C403A34AA84);
  _Unwind_Resume(a1);
}

void sub_1DCDF08D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C403A34AA84);
  _Unwind_Resume(a1);
}

BOOL SCNActionIsPaused(void *a1)
{
  return *(double *)(objc_msgSend(a1, "caction") + 48) > 0.0;
}

uint64_t SCNActionHasKey(void *a1, void *a2)
{
  return objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(objc_msgSend(a1, "caction") + 96));
}

uint64_t SCNActionApply(void *a1, id *a2, double a3)
{
  SCNCAction *v5;
  SCNNode *ObjCWrapper;
  SCNNode *v7;
  int var10;

  v5 = (SCNCAction *)objc_msgSend(a1, "caction");
  ObjCWrapper = (SCNNode *)C3DEntityGetObjCWrapper(a2);
  if (!ObjCWrapper)
    return C3DIsRunningInEditor() ^ 1;
  v7 = ObjCWrapper;
  if (!v5->var11)
    SCNCAction::willStartWithTargetAtTime(v5, ObjCWrapper, a3);
  if (v5->var4)
  {
    (*((void (**)(SCNCAction *, SCNNode *, double))v5->var0 + 7))(v5, v7, a3);
  }
  else
  {
    SCNCAction::updateWithTargetForTime(v5, v7, a3);
    if (!v5->var4)
    {
      var10 = objc_msgSend(v5->var3, "finished");
      return var10 & ~C3DIsRunningInEditor();
    }
  }
  var10 = v5->var10;
  return var10 & ~C3DIsRunningInEditor();
}

uint64_t SCNActionWasAddedToTargetAtTime(void *a1, SCNNode *a2)
{
  SCNCAction *v4;
  double v5;
  uint64_t result;
  SCNCAction *v7;
  double v8;

  v4 = (SCNCAction *)objc_msgSend(a1, "caction");
  C3DTransactionGetAtomicTime();
  SCNCAction::wasAddedToTargetAtTime(v4, a2, v5);
  result = -[SCNNode isPausedOrPausedByInheritance](a2, "isPausedOrPausedByInheritance");
  if ((_DWORD)result)
  {
    v7 = (SCNCAction *)objc_msgSend(a1, "caction");
    C3DTransactionGetAtomicTime();
    return SCNCAction::wasPausedWithTargetAtTime(v7, a2, v8);
  }
  return result;
}

uint64_t SCNActionWasPausedAtTime(void *a1, SCNNode *a2, double a3)
{
  return SCNCAction::wasPausedWithTargetAtTime((SCNCAction *)objc_msgSend(a1, "caction"), a2, a3);
}

uint64_t SCNActionWillResumeAtTime(void *a1, SCNNode *a2, double a3)
{
  return SCNCAction::willResumeWithTargetAtTime((SCNCAction *)objc_msgSend(a1, "caction"), a2, a3);
}

SCNNode *SCNActionWasRemovedFromTargetAtTime(void *a1, id *a2, double a3)
{
  SCNCAction *v5;
  SCNNode *result;

  v5 = (SCNCAction *)objc_msgSend(a1, "caction");
  result = (SCNNode *)C3DEntityGetObjCWrapper(a2);
  if (result)
    return (SCNNode *)SCNCAction::wasRemovedFromTargetAtTime(v5, result, a3);
  return result;
}

id *SCNActionDidFinish(void *a1, id *a2)
{
  id *result;

  result = C3DEntityGetObjCWrapper(a2);
  if (result)
    return (id *)objc_msgSend(result, "_removeAction:forKey:", a1, *(_QWORD *)(objc_msgSend(a1, "caction") + 96));
  return result;
}

void SCNActionReleaseCachedState(uint64_t a1)
{
  objc_setAssociatedObject(+[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a1), CFSTR("SCNActionCacheKey"), 0, (void *)0x301);
}

uint64_t SCNActionsReset(void *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)v8;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(a1);
        v6 = objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v5), "caction");
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
        ++v5;
      }
      while (v3 != v5);
      result = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v3 = result;
    }
    while (result);
  }
  return result;
}

id SCNActionRestoreState(uint64_t a1)
{
  SCNNode *v1;
  id result;
  void *v3;
  float v4;

  v1 = +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a1);
  result = objc_getAssociatedObject(v1, CFSTR("SCNActionCacheKey"));
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "position");
    -[SCNNode setPosition:](v1, "setPosition:");
    objc_msgSend(v3, "scale");
    -[SCNNode setScale:](v1, "setScale:");
    if (objc_msgSend(v3, "usesEuler"))
    {
      objc_msgSend(v3, "euler");
      -[SCNNode setEulerAngles:](v1, "setEulerAngles:");
    }
    else
    {
      objc_msgSend(v3, "rotation");
      -[SCNNode setRotation:](v1, "setRotation:");
    }
    objc_msgSend(v3, "opacity");
    return (id)-[SCNNode setOpacity:](v1, "setOpacity:", v4);
  }
  return result;
}

void SCNActionSaveStateIfNeeded(uint64_t a1)
{
  SCNNode *v1;
  double v2;
  SCNActionTargetState *v3;

  v1 = +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a1);
  if (!objc_getAssociatedObject(v1, CFSTR("SCNActionCacheKey")))
  {
    v3 = objc_alloc_init(SCNActionTargetState);
    objc_setAssociatedObject(v1, CFSTR("SCNActionCacheKey"), v3, (void *)0x301);
    -[SCNNode opacity](v1, "opacity");
    *(float *)&v2 = v2;
    -[SCNActionTargetState setOpacity:](v3, "setOpacity:", v2);
    -[SCNNode position](v1, "position");
    -[SCNActionTargetState setPosition:](v3, "setPosition:");
    -[SCNNode scale](v1, "scale");
    -[SCNActionTargetState setScale:](v3, "setScale:");
    if (-[SCNNode rotationRepresentation](v1, "rotationRepresentation"))
    {
      -[SCNNode rotation](v1, "rotation");
      -[SCNActionTargetState setRotation:](v3, "setRotation:");
    }
    else
    {
      -[SCNActionTargetState setUsesEuler:](v3, "setUsesEuler:", 1);
      -[SCNNode eulerAngles](v1, "eulerAngles");
      -[SCNActionTargetState setEuler:](v3, "setEuler:");
    }

  }
}

void sub_1DCDF1878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_1DCDF1B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_1DCDF1F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33)
{
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

void sub_1DCDF2368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33)
{
  std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::__emplace_unique_key_args<SKNode *,std::piecewise_construct_t const&,std::tuple<SKNode * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t C3DMeshSourceCreateMutable(CFDataRef theData, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  CFIndex Length;
  __CFData *MutableCopy;
  uint64_t v12;
  CFIndex v13;

  if (!a5)
    return 0;
  if (theData)
  {
    Length = CFDataGetLength(theData);
    MutableCopy = CFDataCreateMutableCopy(0, Length, theData);
  }
  else
  {
    v13 = a4 * a3 * C3DSizeOfBaseType(a5);
    MutableCopy = CFDataCreateMutable(0, 0);
    CFDataSetLength(MutableCopy, v13);
  }
  v12 = C3DMeshSourceCreate(MutableCopy, a2, a3, a4, a5);
  CFRelease(MutableCopy);
  if (v12)
    *(_BYTE *)(v12 + 88) |= 1u;
  return v12;
}

uint64_t _C3DMeshSourceSetupNonInitializedComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;

  v8 = *(_QWORD *)(a1 + 64);
  result = C3DSourceAccessorGetComponentsCountPerValue(v8);
  v10 = result - a4;
  if (result > a4)
  {
    v11 = (int)C3DMeshSourceGetSemantic(a1) - 1;
    v12 = 1.0;
    v13 = 1.0;
    if (v11 <= 5)
    {
      v12 = flt_1DD02A2C0[v11];
      v13 = flt_1DD02A2D8[(int)v11];
    }
    result = C3DSceneSourceGetLibrary(v8);
    if (a3 >= 1)
    {
      v14 = result;
      v15 = 0;
      v16 = a2 + a4;
      v17 = a2 + 8 * a4;
      v18 = a2 + 4 * a4;
      do
      {
        v19 = 0;
        do
        {
          if (v10 - 1 == v19)
            v20 = v13;
          else
            v20 = v12;
          result = C3DSourceAccessorGetComponentsValueType(v8);
          if ((int)result > 5)
          {
            if ((_DWORD)result != 6)
            {
              if ((_DWORD)result != 16)
                goto LABEL_19;
LABEL_16:
              *(_BYTE *)(v16 + v19) = (int)v20;
              goto LABEL_19;
            }
            *(double *)(v17 + 8 * v19) = v20;
          }
          else if ((_DWORD)result == 1)
          {
            *(float *)(v18 + 4 * v19) = v20;
          }
          else if ((_DWORD)result == 4)
          {
            goto LABEL_16;
          }
LABEL_19:
          ++v19;
        }
        while (v10 != v19);
        ++v15;
        v16 += v14;
        v17 += v14;
        v18 += v14;
      }
      while (v15 != a3);
    }
  }
  return result;
}

void C3DMeshSourceSetValueAtIndexAsVector3(uint64_t a1, uint64_t a2, __n128 a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __CFData *MutableValuePtrAtIndex;
  __n128 v15;
  int VectorType;
  float32x4_t v18;

  if (!a1)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v13 = *(_QWORD **)(a1 + 64);
  MutableValuePtrAtIndex = C3DSourceAccessorGetMutableValuePtrAtIndex(v13, a2);
  v15 = a3;
  v15.n128_u32[3] = 0;
  v18 = (float32x4_t)v15;
  VectorType = C3DSourceAccessorGetVectorType((uint64_t)v13);
  C3DConvertFloatingTypeFromFloat4(VectorType, (uint64_t)MutableValuePtrAtIndex, v18);
}

void C3DMeshSourceSetValueAtIndexAsVector4(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __CFData *MutableValuePtrAtIndex;
  int VectorType;

  if (!a1)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v13 = *(_QWORD **)(a1 + 64);
  MutableValuePtrAtIndex = C3DSourceAccessorGetMutableValuePtrAtIndex(v13, a2);
  VectorType = C3DSourceAccessorGetVectorType((uint64_t)v13);
  C3DConvertFloatingTypeFromFloat4(VectorType, (uint64_t)MutableValuePtrAtIndex, a3);
}

__CFData *C3DMeshSourcePrepareAppend(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const __CFData *Data;
  uint64_t Library;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex Length;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFIndex v32;
  uint64_t Count;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD **)(a1 + 64);
  Data = (const __CFData *)C3DSourceAccessorGetData((uint64_t)v12);
  Library = C3DSceneSourceGetLibrary((uint64_t)v12);
  if (!Data)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3DMeshSourcePrepareAppend_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  Length = CFDataGetLength(Data);
  if (Length != C3DSourceAccessorGetCount((uint64_t)v12) * Library)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DMeshSourcePrepareAppend_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  v32 = CFDataGetLength(Data);
  CFDataSetLength(Data, v32 + Library * a2);
  Count = C3DSourceAccessorGetCount((uint64_t)v12);
  C3DSourceAccessorSetCount((uint64_t)v12, Count + a2);
  return C3DSourceAccessorGetMutableValuePtrAtIndex(v12, Count);
}

uint64_t C3DMeshSourceAppendVector3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFData *v15;
  uint64_t Library;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  __CFData *v20;
  int ComponentsValueType;
  NSObject *v22;
  char v24;
  _BYTE v25[15];

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 64);
  v15 = C3DMeshSourcePrepareAppend(a1, a3);
  Library = C3DSceneSourceGetLibrary(v14);
  if (a3 >= 1)
  {
    v17 = Library;
    v18 = (float *)(a2 + 4);
    v19 = a3;
    v20 = v15;
    do
    {
      ComponentsValueType = C3DSourceAccessorGetComponentsValueType(v14);
      if (ComponentsValueType > 5)
      {
        if (ComponentsValueType == 6)
        {
          *(double *)v20 = *(v18 - 1);
          *((double *)v20 + 1) = *v18;
          *((double *)v20 + 2) = v18[1];
          goto LABEL_16;
        }
        if (ComponentsValueType != 16)
        {
LABEL_9:
          v22 = scn_default_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            C3DMeshSourceAppendVector3_cold_1(&v24, v25);
          goto LABEL_16;
        }
      }
      else
      {
        if (ComponentsValueType == 1)
        {
          *(float *)v20 = *(v18 - 1);
          *((float *)v20 + 1) = *v18;
          *((float *)v20 + 2) = v18[1];
          goto LABEL_16;
        }
        if (ComponentsValueType != 4)
          goto LABEL_9;
      }
      *(_BYTE *)v20 = (int)*(v18 - 1);
      *((_BYTE *)v20 + 1) = (int)*v18;
      *((_BYTE *)v20 + 2) = (int)v18[1];
LABEL_16:
      v20 = (__CFData *)((char *)v20 + v17);
      v18 += 4;
      --v19;
    }
    while (v19);
  }
  return _C3DMeshSourceSetupNonInitializedComponents(a1, (uint64_t)v15, a3, 3);
}

uint64_t C3DMeshSourceAppendVector2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFData *v15;
  uint64_t Library;
  uint64_t v17;
  float *v18;
  __CFData *v19;
  uint64_t i;
  int ComponentsValueType;
  NSObject *v22;
  char v24;
  _BYTE v25[15];

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMeshSourceCreateWithAccessor_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 64);
  v15 = C3DMeshSourcePrepareAppend(a1, a3);
  Library = C3DSceneSourceGetLibrary(v14);
  if (a3 >= 1)
  {
    v17 = Library;
    v18 = (float *)(a2 + 4);
    v19 = v15;
    for (i = a3; i; --i)
    {
      ComponentsValueType = C3DSourceAccessorGetComponentsValueType(v14);
      if (ComponentsValueType > 5)
      {
        if (ComponentsValueType == 6)
        {
          *(double *)v19 = COERCE_FLOAT(*(_QWORD *)(v18 - 1));
          *((double *)v19 + 1) = *v18;
          goto LABEL_16;
        }
        if (ComponentsValueType != 16)
        {
LABEL_9:
          v22 = scn_default_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            C3DMeshSourceAppendVector2_cold_1(&v24, v25);
          goto LABEL_16;
        }
      }
      else
      {
        if (ComponentsValueType == 1)
        {
          *(_DWORD *)v19 = *(_QWORD *)(v18 - 1);
          *((float *)v19 + 1) = *v18;
          goto LABEL_16;
        }
        if (ComponentsValueType != 4)
          goto LABEL_9;
      }
      *(_BYTE *)v19 = (int)COERCE_FLOAT(*(_QWORD *)(v18 - 1));
      *((_BYTE *)v19 + 1) = (int)*v18;
LABEL_16:
      v18 += 2;
      v19 = (__CFData *)((char *)v19 + v17);
    }
  }
  return _C3DMeshSourceSetupNonInitializedComponents(a1, (uint64_t)v15, a3, 2);
}

uint64_t C3DMeshSourceCreateVolatile(__int16 a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 <= 0x15 && ((1 << a3) & 0x210052) != 0)
  {
    v6 = C3DSizeOfBaseType(a3);
    v7 = (const void *)C3DSourceAccessorCreate(a3, a2, 0, v6 * a2, 0);
    if (!v7)
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        C3DMeshSourceCreateVolatile_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    v16 = C3DMeshSourceCreateWithAccessor(v7, a1);
    if (!v16)
    {
      v17 = scn_default_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        C3DMeshSourceCreateWithAccessor_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    C3DSourceAccessorSetSource((uint64_t)v7, v16);
    CFRelease(v7);
    *(_BYTE *)(v16 + 88) |= 4u;
  }
  else
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      C3DMeshSourceCreateVolatile_cold_1(v26, v27, v28);
    return 0;
  }
  return v16;
}

void C3DMeshSourceSetVolatileData(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((C3DGenericSourceIsVolatile(a1) & 1) == 0)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMeshSourceSetVolatileData_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  C3DGenericSourceSetVolatileData(a1, a2);
}

BOOL C3DMeshSourceOwnsItsData(uint64_t a1)
{
  return C3DGenericSourceGetOwnData(a1) != 0;
}

void C3DMeshSourceSetInstancingDivisor(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 98) = a2;
}

void _C3DEdgeArrayCFFinalize(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    free(v1);
}

CFStringRef _C3DEdgeArrayCFCopyFormatDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DEdgeArray>"));
}

CFStringRef _C3DEdgeArrayCFCopyDebugDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DEdgeArray>"));
}

_QWORD *C3DEdgeArrayCreateFromMeshElement(uint64_t a1, CFIndex a2)
{
  _QWORD *Instance;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *ElementAtIndex;
  uint64_t PrimitiveCount;
  const void *PositionSource;
  uint64_t Count;
  int64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Index;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  NSObject *v37;
  uint64_t *v39;
  _QWORD *v40;
  _QWORD *v41;

  if (C3DEdgeArrayGetTypeID_onceToken != -1)
    dispatch_once(&C3DEdgeArrayGetTypeID_onceToken, &__block_literal_global_56);
  Instance = (_QWORD *)C3DTypeCreateInstance_(C3DEdgeArrayGetTypeID_typeID, 0x18uLL);
  if (!Instance)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DEdgeArrayCreateFromMeshElement_cold_2(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  Instance[3] = 0;
  Instance[2] = 0;
  v41 = Instance + 2;
  ElementAtIndex = C3DMeshGetElementAtIndex(a1, a2, 1);
  PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
  PositionSource = C3DMeshGetPositionSource(a1, 1);
  Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
  v17 = (uint64_t)(float)(Count * Count);
  v18 = malloc_type_calloc(1uLL, v17, 0xEFD97E85uLL);
  if (PrimitiveCount < 1)
  {
    Instance[3] = 0;
  }
  else
  {
    v39 = Instance + 3;
    v40 = Instance;
    v19 = 0;
    v20 = 0;
    do
    {
      Index = C3DMeshElementGetIndex((uint64_t)ElementAtIndex, v19, 0, 0);
      v22 = C3DMeshElementGetIndex((uint64_t)ElementAtIndex, v19, 1, 0);
      v23 = C3DMeshElementGetIndex((uint64_t)ElementAtIndex, v19, 2, 0);
      if (Index >= v22)
        v24 = v22;
      else
        v24 = Index;
      if (Index <= v22)
        v25 = v22;
      else
        v25 = Index;
      v26 = v25 + v24 * Count;
      if (!v18[v26])
      {
        v18[v26] = 1;
        ++v20;
      }
      if (v22 >= v23)
        v27 = v23;
      else
        v27 = v22;
      if (v22 <= v23)
        v28 = v23;
      else
        v28 = v22;
      v29 = v28 + v27 * Count;
      if (!v18[v29])
      {
        v18[v29] = 1;
        ++v20;
      }
      if (v23 >= Index)
        v30 = Index;
      else
        v30 = v23;
      if (v23 <= Index)
        v31 = Index;
      else
        v31 = v23;
      v32 = v31 + v30 * Count;
      if (!v18[v32])
      {
        v18[v32] = 1;
        ++v20;
      }
      ++v19;
    }
    while (PrimitiveCount != v19);
    Instance = v40;
    *v39 = v20;
    if (v20)
    {
      v33 = (char *)malloc_type_malloc(16 * v20, 0x1000040451B5BE8uLL);
      *v41 = v33;
      if (v17 < 1)
      {
        v35 = 0;
      }
      else
      {
        v34 = 0;
        v35 = 0;
        do
        {
          if (v18[v34])
          {
            v36 = (uint64_t *)&v33[16 * v35];
            *v36 = v34 / Count;
            v36[1] = v34 + -Count * (v34 / Count);
            ++v35;
          }
          ++v34;
        }
        while (v17 != v34);
      }
      if (v35 != *v39)
      {
        v37 = scn_default_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          C3DEdgeArrayCreateFromMeshElement_cold_1(v39, v35, v37);
      }
    }
  }
  free(v18);
  Instance[4] = Instance[3];
  return Instance;
}

uint64_t C3DEdgeArrayGetCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEdgeArrayCreateFromMeshElement_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

uint64_t C3DEdgeArrayGetEdgeAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEdgeArrayCreateFromMeshElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_QWORD *)(a1 + 24) <= a2)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DEdgeArrayGetEdgeAtIndex_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return *(_QWORD *)(a1 + 16) + 16 * a2;
}

void _C3DTriangulationInfoCFFinalize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  const void *v4;
  uint64_t v5;
  uint64_t j;
  const void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[6];
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(const void **)(a1[3] + 8 * i);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1[3] + 8 * i) = 0;
        v2 = a1[6];
      }
    }
  }
  v5 = a1[5];
  if (v5 >= 1)
  {
    for (j = 0; j < v5; ++j)
    {
      v7 = *(const void **)(a1[2] + 8 * j);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1[2] + 8 * j) = 0;
        v5 = a1[5];
      }
    }
  }
  v8 = (void *)a1[3];
  if (v8)
    free(v8);
  v9 = (void *)a1[2];
  if (v9)
    free(v9);
  v10 = (void *)a1[4];
  if (v10)
    free(v10);
}

CFStringRef _C3DTriangulationInfoCFCopyFormatDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DTriangulationInfo>"));
}

CFStringRef _C3DTriangulationInfoCFCopyDebugDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DTriangulationInfo>"));
}

_QWORD *C3DTriangulationInfoCreateFromMeshElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *Instance;
  size_t Count;
  int64_t v24;
  uint64_t PrimitiveCount;
  int64_t v26;
  uint64_t i;
  uint64_t j;
  uint64_t Index;
  uint64_t v30;
  _BYTE *v31;
  uint64_t k;
  _QWORD *EdgeAtIndex;
  uint64_t IntersectionOfIndexSets;
  uint64_t FirstIndex;
  uint64_t m;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t v41[4];
  _DWORD v42[7];

  *(_QWORD *)&v42[5] = *MEMORY[0x1E0C80C00];
  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DTriangulationInfoCreateFromMeshElement_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DTriangulationInfoCreateFromMeshElement_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (C3DTriangulationInfoGetTypeID_onceToken != -1)
    dispatch_once(&C3DTriangulationInfoGetTypeID_onceToken, &__block_literal_global_8);
  Instance = (_QWORD *)C3DTypeCreateInstance_(C3DTriangulationInfoGetTypeID_typeID, 0x30uLL);
  Count = C3DMeshSourceGetCount(a2);
  if (a3)
    v24 = *(_QWORD *)(a3 + 24);
  else
    v24 = 0;
  PrimitiveCount = C3DMeshElementGetPrimitiveCount(a1);
  if (!Count)
    return 0;
  v26 = PrimitiveCount;
  Instance[2] = malloc_type_calloc(8uLL, Count, 0x23682DEBuLL);
  Instance[5] = Count;
  Instance[7] = v26;
  if (v26 >= 1)
  {
    for (i = 0; i != v26; ++i)
    {
      for (j = 0; j != 3; ++j)
      {
        Index = C3DMeshElementGetIndex(a1, i, j, 0);
        v30 = *(_QWORD *)(Instance[2] + 8 * Index);
        if (!v30)
        {
          *(_QWORD *)(Instance[2] + 8 * Index) = C3DIndexSetCreateMutable();
          v30 = *(_QWORD *)(Instance[2] + 8 * Index);
        }
        C3DIndexSetAddIndex(v30, i);
      }
    }
  }
  if (v24)
  {
    Instance[3] = malloc_type_calloc(8uLL, v24, 0xA3723D5BuLL);
    Instance[6] = v24;
    Instance[4] = malloc_type_calloc(0x18uLL, v26, 0xF26B11FAuLL);
    v31 = malloc_type_calloc(1uLL, v26, 0x7DF9CD46uLL);
    if (v24 >= 1)
    {
      for (k = 0; k != v24; ++k)
      {
        EdgeAtIndex = (_QWORD *)C3DEdgeArrayGetEdgeAtIndex(a3, k);
        IntersectionOfIndexSets = C3DIndexSetCreateIntersectionOfIndexSets(*(_QWORD *)(Instance[2] + 8 * *EdgeAtIndex), *(_QWORD *)(Instance[2] + 8 * EdgeAtIndex[1]));
        *(_QWORD *)(Instance[3] + 8 * k) = IntersectionOfIndexSets;
        FirstIndex = C3DIndexSetGetFirstIndex(IntersectionOfIndexSets);
        if (FirstIndex != -1)
        {
          for (m = FirstIndex; m != -1; m = C3DIndexSetGetIndexGreaterThanIndex(IntersectionOfIndexSets, m))
          {
            if (v31[m] >= 3u)
            {
              v37 = scn_default_log();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
                C3DTriangulationInfoCreateFromMeshElement_cold_1(v41, v42, v37);
            }
            v38 = v31[m];
            v39 = Instance[4] + 24 * m;
            v31[m] = v38 + 1;
            *(_QWORD *)(v39 + 8 * v38) = k;
          }
        }
      }
    }
    free(v31);
  }
  return Instance;
}

uint64_t C3DTriangulationInfoGetEdgesAtFaceIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DTriangulationInfoGetEdgesAtFaceIndex_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

void _C3DMeshElementEditorCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

CFStringRef _C3DMeshElementEditorCFCopyFormatDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DMeshElementEditor>"));
}

CFStringRef _C3DMeshElementEditorCFCopyDebugDescription()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DMeshElementEditor>"));
}

uint64_t C3DMeshElementEditorCreate()
{
  uint64_t Instance;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (C3DMeshElementEditorGetTypeID_onceToken != -1)
    dispatch_once(&C3DMeshElementEditorGetTypeID_onceToken, &__block_literal_global_57);
  Instance = C3DTypeCreateInstance_(C3DMeshElementEditorGetTypeID_typeID, 0x28uLL);
  if (!Instance)
  {
    v1 = scn_default_log();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
      C3DMeshElementEditorCreate_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  return Instance;
}

uint64_t C3DMeshElementEditorCreateWithMeshElementAndCapacity(const void *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const __CFData *Indexes;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DTriangulationInfoCreateFromMeshElement_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (C3DMeshElementGetType((uint64_t)a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      C3DMeshElementEditorCreateWithMeshElementAndCapacity_cold_1();
    return 0;
  }
  else
  {
    v13 = C3DMeshElementEditorCreate();
    Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)a1, (_DWORD *)(v13 + 40));
    *(_QWORD *)(v13 + 16) = CFRetain(a1);
    *(_QWORD *)(v13 + 48) = C3DMeshElementGetPrimitiveCount((uint64_t)a1);
    *(_QWORD *)(v13 + 32) = CFDataCreateMutableCopy(0, 3 * a2 * *(unsigned int *)(v13 + 40), Indexes);
  }
  return v13;
}

uint64_t C3DMeshElementEditorGetIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  UInt8 *MutableBytePtr;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;

  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 32));
  v7 = *(unsigned int *)(a1 + 40);
  v8 = (3 * a2 + a3) * v7;
  switch((_DWORD)v7)
  {
    case 4:
      return *(unsigned int *)&MutableBytePtr[v8];
    case 2:
      return *(unsigned __int16 *)&MutableBytePtr[v8];
    case 1:
      return (char)MutableBytePtr[v8];
  }
  v10 = scn_default_log();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    C3DMeshElementEditorGetIndex_cold_1();
  return -1;
}

void _C3DMeshElementEditorSetIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  UInt8 *MutableBytePtr;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;

  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 32));
  v9 = *(unsigned int *)(a1 + 40);
  v10 = v9 - 1;
  v11 = (3 * a2 + a3) * v9;
  switch(v10)
  {
    case 0:
      MutableBytePtr[v11] = a4;
      break;
    case 1:
      *(_WORD *)&MutableBytePtr[v11] = a4;
      break;
    case 3:
      *(_DWORD *)&MutableBytePtr[v11] = a4;
      break;
    case 7:
      *(_QWORD *)&MutableBytePtr[v11] = a4;
      break;
    default:
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        C3DMeshElementEditorGetIndex_cold_1();
      break;
  }
}

void C3DMeshElementEditorSubdivideTriangleAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  NSObject *v19;
  uint64_t Index;
  uint64_t v21;
  uint64_t v22;
  const __CFData *v23;
  CFIndex Length;

  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DMeshElementEditorSubdivideTriangleAtIndex_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *(const void **)(a1 + 24);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 48) >= a2)
  {
    Index = C3DMeshElementEditorGetIndex(a1, a2, 1);
    v21 = C3DMeshElementEditorGetIndex(a1, a2, 2);
    v22 = *(_QWORD *)(a1 + 48);
    v23 = *(const __CFData **)(a1 + 32);
    Length = CFDataGetLength(v23);
    CFDataSetLength(v23, Length + (9 * *(_DWORD *)(a1 + 40)));
    _C3DMeshElementEditorSetIndex(a1, a2, 1, a4);
    _C3DMeshElementEditorSetIndex(a1, a2, 2, a3);
    _C3DMeshElementEditorSetIndex(a1, v22, 0, a3);
    _C3DMeshElementEditorSetIndex(a1, v22, 1, a5);
    _C3DMeshElementEditorSetIndex(a1, v22, 2, v21);
    _C3DMeshElementEditorSetIndex(a1, v22 + 1, 0, a3);
    _C3DMeshElementEditorSetIndex(a1, v22 + 1, 1, a4);
    _C3DMeshElementEditorSetIndex(a1, v22 + 1, 2, a5);
    _C3DMeshElementEditorSetIndex(a1, v22 + 2, 0, a4);
    _C3DMeshElementEditorSetIndex(a1, v22 + 2, 1, Index);
    _C3DMeshElementEditorSetIndex(a1, v22 + 2, 2, a5);
    *(_QWORD *)(a1 + 48) += 3;
  }
  else
  {
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      C3DMeshElementEditorSubdivideTriangleAtIndex_cold_1();
  }
}

uint64_t C3DMeshElementEditorGenerateMeshElement(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char DoubleSided;
  CFDataRef Copy;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMeshElementEditorSubdivideTriangleAtIndex_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
  {
    v10 = C3DMeshElementCreate();
    DoubleSided = C3DMeshElementGetDoubleSided(*(_QWORD *)(a1 + 16));
    C3DMeshElementSetDoubleSided(v10, DoubleSided);
    Copy = CFDataCreateCopy(0, *(CFDataRef *)(a1 + 32));
    C3DMeshElementInit(v10, 0, *(_QWORD *)(a1 + 48), Copy, *(_DWORD *)(a1 + 40));
    CFRelease(Copy);
    *(_QWORD *)(a1 + 24) = v10;
  }
  return v10;
}

void sub_1DCDF4DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4082928971);
  _Unwind_Resume(a1);
}

void sub_1DCDF4FFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4082928971);
  _Unwind_Resume(a1);
}

void SCNCJavaScriptAction::SCNCJavaScriptAction(SCNCJavaScriptAction *this, SCNCAction *a2, NSString *a3)
{
  uint64_t v6;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v6 = &off_1EA596DE8;
  *(_QWORD *)(v6 + 24) = a2->var3;
  *(double *)(v6 + 56) = a2->var7;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v6 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v6 + 64) = a2->var8;
  *(_QWORD *)(v6 + 104) = a2->var14;
  *(_BYTE *)(v6 + 32) = 1;
  if (SCNCJavaScriptAction::SCNCJavaScriptAction(SCNCAction *,NSString *)::onceToken != -1)
    dispatch_once(&SCNCJavaScriptAction::SCNCJavaScriptAction(SCNCAction *,NSString *)::onceToken, &__block_literal_global_58);
  *((_QWORD *)this + 18) = -[NSString copy](a3, "copy");
}

void sub_1DCDF5194(_Unwind_Exception *a1)
{
  SCNCAction *v1;

  SCNCAction::~SCNCAction(v1);
  _Unwind_Resume(a1);
}

void ___ZN20SCNCJavaScriptActionC2EP10SCNCActionP8NSString_block_invoke()
{
  objc_class *v0;

  v0 = NSClassFromString(CFSTR("JSContext"));
  if (v0)
  {
    _context = (uint64_t)objc_alloc_init(v0);
    SCNExportJavaScriptModule((JSContext *)_context);
  }
}

void SCNCJavaScriptAction::~SCNCJavaScriptAction(SCNCAction *this)
{
  SCNCAction::~SCNCAction(this);
  JUMPOUT(0x1DF0D41C0);
}

void SCNCJavaScriptAction::cpp_updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  double v6;
  BOOL v7;
  double v8;
  void *v9;
  void *v10;
  float v11;

  v6 = SCNCAction::cpp_ratioForTime(this, a3);
  if (this[1].var0)
    v7 = _context == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = v6 * this->var1;
    v9 = (void *)objc_msgSend((id)_context, "globalObject");
    objc_msgSend(v9, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8), CFSTR("elapsedTime"));
    objc_msgSend(v9, "setObject:forKeyedSubscript:", a2, CFSTR("node"));
    objc_msgSend((id)_context, "setException:", 0);
    v10 = (void *)objc_msgSend((id)_context, "evaluateScript:", this[1].var0);
    if (objc_msgSend((id)_context, "exception"))
      NSLog(CFSTR("%@"), objc_msgSend(v10, "toString"));
  }
  v11 = v6;
  if ((COERCE_UNSIGNED_INT(v11 + -1.0) & 0x60000000) == 0)
    SCNCAction::didFinishWithTargetAtTime(this, a2, a3);
}

BOOL C3DGaussianSolve(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;

  v8 = a3;
  bzero(a4, 4 * a3);
  if ((int)a2 < 1)
  {
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (a3 + 1);
    v13 = 4 * a2;
    v14 = 4 * (a2 - 1) * a2;
    v15 = v14 + 4;
    v16 = 1;
    v17 = a1;
    v18 = a1;
    do
    {
      v19 = v9 + 1;
      v20 = v9 * a2;
      if (v9 + 1 >= (unint64_t)a2)
      {
        v22 = v9;
      }
      else
      {
        v21 = 1;
        v22 = v9;
        do
        {
          if (fabsf(*(float *)(v18 + 4 * v21)) > fabsf(*(float *)(a1 + 4 * (v20 + v22))))
            v22 = v9 + v21;
          ++v21;
        }
        while (v9 - a2 + v21);
      }
      if (v9 != v22 && v9 <= v8)
      {
        v23 = 0;
        v24 = v17 + 4 * v22;
        v25 = v12;
        do
        {
          v26 = *(_DWORD *)(v18 + v23);
          *(_DWORD *)(v18 + v23) = *(_DWORD *)(v24 + v23);
          *(_DWORD *)(v24 + v23) = v26;
          v23 += v13;
          --v25;
        }
        while (v25);
      }
      v27 = v9 + (int)(v11 * a2);
      if (fabsf(*(float *)(a1 + 4 * v27)) >= 0.000001)
      {
        v28 = v15;
        v29 = v16;
        if (v19 < a2)
        {
          do
          {
            v30 = a1;
            v31 = a2;
            do
            {
              --v31;
              *(float *)(v30 + v28) = *(float *)(v30 + v28)
                                    - (float)((float)(*(float *)(v30 + v14) * *(float *)(a1 + 4 * (v29 + v20)))
                                            / *(float *)(a1 + 4 * v27));
              v30 -= 4 * a2;
            }
            while (v31 > v9);
            ++v29;
            v28 += 4;
          }
          while (v29 != a2);
        }
      }
      else if (v9 < v8)
      {
        return v10;
      }
      ++v11;
      --v12;
      ++v16;
      v18 += v13 + 4;
      v17 += v13;
      v15 += 4;
      v14 += 4;
      ++v9;
      v10 = v19 >= a2;
    }
    while (v19 != a2);
  }
  if (a3 >= 1)
  {
    v32 = 0;
    v33 = a1 + 4 * (v8 + (int)v8 * (uint64_t)(int)a2) - 4;
    v34 = 4 * (int)a2;
    v35 = v8;
    do
    {
      v36 = 0.0;
      if (v35 < v8)
      {
        v37 = (float *)v33;
        v38 = v32;
        do
        {
          v36 = v36 + (float)(*v37 * *((float *)a4 + v8 + v38));
          v37 = (float *)((char *)v37 + v34);
          ++v38;
        }
        while ((_DWORD)v38);
      }
      *((float *)a4 + v35 - 1) = (float)(*(float *)(a1 + 4 * (v35 - 1 + (int)(a3 * a2))) - v36)
                               / *(float *)(a1 + 4 * (int)((a2 + 1) * (v35 - 1)));
      --v32;
      v33 += v34 ^ 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v35-- > 1);
  }
  return v10;
}

void C3D::CubeBlurPass::CubeBlurPass(C3D::CubeBlurPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  uint64_t v5;
  uint64_t v6;

  C3D::ComputePass::ComputePass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA598BE8;
  v6 = *(_QWORD *)&a4->var0;
  *(_DWORD *)(v5 + 116) = *(_DWORD *)&a4->var8;
  *(_QWORD *)(v5 + 108) = v6;
}

void C3D::CubeBlurPass::setup(C3D::CubeBlurPass *this)
{
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 2u);
}

void C3D::CubeBlurPass::compile(C3D::CubeBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::CubeBlurPass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 15) = v6;
  if (!v6)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1EA598BC8;
    *(_QWORD *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *((_QWORD *)this + 15) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, v7);
    for (i = 0; i != 6; ++i)
    {
      v9 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("cube_blur_h%d"), i);
      v10 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("cube_blur_v%d"), i);
      v11 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", v9);
      v12 = *((_QWORD *)this + 15) + 8 * i;
      v13 = *(void **)(v12 + 16);
      *(_QWORD *)(v12 + 16) = v11;
      if (v13)

      v14 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", v10);
      v15 = *((_QWORD *)this + 15) + 8 * i;
      v16 = *(void **)(v15 + 64);
      *(_QWORD *)(v15 + 64) = v14;
      if (v16)

    }
  }
}

uint64_t C3D::CubeBlurPass::execute(uint64_t a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  void **v4;
  void **v5;
  char v6;
  char v7;
  MTLTexture *v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  MTLTexture *v12;
  unsigned __int16 v13;
  BOOL v14;
  int v15;
  MTLTexture *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void **v21;
  uint64_t v22;
  unsigned __int16 v23;

  v3 = *a2;
  v4 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  v5 = (void **)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 1u);
  v6 = 0;
  v7 = 1;
  do
  {
    v20 = v7;
    if ((v6 & 1) != 0)
    {
      v8 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
      v4 = v5;
    }
    else
    {
      v8 = (MTLTexture *)v5;
    }
    result = objc_msgSend(v4, "textureType");
    v22 = result;
    v10 = *(unsigned int *)(a1 + 112);
    if (v10 < *(_DWORD *)(a1 + 116) + (int)v10)
    {
      if (result == 5)
        v11 = 6;
      else
        v11 = 1;
      v21 = v4;
      do
      {
        v12 = (MTLTexture *)(id)objc_msgSend(v4, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), 5, v10, 1, 0, 6);
        v13 = 0;
        v23 = 0;
        if (v10)
          v14 = 1;
        else
          v14 = v22 == 5;
        v15 = v14;
        v16 = v8;
        do
        {
          v17 = 16;
          if ((v6 & 1) != 0)
            v17 = 64;
          v18 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](*(_QWORD *)(*(_QWORD *)(a1 + 120) + v17 + 8 * v13));
          if (v3->_computePipelineState != (MTLComputePipelineState *)v18)
          {
            v3->_computePipelineState = (MTLComputePipelineState *)v18;
            -[MTLComputeCommandEncoder setComputePipelineState:](v3->_encoder, "setComputePipelineState:", v18);
          }
          if (v15)
          {
            v19 = -[MTLTexture pixelFormat](v8, "pixelFormat");
            v16 = (MTLTexture *)(id)-[MTLTexture newTextureViewWithPixelFormat:textureType:levels:slices:](v8, "newTextureViewWithPixelFormat:textureType:levels:slices:", v19, 2, v10, 1, v23, 1);
          }
          SCNMTLComputeCommandEncoder::setBytes(v3, &v23, 2uLL, 0);
          if (v3->_textures[0] != v16)
          {
            v3->_textures[0] = v16;
            v3->_texturesToBind[0] |= 1uLL;
          }
          if (v3->_textures[1] != v12)
          {
            v3->_textures[1] = v12;
            v3->_texturesToBind[0] |= 2uLL;
          }
          result = SCNMTLComputeCommandEncoder::dispatchOnGrid2D(v3, -[MTLTexture width](v16, "width"), -[MTLTexture height](v16, "height"));
          v13 = v23 + 1;
          v23 = v13;
        }
        while (v11 > v13);
        ++v10;
        v4 = v21;
      }
      while (v10 < (*(_DWORD *)(a1 + 116) + *(_DWORD *)(a1 + 112)));
    }
    v7 = 0;
    v6 = 1;
    v5 = (void **)v8;
  }
  while ((v20 & 1) != 0);
  return result;
}

const char *C3D::CubeBlurPass::name(C3D::CubeBlurPass *this)
{
  return "CubeBlurPass";
}

void C3D::CubeBlurPass::Resource::~Resource(C3D::CubeBlurPass::Resource *this)
{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA598BC8;
  for (i = 104; i != 56; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)

  }
  do
  {
    v4 = *(void **)((char *)this + i);
    if (v4)

    i -= 8;
  }
  while (i != 8);
}

{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA598BC8;
  v2 = 104;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)

    v2 -= 8;
    if (v2 == 56)
    {
      while (1)
      {
        v4 = *(void **)((char *)this + v2);
        if (v4)

        v2 -= 8;
        if (v2 == 8)
          JUMPOUT(0x1DF0D41C0);
      }
    }
  }
}

void *reorder<__C3DNode *>(_QWORD *a1, __int16 *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  void *result;
  uint64_t v15;
  _QWORD v16[2];

  v5 = a1;
  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v16 - v9;
  if (v8 >= 0x200)
    v8 = 512;
  v11 = v8 >= 8 * v7;
  v12 = v8 - 8 * v7;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  bzero(&v10[8 * v7], v13);
  result = memcpy(v10, v5, 8 * a3);
  if (a3 >= 1)
  {
    do
    {
      v15 = *a2++;
      *v5++ = *(_QWORD *)&v10[8 * v15];
      --v6;
    }
    while (v6);
  }
  return result;
}

__n128 reorder<scn_sphere>(__n128 *a1, __int16 *a2, int a3)
{
  __n128 *v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  _QWORD v10[2];

  v5 = a1;
  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1);
  v7 = &v10[-2 * v6];
  memcpy(v7, v5, 16 * a3);
  if (a3 >= 1)
  {
    do
    {
      v9 = *a2++;
      result = *(__n128 *)&v7[2 * v9];
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

__n128 reorder<scn_cone>(_OWORD *a1, __int16 *a2, int a3)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  __n128 result;
  int v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD v14[2];

  v5 = a1;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1);
  v8 = &v14[-2 * v7];
  memcpy(v8, v5, 48 * v9);
  if (a3 >= 1)
  {
    do
    {
      v11 = *a2++;
      v12 = &v8[6 * v11];
      v13 = *((_OWORD *)v12 + 1);
      *v5 = *(_OWORD *)v12;
      v5[1] = v13;
      result = *((__n128 *)v12 + 2);
      v5[2] = result;
      v5 += 3;
      --v6;
    }
    while (v6);
  }
  return result;
}

__n128 reorder<scn_obb>(_OWORD *a1, __int16 *a2, int a3)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  __n128 result;
  int v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD v14[2];

  v5 = a1;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1);
  v8 = &v14[-2 * v7];
  memcpy(v8, v5, 80 * v9);
  if (a3 >= 1)
  {
    do
    {
      v11 = *a2++;
      v12 = &v8[10 * v11];
      v13 = *((_OWORD *)v12 + 3);
      v5[2] = *((_OWORD *)v12 + 2);
      v5[3] = v13;
      v5[4] = *((_OWORD *)v12 + 4);
      result = *((__n128 *)v12 + 1);
      *v5 = *(_OWORD *)v12;
      v5[1] = result;
      v5 += 5;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ___Z19_addLightsInFrustumP19SCNMTLClusterSystem11scn_frustumhRKN13SCNMTLCluster7ContextEPNS_4InfoE_block_invoke_2(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[6];

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a5 + 16 * i);
      v8 = *(_QWORD *)(a5 + 16 * i + 8);
      v9 = *(_OWORD *)(result + 80);
      v21[2] = *(_OWORD *)(result + 64);
      v21[3] = v9;
      v10 = *(_OWORD *)(result + 112);
      v21[4] = *(_OWORD *)(result + 96);
      v21[5] = v10;
      v11 = *(_OWORD *)(result + 48);
      v21[0] = *(_OWORD *)(result + 32);
      v21[1] = v11;
      v12.i64[0] = v7;
      v12.i64[1] = v8;
      while (1)
      {
        v13 = (float32x4_t)v21[v6];
        v14 = vmulq_f32(v13, v12);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1)))).f32[0] < (float)-*((float *)&v8 + 1))break;
        if (++v6 == 6)
        {
          v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 128) + 8) + 24);
          if (v15 > 0xFF)
            return result;
          v16 = (uint64_t *)(*(_QWORD *)(result + 136) + 16 * (v15 - *(_DWORD *)(result + 160)));
          *v16 = v7;
          v16[1] = v8;
          *(_QWORD *)(*(_QWORD *)(result + 144)
                    + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(result + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * i);
          v17 = *(_QWORD *)(a3 + 8 * i);
          v18 = *(_QWORD *)(result + 152);
          v19 = *(_QWORD *)(*(_QWORD *)(result + 128) + 8);
          v20 = *(unsigned int *)(v19 + 24);
          *(_DWORD *)(v19 + 24) = v20 + 1;
          *(_QWORD *)(v18 + 8 * v20) = v17;
          break;
        }
      }
    }
  }
  return result;
}

void ___Z19_addLightsInFrustumP19SCNMTLClusterSystem11scn_frustumhRKN13SCNMTLCluster7ContextEPNS_4InfoE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  int ParticlesCount;
  uint64_t v5;
  uint64_t v6;
  float ParticleSize;
  uint64_t v8;
  float LightEmissionRadiusFactor;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned int v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float ParticleIntensity;
  float32x4_t v27;
  _OWORD v28[6];

  ParticlesCount = C3DParticleSystemInstanceGetParticlesCount((uint64_t)a2);
  v5 = a2[63];
  v6 = a2[71];
  v27 = *(float32x4_t *)C3DParticleSystemGetParticleColor(a2[6]);
  ParticleIntensity = C3DParticleSystemGetParticleIntensity(a2[6]);
  ParticleSize = C3DParticleSystemGetParticleSize(a2[6]);
  v8 = a2[70];
  LightEmissionRadiusFactor = C3DParticleSystemGetLightEmissionRadiusFactor(a2[6]);
  if (ParticlesCount)
  {
    v10 = 0;
    v11 = vmulq_n_f32(v27, ParticleIntensity);
    v12 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
    do
    {
      if (v8)
        ParticleSize = *(float *)(v8 + 4 * v10);
      v13 = 0;
      v14 = *(float32x4_t *)(v5 + 16 * v10);
      v15 = v14;
      v16 = *(_OWORD *)(a1 + 80);
      v28[2] = *(_OWORD *)(a1 + 64);
      v28[3] = v16;
      v17 = *(_OWORD *)(a1 + 112);
      v28[4] = *(_OWORD *)(a1 + 96);
      v28[5] = v17;
      v18 = *(_OWORD *)(a1 + 48);
      v28[0] = *(_OWORD *)(a1 + 32);
      v28[1] = v18;
      while (1)
      {
        v19 = (float32x4_t)v28[v13];
        v20 = vmulq_f32(v14, v19);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)))).f32[0] < (float)-(float)(LightEmissionRadiusFactor * ParticleSize))break;
        if (++v13 == 6)
        {
          v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
          if (v21 > 0xFF)
            return;
          v15.f32[3] = LightEmissionRadiusFactor * ParticleSize;
          *(float32x4_t *)(*(_QWORD *)(a1 + 136) + 16 * (v21 - *(_DWORD *)(a1 + 168))) = v15;
          v22 = v11;
          if (v6)
            v22 = *(float32x4_t *)(v6 + 16 * v10);
          *(float32x4_t *)(*(_QWORD *)(a1 + 144)
                         + 16 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = vmulq_f32(v22, v12);
          *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = 0;
          v23 = *(_QWORD *)(a1 + 160);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
          v25 = *(unsigned int *)(v24 + 24);
          *(_DWORD *)(v24 + 24) = v25 + 1;
          *(_QWORD *)(v23 + 8 * v25) = 0;
          break;
        }
      }
      ++v10;
    }
    while (v10 != ParticlesCount);
  }
}

void ___Z19_addLightsInFrustumP19SCNMTLClusterSystem11scn_frustumhRKN13SCNMTLCluster7ContextEPNS_4InfoE_block_invoke_4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _OWORD *v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x2_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t v50;
  _OWORD v51[6];

  if (a2)
  {
    v9 = 0;
    v10 = (_OWORD *)(a1 + 32);
    __asm { FMOV            V0.4S, #1.0 }
    v50 = _Q0;
    v16 = a2;
    do
    {
      if ((C3DLightGetCastsShadow(*(_QWORD *)(a4 + 8 * v9)) & 1) == 0
        && (C3DLightHasValidGobo(*(_QWORD *)(a4 + 8 * v9)) & 1) == 0
        && C3DLightGetAttenuationEndDistance(*(_QWORD *)(a4 + 8 * v9)) > 0.0)
      {
        v17 = 0;
        v18 = a5 + 48 * v9;
        v19 = *(float32x4_t *)v18;
        v20 = *(float32x4_t *)(v18 + 16);
        v21 = *(int32x2_t *)(v18 + 32);
        v22 = *(_QWORD *)(v18 + 40);
        v23 = v10[3];
        v51[2] = v10[2];
        v51[3] = v23;
        v24 = v10[5];
        v51[4] = v10[4];
        v51[5] = v24;
        v25 = v10[1];
        v51[0] = *v10;
        v51[1] = v25;
        v26 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL);
        v27 = vmlaq_n_f32(v19, v20, *(float *)v21.i32);
        v28 = (float32x4_t)vdupq_lane_s32(v21, 1);
        while (1)
        {
          v29 = (float32x4_t)v51[v17];
          v30 = vmulq_f32(v19, v29);
          v31 = v29.f32[3];
          v30.f32[0] = v29.f32[3]
                     + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0];
          v32 = (int32x4_t)vmlaq_f32(vmulq_f32(v26, vnegq_f32(v29)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
          v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL);
          v34 = vmlaq_f32(vmulq_f32(v26, vnegq_f32(v33)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
          v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
          v36 = vmulq_f32(v34, v34);
          v36.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), v36)).u64[0];
          v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0);
          v38 = vrsqrteq_f32(v37);
          v39 = vmulq_f32(v38, vrsqrtsq_f32(v37, vmulq_f32(v38, v38)));
          v40 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v36.f32[0] != 0.0)), 0x1FuLL));
          v40.i32[3] = 0;
          v41 = vmulq_f32(v29, vmlsq_f32(v27, v28, vmulq_f32(v35, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v40), (int8x16_t)vmulq_f32(v39, vrsqrtsq_f32(v37, vmulq_f32(v39, v39))), v50))));
          v41.f32[0] = v31
                     + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
          v42 = v30.f32[0] * v41.f32[0];
          v43 = fminf(v30.f32[0], v41.f32[0]);
          if (v42 < 0.0)
            v43 = 0.0;
          if (v43 < 0.0)
            break;
          if (++v17 == 6)
          {
            v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
            if (v44 > 0xFF)
              return;
            v45 = *(_QWORD *)(a1 + 136) + 48 * (v44 - *(_DWORD *)(a1 + 160));
            *(float32x4_t *)v45 = v19;
            *(float32x4_t *)(v45 + 16) = v20;
            *(int32x2_t *)(v45 + 32) = v21;
            *(_QWORD *)(v45 + 40) = v22;
            *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * v9);
            v46 = *(_QWORD *)(a3 + 8 * v9);
            v47 = *(_QWORD *)(a1 + 152);
            v48 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
            v49 = *(unsigned int *)(v48 + 24);
            *(_DWORD *)(v48 + 24) = v49 + 1;
            *(_QWORD *)(v47 + 8 * v49) = v46;
            break;
          }
        }
      }
      ++v9;
    }
    while (v9 != v16);
  }
}

void ___Z19_addLightsInFrustumP19SCNMTLClusterSystem11scn_frustumhRKN13SCNMTLCluster7ContextEPNS_4InfoE_block_invoke_5(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t ProbeEnvironment;
  int32x2_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[6];
  uint8_t v43[4];
  _QWORD v44[3];

  *(_QWORD *)((char *)&v44[1] + 4) = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = 0;
    v10 = (_OWORD *)(a1 + 32);
    v11 = a2;
    do
    {
      if (C3DLightGetProbeType(*(_QWORD *)(a4 + 8 * v9)) != 1)
      {
        v12 = scn_default_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
          ___Z19_addLightsInFrustumP19SCNMTLClusterSystem11scn_frustumhRKN13SCNMTLCluster7ContextEPNS_4InfoE_block_invoke_5_cold_1(v43, v44, v12);
      }
      if (C3DLightGetIntensity(*(_QWORD *)(a4 + 8 * v9)) > 0.0)
      {
        ProbeEnvironment = C3DLightGetProbeEnvironment(*(_QWORD *)(a4 + 8 * v9), 0);
        if (!ProbeEnvironment || C3DEffectSlotGetIntensity(ProbeEnvironment) > 0.0)
        {
          v15 = 0;
          v16 = (float32x4_t *)(a5 + 80 * v9);
          v17 = *v16;
          v18 = v16[1];
          v19 = v16[2];
          v20 = v16[3];
          v21 = v16[4];
          *(float *)v14.i32 = fmaxf(fmaxf(v21.f32[0], COERCE_FLOAT(v16[4].i64[1])), COERCE_FLOAT(HIDWORD(v16[4].i64[0])))* 0.1;
          v22 = vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(v14, 0));
          v22.i32[3] = v21.i32[3];
          v23 = v10[3];
          v42[2] = v10[2];
          v42[3] = v23;
          v24 = v10[5];
          v42[4] = v10[4];
          v42[5] = v24;
          v25 = v10[1];
          v42[0] = *v10;
          v42[1] = v25;
          while (1)
          {
            v26 = (float32x4_t)v42[v15];
            v27 = (int32x4_t)vmulq_f32(v18, v26);
            v28 = (int32x4_t)vmulq_f32(v19, v26);
            v29 = (int32x4_t)vmulq_f32(v20, v26);
            v30 = (int32x4_t)vmulq_f32(v17, v26);
            v31 = vzip1q_s32(v27, v29);
            v32 = vzip2q_s32(v27, v29);
            v33 = vzip1q_s32(v28, v30);
            v34 = vzip2q_s32(v28, v30);
            v35 = vaddq_f32((float32x4_t)vzip2q_s32(v32, v34), vaddq_f32((float32x4_t)vzip1q_s32(v32, v34), vaddq_f32((float32x4_t)vzip1q_s32(v31, v33), (float32x4_t)vzip2q_s32(v31, v33))));
            v36 = vabsq_f32(vmulq_f32(v22, v35));
            if (v35.f32[3] <= (float)-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1), v36)).f32[0])break;
            if (++v15 == 6)
            {
              v37 = (float32x4_t *)(*(_QWORD *)(a1 + 136)
                                  + 80
                                  * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)
                                                 - *(_DWORD *)(a1 + 160)));
              *v37 = v17;
              v37[1] = v18;
              v37[2] = v19;
              v37[3] = v20;
              v37[4] = v22;
              *(_QWORD *)(*(_QWORD *)(a1 + 144)
                        + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * v9);
              v38 = *(_QWORD *)(a3 + 8 * v9);
              v39 = *(_QWORD *)(a1 + 152);
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
              v41 = *(unsigned int *)(v40 + 24);
              *(_DWORD *)(v40 + 24) = v41 + 1;
              *(_QWORD *)(v39 + 8 * v41) = v38;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) > 0xFFu)
                return;
              break;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
}

float32x4_t __computeFrustumExtrema(float32x4_t *a1, unsigned int a2, unsigned int a3, unsigned __int32 a4, float32x4_t *a5, uint32x4_t a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  a6.i64[0] = __PAIR64__(a3, a2);
  a6.i32[2] = a4;
  v6 = a1[1];
  v7 = vmulq_f32(v6, vcvtq_f32_u32(a6));
  result = vaddq_f32(v6, v7);
  v9 = vmlaq_laneq_f32(a1[35], vsubq_f32(a1[39], a1[35]), v7, 2);
  v10 = vmlaq_laneq_f32(a1[36], vsubq_f32(a1[40], a1[36]), v7, 2);
  v11 = vsubq_f32(vmlaq_laneq_f32(a1[33], vsubq_f32(a1[37], a1[33]), v7, 2), v9);
  v12 = vmlaq_lane_f32(v9, v11, *(float32x2_t *)v7.f32, 1);
  v13 = vsubq_f32(vmlaq_laneq_f32(a1[34], vsubq_f32(a1[38], a1[34]), v7, 2), v10);
  v14 = vmlaq_lane_f32(v9, v11, *(float32x2_t *)result.f32, 1);
  v15 = vsubq_f32(vmlaq_lane_f32(v10, v13, *(float32x2_t *)v7.f32, 1), v12);
  *a5 = vmlaq_n_f32(v12, v15, v7.f32[0]);
  a5[1] = vmlaq_n_f32(v12, v15, result.f32[0]);
  v16 = vsubq_f32(vmlaq_lane_f32(v10, v13, *(float32x2_t *)result.f32, 1), v14);
  a5[2] = vmlaq_n_f32(v14, v16, v7.f32[0]);
  a5[3] = vmlaq_n_f32(v14, v16, result.f32[0]);
  v17 = vmlaq_laneq_f32(a1[35], vsubq_f32(a1[39], a1[35]), result, 2);
  v18 = vmlaq_laneq_f32(a1[36], vsubq_f32(a1[40], a1[36]), result, 2);
  v19 = vsubq_f32(vmlaq_laneq_f32(a1[33], vsubq_f32(a1[37], a1[33]), result, 2), v17);
  v20 = vmlaq_lane_f32(v17, v19, *(float32x2_t *)v7.f32, 1);
  v21 = vsubq_f32(vmlaq_laneq_f32(a1[34], vsubq_f32(a1[38], a1[34]), result, 2), v18);
  v22 = vmlaq_lane_f32(v17, v19, *(float32x2_t *)result.f32, 1);
  v23 = vsubq_f32(vmlaq_lane_f32(v18, v21, *(float32x2_t *)v7.f32, 1), v20);
  a5[4] = vmlaq_n_f32(v20, v23, v7.f32[0]);
  a5[5] = vmlaq_n_f32(v20, v23, result.f32[0]);
  v24 = vsubq_f32(vmlaq_lane_f32(v18, v21, *(float32x2_t *)result.f32, 1), v22);
  a5[6] = vmlaq_n_f32(v22, v24, v7.f32[0]);
  a5[7] = vmlaq_n_f32(v22, v24, result.f32[0]);
  return result;
}

uint64_t __append(uint64_t a1, void *__src, size_t __n)
{
  int v3;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint8_t v28[4];
  uint64_t v29;
  uint8_t v30[4];
  uint64_t v31;
  uint8_t v32[4];
  uint64_t v33;
  uint8_t v34[4];
  _DWORD v35[7];

  v3 = __n;
  *(_QWORD *)&v35[5] = *MEMORY[0x1E0C80C00];
  v6 = __n;
  v7 = *(_DWORD *)(a1 + 512);
  v8 = v7 + __n;
  v9 = *(unsigned int *)(a1 + 516);
  v10 = v7;
  if (v8 >= v9)
  {
    if ((_DWORD)v9)
      v11 = *(_DWORD *)(a1 + 516);
    else
      v11 = 4096;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v8);
    *(_QWORD *)(a1 + 504) = C3DStackAllocatorReallocate(*(_QWORD *)(a1 + 2784), *(_QWORD *)(a1 + 504), v9, v12, 16);
    *(_QWORD *)(a1 + 656) = C3DStackAllocatorReallocate(*(_QWORD *)(a1 + 2784), *(_QWORD *)(a1 + 656), 4 * *(unsigned int *)(a1 + 516), 4 * v12, 16);
    *(_DWORD *)(a1 + 516) = v12;
    v10 = *(_DWORD *)(a1 + 512);
  }
  memcpy((void *)(*(_QWORD *)(a1 + 504) + v10), __src, v6);
  v13 = *(unsigned int *)(a1 + 512);
  if (v13 < v8)
  {
    v14 = v7 + v3 - v13;
    do
    {
      v15 = *(_QWORD *)(a1 + 504);
      v16 = *(unsigned __int8 *)(v15 + v13);
      v17 = a1 + 4 * v16;
      v18 = *(_DWORD *)(v17 + 664);
      if (v18)
      {
        if (*(unsigned __int8 *)(v15 + (v18 - 1)) != (_DWORD)v16)
        {
          v19 = scn_default_log();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
            __append(v34, v35, v19);
        }
        v20 = a1 + 4 * v16;
        v21 = *(_DWORD *)(v20 + 1688);
        if (!v21)
        {
          v22 = scn_default_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
            __append(v32, &v33, v22);
        }
        v23 = (v21 - 1);
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 504) + v23) != (_DWORD)v16)
        {
          v24 = scn_default_log();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
            __append(v30, &v31, v24);
        }
        v25 = *(_QWORD *)(a1 + 656);
        *(_DWORD *)(v25 + 4 * v23) = v13 + 1;
        *(_DWORD *)(v25 + 4 * v13) = 0;
        *(_DWORD *)(v20 + 1688) = v13 + 1;
        if (*(_DWORD *)(v25 + 4 * v13) > v8)
        {
          v26 = scn_default_log();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
            __append(v28, &v29, v26);
        }
      }
      else
      {
        *(_DWORD *)(v17 + 664) = v13 + 1;
        *(_DWORD *)(a1 + 4 * v16 + 1688) = v13 + 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v13) = 0;
      }
      ++v13;
      --v14;
    }
    while (v14);
    LODWORD(v13) = *(_DWORD *)(a1 + 512);
  }
  *(_DWORD *)(a1 + 512) = v8;
  return (unsigned __int16)v13;
}

uint64_t __addFroxelLightIndicesInBuffer(uint64_t a1, unsigned __int8 *__src, size_t __n)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  uint8_t v16[4];
  _DWORD v17[7];

  *(_QWORD *)&v17[5] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 4 * *__src + 664);
  if (v6)
  {
    v7 = *(_DWORD *)(a1 + 512);
    v8 = __n - 1;
    while (1)
    {
      v9 = v6 - 1;
      if (__n < 2)
      {
        v13 = 1;
      }
      else
      {
        v10 = 0;
        v11 = v7 - v6;
        if (v7 < v6)
          v11 = 0;
        v12 = v11 + 1 - 1;
        while (v12 != v10 && *(unsigned __int8 *)(*(_QWORD *)(a1 + 504) + v6 + v10) == __src[v10 + 1])
        {
          if (v8 == ++v10)
            return (unsigned __int16)v9;
        }
        v13 = v10 + 1;
      }
      if (v13 == (_DWORD)__n)
        break;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v9) > v7)
      {
        v14 = scn_default_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
          __addFroxelLightIndicesInBuffer(v16, v17, v14);
      }
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v9);
      if (!v6)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    LOWORD(v9) = __append(a1, __src, __n);
  }
  return (unsigned __int16)v9;
}

uint64_t __appendUnoptimized(uint64_t a1, char **a2, void *__src, size_t __n)
{
  unsigned int v4;
  size_t v7;
  int v8;
  unsigned int v9;
  char *v10;
  int v11;
  unsigned int v12;
  uint64_t result;

  v4 = __n;
  v8 = *((_DWORD *)a2 + 2);
  v7 = *((unsigned int *)a2 + 3);
  v9 = v8 + __n;
  if (v8 + (int)__n >= v7)
  {
    if ((_DWORD)v7)
      v11 = *((_DWORD *)a2 + 3);
    else
      v11 = 4096;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v9);
    v10 = (char *)C3DStackAllocatorReallocate(a1, (unint64_t)*a2, v7, v12, 16);
    *a2 = v10;
    *((_DWORD *)a2 + 3) = v12;
    v8 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v10 = *a2;
  }
  memcpy(&v10[v8], __src, v4);
  result = *((unsigned __int16 *)a2 + 4);
  *((_DWORD *)a2 + 2) = v9;
  return result;
}

_DWORD *__radixSortDecreasingNonZero(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _DWORD *result;
  uint64_t i;
  uint64_t v16;
  int v17;
  _DWORD v18[256];
  _DWORD v19[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  bzero(v19, 0x400uLL);
  v7 = 0;
  if ((_DWORD)v6)
  {
    v8 = v6;
    v9 = a2;
    do
    {
      v11 = *v9++;
      v10 = v11;
      if (v11)
        ++v7;
      ++v19[v10];
      --v8;
    }
    while (v8);
  }
  bzero(v18, 0x400uLL);
  v12 = 0;
  v13 = 0;
  do
  {
    v13 += v19[v12];
    v18[++v12] = v13;
  }
  while (v12 != 255);
  result = C3DStackAllocatorAllocate(a1, 4 * v7);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v16 = a2[i];
      if ((_DWORD)v16)
      {
        v17 = v18[v16];
        v18[v16] = v17 + 1;
        result[(v6 + ~v17)] = i;
      }
    }
  }
  *a3 = v7;
  return result;
}

uint64_t __compactLightIndices(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  size_t v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint8_t v23[4];
  _DWORD v24[7];

  *(_QWORD *)&v24[5] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)a1 * *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = (v6 * v7);
  v22 = v6 * v7;
  v9 = (unsigned int *)C3DStackAllocatorAllocate(*(_QWORD *)(a1 + 2784), 4 * v8);
  v10 = v9;
  if ((_DWORD)v8)
  {
    if (a3 != 8 && a3 != 4)
      __compactLightIndices();
    v11 = 0;
    do
    {
      if (a3 == 8)
        v12 = HIBYTE(*(unsigned __int16 *)(a2 + 2 * v11 + 2))
            + *(_WORD *)(a2 + 2 * v11 + 2)
            + *(unsigned __int8 *)(a2 + 2 * v11 + 4);
      else
        v12 = HIBYTE(*(unsigned __int16 *)(a2 + v11 + 2)) + *(_WORD *)(a2 + v11 + 2);
      v9[v11 / 4] = v12;
      v11 += 4;
      --v8;
    }
    while (v8);
  }
  result = (uint64_t)__radixSortDecreasingNonZero(*(_QWORD *)(a1 + 2784), v9, (unsigned int *)&v22);
  v14 = v22;
  if (v22)
  {
    v15 = (unsigned int *)result;
    do
    {
      v17 = *v15++;
      v16 = v17;
      v18 = v10[v17];
      if (!(_DWORD)v18)
      {
        v19 = scn_default_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
          __compactLightIndices(v23, v24, v19);
      }
      if (a3 == 8)
      {
        v20 = 8 * v16;
        v21 = (unsigned __int8 *)(*(_QWORD *)(a1 + 488) + (unsigned __int16)*(_QWORD *)(a2 + 8 * v16));
      }
      else
      {
        if (a3 != 4)
          __compactLightIndices();
        v20 = 4 * v16;
        v21 = (unsigned __int8 *)(*(_QWORD *)(a1 + 488) + *(unsigned __int16 *)(a2 + 4 * v16));
      }
      result = __addFroxelLightIndicesInBuffer(a1, v21, v18);
      *(_WORD *)(a2 + v20) = result;
      --v14;
    }
    while (v14);
  }
  return result;
}

float32x4_t *__computeLightsFlagsForAxis(float32x4_t *result, unsigned int a2)
{
  __int32 *v2;
  __int32 v3;
  float32x4_t *v4;
  int v5;
  const float *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  BOOL v49;
  char *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58[4];
  float32x4_t v59[4];

  v2 = &result->i32[a2 & 3];
  v3 = *v2;
  if (*v2)
  {
    v4 = result;
    v5 = 0;
    v6 = (const float *)(v2 + 4);
    v7 = vld1q_dup_f32(v6);
    v52 = v7;
    v53 = result[((2 * a2) | 1) + 2];
    v8 = 0uLL;
    v51 = vsubq_f32(vnegq_f32(result[2 * a2 + 2]), v53);
    v9 = vmlaq_f32(v53, (float32x4_t)0, v51);
    v10 = (int32x4_t)vmulq_f32(v9, v9);
    v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
    *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
    v11 = (int32x4_t)vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
    v12 = (uint64_t *)&result[171] + a2;
    v13 = result[9].i64[0] + 32;
    do
    {
      v14 = *v12;
      v15 = v4[173].i32[2];
      v56 = (float32x4_t)v11;
      v57 = vaddq_f32(v52, v8);
      v16 = vmlaq_f32(v53, v51, v57);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v55 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v59[0] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
      v59[1] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
      v59[2] = (float32x4_t)vdupq_laneq_s32(v11, 2);
      v59[3] = (float32x4_t)vdupq_laneq_s32(v11, 3);
      v54 = vnegq_f32(v55);
      v20 = (char *)(v14 + 4 * (v15 * v5));
      v58[0] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
      v58[1] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1);
      v58[2] = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2);
      v58[3] = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
      bzero(v20, (4 * v15));
      scn_sphere_x4_filter((float32x4_t *)v4[9].i64[1], v4[10].i32[0], v59, v58, v4[10].i64[1]);
      memcpy(&v20[4 * v4[169].i64[1]], (const void *)v4[10].i64[1], v4[11].u32[0]);
      scn_cone_x4_filter((float32x4_t *)v4[11].i64[1], v4[12].i32[0], v59, v58, v4[12].i64[1]);
      result = (float32x4_t *)memcpy(&v20[4 * v4[170].i64[0]], (const void *)v4[12].i64[1], v4[13].u32[0]);
      v21 = v4[170].u32[3];
      if ((int)v21 >= 1)
      {
        v22 = 0;
        v23 = (float32x4_t *)v13;
        do
        {
          v24 = v23[-2];
          v25 = v23[-1];
          v26 = v23[1];
          v27 = v23[2];
          v28 = (int32x4_t)vmulq_f32(v56, v25);
          v29 = (int32x4_t)vmulq_f32(v56, *v23);
          v30 = (int32x4_t)vmulq_f32(v56, v26);
          v31 = (int32x4_t)vmulq_f32(v56, v24);
          v32 = vzip1q_s32(v28, v30);
          v33 = vzip2q_s32(v28, v30);
          v34 = vzip1q_s32(v29, v31);
          v35 = vzip2q_s32(v29, v31);
          v36 = vaddq_f32((float32x4_t)vzip2q_s32(v33, v35), vaddq_f32((float32x4_t)vzip1q_s32(v33, v35), vaddq_f32((float32x4_t)vzip1q_s32(v32, v34), (float32x4_t)vzip2q_s32(v32, v34))));
          v37 = vabsq_f32(vmulq_f32(v27, v36));
          v49 = v36.f32[3] > (float)-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1), v37)).f32[0];
          v38 = (int32x4_t)vmulq_f32(v25, v54);
          v39 = (int32x4_t)vmulq_f32(*v23, v54);
          v40 = (int32x4_t)vmulq_f32(v26, v54);
          v41 = (int32x4_t)vmulq_f32(v24, v54);
          v42 = vzip1q_s32(v38, v40);
          v43 = vzip2q_s32(v38, v40);
          v44 = vzip1q_s32(v39, v41);
          v45 = vzip2q_s32(v39, v41);
          v46 = vaddq_f32((float32x4_t)vzip2q_s32(v43, v45), vaddq_f32((float32x4_t)vzip1q_s32(v43, v45), vaddq_f32((float32x4_t)vzip1q_s32(v42, v44), (float32x4_t)vzip2q_s32(v42, v44))));
          v47 = vabsq_f32(vmulq_f32(v27, v46));
          v48 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), v47)).f32[0];
          v49 = v49 && v46.f32[3] > v48;
          if (v49)
          {
            v50 = &v20[4 * v4[170].i64[1]];
            v50[v22 >> 3] |= 1 << (v22 & 7);
          }
          ++v22;
          v23 += 5;
        }
        while (v21 != v22);
      }
      ++v5;
      v11 = (int32x4_t)v55;
      v8 = v57;
    }
    while (v5 != v3);
  }
  return result;
}

void SCNMTLClusterSystem::displayInfoDebug(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  float32x4_t *v14;
  int v15;
  uint64_t v16;
  uint64_t Cone;
  const __CFString *v18;
  SCNMTLMesh *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFArray *MeshElements;
  const void *ValueAtIndex;
  SCNMTLMeshElement *v25;
  float32x4_t *PointOfCulling;
  uint64_t *v27;
  float32x4_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int32 v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v42;
  unsigned int v43;
  uint64_t v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  float32x4_t *v64;
  void *v65;
  __int16 v66;
  uint64_t v67;
  uint64_t *RenderContext;
  int v69;
  unsigned int v70;
  uint64_t *AuthoringEnvironment;
  _BYTE v72[344];
  _BYTE v73[344];
  _BYTE __dst[344];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  SCNMTLMesh *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  __int128 v83;
  int v84;
  float32x4_t v85[8];
  float32x4_t __src[33];
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94[135];
  _OWORD v95[9];
  uint64_t v96;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v96 = *MEMORY[0x1E0C80C00];
  AuthoringEnvironment = (uint64_t *)C3DEngineContextGetAuthoringEnvironment(v5, 0);
  if (!AuthoringEnvironment || !v2[1].i64[1])
    return;
  v61 = v4;
  v62 = v6;
  RenderContext = (uint64_t *)C3DEngineContextGetRenderContext(v6);
  v65 = (void *)-[SCNMTLRenderContext resourceManager]((uint64_t)RenderContext);
  v11 = objc_msgSend((id)v2[1].i64[1], "width");
  v70 = objc_msgSend((id)v2[1].i64[1], "height");
  v12 = objc_msgSend((id)v2[1].i64[1], "depth");
  v13 = 0;
  v60 = v2[3];
  v63 = v12;
  v64 = v2;
  v67 = v8;
  do
  {
    v14 = (float32x4_t *)((char *)v2 + 88);
    if ((_DWORD)v13 != 2)
    {
      if ((_DWORD)v13 != 3)
        goto LABEL_25;
      v14 = v2 + 6;
    }
    v15 = (__int16)WORD2(v14->i64[0]);
    if (v15 >= 1)
    {
      v16 = v10 + 8 * v13;
      v66 = v14->i64[0];
      if (*(_QWORD *)(v16 + 128))
        goto LABEL_14;
      if ((_DWORD)v13 == 3)
      {
        Cone = C3DMeshCreateCone(0, 12, 1, 0.0, 1.0, 1.0);
      }
      else
      {
        if ((_DWORD)v13 != 2)
          goto LABEL_14;
        Cone = C3DMeshCreateSphere(0, 12, 1, 1.0, 1.0);
      }
      *(_QWORD *)(v16 + 128) = Cone;
LABEL_14:
      if (!*(_QWORD *)(v16 + 72))
      {
        if ((_DWORD)v13 == 2)
        {
          v18 = CFSTR("debug_omni_vert");
          goto LABEL_19;
        }
        if ((_DWORD)v13 == 3)
        {
          v18 = CFSTR("debug_spot_vert");
LABEL_19:
          *(_QWORD *)(v16 + 72) = C3DFXMetalProgramCreateFromDefaultLibrary(v18, CFSTR("debug_light_frag"));
        }
      }
      v19 = -[SCNMTLResourceManager renderResourceForMesh:dataKind:]((uint64_t)v65, *(_QWORD *)(v16 + 128), 1);
      v20 = *(_QWORD *)(v16 + 72);
      v21 = C3DBlendStatesDefaultOver();
      v76 = 0u;
      v77 = 0u;
      v75 = v20;
      v78 = v19;
      v79 = v21;
      v80 = 0;
      v81 = 16777231;
      v82 = 0u;
      v83 = 0u;
      v84 = 0;
      v22 = objc_msgSend((id)objc_msgSend(v65, "renderResourceForProgramDesc:renderPassDescriptor:", &v75, -[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext)), "state");
      if (*(_QWORD *)(v67 + 3376) != v22)
      {
        *(_QWORD *)(v67 + 3376) = v22;
        objc_msgSend(*(id *)(v67 + 3392), "setRenderPipelineState:", v22);
      }
      -[SCNMTLRenderContext _setSceneBufferAtVertexIndex:fragmentIndex:](RenderContext, 0, -1);
      SCNMTLRenderCommandEncoder::setVertexBuffer(v67, v2[7].i64[1], v2[8].i64[0] + ((uint64_t)v66 << 8), 1);
      MeshElements = (const __CFArray *)C3DMeshGetMeshElements(*(_QWORD *)(v16 + 128), 1);
      if (MeshElements)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(MeshElements, 0);
        if (ValueAtIndex)
        {
          v25 = -[SCNMTLResourceManager renderResourceForMeshElement:]((uint64_t)v65, (uint64_t)ValueAtIndex);
          -[SCNMTLRenderContext _setMeshBuffers:]((uint64_t)RenderContext, (uint64_t)v19);
          -[SCNMTLRenderContext _drawMeshElement:instanceCount:]((uint64_t)RenderContext, (uint64_t)v25, (unsigned __int16)v15);
        }
      }
    }
LABEL_25:
    ++v13;
  }
  while (v13 != 7);
  PointOfCulling = (float32x4_t *)C3DEngineContextGetPointOfCulling(v62);
  if (!PointOfCulling || PointOfCulling == C3DEngineContextGetPointOfView(v62))
  {
    v47 = *(void **)(v10 + 48);
    if (!v47
      || (objc_msgSend(v47, "matchesRenderPassDescriptor:", -[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext)) & 1) == 0)
    {
      v48 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v65), "frameworkLibrary");
      memset(&__src[7], 0, 232);
      memset(__src, 0, 104);
      __src[6].i64[1] = v48;
      __src[12].i64[1] = C3DBlendStatesDefaultOver();
      __src[18].i64[1] = (uint64_t)CFSTR("scn_draw_fullscreen_quad_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_cluster_frag");
      v49 = (void *)-[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext);
      SCNMTLRenderPipelineApplyRenderPassDescriptor((uint64_t)&__src[7], v49);

      memcpy(__dst, __src, sizeof(__dst));
      *(_QWORD *)(v10 + 48) = objc_msgSend(v65, "newRenderPipelineStateWithDesc:", __dst);
    }
    v50 = *(void **)(v10 + 56);
    if (!v50
      || (objc_msgSend(v50, "matchesRenderPassDescriptor:", -[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext)) & 1) == 0)
    {
      v51 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v65), "frameworkLibrary");
      memset(&__src[7], 0, 232);
      memset(__src, 0, 104);
      __src[6].i64[1] = v51;
      __src[12].i64[1] = C3DBlendStatesDefaultOver();
      __src[18].i64[1] = (uint64_t)CFSTR("scn_draw_fullscreen_quad_VR_pos_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_light_indices_8_buffer_frag");
      v52 = (void *)-[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext);
      SCNMTLRenderPipelineApplyRenderPassDescriptor((uint64_t)&__src[7], v52);

      memcpy(v73, __src, sizeof(v73));
      *(_QWORD *)(v10 + 56) = objc_msgSend(v65, "newRenderPipelineStateWithDesc:", v73);
    }
    objc_msgSend(*(id *)(v67 + 3392), "setDepthStencilState:", -[SCNMTLResourceManager depthAndStencilStateWithReadWriteDepthDisabled]((uint64_t)v65));
    v53 = *(void **)(v10 + 64);
    if (!v53
      || (objc_msgSend(v53, "matchesRenderPassDescriptor:", -[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext)) & 1) == 0)
    {
      v54 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v65), "frameworkLibrary");
      memset(&__src[7], 0, 232);
      memset(__src, 0, 104);
      __src[6].i64[1] = v54;
      __src[12].i64[1] = C3DBlendStatesDefaultOver();
      __src[18].i64[1] = (uint64_t)CFSTR("scn_draw_fullscreen_quad_VR_pos_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_cluster_slices_frag");
      v55 = (void *)-[SCNMTLRenderContext currentRenderPassDescriptor]((uint64_t)RenderContext);
      SCNMTLRenderPipelineApplyRenderPassDescriptor((uint64_t)&__src[7], v55);

      memcpy(v72, __src, sizeof(v72));
      *(_QWORD *)(v10 + 64) = objc_msgSend(v65, "newRenderPipelineStateWithDesc:", v72);
    }
    if (objc_msgSend(*(id *)(v10 + 48), "state", *(_OWORD *)&v60))
    {
      v56 = objc_msgSend(*(id *)(v10 + 48), "state");
      if (*(_QWORD *)(v67 + 3376) != v56)
      {
        *(_QWORD *)(v67 + 3376) = v56;
        objc_msgSend(*(id *)(v67 + 3392), "setRenderPipelineState:", v56);
      }
      SCNMTLRenderCommandEncoder::setFragmentTexture(v67, (void *)v2[1].i64[1], 0);
      -[SCNMTLRenderContext _setSceneBufferAtVertexIndex:fragmentIndex:](RenderContext, -1, 0);
      SCNMTLRenderCommandEncoder::setFragmentBytes((SCNMTLRenderCommandEncoder *)v67, &v2[5], 8uLL, 1);
      SCNMTLRenderCommandEncoder::_bindPendingTextures((SCNMTLRenderCommandEncoder *)v67);
      SCNMTLRenderCommandEncoder::applyChangedStates((SCNMTLRenderCommandEncoder *)v67);
      objc_msgSend(*(id *)(v67 + 3392), "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
    }
    if (objc_msgSend(*(id *)(v10 + 64), "state"))
    {
      v57 = objc_msgSend(*(id *)(v10 + 64), "state");
      if (*(_QWORD *)(v67 + 3376) != v57)
      {
        *(_QWORD *)(v67 + 3376) = v57;
        objc_msgSend(*(id *)(v67 + 3392), "setRenderPipelineState:", v57);
      }
      v58 = objc_msgSend((id)v2[1].i64[1], "depth");
      v59.i32[0] = 0.5;
      v59.f32[1] = 0.5 / (float)v58;
      v59.i32[2] = 0;
      v59.f32[3] = 1.0 - v59.f32[1];
      __src[0] = v59;
      SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v67, __src, 0x10uLL, 0);
      SCNMTLRenderCommandEncoder::setFragmentTexture(v67, (void *)v2[1].i64[1], 0);
      SCNMTLRenderCommandEncoder::_bindPendingTextures((SCNMTLRenderCommandEncoder *)v67);
      SCNMTLRenderCommandEncoder::applyChangedStates((SCNMTLRenderCommandEncoder *)v67);
      objc_msgSend(*(id *)(v67 + 3392), "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
    }
  }
  else
  {
    v95[6] = xmmword_1DD02A3C0;
    v95[7] = *(_OWORD *)"fff?333?";
    v95[8] = xmmword_1DD02A3E0;
    v95[2] = xmmword_1DD02A380;
    v95[3] = unk_1DD02A390;
    v95[4] = xmmword_1DD02A3A0;
    v95[5] = unk_1DD02A3B0;
    v95[0] = *(_OWORD *)"333?333?333?";
    v95[1] = unk_1DD02A370;
    v27 = v61;
    scn_plane_intersect_3_planes(v61[10], v61[11], v61[4], v61[5], v61[2], v61[3], &v87);
    scn_plane_intersect_3_planes(v27[10], v27[11], *v27, v27[1], v27[4], v27[5], &v88);
    scn_plane_intersect_3_planes(v27[10], v27[11], v27[2], v27[3], v27[6], v27[7], &v89);
    scn_plane_intersect_3_planes(v27[10], v27[11], v27[6], v27[7], *v27, v27[1], &v90);
    scn_plane_intersect_3_planes(v27[8], v27[9], v27[4], v27[5], v27[2], v27[3], &v91);
    scn_plane_intersect_3_planes(v27[8], v27[9], *v27, v27[1], v27[4], v27[5], &v92);
    scn_plane_intersect_3_planes(v27[8], v27[9], v27[2], v27[3], v27[6], v27[7], &v93);
    scn_plane_intersect_3_planes(v27[8], v27[9], v27[6], v27[7], *v27, v27[1], v94);
    v28 = v60;
    __src[1] = v60;
    v29 = v70;
    v30 = v63;
    if (v63)
    {
      v69 = 0;
      v31 = 0;
      v32 = v64[6].i32[3];
      v33 = v64->i64[0];
      do
      {
        v34 = *(_DWORD *)(v10 + 40);
        if ((v34 == v31 || v34 >= v30) && v29 != 0)
        {
          v37 = 0;
          v38 = v69;
          do
          {
            v39 = *(_DWORD *)(v10 + 36);
            if ((v39 == v37 || v39 >= v29) && v11 != 0)
            {
              v42 = 0;
              do
              {
                v43 = *(_DWORD *)(v10 + 32);
                if (v43 >= v11 || v42 == v43)
                {
                  v45 = v38 + v42;
                  v28 = __computeFrustumExtrema(__src, v42, v37, v31, v85, (uint32x4_t)v28);
                  if (v32)
                    v28.i64[0] = *(_QWORD *)(v33 + 8 * v45);
                  else
                    v28 = (float32x4_t)*(unsigned int *)(v33 + 4 * v45);
                  v46 = v28.u8[3];
                  if (v28.u8[2] > ((unsigned __int16)(v28.i16[1] & 0xFF00) >> 8))
                    v46 = v28.u8[2];
                  if (v46 >= 8)
                    v46 = 8;
                  if (v46)
                    C3DAuthoringEnvironmentAppendDebugAsymetricBox(AuthoringEnvironment, (uint64_t)v85, 0, (float *)&v95[v46]);
                }
                ++v42;
              }
              while (v11 != v42);
            }
            ++v37;
            v38 += v11;
            v29 = v70;
          }
          while (v37 != v70);
        }
        ++v31;
        v69 += v70 * v11;
        v30 = v63;
      }
      while (v31 != v63);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,__SphereZComp &,short *,false>(uint64_t result, __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 *v15;
  __int16 v16;
  __int16 *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (__int16 *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) > *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 47)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x101)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) <= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,short *,__SphereZComp &>(v9, a2, a3);
            v9 = (__int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,short *,__SphereZComp &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,__SphereZComp &,short *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *,short *>(v9, a2, a2, a3);
        return result;
    }
  }
}

__int16 *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  _WORD *v13;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v7 = v6[1];
        v8 = *v6;
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 > *(float *)(v5 + 4 * v8))
        {
          v10 = v7;
          v11 = v8;
          v12 = v4;
          while (1)
          {
            *(__int16 *)((char *)result + v12 + 2) = v11;
            if (!v12)
              break;
            v11 = *(__int16 *)((char *)result + v12 - 2);
            v12 -= 2;
            if (v9 <= *(float *)(v5 + 4 * v11))
            {
              v13 = (__int16 *)((char *)result + v12 + 2);
              goto LABEL_10;
            }
          }
          v13 = result;
LABEL_10:
          *v13 = v10;
        }
        v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

__int16 *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  __int16 v8;
  __int16 v9;
  __int16 *v10;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v5 = result[1];
        v6 = *result;
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 > *(float *)(v4 + 4 * v6))
        {
          v8 = v5;
          v9 = v6;
          v10 = result;
          do
          {
            *v10 = v9;
            v9 = *(v10 - 2);
            --v10;
          }
          while (v7 > *(float *)(v4 + 4 * v9));
          *v10 = v8;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  __int16 v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a4;
  v6 = *(float *)(*a4 + 4 * *a2);
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *a2;
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * *a3);
  if (v6 > v7)
  {
    if (v10 > v6)
    {
      *a1 = v9;
      *a3 = v4;
      return 1;
    }
    *a1 = v8;
    *a2 = v4;
    v13 = *a3;
    if (*(float *)(v5 + 4 * v13) <= v7)
      return 1;
    *a2 = v13;
    *a3 = v4;
    return 2;
  }
  if (v10 > v6)
  {
    *a2 = v9;
    *a3 = v8;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v5 + 4 * v11) <= *(float *)(v5 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

__int16 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,short *,__SphereZComp &>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 <= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 <= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 <= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 > *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 <= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 > *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

__int16 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,short *,__SphereZComp &>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) > v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) <= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) <= v6);
  }
  if (v8 < a2)
  {
    v12 = v7;
    v13 = *a2;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v13;
      *v15 = v12;
      do
      {
        v16 = v14[1];
        ++v14;
        v12 = v16;
      }
      while (*(float *)(v5 + 4 * v16) > v6);
      do
      {
        v17 = *--v15;
        v13 = v17;
      }
      while (*(float *)(v5 + 4 * v17) <= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int16 *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) > *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 6;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *(float *)(v13 + 4 * v15);
    if (v16 > *(float *)(v13 + 4 * *v10))
    {
      v17 = *v10;
      v18 = v14;
      while (1)
      {
        *(__int16 *)((char *)a1 + v18) = v17;
        v19 = v18 - 2;
        if (v18 == 2)
          break;
        v20 = *(__int16 *)((char *)a1 + v18 - 4);
        v17 = v20;
        v21 = *(float *)(v13 + 4 * v20);
        v18 = v19;
        if (v16 <= v21)
        {
          v22 = (__int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *v22 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 2;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) > *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) > *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 4 * v16) > *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 4 * v18) > *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 4 * v20) > *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

__int16 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *,short *>(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  __int16 *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) > *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(uint64_t result, uint64_t *a2, uint64_t a3, __int16 *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  __int16 v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (__int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *a4;
      v11 = *(float *)(v9 + 4 * v10);
      if (*(float *)(v9 + 4 * *v7) <= v11)
      {
        v12 = *v7;
        do
        {
          v13 = v7;
          *a4 = v12;
          if (v5 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int16 *)(result + 2 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v12 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * *v7) <= v11);
        *v13 = v10;
      }
    }
  }
  return result;
}

__int16 *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(__int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    v8 = 2 * v3 + 2;
    result = (__int16 *)((char *)result + v8);
    v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) > *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v8;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,__SphereZComp &,short *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _WORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int16 *)(result + 2 * v4);
    v6 = *v5;
    v9 = *(__int16 *)(a2 - 2);
    v7 = (_WORD *)(a2 - 2);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) > v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int16 *)(result + 2 * v4);
        LOWORD(v6) = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * *v5) > v11);
      *v12 = v8;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,__VolumeComp &,short *,false>(uint64_t result, __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 *v15;
  __int16 v16;
  __int16 *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (__int16 *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) < *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 47)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x101)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) >= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,short *,__VolumeComp &>(v9, a2, a3);
            v9 = (__int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,short *,__VolumeComp &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,__VolumeComp &,short *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *,short *>(v9, a2, a2, a3);
        return result;
    }
  }
}

__int16 *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  _WORD *v13;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v7 = v6[1];
        v8 = *v6;
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          v10 = v7;
          v11 = v8;
          v12 = v4;
          while (1)
          {
            *(__int16 *)((char *)result + v12 + 2) = v11;
            if (!v12)
              break;
            v11 = *(__int16 *)((char *)result + v12 - 2);
            v12 -= 2;
            if (v9 >= *(float *)(v5 + 4 * v11))
            {
              v13 = (__int16 *)((char *)result + v12 + 2);
              goto LABEL_10;
            }
          }
          v13 = result;
LABEL_10:
          *v13 = v10;
        }
        v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

__int16 *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  __int16 v8;
  __int16 v9;
  __int16 *v10;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v5 = result[1];
        v6 = *result;
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          v8 = v5;
          v9 = v6;
          v10 = result;
          do
          {
            *v10 = v9;
            v9 = *(v10 - 2);
            --v10;
          }
          while (v7 < *(float *)(v4 + 4 * v9));
          *v10 = v8;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  __int16 v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a4;
  v6 = *(float *)(*a4 + 4 * *a2);
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *a2;
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * *a3);
  if (v6 < v7)
  {
    if (v10 < v6)
    {
      *a1 = v9;
      *a3 = v4;
      return 1;
    }
    *a1 = v8;
    *a2 = v4;
    v13 = *a3;
    if (*(float *)(v5 + 4 * v13) >= v7)
      return 1;
    *a2 = v13;
    *a3 = v4;
    return 2;
  }
  if (v10 < v6)
  {
    *a2 = v9;
    *a3 = v8;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v5 + 4 * v11) >= *(float *)(v5 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

__int16 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,short *,__VolumeComp &>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

__int16 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,short *,__VolumeComp &>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = v7;
    v13 = *a2;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v13;
      *v15 = v12;
      do
      {
        v16 = v14[1];
        ++v14;
        v12 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        v17 = *--v15;
        v13 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int16 *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 6;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *(float *)(v13 + 4 * v15);
    if (v16 < *(float *)(v13 + 4 * *v10))
    {
      v17 = *v10;
      v18 = v14;
      while (1)
      {
        *(__int16 *)((char *)a1 + v18) = v17;
        v19 = v18 - 2;
        if (v18 == 2)
          break;
        v20 = *(__int16 *)((char *)a1 + v18 - 4);
        v17 = v20;
        v21 = *(float *)(v13 + 4 * v20);
        v18 = v19;
        if (v16 >= v21)
        {
          v22 = (__int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *v22 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 2;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

__int16 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *,short *>(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  __int16 *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(uint64_t result, uint64_t *a2, uint64_t a3, __int16 *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  __int16 v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (__int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *a4;
      v11 = *(float *)(v9 + 4 * v10);
      if (*(float *)(v9 + 4 * *v7) >= v11)
      {
        v12 = *v7;
        do
        {
          v13 = v7;
          *a4 = v12;
          if (v5 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int16 *)(result + 2 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v12 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * *v7) >= v11);
        *v13 = v10;
      }
    }
  }
  return result;
}

__int16 *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(__int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    v8 = 2 * v3 + 2;
    result = (__int16 *)((char *)result + v8);
    v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v8;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,__VolumeComp &,short *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _WORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int16 *)(result + 2 * v4);
    v6 = *v5;
    v9 = *(__int16 *)(a2 - 2);
    v7 = (_WORD *)(a2 - 2);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int16 *)(result + 2 * v4);
        LOWORD(v6) = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * *v5) < v11);
      *v12 = v8;
    }
  }
  return result;
}

__CFString *_C3DIndexSetCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;

  Mutable = CFStringCreateMutable(0, 256);
  CFStringAppend(Mutable, CFSTR("indexSet "));
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    goto LABEL_15;
  if ((*(_BYTE *)(a1 + 16) & 2) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v3 + 16))
    {
      v4 = *(_QWORD *)(v3 + 8);
      CFStringAppendFormat(Mutable, 0, CFSTR("[number of indexes: %lu (in %lu ranges), indexes: ("), *(_QWORD *)(v3 + 16), v4);
      if (v4 < 1)
      {
        v9 = CFSTR(")]");
        goto LABEL_16;
      }
      v5 = v3 + 56;
      goto LABEL_8;
    }
LABEL_15:
    v9 = CFSTR("(no index)");
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    goto LABEL_15;
  v5 = a1 + 24;
  v4 = 1;
  CFStringAppendFormat(Mutable, 0, CFSTR("[number of indexes: %lu (in %lu ranges), indexes: ("), v6, 1);
LABEL_8:
  v7 = 0;
  v8 = (uint64_t *)(v5 + 8);
  v9 = CFSTR(")]");
  do
  {
    if (v7)
      CFStringAppend(Mutable, CFSTR(" "));
    v10 = *(v8 - 1);
    v11 = *v8;
    CFStringAppendFormat(Mutable, 0, CFSTR("%lu"), v10);
    if (v11 >= 2)
      CFStringAppendFormat(Mutable, 0, CFSTR("-%lu"), v10 + v11 - 1);
    ++v7;
    v8 += 2;
  }
  while (v4 != v7);
LABEL_16:
  CFStringAppend(Mutable, v9);
  return Mutable;
}

double _setContentToContentFromIndexSet(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;

  if (a2)
  {
    v4 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4 | 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
      {
        v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        *(_BYTE *)(a1 + 16) = v4 & 0xFC | 2;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = v4 & 0xFC | 2;
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        {
          v5 = 0;
        }
        else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        {
          v5 = 1;
        }
        else
        {
          v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
        }
        *(_BYTE *)(a1 + 16) = v4 & 0xFC;
        v7 = malloc_type_calloc(16 * v5 + 56, 1uLL, 0xF8F96908uLL);
        *(_QWORD *)(a1 + 24) = v7;
        v8 = a1 + 24;
        v7[6] = 0;
        **(_QWORD **)(a1 + 24) = v5;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) = v5;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = 0;
        v9 = a1 + 24;
        if ((*(_BYTE *)(a1 + 16) & 2) == 0)
          v9 = *(_QWORD *)v8 + 56;
        v10 = (_QWORD *)(a2 + 24);
        if ((*(_BYTE *)(a2 + 16) & 2) == 0)
          v10 = (_QWORD *)(*v10 + 56);
        if (v5 >= 1)
        {
          v11 = (_QWORD *)(v9 + 8);
          do
          {
            v12 = *(_OWORD *)v10;
            v10 += 2;
            *(_QWORD *)&v6 = v12;
            *(_OWORD *)(v11 - 1) = v12;
            *(_QWORD *)&v12 = *v11;
            v11 += 2;
            *(_QWORD *)(*(_QWORD *)v8 + 16) += v12;
            --v5;
          }
          while (v5);
        }
      }
    }
  }
  return *(double *)&v6;
}

uint64_t C3DIndexSetCreate()
{
  if (C3DIndexSetGetTypeID_onceToken != -1)
    dispatch_once(&C3DIndexSetGetTypeID_onceToken, &__block_literal_global_59);
  return C3DTypeCreateInstance_(C3DIndexSetGetTypeID_typeID, 0x18uLL);
}

uint64_t C3DIndexSetGetCount(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    v1 = a1 + 32;
  else
    v1 = *(_QWORD *)(a1 + 24) + 16;
  return *(_QWORD *)v1;
}

uint64_t C3DIndexSetGetIndexGreaterThanIndex(uint64_t a1, uint64_t a2)
{
  return _indexClosestToIndex(a1, a2, 0, 1);
}

uint64_t _indexClosestToIndex(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v5;
  uint64_t v6;
  pthread_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  pthread_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return -1;
  v5 = a3;
  v6 = a2;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v15 = (char *)v10 + *(_QWORD *)(a1 + 32);
    v16 = (uint64_t)(v15 - 1);
    if (a4)
    {
      if (a3)
      {
        if ((uint64_t)v10 < a2)
        {
          if ((uint64_t)v15 > a2)
            return v6;
          v8 = 0;
LABEL_47:
          v27 = _indexOfRangeAfterOrContainingIndex(a1, v6);
          if (v27 == -1)
            return -1;
          v28 = a1 + 24;
          if ((*(_BYTE *)(a1 + 16) & 2) != 0)
            v29 = (_QWORD *)(a1 + 24);
          else
            v29 = v10 + 7;
          v30 = v29[2 * v27];
          if (v6 <= v30)
            v16 = v30;
          else
            v16 = v6;
          if ((pthread_t)v10[6] == v8)
          {
            v10[4] = v27;
            *(_QWORD *)(*(_QWORD *)v28 + 40) = v16 - v30;
            v26 = *(_QWORD *)v28;
            goto LABEL_56;
          }
          return v16;
        }
      }
      else if ((uint64_t)v10 <= a2)
      {
        if (v16 > a2)
          return a2 + 1;
        v8 = 0;
LABEL_45:
        if (v6 == 0x7FFFFFFFFFFFFFFFLL)
          return -1;
        ++v6;
        goto LABEL_47;
      }
      return *(_QWORD *)(a1 + 24);
    }
    if (a3)
    {
      if (v16 <= a2)
        return v16;
      v16 = a2;
      if ((uint64_t)v10 <= a2)
        return v16;
      goto LABEL_32;
    }
    if ((uint64_t)v15 <= a2)
      return v16;
    if ((uint64_t)v10 < a2)
      return a2 - 1;
    goto LABEL_30;
  }
  v8 = pthread_self();
  v9 = a1 + 24;
  v10 = *(_QWORD **)(a1 + 24);
  if ((pthread_t)v10[6] == v8 && v10[3] == v6)
  {
    if ((v5 & 1) == 0)
    {
      v11 = v10 + 7;
      if ((*(_BYTE *)(a1 + 16) & 2) != 0)
        v11 = (_QWORD *)(a1 + 24);
      if (a4)
      {
        v12 = v10[4];
        if (v11[2 * v12 + 1] - 1 > v10[5])
        {
          v10[3] = v6 + 1;
          v13 = *(_QWORD *)v9;
          v14 = *(_QWORD *)(*(_QWORD *)v9 + 40) + 1;
LABEL_59:
          *(_QWORD *)(v13 + 40) = v14;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
        v31 = (*(_BYTE *)(a1 + 16) & 1) == 0;
        if ((*(_BYTE *)(a1 + 16) & 3) == 0)
          v31 = v10[1];
        v32 = v12 + 1;
        if (v32 < v31)
        {
          v10[4] = v32;
          v33 = v11[2 * *(_QWORD *)(*(_QWORD *)v9 + 32)];
          *(_QWORD *)(*(_QWORD *)v9 + 40) = 0;
          *(_QWORD *)(*(_QWORD *)v9 + 24) = v33;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
      }
      else
      {
        if ((uint64_t)v10[5] >= 1)
        {
          v10[3] = v6 - 1;
          v13 = *(_QWORD *)v9;
          v14 = *(_QWORD *)(*(_QWORD *)v9 + 40) - 1;
          goto LABEL_59;
        }
        v34 = v10[4];
        v35 = v34 < 1;
        v36 = v34 - 1;
        if (!v35)
        {
          v10[4] = v36;
          v37 = &v11[2 * *(_QWORD *)(*(_QWORD *)v9 + 32)];
          v38 = *v37;
          *(_QWORD *)(*(_QWORD *)v9 + 40) = v37[1] - 1;
          *(_QWORD *)(*(_QWORD *)v9 + 24) = *(_QWORD *)(*(_QWORD *)v9 + 40) + v38;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
      }
      v10[6] = 0;
      return -1;
    }
    return v6;
  }
  if (a4)
  {
    if ((v5 & 1) != 0)
      goto LABEL_47;
    goto LABEL_45;
  }
  if ((v5 & 1) == 0)
  {
LABEL_30:
    if (!v6)
      return -1;
    --v6;
  }
LABEL_32:
  v17 = _indexOfRangeBeforeOrContainingIndex(a1, v6);
  if (v17 == -1)
    return -1;
  v18 = v17;
  v19 = a1 + 24;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    v20 = (_QWORD *)(a1 + 24);
  else
    v20 = v10 + 7;
  v21 = &v20[2 * v17];
  v22 = *v21;
  v23 = v21[1] + *v21;
  if (v6 >= v23)
    v16 = v23 - 1;
  else
    v16 = v6;
  v24 = pthread_self();
  v25 = *(_QWORD *)(a1 + 24);
  if (*(pthread_t *)(v25 + 48) == v24)
  {
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(*(_QWORD *)v19 + 40) = v16 - v22;
    v26 = *(_QWORD *)v19;
LABEL_56:
    *(_QWORD *)(v26 + 24) = v16;
  }
  return v16;
}

uint64_t C3DIndexSetContainsIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _opaque_pthread_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  v4 = a1 + 24;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if (*(_QWORD *)v4 <= a2)
      return *(_QWORD *)(a1 + 32) + *(_QWORD *)v4 > a2;
    return 0;
  }
  v5 = *(_opaque_pthread_t **)(*(_QWORD *)v4 + 48);
  if (v5 != pthread_self())
  {
    v6 = *(_BYTE *)(a1 + 16);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)v4;
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) != a2)
  {
    v6 = *(_BYTE *)(a1 + 16);
    v13 = v12 + 56;
    if ((v6 & 2) != 0)
      v13 = v4;
    v14 = (_QWORD *)(v13 + 16 * *(_QWORD *)(v12 + 32));
    if (*v14 > a2 || v14[1] + *v14 <= a2)
    {
LABEL_5:
      if ((v6 & 1) == 0)
      {
        if ((v6 & 2) != 0)
          goto LABEL_9;
        v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v7 >= 1)
        {
          v4 = *(_QWORD *)v4 + 56;
          v8 = v7 - 1;
          if (v7 != 1)
          {
            v15 = 0;
            do
            {
              v16 = v15 + v8;
              if (v15 + v8 < 0 != __OFADD__(v15, v8))
                ++v16;
              v9 = v16 >> 1;
              v17 = (_QWORD *)(v4 + 16 * v9);
              if (*v17 <= a2)
              {
                if (v17[1] + *v17 > a2)
                  return v9 != -1;
                v15 = v9 + 1;
              }
              else
              {
                v8 = v9;
              }
            }
            while (v15 < v8);
            v9 = v15;
LABEL_10:
            v10 = (_QWORD *)(v4 + 16 * v9);
            if (*v10 <= a2 && v10[1] + *v10 > a2)
              return v9 != -1;
            goto LABEL_12;
          }
LABEL_9:
          v9 = 0;
          goto LABEL_10;
        }
      }
LABEL_12:
      v9 = -1;
      return v9 != -1;
    }
  }
  return 1;
}

void C3DIndexSetAddIndexes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  if (a2 && a2 != a1)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0 || (*(_BYTE *)(a1 + 16) & 2) == 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
    {
      C3DIndexSetRemoveAllIndexes(a1);
      _setContentToContentFromIndexSet(a1, a2);
      return;
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      return;
    if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    {
      v4 = 1;
    }
    else
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v4 < 1)
        return;
    }
    for (i = 0; i != v4; ++i)
    {
      v6 = rangeAtIndex(a2, i);
      C3DIndexSetAddIndexesInRange(a1, v6, v7);
    }
  }
}

uint64_t rangeAtIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v4 = 0;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (v4 < a2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      rangeAtIndex_cold_1();
  }
  v6 = (_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 16) & 2) == 0)
    v6 = (_QWORD *)(*v6 + 56);
  return v6[2 * a2];
}

void C3DIndexSetRemoveIndexes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;

  if (a2
    && (*(_BYTE *)(a1 + 16) & 1) == 0
    && ((*(_BYTE *)(a1 + 16) & 2) != 0 || *(uint64_t *)(*(_QWORD *)(a1 + 24) + 8) >= 1))
  {
    if (a2 == a1)
    {
      C3DIndexSetRemoveAllIndexes(a2);
      return;
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      return;
    if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    {
      v4 = 1;
    }
    else
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v4 < 1)
        return;
    }
    for (i = 0; i != v4; ++i)
    {
      v6 = rangeAtIndex(a2, i);
      C3DIndexSetRemoveIndexesInRange(a1, v6, v7);
    }
  }
}

uint64_t C3DIndexSetCreateIntersectionOfIndexSets(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;

  v4 = C3DIndexSetCreate();
  *(_BYTE *)(v4 + 16) |= 0xBu;
  v5 = (_BYTE *)C3DIndexSetCreate();
  v5[16] |= 0xBu;
  C3DIndexSetAddIndexes(v4, a1);
  C3DIndexSetAddIndexes((uint64_t)v5, a1);
  C3DIndexSetRemoveIndexes((uint64_t)v5, a2);
  C3DIndexSetRemoveIndexes(v4, (uint64_t)v5);
  CFRelease(v5);
  return v4;
}

void btC3DMotionState::btC3DMotionState(btC3DMotionState *this, __C3DNode *a2, float a3)
{
  *(_QWORD *)this = off_1EA596450;
  *((float *)this + 16) = a3;
  *((_QWORD *)this + 9) = a2;
}

__n128 *btC3DMotionState::setOffset(__n128 *result, __n128 a2)
{
  result[3] = a2;
  return result;
}

float32x4_t btC3DMotionState::getWorldTransform(btC3DMotionState *this, btTransform *a2)
{
  float32x4_t *WorldMatrix;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t result;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  WorldMatrix = C3DNodeGetWorldMatrix(*((float32x4_t **)this + 9));
  v5.i64[0] = WorldMatrix[3].i64[0];
  v6.i32[0] = WorldMatrix->i32[0];
  v6.i32[1] = WorldMatrix[1].i32[0];
  v6.i64[1] = WorldMatrix[2].u32[0];
  v23 = v6;
  v6.i32[0] = WorldMatrix->i32[1];
  v6.i32[1] = WorldMatrix[1].i32[1];
  v6.i32[2] = WorldMatrix[2].i32[1];
  v22 = v6;
  v6.i32[0] = WorldMatrix->i32[2];
  v6.i32[1] = WorldMatrix[1].i32[2];
  v6.i32[2] = WorldMatrix[2].i32[2];
  v21 = v6;
  v5.i64[1] = WorldMatrix[3].u32[2];
  v24 = v5;
  C3DMatrix4x4GetScale(WorldMatrix, (float32x4_t *)this + 1);
  __asm { FMOV            V1.2S, #1.0 }
  *(float32x2_t *)v12.f32 = vdiv_f32(_D1, *(float32x2_t *)((char *)this + 16));
  v12.f32[2] = 1.0 / *((float *)this + 6);
  v12.i32[3] = 0;
  v13 = vmulq_f32(v21, v12);
  v14 = vmulq_f32(v22, v12);
  v15 = vmulq_f32(v23, v12);
  v16 = *((float32x4_t *)this + 3);
  v17 = (int8x16_t)vmulq_f32(v16, v13);
  v16.i32[3] = 0;
  v18 = (int8x16_t)vmulq_f32(v16, v15);
  v19 = vmulq_f32(v16, v14);
  v17.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v17.i32[0] = *((_DWORD *)this + 16);
  a2->var0.var0[0] = (btVector3)v15;
  a2->var0.var0[1] = (btVector3)v14;
  result = vmulq_n_f32(vaddq_f32(v24, v19), *(float *)v17.i32);
  a2->var0.var0[2] = (btVector3)v13;
  a2->var1 = (btVector3)result;
  return result;
}

void btC3DMotionState::setWorldTransform(btC3DMotionState *this, const btTransform *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t Parent;
  float32x4_t *v14;
  simd_float4x4 *WorldMatrix;
  simd_float4x4 v16;
  float32x4_t v17[3];
  uint64_t v18;
  __int32 v19;
  int v20;

  v3 = (float32x4_t)a2->var0.var0[1];
  v4 = (float32x4_t)a2->var0.var0[2];
  v5 = *((float32x4_t *)this + 3);
  v6 = (int8x16_t)vmulq_f32(v4, v5);
  v5.i32[3] = 0;
  v7 = (int8x16_t)vmulq_f32((float32x4_t)a2->var0.var0[0], v5);
  v8 = vmulq_f32(v3, v5);
  v6.i32[3] = 0;
  *(float32x2_t *)v8.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL)));
  *(float32x2_t *)&v8.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)), 0);
  v9 = (int8x16_t)vtrn1q_s32((int32x4_t)a2->var0.var0[0], (int32x4_t)v3);
  v10.i64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
  v9.i64[1] = v4.u32[0];
  *(int32x2_t *)v11.f32 = vzip2_s32(*(int32x2_t *)a2->var0.var0[0].var0.var0, *(int32x2_t *)v3.f32);
  *(int32x2_t *)&v11.u32[2] = vzip2_s32(*(int32x2_t *)v4.f32, 0);
  v10.i64[1] = vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL).u32[0];
  v12 = vsubq_f32(vmulq_n_f32((float32x4_t)a2->var1, 1.0 / *((float *)this + 16)), v8);
  v17[0] = (float32x4_t)v9;
  v17[1] = v11;
  v17[2] = v10;
  v18 = v12.i64[0];
  v19 = v12.i32[2];
  v20 = 1065353216;
  C3DMatrix4x4Scale(v17, (float32x2_t *)this + 2);
  Parent = C3DNodeGetParent(*((_QWORD *)this + 9));
  if (Parent)
  {
    v14 = (float32x4_t *)Parent;
    if (C3DNodeGetParent(Parent))
    {
      WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(v14);
      C3DMatrix4x4Invert(WorldMatrix, &v16);
      C3DMatrix4x4Mult((uint64_t)v17, (float32x4_t *)&v16, v17);
    }
  }
  C3DNodeSetMatrix(*((float32x4_t **)this + 9), (uint64_t)v17);
}

btRigidBody *__modifyCollisionFlagsFromType(btRigidBody *this, SCNPhysicsBodyType a2)
{
  btRigidBody *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = this;
  v3 = *((_DWORD *)this + 58) & 0xFFFFFFFC;
  if (a2 == SCNPhysicsBodyTypeKinematic)
  {
    v4 = v3 | 2;
    this = (btRigidBody *)btCollisionObject::setActivationState((btCollisionObject *)this, 4);
  }
  else if (a2)
  {
    v4 = *((_DWORD *)this + 58) & 0xFFFFFFFC;
  }
  else
  {
    v4 = v3 | 1;
  }
  v5 = *((_QWORD *)v2 + 26);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 8);
    if (v6 == 21)
      v7 = v4 | 8;
    else
      v7 = v4;
    if (v6 == 22)
      v4 |= 8u;
    else
      v4 = v7;
  }
  *((_DWORD *)v2 + 58) = v4;
  return this;
}

uint64_t __updateCCDRadiusIfNeeded(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  if (*(float *)(result + 288) > 0.0)
  {
    v1 = result;
    result = *(_QWORD *)(result + 208);
    v4 = 0;
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)result + 24))(result, &v3, &v4);
      v2 = v4;
    }
    else
    {
      v2 = 0;
    }
    *(_DWORD *)(v1 + 284) = v2;
  }
  return result;
}

btCollisionShape *__integrateCenterOfMassOffsetIfNeeded(btQuaternion *a1, btVector3 a2, uint64_t a3)
{
  btCollisionShape *v3;
  btCompoundShape *v5;
  __int128 *Identity;
  int8x16_t v7;
  btVector3 v9;
  btTransform v10;

  v3 = (btCollisionShape *)a1;
  if (a1)
  {
    if (*(float *)a3 != 0.0 || *(float *)(a3 + 4) != 0.0 || *(float *)(a3 + 8) != 0.0)
    {
      Identity = btQuaternion::getIdentity(a1);
      v7.i64[0] = 0x8000000080000000;
      v7.i64[1] = 0x8000000080000000;
      v9 = (btVector3)veorq_s8(*(int8x16_t *)a3, v7);
      btMatrix3x3::setRotation(&v10.var0, (float32x4_t *)Identity);
      v10.var1 = v9;
      if (v3->var1 == 31 && v3->var2 == (void *)2880154539)
      {
        btCompoundShape::updateChildTransform(v3, 0, &v10, 1);
        return v3;
      }
      v5 = (btCompoundShape *)btAlignedAllocInternal(128, 16);
      btCompoundShape::btCompoundShape(v5, 1);
      *((_QWORD *)v5 + 2) = 2880154539;
      btCompoundShape::addChildShape(v5, &v10, v3, 0);
      return (btCollisionShape *)v5;
    }
    if (LODWORD(a1->var0.var0[2]) == 31 && *(_QWORD *)a1[1].var0.var0 == 2880154539)
    {
      v5 = *(btCompoundShape **)(*(_QWORD *)&a1[2].var0.var0[2] + 64);
      (*(void (**)(btQuaternion *))(*(_QWORD *)a1->var0.var0 + 8))(a1);
      return (btCollisionShape *)v5;
    }
  }
  return v3;
}

void sub_1DCDFAE74(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

__int128 *btQuaternion::getIdentity(btQuaternion *this)
{
  unsigned __int8 v1;

  {
    btQuaternion::getIdentity(void)::identityQuat = xmmword_1DD007610;
  }
  return &btQuaternion::getIdentity(void)::identityQuat;
}

void __setCollisionShape(uint64_t a1, btQuaternion *a2, unsigned __int128 *a3, __int128 *a4, double a5, float a6, float a7, float a8)
{
  int v11;
  btCollisionShape *v12;
  __int128 v13;

  v13 = *a4;
  v11 = v13;
  v12 = __integrateCenterOfMassOffsetIfNeeded(a2, *(btVector3 *)(&a6 - 1), (uint64_t)&v13);
  (*(void (**)(uint64_t, btCollisionShape *))(*(_QWORD *)a1 + 24))(a1, v12);
  __updateCCDRadiusIfNeeded(a1);
  __updateMassAndLocalInertia((btRigidBody *)a1, v12, a3, a5);
  if (v12)
  {
    if ((v12->var1 - 21) <= 1)
      *(_DWORD *)(a1 + 232) |= 8u;
  }
}

void __updateMassAndLocalInertia(btRigidBody *this, _DWORD *a2, unsigned __int128 *a3, double a4)
{
  unsigned __int128 v6;
  float v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  float v12;
  unsigned __int128 v13;

  v13 = 0uLL;
  if (a3)
  {
    v6 = *a3;
    HIDWORD(v6) = 0;
    v13 = v6;
  }
  else if (a2 && (*((_BYTE *)this + 232) & 1) == 0)
  {
    v8 = a2[2];
    v9 = v8 > 0x1C;
    v10 = (1 << v8) & 0x10608000;
    if (v9 || v10 == 0)
    {
      v12 = a4;
      (*(void (**)(_DWORD *, unsigned __int128 *, float))(*(_QWORD *)a2 + 64))(a2, &v13, v12);
    }
  }
  v7 = a4;
  btRigidBody::setMassProps(this, v7, (const btVector3 *)&v13);
  btRigidBody::updateInertiaTensor(this);
}

void sub_1DCDFB26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DCDFB3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DCDFB660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL C3DNodePhysicsBodyIsAtRest(uint64_t a1)
{
  return -[SCNPhysicsBody isResting](-[SCNNode physicsBody](+[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a1), "physicsBody"), "isResting");
}

BOOL C3DNodePhysicsBodyIsDynamic(uint64_t a1)
{
  return -[SCNPhysicsBody type](-[SCNNode physicsBody](+[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a1), "physicsBody"), "type") == SCNPhysicsBodyTypeDynamic;
}

__n128 __copy_helper_block_e16_48c14_ZTS9btVector3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void _recreateProxy(btDynamicsWorld *a1, btCollisionObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint8_t v11[16];

  if (a1)
  {
    (*(void (**)(btDynamicsWorld *))(*(_QWORD *)a1 + 184))(a1);
    (*(void (**)(btDynamicsWorld *, btCollisionObject *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, a2, a4, a3, a5);
    btCollisionObject::activate(a2, 0);
  }
  else
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1DCCB8000, v10, OS_LOG_TYPE_DEFAULT, "Warning: cannot change collision bit masks without physics world", v11, 2u);
    }
  }
}

float32x4_t btRigidBody::applyImpulse(btRigidBody *this, float32x4_t *a2, int8x16_t *a3)
{
  float32x4_t result;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;

  result.i32[0] = *((_DWORD *)this + 96);
  if (result.f32[0] != 0.0)
  {
    v4 = *((float32x4_t *)this + 25);
    v5 = vmulq_n_f32(vmulq_f32(*a2, v4), result.f32[0]);
    v5.i32[3] = 0;
    v6 = *((float32x4_t *)this + 21);
    *((float32x4_t *)this + 22) = vaddq_f32(*((float32x4_t *)this + 22), v5);
    v7 = vmulq_f32(v4, *a2);
    *(int8x8_t *)v8.f32 = vext_s8(*(int8x8_t *)a3->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), 4uLL);
    v8.i64[1] = a3->i64[0];
    v9.i64[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 4uLL).u64[0];
    v9.i64[1] = v7.i64[0];
    v10 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a3, v9), vmulq_f32(v7, v8));
    v4.i64[0] = vextq_s8(v10, v10, 4uLL).u64[0];
    v4.i64[1] = v10.i64[0];
    v11 = v4;
    v11.i32[3] = 0;
    v12 = (int8x16_t)vmulq_f32(v6, v4);
    v13 = (int8x16_t)vmulq_f32(*((float32x4_t *)this + 19), v11);
    v14 = vmulq_f32(*((float32x4_t *)this + 20), v11);
    v12.i32[3] = 0;
    *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v14.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL)));
    *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), 0);
    result = vaddq_f32(*((float32x4_t *)this + 23), vmulq_f32(*((float32x4_t *)this + 39), v14));
    *((float32x4_t *)this + 23) = result;
  }
  return result;
}

void sub_1DCDFDA60(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

C3D::DrawNodesPass *C3D::PickedObjectPass::PickedObjectPass(C3D::PickedObjectPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::DrawNodesPass *result;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = 0;
  v7 = 0u;
  v8 = 0x20000;
  memset(v4, 0, sizeof(v4));
  v6 = -1;
  BYTE8(v7) = 1;
  result = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v4);
  *(_QWORD *)result = off_1EA5996A8;
  return result;
}

const char *C3D::PickedObjectPass::name(C3D::PickedObjectPass *this)
{
  return "PickedObjectPass";
}

const char *C3D::PickedObjectPass::programHashCodeStoreName(C3D::PickedObjectPass *this)
{
  return "PickedObjectPass";
}

void C3D::PickedObjectPass::setup(C3D::PickedObjectPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id AuthoringEnvironment;
  C3D *SelectedNodes;
  void *v9;
  __int128 v10;
  int v11;

  C3D::Pass::setOutputCount(this, 2u);
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0) + 8) = "COLOR_PICKED";
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0) + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v10);
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0);
  *(_OWORD *)(v2 + 16) = v10;
  *(_DWORD *)(v2 + 32) = v11;
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0);
  *(_WORD *)(v3 + 66) = *(_WORD *)(v3 + 66) & 0xFFFC | 2;
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0);
  *(_WORD *)(v4 + 66) |= 0x40u;
  *(_OWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 0) + 48) = xmmword_1DD007610;
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 1u) + 8) = "DEPTH_PICKED";
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 1u) + 64) = 2;
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v10);
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 1u);
  *(_OWORD *)(v5 + 16) = v10;
  *(_DWORD *)(v5 + 32) = v11;
  v6 = C3D::PassDescriptor::outputAtIndex((C3D::PickedObjectPass *)((char *)this + 32), 1u);
  *(_WORD *)(v6 + 66) = *(_WORD *)(v6 + 66) & 0xFFFC | 2;
  *((_BYTE *)this + 296) = 0;
  *((_WORD *)this + 149) |= 0x20u;
  AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment(*((_QWORD *)this + 2), 0);
  SelectedNodes = (C3D *)C3DAuthoringEnvironmentGetSelectedNodes(AuthoringEnvironment);
  *((_QWORD *)this + 34) = C3D::flattenedNodesForSelectedNodes(SelectedNodes, *((const __CFArray **)this + 2), *(__C3DEngineContext **)(*((_QWORD *)this + 3) + 16), v9);
  C3D::DrawNodesPass::setup(this);
}

void C3D::PickedObjectPass::compile(C3D::PickedObjectPass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t CommonProfile;
  const void *v8;
  uint64_t v9;

  v2 = (*(uint64_t (**)(C3D::PickedObjectPass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 670) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA59A358;
    *((_QWORD *)this + 670) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    v6 = C3DMaterialCreate();
    C3DEntitySetName(v6, CFSTR("--OutlineMaterial--"));
    CommonProfile = C3DMaterialGetCommonProfile(v6);
    C3DEffectCommonProfileSetLightingModel(CommonProfile, 4);
    v4 = *((_QWORD *)this + 670);
    v8 = *(const void **)(v4 + 16);
    if (v8 != (const void *)v6)
    {
      v9 = *((_QWORD *)this + 670);
      if (v8)
      {
        CFRelease(v8);
        v9 = *((_QWORD *)this + 670);
      }
      *(_QWORD *)(v4 + 16) = v6;
      v4 = v9;
    }
  }
  *((_QWORD *)this + 32) = C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(v4 + 16);
  C3D::DrawNodesPass::compile(this);
}

BOOL C3D::PickedObjectPass::_shouldPushNodeToVisible(C3D::PickedObjectPass *this, __C3DNode *a2)
{
  return !C3DNodeGetFloor((uint64_t)a2) && C3D::DrawNodesPass::_shouldPushNodeToVisible(this, a2);
}

void C3D::PickedObjectPassResource::~PickedObjectPassResource(C3D::PickedObjectPassResource *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1EA59A358;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1EA59A358;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1DF0D41C0);
}

id _C3DAnimationCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[15];
  if (v2)
  {
    CFRelease(v2);
    a1[15] = 0;
  }
  v3 = (const void *)a1[12];
  if (v3)
  {
    CFRelease(v3);
    a1[12] = 0;
  }
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  return C3DEntityCFFinalize((uint64_t)a1);
}

uint64_t _C3DAnimationInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *Value;
  const __CFNumber *v16;
  CFTypeID v17;
  float v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  CFTypeID v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  CFTypeID v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  CFTypeID v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  CFTypeID v51;
  float v52;
  const __CFNumber *v53;
  const __CFNumber *v54;
  CFTypeID v55;
  float v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  CFTypeID v59;
  float v60;
  const void *v61;
  const void *v62;
  _BOOL4 v63;
  _BOOL4 v64;
  int v65;
  float v66;
  const void *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityInitWithPropertyList(a1, a2);
  if ((v14 & 1) != 0)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("duration"));
    if (Value)
    {
      v16 = Value;
      v17 = CFGetTypeID(Value);
      if (v17 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v16, kCFNumberDoubleType, &valuePtr);
        v18 = valuePtr;
        *(float *)(a1 + 72) = v18;
      }
    }
    v19 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("repeatCount"));
    if (v19)
    {
      v20 = v19;
      v21 = CFGetTypeID(v19);
      if (v21 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v20, kCFNumberFloatType, &valuePtr);
        *(_DWORD *)(a1 + 76) = LODWORD(valuePtr);
      }
    }
    v22 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("autoreverses"));
    if (v22)
    {
      v23 = v22;
      v24 = CFGetTypeID(v22);
      if (v24 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFE | LOBYTE(valuePtr) & 1;
      }
    }
    v25 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("additive"));
    if (v25)
    {
      v26 = v25;
      v27 = CFGetTypeID(v25);
      if (v27 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v26, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = (2 * (LOBYTE(valuePtr) & 1)) | *(_WORD *)(a1 + 84) & 0xFFFD;
      }
    }
    v28 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("cumulative"));
    if (v28)
    {
      v29 = v28;
      v30 = CFGetTypeID(v28);
      if (v30 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = (4 * (LOBYTE(valuePtr) & 1)) | *(_WORD *)(a1 + 84) & 0xFFFB;
      }
    }
    v31 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("isAnimationClip"));
    if (v31)
    {
      v32 = v31;
      v33 = CFGetTypeID(v31);
      if (v33 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = ((LOBYTE(valuePtr) & 1) << 8) | *(_WORD *)(a1 + 84) & 0xFEFF;
      }
    }
    v34 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("removeOnCompletion"));
    if (v34)
    {
      v35 = v34;
      v36 = CFGetTypeID(v34);
      if (v36 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v35, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = (16 * (LOBYTE(valuePtr) & 1)) | *(_WORD *)(a1 + 84) & 0xFFEF;
      }
    }
    v37 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("sceneTimeBased"));
    if (v37)
    {
      v38 = v37;
      v39 = CFGetTypeID(v37);
      if (v39 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = (8 * (LOBYTE(valuePtr) & 1)) | *(_WORD *)(a1 + 84) & 0xFFF7;
      }
    }
    v40 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fillModeMask"));
    if (v40)
    {
      v41 = v40;
      v42 = CFGetTypeID(v40);
      if (v42 == CFNumberGetTypeID())
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(v41, kCFNumberIntType, &valuePtr);
        *(_WORD *)(a1 + 84) = ((LOBYTE(valuePtr) & 3) << 6) | *(_WORD *)(a1 + 84) & 0xFF3F;
      }
    }
    v43 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("timeOffset"));
    if (v43)
    {
      v44 = v43;
      v45 = CFGetTypeID(v43);
      if (v45 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v44, kCFNumberDoubleType, &valuePtr);
        *(double *)(a1 + 136) = valuePtr;
      }
    }
    v46 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("beginTime"));
    if (v46)
    {
      v47 = v46;
      v48 = CFGetTypeID(v46);
      if (v48 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v47, kCFNumberDoubleType, &valuePtr);
        *(double *)(a1 + 128) = valuePtr;
      }
    }
    v49 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("speed"));
    if (v49)
    {
      v50 = v49;
      v51 = CFGetTypeID(v49);
      if (v51 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v50, kCFNumberCGFloatType, &valuePtr);
        v52 = valuePtr;
        *(float *)(a1 + 80) = v52;
      }
    }
    v53 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fadeInDuration"));
    if (v53)
    {
      v54 = v53;
      v55 = CFGetTypeID(v53);
      if (v55 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v54, kCFNumberCGFloatType, &valuePtr);
        v56 = valuePtr;
        *(float *)(a1 + 108) = v56;
      }
    }
    v57 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fadeOutDuration"));
    if (v57)
    {
      v58 = v57;
      v59 = CFGetTypeID(v57);
      if (v59 == CFNumberGetTypeID())
      {
        valuePtr = 0.0;
        CFNumberGetValue(v58, kCFNumberCGFloatType, &valuePtr);
        v60 = valuePtr;
        *(float *)(a1 + 112) = v60;
      }
    }
    if (a3)
    {
      v61 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceAnimationLoadingMode"));
      if (v61)
      {
        v62 = v61;
        v63 = CFEqual(v61, CFSTR("playUsingSceneTime")) != 0;
        C3DAnimationSetIsSceneTimeBased(a1, v63);
        v64 = CFEqual(v62, CFSTR("playUsingSceneTime")) == 0;
        C3DAnimationSetRemoveOnCompletion(a1, v64);
        v65 = CFEqual(v62, CFSTR("playRepeatedly"));
        v66 = INFINITY;
        if (!v65)
          v66 = 0.0;
        C3DAnimationSetRepeatCount(a1, v66);
      }
    }
    v67 = CFDictionaryGetValue(a2, CFSTR("timingFunction"));
    if (v67)
      *(_QWORD *)(a1 + 120) = C3DTimingFunctionCreateWithPropertyList(v67);
  }
  else
  {
    v68 = scn_default_log();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      _C3DAnimationInitWithPropertyList_cold_1(v68, v69, v70, v71, v72, v73, v74, v75);
  }
  return v14;
}

void C3DAnimationSetIsSceneTimeBased(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 8;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFF7 | v12;
}

void C3DAnimationSetRemoveOnCompletion(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 16;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFEF | v12;
}

void C3DAnimationSetRepeatCount(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 76) = a2;
}

const void *C3DAnimationCreateWithPropertyList(const __CFDictionary *a1, uint64_t a2, uint64_t a3)
{
  const __CFString *Value;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;

  Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("type"));
  if (CFStringCompare(Value, CFSTR("simpleAnimation"), 0))
  {
    if (CFStringCompare(Value, CFSTR("keyframedAnimation"), 0))
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        C3DAnimationCreateWithPropertyList_cold_1((uint64_t)Value, v7, v8, v9, v10, v11, v12, v13);
      return 0;
    }
    v14 = (const void *)C3DKeyframedAnimationCreate();
  }
  else
  {
    v14 = (const void *)C3DSimpleAnimationCreate();
  }
  v15 = v14;
  if (v14 && (C3DInitWithPropertyList(v14, (uint64_t)a1, a2, a3) & 1) == 0)
  {
    CFRelease(v15);
    return 0;
  }
  return v15;
}

uint64_t C3DSimpleAnimationCreate()
{
  uint64_t result;

  if (C3DSimpleAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DSimpleAnimationGetTypeID_onceToken, &__block_literal_global_40_0);
  result = C3DTypeCreateInstance_(C3DSimpleAnimationGetTypeID_typeID, 0x170uLL);
  *(_DWORD *)(result + 104) = 1065353216;
  *(_DWORD *)(result + 80) = 1065353216;
  *(_WORD *)(result + 84) |= 0xD0u;
  return result;
}

__CFDictionary *_C3DAnimationCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  unsigned int v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  const void *v32;
  const void *v33;
  double valuePtr;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  valuePtr = *(float *)(a1 + 72);
  v17 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("duration"), v17);
  CFRelease(v17);
  LODWORD(valuePtr) = *(_DWORD *)(a1 + 76);
  v18 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("repeatCount"), v18);
  CFRelease(v18);
  LODWORD(valuePtr) = *(_WORD *)(a1 + 84) & 1;
  v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("autoreverses"), v19);
  CFRelease(v19);
  v20 = *(unsigned __int16 *)(a1 + 84);
  if ((v20 & 0x100) != 0)
  {
    LODWORD(valuePtr) = (v20 >> 8) & 1;
    v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v16, CFSTR("isAnimationClip"), v21);
    CFRelease(v21);
    v20 = *(unsigned __int16 *)(a1 + 84);
  }
  LODWORD(valuePtr) = (v20 >> 1) & 1;
  v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("additive"), v22);
  CFRelease(v22);
  LODWORD(valuePtr) = (*(unsigned __int16 *)(a1 + 84) >> 2) & 1;
  v23 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("cumulative"), v23);
  CFRelease(v23);
  LODWORD(valuePtr) = (*(unsigned __int16 *)(a1 + 84) >> 4) & 1;
  v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("removeOnCompletion"), v24);
  CFRelease(v24);
  LODWORD(valuePtr) = (*(unsigned __int16 *)(a1 + 84) >> 3) & 1;
  v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("sceneTimeBased"), v25);
  CFRelease(v25);
  LODWORD(valuePtr) = *(_WORD *)(a1 + 84) >> 6;
  v26 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("fillModeMask"), v26);
  CFRelease(v26);
  valuePtr = *(double *)(a1 + 136);
  v27 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("timeOffset"), v27);
  CFRelease(v27);
  valuePtr = *(double *)(a1 + 128);
  v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("beginTime"), v28);
  CFRelease(v28);
  valuePtr = *(float *)(a1 + 80);
  v29 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("speed"), v29);
  CFRelease(v29);
  valuePtr = *(float *)(a1 + 112);
  v30 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("fadeOutDuration"), v30);
  CFRelease(v30);
  valuePtr = *(float *)(a1 + 108);
  v31 = CFNumberCreate(0, kCFNumberCGFloatType, &valuePtr);
  CFDictionaryAddValue(v16, CFSTR("fadeInDuration"), v31);
  CFRelease(v31);
  v32 = *(const void **)(a1 + 120);
  if (v32)
  {
    v33 = (const void *)C3DCopyPropertyList(v32, a2, a3, a4);
    CFDictionaryAddValue(v16, CFSTR("timingFunction"), v33);
    if (v33)
      CFRelease(v33);
  }
  return v16;
}

uint64_t C3DAnimationCommonInit(uint64_t result)
{
  *(_DWORD *)(result + 104) = 1065353216;
  *(_DWORD *)(result + 80) = 1065353216;
  *(_WORD *)(result + 84) |= 0xD0u;
  return result;
}

uint64_t C3DAnimationEvaluate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

const void *C3DAnimationCopyTarget(uint64_t a1, float32x4_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t v13;
  const void *v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(const __CFArray **)(a1 + 64);
  if (!v12)
    return 0;
  v13 = C3DCFTypeCopyModelInfoAtSplittedPath(a2, v12, 0, 1);
  v14 = (const void *)v13;
  if (v13 && !C3DModelTargetGetTargetAddress(v13))
  {
    CFRelease(v14);
    return 0;
  }
  return v14;
}

CFTypeRef C3DAnimationSetKeyPath(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t C3DAnimationGetKeyPath(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

BOOL C3DAnimationIsGroup(const void *a1)
{
  CFTypeID v1;

  v1 = CFGetTypeID(a1);
  return v1 == C3DAnimationGroupGetTypeID();
}

void C3DAnimationSetDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 72) = a2;
}

float C3DAnimationGetDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 72);
}

float C3DAnimationGetTotalDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v13;
  float v14;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(float *)(a1 + 76);
  if (v10 == INFINITY || v10 == 3.4028e38)
    return 3.4028e38;
  v13 = 1.0;
  if (v10 == 0.0)
    v10 = 1.0;
  v14 = v10 * *(float *)(a1 + 72);
  if ((*(_WORD *)(a1 + 84) & 1) != 0)
    v13 = 2.0;
  return v14 * v13;
}

float C3DAnimationGetRepeatCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 76);
}

void C3DAnimationSetAutoreverses(uint64_t a1, __int16 a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFE | a2;
}

uint64_t C3DAnimationGetAutoreverses(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_WORD *)(a1 + 84) & 1;
}

CFTypeRef C3DAnimationSetTimingFunction(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 120);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 120) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 120) = result;
  }
  return result;
}

uint64_t C3DAnimationGetTimingFunction(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 120);
}

void C3DAnimationSetAdditive(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFD | v12;
}

uint64_t C3DAnimationGetCumulative(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 2) & 1;
}

void C3DAnimationSetCumulative(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 4;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFB | v12;
}

uint64_t C3DAnimationGetAdditive(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 1) & 1;
}

uint64_t C3DAnimationGetRemoveOnCompletion(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 4) & 1;
}

uint64_t C3DAnimationGetIsSceneTimeBased(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 3) & 1;
}

CFStringRef C3DAnimationSetName(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return C3DEntitySetName(a1, theString);
}

uint64_t C3DAnimationGetName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DEntityGetName(a1);
}

void C3DAnimationSetTimeOffset(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 136) = a2;
}

double C3DAnimationGetTimeOffset(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 136);
}

void C3DAnimationSetSpeed(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 80) = a2;
}

float C3DAnimationGetSpeed(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 80);
}

void C3DAnimationSetFadeInDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 108) = a2;
}

float C3DAnimationGetFadeInDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 108);
}

void C3DAnimationSetFadeOutDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 112) = a2;
}

float C3DAnimationGetFadeOutDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 112);
}

void C3DAnimationSetWeight(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 104) = a2;
}

float C3DAnimationGetWeight(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 104);
}

uint64_t C3DAnimationSetCommitWhenDone(_WORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  CFTypeID v13;
  uint64_t result;
  uint64_t v15;
  CFIndex i;
  const void *AnimationAtIndex;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((_DWORD)a2)
    v12 = 32;
  else
    v12 = 0;
  a1[42] = a1[42] & 0xFFDF | v12;
  v13 = CFGetTypeID(a1);
  result = C3DAnimationGroupGetTypeID();
  if (v13 == result)
  {
    result = C3DAnimationGroupGetAnimationCount((uint64_t)a1);
    if (result >= 1)
    {
      v15 = result;
      for (i = 0; i != v15; ++i)
      {
        AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a1, i);
        result = C3DAnimationSetCommitWhenDone(AnimationAtIndex, a2);
      }
    }
  }
  return result;
}

uint64_t C3DAnimationGetCommitWhenDone(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 5) & 1;
}

BOOL _C3DAnimationReadsDestinationBuffer(_BYTE *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (C3DSimpleAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DSimpleAnimationGetTypeID_onceToken, &__block_literal_global_40_0);
  if (v2 != C3DSimpleAnimationGetTypeID_typeID)
    return 0;
  if (a1[372])
    return 1;
  return a1[373] != 0;
}

uint64_t C3DSimpleAnimationGetTypeID()
{
  if (C3DSimpleAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DSimpleAnimationGetTypeID_onceToken, &__block_literal_global_40_0);
  return C3DSimpleAnimationGetTypeID_typeID;
}

uint64_t C3DAnimationGetAnimationCallbacks(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 144;
}

uint64_t C3DAnimationGetDelegate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 160);
}

void C3DAnimationSetDelegate(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 160) = a2;
}

uint64_t C3DAnimationGetAnimationEvents(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 96);
}

CFTypeRef C3DAnimationSetAnimationEvents(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 96);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 96) = result;
  }
  return result;
}

void C3DAnimationSetIsImplicit(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 512;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFDFF | v12;
}

uint64_t C3DAnimationGetIsImplicit(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int16 *)(a1 + 84) >> 9) & 1;
}

uint64_t C3DAnimationGetFillModeMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_WORD *)(a1 + 84) >> 6;
}

void C3DAnimationSetFillModeMask(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFF3F | ((a2 & 3) << 6);
}

uint64_t C3DAnimationSetup(CFTypeRef cf, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  uint64_t result;
  NSObject *v14;

  if (!cf)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = CFGetTypeID(cf);
  if (C3DSimpleAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DSimpleAnimationGetTypeID_onceToken, &__block_literal_global_40_0);
  if (v12 == C3DSimpleAnimationGetTypeID_typeID)
  {
    *((_QWORD *)cf + 11) = C3DSimpleAnimationEvaluate;
    return C3DSimpleAnimationSetup((uint64_t)cf, a2);
  }
  else if (v12 == C3DKeyframedAnimationGetTypeID())
  {
    *((_QWORD *)cf + 11) = C3DKeyframedAnimationEvaluate;
    return C3DKeyframedAnimationSetup((uint64_t)cf);
  }
  else
  {
    v14 = scn_default_log();
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      C3DAnimationSetup_cold_1();
      return 0;
    }
  }
  return result;
}

BOOL C3DSimpleAnimationEvaluate(uint64_t a1, int a2, float32x2_t *a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t *v25;
  uint64_t v26;
  NSObject *v27;
  void (*v28)(float32x2_t *, float32x2_t *, _QWORD, _QWORD, _QWORD, uint64_t, float32x2_t *, __n128);
  uint64_t Additive;
  __n128 v30;
  float32x2_t *v31;
  float32x2_t *v32;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DSimpleAnimationEvaluate_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DSimpleAnimationEvaluate_cold_2(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  v24 = *(_QWORD *)(a1 + 376);
  if (v24)
  {
    if (*(_BYTE *)(a1 + 372))
      v25 = a3;
    else
      v25 = (float32x2_t *)(a1 + 176);
    if (*(_BYTE *)(a1 + 373))
    {
      v26 = (uint64_t)a3;
      if ((*(_BYTE *)(a1 + 374) & 4) != 0)
      {
        v26 = a1 + 304;
        C3DAddBaseType(*(__int16 *)(a1 + 368), v25, (float32x2_t *)(a1 + 240), (float32x4_t *)(a1 + 304));
      }
    }
    else
    {
      v26 = a1 + 304;
    }
    v28 = *(void (**)(float32x2_t *, float32x2_t *, _QWORD, _QWORD, _QWORD, uint64_t, float32x2_t *, __n128))(a1 + 376);
    Additive = C3DAnimationGetAdditive(a1);
    if (a2)
    {
      v30.n128_f64[0] = 1.0 - a4;
      v31 = (float32x2_t *)v26;
      v32 = v25;
    }
    else
    {
      v30.n128_f64[0] = a4;
      v31 = v25;
      v32 = (float32x2_t *)v26;
    }
    v28(v31, v32, 0, 0, 0, Additive, a3, v30);
  }
  else
  {
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      C3DSimpleAnimationEvaluate_cold_1();
  }
  return v24 != 0;
}

uint64_t C3DSimpleAnimationSetup(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 BaseType;
  int TypeSemantic;
  int v14;
  uint64_t (*v15)();
  int v16;
  uint64_t v17;
  uint64_t TargetAddress;
  const void *v19;
  const void *v20;
  const void *Target;
  void *Bytes;
  size_t Length;
  uint64_t v24;
  uint64_t ComponentIndex;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_4;
  }
  else if (a2)
  {
LABEL_4:
    BaseType = C3DModelTargetGetBaseType(a2);
    TypeSemantic = C3DModelTargetGetTypeSemantic(a2);
    goto LABEL_7;
  }
  TypeSemantic = 0;
  BaseType = *(_WORD *)(a1 + 368);
LABEL_7:
  v14 = BaseType;
  v15 = C3DKeyFrameInterpolatorForType(BaseType, TypeSemantic, 0, 0, 1);
  *(_QWORD *)(a1 + 376) = v15;
  if (!v15)
    return 0;
  v16 = *(unsigned __int8 *)(a1 + 374);
  if ((~v16 & 3) != 0)
  {
    if ((~v16 & 5) == 0)
    {
      C3DAddBaseType(*(__int16 *)(a1 + 368), (float32x2_t *)(a1 + 176), (float32x2_t *)(a1 + 240), (float32x4_t *)(a1 + 304));
      return 1;
    }
    if ((~v16 & 6) == 0)
    {
      C3DSubBaseType(*(__int16 *)(a1 + 368), (float32x2_t *)(a1 + 304), (float32x2_t *)(a1 + 240), (float32x4_t *)(a1 + 176));
      return 1;
    }
    if ((v16 & 1) != 0)
    {
      v17 = 1;
      *(_BYTE *)(a1 + 373) = 1;
      return v17;
    }
    if ((v16 & 2) != 0)
    {
      v17 = 1;
      *(_BYTE *)(a1 + 372) = 1;
      return v17;
    }
    if ((v16 & 4) != 0)
    {
      *(_WORD *)(a1 + 372) = 257;
      return 1;
    }
    TargetAddress = C3DModelTargetGetTargetAddress(a2);
    if (TargetAddress)
    {
      v19 = (const void *)TargetAddress;
      v17 = 1;
      v20 = (const void *)C3DValueCreate(v14, 1);
      Target = (const void *)C3DModelTargetGetTarget(a2);
      Bytes = (void *)C3DValueGetBytes((uint64_t)v20);
      Length = C3DValueGetLength((uint64_t)v20);
      v24 = C3DModelTargetGetTypeSemantic(a2);
      ComponentIndex = C3DModelTargetGetComponentIndex(a2);
      C3DGetValue(Target, v19, Bytes, Length, v24, ComponentIndex);
      C3DSimpleAnimationSetStartValue(a1, (uint64_t)v20);
      *(_BYTE *)(a1 + 373) = 1;
      CFRelease(v20);
      return v17;
    }
    return 0;
  }
  return 1;
}

__n128 C3DAnimationCopySettingsToAnimation(uint64_t a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *Name;
  float Duration;
  float RepeatCount;
  __int16 Autoreverses;
  const void *TimingFunction;
  int Additive;
  int Cumulative;
  int IsSceneTimeBased;
  int v28;
  double PauseTime;
  double TimeOffset;
  float Speed;
  uint64_t CommitWhenDone;
  char FillModeMask;
  float Weight;
  float FadeInDuration;
  float FadeOutDuration;
  const void *AnimationEvents;
  uint64_t Delegate;
  __n128 result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationForKey_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  Name = (const __CFString *)C3DAnimationGetName(a1);
  C3DAnimationSetName((uint64_t)a2, Name);
  C3DAnimationSetKeyPath((uint64_t)a2, *(CFTypeRef *)(a1 + 64));
  Duration = C3DAnimationGetDuration(a1);
  C3DAnimationSetDuration((uint64_t)a2, Duration);
  RepeatCount = C3DAnimationGetRepeatCount(a1);
  C3DAnimationSetRepeatCount((uint64_t)a2, RepeatCount);
  Autoreverses = C3DAnimationGetAutoreverses(a1);
  C3DAnimationSetAutoreverses((uint64_t)a2, Autoreverses);
  TimingFunction = (const void *)C3DAnimationGetTimingFunction(a1);
  C3DAnimationSetTimingFunction((uint64_t)a2, TimingFunction);
  Additive = C3DAnimationGetAdditive(a1);
  C3DAnimationSetAdditive((uint64_t)a2, Additive);
  Cumulative = C3DAnimationGetCumulative(a1);
  C3DAnimationSetCumulative((uint64_t)a2, Cumulative);
  IsSceneTimeBased = C3DAnimationGetIsSceneTimeBased(a1);
  C3DAnimationSetIsSceneTimeBased((uint64_t)a2, IsSceneTimeBased);
  v28 = C3DAnimationGetRemoveOnCompletion(a1);
  C3DAnimationSetRemoveOnCompletion((uint64_t)a2, v28);
  PauseTime = C3DAnimationNodeGetPauseTime(a1);
  C3DAnimationNodeSetPauseTime((uint64_t)a2, PauseTime);
  TimeOffset = C3DAnimationGetTimeOffset(a1);
  C3DAnimationSetTimeOffset((uint64_t)a2, TimeOffset);
  Speed = C3DAnimationGetSpeed(a1);
  C3DAnimationSetSpeed((uint64_t)a2, Speed);
  CommitWhenDone = C3DAnimationGetCommitWhenDone(a1);
  C3DAnimationSetCommitWhenDone(a2, CommitWhenDone);
  FillModeMask = C3DAnimationGetFillModeMask(a1);
  C3DAnimationSetFillModeMask((uint64_t)a2, FillModeMask);
  Weight = C3DAnimationGetWeight(a1);
  C3DAnimationSetWeight((uint64_t)a2, Weight);
  FadeInDuration = C3DAnimationGetFadeInDuration(a1);
  C3DAnimationSetFadeInDuration((uint64_t)a2, FadeInDuration);
  FadeOutDuration = C3DAnimationGetFadeOutDuration(a1);
  C3DAnimationSetFadeOutDuration((uint64_t)a2, FadeOutDuration);
  AnimationEvents = (const void *)C3DAnimationGetAnimationEvents(a1);
  C3DAnimationSetAnimationEvents((uint64_t)a2, AnimationEvents);
  Delegate = C3DAnimationGetDelegate(a1);
  C3DAnimationSetDelegate((uint64_t)a2, Delegate);
  a2[5].n128_u16[2] = a2[5].n128_u16[2] & 0xFEFF | *(_WORD *)(a1 + 84) & 0x100;
  result = *(__n128 *)(a1 + 144);
  a2[9] = result;
  return result;
}

CFTypeRef *C3DAnimationCreateCopy(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  CFTypeRef *v11;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframedAnimationCopy_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DSimpleAnimationGetTypeID_onceToken != -1)
    dispatch_once(&C3DSimpleAnimationGetTypeID_onceToken, &__block_literal_global_40_0);
  if (v10 == C3DSimpleAnimationGetTypeID_typeID)
  {
    v11 = (CFTypeRef *)C3DSimpleAnimationCreate();
    C3DSimpleAnimationCopy((uint64_t)cf, (uint64_t)v11);
  }
  else if (v10 == C3DKeyframedAnimationGetTypeID())
  {
    v11 = (CFTypeRef *)C3DKeyframedAnimationCreate();
    C3DKeyframedAnimationCopy((uint64_t)cf, (uint64_t)v11);
  }
  else if (v10 == C3DAnimationGroupGetTypeID())
  {
    v11 = (CFTypeRef *)C3DAnimationGroupCreate();
    C3DAnimationGroupCopy((uint64_t)cf, (uint64_t)v11);
  }
  else
  {
    if (v10 != C3DAnimationClusterGetTypeID())
    {
      C3DEntityCopyTo((uint64_t)cf, 0);
      return 0;
    }
    v11 = (CFTypeRef *)C3DAnimationClusterCreate();
    C3DAnimationClusterCopy((uint64_t)cf, (uint64_t)v11);
  }
  C3DEntityCopyTo((uint64_t)cf, v11);
  if (v11)
    C3DAnimationCopySettingsToAnimation((uint64_t)cf, (__n128 *)v11);
  return v11;
}

void *C3DSimpleAnimationCopy(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *result;
  char v21;
  char v22;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DSimpleAnimationCopy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  *(_QWORD *)(a2 + 376) = *(_QWORD *)(a1 + 376);
  memcpy((void *)(a2 + 176), (const void *)(a1 + 176), *(__int16 *)(a1 + 370));
  memcpy((void *)(a2 + 304), (const void *)(a1 + 304), *(__int16 *)(a1 + 370));
  result = memcpy((void *)(a2 + 240), (const void *)(a1 + 240), *(__int16 *)(a1 + 370));
  v21 = *(_BYTE *)(a2 + 374) & 0xFE | *(_BYTE *)(a1 + 374) & 1;
  *(_BYTE *)(a2 + 374) = v21;
  v22 = v21 & 0xFD | (2 * ((*(_BYTE *)(a1 + 374) & 2) != 0));
  *(_BYTE *)(a2 + 374) = v22;
  *(_BYTE *)(a2 + 374) = v22 & 0xFB | *(_BYTE *)(a1 + 374) & 4;
  *(_DWORD *)(a2 + 370) = *(_DWORD *)(a1 + 370);
  *(_WORD *)(a2 + 368) = *(_WORD *)(a1 + 368);
  return result;
}

size_t C3DSimpleAnimationSetEndValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 368) = C3DValueGetType(a2);
  *(_BYTE *)(a1 + 374) |= 2u;
  return C3DValueCopyTo(a2, (void *)(a1 + 304));
}

uint64_t C3DSimpleAnimationCopyEndValue(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 374) & 2) == 0)
    return 0;
  v10 = C3DValueCreate(*(__int16 *)(a1 + 368), 1);
  C3DValueInitFrom(v10, (const void *)(a1 + 304));
  return v10;
}

size_t C3DSimpleAnimationSetStartValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 368) = C3DValueGetType(a2);
  *(_BYTE *)(a1 + 374) |= 1u;
  return C3DValueCopyTo(a2, (void *)(a1 + 176));
}

uint64_t C3DSimpleAnimationCopyStartValue(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 374) & 1) == 0)
    return 0;
  v10 = C3DValueCreate(*(__int16 *)(a1 + 368), 1);
  C3DValueInitFrom(v10, (const void *)(a1 + 176));
  return v10;
}

size_t C3DSimpleAnimationSetByValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 368) = C3DValueGetType(a2);
  *(_BYTE *)(a1 + 374) |= 4u;
  return C3DValueCopyTo(a2, (void *)(a1 + 240));
}

uint64_t C3DSimpleAnimationCopyByValue(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 374) & 4) == 0)
    return 0;
  v10 = C3DValueCreate(*(__int16 *)(a1 + 368), 1);
  C3DValueInitFrom(v10, (const void *)(a1 + 240));
  return v10;
}

CFStringRef _C3DSimpleAnimationCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DSimpleAnimation>"));
}

CFStringRef _C3DSimpleAnimationCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DSimpleAnimation>"));
}

BOOL _C3DSimpleAnimationInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3)
{
  const __CFNumber *Value;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  const __CFData *v9;
  const __CFData *v10;
  const __CFData *v11;
  _BOOL8 result;
  NSObject *v13;
  NSObject *v14;
  int valuePtr;
  UInt8 buffer[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  v20 = *MEMORY[0x1E0C80C00];
  if ((_C3DAnimationInitWithPropertyList(a1, a2, a3) & 1) == 0)
  {
    v13 = scn_default_log();
    result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DSimpleAnimationInitWithPropertyList_cold_2();
    return 0;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("baseType"));
  if (!Value)
  {
    v14 = scn_default_log();
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DSimpleAnimationInitWithPropertyList_cold_1();
    return 0;
  }
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)buffer = 0u;
  v17 = 0u;
  valuePtr = 0;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v6 = (char **)C3DValueCreate((__int16)valuePtr, 1);
  v7 = C3DSizeOfBaseType((__int16)valuePtr);
  v8 = C3DSizeOfBaseType((__int16)valuePtr);
  v9 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("startValue"));
  if (v9)
  {
    v21.location = 0;
    v21.length = v7;
    CFDataGetBytes(v9, v21, buffer);
    C3DConvertFromPlatformIndependentData((char *)buffer, v6[3], v7, v8, (__int16)valuePtr, 1, 1, 0, 0);
    C3DSimpleAnimationSetStartValue(a1, (uint64_t)v6);
  }
  v10 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("byValue"));
  if (v10)
  {
    v22.location = 0;
    v22.length = v7;
    CFDataGetBytes(v10, v22, buffer);
    C3DConvertFromPlatformIndependentData((char *)buffer, v6[3], v7, v8, (__int16)valuePtr, 1, 1, 0, 0);
    C3DSimpleAnimationSetByValue(a1, (uint64_t)v6);
  }
  v11 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("endValue"));
  if (v11)
  {
    v23.location = 0;
    v23.length = v7;
    CFDataGetBytes(v11, v23, buffer);
    C3DConvertFromPlatformIndependentData((char *)buffer, v6[3], v7, v8, (__int16)valuePtr, 1, 1, 0, 0);
    C3DSimpleAnimationSetEndValue(a1, (uint64_t)v6);
  }
  CFRelease(v6);
  return 1;
}

__CFDictionary *_C3DSimpleAnimationCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFDictionary *v5;
  CFNumberRef v6;
  uint64_t v7;
  char v8;
  CFDataRef v9;
  CFDataRef v11;
  CFDataRef v12;
  int valuePtr;
  UInt8 bytes[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = _C3DAnimationCopyPropertyList(a1, a2, a3, a4);
  CFDictionaryAddValue(v5, CFSTR("type"), CFSTR("simpleAnimation"));
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)bytes = 0u;
  v15 = 0u;
  valuePtr = *(__int16 *)(a1 + 368);
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v5, CFSTR("baseType"), v6);
  CFRelease(v6);
  v7 = C3DSizeOfBaseType((__int16)valuePtr);
  v8 = *(_BYTE *)(a1 + 374);
  if ((v8 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 374) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    C3DConvertToPlatformIndependentData((char *)(a1 + 240), (char *)bytes, *(__int16 *)(a1 + 370), v7, *(__int16 *)(a1 + 368), 1, 1, 0, 0);
    v12 = CFDataCreate(0, bytes, v7);
    CFDictionaryAddValue(v5, CFSTR("byValue"), v12);
    CFRelease(v12);
    if ((*(_BYTE *)(a1 + 374) & 2) == 0)
      return v5;
    goto LABEL_4;
  }
  C3DConvertToPlatformIndependentData((char *)(a1 + 176), (char *)bytes, *(__int16 *)(a1 + 370), v7, *(__int16 *)(a1 + 368), 1, 1, 0, 0);
  v11 = CFDataCreate(0, bytes, v7);
  CFDictionaryAddValue(v5, CFSTR("startValue"), v11);
  CFRelease(v11);
  v8 = *(_BYTE *)(a1 + 374);
  if ((v8 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v8 & 2) != 0)
  {
LABEL_4:
    C3DConvertToPlatformIndependentData((char *)(a1 + 304), (char *)bytes, *(__int16 *)(a1 + 370), v7, *(__int16 *)(a1 + 368), 1, 1, 0, 0);
    v9 = CFDataCreate(0, bytes, v7);
    CFDictionaryAddValue(v5, CFSTR("endValue"), v9);
    CFRelease(v9);
  }
  return v5;
}

uint64_t _C3DSimpleAnimationFinalizeDeserialization()
{
  return 1;
}

C3D::DrawNodesPass *C3D::SSRDepthBackFacePass::SSRDepthBackFacePass(C3D::SSRDepthBackFacePass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::DrawNodesPass *result;
  _OWORD v4[2];
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  char v9;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  v6 = xmmword_1DD007D30;
  v7 = 0;
  v8 = 0;
  v9 = 2;
  result = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v4);
  *(_QWORD *)result = off_1EA599DE8;
  return result;
}

const char *C3D::SSRDepthBackFacePass::name(C3D::SSRDepthBackFacePass *this)
{
  return "SSRDepthBackFacePass";
}

const char *C3D::SSRDepthBackFacePass::programHashCodeStoreName(C3D::SSRDepthBackFacePass *this)
{
  return "SSRDepthBackFacePass";
}

void C3D::SSRDepthBackFacePass::setup(C3D::SSRDepthBackFacePass *this)
{
  uint64_t v2;
  __int128 v3;
  int v4;

  C3D::Pass::setOutputCount(this, 1u);
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::SSRDepthBackFacePass *)((char *)this + 32), 0);
  *(_BYTE *)(v2 + 64) = 2;
  *(_QWORD *)(v2 + 8) = "BackDepth";
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v3);
  *(_OWORD *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 32) = v4;
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFFFC | 2;
  C3D::DrawNodesPass::setup(this);
}

void C3D::SSRDepthBackFacePass::compile(C3D::SSRDepthBackFacePass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t CommonProfile;
  uint64_t v8;
  const void *v9;
  float v10[4];

  v2 = (*(uint64_t (**)(C3D::SSRDepthBackFacePass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 670) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA599DC8;
    *((_QWORD *)this + 670) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    v6 = C3DMaterialCreate();
    C3DEntitySetName(v6, CFSTR("--SSRBackFaceMaterial--"));
    CommonProfile = C3DMaterialGetCommonProfile(v6);
    C3DEffectCommonProfileSetLightingModel(CommonProfile, 4);
    v8 = *((_QWORD *)this + 670);
    v9 = *(const void **)(v8 + 16);
    if (v9 != (const void *)v6)
    {
      if (v9)
        CFRelease(v9);
      *(_QWORD *)(v8 + 16) = v6;
    }
    C3DColor4Make(v10, 1.0, 1.0, 1.0, 1.0);
    C3DEffectCommonProfileSetColor(CommonProfile, 2, v10);
    v4 = *((_QWORD *)this + 670);
  }
  *((_QWORD *)this + 32) = C3D::SmartPtr<__C3DMaterial *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>::operator __C3DMaterial *(v4 + 16);
  C3D::DrawNodesPass::compile(this);
}

void C3D::SSRDepthBackFacePass::execute(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 73) && *(_QWORD *)(v2 + 16) != 1)
  {
    *(_QWORD *)(v2 + 16) = 1;
    *(_BYTE *)(v2 + 41) = 1;
  }
  *(_BYTE *)(v2 + 73) = 1;
  C3D::DrawNodesPass::execute(a1, a2);
}

void C3D::SSRDepthBackFacePass::Resource::~Resource(C3D::SSRDepthBackFacePass::Resource *this)
{
  const void *v1;

  *(_QWORD *)this = &off_1EA599DC8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
}

{
  const void *v1;

  *(_QWORD *)this = &off_1EA599DC8;
  v1 = (const void *)*((_QWORD *)this + 2);
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1DF0D41C0);
}

void __C3DLightDidChange(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t LightingSystem;
  uint64_t v12;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DGetScene(a1);
  if (v10)
  {
    LightingSystem = C3DSceneGetLightingSystem(v10);
    if (LightingSystem)
    {
      v12 = LightingSystem;
      C3DLightingSystemLightDidUpdate(LightingSystem, a1);
      if (C3DLightGetTechnique((uint64_t)a1))
        C3DLightingSystemAddToLightsWithTechnique(v12, a1);
    }
  }
}

uint64_t C3DLightGetTechnique(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 216);
}

void __C3DLightProbeEnvironmentDidChange(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    ++*(_DWORD *)(a1 + 324);
}

uint64_t C3DLightCreate()
{
  uint64_t Instance;
  int v1;
  float v2;
  int v3;
  char v4;
  char v5;
  __n128 v7;

  if (C3DLightGetTypeID_onceToken != -1)
    dispatch_once(&C3DLightGetTypeID_onceToken, &__block_literal_global_60);
  Instance = C3DTypeCreateInstance_(C3DLightGetTypeID_typeID, 0x140uLL);
  v7 = 0uLL;
  if (C3DWasLinkedBeforeMajorOSYear2014())
    v1 = 0;
  else
    v1 = 2;
  C3DLightSetType(Instance, v1);
  C3DColor4Make((float *)&v7, 1.0, 1.0, 1.0, 1.0);
  C3DLightSetColor(Instance, (float *)&v7);
  if (C3DWasLinkedBeforeMajorOSYear2016())
    v2 = 0.5;
  else
    v2 = 1.0;
  C3DColor4Make((float *)&v7, 0.0, 0.0, 0.0, v2);
  C3DLightSetShadowColor((__n128 *)Instance, &v7);
  *(_QWORD *)(Instance + 192) = 0x3FF0000000000000;
  *(_OWORD *)(Instance + 176) = xmmword_1DD02A430;
  *(_QWORD *)(Instance + 136) = 0x404000003F800000;
  *(_DWORD *)(Instance + 96) = 1148846080;
  *(_QWORD *)(Instance + 160) = -1;
  *(_BYTE *)(Instance + 169) = *(_BYTE *)(Instance + 169) & 0xFE | C3DWasLinkedBeforeMajorOSYear2014();
  *(_BYTE *)(Instance + 156) = 0;
  *(_DWORD *)(Instance + 100) = 1170939904;
  *(_DWORD *)(Instance + 84) = 0;
  *(_DWORD *)(Instance + 88) = 0;
  *(_DWORD *)(Instance + 92) = 0x40000000;
  v3 = C3DWasLinkedBeforeMajorOSYear2017();
  v4 = *(_BYTE *)(Instance + 169);
  if (v3)
    v5 = 0;
  else
    v5 = 32;
  *(_BYTE *)(Instance + 157) = 1;
  *(_BYTE *)(Instance + 169) = v5 & 0xE0 | v4 & 0x1F;
  *(_DWORD *)(Instance + 152) = 0;
  *(_QWORD *)(Instance + 144) = 0x3E19999A42C80000;
  C3DLightInitializePerTypeParameters(Instance);
  return Instance;
}

void C3DLightSetType(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) != a2)
  {
    C3DLightDestroyPerTypeParameters(a1);
    *(_DWORD *)(a1 + 80) = a2;
    C3DLightInitializePerTypeParameters(a1);
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

void C3DLightSetColor(uint64_t a1, float *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL IsBlack;
  _BOOL4 v21;
  float32x4_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __n128 v27;
  float32x4_t v28;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DLightSetColor_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (!C3DColor4IsEqualToColor4(a2, (float *)(a1 + 64)))
  {
    IsBlack = C3DColor4IsBlack((float *)(a1 + 64));
    v21 = C3DColor4IsBlack(a2);
    v28 = *(float32x4_t *)a2;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
    if (IsBlack || v21)
      __C3DLightDidChange((_QWORD *)a1);
    if (*(_DWORD *)(a1 + 80) == 6)
      __C3DLightUpdateAreaVisualisationGeometryMaterial(a1, v28, v22, v23, v24, v25, v26, v27);
  }
}

__n128 C3DLightSetShadowColor(__n128 *a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *a2;
  a1[7] = *a2;
  return result;
}

double C3DLightInitializePerTypeParameters(uint64_t a1)
{
  double result;

  switch(*(_DWORD *)(a1 + 80))
  {
    case 3:
      *(_QWORD *)&result = 1110704128;
      *(_QWORD *)(a1 + 240) = 1110704128;
      *(_DWORD *)(a1 + 248) = 1065353216;
      break;
    case 4:
      *(_QWORD *)(a1 + 240) = 0;
      *(_QWORD *)(a1 + 320) = 0x1FFFFFFFFLL;
      *(_WORD *)(a1 + 328) = 0;
      result = 0.0;
      __asm { FMOV            V1.4S, #10.0 }
      *(_OWORD *)(a1 + 256) = _Q1;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_BYTE *)(a1 + 330) = 0;
      __asm { FMOV            V1.4S, #1.0 }
      *(_OWORD *)(a1 + 288) = _Q1;
      *(_OWORD *)(a1 + 304) = 0u;
      break;
    case 5:
      *(_QWORD *)(a1 + 240) = 0;
      result = 2.19902369e13;
      *(_QWORD *)(a1 + 248) = 0x42B4000042C80000;
      break;
    case 6:
      *(_BYTE *)(a1 + 240) = *(_BYTE *)(a1 + 240) & 0xFC | 2;
      result = *(double *)&kDefaultAreaDescription;
      *(_OWORD *)(a1 + 256) = kDefaultAreaDescription;
      *(_OWORD *)(a1 + 272) = unk_1DD02A5F0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t C3DLightGetGobo(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(_QWORD *)(a1 + 200);
  if (a2)
  {
    if (!result)
    {
      result = C3DEffectSlotCreate(a1, 22);
      *(_QWORD *)(a1 + 200) = result;
    }
  }
  return result;
}

uint64_t C3DLightGetProbeEnvironment(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(_QWORD *)(a1 + 208);
  if (a2)
  {
    if (!result)
    {
      result = C3DEffectSlotCreate(a1, 25);
      *(_QWORD *)(a1 + 208) = result;
    }
  }
  return result;
}

void C3DLightDestroyPerTypeParameters(uint64_t a1)
{
  int v2;
  const void *v3;
  const void *v4;

  v2 = *(_DWORD *)(a1 + 80);
  if (v2 == 4)
  {
LABEL_4:
    v3 = *(const void **)(a1 + 240);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 240) = 0;
    }
    return;
  }
  if (v2 != 6)
  {
    if (v2 != 5)
      return;
    goto LABEL_4;
  }
  v4 = *(const void **)(a1 + 288);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 288) = 0;
  }
  if (*(_BYTE *)(a1 + 256) == 4)
    free(*(void **)(a1 + 280));
}

void C3DLightSetAreaDescription(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v15;
  __int128 v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
  {
    v12 = *(unsigned __int8 *)(a1 + 256);
    v13 = *a2;
    if (v12 != 4 || v13 == 4)
    {
      if (v13 == 4)
      {
        v15 = a2[16];
        if (v15 > 2)
        {
          v17 = (_QWORD *)*((_QWORD *)a2 + 3);
          if (v12 == 4)
            v18 = *(void **)(a1 + 280);
          else
            v18 = 0;
          v19 = malloc_type_realloc(v18, 8 * v15, 0x196E245CuLL);
          v20 = 0;
          *((_QWORD *)a2 + 3) = v19;
          v21 = 0.0;
          do
          {
            v22 = v17[v20];
            v23 = v20 + 1;
            if ((_DWORD)v15 - 1 == (_DWORD)v20)
              v24 = 0;
            else
              v24 = v20 + 1;
            v21 = v21
                + vmlas_n_f32((float)-*((float *)&v22 + 1) * COERCE_FLOAT(v17[v24]), COERCE_FLOAT(HIDWORD(v17[v24])), *(float *)&v22);
            v20 = v23;
          }
          while (v15 != v23);
          if (v21 >= 0.0)
          {
            memcpy(v19, v17, 8 * v15);
          }
          else
          {
            do
              *v19++ = v17[(int)--v15];
            while (v15);
          }
        }
        else
        {
          *a2 = 1;
          *((_QWORD *)a2 + 2) = 0x3F0000003F000000;
        }
      }
    }
    else
    {
      free(*(void **)(a1 + 280));
    }
    v16 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 272) = v16;
    __C3DLightUpdateAreaVisualisationGeometryMesh(a1);
    __C3DLightAreaDidChange((_QWORD *)a1);
  }
}

uint64_t C3DLightGetDistanceAttenuationType(uint64_t a1)
{
  float AttenuationStartDistance;
  float AttenuationEndDistance;
  float AttenuationFalloffExponent;
  uint64_t result;

  if ((*(_DWORD *)(a1 + 80) & 0xFFFFFFFE) != 2)
    return 0;
  AttenuationStartDistance = C3DLightGetAttenuationStartDistance(a1);
  AttenuationEndDistance = C3DLightGetAttenuationEndDistance(a1);
  AttenuationFalloffExponent = C3DLightGetAttenuationFalloffExponent(a1);
  if (AttenuationEndDistance <= 0.0 && AttenuationStartDistance <= 0.0)
    return 0;
  result = 1;
  if (AttenuationEndDistance > AttenuationStartDistance && AttenuationFalloffExponent != 0.0)
  {
    if (fabsf(AttenuationFalloffExponent + -1.0) >= 0.01)
    {
      if (fabsf(AttenuationFalloffExponent + -2.0) >= 0.01)
        return 4;
      else
        return 3;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

float C3DLightGetAttenuationStartDistance(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 84);
}

float C3DLightGetAttenuationEndDistance(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 88);
}

float C3DLightGetAttenuationFalloffExponent(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 92);
}

uint64_t C3DLightGetProgramHashCode(uint64_t a1)
{
  int v2;
  char DistanceAttenuationType;
  float SpotInnerAngle;
  float SpotOuterAngle;
  float SpotFalloffExponent;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL4 HasImageOrTexture;
  int v11;
  float v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int ShadowCascadeCount;

  v2 = *(_DWORD *)(a1 + 80);
  DistanceAttenuationType = C3DLightGetDistanceAttenuationType(a1);
  if (v2 == 6)
  {
    v8 = 0;
    v7 = (*(_BYTE *)(a1 + 256) & 7) << 13;
  }
  else if (v2 == 3)
  {
    SpotInnerAngle = C3DLightGetSpotInnerAngle(a1);
    SpotOuterAngle = C3DLightGetSpotOuterAngle(a1);
    SpotFalloffExponent = C3DLightGetSpotFalloffExponent(a1);
    v7 = 0;
    v8 = 64;
    if (SpotOuterAngle > SpotInnerAngle && SpotFalloffExponent != 0.0)
    {
      v7 = 0;
      if (fabsf(SpotFalloffExponent + -1.0) >= 0.01)
      {
        if (fabsf(SpotFalloffExponent + -2.0) >= 0.01)
          v8 = 256;
        else
          v8 = 192;
      }
      else
      {
        v8 = 128;
      }
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v9 = *(_QWORD *)(a1 + 200);
  if (v9)
    HasImageOrTexture = C3DEffectSlotHasImageOrTexture(v9);
  else
    HasImageOrTexture = 0;
  if (C3DLightTypeSupportsShadow(a1) && C3DLightGetCastsShadow(a1))
    v11 = C3DLightGetUsesDeferredShadows(a1) ^ 1;
  else
    v11 = 0;
  v12 = *(float *)(a1 + 124);
  if (C3DLightGetEffectiveShadowSampleCount(a1) > 0x1E)
    LOBYTE(v13) = 31;
  else
    LOBYTE(v13) = C3DLightGetEffectiveShadowSampleCount(a1);
  v14 = v2 & 7;
  if ((*(_BYTE *)(a1 + 169) & 2) != 0 && HasImageOrTexture | v11)
    v15 = v14 | 0x1000;
  else
    v15 = (8 * (DistanceAttenuationType & 7)) | v8 | v14;
  if (HasImageOrTexture)
    v16 = 512;
  else
    v16 = 0;
  if (v11)
    v17 = 1024;
  else
    v17 = 0;
  v18 = v16 | v7 | v17 | v15;
  if (v11)
  {
    v19 = v18 | ((v12 < 1.0) << 11);
    if (C3DLightGetShadowRadius(a1) == 0.0)
    {
      v13 = (int)fminf(ceilf(sqrtf((float)v13)), 8.0);
      v19 |= 0x4000000u;
    }
    v18 = ((v13 & 0x1F) << 16) | v19;
    if (C3DLightSupportsShadowCascades(a1))
    {
      ShadowCascadeCount = C3DLightGetShadowCascadeCount(a1);
      v18 = ((ShadowCascadeCount & 7) << 21) | v18;
      if (ShadowCascadeCount >= 2)
        return v18 | ((*(float *)(a1 + 152) != 0.0) << 25) | 0x1000000;
    }
  }
  return v18;
}

float C3DLightGetSpotInnerAngle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = 0.0;
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 244);
  return result;
}

float C3DLightGetSpotOuterAngle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 240);
  else
    return 45.0;
}

float C3DLightGetSpotFalloffExponent(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = 1.0;
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 248);
  return result;
}

uint64_t C3DLightHasValidGobo(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 200);
  if (result)
    return C3DEffectSlotHasImageOrTexture(result);
  return result;
}

uint64_t C3DLightTypeSupportsShadow(uint64_t a1)
{
  int v1;
  uint64_t result;
  float v4;

  v1 = *(_DWORD *)(a1 + 80) - 1;
  result = 1;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = C3DWasLinkedBeforeMajorOSYear2018() ^ 1;
      break;
    case 2:
      v4 = *(float *)(a1 + 240);
      goto LABEL_6;
    case 4:
      v4 = *(float *)(a1 + 252);
LABEL_6:
      result = v4 < 180.0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t C3DLightGetCastsShadow(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 168);
}

uint64_t C3DLightGetUsesDeferredShadows(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_BYTE *)(a1 + 169) & 1;
}

uint64_t C3DLightGetEffectiveShadowSampleCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(unsigned __int8 *)(a1 + 156) >= 0x40u)
    v10 = 64;
  else
    v10 = *(unsigned __int8 *)(a1 + 156);
  if (*(_BYTE *)(a1 + 156))
    return v10;
  else
    return 1;
}

float C3DLightGetShadowRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 140);
}

BOOL C3DLightSupportsShadowCascades(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 80) == 1;
}

uint64_t C3DLightGetShadowCascadeCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t C3DLightGetColor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 64;
}

uint64_t C3DLightGetShadowColor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 112);
}

void C3DLightSetIESProfileURL(uint64_t a1, void *cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v12 = *(const void **)(a1 + 240);
    if (v12 != cf)
    {
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(a1 + 240) = 0;
      }
      if (cf)
        v13 = CFRetain(cf);
      else
        v13 = 0;
      *(_QWORD *)(a1 + 240) = v13;
    }
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22 = 0u;
    if (C3DIESInfoLoad(cf, &v22))
    {
      v14 = DWORD1(v23);
      *(_DWORD *)(a1 + 248) = DWORD1(v22);
      *(_DWORD *)(a1 + 252) = v14;
    }
    else
    {
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        C3DLightSetIESProfileURL_cold_1((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21);
    }
    C3DIESInfoDestroy((void **)&v22);
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

void __C3DLightInvalidatePasses(_QWORD *a1)
{
  uint64_t SharedInstance;
  const void *v3;

  SharedInstance = C3DNotificationCenterGetSharedInstance();
  v3 = (const void *)C3DGetScene(a1);
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v3, 0, 1u);
}

uint64_t C3DLightGetIESProfileURL(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) != 5)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DLightGetIESProfileURL_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return *(_QWORD *)(a1 + 240);
}

float C3DLightGetIESSpotAngle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) != 5)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DLightGetIESProfileURL_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return *(float *)(a1 + 252);
}

uint64_t C3DLightGetProjectionInfo(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  float SpotOuterAngle;
  char v23;
  double v29;
  double v30;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DLightGetProjectionInfo_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v20 = 0;
    SpotOuterAngle = *(float *)(a1 + 252);
  }
  else
  {
    SpotOuterAngle = C3DLightGetSpotOuterAngle(a1);
    if (SpotOuterAngle >= 180.0 || SpotOuterAngle <= 0.0)
      SpotOuterAngle = 60.0;
    v20 = *(_DWORD *)(a1 + 80) == 1;
  }
  v23 = *(_BYTE *)a2 & 0xF6 | v20;
  *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
  *(_BYTE *)a2 = v23 & 0x8F;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a2 + 40) = _D1;
  v29 = *(double *)(a1 + 176);
  v30 = *(double *)(a1 + 184);
  if (v30 == 0.0)
    v30 = 100.0;
  *(double *)(a2 + 8) = v29;
  *(double *)(a2 + 16) = v30;
  if (v29 == 0.0)
    *(_QWORD *)(a2 + 8) = 0x3FF0000000000000;
  *(float *)(a2 + 56) = SpotOuterAngle;
  *(_BYTE *)a2 = v23 & 0x81;
  *(double *)(a2 + 48) = *(float *)(a1 + 136);
  return 1;
}

float C3DLightComputeDistanceAttenuations(float *a1, int a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float result;
  float v7;
  BOOL v8;

  v3 = fmaxf(a1[21] * a3, 0.0);
  v4 = a1[22] * a3;
  v5 = fmaxf(v4, 0.0);
  if (v3 < v5 && fmaxf(a1[23], 0.0) != 0.0)
    return -1.0 / (float)(v5 - v3);
  if (a2)
  {
    v7 = -1.0 / v4;
    v8 = v4 <= 0.0;
    result = 0.0;
    if (!v8)
      return v7;
  }
  else if (v3 <= v5)
  {
    return v5;
  }
  else
  {
    return v3;
  }
  return result;
}

void C3DLightComputeSpotAttenuations(uint64_t a1)
{
  int v1;
  float v2;
  double v3;
  float v4;
  float v5;
  float v6;

  v1 = *(_DWORD *)(a1 + 80);
  if (v1 == 3)
  {
    v2 = fminf(*(float *)(a1 + 240), 180.0);
    v4 = v2 + -0.1;
    if (*(float *)(a1 + 244) < (float)(v2 + -0.1))
      v4 = *(float *)(a1 + 244);
    v3 = (float)(v4 * 0.5);
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
    if (v1 == 5)
      v2 = *(float *)(a1 + 252);
  }
  v5 = v3 / 180.0 * 3.14159265;
  cosf(v5);
  v6 = (float)(v2 * 0.5) / 180.0 * 3.14159265;
  fmaxf(cosf(v6), 0.0);
}

void C3DLightSetTechnique(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  uint64_t LightingSystem;
  uint64_t SharedInstance;
  const void *v17;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (CFTypeRef)a1[27];
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      a1[27] = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    a1[27] = v13;
    v14 = C3DGetScene(a1);
    if (v14)
    {
      LightingSystem = C3DSceneGetLightingSystem(v14);
      if (LightingSystem)
      {
        if (cf)
          C3DLightingSystemAddToLightsWithTechnique(LightingSystem, a1);
        else
          C3DLightingSystemRemoveFromLightsWithTechnique(LightingSystem, a1);
      }
    }
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    v17 = (const void *)C3DGetScene(a1);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v17, 0, 1u);
  }
}

int8x8_t C3DLightGetRealShadowMapSize(uint64_t a1)
{
  int8x8_t v1;
  unsigned int v3;

  v1 = (int8x8_t)vrndm_f32(COERCE_FLOAT32X2_T(C3DLightGetShadowMapSize(a1)));
  if (*(float *)&v1.i32[1] > 0.0 && *(float *)v1.i32 > 0.0)
    v3 = 0;
  else
    v3 = -1;
  return vbsl_s8((int8x8_t)vdup_n_s32(v3), (int8x8_t)vdup_n_s32(0x44800000u), v1);
}

double C3DLightGetShadowMapSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 128);
}

void C3DLightSetAttenuationFalloffExponent(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 92) = a2;
}

void C3DLightSetAttenuationStartDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 84) = a2;
}

uint64_t C3DLightGetBaked(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 169) >> 2) & 1;
}

void C3DLightSetBaked(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_BYTE *)(a1 + 169);
  if (((((v12 & 4) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v13 = 4;
    else
      v13 = 0;
    *(_BYTE *)(a1 + 169) = v12 & 0xFB | v13;
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

void C3DLightSetCastsShadow(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 168) != a2)
  {
    *(_BYTE *)(a1 + 168) = a2;
    __C3DLightInvalidatePasses((_QWORD *)a1);
    __C3DLightDidChange((_QWORD *)a1);
  }
}

uint64_t C3DLightGetCategoryBitMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 160);
}

void C3DLightSetCategoryBitMask(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a1[20] != a2)
  {
    a1[20] = a2;
    __C3DLightDidChange(a1);
  }
}

float C3DLightGetIntensity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 96);
}

void C3DLightSetIntensity(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  unsigned __int32 v8;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a2.i32[0];
  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  *(_DWORD *)(a1 + 96) = v8;
  if (*(_DWORD *)(a1 + 80) == 6)
    __C3DLightUpdateAreaVisualisationGeometryMaterial(a1, a2, a3, a4, a5, a6, a7, a8);
}

float C3DLightGetOrthographicScale(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 136);
}

void C3DLightSetOrthographicScale(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 136) = a2;
}

double C3DLightGetShadowBias(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 192);
}

void C3DLightSetShadowBias(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 192) = a2;
}

void C3DLightSetShadowMapSize(float32x2_t *a1, float32x2_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint32x2_t v12;
  uint64_t v13;
  uint64_t LightingSystem;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (uint32x2_t)vceq_f32(a1[16], a2);
  if ((vpmin_u32(v12, v12).u32[0] & 0x80000000) == 0)
  {
    a1[16] = a2;
    __C3DLightInvalidatePasses(a1);
    v13 = C3DGetScene(a1);
    if (v13)
    {
      LightingSystem = C3DSceneGetLightingSystem(v13);
      if (LightingSystem)
        C3DLightingSystemInvalidateShadowTechniqueForLight(LightingSystem, a1);
    }
  }
}

void C3DLightSetShadowRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 140);
  if (v12 != a2)
  {
    *(float *)(a1 + 140) = a2;
    if (a2 == 0.0 || v12 == 0.0)
    {
      __C3DLightInvalidatePasses((_QWORD *)a1);
      __C3DLightDidChange((_QWORD *)a1);
    }
  }
}

uint64_t C3DLightGetShadowSampleCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 156);
}

void C3DLightSetShadowSampleCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 156) != a2)
  {
    *(_BYTE *)(a1 + 156) = a2;
    __C3DLightInvalidatePasses((_QWORD *)a1);
    __C3DLightDidChange((_QWORD *)a1);
  }
}

void C3DLightSetSpotFalloffExponent(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 3)
    *(float *)(a1 + 248) = a2;
}

void C3DLightSetSpotInnerAngle(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 3)
    *(float *)(a1 + 244) = a2;
}

void C3DLightSetSpotOuterAngle(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 3)
    *(float *)(a1 + 240) = a2;
}

float C3DLightGetTemperature(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 100);
}

void C3DLightSetTemperature(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  unsigned __int32 v8;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a2.i32[0];
  if (!a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  *(_DWORD *)(a1 + 100) = v8;
  if (*(_DWORD *)(a1 + 80) == 6)
    __C3DLightUpdateAreaVisualisationGeometryMaterial(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t C3DLightGetType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 80);
}

void C3DLightSetUsesDeferredShadows(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_BYTE *)(a1 + 169);
  if (((((v12 & 1) == 0) ^ a2) & 1) == 0)
  {
    *(_BYTE *)(a1 + 169) = v12 & 0xFE | a2;
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

uint64_t C3DLightGetUsesModulatedMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 169) >> 1) & 1;
}

void C3DLightSetUsesModulatedMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_BYTE *)(a1 + 169);
  if (((((v12 & 2) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v13 = 2;
    else
      v13 = 0;
    *(_BYTE *)(a1 + 169) = v12 & 0xFD | v13;
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

double C3DLightGetZFar(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 184);
}

void C3DLightSetZFar(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 184) = a2;
}

double C3DLightGetZNear(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 176);
}

void C3DLightSetZNear(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 176) = a2;
}

uint64_t C3DLightGetAreaVisualisationGeometry(uint64_t a1)
{
  uint64_t v2;
  void *v4;
  uint64_t CommonProfile;
  float32x4_t v6;
  float32x4_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __n128 v12;

  if (*(_DWORD *)(a1 + 80) != 6 || (*(_BYTE *)(a1 + 240) & 2) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 288);
  if (!v2)
  {
    v2 = C3DGeometryCreate();
    *(_QWORD *)(a1 + 288) = v2;
    v4 = (void *)C3DMaterialCreate();
    CommonProfile = C3DMaterialGetCommonProfile((uint64_t)v4);
    C3DEffectCommonProfileSetLightingModel(CommonProfile, 0);
    C3DMaterialSetCullMode((uint64_t)v4, 1);
    C3DGeometryAppendMaterial(v2, v4);
    if (v4)
      CFRelease(v4);
    __C3DLightUpdateAreaVisualisationGeometryMesh(a1);
    __C3DLightUpdateAreaVisualisationGeometryMaterial(a1, v6, v7, v8, v9, v10, v11, v12);
  }
  return v2;
}

void __C3DLightUpdateAreaVisualisationGeometryMesh(uint64_t a1)
{
  uint64_t v1;
  float v3;
  const __CFAllocator *v4;
  CFDataRef v5;
  CFDataRef v6;
  const CFArrayCallBacks *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  uint64_t *Shape;
  void *v11;
  uint64_t Plane;
  const __CFString *v13;
  CGPath *Mutable;
  unint64_t v15;
  float32x2_t v16;
  double v17;
  double v18;
  const void *v19;
  char v20;
  void *v21;
  void *values;
  UInt8 v23[2];
  UInt8 bytes[4];
  uint64_t v25;
  _BYTE v26[12];
  CGPath *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 288);
  if (v1)
  {
    switch(*(_BYTE *)(a1 + 256))
    {
      case 0:
        v3 = *(float *)(a1 + 272);
        *(float *)bytes = -v3;
        v25 = 0;
        *(float *)v26 = v3;
        *(_QWORD *)&v26[4] = 0;
        *(_WORD *)v23 = 256;
        v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
        values = (void *)C3DMeshSourceCreate(v5, 0, 2, 3, 1);
        CFRelease(v5);
        v6 = CFDataCreate(v4, v23, 2);
        v21 = (void *)C3DMeshElementCreate();
        C3DMeshElementInit((uint64_t)v21, 2, 1, v6, 1);
        CFRelease(v6);
        v20 = 0;
        v7 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        v8 = CFArrayCreate(v4, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
        v9 = CFArrayCreate(v4, (const void **)&v21, 1, v7);
        Shape = (uint64_t *)C3DMeshCreateWithMeshSourcesAndMeshElements(v8, v9, (uint64_t)&v20);
        C3DEntitySetName((uint64_t)Shape, CFSTR("Area Light - Line"));
        CFRelease(v9);
        CFRelease(v8);
        v11 = v21;
        goto LABEL_16;
      case 1:
        Plane = C3DMeshCreatePlane(0, 1, 1, 0, (float)(COERCE_FLOAT(*(_QWORD *)(a1 + 272)) + COERCE_FLOAT(*(_QWORD *)(a1 + 272))), (float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272))) + COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272)))), 0.0);
        Shape = (uint64_t *)Plane;
        v13 = CFSTR("Area light - Rectangle");
        goto LABEL_8;
      case 2:
        Plane = C3DMeshCreatePlane(0, 1, 1, 0, (float)(COERCE_FLOAT(*(_QWORD *)(a1 + 272)) + COERCE_FLOAT(*(_QWORD *)(a1 + 272))), (float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272))) + COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272)))), 0.0);
        Shape = (uint64_t *)Plane;
        v13 = CFSTR("Area Light - Ellipse");
        goto LABEL_8;
      case 3:
        Plane = C3DMeshCreateChamferBox(0, 1, 1, 1, 0, 0, (float)(*(float *)(a1 + 272) + *(float *)(a1 + 272)), (float)(*(float *)(a1 + 276) + *(float *)(a1 + 276)), (float)(*(float *)(a1 + 280) + *(float *)(a1 + 280)), 0.0);
        Shape = (uint64_t *)Plane;
        v13 = CFSTR("Area Light - Ellipsoid");
LABEL_8:
        C3DEntitySetName(Plane, v13);
        goto LABEL_17;
      case 4:
        Mutable = CGPathCreateMutable();
        if (*(_BYTE *)(a1 + 272))
        {
          v15 = 0;
          do
          {
            v16 = vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 280) + 8 * v15), (float32x2_t)0x3F800000BF800000);
            v17 = v16.f32[0];
            v18 = v16.f32[1];
            if (v15)
              CGPathAddLineToPoint(Mutable, 0, v17, v18);
            else
              CGPathMoveToPoint(Mutable, 0, v17, v18);
            ++v15;
          }
          while (v15 < *(unsigned __int8 *)(a1 + 272));
        }
        CGPathCloseSubpath(Mutable);
        *(float *)bytes = 0.0;
        v25 = 1065353216;
        *(_QWORD *)v26 = 0;
        *(_DWORD *)&v26[8] = 2139095039;
        v27 = Mutable;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v19 = (const void *)C3DShapeCreate((uint64_t)bytes);
        *(float *)bytes = 0.0;
        v25 = 1065353216;
        *(_QWORD *)v26 = 0;
        *(_DWORD *)&v26[8] = 2139095039;
        v27 = Mutable;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        Shape = (uint64_t *)C3DMeshCreateShape((uint64_t)v19, (__int128 *)bytes);
        C3DEntitySetName((uint64_t)Shape, CFSTR("Area light - Polygon"));
        CFRelease(v19);
        v11 = Mutable;
LABEL_16:
        CFRelease(v11);
LABEL_17:
        C3DGeometrySetMesh(v1, Shape);
        if (Shape)
          CFRelease(Shape);
        break;
      default:
        C3DGeometrySetMesh(*(_QWORD *)(a1 + 288), 0);
        break;
    }
  }
}

void __C3DLightUpdateAreaVisualisationGeometryMaterial(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  uint64_t v8;
  const __CFArray *MaterialAtIndex;
  uint64_t CommonProfile;
  const void *v12;
  const __CFAllocator *v13;
  __int16 *v14;
  __int128 v15;
  const void *v16;
  __int16 *v17;
  __int16 *v18;
  __int128 v19;
  UInt8 bytes[16];

  v8 = *(_QWORD *)(a1 + 288);
  if (v8)
  {
    *(__n128 *)bytes = __renderColor(a1, a2, a3, a4, a5, a6, a7, a8);
    MaterialAtIndex = C3DGeometryGetMaterialAtIndex(v8, 0);
    C3DMaterialSetDoubleSided((uint64_t)MaterialAtIndex, *(_BYTE *)(a1 + 240) & 1);
    switch(*(_BYTE *)(a1 + 256))
    {
      case 0:
      case 1:
      case 4:
        CommonProfile = C3DMaterialGetCommonProfile((uint64_t)MaterialAtIndex);
        C3DEffectCommonProfileSetColor(CommonProfile, 2, (float *)bytes);
        break;
      case 2:
        v16 = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("area_shape_vert"), CFSTR("area_shape_ellipse_frag"));
        C3DMaterialSetupSinglePassTechniqueWithProgram((uint64_t)MaterialAtIndex, v16);
        CFRelease(v16);
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v17 = (__int16 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 16);
        C3DEntitySetValueForKey((uint64_t)MaterialAtIndex, CFSTR("color"), v17);
        CFRelease(v17);
        *(_QWORD *)&v15 = *(_QWORD *)(a1 + 272);
        goto LABEL_6;
      case 3:
        C3DMaterialSetDoubleSided((uint64_t)MaterialAtIndex, 1);
        v12 = (const void *)C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("area_shape_vert"), CFSTR("area_shape_ellipsoid_frag"));
        C3DMaterialSetupSinglePassTechniqueWithProgram((uint64_t)MaterialAtIndex, v12);
        CFRelease(v12);
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v14 = (__int16 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 16);
        C3DEntitySetValueForKey((uint64_t)MaterialAtIndex, CFSTR("color"), v14);
        CFRelease(v14);
        v15 = *(_OWORD *)(a1 + 272);
        HIDWORD(v15) = 0;
LABEL_6:
        v19 = v15;
        v18 = (__int16 *)CFDataCreate(v13, (const UInt8 *)&v19, 16);
        C3DEntitySetValueForKey((uint64_t)MaterialAtIndex, CFSTR("halfExtents"), v18);
        CFRelease(v18);
        break;
      default:
        return;
    }
  }
}

void C3DLightSetDrawsArea(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  const void *v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
  {
    if (a2)
      v12 = 2;
    else
      v12 = 0;
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a1 + 240) & 0xFD | v12;
    if ((a2 & 1) == 0)
    {
      v13 = *(const void **)(a1 + 288);
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(a1 + 288) = 0;
      }
    }
    __C3DLightAreaDidChange((_QWORD *)a1);
  }
}

void __C3DLightAreaDidChange(_QWORD *a1)
{
  uint64_t v2;

  __C3DLightDidChange(a1);
  v2 = C3DGetScene(a1);
  C3DScenePostPipelineEvent(v2, 9, a1, 0);
}

uint64_t C3DLightGetDrawsArea(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
    return (*(unsigned __int8 *)(a1 + 240) >> 1) & 1;
  else
    return 0;
}

void C3DLightSetDoubleSided(uint64_t a1, char a2, float32x4_t a3, float32x4_t a4, double a5, double a6, double a7, double a8, __n128 a9)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
  {
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a1 + 240) & 0xFE | a2;
    __C3DLightUpdateAreaVisualisationGeometryMaterial(a1, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t C3DLightGetDoubleSided(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
    return *(_BYTE *)(a1 + 240) & 1;
  else
    return 0;
}

__n128 C3DLightGetAreaDescription@<Q0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __n128 result;
  __int128 v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 6)
    v12 = (__int128 *)(a1 + 256);
  else
    v12 = &kDefaultAreaDescription;
  result = (__n128)*v12;
  v14 = v12[1];
  *a2 = *v12;
  a2[1] = v14;
  return result;
}

BOOL C3DLightHasValidIES(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 5;
}

BOOL C3DLightIsBlack(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 96) == 0.0 || C3DColor4IsBlack((float *)(a1 + 64));
}

double C3DLightGetColorModulatedByIntensity(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  double result;

  *(_QWORD *)&result = __renderColor(a1, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

__n128 __renderColor(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __n128 result;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  unsigned __int32 v20;
  unsigned __int32 v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  __n128 v25;

  a2.i32[0] = *(_DWORD *)(a1 + 100);
  if (a2.f32[0] == 0.0)
  {
    v9 = (float32x4_t)xmmword_1DD007970;
  }
  else
  {
    a3.i32[0] = 1170939904;
    v10 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a3, a2)), 0);
    v11 = vaddq_f32((float32x4_t)vbslq_s8(v10, (int8x16_t)xmmword_1DD02A450, (int8x16_t)xmmword_1DD02A440), vdivq_f32((float32x4_t)vbslq_s8(v10, (int8x16_t)xmmword_1DD02A470, (int8x16_t)xmmword_1DD02A460), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.f32, 0), (float32x4_t)vbslq_s8(v10, (int8x16_t)xmmword_1DD02A490, (int8x16_t)xmmword_1DD02A480))));
    v11.i32[3] = 0;
    v12 = vmaxnmq_f32(v11, (float32x4_t)0);
    v12.i32[3] = 0;
    v9 = vminnmq_f32(v12, (float32x4_t)xmmword_1DD008470);
  }
  a8.n128_u32[2] = *(_DWORD *)(a1 + 72);
  v21 = *(_DWORD *)(a1 + 76);
  v22 = v9;
  v13 = v9;
  v13.i32[3] = 0;
  v24 = v13;
  a8.n128_u64[0] = *(_QWORD *)(a1 + 64);
  v25 = a8;
  if (C3DLinearRenderingIsEnabled())
  {
    result.n128_u32[2] = v22.u32[2];
    v15 = v22;
    if (v22.f32[0] <= 0.04045)
    {
      result.n128_f32[0] = v22.f32[0] / 12.92;
    }
    else
    {
      result.n128_f32[0] = powf((float)(v22.f32[0] + 0.055) / 1.055, 2.4);
      v15 = v22;
    }
    v20 = result.n128_u32[0];
    if (v15.f32[1] <= 0.04045)
    {
      v18 = v15.f32[1] / 12.92;
    }
    else
    {
      result.n128_f32[0] = powf((float)(v15.f32[1] + 0.055) / 1.055, 2.4);
      v15.i32[2] = v22.i32[2];
      v18 = result.n128_f32[0];
    }
    if (v15.f32[2] <= 0.04045)
    {
      result.n128_f32[0] = v15.f32[2] / 12.92;
    }
    else
    {
      v23 = v18;
      result.n128_f32[0] = powf((float)(v15.f32[2] + 0.055) / 1.055, 2.4);
      v18 = v23;
    }
    v16 = (float32x4_t)v25;
    v17.i64[0] = __PAIR64__(LODWORD(v18), v20);
    v17.i64[1] = __PAIR64__(v24.u32[3], result.n128_u32[0]);
  }
  else
  {
    v17 = v24;
    v16 = (float32x4_t)v25;
  }
  v19 = vmulq_f32(v16, v17);
  if (*(_DWORD *)(a1 + 80) == 5)
    v19 = vmulq_n_f32(v19, *(float *)(a1 + 248) / 1000.0);
  v19.i32[3] = v21;
  result.n128_u64[0] = vmulq_n_f32(v19, *(float *)(a1 + 96) / 1000.0).u64[0];
  result.n128_u32[3] = v21;
  return result;
}

void C3DLightSetAttenuationEndDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 88);
  *(float *)(a1 + 88) = a2;
  if ((a2 == 0.0) != (v12 == 0.0))
    __C3DLightDidChange((_QWORD *)a1);
}

void C3DLightSetIrradianceSH(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (CFTypeRef)a1[28];
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      a1[28] = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    a1[28] = v13;
    __C3DLightDidChange(a1);
  }
}

uint64_t C3DLightGetIrradianceSH(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 224);
}

void C3DLightSetProbeType(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
  {
    *(_BYTE *)(a1 + 328) = a2;
    __C3DLightDidChange((_QWORD *)a1);
  }
}

uint64_t C3DLightGetProbeType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(unsigned __int8 *)(a1 + 328);
  else
    return 0;
}

void C3DLightSetProbeUpdateType(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    *(_BYTE *)(a1 + 329) = a2;
}

uint64_t C3DLightGetProbeUpdateType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(unsigned __int8 *)(a1 + 329);
  else
    return 0;
}

void C3DLightSetParallaxCorrectionEnabled(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    *(_BYTE *)(a1 + 330) = a2;
}

BOOL C3DLightGetParallaxCorrectionEnabled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 80) == 4 && *(_BYTE *)(a1 + 330) != 0;
}

void C3DLightSetParallaxCenterOffset(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      __C3DLightDidChange_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  if (a1[5].n128_u32[0] == 4)
    a1[19] = a2;
}

__n128 C3DLightGetParallaxCenterOffset(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result.n128_u64[0] = 0;
  if (a1[5].n128_u32[0] == 4)
    return a1[19];
  return result;
}

void C3DLightSetParallaxExtentsFactor(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      __C3DLightDidChange_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  if (a1[5].n128_u32[0] == 4)
    a1[18] = a2;
}

__n128 C3DLightGetParallaxExtentsFactor(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (a1[5].n128_u32[0] == 4)
    return a1[18];
  else
    __asm { FMOV            V0.4S, #1.0 }
  return result;
}

float32x4_t C3DLightSetProbeExtents(float32x4_t *a1, float32x4_t result)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;

  if (!a1)
  {
    v12 = result;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    result = v12;
    if (v4)
    {
      __C3DLightDidChange_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      result = v12;
    }
  }
  if (a1[5].i32[0] == 4)
  {
    result.i32[3] = 0;
    result = vminnmq_f32(result, (float32x4_t)xmmword_1DD02A4A0);
    a1[16] = result;
  }
  return result;
}

__n128 C3DLightGetProbeExtents(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (a1[5].n128_u32[0] == 4)
    return a1[16];
  else
    __asm { FMOV            V0.4S, #10.0 }
  return result;
}

void C3DLightSetProbeOffset(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      __C3DLightDidChange_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  if (a1[5].n128_u32[0] == 4)
    a1[17] = a2;
}

__n128 C3DLightGetProbeOffset(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result.n128_u64[0] = 0;
  if (a1[5].n128_u32[0] == 4)
    return a1[17];
  return result;
}

void C3DLightSetRadianceProbeIndex(uint64_t a1, __int16 a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    *(_WORD *)(a1 + 320) = a2;
}

uint64_t C3DLightGetRadianceProbeIndex(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(__int16 *)(a1 + 320);
  else
    return 0xFFFFFFFFLL;
}

uint64_t C3DLightGetProbeEnvironmentTimeStamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(unsigned int *)(a1 + 324);
  else
    return 1;
}

float C3DLightGetAttenuationAtPoint(uint64_t a1, float32x4_t *a2, float32x4_t a3)
{
  float32x4_t *WorldMatrix;
  int v5;
  float v6;
  float32x4_t v7;
  float v8;
  unsigned int v9;
  float32x2_t v10;
  float32x4_t v12;
  float v14;
  float v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32x4_t v30;
  float32x4_t v32;

  WorldMatrix = C3DNodeGetWorldMatrix(a2);
  v5 = *(_DWORD *)(a1 + 80);
  v6 = 1.0;
  if ((v5 & 0xFFFFFFFE) == 2)
  {
    v7 = vsubq_f32(WorldMatrix[3], a3);
    v8 = *(float *)(a1 + 88);
    if (v8 > 0.0)
    {
      *(float *)&v9 = v8 * v8;
      v10 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 * v8));
      _S0 = vmul_f32(v10, vrecps_f32((float32x2_t)v9, v10)).u32[0];
      v12 = vmulq_f32(v7, v7);
      _S1 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
      v14 = 1.0 / _S1;
      if (_S1 < 0.0001)
        v14 = 10000.0;
      __asm { FMLS            S4, S0, V1.S[0] }
      if (_S4 < 1.0)
        v20 = _S4;
      else
        v20 = 1.0;
      if (v20 <= 0.0)
        v20 = 0.0;
      v6 = v14 * (float)(v20 * v20);
    }
    if (v5 == 3)
    {
      v30 = v7;
      v32 = vnegq_f32(WorldMatrix[2]);
      C3DLightComputeSpotAttenuations(a1);
      v21 = (int32x4_t)vmulq_f32(v30, v30);
      v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
      v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
      v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
      v24 = vmulq_f32(vmulq_n_f32(v30, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]), v32);
      v27 = vmlas_n_f32(v26, v25, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
      v28 = 1.0;
      if (v27 < 1.0)
        v28 = v27;
      if (v28 <= 0.0)
        v28 = 0.0;
      return v6 * (float)(v28 * v28);
    }
  }
  return v6;
}

void C3DLightAddLightSHContribution(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, unsigned int a5, uint64_t a6)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *WorldMatrix;
  float32x4_t v28;
  float32x4_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  __n128 v34;
  float32x4_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  __float2 v41;
  float32x2_t v42;
  float v43;
  float v44;
  float v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float32x4_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  __n128 v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76[6];
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (!a3 && (v11 = scn_default_log(), os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)))
  {
    __C3DLightDidChange_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
    if (!a4)
    {
LABEL_4:
      v19 = scn_default_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        C3DLightAddLightSHContribution_cold_5(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  else if (!a4)
  {
    goto LABEL_4;
  }
  WorldMatrix = C3DNodeGetWorldMatrix(a4);
  v67 = WorldMatrix[2];
  v69 = WorldMatrix[3];
  v75.i32[2] = 0;
  v75.i64[0] = 0;
  *(double *)v28.i64 = C3DNodeGetWorldPosition(a2, (__n128 *)&v75);
  v72 = __renderColor(a3, v28, v29, v30, v31, v32, v33, v34);
  v35 = vmulq_n_f32((float32x4_t)v72, C3DLightGetAttenuationAtPoint(a3, a4, v75));
  switch(*(_DWORD *)(a3 + 80))
  {
    case 0:
      C3DLightAddLightSHContribution_cold_1();
    case 1:
      if (a5 - 7 >= 0xFFFFFFFB)
      {
        switch(a5)
        {
          case 4u:
            v74 = v35;
            sh_eval_basis_3((uint64_t)&v77, v67.f32[0], v67.f32[1], v67.f32[2]);
            v35 = v74;
            break;
          case 3u:
            v77 = 1049652923;
            v48 = v67.f32[2] * 0.488602512;
            v49 = (float)(v67.f32[2] * v67.f32[2]) * 0.946174696 + -0.315391565;
            v78 = v67.f32[1] * -0.4886;
            v79 = v48;
            v50 = v67.f32[2] * -1.09254843;
            v82 = v67.f32[1] * v50;
            v83 = v49;
            v80 = v67.f32[0] * -0.4886;
            v81 = (float)((float)(v67.f32[0] * v67.f32[1]) + (float)(v67.f32[0] * v67.f32[1])) * 0.54627;
            v84 = v67.f32[0] * v50;
            v85 = (float)((float)(v67.f32[0] * v67.f32[0]) - (float)(v67.f32[1] * v67.f32[1])) * 0.54627;
            break;
          case 2u:
            v77 = 1049652923;
            v36 = v67.f32[2] * 0.488602512;
            v78 = v67.f32[1] * -0.4886;
            v79 = v36;
            v80 = v67.f32[0] * -0.4886;
            break;
          default:
            C3DLightAddLightSHContribution_cold_2();
        }
        v51 = 0;
        v52 = flt_1DD02A508[a5 > 2];
        v54 = v52 * v35.f32[0];
        v55 = vmuls_lane_f32(v52, *(float32x2_t *)v35.f32, 1);
        v56 = vmuls_lane_f32(v52, v35, 2);
        do
        {
          v57 = *(float *)((char *)&v77 + v51);
          *(float *)(a6 + v51) = *(float *)(a6 + v51) + (float)(v57 * v54);
          *(float *)(a6 + 4 * a5 * a5 + v51) = *(float *)(a6 + 4 * a5 * a5 + v51) + (float)(v57 * v55);
          v53 = a6 + 8 * a5 * a5;
          *(float *)(v53 + v51) = *(float *)(v53 + v51) + (float)(v57 * v56);
          v51 += 4;
        }
        while (4 * a5 * a5 != v51);
      }
      return;
    case 2:
      v37 = vsubq_f32(v69, v75);
      v38 = vmulq_f32(v37, v37);
      v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1);
      v39.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, v39)).f32[0]);
      v86 = xmmword_1DD02A4B0;
      v87 = 0x3F88CF6B3F973FD9;
      v73 = v35;
      if (v39.f32[0] <= 0.1)
      {
        v40 = 1.5708;
      }
      else
      {
        v68 = v39.i64[0];
        v70 = v37;
        v40 = asinf(0.1 / v39.f32[0]);
        v39.i64[0] = v68;
        v37 = v70;
      }
      v71 = vdivq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
      v41 = __sincosf_stret(v40);
      v76[0] = 1.7725 - (float)(v41.__cosval * 1.7725);
      v76[1] = (float)((float)(v41.__sinval * v41.__sinval) * 3.07) * 0.5;
      if (a5 < 3)
      {
        v46 = v73;
        if (a5 != 2)
          return;
        v77 = 1049652923;
        v47 = v71.f32[2] * 0.488602512;
        v78 = vmuls_lane_f32(-0.4886, *(float32x2_t *)v71.f32, 1);
        v79 = v47;
        v80 = -0.4886 * v71.f32[0];
        goto LABEL_30;
      }
      v76[2] = (float)((float)(v41.__cosval * -3.9633) * (float)((float)(v41.__cosval * v41.__cosval) + -1.0)) * 0.5;
      if (a5 == 3)
      {
        v42 = *(float32x2_t *)v71.f32;
        v77 = 1049652923;
        v43 = v71.f32[2] * 0.488602512;
        v44 = vmuls_lane_f32(v71.f32[2], v71, 2) * 0.946174696 + -0.315391565;
        v78 = vmuls_lane_f32(-0.4886, *(float32x2_t *)v71.f32, 1);
        v79 = v43;
        v45 = v71.f32[2] * -1.09254843;
        v82 = vmuls_lane_f32(v45, *(float32x2_t *)v71.f32, 1);
        v83 = v44;
        v80 = -0.4886 * v71.f32[0];
        v81 = vmlas_n_f32(vmuls_lane_f32(v42.f32[0], v42, 1), v71.f32[1], v71.f32[0]) * 0.54627;
        v84 = v45 * v71.f32[0];
        v85 = vmlas_n_f32(vmuls_lane_f32(-v71.f32[1], *(float32x2_t *)v71.f32, 1), v42.f32[0], v42.f32[0]) * 0.54627;
LABEL_29:
        v46 = v73;
LABEL_30:
        v58 = 0;
        v59 = 0;
        v61 = 1;
        do
        {
          v62 = (2 * (v59 & 0x7FFFFFFF)) | 1;
          v63 = vmulq_n_f32(v46, v76[v59] * *((float *)&v86 + v59));
          v64 = v58;
          do
          {
            v65 = 4 * v64;
            v66 = *(float *)((char *)&v77 + v65);
            *(float *)(a6 + v65) = *(float *)(a6 + v65) + (float)(v66 * v63.f32[0]);
            *(float *)(a6 + 4 * a5 * a5 + v65) = *(float *)(a6 + 4 * a5 * a5 + v65) + (float)(v66 * v63.f32[1]);
            v60 = a6 + 8 * a5 * a5;
            *(float *)(v60 + v65) = *(float *)(v60 + v65) + (float)(v66 * v63.f32[2]);
            ++v64;
            --v62;
          }
          while (v62);
          ++v59;
          v58 += v61;
          v61 += 2;
        }
        while (v59 != a5);
        return;
      }
      v76[3] = (float)((float)((float)(v41.__cosval * v41.__cosval) * 3.5171)
                     + (float)((float)((float)(v41.__cosval * v41.__cosval) * (float)(v41.__cosval * v41.__cosval))
                             * -2.9309))
             + -0.58618;
      if (a5 < 5)
      {
        sh_eval_basis_3((uint64_t)&v77, v71.f32[0], v71.f32[1], v71.f32[2]);
        goto LABEL_29;
      }
      if (a5 - 2 < 5)
        C3DLightAddLightSHContribution_cold_3();
      return;
    case 3:
      C3DLightAddLightSHContribution_cold_4();
    default:
      return;
  }
}

void C3DLightSetAutomaticallyAdjustsShadowProjection(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_BYTE *)(a1 + 169);
  if (((((v12 & 0x20) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v13 = 32;
    else
      v13 = 0;
    *(_BYTE *)(a1 + 169) = v12 & 0xDF | v13;
    if (C3DLightGetShadowCascadeCount(a1) >= 2)
      __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

uint64_t C3DLightGetAutomaticallyAdjustsShadowProjection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 169) >> 5) & 1;
}

BOOL C3DLightShouldAdjustsShadowProjection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DLightSupportsShadowCascades(a1) && *(unsigned __int8 *)(a1 + 157) > 1u;
  return ((*(_BYTE *)(a1 + 169) & 0x20) != 0 || v10) && *(_DWORD *)(a1 + 80) == 1;
}

void C3DLightSetShadowCascadeCount(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 <= 1)
    v12 = 1;
  else
    v12 = a2;
  if (v12 >= 4)
    v12 = 4;
  if (v12 != *(unsigned __int8 *)(a1 + 157))
  {
    *(_BYTE *)(a1 + 157) = v12;
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

void C3DLightSetMaximumShadowDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 144) = a2;
}

void C3DLightSetShadowCascadeSplittingFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 148) = a2;
}

float C3DLightGetShadowCascadeSplittingFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 148);
}

void C3DLightSetShadowCascadeDebugFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 152) != 0.0;
  *(float *)(a1 + 152) = a2;
  if ((a2 != 0.0) != v12)
  {
    __C3DLightDidChange((_QWORD *)a1);
    __C3DLightInvalidatePasses((_QWORD *)a1);
  }
}

float C3DLightGetShadowCascadeDebugFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 152);
}

void C3DLightSetForceCasterBackFaceOnly(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 64;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a1 + 169) & 0xBF | v12;
}

uint64_t C3DLightGetForceCasterBackFaceOnly(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 169) >> 6) & 1;
}

void C3DLightSetEnableSampleDistributed(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 0x80;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 169) = v12 & 0x80 | *(_BYTE *)(a1 + 169) & 0x7F;
}

uint64_t C3DLightGetEnableSampleDistributed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 169) >> 7;
}

float32x2_t C3DLightScaleUnits(uint64_t a1, float a2)
{
  float32x2_t result;

  *(float64x2_t *)(a1 + 176) = vmulq_n_f64(*(float64x2_t *)(a1 + 176), a2);
  result = vmul_n_f32(*(float32x2_t *)(a1 + 84), a2);
  *(float32x2_t *)(a1 + 84) = result;
  return result;
}

float32x4_t *C3DLightComputeShadowKernel(uint64_t a1, float32x4_t *a2, int a3, uint64_t a4)
{
  char CoordinatesSystemOptions;
  float v8;
  char v9;
  char ForceCasterBackFaceOnly;
  float v11;

  CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(a4);
  v8 = -2.0;
  if ((CoordinatesSystemOptions & 1) != 0)
  {
    v9 = CoordinatesSystemOptions;
    ForceCasterBackFaceOnly = C3DLightGetForceCasterBackFaceOnly(a1);
    v11 = 0.5;
    if ((v9 & 8) == 0)
      v11 = -0.5;
    if ((ForceCasterBackFaceOnly & 1) != 0)
      v8 = 0.0;
    else
      v8 = v11;
  }
  return C3DSetupHaltonFilterKernelConic(a2, a3, 1.0, 1.0, v8);
}

id _C3DLightCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  C3DLightDestroyPerTypeParameters((uint64_t)a1);
  v2 = (const void *)a1[25];
  if (v2)
  {
    CFRelease(v2);
    a1[25] = 0;
  }
  v3 = (const void *)a1[26];
  if (v3)
  {
    CFRelease(v3);
    a1[26] = 0;
  }
  v4 = (const void *)a1[28];
  if (v4)
  {
    CFRelease(v4);
    a1[28] = 0;
  }
  return C3DEntityCFFinalize((uint64_t)a1);
}

CFStringRef _C3DLightCFCopyDebugDescription(unsigned __int8 *a1)
{
  int v2;
  const __CFAllocator *v3;
  const __CFString *v4;

  v2 = a1[168];
  v3 = CFGetAllocator(a1);
  v4 = _C3DLightTypeDescription((uint64_t)a1);
  if (v2)
    return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DLight %p> Type:%@ CastsShadow(Samples:%d Cascade:%d)"), a1, v4, a1[156], a1[157]);
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DLight %p> Type:%@"), a1, v4);
}

const __CFString *_C3DLightTypeDescription(uint64_t a1)
{
  int v1;
  const __CFString *result;
  int v4;
  const __CFString *v5;
  unint64_t v6;

  v1 = *(_DWORD *)(a1 + 80);
  result = CFSTR("Ambient");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("Directional");
      break;
    case 2:
      result = CFSTR("Omni");
      break;
    case 3:
      result = CFSTR("Spot");
      break;
    case 4:
      v4 = *(unsigned __int8 *)(a1 + 328);
      v5 = CFSTR("IES");
      if (v4 == 1)
        v5 = CFSTR("Radiance");
      if (v4)
        result = v5;
      else
        result = CFSTR("Irradiance");
      break;
    case 5:
      result = CFSTR("IES");
      break;
    case 6:
      v6 = *(char *)(a1 + 256);
      if (v6 >= 5)
        goto LABEL_13;
      result = off_1EA5A1780[v6];
      break;
    default:
LABEL_13:
      result = CFSTR("Unknown");
      break;
  }
  return result;
}

BOOL _C3DLightInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFNumber *Value;
  const __CFNumber *v17;
  float v18;
  NSObject *v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  const void *v42;
  const void *v43;
  uint64_t v44;
  CFTypeID v45;
  const __CFNumber *v46;
  unsigned __int32 v47;
  NSObject *v48;
  CFErrorRef MalformedDocumentError;
  NSObject *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int32x4_t v73;
  __n128 v74;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) == 0)
  {
    v19 = scn_default_log();
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DLightInitWithPropertyList_cold_5(v19, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("property3"));
  if (Value)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(Value, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 240) = v74.n128_u32[0];
  }
  v17 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("property4"));
  if (v17)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v17, kCFNumberFloatType, &v74);
    v18 = v74.n128_f32[0];
  }
  else
  {
    v18 = *(float *)(a1 + 244);
  }
  *(float *)(a1 + 244) = *(float *)(a1 + 240) * v18;
  v28 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("type"));
  if (!v28)
  {
    v48 = scn_default_log();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      _C3DLightInitWithPropertyList_cold_1();
      if (!a4)
        return 0;
    }
    else if (!a4)
    {
      return 0;
    }
    if (!*a4)
    {
      MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
      result = 0;
      *a4 = MalformedDocumentError;
      return result;
    }
    return 0;
  }
  v74.n128_u32[0] = 0;
  if (!CFNumberGetValue(v28, kCFNumberIntType, &v74))
  {
    v50 = scn_default_log();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      _C3DLightInitWithPropertyList_cold_2();
      if (!a4)
        return 0;
    }
    else if (!a4)
    {
      return 0;
    }
    if (!*a4)
      *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
    return 0;
  }
  *(_DWORD *)(a1 + 80) = v74.n128_u32[0];
  v29 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("castShadow"));
  if (v29)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v29, kCFNumberIntType, &v74);
    *(_BYTE *)(a1 + 168) = v74.n128_u32[0] != 0;
  }
  v30 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("znear"));
  if (v30)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v30, kCFNumberFloatType, &v74);
    *(double *)(a1 + 176) = v74.n128_f32[0];
  }
  v31 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("zfar"));
  if (v31)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v31, kCFNumberFloatType, &v74);
    *(double *)(a1 + 184) = v74.n128_f32[0];
  }
  v32 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("orthographicScale"));
  if (v32)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v32, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 136) = v74.n128_u32[0];
  }
  v33 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("shadowSoftenFactor"));
  if (v33)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v33, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 140) = v74.n128_u32[0];
  }
  v34 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("category"));
  if (v34)
  {
    v74.n128_u64[0] = 0;
    CFNumberGetValue(v34, kCFNumberNSIntegerType, &v74);
    *(_QWORD *)(a1 + 160) = v74.n128_u64[0];
  }
  v35 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("attenuationStart"));
  if (v35)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v35, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 84) = v74.n128_u32[0];
  }
  v36 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("attenuationEnd"));
  if (v36)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v36, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 88) = v74.n128_u32[0];
  }
  v37 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("attenuationFalloffExponent"));
  if (v37)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v37, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 92) = v74.n128_u32[0];
  }
  v38 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("spotInnerAngle"));
  if (v38)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v38, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 244) = v74.n128_u32[0];
  }
  v39 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("spotOuterAngle"));
  if (v39)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v39, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 240) = v74.n128_u32[0];
  }
  v40 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("spotFalloffExponent"));
  if (v40)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v40, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 248) = v74.n128_u32[0];
  }
  v41 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("intensity"));
  if (v41)
  {
    v74.n128_u32[0] = 0;
    CFNumberGetValue(v41, kCFNumberFloatType, &v74);
    *(_DWORD *)(a1 + 96) = v74.n128_u32[0];
  }
  v42 = CFDictionaryGetValue(a2, CFSTR("color"));
  if (v42)
  {
    if (!C3DColor4InitWithPropertyList(a1 + 64, (uint64_t)v42, a3, a4))
    {
      v51 = scn_default_log();
      result = os_log_type_enabled(v51, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      _C3DLightInitWithPropertyList_cold_4(v51, v52, v53, v54, v55, v56, v57, v58);
      return 0;
    }
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToLinear((float32x4_t *)(a1 + 64));
  }
  v43 = CFDictionaryGetValue(a2, CFSTR("shadowColor"));
  if (v43)
  {
    v44 = (uint64_t)v43;
    v45 = CFGetTypeID(v43);
    if (v45 == CFNumberGetTypeID())
    {
      v46 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("shadowColor"));
      if (v46)
      {
        v74.n128_u32[0] = 0;
        CFNumberGetValue(v46, kCFNumberFloatType, &v74);
        v47 = v74.n128_u32[0];
      }
      else
      {
        v47 = 1.0;
      }
      __asm { FMOV            V1.4S, #1.0 }
      _Q1.i32[0] = v47;
      v73 = vzip1q_s32(_Q1, _Q1);
      v73.i32[2] = v47;
      v74 = (__n128)v73;
      if (C3DLinearRenderingIsEnabled())
        C3DColor4ConvertToLinear((float32x4_t *)&v74);
      C3DLightSetShadowColor((__n128 *)a1, &v74);
      return 1;
    }
    v59 = (float32x4_t *)(a1 + 112);
    if (C3DColor4InitWithPropertyList((uint64_t)v59, v44, a3, a4))
    {
      if (C3DLinearRenderingIsEnabled())
        C3DColor4ConvertToLinear(v59);
      return 1;
    }
    v60 = scn_default_log();
    result = os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DLightInitWithPropertyList_cold_3(v60, v61, v62, v63, v64, v65, v66, v67);
    return 0;
  }
  return 1;
}

__CFDictionary *_C3DLightCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  double v17;
  float32_t v18;
  CFNumberRef v19;
  double v20;
  float32_t v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  float32x4_t v38;
  float32x4_t valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (v14)
  {
    valuePtr.i32[0] = *(_DWORD *)(a1 + 80);
    v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("type"), v15);
    CFRelease(v15);
    if (*(_BYTE *)(a1 + 168))
    {
      valuePtr.i32[0] = *(unsigned __int8 *)(a1 + 168);
      v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("castShadow"), v16);
      CFRelease(v16);
    }
    v17 = *(double *)(a1 + 176);
    if (v17 != 0.0)
    {
      v18 = v17;
      valuePtr.f32[0] = v18;
      v19 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("znear"), v19);
      CFRelease(v19);
    }
    v20 = *(double *)(a1 + 184);
    if (v20 != 0.0)
    {
      v21 = v20;
      valuePtr.f32[0] = v21;
      v22 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("zfar"), v22);
      CFRelease(v22);
    }
    valuePtr.i32[0] = *(_DWORD *)(a1 + 136);
    v23 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("orthographicScale"), v23);
    CFRelease(v23);
    valuePtr.i32[0] = *(_DWORD *)(a1 + 240);
    v24 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("spotOuterAngle"), v24);
    CFRelease(v24);
    if (*(float *)(a1 + 84) != 0.0)
    {
      valuePtr.i32[0] = *(_DWORD *)(a1 + 84);
      v25 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("attenuationStart"), v25);
      CFRelease(v25);
    }
    if (*(float *)(a1 + 88) != 0.0)
    {
      valuePtr.i32[0] = *(_DWORD *)(a1 + 88);
      v26 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("attenuationEnd"), v26);
      CFRelease(v26);
    }
    valuePtr.i32[0] = *(_DWORD *)(a1 + 92);
    v27 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("attenuationFalloffExponent"), v27);
    CFRelease(v27);
    if (*(float *)(a1 + 240) != 0.0)
    {
      valuePtr.i32[0] = *(_DWORD *)(a1 + 244);
      v28 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("spotInnerAngle"), v28);
      CFRelease(v28);
    }
    valuePtr.i32[0] = *(_DWORD *)(a1 + 248);
    v29 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("spotFalloffExponent"), v29);
    CFRelease(v29);
    valuePtr.i32[0] = *(_DWORD *)(a1 + 140);
    v30 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("shadowSoftenFactor"), v30);
    CFRelease(v30);
    valuePtr.i64[0] = *(_QWORD *)(a1 + 160);
    v31 = CFNumberCreate(0, kCFNumberNSIntegerType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("category"), v31);
    CFRelease(v31);
    valuePtr.i32[0] = *(_DWORD *)(a1 + 96);
    v32 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("intensity"), v32);
    CFRelease(v32);
    valuePtr = *(float32x4_t *)(a1 + 64);
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToNonLinear(&valuePtr);
    v33 = (const void *)C3DColor4CopyPropertyList((uint64_t)&valuePtr);
    if (v33)
    {
      v34 = v33;
      CFDictionaryAddValue(v14, CFSTR("color"), v33);
      CFRelease(v34);
    }
    v38 = *(float32x4_t *)(a1 + 112);
    if (C3DLinearRenderingIsEnabled())
      C3DColor4ConvertToNonLinear(&v38);
    v35 = (const void *)C3DColor4CopyPropertyList((uint64_t)&v38);
    if (v35)
    {
      v36 = v35;
      CFDictionaryAddValue(v14, CFSTR("shadowColor"), v35);
      CFRelease(v36);
    }
  }
  return v14;
}

uint64_t _C3DLightFinalizeDeserialization()
{
  return 1;
}

__CFArray *_C3DLightCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  uint64_t v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const CFDictionaryKeyCallBacks *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  const CFDictionaryValueCallBacks *v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  __CFDictionary *v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const CFDictionaryKeyCallBacks *v48;
  __CFDictionary *v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  __CFDictionary *v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  __CFArray *v57;
  __CFDictionary *v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  const CFDictionaryKeyCallBacks *v62;
  const CFDictionaryValueCallBacks *v63;
  __CFDictionary *v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  __CFDictionary *v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  __CFDictionary *v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  __CFDictionary *v76;
  CFNumberRef v77;
  CFNumberRef v78;
  CFNumberRef v79;
  const CFDictionaryKeyCallBacks *v80;
  __CFDictionary *v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  const CFDictionaryKeyCallBacks *v85;
  const CFDictionaryValueCallBacks *v86;
  __CFDictionary *v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  __CFDictionary *v91;
  CFNumberRef v92;
  CFNumberRef v93;
  CFNumberRef v94;
  __CFDictionary *v95;
  CFNumberRef v96;
  CFNumberRef v97;
  CFNumberRef v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 13;
  v102 = a1 + 64;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("Color"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v9 = a1;
  v102 = a1 + 96;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("intensity"));
  CFDictionarySetValue(v8, CFSTR("type"), v10);
  CFDictionarySetValue(v8, CFSTR("address"), v12);
  CFDictionarySetValue(v8, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v11);
  CFRelease(v8);
  CFRelease(v12);
  CFRelease(v10);
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v14 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 2;
  v102 = v9 + 80;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v17 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v14, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v14, CFSTR("type"), v15);
  CFDictionarySetValue(v14, CFSTR("address"), v17);
  CFDictionarySetValue(v14, CFSTR("semantic"), v16);
  CFArrayAppendValue(Mutable, v14);
  CFRelease(v16);
  CFRelease(v14);
  CFRelease(v17);
  CFRelease(v15);
  v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v19 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v13);
  v103 = 0;
  valuePtr = 3;
  v102 = v9 + 168;
  v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v22 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v19, CFSTR("name"), CFSTR("castShadow"));
  CFDictionarySetValue(v19, CFSTR("type"), v20);
  CFDictionarySetValue(v19, CFSTR("address"), v22);
  CFDictionarySetValue(v19, CFSTR("semantic"), v21);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v21);
  CFRelease(v19);
  CFRelease(v22);
  CFRelease(v20);
  v23 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v103 = 0;
  valuePtr = 1;
  v101 = v9 + 112;
  v102 = v9 + 112;
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v26 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v23, CFSTR("name"), CFSTR("shadowColor"));
  CFDictionarySetValue(v23, CFSTR("type"), v24);
  CFDictionarySetValue(v23, CFSTR("address"), v26);
  CFDictionarySetValue(v23, CFSTR("semantic"), v25);
  CFArrayAppendValue(Mutable, v23);
  CFRelease(v25);
  CFRelease(v23);
  CFRelease(v26);
  CFRelease(v24);
  v27 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v103 = 0;
  valuePtr = 6;
  v102 = v9 + 176;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v30 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("zNear"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v103 = 0;
  valuePtr = 6;
  v102 = v9 + 184;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v34 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("zFar"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v36 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = v9 + 140;
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v39 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v36, CFSTR("name"), CFSTR("shadowSoftenFactor"));
  CFDictionarySetValue(v36, CFSTR("type"), v37);
  CFDictionarySetValue(v36, CFSTR("address"), v39);
  CFDictionarySetValue(v36, CFSTR("semantic"), v38);
  CFArrayAppendValue(Mutable, v36);
  CFRelease(v38);
  CFRelease(v36);
  CFRelease(v39);
  CFRelease(v37);
  v40 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v35);
  v103 = 0;
  valuePtr = 1;
  v102 = v9 + 84;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("attenuationStart"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v35);
  v103 = 0;
  valuePtr = 1;
  v102 = v9 + 88;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v47 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v44, CFSTR("name"), CFSTR("attenuationEnd"));
  CFDictionarySetValue(v44, CFSTR("type"), v45);
  CFDictionarySetValue(v44, CFSTR("address"), v47);
  CFDictionarySetValue(v44, CFSTR("semantic"), v46);
  CFArrayAppendValue(Mutable, v44);
  CFRelease(v46);
  CFRelease(v44);
  CFRelease(v47);
  CFRelease(v45);
  v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v49 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v35);
  v103 = 0;
  valuePtr = 1;
  v102 = v9 + 92;
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v51 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v52 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v49, CFSTR("name"), CFSTR("attenuationFalloffExponent"));
  CFDictionarySetValue(v49, CFSTR("type"), v50);
  CFDictionarySetValue(v49, CFSTR("address"), v52);
  CFDictionarySetValue(v49, CFSTR("semantic"), v51);
  CFArrayAppendValue(Mutable, v49);
  CFRelease(v51);
  CFRelease(v49);
  CFRelease(v52);
  CFRelease(v50);
  v53 = CFDictionaryCreateMutable(0, 4, v48, v35);
  v103 = 0;
  valuePtr = 1;
  v100 = v9;
  v102 = v9 + 244;
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v55 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v56 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v53, CFSTR("name"), CFSTR("spotInnerAngle"));
  CFDictionarySetValue(v53, CFSTR("type"), v54);
  CFDictionarySetValue(v53, CFSTR("address"), v56);
  CFDictionarySetValue(v53, CFSTR("semantic"), v55);
  v57 = Mutable;
  CFArrayAppendValue(Mutable, v53);
  CFRelease(v55);
  CFRelease(v53);
  CFRelease(v56);
  CFRelease(v54);
  v58 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = v9 + 240;
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v61 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v58, CFSTR("name"), CFSTR("spotOuterAngle"));
  CFDictionarySetValue(v58, CFSTR("type"), v59);
  CFDictionarySetValue(v58, CFSTR("address"), v61);
  CFDictionarySetValue(v58, CFSTR("semantic"), v60);
  CFArrayAppendValue(Mutable, v58);
  CFRelease(v60);
  CFRelease(v58);
  CFRelease(v61);
  CFRelease(v59);
  v62 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v63 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v64 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = v100 + 248;
  v65 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v67 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v64, CFSTR("name"), CFSTR("spotFalloffExponent"));
  CFDictionarySetValue(v64, CFSTR("type"), v65);
  CFDictionarySetValue(v64, CFSTR("address"), v67);
  CFDictionarySetValue(v64, CFSTR("semantic"), v66);
  CFArrayAppendValue(v57, v64);
  CFRelease(v66);
  CFRelease(v64);
  CFRelease(v67);
  CFRelease(v65);
  v68 = CFDictionaryCreateMutable(0, 4, v62, v63);
  v103 = 0;
  valuePtr = 13;
  v102 = v101;
  v69 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v70 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v71 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v68, CFSTR("name"), CFSTR("shadowColor"));
  CFDictionarySetValue(v68, CFSTR("type"), v69);
  CFDictionarySetValue(v68, CFSTR("address"), v71);
  CFDictionarySetValue(v68, CFSTR("semantic"), v70);
  CFArrayAppendValue(v57, v68);
  CFRelease(v70);
  CFRelease(v68);
  CFRelease(v71);
  CFRelease(v69);
  v72 = CFDictionaryCreateMutable(0, 4, v62, v63);
  v103 = 0;
  valuePtr = 6;
  v102 = v100 + 192;
  v73 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v74 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v75 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v72, CFSTR("name"), CFSTR("shadowBias"));
  CFDictionarySetValue(v72, CFSTR("type"), v73);
  CFDictionarySetValue(v72, CFSTR("address"), v75);
  CFDictionarySetValue(v72, CFSTR("semantic"), v74);
  CFArrayAppendValue(v57, v72);
  CFRelease(v74);
  CFRelease(v72);
  CFRelease(v75);
  CFRelease(v73);
  v76 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v63);
  v103 = 0;
  valuePtr = 8;
  v102 = v100 + 128;
  v77 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v78 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v79 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v76, CFSTR("name"), CFSTR("shadowMapSize"));
  CFDictionarySetValue(v76, CFSTR("type"), v77);
  CFDictionarySetValue(v76, CFSTR("address"), v79);
  CFDictionarySetValue(v76, CFSTR("semantic"), v78);
  CFArrayAppendValue(v57, v76);
  CFRelease(v78);
  CFRelease(v76);
  CFRelease(v79);
  CFRelease(v77);
  v80 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v81 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = v100 + 136;
  v82 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v84 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v81, CFSTR("name"), CFSTR("directionalExtent"));
  CFDictionarySetValue(v81, CFSTR("type"), v82);
  CFDictionarySetValue(v81, CFSTR("address"), v84);
  CFDictionarySetValue(v81, CFSTR("semantic"), v83);
  CFArrayAppendValue(v57, v81);
  CFRelease(v83);
  CFRelease(v81);
  CFRelease(v84);
  CFRelease(v82);
  v85 = v80;
  v86 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v87 = CFDictionaryCreateMutable(0, 4, v85, MEMORY[0x1E0C9B3A0]);
  v103 = 0;
  valuePtr = 1;
  v102 = v100 + 156;
  v88 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v89 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v90 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v87, CFSTR("name"), CFSTR("shadowMaxSampleCount"));
  CFDictionarySetValue(v87, CFSTR("type"), v88);
  CFDictionarySetValue(v87, CFSTR("address"), v90);
  CFDictionarySetValue(v87, CFSTR("semantic"), v89);
  CFArrayAppendValue(v57, v87);
  CFRelease(v89);
  CFRelease(v87);
  CFRelease(v90);
  CFRelease(v88);
  v91 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v86);
  v103 = 0;
  valuePtr = 2;
  v102 = v100 + 160;
  v92 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v93 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v94 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v91, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v91, CFSTR("type"), v92);
  CFDictionarySetValue(v91, CFSTR("address"), v94);
  CFDictionarySetValue(v91, CFSTR("semantic"), v93);
  CFArrayAppendValue(v57, v91);
  CFRelease(v93);
  CFRelease(v91);
  CFRelease(v94);
  CFRelease(v92);
  v95 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v103 = 2;
  valuePtr = 5;
  v102 = v100 + 200;
  v96 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v97 = CFNumberCreate(0, kCFNumberSInt32Type, &v103);
  v98 = CFNumberCreate(0, kCFNumberLongType, &v102);
  CFDictionarySetValue(v95, CFSTR("name"), CFSTR("gobo"));
  CFDictionarySetValue(v95, CFSTR("type"), v96);
  CFDictionarySetValue(v95, CFSTR("address"), v98);
  CFDictionarySetValue(v95, CFSTR("semantic"), v97);
  CFArrayAppendValue(v57, v95);
  CFRelease(v97);
  CFRelease(v95);
  CFRelease(v98);
  CFRelease(v96);
  return v57;
}

void _C3DLightSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  _BOOL4 IsBlack;

  if ((void *)(a1 + 168) == __dst)
  {
    C3DLightSetCastsShadow(a1, *(unsigned __int8 *)__src);
  }
  else if ((void *)(a1 + 88) == __dst)
  {
    C3DLightSetAttenuationEndDistance(a1, *__src);
  }
  else if (a1 + 64 > (unint64_t)__dst || a1 + 76 < (unint64_t)__dst)
  {
    memcpy(__dst, __src, __n);
  }
  else
  {
    IsBlack = C3DColor4IsBlack((float *)(a1 + 64));
    memcpy(__dst, __src, __n);
    if (IsBlack != C3DColor4IsBlack((float *)(a1 + 64)))
      __C3DLightDidChange((_QWORD *)a1);
  }
}

uint64_t _C3DLightSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

float sh_eval_basis_3(uint64_t a1, float a2, float a3, float a4)
{
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v4 = a4 * a4;
  *(_DWORD *)a1 = 1049652923;
  v5 = a4;
  v6 = v5 * 0.488602512;
  v7 = v4;
  v8 = v7 * 0.946174696 + -0.315391565;
  v9 = (v7 * 1.86588166 + -1.119529) * v5;
  *(float *)(a1 + 4) = a3 * -0.4886;
  *(float *)(a1 + 8) = v6;
  v10 = v5 * -1.09254843;
  *(float *)(a1 + 20) = v10 * a3;
  *(float *)(a1 + 24) = v8;
  *(float *)&v7 = v7 * -2.285229 + 0.457045799;
  *(float *)(a1 + 44) = *(float *)&v7 * a3;
  *(float *)(a1 + 48) = v9;
  v11 = (float)(a2 * a3) + (float)(a2 * a3);
  *(float *)(a1 + 12) = a2 * -0.4886;
  *(float *)(a1 + 16) = v11 * 0.54627;
  v12 = (float)(a2 * a2) - (float)(a3 * a3);
  *(float *)(a1 + 28) = v10 * a2;
  *(float *)(a1 + 32) = v12 * 0.54627;
  *(float *)&v5 = v5 * 1.44530572;
  *(float *)(a1 + 52) = *(float *)&v7 * a2;
  *(float *)(a1 + 56) = v12 * *(float *)&v5;
  *(float *)(a1 + 36) = (float)((float)(v12 * a3) + (float)(a2 * v11)) * -0.59004;
  *(float *)(a1 + 40) = v11 * *(float *)&v5;
  result = (float)((float)(a2 * v12) - (float)(v11 * a3)) * -0.59004;
  *(float *)(a1 + 60) = result;
  return result;
}

void OUTLINED_FUNCTION_4_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

C3D::Pass *C3D::SSRPassesCreateIfNeeded(C3D *this, C3D::RenderGraph *a2, C3D::MainPass *a3)
{
  float32x4_t *PointOfView;
  uint64_t v6;
  uint64_t Aligned;
  uint64_t CullingContext;
  float64x2_t v9;
  C3D::Pass *v10;
  C3D::Pass *v11;
  C3D::Pass *v12;
  C3D::Pass *v13;
  C3D::Pass *v14;
  C3D::Pass *v15;
  C3D::ScenePass *v16;
  C3D::Pass *Pass;
  __int128 v19;
  char v20;
  uint64_t v21;
  C3D::ScenePass *v22;

  v22 = a2;
  PointOfView = C3DEngineContextGetPointOfView(*((_QWORD *)this + 1));
  if (!PointOfView || !C3DNodeGetCamera((uint64_t)PointOfView))
    return (C3D::Pass *)C3D::ScenePass::lastPass(a2);
  v6 = (*(uint64_t (**)(C3D::RenderGraph *))(*(_QWORD *)a2 + 88))(a2);
  Aligned = C3DScratchAllocatorAllocateAligned(*((_QWORD *)this + 2), 16, 8, 0);
  *(_QWORD *)Aligned = 0;
  *(_QWORD *)(Aligned + 8) = 0;
  v21 = Aligned;
  *(_DWORD *)(Aligned + 4) = 2;
  *(_WORD *)Aligned = (int)fmaxf(*(float *)(v6 + 8) * 0.5, 1.0);
  *(_WORD *)(Aligned + 2) = (int)fmaxf(*(float *)(v6 + 12) * 0.5, 1.0);
  v19 = *(_OWORD *)(C3D::DrawNodesPass::getCullingContext(a2) + 4744);
  CullingContext = C3D::DrawNodesPass::getCullingContext(a2);
  *(_QWORD *)&v9.f64[0] = v19;
  v9.f64[1] = *(float64_t *)(CullingContext + 4752);
  *(float32x2_t *)(Aligned + 8) = vcvt_f32_f64(v9);
  v10 = C3D::RenderGraph::createPass<C3D::SSRDepthBackFacePass,C3D::MainPass *&>((uint64_t)this, &v22);
  v11 = C3D::RenderGraph::createPass<C3D::SSRDownSampleColorDepthPass,C3D::MainPass *&,C3D::SSRPassData *&>((uint64_t)this, &v22, &v21);
  v12 = C3D::RenderGraph::createPass<C3D::SSRRaytracePass,C3D::MainPass *&,C3D::SSRPassData *&>((uint64_t)this, &v22, &v21);
  v20 = 0;
  v13 = C3D::RenderGraph::createPass<C3D::SSRBlurPass,C3D::MainPass *&,C3D::SSRPassData *&,BOOL>((uint64_t)this, &v22, &v21, &v20);
  v20 = 1;
  v14 = C3D::RenderGraph::createPass<C3D::SSRBlurPass,C3D::MainPass *&,C3D::SSRPassData *&,BOOL>((uint64_t)this, &v22, &v21, &v20);
  v15 = C3D::RenderGraph::createPass<C3D::SSRCompositePass,C3D::MainPass *&,C3D::SSRPassData *&>((uint64_t)this, &v22, &v21);
  C3D::Pass::addDependency(v11, v22);
  C3D::Pass::addDependency(v11, v10);
  C3D::Pass::addDependency(v12, v22);
  C3D::Pass::addDependency(v12, v11);
  C3D::Pass::addDependency(v13, v12);
  C3D::Pass::addDependency(v14, v13);
  C3D::Pass::addDependency(v14, v12);
  C3D::Pass::addDependency(v15, v14);
  v16 = v22;
  if (v16 != (C3D::ScenePass *)C3D::ScenePass::lastPass(v22))
  {
    Pass = (C3D::Pass *)C3D::ScenePass::lastPass(v22);
    C3D::Pass::addDependency(v15, Pass);
  }
  C3D::Pass::addDependency(v15, v22);
  C3D::Pass::addDependency(v15, v12);
  return v15;
}

C3D::SSRDepthBackFacePass *C3D::RenderGraph::createPass<C3D::SSRDepthBackFacePass,C3D::MainPass *&>(uint64_t a1, C3D::Pass **a2)
{
  C3D::SSRDepthBackFacePass *Aligned;

  Aligned = (C3D::SSRDepthBackFacePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::SSRDepthBackFacePass::SSRDepthBackFacePass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::SSRDepthBackFacePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::SSRDownSampleColorDepthPass,C3D::MainPass *&,C3D::SSRPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::ComputePass *Aligned;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::SSRDownSampleColorDepthPass::SSRDownSampleColorDepthPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::SSRRaytracePass,C3D::MainPass *&,C3D::SSRPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 400, 16, 0);
  C3D::SSRRaytracePass::SSRRaytracePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::SSRBlurPass,C3D::MainPass *&,C3D::SSRPassData *&,BOOL>(uint64_t a1, C3D::Pass **a2, uint64_t *a3, char *a4)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::SSRBlurPass::SSRBlurPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3, *a4);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::RenderPass *C3D::RenderGraph::createPass<C3D::SSRCompositePass,C3D::MainPass *&,C3D::SSRPassData *&>(uint64_t a1, C3D::Pass **a2, uint64_t *a3)
{
  C3D::RenderPass *Aligned;

  Aligned = (C3D::RenderPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 256, 16, 0);
  C3D::SSRCompositePass::SSRCompositePass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::RenderPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void __invalidatePassIfNeeded(void *a1, uint64_t a2)
{
  _BOOL4 v4;

  v4 = C3DCameraNeedsPostProcess((uint64_t)a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  if (v4 != C3DCameraNeedsPostProcess((uint64_t)a1))
    _C3DCameraInvalidatePasses(a1);
}

BOOL C3DCameraNeedsPostProcess(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = 1;
  if ((*(_BYTE *)(a1 + 312) & 2) == 0
    && *(float *)(a1 + 460) == 0.0
    && *(float *)(a1 + 456) == 1.0
    && *(float *)(a1 + 452) == 0.0
    && (*(float *)(a1 + 448) <= 0.0 || C3DWasLinkedBeforeMajorOSYear2017())
    && *(float *)(a1 + 472) <= 0.0
    && (*(float *)(a1 + 476) == 0.0 || *(float *)(a1 + 480) == 0.0)
    && *(float *)(a1 + 484) == 0.0
    && *(float *)(a1 + 488) == 0.0)
  {
    v11 = *(_QWORD *)(a1 + 520);
    if (!v11 || !C3DEffectSlotHasImageOrTexture(v11))
      return 0;
  }
  return result;
}

void _C3DCameraInvalidatePasses(void *a1)
{
  const __CFDictionary *v1;
  uint64_t SharedInstance;
  const void *v3;
  void *values;

  values = a1;
  v1 = CFDictionaryCreate(0, (const void **)kC3DCameraKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  SharedInstance = C3DNotificationCenterGetSharedInstance();
  v3 = (const void *)C3DGetScene(values);
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v3, v1, 1u);
  CFRelease(v1);
}

void C3DCameraSetMotionBlurIntensity(float *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  const __CFDictionary *v14;
  uint64_t SharedInstance;
  const void *v16;
  void *values;

  values = a1;
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[118];
  v13 = 0.0;
  if (a2 >= 0.0)
    v13 = a2;
  a1[118] = v13;
  if (a2 != 0.0 && v12 == 0.0 || a2 == 0.0 && v12 != 0.0)
  {
    v14 = CFDictionaryCreate(0, (const void **)kC3DCameraKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    v16 = (const void *)C3DGetScene(values);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v16, v14, 1u);
    CFRelease(v14);
  }
}

void C3DCameraSetDepthOfFieldIntensity(float *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  const __CFDictionary *v14;
  uint64_t SharedInstance;
  const void *v16;
  void *values;

  values = a1;
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[112];
  v13 = 0.0;
  if (a2 >= 0.0)
    v13 = a2;
  a1[112] = v13;
  if (v13 != 0.0 && v12 == 0.0 || v13 == 0.0 && v12 != 0.0)
  {
    v14 = CFDictionaryCreate(0, (const void **)kC3DCameraKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    v16 = (const void *)C3DGetScene(values);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v16, v14, 1u);
    CFRelease(v14);
  }
}

void C3DCameraSetWantsHDR(void *a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  char v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetWantsHDR_block_invoke;
  v12[3] = &__block_descriptor_tmp_2_1;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

__n128 C3DCameraSetProjectionTransform(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 256) = v14;
  *(__n128 *)(a1 + 208) = result;
  *(_OWORD *)(a1 + 224) = v13;
  *(_BYTE *)(a1 + 64) |= 8u;
  return result;
}

void C3DCameraSetScreenSpaceAmbientOcclusionIntensity(float *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[123];
  v13 = 0.0;
  if (a2 >= 0.0)
    v13 = a2;
  a1[123] = v13;
  if (v13 != 0.0 && v12 == 0.0 || v13 == 0.0 && v12 != 0.0)
    _C3DCameraInvalidatePasses(a1);
}

void C3DCameraSetScreenSpaceAmbientOcclusionRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 496) = a2;
}

void C3DCameraSetScreenSpaceAmbientOcclusionBias(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 500) = a2;
}

void C3DCameraSetScreenSpaceAmbientOcclusionDepthThreshold(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 504) = a2;
}

void C3DCameraSetScreenSpaceAmbientOcclusionNormalThreshold(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 508) = a2;
}

void C3DCameraSetScreenSpaceAmbientOcclusionSampleCount(_DWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a1[128] != a2)
  {
    a1[128] = a2;
    _C3DCameraInvalidatePasses(a1);
  }
}

void C3DCameraSetScreenSpaceAmbientOcclusionDownSample(_DWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a1[129] != a2)
  {
    a1[129] = a2;
    _C3DCameraInvalidatePasses(a1);
  }
}

uint64_t C3DCameraGetAutomaticallyAdjustsZRange(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 64) >> 1) & 1;
}

void C3DCameraSetAutomaticallyAdjustsZRange(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | v12;
}

void C3DCameraSetAverageGray(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 388) = a2;
}

void C3DCameraSetBloomBlurRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 440) = a2;
}

void C3DCameraSetBloomIntensity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 424) = a2;
}

void C3DCameraSetBloomThreshold(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 428) = a2;
}

void C3DCameraSetBloomIteration(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 432) = a2;
}

void C3DCameraSetBloomIterationSpread(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 436) = a2;
}

void C3DCameraSetCategoryBitMask(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 528) = a2;
}

void C3DCameraSetColorFringeStrength(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetColorFringeStrength_block_invoke;
  v12[3] = &__block_descriptor_tmp_3_1;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetColorFringeIntensity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 444) = a2;
}

void C3DCameraSetContrast(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetContrast_block_invoke;
  v12[3] = &__block_descriptor_tmp_4_2;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetGrainIntensity(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetGrainIntensity_block_invoke;
  v12[3] = &__block_descriptor_tmp_5_0;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetGrainScale(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 468) = a2;
}

void C3DCameraSetGrainIsColored(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 16;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a1 + 312) & 0xEF | v12;
}

CFTypeRef C3DCameraSetARGrainTexture(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 544);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 544) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 544) = result;
  }
  return result;
}

void C3DCameraSetARGrainSlice(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 552) = a2;
}

void C3DCameraSetWhiteBalanceTemperature(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetWhiteBalanceTemperature_block_invoke;
  v12[3] = &__block_descriptor_tmp_6_2;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetWhiteBalanceTint(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetWhiteBalanceTint_block_invoke;
  v12[3] = &__block_descriptor_tmp_7_2;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetExposureAdaptationBrighteningSpeedFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 400) = a2;
}

void C3DCameraSetExposureAdaptationDarkeningSpeedFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 404) = a2;
}

void C3DCameraSetExposureAdaptationDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 396) = a2;
}

void C3DCameraSetExposureAdaptationHistogramRangeHighProbability(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 408) = a2;
}

void C3DCameraSetExposureAdaptationHistogramRangeLowProbability(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 412) = a2;
}

void C3DCameraSetExposureAdaptationMode(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 313) = a2;
}

void C3DCameraSetExposureOffset(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 392) = a2;
}

void C3DCameraSetMaximumExposure(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 420) = a2;
}

void C3DCameraSetMinimumExposure(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 416) = a2;
}

double C3DCameraGetOrthographicScale(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 112);
}

void C3DCameraSetSaturation(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetSaturation_block_invoke;
  v12[3] = &__block_descriptor_tmp_8_0;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

uint64_t C3DCameraGetUsesOrthographicProjection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_BYTE *)(a1 + 64) & 1;
}

void C3DCameraSetVignettingIntensity(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetVignettingIntensity_block_invoke;
  v12[3] = &__block_descriptor_tmp_9_0;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetVignettingPower(void *a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  float v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __C3DCameraSetVignettingPower_block_invoke;
  v12[3] = &__block_descriptor_tmp_10_0;
  v12[4] = a1;
  v13 = a2;
  __invalidatePassIfNeeded(a1, (uint64_t)v12);
}

void C3DCameraSetWantsExposureAdaptation(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 4;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a1 + 312) & 0xFB | v12;
}

void C3DCameraSetWhitePoint(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 384) = a2;
}

double C3DCameraGetXFov(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 272);
}

double C3DCameraGetYFov(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 280);
}

double C3DCameraGetZFar(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 80);
}

double C3DCameraGetZNear(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 72);
}

void C3DCameraSetFocalLength(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 292) = a2;
  _updateFov(a1);
}

float _updateFov(uint64_t a1)
{
  long double v2;
  float result;

  v2 = atan(*(float *)(a1 + 300) * 0.5 / *(float *)(a1 + 292));
  *(float *)&v2 = v2 + v2;
  result = *(float *)&v2 / 3.14159265 * 180.0;
  *(float *)(a1 + 120) = result;
  *(_BYTE *)(a1 + 64) &= ~0x10u;
  return result;
}

float C3DCameraSetFov(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  double v13;
  float result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 120) = a2;
  *(_BYTE *)(a1 + 64) &= ~0x10u;
  v12 = a2 / 180.0 * 3.14159265;
  v13 = *(float *)(a1 + 300) * 0.5;
  result = v13 / tanf(v12 * 0.5);
  *(float *)(a1 + 292) = result;
  return result;
}

double C3DCameraSetAspectRatio(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = a2;
  *(double *)(a1 + 128) = a2;
  *(_BYTE *)(a1 + 64) &= ~0x10u;
  return result;
}

void C3DCameraSetFocusDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 288) = a2;
}

void C3DCameraSetLensShift(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 88) = a2;
}

void C3DCameraSetPostProjectionTransformTranslation(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 96) = a2;
}

void C3DCameraSetPostProjectionTransformScale(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 104) = a2;
}

float C3DCameraGetAperture(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 300) / *(float *)(a1 + 296);
}

void C3DCameraSetFStop(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 296) = a2;
}

void C3DCameraSetBladeCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 304) = a2;
}

void C3DCameraSetDofSampleCount(_DWORD *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  uint64_t SharedInstance;
  const void *v14;
  void *values;

  values = a1;
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a1[77] != a2)
  {
    a1[77] = a2;
    v12 = CFDictionaryCreate(0, (const void **)kC3DCameraKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    v14 = (const void *)C3DGetScene(values);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v14, v12, 1u);
    CFRelease(v12);
  }
}

float C3DCameraSetSensorSize(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 0.0001;
  if (a2 >= 0.0001)
    v12 = a2;
  *(float *)(a1 + 300) = v12;
  *(_BYTE *)(a1 + 64) &= ~0x10u;
  v13 = *(float *)(a1 + 120) / 180.0 * 3.14159265;
  result = v12 * 0.5 / tanf(v13 * 0.5);
  *(float *)(a1 + 292) = result;
  return result;
}

void C3DCameraSetFovHorizontal(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 32;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xDF | v12;
}

uint64_t C3DCameraGetLetterboxMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 312) >> 3) & 1;
}

void C3DCameraSetLetterboxMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 8;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a1 + 312) & 0xF7 | v12;
  if (a2)
    v13 = 64;
  else
    v13 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xAF | v13;
}

void C3DCameraGetEffectiveFovForAspectRatio(uint64_t a1, float *a2, float *a3, float a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  long double v21;
  double v22;
  float v23;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(double *)(a1 + 272);
  v17 = *(double *)(a1 + 280);
  if (v16 == 0.0)
  {
    v19 = v17;
    if (v17 == 0.0)
      v19 = 60.0;
    *a2 = v19 * a4;
  }
  else if (v17 == 0.0)
  {
    v18 = v16;
    *a2 = v18;
    v19 = v16 / a4;
  }
  else
  {
    v20 = tan(v16 / 180.0 * 3.14159265);
    v21 = v20 / tan(v17 / 180.0 * 3.14159265);
    v22 = a4;
    if (v21 <= a4)
      v16 = v17 * v22;
    else
      v17 = v16 / v22;
    v23 = v16;
    *a2 = v23;
    v19 = v17;
  }
  *a3 = v19;
}

void C3DCameraSetOrthographicScale(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 112) = a2;
  *(_BYTE *)(a1 + 64) &= ~8u;
}

void C3DCameraSetUsesOrthographicProjection(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xF6 | a2;
}

void C3DCameraSetXFov(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 272) = a2;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xE7 | 0x10;
}

void C3DCameraSetYFov(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 280) = a2;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xE7 | 0x10;
}

void C3DCameraSetZFar(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 64) &= ~8u;
}

void C3DProjectionInfosSetZFar(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DProjectionInfosSetZFar_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 16) = a2;
  *(_BYTE *)a1 &= ~8u;
}

void C3DCameraSetZNear(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v13[16];

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 == 0.0 && (*(_BYTE *)(a1 + 64) & 1) == 0)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1DCCB8000, v12, OS_LOG_TYPE_INFO, "Info: invalid zNear value (0) set to camera", v13, 2u);
    }
  }
  *(double *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 64) &= ~8u;
}

void C3DProjectionInfosSetZNear(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DProjectionInfosSetZFar_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 8) = a2;
  *(_BYTE *)a1 &= ~8u;
}

double C3DCameraGetFrontDirection()
{
  return 0.0;
}

void C3DCameraSetTechnique(_QWORD *a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  const __CFDictionary *v14;
  uint64_t SharedInstance;
  const void *v16;
  void *values;

  values = a1;
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCameraNeedsPostProcess_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (CFTypeRef)a1[67];
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      a1[67] = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    a1[67] = v13;
    v14 = CFDictionaryCreate(0, (const void **)kC3DCameraKey, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    v16 = (const void *)C3DGetScene(values);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v16, v14, 1u);
    CFRelease(v14);
  }
}

double C3DProjectionInfosGetXFov(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DProjectionInfosSetZFar_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 208);
}

double C3DProjectionInfosGetYFov(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DProjectionInfosSetZFar_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 216);
}

double C3DProjectionInfosGetEffectiveFov(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DProjectionInfosSetZFar_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)a1 & 0x10) == 0)
    return *(float *)(a1 + 56);
  v11 = 208;
  if ((*(_BYTE *)a1 & 0x20) == 0)
    v11 = 216;
  return *(double *)(a1 + v11);
}

uint64_t C3DProjectionInfosUnproject(uint64_t a1, uint64_t a2, int a3, char a4, _OWORD *a5, __n128 a6)
{
  uint64_t v8;
  char v11;
  float v13;
  float v14;
  __int128 v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float32x2_t v22;
  float *v23;
  float v29;
  uint64_t v30;
  __int128 v31;
  float *v32;
  float v33;
  float v34;
  __n128 v35;
  float v36;
  char v37;
  float v38;
  __int128 v39;
  float32x4_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v52;
  __int128 v53;
  uint8_t v54;
  _BYTE v55[15];
  __n128 v56;
  simd_float4x4 v57;
  simd_float4x4 v58;

  LODWORD(v8) = a3;
  v56 = a6;
  if ((a4 & 8) != 0 || (v11 = *(_BYTE *)a1, (*(_BYTE *)a1 & 0x19) != 0))
  {
    v57 = *(simd_float4x4 *)C3DProjectionInfosGetMatrix((char *)a1, (uint64_t)&v56, a4);
    v58 = __invert_f4(v57);
    v49 = (float32x4_t)v58.columns[1];
    v50 = (float32x4_t)v58.columns[0];
    v47 = (float32x4_t)v58.columns[3];
    v48 = (float32x4_t)v58.columns[2];
    if (v56.n128_f32[2] == 0.0 || v56.n128_f32[3] == 0.0)
    {
      v42 = scn_default_log();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        C3DProjectionInfosUnproject_cold_2(v42, v43, v44);
      return 0;
    }
    v30 = 1;
    if (!(_DWORD)v8)
      return v30;
    v8 = v8;
    v32 = (float *)(a2 + 8);
    LODWORD(v31) = 1.0;
    while (1)
    {
      v34 = *(v32 - 2);
      v33 = *(v32 - 1);
      v35 = v56;
      if ((a4 & 8) != 0)
      {
        v52 = v31;
        v37 = C3DWasLinkedBeforeMajorOSYear2021();
        v36 = *v32;
        if ((v37 & 1) == 0)
        {
          v38 = 1.0 - v36;
          v31 = v52;
          goto LABEL_22;
        }
        v31 = v52;
      }
      else
      {
        v36 = *v32;
      }
      v38 = (float)(v36 * 2.0) + -1.0;
LABEL_22:
      HIDWORD(v39) = v47.i32[3];
      v40 = vaddq_f32(v47, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v49, (float)((float)((float)(v33 - v35.n128_f32[1]) + (float)(v33 - v35.n128_f32[1])) / v35.n128_f32[3])+ -1.0), v50, (float)((float)((float)(v34 - v35.n128_f32[0]) + (float)(v34 - v35.n128_f32[0])) / v35.n128_f32[2])+ -1.0), v48, v38));
      if (v40.f32[3] == 0.0)
      {
        if ((C3DProjectionInfosUnproject_done & 1) == 0)
        {
          v46 = v40;
          v53 = v31;
          C3DProjectionInfosUnproject_done = 1;
          v41 = scn_default_log();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
            C3DProjectionInfosUnproject_cold_1(&v54, v55, v41);
          v31 = v53;
          v40 = v46;
        }
      }
      else
      {
        *(float *)&v31 = 1.0 / v40.f32[3];
      }
      *(float32x2_t *)&v39 = vmul_n_f32(*(float32x2_t *)v40.f32, *(float *)&v31);
      DWORD2(v39) = vmuls_lane_f32(*(float *)&v31, v40, 2);
      *a5++ = v39;
      v32 += 4;
      if (!--v8)
        return 1;
    }
  }
  v13 = *(float *)(a1 + 56) / 180.0 * 3.14159265;
  v51 = (float32x4_t)a6;
  v14 = tanf(v13 * 0.5);
  v16 = vdivq_f32(v51, (float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3));
  if ((v11 & 0x20) != 0)
    v16.f32[0] = v14;
  else
    v16.f32[0] = v16.f32[2] * v14;
  if ((v11 & 0x20) != 0)
    v14 = v14 / v16.f32[2];
  if ((_DWORD)v8)
  {
    v16.f32[1] = v14;
    v17 = *(double *)(a1 + 8);
    v18 = *(double *)(a1 + 16);
    v19 = v17 * v18;
    v20 = v17 - v18;
    v21 = v8;
    v22 = (float32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
    v23 = (float *)(a2 + 8);
    __asm { FMOV            V5.2S, #-1.0 }
    do
    {
      v29 = v19 / (float)(v18 + (float)(*v23 * v20));
      *(float32x2_t *)&v15 = vsub_f32(*(float32x2_t *)(v23 - 2), *(float32x2_t *)v51.f32);
      *(float32x2_t *)&v15 = vmul_n_f32(vmul_f32(*(float32x2_t *)v16.f32, vadd_f32(vdiv_f32(vadd_f32(*(float32x2_t *)&v15, *(float32x2_t *)&v15), v22), _D5)), v29);
      *((float *)&v15 + 2) = -v29;
      *a5++ = v15;
      v23 += 4;
      --v21;
    }
    while (v21);
  }
  return 1;
}

void _C3DCameraCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  C3DEntityCFFinalize((uint64_t)a1);
  v2 = (const void *)a1[65];
  if (v2)
  {
    CFRelease(v2);
    a1[65] = 0;
  }
  v3 = (const void *)a1[67];
  if (v3)
  {
    CFRelease(v3);
    a1[67] = 0;
  }
  v4 = (const void *)a1[68];
  if (v4)
  {
    CFRelease(v4);
    a1[68] = 0;
  }
}

CFStringRef _C3DCameraCFCopyDebugDescription(_BYTE *cf)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  const __CFAllocator *v7;
  uint64_t v8;
  const char *v9;
  const __CFAllocator *v11;
  uint64_t Name;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = cf[64];
  if ((v2 & 8) != 0)
  {
    v15 = *((_OWORD *)cf + 15);
    v16 = *((_OWORD *)cf + 16);
    v13 = *((_OWORD *)cf + 13);
    v14 = *((_OWORD *)cf + 14);
    v11 = CFGetAllocator(cf);
    Name = C3DEntityGetName((uint64_t)cf);
    return CFStringCreateWithFormat(v11, 0, CFSTR("<C3DCamera:%p \"%@\" custom, [%.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f]>"),
             cf,
             Name,
             *(float *)&v13,
             *((float *)&v13 + 1),
             *((float *)&v13 + 2),
             *((float *)&v13 + 3),
             *(float *)&v14,
             *((float *)&v14 + 1),
             *((float *)&v14 + 2),
             *((float *)&v14 + 3),
             *(float *)&v15,
             *((float *)&v15 + 1),
             *((float *)&v15 + 2),
             *((float *)&v15 + 3),
             *(float *)&v16,
             *((float *)&v16 + 1),
             *((float *)&v16 + 2),
             *((float *)&v16 + 3));
  }
  else
  {
    v3 = *((_QWORD *)cf + 9);
    v4 = *((_QWORD *)cf + 10);
    v5 = *((_QWORD *)cf + 14);
    v6 = *((float *)cf + 30);
    v7 = CFGetAllocator(cf);
    v8 = C3DEntityGetName((uint64_t)cf);
    if ((v2 & 1) != 0)
    {
      return CFStringCreateWithFormat(v7, 0, CFSTR("<C3DCamera:%p \"%@\" ortho, near:%.3f far:%.3f scale: %.3f>"), cf, v8, v3, v4, v5);
    }
    else
    {
      v9 = "horizontal";
      if ((v2 & 0x20) == 0)
        v9 = "vertical";
      return CFStringCreateWithFormat(v7, 0, CFSTR("<C3DCamera:%p \"%@\" persp, near:%.3f far:%.3f %s-fov:%.3f>"), cf, v8, v3, v4, v9, v6);
    }
  }
}

float _C3DCameraSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  float result;
  _QWORD v7[7];

  if ((void *)(a1 + 448) == __dst)
  {
    C3DCameraSetDepthOfFieldIntensity((float *)a1, *__src);
  }
  else if ((void *)(a1 + 472) == __dst)
  {
    C3DCameraSetMotionBlurIntensity((float *)a1, *__src);
  }
  else if ((void *)(a1 + 120) == __dst)
  {
    return C3DCameraSetFov(a1, *__src);
  }
  else if ((void *)(a1 + 272) == __dst)
  {
    C3DCameraSetXFov(a1, *(double *)__src);
  }
  else if ((void *)(a1 + 280) == __dst)
  {
    C3DCameraSetYFov(a1, *(double *)__src);
  }
  else
  {
    if (a1 + 448 > (unint64_t)__dst || a1 + 480 < (unint64_t)__dst)
    {
      memcpy(__dst, __src, __n);
    }
    else
    {
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 0x40000000;
      v7[2] = ___C3DCameraSetValue_block_invoke;
      v7[3] = &__block_descriptor_tmp_118;
      v7[4] = __dst;
      v7[5] = __src;
      v7[6] = __n;
      __invalidatePassIfNeeded((void *)a1, (uint64_t)v7);
    }
    if ((void *)(a1 + 300) == __dst || (void *)(a1 + 292) == __dst)
    {
      *(_BYTE *)(a1 + 64) &= ~0x10u;
      return _updateFov(a1);
    }
  }
  return result;
}

uint64_t _C3DCameraInitWithPropertyList(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFNumber *Value;
  const __CFNumber *v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  const __CFNumber *v31;
  const __CFNumber *v32;
  const __CFNumber *v33;
  const __CFNumber *v34;
  const __CFNumber *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  const __CFNumber *v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFNumber *v51;
  NSObject *v52;
  NSObject *v53;
  float v55[4];

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DEntityInitWithPropertyList(a1, a2);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("ortho"));
    if (Value)
    {
      v55[0] = 0.0;
      CFNumberGetValue(Value, kCFNumberIntType, v55);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFE | (LODWORD(v55[0]) != 0);
    }
    v14 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("letterbox"));
    if (v14)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v14, kCFNumberIntType, v55);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xBF | ((LODWORD(v55[0]) != 0) << 6);
    }
    v15 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fovHorizontal"));
    if (v15)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v15, kCFNumberIntType, v55);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xDF | (32 * (LODWORD(v55[0]) != 0));
    }
    v16 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("customProj"));
    if (v16)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v16, kCFNumberIntType, v55);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xF7 | (8 * (LODWORD(v55[0]) != 0));
    }
    v17 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("autoZRange"));
    if (v17)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v17, kCFNumberIntType, v55);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | (2 * (LODWORD(v55[0]) != 0));
    }
    v18 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("xfov"));
    if (v18)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v18, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)v55;
    }
    v19 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("yfov"));
    if (v19)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v19, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 280) = *(_QWORD *)v55;
    }
    v20 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("xMag"));
    if (v20)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v20, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v55;
    }
    v21 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("znear"));
    if (v21)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v21, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)v55;
    }
    v22 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("zfar"));
    if (v22)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v22, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)v55;
    }
    v23 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("aspectRatio"));
    if (v23)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v23, kCFNumberDoubleType, v55);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)v55;
    }
    v24 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("focusDistance"));
    if (v24)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v24, kCFNumberFloatType, v55);
      *(float *)(a1 + 288) = v55[0];
    }
    v25 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fstop"));
    if (v25)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v25, kCFNumberFloatType, v55);
      *(float *)(a1 + 296) = v55[0];
    }
    v26 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bladeCount"));
    if (v26)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v26, kCFNumberIntType, v55);
      *(float *)(a1 + 304) = v55[0];
    }
    v27 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("dofSampleCount"));
    if (v27)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v27, kCFNumberIntType, v55);
      *(float *)(a1 + 308) = v55[0];
    }
    v28 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("sensorSize"));
    if (v28)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v28, kCFNumberFloatType, v55);
      *(float *)(a1 + 300) = v55[0];
    }
    v29 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("dofIntensity"));
    if (v29)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v29, kCFNumberFloatType, v55);
      *(float *)(a1 + 448) = v55[0];
    }
    v30 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("category"));
    if (v30)
    {
      *(_QWORD *)v55 = 0;
      CFNumberGetValue(v30, kCFNumberNSIntegerType, v55);
      *(_QWORD *)(a1 + 528) = *(_QWORD *)v55;
    }
    v31 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("whitePoint"));
    if (v31)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v31, kCFNumberFloatType, v55);
      *(float *)(a1 + 384) = v55[0];
    }
    v32 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("averageGray"));
    if (v32)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v32, kCFNumberFloatType, v55);
      *(float *)(a1 + 388) = v55[0];
    }
    v33 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("exposureAdaptationDuration"));
    if (v33)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v33, kCFNumberFloatType, v55);
      *(float *)(a1 + 396) = v55[0];
    }
    v34 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("exposureAdaptationBrighteningSpeedFactor"));
    if (v34)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v34, kCFNumberFloatType, v55);
      *(float *)(a1 + 400) = v55[0];
    }
    v35 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("exposureAdaptationDarkeningSpeedFactor"));
    if (v35)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v35, kCFNumberFloatType, v55);
      *(float *)(a1 + 404) = v55[0];
    }
    v36 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("minimumExposure"));
    if (v36)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v36, kCFNumberFloatType, v55);
      *(float *)(a1 + 416) = v55[0];
    }
    v37 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("maximumExposure"));
    if (v37)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v37, kCFNumberFloatType, v55);
      *(float *)(a1 + 420) = v55[0];
    }
    v38 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bloomIntensity"));
    if (v38)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v38, kCFNumberFloatType, v55);
      *(float *)(a1 + 424) = v55[0];
    }
    v39 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bloomThreshold"));
    if (v39)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v39, kCFNumberFloatType, v55);
      *(float *)(a1 + 428) = v55[0];
    }
    v40 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bloomIteration"));
    if (v40)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v40, kCFNumberIntType, v55);
      *(float *)(a1 + 432) = v55[0];
    }
    v41 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bloomIterationSpread"));
    if (v41)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v41, kCFNumberFloatType, v55);
      *(_DWORD *)(a1 + 432) = (int)v55[0];
    }
    v42 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("bloomBlurRadius"));
    if (v42)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v42, kCFNumberFloatType, v55);
      *(float *)(a1 + 440) = v55[0];
    }
    v43 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("motionBlurIntensity"));
    if (v43)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v43, kCFNumberFloatType, v55);
      *(float *)(a1 + 472) = v55[0];
    }
    v44 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionIntensity"));
    if (v44)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v44, kCFNumberFloatType, v55);
      *(float *)(a1 + 492) = v55[0];
    }
    v45 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionRadius"));
    if (v45)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v45, kCFNumberFloatType, v55);
      *(float *)(a1 + 496) = v55[0];
    }
    v46 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionBias"));
    if (v46)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v46, kCFNumberFloatType, v55);
      *(float *)(a1 + 500) = v55[0];
    }
    v47 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionDepthThreshold"));
    if (v47)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v47, kCFNumberFloatType, v55);
      *(float *)(a1 + 504) = v55[0];
    }
    v48 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionNormalThreshold"));
    if (v48)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v48, kCFNumberFloatType, v55);
      *(float *)(a1 + 508) = v55[0];
    }
    v49 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionSampleCount"));
    if (v49)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v49, kCFNumberIntType, v55);
      *(float *)(a1 + 512) = v55[0];
    }
    v50 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("screenSpaceAmbientOcclusionDownSample"));
    if (v50)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v50, kCFNumberIntType, v55);
      *(float *)(a1 + 516) = v55[0];
    }
    *(_BYTE *)(a1 + 64) |= 0x10u;
    v51 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fov"));
    if (v51)
    {
      v55[0] = 0.0;
      CFNumberGetValue(v51, kCFNumberFloatType, v55);
      C3DCameraSetFov(a1, v55[0]);
    }
    if (*(double *)(a1 + 72) == 0.0 && (*(_BYTE *)(a1 + 64) & 1) == 0)
    {
      v52 = scn_default_log();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        LOWORD(v55[0]) = 0;
        _os_log_impl(&dword_1DCCB8000, v52, OS_LOG_TYPE_INFO, "Info: loaded camera has an invalid zNear value (0)", (uint8_t *)v55, 2u);
      }
    }
  }
  else
  {
    v53 = scn_default_log();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      _C3DCameraInitWithPropertyList_cold_1(v53);
  }
  return v12;
}

__CFDictionary *_C3DCameraCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  const __CFNumber *Value;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  uint64_t valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (v14)
  {
    LODWORD(valuePtr) = *(_BYTE *)(a1 + 64) & 1;
    v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("ortho"), v15);
    CFRelease(v15);
    LODWORD(valuePtr) = (*(unsigned __int8 *)(a1 + 312) >> 3) & 1;
    v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("letterbox"), v16);
    CFRelease(v16);
    LODWORD(valuePtr) = (*(unsigned __int8 *)(a1 + 64) >> 5) & 1;
    v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("fovHorizontal"), v17);
    CFRelease(v17);
    LODWORD(valuePtr) = (*(unsigned __int8 *)(a1 + 64) >> 1) & 1;
    v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("autoZRange"), v18);
    CFRelease(v18);
    LODWORD(valuePtr) = (*(unsigned __int8 *)(a1 + 64) >> 3) & 1;
    v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("customProj"), v19);
    CFRelease(v19);
    if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
    {
      if (*(double *)(a1 + 272) != 0.0)
      {
        valuePtr = *(_QWORD *)(a1 + 272);
        v23 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        CFDictionaryAddValue(v14, CFSTR("xfov"), v23);
        CFRelease(v23);
      }
      if (*(double *)(a1 + 280) != 0.0)
      {
        valuePtr = *(_QWORD *)(a1 + 280);
        v24 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        CFDictionaryAddValue(v14, CFSTR("yfov"), v24);
        CFRelease(v24);
      }
    }
    else
    {
      LODWORD(valuePtr) = *(_DWORD *)(a1 + 120);
      v20 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("fov"), v20);
      CFRelease(v20);
      LODWORD(valuePtr) = (*(unsigned __int8 *)(a1 + 64) >> 5) & 1;
      v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v14, CFSTR("fovHorizontal"), v21);
      CFRelease(v21);
      Value = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("sensorSize"));
      if (Value)
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
        *(_DWORD *)(a1 + 300) = valuePtr;
      }
    }
    valuePtr = *(_QWORD *)(a1 + 112);
    v25 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("xMag"), v25);
    CFRelease(v25);
    valuePtr = *(_QWORD *)(a1 + 72);
    v26 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("znear"), v26);
    CFRelease(v26);
    valuePtr = *(_QWORD *)(a1 + 80);
    v27 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("zfar"), v27);
    CFRelease(v27);
    valuePtr = *(_QWORD *)(a1 + 128);
    v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("aspectRatio"), v28);
    CFRelease(v28);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 296);
    v29 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("fstop"), v29);
    CFRelease(v29);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 304);
    v30 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("bladeCount"), v30);
    CFRelease(v30);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 308);
    v31 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("dofSampleCount"), v31);
    CFRelease(v31);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 288);
    v32 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("focusDistance"), v32);
    CFRelease(v32);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 448);
    v33 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("dofIntensity"), v33);
    CFRelease(v33);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 492);
    v34 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionIntensity"), v34);
    CFRelease(v34);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 496);
    v35 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionRadius"), v35);
    CFRelease(v35);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 500);
    v36 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionBias"), v36);
    CFRelease(v36);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 504);
    v37 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionDepthThreshold"), v37);
    CFRelease(v37);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 508);
    v38 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionNormalThreshold"), v38);
    CFRelease(v38);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 512);
    v39 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionSampleCount"), v39);
    CFRelease(v39);
    LODWORD(valuePtr) = *(_DWORD *)(a1 + 516);
    v40 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("screenSpaceAmbientOcclusionDownSample"), v40);
    CFRelease(v40);
    valuePtr = *(_QWORD *)(a1 + 528);
    v41 = CFNumberCreate(0, kCFNumberNSIntegerType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("category"), v41);
    CFRelease(v41);
  }
  return v14;
}

uint64_t _C3DCameraFinalizeDeserialization()
{
  return 1;
}

__CFArray *_C3DCameraCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFArray *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  __CFDictionary *v38;
  CFNumberRef v39;
  CFNumberRef v40;
  __CFDictionary *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  __CFArray *v45;
  const CFDictionaryValueCallBacks *v46;
  __CFDictionary *v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  __CFDictionary *v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  __CFDictionary *v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  __CFDictionary *v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  const CFDictionaryKeyCallBacks *v63;
  __CFDictionary *v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  __CFDictionary *v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  __CFDictionary *v72;
  CFNumberRef v73;
  CFNumberRef v74;
  CFNumberRef v75;
  const CFDictionaryKeyCallBacks *v76;
  const CFDictionaryValueCallBacks *v77;
  __CFDictionary *v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  __CFDictionary *v82;
  CFNumberRef v83;
  CFNumberRef v84;
  CFNumberRef v85;
  __CFDictionary *v86;
  CFNumberRef v87;
  CFNumberRef v88;
  CFNumberRef v89;
  __CFDictionary *v90;
  CFNumberRef v91;
  CFNumberRef v92;
  CFNumberRef v93;
  __CFDictionary *v94;
  CFNumberRef v95;
  CFNumberRef v96;
  CFNumberRef v97;
  const CFDictionaryKeyCallBacks *v98;
  const CFDictionaryValueCallBacks *v99;
  __CFDictionary *v100;
  CFNumberRef v101;
  CFNumberRef v102;
  CFNumberRef v103;
  __CFDictionary *v104;
  CFNumberRef v105;
  CFNumberRef v106;
  CFNumberRef v107;
  __CFDictionary *v108;
  CFNumberRef v109;
  CFNumberRef v110;
  CFNumberRef v111;
  __CFArray *v112;
  const CFDictionaryValueCallBacks *v113;
  __CFDictionary *v114;
  CFNumberRef v115;
  CFNumberRef v116;
  CFNumberRef v117;
  __CFDictionary *v118;
  CFNumberRef v119;
  CFNumberRef v120;
  CFNumberRef v121;
  __CFDictionary *v122;
  CFNumberRef v123;
  CFNumberRef v124;
  CFNumberRef v125;
  __CFArray *v126;
  const CFDictionaryKeyCallBacks *v127;
  const CFDictionaryValueCallBacks *v128;
  __CFDictionary *v129;
  CFNumberRef v130;
  CFNumberRef v131;
  CFNumberRef v132;
  const CFDictionaryKeyCallBacks *v133;
  const CFDictionaryValueCallBacks *v134;
  __CFDictionary *v135;
  uint64_t v136;
  CFNumberRef v137;
  CFNumberRef v138;
  CFNumberRef v139;
  __CFDictionary *v140;
  CFNumberRef v141;
  CFNumberRef v142;
  CFNumberRef v143;
  __CFArray *v144;
  const CFDictionaryKeyCallBacks *v145;
  const CFDictionaryValueCallBacks *v146;
  __CFDictionary *v147;
  CFNumberRef v148;
  CFNumberRef v149;
  CFNumberRef v150;
  __CFDictionary *v151;
  CFNumberRef v152;
  CFNumberRef v153;
  CFNumberRef v154;
  __CFArray *v155;
  const CFDictionaryValueCallBacks *v156;
  __CFDictionary *v157;
  CFNumberRef v158;
  CFNumberRef v159;
  CFNumberRef v160;
  __CFDictionary *v161;
  CFNumberRef v162;
  CFNumberRef v163;
  CFNumberRef v164;
  const CFDictionaryValueCallBacks *v165;
  __CFDictionary *v166;
  CFNumberRef v167;
  CFNumberRef v168;
  CFNumberRef v169;
  const CFDictionaryKeyCallBacks *v170;
  __CFDictionary *v171;
  CFNumberRef v172;
  CFNumberRef v173;
  CFNumberRef v174;
  __CFDictionary *v175;
  CFNumberRef v176;
  CFNumberRef v177;
  CFNumberRef v178;
  uint64_t v180;
  int v181;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 6;
  v180 = a1 + 128;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("aspectRatio"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  LOBYTE(v5) = *(_BYTE *)(a1 + 64);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  if ((v5 & 0x10) != 0)
  {
    v181 = 0;
    valuePtr = 6;
    v180 = a1 + 272;
    v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v36 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v37 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v9, CFSTR("name"), CFSTR("xfov"));
    CFDictionarySetValue(v9, CFSTR("type"), v35);
    CFDictionarySetValue(v9, CFSTR("address"), v37);
    CFDictionarySetValue(v9, CFSTR("semantic"), v36);
    CFArrayAppendValue(Mutable, v9);
    CFRelease(v36);
    CFRelease(v9);
    CFRelease(v37);
    CFRelease(v35);
    v38 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 6;
    v180 = a1 + 280;
    v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v39 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v40 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v38, CFSTR("name"), CFSTR("yfov"));
    CFDictionarySetValue(v38, CFSTR("type"), v30);
    CFDictionarySetValue(v38, CFSTR("address"), v40);
    CFDictionarySetValue(v38, CFSTR("semantic"), v39);
    v33 = Mutable;
    CFArrayAppendValue(Mutable, v38);
    CFRelease(v39);
    CFRelease(v38);
    v34 = v40;
  }
  else
  {
    v181 = 0;
    valuePtr = 1;
    v180 = a1 + 120;
    v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v12 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v9, CFSTR("name"), CFSTR("fieldOfView"));
    CFDictionarySetValue(v9, CFSTR("type"), v10);
    CFDictionarySetValue(v9, CFSTR("address"), v12);
    CFDictionarySetValue(v9, CFSTR("semantic"), v11);
    CFArrayAppendValue(Mutable, v9);
    CFRelease(v11);
    CFRelease(v9);
    CFRelease(v12);
    CFRelease(v10);
    v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 1;
    v180 = a1 + 300;
    v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v16 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v13, CFSTR("name"), CFSTR("sensorHeight"));
    CFDictionarySetValue(v13, CFSTR("type"), v14);
    CFDictionarySetValue(v13, CFSTR("address"), v16);
    CFDictionarySetValue(v13, CFSTR("semantic"), v15);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v15);
    CFRelease(v13);
    CFRelease(v16);
    CFRelease(v14);
    v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 1;
    v180 = a1 + 292;
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v20 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v17, CFSTR("name"), CFSTR("focalLength"));
    CFDictionarySetValue(v17, CFSTR("type"), v18);
    CFDictionarySetValue(v17, CFSTR("address"), v20);
    CFDictionarySetValue(v17, CFSTR("semantic"), v19);
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v19);
    CFRelease(v17);
    CFRelease(v20);
    CFRelease(v18);
    v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 8;
    v180 = a1 + 88;
    v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v24 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v21, CFSTR("name"), CFSTR("lensShift"));
    CFDictionarySetValue(v21, CFSTR("type"), v22);
    CFDictionarySetValue(v21, CFSTR("address"), v24);
    CFDictionarySetValue(v21, CFSTR("semantic"), v23);
    CFArrayAppendValue(Mutable, v21);
    CFRelease(v23);
    CFRelease(v21);
    CFRelease(v24);
    CFRelease(v22);
    v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 8;
    v180 = a1 + 96;
    v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v28 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v25, CFSTR("name"), CFSTR("postProjectionTransformTranslation"));
    CFDictionarySetValue(v25, CFSTR("type"), v26);
    CFDictionarySetValue(v25, CFSTR("address"), v28);
    CFDictionarySetValue(v25, CFSTR("semantic"), v27);
    CFArrayAppendValue(Mutable, v25);
    CFRelease(v27);
    CFRelease(v25);
    CFRelease(v28);
    CFRelease(v26);
    v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v181 = 0;
    valuePtr = 8;
    v180 = a1 + 104;
    v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
    v32 = CFNumberCreate(0, kCFNumberLongType, &v180);
    CFDictionarySetValue(v29, CFSTR("name"), CFSTR("postProjectionTransformScale"));
    CFDictionarySetValue(v29, CFSTR("type"), v30);
    CFDictionarySetValue(v29, CFSTR("address"), v32);
    CFDictionarySetValue(v29, CFSTR("semantic"), v31);
    v33 = Mutable;
    CFArrayAppendValue(Mutable, v29);
    CFRelease(v31);
    CFRelease(v29);
    v34 = v32;
  }
  CFRelease(v34);
  CFRelease(v30);
  v41 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 6;
  v180 = a1 + 112;
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v44 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v41, CFSTR("name"), CFSTR("orthoScale"));
  CFDictionarySetValue(v41, CFSTR("type"), v42);
  CFDictionarySetValue(v41, CFSTR("address"), v44);
  CFDictionarySetValue(v41, CFSTR("semantic"), v43);
  v45 = v33;
  CFArrayAppendValue(v33, v41);
  CFRelease(v43);
  CFRelease(v41);
  CFRelease(v44);
  CFRelease(v42);
  v46 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v47 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 6;
  v180 = a1 + 80;
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v50 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v47, CFSTR("name"), CFSTR("zfar"));
  CFDictionarySetValue(v47, CFSTR("type"), v48);
  CFDictionarySetValue(v47, CFSTR("address"), v50);
  CFDictionarySetValue(v47, CFSTR("semantic"), v49);
  CFArrayAppendValue(v45, v47);
  CFRelease(v49);
  CFRelease(v47);
  CFRelease(v50);
  CFRelease(v48);
  v51 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v46);
  v181 = 0;
  valuePtr = 6;
  v180 = a1 + 72;
  v52 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v54 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v51, CFSTR("name"), CFSTR("znear"));
  CFDictionarySetValue(v51, CFSTR("type"), v52);
  CFDictionarySetValue(v51, CFSTR("address"), v54);
  CFDictionarySetValue(v51, CFSTR("semantic"), v53);
  CFArrayAppendValue(v45, v51);
  CFRelease(v53);
  CFRelease(v51);
  CFRelease(v54);
  CFRelease(v52);
  v55 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v46);
  v181 = 0;
  valuePtr = 11;
  v180 = a1 + 144;
  v56 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v57 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v58 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v55, CFSTR("name"), CFSTR("matrix"));
  CFDictionarySetValue(v55, CFSTR("type"), v56);
  CFDictionarySetValue(v55, CFSTR("address"), v58);
  CFDictionarySetValue(v55, CFSTR("semantic"), v57);
  CFArrayAppendValue(v45, v55);
  CFRelease(v57);
  CFRelease(v55);
  CFRelease(v58);
  CFRelease(v56);
  v59 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v46);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 288;
  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v61 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v62 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v59, CFSTR("name"), CFSTR("focusDistance"));
  CFDictionarySetValue(v59, CFSTR("type"), v60);
  CFDictionarySetValue(v59, CFSTR("address"), v62);
  CFDictionarySetValue(v59, CFSTR("semantic"), v61);
  CFArrayAppendValue(v45, v59);
  CFRelease(v61);
  CFRelease(v59);
  CFRelease(v62);
  CFRelease(v60);
  v63 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v64 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v46);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 296;
  v65 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v67 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v64, CFSTR("name"), CFSTR("fStop"));
  CFDictionarySetValue(v64, CFSTR("type"), v65);
  CFDictionarySetValue(v64, CFSTR("address"), v67);
  CFDictionarySetValue(v64, CFSTR("semantic"), v66);
  CFArrayAppendValue(v45, v64);
  CFRelease(v66);
  CFRelease(v64);
  CFRelease(v67);
  CFRelease(v65);
  v68 = CFDictionaryCreateMutable(0, 4, v63, v46);
  v181 = 0;
  valuePtr = 2;
  v180 = a1 + 304;
  v69 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v70 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v71 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v68, CFSTR("name"), CFSTR("bladeCount"));
  CFDictionarySetValue(v68, CFSTR("type"), v69);
  CFDictionarySetValue(v68, CFSTR("address"), v71);
  CFDictionarySetValue(v68, CFSTR("semantic"), v70);
  CFArrayAppendValue(v45, v68);
  CFRelease(v70);
  CFRelease(v68);
  CFRelease(v71);
  CFRelease(v69);
  v72 = CFDictionaryCreateMutable(0, 4, v63, v46);
  v181 = 0;
  valuePtr = 2;
  v180 = a1 + 308;
  v73 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v74 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v75 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v72, CFSTR("name"), CFSTR("dofSampleCount"));
  CFDictionarySetValue(v72, CFSTR("type"), v73);
  CFDictionarySetValue(v72, CFSTR("address"), v75);
  CFDictionarySetValue(v72, CFSTR("semantic"), v74);
  CFArrayAppendValue(v45, v72);
  CFRelease(v74);
  CFRelease(v72);
  CFRelease(v75);
  CFRelease(v73);
  v76 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v77 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v78 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 448;
  v79 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v80 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v81 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v78, CFSTR("name"), CFSTR("dofIntensity"));
  CFDictionarySetValue(v78, CFSTR("type"), v79);
  CFDictionarySetValue(v78, CFSTR("address"), v81);
  CFDictionarySetValue(v78, CFSTR("semantic"), v80);
  CFArrayAppendValue(v45, v78);
  CFRelease(v80);
  CFRelease(v78);
  CFRelease(v81);
  CFRelease(v79);
  v82 = CFDictionaryCreateMutable(0, 4, v76, v77);
  v181 = 0;
  valuePtr = 2;
  v180 = a1 + 528;
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v84 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v85 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v82, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v82, CFSTR("type"), v83);
  CFDictionarySetValue(v82, CFSTR("address"), v85);
  CFDictionarySetValue(v82, CFSTR("semantic"), v84);
  CFArrayAppendValue(v45, v82);
  CFRelease(v84);
  CFRelease(v82);
  CFRelease(v85);
  CFRelease(v83);
  v86 = CFDictionaryCreateMutable(0, 4, v76, v77);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 384;
  v87 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v88 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v89 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v86, CFSTR("name"), CFSTR("whitePoint"));
  CFDictionarySetValue(v86, CFSTR("type"), v87);
  CFDictionarySetValue(v86, CFSTR("address"), v89);
  CFDictionarySetValue(v86, CFSTR("semantic"), v88);
  CFArrayAppendValue(v45, v86);
  CFRelease(v88);
  CFRelease(v86);
  CFRelease(v89);
  CFRelease(v87);
  v90 = CFDictionaryCreateMutable(0, 4, v76, v77);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 388;
  v91 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v92 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v93 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v90, CFSTR("name"), CFSTR("averageGray"));
  CFDictionarySetValue(v90, CFSTR("type"), v91);
  CFDictionarySetValue(v90, CFSTR("address"), v93);
  CFDictionarySetValue(v90, CFSTR("semantic"), v92);
  CFArrayAppendValue(v45, v90);
  CFRelease(v92);
  CFRelease(v90);
  CFRelease(v93);
  CFRelease(v91);
  v94 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v77);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 396;
  v95 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v96 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v97 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v94, CFSTR("name"), CFSTR("exposureAdaptationDuration"));
  CFDictionarySetValue(v94, CFSTR("type"), v95);
  CFDictionarySetValue(v94, CFSTR("address"), v97);
  CFDictionarySetValue(v94, CFSTR("semantic"), v96);
  CFArrayAppendValue(v45, v94);
  CFRelease(v96);
  CFRelease(v94);
  CFRelease(v97);
  CFRelease(v95);
  v98 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v99 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v100 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 404;
  v101 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v102 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v103 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v100, CFSTR("name"), CFSTR("exposureAdaptationDarkeningSpeedFactor"));
  CFDictionarySetValue(v100, CFSTR("type"), v101);
  CFDictionarySetValue(v100, CFSTR("address"), v103);
  CFDictionarySetValue(v100, CFSTR("semantic"), v102);
  CFArrayAppendValue(v45, v100);
  CFRelease(v102);
  CFRelease(v100);
  CFRelease(v103);
  CFRelease(v101);
  v104 = CFDictionaryCreateMutable(0, 4, v98, v99);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 400;
  v105 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v106 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v107 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v104, CFSTR("name"), CFSTR("exposureAdaptationBrighteningSpeedFactor"));
  CFDictionarySetValue(v104, CFSTR("type"), v105);
  CFDictionarySetValue(v104, CFSTR("address"), v107);
  CFDictionarySetValue(v104, CFSTR("semantic"), v106);
  CFArrayAppendValue(v45, v104);
  CFRelease(v106);
  CFRelease(v104);
  CFRelease(v107);
  CFRelease(v105);
  v108 = CFDictionaryCreateMutable(0, 4, v98, v99);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 416;
  v109 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v110 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v111 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v108, CFSTR("name"), CFSTR("minimumExposure"));
  CFDictionarySetValue(v108, CFSTR("type"), v109);
  CFDictionarySetValue(v108, CFSTR("address"), v111);
  CFDictionarySetValue(v108, CFSTR("semantic"), v110);
  v112 = v45;
  CFArrayAppendValue(v45, v108);
  CFRelease(v110);
  CFRelease(v108);
  CFRelease(v111);
  CFRelease(v109);
  v113 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v114 = CFDictionaryCreateMutable(0, 4, v98, MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 420;
  v115 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v116 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v117 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v114, CFSTR("name"), CFSTR("maximumExposure"));
  CFDictionarySetValue(v114, CFSTR("type"), v115);
  CFDictionarySetValue(v114, CFSTR("address"), v117);
  CFDictionarySetValue(v114, CFSTR("semantic"), v116);
  CFArrayAppendValue(v112, v114);
  CFRelease(v116);
  CFRelease(v114);
  CFRelease(v117);
  CFRelease(v115);
  v118 = CFDictionaryCreateMutable(0, 4, v98, v113);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 424;
  v119 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v120 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v121 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v118, CFSTR("name"), CFSTR("bloomIntensity"));
  CFDictionarySetValue(v118, CFSTR("type"), v119);
  CFDictionarySetValue(v118, CFSTR("address"), v121);
  CFDictionarySetValue(v118, CFSTR("semantic"), v120);
  CFArrayAppendValue(v112, v118);
  CFRelease(v120);
  CFRelease(v118);
  CFRelease(v121);
  CFRelease(v119);
  v122 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v113);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 428;
  v123 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v124 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v125 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v122, CFSTR("name"), CFSTR("bloomThreshold"));
  CFDictionarySetValue(v122, CFSTR("type"), v123);
  CFDictionarySetValue(v122, CFSTR("address"), v125);
  CFDictionarySetValue(v122, CFSTR("semantic"), v124);
  v126 = v112;
  CFArrayAppendValue(v112, v122);
  CFRelease(v124);
  CFRelease(v122);
  CFRelease(v125);
  CFRelease(v123);
  v127 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v128 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v129 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 2;
  v180 = a1 + 432;
  v130 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v131 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v132 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v129, CFSTR("name"), CFSTR("bloomIteration"));
  CFDictionarySetValue(v129, CFSTR("type"), v130);
  CFDictionarySetValue(v129, CFSTR("address"), v132);
  CFDictionarySetValue(v129, CFSTR("semantic"), v131);
  CFArrayAppendValue(v126, v129);
  CFRelease(v131);
  CFRelease(v129);
  CFRelease(v132);
  CFRelease(v130);
  v133 = v127;
  v134 = v128;
  v135 = CFDictionaryCreateMutable(0, 4, v133, v128);
  v181 = 0;
  valuePtr = 1;
  v136 = a1;
  v180 = a1 + 436;
  v137 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v138 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v139 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v135, CFSTR("name"), CFSTR("bloomIterationSpread"));
  CFDictionarySetValue(v135, CFSTR("type"), v137);
  CFDictionarySetValue(v135, CFSTR("address"), v139);
  CFDictionarySetValue(v135, CFSTR("semantic"), v138);
  CFArrayAppendValue(v126, v135);
  CFRelease(v138);
  CFRelease(v135);
  CFRelease(v139);
  CFRelease(v137);
  v140 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v134);
  v181 = 0;
  valuePtr = 1;
  v180 = a1 + 472;
  v141 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v142 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v143 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v140, CFSTR("name"), CFSTR("motionBlurIntensity"));
  CFDictionarySetValue(v140, CFSTR("type"), v141);
  CFDictionarySetValue(v140, CFSTR("address"), v143);
  CFDictionarySetValue(v140, CFSTR("semantic"), v142);
  v144 = v126;
  CFArrayAppendValue(v126, v140);
  CFRelease(v142);
  CFRelease(v140);
  CFRelease(v143);
  CFRelease(v141);
  v145 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v146 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v147 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = v136 + 492;
  v148 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v149 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v150 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v147, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionIntensity"));
  CFDictionarySetValue(v147, CFSTR("type"), v148);
  CFDictionarySetValue(v147, CFSTR("address"), v150);
  CFDictionarySetValue(v147, CFSTR("semantic"), v149);
  CFArrayAppendValue(v144, v147);
  CFRelease(v149);
  CFRelease(v147);
  CFRelease(v150);
  CFRelease(v148);
  v151 = CFDictionaryCreateMutable(0, 4, v145, v146);
  v181 = 0;
  valuePtr = 1;
  v180 = v136 + 496;
  v152 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v153 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v154 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v151, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionRadius"));
  CFDictionarySetValue(v151, CFSTR("type"), v152);
  CFDictionarySetValue(v151, CFSTR("address"), v154);
  CFDictionarySetValue(v151, CFSTR("semantic"), v153);
  v155 = v144;
  CFArrayAppendValue(v144, v151);
  CFRelease(v153);
  CFRelease(v151);
  CFRelease(v154);
  CFRelease(v152);
  v156 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v157 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = v136 + 500;
  v158 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v159 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v160 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v157, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionBias"));
  CFDictionarySetValue(v157, CFSTR("type"), v158);
  CFDictionarySetValue(v157, CFSTR("address"), v160);
  CFDictionarySetValue(v157, CFSTR("semantic"), v159);
  CFArrayAppendValue(v144, v157);
  CFRelease(v159);
  CFRelease(v157);
  CFRelease(v160);
  CFRelease(v158);
  v161 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v156);
  v181 = 0;
  valuePtr = 1;
  v180 = v136 + 504;
  v162 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v163 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v164 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v161, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionDepthThreshold"));
  CFDictionarySetValue(v161, CFSTR("type"), v162);
  CFDictionarySetValue(v161, CFSTR("address"), v164);
  CFDictionarySetValue(v161, CFSTR("semantic"), v163);
  CFArrayAppendValue(v144, v161);
  CFRelease(v163);
  CFRelease(v161);
  CFRelease(v164);
  CFRelease(v162);
  v165 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v166 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 1;
  v180 = v136 + 508;
  v167 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v168 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v169 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v166, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionNormalThreshold"));
  CFDictionarySetValue(v166, CFSTR("type"), v167);
  CFDictionarySetValue(v166, CFSTR("address"), v169);
  CFDictionarySetValue(v166, CFSTR("semantic"), v168);
  CFArrayAppendValue(v144, v166);
  CFRelease(v168);
  CFRelease(v166);
  CFRelease(v169);
  CFRelease(v167);
  v170 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v171 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v165);
  v181 = 0;
  valuePtr = 2;
  v180 = v136 + 512;
  v172 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v173 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v174 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v171, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionSampleCount"));
  CFDictionarySetValue(v171, CFSTR("type"), v172);
  CFDictionarySetValue(v171, CFSTR("address"), v174);
  CFDictionarySetValue(v171, CFSTR("semantic"), v173);
  CFArrayAppendValue(v155, v171);
  CFRelease(v173);
  CFRelease(v171);
  CFRelease(v174);
  CFRelease(v172);
  v175 = CFDictionaryCreateMutable(0, 4, v170, MEMORY[0x1E0C9B3A0]);
  v181 = 0;
  valuePtr = 2;
  v180 = v136 + 516;
  v176 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v177 = CFNumberCreate(0, kCFNumberSInt32Type, &v181);
  v178 = CFNumberCreate(0, kCFNumberLongType, &v180);
  CFDictionarySetValue(v175, CFSTR("name"), CFSTR("screenSpaceAmbientOcclusionDownSample"));
  CFDictionarySetValue(v175, CFSTR("type"), v176);
  CFDictionarySetValue(v175, CFSTR("address"), v178);
  CFDictionarySetValue(v175, CFSTR("semantic"), v177);
  CFArrayAppendValue(v155, v175);
  CFRelease(v177);
  CFRelease(v175);
  CFRelease(v178);
  CFRelease(v176);
  return v155;
}

uint64_t _C3DCameraSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

void C3DNodeUpdateCullingSystemMembership(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    __UpdateCullingHandle(a1, v1);
}

float32x4_t C3DTransformBoundingBox(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t result;

  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = vmulq_f32(vaddq_f32(*a1, *a2), v5);
  v7 = vmulq_f32(vsubq_f32(*a2, *a1), v5);
  v8 = v7;
  v8.i32[3] = 0;
  v9 = a5[1];
  v10 = a5[2];
  v11 = vaddq_f32(a5[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v9, *(float32x2_t *)v6.f32, 1), *a5, v6.f32[0]), v10, v6, 2));
  v11.i32[3] = 1.0;
  v12 = (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), (int32x4_t)v8);
  v13 = (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v8, (int32x4_t)v8), (int32x4_t)v8);
  v8.i32[1] = v7.i32[0];
  v8.i32[2] = v7.i32[0];
  v14 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(*a5, v8)), vabsq_f32(vmulq_f32(v9, v12))), vabsq_f32(vmulq_f32(v10, v13)));
  *a3 = vsubq_f32(v11, v14);
  result = vaddq_f32(v11, v14);
  *a4 = result;
  return result;
}

uint64_t C3DNodeIsBoundingBoxFixed(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 220) >> 2) & 1;
}

void C3DNodeSetBoundingBox(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned int v5;
  __int128 v6;

  v5 = *(_DWORD *)(a1 + 220);
  if (a3 != 2 || (v5 & 4) == 0)
  {
    if (a2)
    {
      v6 = a2[1];
      *(_OWORD *)(a1 + 272) = *a2;
      *(_OWORD *)(a1 + 288) = v6;
    }
    else
    {
      __C3DComputeLocalBoundingBox(a1);
      v5 = *(_DWORD *)(a1 + 220);
    }
    if (a3 != 2)
    {
      v5 = v5 & 0xFFFFFFFB | (4 * (a3 == 1));
      *(_DWORD *)(a1 + 220) = v5;
    }
    if ((v5 & 4) != 0)
      *(_DWORD *)(a1 + 220) = v5 & 0xFFFFFFFC;
    C3DNodeBoundingBoxDidUpdate(a1);
  }
}

BOOL C3DNodeGetBoundingBoxOmittingFloor(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _BOOL8 v6;
  uint64_t Floor;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  void (*v14)(_QWORD *, uint64_t);
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;

  if ((C3DNodeIsHidden(a1) & 1) != 0)
    return 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  Floor = C3DNodeGetFloor(a1);
  LOBYTE(v8) = 0;
  if (!Floor)
  {
    v9 = *(_OWORD *)(a1 + 288);
    *a2 = *(_OWORD *)(a1 + 272);
    a2[1] = v9;
    v8 = vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)(a1 + 288))) >> 31;
  }
  v22 = v8;
  v10 = *(_QWORD *)(a1 + 72);
  if (v10)
  {
    v11 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v14 = __C3DNodeGetBoundingBoxOmittingFloor_block_invoke;
    v15 = &unk_1EA5A19B0;
    v16 = &v19;
    v17 = a3;
    v18 = a2;
    do
    {
      ((void (*)(_QWORD *, uint64_t, uint64_t))v14)(v13, v10, v11++);
      v10 = *(_QWORD *)(v10 + 80);
    }
    while (v10);
  }
  v6 = *((_BYTE *)v20 + 24) != 0;
  _Block_object_dispose(&v19, 8);
  return v6;
}

BOOL C3DNodeHasChildren(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72) != 0;
}

uint64_t __computeSubBox(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  unsigned int v3;
  uint64_t i;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;

  v2 = a1[18];
  *a2 = a1[17];
  a2[1] = v2;
  v3 = vminvq_u32((uint32x4_t)vcgezq_f32(a1[18])) >> 31;
  for (i = a1[4].i64[1]; i; i = *(_QWORD *)(i + 80))
  {
    v22 = 0u;
    v23 = 0u;
    if (__computeSubBox(i, &v22))
    {
      C3DNodeGetMatrix(i, (uint64_t)&v18);
      v6 = vaddq_f32(v21, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v19, *(float32x2_t *)v22.f32, 1), v18, v22.f32[0]), v20, v22, 2));
      v7 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(v18, v23.f32[0])), vabsq_f32(vmulq_lane_f32(v19, *(float32x2_t *)v23.f32, 1))), vabsq_f32(vmulq_laneq_f32(v20, v23, 2)));
      v8 = a2[1];
      v9 = vsubq_f32(v6, v7);
      v10 = vsubq_f32(*a2, v8);
      v9.i32[3] = 0;
      v10.i32[3] = 0;
      v11 = vminnmq_f32(v9, v10);
      v12 = vaddq_f32(v6, v7);
      v13 = vaddq_f32(*a2, v8);
      v12.i32[3] = 0;
      v13.i32[3] = 0;
      v14 = vmaxnmq_f32(v12, v13);
      v8.i64[0] = 0x3F0000003F000000;
      v8.i64[1] = 0x3F0000003F000000;
      v15 = vmulq_f32(vaddq_f32(v11, v14), v8);
      v15.i32[3] = 1.0;
      v16 = vmulq_f32(vsubq_f32(v14, v11), v8);
      v16.i32[3] = 0;
      *a2 = v15;
      a2[1] = v16;
      LOBYTE(v3) = 1;
    }
  }
  return v3 & 1;
}

uint64_t C3DNodeComputeHierarchicalBoundingBox(float32x4_t *a1, int a2, float32x4_t *a3)
{
  uint64_t result;
  float32x4_t *WorldMatrix;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t CullingSystem;
  float32x4_t v15;

  if ((a1[13].i16[7] & 0x380) == 0 && (v13 = a1[3].i64[0]) != 0 && (CullingSystem = C3DSceneGetCullingSystem(v13)) != 0)
  {
    *(__n128 *)a3 = C3DCullingSystemComputeHierarchicalAABB(CullingSystem, a1, a2);
    a3[1] = v15;
    return vminvq_u32((uint32x4_t)vcgezq_f32(v15)) >> 31;
  }
  else
  {
    result = __computeSubBox(a1, a3);
    if ((_DWORD)result)
    {
      if ((a2 & 1) == 0)
      {
        WorldMatrix = C3DNodeGetWorldMatrix(a1);
        v8 = WorldMatrix[1];
        v9 = WorldMatrix[2];
        v10 = vaddq_f32(WorldMatrix[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v8, *(float32x2_t *)a3->f32, 1), *WorldMatrix, COERCE_FLOAT(*a3)), v9, *a3, 2));
        v10.i32[3] = 1.0;
        v11 = a3[1];
        v11.i32[1] = v11.i32[0];
        v11.i32[2] = (__int32)a3[1];
        v12 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(*WorldMatrix, v11)), vabsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)a3[1].f32, 1), (int32x4_t)a3[1]), v8))), vabsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a3[1], (int32x4_t)a3[1]), (int32x4_t)a3[1]), v9)));
        *a3 = v10;
        a3[1] = v12;
        return 1;
      }
    }
  }
  return result;
}

uint64_t C3DNodeCopyNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *PivotMatrix;
  float Opacity;
  int IsHidden;
  __C3DGeometry *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *Copy;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  unsigned int v29;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v12;
  v13 = *(_OWORD *)(a1 + 128);
  v14 = *(_OWORD *)(a1 + 144);
  v15 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = v15;
  *(_OWORD *)(a2 + 128) = v13;
  *(_OWORD *)(a2 + 144) = v14;
  if (C3DNodeGetHasPivot(a1))
  {
    PivotMatrix = (__int128 *)C3DNodeGetPivotMatrix(a1);
    C3DNodeSetPivotMatrix((float32x4_t *)a2, PivotMatrix);
  }
  Opacity = C3DNodeGetOpacity(a1);
  C3DNodeSetOpacity(a2, Opacity);
  IsHidden = C3DNodeIsHidden(a1);
  C3DNodeSetHidden(a2, IsHidden);
  v19 = *(__C3DGeometry **)(a1 + 240);
  if (v19)
    C3DNodeSetGeometry(a2, v19);
  C3DEntityCopyTo(a1, (CFTypeRef *)a2);
  v20 = *(_DWORD *)(a2 + 220) & 0xFFFFFBFF | (((*(_DWORD *)(a1 + 220) >> 10) & 1) << 10);
  *(_DWORD *)(a2 + 220) = v20;
  v21 = v20 & 0xFFFEFFFF | ((HIWORD(*(_DWORD *)(a1 + 220)) & 1) << 16);
  *(_DWORD *)(a2 + 220) = v21;
  v22 = v21 & 0xFFFFBFFF | (((*(_DWORD *)(a1 + 220) >> 14) & 1) << 14);
  *(_DWORD *)(a2 + 220) = v22;
  v23 = v22 & 0xFFFFEFFF | (((*(_DWORD *)(a1 + 220) >> 12) & 1) << 12);
  *(_DWORD *)(a2 + 220) = v23;
  v24 = v23 & 0xFFFFFDFF | (((*(_DWORD *)(a1 + 220) >> 9) & 1) << 9);
  *(_DWORD *)(a2 + 220) = v24;
  Copy = *(_QWORD **)(a1 + 248);
  if (Copy)
  {
    Copy = (_QWORD *)C3DDeformerStackCreateCopy(Copy, a2);
    v24 = *(_DWORD *)(a2 + 220);
  }
  *(_QWORD *)(a2 + 248) = Copy;
  v26 = v24 & 0xFFFFDFFF | (((*(_DWORD *)(a1 + 220) >> 13) & 1) << 13);
  *(_DWORD *)(a2 + 220) = v26;
  v27 = v26 & 0xFFFFF7FF | (((*(_DWORD *)(a1 + 220) >> 11) & 1) << 11);
  *(_DWORD *)(a2 + 220) = v27;
  v28 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 288) = v28;
  v29 = v27 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 220) >> 2) & 1));
  *(_DWORD *)(a2 + 220) = v29;
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 208);
  *(_DWORD *)(a2 + 220) = v29 & 0xFFBFFFFF | (((*(_DWORD *)(a1 + 220) >> 22) & 1) << 22);
  return a2;
}

void C3DNodeSetPivotMatrix(float32x4_t *a1, __int128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (_OWORD *)a1[12].i64[0];
  if (!v12)
  {
    v12 = C3DMalloc(0x80uLL);
    a1[12].i64[0] = (uint64_t)v12;
  }
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[3];
  v12[2] = a2[2];
  v12[3] = v15;
  *v12 = v13;
  v12[1] = v14;
  v16 = a1[12].i64[0];
  if (v16)
    *(_DWORD *)(v16 + 124) = 0;
  __C3DNodeTransformDidChange(a1);
}

uint64_t C3DNodeGetPivotMatrix(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 192);
}

void C3DNodeSetHidden(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 200) != a2)
  {
    *(_BYTE *)(a1 + 200) = a2;
    __UpdateNodeVisibilityIfNeeded(a1, a2 ^ 1);
  }
}

uint64_t C3DNodeCreateCopy(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  void (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t v19;
  char v20;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DNodeCreate();
  C3DNodeCopyNode(a1, v12);
  if (a2)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v17 = __C3DNodeCreateCopy_block_invoke;
    v18 = &__block_descriptor_tmp_7_3;
    v20 = a2;
    v19 = v12;
    v13 = *(_QWORD *)(a1 + 72);
    if (v13)
    {
      v14 = 0;
      do
      {
        ((void (*)(_QWORD *, uint64_t, uint64_t))v17)(v16, v13, v14++);
        v13 = *(_QWORD *)(v13 + 80);
      }
      while (v13);
    }
  }
  return v12;
}

uint64_t C3DNodeAddChildNode(uint64_t a1, float32x4_t *cf)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (cf)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (!v4)
    {
      *(_QWORD *)(a1 + 72) = CFRetain(cf);
      return __FixupParent(a1, cf);
    }
    goto LABEL_7;
  }
  v5 = scn_default_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    C3DNodeAddChildNode_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    do
    {
LABEL_7:
      v13 = v4;
      v4 = *(_QWORD *)(v4 + 80);
    }
    while (v4);
    if (cf)
      *(_QWORD *)(v13 + 80) = CFRetain(cf);
  }
  return __FixupParent(a1, cf);
}

__C3DGeometry *__createSubdividedGeometryCopy(const void *a1, const void *a2, unsigned __int8 a3)
{
  uint64_t Copy;
  __C3DGeometry *v6;
  uint64_t Mesh;
  int SubdivisionSettings;
  __C3DMesh *CPUSubdividedC3DMesh;

  Copy = C3DGeometryCreateCopy(a1);
  v6 = (__C3DGeometry *)Copy;
  if (a2)
  {
    Mesh = C3DGeometryGetMesh(Copy);
    C3DMeshSetMeshElements(Mesh, a2);
  }
  SubdivisionSettings = C3DGeometryOsdGetSubdivisionSettings((uint64_t)v6);
  C3DGeometryOsdSetSubdivisionSettings((uint64_t)v6, SubdivisionSettings & 0xFFFFFF00);
  C3DGeometryOsdSetSubdivisionLevel(v6, a3);
  CPUSubdividedC3DMesh = C3DGeometryOsdGetCPUSubdividedC3DMesh((uint64_t)v6);
  CFRetain(CPUSubdividedC3DMesh);
  C3DGeometryOsdSetSubdivisionLevel(v6, 0);
  C3DGeometrySetMesh((uint64_t)v6, (uint64_t *)CPUSubdividedC3DMesh);
  CFRelease(CPUSubdividedC3DMesh);
  return v6;
}

CFTypeRef *C3DNodeCreateSubdividedCopy(uint64_t a1, int a2)
{
  unsigned __int8 v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *Copy;
  uint64_t Geometry;
  const void *v14;
  uint64_t Morpher;
  __C3DGeometry *SubdividedGeometryCopy;
  CFTypeRef *v17;
  uint64_t OverrideMaterial;
  uint64_t Mesh;
  const void *MeshElements;
  const __CFArray *v21;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  __C3DGeometry *v26;
  uint64_t v27;
  uint64_t Skinner;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __C3DGeometry *v33;
  int SubdivisionSettings;
  __C3DMesh *CPUSubdividedC3DMesh;
  const __CFArray *Joints;
  const __CFArray *v37;
  void *v38;
  __int128 *DefaultShapeMatrix;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *InverseBindMatricesPtr;
  uint64_t *v44;
  CFArrayRef v45;
  uint64_t *v47;
  uint64_t v48;
  CFTypeRef *v49;
  __int128 v50[4];

  v2 = a2;
  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DNodeCreateSubdividedCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Copy = (CFTypeRef *)C3DNodeCreateCopy(a1, 0);
  Geometry = C3DNodeGetGeometry((uint64_t)Copy);
  if (Geometry)
  {
    v14 = (const void *)Geometry;
    Morpher = C3DNodeGetMorpher(a1);
    SubdividedGeometryCopy = __createSubdividedGeometryCopy(v14, 0, v2);
    C3DNodeSetGeometry((uint64_t)Copy, SubdividedGeometryCopy);
    CFRelease(SubdividedGeometryCopy);
    if (Morpher)
    {
      v49 = Copy;
      v17 = C3DMorpherCreateCopy(Morpher);
      C3DMorpherSetBaseGeometry((uint64_t)v17, SubdividedGeometryCopy);
      v47 = (uint64_t *)v17;
      OverrideMaterial = C3DGeometryGetOverrideMaterial((uint64_t)v17);
      if (C3DMorphIsUsingSparseTargets(OverrideMaterial))
        C3DMorphConvertToSparse(OverrideMaterial, (uint64_t)v14, 0, 0);
      v48 = Morpher;
      if (C3DMorphGetCalculationMode(OverrideMaterial))
        C3DMorphConvertToCalculationMode(OverrideMaterial, (uint64_t)v14, 0, 0);
      Mesh = C3DGeometryGetMesh((uint64_t)v14);
      MeshElements = (const void *)C3DMeshGetMeshElements(Mesh, 0);
      v21 = (const __CFArray *)C3DGeometryGetOverrideMaterial(OverrideMaterial);
      Count = CFArrayGetCount(v21);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v21, i);
          v26 = __createSubdividedGeometryCopy(ValueAtIndex, MeshElements, v2);
          CFArrayAppendValue(Mutable, v26);
          CFRelease(v26);
        }
      }
      C3DMorphSetTargets(OverrideMaterial, Mutable, 0);
      Copy = v49;
      C3DNodeSetMorpher(v49, v47);
      CFRelease(v47);
      Morpher = v48;
    }
    v27 = *(_QWORD *)(a1 + 248);
    if (v27)
    {
      Skinner = C3DDeformerStackGetSkinner(v27);
      if (Skinner)
      {
        v29 = Skinner;
        v30 = C3DGeometryGetOverrideMaterial(Skinner);
        v31 = C3DGeometryGetMesh((uint64_t)v14);
        v32 = (uint64_t *)C3DMeshCreateCopy(v31);
        v33 = (__C3DGeometry *)C3DGeometryCreate();
        C3DGeometrySetMesh((uint64_t)v33, v32);
        if (Morpher)
        {
          SubdivisionSettings = C3DGeometryOsdGetSubdivisionSettings((uint64_t)v33);
          C3DGeometryOsdSetSubdivisionSettings((uint64_t)v33, SubdivisionSettings & 0xFFFFFF00);
        }
        C3DGeometryOsdSetSubdivisionLevel(v33, v2);
        CPUSubdividedC3DMesh = C3DGeometryOsdGetCPUSubdividedC3DMesh((uint64_t)v33);
        Joints = (const __CFArray *)C3DSkinnerGetJoints(v29);
        v37 = Joints;
        if (Joints)
          LOWORD(Joints) = CFArrayGetCount(Joints);
        v38 = (void *)C3DSkinCreateWithSkinnableMesh((uint64_t)CPUSubdividedC3DMesh, (__int16)Joints);
        CFRelease(v33);
        if (v38)
        {
          DefaultShapeMatrix = (__int128 *)C3DSkinGetDefaultShapeMatrix(v30);
          v40 = *DefaultShapeMatrix;
          v41 = DefaultShapeMatrix[1];
          v42 = DefaultShapeMatrix[3];
          v50[2] = DefaultShapeMatrix[2];
          v50[3] = v42;
          v50[0] = v40;
          v50[1] = v41;
          C3DSkinSetDefaultShapeMatrix((uint64_t)v38, v50);
          InverseBindMatricesPtr = (void *)C3DSkinGetInverseBindMatricesPtr(v30);
          C3DSkinCopyInverseBindMatricesPtr((uint64_t)v38, InverseBindMatricesPtr);
          v44 = (uint64_t *)C3DSkinnerCreateWithSkin(v38);
          CFRelease(v38);
          if (v37)
          {
            v45 = CFArrayCreateCopy(0, v37);
            C3DSkinnerSetJoints((uint64_t)v44, v45);
            CFRelease(v45);
          }
          C3DNodeSetSkinner(Copy, v44);
          CFRelease(v44);
        }
      }
    }
  }
  return Copy;
}

void C3DNodeSetMorpher(CFTypeRef *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Morpher;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  CFTypeRef *v17;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Morpher = C3DNodeGetMorpher((uint64_t)a1);
  if ((uint64_t *)Morpher != a2)
  {
    v13 = (void *)Morpher;
    if (Morpher)
    {
      v14 = C3DGetSceneRef((uint64_t)a1);
      C3DRemoveSceneRef(v13, v14);
    }
    if (a2)
    {
      v15 = (uint64_t)a1[6];
      if (v15)
        C3DAddSceneRef(a2, v15);
      v17 = a1 + 31;
      v16 = a1[31];
      if (!v16)
      {
        v16 = (_QWORD *)C3DDeformerStackCreate((uint64_t)a1);
        a1[31] = v16;
        if (!v16)
          goto LABEL_17;
      }
    }
    else
    {
      v17 = a1 + 31;
      v16 = a1[31];
      if (!v16)
      {
LABEL_17:
        if (C3DGetSceneRef((uint64_t)a1))
        {
          SharedInstance = C3DNotificationCenterGetSharedInstance();
          C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
        }
        C3DNodeGeometryDidUpdate((uint64_t *)a1);
        return;
      }
    }
    C3DDeformerStackSetMorpher((uint64_t)v16, a2);
    if (C3DDeformerStackIsEmpty(v16) && *v17)
    {
      CFRelease(*v17);
      *v17 = 0;
    }
    goto LABEL_17;
  }
}

void C3DNodeSetSkinner(_QWORD *a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Skinner;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[31];
  if (!v12)
  {
    if (!a2)
      return;
LABEL_12:
    v17 = a1[6];
    if (v17)
      C3DAddSceneRef(a2, v17);
    C3DSkinnerSetOwnerNode((uint64_t)a2, (uint64_t)a1);
    v16 = (_QWORD *)a1[31];
    if (!v16)
    {
      v16 = (_QWORD *)C3DDeformerStackCreate((uint64_t)a1);
      a1[31] = v16;
      if (!v16)
        goto LABEL_19;
    }
    goto LABEL_16;
  }
  Skinner = C3DDeformerStackGetSkinner(v12);
  if ((uint64_t *)Skinner == a2)
    return;
  v14 = (void *)Skinner;
  if (Skinner)
  {
    v15 = C3DGetSceneRef((uint64_t)a1);
    C3DRemoveSceneRef(v14, v15);
    C3DSkinnerSetOwnerNode((uint64_t)v14, 0);
  }
  if (a2)
    goto LABEL_12;
  v16 = (_QWORD *)a1[31];
  if (v16)
  {
LABEL_16:
    C3DDeformerStackSetSkinner(v16, a2);
    if (C3DDeformerStackIsEmpty(v16))
    {
      v18 = (const void *)a1[31];
      if (v18)
      {
        CFRelease(v18);
        a1[31] = 0;
      }
    }
  }
LABEL_19:
  if (C3DGetSceneRef((uint64_t)a1))
  {
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
  }
  C3DNodeGeometryDidUpdate(a1);
}

uint64_t C3DNodeGetChildNodesCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 80);
  }
  while (v1);
  return result;
}

BOOL C3DNodeApplyChildrenInterruptible(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  BOOL v6;
  char v7;

  v7 = 0;
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  v4 = 0;
  do
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(a2 + 16))(a2, v2, v4++, &v7);
    v2 = *(_QWORD *)(v2 + 80);
    result = v7 != 0;
    if (v7)
      v6 = 1;
    else
      v6 = v2 == 0;
  }
  while (!v6);
  return result;
}

uint64_t C3DNodeGetName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DEntityGetName(a1);
}

uint64_t C3DNodeApplyHierarchySkippingHiddenNodes(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = result;
    do
    {
LABEL_3:
      v5 = (_QWORD *)v4;
      if (*(_BYTE *)(v4 + 200))
        break;
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
      if (v6 == 2)
        return 1;
      v4 = v5[9];
    }
    while (v6 != 1 && v4 != 0);
    while (v5 != v3)
    {
      v4 = v5[10];
      if (v4)
        goto LABEL_3;
      v5 = (_QWORD *)v5[8];
    }
    return 0;
  }
  return result;
}

uint64_t C3DNodeGetChildNodeAtIndex(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;

  result = *(_QWORD *)(a1 + 72);
  if (a2 && result)
  {
    v3 = 1;
    do
    {
      result = *(_QWORD *)(result + 80);
      if (v3 >= a2)
        break;
      ++v3;
    }
    while (result);
  }
  return result;
}

uint64_t C3DNodeInsertChildNodeAtIndex(uint64_t a1, float32x4_t *cf, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (cf[5].i64[0])
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DNodeInsertChildNodeAtIndex_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (cf[4].i64[0])
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      C3DNodeInsertChildNodeAtIndex_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
      if (a3)
        goto LABEL_7;
LABEL_11:
      cf[5].i64[0] = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = cf;
      CFRetain(cf);
      return __FixupParent(a1, cf);
    }
  }
  if (!a3)
    goto LABEL_11;
LABEL_7:
  v22 = *(_QWORD *)(a1 + 72);
  v23 = (a3 - 1);
  if (a3 != 1)
  {
    do
    {
      v22 = *(_QWORD *)(v22 + 80);
      --v23;
    }
    while (v23);
  }
  v24 = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v22 + 80) = cf;
  CFRetain(cf);
  cf[5].i64[0] = v24;
  return __FixupParent(a1, cf);
}

void C3DNodeRemoveFromParentNode(_QWORD *cf)
{
  uint64_t v1;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *i;
  NSObject *v13;
  uint8_t v14[4];
  _DWORD v15[7];

  *(_QWORD *)&v15[5] = *MEMORY[0x1E0C80C00];
  v1 = cf[8];
  if (v1)
  {
    v3 = *(_QWORD **)(v1 + 72);
    if (v3 == cf)
    {
      *(_QWORD *)(v1 + 72) = cf[10];
    }
    else
    {
      if (!v3)
      {
        v4 = scn_default_log();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
          C3DNodeRemoveFromParentNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      for (i = (_QWORD *)v3[10]; i != cf; i = (_QWORD *)v3[10])
      {
        v3 = i;
        if (!i)
        {
          v13 = scn_default_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
            C3DNodeRemoveFromParentNode_cold_1(v14, v15, v13);
        }
      }
      v3[10] = cf[10];
    }
    cf[10] = 0;
    cf[8] = 0;
    C3DRemoveSceneRef(cf, cf[6]);
    CFRelease(cf);
  }
}

uint64_t C3DNodeGetIndexOfChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  _BOOL4 v4;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = v2 == 0;
  v4 = v2 == 0;
  v5 = 0;
  while (!v3 && v2 != a2)
  {
    ++v5;
    v2 = *(_QWORD *)(v2 + 80);
    v3 = v2 == 0;
    v4 = v2 == 0;
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return v5;
}

double C3DNodeGetWorldPosition(float32x4_t *a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *WorldMatrix;
  double result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeGetWorldPosition_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  WorldMatrix = (__n128 *)C3DNodeGetWorldMatrix(a1);
  *(_QWORD *)&result = C3DMatrix4x4GetTranslation(WorldMatrix, a2).n128_u64[0];
  return result;
}

void C3DNodeGetWorldOrientation(float32x4_t *a1, _OWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *WorldMatrix;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  float32x4_t v25[4];

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeGetWorldOrientation_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  WorldMatrix = C3DNodeGetWorldMatrix(a1);
  v21 = *WorldMatrix;
  v22 = WorldMatrix[1];
  v23 = WorldMatrix[3];
  v25[2] = WorldMatrix[2];
  v25[3] = v23;
  v25[0] = v21;
  v25[1] = v22;
  *(double *)&v24 = C3DMatrix4x4GetRotation(v25);
  *a2 = v24;
}

double C3DNodeGetPosition(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = C3DTransformGetPosition(a1 + 6).n128_u64[0];
  return result;
}

double C3DNodeGetScale(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = C3DTransformGetScale(a1 + 6).n128_u64[0];
  return result;
}

void C3DNodeGetQuaternion(uint64_t a1)
{
  C3DTransformGetQuaternion(a1 + 96);
}

void C3DNodeGetAxisAngle(float32x4_t *a1)
{
  C3DTransformGetAxisAngle(a1 + 6);
}

void C3DNodeSetAxisAngle(float32x4_t *a1, __n128 a2)
{
  C3DTransformSetAxisAngle((uint64_t)&a1[6], a2);
  __C3DNodeTransformDidChange(a1);
}

double C3DNodeGetEuler(float32x4_t *a1)
{
  double result;

  *(_QWORD *)&result = C3DTransformGetEuler(a1 + 6).n128_u64[0];
  return result;
}

void C3DNodeSetEuler(float32x4_t *a1, __n128 a2)
{
  C3DTransformSetEuler((uint64_t)&a1[6], a2);
  __C3DNodeTransformDidChange(a1);
}

uint64_t C3DNodeGetTransform(uint64_t a1)
{
  return a1 + 96;
}

void C3DNodeSetMatrix(float32x4_t *a1, uint64_t a2)
{
  C3DTransformSetMatrix((uint64_t)&a1[6], a2);
  __C3DNodeTransformDidChange(a1);
}

double C3DNodeGetLocalNoPivotMatrix@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)&result = C3DTransformGetMatrix(a1 + 96, a2).n128_u64[0];
  return result;
}

double C3DNodeGetPivotPosition(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  __n128 v12;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v12.n128_u32[2] = 0;
  v12.n128_u64[0] = 0;
  v10 = *(__n128 **)(a1 + 192);
  if (!v10)
    return 0.0;
  C3DMatrix4x4GetTranslation(v10, &v12);
  return v12.n128_f64[0];
}

void C3DNodeSetPivotPosition(float32x4_t *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15[4];

  if (!a1)
  {
    v14 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v14;
    if (v4)
    {
      C3DGeometryTrackNode_cold_2(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v14;
    }
  }
  v12 = (__n128 *)a1[12].i64[0];
  if (v12)
  {
    C3DMatrix4x4SetTranslation(v12, a2);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
    C3DMatrix4x4SetTranslation(v15, a2);
    C3DNodeSetPivotMatrix(a1, (__int128 *)v15);
  }
  v13 = a1[12].i64[0];
  if (v13)
    *(_DWORD *)(v13 + 124) = 0;
  __C3DNodeTransformDidChange(a1);
}

__n128 C3DNodeComputeWorldTransform(float32x4_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *WorldMatrix;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[4];
  __int128 v39;
  __n128 v40;
  __int128 v41;
  __int128 v42;

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DNodeComputeWorldMatrix_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a1[5].i32[2] == -1)
  {
    WorldMatrix = C3DNodeGetWorldMatrix(a1);
    result = (__n128)WorldMatrix[2];
    v23 = WorldMatrix[3];
    v25 = *WorldMatrix;
    v24 = WorldMatrix[1];
    *(__n128 *)(a2 + 32) = result;
    *(float32x4_t *)(a2 + 48) = v23;
    *(float32x4_t *)a2 = v25;
    *(float32x4_t *)(a2 + 16) = v24;
  }
  else
  {
    C3DNodeGetMatrix((uint64_t)a1, (uint64_t)&v34);
    v13 = v34;
    result = v35;
    v14 = v36;
    v15 = v37;
    v16 = a1[4].i64[0];
    if (v16)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v26 = v34;
      v27 = v35;
      v28 = v36;
      v29 = v37;
      C3DNodeComputeWorldTransform(v16, &v30);
      v17 = 0;
      v18 = v30;
      v19 = v31;
      v20 = v32;
      v21 = v33;
      v38[0] = v26;
      v38[1] = v27;
      v38[2] = v28;
      v38[3] = v29;
      v39 = 0u;
      v40 = 0u;
      v41 = 0u;
      v42 = 0u;
      do
      {
        *(__int128 *)((char *)&v39 + v17 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v38[v17])), v19, *(float32x2_t *)&v38[v17], 1), v20, (float32x4_t)v38[v17], 2), v21, (float32x4_t)v38[v17], 3);
        ++v17;
      }
      while (v17 != 4);
      v13 = v39;
      result = v40;
      v14 = v41;
      v15 = v42;
    }
    *(_OWORD *)a2 = v13;
    *(__n128 *)(a2 + 16) = result;
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)(a2 + 48) = v15;
  }
  return result;
}

uint64_t C3DNodeGetID(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DEntityGetID(a1);
}

uint64_t C3DNodeGetNodeWithName(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerGetAnimationPerKeyDictionaryForObject_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeGetNodeWithName_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = __C3DNodeGetNodeWithName_block_invoke;
  v22[3] = &unk_1EA5A1A18;
  v22[4] = &v23;
  v22[5] = a2;
  C3DNodeApplyHierarchy(a1, (uint64_t)v22);
  v20 = v24[3];
  _Block_object_dispose(&v23, 8);
  return v20;
}

__CFArray *C3DNodeCopyChildNodesPassingTest(const void *a1, uint64_t a2, int a3)
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  _C3DNodeCopyChildNodesPassingTest(a1, a2, a3, Mutable);
  return Mutable;
}

BOOL _C3DNodeCopyChildNodesPassingTest(const void *a1, uint64_t a2, int a3, __CFArray *a4)
{
  int v8;
  BOOL v9;
  _QWORD v11[6];
  char v12;
  unsigned __int8 v13;

  v13 = 1;
  if ((*(unsigned int (**)(uint64_t, const void *, unsigned __int8 *))(a2 + 16))(a2, a1, &v13))
    CFArrayAppendValue(a4, a1);
  v8 = v13;
  if (v13)
    v9 = a3 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___C3DNodeCopyChildNodesPassingTest_block_invoke;
    v11[3] = &unk_1EA5A1B10;
    v12 = a3;
    v11[4] = a2;
    v11[5] = a4;
    C3DNodeApplyChildrenInterruptible((uint64_t)a1, (uint64_t)v11);
    v8 = v13;
  }
  return v8 != 0;
}

CFStringRef C3DNodeSetName(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return C3DEntitySetName(a1, theString);
}

CFTypeRef C3DNodeSetID(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return C3DEntitySetID(a1, cf);
}

BOOL C3DNodeIsAncestor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a1;
  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeIsAncestor_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  do
LABEL_6:
    v3 = *(_QWORD *)(v3 + 64);
  while (v3 != a2 && v3 != 0);
  return v3 != 0;
}

_QWORD *C3DNodeFindCommonAncestor(CFArrayRef theArray)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFIndex Count;
  uint64_t v11;
  _QWORD *ValueAtIndex;
  CFIndex i;
  _QWORD *v14;
  _QWORD *v15;

  if (!theArray)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DNodeFindCommonAncestor_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 0;
  v11 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (v11 >= 2)
  {
    for (i = 1; i != v11; ++i)
    {
      v14 = CFArrayGetValueAtIndex(theArray, i);
      if (!ValueAtIndex)
        break;
      while (!v14)
      {
LABEL_12:
        ValueAtIndex = (_QWORD *)ValueAtIndex[8];
        if (!ValueAtIndex)
          return ValueAtIndex;
      }
      v15 = v14;
      while (v15 != ValueAtIndex)
      {
        v15 = (_QWORD *)v15[8];
        if (!v15)
          goto LABEL_12;
      }
    }
  }
  return ValueAtIndex;
}

void C3DNodeSetRenderingOrder(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  const __CFDictionary *valuePtr;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (C3DNodeGetRenderingOrder(a1) != a2)
  {
    if (a2)
    {
      valuePtr = a2;
      v12 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
      C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kRenderingPriorityKey"), v12);
      CFRelease(v12);
    }
    else
    {
      C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kRenderingPriorityKey"), 0);
    }
    C3DScenePostPipelineEvent(*(_QWORD *)(a1 + 48), 5, (const void *)a1, 0);
  }
}

void C3DNodeSetCastsShadow(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_DWORD *)(a1 + 220);
  if (((((v12 & 0x200000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v13 = 0x200000;
    else
      v13 = 0;
    *(_DWORD *)(a1 + 220) = v12 & 0xFFDFFFFF | v13;
    C3DScenePostPipelineEvent(*(_QWORD *)(a1 + 48), 5, (const void *)a1, 0);
    __UpdateCullingSystemFlags(a1, 0);
  }
}

void C3DNodeSetUsesDepthPrePass(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_DWORD *)(a1 + 220);
  if (((((v12 & 0x4000000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v13 = 0x4000000;
    else
      v13 = 0;
    *(_DWORD *)(a1 + 220) = v12 & 0xFBFFFFFF | v13;
    v14 = *(_QWORD *)(a1 + 48);
    C3DScenePostPipelineEvent(v14, 8, (const void *)a1, 0);
    C3DScenePostPipelineEvent(v14, 5, (const void *)a1, 0);
    __UpdateCullingSystemFlags(a1, 0);
  }
}

__C3DCullingSystem *C3DNodeSetCategoryBitMask(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 208) = a2;
  return __UpdateCullingSystemFlags(a1, 0);
}

void C3DNodeSetMovability(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_DWORD *)(a1 + 220);
  if (((v12 >> 22) & 1) != a2)
  {
    *(_DWORD *)(a1 + 220) = v12 & 0xFFBFFFFF | ((a2 & 1) << 22);
    __UpdateCullingSystemFlags(a1, 0);
  }
}

uint64_t C3DNodeGetHittable(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 220) >> 3) & 1;
}

uint64_t C3DNodeSetHittable(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t C3DNodeSetIsJoint(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t C3DNodeHasLight(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 221) >> 1) & 1;
}

void C3DNodeSetLight(float32x4_t *a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const __CFDictionary *Light;
  uint64_t LightingSystem;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t SharedInstance;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = (const void *)a1[3].i64[0];
  if (v12)
  {
    Light = C3DNodeGetLight((uint64_t)a1);
    if (Light)
    {
      C3DRemoveSceneRef(Light, a1[3].i64[0]);
      LightingSystem = C3DSceneGetLightingSystem((uint64_t)v12);
      C3DLightingSystemRemove(LightingSystem, a1);
    }
  }
  v15 = C3DGetSceneRef((uint64_t)a1) != 0;
  _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kLightKey"), a2, v15);
  if (a2)
  {
    v16 = a1[3].i64[0];
    if (v16)
      C3DAddSceneRef((uint64_t *)a2, v16);
  }
  a1[13].i32[3] = a1[13].i32[3] & 0xFFFFFDFF | ((a2 != 0) << 9);
  if (a2 && v12)
  {
    v17 = C3DSceneGetLightingSystem((uint64_t)v12);
    C3DLightingSystemAdd(v17, a1);
    C3DLightingSystemLightDidUpdate(v17, a2);
  }
  else if (!a2)
  {
    return;
  }
  if (C3DLightTypeSupportsShadow((uint64_t)a2))
  {
    if (C3DLightGetCastsShadow((uint64_t)a2))
    {
      SharedInstance = C3DNotificationCenterGetSharedInstance();
      C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v12, 0, 1u);
    }
  }
}

void C3DNodeSetPostMorphingDeformers(_QWORD *a1, const __CFArray *cf)
{
  uint64_t *v4;
  const void *v5;
  uint64_t SharedInstance;

  v4 = (uint64_t *)a1[31];
  if (cf && !v4)
  {
    v4 = (uint64_t *)C3DDeformerStackCreate((uint64_t)a1);
    a1[31] = v4;
  }
  if (v4)
  {
    C3DDeformerStackSetPostMorphingDeformers(v4, cf);
    if (C3DDeformerStackIsEmpty(v4))
    {
      v5 = (const void *)a1[31];
      if (v5)
      {
        CFRelease(v5);
        a1[31] = 0;
      }
    }
    if (a1[6])
    {
      SharedInstance = C3DNotificationCenterGetSharedInstance();
      C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
    }
  }
}

void C3DNodeSetPostSkinningDeformers(_QWORD *a1, const __CFArray *cf)
{
  uint64_t *v4;
  const void *v5;
  uint64_t SharedInstance;

  v4 = (uint64_t *)a1[31];
  if (cf && !v4)
  {
    v4 = (uint64_t *)C3DDeformerStackCreate((uint64_t)a1);
    a1[31] = v4;
  }
  if (v4)
  {
    C3DDeformerStackSetPostSkinningDeformers(v4, cf);
    if (C3DDeformerStackIsEmpty(v4))
    {
      v5 = (const void *)a1[31];
      if (v5)
      {
        CFRelease(v5);
        a1[31] = 0;
      }
    }
    if (a1[6])
    {
      SharedInstance = C3DNotificationCenterGetSharedInstance();
      C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
    }
  }
}

void C3DNodeSetLightmapInfo(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DGetSceneRef(a1) != 0;
  _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kLightmapInfoKey"), a2, v12);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFF7FF | ((a2 != 0) << 11);
}

void C3DNodeSetRendererDelegate(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  v3 = a1;
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DGetSceneRef(v3) != 0;
  _C3DEntitySetAttribute((CFTypeRef *)v3, CFSTR("rendererDelegate"), a2, v12);
  if ((a2 != 0) == ((*(_DWORD *)(v3 + 220) & 0x2000) == 0))
  {
    *(_DWORD *)(v3 + 220) = *(_DWORD *)(v3 + 220) & 0xFFFFDFFF | ((a2 != 0) << 13);
    __UpdateCullingSystemFlags(v3, 0);
    do
    {
      *(_DWORD *)(v3 + 220) |= 2u;
      v3 = *(_QWORD *)(v3 + 64);
    }
    while (v3);
  }
}

CFIndex C3DNodeGetCountOfParticleSystems(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *Attribute;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 222) & 4) == 0)
    return 0;
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kParticleSystem"));
  return CFArrayGetCount(Attribute);
}

void C3DNodeAddParticleSystem(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex CountOfParticleSystems;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  CountOfParticleSystems = C3DNodeGetCountOfParticleSystems(a1);
  C3DNodeInsertParticleSystemAtIndex(a1, a2, CountOfParticleSystems);
}

void C3DNodeInsertParticleSystemAtIndex(uint64_t a1, void *a2, CFIndex a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *Attribute;
  uint64_t v23;
  _QWORD *ParticleManager;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kParticleSystem"));
  if (!Attribute)
  {
    Attribute = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kParticleSystem"), Attribute);
    CFRelease(Attribute);
  }
  CFArrayInsertValueAtIndex(Attribute, a3, a2);
  *(_DWORD *)(a1 + 220) |= 0x40000u;
  v23 = *(_QWORD *)(a1 + 48);
  if (v23)
  {
    ParticleManager = C3DSceneGetParticleManager(*(_QWORD *)(a1 + 48), 1);
    if (ParticleManager)
      C3DParticleManagerAddSystem((uint64_t)ParticleManager, (float32x4_t *)a1, a2, 0);
    C3DAddSceneRef((uint64_t *)a2, v23);
  }
}

void C3DNodeRemoveAllParticleSystems(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *ParticleManager;
  const __CFArray *ParticleSystems;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v18;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    ParticleManager = C3DSceneGetParticleManager(v10, 1);
  else
    ParticleManager = 0;
  if (C3DGetSceneRef(a1))
  {
    ParticleSystems = C3DNodeGetParticleSystems(a1);
    if (ParticleSystems)
    {
      v13 = ParticleSystems;
      Count = CFArrayGetCount(ParticleSystems);
      if (Count >= 1)
      {
        v15 = Count;
        for (i = 0; i != v15; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v13, i);
          v18 = C3DGetSceneRef(a1);
          C3DRemoveSceneRef(ValueAtIndex, v18);
        }
      }
    }
  }
  C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kParticleSystem"), 0);
  if (ParticleManager)
    C3DParticleManagerRemoveAllInstanceOfSystemsOnNode((uint64_t)ParticleManager, a1);
  *(_DWORD *)(a1 + 220) &= ~0x40000u;
}

void C3DNodeRemoveParticleSystem(uint64_t a1, const void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *Attribute;
  const __CFArray *v23;
  CFIndex FirstIndexOfValue;
  CFRange v25;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kParticleSystem"));
  if (Attribute)
  {
    v23 = Attribute;
    v25.length = CFArrayGetCount(Attribute);
    v25.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v23, v25, a2);
    C3DNodeRemoveParticleSystemAtIndex(a1, FirstIndexOfValue, a3);
  }
}

void C3DNodeRemoveParticleSystemAtIndex(uint64_t a1, CFIndex a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *Attribute;
  const __CFArray *v15;
  void *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;
  _QWORD *ParticleManager;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kParticleSystem"));
  if (Attribute)
  {
    v15 = Attribute;
    if (a2 < 0 || CFArrayGetCount(Attribute) <= a2)
    {
      ValueAtIndex = 0;
    }
    else
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(v15, a2);
      CFArrayRemoveValueAtIndex(v15, a2);
    }
    if (CFArrayGetCount(v15))
      *(_DWORD *)(a1 + 220) &= ~0x40000u;
    if (ValueAtIndex)
    {
      v17 = C3DGetSceneRef(a1);
      C3DRemoveSceneRef(ValueAtIndex, v17);
      if (a3)
      {
        v18 = *(_QWORD *)(a1 + 48);
        if (v18)
        {
          ParticleManager = C3DSceneGetParticleManager(v18, 0);
          if (ParticleManager)
            C3DParticleManagerRemoveSystem((uint64_t)ParticleManager, a1, (uint64_t)ValueAtIndex);
        }
      }
    }
  }
}

void C3DNodeReplaceParticleSystemAtIndex(uint64_t a1, void *cf, CFIndex a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (cf)
      goto LABEL_4;
  }
  else if (cf)
  {
LABEL_4:
    CFRetain(cf);
    C3DNodeRemoveParticleSystemAtIndex(a1, a3, 1);
    C3DNodeInsertParticleSystemAtIndex(a1, cf, a3);
    CFRelease(cf);
    return;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  C3DNodeRemoveParticleSystemAtIndex(a1, a3, 1);
  C3DNodeInsertParticleSystemAtIndex(a1, 0, a3);
}

CFIndex C3DNodeGetCountOfAudioPlayers(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *Attribute;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 222) & 8) == 0)
    return 0;
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kAudioPlayer"));
  return CFArrayGetCount(Attribute);
}

uint64_t C3DNodeAddAudioPlayer(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex CountOfAudioPlayers;
  uint64_t result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DNodeAddAudioPlayer_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  CountOfAudioPlayers = C3DNodeGetCountOfAudioPlayers(a1);
  C3DNodeInsertAudioPlayerAtIndex(a1, a2, CountOfAudioPlayers);
  result = C3DNodeIsHiddenOrIsHiddenByAncestor(a1);
  if ((result & 1) == 0)
    return C3DAudioPlayerPlay(a2);
  return result;
}

uint64_t C3DNodeInsertAudioPlayerAtIndex(uint64_t a1, void *a2, CFIndex a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *Attribute;
  __n128 *WorldMatrix;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DNodeAddAudioPlayer_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kAudioPlayer"));
  if (!Attribute)
  {
    Attribute = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kAudioPlayer"), Attribute);
    CFRelease(Attribute);
  }
  CFArrayInsertValueAtIndex(Attribute, a3, a2);
  *(_DWORD *)(a1 + 220) |= 0x80000u;
  WorldMatrix = (__n128 *)C3DNodeGetWorldMatrix((float32x4_t *)a1);
  C3DAudioPlayerSetTransform(a2, WorldMatrix);
  return C3DAudioManagerAddVoice(a2);
}

void C3DNodeRemoveAllAudioPlayers(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *Attribute;
  CFIndex Count;
  CFIndex v12;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kAudioPlayer"));
  if (Attribute)
  {
    Count = CFArrayGetCount(Attribute);
    if (Count >= 1)
    {
      v12 = Count;
      do
      {
        C3DNodeRemoveAudioPlayerAtIndex(a1, 0, 1);
        --v12;
      }
      while (v12);
    }
    C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kAudioPlayer"), 0);
  }
  *(_DWORD *)(a1 + 220) &= ~0x80000u;
}

void C3DNodeRemoveAudioPlayerAtIndex(uint64_t a1, CFIndex a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *Attribute;
  __CFArray *v15;
  void *ValueAtIndex;
  void *v17;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kAudioPlayer"));
  if (Attribute)
  {
    v15 = Attribute;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(Attribute, a2);
    v17 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(v15, a2);
    if (CFArrayGetCount(v15))
      *(_DWORD *)(a1 + 220) &= ~0x80000u;
    if (a3)
      C3DAudioManagerRemoveVoice(v17);
    SCNAudioPlayerWasRemovedFromNode((uint64_t)v17);
    if (v17)
      CFRelease(v17);
  }
}

void C3DNodeRemoveAudioPlayer(uint64_t a1, const void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *Attribute;
  const __CFArray *v23;
  CFIndex FirstIndexOfValue;
  CFRange v25;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  Attribute = C3DEntityGetAttribute(a1, CFSTR("kAudioPlayer"));
  if (Attribute)
  {
    v23 = Attribute;
    v25.length = CFArrayGetCount(Attribute);
    v25.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v23, v25, a2);
    if (FirstIndexOfValue != -1)
      C3DNodeRemoveAudioPlayerAtIndex(a1, FirstIndexOfValue, a3);
  }
}

void C3DNodeReplaceAudioPlayerAtIndex(float32x4_t *a1, void *cf, CFIndex a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *WorldMatrix;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (cf)
      goto LABEL_4;
  }
  else if (cf)
  {
LABEL_4:
    CFRetain(cf);
    C3DNodeRemoveAudioPlayerAtIndex((uint64_t)a1, a3, 1);
    C3DNodeInsertAudioPlayerAtIndex((uint64_t)a1, cf, a3);
    WorldMatrix = (__n128 *)C3DNodeGetWorldMatrix(a1);
    C3DAudioPlayerSetTransform(cf, WorldMatrix);
    CFRelease(cf);
    return;
  }
  v15 = scn_default_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    C3DNodeAddParticleSystem_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
  C3DNodeRemoveAudioPlayerAtIndex((uint64_t)a1, a3, 1);
  C3DNodeInsertAudioPlayerAtIndex((uint64_t)a1, 0, a3);
  v23 = (__n128 *)C3DNodeGetWorldMatrix(a1);
  C3DAudioPlayerSetTransform(0, v23);
}

uint64_t C3DNodeHasConstraints(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_BYTE *)(a1 + 222) & 1;
}

void C3DNodeSetConstraints(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *Constraints;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex v22;
  CFIndex j;
  uint64_t *v24;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (C3DGetSceneRef(a1))
  {
    Constraints = C3DNodeGetConstraints(a1);
    if (Constraints)
    {
      v13 = Constraints;
      Count = CFArrayGetCount(Constraints);
      if (Count >= 1)
      {
        v15 = Count;
        for (i = 0; i != v15; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v13, i);
          v18 = C3DGetSceneRef(a1);
          C3DRemoveSceneRef(ValueAtIndex, v18);
        }
      }
    }
  }
  v19 = C3DGetSceneRef(a1) != 0;
  _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kConstraints"), a2, v19);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFEFFFF | ((a2 != 0) << 16);
  v20 = *(_QWORD *)(a1 + 48);
  if (v20)
  {
    C3DSceneRegisterNodeConstrains(*(_QWORD *)(a1 + 48), (float32x4_t *)a1);
    if (a2)
    {
      v21 = CFArrayGetCount(a2);
      if (v21 >= 1)
      {
        v22 = v21;
        for (j = 0; j != v22; ++j)
        {
          v24 = (uint64_t *)CFArrayGetValueAtIndex(a2, j);
          C3DAddSceneRef(v24, v20);
        }
      }
    }
  }
}

void C3DNodeSetHasPhysicsBody(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 64;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFFFBF | v12;
}

uint64_t C3DNodeGetHasPhysicsBody(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 220) >> 6) & 1;
}

void C3DNodeSetHasPhysicsField(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 0x100000;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFEFFFFF | v12;
}

uint64_t C3DNodeGetHasPhysicsField(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 222) >> 4) & 1;
}

void C3DNodeSetFilters(uint64_t a1, CFArrayRef theArray)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFDictionary *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t EnginePipeline;
  __int128 v17;
  uint64_t (*v18)();

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (theArray)
      goto LABEL_4;
  }
  else if (theArray)
  {
LABEL_4:
    v12 = (CFArrayGetCount(theArray) > 0) << 14;
    goto LABEL_7;
  }
  v12 = 0;
LABEL_7:
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFBFFF | v12;
  v17 = kC3DCIFilterParamControllerCallbacks;
  v18 = off_1F03BE978;
  v13 = (const __CFDictionary *)C3DAnimatableParamControllerCreate(theArray, &v17);
  v14 = C3DGetSceneRef(a1) != 0;
  _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kFilterKey"), v13, v14);
  CFRelease(v13);
  __PropagateFlagsToChildren(a1, (*(_DWORD *)(a1 + 220) >> 14) & 1, (*(_DWORD *)(a1 + 220) >> 23) & 7);
  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
  {
    C3DSceneRegisterNodeFilters(*(CFTypeRef **)(a1 + 48), (const void *)a1);
    __UpdateCullingHandle(a1, v15);
    EnginePipeline = C3DSceneGetEnginePipeline(v15);
    C3DEnginePipelineRemoveNodeFromRendering(EnginePipeline, a1);
    __UpdateNodeVisibilityIfNeeded(a1, 1);
  }
}

const __CFDictionary *C3DNodeGetFiltersParamController(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 221) & 0x40) != 0)
    return C3DEntityGetAttribute(a1, CFSTR("kFilterKey"));
  else
    return 0;
}

uint64_t C3DNodeGetRendererElementSpan(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 224);
}

void C3DNodeSetLayerIndex(uint64_t a1, int a2)
{
  char v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2;
  if (a2 >= 4)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DNodeSetLayerIndex_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFC7FFFFF | ((v2 & 7) << 23);
}

id _C3DNodeCFFinalize(uint64_t a1)
{
  uint64_t Geometry;
  uint64_t SharedInstance;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;
  uint8_t v14;
  _BYTE v15[15];

  Geometry = C3DNodeGetGeometry(a1);
  if (Geometry)
    C3DGeometryUntrackNode(Geometry, (const void *)a1);
  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationNodeWillDie"), (const void *)a1, 0, 1u);
  v4 = *(void **)(a1 + 192);
  if (v4)
    free(v4);
  if ((*(_BYTE *)(a1 + 222) & 8) != 0)
    C3DNodeRemoveAllAudioPlayers(a1);
  v5 = *(_QWORD **)(a1 + 72);
  if (v5)
  {
    do
    {
      v6 = v5[8];
      if (v6 == a1)
      {
        v5[8] = 0;
      }
      else if (v6)
      {
        v7 = scn_default_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          _C3DNodeCFFinalize_cold_1(&v14, v15, v7);
      }
      v8 = (_QWORD *)v5[10];
      v5[10] = 0;
      CFRelease(v5);
      v5 = v8;
    }
    while (v8);
  }
  v9 = *(const void **)(a1 + 80);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v10 = *(const void **)(a1 + 240);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v11 = *(const void **)(a1 + 248);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v12 = *(void **)(a1 + 232);
  if (v12)
    free(v12);
  return C3DEntityCFFinalize(a1);
}

__CFString *_C3DNodeCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t Name;
  uint64_t Geometry;
  int v5;
  const __CFDictionary *Light;
  const __CFDictionary *Camera;
  uint64_t v8;
  uint64_t Skinner;
  uint64_t Morpher;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DNodeGetName(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DNode:%p \"%@\"\n"), a1, Name);
  Geometry = C3DNodeGetGeometry(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("  geometry: %@\n"), Geometry);
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) != 0)
  {
    Light = C3DNodeGetLight(a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("  light: %@\n"), Light);
    v5 = *(_DWORD *)(a1 + 220);
  }
  if ((v5 & 0x400) != 0)
  {
    Camera = C3DNodeGetCamera(a1);
    CFStringAppendFormat(Mutable, 0, CFSTR("  camera: %@\n"), Camera);
  }
  v8 = *(_QWORD *)(a1 + 248);
  if (v8)
  {
    Skinner = C3DDeformerStackGetSkinner(v8);
    if (Skinner)
      CFStringAppendFormat(Mutable, 0, CFSTR("  skinner: %@\n"), Skinner);
  }
  Morpher = C3DNodeGetMorpher(a1);
  if (Morpher)
    CFStringAppendFormat(Mutable, 0, CFSTR("  morpher: %@\n"), Morpher);
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

BOOL _C3DNodeInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *Attributes;
  const __CFDictionary *v25;
  CFIndex Count;
  const __CFDictionary *Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *v29;
  const void *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  NSObject *v35;
  _BOOL8 result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  const void *v46;
  uint64_t *v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  const __CFNumber *v50;
  const __CFBoolean *v51;
  unsigned int v52;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  const void *v55;
  NSObject *v56;
  const void *v57;
  char v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  const __CFDictionary *v67;
  const __CFDictionary *v68;
  const void *v69;
  uint64_t v70;
  __n128 v71;
  const void *v72;
  NSObject *v73;
  const void *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  const void *v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  float32x4_t v93[4];
  __n128 v94;
  __n128 v95;
  __int16 valuePtr;
  float32x4_t context;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DGeometryFinalizeDeserialization_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) == 0)
  {
    v35 = scn_default_log();
    result = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DNodeInitWithPropertyList_cold_9(v35, v37, v38, v39, v40, v41, v42, v43);
    return 0;
  }
  Attributes = (const __CFDictionary *)C3DEntityGetAttributes(a1);
  if (Attributes)
  {
    v25 = Attributes;
    Count = CFDictionaryGetCount(Attributes);
    Mutable = CFDictionaryCreateMutable(0, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    context = (float32x4_t)(unint64_t)Mutable;
    CFDictionaryApplyFunction(v25, (CFDictionaryApplierFunction)_fillPatchedDictionay, &context);
    if (context.i64[1])
    {
      if (!Mutable)
        goto LABEL_12;
      C3DEntitySetAttributes(a1, Mutable);
      C3DEntityGetAttributes(a1);
    }
    CFRelease(Mutable);
LABEL_12:
    Value = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("attributes"));
    if (Value)
    {
      v29 = Value;
      v30 = CFDictionaryGetValue(Value, CFSTR("kSkinnerKey"));
      if (v30)
      {
        v31 = (uint64_t)v30;
        C3DSkinnerCreate();
        v33 = v32;
        v34 = C3DInitWithPropertyList(v32, v31, a3, (uint64_t)a4);
        if (v34)
          C3DNodeSetSkinner((_QWORD *)a1, v33);
        CFRelease(v33);
      }
      else
      {
        v34 = 1;
      }
      v44 = CFDictionaryGetValue(v29, CFSTR("kMorpherKey"));
      if (v44)
      {
        v45 = (uint64_t)v44;
        v46 = (const void *)C3DMorphCreate();
        v47 = (uint64_t *)C3DMorpherCreateWith(v46);
        CFRelease(v46);
        if ((v34 & C3DInitWithPropertyList(v47, v45, a3, (uint64_t)a4)) == 1)
          C3DNodeSetMorpher((CFTypeRef *)a1, v47);
        CFRelease(v47);
      }
    }
  }
  v48 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("hidden"));
  if (v48)
  {
    CFNumberGetValue(v48, kCFNumberShortType, &valuePtr);
    *(_BYTE *)(a1 + 200) = valuePtr != 0;
  }
  v49 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("alpha"));
  if (v49)
    CFNumberGetValue(v49, kCFNumberFloatType, (void *)(a1 + 204));
  v50 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("category"));
  if (v50)
    CFNumberGetValue(v50, kCFNumberNSIntegerType, (void *)(a1 + 208));
  v51 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("isJoint"));
  if (v51)
    v52 = *(_DWORD *)(a1 + 220) & 0xFFFFFEFF | ((CFBooleanGetValue(v51) & 1) << 8);
  else
    v52 = *(_DWORD *)(a1 + 220) & 0xFFFFFEFF;
  *(_DWORD *)(a1 + 220) = v52;
  v53 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("transforms"));
  if (!v53)
    goto LABEL_40;
  v54 = v53;
  v95.n128_u32[2] = 0;
  v95.n128_u64[0] = 0;
  v94 = 0uLL;
  v99 = 0u;
  v100 = 0u;
  context = 0u;
  v98 = 0u;
  v55 = CFDictionaryGetValue(v53, CFSTR("matrix4x4"));
  if (!v55)
  {
    v57 = CFDictionaryGetValue(v54, CFSTR("position"));
    if (v57 && C3DVector3InitWithPropertyList((uint64_t)&v95, (uint64_t)v57, a3, (uint64_t)a4))
    {
      C3DTransformSetPosition((__n128 *)(a1 + 96), v95);
      v58 = 1;
    }
    else
    {
      v58 = 0;
    }
    v66 = CFDictionaryGetValue(v54, CFSTR("scale"));
    if (v66 && C3DVector3InitWithPropertyList((uint64_t)&v95, (uint64_t)v66, a3, (uint64_t)a4))
      C3DTransformSetScale(a1 + 96, v95);
    else
      v58 = 0;
    v67 = (const __CFDictionary *)CFDictionaryGetValue(v54, CFSTR("rotation"));
    if (!v67)
      goto LABEL_67;
    v68 = v67;
    v69 = CFDictionaryGetValue(v67, CFSTR("quaternion"));
    if (v69)
    {
      if ((C3DVector3InitWithPropertyList((uint64_t)&v94, (uint64_t)v69, a3, (uint64_t)a4) & 1) == 0)
      {
        v73 = scn_default_log();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          _C3DNodeInitWithPropertyList_cold_7();
        return 0;
      }
      v70 = a1 + 96;
      v71 = v94;
    }
    else
    {
      v72 = CFDictionaryGetValue(v68, CFSTR("euler"));
      if (v72)
      {
        if ((C3DVector3InitWithPropertyList((uint64_t)&v95, (uint64_t)v72, a3, (uint64_t)a4) & 1) == 0)
        {
          v82 = scn_default_log();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
            _C3DNodeInitWithPropertyList_cold_6();
          return 0;
        }
        C3DTransformSetEuler(a1 + 96, v95);
        goto LABEL_66;
      }
      v74 = CFDictionaryGetValue(v68, CFSTR("axisAngle"));
      if (v74)
      {
        if ((C3DVector3InitWithPropertyList((uint64_t)&v94, (uint64_t)v74, a3, (uint64_t)a4) & 1) == 0)
        {
          v84 = scn_default_log();
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            _C3DNodeInitWithPropertyList_cold_5();
          return 0;
        }
        C3DTransformSetAxisAngle(a1 + 96, v94);
        goto LABEL_66;
      }
      v83 = CFDictionaryGetValue(v68, CFSTR("matrix4x4"));
      if (!v83)
      {
        v85 = scn_default_log();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
          _C3DNodeInitWithPropertyList_cold_2((uint64_t)a2, v85, v86, v87, v88, v89, v90, v91);
        return 0;
      }
      if ((C3DMatrix4x4InitWithPropertyList((uint64_t)&context, (uint64_t)v83, a3, (uint64_t)a4) & 1) == 0)
      {
        v92 = scn_default_log();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
          _C3DNodeInitWithPropertyList_cold_4();
        return 0;
      }
      v93[0] = context;
      v93[1] = v98;
      v93[2] = v99;
      v93[3] = v100;
      v71.n128_f64[0] = C3DMatrix4x4GetRotation(v93);
      v94 = v71;
      v70 = a1 + 96;
    }
    C3DTransformSetQuaternion(v70, v71);
LABEL_66:
    if ((v58 & 1) != 0)
    {
LABEL_37:
      if (CFDictionaryGetValue(v54, CFSTR("pivot")))
      {
        v56 = scn_default_log();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          _C3DNodeInitWithPropertyList_cold_3();
      }
LABEL_40:
      __C3DNodeTransformDidChange((float32x4_t *)a1);
      return 1;
    }
LABEL_67:
    v75 = scn_default_log();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      _C3DNodeInitWithPropertyList_cold_1((uint64_t)a2, v75, v76, v77, v78, v79, v80, v81);
      if (!a4)
        return 0;
    }
    else if (!a4)
    {
      return 0;
    }
    if (!*a4)
      *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
    return 0;
  }
  if (C3DMatrix4x4InitWithPropertyList((uint64_t)&context, (uint64_t)v55, a3, (uint64_t)a4))
  {
    C3DTransformSetMatrix(a1 + 96, (uint64_t)&context);
    goto LABEL_37;
  }
  v59 = scn_default_log();
  if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    _C3DNodeInitWithPropertyList_cold_8((uint64_t)a2, v59, v60, v61, v62, v63, v64, v65);
  return 0;
}

__CFDictionary *_C3DNodeCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *Attributes;
  const __CFDictionary *Morpher;
  uint64_t v16;
  const __CFDictionary *Skinner;
  char v18;
  __CFDictionary *v19;
  void *Value;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  uint64_t v24;
  const void *v25;
  CFMutableDictionaryRef Mutable;
  _OWORD v28[4];
  __int16 valuePtr;

  valuePtr = 0;
  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Attributes = (const __CFDictionary *)C3DEntityGetAttributes(a1);
  Morpher = (const __CFDictionary *)C3DNodeGetMorpher(a1);
  if (Morpher)
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kMorpherKey"), Morpher, 0);
  v16 = *(_QWORD *)(a1 + 248);
  if (v16 && (Skinner = (const __CFDictionary *)C3DDeformerStackGetSkinner(v16)) != 0)
  {
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kSkinnerKey"), Skinner, 0);
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  v19 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (Morpher)
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kMorpherKey"), 0, 0);
  if ((v18 & 1) == 0)
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kSkinnerKey"), 0, 0);
  if (v19)
  {
    Value = (void *)CFDictionaryGetValue(v19, CFSTR("attributes"));
    if (!Value)
    {
      Value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(v19, CFSTR("attributes"), Value);
      CFRelease(Value);
    }
    _serializeNodeAttribute(a1, Attributes, CFSTR("kMeshKey"), a2, (__CFDictionary *)Value);
    _serializeNodeAttribute(a1, Attributes, CFSTR("kCameraKey"), a2, (__CFDictionary *)Value);
    _serializeNodeAttribute(a1, Attributes, CFSTR("kLightKey"), a2, (__CFDictionary *)Value);
    _serializeNodeAttribute(a1, Attributes, CFSTR("kLightmapInfoKey"), a2, (__CFDictionary *)Value);
    valuePtr = *(unsigned __int8 *)(a1 + 200);
    v21 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
    CFDictionaryAddValue(v19, CFSTR("hidden"), v21);
    CFRelease(v21);
    v22 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(a1 + 204));
    CFDictionaryAddValue(v19, CFSTR("alpha"), v22);
    CFRelease(v22);
    v23 = CFNumberCreate(0, kCFNumberNSIntegerType, (const void *)(a1 + 208));
    CFDictionaryAddValue(v19, CFSTR("category"), v23);
    CFRelease(v23);
    if ((*(_BYTE *)(a1 + 221) & 1) != 0)
      CFDictionaryAddValue(v19, CFSTR("isJoint"), (const void *)*MEMORY[0x1E0C9AE50]);
    memset(v28, 0, sizeof(v28));
    C3DNodeGetMatrix(a1, (uint64_t)v28);
    v24 = C3DMatrix4x4CopyPropertyList((uint64_t)v28);
    if (v24)
    {
      v25 = (const void *)v24;
      Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(v19, CFSTR("transforms"), Mutable);
      CFDictionaryAddValue(Mutable, CFSTR("matrix4x4"), v25);
      CFRelease(v25);
      CFRelease(Mutable);
    }
  }
  return v19;
}

BOOL _C3DNodeFinalizeDeserialization(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *Attributes;
  const __CFDictionary *Value;
  const __CFDictionary *v18;
  const __CFNumber *v19;
  const __CFNumber *v20;
  CFTypeID v21;
  uint64_t v22;
  uint64_t TypeID;
  void *v24;
  __C3DGeometry *Entry;
  _BOOL8 result;
  NSObject *v27;
  NSObject *v28;
  const __CFNumber *v29;
  const __CFNumber *v30;
  CFTypeID v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const __CFDictionary *v35;
  NSObject *v36;
  NSObject *v37;
  const __CFNumber *v38;
  const __CFNumber *v39;
  CFTypeID v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const __CFDictionary *v44;
  NSObject *v45;
  NSObject *v46;
  const __CFDictionary *v47;
  const __CFNumber *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  const void *v53;
  __CFDictionary *MutableCopy;
  uint64_t v55;
  const void *Skinner;
  const void *v57;
  int v58;
  uint64_t OverrideMaterial;
  uint64_t Joints;
  uint64_t *v61;
  NSObject *v62;
  char v63;
  CFErrorRef MalformedDocumentError;
  NSObject *v65;
  uint64_t Geometry;
  uint64_t Morpher;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint8_t v71[16];
  uint8_t v72[16];
  uint8_t buf[12];
  int valuePtr;

  valuePtr = 0;
  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Attributes = (const void *)C3DEntityGetAttributes(a1);
  Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("attributes"));
  if (!Attributes)
    return 1;
  v18 = Value;
  CFRetain(Attributes);
  v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)Attributes, CFSTR("kMeshKey"));
  if (v19)
  {
    v20 = v19;
    v21 = CFGetTypeID(v19);
    if (v21 == CFNumberGetTypeID())
    {
      if (!CFNumberGetValue(v20, kCFNumberIntType, &valuePtr))
      {
        v27 = scn_default_log();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          _C3DNodeFinalizeDeserialization_cold_3();
          if (a4)
            goto LABEL_35;
          goto LABEL_37;
        }
        goto LABEL_34;
      }
      v22 = valuePtr;
      TypeID = C3DGeometryGetTypeID();
      valuePtr = C3DLibraryGetRemappedID(a2, v22, TypeID);
      v24 = (void *)C3DGeometryGetTypeID();
      Entry = (__C3DGeometry *)C3DLibraryGetEntry(a2, v24, (const void *)valuePtr);
      if (Entry)
      {
        C3DNodeSetGeometry(a1, Entry);
      }
      else
      {
        v28 = scn_default_log();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1DCCB8000, v28, OS_LOG_TYPE_DEFAULT, "Warning: Node<->attribute inconsistency finalizing deserialization", buf, 2u);
        }
        _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kMeshKey"), 0, 0);
      }
    }
  }
  v29 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)Attributes, CFSTR("kCameraKey"));
  if (v29)
  {
    v30 = v29;
    v31 = CFGetTypeID(v29);
    if (v31 == CFNumberGetTypeID())
    {
      if (!CFNumberGetValue(v30, kCFNumberIntType, &valuePtr))
      {
        v36 = scn_default_log();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          _C3DNodeFinalizeDeserialization_cold_3();
          if (a4)
            goto LABEL_35;
          goto LABEL_37;
        }
        goto LABEL_34;
      }
      v32 = valuePtr;
      v33 = C3DCameraGetTypeID();
      valuePtr = C3DLibraryGetRemappedID(a2, v32, v33);
      v34 = (void *)C3DCameraGetTypeID();
      v35 = (const __CFDictionary *)C3DLibraryGetEntry(a2, v34, (const void *)valuePtr);
      if (v35)
      {
        C3DNodeSetCamera(a1, v35);
      }
      else
      {
        v37 = scn_default_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v72 = 0;
          _os_log_impl(&dword_1DCCB8000, v37, OS_LOG_TYPE_DEFAULT, "Warning: Node<->attribute inconsistency finalizing deserialization", v72, 2u);
        }
        _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kCameraKey"), 0, 0);
      }
    }
  }
  v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)Attributes, CFSTR("kLightKey"));
  if (!v38)
    goto LABEL_41;
  v39 = v38;
  v40 = CFGetTypeID(v38);
  if (v40 != CFNumberGetTypeID())
    goto LABEL_41;
  if (!CFNumberGetValue(v39, kCFNumberIntType, &valuePtr))
  {
    v45 = scn_default_log();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      _C3DNodeFinalizeDeserialization_cold_3();
      if (a4)
      {
LABEL_35:
        if (!*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      }
LABEL_37:
      CFRelease(Attributes);
      return 0;
    }
LABEL_34:
    if (a4)
      goto LABEL_35;
    goto LABEL_37;
  }
  v41 = valuePtr;
  v42 = C3DLightGetTypeID();
  valuePtr = C3DLibraryGetRemappedID(a2, v41, v42);
  v43 = (void *)C3DLightGetTypeID();
  v44 = (const __CFDictionary *)C3DLibraryGetEntry(a2, v43, (const void *)valuePtr);
  if (v44)
  {
    C3DNodeSetLight((float32x4_t *)a1, v44);
  }
  else
  {
    v46 = scn_default_log();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v71 = 0;
      _os_log_impl(&dword_1DCCB8000, v46, OS_LOG_TYPE_DEFAULT, "Warning: Node<->attribute inconsistency finalizing deserialization", v71, 2u);
    }
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kLightKey"), 0, 0);
  }
LABEL_41:
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFFBFF | ((C3DEntityGetAttribute(a1, CFSTR("kCameraKey")) != 0) << 10);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFFDFF | ((C3DEntityGetAttribute(a1, CFSTR("kLightKey")) != 0) << 9);
  v47 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Attributes, CFSTR("kLightmapInfoKey"));
  CFRelease(Attributes);
  if (!v47)
    goto LABEL_46;
  v48 = (const __CFNumber *)CFDictionaryGetValue(v47, CFSTR("image"));
  if (!v48 || !CFNumberGetValue(v48, kCFNumberIntType, &valuePtr))
  {
    v62 = scn_default_log();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      _C3DNodeFinalizeDeserialization_cold_1();
LABEL_53:
    if (a4 && !*a4)
    {
      MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
      result = 0;
      *a4 = MalformedDocumentError;
      return result;
    }
    return 0;
  }
  v49 = valuePtr;
  v50 = C3DImageGetTypeID();
  valuePtr = C3DLibraryGetRemappedID(a2, v49, v50);
  v51 = (void *)C3DImageGetTypeID();
  v52 = C3DLibraryGetEntry(a2, v51, (const void *)valuePtr);
  if (!v52)
  {
    v65 = scn_default_log();
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      _C3DNodeFinalizeDeserialization_cold_2();
    goto LABEL_53;
  }
  v53 = v52;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v47);
  CFDictionarySetValue(MutableCopy, CFSTR("image"), v53);
  C3DNodeSetLightmapInfo(a1, MutableCopy);
  CFRelease(MutableCopy);
LABEL_46:
  v55 = *(_QWORD *)(a1 + 248);
  if (v55)
  {
    Skinner = (const void *)C3DDeformerStackGetSkinner(v55);
    if (Skinner)
    {
      v57 = CFDictionaryGetValue(v18, CFSTR("kSkinnerKey"));
      v58 = C3DFinalizeDeserialization(Skinner, a2, (uint64_t)v57, (uint64_t)a4) & 1;
      OverrideMaterial = C3DGeometryGetOverrideMaterial((uint64_t)Skinner);
      if (OverrideMaterial)
      {
        Joints = C3DSkinnerGetJoints(OverrideMaterial);
        v61 = Joints ? (uint64_t *)C3DGeometryGetMesh(Joints) : 0;
        Geometry = C3DNodeGetGeometry(a1);
        if (Geometry)
        {
          if (v61)
            C3DGeometrySetMesh(Geometry, v61);
        }
      }
      __C3DComputeLocalBoundingBox(a1);
      v63 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    Skinner = 0;
  }
  v63 = 1;
  v58 = 1;
LABEL_66:
  Morpher = C3DNodeGetMorpher(a1);
  if (Morpher)
  {
    v68 = (const void *)Morpher;
    v69 = CFDictionaryGetValue(v18, CFSTR("kMorpherKey"));
    v58 &= C3DFinalizeDeserialization(v68, a2, (uint64_t)v69, (uint64_t)a4);
    if ((v63 & 1) == 0)
    {
      v70 = C3DGeometryGetOverrideMaterial((uint64_t)Skinner);
      if (v70)
        C3DSkinSetInfluencingMorpher(v70, v68);
    }
  }
  return v58 != 0;
}

void _C3DNodeFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const __CFDictionary *Attributes;
  const void *Value;
  const void *v16;
  const __CFDictionary *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  const void *Skinner;
  const void *Morpher;
  const __CFDictionary *LightmapInfo;
  const void *v25;
  const void *v26;
  uint64_t TypeID;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD *(*v31)(uint64_t, const void *);
  void *v32;
  uint64_t v33;
  uint64_t v34;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if ((*(_BYTE *)(a1 + 222) & 2) == 0)
  {
    if (C3DEntityGetAttributes(a1))
    {
      Attributes = (const __CFDictionary *)C3DEntityGetAttributes(a1);
      Value = CFDictionaryGetValue(Attributes, CFSTR("kLightKey"));
      if (Value)
      {
        v16 = Value;
        C3DLibraryAddEntry(a2, Value);
        C3DFillLibraryForSerialization(v16, a2, a3);
      }
    }
    if (C3DEntityGetAttributes(a1))
    {
      v17 = (const __CFDictionary *)C3DEntityGetAttributes(a1);
      v18 = CFDictionaryGetValue(v17, CFSTR("kCameraKey"));
      if (v18)
      {
        v19 = v18;
        C3DLibraryAddEntry(a2, v18);
        C3DFillLibraryForSerialization(v19, a2, a3);
      }
    }
    v20 = *(const void **)(a1 + 240);
    if (v20)
    {
      C3DLibraryAddEntry(a2, v20);
      C3DFillLibraryForSerialization(*(const void **)(a1 + 240), a2, a3);
    }
    v21 = *(_QWORD *)(a1 + 248);
    if (v21)
    {
      Skinner = (const void *)C3DDeformerStackGetSkinner(v21);
      if (Skinner)
        C3DFillLibraryForSerialization(Skinner, a2, a3);
    }
    Morpher = (const void *)C3DNodeGetMorpher(a1);
    if (Morpher)
      C3DFillLibraryForSerialization(Morpher, a2, a3);
    LightmapInfo = C3DNodeGetLightmapInfo(a1);
    if (LightmapInfo)
    {
      v25 = CFDictionaryGetValue(LightmapInfo, CFSTR("image"));
      if (v25)
      {
        v26 = v25;
        TypeID = C3DImageGetTypeID();
        if (TypeID == CFGetTypeID(v26))
        {
          C3DLibraryAddEntry(a2, v26);
          C3DFillLibraryForSerialization(v26, a2, a3);
        }
      }
    }
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v31 = ___C3DNodeFillLibraryForSerialization_block_invoke;
    v32 = &__block_descriptor_tmp_94;
    v33 = a2;
    v34 = a3;
    v28 = *(_QWORD *)(a1 + 72);
    if (v28)
    {
      v29 = 0;
      do
      {
        ((void (*)(_QWORD *, uint64_t, uint64_t))v31)(v30, v28, v29++);
        v28 = *(_QWORD *)(v28 + 80);
      }
      while (v28);
    }
  }
}

void _fillPatchedDictionay(CFStringRef theString, void *value, uint64_t a3)
{
  __CFDictionary *v5;
  CFStringRef v7;
  CFStringRef v8;
  CFRange v9;

  v5 = *(__CFDictionary **)a3;
  if (theString
    && CFStringHasPrefix(theString, CFSTR("kC3D"))
    && (v9.length = CFStringGetLength(theString) - 4,
        v9.location = 4,
        v7 = CFStringCreateWithSubstring(0, theString, v9),
        v8 = CFStringCreateWithFormat(0, 0, CFSTR("k%@"), v7),
        CFRelease(v7),
        v8))
  {
    *(_QWORD *)(a3 + 8) = 1;
    CFDictionaryAddValue(v5, v8, value);
    CFRelease(v8);
  }
  else
  {
    CFDictionaryAddValue(v5, theString, value);
  }
}

void _serializeNodeAttribute(uint64_t a1, const __CFDictionary *a2, CFStringRef theString1, uint64_t a4, __CFDictionary *a5)
{
  const void *Value;
  const __CFDictionary *v11;
  const __CFDictionary *MutableCopy;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  unsigned int EntryID;
  unsigned int valuePtr;

  if (CFStringCompare(theString1, CFSTR("kLightmapInfoKey"), 0))
  {
    if (CFSTR("kMeshKey") == theString1)
    {
      Value = *(const void **)(a1 + 240);
      if (!Value)
        return;
    }
    else
    {
      if (!a2)
        return;
      Value = CFDictionaryGetValue(a2, theString1);
      if (!Value)
        return;
    }
    EntryID = C3DLibraryGetEntryID(a4, Value);
    if (!EntryID)
      return;
    v26 = CFNumberCreate(0, kCFNumberIntType, &EntryID);
    CFDictionarySetValue(a5, theString1, v26);
    v25 = v26;
LABEL_18:
    CFRelease(v25);
    return;
  }
  if (a2)
  {
    v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("kLightmapInfoKey"));
    if (v11)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v11);
      v13 = CFDictionaryGetValue(MutableCopy, CFSTR("image"));
      if (v13)
      {
        v14 = v13;
        v15 = CFGetTypeID(v13);
        if (v15 == C3DImageGetTypeID())
        {
          valuePtr = C3DLibraryGetEntryID(a4, v14);
          if (!valuePtr)
          {
            v16 = scn_default_log();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
              _serializeNodeAttribute_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
          }
          v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFDictionarySetValue(MutableCopy, CFSTR("image"), v24);
          CFRelease(v24);
          CFDictionarySetValue(a5, CFSTR("kLightmapInfoKey"), MutableCopy);
        }
      }
      v25 = MutableCopy;
      goto LABEL_18;
    }
  }
}

__CFArray *_C3DNodeCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  const CFDictionaryKeyCallBacks *v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  const CFDictionaryValueCallBacks *v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  __CFDictionary *v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  uint64_t v56;
  __CFDictionary *v57;
  uint64_t Skinner;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  uint64_t ID;
  uint64_t valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x500000001;
  ID = C3DEntityGetID(a1);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v8 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("id"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  valuePtr = 0x500000001;
  ID = C3DEntityGetName(a1);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v12 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  valuePtr = 0x500000001;
  ID = C3DEntityGetAttributes(a1);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v16 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0xB00000000;
  ID = a1 + 96;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v20 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("transforms"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v22 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x500000002;
  ID = a1 + 72;
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("firstChild"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v26 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v27 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v21);
  valuePtr = 0x500000002;
  ID = a1 + 80;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("nextSibling"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v26, MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x100000000;
  ID = a1 + 204;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("opacity"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = CFDictionaryCreateMutable(0, 4, v26, MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x300000000;
  ID = a1 + 200;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("hidden"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  v39 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v40 = CFDictionaryCreateMutable(0, 4, v26, MEMORY[0x1E0C9B3A0]);
  ID = a1 + 64;
  valuePtr = 0;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v43 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("parent"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = CFDictionaryCreateMutable(0, 4, v26, v39);
  valuePtr = 0x500000002;
  ID = a1 + 240;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v47 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v44, CFSTR("name"), CFSTR("geometry"));
  CFDictionarySetValue(v44, CFSTR("type"), v45);
  CFDictionarySetValue(v44, CFSTR("address"), v47);
  CFDictionarySetValue(v44, CFSTR("semantic"), v46);
  CFArrayAppendValue(Mutable, v44);
  CFRelease(v46);
  CFRelease(v44);
  CFRelease(v47);
  CFRelease(v45);
  v48 = CFDictionaryCreateMutable(0, 4, v26, MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x200000000;
  ID = a1 + 208;
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v51 = CFNumberCreate(0, kCFNumberLongType, &ID);
  CFDictionarySetValue(v48, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v48, CFSTR("type"), v49);
  CFDictionarySetValue(v48, CFSTR("address"), v51);
  CFDictionarySetValue(v48, CFSTR("semantic"), v50);
  CFArrayAppendValue(Mutable, v48);
  CFRelease(v50);
  CFRelease(v48);
  CFRelease(v51);
  CFRelease(v49);
  if (C3DNodeGetMorpher(a1))
  {
    v52 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    valuePtr = 0x500000001;
    ID = C3DNodeGetMorpher(a1);
    v53 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v54 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v55 = CFNumberCreate(0, kCFNumberLongType, &ID);
    CFDictionarySetValue(v52, CFSTR("name"), CFSTR("morpher"));
    CFDictionarySetValue(v52, CFSTR("type"), v53);
    CFDictionarySetValue(v52, CFSTR("address"), v55);
    CFDictionarySetValue(v52, CFSTR("semantic"), v54);
    CFArrayAppendValue(Mutable, v52);
    CFRelease(v54);
    CFRelease(v52);
    CFRelease(v55);
    CFRelease(v53);
  }
  v56 = *(_QWORD *)(a1 + 248);
  if (v56 && C3DDeformerStackGetSkinner(v56))
  {
    v57 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    valuePtr = 0x500000001;
    Skinner = *(_QWORD *)(a1 + 248);
    if (Skinner)
      Skinner = C3DDeformerStackGetSkinner(Skinner);
    ID = Skinner;
    v59 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v60 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v61 = CFNumberCreate(0, kCFNumberLongType, &ID);
    CFDictionarySetValue(v57, CFSTR("name"), CFSTR("skinner"));
    CFDictionarySetValue(v57, CFSTR("type"), v59);
    CFDictionarySetValue(v57, CFSTR("address"), v61);
    CFDictionarySetValue(v57, CFSTR("semantic"), v60);
    CFArrayAppendValue(Mutable, v57);
    CFRelease(v60);
    CFRelease(v57);
    CFRelease(v61);
    CFRelease(v59);
  }
  return Mutable;
}

uint64_t _C3DNodeGetBoundingBox(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v10 = 0u;
  v11 = 0u;
  if (a2)
  {
    if ((C3DNodeComputeHierarchicalBoundingBox(a1, 1, &v10) & 1) != 0)
    {
LABEL_3:
      v6 = v10;
      v7 = v11;
      *a3 = vsubq_f32(v10, v11);
      *a4 = vaddq_f32(v6, v7);
      return 1;
    }
  }
  else
  {
    v9 = a1[18];
    v10 = a1[17];
    v11 = v9;
    if ((vminvq_u32((uint32x4_t)vcgezq_f32(a1[18])) & 0x80000000) != 0)
      goto LABEL_3;
  }
  return 0;
}

uint64_t _C3DNodeGetBoundingSphere(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Geometry;
  uint64_t v15;
  uint64_t Skinner;
  char v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  __n128 *v22;
  unsigned int v23;
  __n128 Scale;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;

  if (!a3)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DNodeGetBoundingSphere_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v31 = 0uLL;
  v30 = 0uLL;
  Geometry = C3DNodeGetGeometry((uint64_t)a1);
  if (!Geometry)
  {
LABEL_8:
    if (!(_DWORD)a2)
      goto LABEL_27;
    goto LABEL_11;
  }
  v15 = a1[15].i64[1];
  if (v15)
  {
    Skinner = C3DDeformerStackGetSkinner(v15);
    if (Skinner)
    {
      v26 = 0u;
      v27 = 0u;
      C3DSkinnerGetBoundingBox(Skinner, a1, (uint64_t)&v26);
      LOBYTE(Geometry) = v17;
      v18 = v26;
      v18.i32[3] = vmaxvq_f32(v27);
      v31 = v18;
      goto LABEL_8;
    }
  }
  LOBYTE(Geometry) = C3DGetBoundingSphere((CFTypeRef)Geometry, a2, (uint64_t)&v31);
  if (!(_DWORD)a2)
    goto LABEL_27;
LABEL_11:
  v19 = a1[4].i64[1];
  if (v19)
  {
    LODWORD(v20) = 0;
    do
    {
      v20 = (v20 + 1);
      v19 = *(_QWORD *)(v19 + 80);
    }
    while (v19);
    if ((_DWORD)v20)
    {
      for (i = 0; i != v20; ++i)
      {
        v22 = (__n128 *)a1[4].i64[1];
        if ((_DWORD)i && v22)
        {
          v23 = 1;
          do
          {
            v22 = (__n128 *)v22[5].n128_u64[0];
            if (v23 >= i)
              break;
            ++v23;
          }
          while (v22);
        }
        if (C3DGetBoundingSphere(v22, 1, (uint64_t)&v30))
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          C3DNodeGetMatrix((uint64_t)v22, (uint64_t)&v26);
          Scale = C3DTransformGetScale(v22 + 6);
          C3DTransformBoundingSphere(&v30, &v26, (__n128 *)&v30, Scale);
          if ((Geometry & 1) != 0)
            C3DSphereMakeByMergingSpheres(&v31, &v30, &v31);
          else
            v31 = v30;
          LOBYTE(Geometry) = 1;
        }
      }
    }
  }
LABEL_27:
  if ((Geometry & 1) == 0)
    return 0;
  *a3 = v31;
  return 1;
}

void _C3DNodeSetValue(uint64_t a1, __n128 *__dst, __int128 *__src, size_t __n, int a5, unsigned int a6, __n128 a7)
{
  if ((__n128 *)(a1 + 96) == __dst)
  {
    C3DTransformSetValue(__dst, __src, __n, a5, a6, a7);
    __C3DNodeTransformDidChange((float32x4_t *)a1);
  }
  else if (*(__n128 **)(a1 + 192) == __dst)
  {
    C3DNodeSetPivotMatrix((float32x4_t *)a1, __src);
  }
  else if ((__n128 *)(a1 + 204) == __dst)
  {
    C3DNodeSetOpacity(a1, *(float *)__src);
  }
  else if ((__n128 *)(a1 + 200) == __dst)
  {
    C3DNodeSetHidden(a1, *(unsigned __int8 *)__src);
  }
  else
  {
    memcpy(__dst, __src, __n);
  }
}

void _C3DNodeWillRemoveFromScene(uint64_t a1, uint64_t a2)
{
  __C3DTransformTree *TransformTree;
  __C3DCullingSystem *CullingSystem;

  C3DSceneNodeWillBeRemoved(a2, a1);
  if (*(_DWORD *)(a1 + 88) != -1)
  {
    TransformTree = (__C3DTransformTree *)C3DSceneGetTransformTree(a2);
    if (TransformTree)
      C3DTransformTreeRemoveNode(TransformTree, *(unsigned int *)(a1 + 88));
    *(_DWORD *)(a1 + 88) = -1;
  }
  if (*(_DWORD *)(a1 + 216) != -1)
  {
    CullingSystem = (__C3DCullingSystem *)C3DSceneGetCullingSystem(a2);
    if (CullingSystem)
      C3DCullingSystemRemove(CullingSystem, *(_DWORD *)(a1 + 216));
    *(_DWORD *)(a1 + 216) = -1;
  }
}

uint64_t _C3DNodeSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;
  const void *Name;
  uint64_t v6;
  const void *Geometry;
  const __CFDictionary *Light;
  const void *Morpher;
  const void *Skinner;
  const void *Floor;
  const __CFDictionary *Camera;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  Name = (const void *)C3DEntityGetName(a1);
  if (Name)
  {
    if (C3DEqual(Name, a2))
      return a1;
  }
  Geometry = (const void *)C3DNodeGetGeometry(a1);
  v6 = C3DSearchByID(Geometry, (uint64_t)a2);
  if (!v6)
  {
    Light = C3DNodeGetLight(a1);
    v6 = C3DSearchByID(Light, (uint64_t)a2);
    if (!v6)
    {
      Morpher = (const void *)C3DNodeGetMorpher(a1);
      v6 = C3DSearchByID(Morpher, (uint64_t)a2);
      if (!v6)
      {
        Skinner = *(const void **)(a1 + 248);
        if (Skinner)
          Skinner = (const void *)C3DDeformerStackGetSkinner((uint64_t)Skinner);
        v6 = C3DSearchByID(Skinner, (uint64_t)a2);
        if (!v6)
        {
          Floor = (const void *)C3DNodeGetFloor(a1);
          v6 = C3DSearchByID(Floor, (uint64_t)a2);
          if (!v6)
          {
            Camera = C3DNodeGetCamera(a1);
            v6 = C3DSearchByID(Camera, (uint64_t)a2);
            if (!v6)
            {
              v15 = 0;
              v16 = &v15;
              v17 = 0x2000000000;
              v18 = 0;
              v14[0] = MEMORY[0x1E0C809B0];
              v14[1] = 0x40000000;
              v14[2] = ___C3DNodeSearchByID_block_invoke;
              v14[3] = &unk_1EA5A1AE8;
              v14[4] = &v15;
              v14[5] = a2;
              C3DNodeApplyChildrenInterruptible(a1, (uint64_t)v14);
              v6 = v16[3];
              _Block_object_dispose(&v15, 8);
            }
          }
        }
      }
    }
  }
  return v6;
}

void sub_1DCE15EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C40DB73C136);
  _Unwind_Resume(a1);
}

void sub_1DCE16088(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C40DB73C136);
  _Unwind_Resume(a1);
}

void SCNCActionFade::~SCNCActionFade(SCNCActionFade *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

SCNCAction *SCNCActionFade::cpp_updateWithTargetForTime(SCNCActionFade *this, SCNNode *a2, double a3)
{
  float v6;
  double v7;
  float v8;
  SCNCAction *result;

  v6 = SCNCAction::cpp_ratioForTime((SCNCAction *)this, a3);
  if (this->var22)
  {
    -[SCNNode opacity](a2, "opacity");
    *(float *)&v7 = v7;
    v8 = this->var19 * v6;
    result = (SCNCAction *)-[SCNNode setOpacity:](a2, "setOpacity:", (float)(v8 + (float)(*(float *)&v7 - this->var21)));
    this->var21 = v8;
  }
  else
  {
    result = (SCNCAction *)-[SCNNode setOpacity:](a2, "setOpacity:", (float)((float)(this->var19 * v6) + (float)(this->var21 * (float)(1.0 - v6))));
  }
  if ((COERCE_UNSIGNED_INT(v6 + -1.0) & 0x60000000) == 0)
    return SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
  return result;
}

SCNCAction *SCNCActionFade::cpp_willStartWithTargetAtTime(SCNCActionFade *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  double v6;

  result = SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  LODWORD(v6) = 0;
  if (!this->var22)
  {
    result = (SCNCAction *)-[SCNNode opacity](a2, "opacity", v6);
    *(float *)&v6 = v6;
  }
  this->var21 = *(float *)&v6;
  return result;
}

void *__DropOriginalTopology(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFIndex Count;
  void *v23;

  if (!*(_QWORD *)(a1 + 112))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __DropOriginalTopology_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!*(_QWORD *)(a1 + 144))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __DropOriginalTopology_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *(CFTypeRef *)(a1 + 64);
  v19 = *(CFTypeRef *)(a1 + 112);
  if (v18 != v19)
  {
    if (v18)
    {
      CFRelease(*(CFTypeRef *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
      v19 = *(CFTypeRef *)(a1 + 112);
    }
    if (v19)
      v19 = CFRetain(v19);
    *(_QWORD *)(a1 + 64) = v19;
  }
  v20 = *(CFTypeRef *)(a1 + 96);
  v21 = *(CFTypeRef *)(a1 + 144);
  if (v20 != v21)
  {
    if (v20)
    {
      CFRelease(*(CFTypeRef *)(a1 + 96));
      *(_QWORD *)(a1 + 96) = 0;
      v21 = *(CFTypeRef *)(a1 + 144);
    }
    if (v21)
      v21 = CFRetain(v21);
    *(_QWORD *)(a1 + 96) = v21;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 120);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 136);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 112));
  free(*(void **)(a1 + 104));
  v23 = malloc_type_malloc(Count, 0xC898C1B3uLL);
  *(_QWORD *)(a1 + 104) = v23;
  return memcpy(v23, *(const void **)(a1 + 152), Count);
}

uint64_t _C3DMeshFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *Value;
  const __CFArray *v17;
  CFIndex v18;
  char v19;
  const void *v20;
  CFTypeID v21;
  _QWORD *SourceWithID;
  const void *v23;
  const void *v24;
  const void *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFDictionary *v35;
  const __CFArray *v36;
  const __CFArray *v37;
  CFIndex Count;
  CFIndex v39;
  CFIndex v40;
  const void *ValueAtIndex;
  const void *v42;
  int v43;
  uint64_t result;
  NSObject *v45;
  CFErrorRef MalformedDocumentError;
  NSObject *v47;
  NSObject *v48;
  unsigned __int8 v49;
  __int128 buf;
  CFErrorRef *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v49 = 1;
  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("sources"));
  if (!Value)
  {
    v28 = scn_default_log();
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      goto LABEL_32;
    _C3DMeshFinalizeDeserialization_cold_1((uint64_t)theDict, v28, v29, v30, v31, v32, v33, v34);
    if (!a4)
      return 0;
    goto LABEL_33;
  }
  v17 = Value;
  if (CFArrayGetCount(Value) < 1)
  {
    v19 = 1;
LABEL_22:
    v35 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("primarySourcesInfo"));
    if (v35)
    {
      *(_QWORD *)&buf = a2;
      *((_QWORD *)&buf + 1) = &v49;
      v51 = a4;
      CFDictionaryApplyFunction(v35, (CFDictionaryApplierFunction)__DeserializePrimarySource, &buf);
      v19 = v49;
      if (!v49)
      {
        v47 = scn_default_log();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          _C3DMeshFinalizeDeserialization_cold_4();
        return 0;
      }
    }
    if (v19 == 1
      && (v36 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("geometryElements"))) != 0
      && (v37 = v36, Count = CFArrayGetCount(v36), Count >= 1))
    {
      v39 = Count;
      v40 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v37, v40);
        v42 = (const void *)C3DMeshElementCreate();
        v43 = C3DInitWithPropertyList(v42, (uint64_t)ValueAtIndex, 0, (uint64_t)a4);
        v49 = v43;
        if (!v43)
          break;
        C3DMeshAppendElement(a1, v42);
        CFRelease(v42);
        if (v39 == ++v40)
          goto LABEL_30;
      }
      v48 = scn_default_log();
      result = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        _C3DMeshFinalizeDeserialization_cold_3();
        return 0;
      }
    }
    else
    {
LABEL_30:
      C3DMeshBuildRenderableData(a1, 1);
      return v49;
    }
    return result;
  }
  v18 = 0;
  v19 = 1;
  while (1)
  {
    v20 = CFArrayGetValueAtIndex(v17, v18);
    v21 = CFGetTypeID(v20);
    if (v21 != CFNumberGetTypeID())
    {
      v24 = (const void *)_C3DMeshSourceCreate();
      v25 = CFArrayGetValueAtIndex(v17, v18);
      v26 = C3DInitWithPropertyList(v24, (uint64_t)v25, 0, (uint64_t)a4);
      v19 = v26;
      v49 = v26;
      if (v26)
        __C3DMeshAddSourceWithDataKind(a1, v24, 0, 0, 0);
      CFRelease(v24);
      goto LABEL_14;
    }
    SourceWithID = __FindSourceWithID(a2, (CFNumberRef)v20);
    if (!SourceWithID)
      break;
    v23 = SourceWithID;
    if ((C3DMeshSourceGetSemantic((uint64_t)SourceWithID) - 7) > 0xFDu)
    {
      v27 = scn_default_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_INFO, "Info: Mesh deserialization: Skipped a source that will be recreated at runtime : %@", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      __C3DMeshAddSourceWithDataKind(a1, v23, 0, 0, 0);
    }
LABEL_14:
    if (++v18 >= CFArrayGetCount(v17))
      goto LABEL_22;
  }
  v45 = scn_default_log();
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    _C3DMeshFinalizeDeserialization_cold_2();
    if (!a4)
      return 0;
LABEL_33:
    if (*a4)
      return 0;
    MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
    result = 0;
    *a4 = MalformedDocumentError;
    return result;
  }
LABEL_32:
  if (a4)
    goto LABEL_33;
  return 0;
}

_QWORD *__FindSourceWithID(uint64_t a1, CFNumberRef number)
{
  uint64_t v3;
  uint64_t TypeID;
  _QWORD *result;
  const void *v6;
  void *v7;
  int valuePtr;

  valuePtr = 0;
  if (!CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
    return 0;
  v3 = valuePtr;
  TypeID = C3DMeshSourceGetTypeID();
  result = (_QWORD *)C3DLibraryGetRemappedID(a1, v3, TypeID);
  if (result)
  {
    v6 = result;
    v7 = (void *)C3DMeshSourceGetTypeID();
    return C3DLibraryGetEntry(a1, v7, v6);
  }
  return result;
}

void __DeserializePrimarySource(const __CFString *a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  CFErrorRef *v7;
  const __CFData *Value;
  const __CFArray *v9;
  uint64_t IntValue;
  uint64_t TypeID;
  const void *RemappedID;
  void *v13;
  _QWORD *Entry;
  uint64_t v15;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v18;
  CFIndex v19;
  CFIndex v20;
  const __CFNumber *ValueAtIndex;
  _QWORD *SourceWithID;
  const void *Accessor;
  NSObject *v24;
  __CFData *DeserializedDataWithAccessors;
  __CFArray *v26;
  NSObject *v27;
  NSObject *v28;
  const __CFData *theData;
  uint8_t v30[4];
  _DWORD v31[7];

  *(_QWORD *)&v31[5] = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = (_BYTE *)a3[1];
  v7 = (CFErrorRef *)a3[2];
  Value = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("data"));
  v9 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("subIDs"));
  IntValue = CFStringGetIntValue(a1);
  TypeID = C3DMeshSourceGetTypeID();
  RemappedID = (const void *)C3DLibraryGetRemappedID(v5, IntValue, TypeID);
  v13 = (void *)C3DMeshSourceGetTypeID();
  Entry = C3DLibraryGetEntry(v5, v13, RemappedID);
  if (Entry)
  {
    v15 = (uint64_t)Entry;
    theData = Value;
    Count = CFArrayGetCount(v9);
    Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
    v18 = CFArrayGetCount(v9);
    if (v18 >= 1)
    {
      v19 = v18;
      v20 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, v20);
        SourceWithID = __FindSourceWithID(v5, ValueAtIndex);
        if (!SourceWithID)
          break;
        Accessor = (const void *)C3DGenericSourceGetAccessor((uint64_t)SourceWithID);
        if (C3DSceneSourceGetURL((uint64_t)Accessor) != v15)
        {
          v24 = scn_default_log();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
            __DeserializePrimarySource_cold_3(v30, v31, v24);
        }
        CFArrayAppendValue(Mutable, Accessor);
        if (v19 == ++v20)
          goto LABEL_9;
      }
      *v6 = 0;
      if (v7 && !*v7)
        *v7 = C3DSceneSourceCreateMalformedDocumentError(0);
      v28 = scn_default_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        __DeserializePrimarySource_cold_2();
        if (!Mutable)
          return;
      }
      else if (!Mutable)
      {
        return;
      }
      v26 = Mutable;
      goto LABEL_24;
    }
LABEL_9:
    DeserializedDataWithAccessors = C3DGenericSourceCreateDeserializedDataWithAccessors(v15, theData, Mutable);
    C3DGenericSourceSetData(v15, DeserializedDataWithAccessors);
    if (Mutable)
      CFRelease(Mutable);
    if (DeserializedDataWithAccessors)
    {
      v26 = DeserializedDataWithAccessors;
LABEL_24:
      CFRelease(v26);
    }
  }
  else
  {
    *v6 = 0;
    if (v7 && !*v7)
      *v7 = C3DSceneSourceCreateMalformedDocumentError(0);
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      __DeserializePrimarySource_cold_1();
  }
}

uint64_t C3DMeshCreateVolatile()
{
  uint64_t result;

  result = C3DMeshCreate();
  *(_BYTE *)(result + 200) |= 1u;
  return result;
}

uint64_t C3DMeshCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DMeshCreate();
  __C3DMeshCopy(a1, v10, 0);
  return v10;
}

void __C3DMeshCopy(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex ElementsCount;
  __CFArray *Mutable;
  CFIndex i;
  const void *ElementAtIndex;
  const void *DeepCopy;
  const void *v27;
  const void *v28;
  const __CFAllocator *v29;
  const __CFArray *v30;
  CFMutableArrayRef MutableCopy;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryCopy_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DGeometryCopy_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  __C3DMeshCopySources(a1, a2, a3);
  if (a3)
  {
    ElementsCount = (CFIndex)C3DMeshGetElementsCount(a1);
    Mutable = CFArrayCreateMutable(0, ElementsCount, MEMORY[0x1E0C9B378]);
    if (ElementsCount >= 1)
    {
      for (i = 0; i != ElementsCount; ++i)
      {
        ElementAtIndex = C3DMeshGetElementAtIndex(a1, i, 0);
        DeepCopy = (const void *)C3DMeshElementCreateDeepCopy((uint64_t)ElementAtIndex);
        CFArrayAppendValue(Mutable, DeepCopy);
        CFRelease(DeepCopy);
      }
    }
    C3DMeshSetMeshElements(a2, Mutable);
    CFRelease(Mutable);
  }
  else
  {
    v27 = *(const void **)(a2 + 96);
    if (v27)
    {
      CFRelease(v27);
      *(_QWORD *)(a2 + 96) = 0;
    }
    v28 = *(const void **)(a2 + 144);
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(a2 + 144) = 0;
    }
    v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_QWORD *)(a2 + 96) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(a1 + 96));
    v30 = *(const __CFArray **)(a1 + 144);
    if (v30)
      MutableCopy = CFArrayCreateMutableCopy(v29, 0, v30);
    else
      MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a2 + 144) = MutableCopy;
  }
  *(_BYTE *)(a2 + 200) = *(_BYTE *)(a2 + 200) & 0x87 | *(_BYTE *)(a1 + 200) & 0x78;
  C3DEntityCopyTo(a1, (CFTypeRef *)a2);
}

uint64_t C3DMeshCreateDeepCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DMeshCreate();
  __C3DMeshCopy(a1, v10, 1);
  return v10;
}

uint64_t C3DMeshCreateRenderableCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DMeshCreate();
  __C3DMeshCopy(a1, v10, 1);
  C3DMeshBuildRenderableData(v10, 1);
  __DropOriginalTopology(v10);
  return v10;
}

uint64_t C3DMeshGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  const void *SourceWithSemanticAtIndex;
  uint64_t result;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  unsigned int v28;
  int v29;
  int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  _OWORD *v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  float32x4_t v38;
  float32x4_t v39;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_OWORD **)(a1 + 184);
  if (v12)
    goto LABEL_24;
  v36 = 0uLL;
  v39.i32[2] = 0;
  v39.i64[0] = 0;
  v38.i32[2] = 0;
  v38.i64[0] = 0;
  C3DMeshGetBoundingBox(a1, &v39, &v38);
  *(double *)&v13 = C3DVector3MidVector(v38, v39);
  v35 = (float32x4_t)v13;
  v37 = v13;
  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, 0, 0, 0);
  if (SourceWithSemanticAtIndex)
  {
    result = C3DMeshSourceGetContent((uint64_t)SourceWithSemanticAtIndex);
    if (!result)
      return result;
    v20 = result;
    v21 = v16;
    if ((v16 & 0xFF000000000000) == 0x1000000000000)
    {
      if ((_DWORD)v16)
      {
        v22 = 0;
        v23 = 0.0;
        do
        {
          v24 = result + v22;
          v17.i64[0] = *(_QWORD *)v24;
          v17.i32[2] = *(_DWORD *)(v24 + 8);
          v25 = vsubq_f32(v17, v35);
          v26 = vmulq_f32(v25, v25);
          v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)));
          if (v17.f32[0] > v23)
            v23 = v17.f32[0];
          v22 += BYTE5(v16);
          --v21;
        }
        while (v21);
        goto LABEL_22;
      }
    }
    else if ((_DWORD)v16)
    {
      v28 = 0;
      v29 = BYTE4(v16);
      v30 = BYTE5(v16);
      v23 = 0.0;
      do
      {
        *(double *)v31.i64 = C3DConvertFloatingTypeToFloat4(v29, (float *)(v20 + v28), v17, v18.f32[0], v19.f32[0]);
        v32 = vsubq_f32(v31, v35);
        v33 = vmulq_f32(v32, v32);
        v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1);
        v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2);
        v17 = vaddq_f32(v19, vaddq_f32(v33, v18));
        if (v17.f32[0] > v23)
          v23 = v17.f32[0];
        v28 += v30;
        --v21;
      }
      while (v21);
      goto LABEL_22;
    }
    v23 = 0.0;
LABEL_22:
    v27 = sqrtf(v23);
    goto LABEL_23;
  }
  v27 = 0.0;
LABEL_23:
  C3DSphereMake(&v36, &v37, v27);
  v34 = C3DMalloc(0x10uLL);
  *(_QWORD *)(a1 + 184) = v34;
  *v34 = v36;
  v12 = *(_OWORD **)(a1 + 184);
LABEL_24:
  *a2 = *v12;
  return 1;
}

void C3DMeshCopyBoundingVolumes(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  const __CFArray *ElementsCount;
  const __CFArray *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex i;
  _OWORD *ElementAtIndex;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  C3DMeshGetBoundingBox(a1, &v22, &v21);
  v4 = *(_OWORD **)(a2 + 192);
  if (!v4)
  {
    v4 = C3DMalloc(0x20uLL);
    *(_QWORD *)(a2 + 192) = v4;
  }
  *v4 = *(_OWORD *)*(_QWORD *)(a1 + 192);
  *(_OWORD *)(*(_QWORD *)(a2 + 192) + 16) = *(_OWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v20 = 0uLL;
  C3DMeshGetBoundingSphere(a1, &v20);
  v5 = *(_OWORD **)(a2 + 184);
  if (!v5)
  {
    v5 = C3DMalloc(0x10uLL);
    *(_QWORD *)(a2 + 184) = v5;
  }
  *v5 = v20;
  _C3DUpdateMeshElementsBBoxIfNeeded(a1);
  ElementsCount = C3DMeshGetElementsCount(a1);
  v7 = C3DMeshGetElementsCount(a2);
  if (ElementsCount != v7)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DMeshCopyBoundingVolumes_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((uint64_t)ElementsCount >= (uint64_t)v7)
    v16 = (uint64_t)v7;
  else
    v16 = (uint64_t)ElementsCount;
  if (v16 >= 1)
  {
    for (i = 0; i != v16; ++i)
    {
      ElementAtIndex = C3DMeshGetElementAtIndex(a1, i, 0);
      v19 = C3DMeshGetElementAtIndex(a2, i, 0);
      v19[11] = ElementAtIndex[11];
      v19[12] = ElementAtIndex[12];
    }
  }
  *(_BYTE *)(a2 + 200) |= 2u;
}

void __C3DMeshRemoveSourceWithSemanticAtIndex(uint64_t a1, int a2, uint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFArrayRef *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  CFIndex v29;
  CFIndex Count;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[5];

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (a4 == 1)
  {
    C3DMeshBuildRenderableData(a1, 1);
    v16 = (CFArrayRef *)(a1 + 112);
  }
  else if (a4)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      C3DMeshApplySources_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    v16 = 0;
  }
  else
  {
    v16 = (CFArrayRef *)(a1 + 64);
  }
  v25 = (char *)v16 + 2 * a2;
  v28 = v25[8];
  v27 = v25 + 8;
  v26 = v28;
  if (v28 != -1 && v27[1] > a3)
  {
    v29 = v26 + a3;
    Count = CFArrayGetCount(*v16);
    if (v29 >= Count)
    {
      v31 = scn_default_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        __C3DMeshRemoveSourceWithSemanticAtIndex_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    CFArrayRemoveValueAtIndex(*v16, v29);
    v39 = *(void **)(a1 + 152);
    if (v39)
    {
      free(v39);
      *(_QWORD *)(a1 + 152) = 0;
    }
    if (a4)
    {
      __BuildSemanticInfosForData(a1, (uint64_t)v16);
    }
    else
    {
      if (Count - 1 > v29)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 104) + v29) = *(_BYTE *)(*(_QWORD *)(a1 + 104) + v29 + 1);
          ++v29;
        }
        while (Count - 1 != v29);
      }
      __BuildSemanticInfosForData(a1, (uint64_t)v16);
      v40 = MEMORY[0x1E0C809B0];
      *(_BYTE *)(a1 + 200) &= ~4u;
      v41[0] = v40;
      v41[1] = 0x40000000;
      v41[2] = ____UpdateSourcesMutability_block_invoke;
      v41[3] = &__block_descriptor_tmp_35;
      v41[4] = a1;
      C3DMeshApplySources(a1, 0, (uint64_t)v41);
      __C3DMeshInvalidateRenderableData(a1);
    }
    __MeshWillDieNotification(a1);
  }
}

uint64_t C3DMeshSetSourceWithInputSet(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  return __C3DMeshSetSourceWithInputSetAndDataKind(a1, a2, a3, a4, 0);
}

uint64_t C3DMeshGetInputSetForSource(uint64_t a1, const void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFArrayRef *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DCreateTangentsWithGeometryOptimized_cold_8(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DKeyframedAnimationCopy_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (a3 == 1)
  {
    C3DMeshBuildRenderableData(a1, 1);
    v22 = (CFArrayRef *)(a1 + 112);
  }
  else if (a3)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      C3DMeshApplySources_cold_1(v23, v24, v25, v26, v27, v28, v29, v30);
    v22 = 0;
  }
  else
  {
    v22 = (CFArrayRef *)(a1 + 64);
  }
  v31 = (char *)v22 + 2 * (int)C3DMeshSourceGetSemantic((uint64_t)a2);
  v34 = v31[8];
  v32 = v31 + 8;
  v33 = v34;
  if (v34 == -1)
    return -1;
  v35 = v32[1];
  if (!v32[1])
    return -1;
  v36 = 0;
  while (CFArrayGetValueAtIndex(*v22, v33 + v36) != a2)
  {
    if (v35 == ++v36)
      return -1;
  }
  return v36;
}

BOOL C3DMeshHasSourcesWithSemantic(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v7;

  if (a3 == 1)
  {
    if (a4)
      C3DMeshBuildRenderableData(a1, 1);
    v7 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (a3)
      C3DMeshHasSourcesWithSemantic_cold_1();
    v7 = (_QWORD *)(a1 + 64);
  }
  return *v7 && __indexOfSourceWithSemanticAtIndex(a1, a2, 0, a3) != -1;
}

BOOL __C3DMeshHasSourceWithSemanticAtIndex(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  CFArrayRef *v6;
  CFIndex v7;
  const void *ValueAtIndex;
  _BOOL8 result;

  if (a4 == 1)
  {
    v6 = (CFArrayRef *)(a1 + 112);
  }
  else
  {
    if (a4)
      C3DMeshHasSourcesWithSemantic_cold_1();
    v6 = (CFArrayRef *)(a1 + 64);
  }
  if (*v6)
  {
    v7 = __indexOfSourceWithSemanticAtIndex(a1, a2, a3, a4);
    if (v7 == -1)
    {
      ValueAtIndex = 0;
      if (!a5)
        return ValueAtIndex != 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v6, v7);
      if (!a5)
        return ValueAtIndex != 0;
    }
    *a5 = ValueAtIndex;
    return ValueAtIndex != 0;
  }
  result = 0;
  *a5 = 0;
  return result;
}

void C3DMeshRemoveSourceWithSemanticAtIndex(uint64_t a1, int a2, uint64_t a3)
{
  __C3DMeshRemoveSourceWithSemanticAtIndex(a1, a2, a3, 0);
}

void C3DMeshRemoveSource(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t InputSetForSource;
  uint64_t v21;
  int Semantic;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DKeyframedAnimationCopy_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  InputSetForSource = C3DMeshGetInputSetForSource(a1, a2, 0);
  if (InputSetForSource != -1)
  {
    v21 = InputSetForSource;
    Semantic = C3DMeshSourceGetSemantic((uint64_t)a2);
    __C3DMeshRemoveSourceWithSemanticAtIndex(a1, Semantic, v21, 0);
  }
}

const void *C3DMeshRemoveSourcesWithSemantic(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  while (1)
  {
    result = C3DMeshGetSourceWithSemanticAtIndex(a1, a2, 0, 0);
    if (!result)
      break;
    __C3DMeshRemoveSourceWithSemanticAtIndex(a1, a2, 0, 0);
  }
  return result;
}

void C3DMeshClearCPURepresentation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  _QWORD *ValueAtIndex;
  const void *v15;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(const __CFArray **)(a1 + 64);
  if (v10)
  {
    Count = CFArrayGetCount(v10);
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v10, i);
        v15 = (const void *)ValueAtIndex[9];
        if (v15 && (ValueAtIndex[11] & 4) == 0 && !ValueAtIndex[10])
        {
          CFRelease(v15);
          ValueAtIndex[9] = 0;
        }
      }
    }
  }
}

void C3DMeshCopySources(uint64_t a1, uint64_t a2)
{
  __C3DMeshCopySources(a1, a2, 0);
  __MeshWillDieNotification(a2);
}

void __C3DMeshCopySources(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  const void *v24;
  const void *v25;
  const __CFAllocator *v26;
  const __CFArray *v27;
  CFMutableArrayRef MutableCopy;
  CFIndex Count;
  const __CFArray *v30;
  CFIndex v31;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Copy;
  CFIndex j;
  const void *v36;
  const void *v37;
  const void *v38;
  void *v39;
  const void *v40;
  void *v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *SourceWithSemanticAtIndex;
  size_t v46;
  void *v47;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryCopy_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DGeometryCopy_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = *(_OWORD *)(a1 + 72);
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v22;
  v23 = *(_OWORD *)(a1 + 120);
  *(_WORD *)(a2 + 136) = *(_WORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v23;
  v24 = *(const void **)(a2 + 64);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v25 = *(const void **)(a2 + 112);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(a2 + 64) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(a1 + 64));
  v27 = *(const __CFArray **)(a1 + 112);
  if (v27)
    MutableCopy = CFArrayCreateMutableCopy(v26, 0, v27);
  else
    MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a2 + 112) = MutableCopy;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  v30 = *(const __CFArray **)(a1 + 112);
  if (v30)
  {
    v31 = CFArrayGetCount(v30);
    if (!a3)
      goto LABEL_23;
  }
  else
  {
    v31 = 0;
    if (!a3)
      goto LABEL_23;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      Copy = (const void *)C3DMeshSourceCreateCopy((uint64_t)ValueAtIndex);
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), i, Copy);
      CFRelease(Copy);
    }
  }
  if (v31 >= 1)
  {
    for (j = 0; j != v31; ++j)
    {
      v36 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), j);
      v37 = (const void *)C3DMeshSourceCreateCopy((uint64_t)v36);
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 112), j, v37);
      CFRelease(v37);
    }
  }
LABEL_23:
  v38 = *(const void **)(a1 + 104);
  free(*(void **)(a2 + 104));
  v39 = malloc_type_calloc(Count, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a2 + 104) = v39;
  if (v38)
    memcpy(v39, v38, Count);
  v40 = *(const void **)(a1 + 152);
  free(*(void **)(a2 + 152));
  v41 = malloc_type_calloc(v31, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a2 + 152) = v41;
  if (v40)
    memcpy(v41, v40, v31);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 160);
  v42 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v42)
  {
    v43 = 4 * v42;
    v44 = malloc_type_realloc(*(void **)(a2 + 168), 4 * v42, 0x7679DC90uLL);
    *(_QWORD *)(a2 + 168) = v44;
    memcpy(v44, *(const void **)(a1 + 168), v43);
  }
  else
  {
    free(*(void **)(a2 + 168));
    *(_QWORD *)(a2 + 168) = 0;
  }
  if (*(_QWORD *)(a1 + 176))
  {
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, 0, 0, 0);
    v46 = 4 * C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
    v47 = malloc_type_realloc(*(void **)(a2 + 176), v46, 0xF800CB01uLL);
    *(_QWORD *)(a2 + 176) = v47;
    memcpy(v47, *(const void **)(a1 + 176), v46);
    if (!a3)
      return;
    goto LABEL_32;
  }
  free(*(void **)(a2 + 176));
  *(_QWORD *)(a2 + 176) = 0;
  if (a3)
LABEL_32:
    __C3DMeshFixAccessorLinks(a1, a2);
}

CFIndex C3DMeshUsesSameChannelForAllSources(uint64_t a1, _QWORD *a2)
{
  CFIndex result;
  unsigned __int8 *v5;
  uint64_t v6;
  CFIndex v7;
  unsigned __int8 *v8;
  int v9;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (result)
  {
    v5 = *(unsigned __int8 **)(a1 + 104);
    v6 = *v5;
    if (result < 2)
    {
LABEL_6:
      if (a2)
        *a2 = v6;
      return 1;
    }
    else
    {
      v7 = result - 1;
      v8 = v5 + 1;
      while (1)
      {
        v9 = *v8++;
        if (v9 != (_DWORD)v6)
          return 0;
        if (!--v7)
          goto LABEL_6;
      }
    }
  }
  return result;
}

void __C3DMeshCopyByAddingOriginalSourcesWithPositionChannel(uint64_t a1, uint64_t a2, const void **a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const __CFArray *MutableCopy;
  CFIndex Count;
  __int16 v25;
  const void *v26;
  char ChannelForSourceWithSemanticAtIndex;
  const void *v28;
  int v29;
  char v30;
  const void *v31;
  const __CFArray *v32;
  const __CFArray *Mutable;
  CFIndex v34;
  __int16 v35;
  const void *v36;
  const __CFArray *v37;
  CFMutableArrayRef v38;
  unsigned int v39;
  const void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *Accessor;
  size_t ValueLength;
  CFIndex v46;
  const UInt8 *v47;
  const UInt8 *v48;
  uint64_t v49;
  uint64_t v50;
  UInt8 *v51;
  const UInt8 *ValuePtrAtIndex;
  CFDataRef v53;
  const void *v54;
  size_t v55;
  void *v56;
  const void *SourceWithSemanticAtIndex;
  size_t v58;
  void *v59;
  const __CFAllocator *bytesDeallocator;
  const void **v61;
  uint64_t v62;
  const __CFAllocator *allocator;
  int ValueType;
  uint64_t ComponentsCountPerValue;
  __int16 Semantic;
  uint64_t v67;

  if (!a2 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryCopy_cold_4(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DGeometryCopy_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = *(const void **)(a1 + 64);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 64) = 0;
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = MutableCopy;
  Count = CFArrayGetCount(MutableCopy);
  memcpy(*(void **)(a1 + 104), *(const void **)(a2 + 104), Count);
  v25 = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_WORD *)(a1 + 88) = v25;
  v26 = *(const void **)(a1 + 96);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)(a1 + 96) = CFArrayCreateMutableCopy(allocator, 0, *(CFArrayRef *)(a2 + 96));
  ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(a2, 0, 0);
  v28 = *a3;
  if (*a3)
  {
    v29 = 0;
    v30 = ChannelForSourceWithSemanticAtIndex;
    do
    {
      __C3DMeshAddSourceWithDataKind(a1, v28, v30, 0, 0);
      v28 = a3[++v29];
    }
    while (v28);
  }
  v31 = *(const void **)(a1 + 112);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v32 = *(const __CFArray **)(a2 + 112);
  if (v32)
    Mutable = CFArrayCreateMutableCopy(allocator, 0, v32);
  else
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 112) = Mutable;
  if (*(_QWORD *)(a2 + 112))
    v34 = CFArrayGetCount(Mutable);
  else
    v34 = 0;
  free(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 152) = malloc_type_calloc(v34, 1uLL, 0x100004077774924uLL);
  v35 = *(_WORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 136) = v35;
  v36 = *(const void **)(a1 + 144);
  if (v36)
  {
    CFRelease(v36);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v37 = *(const __CFArray **)(a2 + 144);
  if (v37)
    v38 = CFArrayCreateMutableCopy(allocator, 0, v37);
  else
    v38 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 144) = v38;
  v67 = 0;
  if (__C3DMeshHasSourceWithSemanticAtIndex(a2, 0, 0, 1, &v67))
  {
    v39 = C3DMeshSourceGetCount(v67);
    v40 = *a3;
    if (*a3)
    {
      v41 = 0;
      v42 = v39;
      bytesDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
      v61 = a3;
      v43 = 4 * v39;
      v62 = a1;
      do
      {
        if (*(_QWORD *)(a2 + 168))
        {
          Semantic = C3DMeshSourceGetSemantic((uint64_t)v40);
          ComponentsCountPerValue = C3DMeshSourceGetComponentsCountPerValue((uint64_t)v40);
          ValueType = C3DMeshSourceGetValueType((uint64_t)v40);
          Accessor = (_QWORD *)C3DMeshSourceGetAccessor(v40);
          ValueLength = C3DSourceAccessorGetValueLength((uint64_t)Accessor);
          v46 = ValueLength * v42;
          v47 = (const UInt8 *)malloc_type_malloc(ValueLength * v42, 0xC5377432uLL);
          v48 = v47;
          v49 = v42;
          if (v42)
          {
            v50 = 0;
            v51 = (UInt8 *)v47;
            do
            {
              ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(Accessor, *(unsigned int *)(*(_QWORD *)(a2 + 168) + v50));
              if (ValuePtrAtIndex)
                memcpy(v51, ValuePtrAtIndex, ValueLength);
              else
                bzero(v51, ValueLength);
              v50 += 4;
              v51 += ValueLength;
            }
            while (v43 != v50);
          }
          v53 = CFDataCreateWithBytesNoCopy(allocator, v48, v46, bytesDeallocator);
          v42 = v49;
          v54 = (const void *)C3DMeshSourceCreate(v53, Semantic, v49, ComponentsCountPerValue, ValueType);
          CFRelease(v53);
          a1 = v62;
          __C3DMeshAddSourceWithDataKind(v62, v54, 0, 0, 1);
          CFRelease(v54);
          a3 = v61;
        }
        else
        {
          __C3DMeshAddSourceWithDataKind(a1, v40, 0, 0, 1);
        }
        v40 = a3[++v41];
      }
      while (v40);
    }
  }
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  v55 = 4 * *(unsigned int *)(a2 + 160);
  free(*(void **)(a1 + 168));
  v56 = malloc_type_malloc(v55, 0xED226B2DuLL);
  *(_QWORD *)(a1 + 168) = v56;
  memcpy(v56, *(const void **)(a2 + 168), v55);
  free(*(void **)(a1 + 176));
  *(_QWORD *)(a1 + 176) = 0;
  if (*(_QWORD *)(a2 + 176))
  {
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a2, 0, 0, 0);
    v58 = 4 * C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
    v59 = malloc_type_malloc(v58, 0xE69820E9uLL);
    *(_QWORD *)(a1 + 176) = v59;
    memcpy(v59, *(const void **)(a2 + 176), v58);
  }
  __MeshWillDieNotification(a1);
}

CFMutableArrayRef C3DMeshCopyRenderableSourceAndElements(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  const void *v22;
  const void *v23;
  const __CFArray *v24;
  CFAllocatorRef *v25;
  CFMutableArrayRef MutableCopy;
  const __CFArray *v27;
  const __CFArray *Mutable;
  CFIndex Count;
  const void *v30;
  const void *v31;
  const __CFArray *v32;
  CFMutableArrayRef v33;
  const __CFArray *v34;
  CFMutableArrayRef result;

  if (!a2 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DGeometryCopy_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a1)
      goto LABEL_6;
  }
  else if (a1)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DGeometryCopy_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  C3DMeshBuildRenderableData(a2, 1);
  v20 = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 136);
  *(_OWORD *)(a1 + 72) = v20;
  v21 = *(_OWORD *)(a2 + 120);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = v21;
  v22 = *(const void **)(a1 + 64);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v23 = *(const void **)(a1 + 112);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v24 = *(const __CFArray **)(a2 + 112);
  v25 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (v24)
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v24);
  else
    MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 64) = MutableCopy;
  v27 = *(const __CFArray **)(a2 + 112);
  if (v27)
    Mutable = CFArrayCreateMutableCopy(*v25, 0, v27);
  else
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 112) = Mutable;
  Count = CFArrayGetCount(Mutable);
  free(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 104) = malloc_type_calloc(Count, 1uLL, 0x100004077774924uLL);
  free(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 152) = malloc_type_calloc(Count, 1uLL, 0x100004077774924uLL);
  v30 = *(const void **)(a1 + 96);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v31 = *(const void **)(a1 + 144);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v32 = *(const __CFArray **)(a2 + 144);
  if (v32)
    v33 = CFArrayCreateMutableCopy(*v25, 0, v32);
  else
    v33 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 96) = v33;
  v34 = *(const __CFArray **)(a2 + 144);
  if (v34)
    result = CFArrayCreateMutableCopy(*v25, 0, v34);
  else
    result = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 144) = result;
  return result;
}

CFArrayRef C3DMeshCopyAllSources(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFArrayRef *v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 == 1)
  {
    C3DMeshBuildRenderableData(a1, 1);
    v12 = (CFArrayRef *)(a1 + 112);
  }
  else
  {
    if (a2)
      C3DMeshHasSourcesWithSemantic_cold_1();
    v12 = (CFArrayRef *)(a1 + 64);
  }
  return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE20], *v12);
}

uint64_t C3DMeshMakeOriginalSourceMutable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  const void *SourceWithSemanticAtIndex;
  unsigned __int8 ChannelForSourceWithSemanticAtIndex;
  const void *MutableCopy;
  uint64_t j;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  unsigned __int8 v18;
  uint64_t k;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;

  v2 = a2;
  if (a2 && (C3DMeshSourceIsMutable(a2) & 1) != 0)
    return v2;
  v4 = (char *)C3DMeshCreate();
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = a1 + 2 * v5;
    v8 = *(unsigned __int8 *)(v7 + 73);
    if (*(_BYTE *)(v7 + 73))
    {
      for (i = 0; v8 != i; ++i)
      {
        SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, (char)v5, i, 0);
        ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(a1, (char)v5, i);
        if (v2)
        {
          if (SourceWithSemanticAtIndex == (const void *)v2)
            goto LABEL_12;
        }
        else if (!C3DMeshSourceIsMutable(SourceWithSemanticAtIndex) || !SourceWithSemanticAtIndex)
        {
LABEL_12:
          MutableCopy = (const void *)C3DMeshSourceCreateMutableCopy((uint64_t)SourceWithSemanticAtIndex);
          __C3DMeshSetSourceWithInputSetAndDataKind((uint64_t)v4, MutableCopy, i, ChannelForSourceWithSemanticAtIndex, 0);
          CFRelease(MutableCopy);
          if (v2)
            v2 = (uint64_t)MutableCopy;
          else
            v2 = 0;
          v6 = 1;
          continue;
        }
        __C3DMeshSetSourceWithInputSetAndDataKind((uint64_t)v4, SourceWithSemanticAtIndex, i, ChannelForSourceWithSemanticAtIndex, 0);
      }
    }
    ++v5;
  }
  while (v5 != 9);
  if ((v6 & 1) != 0)
  {
    __C3DMeshFixAccessorLinks(a1, (uint64_t)v4);
    for (j = 0; j != 9; ++j)
    {
      v14 = &v4[2 * j];
      v15 = v14[73];
      if (v14[73])
      {
        v16 = 0;
        do
        {
          v17 = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v4, (char)j, v16, 0);
          v18 = C3DMeshGetChannelForSourceWithSemanticAtIndex((uint64_t)v4, (char)j, v16);
          __C3DMeshSetSourceWithInputSetAndDataKind(a1, v17, v16++, v18, 0);
        }
        while (v15 != v16);
      }
    }
    CFRelease(v4);
    if (v2)
    {
      for (k = 0; k != 9; ++k)
      {
        v20 = a1 + 2 * k;
        v21 = *(unsigned __int8 *)(v20 + 73);
        if (*(_BYTE *)(v20 + 73))
        {
          v22 = 0;
          do
          {
            v23 = C3DMeshGetSourceWithSemanticAtIndex(a1, (char)k, v22, 0);
            if (C3DGenericSourcesHaveSharedData(v2, (uint64_t)v23))
              C3DGenericSourceMarkMutable((uint64_t)v23);
            ++v22;
          }
          while (v21 != v22);
        }
      }
    }
    *(_BYTE *)(a1 + 200) |= 4u;
  }
  else
  {
    CFRelease(v4);
  }
  return v2;
}

void __C3DMeshFixAccessorLinks(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t Accessor;
  const void *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  CFIndex v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  NSObject *v19;
  uint8_t v20;
  _BYTE v21[15];

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      Accessor = C3DGenericSourceGetAccessor((uint64_t)ValueAtIndex);
      if (Accessor)
      {
        v9 = *(const void **)(Accessor + 16);
        if (v9 != ValueAtIndex)
        {
          v10 = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
          if (v10 < 1)
            goto LABEL_15;
          v11 = v10;
          if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), 0) == v9)
          {
            v15 = 0;
          }
          else
          {
            v12 = 1;
            while (1)
            {
              v13 = v12;
              if (v11 == v12)
                break;
              v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v12);
              v12 = v13 + 1;
              if (v14 == v9)
              {
                v15 = v13;
                goto LABEL_13;
              }
            }
            v15 = 0;
LABEL_13:
            if (v13 >= v11)
            {
LABEL_15:
              if ((__C3DMeshFixAccessorLinks_done & 1) == 0)
              {
                __C3DMeshFixAccessorLinks_done = 1;
                v19 = scn_default_log();
                if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                  __C3DMeshFixAccessorLinks_cold_1(&v20, v21, v19);
              }
              continue;
            }
          }
          v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), i);
          v17 = C3DGenericSourceGetAccessor((uint64_t)v16);
          v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v15);
          C3DSourceAccessorSetSource(v17, (uint64_t)v18);
        }
      }
    }
  }
}

uint64_t C3DMeshGetPositionDeindexedToOriginalTable(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 160);
  return *(_QWORD *)(a1 + 168);
}

uint64_t C3DMeshGetPositionOriginalToFirstDeindexedTable(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

CFIndex C3DMeshGetIndexOfElement(uint64_t a1, const void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFRange v22;
  const __CFArray *v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DMeshGetElementAtIndex_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  if (a3 == 1)
  {
    C3DMeshBuildRenderableData(a1, 1);
    v22.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 144));
    v23 = *(const __CFArray **)(a1 + 144);
    goto LABEL_11;
  }
  if (!a3)
  {
    v22.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    v23 = *(const __CFArray **)(a1 + 96);
LABEL_11:
    v22.location = 0;
    return CFArrayGetFirstIndexOfValue(v23, v22, a2);
  }
  v25 = scn_default_log();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    C3DMeshGetIndexOfElement_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
  return -1;
}

uint64_t C3DMeshGetMeshElements(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 == 1)
  {
    C3DMeshBuildRenderableData(a1, 1);
    return *(_QWORD *)(a1 + 144);
  }
  else if (a2)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      C3DMeshGetMeshElements_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  else
  {
    return *(_QWORD *)(a1 + 96);
  }
}

void C3DMeshSetMeshElements(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  const __CFAllocator *v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(CFTypeRef *)(a1 + 96);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
    {
      v13 = CFGetAllocator(cf);
      *(_QWORD *)(a1 + 96) = CFArrayCreateMutableCopy(v13, 0, (CFArrayRef)cf);
    }
    *(_BYTE *)(a1 + 200) &= ~2u;
    __C3DMeshInvalidateRenderableData(a1);
  }
}

void C3DMeshRemoveAllElements(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 200) &= ~2u;
  __C3DMeshInvalidateRenderableData(a1);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
}

void C3DMeshSetOriginalElementType(uint64_t a1, uint64_t a2)
{
  const __CFArray *ElementsCount;
  const __CFArray *v5;
  CFIndex v6;
  const void *ElementAtIndex;
  NSObject *v8;
  const __CFData *Indexes;
  uint64_t PrimitiveCount;
  const UInt8 *BytePtr;
  uint64_t v12;
  UInt8 *v13;
  _BYTE *v14;
  UInt8 v15;
  UInt8 *v16;
  __int16 v17;
  UInt8 *v18;
  int v19;
  CFDataRef v20;
  CFDataRef v21;
  NSObject *v22;
  int v23;
  const __CFAllocator *allocator;
  unsigned int size;
  __int16 size_4;
  uint8_t buf[16];

  ElementsCount = C3DMeshGetElementsCount(a1);
  if ((uint64_t)ElementsCount < 1)
    return;
  v5 = ElementsCount;
  v6 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    ElementAtIndex = C3DMeshGetElementAtIndex(a1, v6, 1);
    if ((int)C3DMeshElementGetType((uint64_t)ElementAtIndex) != a2)
      break;
LABEL_27:
    if ((const __CFArray *)++v6 == v5)
      return;
  }
  if ((unint64_t)(a2 - 4) > 0xFFFFFFFFFFFFFFFDLL)
  {
    if (C3DMeshElementGetType((uint64_t)ElementAtIndex))
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        size_4 = 0;
        _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_DEFAULT, "Warning: Can only convert from triangle array to another element type", (uint8_t *)&size_4, 2u);
      }
      goto LABEL_27;
    }
    size = 0;
    Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)ElementAtIndex, &size);
    PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
    if (size == 2)
    {
      BytePtr = CFDataGetBytePtr(Indexes);
      if (a2 != 3)
      {
        if (a2 == 2)
        {
          v23 = 3 * PrimitiveCount;
          v12 = 6 * PrimitiveCount;
          v13 = (UInt8 *)malloc_type_calloc(6 * PrimitiveCount, size, 0x2C6FC38BuLL);
          v16 = v13;
          if (PrimitiveCount >= 1)
          {
            do
            {
              *(_WORD *)v16 = *(_WORD *)BytePtr;
              *((_WORD *)v16 + 1) = *((_WORD *)BytePtr + 1);
              *((_WORD *)v16 + 2) = *((_WORD *)BytePtr + 1);
              *((_WORD *)v16 + 3) = *((_WORD *)BytePtr + 2);
              *((_WORD *)v16 + 4) = *((_WORD *)BytePtr + 2);
              v17 = *(_WORD *)BytePtr;
              BytePtr += 6;
              *((_WORD *)v16 + 5) = v17;
              v16 += 12;
              --PrimitiveCount;
            }
            while (PrimitiveCount);
          }
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
    else if (size == 1)
    {
      BytePtr = CFDataGetBytePtr(Indexes);
      if (a2 != 3)
      {
        if (a2 == 2)
        {
          v23 = 3 * PrimitiveCount;
          v12 = 6 * PrimitiveCount;
          v13 = (UInt8 *)malloc_type_calloc(6 * PrimitiveCount, size, 0xA74034B9uLL);
          v14 = v13;
          if (PrimitiveCount >= 1)
          {
            do
            {
              *v14 = *BytePtr;
              v14[1] = BytePtr[1];
              v14[2] = BytePtr[1];
              v14[3] = BytePtr[2];
              v14[4] = BytePtr[2];
              v15 = *BytePtr;
              BytePtr += 3;
              v14[5] = v15;
              v14 += 6;
              --PrimitiveCount;
            }
            while (PrimitiveCount);
          }
LABEL_24:
          v20 = CFDataCreate(allocator, v13, v12 * size);
          C3DMeshElementInit((uint64_t)ElementAtIndex, 2, v23, v20, size);
          CFRelease(v20);
          free(v13);
          goto LABEL_26;
        }
        goto LABEL_26;
      }
    }
    else
    {
      BytePtr = CFDataGetBytePtr(Indexes);
      if (a2 != 3)
      {
        if (a2 == 2)
        {
          v23 = 3 * PrimitiveCount;
          v12 = 6 * PrimitiveCount;
          v13 = (UInt8 *)malloc_type_calloc(6 * PrimitiveCount, size, 0x5D6240BDuLL);
          v18 = v13;
          if (PrimitiveCount >= 1)
          {
            do
            {
              *(_DWORD *)v18 = *(_DWORD *)BytePtr;
              *((_DWORD *)v18 + 1) = *((_DWORD *)BytePtr + 1);
              *((_DWORD *)v18 + 2) = *((_DWORD *)BytePtr + 1);
              *((_DWORD *)v18 + 3) = *((_DWORD *)BytePtr + 2);
              *((_DWORD *)v18 + 4) = *((_DWORD *)BytePtr + 2);
              v19 = *(_DWORD *)BytePtr;
              BytePtr += 12;
              *((_DWORD *)v18 + 5) = v19;
              v18 += 24;
              --PrimitiveCount;
            }
            while (PrimitiveCount);
          }
          goto LABEL_24;
        }
LABEL_26:
        __C3DMeshInvalidateRenderableData(a1);
        goto LABEL_27;
      }
    }
    v21 = CFDataCreate(allocator, BytePtr, 3 * PrimitiveCount * size);
    C3DMeshElementInit((uint64_t)ElementAtIndex, 3, 3 * PrimitiveCount, v21, size);
    CFRelease(v21);
    goto LABEL_26;
  }
  v22 = scn_default_log();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1DCCB8000, v22, OS_LOG_TYPE_DEFAULT, "Warning: Can only convert to lines or points element type", buf, 2u);
  }
}

uint64_t C3DMeshGetMorphableSourceMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 200) >> 3) & 0xF;
}

void C3DMeshMarkMutable(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 200) |= 4u;
}

void C3DMeshDidMutate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  ++*(_QWORD *)(a1 + 216);
}

uint64_t C3DMeshGetMutabilityTimeStamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 216);
}

uint64_t C3DMeshIsVolatile(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_BYTE *)(a1 + 200) & 1;
}

uint64_t C3DMeshGetLayoutTimeStamp(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208);
}

BOOL __processTrianglesBatch(float32x4_t *a1, unsigned int a2, unsigned int a3, float32x4_t a4, float a5, float32x4_t a6, double a7, double a8, __n128 a9, __n128 a10)
{
  unsigned int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x4_t v43;
  float v44;
  float v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint32x4_t v55;
  unsigned __int32 v56;
  __n128 *v57;
  __n128 v59;
  __n128 v60;
  unint64_t v61;
  int v62;
  uint8_t buf[4];
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v10 = a3 - a2;
  if (a3 <= a2)
  {
    return 0;
  }
  else
  {
    v12 = a1[3].i64[1];
    v13 = a1[4].u8[5];
    v14 = a2;
    v62 = a1[4].u8[6];
    v15 = a1[4].u8[4];
    v61 = a3;
    a4.i64[0] = 67109120;
    v16 = 1;
    do
    {
      v17 = a1[1].u8[10];
      if (a1[1].i8[10])
      {
        if ((v14 & 1) != 0)
          v18 = 1;
        else
          v18 = 2;
        if ((v14 & 1) != 0)
          v19 = 2;
        else
          v19 = 1;
        v20 = v17 != 5;
        v21 = v17 == 1;
        if (v17 == 1)
          v20 = 1;
        v22 = 1;
        if (v17 == 1)
          v23 = v18;
        else
          v23 = 2;
        if (v21)
          v24 = v19;
        else
          v24 = 1;
      }
      else
      {
        v20 = 3;
        v22 = 3;
        v23 = 2;
        v24 = 1;
      }
      v25 = a1->i64[0];
      if (a1->i64[0])
      {
        v26 = a1[1].u8[11];
        v27 = a1[2].i64[1];
        v28 = a1[3].i64[0];
        switch(v26)
        {
          case 4:
            v29 = *(_DWORD *)(v25 + 4 * (v27 + v28 * v14 * v20));
            v34 = v22 * v14;
            v31 = *(_DWORD *)(v25 + 4 * (v27 + (v24 + v34) * v28));
            v32 = *(_DWORD *)(v25 + 4 * (v27 + (v34 + v23) * v28));
            break;
          case 2:
            v29 = *(unsigned __int16 *)(v25 + 2 * (v27 + v28 * v14 * v20));
            v35 = v22 * v14;
            v31 = *(unsigned __int16 *)(v25 + 2 * (v27 + (v24 + v35) * v28));
            v32 = *(unsigned __int16 *)(v25 + 2 * (v27 + (v35 + v23) * v28));
            break;
          case 1:
            v29 = *(unsigned __int8 *)(v25 + v27 + v28 * v14 * v20);
            v30 = v22 * v14;
            v31 = *(unsigned __int8 *)(v25 + v27 + (v24 + v30) * v28);
            v32 = *(unsigned __int8 *)(v25 + v27 + (v30 + v23) * v28);
            break;
          default:
            v36 = scn_default_log();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v64 = v26;
              _os_log_error_impl(&dword_1DCCB8000, v36, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
            }
            v32 = 0;
            v31 = 0;
            v29 = 0;
            break;
        }
      }
      else
      {
        v29 = v14 * v20;
        v33 = v22 * v14;
        v31 = v24 + v33;
        v32 = v33 + v23;
      }
      v37 = v12 + (v29 * v13);
      if (v62 == 1)
      {
        a9.n128_u64[0] = *(_QWORD *)v37;
        a9.n128_u32[2] = *(_DWORD *)(v37 + 8);
        v38 = v12 + (v31 * v13);
        a10.n128_u64[0] = *(_QWORD *)v38;
        a10.n128_u32[2] = *(_DWORD *)(v38 + 8);
        v39 = v12 + (v32 * v13);
        a4.i64[0] = *(_QWORD *)v39;
        a4.i32[2] = *(_DWORD *)(v39 + 8);
      }
      else
      {
        *(double *)v40.i64 = C3DConvertFloatingTypeToFloat4(v15, (float *)v37, a4, a5, a6.f32[0]);
        v60 = (__n128)v40;
        *(double *)v43.i64 = C3DConvertFloatingTypeToFloat4(v15, (float *)(v12 + (v31 * v13)), v40, v41, v42);
        v59 = (__n128)v43;
        *(double *)a4.i64 = C3DConvertFloatingTypeToFloat4(v15, (float *)(v12 + (v32 * v13)), v43, v44, v45);
        a10 = v59;
        a9 = v60;
      }
      v46 = (float32x4_t)a10;
      v46.i32[3] = 0;
      v47 = a4;
      v47.i32[3] = 0;
      v48 = vminnmq_f32(v46, v47);
      v49 = (float32x4_t)a9;
      v49.i32[3] = 0;
      v48.i32[3] = 0;
      v50 = vminnmq_f32(v49, v48);
      v51 = vmaxnmq_f32(v46, v47);
      v51.i32[3] = 0;
      v52 = vmaxnmq_f32(v49, v51);
      v49.i64[0] = 0x3F0000003F000000;
      v49.i64[1] = 0x3F0000003F000000;
      v53 = vmulq_f32(vaddq_f32(v50, v52), v49);
      v53.i32[3] = 1.0;
      v54 = vmulq_f32(vsubq_f32(v52, v50), v49);
      v54.i32[3] = 0;
      a6 = vabdq_f32(a1[5], v53);
      v55 = (uint32x4_t)vcgeq_f32(vaddq_f32(a1[6], v54), a6);
      v55.i32[3] = v55.i32[2];
      a5 = COERCE_FLOAT(vminvq_u32(v55));
      if ((LODWORD(a5) & 0x80000000) != 0)
      {
        v56 = a1[200].u32[0];
        a1[200].i32[0] = v56 + 1;
        v57 = (__n128 *)&a1[3 * v56];
        v57[8] = a9;
        v57[9] = a10;
        v57[10] = (__n128)a4;
        if (a1[200].i32[0] == 64)
        {
          a1[200].i32[0] = 0;
          if (((*(uint64_t (**)(void))(a1[7].i64[0] + 16))() & 1) != 0)
            break;
        }
      }
      v16 = ++v14 < v61;
      --v10;
    }
    while (v10);
  }
  return v16;
}

uint64_t C3DMeshQueryTrianglesIntersectingBox(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  const void *SourceWithSemanticAtIndex;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  CFIndex i;
  const void *ElementAtIndex;
  float32x4_t v12;
  double v13;
  double v14;
  __n128 v15;
  __n128 v16;
  double v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t j;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  float32x4_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  _BYTE v46[3072];
  int v47;

  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, 0, 0, 0);
  result = C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
  if (result)
  {
    result = (uint64_t)C3DMeshGetElementsCount(a1);
    if (result)
    {
      v8 = result;
      memset(v46, 0, 384);
      v45 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0;
      v37 = 0u;
      v38 = 0u;
      result = C3DMeshSourceGetContent((uint64_t)SourceWithSemanticAtIndex);
      v41 = result;
      *(_QWORD *)&v42 = v9;
      v43 = a3;
      v44 = a4;
      v47 = 0;
      *(_QWORD *)&v45 = a2;
      if (v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          ElementAtIndex = C3DMeshGetElementAtIndex(a1, i, 0);
          C3DMeshElementGetContent((uint64_t)ElementAtIndex, 0, (uint64_t)&v33);
          v37 = v33;
          v38 = v34;
          v39 = v35;
          v40 = v36;
          if (DWORD2(v33) < 0x101)
          {
            result = __processTrianglesBatch((float32x4_t *)&v37, 0, DWORD2(v33), v35, *(float *)&v34, v12, v13, v14, v15, v16);
            if ((result & 1) != 0)
              return result;
          }
          else
          {
            v32 = 0;
            v33 = v37;
            v34 = v38;
            v35 = v39;
            v36 = v40;
            result = C3DMeshElementGetPrimitiveGroupBoundingBoxes((uint64_t)ElementAtIndex, &v33, v41, v42, &v32);
            v20 = v32;
            if (v32)
            {
              v21 = result;
              v22 = 0;
              for (j = 0; j < v20; ++j)
              {
                v24 = *(float32x4_t *)(v21 + v22);
                v25 = *(float32x4_t *)(v21 + v22 + 16);
                v26 = vaddq_f32(v44, v25);
                v27 = (float32x4_t)vcgeq_f32(v26, vabdq_f32(v43, v24));
                v27.i32[3] = v27.i32[2];
                v27.i32[0] = vminvq_u32((uint32x4_t)v27);
                v28 = v22 + 32;
                if (v27.i32[0] < 0)
                {
                  if (v28 >= DWORD2(v37))
                    v29 = DWORD2(v37);
                  else
                    v29 = v22 + 32;
                  result = __processTrianglesBatch((float32x4_t *)&v37, v22, v29, v27, v26.f32[0], v24, *(double *)v25.i64, v17, v18, v19);
                  if ((result & 1) != 0)
                    return result;
                  v20 = v32;
                }
                v22 = v28;
              }
            }
          }
        }
        if (v47)
          return (*(uint64_t (**)(uint64_t, _BYTE *))(a2 + 16))(a2, v46);
      }
    }
  }
  return result;
}

id _C3DMeshCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  void *v6;
  void *v7;

  __MeshWillDieNotification(a1);
  v2 = *(const void **)(a1 + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 112) = 0;
  }
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  v6 = *(void **)(a1 + 192);
  if (v6)
    free(v6);
  v7 = *(void **)(a1 + 184);
  if (v7)
    free(v7);
  return C3DEntityCFFinalize(a1);
}

__CFString *_C3DMeshCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t Name;
  CFIndex v4;
  const void *ElementAtIndex;
  uint64_t v6;
  CFIndex v7;
  const void *v8;
  _QWORD v10[5];
  _QWORD v11[5];

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DEntityGetName(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DMesh %p \"%@\"\n"), a1, Name);
  if ((uint64_t)C3DMeshGetElementsCount(a1) >= 1)
  {
    v4 = 0;
    do
    {
      ElementAtIndex = C3DMeshGetElementAtIndex(a1, v4, 0);
      CFStringAppendFormat(Mutable, 0, CFSTR("  element%d: %@\n"), v4++, ElementAtIndex);
    }
    while (v4 < (uint64_t)C3DMeshGetElementsCount(a1));
  }
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___C3DMeshCFCopyDebugDescription_block_invoke;
  v11[3] = &__block_descriptor_tmp_38_0;
  v11[4] = Mutable;
  C3DMeshApplySources(a1, 0, (uint64_t)v11);
  if (*(_QWORD *)(a1 + 112))
  {
    if ((uint64_t)C3DMeshGetElementsCount(a1) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = C3DMeshGetElementAtIndex(a1, v7, 1);
        CFStringAppendFormat(Mutable, 0, CFSTR("  renderable element%d: %@\n"), v7++, v8);
      }
      while (v7 < (uint64_t)C3DMeshGetElementsCount(a1));
    }
    v10[0] = v6;
    v10[1] = 0x40000000;
    v10[2] = ___C3DMeshCFCopyDebugDescription_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_45_0;
    v10[4] = Mutable;
    C3DMeshApplySources(a1, 1, (uint64_t)v10);
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t _C3DMeshInitWithPropertyList(uint64_t a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *Value;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFNumber *v29;
  uint64_t valuePtr;
  uint8_t buf[4];
  const __CFDictionary *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DEntityInitWithPropertyList(a1, a2);
  if ((v12 & 1) != 0)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("baseSourceLocators"));
    if (Value)
    {
      v14 = Value;
      *(_BYTE *)(a1 + 200) &= 0x87u;
      Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        v16 = Count;
        for (i = 0; i != v16; ++i)
        {
          valuePtr = 0;
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v14, i);
          if (!CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr)
            && (_C3DMeshInitWithPropertyList_done & 1) == 0)
          {
            _C3DMeshInitWithPropertyList_done = 1;
            v19 = scn_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v32 = a2;
              _os_log_error_impl(&dword_1DCCB8000, v19, OS_LOG_TYPE_ERROR, "Error: Could not deserialize a source locator in %@", buf, 0xCu);
            }
          }
          *(_BYTE *)(a1 + 200) |= 8 * ((1 << SBYTE1(valuePtr)) & 0xF);
        }
      }
    }
    else
    {
      v29 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("verticesMask"));
      if (v29)
      {
        *(_DWORD *)buf = 0;
        CFNumberGetValue(v29, kCFNumberIntType, buf);
        *(_BYTE *)(a1 + 200) = (8 * (buf[0] & 0xF)) | *(_BYTE *)(a1 + 200) & 0x87;
      }
    }
  }
  else
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      _C3DMeshInitWithPropertyList_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  return v12;
}

__CFDictionary *_C3DMeshCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  __CFDictionary *Mutable;
  __CFDictionary *v21;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  CFDictionaryRef *EntryID;
  int v26;
  NSObject *v27;
  CFNumberRef v28;
  const CFArrayCallBacks *v29;
  CFMutableArrayRef v30;
  CFMutableArrayRef v31;
  const void *URL;
  uint64_t Accessor;
  NSObject *v34;
  __CFArray *Value;
  __CFArray *v36;
  const void *v37;
  __CFArray *v38;
  CFIndex j;
  const void *v40;
  const void *v41;
  const void *v42;
  const __CFArray *v43;
  NSObject *v44;
  CFDataRef SerializedDataWithAccessors;
  __CFDictionary *v46;
  CFStringRef v47;
  __CFArray *v48;
  CFIndex v49;
  CFIndex v50;
  CFIndex k;
  const void *v52;
  const void *v53;
  CFNumberRef v54;
  uint64_t v56;
  uint64_t v57;
  __CFDictionary *v58;
  __CFDictionary *v59;
  const __CFDictionary *v60;
  __CFDictionary *theDict;
  int v62;
  uint8_t v63[4];
  uint64_t v64;
  uint8_t v65[4];
  uint64_t v66;
  int valuePtr;
  _DWORD v68[7];

  *(_QWORD *)&v68[5] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DCreateTangentsWithGeometryOptimized_cold_8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  v17 = v16;
  if (v16)
  {
    v56 = a3;
    v57 = a4;
    v58 = v16;
    v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    theDict = CFDictionaryCreateMutable(0, 0, v18, v19);
    v21 = CFDictionaryCreateMutable(0, 0, v18, v19);
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
        EntryID = C3DLibraryGetEntryID(a2, ValueAtIndex);
        v26 = (int)EntryID;
        if ((unint64_t)EntryID >> 31)
        {
          v27 = scn_default_log();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
            _C3DMeshCopyPropertyList_cold_3(v65, &v66, v27);
        }
        valuePtr = v26;
        v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(v21, ValueAtIndex, v28);
        if (C3DGenericSourceIsPrimary((uint64_t)ValueAtIndex))
        {
          v29 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          v30 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          v31 = CFArrayCreateMutable(0, 0, v29);
          CFDictionaryAddValue(Mutable, ValueAtIndex, v30);
          CFDictionaryAddValue(theDict, ValueAtIndex, v31);
          CFRelease(v30);
          CFRelease(v31);
          URL = ValueAtIndex;
        }
        else
        {
          Accessor = C3DGenericSourceGetAccessor((uint64_t)ValueAtIndex);
          URL = (const void *)C3DSceneSourceGetURL(Accessor);
        }
        if (!C3DGenericSourceIsPrimary((uint64_t)URL))
        {
          v34 = scn_default_log();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
            _C3DMeshCopyPropertyList_cold_2(v63, &v64, v34);
        }
        Value = (__CFArray *)CFDictionaryGetValue(Mutable, URL);
        v36 = (__CFArray *)CFDictionaryGetValue(theDict, URL);
        v37 = (const void *)C3DGenericSourceGetAccessor((uint64_t)ValueAtIndex);
        CFArrayAppendValue(Value, v37);
        CFArrayAppendValue(v36, v28);
        CFRelease(v28);
      }
    }
    v60 = Mutable;
    v38 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    v59 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Count >= 1)
    {
      for (j = 0; j != Count; ++j)
      {
        v40 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), j);
        v41 = CFDictionaryGetValue(v21, v40);
        CFArrayAppendValue(v38, v41);
        if (C3DGenericSourceIsPrimary((uint64_t)v40))
        {
          v42 = CFDictionaryGetValue(theDict, v40);
          v43 = (const __CFArray *)CFDictionaryGetValue(v60, v40);
          if (!v40)
          {
            v44 = scn_default_log();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
              _C3DMeshCopyPropertyList_cold_1((uint8_t *)&valuePtr, v68, v44);
          }
          SerializedDataWithAccessors = C3DGenericSourceCreateSerializedDataWithAccessors((uint64_t)v40, v43);
          v46 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryAddValue(v46, CFSTR("data"), SerializedDataWithAccessors);
          CFDictionaryAddValue(v46, CFSTR("subIDs"), v42);
          v47 = CFStringCreateWithFormat(0, 0, CFSTR("%@"), v41);
          CFDictionaryAddValue(v59, v47, v46);
          CFRelease(v47);
          CFRelease(SerializedDataWithAccessors);
          CFRelease(v46);
        }
      }
    }
    v17 = v58;
    CFDictionarySetValue(v58, CFSTR("sources"), v38);
    CFDictionarySetValue(v58, CFSTR("primarySourcesInfo"), v59);
    CFRelease(v38);
    CFRelease(v59);
    CFRelease(theDict);
    CFRelease(v60);
    CFRelease(v21);
    v48 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    if (v49 >= 1)
    {
      v50 = v49;
      for (k = 0; k != v50; ++k)
      {
        v52 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), k);
        v53 = (const void *)C3DCopyPropertyList(v52, 0, v56, v57);
        CFArrayAppendValue(v48, v53);
        CFRelease(v53);
      }
    }
    CFDictionarySetValue(v58, CFSTR("geometryElements"), v48);
    CFRelease(v48);
    v62 = (*(unsigned __int8 *)(a1 + 200) >> 3) & 0xF;
    v54 = CFNumberCreate(0, kCFNumberIntType, &v62);
    CFDictionarySetValue(v58, CFSTR("verticesMask"), v54);
    CFRelease(v54);
  }
  return v17;
}

uint64_t _C3DMeshFillLibraryForSerialization(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  CFIndex i;
  const void *ValueAtIndex;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (result >= 1)
  {
    v5 = result;
    for (i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      result = (uint64_t)C3DLibraryAddEntry(a2, ValueAtIndex);
    }
  }
  return result;
}

__CFArray *_C3DMeshCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t v22;
  int v23;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("sources"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v23 = 0;
  valuePtr = 5;
  v22 = a1 + 184;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("boundingSphere"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 5;
  v22 = a1 + 192;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("boundingBox"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 96;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("meshElements"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  return Mutable;
}

uint64_t _C3DMeshSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

void OUTLINED_FUNCTION_4_10(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

BOOL OUTLINED_FUNCTION_6_1(NSObject *a1)
{
  return os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return scn_default_log();
}

void C3D::MBNeighborMaxPass::MBNeighborMaxPass(C3D::MBNeighborMaxPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, char a4)
{
  uint64_t v5;

  C3D::ComputePass::ComputePass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA5998F8;
  *(_BYTE *)(v5 + 120) = a4;
}

const char *C3D::MBNeighborMaxPass::name(C3D::MBNeighborMaxPass *this)
{
  return "MBNeighborMaxPass";
}

float C3D::MBNeighborMaxPass::setup(C3D::MBNeighborMaxPass *this)
{
  C3D::PassDescriptor *v2;
  uint64_t v3;
  uint64_t v4;
  float result;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = (C3D::MBNeighborMaxPass *)((char *)this + 32);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::MBNeighborMaxPass *)((char *)this + 32), 0) + 8) = "MB-TileMax";
  v3 = (*(uint64_t (**)(C3D::MBNeighborMaxPass *))(*(_QWORD *)this + 88))(this);
  v4 = C3D::PassDescriptor::outputAtIndex(v2, 0);
  *(_QWORD *)(v4 + 8) = "MB-TileMax";
  *(_WORD *)(v4 + 16) = (int)(float)(*(float *)(v3 + 8) * 0.015625);
  result = *(float *)(v3 + 12) * 0.015625;
  *(_WORD *)(v4 + 18) = (int)result;
  *(_WORD *)(v4 + 28) = 115;
  return result;
}

void C3D::MBNeighborMaxPass::compile(C3D::MBNeighborMaxPass *this)
{
  uint64_t RenderContext;
  void *v3;
  C3D::RenderGraphResourceManager *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v5 = (*(uint64_t (**)(C3D::MBNeighborMaxPass *))(*(_QWORD *)this + 64))(this);
  v6 = C3D::RenderGraphResourceManager::get(v4, v5);
  *((_QWORD *)this + 14) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    *v7 = &off_1EA59A3D8;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    *((_QWORD *)this + 14) = v7;
    v8 = (*(uint64_t (**)(C3D::MBNeighborMaxPass *))(*(_QWORD *)this + 64))(this);
    C3D::RenderGraphResourceManager::set((uint64_t)v4, v8, *((_QWORD *)this + 14));
    v9 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("scn_motionblur_neighbormax_x"));
    v10 = *((_QWORD *)this + 14);
    v11 = *(void **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v9;
    if (v11)

    v12 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("scn_motionblur_neighbormax_y"));
    v13 = *((_QWORD *)this + 14);
    v14 = *(void **)(v13 + 24);
    *(_QWORD *)(v13 + 24) = v12;
    if (v14)

  }
}

uint64_t C3D::MBNeighborMaxPass::execute(uint64_t a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  void **v4;
  MTLTexture *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  MTLComputePipelineState *v13;

  v3 = *a2;
  v4 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  if ((void **)v3->_textures[0] != v4)
  {
    v3->_textures[0] = (MTLTexture *)v4;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v5 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  if (v3->_textures[1] != v5)
  {
    v3->_textures[1] = v5;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v6 = *(unsigned __int8 *)(a1 + 120);
  v7 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = v8 + 16;
  v10 = v8 + 24;
  if (v6)
    v11 = v10;
  else
    v11 = v9;
  v12 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(v11);
  v13 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v12);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v7, v13);
}

void C3D::MBNeighborMaxPassResource::~MBNeighborMaxPassResource(C3D::MBNeighborMaxPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A3D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A3D8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

const char *C3D::TemporalAAPass::name(C3D::TemporalAAPass *this)
{
  return "TemporalAA";
}

void C3D::TemporalAAPass::setup(C3D::TemporalAAPass *this)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;

  C3D::Pass::setInputCount(this, 3u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v4);
  *(_OWORD *)(v2 + 16) = v4;
  *(_DWORD *)(v2 + 32) = v5;
  *(_BYTE *)(v2 + 31) = 0;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 1u) + 8) = "VELOCITY";
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 2u) + 64) = 2;
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 2u) + 8) = "DEPTH";
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v4);
  *(_OWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 32) = v5;
  if (*(_WORD *)(v3 + 28) == 81)
    *(_WORD *)(v3 + 28) = 80;
  *((_BYTE *)this + 121) = 0;
}

void C3D::TemporalAAPass::compile(C3D::TemporalAAPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  C3D::RenderGraphResourceManager *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::TemporalAAPass *)((char *)this + 32), 0);
  *((_BYTE *)this + 120) = (-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](RenderContext) & 1) == 0;
  v5 = *(int *)(v4 + 16) | ((unint64_t)*(unsigned __int16 *)(v4 + 28) << 32);
  v6 = 0xC6A4A7935BD1E995
     * (C3D::Pass::hashName(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995
                                                          * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))));
  v7 = (0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47))) >> 47);
  v8 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v9 = C3D::RenderGraphResourceManager::get(v8, v7);
  *((_QWORD *)this + 14) = v9;
  if (!v9)
  {
    *((_BYTE *)this + 121) = 1;
    v10 = operator new();
    *(_QWORD *)v10 = &off_1EA59A1E8;
    *(_QWORD *)(v10 + 8) = 0;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *((_QWORD *)this + 14) = v10;
    C3D::RenderGraphResourceManager::set((uint64_t)v8, v7, v10);
    v11 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("temporal_aa"));
    v12 = *((_QWORD *)this + 14);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;
    if (v13)

    v14 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    objc_msgSend(v14, "setTextureType:", 2);
    objc_msgSend(v14, "setWidth:", *(unsigned __int16 *)(v4 + 16));
    objc_msgSend(v14, "setHeight:", *(unsigned __int16 *)(v4 + 18));
    objc_msgSend(v14, "setPixelFormat:", *(unsigned __int16 *)(v4 + 28));
    objc_msgSend(v14, "setUsage:", 3);
    v15 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newTextureWithDescriptor:", v14);
    v16 = *((_QWORD *)this + 14);
    v17 = *(void **)(v16 + 16);
    *(_QWORD *)(v16 + 16) = v15;
    if (v17)

    v18 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newTextureWithDescriptor:", v14);
    v19 = *((_QWORD *)this + 14);
    v20 = *(void **)(v19 + 24);
    *(_QWORD *)(v19 + 24) = v18;
    if (v20)

  }
}

void *C3D::TemporalAAPass::execute(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  SCNMTLComputeCommandEncoder *v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  MTLTexture *v12;
  uint64_t v13;
  float32x2_t TAAJitter;
  unsigned int v15;
  float32x2_t v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float MotionBlurIntensity;
  float v21;
  uint64_t v22;
  MTLComputePipelineState *v23;
  float32x2_t v29;
  __n128 ViewportAtIndex;
  MTLSize v32;
  MTLSize v33;
  _QWORD v34[2];
  char v35;
  float v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  result = C3DEngineContextGetPointOfView(*(_QWORD *)(a1 + 16));
  if (result)
  {
    result = C3DNodeGetCamera((uint64_t)result);
    if (result)
    {
      v5 = (uint64_t)result;
      ViewportAtIndex = C3DEngineContextGetViewportAtIndex(*(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a2 + 8));
      v6 = *(SCNMTLComputeCommandEncoder **)a2;
      v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
      if ((void **)v6->_textures[0] != v7)
      {
        v6->_textures[0] = (MTLTexture *)v7;
        v6->_texturesToBind[0] |= 1uLL;
      }
      v8 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
      if ((void **)v6->_textures[1] != v8)
      {
        v6->_textures[1] = (MTLTexture *)v8;
        v6->_texturesToBind[0] |= 2uLL;
      }
      v9 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 2u);
      if ((void **)v6->_textures[2] != v9)
      {
        v6->_textures[2] = (MTLTexture *)v9;
        v6->_texturesToBind[0] |= 4uLL;
      }
      v10 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 112) + 8 * (*(_BYTE *)(a1 + 120) == 0) + 16);
      if (v6->_textures[3] != (MTLTexture *)v10)
      {
        v6->_textures[3] = (MTLTexture *)v10;
        v6->_texturesToBind[0] |= 8uLL;
      }
      v11 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 112) + 8 * *(unsigned __int8 *)(a1 + 120) + 16);
      if (v6->_textures[4] != (MTLTexture *)v11)
      {
        v6->_textures[4] = (MTLTexture *)v11;
        v6->_texturesToBind[0] |= 0x10uLL;
      }
      v12 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
      if (v6->_textures[5] != v12)
      {
        v6->_textures[5] = v12;
        v6->_texturesToBind[0] |= 0x20uLL;
      }
      v13 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(a1 + 32), 0);
      TAAJitter = C3DEngineContextGetTAAJitter(*(float32x2_t **)(a1 + 16), 0);
      v15 = *(unsigned __int16 *)(v13 + 16);
      v16.f32[0] = (float)v15;
      v17 = *(unsigned __int16 *)(v13 + 18);
      v16.f32[1] = (float)v17;
      *(float *)&v18 = 1.0 / (double)v15;
      v19 = 1.0 / (double)v17;
      *((float *)&v18 + 1) = v19;
      v34[0] = vmul_f32(vmul_f32(TAAJitter, (float32x2_t)0xBF0000003F000000), v16);
      v34[1] = v18;
      MotionBlurIntensity = C3DCameraGetMotionBlurIntensity(v5);
      if (MotionBlurIntensity <= 0.0)
        v21 = 1.0;
      else
        v21 = 1.0 / MotionBlurIntensity;
      v36 = v21;
      v35 = *(_BYTE *)(a1 + 121);
      SCNMTLComputeCommandEncoder::setBytes(v6, v34, 0x20uLL, 0);
      v22 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*(_QWORD *)(a1 + 112) + 40);
      v23 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v22);
      __asm { FMOV            V1.2S, #16.0 }
      v29 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)ViewportAtIndex, (int8x16_t)ViewportAtIndex, 8uLL), _D1);
      __asm { FMOV            V1.2S, #-1.0 }
      *(uint64x2_t *)&v33.width = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(vadd_f32(v29, _D1), (float32x2_t)vdup_n_s32(0x3D800000u))));
      v33.depth = 1;
      *(int64x2_t *)&v32.width = vdupq_n_s64(0x10uLL);
      v32.depth = 1;
      return (void *)SCNMTLComputeCommandEncoder::dispatch(v6, v23, &v33, &v32);
    }
  }
  return result;
}

void C3D::TemporalAAPassResource::~TemporalAAPassResource(C3D::TemporalAAPassResource *this)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)this = &off_1EA59A1E8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  for (i = 24; i != 8; i -= 8)
  {
    v5 = *(void **)((char *)this + i);
    if (v5)

  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1EA59A1E8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  v4 = 24;
  while (1)
  {
    v5 = *(void **)((char *)this + v4);
    if (v5)

    v4 -= 8;
    if (v4 == 8)
      JUMPOUT(0x1DF0D41C0);
  }
}

C3D::ScratchAllocator *C3D::flattenedNodesForSelectedNodes(C3D *this, const __CFArray *a2, __C3DEngineContext *a3, void *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Scene;
  C3D::ScratchAllocator *Aligned;
  CFIndex Count;
  uint64_t StackAllocator;
  _DWORD *v35;
  CFIndex v36;
  uint64_t v37;
  _QWORD *ValueAtIndex;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  _QWORD v44[5];

  if (!this && (v7 = scn_default_log(), os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)))
  {
    C3D::flattenedNodesForSelectedNodes(v7, v8, v9, v10, v11, v12, v13, v14);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v15 = scn_default_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    C3DEngineContextGetStats_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_6:
  if (!a3)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      C3D::flattenedNodesForSelectedNodes(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  Scene = C3DEngineContextGetScene((uint64_t)a2);
  Aligned = (C3D::ScratchAllocator *)C3DScratchAllocatorAllocateAligned(a3, 24, 8, 0);
  C3D::Array<__C3DNode *,0u,C3D::ScratchAllocator>::Array(Aligned, a3);
  Count = CFArrayGetCount(this);
  C3D::Array<__C3DNode *,0u,C3D::ScratchAllocator>::reserve(Aligned, Count);
  StackAllocator = C3DEngineContextGetStackAllocator((uint64_t)a2);
  C3DStackAllocatorPushFrame(StackAllocator);
  v35 = C3DStackAllocatorAllocate(StackAllocator, 0x28uLL);
  v43 = StackAllocator;
  *(_QWORD *)v35 = StackAllocator;
  C3D::Hash<__C3DNode *,C3D::StackAllocator>::_allocate((uint64_t)v35, 32);
  if (Count >= 1)
  {
    v36 = 0;
    v37 = MEMORY[0x1E0C809B0];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(this, v36);
      if (C3DGetScene(ValueAtIndex) == Scene)
      {
        v44[0] = v37;
        v44[1] = 3221225472;
        v44[2] = ___ZN3C3D30flattenedNodesForSelectedNodesEPK9__CFArrayP18__C3DEngineContextPv_block_invoke;
        v44[3] = &__block_descriptor_40_e20_q16__0____C3DNode__8l;
        v44[4] = v35;
        C3DNodeApplyHierarchy((uint64_t)ValueAtIndex, (uint64_t)v44);
      }
      ++v36;
    }
    while (Count != v36);
  }
  v39 = v35[9];
  if (v39 != -15)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      if ((*(_WORD *)(*((_QWORD *)v35 + 3) + 2 * v41) & 1) != 0)
      {
        C3D::Array<C3D::Pass *,0u,C3D::ScratchAllocator>::push_back<C3D::Pass *&>(Aligned, (_QWORD *)(*((_QWORD *)v35 + 2) + v40));
        v39 = v35[9];
      }
      ++v41;
      v40 += 8;
    }
    while (v41 < (v39 + 15));
  }
  C3DStackAllocatorPopFrame(v43);
  return Aligned;
}

_QWORD *C3D::Array<__C3DNode *,0u,C3D::ScratchAllocator>::reserve(_QWORD *result, unsigned int a2)
{
  _QWORD *v3;
  const void *v4;
  void *Aligned;

  if (*((_DWORD *)result + 3) < a2)
  {
    v3 = result;
    v4 = (const void *)result[2];
    Aligned = (void *)C3DScratchAllocatorAllocateAligned(*result, 8 * a2, 8, 0);
    result = memcpy(Aligned, v4, 8 * *((unsigned int *)v3 + 2));
    v3[2] = Aligned;
    *((_DWORD *)v3 + 3) = a2;
  }
  return result;
}

BOOL ___ZN3C3D30flattenedNodesForSelectedNodesEPK9__CFArrayP18__C3DEngineContextPv_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  result = 0;
  if (a2)
  {
    if (C3DNodeIsHiddenOrTransparent(a2))
      return 1;
    v4 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))) ^ 0x35253C9ADE8F4CA8);
    v5 = *(_QWORD *)(a1 + 32);
    v7 = a2;
    if (!C3D::Hash<__C3DNode *,C3D::StackAllocator>::insert(v5, (0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) >> 47), &v7))return 1;
  }
  return result;
}

C3D::ScratchAllocator *C3D::Array<__C3DNode *,0u,C3D::ScratchAllocator>::Array(C3D::ScratchAllocator *a1, void *a2)
{
  C3D::ScratchAllocator *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = C3D::ScratchAllocator::ScratchAllocator(a1, a2);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = (char *)v4 + 24;
  if (!a2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3D::Array<C3D::Pass *,0u,C3D::StackAllocator>::Array(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  return a1;
}

void C3D::Hash<__C3DNode *,C3D::StackAllocator>::_allocate(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  size_t v5;

  if ((a2 & (a2 - 1)) != 0)
    C3D::Hash<C3D::FinalPass::RenderTarget,C3D::StackAllocator>::_allocate();
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 0);
  v5 = 8 * v3;
  *(_QWORD *)(a1 + 8) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, v5 & 0xFFFFFFF8, 8, 0);
  *(_QWORD *)(a1 + 16) = C3DStackAllocatorAllocateAligned(*(_QWORD *)a1, v5 & 0xFFFFFFF8, 8, 0);
  memset(*(void **)(a1 + 8), 255, v5);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t C3D::Hash<__C3DNode *,C3D::StackAllocator>::insert(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    C3D::Hash<__C3DNode *,C3D::StackAllocator>::_grow(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void C3D::Hash<__C3DNode *,C3D::StackAllocator>::_grow(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  C3D::Hash<__C3DNode *,C3D::StackAllocator>::_allocate(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        C3D::Hash<__C3DNode *,C3D::StackAllocator>::insert(a1, *v3, v2);
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

uint64_t _C3DMaterialFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFNumber *Value;
  CFStringRef v17;
  const __CFDictionary *Data;
  const __CFDictionary *v19;
  const void *CommonProfile;
  const void *v21;
  uint64_t valuePtr;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("effectID"));
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
    v17 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%ld"), valuePtr);
    Data = (const __CFDictionary *)C3DSceneSourceGetData(a2);
    v19 = (const __CFDictionary *)CFDictionaryGetValue(Data, CFSTR("effect"));
    theDict = (CFDictionaryRef)CFDictionaryGetValue(v19, v17);
    CFRelease(v17);
  }
  CommonProfile = (const void *)C3DMaterialGetCommonProfile(a1);
  v21 = CFDictionaryGetValue(theDict, CFSTR("commonProfile"));
  return C3DFinalizeDeserialization(CommonProfile, a2, (uint64_t)v21, a4);
}

__CFDictionary *C3DMaterialCopyEffectPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *Mutable;
  const void *CommonProfile;
  const void *v18;
  const void *v19;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CommonProfile = (const void *)C3DMaterialGetCommonProfile(a1);
  if (CommonProfile)
  {
    v18 = (const void *)C3DCopyPropertyList(CommonProfile, a2, a3, a4);
    if (v18)
    {
      v19 = v18;
      CFDictionarySetValue(Mutable, CFSTR("commonProfile"), v18);
      CFRelease(v19);
    }
  }
  return Mutable;
}

uint64_t C3DMaterialCopyForFlatShading(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int IsDoubleSided;
  __int128 v7;
  __int128 v8;

  v7 = xmmword_1DD009A00;
  v8 = xmmword_1DD007610;
  v2 = C3DMaterialCreate();
  C3DEffectCommonProfileCopy(*(_QWORD *)(a1 + 64), *(_QWORD *)(v2 + 64));
  v3 = 0;
  v4 = *(_QWORD *)(v2 + 64);
  do
  {
    C3DEffectCommonProfileSetImage(v4, (char)v3, 0);
    C3DEffectCommonProfileSetColor(*(_QWORD *)(v2 + 64), (char)v3++, (float *)&v8);
    v4 = *(_QWORD *)(v2 + 64);
  }
  while (v3 != 15);
  C3DEffectCommonProfileSetLightingModel(v4, 0);
  C3DEffectCommonProfileSetImage(*(_QWORD *)(v2 + 64), 2, 0);
  C3DEffectCommonProfileSetColor(*(_QWORD *)(v2 + 64), 2, (float *)&v7);
  C3DEffectCommonProfileSetImage(*(_QWORD *)(v2 + 64), 6, 0);
  C3DEffectCommonProfileSetColor(*(_QWORD *)(v2 + 64), 6, (float *)&v7);
  C3DMaterialSetFillMode(v2, 1u);
  C3DMaterialSetBlendMode(v2, 5);
  C3DMaterialSetColorBufferWriteMask(v2, 15);
  IsDoubleSided = C3DMaterialIsDoubleSided(a1);
  C3DMaterialSetDoubleSided(v2, IsDoubleSided);
  return v2;
}

void C3DMaterialSetFillMode(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 >= 2)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMaterialSetFillMode_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (*(unsigned __int8 *)(a1 + 91) != a2)
  {
    *(_BYTE *)(a1 + 91) = a2;
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetBlendMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 92) != a2)
  {
    *(_BYTE *)(a1 + 92) = a2;
    v12 = C3DGetScene((_QWORD *)a1);
    C3DScenePostPipelineEvent(v12, 3, (const void *)a1, 0);
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetColorBufferWriteMask(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 93) != a2)
  {
    *(_BYTE *)(a1 + 93) = a2;
    v12 = C3DGetScene((_QWORD *)a1);
    C3DScenePostPipelineEvent(v12, 3, (const void *)a1, 0);
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetDoubleSided(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 100) != a2)
  {
    *(_BYTE *)(a1 + 100) = a2;
    v12 = C3DGetScene((_QWORD *)a1);
    C3DScenePostPipelineEvent(v12, 3, (const void *)a1, 0);
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetCullMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 90) != a2)
  {
    *(_BYTE *)(a1 + 90) = a2;
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetEnableWriteInDepthBuffer(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 88) != a2)
  {
    *(_BYTE *)(a1 + 88) = a2;
    v12 = C3DGetScene((_QWORD *)a1);
    C3DScenePostPipelineEvent(v12, 3, (const void *)a1, 0);
    __RasterizerStatesDidChange(a1);
  }
}

void C3DMaterialSetEnableReadFromDepthBuffer(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 89) != a2)
  {
    *(_BYTE *)(a1 + 89) = a2;
    v12 = C3DGetScene((_QWORD *)a1);
    C3DScenePostPipelineEvent(v12, 3, (const void *)a1, 0);
    __RasterizerStatesDidChange(a1);
  }
}

CFTypeRef C3DMaterialSetTechnique(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryAppendMaterial_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

CFTypeRef C3DMaterialSetupSinglePassTechniqueWithProgram(uint64_t a1, const void *a2)
{
  _QWORD *Technique;
  const void *PassAtIndex;

  Technique = (_QWORD *)C3DMaterialGetTechnique(a1);
  if (!Technique)
  {
    Technique = (_QWORD *)C3DFXTechniqueCreateWithCapacity(1uLL);
    C3DMaterialSetTechnique(a1, Technique);
    CFRelease(Technique);
  }
  if (C3DFXTechniqueGetPassCount((uint64_t)Technique) < 1)
  {
    PassAtIndex = (const void *)C3DFXPassCreate();
    C3DFXTechniqueAppendPass(Technique, PassAtIndex);
    CFRelease(PassAtIndex);
  }
  else
  {
    PassAtIndex = (const void *)C3DFXTechniqueGetPassAtIndex((uint64_t)Technique, 0);
  }
  C3DFXPassSetDrawInstruction((uint64_t)PassAtIndex, 2);
  return C3DFXPassSetProgram((uint64_t)PassAtIndex, a2);
}

__CFString *_C3DMaterialCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t Name;
  uint64_t CommonProfileIfNoTechnique;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DEntityGetName(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DMaterial %p : \"%@\", "), a1, Name);
  CommonProfileIfNoTechnique = C3DMaterialGetCommonProfileIfNoTechnique(a1);
  if (CommonProfileIfNoTechnique)
    CFStringAppendFormat(Mutable, 0, CFSTR("common profile %@"), CommonProfileIfNoTechnique);
  else
    CFStringAppendFormat(Mutable, 0, CFSTR("custom %@"), *(_QWORD *)(a1 + 72));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t _C3DMaterialInitWithPropertyList(_BYTE *a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *Value;
  const __CFNumber *v26;
  const __CFDictionary *v27;
  CFStringRef v28;
  const void *v29;
  const __CFDictionary *Data;
  const __CFDictionary *v31;
  const void *v32;
  uint64_t v33;
  const void *CommonProfile;
  NSObject *v35;
  const __CFNumber *v36;
  const __CFNumber *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  const __CFNumber *v40;
  CFTypeID v41;
  const __CFNumber *v42;
  const __CFNumber *v43;
  CFTypeID v44;
  const __CFNumber *v45;
  const __CFNumber *v46;
  CFTypeID v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  CFTypeID v50;
  NSObject *v51;
  uint8_t valuePtr[16];

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DGeometryFinalizeDeserialization_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  v24 = C3DEntityInitWithPropertyList((uint64_t)a1, a2);
  if ((v24 & 1) != 0)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("name"));
    if (Value)
      C3DMaterialSetName((uint64_t)a1, Value);
    v26 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("effectID"));
    v27 = a2;
    if (v26)
    {
      *(_QWORD *)valuePtr = 0;
      CFNumberGetValue(v26, kCFNumberLongType, valuePtr);
      v28 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%ld"), *(_QWORD *)valuePtr);
      v29 = CFDictionaryGetValue(a3, CFSTR("__library__"));
      Data = (const __CFDictionary *)C3DSceneSourceGetData((uint64_t)v29);
      v31 = (const __CFDictionary *)CFDictionaryGetValue(Data, CFSTR("effect"));
      v27 = (const __CFDictionary *)CFDictionaryGetValue(v31, v28);
      CFRelease(v28);
    }
    v32 = CFDictionaryGetValue(v27, CFSTR("commonProfile"));
    if (v32)
    {
      v33 = (uint64_t)v32;
      CommonProfile = (const void *)C3DMaterialGetCommonProfile((uint64_t)a1);
      if ((C3DInitWithPropertyList(CommonProfile, v33, (uint64_t)a3, a4) & 1) == 0)
      {
        v35 = scn_default_log();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)valuePtr = 0;
          _os_log_impl(&dword_1DCCB8000, v35, OS_LOG_TYPE_DEFAULT, "Warning: Could not deserialize an effect", valuePtr, 2u);
        }
      }
    }
    v36 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("enableWriteInDepthBuffer"));
    if (v36)
    {
      v37 = v36;
      v38 = CFGetTypeID(v36);
      if (v38 == CFNumberGetTypeID())
      {
        *(_DWORD *)valuePtr = 0;
        CFNumberGetValue(v37, kCFNumberIntType, valuePtr);
        a1[88] = valuePtr[0];
      }
    }
    v39 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("enableReadsFromDepthBuffer"));
    if (v39)
    {
      v40 = v39;
      v41 = CFGetTypeID(v39);
      if (v41 == CFNumberGetTypeID())
      {
        *(_DWORD *)valuePtr = 0;
        CFNumberGetValue(v40, kCFNumberIntType, valuePtr);
        a1[89] = valuePtr[0];
      }
    }
    v42 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("doubleSided"));
    if (v42)
    {
      v43 = v42;
      v44 = CFGetTypeID(v42);
      if (v44 == CFNumberGetTypeID())
      {
        *(_DWORD *)valuePtr = 0;
        CFNumberGetValue(v43, kCFNumberIntType, valuePtr);
        a1[100] = *(_DWORD *)valuePtr != 0;
      }
    }
    v45 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("cullMode"));
    if (v45)
    {
      v46 = v45;
      v47 = CFGetTypeID(v45);
      if (v47 == CFNumberGetTypeID())
      {
        *(_DWORD *)valuePtr = 0;
        CFNumberGetValue(v46, kCFNumberIntType, valuePtr);
        a1[90] = valuePtr[0];
      }
    }
    v48 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("fillMode"));
    if (v48)
    {
      v49 = v48;
      v50 = CFGetTypeID(v48);
      if (v50 == CFNumberGetTypeID())
      {
        *(_DWORD *)valuePtr = 0;
        CFNumberGetValue(v49, kCFNumberIntType, valuePtr);
        a1[91] = valuePtr[0];
      }
    }
    a1[91] = C3DFillModeFromColladaFillMode[a1[91]];
  }
  else
  {
    v51 = scn_default_log();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      _C3DMaterialInitWithPropertyList_cold_1(v51);
  }
  return v24;
}

__CFDictionary *_C3DMaterialCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  const void *Name;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  char v25;
  CFDictionaryRef *valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  valuePtr = C3DLibraryGetEntryID(a2, (CFTypeRef)a1);
  v15 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFDictionarySetValue(v14, CFSTR("effectID"), v15);
  CFRelease(v15);
  if (C3DMaterialGetName(a1))
  {
    Name = (const void *)C3DMaterialGetName(a1);
    CFDictionarySetValue(v14, CFSTR("name"), Name);
  }
  v17 = (const void *)*MEMORY[0x1E0C9AE50];
  v18 = (const void *)*MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(a1 + 88))
    v19 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v19 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v14, CFSTR("enableWriteInDepthBuffer"), v19);
  if (*(_BYTE *)(a1 + 89))
    v20 = v17;
  else
    v20 = v18;
  CFDictionarySetValue(v14, CFSTR("enableReadsFromDepthBuffer"), v20);
  if (*(_BYTE *)(a1 + 100))
    v21 = v17;
  else
    v21 = v18;
  CFDictionarySetValue(v14, CFSTR("doubleSided"), v21);
  v22 = CFNumberCreate(0, kCFNumberCharType, (const void *)(a1 + 90));
  CFDictionarySetValue(v14, CFSTR("cullMode"), v22);
  CFRelease(v22);
  v25 = C3DFillModeToColladaFillMode[*(unsigned __int8 *)(a1 + 91)];
  v23 = CFNumberCreate(0, kCFNumberCharType, &v25);
  CFDictionarySetValue(v14, CFSTR("fillMode"), v23);
  CFRelease(v23);
  return v14;
}

_QWORD *_C3DMaterialFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *CommonProfile;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  CommonProfile = (const void *)C3DMaterialGetCommonProfile(a1);
  return C3DFillLibraryForSerialization(CommonProfile, a2, a3);
}

__CFArray *_C3DMaterialCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  const CFDictionaryKeyCallBacks *v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  uint64_t Name;
  int v41;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 1;
  valuePtr = 5;
  Name = C3DMaterialGetName(a1);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v8 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v41 = 1;
  valuePtr = 5;
  Name = C3DMaterialGetCommonProfile(a1);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v12 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("commonProfile"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 4;
  Name = a1 + 90;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v16 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("cullMode"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 4;
  Name = a1 + 91;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v20 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("fillMode"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v22 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 3;
  Name = a1 + 89;
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v25 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("enableReadsFromDepthBuffer"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v26 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v27 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v21);
  v41 = 0;
  valuePtr = 3;
  Name = a1 + 88;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v30 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("enableWriteInDepthBuffer"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v26, MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 3;
  Name = a1 + 100;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v34 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("doubleSided"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 2;
  Name = a1 + 48;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v38 = CFNumberCreate(0, kCFNumberLongType, &Name);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("sceneRef"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  return Mutable;
}

uint64_t _C3DMaterialSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

void sub_1DCE1D284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_7_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void C3DSceneRegisterNodeConstrains(uint64_t a1, float32x4_t *a2)
{
  const __CFArray *Constraints;
  uint64_t ControllerManager;
  const char *v6;

  Constraints = C3DNodeGetConstraints((uint64_t)a2);
  ControllerManager = C3DSceneGetControllerManager(a1);
  v6 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("nodeConstraints-%p"), a2);
  C3DConstraintManagerSetConstraintsForKey(ControllerManager, Constraints, a2, v6);
  CFRelease(v6);
}

uint64_t C3DSceneGetControllerManager(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 80);
}

void C3DSceneUnregisterNodeParticleSystem(uint64_t a1, uint64_t a2)
{
  _QWORD *ParticleManager;

  ParticleManager = C3DSceneGetParticleManager(a1, 0);
  if (ParticleManager)
    C3DParticleManagerUnregisterSystem((uint64_t)ParticleManager, a2);
}

void C3DSceneRegisterNodeFilters(CFTypeRef *a1, const void *a2)
{
  const __CFArray *Filters;
  __CFSet *Mutable;
  __CFSet *v6;
  uint64_t SharedInstance;

  Filters = C3DNodeGetFilters((uint64_t)a2);
  if (Filters && CFArrayGetCount(Filters) >= 1)
  {
    Mutable = (__CFSet *)a1[13];
    if (!Mutable)
    {
      Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
      a1[13] = Mutable;
    }
    CFSetAddValue(Mutable, a2);
  }
  else
  {
    v6 = (__CFSet *)a1[13];
    if (v6)
    {
      CFSetRemoveValue(v6, a2);
      if (!CFSetGetCount((CFSetRef)a1[13]))
      {
        CFRelease(a1[13]);
        a1[13] = 0;
      }
    }
  }
  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), a1, 0, 1u);
}

uint64_t C3DSceneGetRegisteredNodeFilters(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 104);
}

const __CFDictionary *C3DSceneGetRegisteredCIFilterTechniqueForNode(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(const __CFDictionary **)(a1 + 112);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  return result;
}

void C3DSceneRegisterCIFilterTechniqueForNode(uint64_t a1, void *key, void *value)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *Mutable;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Mutable = *(__CFDictionary **)(a1 + 112);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 112) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
}

void C3DSceneClearRegisteredCIFilterTechniques(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(__CFDictionary **)(a1 + 112);
  if (v10)
    CFDictionaryRemoveAllValues(v10);
}

id *C3DSceneNodeWillBeRemovedOrHidden(uint64_t a1, float32x4_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ControllerManager;
  const char *v14;
  __CFSet *v15;
  uint64_t SharedInstance;
  id *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 120);
  if (v12)
    C3DEnginePipelineRemoveNodeFromRendering(v12, (uint64_t)a2);
  if (C3DNodeGetConstraints((uint64_t)a2))
  {
    ControllerManager = C3DSceneGetControllerManager(a1);
    v14 = (const char *)CFStringCreateWithFormat(0, 0, CFSTR("nodeConstraints-%p"), a2);
    C3DConstraintManagerSetConstraintsForKey(ControllerManager, 0, a2, v14);
    CFRelease(v14);
  }
  if (C3DNodeIsJoint((uint64_t)a2))
    C3DEnginePipelineInvalidateAllSkinnersTransfromTreeHandles(*(_QWORD *)(a1 + 120));
  if (C3DNodeGetHasPhysicsBody((uint64_t)a2))
    C3DSceneUnregisterNodePhysicsBody((id *)a1, (id *)a2);
  if (C3DNodeGetHasPhysicsField((uint64_t)a2))
    C3DSceneUnregisterNodePhysicsField((id *)a1, (id *)a2);
  if (C3DNodeGetParticleSystems((uint64_t)a2))
    C3DSceneUnregisterNodeParticleSystem(a1, (uint64_t)a2);
  if (*(_QWORD *)(a1 + 128) && C3DNodeHasLight((uint64_t)a2))
    C3DLightingSystemRemove(*(_QWORD *)(a1 + 128), a2);
  if (C3DNodeGetFilters((uint64_t)a2))
  {
    v15 = *(__CFSet **)(a1 + 104);
    if (v15)
    {
      CFSetRemoveValue(v15, a2);
      if (!CFSetGetCount(*(CFSetRef *)(a1 + 104)))
      {
        CFRelease(*(CFTypeRef *)(a1 + 104));
        *(_QWORD *)(a1 + 104) = 0;
      }
    }
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), (const void *)a1, 0, 1u);
  }
  C3DNodeRemoveAllAudioPlayers((uint64_t)a2);
  result = *(id **)(a1 + 416);
  if (result)
    return C3DAuthoringEnvironment2NodeRemovedFromScene(result, (id *)a2);
  return result;
}

uint64_t C3DSceneCreateCopy(uint64_t a1)
{
  uint64_t Instance;
  __C3DTransformTree *v3;
  uint64_t v4;
  const __CFDictionary *Attribute;
  uint64_t v6;
  uint64_t *Copy;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (C3DSceneGetTypeID_onceToken != -1)
    dispatch_once(&C3DSceneGetTypeID_onceToken, &__block_literal_global_66);
  Instance = C3DTypeCreateInstance_(C3DSceneGetTypeID_typeID, 0x1A0uLL);
  if (Instance)
  {
    *(_QWORD *)(Instance + 72) = C3DAnimationManagerCreate();
    *(_QWORD *)(Instance + 80) = C3DConstraintManagerCreate(Instance);
    *(_QWORD *)(Instance + 96) = C3DModelValueStorageCreate();
    *(_QWORD *)(Instance + 128) = C3DLightingSystemCreate(Instance);
    *(_QWORD *)(Instance + 136) = C3DDynamicBatchingSystemCreate();
    *(_QWORD *)(Instance + 192) = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(Instance + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(Instance + 328) = *(_QWORD *)(a1 + 328);
    *(_DWORD *)(Instance + 336) = *(_DWORD *)(a1 + 336);
    *(_OWORD *)(Instance + 352) = *(_OWORD *)(a1 + 352);
    *(_BYTE *)(Instance + 368) = *(_BYTE *)(a1 + 368);
    *(_WORD *)(Instance + 370) = *(_WORD *)(a1 + 370);
    *(_DWORD *)(Instance + 372) = *(_DWORD *)(a1 + 372);
    *(_DWORD *)(Instance + 376) = *(_DWORD *)(a1 + 376);
    *(_QWORD *)(Instance + 120) = C3DEnginePipelineCreate(Instance);
    v3 = (__C3DTransformTree *)C3DTransformTreeCreate(a1);
    *(_QWORD *)(Instance + 152) = v3;
    C3DCullingSystemCreate(v3);
    *(_QWORD *)(Instance + 144) = v4;
    C3DAnimationManagerSetModelValueStorage(*(_QWORD *)(Instance + 72), *(CFTypeRef *)(Instance + 96));
    Attribute = C3DEntityGetAttribute(a1, CFSTR("defaultLight"));
    if (Attribute == (const __CFDictionary *)*MEMORY[0x1E0C9AE50])
      C3DEntitySetAttribute((CFTypeRef *)Instance, CFSTR("defaultLight"), Attribute);
    v9.__sig = 0;
    *(_QWORD *)v9.__opaque = 0;
    pthread_mutexattr_init(&v9);
    pthread_mutexattr_settype(&v9, 2);
    pthread_mutex_init((pthread_mutex_t *)(Instance + 232), &v9);
    pthread_mutexattr_destroy(&v9);
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      Copy = (uint64_t *)C3DNodeCreateCopy(v6, 1);
      C3DSceneSetRootNode(Instance, Copy);
      if (Copy)
        CFRelease(Copy);
    }
  }
  return Instance;
}

double C3DSceneGetStartTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 176);
}

double C3DSceneGetEndTime(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(double *)(a1 + 184);
}

void C3DSceneSetStartTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 176) = a2;
}

void C3DSceneSetEndTime(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(double *)(a1 + 184) = a2;
}

float C3DSceneGetFrameRate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 192);
}

void C3DSceneSetFrameRate(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 192) = a2;
}

float C3DSceneGetPlaybackSpeed(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 196);
}

void C3DSceneSetPlaybackSpeed(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 196) = a2;
}

float C3DSceneGetUnit(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 224);
}

void C3DSceneSetUnit(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 224) = a2;
}

__n128 C3DSceneSetUpAxis(__n128 *a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *a2;
  a1[13] = *a2;
  return result;
}

void C3DSceneBumpFrameStamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  ++*(_DWORD *)(a1 + 296);
  C3DLightingSystemNextFrame(*(_QWORD *)(a1 + 128));
  if (!*(_BYTE *)(a1 + 382))
    C3DTransformTreeNextFrame(*(__C3DTransformTree **)(a1 + 152));
}

uint64_t C3DSceneGetFrameStamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 296);
}

uint64_t C3DSceneGetStateStamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 300);
}

void C3DSceneSetFogDensityExponent(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 336) = a2;
}

void C3DSceneSetFogEndDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 332) = a2;
}

void C3DSceneSetFogStartDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 328) = a2;
}

void C3DSceneSetWantsSSR(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 368) = a2;
}

void C3DSceneSetSSRSampleCount(uint64_t a1, __int16 a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_WORD *)(a1 + 370) = a2;
}

void C3DSceneSetSSRMaxRayDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 372) = a2;
}

void C3DSceneSetSSRStride(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 376) = a2;
}

uint64_t C3DSceneIsPausedForEditing(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 381);
}

void C3DSceneSetPausedForEditing(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_BYTE *)(a1 + 381) = 1;
}

uint64_t C3DSceneIsPaused(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 382);
}

uint64_t C3DSceneSetPaused(uint64_t result, char a2)
{
  *(_BYTE *)(result + 382) = a2;
  return result;
}

__n128 C3DSceneComputeWorldToCubemapMatrix(__n128 *a1)
{
  __float2 v1;
  unint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  __float2 v5;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __float2 v9;
  unint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __n128 v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v14 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v15 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v16 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v17 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v18.n128_u32[2] = 0;
  v18.n128_u64[0] = 0;
  C3DSceneGetUpAxis(a1, &v18);
  if (v18.n128_f32[2] == 1.0)
  {
    v1 = __sincosf_stret(-1.5708);
    v2 = 0;
    v3 = v15;
    v3.i32[1] = LODWORD(v1.__cosval);
    v3.i32[2] = LODWORD(v1.__sinval);
    v4 = v14;
    v4.f32[1] = -v1.__sinval;
    v4.i32[2] = LODWORD(v1.__cosval);
    v19 = v17;
    v20 = v15;
    v21 = v14;
    v22 = v16;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    do
    {
      *(__int128 *)((char *)&v23 + v2) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v19 + v2))), v3, *(float32x2_t *)&v19.f32[v2 / 4], 1), v4, *(float32x4_t *)((char *)&v19 + v2), 2), v16, *(float32x4_t *)((char *)&v19 + v2), 3);
      v2 += 16;
    }
    while (v2 != 64);
    return (__n128)v23;
  }
  if (v18.n128_f32[2] == -1.0)
  {
    v5 = __sincosf_stret(1.5708);
    v6 = 0;
    v7 = v15;
    v7.i32[1] = LODWORD(v5.__cosval);
    v7.i32[2] = LODWORD(v5.__sinval);
    v8 = v14;
    v8.f32[1] = -v5.__sinval;
    v8.i32[2] = LODWORD(v5.__cosval);
    v19 = v17;
    v20 = v15;
    v21 = v14;
    v22 = v16;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    do
    {
      *(__int128 *)((char *)&v23 + v6) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v19 + v6))), v7, *(float32x2_t *)&v19.f32[v6 / 4], 1), v8, *(float32x4_t *)((char *)&v19 + v6), 2), v16, *(float32x4_t *)((char *)&v19 + v6), 3);
      v6 += 16;
    }
    while (v6 != 64);
    return (__n128)v23;
  }
  if (v18.n128_f32[1] == -1.0)
  {
    v9 = __sincosf_stret(3.1416);
    v10 = 0;
    v11 = v15;
    v11.i32[1] = LODWORD(v9.__cosval);
    v11.i32[2] = LODWORD(v9.__sinval);
    v12 = v14;
    v12.f32[1] = -v9.__sinval;
    v12.i32[2] = LODWORD(v9.__cosval);
    v19 = v17;
    v20 = v15;
    v21 = v14;
    v22 = v16;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    do
    {
      *(__int128 *)((char *)&v23 + v10) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(_OWORD *)((char *)&v19 + v10))), v11, *(float32x2_t *)&v19.f32[v10 / 4], 1), v12, *(float32x4_t *)((char *)&v19 + v10), 2), v16, *(float32x4_t *)((char *)&v19 + v10), 3);
      v10 += 16;
    }
    while (v10 != 64);
    return (__n128)v23;
  }
  return (__n128)v17;
}

SCNAuthoringEnvironment2 *C3DSceneGetAuthoringEnvironment2(SCNAuthoringEnvironment2 *result, int a2)
{
  uint64_t v2;
  BOOL v3;

  if (result)
  {
    v2 = (uint64_t)result;
    result = (SCNAuthoringEnvironment2 *)result[1]._physicsFieldsDictionary;
    if (result)
      v3 = 1;
    else
      v3 = a2 == 0;
    if (!v3)
    {
      result = C3DAuthoringEnvironment2Create(v2);
      *(_QWORD *)(v2 + 416) = result;
    }
  }
  return result;
}

void C3DSceneSetLayerRootNode(uint64_t a1, int a2, void *cf)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  CFTypeRef v18;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (a2 >= 4)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DSceneSetLayerRootNode_cold_1();
  }
  v15 = a1 + 8 * a2;
  v16 = *(const void **)(v15 + 384);
  if (v16 != cf)
  {
    v17 = (_QWORD *)(v15 + 384);
    if (v16)
    {
      CFRelease(v16);
      *v17 = 0;
    }
    if (cf)
      v18 = CFRetain(cf);
    else
      v18 = 0;
    *v17 = v18;
  }
  C3DNodeSetLayerIndex((uint64_t)cf, a2);
  if (cf)
    C3DAddSceneRef((uint64_t *)cf, a1);
}

uint64_t C3DSceneGetAllowsDefaultLightingEnvironmentFallback(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 324);
}

void C3DSceneSetAllowsDefaultLightingEnvironmentFallback(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSceneCreateHitTestResultsWithSegment_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 324) = a2;
}

id _C3DSceneCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t i;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t j;
  const void *v21;
  const void *v22;
  uint8_t v24[16];

  v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v3 = *(const void **)(a1 + 152);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v4 = *(const void **)(a1 + 128);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 128) = 0;
  }
  for (i = 384; i != 416; i += 8)
  {
    v6 = *(_QWORD *)(a1 + i);
    if (v6)
    {
      if (C3DGetSceneRef(v6) != *(_QWORD *)(a1 + 48))
      {
        v7 = scn_default_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_1DCCB8000, v7, OS_LOG_TYPE_DEFAULT, "Warning: RootNode is not retained by the scene", v24, 2u);
        }
      }
      C3DRemoveSceneRef(*(void **)(a1 + i), a1);
    }
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
    *(_QWORD *)(v8 + 24) = 0;
  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v12 = *(const void **)(a1 + 80);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v13 = *(const void **)(a1 + 88);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v14 = *(const void **)(a1 + 104);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v15 = *(const void **)(a1 + 112);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v16 = *(const void **)(a1 + 304);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v17 = *(const void **)(a1 + 312);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 312) = 0;
  }
  v18 = *(const void **)(a1 + 136);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v19 = *(const void **)(a1 + 416);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 416) = 0;
  }
  for (j = 384; j != 416; j += 8)
  {
    v21 = *(const void **)(a1 + j);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + j) = 0;
    }
  }
  v22 = *(const void **)(a1 + 120);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 120) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 232));
  return C3DEntityCFFinalize(a1);
}

CFStringRef _C3DSceneCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DScene>"));
}

CFStringRef _C3DSceneCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DScene>"));
}

BOOL _C3DSceneInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFNumber *Value;
  const __CFNumber *v25;
  const __CFNumber *v26;
  const __CFNumber *v27;
  const void *v28;
  const void *v29;
  _BOOL8 result;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  __n128 v40;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DGeometryFinalizeDeserialization_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) == 0)
  {
    v31 = scn_default_log();
    result = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DSceneInitWithPropertyList_cold_2(v31, v32, v33, v34, v35, v36, v37, v38);
    return 0;
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("startTime"));
  if (Value)
    CFNumberGetValue(Value, kCFNumberDoubleType, (void *)(a1 + 176));
  v25 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("endTime"));
  if (v25)
    CFNumberGetValue(v25, kCFNumberDoubleType, (void *)(a1 + 184));
  v26 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("frameRate"));
  if (v26)
    CFNumberGetValue(v26, kCFNumberFloatType, (void *)(a1 + 192));
  v27 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("unit"));
  if (v27)
    CFNumberGetValue(v27, kCFNumberFloatType, (void *)(a1 + 224));
  v40.n128_u32[2] = 0;
  v40.n128_u64[0] = 0;
  v28 = CFDictionaryGetValue(a2, CFSTR("upAxis"));
  if (v28 && C3DVector3InitWithPropertyList((uint64_t)&v40, (uint64_t)v28, a3, a4))
    C3DSceneSetUpAxis((__n128 *)a1, &v40);
  v29 = CFDictionaryGetValue(a2, CFSTR("animations"));
  if (!v29 || (C3DInitWithPropertyList(*(const void **)(a1 + 72), (uint64_t)v29, a3, a4) & 1) != 0)
    return 1;
  v39 = scn_default_log();
  result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _C3DSceneInitWithPropertyList_cold_1();
    return 0;
  }
  return result;
}

__CFDictionary *_C3DSceneCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  const void *v22;
  const void *v23;
  CFNumberRef v24;
  const void *v25;
  __CFDictionary *v26;
  __CFDictionary *v27;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (v16)
  {
    v17 = (const void *)C3DCopyPropertyList(*(const void **)(a1 + 72), a2, a3, a4);
    if (v17)
    {
      v18 = v17;
      CFDictionaryAddValue(v16, CFSTR("animations"), v17);
      CFRelease(v18);
    }
    v19 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 176));
    CFDictionaryAddValue(v16, CFSTR("startTime"), v19);
    CFRelease(v19);
    v20 = CFNumberCreate(0, kCFNumberDoubleType, (const void *)(a1 + 184));
    CFDictionaryAddValue(v16, CFSTR("endTime"), v20);
    CFRelease(v20);
    v21 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(a1 + 192));
    CFDictionaryAddValue(v16, CFSTR("frameRate"), v21);
    CFRelease(v21);
    v22 = (const void *)C3DVector3CopyPropertyList(a1 + 208);
    if (v22)
    {
      v23 = v22;
      CFDictionaryAddValue(v16, CFSTR("upAxis"), v22);
      CFRelease(v23);
    }
    v24 = CFNumberCreate(0, kCFNumberFloatType, (const void *)(a1 + 224));
    CFDictionaryAddValue(v16, CFSTR("unit"), v24);
    CFRelease(v24);
    v25 = *(const void **)(a1 + 64);
    if (v25)
    {
      v26 = _copySerializedHierarchy(v25, a2);
      if (v26)
      {
        v27 = v26;
        CFDictionaryAddValue(v16, CFSTR("nodeTree"), v26);
        CFRelease(v27);
      }
    }
  }
  return v16;
}

uint64_t _C3DSceneFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *Value;
  NSObject *v25;
  const void *v26;
  uint64_t result;
  NSObject *v28;
  CFErrorRef MalformedDocumentError;
  NSObject *v30;
  uint8_t v31[8];
  uint64_t *v32;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DSceneFinalizeDeserialization_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("nodeTree"));
  if (Value)
  {
    v32 = 0;
    if ((_deserializeHierarchy(Value, &v32, a2) & 1) != 0)
    {
      C3DSceneSetRootNode(a1, v32);
    }
    else
    {
      v25 = scn_default_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1DCCB8000, v25, OS_LOG_TYPE_DEFAULT, "Warning: Some nodes failed to be deserialized", v31, 2u);
      }
      if (!*(_QWORD *)(a1 + 64))
      {
        v30 = scn_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          _C3DSceneFinalizeDeserialization_cold_2();
          if (!a4)
            return 0;
        }
        else if (!a4)
        {
          return 0;
        }
        if (!*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
        return 0;
      }
    }
  }
  v26 = CFDictionaryGetValue(theDict, CFSTR("animations"));
  if (!v26 || C3DFinalizeDeserialization(*(const void **)(a1 + 72), a2, (uint64_t)v26, (uint64_t)a4))
    return 1;
  v28 = scn_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    _C3DSceneFinalizeDeserialization_cold_1();
    if (!a4)
      return 0;
  }
  else if (!a4)
  {
    return 0;
  }
  if (!*a4)
  {
    MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
    result = 0;
    *a4 = MalformedDocumentError;
    return result;
  }
  return 0;
}

_QWORD *_C3DSceneFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *RootNode;
  const void *v23;
  _QWORD *result;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DSceneFinalizeDeserialization_cold_3(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  RootNode = (const void *)C3DSceneGetRootNode(a1);
  if (RootNode)
  {
    v23 = RootNode;
    C3DLibraryAddEntry(a2, RootNode);
    C3DFillLibraryForSerialization(v23, a2, a3);
  }
  result = *(_QWORD **)(a1 + 72);
  if (result)
    return C3DFillLibraryForSerialization(result, a2, a3);
  return result;
}

__CFDictionary *_copySerializedHierarchy(const void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFDictionaryRef *EntryID;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  CFNumberRef v17;
  CFIndex ChildNodesCount;
  const __CFAllocator *v19;
  CFMutableArrayRef v20;
  _QWORD v22[6];
  int valuePtr;

  if (!a1)
    return 0;
  v4 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v4, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  EntryID = C3DLibraryGetEntryID(a2, a1);
  v7 = (int)EntryID;
  if (EntryID)
  {
    if ((unint64_t)EntryID >= 0x7FFFFFFF)
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        _copySerializedHierarchy_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _copySerializedHierarchy_cold_1();
  }
  valuePtr = v7;
  v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("nodeID"), v17);
  CFRelease(v17);
  if (C3DNodeHasChildren((uint64_t)a1))
  {
    ChildNodesCount = C3DNodeGetChildNodesCount((uint64_t)a1);
    v19 = CFGetAllocator(a1);
    v20 = CFArrayCreateMutable(v19, ChildNodesCount, MEMORY[0x1E0C9B378]);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 0x40000000;
    v22[2] = ___copySerializedHierarchy_block_invoke;
    v22[3] = &__block_descriptor_tmp_48;
    v22[4] = a2;
    v22[5] = v20;
    C3DNodeApplyChildren((uint64_t)a1, (uint64_t)v22);
    CFDictionaryAddValue(Mutable, CFSTR("childs"), v20);
    CFRelease(v20);
  }
  return Mutable;
}

void ___copySerializedHierarchy_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)_copySerializedHierarchy(a2, *(_QWORD *)(a1 + 32));
  if (v3)
  {
    v4 = v3;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v3);
    CFRelease(v4);
  }
}

uint64_t _deserializeHierarchy(const __CFDictionary *a1, _QWORD *a2, uint64_t a3)
{
  const __CFDictionary *v3;
  const __CFNumber *Value;
  uint64_t v7;
  uint64_t v8;
  uint64_t TypeID;
  void *v10;
  _QWORD *Entry;
  uint64_t v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  const void *ValueAtIndex;
  int v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  CFTypeRef cf;
  unsigned int valuePtr;

  v3 = a1;
  if (!a1)
    return (uint64_t)v3;
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("nodeID"));
  if (!Value)
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      _deserializeHierarchy_cold_1();
    return 0;
  }
  v7 = (uint64_t)Value;
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v8 = valuePtr;
  TypeID = C3DNodeGetTypeID();
  valuePtr = C3DLibraryGetRemappedID(a3, v8, TypeID);
  if (!valuePtr)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      _deserializeHierarchy_cold_2(v7, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  v10 = (void *)C3DNodeGetTypeID();
  Entry = C3DLibraryGetEntry(a3, v10, (const void *)valuePtr);
  if (!Entry)
  {
    v28 = scn_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      _deserializeHierarchy_cold_3();
    return 0;
  }
  v12 = (uint64_t)Entry;
  *a2 = Entry;
  v13 = (const __CFArray *)CFDictionaryGetValue(v3, CFSTR("childs"));
  if (!v13)
    return 1;
  v14 = v13;
  Count = CFArrayGetCount(v13);
  if (Count < 1)
    return 1;
  v16 = Count;
  v17 = 0;
  LODWORD(v3) = 1;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v14, v17);
    cf = 0;
    v19 = _deserializeHierarchy(ValueAtIndex, &cf, a3);
    if (cf)
      C3DNodeAddChildNode(v12, (float32x4_t *)cf);
    v3 = (const __CFDictionary *)(v3 & v19);
    ++v17;
  }
  while (v16 != v17);
  return (uint64_t)v3;
}

uint64_t _C3DSceneSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;
  const void *RootNode;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  RootNode = (const void *)C3DSceneGetRootNode(a1);
  return C3DSearchByID(RootNode, (uint64_t)a2);
}

void _C3DSceneEnumerateSubEntities()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    _C3DSceneEnumerateSubEntities_cold_1();
}

__CFArray *_C3DSceneCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  const CFDictionaryKeyCallBacks *v25;
  const CFDictionaryValueCallBacks *v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  const CFDictionaryKeyCallBacks *v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  __CFDictionary *v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  __CFDictionary *v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  uint64_t v61;
  int v62;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("root"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v62 = 0;
  valuePtr = 6;
  v61 = a1 + 176;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("startTime"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v62 = 0;
  valuePtr = 6;
  v61 = a1 + 184;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("endTime"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v62 = 0;
  valuePtr = 7;
  v61 = a1 + 192;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("frameRate"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v62 = 0;
  valuePtr = 7;
  v61 = a1 + 196;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("playbackSpeed"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = v3;
  v26 = v4;
  v27 = CFDictionaryCreateMutable(0, 4, v25, v4);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 200;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v30 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v32 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v26);
  v62 = 0;
  valuePtr = 9;
  v61 = a1 + 208;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("upAxis"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  v36 = CFDictionaryCreateMutable(0, 4, v31, v26);
  v62 = 0;
  valuePtr = 1;
  v61 = a1 + 224;
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v39 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v36, CFSTR("name"), CFSTR("unit"));
  CFDictionarySetValue(v36, CFSTR("type"), v37);
  CFDictionarySetValue(v36, CFSTR("address"), v39);
  CFDictionarySetValue(v36, CFSTR("semantic"), v38);
  CFArrayAppendValue(Mutable, v36);
  CFRelease(v38);
  CFRelease(v36);
  CFRelease(v39);
  CFRelease(v37);
  v40 = CFDictionaryCreateMutable(0, 4, v31, v26);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 72;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("animationManager"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = CFDictionaryCreateMutable(0, 4, v31, v26);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 304;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v47 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v44, CFSTR("name"), CFSTR("background"));
  CFDictionarySetValue(v44, CFSTR("type"), v45);
  CFDictionarySetValue(v44, CFSTR("address"), v47);
  CFDictionarySetValue(v44, CFSTR("semantic"), v46);
  CFArrayAppendValue(Mutable, v44);
  CFRelease(v46);
  CFRelease(v44);
  CFRelease(v47);
  CFRelease(v45);
  v48 = CFDictionaryCreateMutable(0, 4, v31, v26);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 312;
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v51 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v48, CFSTR("name"), CFSTR("environment"));
  CFDictionarySetValue(v48, CFSTR("type"), v49);
  CFDictionarySetValue(v48, CFSTR("address"), v51);
  CFDictionarySetValue(v48, CFSTR("semantic"), v50);
  CFArrayAppendValue(Mutable, v48);
  CFRelease(v50);
  CFRelease(v48);
  CFRelease(v51);
  CFRelease(v49);
  v52 = CFDictionaryCreateMutable(0, 4, v31, v26);
  v62 = 0;
  valuePtr = 2;
  v61 = a1 + 48;
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v55 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v52, CFSTR("name"), CFSTR("sceneRef"));
  CFDictionarySetValue(v52, CFSTR("type"), v53);
  CFDictionarySetValue(v52, CFSTR("address"), v55);
  CFDictionarySetValue(v52, CFSTR("semantic"), v54);
  CFArrayAppendValue(Mutable, v52);
  CFRelease(v54);
  CFRelease(v52);
  CFRelease(v55);
  CFRelease(v53);
  v56 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v26);
  v62 = 2;
  valuePtr = 5;
  v61 = a1 + 128;
  v57 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &v62);
  v59 = CFNumberCreate(0, kCFNumberLongType, &v61);
  CFDictionarySetValue(v56, CFSTR("name"), CFSTR("lightingSystem"));
  CFDictionarySetValue(v56, CFSTR("type"), v57);
  CFDictionarySetValue(v56, CFSTR("address"), v59);
  CFDictionarySetValue(v56, CFSTR("semantic"), v58);
  CFArrayAppendValue(Mutable, v56);
  CFRelease(v58);
  CFRelease(v56);
  CFRelease(v59);
  CFRelease(v57);
  return Mutable;
}

void OUTLINED_FUNCTION_6_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x18u);
}

void sub_1DCE1FF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, char a12)
{
  if (a11)
  {
    if (a12)
      btAlignedFreeInternal(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __preTickCallback(id *a1, float a2)
{
  return objc_msgSend(a1[17], "_preTick:", a2);
}

void sub_1DCE20130(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

uint64_t btC3DCollisionDispatcher::setDelegate(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t result;
  BOOL v5;
  int v6;
  int v7;

  v3 = (_BYTE *)(a1 + 10528);
  *(_QWORD *)(a1 + 10520) = a2;
  *(_BYTE *)(a1 + 10528) = objc_opt_respondsToSelector() & 1;
  v3[1] = objc_opt_respondsToSelector() & 1;
  result = objc_opt_respondsToSelector();
  v3[2] = result & 1;
  *(_DWORD *)(a1 + 10504) = 0;
  if (*v3)
    v5 = 0;
  else
    v5 = v3[1] == 0;
  if (!v5 || (result & 1) != 0)
  {
    if (v3[1])
      v6 = 3;
    else
      v6 = 1;
    if ((result & 1) != 0)
      v7 = 4;
    else
      v7 = 0;
    *(_DWORD *)(a1 + 10504) = v6 | v7;
  }
  return result;
}

uint64_t btC3DSupportInternalEdgesCustomCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, int a7)
{
  btAdjustInternalEdgeContacts(a1, a5, a2, a6, a7, 0);
  return 1;
}

SCNHitTestResult *_hitTestResult(const btCollisionObject *a1, float32x4_t *a2, float32x4_t *a3)
{
  const void *v3;
  SCNHitTestResult *v4;

  if (!a1 || *((_DWORD *)a1 + 66) != 2)
    return 0;
  v3 = (const void *)C3DHitTestResultCreateFromBulletResults(*(float32x4_t **)(*((_QWORD *)a1 + 67) + 72), *a2, *a3);
  v4 = -[SCNHitTestResult initWithResult:]([SCNHitTestResult alloc], "initWithResult:", v3);
  if (v3)
    CFRelease(v3);
  return v4;
}

void sub_1DCE212C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  btC3DRayResultCallback::~btC3DRayResultCallback((btC3DRayResultCallback *)&a9);
  _Unwind_Resume(a1);
}

void btC3DRayResultCallback::~btC3DRayResultCallback(btC3DRayResultCallback *this)
{
  char *v2;

  *(_QWORD *)this = &off_1EA5972E0;
  v2 = (char *)this + 144;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 240);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 208);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 176);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1EA5972E0;
  v2 = (char *)this + 144;
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 240);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 208);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 176);
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v2);
  JUMPOUT(0x1DF0D41C0);
}

void *__contact(const btCollisionObject *a1, const btCollisionObject *a2, const btVector3 *a3, const btVector3 *a4, float a5, float a6)
{
  void *v6;
  id v13;
  uint64_t v14;
  id *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id *v22;
  uint64_t v23;
  id *ObjCWrapper;

  v6 = 0;
  if (a1 && (*((_DWORD *)a1 + 66) & 2) != 0)
  {
    v13 = (id)objc_opt_new();
    if ((*((_BYTE *)a1 + 264) & 2) != 0
      && (v14 = *((_QWORD *)a1 + 67)) != 0
      && (v6 = v13, (v15 = C3DEntityGetObjCWrapper(*(id **)(v14 + 72))) != 0))
    {
      v22 = v15;
      if (a2 && (*((_BYTE *)a2 + 264) & 2) != 0 && (v23 = *((_QWORD *)a2 + 67)) != 0)
        ObjCWrapper = C3DEntityGetObjCWrapper(*(id **)(v23 + 72));
      else
        ObjCWrapper = 0;
      *(float *)&v16 = a3->var0.var0[0];
      *(float *)&v17 = a3->var0.var0[1];
      *(float *)&v18 = a3->var0.var0[2];
      *(float *)&v19 = a4->var0.var0[0];
      *(float *)&v20 = a4->var0.var0[1];
      *(float *)&v21 = a4->var0.var0[2];
      objc_msgSend(v6, "_fillNodeA:nodeB:contactPoint:collisionImpulse:distance:hitFraction:", v22, ObjCWrapper, v16, v17, v18, v19, v20, v21, (float)-a5, a6);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t C3DPhysicsWorldAddBodyToWorld(uint64_t result, uint64_t a2, __C3DNode *a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v12;
  float v13;
  uint64_t v14;
  btC3DMotionState *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v12 = result;
    v13 = *(float *)(result + 228);
    v14 = *(_QWORD *)(a2 + 536);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = (btC3DMotionState *)btAlignedAllocInternal(80, 16);
    btC3DMotionState::btC3DMotionState(v15, a3, v13);
    btC3DMotionState::setOffset((__n128 *)v15, a7);
    *(_QWORD *)(a2 + 536) = v15;
    if (v15)
      (*(void (**)(btC3DMotionState *, uint64_t))(*(_QWORD *)v15 + 16))(v15, a2 + 16);
    result = C3DNodeIsHidden((uint64_t)a3);
    if ((result & 1) == 0)
    {
      if ((C3DNodeIsHidden((uint64_t)a3) & 1) != 0)
      {
        v16 = scn_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          C3DPhysicsWorldAddBodyToWorld(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 176))(v12, a2, a4, a5, a6);
    }
  }
  return result;
}

void sub_1DCE21D28(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

void btC3DCollisionDispatcher::dispatchContactsToDelegate(btC3DCollisionDispatcher *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v2 = *((unsigned int *)this + 2635);
  if ((int)v2 <= 0)
  {
    v12 = 0uLL;
    if ((v2 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_15;
  }
  v3 = 0;
  v4 = 16 * v2;
  do
  {
    v5 = *((_QWORD *)this + 1319) + v3;
    v6 = *(void **)v5;
    v7 = *(_DWORD *)(v5 + 8);
    switch(v7)
    {
      case 2:
        objc_msgSend(*((id *)this + 1315), "physicsWorld:didEndContact:", *((_QWORD *)this + 1314), v6);
        break;
      case 1:
        if (objc_msgSend(v6, "_shouldPostUpdate"))
          objc_msgSend(*((id *)this + 1315), "physicsWorld:didUpdateContact:", *((_QWORD *)this + 1314), v6);
        break;
      case 0:
        objc_msgSend(*((id *)this + 1315), "physicsWorld:didBeginContact:", *((_QWORD *)this + 1314), v6);
        break;
    }

    v3 += 16;
  }
  while (v4 != v3);
  LODWORD(v2) = *((_DWORD *)this + 2635);
  v12 = 0uLL;
  if ((int)v2 <= 0 && (v2 & 0x80000000) != 0)
  {
LABEL_15:
    if ((*((_DWORD *)this + 2636) & 0x80000000) != 0)
    {
      v8 = (void **)*((_QWORD *)this + 1319);
      if (v8 && *((_BYTE *)this + 10560))
        btAlignedFreeInternal(v8);
      *((_BYTE *)this + 10560) = 1;
      *((_QWORD *)this + 1319) = 0;
      *((_DWORD *)this + 2636) = 0;
    }
    v9 = 16 * (int)v2;
    v10 = (int)v2 + 1;
    do
    {
      *(_OWORD *)(*((_QWORD *)this + 1319) + v9) = v12;
      v9 += 16;
    }
    while ((_DWORD)v10++);
  }
LABEL_22:
  *((_DWORD *)this + 2635) = 0;
}

id *C3DSceneRegisterNodePhysicsBody(id *a1, id *a2)
{
  id *result;
  id *v4;

  result = C3DEntityGetObjCWrapper(a1);
  if (result)
  {
    v4 = result;
    result = C3DEntityGetObjCWrapper(a2);
    if (result)
    {
      result = (id *)objc_msgSend(result, "physicsBody");
      if (result)
        return (id *)objc_msgSend((id)objc_msgSend(v4, "physicsWorld"), "addPhysicsBody:nodeRef:colGroup:colMask:colTest:", result, a2, objc_msgSend(result, "categoryBitMask"), objc_msgSend(result, "collisionBitMask"), objc_msgSend(result, "contactTestBitMask"));
    }
  }
  return result;
}

id *C3DSceneUnregisterNodePhysicsBody(id *a1, id *a2)
{
  id *result;
  id *v4;

  result = C3DEntityGetObjCWrapper(a1);
  if (result)
  {
    v4 = result;
    result = C3DEntityGetObjCWrapper(a2);
    if (result)
    {
      result = (id *)objc_msgSend(result, "physicsBody");
      if (result)
        return (id *)objc_msgSend((id)objc_msgSend(v4, "physicsWorld"), "removePhysicsBody:handle:", result, objc_msgSend(result, "_handle"));
    }
  }
  return result;
}

uint64_t btC3DCollisionDispatcher::btC3DCollisionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = btCollisionDispatcher::btCollisionDispatcher(a1, a2);
  *(_QWORD *)v5 = &off_1EA597860;
  *(_QWORD *)(v5 + 10496) = &unk_1EA597910;
  *(_QWORD *)(v5 + 10512) = a3;
  *(_BYTE *)(v5 + 10560) = 1;
  *(_QWORD *)(v5 + 10552) = 0;
  *(_QWORD *)(v5 + 10540) = 0;
  btC3DCollisionDispatcher::setDelegate(v5, 0);
  return a1;
}

void sub_1DCE22BAC(_Unwind_Exception *a1)
{
  btCollisionDispatcher *v1;

  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v1 + 10536);
  btCollisionDispatcher::~btCollisionDispatcher(v1);
  _Unwind_Resume(a1);
}

void btC3DCollisionDispatcher::~btC3DCollisionDispatcher(btC3DCollisionDispatcher *this)
{
  btC3DCollisionDispatcher::~btC3DCollisionDispatcher(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  btManifoldPoint *v6;

  *(_QWORD *)this = &off_1EA597860;
  *((_QWORD *)this + 1312) = &unk_1EA597910;
  if (*((_QWORD *)this + 1315))
  {
    v2 = *((_DWORD *)this + 5);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * i);
        if (v4)
        {
          if (*(int *)(v4 + 800) >= 1)
          {
            v5 = 0;
            v6 = (btManifoldPoint *)(v4 + 16);
            do
            {
              btPersistentManifold::clearUserCache((btPersistentManifold *)v4, v6);
              ++v5;
              ++v6;
            }
            while (v5 < *(int *)(v4 + 800));
            v2 = *((_DWORD *)this + 5);
          }
          *(_DWORD *)(v4 + 800) = 0;
        }
      }
    }
  }
  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)this + 10536);
  btCollisionDispatcher::~btCollisionDispatcher(this);
}

uint64_t btC3DCollisionDispatcher::getNewManifold(btC3DCollisionDispatcher *this, const btCollisionObject *a2, const btCollisionObject *a3)
{
  uint64_t result;

  result = btCollisionDispatcher::getNewManifold(this, a2, a3);
  if (*((_DWORD *)this + 2626))
    *(_QWORD *)(result + 824) = (char *)this + 10496;
  return result;
}

uint64_t btCollisionDispatcher::getNumManifolds(btCollisionDispatcher *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t btCollisionDispatcher::getManifoldByIndexInternal(btCollisionDispatcher *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2);
}

uint64_t btCollisionDispatcher::getInternalManifoldPointer(btCollisionDispatcher *this)
{
  if (*((_DWORD *)this + 5))
    return *((_QWORD *)this + 4);
  else
    return 0;
}

uint64_t btCollisionDispatcher::getInternalManifoldPool(btCollisionDispatcher *this)
{
  return *((_QWORD *)this + 14);
}

{
  return *((_QWORD *)this + 14);
}

void btC3DCollisionDispatcher::addContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  char *v5;
  uint64_t v6;
  btCollisionObject *var3;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  id v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;

  v5 = (char *)this + 10528;
  if (*((_WORD *)this + 5264) || *((_BYTE *)this + 10530))
  {
    v6 = a3;
    *(_QWORD *)&a2->var1[a3].var14 = objc_alloc_init(SCNPhysicsContact);
    if (*v5)
    {
      var3 = a2->var3;
      if (var3)
        var3 = (btCollisionObject *)*((_QWORD *)var3 + 25);
      v8 = *(_QWORD *)&a2->var4;
      if (v8)
      {
        v9 = 0;
        if (var3)
        {
          v10 = *(_QWORD *)(v8 + 200);
          if (v10)
            v9 = (*(_QWORD *)(v10 + 8) & *((_QWORD *)var3 + 3)) != 0
              || (*(_QWORD *)(v10 + 24) & *((_QWORD *)var3 + 1)) != 0;
        }
      }
      else
      {
        v9 = 0;
      }
      if (v9 | C3DWasLinkedBeforeMajorOSYear2015())
      {
        v11 = +[SCNPhysicsContact _contactWithManifold:index:](SCNPhysicsContact, "_contactWithManifold:index:", a2, v6);
        v12 = *((_DWORD *)this + 2635);
        if (v12 == *((_DWORD *)this + 2636))
        {
          v13 = v12 ? 2 * v12 : 1;
          if (v12 < v13)
          {
            if (v13)
            {
              v14 = btAlignedAllocInternal(16 * v13, 16);
              v12 = *((_DWORD *)this + 2635);
            }
            else
            {
              v14 = 0;
            }
            if (v12 >= 1)
            {
              v15 = 0;
              v16 = 16 * v12;
              do
              {
                *(_OWORD *)(v14 + v15) = *(_OWORD *)(*((_QWORD *)this + 1319) + v15);
                v15 += 16;
              }
              while (v16 != v15);
            }
            v17 = (void **)*((_QWORD *)this + 1319);
            if (v17)
            {
              if (v5[32])
                btAlignedFreeInternal(v17);
            }
            v5[32] = 1;
            *((_QWORD *)this + 1319) = v14;
            *((_DWORD *)this + 2636) = v13;
            v12 = *((_DWORD *)this + 2635);
          }
        }
        v18 = *((_QWORD *)this + 1319) + 16 * v12;
        *(_QWORD *)v18 = v11;
        *(_DWORD *)(v18 + 8) = 0;
        ++*((_DWORD *)this + 2635);
      }
    }
  }
}

uint64_t btC3DCollisionDispatcher::updateContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  btCollisionObject *var3;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t result;
  id v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;

  v6 = (char *)this + 10529;
  if (!*((_BYTE *)this + 10529))
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      btC3DCollisionDispatcher::updateContact(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  var3 = a2->var3;
  v16 = *(_QWORD *)&a2->var4;
  if (var3)
    var3 = (btCollisionObject *)*((_QWORD *)var3 + 25);
  v17 = 0;
  if (v16)
  {
    if (var3)
    {
      v18 = *(_QWORD *)(v16 + 200);
      if (v18)
        v17 = (*(_QWORD *)(v18 + 8) & *((_QWORD *)var3 + 3)) != 0
           || (*(_QWORD *)(v18 + 24) & *((_QWORD *)var3 + 1)) != 0;
    }
  }
  result = C3DWasLinkedBeforeMajorOSYear2015();
  if (v17 | result)
  {
    v20 = +[SCNPhysicsContact _contactWithManifold:index:](SCNPhysicsContact, "_contactWithManifold:index:", a2, a3);
    v21 = *((_DWORD *)this + 2635);
    if (v21 == *((_DWORD *)this + 2636))
    {
      v22 = v21 ? 2 * v21 : 1;
      if (v21 < v22)
      {
        if (v22)
        {
          v23 = btAlignedAllocInternal(16 * v22, 16);
          v21 = *((_DWORD *)this + 2635);
        }
        else
        {
          v23 = 0;
        }
        if (v21 >= 1)
        {
          v24 = 0;
          v25 = 16 * v21;
          do
          {
            *(_OWORD *)(v23 + v24) = *(_OWORD *)(*((_QWORD *)this + 1319) + v24);
            v24 += 16;
          }
          while (v25 != v24);
        }
        v26 = (void **)*((_QWORD *)this + 1319);
        if (v26)
        {
          if (v6[31])
            btAlignedFreeInternal(v26);
        }
        v6[31] = 1;
        *((_QWORD *)this + 1319) = v23;
        *((_DWORD *)this + 2636) = v22;
        v21 = *((_DWORD *)this + 2635);
      }
    }
    v27 = *((_QWORD *)this + 1319) + 16 * v21;
    *(_QWORD *)v27 = v20;
    *(_DWORD *)(v27 + 8) = 1;
    ++*((_DWORD *)this + 2635);
    return objc_msgSend(v20, "_prepareUpdate");
  }
  return result;
}

void btC3DCollisionDispatcher::deleteContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  char *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  btCollisionObject *var3;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  id v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;

  v6 = (char *)this + 10530;
  if (*((_BYTE *)this + 10530))
    goto LABEL_5;
  v7 = scn_default_log();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    btC3DCollisionDispatcher::deleteContact(v7, v8, v9, v10, v11, v12, v13, v14);
  if (*v6)
  {
LABEL_5:
    var3 = a2->var3;
    if (var3)
      var3 = (btCollisionObject *)*((_QWORD *)var3 + 25);
    v16 = *(_QWORD *)&a2->var4;
    if (v16)
    {
      v17 = 0;
      if (var3)
      {
        v18 = *(_QWORD *)(v16 + 200);
        if (v18)
          v17 = (*(_QWORD *)(v18 + 8) & *((_QWORD *)var3 + 3)) != 0
             || (*(_QWORD *)(v18 + 24) & *((_QWORD *)var3 + 1)) != 0;
      }
    }
    else
    {
      v17 = 0;
    }
    if (v17 | C3DWasLinkedBeforeMajorOSYear2015())
    {
      v19 = +[SCNPhysicsContact _contactWithManifold:index:](SCNPhysicsContact, "_contactWithManifold:index:", a2, a3);
      v20 = *((_DWORD *)this + 2635);
      if (v20 == *((_DWORD *)this + 2636))
      {
        v21 = v20 ? 2 * v20 : 1;
        if (v20 < v21)
        {
          if (v21)
          {
            v22 = btAlignedAllocInternal(16 * v21, 16);
            v20 = *((_DWORD *)this + 2635);
          }
          else
          {
            v22 = 0;
          }
          if (v20 >= 1)
          {
            v23 = 0;
            v24 = 16 * v20;
            do
            {
              *(_OWORD *)(v22 + v23) = *(_OWORD *)(*((_QWORD *)this + 1319) + v23);
              v23 += 16;
            }
            while (v24 != v23);
          }
          v25 = (void **)*((_QWORD *)this + 1319);
          if (v25)
          {
            if (v6[30])
              btAlignedFreeInternal(v25);
          }
          v6[30] = 1;
          *((_QWORD *)this + 1319) = v22;
          *((_DWORD *)this + 2636) = v21;
          v20 = *((_DWORD *)this + 2635);
        }
      }
      v26 = *((_QWORD *)this + 1319) + 16 * v20;
      *(_QWORD *)v26 = v19;
      *(_DWORD *)(v26 + 8) = 2;
      ++*((_DWORD *)this + 2635);
    }
  }
}

void `non-virtual thunk to'btC3DCollisionDispatcher::addContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  btC3DCollisionDispatcher::addContact((btC3DCollisionDispatcher *)((char *)this - 10496), a2, a3);
}

uint64_t `non-virtual thunk to'btC3DCollisionDispatcher::updateContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  return btC3DCollisionDispatcher::updateContact((btC3DCollisionDispatcher *)((char *)this - 10496), a2, a3);
}

void `non-virtual thunk to'btC3DCollisionDispatcher::deleteContact(btC3DCollisionDispatcher *this, const btPersistentManifold *a2, int a3)
{
  btC3DCollisionDispatcher::deleteContact((btC3DCollisionDispatcher *)((char *)this - 10496), a2, a3);
}

void sub_1DCE23218(_Unwind_Exception *a1)
{
  btCollisionDispatcher *v1;

  btAlignedObjectArray<btC3DIndexedMesh>::~btAlignedObjectArray((uint64_t)v1 + 10536);
  btCollisionDispatcher::~btCollisionDispatcher(v1);
  _Unwind_Resume(a1);
}

void btC3DDebugDraw::~btC3DDebugDraw(btC3DDebugDraw *this)
{
  JUMPOUT(0x1DF0D41C0);
}

void btC3DDebugDraw::drawLine(btC3DDebugDraw *this, float32x4_t *a2, float32x4_t *a3, const btVector3 *a4)
{
  void *var3;
  float var2;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  float v10;
  int v11;

  var3 = this->var3;
  if (var3)
  {
    var2 = this->var2;
    v7 = vmulq_n_f32(*a2, var2);
    v8 = vmulq_n_f32(*a3, var2);
    v9 = *(_QWORD *)a4->var0.var0;
    v10 = a4->var0.var0[2];
    v11 = 1065353216;
    C3DAuthoringEnvironmentAppendDebugSegment((uint64_t)var3, 0, (float *)&v9, 0, v7, v8);
  }
}

void btC3DDebugDraw::drawLine(btC3DDebugDraw *this, float32x4_t *a2, float32x4_t *a3, const btVector3 *a4, const btVector3 *a5)
{
  uint64_t *var3;
  float var2;
  float32x4_t v8;
  __n128 v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  float v14;
  int v15;

  var3 = (uint64_t *)this->var3;
  if (var3)
  {
    var2 = this->var2;
    v8 = vmulq_n_f32(*a2, var2);
    v9 = (__n128)vmulq_n_f32(*a3, var2);
    v13 = *(_QWORD *)a4->var0.var0;
    v14 = a4->var0.var0[2];
    v15 = 1065353216;
    v10 = *(_QWORD *)a5->var0.var0;
    v11 = a5->var0.var0[2];
    v12 = 1065353216;
    C3DAuthoringEnvironmentAppendDebugSegment2(var3, 0, (float *)&v13, (float *)&v10, 0, v8, v9);
  }
}

void btC3DDebugDraw::drawSphere(btC3DDebugDraw *this, float a2, const btTransform *a3, const btVector3 *a4)
{
  void *var3;
  int32x4_t v7;
  int8x16_t v8;
  btVector3 var1;
  int8x16_t v10;
  __n128 v11;
  __n128 v12;
  double var2;
  unsigned int v14;
  float32x4_t v15;
  __n128 v16[3];
  uint64_t v17;
  float v18;
  int v19;
  __int128 v20;

  var3 = this->var3;
  if (var3)
  {
    *(_QWORD *)&v20 = *(_QWORD *)a4->var0.var0;
    DWORD2(v20) = LODWORD(a4->var0.var0[2]);
    HIDWORD(v20) = 1065353216;
    v7 = (int32x4_t)a3->var0.var0[1];
    v8 = (int8x16_t)a3->var0.var0[2];
    var1 = a3->var1;
    v10 = (int8x16_t)vtrn1q_s32((int32x4_t)a3->var0.var0[0], v7);
    v11.n128_u64[0] = vextq_s8(v10, v10, 8uLL).u64[0];
    v10.i64[1] = v8.u32[0];
    v12.n128_u64[0] = (unint64_t)vzip2_s32(*(int32x2_t *)a3->var0.var0[0].var0.var0, *(int32x2_t *)v7.i8);
    *(int32x2_t *)&v12.n128_i8[8] = vzip2_s32(*(int32x2_t *)v8.i8, 0);
    v11.n128_u64[1] = vextq_s8(v8, v8, 8uLL).u32[0];
    v16[0] = (__n128)v10;
    v16[1] = v12;
    v16[2] = v11;
    v17 = *(_QWORD *)var1.var0.var0;
    v18 = var1.var0.var0[2];
    v19 = 1065353216;
    if (this->var2 == 1.0)
    {
      var2 = 1.0;
    }
    else
    {
      v15.i32[2] = 0;
      v15.i64[0] = 0;
      C3DMatrix4x4GetTranslation(v16, (__n128 *)&v15);
      v15 = vmulq_n_f32(v15, this->var2);
      C3DMatrix4x4SetTranslation(v16, (__n128)v15);
      var3 = this->var3;
      var2 = this->var2;
    }
    *(float *)&v14 = a2 * 1.02 * var2;
    C3DAuthoringEnvironmentAppendDebugBoundingSphere((uint64_t)var3, 0, (unint64_t)v14 << 32, (float32x4_t *)v16, &v20);
  }
}

uint64_t btIDebugDraw::drawSphere(btIDebugDraw *this, const btVector3 *a2, float a3, const btVector3 *a4)
{
  __int128 v4;
  _OWORD v6[4];

  v6[0] = xmmword_1DD007970;
  v6[1] = xmmword_1DD007920;
  v4 = (__int128)*a2;
  v6[2] = xmmword_1DD007600;
  v6[3] = v4;
  return (*(uint64_t (**)(btIDebugDraw *, _OWORD *, const btVector3 *, float))(*(_QWORD *)this + 32))(this, v6, a4, a3);
}

uint64_t btIDebugDraw::drawTriangle(btIDebugDraw *this, const btVector3 *a2, const btVector3 *a3, const btVector3 *a4, const btVector3 *a5, const btVector3 *a6, const btVector3 *a7, const btVector3 *a8, float a9)
{
  return (*(uint64_t (**)(btIDebugDraw *, const btVector3 *, const btVector3 *, const btVector3 *, const btVector3 *, float))(*(_QWORD *)this + 56))(this, a2, a3, a4, a8, a9);
}

uint64_t btIDebugDraw::drawTriangle(btIDebugDraw *this, const btVector3 *a2, const btVector3 *a3, const btVector3 *a4, const btVector3 *a5, float a6)
{
  (*(void (**)(btIDebugDraw *, const btVector3 *, const btVector3 *, const btVector3 *, float))(*(_QWORD *)this + 16))(this, a2, a3, a5, a6);
  (*(void (**)(btIDebugDraw *, const btVector3 *, const btVector3 *, const btVector3 *))(*(_QWORD *)this
                                                                                                  + 16))(this, a3, a4, a5);
  return (*(uint64_t (**)(btIDebugDraw *, const btVector3 *, const btVector3 *, const btVector3 *))(*(_QWORD *)this + 16))(this, a4, a2, a5);
}

void btC3DDebugDraw::drawContactPoint(btC3DDebugDraw *this, float32x4_t *a2, float32x4_t *a3, float a4, int a5, const btVector3 *a6)
{
  void *var3;
  float var2;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float v12;
  int v13;

  var3 = this->var3;
  if (var3)
  {
    var2 = this->var2;
    v9 = vmulq_n_f32(*a2, var2);
    v10 = vmlaq_n_f32(v9, vmulq_n_f32(*a3, a4), var2);
    v11 = *(_QWORD *)a6->var0.var0;
    v12 = a6->var0.var0[2];
    v13 = 1065353216;
    C3DAuthoringEnvironmentAppendDebugSegment((uint64_t)var3, 0, (float *)&v11, 0, v9, v10);
  }
}

void btC3DDebugDraw::reportErrorWarning(btC3DDebugDraw *this, const char *a2)
{
  NSObject *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = a2;
    _os_log_impl(&dword_1DCCB8000, v3, OS_LOG_TYPE_DEFAULT, "Warning: PhysicsWarn: %s", (uint8_t *)&v4, 0xCu);
  }
}

btC3DDebugDraw *btC3DDebugDraw::setDebugMode(btC3DDebugDraw *this, int a2)
{
  this->var1 = a2;
  return this;
}

uint64_t btC3DDebugDraw::getDebugMode(btC3DDebugDraw *this)
{
  return this->var1;
}

uint64_t btIDebugDraw::drawAabb(btIDebugDraw *this, float32x4_t *a2, float32x4_t *a3, const btVector3 *a4)
{
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  uint64_t v11;
  float32x2_t v12;
  float v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;
  uint64_t (*v17)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *);
  uint64_t result;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;

  v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(vsubq_f32(*a3, *a2), v7);
  v9 = vmulq_f32(vaddq_f32(*a3, *a2), v7);
  v9.i32[3] = 0;
  v23 = xmmword_1DD008470;
  v10 = v8.f32[2];
  v19 = v9;
  v20 = *(float32x2_t *)v8.f32;
  do
  {
    v11 = 0;
    v12 = (float32x2_t)v23;
    v13 = *((float *)&v23 + 2);
    do
    {
      *(float32x2_t *)v14.f32 = vmul_f32(*(float32x2_t *)v8.f32, v12);
      *(float *)((char *)&v23 + v11) = -*(float *)((char *)&v23 + v11);
      *(float *)&v15 = v10 * v13;
      v12 = (float32x2_t)v23;
      *(float32x2_t *)v16.f32 = vmul_f32(v20, *(float32x2_t *)&v23);
      v13 = *((float *)&v23 + 2);
      v14.i64[1] = v15;
      v16.f32[2] = v10 * *((float *)&v23 + 2);
      v16.i32[3] = 0;
      v17 = *(uint64_t (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16);
      v21 = vaddq_f32(v16, v9);
      v22 = vaddq_f32(v14, v9);
      result = v17(this, &v22, &v21, a4);
      v9 = v19;
      *(float32x2_t *)v8.f32 = v20;
      v11 += 4;
    }
    while (v11 != 12);
    v23 = xmmword_1DD02A730;
    if (v6 <= 2)
      *((float *)&v23 + v6) = -*((float *)&v23 + v6);
    ++v6;
  }
  while (v6 != 4);
  return result;
}

uint64_t btIDebugDraw::drawTransform(btIDebugDraw *this, const btTransform *a2, float a3)
{
  btVector3 var1;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x4_t v9;
  unint64_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  __int128 v20;
  float32x4_t v21;
  btVector3 v22;

  var1 = a2->var1;
  v6 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), (float32x4_t)a2->var0.var0[0]);
  v7 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), (float32x4_t)a2->var0.var0[1]);
  v8 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), (float32x4_t)a2->var0.var0[2]);
  v8.i32[3] = 0;
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  v21 = vaddq_f32((float32x4_t)var1, v9);
  v22 = var1;
  v20 = xmmword_1DD02A740;
  (*(void (**)(btIDebugDraw *, btVector3 *, float32x4_t *, __int128 *))(*(_QWORD *)this + 16))(this, &v22, &v21, &v20);
  LODWORD(v10) = 0;
  *((float *)&v10 + 1) = a3;
  v11 = vmulq_f32((float32x4_t)v10, (float32x4_t)a2->var0.var0[0]);
  v12 = (int8x16_t)vmulq_f32((float32x4_t)v10, (float32x4_t)a2->var0.var0[1]);
  v13 = (int8x16_t)vmulq_f32((float32x4_t)v10, (float32x4_t)a2->var0.var0[2]);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  v20 = xmmword_1DD02A750;
  v21 = vaddq_f32(v11, (float32x4_t)v22);
  (*(void (**)(btIDebugDraw *, btVector3 *, float32x4_t *, __int128 *))(*(_QWORD *)this + 16))(this, &v22, &v21, &v20);
  v14.i64[0] = 0;
  v14.i64[1] = LODWORD(a3);
  v15 = vmulq_f32(v14, (float32x4_t)a2->var0.var0[0]);
  v16 = (int8x16_t)vmulq_f32(v14, (float32x4_t)a2->var0.var0[1]);
  v17 = (int8x16_t)vmulq_f32(v14, (float32x4_t)a2->var0.var0[2]);
  v17.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v20 = xmmword_1DD02A760;
  v21 = vaddq_f32(v15, (float32x4_t)v22);
  return (*(uint64_t (**)(btIDebugDraw *, btVector3 *, float32x4_t *, __int128 *))(*(_QWORD *)this + 16))(this, &v22, &v21, &v20);
}

void btIDebugDraw::drawArc(btIDebugDraw *this, float32x4_t *a2, int8x16_t *a3, float32x4_t *a4, float a5, float a6, float a7, float a8, const btVector3 *a9, int a10, float a11)
{
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float v21;
  int v22;
  __float2 v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  int v27;
  float32x4_t v28;
  __float2 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v17 = *a4;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)a3->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a3, *a3, 8uLL), 4uLL);
  v18.i64[1] = a3->i64[0];
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)a4->f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), 4uLL);
  v19.i64[1] = a4->i64[0];
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a3, v19), vmulq_f32(*a4, v18));
  v19.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v19.i64[1] = v20.u32[0];
  v34 = v19;
  v21 = a8 - a7;
  if ((int)(float)((float)(a8 - a7) / (float)(a11 * 0.017453)) <= 1)
    v22 = 1;
  else
    v22 = (int)(float)((float)(a8 - a7) / (float)(a11 * 0.017453));
  v32 = vmulq_n_f32(v17, a5);
  v23 = __sincosf_stret(a7);
  v24 = vmulq_n_f32(v32, v23.__cosval);
  v24.i32[3] = 0;
  v35 = vmulq_n_f32(v34, a6);
  v25 = vmulq_n_f32(v35, v23.__sinval);
  v25.i32[3] = 0;
  v40 = vaddq_f32(vaddq_f32(*a2, v24), v25);
  if (a10)
    (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, a2, &v40, a9);
  v26 = a5;
  if (v22 >= 1)
  {
    v27 = 0;
    v28 = v35;
    v28.i32[3] = 0;
    v36 = v28;
    do
    {
      ++v27;
      v38 = vmulq_n_f32(*a4, v26);
      v29 = __sincosf_stret((float)((float)(v21 * (float)v27) / (float)v22) + a7);
      v30 = vmulq_n_f32(v38, v29.__cosval);
      v30.i32[3] = 0;
      v31 = vmulq_n_f32(v36, v29.__sinval);
      v31.i32[3] = 0;
      v39 = vaddq_f32(vaddq_f32(*a2, v30), v31);
      (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v40, &v39, a9);
      v26 = a5;
      v40 = v39;
    }
    while (v22 != v27);
  }
  if ((a10 & 1) != 0)
    (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, a2, &v40, a9);
}

void btIDebugDraw::drawSpherePatch(btIDebugDraw *this, float32x4_t *a2, float32x4_t *a3, int8x16_t *a4, float a5, float a6, float a7, float a8, float a9, const btVector3 *a10, float a11)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  int v24;
  float32x4_t v25;
  float v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __float2 v39;
  int v40;
  unint64_t v41;
  float v42;
  _BOOL4 v43;
  BOOL v44;
  _BOOL4 v45;
  __float2 v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  BOOL v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  char *v60;
  _BOOL4 v61;
  float32x4_t v64;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  v14 = vmulq_n_f32(*a3, a5);
  v15 = vsubq_f32(*a2, v14);
  v14.i32[3] = 0;
  v16 = vaddq_f32(*a2, v14);
  v15.i32[3] = 0;
  v67 = v15;
  v68 = v16;
  v17 = a11 * 0.017453;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), 4uLL);
  v18.i64[1] = v13.i64[0];
  *(int8x8_t *)v19.f32 = vext_s8(*(int8x8_t *)a4->i8, (int8x8_t)*(_OWORD *)&vextq_s8(*a4, *a4, 8uLL), 4uLL);
  v19.i64[1] = a4->i64[0];
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(v13, v19), vmulq_f32(v18, *(float32x4_t *)a4));
  v21.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v21.i64[1] = v20.i64[0];
  v57 = a6 <= -1.5708;
  if (a6 > -1.5708)
    v22 = a6;
  else
    v22 = v17 + -1.5708;
  v58 = a7 >= 1.5708;
  if (a7 < 1.5708)
    v23 = a7;
  else
    v23 = 1.5708 - v17;
  if (v22 > v23)
  {
    v57 = 1;
    v58 = 1;
    v23 = 1.5708 - v17;
    v22 = v17 + -1.5708;
  }
  v24 = 0;
  v25 = v21;
  v25.i32[3] = 0;
  v64 = v25;
  v26 = v23 - v22;
  if ((int)(float)(v26 / v17) <= 1)
    v27 = 1;
  else
    v27 = (int)(float)(v26 / v17);
  v28 = a8 <= a9;
  v29 = a8 > a9;
  v30 = 3.1416;
  if (a8 <= a9)
    v30 = a9;
  v31 = a9 - a8;
  if (v28)
    v32 = a8;
  else
    v32 = v17 + -3.1416;
  if (v31 >= 6.2832)
    v29 = 1;
  v61 = v29;
  v33 = (int)(float)((float)(v30 - v32) / v17);
  if (v33 <= 1)
    v33 = 1;
  v34 = v26 / (float)v27;
  v35 = (float)(v30 - v32) / (float)v33;
  v36 = 16 * v33;
  v37 = &v69;
  v38 = &v70;
  v55 = v27;
  while (2)
  {
    v60 = v38;
    v39 = __sincosf_stret(v22 + (float)((float)v24 * v34));
    v40 = 0;
    v41 = 0;
    v42 = v39.__cosval * a5;
    v43 = v24 == 0;
    v44 = v24 == v27;
    v45 = v24 == v27 && v57;
    if (v44)
      v43 = 1;
    v59 = v43;
    do
    {
      v46 = __sincosf_stret(v32 + (float)((float)v40 * v35));
      v47 = vmulq_n_f32(*(float32x4_t *)a4, v42 * v46.__cosval);
      v47.i32[3] = 0;
      v48 = vmulq_n_f32(v64, v42 * v46.__sinval);
      v48.i32[3] = 0;
      v49 = vaddq_f32(vaddq_f32(*a2, v47), v48);
      v50 = vmulq_n_f32(*a3, v39.__sinval * a5);
      v50.i32[3] = 0;
      *(float32x4_t *)&v37[v41] = vaddq_f32(v49, v50);
      if (v24)
      {
        v51 = (float32x4_t *)&v60[v41];
      }
      else
      {
        if (!v58)
          goto LABEL_34;
        v51 = &v67;
      }
      (*(void (**)(btIDebugDraw *, float32x4_t *, char *, const btVector3 *))(*(_QWORD *)this + 16))(this, v51, &v37[v41], a10);
LABEL_34:
      if (v41)
      {
        (*(void (**)(btIDebugDraw *, char *, char *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v37[v41 - 16], &v37[v41], a10);
        if (!v45)
          goto LABEL_37;
LABEL_36:
        (*(void (**)(btIDebugDraw *, float32x4_t *, char *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v68, &v37[v41], a10);
        goto LABEL_37;
      }
      v66 = *(_OWORD *)v37;
      if (v45)
        goto LABEL_36;
LABEL_37:
      if (v61)
      {
        if (v36 != v41)
          goto LABEL_47;
        v52 = (float32x4_t *)&v66;
LABEL_46:
        (*(void (**)(btIDebugDraw *, float32x4_t *, char *, const btVector3 *))(*(_QWORD *)this + 16))(this, v52, &v37[v41], a10);
        goto LABEL_47;
      }
      if (v41)
        v53 = v36 == v41;
      else
        v53 = 1;
      v54 = v59;
      if (!v53)
        v54 = 0;
      v52 = a2;
      if (v54)
        goto LABEL_46;
LABEL_47:
      v41 += 16;
      ++v40;
    }
    while (v36 + 16 != v41);
    v38 = v37;
    v37 = v60;
    v27 = v55;
    v44 = v24++ == v55;
    if (!v44)
      continue;
    break;
  }
}

uint64_t btIDebugDraw::drawBox(btIDebugDraw *this, const btVector3 *a2, const btVector3 *a3, const btVector3 *a4)
{
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;
  float v29;
  unint64_t v30;
  int v31;

  v8 = a2->var0.var0[1];
  v29 = a2->var0.var0[0];
  *(float *)&v30 = v8;
  HIDWORD(v30) = LODWORD(a2->var0.var0[2]);
  v31 = 0;
  *(float *)v27 = a3->var0.var0[0];
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), LODWORD(v8));
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *))(*(_QWORD *)this + 16))(this, &v29, v27);
  v9 = a2->var0.var0[2];
  *(float *)&v30 = a2->var0.var0[1];
  *((float *)&v30 + 1) = v9;
  v31 = 0;
  v10 = *(_QWORD *)a3->var0.var0;
  LODWORD(v29) = *(_QWORD *)a3->var0.var0;
  *(_QWORD *)v27 = v10;
  *(float *)&v27[8] = v9;
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v11 = a3->var0.var0[1];
  v29 = a3->var0.var0[0];
  *(float *)&v30 = v11;
  HIDWORD(v30) = LODWORD(a2->var0.var0[2]);
  v31 = 0;
  *(float *)v27 = a2->var0.var0[0];
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), LODWORD(v11));
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v12 = a2->var0.var0[2];
  *(float *)&v30 = a3->var0.var0[1];
  *((float *)&v30 + 1) = v12;
  v31 = 0;
  v13 = *(_QWORD *)a2->var0.var0;
  LODWORD(v29) = *(_QWORD *)a2->var0.var0;
  *(_QWORD *)v27 = v13;
  *(float *)&v27[8] = v12;
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v29 = a2->var0.var0[0];
  v30 = *(_QWORD *)&a2->var0.var0[1];
  v31 = 0;
  *(float *)v27 = v29;
  *(_DWORD *)&v27[4] = v30;
  *(float *)&v27[8] = a3->var0.var0[2];
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v29 = a3->var0.var0[0];
  v30 = *(_QWORD *)&a2->var0.var0[1];
  v31 = 0;
  *(float *)v27 = v29;
  *(_DWORD *)&v27[4] = v30;
  *(float *)&v27[8] = a3->var0.var0[2];
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v14 = a3->var0.var0[0];
  v15 = a2->var0.var0[2];
  v31 = 0;
  *(float *)v27 = v14;
  v16 = *(_QWORD *)&a3->var0.var0[1];
  v29 = v14;
  v30 = __PAIR64__(LODWORD(v15), v16);
  *(_QWORD *)&v27[4] = v16;
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v17 = a2->var0.var0[0];
  v18 = a2->var0.var0[2];
  v31 = 0;
  *(float *)v27 = v17;
  v19 = *(_QWORD *)&a3->var0.var0[1];
  v29 = v17;
  v30 = __PAIR64__(LODWORD(v18), v19);
  *(_QWORD *)&v27[4] = v19;
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v20 = a2->var0.var0[1];
  v29 = a2->var0.var0[0];
  *(float *)&v30 = v20;
  HIDWORD(v30) = LODWORD(a3->var0.var0[2]);
  v31 = 0;
  *(float *)v27 = a3->var0.var0[0];
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), LODWORD(v20));
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v21 = a3->var0.var0[2];
  *(float *)&v30 = a2->var0.var0[1];
  *((float *)&v30 + 1) = v21;
  v31 = 0;
  v22 = *(_QWORD *)a3->var0.var0;
  LODWORD(v29) = *(_QWORD *)a3->var0.var0;
  *(_QWORD *)v27 = v22;
  *(float *)&v27[8] = v21;
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v23 = a3->var0.var0[1];
  v29 = a3->var0.var0[0];
  *(float *)&v30 = v23;
  HIDWORD(v30) = LODWORD(a3->var0.var0[2]);
  v31 = 0;
  *(float *)v27 = a2->var0.var0[0];
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), LODWORD(v23));
  v28 = 0;
  (*(void (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
  v24 = a3->var0.var0[2];
  *(float *)&v30 = a3->var0.var0[1];
  *((float *)&v30 + 1) = v24;
  v31 = 0;
  v25 = *(_QWORD *)a2->var0.var0;
  LODWORD(v29) = *(_QWORD *)a2->var0.var0;
  *(_QWORD *)v27 = v25;
  *(float *)&v27[8] = v24;
  v28 = 0;
  return (*(uint64_t (**)(btIDebugDraw *, float *, _BYTE *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v29, v27, a4);
}

uint64_t btIDebugDraw::drawBox(btIDebugDraw *this, float32x4_t *a2, float32x4_t *a3, const btTransform *a4, const btVector3 *a5)
{
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  btVector3 var1;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float *v20;
  float *v21;
  float *v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  btVector3 v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  __int32 v41;
  float32x4_t v42;
  float32x4_t v43;
  btVector3 v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  btVector3 v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  btVector3 v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  btVector3 v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  btVector3 v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  btVector3 v103;
  int8x16_t v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  float32x4_t v108;
  __int32 v109;
  float32x4_t v110;
  float32x4_t v111;
  btVector3 v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  btVector3 v127;
  int8x16_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  __int32 v133;
  float32x4_t v134;
  float32x4_t v135;
  btVector3 v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  float32x4_t v145;
  float v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x16_t v152;
  float32x4_t v153;
  btVector3 v154;
  int8x16_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  float32x4_t v160;
  float32x4_t v161;

  v10 = *a2;
  v11 = a2->f32[2];
  v12 = *a2;
  v12.f32[2] = v11;
  v13 = (float32x4_t)a4->var0.var0[2];
  var1 = a4->var1;
  v15 = (int8x16_t)vmulq_f32(v12, v13);
  v12.i32[3] = 0;
  v16 = (float32x4_t)a4->var0.var0[0];
  v17 = (float32x4_t)a4->var0.var0[1];
  v18 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0.var0[0], v12);
  v19 = vmulq_f32(v12, v17);
  v20 = &a2->f32[1];
  v15.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v161 = vaddq_f32(v19, (float32x4_t)var1);
  v19.i32[0] = a3->i32[0];
  v21 = &a3->f32[1];
  v22 = &a2->f32[2];
  v19.i32[1] = v10.i32[1];
  v19.i64[1] = LODWORD(v11);
  v23 = vmulq_f32(v16, v19);
  v24 = (int8x16_t)vmulq_f32(v17, v19);
  v25 = (int8x16_t)vmulq_f32(v13, v19);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)var1, v23);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v26 = *a3;
  v27 = a2->f32[2];
  v28 = *a3;
  v28.i32[3] = 0;
  v29 = v28;
  v29.f32[1] = *v20;
  v29.f32[2] = v27;
  v30 = (float32x4_t)a4->var0.var0[0];
  v31 = (float32x4_t)a4->var0.var0[1];
  v32 = vmulq_f32((float32x4_t)a4->var0.var0[0], v29);
  v33 = (int8x16_t)vmulq_f32(v31, v29);
  v34 = (float32x4_t)a4->var0.var0[2];
  v35 = a4->var1;
  v36 = (int8x16_t)vmulq_f32(v29, v34);
  v36.i32[3] = 0;
  *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
  v161 = vaddq_f32(v32, (float32x4_t)v35);
  v28.i32[1] = v26.i32[1];
  v28.f32[2] = v27;
  v37 = vmulq_f32(v30, v28);
  v38 = (int8x16_t)vmulq_f32(v31, v28);
  v39 = (int8x16_t)vmulq_f32(v34, v28);
  v39.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
  *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v35, v37);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v40 = *a3;
  v41 = a2->i32[2];
  v42.i32[0] = a2->i32[0];
  v42.i32[1] = HIDWORD(a3->i64[0]);
  v40.i32[2] = v41;
  v43 = (float32x4_t)a4->var0.var0[2];
  v44 = a4->var1;
  v45 = (int8x16_t)vmulq_f32(v40, v43);
  v40.i32[3] = 0;
  v46 = (float32x4_t)a4->var0.var0[0];
  v47 = (float32x4_t)a4->var0.var0[1];
  v48 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0.var0[0], v40);
  v49 = vmulq_f32(v40, v47);
  v45.i32[3] = 0;
  *(float32x2_t *)v49.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v49.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)));
  *(float32x2_t *)&v49.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
  v161 = vaddq_f32(v49, (float32x4_t)v44);
  v42.i32[2] = v41;
  v50 = vmulq_f32(v46, v42);
  v51 = (int8x16_t)vmulq_f32(v47, v42);
  v52 = (int8x16_t)vmulq_f32(v43, v42);
  v52.i32[3] = 0;
  *(float32x2_t *)v50.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
  *(float32x2_t *)&v50.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v44, v50);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v53 = *a2;
  v53.i32[3] = 0;
  v54 = v53;
  v54.f32[1] = *v21;
  v54.i32[2] = a2->i64[1];
  v55 = (float32x4_t)a4->var0.var0[1];
  v56 = vmulq_f32((float32x4_t)a4->var0.var0[0], v54);
  v57 = (int8x16_t)vmulq_f32(v55, v54);
  v58 = (float32x4_t)a4->var0.var0[2];
  v59 = a4->var1;
  v60 = (int8x16_t)vmulq_f32(v54, v58);
  v60.i32[3] = 0;
  *(float32x2_t *)v56.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)));
  *(float32x2_t *)&v56.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
  v53.i32[0] = (__int32)*a2;
  v61 = vmulq_f32((float32x4_t)a4->var0.var0[0], v53);
  v62 = (int8x16_t)vmulq_f32(v55, v53);
  v63 = (int8x16_t)vmulq_f32(v58, v53);
  v63.i32[3] = 0;
  *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
  *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v59, v61);
  v161 = vaddq_f32(v56, (float32x4_t)v59);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v64 = *a2;
  v64.i32[3] = 0;
  v65 = v64;
  v65.i32[2] = a2->i64[1];
  v66 = (float32x4_t)a4->var0.var0[1];
  v67 = vmulq_f32((float32x4_t)a4->var0.var0[0], v65);
  v68 = (int8x16_t)vmulq_f32(v66, v65);
  v69 = (float32x4_t)a4->var0.var0[2];
  v70 = a4->var1;
  v71 = (int8x16_t)vmulq_f32(v65, v69);
  v71.i32[3] = 0;
  *(float32x2_t *)v67.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), 0);
  v64.i32[2] = a3->i32[2];
  v72 = vmulq_f32((float32x4_t)a4->var0.var0[0], v64);
  v73 = (int8x16_t)vmulq_f32(v66, v64);
  v74 = (int8x16_t)vmulq_f32(v69, v64);
  v74.i32[3] = 0;
  *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
  *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v70, v72);
  v161 = vaddq_f32(v67, (float32x4_t)v70);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v75 = *a3;
  v75.f32[1] = *v20;
  v75.i32[3] = 0;
  v76 = v75;
  v76.f32[2] = *v22;
  v77 = (float32x4_t)a4->var0.var0[1];
  v78 = vmulq_f32((float32x4_t)a4->var0.var0[0], v76);
  v79 = (int8x16_t)vmulq_f32(v77, v76);
  v80 = (float32x4_t)a4->var0.var0[2];
  v81 = a4->var1;
  v82 = (int8x16_t)vmulq_f32(v76, v80);
  v82.i32[3] = 0;
  *(float32x2_t *)v78.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v79.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)));
  *(float32x2_t *)&v78.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
  v75.i32[2] = a3->i64[1];
  v83 = vmulq_f32((float32x4_t)a4->var0.var0[0], v75);
  v84 = (int8x16_t)vmulq_f32(v77, v75);
  v85 = (int8x16_t)vmulq_f32(v80, v75);
  v85.i32[3] = 0;
  *(float32x2_t *)v83.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v84.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)));
  *(float32x2_t *)&v83.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v81, v83);
  v161 = vaddq_f32(v78, (float32x4_t)v81);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v86 = *a3;
  v86.i32[3] = 0;
  v87 = v86;
  v87.f32[2] = *v22;
  v88 = (float32x4_t)a4->var0.var0[1];
  v89 = vmulq_f32((float32x4_t)a4->var0.var0[0], v87);
  v90 = (int8x16_t)vmulq_f32(v88, v87);
  v91 = (float32x4_t)a4->var0.var0[2];
  v92 = a4->var1;
  v93 = (int8x16_t)vmulq_f32(v87, v91);
  v93.i32[3] = 0;
  *(float32x2_t *)v89.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v90.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)));
  *(float32x2_t *)&v89.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)), 0);
  v86.i32[2] = a3->i64[1];
  v94 = vmulq_f32((float32x4_t)a4->var0.var0[0], v86);
  v95 = (int8x16_t)vmulq_f32(v88, v86);
  v96 = (int8x16_t)vmulq_f32(v91, v86);
  v96.i32[3] = 0;
  *(float32x2_t *)v94.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v95.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)));
  *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v92, v94);
  v161 = vaddq_f32(v89, (float32x4_t)v92);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v97 = *a2;
  v97.f32[1] = *v21;
  v97.i32[3] = 0;
  v98 = v97;
  v98.i32[2] = a2->i64[1];
  v99 = (float32x4_t)a4->var0.var0[1];
  v100 = vmulq_f32((float32x4_t)a4->var0.var0[0], v98);
  v101 = (int8x16_t)vmulq_f32(v99, v98);
  v102 = (float32x4_t)a4->var0.var0[2];
  v103 = a4->var1;
  v104 = (int8x16_t)vmulq_f32(v98, v102);
  v104.i32[3] = 0;
  *(float32x2_t *)v100.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v101.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)));
  *(float32x2_t *)&v100.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)), 0);
  v97.i32[2] = a3->i32[2];
  v105 = vmulq_f32((float32x4_t)a4->var0.var0[0], v97);
  v106 = (int8x16_t)vmulq_f32(v99, v97);
  v107 = (int8x16_t)vmulq_f32(v102, v97);
  v107.i32[3] = 0;
  *(float32x2_t *)v105.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v106.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL)));
  *(float32x2_t *)&v105.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v103, v105);
  v161 = vaddq_f32(v100, (float32x4_t)v103);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v108 = *a2;
  v109 = a3->i32[2];
  v110.i32[0] = a3->i32[0];
  v110.i32[1] = HIDWORD(a2->i64[0]);
  v108.i32[2] = v109;
  v111 = (float32x4_t)a4->var0.var0[2];
  v112 = a4->var1;
  v113 = (int8x16_t)vmulq_f32(v108, v111);
  v108.i32[3] = 0;
  v114 = (float32x4_t)a4->var0.var0[0];
  v115 = (float32x4_t)a4->var0.var0[1];
  v116 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0.var0[0], v108);
  v117 = vmulq_f32(v108, v115);
  v113.i32[3] = 0;
  *(float32x2_t *)v117.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v117.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL)));
  *(float32x2_t *)&v117.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL)), 0);
  v161 = vaddq_f32(v117, (float32x4_t)v112);
  v110.i32[2] = v109;
  v118 = vmulq_f32(v114, v110);
  v119 = (int8x16_t)vmulq_f32(v115, v110);
  v120 = (int8x16_t)vmulq_f32(v111, v110);
  v120.i32[3] = 0;
  *(float32x2_t *)v118.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v119.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
  *(float32x2_t *)&v118.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v112, v118);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v121 = *a3;
  v121.i32[3] = 0;
  v122 = v121;
  v122.f32[1] = *v20;
  v122.i32[2] = a3->i64[1];
  v123 = (float32x4_t)a4->var0.var0[1];
  v124 = vmulq_f32((float32x4_t)a4->var0.var0[0], v122);
  v125 = (int8x16_t)vmulq_f32(v123, v122);
  v126 = (float32x4_t)a4->var0.var0[2];
  v127 = a4->var1;
  v128 = (int8x16_t)vmulq_f32(v122, v126);
  v128.i32[3] = 0;
  *(float32x2_t *)v124.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v125.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)));
  *(float32x2_t *)&v124.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), 0);
  v121.i32[0] = (__int32)*a3;
  v129 = vmulq_f32((float32x4_t)a4->var0.var0[0], v121);
  v130 = (int8x16_t)vmulq_f32(v123, v121);
  v131 = (int8x16_t)vmulq_f32(v126, v121);
  v131.i32[3] = 0;
  *(float32x2_t *)v129.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)));
  *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v127, v129);
  v161 = vaddq_f32(v124, (float32x4_t)v127);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v132 = *a3;
  v133 = a3->i32[2];
  v134.i32[0] = a2->i32[0];
  v134.i32[1] = HIDWORD(a3->i64[0]);
  v132.i32[2] = v133;
  v135 = (float32x4_t)a4->var0.var0[2];
  v136 = a4->var1;
  v137 = (int8x16_t)vmulq_f32(v132, v135);
  v132.i32[3] = 0;
  v138 = (float32x4_t)a4->var0.var0[0];
  v139 = (float32x4_t)a4->var0.var0[1];
  v140 = (int8x16_t)vmulq_f32((float32x4_t)a4->var0.var0[0], v132);
  v141 = vmulq_f32(v132, v139);
  v137.i32[3] = 0;
  *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v141.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL)));
  *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL)), 0);
  v161 = vaddq_f32(v141, (float32x4_t)v136);
  v134.i32[2] = v133;
  v142 = vmulq_f32(v138, v134);
  v143 = (int8x16_t)vmulq_f32(v139, v134);
  v144 = (int8x16_t)vmulq_f32(v135, v134);
  v144.i32[3] = 0;
  *(float32x2_t *)v142.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v143.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)));
  *(float32x2_t *)&v142.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v136, v142);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
  v145 = *a2;
  v146 = a3->f32[2];
  v147 = *a2;
  v147.i32[3] = 0;
  v148 = v147;
  v148.f32[1] = *v21;
  v148.f32[2] = v146;
  v149 = (float32x4_t)a4->var0.var0[0];
  v150 = (float32x4_t)a4->var0.var0[1];
  v151 = vmulq_f32((float32x4_t)a4->var0.var0[0], v148);
  v152 = (int8x16_t)vmulq_f32(v150, v148);
  v153 = (float32x4_t)a4->var0.var0[2];
  v154 = a4->var1;
  v155 = (int8x16_t)vmulq_f32(v148, v153);
  v155.i32[3] = 0;
  *(float32x2_t *)v151.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v152.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL)));
  *(float32x2_t *)&v151.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v155.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL)), 0);
  v161 = vaddq_f32(v151, (float32x4_t)v154);
  v147.i32[1] = v145.i32[1];
  v147.f32[2] = v146;
  v156 = vmulq_f32(v149, v147);
  v157 = (int8x16_t)vmulq_f32(v150, v147);
  v158 = (int8x16_t)vmulq_f32(v153, v147);
  v158.i32[3] = 0;
  *(float32x2_t *)v156.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v157.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)));
  *(float32x2_t *)&v156.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), 0);
  v160 = vaddq_f32((float32x4_t)v154, v156);
  return (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v161, &v160, a5);
}

uint64_t btIDebugDraw::drawCapsule(btIDebugDraw *this, float32_t a2, float32_t a3, int a4, const btTransform *a5, const btVector3 *a6)
{
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x4_t v15;
  btVector3 var1;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x4_t v22;
  btVector3 v23;
  int8x16_t v24;
  int v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  btVector3 v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;

  v72 = 0uLL;
  v72.f32[a4] = -a3;
  v71 = 0uLL;
  v71.f32[a4] = a3;
  v11 = (float32x4_t)a5->var0.var0[1];
  v12 = vmulq_f32((float32x4_t)a5->var0.var0[0], v72);
  v13 = (int8x16_t)vmulq_f32(v11, v72);
  v14 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8);
  v15 = (float32x4_t)a5->var0.var0[2];
  var1 = a5->var1;
  v17 = (int8x16_t)vmulq_f32(v15, v72);
  v17.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, v14);
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v67 = (float32x4_t)a5->var0.var0[0];
  v68 = v11;
  v69 = v15;
  v70 = vaddq_f32((float32x4_t)var1, v12);
  (*(void (**)(btIDebugDraw *, float32x4_t *, const btVector3 *, float32_t))(*(_QWORD *)this + 32))(this, &v67, a6, a2);
  v18 = (float32x4_t)a5->var0.var0[1];
  v19 = vmulq_f32((float32x4_t)a5->var0.var0[0], v71);
  v20 = (int8x16_t)vmulq_f32(v18, v71);
  v21 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  *(float32x2_t *)v19.f32 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.i8);
  v22 = (float32x4_t)a5->var0.var0[2];
  v23 = a5->var1;
  v24 = (int8x16_t)vmulq_f32(v22, v71);
  v24.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v19.f32, v21);
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
  v67 = (float32x4_t)a5->var0.var0[0];
  v68 = v18;
  v69 = v22;
  v70 = vaddq_f32((float32x4_t)v23, v19);
  (*(void (**)(btIDebugDraw *, float32x4_t *, const btVector3 *, float32_t))(*(_QWORD *)this + 32))(this, &v67, a6, a2);
  v25 = (a4 + 1) % 3;
  v72.f32[v25] = a2;
  v71.f32[v25] = a2;
  v26 = (float32x4_t)a5->var0.var0[0];
  v27 = (float32x4_t)a5->var0.var0[1];
  v28 = vmulq_f32((float32x4_t)a5->var0.var0[0], v72);
  v29 = (int8x16_t)vmulq_f32(v72, v27);
  v30 = (float32x4_t)a5->var0.var0[2];
  v31 = a5->var1;
  v32 = (int8x16_t)vmulq_f32(v72, v30);
  v32.i32[3] = 0;
  *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v29.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)));
  *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
  v67 = vaddq_f32((float32x4_t)v31, v28);
  v33 = vmulq_f32(v26, v71);
  v34 = (int8x16_t)vmulq_f32(v27, v71);
  v35 = (int8x16_t)vmulq_f32(v30, v71);
  v35.i32[3] = 0;
  *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
  *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
  v65 = (float32x4_t)v31;
  v66 = vaddq_f32((float32x4_t)v31, v33);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v67, &v66, a6);
  v72.f32[v25] = -a2;
  v71.f32[v25] = -a2;
  v36 = (float32x4_t)a5->var0.var0[0];
  v37 = (float32x4_t)a5->var0.var0[1];
  v38 = vmulq_f32((float32x4_t)a5->var0.var0[0], v72);
  v39 = (int8x16_t)vmulq_f32(v72, v37);
  v40 = (float32x4_t)a5->var0.var0[2];
  v41 = (int8x16_t)vmulq_f32(v72, v40);
  v41.i32[3] = 0;
  *(float32x2_t *)v38.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
  *(float32x2_t *)&v38.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
  v67 = vaddq_f32(v65, v38);
  v42 = vmulq_f32(v36, v71);
  v43 = (int8x16_t)vmulq_f32(v37, v71);
  v44 = (int8x16_t)vmulq_f32(v40, v71);
  v44.i32[3] = 0;
  *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
  *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
  v66 = vaddq_f32(v65, v42);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v67, &v66, a6);
  v72.i32[v25] = 0;
  v71.i32[v25] = 0;
  v45 = (a4 + 2) % 3;
  v72.f32[v45] = a2;
  v71.f32[v45] = a2;
  v46 = (float32x4_t)a5->var0.var0[0];
  v47 = (float32x4_t)a5->var0.var0[1];
  v48 = vmulq_f32((float32x4_t)a5->var0.var0[0], v72);
  v49 = (int8x16_t)vmulq_f32(v72, v47);
  v50 = (float32x4_t)a5->var0.var0[2];
  v51 = (int8x16_t)vmulq_f32(v72, v50);
  v51.i32[3] = 0;
  *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v49.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)));
  *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0);
  v67 = vaddq_f32(v65, v48);
  v52 = vmulq_f32(v46, v71);
  v53 = (int8x16_t)vmulq_f32(v47, v71);
  v54 = (int8x16_t)vmulq_f32(v50, v71);
  v54.i32[3] = 0;
  *(float32x2_t *)v52.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
  *(float32x2_t *)&v52.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
  v66 = vaddq_f32(v65, v52);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v67, &v66, a6);
  v72.f32[v45] = -a2;
  v71.f32[v45] = -a2;
  v55 = (float32x4_t)a5->var0.var0[0];
  v56 = (float32x4_t)a5->var0.var0[1];
  v57 = vmulq_f32((float32x4_t)a5->var0.var0[0], v72);
  v58 = (int8x16_t)vmulq_f32(v72, v56);
  v59 = (float32x4_t)a5->var0.var0[2];
  v60 = (int8x16_t)vmulq_f32(v72, v59);
  v60.i32[3] = 0;
  *(float32x2_t *)v57.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
  *(float32x2_t *)&v57.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
  v67 = vaddq_f32(v65, v57);
  v61 = vmulq_f32(v55, v71);
  v62 = (int8x16_t)vmulq_f32(v56, v71);
  v63 = (int8x16_t)vmulq_f32(v59, v71);
  v63.i32[3] = 0;
  *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
  *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
  v66 = vaddq_f32(v65, v61);
  return (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v67, &v66, a6);
}

uint64_t btIDebugDraw::drawCylinder(btIDebugDraw *this, float32_t a2, float32_t a3, int a4, const btTransform *a5, const btVector3 *a6)
{
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  btVector3 var1;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;

  v74 = 0uLL;
  v74.f32[a4] = a3;
  v11 = (a4 + 1) % 3;
  v73 = 0uLL;
  v73.f32[v11] = a2;
  v12 = vaddq_f32(v74, v73);
  v61 = v73;
  v13 = (float32x4_t)a5->var0.var0[0];
  v14 = (float32x4_t)a5->var0.var0[1];
  v15 = vmulq_f32((float32x4_t)a5->var0.var0[0], v12);
  v16 = (int8x16_t)vmulq_f32(v12, v14);
  v17 = (float32x4_t)a5->var0.var0[2];
  v18 = (int8x16_t)vmulq_f32(v12, v17);
  v18.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  var1 = a5->var1;
  v72 = vaddq_f32((float32x4_t)var1, v15);
  v63 = v74;
  v65 = vnegq_f32(v74);
  v67 = (float32x4_t)var1;
  v20 = vsubq_f32(v73, v74);
  v21 = vmulq_f32(v13, v20);
  v22 = (int8x16_t)vmulq_f32(v14, v20);
  v23 = (int8x16_t)vmulq_f32(v17, v20);
  v23.i32[3] = 0;
  *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v71 = vaddq_f32((float32x4_t)var1, v21);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *))(*(_QWORD *)this + 16))(this, &v72, &v71);
  v24 = vsubq_f32(v63, v61);
  v26 = (float32x4_t)a5->var0.var0[1];
  v25 = (float32x4_t)a5->var0.var0[2];
  v27 = (int8x16_t)vmulq_f32(v25, v24);
  v24.i32[3] = 0;
  v28 = (int8x16_t)vmulq_f32((float32x4_t)a5->var0.var0[0], v24);
  v29 = vmulq_f32(v26, v24);
  v27.i32[3] = 0;
  *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)));
  *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  v30 = vaddq_f32(v67, v29);
  v31 = vsubq_f32(v65, v61);
  v32 = (int8x16_t)vmulq_f32(v25, v31);
  v31.i32[3] = 0;
  v33 = (int8x16_t)vmulq_f32((float32x4_t)a5->var0.var0[0], v31);
  v34 = vmulq_f32(v26, v31);
  v32.i32[3] = 0;
  *(float32x2_t *)v34.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v34.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL)));
  *(float32x2_t *)&v34.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
  v71 = vaddq_f32(v67, v34);
  v72 = v30;
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v72, &v71, a6);
  v72 = 0uLL;
  v72.i32[a4] = 1065353216;
  v71 = 0uLL;
  v71.i32[v11] = 1065353216;
  v66 = v74;
  v35 = (float32x4_t)a5->var0.var0[0];
  v36 = (float32x4_t)a5->var0.var0[1];
  v37 = vmulq_f32((float32x4_t)a5->var0.var0[0], v74);
  v38 = (int8x16_t)vmulq_f32(v74, v36);
  v39 = (float32x4_t)a5->var0.var0[2];
  v40 = (int8x16_t)vmulq_f32(v74, v39);
  v40.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
  *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
  v41 = vsubq_f32(v67, v37);
  v41.i32[3] = 0;
  v70 = v41;
  v64 = v72;
  v42 = (int8x16_t)vmulq_f32(v35, v72);
  v43 = (int8x16_t)vmulq_f32(v36, v72);
  v44 = (int8x16_t)vmulq_f32(v39, v72);
  v44.i32[3] = 0;
  *(float32x2_t *)v42.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v43.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
  v42.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
  v69 = v42;
  v62 = v71;
  v45 = (int8x16_t)vmulq_f32(v35, v71);
  v46 = (int8x16_t)vmulq_f32(v36, v71);
  v47 = (int8x16_t)vmulq_f32(v39, v71);
  v47.i32[3] = 0;
  *(float32x2_t *)v45.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)));
  v45.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0);
  v68 = v45;
  (*(void (**)(btIDebugDraw *, float32x4_t *, int8x16_t *, int8x16_t *, const btVector3 *, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)this + 120))(this, &v70, &v69, &v68, a6, 0, a2, a2, 0.0, 6.2832, 10.0);
  v48 = (float32x4_t)a5->var0.var0[0];
  v49 = (float32x4_t)a5->var0.var0[1];
  v50 = vmulq_f32(v66, (float32x4_t)a5->var0.var0[0]);
  v51 = (int8x16_t)vmulq_f32(v66, v49);
  v52 = (float32x4_t)a5->var0.var0[2];
  v53 = (int8x16_t)vmulq_f32(v66, v52);
  v53.i32[3] = 0;
  *(float32x2_t *)v50.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
  *(float32x2_t *)&v50.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0);
  v70 = vaddq_f32(v67, v50);
  v54 = (int8x16_t)vmulq_f32(v64, v48);
  v55 = (int8x16_t)vmulq_f32(v64, v49);
  v56 = (int8x16_t)vmulq_f32(v64, v52);
  v56.i32[3] = 0;
  *(float32x2_t *)v54.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.i8));
  v54.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), 0);
  v69 = v54;
  v57 = (int8x16_t)vmulq_f32(v62, v48);
  v58 = (int8x16_t)vmulq_f32(v62, v49);
  v59 = (int8x16_t)vmulq_f32(v62, v52);
  v59.i32[3] = 0;
  *(float32x2_t *)v57.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8));
  v57.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
  v68 = v57;
  return (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, int8x16_t *, int8x16_t *, const btVector3 *, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)this + 120))(this, &v70, &v69, &v68, a6, 0, a2, a2, 0.0, 6.2832, 10.0);
}

uint64_t btIDebugDraw::drawCone(btIDebugDraw *this, float32_t a2, float a3, int a4, const btTransform *a5, const btVector3 *a6)
{
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  btVector3 var1;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;

  v81 = 0uLL;
  v81.f32[a4] = a3 * 0.5;
  v11 = (a4 + 1) % 3;
  v80 = 0uLL;
  v80.f32[v11] = a2;
  v79 = 0uLL;
  v79.f32[(a4 + 2) % 3] = a2;
  v12 = (float32x4_t)a5->var0.var0[0];
  v13 = (float32x4_t)a5->var0.var0[1];
  v14 = vmulq_f32((float32x4_t)a5->var0.var0[0], v81);
  v15 = (int8x16_t)vmulq_f32(v81, v13);
  v16 = (float32x4_t)a5->var0.var0[2];
  var1 = a5->var1;
  v18 = (int8x16_t)vmulq_f32(v81, v16);
  v18.i32[3] = 0;
  *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
  *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v78 = vaddq_f32((float32x4_t)var1, v14);
  v71 = vnegq_f32(v81);
  v73 = (float32x4_t)var1;
  v67 = v81;
  v69 = v80;
  v19 = vsubq_f32(v80, v81);
  v20 = vmulq_f32(v12, v19);
  v21 = (int8x16_t)vmulq_f32(v13, v19);
  v22 = (int8x16_t)vmulq_f32(v16, v19);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  v77 = vaddq_f32((float32x4_t)var1, v20);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *))(*(_QWORD *)this + 16))(this, &v78, &v77);
  v23 = (float32x4_t)a5->var0.var0[0];
  v24 = (float32x4_t)a5->var0.var0[1];
  v25 = vmulq_f32((float32x4_t)a5->var0.var0[0], v67);
  v26 = (int8x16_t)vmulq_f32(v67, v24);
  v27 = (float32x4_t)a5->var0.var0[2];
  v28 = (int8x16_t)vmulq_f32(v67, v27);
  v28.i32[3] = 0;
  *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
  *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
  v78 = vaddq_f32(v73, v25);
  v29 = vsubq_f32(v71, v69);
  v30 = (int8x16_t)vmulq_f32(v27, v29);
  v29.i32[3] = 0;
  v31 = vmulq_f32(v23, v29);
  v32 = (int8x16_t)vmulq_f32(v24, v29);
  v30.i32[3] = 0;
  *(float32x2_t *)v31.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)));
  *(float32x2_t *)&v31.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
  v77 = vaddq_f32(v73, v31);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v78, &v77, a6);
  v33 = (float32x4_t)a5->var0.var0[0];
  v34 = (float32x4_t)a5->var0.var0[1];
  v35 = vmulq_f32((float32x4_t)a5->var0.var0[0], v81);
  v36 = (int8x16_t)vmulq_f32(v81, v34);
  v37 = (float32x4_t)a5->var0.var0[2];
  v38 = (int8x16_t)vmulq_f32(v81, v37);
  v38.i32[3] = 0;
  *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
  *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0);
  v78 = vaddq_f32(v73, v35);
  v72 = vnegq_f32(v81);
  v68 = v81;
  v70 = v79;
  v39 = vsubq_f32(v79, v81);
  v40 = vmulq_f32(v33, v39);
  v41 = (int8x16_t)vmulq_f32(v34, v39);
  v42 = (int8x16_t)vmulq_f32(v37, v39);
  v42.i32[3] = 0;
  *(float32x2_t *)v40.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
  *(float32x2_t *)&v40.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 0);
  v77 = vaddq_f32(v73, v40);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v78, &v77, a6);
  v43 = (float32x4_t)a5->var0.var0[1];
  v44 = vmulq_f32((float32x4_t)a5->var0.var0[0], v68);
  v45 = (int8x16_t)vmulq_f32(v68, v43);
  v46 = (float32x4_t)a5->var0.var0[2];
  v47 = (int8x16_t)vmulq_f32(v68, v46);
  v47.i32[3] = 0;
  *(float32x2_t *)v44.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
  *(float32x2_t *)&v44.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0);
  v48 = vaddq_f32(v73, v44);
  v49 = vsubq_f32(v72, v70);
  v50 = (int8x16_t)vmulq_f32(v46, v49);
  v49.i32[3] = 0;
  v51 = vmulq_f32((float32x4_t)a5->var0.var0[0], v49);
  v52 = (int8x16_t)vmulq_f32(v43, v49);
  v50.i32[3] = 0;
  *(float32x2_t *)v51.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)));
  *(float32x2_t *)&v51.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)), 0);
  v77 = vaddq_f32(v73, v51);
  v78 = v48;
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v78, &v77, a6);
  v78 = 0uLL;
  v78.i32[a4] = 1065353216;
  v77 = 0uLL;
  v77.i32[v11] = 1065353216;
  v53 = (float32x4_t)a5->var0.var0[0];
  v54 = (float32x4_t)a5->var0.var0[1];
  v55 = vmulq_f32((float32x4_t)a5->var0.var0[0], v81);
  v56 = (int8x16_t)vmulq_f32(v81, v54);
  v57 = (float32x4_t)a5->var0.var0[2];
  v58 = (int8x16_t)vmulq_f32(v81, v57);
  v58.i32[3] = 0;
  *(float32x2_t *)v55.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
  *(float32x2_t *)&v55.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), 0);
  v59 = vsubq_f32(v73, v55);
  v59.i32[3] = 0;
  v76 = v59;
  v60 = (int8x16_t)vmulq_f32(v53, v78);
  v61 = (int8x16_t)vmulq_f32(v54, v78);
  v62 = (int8x16_t)vmulq_f32(v57, v78);
  v62.i32[3] = 0;
  *(float32x2_t *)v60.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v61.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)));
  v60.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)), 0);
  v75 = v60;
  v63 = (int8x16_t)vmulq_f32(v53, v77);
  v64 = (int8x16_t)vmulq_f32(v54, v77);
  v65 = (int8x16_t)vmulq_f32(v57, v77);
  v65.i32[3] = 0;
  *(float32x2_t *)v63.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v64.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)));
  v63.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), 0);
  v74 = v63;
  return (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, int8x16_t *, int8x16_t *, const btVector3 *, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)this + 120))(this, &v76, &v75, &v74, a6, 0, a2, a2, 0.0, 6.2832, 10.0);
}

uint64_t btIDebugDraw::drawPlane(btIDebugDraw *this, float32x4_t *a2, float a3, const btTransform *a4, const btVector3 *a5, float32x4_t a6)
{
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float32x4_t v15;
  float v16;
  float v17;
  int8x16_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  btVector3 var1;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  btVector3 v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;

  v9 = *a2;
  LODWORD(v10) = a2->i64[1];
  LODWORD(v11) = HIDWORD(a2->i64[0]);
  if (fabsf(v10) <= 0.70711)
  {
    v16 = (float)(v11 * v11) + (float)(v9.f32[0] * v9.f32[0]);
    v17 = 1.0 / sqrtf(v16);
    v18 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
    *(int32x2_t *)v18.i8 = vzip1_s32(*(int32x2_t *)v9.f32, *(int32x2_t *)v18.i8);
    v19 = (int32x4_t)v18;
    *(float *)&v19.i32[1] = -v11;
    *(float32x2_t *)v19.i8 = vmul_n_f32(*(float32x2_t *)v19.i8, v17);
    v15 = (float32x4_t)vrev64q_s32(v19).u64[0];
    *(float *)v18.i32 = -v10;
    *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v18.i8);
    a6.f32[2] = v16 * v17;
  }
  else
  {
    v12 = (float)(v10 * v10) + (float)(v11 * v11);
    v13 = 1.0 / sqrtf(v12);
    *(float *)&v14 = v11 * v13;
    v15.i32[0] = 0;
    v15.f32[1] = -(float)(v10 * v13);
    v15.i64[1] = v14;
    a6.f32[0] = v12 * v13;
    a6.f32[1] = -(float)(v9.f32[0] * *(float *)&v14);
    a6.f32[2] = v9.f32[0] * v15.f32[1];
  }
  v20 = vmulq_n_f32(v9, a3);
  v20.i32[3] = 0;
  v21 = (float32x4_t)vdupq_n_s32(0x42C80000u);
  v22 = vmulq_f32(v15, v21);
  v22.i32[3] = 0;
  v23 = vaddq_f32(v20, v22);
  v24 = vsubq_f32(v20, v22);
  v25 = (float32x4_t)a4->var0.var0[2];
  var1 = a4->var1;
  v27 = (int8x16_t)vmulq_f32(v25, v24);
  v24.i32[3] = 0;
  v28 = vmulq_f32(a6, v21);
  v28.i32[3] = 0;
  v29 = vaddq_f32(v20, v28);
  v30 = vsubq_f32(v20, v28);
  v50 = v30;
  v30.i32[3] = 0;
  v48 = v29;
  v49 = v30;
  v31 = (float32x4_t)a4->var0.var0[1];
  v32 = vmulq_f32((float32x4_t)a4->var0.var0[0], v23);
  v33 = (int8x16_t)vmulq_f32(v31, v23);
  v34 = (int8x16_t)vmulq_f32(v25, v23);
  v34.i32[3] = 0;
  *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
  v35 = vmulq_f32((float32x4_t)a4->var0.var0[0], v24);
  v36 = (int8x16_t)vmulq_f32(v31, v24);
  v27.i32[3] = 0;
  *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
  *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  v51 = vaddq_f32((float32x4_t)var1, v35);
  v52 = vaddq_f32((float32x4_t)var1, v32);
  (*(void (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v52, &v51, a5);
  v37 = (float32x4_t)a4->var0.var0[0];
  v38 = (float32x4_t)a4->var0.var0[1];
  v39 = vmulq_f32(v48, (float32x4_t)a4->var0.var0[0]);
  v40 = (int8x16_t)vmulq_f32(v48, v38);
  v41 = (float32x4_t)a4->var0.var0[2];
  v42 = a4->var1;
  v43 = (int8x16_t)vmulq_f32(v48, v41);
  v43.i32[3] = 0;
  *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
  *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
  v52 = vaddq_f32(v39, (float32x4_t)v42);
  v44 = vmulq_f32(v37, v49);
  v45 = (int8x16_t)vmulq_f32(v38, v49);
  v46 = (int8x16_t)vmulq_f32(v41, v50);
  v46.i32[3] = 0;
  *(float32x2_t *)v44.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8));
  *(float32x2_t *)&v44.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
  v51 = vaddq_f32((float32x4_t)v42, v44);
  return (*(uint64_t (**)(btIDebugDraw *, float32x4_t *, float32x4_t *, const btVector3 *))(*(_QWORD *)this + 16))(this, &v52, &v51, a5);
}

float btC3DRayResultCallback::addSingleResult(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t *v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int v10;
  float result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  int v29;
  int v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  _DWORD *v34;
  int *v35;
  int v36;

  v5 = *(float32x4_t **)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  v6 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v7 = (int8x16_t)vmulq_f32(v5[1], v6);
    v8 = (int8x16_t)vmulq_f32(v6, v5[2]);
    v9 = (int8x16_t)vmulq_f32(v6, v5[3]);
    v9.i32[3] = 0;
    *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
    *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  }
  *(float32x4_t *)(a1 + 112) = v6;
  *(float32x4_t *)(a1 + 128) = vaddq_f32(*(float32x4_t *)(a1 + 64), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(a1 + 64)), *(float *)(a2 + 32)));
  v10 = *(_DWORD *)(a1 + 96);
  if (v10 == 1)
    return 0.0;
  if (!v10)
  {
    result = *(float *)(a2 + 32);
    *(float *)(a1 + 8) = result;
    return result;
  }
  v12 = *(_DWORD *)(a1 + 148);
  if (v12 == *(_DWORD *)(a1 + 152))
  {
    v13 = v12 ? 2 * v12 : 1;
    if (v12 < v13)
    {
      if (v13)
      {
        v14 = btAlignedAllocInternal(8 * v13, 16);
        v12 = *(_DWORD *)(a1 + 148);
      }
      else
      {
        v14 = 0;
      }
      if (v12 >= 1)
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v14 + v15) = *(_QWORD *)(*(_QWORD *)(a1 + 160) + v15);
          v15 += 8;
        }
        while (8 * v12 != v15);
      }
      v16 = *(void ***)(a1 + 160);
      if (v16 && *(_BYTE *)(a1 + 168))
      {
        btAlignedFreeInternal(v16);
        v12 = *(_DWORD *)(a1 + 148);
      }
      *(_BYTE *)(a1 + 168) = 1;
      *(_QWORD *)(a1 + 160) = v14;
      *(_DWORD *)(a1 + 152) = v13;
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v12) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 148) = v12 + 1;
  v17 = *(_DWORD *)(a1 + 212);
  if (v17 == *(_DWORD *)(a1 + 216))
  {
    v18 = v17 ? 2 * v17 : 1;
    if (v17 < v18)
    {
      if (v18)
      {
        v19 = btAlignedAllocInternal(16 * v18, 16);
        v17 = *(_DWORD *)(a1 + 212);
      }
      else
      {
        v19 = 0;
      }
      if (v17 >= 1)
      {
        v20 = 0;
        v21 = 16 * v17;
        do
        {
          *(_OWORD *)(v19 + v20) = *(_OWORD *)(*(_QWORD *)(a1 + 224) + v20);
          v20 += 16;
        }
        while (v21 != v20);
      }
      v22 = *(void ***)(a1 + 224);
      if (v22 && *(_BYTE *)(a1 + 232))
        btAlignedFreeInternal(v22);
      *(_BYTE *)(a1 + 232) = 1;
      *(_QWORD *)(a1 + 224) = v19;
      *(_DWORD *)(a1 + 216) = v18;
      v17 = *(_DWORD *)(a1 + 212);
    }
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 224) + 16 * v17) = *(_OWORD *)(a1 + 128);
  ++*(_DWORD *)(a1 + 212);
  v23 = *(_DWORD *)(a1 + 180);
  if (v23 == *(_DWORD *)(a1 + 184))
  {
    v24 = v23 ? 2 * v23 : 1;
    if (v23 < v24)
    {
      if (v24)
      {
        v25 = btAlignedAllocInternal(16 * v24, 16);
        v23 = *(_DWORD *)(a1 + 180);
      }
      else
      {
        v25 = 0;
      }
      if (v23 >= 1)
      {
        v26 = 0;
        v27 = 16 * v23;
        do
        {
          *(_OWORD *)(v25 + v26) = *(_OWORD *)(*(_QWORD *)(a1 + 192) + v26);
          v26 += 16;
        }
        while (v27 != v26);
      }
      v28 = *(void ***)(a1 + 192);
      if (v28 && *(_BYTE *)(a1 + 200))
        btAlignedFreeInternal(v28);
      *(_BYTE *)(a1 + 200) = 1;
      *(_QWORD *)(a1 + 192) = v25;
      *(_DWORD *)(a1 + 184) = v24;
      v23 = *(_DWORD *)(a1 + 180);
    }
  }
  *(_OWORD *)(*(_QWORD *)(a1 + 192) + 16 * v23) = *(_OWORD *)(a1 + 112);
  ++*(_DWORD *)(a1 + 180);
  v29 = *(_DWORD *)(a1 + 244);
  if (v29 == *(_DWORD *)(a1 + 248))
  {
    v30 = v29 ? 2 * v29 : 1;
    if (v29 < v30)
    {
      if (v30)
      {
        v31 = btAlignedAllocInternal(4 * v30, 16);
        v29 = *(_DWORD *)(a1 + 244);
      }
      else
      {
        v31 = 0;
      }
      v32 = *(void ***)(a1 + 256);
      if (v29 < 1)
      {
        if (!v32)
        {
LABEL_68:
          *(_BYTE *)(a1 + 264) = 1;
          *(_QWORD *)(a1 + 256) = v31;
          *(_DWORD *)(a1 + 248) = v30;
          goto LABEL_69;
        }
      }
      else
      {
        v33 = v29;
        v34 = (_DWORD *)v31;
        v35 = *(int **)(a1 + 256);
        do
        {
          v36 = *v35++;
          *v34++ = v36;
          --v33;
        }
        while (v33);
      }
      if (*(_BYTE *)(a1 + 264))
      {
        btAlignedFreeInternal(v32);
        v29 = *(_DWORD *)(a1 + 244);
      }
      *(_QWORD *)(a1 + 256) = 0;
      goto LABEL_68;
    }
  }
LABEL_69:
  *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * v29) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 244) = v29 + 1;
  return 0.999;
}

void btC3DContactResultCallback::~btC3DContactResultCallback(btC3DContactResultCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

BOOL btC3DContactResultCallback::needsCollision(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(a1 + 40) & *(_QWORD *)(a2 + 8)) != 0 && (*(_QWORD *)(a2 + 16) & *(_QWORD *)(a1 + 32)) != 0;
}

float btC3DContactResultCallback::addSingleResult(uint64_t a1, const btVector3 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  void *v8;
  void *v9;

  v7 = __contact(*(const btCollisionObject **)(a3 + 16), *(const btCollisionObject **)(a6 + 16), a2 + 2, a2 + 4, a2[5].var0.var0[0], 0.0);
  if (v7)
  {
    v8 = v7;
    v9 = *(void **)(a1 + 48);
    if (!v9)
    {
      v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
      *(_QWORD *)(a1 + 48) = v9;
    }
    objc_msgSend(v9, "addObject:", v8);
  }
  return 0.999;
}

void btC3DConvexResultCallback::~btC3DConvexResultCallback(btC3DConvexResultCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btCollisionWorld::ConvexResultCallback::needsCollision(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (a1[3] & v2) != 0 && (*(_QWORD *)(a2 + 16) & a1[2]) != 0;
  return (a1[4] & v2) != 0 || v3;
}

float btC3DConvexResultCallback::addSingleResult(uint64_t a1, uint64_t a2, int a3)
{
  const btCollisionObject *v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  float v10;
  int v11;
  void *v12;

  v5 = *(const btCollisionObject **)a2;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)a2;
  v6 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v7 = (int8x16_t)vmulq_f32(*((float32x4_t *)v5 + 1), v6);
    v8 = (int8x16_t)vmulq_f32(v6, *((float32x4_t *)v5 + 2));
    v9 = (int8x16_t)vmulq_f32(v6, *((float32x4_t *)v5 + 3));
    v9.i32[3] = 0;
    *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
    *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  }
  *(float32x4_t *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 32);
  v10 = *(float *)(a2 + 48);
  *(float *)(a1 + 8) = v10;
  v11 = *(_DWORD *)(a1 + 80);
  if (v11)
  {
    if (v11 == 1)
    {
      return 0.0;
    }
    else
    {
      if (!*(_QWORD *)(a1 + 128))
      {
        *(_QWORD *)(a1 + 128) = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
        v10 = *(float *)(a1 + 8);
      }
      v12 = __contact(*(const btCollisionObject **)a2, 0, (const btVector3 *)(a1 + 112), (const btVector3 *)(a1 + 96), 0.0, v10);
      v10 = 0.999;
      if (v12)
        objc_msgSend(*(id *)(a1 + 128), "addObject:", v12);
    }
  }
  return v10;
}

void btGhostPairCallback::~btGhostPairCallback(btGhostPairCallback *this)
{
  JUMPOUT(0x1DF0D41C0);
}

uint64_t btGhostPairCallback::addOverlappingPair(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = *a2;
  if (*(_DWORD *)(*a3 + 264) == 4)
    v6 = *a3;
  else
    v6 = 0;
  if (v5)
    v7 = *(_DWORD *)(*a2 + 264) == 4;
  else
    v7 = 0;
  if (v7)
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 56))(v5, a3, a2);
  if (v6)
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 56))(v6, a2, a3);
  return 0;
}

uint64_t btGhostPairCallback::removeOverlappingPair(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v7 = *a2;
  if (*(_DWORD *)(*a3 + 264) == 4)
    v8 = *a3;
  else
    v8 = 0;
  if (v7)
    v9 = *(_DWORD *)(*a2 + 264) == 4;
  else
    v9 = 0;
  if (v9)
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v7 + 64))(v7, a3, a4, a2);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v8 + 64))(v8, a2, a4, a3);
  return 0;
}

uint64_t btAlignedObjectArray<btRigidBody *>::btAlignedObjectArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int *)(a2 + 4);
  if ((int)v3 < 1)
  {
    *(_DWORD *)(a1 + 4) = v3;
  }
  else
  {
    v5 = 8 * v3;
    v6 = btAlignedAllocInternal(8 * v3, 16);
    v7 = v6;
    v8 = *(unsigned int *)(a1 + 4);
    if ((int)v8 >= 1)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        *(_QWORD *)(v6 + v9) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v9);
        v9 += 8;
      }
      while (v10 != v9);
    }
    v11 = *(void ***)(a1 + 16);
    if (v11 && *(_BYTE *)(a1 + 24))
      btAlignedFreeInternal(v11);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v3;
    v12 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12) = 0;
      v12 += 8;
    }
    while (v5 != v12);
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 4) = v3;
    do
    {
      *(_QWORD *)(v14 + v13) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v13);
      v13 += 8;
    }
    while (v5 != v13);
  }
  return a1;
}

uint64_t C3DWasLinkedBeforeMajorOSYear2013()
{
  if (C3DWasLinkedBeforeMajorOSYear2013_onceToken != -1)
    dispatch_once(&C3DWasLinkedBeforeMajorOSYear2013_onceToken, &__block_literal_global_68);
  return 0;
}

uint64_t SCNSetResourceBundle(uint64_t result)
{
  _SCNResourceBundle = result;
  return result;
}

BOOL SCNHasSpecialResourceBundle()
{
  return _SCNResourceBundle != 0;
}

uint64_t SCNGetResourceBundle()
{
  uint64_t result;

  result = _SCNResourceBundle;
  if (!_SCNResourceBundle)
    return objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  return result;
}

uint64_t SCNGetSceneKitBundle()
{
  return objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
}

id SCNSetExternalTextureSource(id result)
{
  void *v1;

  if ((id)SCNGlobalTextureSource != result)
  {
    v1 = result;

    result = v1;
    SCNGlobalTextureSource = (uint64_t)result;
  }
  return result;
}

uint64_t SCNGetExternalTextureSource()
{
  return SCNGlobalTextureSource;
}

id C3DTimingFunctionFromCAMediaTimingFunction(id result)
{
  void *v1;
  float v2[2];
  float v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    objc_msgSend(result, "getControlPointAtIndex:values:", 1, v2);
    objc_msgSend(v1, "getControlPointAtIndex:values:", 2, v3);
    return (id)C3DTimingFunctionCreateWithControlPoints(v2[0], v2[1], v3[0], v3[1]);
  }
  return result;
}

uint64_t CAMediaTimingFunctionFromC3DTimingFunction(uint64_t a1)
{
  _DWORD *ControlPoints;
  double v2;
  double v3;
  double v4;
  double v5;

  ControlPoints = (_DWORD *)C3DTimingFunctionGetControlPoints(a1);
  LODWORD(v2) = *ControlPoints;
  LODWORD(v3) = ControlPoints[1];
  LODWORD(v4) = ControlPoints[2];
  LODWORD(v5) = ControlPoints[3];
  return objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithControlPoints::::", v2, v3, v4, v5);
}

uint64_t SCNInterpolationModeFromCACalculationMode(void *a1)
{
  uint64_t v2;

  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0CD2938]) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0CD2930]) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0CD2948]) & 1) != 0)
    return 0;
  v2 = 2;
  if ((objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0CD2920]) & 1) == 0)
  {
    if (objc_msgSend(a1, "isEqualToString:", *MEMORY[0x1E0CD2928]))
      return 2;
    else
      return 0;
  }
  return v2;
}

double SCNGetFileTimestampAtURL(void *a1)
{
  void *v1;
  CFTypeID v2;
  uint64_t v3;
  void *v4;
  void *v5;
  double result;
  uint64_t v7;

  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
    v1 = (void *)objc_msgSend(v1, "path");
  if (!v1)
    return 0.0;
  v7 = 0;
  v3 = objc_msgSend(v1, "stringByResolvingSymlinksInPath");
  v4 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfItemAtPath:error:", v3, &v7);
  v5 = (void *)objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0CB2A88]);
  if (!v5)
    return 0.0;
  objc_msgSend(v5, "timeIntervalSinceReferenceDate");
  return result;
}

uint64_t SCNCreateGLESContext(uint64_t a1)
{
  Class v2;
  Class v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v2 = NSClassFromString(CFSTR("SKGlobalSharedContextRegistry"));
  if (v2)
  {
    v3 = v2;
    v4 = (void *)-[objc_class globalGLSharedContext](v2, "globalGLSharedContext");
    if (!v4)
    {
      v5 = objc_alloc(MEMORY[0x1E0CD0958]);
      v31 = *MEMORY[0x1E0CD0D38];
      v32[0] = MEMORY[0x1E0C9AAB0];
      v6 = objc_msgSend(v5, "initWithAPI:properties:", 2, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, &v31, 1));
      if (v6)
      {
        v7 = v6;
        -[objc_class setGlobalGLSharedContext:](v3, "setGlobalGLSharedContext:", v6);
        return v7;
      }
      v20 = scn_default_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        SCNCreateGLESContext_cold_2(v20);
      return 0;
    }
  }
  else
  {
    v4 = (void *)SCNCreateGLESContext__SCNSharedGLContext;
    if (!SCNCreateGLESContext__SCNSharedGLContext)
    {
      v29 = *MEMORY[0x1E0CD0D38];
      v30 = MEMORY[0x1E0C9AAB0];
      v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", 2, v8);
      SCNCreateGLESContext__SCNSharedGLContext = (uint64_t)v4;
    }
  }
  v9 = objc_msgSend(v4, "sharegroup");
  v10 = *MEMORY[0x1E0CD0D38];
  if (v9)
  {
    v28[0] = MEMORY[0x1E0C9AAB0];
    v11 = *MEMORY[0x1E0CD0D30];
    v27[0] = v10;
    v27[1] = v11;
    v28[1] = objc_msgSend(v4, "sharegroup");
    v12 = (void *)MEMORY[0x1E0C99D80];
    v13 = v28;
    v14 = v27;
    v15 = 2;
  }
  else
  {
    v25 = *MEMORY[0x1E0CD0D38];
    v26 = MEMORY[0x1E0C9AAB0];
    v12 = (void *)MEMORY[0x1E0C99D80];
    v13 = &v26;
    v14 = &v25;
    v15 = 1;
  }
  v16 = objc_msgSend(v12, "dictionaryWithObjects:forKeys:count:", v13, v14, v15);
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", a1, v16);
  if (!v7)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1DCCB8000, v17, OS_LOG_TYPE_DEFAULT, "Warning: SCNCreateGLContext - failed to share our context with SpriteKit - fallback on a private context", v22, 2u);
    }
    v18 = objc_alloc(MEMORY[0x1E0CD0958]);
    v23 = v10;
    v24 = MEMORY[0x1E0C9AAB0];
    v7 = objc_msgSend(v18, "initWithAPI:properties:", a1, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v24, &v23, 1));
    if (!v7)
    {
      v19 = scn_default_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        SCNCreateGLESContext_cold_1(v19);
      return 0;
    }
  }
  return v7;
}

void C3DRendererContextExecuteOnContext(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = (id)objc_msgSend(MEMORY[0x1E0CD0958], "currentContext");
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", *(_QWORD *)(a1 + 160));
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", v4);

}

id C3DRendererContextRetainContext(uint64_t a1)
{
  return *(id *)(a1 + 160);
}

void C3DRendererContextReleaseContext(uint64_t a1)
{

}

const char *C3D::ResourceTypeDescription(unsigned int a1)
{
  if (a1 > 2)
    return "Invalid - wrong value";
  else
    return off_1EA5A1F20[(char)a1];
}

std::string *C3D::description@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  const std::string::value_type *v11;
  std::string __p;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  std::string::basic_string[abi:nn180100]<0>(a2, "texture: {\n");
  C3D::appendValue<unsigned short>((uint64_t)a2, "width", (unsigned __int16 *)a1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  C3D::appendValue<unsigned short>((uint64_t)a2, "height", (unsigned __int16 *)(a1 + 2), &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  C3D::appendValue<unsigned short>((uint64_t)a2, "depth", (unsigned __int16 *)(a1 + 4), &v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  C3D::appendValue<unsigned short>((uint64_t)a2, "arrayLength", (unsigned __int16 *)(a1 + 6), &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v11 = (const std::string::value_type *)-[__CFString UTF8String]((id)SCNMTLTextureTypeToString(*(unsigned __int8 *)(a1 + 8)), "UTF8String");
  C3D::appendValue<char const*>((uint64_t)a2, "textureType", &v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (const std::string::value_type *)-[__CFString UTF8String]((id)SCNMTLStorageModeToString(*(unsigned __int8 *)(a1 + 9)), "UTF8String");
  C3D::appendValue<char const*>((uint64_t)a2, "storageMode", &v11, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v11 = (const std::string::value_type *)-[__CFString UTF8String]((id)SCNTextureUsageToString(*(_BYTE *)(a1 + 10)), "UTF8String");
  C3D::appendValue<char const*>((uint64_t)a2, "usage", &v11, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v11 = (const std::string::value_type *)-[__CFString UTF8String]((id)SCNMTLCPUCacheModeToString(*(unsigned __int8 *)(a1 + 11)), "UTF8String");
  C3D::appendValue<char const*>((uint64_t)a2, "cpuCacheMode", &v11, &v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v11 = (const std::string::value_type *)-[__CFString UTF8String]((id)SCNMTLPixelFormatToString(*(unsigned __int16 *)(a1 + 12)), "UTF8String");
  C3D::appendValue<char const*>((uint64_t)a2, "pixelFormat", &v11, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  C3D::appendValue<unsigned char>((uint64_t)a2, "mipmapLevelCount", (unsigned __int8 *)(a1 + 14), &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  C3D::appendValue<unsigned char>((uint64_t)a2, "sampleCount", (unsigned __int8 *)(a1 + 15), &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  return std::string::append(a2, "}");
}

void sub_1DCE275E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void C3D::appendValue<unsigned short>(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, unsigned __int16 *a3@<X2>, std::string *a4@<X8>)
{
  std::string *v8;
  std::string::size_type size;
  std::string v10;

  std::string::append((std::string *)a1, "\t");
  std::string::append((std::string *)a1, a2);
  std::string::append((std::string *)a1, ": ");
  std::to_string(&v10, *a3);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v10;
  else
    v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  std::string::append((std::string *)a1, (const std::string::value_type *)v8, size);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::append((std::string *)a1, "\n");
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1DCE276EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void C3D::appendValue<char const*>(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, const std::string::value_type **a3@<X2>, std::string *a4@<X8>)
{
  std::string::append((std::string *)a1, "\t");
  std::string::append((std::string *)a1, a2);
  std::string::append((std::string *)a1, ": ");
  std::string::append((std::string *)a1, *a3);
  std::string::append((std::string *)a1, "\n");
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void C3D::appendValue<unsigned char>(uint64_t a1@<X0>, const std::string::value_type *a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  std::string *v8;
  std::string::size_type size;
  std::string v10;

  std::string::append((std::string *)a1, "\t");
  std::string::append((std::string *)a1, a2);
  std::string::append((std::string *)a1, ": ");
  std::to_string(&v10, *a3);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v10;
  else
    v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  else
    size = v10.__r_.__value_.__l.__size_;
  std::string::append((std::string *)a1, (const std::string::value_type *)v8, size);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  std::string::append((std::string *)a1, "\n");
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
}

void sub_1DCE27884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double C3D::PassIODescriptor::PassIODescriptor(uint64_t a1, char a2)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 1;
  *(_WORD *)(a1 + 66) &= 0xFE00u;
  *(_QWORD *)&result = 0x1000100000000;
  *(_QWORD *)(a1 + 16) = 0x1000100000000;
  *(_BYTE *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 25) = 2;
  *(_BYTE *)(a1 + 27) = 0;
  *(_QWORD *)(a1 + 28) = 0x10000;
  return result;
}

void C3D::PassIODescriptor::description(C3D::PassIODescriptor *this@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  unint64_t v5;
  const std::string::value_type *v6;
  std::string *p_p;
  std::string::size_type size;
  __int128 v9;
  int v10;
  std::string __p;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "C3D::PassBufferParameter [");
  v4 = (const std::string::value_type *)*((_QWORD *)this + 1);
  if (v4)
    std::string::append(a2, v4);
  std::string::append(a2, "] : ");
  v5 = *(char *)this;
  if (v5 > 2)
    v6 = "Invalid - wrong value";
  else
    v6 = off_1EA5A1F20[v5];
  std::string::append(a2, v6);
  std::string::append(a2, "\n");
  v9 = *((_OWORD *)this + 1);
  v10 = *((_DWORD *)this + 8);
  C3D::description((uint64_t)&v9, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DCE279D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

_QWORD *C3D::RefCountedResource::textureOrFinal(C3D::RefCountedResource *this, SCNMTLRenderContext *a2)
{
  if ((*((_BYTE *)this + 34) & 2) != 0)
    return -[SCNMTLRenderContext _finalRenderTexture](a2);
  else
    return *(_QWORD **)this;
}

uint64_t C3D::PassResource::inputAtIndex(C3D::PassResource *this, unsigned int a2)
{
  NSObject *v4;

  if (*((unsigned __int16 *)this + 8) <= a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3D::PassResource::inputAtIndex();
  }
  return *(_QWORD *)(*(_QWORD *)this + 8 * a2);
}

uint64_t C3D::Pass::drawableInfo(C3D::Pass *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*((_QWORD *)this + 1))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::Pass::drawableInfo(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t C3D::Pass::inputBufferParameterNamed(C3D::Pass *this, const char *a2)
{
  unsigned int v2;
  unsigned __int16 v4;
  C3D::PassDescriptor *v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 v8;

  v2 = *((unsigned __int8 *)this + 72);
  if (!*((_BYTE *)this + 72))
    return 0;
  v4 = 0;
  v5 = (C3D::Pass *)((char *)this + 32);
  while (1)
  {
    v6 = C3D::PassDescriptor::inputAtIndex(v5, v4);
    v7 = *(const char **)(v6 + 8);
    if (v7)
    {
      if (!strcmp(v7, a2))
        break;
    }
    v8 = v4 + 1;
    v4 = (v4 + 1);
    if (v2 <= v8)
      return 0;
  }
  return v6;
}

uint64_t C3D::Pass::outputBufferParameterNamed(C3D::Pass *this, const char *a2)
{
  unsigned int v2;
  unsigned __int16 v4;
  C3D::PassDescriptor *v5;
  uint64_t v6;
  const char *v7;
  unsigned __int8 v8;

  v2 = *((unsigned __int8 *)this + 74);
  if (!*((_BYTE *)this + 74))
    return 0;
  v4 = 0;
  v5 = (C3D::Pass *)((char *)this + 32);
  while (1)
  {
    v6 = C3D::PassDescriptor::outputAtIndex(v5, v4);
    v7 = *(const char **)(v6 + 8);
    if (v7)
    {
      if (!strcmp(v7, a2))
        break;
    }
    v8 = v4 + 1;
    v4 = (v4 + 1);
    if (v2 <= v8)
      return 0;
  }
  return v6;
}

void **C3D::Pass::inputTextureAtIndex(C3D::Pass *this, unsigned int a2)
{
  _QWORD *RenderContext;
  void **result;
  void **v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  RenderContext = (_QWORD *)C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  result = (void **)C3D::PassResource::inputAtIndex((C3D::Pass *)((char *)this + 80), a2);
  if (result)
  {
    v6 = result;
    v7 = *result;
    v8 = C3D::PassDescriptor::inputAtIndex((C3D::Pass *)((char *)this + 32), a2);
    if (!v7
      || (*(unsigned __int8 *)(v8 + 31) <= 1u ? (v9 = 1) : (v9 = *(unsigned __int8 *)(v8 + 31)),
          objc_msgSend(v7, "sampleCount") == v9))
    {
      if ((*((_BYTE *)v6 + 34) & 2) == 0)
        return (void **)*v6;
      return (void **)-[SCNMTLRenderContext _finalRenderTexture](RenderContext);
    }
    if ((*((_BYTE *)v6 + 34) & 4) != 0)
      return (void **)-[SCNMTLRenderContext _finalRenderTexture](RenderContext);
    return (void **)v6[3];
  }
  return result;
}

void **C3D::Pass::inputTextureNamed(C3D::Pass *this, const char *a2)
{
  unsigned __int16 v4;
  const char *v5;

  if (!*((_WORD *)this + 36))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(const char **)(C3D::Pass::inputBufferParameterAtIndex(this, v4) + 8);
    if (v5)
    {
      if (!strcmp(v5, a2))
        break;
    }
    if (*((unsigned __int16 *)this + 36) <= ++v4)
      return 0;
  }
  return C3D::Pass::inputTextureAtIndex(this, v4);
}

_QWORD *C3D::Pass::outputTextureNamed(C3D::Pass *this, const char *a2)
{
  unsigned __int16 v4;
  const char *v5;

  if (!*((_WORD *)this + 37))
    return 0;
  v4 = 0;
  while (1)
  {
    v5 = *(const char **)(C3D::Pass::outputBufferParameterAtIndex(this, v4) + 8);
    if (v5)
    {
      if (!strcmp(v5, a2))
        break;
    }
    if (*((unsigned __int16 *)this + 37) <= ++v4)
      return 0;
  }
  return C3D::Pass::outputTextureAtIndex(this, v4);
}

const char *C3D::Pass::programHashCodeStoreName(C3D::Pass *this)
{
  return "default";
}

unint64_t C3D::Pass::programHashCodeStoreKey(C3D::Pass *this)
{
  const char *v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (const char *)(*(uint64_t (**)(C3D::Pass *))(*(_QWORD *)this + 72))(this);
  v2 = strlen(v1);
  v3 = 0xC6A4A7935BD1E995 * v2;
  if (v2 >= 8)
  {
    v4 = v2 >> 3;
    v5 = (unsigned __int8 *)&v1[8 * v4];
    v6 = 8 * v4;
    do
    {
      v7 = *(_QWORD *)v1;
      v1 += 8;
      v3 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47))) ^ v3);
      v6 -= 8;
    }
    while (v6);
    v1 = (const char *)v5;
  }
  switch(v2 & 7)
  {
    case 1u:
      goto LABEL_12;
    case 2u:
      goto LABEL_11;
    case 3u:
      goto LABEL_10;
    case 4u:
      goto LABEL_9;
    case 5u:
      goto LABEL_8;
    case 6u:
      goto LABEL_7;
    case 7u:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 6) << 48;
LABEL_7:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 5) << 40;
LABEL_8:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 4) << 32;
LABEL_9:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 3) << 24;
LABEL_10:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 2) << 16;
LABEL_11:
      v3 ^= (unint64_t)*((unsigned __int8 *)v1 + 1) << 8;
LABEL_12:
      v3 = 0xC6A4A7935BD1E995 * (v3 ^ *(unsigned __int8 *)v1);
      break;
    default:
      return (0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) >> 47);
  }
  return (0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) >> 47);
}

char *C3D::Pass::nameWithPrefixAndPointer(C3D::Pass *this, const char *__s, void *a3)
{
  size_t v6;
  char *v7;

  v6 = strlen(__s) + 20;
  v7 = C3DScratchAllocatorAllocate(*(_QWORD **)(*((_QWORD *)this + 3) + 16), v6);
  snprintf(v7, v6, "%s%p", __s, a3);
  return v7;
}

const char *C3D::CachedFXPassName(void **this, const char **a2, __C3DFXPass *a3, void *a4)
{
  const char *result;
  const char *v7;
  size_t v8;
  uint64_t Aligned;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = (const char *)*this;
  if (!result)
  {
    result = C3DFXPassGetCStringName((uint64_t)a2);
    if (result)
    {
      v7 = result;
      v8 = strlen(result) + 1;
      Aligned = C3DScratchAllocatorAllocateAligned(a3, v8, 1, 0);
      *this = (void *)Aligned;
      if (!Aligned)
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
          C3D::CachedFXPassName(v10, v11, v12, v13, v14, v15, v16, v17);
      }
      memcpy(*this, v7, v8);
      return (const char *)*this;
    }
  }
  return result;
}

void **C3DPassGetInputTextureNamed(C3D::Pass *this, char *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!this)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DPassGetInputTextureNamed_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return C3D::Pass::inputTextureNamed(this, a2);
}

_QWORD *C3DPassGetOutputTextureNamed(C3D::Pass *this, char *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!this)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DPassGetInputTextureNamed_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return C3D::Pass::outputTextureNamed(this, a2);
}

C3D::RenderPass *C3D::GridPass::GridPass(C3D::GridPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA59A688;
  return result;
}

const char *C3D::GridPass::name(C3D::GridPass *this)
{
  return "GridPass";
}

const char *C3D::GridPass::programHashCodeStoreName(C3D::GridPass *this)
{
  return "GridPass";
}

double C3D::GridPass::setup(C3D::GridPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  int v7;

  C3D::Pass::setInputCount(this, 2u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::GridPass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v6);
  *(_OWORD *)(v2 + 16) = v6;
  *(_DWORD *)(v2 + 32) = v7;
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFF78 | 0x85;
  v3 = C3D::PassDescriptor::inputAtIndex((C3D::GridPass *)((char *)this + 32), 1u);
  *(_QWORD *)(v3 + 8) = "DEPTH";
  *(_BYTE *)(v3 + 64) = 2;
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v6);
  *(_OWORD *)(v3 + 16) = v6;
  *(_DWORD *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 66) = *(_WORD *)(v3 + 66) & 0xFFFC | 1;
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::GridPass *)((char *)this + 32), 0);
  *(_QWORD *)(v4 + 8) = "COLOR";
  *(_BYTE *)(v4 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 32) = v7;
  *(_WORD *)(v4 + 66) = *(_WORD *)(v4 + 66) & 0xFF7C | 0x81;
  *((_BYTE *)this + 119) = 1;
  return result;
}

void C3D::GridPass::compile(C3D::GridPass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t RenderContext;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v2 = (*(uint64_t (**)(C3D::GridPass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 30) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA599688;
    *((_QWORD *)this + 30) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
    v7 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
    v8 = C3D::PassDescriptor::inputAtIndex((C3D::GridPass *)((char *)this + 32), 0);
    *((_QWORD *)&v14 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v7), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v15 = *(unsigned __int16 *)(v8 + 28);
    v16 = *(_BYTE *)(v8 + 31);
    v17 = C3DBlendStatesDefaultOver();
    *((_QWORD *)&v18 + 1) = CFSTR("C3D_grid_vert");
    *(_QWORD *)&v19 = CFSTR("C3D_grid_frag");
    v9 = objc_msgSend(v7, "newRenderPipelineStateWithDesc:", &v13);
    v10 = *((_QWORD *)this + 30);
    v11 = *(void **)(v10 + 16);
    if (v11 != (void *)v9)
    {
      v12 = v9;
      if (v11)

      *(_QWORD *)(v10 + 16) = v12;
    }
  }
}

uint64_t C3D::GridPass::execute(uint64_t result, unsigned __int16 *a2)
{
  C3D::DrawNodesPass *v2;
  uint64_t *v4;
  __n128 ViewBackgroundColor;
  BOOL v6;
  float v7;
  uint64_t CullingContext;
  unint64_t v9;
  float v10;
  uint64_t RenderContext;
  float v12;
  char v13;
  double v14;
  double v15;
  float v16;
  _OWORD *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  float32x2_t v28;
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  char CoordinatesSystemOptions;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  __int128 v43;
  __n128 Viewport;
  __n128 v45;
  _BYTE v46[128];
  _OWORD v47[5];
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  _OWORD v53[8];
  uint64_t v54;
  simd_float4x4 v55;
  simd_float4x4 v56;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *(C3D::DrawNodesPass **)(*(_QWORD *)(result + 24) + 112);
  if (v2)
  {
    v4 = (uint64_t *)result;
    Viewport = C3DEngineContextGetViewport((__n128 *)*(_QWORD *)(result + 16));
    ViewBackgroundColor = C3DEngineContextGetViewBackgroundColor(v4[2]);
    v6 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)ViewBackgroundColor, 2), vaddq_f32((float32x4_t)ViewBackgroundColor, (float32x4_t)vdupq_lane_s32((int32x2_t)ViewBackgroundColor.n128_u64[0], 1))).f32[0] <= 1.5;
    v7 = 1.0;
    if (!v6)
      v7 = 0.0;
    v52 = v7;
    CullingContext = C3D::DrawNodesPass::getCullingContext(v2);
    v9 = CullingContext + ((unint64_t)a2[8] << 6);
    v43 = *(_OWORD *)(v9 + 3488);
    v10 = *(float *)(v9 + 3516);
    RenderContext = C3DEngineContextGetRenderContext(v4[2]);
    v12 = -[SCNMTLRenderContext contentScaleFactor](RenderContext);
    v13 = 2;
    if (!*(_BYTE *)(CullingContext + 4695))
      v13 = 3;
    v45 = Viewport;
    v14 = v12;
    if (v10 == 0.0)
      v15 = v14 * 400.0;
    else
      v15 = 1000.0 / *((float *)&v43 + 1) * v14;
    v16 = v15 / fmaxf(*(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3))), 1.0);
    v51 = v16;
    v17 = (_OWORD *)(CullingContext + ((unint64_t)a2[8] << 6));
    v55.columns[1] = (simd_float4)v17[242];
    v55.columns[2] = (simd_float4)v17[243];
    v55.columns[3] = (simd_float4)v17[244];
    v47[0] = v17[241];
    v55.columns[0] = (simd_float4)v47[0];
    v47[1] = v55.columns[1];
    v47[2] = v55.columns[2];
    v47[3] = v55.columns[3];
    v56 = __invert_f4(v55);
    v18 = 0;
    v19 = vmlaq_f32(vmulq_f32((float32x4_t)v56.columns[0], (float32x4_t)0), (float32x4_t)0, (float32x4_t)v56.columns[1]);
    __asm { FMOV            V4.4S, #-1.0 }
    v25 = vsubq_f32(vaddq_f32((float32x4_t)v56.columns[3], vmlaq_f32(v19, _Q4, (float32x4_t)v56.columns[2])), vaddq_f32((float32x4_t)v56.columns[3], vaddq_f32((float32x4_t)v56.columns[2], v19)));
    v26 = (int8x16_t)vmulq_f32(v25, v25);
    *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
    v26.i32[0] = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)).u32[0];
    v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
    v47[4] = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
    v29 = *(_OWORD *)(CullingContext + ((unint64_t)a2[8] << 6) + 2752);
    v30 = vmlaq_f32(vnegq_f32((float32x4_t)v56.columns[0]), _Q4, (float32x4_t)v56.columns[1]);
    v31 = vsubq_f32((float32x4_t)v56.columns[1], (float32x4_t)v56.columns[0]);
    v32 = vaddq_f32((float32x4_t)v56.columns[1], (float32x4_t)v56.columns[0]);
    v56.columns[0] = (simd_float4)vmlaq_f32((float32x4_t)v56.columns[0], _Q4, (float32x4_t)v56.columns[1]);
    v53[0] = vaddq_f32((float32x4_t)v56.columns[3], vmlaq_f32(v30, _Q4, (float32x4_t)v56.columns[2]));
    v53[1] = vaddq_f32((float32x4_t)v56.columns[3], vmlaq_f32((float32x4_t)v56.columns[0], _Q4, (float32x4_t)v56.columns[2]));
    v53[2] = vaddq_f32((float32x4_t)v56.columns[3], vmlaq_f32(v31, _Q4, (float32x4_t)v56.columns[2]));
    v53[3] = vaddq_f32((float32x4_t)v56.columns[3], vmlaq_f32(v32, _Q4, (float32x4_t)v56.columns[2]));
    v53[4] = vaddq_f32((float32x4_t)v56.columns[3], vaddq_f32((float32x4_t)v56.columns[2], v30));
    v53[5] = vaddq_f32((float32x4_t)v56.columns[3], vaddq_f32((float32x4_t)v56.columns[2], (float32x4_t)v56.columns[0]));
    v53[6] = vaddq_f32((float32x4_t)v56.columns[3], vaddq_f32((float32x4_t)v56.columns[2], v31));
    v53[7] = vaddq_f32((float32x4_t)v56.columns[3], vaddq_f32((float32x4_t)v56.columns[2], v32));
    do
    {
      *(float32x4_t *)&v46[v18 * 16] = vdivq_f32((float32x4_t)v53[v18], (float32x4_t)vdupq_laneq_s32((int32x4_t)v53[v18], 3));
      ++v18;
    }
    while (v18 != 8);
    v33 = 0.0;
    if (v10 != 0.0)
      v33 = 1.0;
    v50 = v33;
    if (v10 == 0.0)
      v34 = (float)(2.0 / v12) / *((float *)&v43 + 1);
    else
      v34 = fabsf(*((float *)&v29 + 1));
    v48 = v34;
    CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(v4[2]);
    v36 = -1.0;
    if ((CoordinatesSystemOptions & 8) == 0)
      v36 = 1.0;
    v49 = v36;
    v37 = *(_QWORD *)a2;
    v38 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v4[30] + 16), "state");
    if (*(_QWORD *)(v37 + 3376) != v38)
    {
      *(_QWORD *)(v37 + 3376) = v38;
      objc_msgSend(*(id *)(v37 + 3392), "setRenderPipelineState:", v38);
    }
    v39 = *(_QWORD *)a2;
    if (!*(_BYTE *)(*(_QWORD *)a2 + 73))
    {
      if (*(_QWORD *)(v39 + 16))
      {
        *(_QWORD *)(v39 + 16) = 0;
        *(_BYTE *)(v39 + 41) = 1;
      }
    }
    v40 = -[SCNMTLRenderContext resourceManager](RenderContext);
    objc_msgSend(*(id *)(v39 + 3392), "setDepthStencilState:", -[SCNMTLResourceManager depthAndStencilStateWithReadWriteDepthDisabled](v40));
    v41 = *(_QWORD *)a2;
    v42 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)v4, 1u);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v41, v42, 0);
    SCNMTLRenderCommandEncoder::setVertexBytes(*(SCNMTLRenderCommandEncoder **)a2, v46, 0x80uLL, 0);
    SCNMTLRenderCommandEncoder::setFragmentBytes(*(SCNMTLRenderCommandEncoder **)a2, v47, 0x70uLL, 0);
    return SCNMTLRenderCommandEncoder::drawFullScreenQuad(*(SCNMTLRenderCommandEncoder **)a2);
  }
  return result;
}

void C3D::GridPassResource::~GridPassResource(C3D::GridPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA599688;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA599688;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void *_SCNAreaLightpolygonVerticesFromDescription(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)a1 != 6)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v2);
  if (v2)
  {
    v4 = 0;
    v5 = 8 * v2;
    do
    {
      objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 24) + v4))));
      v4 += 8;
    }
    while (v5 != v4);
  }
  return v3;
}

void _SCNLightUpdateC3DLightDescription(uint64_t a1, uint64_t a2, void *a3, float32x4_t a4)
{
  float32x2_t v5;
  char v6;
  float32x4_t v7;
  unint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  float64_t v15;
  float64x2_t v16;
  __int128 v17;
  float32x4_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 0:
      v17 = 0uLL;
      v18.f32[0] = 0.5 * a4.f32[0];
      *(uint64_t *)((char *)v18.i64 + 4) = 0;
      v18.i32[3] = 0;
      goto LABEL_7;
    case 1:
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)((char *)&v17 + 1) = 0;
      v5 = vmul_f32(*(float32x2_t *)a4.f32, (float32x2_t)0x3F0000003F000000);
      v6 = 1;
      goto LABEL_5;
    case 2:
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)((char *)&v17 + 1) = 0;
      v5 = vmul_f32(*(float32x2_t *)a4.f32, (float32x2_t)0x3F0000003F000000);
      v6 = 2;
LABEL_5:
      LOBYTE(v17) = v6;
      v18 = (float32x4_t)(unint64_t)v5;
      goto LABEL_7;
    case 3:
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)((char *)&v17 + 1) = 0;
      v7.i64[0] = 0x3F0000003F000000;
      v7.i64[1] = 0x3F0000003F000000;
      LOBYTE(v17) = 3;
      v18 = vmulq_f32(a4, v7);
LABEL_7:
      C3DLightSetAreaDescription(a1, (unsigned __int8 *)&v17);
      break;
    case 4:
      v9 = objc_msgSend(a3, "count");
      if (v9 >= 0xFF)
        v10 = 255;
      else
        v10 = v9;
      v11 = MEMORY[0x1E0C80A78](v9);
      v13 = (char *)&v17 - v12;
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", i, v11), "CGPointValue");
          v16.f64[1] = v15;
          v11 = COERCE_DOUBLE(vcvt_f32_f64(v16));
          *(double *)&v13[8 * i] = v11;
        }
      }
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)((char *)&v17 + 1) = 0;
      *(__int32 *)((char *)v18.i32 + 1) = 0;
      v18.i32[1] = 0;
      LOBYTE(v17) = 4;
      v18.i8[0] = v10;
      v18.i64[1] = (uint64_t)v13;
      C3DLightSetAreaDescription(a1, (unsigned __int8 *)&v17);
      break;
    default:
      return;
  }
}

void OUTLINED_FUNCTION_0_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

float C3DMeshElementComputeACMR(uint64_t a1, uint64_t a2)
{
  float v3;
  uint64_t IndexCountWithTypeAndPrimitiveCount;
  int v7[4];
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)v7 = 0u;
  C3DMeshElementGetContent(a1, 0, (uint64_t)v7);
  v3 = 0.0;
  if (*(_QWORD *)v7 && BYTE10(v8) != 4)
  {
    IndexCountWithTypeAndPrimitiveCount = C3DMeshElementGetIndexCountWithTypeAndPrimitiveCount(SBYTE10(v8), v7[2]);
    switch(BYTE11(v8))
    {
      case 4u:
        return VertexCache<unsigned int>::computeACMR(*(uint64_t *)v7, IndexCountWithTypeAndPrimitiveCount, a2);
      case 2u:
        return VertexCache<unsigned short>::computeACMR(*(uint64_t *)v7, IndexCountWithTypeAndPrimitiveCount, a2);
      case 1u:
        return VertexCache<unsigned char>::computeACMR(*(uint64_t *)v7, IndexCountWithTypeAndPrimitiveCount, a2);
    }
  }
  return v3;
}

float VertexCache<unsigned char>::computeACMR(uint64_t a1, uint64_t a2, uint64_t __len)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int8 __b;
  _BYTE v14[3];
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = __len;
  if (__len > 0x3F)
    VertexCache<unsigned char>::computeACMR(a1, a2, __len);
  v3 = a2;
  if ((_DWORD)__len)
    memset(&__b, 255, __len);
  if (!v3)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b;
  do
  {
    v8 = *(unsigned __int8 *)(a1 + v5);
    if (!v15)
      goto LABEL_12;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = v14[v9++ - 1];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_12:
        memmove(v14, &__b, v15 - 1);
        __b = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != v3);
  return (float)v6 / (float)(v3 / 3);
}

float VertexCache<unsigned short>::computeACMR(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _WORD __b[64];
  __int16 v14;
  unsigned int v15;

  v15 = a3;
  if (a3 > 0x3F)
    VertexCache<unsigned char>::computeACMR(a1, a2, a3);
  v3 = a2;
  if ((_DWORD)a3)
    memset(__b, 255, 2 * a3);
  if (!v3)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b[0];
  do
  {
    v8 = *(unsigned __int16 *)(a1 + 2 * v5);
    if (!v15)
      goto LABEL_12;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = (unsigned __int16)__b[v9++];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_12:
        memmove(&v14, __b, 2 * (v15 - 1));
        __b[0] = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != v3);
  return (float)v6 / (float)(v3 / 3);
}

float VertexCache<unsigned int>::computeACMR(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD __b[64];
  uint64_t v14;
  unsigned int v15;

  v15 = a3;
  if (a3 > 0x3F)
    VertexCache<unsigned char>::computeACMR(a1, a2, a3);
  v3 = a2;
  if ((_DWORD)a3)
    memset(__b, 255, 4 * a3);
  if (!v3)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b[0];
  do
  {
    v8 = *(_DWORD *)(a1 + 4 * v5);
    if (!v15)
      goto LABEL_12;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = __b[v9++];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_12:
        memmove(&v14, __b, 4 * (v15 - 1));
        __b[0] = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != v3);
  return (float)v6 / (float)(v3 / 3);
}

CFDataRef C3DDataCreateOptimizedIndices(const __CFData *a1, int a2, int a3)
{
  unsigned int *BytePtr;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  BytePtr = (unsigned int *)CFDataGetBytePtr(a1);
  switch(a3)
  {
    case 4:
      if (a2)
      {
        v12 = 0;
        v13 = (3 * a2);
        v14 = BytePtr;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (v12 <= v16)
            v12 = v15;
          --v13;
        }
        while (v13);
        v17 = v12 + 1;
      }
      else
      {
        v17 = 1;
      }
      return OptimizeVertexCache<unsigned int>::OptimizeIndices(BytePtr, a2, v17);
    case 2:
      if (a2)
      {
        LOWORD(v18) = 0;
        v19 = (3 * a2);
        v20 = BytePtr;
        do
        {
          v22 = *(unsigned __int16 *)v20;
          v20 = (unsigned int *)((char *)v20 + 2);
          v21 = v22;
          v18 = (unsigned __int16)v18;
          if ((unsigned __int16)v18 <= v22)
            v18 = v21;
          --v19;
        }
        while (v19);
        v23 = v18 + 1;
      }
      else
      {
        v23 = 1;
      }
      return OptimizeVertexCache<unsigned short>::OptimizeIndices((unsigned __int16 *)BytePtr, a2, v23);
    case 1:
      if (a2)
      {
        LOBYTE(v6) = 0;
        v7 = (3 * a2);
        v8 = BytePtr;
        do
        {
          v10 = *(unsigned __int8 *)v8;
          v8 = (unsigned int *)((char *)v8 + 1);
          v9 = v10;
          v6 = v6;
          if (v6 <= v10)
            v6 = v9;
          --v7;
        }
        while (v7);
        v11 = v6 + 1;
      }
      else
      {
        v11 = 1;
      }
      return OptimizeVertexCache<unsigned char>::OptimizeIndices((unsigned __int8 *)BytePtr, a2, v11);
    default:
      return 0;
  }
}

CFDataRef OptimizeVertexCache<unsigned char>::OptimizeIndices(unsigned __int8 *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(1uLL, v6, 0x52CCC585uLL);
  OptimizeVertexCache<unsigned char>::OptimizeVertexCache((uint64_t)v9);
  if (OptimizeVertexCache<unsigned char>::reorderIndices((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

CFDataRef OptimizeVertexCache<unsigned short>::OptimizeIndices(unsigned __int16 *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(2uLL, v6, 0x52CCC585uLL);
  OptimizeVertexCache<unsigned char>::OptimizeVertexCache((uint64_t)v9);
  if (OptimizeVertexCache<unsigned short>::reorderIndices((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 2 * v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

CFDataRef OptimizeVertexCache<unsigned int>::OptimizeIndices(unsigned int *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(4uLL, v6, 0x52CCC585uLL);
  OptimizeVertexCache<unsigned char>::OptimizeVertexCache((uint64_t)v9);
  if (OptimizeVertexCache<unsigned int>::reorderIndices((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 4 * v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

void C3DMeshElementOptimizeIndices(uint64_t a1)
{
  CFDataRef OptimizedIndices;
  CFDataRef v3;

  if (!*(_BYTE *)(a1 + 88))
  {
    OptimizedIndices = C3DDataCreateOptimizedIndices(*(const __CFData **)(a1 + 96), *(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 80));
    if (OptimizedIndices)
    {
      v3 = OptimizedIndices;
      C3DMeshElementSetPrimitives(a1, *(_DWORD *)(a1 + 104), OptimizedIndices, *(_BYTE *)(a1 + 80));
      CFRelease(v3);
    }
  }
}

_DWORD *C3DMeshSourceCreateWeldRemappingTable(uint64_t a1)
{
  uint64_t Content;
  __int16 v2;
  __int16 v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  float v7;
  float v8;
  float32x4_t v9;
  unsigned int v10;
  uint64_t i;
  float32x4_t v12;
  float32x4_t *v13;
  __int32 v14;
  uint64_t v15;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  int v21;
  float32x4_t *v22;

  Content = C3DMeshSourceGetContent(a1);
  v3 = v2;
  v5 = v4;
  v6 = malloc_type_calloc(v4, 4uLL, 0x100004052888210uLL);
  v9 = 0uLL;
  v19 = 0u;
  v20 = 0u;
  v21 = 1065353216;
  if (v5)
  {
    v10 = 0;
    for (i = 0; i != v5; ++i)
    {
      *(double *)v12.i64 = C3DConvertFloatingTypeToFloat4(v3, (float *)(Content + v10), v9, v7, v8);
      v17 = v12;
      v18 = v12;
      v13 = _ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_fjEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EENS_8equal_toIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S8_S6_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(&v19, &v18);
      if (v13)
      {
        v14 = v13[2].i32[0];
      }
      else
      {
        v18 = v17;
        v22 = &v18;
        _ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_fjEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EENS_8equal_toIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S8_S6_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJRKS2_EEENSJ_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_((uint64_t)&v19, &v18, (uint64_t)&std::piecewise_construct, &v22)[2].i32[0] = i;
        v14 = i;
      }
      v6[i] = v14;
      v10 += HIBYTE(v3);
    }
    v15 = *((_QWORD *)&v20 + 1);
  }
  else
  {
    v15 = 0;
  }
  if (v15 == v5)
  {
    free(v6);
    v6 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::~__hash_table((uint64_t)&v19);
  return v6;
}

uint64_t OptimizeVertexCache<unsigned char>::reorderIndices(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  _WORD *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  void *v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[5];
  _BYTE v93[28];
  uint64_t v94;

  v91 = a1;
  v94 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v88 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v87 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0xECEB6150uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v86 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v86, 0xBD9110F1uLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v91;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v90 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  v45 = v91;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v92 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      v54 = v9[v49];
      if (v9[v49])
      {
        v55 = v15[v49];
        v56 = &v21[4 * v55];
        v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57)
            goto LABEL_58;
        }
        *(_DWORD *)v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    v58 = 0;
    ++v46;
    do
    {
      v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0)
        break;
      if (v58 <= 0x17)
      {
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
        {
          v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0)
LABEL_67:
            v63 = 0;
          else
            v63 = *(_DWORD *)(v45 + 4 * v62);
          if (v61 <= 0x1F)
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          v64 = 0;
          v65 = &v16[v59];
          v66 = v63 - *v65;
          v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
          goto LABEL_67;
      }
      LOWORD(v63) = 0;
      v65 = &v16[v59];
LABEL_74:
      *v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    v68 = 0;
    v69 = -1;
    v40 = -1;
    do
    {
      v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0)
        break;
      v71 = v9[v70];
      if (v9[v70])
      {
        v72 = &v21[4 * v15[v70]];
        do
        {
          v74 = *(int *)v72;
          v72 += 4;
          v73 = v74;
          v75 = v20[v74];
          if (v69 < v75)
            v40 = v73;
          if (v69 <= v75)
            v69 = v75;
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v76 = a4 < 1;
  v42 = v88;
  if (!v76)
  {
    v77 = 0;
    v78 = 0;
    do
    {
      v79 = 0;
      v80 = v78;
      v81 = v88 + v78;
      v82 = &a3[3 * v43[v77]];
      do
      {
        *(_BYTE *)(v81 + v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  v83 = v21;
  v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t OptimizeVertexCache<unsigned char>::OptimizeVertexCache(uint64_t a1)
{
  unint64_t i;
  float v3;
  unint64_t v4;
  uint64x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float v8;
  uint64x2_t v10;
  float v11;
  float v12;
  unsigned __int8 v13;
  uint64x2_t v14;

  for (i = 0; i != 32; ++i)
  {
    v3 = 0.75;
    if (i >= 3)
      v3 = powf((float)((float)((int)i - 3) * -0.034483) + 1.0, 1.5);
    *(_DWORD *)(a1 + 4 * i) = (float)(v3 * 7281.0);
  }
  v4 = 0;
  v10 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
  do
  {
    v5 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v4), (int8x16_t)xmmword_1DD008320);
    v13 = vmovn_s64((int64x2_t)vcgtq_u64(v10, v5)).u8[0];
    v14 = v5;
    v6.i32[0] = v4 | 1;
    v6.i32[1] = vadd_s32(vdup_lane_s32((int32x2_t)v4, 0), (int32x2_t)0x200000002).i32[1];
    v7 = vcvt_f32_s32(v6);
    v11 = v7.f32[0];
    v12 = powf(v7.f32[1], -0.5);
    v8 = powf(v11, -0.5);
    if ((v13 & 1) != 0)
      *(_DWORD *)(a1 + 4 * v4 + 132) = (float)((float)(v8 + v8) * 7281.0);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v14)).i32[1] & 1) != 0)
      *(_DWORD *)(a1 + 4 * v4 + 136) = (float)((float)(v12 + v12) * 7281.0);
    v4 += 2;
  }
  while (v4 != 32);
  return a1;
}

uint64_t OptimizeVertexCache<unsigned short>::reorderIndices(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  _WORD *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int16 *v82;
  void *v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[5];
  _BYTE v93[28];
  uint64_t v94;

  v91 = a1;
  v94 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v88 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v87 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0xECEB6150uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v86 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v86, 0xBD9110F1uLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v91;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v90 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  v45 = v91;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v92 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      v54 = v9[v49];
      if (v9[v49])
      {
        v55 = v15[v49];
        v56 = &v21[4 * v55];
        v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57)
            goto LABEL_58;
        }
        *(_DWORD *)v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    v58 = 0;
    ++v46;
    do
    {
      v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0)
        break;
      if (v58 <= 0x17)
      {
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
        {
          v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0)
LABEL_67:
            v63 = 0;
          else
            v63 = *(_DWORD *)(v45 + 4 * v62);
          if (v61 <= 0x1F)
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          v64 = 0;
          v65 = &v16[v59];
          v66 = v63 - *v65;
          v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
          goto LABEL_67;
      }
      LOWORD(v63) = 0;
      v65 = &v16[v59];
LABEL_74:
      *v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    v68 = 0;
    v69 = -1;
    v40 = -1;
    do
    {
      v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0)
        break;
      v71 = v9[v70];
      if (v9[v70])
      {
        v72 = &v21[4 * v15[v70]];
        do
        {
          v74 = *(int *)v72;
          v72 += 4;
          v73 = v74;
          v75 = v20[v74];
          if (v69 < v75)
            v40 = v73;
          if (v69 <= v75)
            v69 = v75;
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v76 = a4 < 1;
  v42 = v88;
  if (!v76)
  {
    v77 = 0;
    v78 = 0;
    do
    {
      v79 = 0;
      v80 = v78;
      v81 = v88 + 2 * v78;
      v82 = &a3[3 * v43[v77]];
      do
      {
        *(_WORD *)(v81 + 2 * v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  v83 = v21;
  v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t OptimizeVertexCache<unsigned int>::reorderIndices(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  _WORD *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int *v83;
  void *v84;
  void *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[5];
  _BYTE v94[28];
  uint64_t v95;

  v92 = a1;
  v95 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v89 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v88 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v88, 0xECEB6150uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v87 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v87, 0xBD9110F1uLL);
  bzero(v19, v88);
  bzero(v20, 2 * a4);
  bzero(v21, v87);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v92;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = (int)v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v91 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v94[12] = v44;
  v93[4] = v44;
  *(_OWORD *)v94 = v44;
  v93[2] = v44;
  v93[3] = v44;
  v93[0] = v44;
  v93[1] = v44;
  v45 = v92;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v93 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      v54 = (int)v49;
      *((_DWORD *)v93 + v48) = v49;
      v17[v49] = v48;
      v55 = v9[v49];
      if (v55)
      {
        v56 = v15[v54];
        v57 = &v21[4 * v56];
        v58 = v55;
        while (*(_DWORD *)v57 != v40)
        {
          v57 += 4;
          if (!--v58)
            goto LABEL_58;
        }
        *(_DWORD *)v57 = *(_DWORD *)&v21[4 * (int)v55 - 4 + 4 * (int)v56];
        LOBYTE(v55) = v9[v54];
      }
LABEL_58:
      v9[v54] = v55 - 1;
      ++v48;
    }
    while (v48 != 3);
    v59 = 0;
    ++v46;
    do
    {
      v60 = *((unsigned int *)v93 + v59);
      if ((v60 & 0x80000000) != 0)
        break;
      if (v59 <= 0x17)
      {
        v61 = &v9[v60];
        v62 = v9[v60];
        if (v9[v60])
        {
          v63 = (char)v17[v60];
          if ((v63 & 0x80000000) != 0)
LABEL_67:
            v64 = 0;
          else
            v64 = *(_DWORD *)(v45 + 4 * v63);
          if (v62 <= 0x1F)
            v64 += *(_DWORD *)(v45 + 4 * v62 + 128);
          v65 = 0;
          v66 = &v16[v60];
          v67 = v64 - *v66;
          v68 = &v21[4 * v15[v60]];
          do
            v20[*(int *)&v68[4 * v65++]] += v67;
          while (v65 < *v61);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v60] = -1;
        *((_DWORD *)v93 + v59) = -1;
        v61 = &v9[v60];
        v62 = v9[v60];
        if (v9[v60])
          goto LABEL_67;
      }
      LOWORD(v64) = 0;
      v66 = &v16[v60];
LABEL_74:
      *v66 = v64;
      ++v59;
    }
    while (v59 != 27);
    v69 = 0;
    v70 = -1;
    v40 = -1;
    do
    {
      v71 = *((unsigned int *)v93 + v69);
      if ((v71 & 0x80000000) != 0)
        break;
      v72 = v9[v71];
      if (v9[v71])
      {
        v73 = &v21[4 * v15[v71]];
        do
        {
          v75 = *(int *)v73;
          v73 += 4;
          v74 = v75;
          v76 = v20[v75];
          if (v70 < v76)
            v40 = v74;
          if (v70 <= v76)
            v70 = v76;
          --v72;
        }
        while (v72);
      }
      ++v69;
    }
    while (v69 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v77 = a4 < 1;
  v42 = v89;
  if (!v77)
  {
    v78 = 0;
    v79 = 0;
    do
    {
      v80 = 0;
      v81 = v79;
      v82 = v89 + 4 * v79;
      v83 = &a3[3 * v43[v78]];
      do
      {
        *(_DWORD *)(v82 + 4 * v80) = v83[v80];
        ++v80;
      }
      while (v80 != 3);
      ++v78;
      v79 = v81 + 3;
    }
    while (v78 != v91);
  }
  v84 = v21;
  v85 = v43;
  free(v84);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v85);
  return v42;
}

float32x4_t *_ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_fjEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EENS_8equal_toIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S8_S6_Lb1EEENS_9allocatorIS3_EEE4findIS2_EENS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEERKT_(_QWORD *a1, float32x4_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  float32x4_t **v6;
  float32x4_t *result;
  unint64_t v8;
  uint32x4_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(float32x4_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (float32x4_t *)result->i64[0])
  {
    v8 = result->u64[1];
    if (v8 == v3)
    {
      v9 = (uint32x4_t)vceqq_f32(result[1], *a2);
      v9.i32[3] = v9.i32[2];
      if ((vminvq_u32(v9) & 0x80000000) != 0)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

float32x4_t *_ZNSt3__112__hash_tableINS_17__hash_value_typeIDv3_fjEENS_22__unordered_map_hasherIS2_S3_NS_4hashIS2_EENS_8equal_toIS2_EELb1EEENS_21__unordered_map_equalIS2_S3_S8_S6_Lb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JRKNS_21piecewise_construct_tENS_5tupleIJRKS2_EEENSJ_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeIS3_PvEEEEbEERKT_DpOT0_(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  float32x4_t **v10;
  float32x4_t *i;
  unint64_t v12;
  uint32x4_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  float32x4_t **v21;
  unint64_t v22;

  v7 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (float32x4_t *)i->i64[0])
      {
        v12 = i->u64[1];
        if (v12 == v7)
        {
          v13 = (uint32x4_t)vceqq_f32(i[1], *a2);
          v13.i32[3] = v13.i32[2];
          if ((vminvq_u32(v13) & 0x80000000) != 0)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v7;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SCNMTLLightSetData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SCNMTLLightSetData>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    i->i64[0] = (uint64_t)*v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (i->i64[0])
  {
    v22 = *(_QWORD *)(i->i64[0] + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void OUTLINED_FUNCTION_1_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 23, a4);
}

__n128 C3D::FillTexturePass::FillTexturePass(C3D::FillTexturePass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  C3D::RenderPass *v5;
  __n128 result;

  v5 = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA599318;
  result = *(__n128 *)&a4->var0;
  *((_OWORD *)v5 + 15) = *(_OWORD *)&a4->var0;
  return result;
}

const char *C3D::FillTexturePass::name(C3D::FillTexturePass *this)
{
  return "FillTexturePass";
}

uint64_t C3D::FillTexturePass::setup(C3D::FillTexturePass *this)
{
  C3D::FillTexturePass *v1;
  uint64_t v2;
  uint64_t result;
  __int128 v4;

  v1 = this;
  C3D::Pass::setOutputCount(this, 1u);
  v4 = *((_OWORD *)v1 + 15);
  v1 = (C3D::FillTexturePass *)((char *)v1 + 32);
  *(_OWORD *)(C3D::PassDescriptor::outputAtIndex(v1, 0) + 48) = v4;
  v2 = C3D::PassDescriptor::outputAtIndex(v1, 0);
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFFFC | 2;
  result = C3D::PassDescriptor::outputAtIndex(v1, 0);
  *(_WORD *)(result + 66) |= 0x40u;
  return result;
}

uint64_t C3DFramebufferRegistryGetEnableRecycling()
{
  return gC3DFBORegistryEnableRecycling;
}

CFStringRef _C3DFramebufferRegistryCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFramebufferRegistry>"));
}

CFStringRef _C3DFramebufferRegistryCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFramebufferRegistry>"));
}

CFTypeRef C3DFramebufferRegistryPrepareFramebufferWithDescription(uint64_t a1, float32x2_t *a2, uint64_t a3, CFIndex a4, int a5, void *key, uint64_t a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t *Value;
  uint64_t ValueAtIndex;
  uint32x2_t v24;
  __int8 v25;
  char v26;
  const __CFArray *v27;
  const __CFArray *v28;
  CFIndex Count;
  CFIndex v30;
  CFIndex v31;
  uint32x2_t v32;
  char v33;
  char v34;
  uint64_t v35;
  int *v36;
  float32x2_t *v37;
  int v38;
  int v39;
  __int32 v40;
  unsigned __int8 v41;
  _DWORD *RenderTarget;
  unsigned int v43;
  const void *v44;
  uint64_t RendererContextGL;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  float32x2_t v49;
  void *Mutable;
  CFTypeRef result;
  uint64_t v52;
  float32x2_t *v53;
  float32x2_t *v54;
  int v55;
  __int32 v56;
  __int32 v57;
  void *v58;
  uint64_t v59;
  const void *v60;
  _QWORD context[5];

  if (!a1)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  if (*(_BYTE *)(a1 + 80))
    goto LABEL_9;
  Value = (float32x2_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), key);
  if (Value)
  {
    ValueAtIndex = (uint64_t)Value;
    v24 = (uint32x2_t)vceq_f32(*a2, Value[5]);
    if ((vpmin_u32(v24, v24).u32[0] & 0x80000000) != 0)
    {
      v25 = a2[10].i8[0];
      v26 = Value[15].i8[0] ^ v25;
      if ((v26 & 7) == 0)
      {
        v52 = v25 & 7;
        if ((_DWORD)v52)
        {
          v53 = Value + 6;
          v54 = a2 + 1;
          while (1)
          {
            v56 = v54->i32[0];
            ++v54;
            v55 = v56;
            v57 = v53->i32[0];
            ++v53;
            if (((v57 ^ v55) & 0x1700FFFF) != 0)
              break;
            if (!--v52)
              goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          if ((v26 & 0x10) == 0
            && ((Value[14].i32[0] ^ a2[9].i32[0]) & 0x1700FFFF) == 0
            && _fboHasSpecifiedOutputs(a1, (uint64_t)Value, a3, a4, a5)
            && (*(_BYTE *)(ValueAtIndex + 128) & 2) == 0)
          {
            goto LABEL_36;
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 80))
  {
LABEL_9:
    v60 = (const void *)(((32 * (a2[1].i8[3] & 1)) | a2[1].i8[1] | ((a2[9].i8[3] & 1) << 6)) | (((int)COERCE_FLOAT(*a2) & 0xFFFFF) << 10) | ((int)COERCE_FLOAT(HIDWORD(*(unint64_t *)a2)) << 30));
    v27 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), v60);
    if (v27)
    {
      v28 = v27;
      v59 = a7;
      Count = CFArrayGetCount(v27);
      if (Count >= 1)
      {
        v30 = Count;
        v31 = 0;
        v58 = key;
        do
        {
          ValueAtIndex = (uint64_t)CFArrayGetValueAtIndex(v28, v31);
          if (!CFDictionaryContainsValue(*(CFDictionaryRef *)(a1 + 72), (const void *)ValueAtIndex)
            && _fboHasSpecifiedOutputs(a1, ValueAtIndex, a3, a4, a5))
          {
            v32 = (uint32x2_t)vceq_f32(*(float32x2_t *)(ValueAtIndex + 40), *a2);
            if ((vpmin_u32(v32, v32).u32[0] & 0x80000000) != 0)
            {
              v33 = *(_BYTE *)(ValueAtIndex + 120);
              v34 = a2[10].i8[0] ^ v33;
              if ((v34 & 7) == 0)
              {
                v35 = v33 & 7;
                if ((_DWORD)v35)
                {
                  v36 = (int *)(ValueAtIndex + 48);
                  v37 = a2 + 1;
                  while (1)
                  {
                    v39 = *v36;
                    v36 += 2;
                    v38 = v39;
                    v40 = v37->i32[0];
                    ++v37;
                    if (((v40 ^ v38) & 0x1700FFFF) != 0)
                      break;
                    if (!--v35)
                      goto LABEL_22;
                  }
                }
                else
                {
LABEL_22:
                  if ((v34 & 0x10) == 0
                    && ((a2[9].i32[0] ^ *(_DWORD *)(ValueAtIndex + 112)) & 0x1700FFFF) == 0
                    && (*(_BYTE *)(ValueAtIndex + 128) & 1) == 0)
                  {
                    v41 = 0;
                    while (1)
                    {
                      RenderTarget = C3DFramebufferGetRenderTarget(ValueAtIndex, (char)v41);
                      if (RenderTarget)
                      {
                        if (RenderTarget[19])
                          break;
                      }
                      v43 = v41++;
                      if (v43 > 4)
                      {
                        key = v58;
                        a7 = v59;
                        if (ValueAtIndex)
                          goto LABEL_36;
                        goto LABEL_32;
                      }
                    }
                  }
                }
              }
            }
          }
          ++v31;
        }
        while (v31 != v30);
        key = v58;
      }
      a7 = v59;
    }
LABEL_32:
    v44 = v60;
  }
  else
  {
    v44 = 0;
  }
  RendererContextGL = C3DEngineContextGetRendererContextGL(a7);
  *(_BYTE *)(a1 + 81) = 1;
  ValueAtIndex = C3DFramebufferCreate();
  v46 = *(_OWORD *)a2[2].f32;
  *(_OWORD *)(ValueAtIndex + 40) = *(_OWORD *)a2->f32;
  *(_OWORD *)(ValueAtIndex + 56) = v46;
  v48 = *(_OWORD *)a2[6].f32;
  v47 = *(_OWORD *)a2[8].f32;
  v49 = a2[10];
  *(_OWORD *)(ValueAtIndex + 72) = *(_OWORD *)a2[4].f32;
  *(float32x2_t *)(ValueAtIndex + 120) = v49;
  *(_OWORD *)(ValueAtIndex + 104) = v47;
  *(_OWORD *)(ValueAtIndex + 88) = v48;
  _addRenderTargetIfNeeded(a1, 1, 0, *(_QWORD *)&a2[1], ValueAtIndex, RendererContextGL, a3, a4, a5);
  _addRenderTargetIfNeeded(a1, 0, 4, *(_QWORD *)&a2[9], ValueAtIndex, RendererContextGL, a3, a4, a5);
  C3DRendererContextSetupFramebuffer(RendererContextGL, ValueAtIndex);
  Mutable = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), v44);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 24), v44, Mutable);
    CFRelease(Mutable);
  }
  CFArrayAppendValue((CFMutableArrayRef)Mutable, (const void *)ValueAtIndex);
  CFRelease((CFTypeRef)ValueAtIndex);
LABEL_36:
  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 0x40000000;
  context[2] = __C3DFramebufferRegistryPrepareFramebufferWithDescription_block_invoke;
  context[3] = &__block_descriptor_tmp_4_3;
  context[4] = a1;
  C3DFramebufferApplyToRenderTargets(ValueAtIndex, context);
  if (key && !*(_BYTE *)(a1 + 80))
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), key, (const void *)ValueAtIndex);
  *(_DWORD *)(ValueAtIndex + 132) = *(_DWORD *)(a1 + 64);
  result = *(CFTypeRef *)(a1 + 56);
  if (result != (CFTypeRef)ValueAtIndex)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    result = CFRetain((CFTypeRef)ValueAtIndex);
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

BOOL _fboHasSpecifiedOutputs(uint64_t a1, uint64_t a2, uint64_t a3, CFIndex a4, int a5)
{
  BOOL v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int SlotForOutputBufferType;
  const void *RenderTarget;
  uint64_t System;
  const void *v20;
  const __CFString *v21;
  const void *UniqueIdentifierWithName;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  memset(v25, 0, 24);
  if (*(_BYTE *)(a1 + 80) && CFDictionaryGetCount(*(CFDictionaryRef *)(a2 + 32)) < a4)
  {
    return 0;
  }
  else if (a4 < 1)
  {
    return 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = (int *)(a3 + 16);
    v12 = (int *)(a3 + 16);
    do
    {
      v14 = *v12;
      v12 += 16;
      v13 = v14;
      if (!a5 || v13 != 5)
      {
        v15 = v13;
        v16 = *((_DWORD *)v25 + v13);
        SlotForOutputBufferType = C3DRenderBufferGetSlotForOutputBufferType(v13, v16);
        RenderTarget = C3DFramebufferGetRenderTarget(a2, SlotForOutputBufferType);
        if (!RenderTarget)
          break;
        *((_DWORD *)v25 + v15) = v16 + 1;
        System = C3DParticleSystemInstanceGetSystem((uint64_t)RenderTarget);
        if (System)
        {
          v20 = (const void *)System;
          v21 = (const __CFString *)*((_QWORD *)v11 - 1);
          UniqueIdentifierWithName = _createUniqueIdentifierWithName(a1, v21);
          if (!v21 || UniqueIdentifierWithName != v20)
            break;
        }
      }
      v9 = ++v10 >= a4;
      v11 = v12;
    }
    while (a4 != v10);
  }
  return v9;
}

void _addRenderTargetIfNeeded(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  _DWORD *v15;
  uint64_t v16;
  const __CFString *v17;
  _DWORD *v18;
  double Size;
  float32x2_t v20;
  float32x2_t *RenderTargetWithName;
  float32x2_t *RenderTargetWithDescription;
  uint32x2_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  void *Value;

  v10 = a4;
  if (!(_BYTE)a4)
    return;
  if (a8 < 1)
  {
LABEL_6:
    v17 = 0;
    if ((a9 & 1) != 0)
      goto LABEL_17;
  }
  else
  {
    v15 = (_DWORD *)(a7 + 16);
    v16 = a8;
    while (*v15 != a2)
    {
      v15 += 16;
      if (!--v16)
        goto LABEL_6;
    }
    v17 = (const __CFString *)*((_QWORD *)v15 - 1);
    if ((a9 & 1) != 0)
      goto LABEL_17;
  }
  if (!v17)
  {
    if (a4 - 46 < 0xFFFFFFFD || a8 < 1)
    {
LABEL_15:
      C3DFramebufferGetSize(a5);
LABEL_21:
      RenderTargetWithDescription = (float32x2_t *)C3DRendererContextCreateRenderTargetWithDescription(a6, a4, a5);
      if (!RenderTargetWithDescription)
      {
        v24 = scn_default_log();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
          _addRenderTargetIfNeeded_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      v32 = (const void *)C3DSceneSourcePerformConsistencyCheck(*(_QWORD *)&RenderTargetWithDescription[2]);
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v32);
      if (!Value)
      {
        Value = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), v32, Value);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, RenderTargetWithDescription);
      CFRelease(RenderTargetWithDescription);
      goto LABEL_27;
    }
    v18 = (_DWORD *)(a7 + 16);
    while (*v18 != 5)
    {
      v18 += 16;
      if (!--a8)
        goto LABEL_15;
    }
    v17 = (const __CFString *)*((_QWORD *)v18 - 1);
  }
LABEL_17:
  Size = C3DFramebufferGetSize(a5);
  if (!v17)
    goto LABEL_21;
  v20 = *(float32x2_t *)&Size;
  RenderTargetWithName = (float32x2_t *)C3DFramebufferRegistryGetRenderTargetWithName(a1, v17);
  if (!RenderTargetWithName)
    goto LABEL_21;
  RenderTargetWithDescription = RenderTargetWithName;
  if (((C3DRenderTargetGetDescription((uint64_t)RenderTargetWithName) ^ a4) & 0x1700FFFF) != 0)
    goto LABEL_21;
  v23 = (uint32x2_t)vceq_f32(v20, RenderTargetWithDescription[5]);
  if ((vpmin_u32(v23, v23).u32[0] & 0x80000000) == 0)
    goto LABEL_21;
LABEL_27:
  C3DFramebufferAddRenderTarget(a5, RenderTargetWithDescription, a3);
  if (a3 == 4 && (a9 & 1) == 0 && (v10 - 46) >= 0xFFFFFFFD)
    C3DFramebufferAddRenderTarget(a5, RenderTargetWithDescription, 5);
}

void C3DFramebufferRegistryTrackFBO(uint64_t a1, void *value, void *key)
{
  if (key)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), key, value);
}

uint64_t C3DFramebufferRegistryFinalizeAndGetFramebuffer(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryFinalizeAndGetFramebuffer_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return *(_QWORD *)(a1 + 56);
}

void C3DFramebufferRegistryReplaceTextureWithNameByTexture(uint64_t a1, int a2, const __CFString *a3)
{
  const void *UniqueIdentifierWithName;
  uint64_t v6;
  int SlotForOutputBufferType;
  _DWORD *RenderTarget;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *Value;
  BOOL v18;
  uint64_t v19;

  UniqueIdentifierWithName = _createUniqueIdentifierWithName(a1, a3);
  v6 = *(_QWORD *)(a1 + 56);
  SlotForOutputBufferType = C3DRenderBufferGetSlotForOutputBufferType(a2, 0);
  RenderTarget = C3DFramebufferGetRenderTarget(v6, SlotForOutputBufferType);
  if (!RenderTarget)
  {
    v9 = scn_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      _addRenderTargetIfNeeded_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), UniqueIdentifierWithName);
  if (Value)
    v18 = Value == RenderTarget;
  else
    v18 = 1;
  if (!v18)
  {
    v19 = (uint64_t)Value;
    RenderTarget[19] = Value[19];
    Value[19] = 0;
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), UniqueIdentifierWithName);
    C3DRenderTargetSetNameIndex(v19, 0);
  }
  C3DRenderTargetSetNameIndex((uint64_t)RenderTarget, (uint64_t)UniqueIdentifierWithName);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), UniqueIdentifierWithName, RenderTarget);
}

const void *_createUniqueIdentifierWithName(uint64_t a1, const __CFString *a2)
{
  const __CFString *v3;
  const void *Value;
  __CFDictionary *v5;

  if (a2)
    v3 = a2;
  else
    v3 = CFSTR("(null)");
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v3);
  if (!Value)
  {
    v5 = *(__CFDictionary **)(a1 + 32);
    Value = (const void *)(*(_QWORD *)(a1 + 40) + 1);
    *(_QWORD *)(a1 + 40) = Value;
    CFDictionarySetValue(v5, v3, Value);
  }
  return Value;
}

void C3DFramebufferRegistryRetainTextureWithName(uint64_t a1, int a2, const __CFString *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *UniqueIdentifierWithName;
  uint64_t v41;
  int SlotForOutputBufferType;
  _DWORD *RenderTarget;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (!*(_QWORD *)(a1 + 56) && (v16 = scn_default_log(), os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)))
  {
    C3DFramebufferRegistryFinalizeAndGetFramebuffer_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    if (a3)
      goto LABEL_9;
  }
  else if (a3)
  {
    goto LABEL_9;
  }
  v24 = scn_default_log();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
    C3DFramebufferRegistryRetainTextureWithName_cold_3(v24, v25, v26, v27, v28, v29, v30, v31);
LABEL_9:
  if (a4 <= 0)
  {
    v32 = scn_default_log();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryRetainTextureWithName_cold_2(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  UniqueIdentifierWithName = _createUniqueIdentifierWithName(a1, a3);
  v41 = *(_QWORD *)(a1 + 56);
  SlotForOutputBufferType = C3DRenderBufferGetSlotForOutputBufferType(a2, 0);
  RenderTarget = C3DFramebufferGetRenderTarget(v41, SlotForOutputBufferType);
  if (!RenderTarget)
  {
    v44 = scn_default_log();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
      _addRenderTargetIfNeeded_cold_1(v44, v45, v46, v47, v48, v49, v50, v51);
  }
  C3DRenderTargetSetNameIndex((uint64_t)RenderTarget, (uint64_t)UniqueIdentifierWithName);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), UniqueIdentifierWithName, RenderTarget);
  v52 = 2147483646;
  if (a4 == 2147483646
    || (v53 = RenderTarget[19], v53 == 2147483646)
    || (v52 = 0x7FFFFFFF, a4 == 0x7FFFFFFF)
    || v53 == 0x7FFFFFFF)
  {
    RenderTarget[19] = v52;
  }
  else
  {
    RenderTarget[19] = v53 + a4;
  }
}

const void *C3DFramebufferRegistryGetRenderTargetWithName(uint64_t a1, const __CFString *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *UniqueIdentifierWithName;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  UniqueIdentifierWithName = _createUniqueIdentifierWithName(a1, a2);
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), UniqueIdentifierWithName);
}

const void *C3DFramebufferRegistryGetTextureWithName(uint64_t a1, const __CFString *a2)
{
  const void *result;

  result = C3DFramebufferRegistryGetRenderTargetWithName(a1, a2);
  if (result)
    return (const void *)C3DRenderTargetGetTexture((uint64_t)result);
  return result;
}

void C3DFramebufferRegistryReleaseRenderTarget(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *(_DWORD *)(a2 + 76);
  if (v2 <= 0x7FFFFFFD)
  {
    v3 = v2 - 1;
    *(_DWORD *)(a2 + 76) = v3;
    if (!v3)
      _removeReference(a1, a2);
  }
}

void _removeReference(uint64_t a1, uint64_t a2)
{
  const void *System;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  System = (const void *)C3DParticleSystemInstanceGetSystem(a2);
  if (!System)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      _removeReference_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  C3DRenderTargetSetNameIndex(a2, 0);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), System);
}

void C3DFramebufferRegistryReleaseTextureWithName(uint64_t a1, const __CFString *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *RenderTargetWithName;
  unsigned int v13;
  unsigned int v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  RenderTargetWithName = C3DFramebufferRegistryGetRenderTargetWithName(a1, a2);
  if (RenderTargetWithName)
  {
    v13 = RenderTargetWithName[19];
    if (v13 <= 0x7FFFFFFD)
    {
      v14 = v13 - 1;
      RenderTargetWithName[19] = v14;
      if (!v14)
        _removeReference(a1, (uint64_t)RenderTargetWithName);
    }
  }
}

void C3DFramebufferRegistryReleaseFramebuffer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD context[5];

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryReleaseFramebuffer_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  context[0] = MEMORY[0x1E0C809B0];
  context[1] = 0x40000000;
  context[2] = __C3DFramebufferRegistryReleaseFramebuffer_block_invoke;
  context[3] = &__block_descriptor_tmp_10_1;
  context[4] = a1;
  C3DFramebufferApplyToRenderTargets(a2, context);
}

void _releaseGlobalRenderTargets(int a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  unint64_t v6;
  _DWORD *ValueAtIndex;

  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v6 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6 - 2);
      if (ValueAtIndex[19] == 2147483646)
      {
        ValueAtIndex[19] = 0;
        _removeReference(a3, (uint64_t)ValueAtIndex);
      }
      --v6;
    }
    while (v6 > 1);
  }
}

void C3DFramebufferRegistryFinalizeFrame(CFDictionaryRef *context)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!context)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  CFDictionaryApplyFunction(context[2], (CFDictionaryApplierFunction)_releaseGlobalRenderTargets, context);
}

void C3DFramebufferRegistryBumpTimestamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  ++*(_DWORD *)(a1 + 64);
  if (*(unsigned __int8 *)(a1 + 80) != gC3DFBORegistryEnableRecycling)
  {
    *(_BYTE *)(a1 + 80) = gC3DFBORegistryEnableRecycling;
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 72));
  }
}

void C3DFramebufferRegistryViewportDidResize(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD context[5];

  context[4] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = 0;
  context[0] = C3DEngineContextGetRendererContextGL(a2);
  context[1] = 0;
  context[2] = *(unsigned int *)(a1 + 64);
  context[3] = &v12;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)_purgeFBOs, context);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 16), (CFDictionaryApplierFunction)_purgeRenderTargets, context);
}

void _purgeFBOs(int a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  _BYTE *ValueAtIndex;

  v5 = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 8);
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v8 = Count + 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8 - 2);
      if (v6)
        break;
      if ((ValueAtIndex[120] & 8) != 0)
        goto LABEL_10;
LABEL_12:
      if ((unint64_t)--v8 <= 1)
        return;
    }
    if (v6 == 1)
    {
      if ((*((_DWORD *)ValueAtIndex + 33) + 10) >= *(_DWORD *)(a3 + 16))
        goto LABEL_12;
LABEL_10:
      **(_BYTE **)(a3 + 24) = 1;
    }
    else if (v6 != 2)
    {
      goto LABEL_12;
    }
    C3DRendererContextDeleteFramebuffer(v5, (uint64_t)ValueAtIndex, 0);
    CFArrayRemoveValueAtIndex(theArray, v8 - 2);
    goto LABEL_12;
  }
}

void _purgeRenderTargets(int a1, CFArrayRef theArray, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  _DWORD *ValueAtIndex;

  v5 = *(_DWORD *)(a3 + 16);
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v9 = Count + 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v9 - 2);
      if (!v7)
        break;
      if (v7 == 1)
      {
        if (ValueAtIndex[18] || ValueAtIndex[19] || ValueAtIndex[20] + 10 >= v5)
          goto LABEL_14;
        goto LABEL_16;
      }
      if (v7 == 2)
        goto LABEL_6;
LABEL_14:
      if ((unint64_t)--v9 <= 1)
        return;
    }
    if (ValueAtIndex[18] || ValueAtIndex[19] || (*((_BYTE *)ValueAtIndex + 19) & 4) == 0)
      goto LABEL_14;
LABEL_16:
    **(_BYTE **)(a3 + 24) = 1;
LABEL_6:
    C3DRendererContextDeleteRenderTarget(v6, (uint64_t)ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v9 - 2);
    goto LABEL_14;
  }
}

uint64_t C3DFramebufferRegistryPurge(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  _QWORD context[5];

  context[4] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v13 = 0;
  *(_BYTE *)(a1 + 81) = 0;
  context[0] = C3DEngineContextGetRendererContextGL(a2);
  context[1] = 1;
  context[2] = *(unsigned int *)(a1 + 64);
  context[3] = &v13;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)_purgeFBOs, context);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 16), (CFDictionaryApplierFunction)_purgeRenderTargets, context);
  return v13;
}

void C3DFramebufferRegistryCleanup(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD context[5];

  context[4] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFramebufferRegistryPrepareFramebufferWithDescription_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  context[0] = C3DEngineContextGetRendererContextGL(a2);
  context[1] = 2;
  context[2] = 0;
  context[3] = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 24), (CFDictionaryApplierFunction)_purgeFBOs, context);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 16), (CFDictionaryApplierFunction)_purgeRenderTargets, context);
}

void C3D::BloomUpSamplePass::BloomUpSamplePass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA599888;
  v5[15] = a4;
}

const char *C3D::BloomUpSamplePass::name(C3D::BloomUpSamplePass *this)
{
  return "BloomUpSamplePass";
}

double C3D::BloomUpSamplePass::setup(C3D::BloomUpSamplePass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 2u);
  v2 = (*(uint64_t (**)(C3D::BloomUpSamplePass *))(*(_QWORD *)this + 88))(this);
  v3 = C3D::PassDescriptor::inputAtIndex((C3D::BloomUpSamplePass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "Bloom";
  *(_WORD *)(v3 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 15), 1.0);
  *(_WORD *)(v3 + 18) = (int)fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 15), 1.0);
  *(_BYTE *)(v3 + 30) = *(_DWORD *)(*((_QWORD *)this + 15) + 24);
  *(_BYTE *)(v3 + 26) = 3;
  *(_WORD *)(v3 + 28) = 115;
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::BloomUpSamplePass *)((char *)this + 32), 0);
  *(_QWORD *)(v4 + 8) = "Tmp";
  *(_WORD *)(v4 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 15), 1.0);
  *(_WORD *)(v4 + 18) = (int)fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 15), 1.0);
  *(_BYTE *)(v4 + 30) = *(_DWORD *)(*((_QWORD *)this + 15) + 24);
  *(_BYTE *)(v4 + 26) = 3;
  *(_WORD *)(v4 + 28) = 115;
  *(_WORD *)(v4 + 66) |= 8u;
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::BloomUpSamplePass *)((char *)this + 32), 1u);
  *(_QWORD *)(v5 + 8) = "Bloom";
  *(_WORD *)(v5 + 16) = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 15), 1.0);
  result = fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 15), 1.0);
  *(_WORD *)(v5 + 18) = (int)result;
  *(_WORD *)(v5 + 28) = 115;
  *(_BYTE *)(v5 + 26) = 3;
  return result;
}

void C3D::BloomUpSamplePass::compile(C3D::BloomUpSamplePass *this)
{
  uint64_t RenderContext;
  void *v3;
  C3D::RenderGraphResourceManager *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v5 = (*(uint64_t (**)(C3D::BloomUpSamplePass *))(*(_QWORD *)this + 64))(this);
  v6 = C3D::RenderGraphResourceManager::get(v4, v5);
  *((_QWORD *)this + 14) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A3B8;
    *((_QWORD *)this + 14) = v7;
    v8 = (*(uint64_t (**)(C3D::BloomUpSamplePass *))(*(_QWORD *)this + 64))(this);
    C3D::RenderGraphResourceManager::set((uint64_t)v4, v8, *((_QWORD *)this + 14));
    v9 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("scn_bloom_upsample"));
    v10 = *((_QWORD *)this + 14);
    v11 = *(void **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v9;
    if (v11)

  }
}

void C3D::BloomUpSamplePass::execute(C3D::Pass *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  _QWORD *v4;
  MTLTexture *v5;
  uint64_t v6;
  MTLTexture *v7;
  MTLTexture *v8;
  MTLTexture *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  MTLComputePipelineState *v16;
  uint64_t v17;
  MTLComputePipelineState *v18;
  C3D::Pass *v19;
  float v20;
  void **v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = *(float *)(*((_QWORD *)a1 + 15) + 28);
  v3 = *a2;
  v4 = C3D::Pass::outputTextureAtIndex(a1, 1u);
  v21 = C3D::Pass::inputTextureAtIndex(a1, 0);
  v22 = C3D::Pass::outputTextureAtIndex(a1, 0);
  v5 = (MTLTexture *)objc_msgSend(v21, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), objc_msgSend(v4, "textureType"), *(int *)(*((_QWORD *)a1 + 15) + 24) - 1, 1, 0, 1);
  v6 = *(int *)(*((_QWORD *)a1 + 15) + 24) - 2;
  v7 = (MTLTexture *)objc_msgSend(v21, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), objc_msgSend(v4, "textureType"), v6, 1, 0, 1);
  v8 = (MTLTexture *)objc_msgSend(v22, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), objc_msgSend(v4, "textureType"), v6, 1, 0, 1);
  v9 = v8;
  v19 = a1;
  v10 = *(_DWORD *)(*((_QWORD *)a1 + 15) + 24);
  v11 = v10 - 3;
  if (v10 >= 3)
  {
    v12 = (v10 - 2) + 1;
    v13 = 1;
    do
    {
      if (v3->_textures[0] != v5)
      {
        v3->_textures[0] = v5;
        v3->_texturesToBind[0] |= 1uLL;
      }
      if (v3->_textures[1] != v7)
      {
        v3->_textures[1] = v7;
        v3->_texturesToBind[0] |= 2uLL;
      }
      if (v3->_textures[2] != v9)
      {
        v3->_textures[2] = v9;
        v3->_texturesToBind[0] |= 4uLL;
      }
      if (v12 == 2)
      {
        v14 = 1.0 / pow(v20, (double)(*(_DWORD *)(*((_QWORD *)v19 + 15) + 24) - 4));
        v20 = v14;
      }
      SCNMTLComputeCommandEncoder::setBytes(v3, &v20, 4uLL, 0);
      v15 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)v19 + 14) + 16);
      v16 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v15);
      SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v9, v16);
      v13 ^= 1u;

      v7 = (MTLTexture *)objc_msgSend(v21, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), objc_msgSend(v4, "textureType"), v11, 1, 0, 1);
      v8 = (MTLTexture *)objc_msgSend((&v21)[v13 & 1], "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v4, "pixelFormat"), objc_msgSend(v4, "textureType"), v11, 1, 0, 1);
      --v12;
      --v11;
      v5 = v9;
      v9 = v8;
    }
    while (v12 > 1);
  }

  if (v3->_textures[0] != v5)
  {
    v3->_textures[0] = v5;
    v3->_texturesToBind[0] |= 1uLL;
  }
  if (v3->_textures[1] != v7)
  {
    v3->_textures[1] = v7;
    v3->_texturesToBind[0] |= 2uLL;
  }
  if ((_QWORD *)v3->_textures[2] != v4)
  {
    v3->_textures[2] = (MTLTexture *)v4;
    v3->_texturesToBind[0] |= 4uLL;
  }
  v20 = 1.0;
  SCNMTLComputeCommandEncoder::setBytes(v3, &v20, 4uLL, 0);
  v17 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)v19 + 14) + 16);
  v18 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v17);
  SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v4, v18);

}

void C3D::BloomUpSamplePassResource::~BloomUpSamplePassResource(C3D::BloomUpSamplePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A3B8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A3B8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

float __spreadingVariationf(unsigned int *a1, float32x4_t *a2, int a3, float32x4_t a4, int8x16_t a5, double a6, int8x16_t a7, float32x4_t a8)
{
  float32x4_t v10;
  unsigned int v11;
  float v12;
  float v13;
  __float2 v14;
  int8x16_t v15;
  float v16;
  unsigned int v17;
  float v18;
  __float2 v19;
  float result;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float cosval;

  v10 = *a2;
  v11 = 214013 * *a1 + 2531011;
  v12 = (float)HIWORD(v11);
  if (a3)
  {
    cosval = (float)((float)(v12 * -0.000015259) * (float)(1.0 - a4.f32[0])) + 1.0;
    v13 = sqrtf(1.0 - (float)(cosval * cosval));
  }
  else
  {
    v22 = *a2;
    v14 = __sincosf_stret((float)(v12 * 0.000015259) * a4.f32[0]);
    v10 = v22;
    cosval = v14.__cosval;
    LODWORD(v13) = *(_QWORD *)&v14;
  }
  a5.i32[0] = v10.i32[2];
  a7.i32[0] = 1.0;
  a4.f32[0] = v10.f32[1] / (float)(fabsf(v10.f32[2]) + 1.0);
  a8.f32[0] = -(float)(v10.f32[0] * a4.f32[0]);
  a4.f32[0] = vmuls_lane_f32(a4.f32[0], *(float32x2_t *)v10.f32, 1);
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v16 = *(float *)vbslq_s8(v15, a7, a5).i32;
  a8.f32[1] = 1.0 - a4.f32[0];
  a8.i32[2] = vmuls_lane_f32(-v16, *(float32x2_t *)v10.f32, 1);
  a4.f32[0] = v10.f32[2] + (float)(v16 * a4.f32[0]);
  a4.f32[1] = v16 * a8.f32[0];
  a4.f32[2] = -v10.f32[0];
  v21 = a4;
  v23 = a8;
  v17 = 214013 * v11 + 2531011;
  *a1 = v17;
  v18 = (float)((float)((float)HIWORD(v17) * 0.000015259) + (float)((float)HIWORD(v17) * 0.000015259)) * 3.14159265;
  v19 = __sincosf_stret(v18);
  result = v13 * v19.__sinval;
  *a2 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, cosval), v21, v13 * v19.__cosval), v23, v13 * v19.__sinval);
  return result;
}

__n128 __SetupIntegration(uint64_t a1, _OWORD *a2, float32x4_t *a3, int32x4_t *a4, __n128 *a5)
{
  __int128 v10;
  const float *v11;
  float32x4_t v12;
  int32x2_t v13;
  int32x4_t v14;
  __n128 result;
  __int128 v16;

  if (*(_QWORD *)(a1 + 1056) && C3DParticleSystemGetAffectedByGravity(*(_QWORD *)(a1 + 1040)))
  {
    DWORD2(v16) = 0;
    *(_QWORD *)&v16 = 0;
    C3DPhysicsWorldGetWorldGravity(*(void **)(a1 + 1056), &v16);
    v10 = v16;
    HIDWORD(v10) = 0;
    *a2 = v10;
  }
  v11 = (const float *)(a1 + 1028);
  v12 = vld1q_dup_f32(v11);
  *a3 = v12;
  *(float *)v13.i32 = -C3DParticleSystemGetDampingFactor(*(_QWORD *)(a1 + 1040));
  v14 = vdupq_lane_s32(v13, 0);
  v14.i32[3] = 0;
  *a4 = v14;
  result = C3DParticleSystemGetAcceleration((__n128 *)*(_QWORD *)(a1 + 1040));
  result.n128_u32[3] = 0;
  *a5 = result;
  return result;
}

__n128 C3DParticleEulerIntegration_C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float *v11;
  float32x4_t *v12;
  float32x4_t *v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __n128 result;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  __SetupIntegration(a1, &v25, &v24, (int32x4_t *)&v23, (__n128 *)&v22);
  if (a2 >= a3)
  {
    v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
  }
  else
  {
    v6 = *(float *)(a1 + 1028);
    v7 = v24;
    v8 = vmulq_f32(v24, v25);
    v9 = v22;
    v10 = v23;
    v11 = (float *)(*(_QWORD *)(a1 + 304) + 4 * a2);
    v12 = (float32x4_t *)(*(_QWORD *)(a1 + 264) + 16 * a2);
    v13 = (float32x4_t *)(*(_QWORD *)(a1 + 256) + 16 * a2);
    v14 = a3 - (unint64_t)a2;
    v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16.i64[0] = 0x80000000800000;
    v16.i64[1] = 0x80000000800000;
    do
    {
      v17 = *v11++;
      v18 = vmlaq_f32(*v13, v7, *v12);
      *v13++ = v18;
      v15 = vminq_f32(v15, v18);
      v16 = vmaxq_f32(v16, v18);
      *v12 = vaddq_f32(*v12, vmlaq_n_f32(v8, vmlaq_f32(v9, *v12, v10), v6 * v17));
      ++v12;
      --v14;
    }
    while (v14);
  }
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  result = (__n128)vmulq_f32(vaddq_f32(v15, v16), v19);
  v20 = vmulq_f32(vsubq_f32(v16, v15), v19);
  result.n128_u32[3] = 1.0;
  v20.i32[3] = 0;
  *(__n128 *)(a1 + 1088) = result;
  *(float32x4_t *)(a1 + 1104) = v20;
  return result;
}

__n128 C3DParticleEulerIntegration_NoMassVariation(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __n128 result;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  __SetupIntegration(a1, &v25, &v24, (int32x4_t *)&v23, (__n128 *)&v22);
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  *(float *)v8.i32 = C3DParticleSystemGetParticleMass(*(_QWORD *)(a1 + 1040));
  if (a2 >= a3)
  {
    v16 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v17.i64[0] = 0x80000000800000;
    v17.i64[1] = 0x80000000800000;
  }
  else
  {
    v9 = v24;
    v10 = vdivq_f32(v24, (float32x4_t)vdupq_lane_s32(v8, 0));
    v11 = v23;
    v12 = vmlaq_n_f32(v22, v25, *(float *)v8.i32);
    v13 = (float32x4_t *)(v7 + 16 * a2);
    v14 = (float32x4_t *)(v6 + 16 * a2);
    v15 = a3 - (unint64_t)a2;
    v16 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v17.i64[0] = 0x80000000800000;
    v17.i64[1] = 0x80000000800000;
    do
    {
      v18 = vmlaq_f32(*v14, v9, *v13);
      v16 = vminq_f32(v16, v18);
      v17 = vmaxq_f32(v17, v18);
      *v13 = vmlaq_f32(*v13, v10, vmlaq_f32(v12, *v13, v11));
      ++v13;
      *v14++ = v18;
      --v15;
    }
    while (v15);
  }
  v19.i64[0] = 0x3F0000003F000000;
  v19.i64[1] = 0x3F0000003F000000;
  v20 = vmulq_f32(vaddq_f32(v16, v17), v19);
  result = (__n128)vmulq_f32(vsubq_f32(v17, v16), v19);
  v20.i32[3] = 1.0;
  result.n128_u32[3] = 0;
  *(float32x4_t *)(a1 + 1088) = v20;
  *(__n128 *)(a1 + 1104) = result;
  return result;
}

__n128 C3DParticleEulerIntegration_NoMassVariationNoDrag(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __n128 result;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  __SetupIntegration(a1, &v30, &v29, &v28, (__n128 *)&v27);
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  *(float *)v8.i32 = C3DParticleSystemGetParticleMass(*(_QWORD *)(a1 + 1040));
  v9 = v29;
  v10 = vmlaq_n_f32(v27, v30, *(float *)v8.i32);
  v11 = vmulq_f32(v10, v10);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]) > 0.0)
  {
    if (a2 < a3)
    {
      v12 = vmulq_f32(vdivq_f32(v29, (float32x4_t)vdupq_lane_s32(v8, 0)), v10);
      v13 = (float32x4_t *)(v7 + 16 * a2);
      v14 = (float32x4_t *)(v6 + 16 * a2);
      v15 = a3 - (unint64_t)a2;
      v16 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v17.i64[0] = 0x80000000800000;
      v17.i64[1] = 0x80000000800000;
      do
      {
        v18 = vmlaq_f32(*v14, v9, *v13);
        v16 = vminq_f32(v16, v18);
        v17 = vmaxq_f32(v17, v18);
        *v13 = vaddq_f32(v12, *v13);
        ++v13;
        *v14++ = v18;
        --v15;
      }
      while (v15);
      goto LABEL_11;
    }
LABEL_10:
    v16 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v17.i64[0] = 0x80000000800000;
    v17.i64[1] = 0x80000000800000;
    goto LABEL_11;
  }
  if (a2 >= a3)
    goto LABEL_10;
  v19 = (float32x4_t *)(v6 + 16 * a2);
  v20 = (float32x4_t *)(v7 + 16 * a2);
  v16 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v17.i64[0] = 0x80000000800000;
  v17.i64[1] = 0x80000000800000;
  v21 = a3 - (unint64_t)a2;
  do
  {
    v22 = *v20++;
    v23 = vmlaq_f32(*v19, v9, v22);
    v16 = vminq_f32(v16, v23);
    v17 = vmaxq_f32(v17, v23);
    *v19++ = v23;
    --v21;
  }
  while (v21);
LABEL_11:
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  v25 = vmulq_f32(vaddq_f32(v16, v17), v24);
  result = (__n128)vmulq_f32(vsubq_f32(v17, v16), v24);
  v25.i32[3] = 1.0;
  result.n128_u32[3] = 0;
  *(float32x4_t *)(a1 + 1088) = v25;
  *(__n128 *)(a1 + 1104) = result;
  return result;
}

double __SpawnSubSystem(uint64_t a1, const void *a2, __n128 a3, float32x4_t a4)
{
  uint32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  __int128 v18[4];
  __int128 v19;
  __int128 v20;

  v6 = (uint32x4_t)vceqzq_f32(a4);
  v6.i32[3] = v6.i32[2];
  if ((vminvq_u32(v6) & 0x80000000) != 0)
  {
    v10 = (float32x4_t)xmmword_1DD007600;
  }
  else
  {
    v7 = (int32x4_t)vmulq_f32(a4, a4);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    v10 = vmulq_n_f32(a4, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  }
  v16 = (__int128)v10;
  DWORD2(v20) = 0;
  *(_QWORD *)&v20 = 0;
  DWORD2(v19) = 0;
  *(_QWORD *)&v19 = 0;
  C3DVectorGenerateOrthogonalBasis((float32x4_t *)&v20, (int8x16_t *)&v19, v10);
  v11 = v19;
  v12 = v20;
  HIDWORD(v11) = 0;
  HIDWORD(v12) = 0;
  v13 = v16;
  HIDWORD(v13) = 0;
  v18[0] = v11;
  v18[1] = v12;
  v14 = (__int128)a3;
  HIDWORD(v14) = 1.0;
  v18[2] = v13;
  v18[3] = v14;
  return C3DParticleManagerAddSystem(a1, 0, a2, v18);
}

void C3DParticlePlaneCollider_C(uint64_t a1, int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t v6;
  uint64_t Geometry;
  float Width;
  float Height;
  float32x4_t *WorldMatrix;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  BOOL v19;
  int v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  BOOL v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  simd_float4x4 v57;
  simd_float4x4 v58;

  LODWORD(v6) = a2;
  v51 = *(float *)(a1 + 1028);
  Geometry = C3DNodeGetGeometry((uint64_t)a4);
  Width = C3DParametricGeometryGetWidth(Geometry);
  Height = C3DParametricGeometryGetHeight(Geometry);
  WorldMatrix = C3DNodeGetWorldMatrix(a4);
  v12 = (simd_float4)WorldMatrix[3];
  v14 = *(simd_float4 *)WorldMatrix;
  v13 = (simd_float4)WorldMatrix[1];
  v58.columns[2] = (simd_float4)WorldMatrix[2];
  v58.columns[3] = v12;
  v58.columns[0] = v14;
  v58.columns[1] = v13;
  if (*(_BYTE *)(a1 + 1136))
  {
    memset(&v57, 0, sizeof(v57));
    C3DMatrix4x4Invert(*(simd_float4x4 **)(a1 + 1144), &v57);
    C3DMatrix4x4Mult((uint64_t)&v58, (float32x4_t *)&v57, &v58);
  }
  v57 = v58;
  *(double *)v15.i64 = C3DVector3MultMatrix4x4((float32x4_t *)&v57, (float32x4_t)0);
  v53 = v15;
  v57 = v58;
  *(double *)v16.i64 = C3DVector3Rotate((float32x2_t *)&v57, (float32x4_t)xmmword_1DD007600);
  v55 = v16;
  v57 = v58;
  *(double *)v17.i64 = C3DVector3Rotate((float32x2_t *)&v57, (float32x4_t)xmmword_1DD007970);
  v52 = v17;
  v57 = v58;
  *(double *)v18.i64 = C3DVector3Rotate((float32x2_t *)&v57, (float32x4_t)xmmword_1DD007920);
  v19 = a3 >= v6;
  v20 = a3 - v6;
  v21 = v51;
  if (v20 != 0 && v19)
  {
    v22 = v18;
    v23 = Width * 0.5;
    v24 = v53;
    v25 = v55;
    v26 = vmulq_f32(v53, v55);
    v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)));
    v25.f32[3] = -v27.f32[0];
    v24.i32[3] = 0;
    v54 = v24;
    v56 = v25;
    v28 = Height * 0.5;
    v29 = *(_QWORD *)(a1 + 256);
    v30 = *(_QWORD *)(a1 + 264);
    v6 = v6;
    do
    {
      v31 = vmulq_n_f32(*(float32x4_t *)(v30 + 16 * v6), v21);
      v32 = vmulq_f32(v31, v31);
      v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 > 0.0)
      {
        v34 = sqrtf(v33);
        v35 = vmulq_n_f32(v31, 1.0 / v34);
        v36 = vmulq_f32(v56, v35);
        v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0];
        if (v37 != 0.0)
        {
          v38 = vsubq_f32(*(float32x4_t *)(v29 + 16 * v6), v31);
          v39 = vmulq_f32(v56, v38);
          v40 = (float)-(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]- v27.f32[0])/ v37;
          v41 = v40 >= -0.00000011921 && v40 <= v34;
          if (v41)
          {
            v42 = vmlaq_n_f32(v38, v35, v40);
            v43 = vsubq_f32(v42, v54);
            v44 = vmulq_f32(v52, v43);
            v41 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]) <= v23;
            v45 = vmulq_f32(v22, v43);
            v46 = vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1));
            v47 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), v46).f32[0]);
            if (v41 && v47 <= v28)
            {
              v49 = v27;
              v50 = v22;
              __HandleCollision(a1, v6, v42, v56, *(double *)v46.i64);
              v27 = v49;
              v22 = v50;
              v21 = v51;
            }
          }
        }
      }
      ++v6;
      --v20;
    }
    while (v20);
  }
}

void __HandleCollision(uint64_t a1, unsigned int a2, float32x4_t a3, float32x4_t a4, double a5)
{
  float v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  float *v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  const void *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;

  if (*(_BYTE *)(a1 + 1168))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 272) + 4 * a2) = 0;
  }
  else
  {
    v7 = *(float *)(a1 + 1032);
    v9 = *(_QWORD *)(a1 + 336);
    v8 = *(_QWORD *)(a1 + 344);
    if (v8)
      v10 = (_DWORD *)(v8 + 4 * a2);
    else
      v10 = (_DWORD *)(a1 + 1160);
    LODWORD(a5) = *v10;
    v11 = (float *)(v9 + 4 * a2);
    if (!v9)
      v11 = (float *)(a1 + 1164);
    v12 = (float32x4_t *)(*(_QWORD *)(a1 + 264) + 16 * a2);
    v13 = vmulq_n_f32(*v12, *(float *)(a1 + 1028));
    v14 = vmulq_f32(v13, a4);
    v14.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u64[0];
    *(float *)&a5 = *(float *)&a5 * v14.f32[0];
    v15 = vmlaq_n_f32(vmulq_f32(vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0)), a4), vmlsq_lane_f32(v13, a4, *(float32x2_t *)v14.f32, 0), *v11);
    v16 = vmlaq_f32(vaddq_f32(v15, a3), (float32x4_t)vdupq_n_s32(0x3A83126Fu), a4);
    v17 = *(_QWORD *)(a1 + 256) + 16 * a2;
    v16.i32[3] = *(_DWORD *)(v17 + 12);
    *(float32x4_t *)v17 = v16;
    v18 = vmulq_n_f32(v15, v7);
    v18.i32[3] = v12->i32[3];
    *v12 = v18;
  }
  v19 = *(const void **)(a1 + 1176);
  if (v19)
  {
    v25 = a3;
    v26 = a4;
    __SpawnSubSystem(*(_QWORD *)(a1 + 1064), v19, (__n128)a3, a4);
    a3 = v25;
    a4 = v26;
  }
  v20 = *(unsigned int **)(a1 + 1184);
  if (v20)
  {
    *v20 = a2;
    *(_QWORD *)(a1 + 1184) = v20 + 1;
    v21 = *(_QWORD *)(a1 + 400);
    if (v21)
    {
      v22 = v21 + 12 * a2;
      *(_QWORD *)v22 = a3.i64[0];
      *(_DWORD *)(v22 + 8) = a3.i32[2];
    }
    v23 = *(_QWORD *)(a1 + 408);
    if (v23)
    {
      v24 = v23 + 12 * a2;
      *(_QWORD *)v24 = a4.i64[0];
      *(_DWORD *)(v24 + 8) = a4.i32[2];
    }
  }
}

void C3DParticleFloorCollider_C(uint64_t a1, int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t v6;
  int32x4_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  BOOL v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v32;
  float32x4_t v33;
  __n128 v34;

  LODWORD(v6) = a2;
  v32 = *(float *)(a1 + 1028);
  v34.n128_u32[2] = 0;
  v34.n128_u64[0] = 0;
  C3DSceneGetUpAxis(*(__n128 **)(a1 + 1048), &v34);
  v33 = 0uLL;
  C3DComputeMirrorPlane(a4, (float32x4_t *)&v34, (__n128 *)&v33);
  if (*(_BYTE *)(a1 + 1136))
  {
    v8 = *(int32x4_t **)(a1 + 1144);
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = vzip1q_s32(*v8, v10);
    v13 = vzip2q_s32(*v8, v10);
    v14 = vzip1q_s32(v9, v11);
    v15 = vzip2q_s32(v9, v11);
    v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(v12, v14), v33.f32[0]), (float32x4_t)vzip2q_s32(v12, v14), *(float32x2_t *)v33.f32, 1), (float32x4_t)vzip1q_s32(v13, v15), v33, 2), (float32x4_t)vzip2q_s32(v13, v15), v33, 3);
  }
  v16 = a3 >= v6;
  v17 = a3 - v6;
  v18 = v32;
  if (v17 != 0 && v16)
  {
    v19 = *(_QWORD *)(a1 + 256);
    v20 = *(_QWORD *)(a1 + 264);
    v6 = v6;
    do
    {
      v21 = vmulq_n_f32(*(float32x4_t *)(v20 + 16 * v6), v18);
      v22 = vmulq_f32(v21, v21);
      v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
      if (v23 > 0.0)
      {
        v24 = sqrtf(v23);
        v25 = vmulq_n_f32(v21, 1.0 / v24);
        v26 = vmulq_f32(v25, v33);
        v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
        if (v27 != 0.0)
        {
          v28 = vsubq_f32(*(float32x4_t *)(v19 + 16 * v6), v21);
          v29 = vmulq_f32(v28, v33);
          v30 = (float)-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)))).f32[0]/ v27;
          if (v30 >= -0.00000011921 && v30 <= v24)
          {
            __HandleCollision(a1, v6, vmlaq_n_f32(v28, v25, v30), v33, *(double *)v25.i64);
            v18 = v32;
          }
        }
      }
      ++v6;
      --v17;
    }
    while (v17);
  }
}

BOOL __rayIntersectSphere(float *a1, float32x4_t a2, float32x4_t a3, float a4, float32x4_t a5, float a6)
{
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;
  float v12;
  float v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = vsubq_f32(a2, a5);
  v8 = vmulq_f32(v7, v7);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0]- (float)(a6 * a6);
  if (v9 <= 0.0)
    return 1;
  v10 = vmulq_f32(v7, a3);
  v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  if (v11 >= 0.0)
    return 0;
  v12 = -(float)(v9 - (float)(v11 * v11));
  if (v12 < 0.0)
    return 0;
  v15 = (float)-v11 - sqrtf(v12);
  *a1 = v15;
  if (v15 <= 0.0)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      __rayIntersectSphere_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  return *a1 < a4;
}

void C3DParticleSphereCollider_C(uint64_t a1, int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t v6;
  uint64_t Geometry;
  float Radius;
  float32x4_t *WorldMatrix;
  float32x4_t v11;
  float32x4_t v12;
  simd_float4x4 *v13;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float v53;
  float v54;
  __n128 v55;
  float32x4_t v56;
  simd_float4x4 v57;
  simd_float4x4 v58;

  LODWORD(v6) = a2;
  v53 = *(float *)(a1 + 1028);
  Geometry = C3DNodeGetGeometry((uint64_t)a4);
  Radius = C3DParametricGeometryGetRadius(Geometry);
  WorldMatrix = C3DNodeGetWorldMatrix(a4);
  *(uint64_t *)((char *)v56.i64 + 4) = 0;
  v56.i32[0] = 0;
  C3DMatrix4x4GetScale(WorldMatrix, &v56);
  v11 = vabsq_f32(v56);
  v49 = Radius * fmaxf(fmaxf(v11.f32[0], v11.f32[2]), v11.f32[1]);
  v55 = (__n128)WorldMatrix[3];
  C3DNodeGetWorldPosition(a4, &v55);
  v12 = (float32x4_t)v55;
  if (*(_BYTE *)(a1 + 1136))
  {
    v13 = *(simd_float4x4 **)(a1 + 1144);
    v57 = *v13;
    v44 = (float32x4_t)v57.columns[1];
    v45 = (float32x4_t)v57.columns[2];
    v47 = (float32x4_t)v13->columns[0];
    v51 = (float32x4_t)v55;
    v58 = __invert_f4(*v13);
    v12 = vaddq_f32((float32x4_t)v58.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v58.columns[1], *(float32x2_t *)v51.f32, 1), (float32x4_t)v58.columns[0], v51.f32[0]), (float32x4_t)v58.columns[2], v51, 2));
    v58.columns[1] = (simd_float4)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), vnegq_f32(v44)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
    v58.columns[0] = (simd_float4)vmulq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58.columns[1], (int32x4_t)v58.columns[1]), (int8x16_t)v58.columns[1], 0xCuLL));
    _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58.columns[0], 2), vaddq_f32((float32x4_t)v58.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.columns[0].f32, 1))).f32[0] < 0.0;
    v15 = 1.0;
    if (_NF)
      v15 = -1.0;
    v16 = vmulq_f32(v47, v47);
    v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
    v17.f32[0] = sqrtf(v17.f32[0]);
    v18 = vmulq_f32(v44, v44);
    v19 = vmulq_f32(v45, v45);
    v17.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
    v17.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]);
    v20 = vmulq_n_f32(v17, v15);
    v21 = v49 / fmaxf(fmaxf(v20.f32[0], v20.f32[2]), v20.f32[1]);
  }
  else
  {
    v21 = v49;
  }
  v12.f32[3] = v21;
  _CF = a3 >= v6;
  v23 = a3 - v6;
  if (v23 != 0 && _CF)
  {
    v24 = *(_QWORD *)(a1 + 256);
    v25 = *(_QWORD *)(a1 + 264);
    v26 = v21;
    v6 = v6;
    __asm { FMOV            V0.4S, #1.0 }
    v46 = _Q0;
    v52 = v12;
    do
    {
      v30 = vmulq_n_f32(*(float32x4_t *)(v25 + 16 * v6), v53);
      v31 = vmulq_f32(v30, v30);
      v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0];
      if (v32 > 0.0)
      {
        v33 = sqrtf(v32);
        v34 = vsubq_f32(*(float32x4_t *)(v24 + 16 * v6), v30);
        v54 = 0.0;
        v48 = vmulq_n_f32(v30, 1.0 / v33);
        v50 = v34;
        if (__rayIntersectSphere(&v54, v34, v48, v33, v12, v26))
        {
          v35 = vmlaq_n_f32(v50, v48, v54);
          v36 = vsubq_f32(v35, v52);
          v37 = vmulq_f32(v36, v36);
          v37.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u64[0];
          v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 0);
          v39 = vrsqrteq_f32(v38);
          v40 = vmulq_f32(v39, vrsqrtsq_f32(v38, vmulq_f32(v39, v39)));
          v41 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v37.f32[0] != 0.0)), 0x1FuLL));
          v41.i32[3] = 0;
          v42 = (int8x16_t)vmulq_f32(v40, vrsqrtsq_f32(v38, vmulq_f32(v40, v40)));
          v43 = vmulq_f32(v36, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v41), v42, v46));
          v43.i32[3] = 0;
          __HandleCollision(a1, v6, v35, v43, *(double *)v42.i64);
        }
        v12 = v52;
      }
      ++v6;
      --v23;
    }
    while (v23);
  }
}

BOOL __triangleContainsPointBarycentric(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  _BOOL8 result;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  result = 0;
  v5 = vsubq_f32(a2, a1);
  v6 = vsubq_f32(a3, a1);
  v7 = vmulq_f32(v5, v5);
  v8 = vsubq_f32(a4, a1);
  LODWORD(v9) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  v10 = vmulq_f32(v5, v6);
  v10.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  v11 = vmulq_f32(v5, v8);
  LODWORD(v12) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).u32[0];
  v13 = vmulq_f32(v6, v6);
  LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
  v15 = vmulq_f32(v6, v8);
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0];
  v17 = -v10.f32[0];
  v18 = 1.0 / vmlas_n_f32((float)-v10.f32[0] * v10.f32[0], v14, v9);
  v19 = vmlas_n_f32((float)-v10.f32[0] * v16, v12, v14) * v18;
  if (v19 >= 0.0)
  {
    v20 = vmlas_n_f32(v17 * v12, v16, v9) * v18;
    if (v20 >= 0.0)
      return (float)(v19 + v20) < 1.0;
  }
  return result;
}

void __ClassifyParticlesForBoundingBox(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, float32x4_t *a5)
{
  float v9;
  float ParticleVelocity;
  float ParticleVelocityVariation;
  int32x4_t v12;
  double v13;
  float v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  char *v20;
  unint64_t v21;
  float32x4_t v22;
  char v24;
  int16x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v26 = a5[1];
  v27 = *a5;
  v9 = *(float *)(a1 + 1028);
  ParticleVelocity = C3DParticleSystemGetParticleVelocity(*(_QWORD *)(a1 + 1040));
  ParticleVelocityVariation = C3DParticleSystemGetParticleVelocityVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v12 = (int32x4_t)vaddq_f32(v27, v26);
    v13 = (float)(v9 * ParticleVelocity);
    *(float *)&v13 = v13 + ParticleVelocityVariation * 0.5;
    v14 = *(float *)v12.i32 + *(float *)&v13;
    v15 = (float32x4_t)vdupq_laneq_s32(v12, 2);
    v16 = *(float *)&v12.i32[1] + *(float *)&v13;
    v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v13, 0);
    v19 = vsubq_f32(vsubq_f32(v27, v26), v17);
    v18 = *(_QWORD *)(a1 + 256) + 16 * a2;
    v19.i32[3] = vaddq_f32(v15, v17).i32[3];
    v20 = (char *)(a4 + a2);
    v21 = a3 - (unint64_t)a2;
    do
    {
      v22 = *(float32x4_t *)v18;
      if (COERCE_FLOAT(*(_OWORD *)v18) <= v14 && COERCE_FLOAT(HIDWORD(*(_QWORD *)v18)) <= v16)
      {
        v22.i32[3] = *(_QWORD *)(v18 + 8);
        v25 = vmovn_s32(vcgtq_f32(v19, v22));
        v25.i16[3] = vmovn_s32(vcgtq_f32(v22, v19)).i16[3];
        v24 = vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v25, 0xFuLL))) & 1;
      }
      else
      {
        v24 = 1;
      }
      *v20++ = v24;
      v18 += 16;
      --v21;
    }
    while (v21);
  }
}

void __CollideWithFace(uint64_t a1, unsigned int a2, unsigned int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x2_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  _BOOL4 v29;
  double v30;
  float v31;
  float32x4_t v32;
  float32x4_t v36;
  float32x4_t v37;

  v10 = vsubq_f32(a6, a4);
  v11 = vsubq_f32(a5, a4);
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v10)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  v13 = vmulq_f32(v14, a4);
  v14.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
  v15 = vmulq_f32(v12, v12);
  v16 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v15)).u64[0];
  *(float *)v16.i32 = sqrtf(*(float *)v16.i32);
  if (*(float *)v16.i32 > 0.0)
    v14 = vdivq_f32(v14, (float32x4_t)vdupq_lane_s32(v16, 0));
  v17 = a3 - a2;
  if (a3 > a2)
  {
    v18 = *(_QWORD *)(a1 + 256);
    v19 = *(_QWORD *)(a1 + 264);
    v20 = a2;
    v21 = *(float *)(a1 + 1028);
    v37 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3);
    v31 = v21;
    v32 = v14;
    do
    {
      if (!*(_BYTE *)(a8 + v20))
      {
        v22 = vmulq_n_f32(*(float32x4_t *)(v19 + 16 * v20), v21);
        v23 = vmulq_f32(v14, v22);
        v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0];
        if (v24 != 0.0)
        {
          v25 = vsubq_f32(*(float32x4_t *)(v18 + 16 * v20), v22);
          v26 = vmulq_f32(v14, v25);
          v27 = (float)-vaddq_f32(v37, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)))).f32[0]/ v24;
          if (v27 >= 0.0 && v27 <= 1.0)
          {
            v36 = vmlaq_n_f32(v25, v22, v27);
            v29 = __triangleContainsPointBarycentric(a4, a5, a6, v36);
            v21 = v31;
            v14 = v32;
            if (v29)
            {
              __HandleCollision(a1, v20, v36, v32, v30);
              v21 = v31;
              v14 = v32;
            }
          }
        }
      }
      ++v20;
      --v17;
    }
    while (v17);
  }
}

void C3DParticleMeshCollider_C(uint64_t a1, unsigned int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t Geometry;
  uint64_t Mesh;
  uint64_t v8;
  const void *PositionSource;
  uint64_t v10;
  float32x4_t *WorldMatrix;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  CFIndex v21;
  float32x4_t v22;
  uint64_t v23;
  const void *ElementAtIndex;
  int Type;
  uint64_t PrimitiveCount;
  uint64_t v27;
  uint64_t i;
  uint64_t j;
  uint64_t Index;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int16x4_t v36;
  float32x4_t v37;
  const __CFArray *ElementsCount;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  simd_float4x4 v63;

  v62 = *MEMORY[0x1E0C80C00];
  Geometry = C3DNodeGetGeometry((uint64_t)a4);
  if (Geometry)
  {
    Mesh = C3DGeometryGetMesh(Geometry);
    if (Mesh)
    {
      v8 = Mesh;
      PositionSource = C3DMeshGetPositionSource(Mesh, 1);
      if (PositionSource)
      {
        v10 = (uint64_t)PositionSource;
        v52 = 0u;
        v53 = 0u;
        C3DNodeGetLocalBoundingBox((uint64_t)a4, &v52);
        if (*(_BYTE *)(a1 + 1136) && *(_QWORD *)(a1 + 1144))
        {
          WorldMatrix = C3DNodeGetWorldMatrix(a4);
          v48 = WorldMatrix[1];
          v50 = *WorldMatrix;
          v44 = WorldMatrix[3];
          v46 = WorldMatrix[2];
          v63 = __invert_f4(*(simd_float4x4 *)*(_QWORD *)(a1 + 1144));
          v12 = 0;
          v54 = v50;
          v55 = v48;
          v56 = v46;
          v57 = v44;
          v58 = 0u;
          v59 = 0u;
          v60 = 0u;
          v61 = 0u;
          do
          {
            *(float32x4_t *)((char *)&v58 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v63.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v54 + v12))), (float32x4_t)v63.columns[1], *(float32x2_t *)&v54.f32[v12 / 4], 1), (float32x4_t)v63.columns[2], *(float32x4_t *)((char *)&v54 + v12), 2), (float32x4_t)v63.columns[3], *(float32x4_t *)((char *)&v54 + v12), 3);
            v12 += 16;
          }
          while (v12 != 64);
          v13 = v58;
          v14 = v59;
          v15 = v60;
          v16 = v61;
        }
        else
        {
          v17 = C3DNodeGetWorldMatrix(a4);
          v13 = *v17;
          v14 = v17[1];
          v15 = v17[2];
          v16 = v17[3];
        }
        v45 = v16;
        v47 = v15;
        v18 = vaddq_f32(v16, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v14, *(float32x2_t *)v52.f32, 1), v13, v52.f32[0]), v15, v52, 2));
        v18.i32[3] = 1.0;
        v19 = (float32x4_t)v53;
        v19.i32[1] = v53.i32[0];
        v19.i32[2] = v53.i32[0];
        v49 = v14;
        v51 = v13;
        v54 = v18;
        v55 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(v13, v19)), vabsq_f32(vmulq_f32(v14, (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v53.i8, 1), v53)))), vabsq_f32(vmulq_f32(v15, (float32x4_t)vzip2q_s32(vtrn1q_s32(v53, v53), v53))));
        v20 = *(_QWORD *)(a1 + 384);
        __ClassifyParticlesForBoundingBox(a1, a2, a3, v20, &v54);
        v41 = *(float32x4_t *)(a1 + 1088);
        v37 = *(float32x4_t *)(a1 + 1104);
        ElementsCount = C3DMeshGetElementsCount(v8);
        if ((uint64_t)ElementsCount >= 1)
        {
          v21 = 0;
          v22 = vaddq_f32(v41, v37);
          v42 = vsubq_f32(v41, v37);
          v43 = v22;
          do
          {
            v23 = v8;
            ElementAtIndex = C3DMeshGetElementAtIndex(v8, v21, 1);
            Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
            if (C3DMeshElementTypeDefinesSurface(Type))
            {
              C3DMeshElementGetDoubleSided((uint64_t)ElementAtIndex);
              if (!Type)
              {
                PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
                if (PrimitiveCount >= 1)
                {
                  v27 = PrimitiveCount;
                  for (i = 0; i != v27; ++i)
                  {
                    for (j = 0; j != 3; ++j)
                    {
                      Index = C3DMeshElementGetIndex((uint64_t)ElementAtIndex, i, j, 0);
                      *(double *)v31.i64 = C3DMeshSourceGetValueAtIndexAsVector3(v10, Index);
                      v32 = vaddq_f32(v45, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v49, *(float32x2_t *)v31.f32, 1), v51, v31.f32[0]), v47, v31, 2));
                      v32.i32[3] = 0;
                      *(&v58 + j) = v32;
                    }
                    v33 = vminq_f32(vminq_f32(v58, v59), v60);
                    v34 = vmaxq_f32(vmaxq_f32(v58, v59), v60);
                    v34.i32[3] = v43.i32[0];
                    v35 = v42;
                    v35.i32[3] = v33.i32[0];
                    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgtq_f32(v35, v34)), 0xFuLL))) & 1) == 0)
                    {
                      v36 = vmovn_s32(vcgtq_f32(v33, v43));
                      if ((v36.i8[2] & 1) == 0 && (v36.i8[4] & 1) == 0)
                        __CollideWithFace(a1, a2, a3, v58, v59, v60, 0, v20);
                    }
                  }
                }
              }
            }
            ++v21;
            v8 = v23;
          }
          while ((const __CFArray *)v21 != ElementsCount);
        }
      }
    }
  }
}

void C3DParticleGenericCollider(uint64_t a1, unsigned int a2, unsigned int a3, float32x4_t *a4)
{
  const void *Geometry;
  uint64_t v9;
  CFTypeID v10;
  int Type;

  Geometry = (const void *)C3DNodeGetGeometry((uint64_t)a4);
  if (Geometry)
  {
    v9 = (uint64_t)Geometry;
    v10 = CFGetTypeID(Geometry);
    if (v10 == C3DFloorGetTypeID())
    {
      C3DParticleFloorCollider_C(a1, a2, a3, a4);
      return;
    }
    if (v10 != C3DParametricGeometryGetTypeID())
    {
LABEL_9:
      C3DParticleMeshCollider_C(a1, a2, a3, a4);
      return;
    }
    Type = C3DParametricGeometryGetType(v9);
    if (Type != 3)
    {
      if (!Type)
      {
        C3DParticlePlaneCollider_C(a1, a2, a3, a4);
        return;
      }
      goto LABEL_9;
    }
    C3DParticleSphereCollider_C(a1, a2, a3, a4);
  }
}

uint64_t C3DParticleContextSetup(uint64_t a1, uint64_t a2, const void *a3, double a4, float a5)
{
  float v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int IsLocal;
  uint64_t v15;
  uint64_t result;

  bzero((void *)a1, 0x4C0uLL);
  memcpy((void *)a1, a3, 0x400uLL);
  *(_DWORD *)(a1 + 1024) = *(_DWORD *)(a2 + 1104);
  *(float *)(a1 + 1028) = a5;
  *(float *)(a1 + 1032) = 1.0 / a5;
  v10 = a4;
  *(float *)(a1 + 1036) = v10;
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 1072) = v11;
  v12 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1088) = v12;
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 64);
  IsLocal = C3DParticleSystemGetIsLocal(v13);
  *(_BYTE *)(a1 + 1136) = IsLocal;
  if (IsLocal)
  {
    v15 = *(_QWORD *)(a2 + 16);
    if (v15)
    {
      if (*(_DWORD *)(a2 + 24) == 1)
      {
        *(_QWORD *)(a1 + 1144) = v15 + 32;
        *(_QWORD *)(a1 + 1152) = v15 + 96;
      }
    }
  }
  if ((C3DParticleSystemGetAffectedByPhysicsFields(*(_QWORD *)(a1 + 1040)) & 1) != 0
    || C3DParticleSystemGetAffectedByGravity(*(_QWORD *)(a1 + 1040)))
  {
    *(_QWORD *)(a1 + 1056) = C3DSceneGetPhysicsWorld(*(id **)(a1 + 1048), 1);
  }
  *(float *)(a1 + 1160) = C3DParticleSystemGetParticleBounce(*(_QWORD *)(a2 + 48));
  *(float *)(a1 + 1164) = C3DParticleSystemGetParticleFriction(*(_QWORD *)(a2 + 48));
  *(_BYTE *)(a1 + 1168) = C3DParticleSystemGetParticleDiesOnCollision(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 1176) = C3DParticleSystemGetSystemSpawnedOnCollision(*(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 1192) = C3DParticleManagerGetUpdateQueue();
  result = C3DParticleManagerGetUpdateQueue();
  *(_QWORD *)(a1 + 1200) = result;
  return result;
}

void C3DParticleGenericColliderWithBlock(_QWORD *a1, unsigned int a2, unsigned int a3, float32x4_t *a4)
{
  uint64_t EventBlock;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFArrayRef theArray;
  _BYTE v13[256];
  _BYTE v14[264];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  EventBlock = C3DParticleSystemGetEventBlock(a1[130], 2u, &theArray);
  v9 = a1[49];
  a1[148] = v9;
  C3DParticleGenericCollider((uint64_t)a1, a2, a3, a4);
  v10 = a1[148] - v9;
  if (v10)
  {
    v11 = v10 >> 2;
    memset(v14, 0, 256);
    C3DParticleSystemInstanceFillUserData(a1[130], (uint64_t)a1, theArray, (uint64_t)v14, (uint64_t)v13, 0);
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t))(EventBlock + 16))(EventBlock, v14, v13, v9, v11);
  }
}

void C3DParticleSpawnSubSystem(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t SystemSpawnedOnLiving;
  BOOL v9;
  const void *v10;
  __n128 *v11;
  unsigned int v12;
  float32x4_t *v13;
  __n128 v14;
  __n128 v15;
  float32x4_t v16;

  v6 = a1[32];
  v7 = a1[33];
  SystemSpawnedOnLiving = C3DParticleSystemGetSystemSpawnedOnLiving(a1[130]);
  if (SystemSpawnedOnLiving)
    v9 = a3 > a2;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (const void *)SystemSpawnedOnLiving;
    v11 = (__n128 *)(v6 + 16 * a2);
    v12 = a3 - a2;
    v13 = (float32x4_t *)(v7 + 16 * a2);
    do
    {
      v14 = *v11++;
      v15 = v14;
      v16 = *v13++;
      __SpawnSubSystem(a1[133], v10, v15, v16);
      --v12;
    }
    while (v12);
  }
}

void C3DParticleModifier_Frame(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float *v8;
  float *v9;
  unint64_t v10;
  float v11;
  float ImageSequenceFrameRate;
  float *v13;
  unint64_t v14;

  v6 = *(_QWORD *)(a1 + 368);
  v5 = *(_QWORD *)(a1 + 376);
  v7 = *(float *)(a1 + 1028);
  if (v5)
  {
    if (a2 < a3)
    {
      v8 = (float *)(v5 + 4 * a2);
      v9 = (float *)(v6 + 4 * a2);
      v10 = a3 - (unint64_t)a2;
      do
      {
        v11 = *v8++;
        *v9 = *v9 + (float)(v11 * v7);
        ++v9;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    ImageSequenceFrameRate = C3DParticleSystemGetImageSequenceFrameRate(*(_QWORD *)(a1 + 1040));
    if (a2 < a3)
    {
      v13 = (float *)(v6 + 4 * a2);
      v14 = a3 - (unint64_t)a2;
      do
      {
        *v13 = *v13 + (float)(ImageSequenceFrameRate * v7);
        ++v13;
        --v14;
      }
      while (v14);
    }
  }
}

void C3DParticleInitPositionAndVelocity(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *EmitterShape;
  int BirthDirection;
  float ParticleAngle;
  float ParticleAngleVariation;
  float ParticleVelocity;
  float ParticleVelocityVariation;
  float ParticleAngularVelocity;
  float ParticleAngularVelocityVariation;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  int8x16_t v31;
  int32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int v48;
  float32x4_t v49;
  float v50;
  unsigned int v51;
  float32x4_t v52;
  float v53;
  float v54;
  float v55;
  float v56;
  __n128 v57;
  unsigned int v58;
  float v59;
  unsigned int *v60;
  unsigned int v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  float32x4_t v74;
  float32x4_t v75;
  int v76;
  uint32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int BirthLocation;
  __n128 EmittingDirection;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;

  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  EmitterShape = (const void *)C3DParticleSystemGetEmitterShape(*(_QWORD *)(a1 + 1040));
  BirthLocation = C3DParticleSystemGetBirthLocation(*(_QWORD *)(a1 + 1040));
  BirthDirection = C3DParticleSystemGetBirthDirection(*(_QWORD *)(a1 + 1040));
  ParticleAngle = C3DParticleSystemGetParticleAngle(*(_QWORD *)(a1 + 1040));
  ParticleAngleVariation = C3DParticleSystemGetParticleAngleVariation(*(_QWORD *)(a1 + 1040));
  ParticleVelocity = C3DParticleSystemGetParticleVelocity(*(_QWORD *)(a1 + 1040));
  ParticleVelocityVariation = C3DParticleSystemGetParticleVelocityVariation(*(_QWORD *)(a1 + 1040));
  ParticleAngularVelocity = C3DParticleSystemGetParticleAngularVelocity(*(_QWORD *)(a1 + 1040));
  ParticleAngularVelocityVariation = C3DParticleSystemGetParticleAngularVelocityVariation(*(_QWORD *)(a1 + 1040));
  EmittingDirection = C3DParticleSystemGetEmittingDirection((__n128 *)*(_QWORD *)(a1 + 1040));
  v16 = C3DParticleSystemGetSpreadingAngle(*(_QWORD *)(a1 + 1040)) / 180.0 * 3.14159265;
  v92 = v16;
  v86 = cosf(v16);
  v19 = *(float32x4_t **)(a1 + 1144);
  v90 = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  v85 = _Q0;
  if (!v19)
  {
    v48 = 0;
    v27 = 0uLL;
    v28 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v49 = 0uLL;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    goto LABEL_5;
  }
  v26 = *v19;
  v25 = v19[1];
  v28 = v19[2];
  v27 = v19[3];
  v29 = *(float32x4_t **)(a1 + 1152);
  v30 = v29[1];
  v31 = (int8x16_t)vmulq_f32(v26, v26);
  v32 = (int32x2_t)vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
  v33 = v29[2];
  v17 = v29[3];
  v34 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32((float32x2_t)v32, (float32x2_t)vdup_lane_s32(v32, 1)), 0);
  v35 = vrsqrteq_f32(v34);
  v36 = vmulq_f32(v35, vrsqrtsq_f32(v34, vmulq_f32(v35, v35)));
  v37 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v34), _Q0, (int8x16_t)vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36))));
  v38 = (int8x16_t)vmulq_f32(v25, v25);
  *(float32x2_t *)v38.i8 = vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  v95 = vmulq_f32(*v19, v37);
  v39 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1)), 0);
  v40 = vrsqrteq_f32(v39);
  v41 = vmulq_f32(v40, vrsqrtsq_f32(v39, vmulq_f32(v40, v40)));
  v42 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v39), _Q0, (int8x16_t)vmulq_f32(v41, vrsqrtsq_f32(v39, vmulq_f32(v41, v41))));
  v43 = (int8x16_t)vmulq_f32(v28, v28);
  *(float32x2_t *)v43.i8 = vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
  v94 = vmulq_f32(v25, v42);
  v44 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1)), 0);
  v45 = vrsqrteq_f32(v44);
  v46 = vmulq_f32(v45, vrsqrtsq_f32(v44, vmulq_f32(v45, v45)));
  v93 = vmulq_f32(v28, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v44), _Q0, (int8x16_t)vmulq_f32(v46, vrsqrtsq_f32(v44, vmulq_f32(v46, v46)))));
  v47 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  v18 = (float32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vcgtq_f32(vabdq_f32(v25, v30), v47), (int8x16_t)vcgtq_f32(vabdq_f32(*v19, *v29), v47)), vorrq_s8((int8x16_t)vcgtq_f32(vabdq_f32(v28, v33), v47), (int8x16_t)vcgtq_f32(vabdq_f32(v27, v17), v47)));
  if ((vmaxvq_u32((uint32x4_t)v18) & 0x80000000) == 0)
  {
    v48 = 0;
    v49 = 0uLL;
LABEL_5:
    v88 = v49;
    v89 = v49;
    v87 = v49;
    goto LABEL_7;
  }
  v50 = 1.0 / (float)(a3 - a2);
  v87 = vmulq_n_f32(vsubq_f32(v26, *v29), v50);
  v88 = vmulq_n_f32(vsubq_f32(v25, v30), v50);
  v48 = 1;
  v18 = vmulq_n_f32(vsubq_f32(v27, v17), v50);
  v89 = vmulq_n_f32(vsubq_f32(v28, v33), v50);
  v90 = v18;
  v27 = v29[3];
  v28 = v29[2];
  v25 = v29[1];
  v26 = *v29;
LABEL_7:
  v111 = 0uLL;
  v51 = a3 - a2;
  if (a3 > a2)
  {
    *(double *)v52.i64 = ParticleAngularVelocity / 180.0 * 3.14159265;
    *(double *)v17.i64 = ParticleAngularVelocityVariation / 180.0 * 3.14159265;
    v53 = ParticleAngle / 180.0 * 3.14159265;
    v54 = ParticleAngleVariation / 180.0 * 3.14159265;
    v55 = *(double *)v52.i64;
    v56 = *(double *)v17.i64;
    v57 = EmittingDirection;
    v57.n128_u32[3] = 0;
    v98 = (float32x4_t)v57;
    v58 = ~a2 + a3;
    if (v58 <= 1)
      v58 = 1;
    v59 = (float)v58;
    v18.i32[0] = *(_DWORD *)(a1 + 1028);
    v60 = (unsigned int *)(a1 + 1120);
    v61 = a2;
    v62 = (float32x4_t *)(v6 + 16 * a2);
    v63 = (float32x4_t *)(v7 + 16 * v61);
    v64 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v84 = v64;
    v65 = v18.f32[0] / v59;
    while (1)
    {
      if (EmitterShape)
      {
        v110.i32[2] = 0;
        v110.i64[0] = 0;
        v109.i32[2] = 0;
        v109.i64[0] = 0;
        v105 = v28;
        v107 = v27;
        v103 = v25;
        v99 = v18;
        v101 = v26;
        if (BirthDirection == 1)
        {
          C3DGeometryGeneratePoints(EmitterShape, 1, v60, &v110, &v109, BirthLocation);
          v18 = v99;
          v26 = v101;
          v25 = v103;
          v28 = v105;
          v27 = v107;
          v66 = v109;
          v66.i32[3] = 0;
          v111 = v66;
        }
        else
        {
          C3DGeometryGeneratePoints(EmitterShape, 1, v60, &v110, 0, BirthLocation);
          v18 = v99;
          v26 = v101;
          v25 = v103;
          v28 = v105;
          v27 = v107;
        }
        v67 = v110;
        v67.i32[3] = 1.0;
      }
      else
      {
        v66 = v98;
        v111 = v98;
        v67 = (float32x4_t)xmmword_1DD007610;
      }
      if (BirthDirection != 2)
        break;
      v76 = 214013 * (214013 * *v60 + 2531011) + 2531011;
      v77.i32[0] = 214013 * *v60 + 2531011;
      v77.i32[1] = v76;
      v77.i64[1] = (214013 * v76 + 2531011);
      v78.i64[0] = 0xBF000000BF000000;
      v78.i64[1] = 0xBF000000BF000000;
      v79 = vaddq_f32(vmulq_f32(vcvtq_f32_u32(vshrq_n_u32(v77, 0x10uLL)), v84), v78);
      v80 = (int8x16_t)vmulq_f32(v79, v79);
      *(float32x2_t *)v80.i8 = vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
      v81 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1)), 0);
      *v60 = 214013 * v76 + 2531011;
      v82 = vrsqrteq_f32(v81);
      v83 = vmulq_f32(v82, vrsqrtsq_f32(v81, vmulq_f32(v82, v82)));
      v17 = (float32x4_t)v85;
      v64 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v81), v85, (int8x16_t)vmulq_f32(v83, vrsqrtsq_f32(v81, vmulq_f32(v83, v83))));
      v111 = vmulq_f32(v79, v64);
      if (v19)
      {
LABEL_24:
        if (v48)
        {
          v26 = vaddq_f32(v87, v26);
          v25 = vaddq_f32(v88, v25);
          v28 = vaddq_f32(v89, v28);
          v27 = vaddq_f32(v90, v27);
        }
        v68 = vaddq_f32(v27, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v25, *(float32x2_t *)v67.f32, 1), v26, v67.f32[0]), v28, v67, 2));
        v68.i32[3] = v67.i32[3];
        v64 = v111;
        v17 = v93;
        v69 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v94, *(float32x2_t *)v111.f32, 1), v95, v111.f32[0]), v93, v111, 2);
        v69.i32[3] = v111.i32[3];
        v111 = v69;
        v67 = v68;
      }
LABEL_27:
      v70 = v53;
      if (v54 != 0.0)
      {
        v71 = 214013 * *v60 + 2531011;
        *v60 = v71;
        v70 = v53 + (float)((float)((float)((float)HIWORD(v71) * 0.000015259) + -0.5) * v54);
      }
      v64.f32[0] = ParticleVelocity;
      if (ParticleVelocityVariation != 0.0)
      {
        v72 = 214013 * *v60 + 2531011;
        *v60 = v72;
        v64.f32[0] = ParticleVelocity
                   + (float)((float)((float)((float)HIWORD(v72) * 0.000015259) + -0.5) * ParticleVelocityVariation);
      }
      v52 = v111;
      v17.f32[0] = v55;
      if (v56 != 0.0)
      {
        v73 = 214013 * *v60 + 2531011;
        *v60 = v73;
        v17.f32[0] = v55 + (float)((float)((float)((float)HIWORD(v73) * 0.000015259) + -0.5) * v56);
      }
      v67.f32[3] = v70;
      v74 = vmulq_n_f32(v52, v64.f32[0]);
      v74.i32[3] = v17.i32[0];
      v111 = v74;
      v75 = vmlaq_n_f32(v67, v74, v18.f32[0]);
      v18.f32[0] = v18.f32[0] - v65;
      *v62++ = v75;
      *v63++ = v74;
      if (!--v51)
        return;
    }
    if (BirthDirection != 1)
    {
      if (BirthDirection)
        goto LABEL_23;
      v66 = v98;
      v111 = v98;
    }
    if (v92 > 0.0)
    {
      v66.f32[0] = v86;
      v106 = v28;
      v108 = v27;
      v104 = v25;
      v100 = v18;
      v102 = v26;
      v91 = v67;
      __spreadingVariationf(v60, &v111, 1, v66, (int8x16_t)v64, *(double *)v52.i64, (int8x16_t)v17, v18);
      v67 = v91;
      v18 = v100;
      v26 = v102;
      v25 = v104;
      v28 = v106;
      v27 = v108;
    }
LABEL_23:
    if (v19)
      goto LABEL_24;
    goto LABEL_27;
  }
}

float C3DParticleInitLife(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;
  unsigned int v16;
  float v17;
  float *v18;
  unint64_t v19;

  v6 = *(_QWORD *)(a1 + 272);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitLife_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  result = C3DParticleSystemGetParticleLifeSpan(*(_QWORD *)(a1 + 1040));
  v16 = ~a2 + a3;
  if (v16 <= 1)
    v16 = 1;
  if (a2 < a3)
  {
    v17 = *(float *)(a1 + 1028) / (float)v16;
    v18 = (float *)(v6 + 4 * a2);
    v19 = a3 - (unint64_t)a2;
    do
    {
      *v18++ = result;
      result = result - v17;
      --v19;
    }
    while (v19);
  }
  return result;
}

void C3DParticleInitLifeWithVariation(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float ParticleLifeSpan;
  float ParticleLifeSpanVariation;
  unsigned int v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float *v31;
  unint64_t v32;
  float v33;
  unsigned int v34;

  v6 = *(_QWORD *)(a1 + 272);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitLife_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = *(_QWORD *)(a1 + 280);
  if (!v15)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      C3DParticleInitLifeWithVariation_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  ParticleLifeSpan = C3DParticleSystemGetParticleLifeSpan(*(_QWORD *)(a1 + 1040));
  ParticleLifeSpanVariation = C3DParticleSystemGetParticleLifeSpanVariation(*(_QWORD *)(a1 + 1040));
  v26 = ~a2 + a3;
  if (v26 <= 1)
    v26 = 1;
  if (a2 < a3)
  {
    v27 = *(float *)(a1 + 1028);
    v28 = v27 / (float)v26;
    v29 = ParticleLifeSpan - v27;
    v30 = (float *)(v6 + 4 * a2);
    v31 = (float *)(v15 + 4 * a2);
    v32 = a3 - (unint64_t)a2;
    do
    {
      v33 = v29;
      if (ParticleLifeSpanVariation != 0.0)
      {
        v34 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v34;
        v33 = v29 + (float)((float)((float)((float)HIWORD(v34) * 0.000015259) + -0.5) * ParticleLifeSpanVariation);
      }
      *v30++ = v33;
      *v31++ = 1.0 / v33;
      v29 = v28 + v29;
      --v32;
    }
    while (v32);
  }
}

void C3DParticleInitBirthTime(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  unint64_t v20;

  v6 = *(_QWORD *)(a1 + 288);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitBirthTime_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = ~a2 + a3;
  if (v15 <= 1)
    v15 = 1;
  if (a2 < a3)
  {
    v16 = *(float *)(a1 + 1028);
    v17 = v16 / (float)v15;
    v18 = *(float *)(a1 + 1036) - v16;
    v19 = (float *)(v6 + 4 * a2);
    v20 = a3 - (unint64_t)a2;
    do
    {
      *v19++ = v18;
      v18 = v17 + v18;
      --v20;
    }
    while (v20);
  }
}

void C3DParticleInitMass(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleMass;
  float ParticleMassVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;
  float v21;

  v6 = *(_QWORD *)(a1 + 304);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitMass_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleMass = C3DParticleSystemGetParticleMass(*(_QWORD *)(a1 + 1040));
  ParticleMassVariation = C3DParticleSystemGetParticleMassVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleMass;
      if (ParticleMassVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleMass + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleMassVariation);
      }
      if (v19 == 0.0)
        v21 = 1.0;
      else
        v21 = 1.0 / v19;
      *v17++ = v21;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitSize(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleSize;
  float ParticleSizeVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 312);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitSize_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleSize = C3DParticleSystemGetParticleSize(*(_QWORD *)(a1 + 1040));
  ParticleSizeVariation = C3DParticleSystemGetParticleSizeVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleSize;
      if (ParticleSizeVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleSize + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleSizeVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitIntensity(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleIntensity;
  float ParticleIntensityVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 416);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitSize_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleIntensity = C3DParticleSystemGetParticleIntensity(*(_QWORD *)(a1 + 1040));
  ParticleIntensityVariation = C3DParticleSystemGetParticleIntensityVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleIntensity;
      if (ParticleIntensityVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleIntensity
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleIntensityVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitBounce(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleBounce;
  float ParticleBounceVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 344);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitBounce_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleBounce = C3DParticleSystemGetParticleBounce(*(_QWORD *)(a1 + 1040));
  ParticleBounceVariation = C3DParticleSystemGetParticleBounceVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleBounce;
      if (ParticleBounceVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleBounce
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleBounceVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitFriction(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleFriction;
  float ParticleFrictionVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 336);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitFriction_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleFriction = C3DParticleSystemGetParticleFriction(*(_QWORD *)(a1 + 1040));
  ParticleFrictionVariation = C3DParticleSystemGetParticleFrictionVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleFriction;
      if (ParticleFrictionVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleFriction
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleFrictionVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitCharge(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ParticleCharge;
  float ParticleChargeVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 352);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitCharge_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleCharge = C3DParticleSystemGetParticleCharge(*(_QWORD *)(a1 + 1040));
  ParticleChargeVariation = C3DParticleSystemGetParticleChargeVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ParticleCharge;
      if (ParticleChargeVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ParticleCharge
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleChargeVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitColor(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *ParticleColor;
  unint64_t v16;
  float v17;
  float v18;
  BOOL v19;
  unsigned int v20;
  unint64_t *v21;
  float v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  float v30;
  float v31;
  unint64_t v32;
  __n128 ParticleColorVariation;

  v6 = *(_QWORD *)(a1 + 320);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitColor_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ParticleColor = (uint64_t *)C3DParticleSystemGetParticleColor(*(_QWORD *)(a1 + 1040));
  v16 = C3DColor4RGB2HSB(*ParticleColor, ParticleColor[1]);
  v18 = v17;
  ParticleColorVariation = C3DParticleSystemGetParticleColorVariation((__n128 *)*(_QWORD *)(a1 + 1040));
  v19 = a3 >= a2;
  v20 = a3 - a2;
  if (v20 != 0 && v19)
  {
    v21 = (unint64_t *)(v6 + 16 * a2);
    do
    {
      v22 = *(float *)&v16;
      if (ParticleColorVariation.n128_f32[0] != 0.0)
      {
        v23 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v23;
        v22 = *(float *)&v16
            + (float)((float)((float)((float)HIWORD(v23) * 0.000015259) + -0.5) * ParticleColorVariation.n128_f32[0]);
      }
      v24 = *((float *)&v16 + 1);
      if (ParticleColorVariation.n128_f32[1] != 0.0)
      {
        v25 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v25;
        v24 = *((float *)&v16 + 1)
            + (float)((float)((float)((float)HIWORD(v25) * 0.000015259) + -0.5) * ParticleColorVariation.n128_f32[1]);
      }
      if (v24 >= 0.0)
        v26 = v24;
      else
        v26 = 0.0;
      if (v24 <= 1.0)
        v27 = v26;
      else
        v27 = 1.0;
      v28 = v18;
      if (ParticleColorVariation.n128_f32[2] != 0.0)
      {
        v29 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v29;
        v28 = v18
            + (float)((float)((float)((float)HIWORD(v29) * 0.000015259) + -0.5) * ParticleColorVariation.n128_f32[2]);
      }
      if (v28 >= 0.0)
        v30 = v28;
      else
        v30 = 0.0;
      if (v28 <= 1.0)
        v31 = v30;
      else
        v31 = 1.0;
      if (ParticleColorVariation.n128_f32[3] != 0.0)
        *(_DWORD *)(a1 + 1120) = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
      *v21 = C3DColor4HSB2RGB(COERCE_UNSIGNED_INT(v22 - floorf(v22)) | ((unint64_t)LODWORD(v27) << 32), SLODWORD(v31));
      v21[1] = v32;
      v21 += 2;
      --v20;
    }
    while (v20);
  }
}

void C3DParticleInitRotationAxis(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 OrientationDirection;
  float32x4_t v16;
  uint32x4_t v17;
  unsigned __int32 v18;
  _DWORD *v19;
  float32x2_t v20;
  unint64_t v21;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v39;
  _DWORD *v40;
  unint64_t v41;

  v6 = *(_QWORD *)(a1 + 360);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitRotationAxis_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  OrientationDirection = C3DParticleSystemGetOrientationDirection((__n128 *)*(_QWORD *)(a1 + 1040));
  v17 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32((float32x4_t)OrientationDirection));
  v17.i32[3] = v17.i32[2];
  if ((vmaxvq_u32(v17) & 0x80000000) != 0)
  {
    if (a2 < a3)
    {
      v32 = vmulq_f32((float32x4_t)OrientationDirection, (float32x4_t)OrientationDirection);
      v32.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u64[0];
      v33 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v32.f32[0] != 0.0)), 0x1FuLL));
      v33.i32[3] = 0;
      v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0);
      v35 = vrsqrteq_f32(v34);
      v36 = vmulq_f32(v35, vrsqrtsq_f32(v34, vmulq_f32(v35, v35)));
      v37 = (int8x16_t)vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36)));
      __asm { FMOV            V3.4S, #1.0 }
      v39 = vmulq_f32((float32x4_t)OrientationDirection, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v33), v37, _Q3));
      v40 = (_DWORD *)(v6 + 12 * a2 + 8);
      v41 = a3 - (unint64_t)a2;
      do
      {
        *((_QWORD *)v40 - 1) = v39.i64[0];
        *v40 = v39.i32[2];
        v40 += 3;
        --v41;
      }
      while (v41);
    }
  }
  else if (a2 < a3)
  {
    v18 = *(_DWORD *)(a1 + 1120);
    v19 = (_DWORD *)(v6 + 12 * a2 + 8);
    v20 = (float32x2_t)vdup_n_s32(0x37800080u);
    v21 = a3 - (unint64_t)a2;
    __asm { FMOV            V4.4S, #1.0 }
    do
    {
      v16.i32[0] = 214013 * v18 + 2531011;
      v16.i32[1] = 214013 * v16.i32[0] + 2531011;
      v18 = 214013 * v16.i32[1] + 2531011;
      *(float32x2_t *)v16.f32 = vadd_f32(vmul_f32(vcvt_f32_u32(vshr_n_u32(*(uint32x2_t *)v16.f32, 0x10uLL)), v20), (float32x2_t)0xBF000000BF000000);
      v16.f32[2] = (float)((float)HIWORD(v18) * 0.000015259) + -0.5;
      v27 = vmulq_f32(v16, v16);
      v27.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).u64[0];
      v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0);
      v29 = vrsqrteq_f32(v28);
      v30 = vmulq_f32(v29, vrsqrtsq_f32(v28, vmulq_f32(v29, v29)));
      v31 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v27.f32[0] != 0.0)), 0x1FuLL));
      v31.i32[3] = 0;
      v16 = vmulq_f32(v16, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v31), (int8x16_t)vmulq_f32(v30, vrsqrtsq_f32(v28, vmulq_f32(v30, v30))), _Q4));
      *((_QWORD *)v19 - 1) = v16.i64[0];
      *v19 = v16.i32[2];
      v19 += 3;
      --v21;
    }
    while (v21);
    *(_DWORD *)(a1 + 1120) = v18;
  }
}

void C3DParticleInitFrame(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ImageSequenceInitialFrame;
  float ImageSequenceInitialFrameVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;
  float *v21;
  unint64_t v22;
  float v23;
  unsigned int v24;

  v6 = *(_QWORD *)(a1 + 368);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitFrame_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ImageSequenceInitialFrame = C3DParticleSystemGetImageSequenceInitialFrame(*(_QWORD *)(a1 + 1040));
  ImageSequenceInitialFrameVariation = C3DParticleSystemGetImageSequenceInitialFrameVariation(*(_QWORD *)(a1 + 1040));
  if (C3DParticleSystemGetImageSequenceFrameRate(*(_QWORD *)(a1 + 1040)) == 0.0
    && C3DParticleSystemGetImageSequenceFrameRateVariation(*(_QWORD *)(a1 + 1040)) == 0.0)
  {
    if (a2 < a3)
    {
      v21 = (float *)(v6 + 4 * a2);
      v22 = a3 - (unint64_t)a2;
      do
      {
        v23 = ImageSequenceInitialFrame;
        if (ImageSequenceInitialFrameVariation != 0.0)
        {
          v24 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
          *(_DWORD *)(a1 + 1120) = v24;
          v23 = ImageSequenceInitialFrame
              + (float)((float)((float)((float)HIWORD(v24) * 0.000015259) + -0.5) * ImageSequenceInitialFrameVariation);
        }
        *v21++ = (float)(int)v23;
        --v22;
      }
      while (v22);
    }
  }
  else if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ImageSequenceInitialFrame;
      if (ImageSequenceInitialFrameVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ImageSequenceInitialFrame
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ImageSequenceInitialFrameVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleInitFrameRate(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float ImageSequenceFrameRate;
  float ImageSequenceFrameRateVariation;
  float *v17;
  unint64_t v18;
  float v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a1 + 376);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DParticleInitFrame_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  ImageSequenceFrameRate = C3DParticleSystemGetImageSequenceFrameRate(*(_QWORD *)(a1 + 1040));
  ImageSequenceFrameRateVariation = C3DParticleSystemGetImageSequenceFrameRateVariation(*(_QWORD *)(a1 + 1040));
  if (a2 < a3)
  {
    v17 = (float *)(v6 + 4 * a2);
    v18 = a3 - (unint64_t)a2;
    do
    {
      v19 = ImageSequenceFrameRate;
      if (ImageSequenceFrameRateVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1120) + 2531011;
        *(_DWORD *)(a1 + 1120) = v20;
        v19 = ImageSequenceFrameRate
            + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ImageSequenceFrameRateVariation);
      }
      *v17++ = v19;
      --v18;
    }
    while (v18);
  }
}

void C3DParticleAnimatePropertyWithLife(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t ConstantDataPtrForSemantic;
  __n128 *v15;
  float ParticleLifeSpan;
  int8x16_t v17;
  int8x16_t v18;
  float v19;
  unsigned int v20;
  float *v21;
  float *v22;
  float v23;
  unsigned int v24;
  float *v25;
  float *v26;
  float v27;
  unsigned int v28;
  uint64_t v29;

  v7 = a1[35];
  v8 = a4[1];
  v9 = *((unsigned __int16 *)a4 + 1);
  v10 = *((unsigned __int16 *)a4 + 2);
  v11 = *((unsigned __int16 *)a4 + 3);
  v12 = a1[*a4];
  v29 = a1[34];
  if (v12)
  {
    v13 = (float32x4_t *)(v12 + v11);
    v28 = *((unsigned __int16 *)a4 + 2);
  }
  else
  {
    ConstantDataPtrForSemantic = C3DParticleSystemGetConstantDataPtrForSemantic(a1[130], *((unsigned __int16 *)a4 + 4));
    if (!ConstantDataPtrForSemantic)
      return;
    v13 = (float32x4_t *)ConstantDataPtrForSemantic;
    v28 = 0;
  }
  v15 = (__n128 *)v13;
  if ((_DWORD)v8 != 255)
    v15 = (__n128 *)(a1[v8] + v11);
  ParticleLifeSpan = C3DParticleSystemGetParticleLifeSpan(a1[130]);
  v18.i32[0] = 1.0;
  v19 = 1.0 / ParticleLifeSpan;
  if (v9 == 1)
  {
    v20 = a3 - a2;
    if (a3 > a2)
    {
      v21 = (float *)(v29 + 4 * a2);
      v22 = (float *)(v7 + 4 * a2);
      do
      {
        if (v7)
          v19 = *v22;
        v23 = *v21++;
        __evaluateAnimationFloat(v13->f32, (float *)v15, (uint64_t)a4, 1.0 - (float)(v23 * v19));
        v15 = (__n128 *)((char *)v15 + v10);
        v13 = (float32x4_t *)((char *)v13 + v28);
        ++v22;
        --v20;
      }
      while (v20);
    }
  }
  else if (v9 == 3 && (_DWORD)v10 == 16)
  {
    v24 = a3 - a2;
    if (a3 > a2)
    {
      v25 = (float *)(v29 + 4 * a2);
      v26 = (float *)(v7 + 4 * a2);
      do
      {
        if (v7)
          v19 = *v26;
        v27 = *v25++;
        __evaluateAnimationFloat3(v13, v15, (uint64_t)a4, 1.0 - (float)(v27 * v19), v18, v17);
        v13 = (float32x4_t *)((char *)v13 + v28);
        ++v15;
        ++v26;
        --v24;
      }
      while (v24);
    }
  }
}

float *__evaluateAnimationFloat(float *result, float *a2, uint64_t a3, float a4)
{
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v5 = *result;
  v11 = *result;
  v6 = *(_QWORD *)(a3 + 56);
  if (v6)
  {
    v7 = fminf(fmaxf(a4, 0.0), 1.0) * *(float *)(a3 + 52);
    v8 = *(float *)(v6 + 4 * v7);
    if (*(_BYTE *)(a3 + 49))
      v8 = (float)((float)(v7 - (float)v7) * *(float *)(v6 + 4 * (v7 + 1)))
         + (float)((float)(1.0 - (float)(v7 - (float)v7)) * v8);
    v9 = v5 * v8;
    v10 = v5 + v8;
    if (!*(_BYTE *)(a3 + 50))
      v10 = v9;
  }
  else if (*(_BYTE *)(a3 + 50))
  {
    result = (float *)C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
    v10 = v11;
  }
  else
  {
    result = (float *)C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
    v10 = 0.0 * v5;
  }
  *a2 = v10;
  return result;
}

float32x4_t __evaluateAnimationFloat3(float32x4_t *a1, __n128 *a2, uint64_t a3, float a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v7;
  float32x4_t v8;
  float32x4_t result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __n128 v13;

  v7 = *(_QWORD *)(a3 + 56);
  if (v7)
  {
    *(float *)a6.i32 = fminf(fmaxf(a4, 0.0), 1.0) * *(float *)(a3 + 52);
    v8 = *(float32x4_t *)(v7 + 16 * *(float *)a6.i32);
    if (*(_BYTE *)(a3 + 49))
    {
      a6 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v7 + 16 * (*(float *)a6.i32 + 1)), *(float *)a6.i32 - (float)*(float *)a6.i32), v8, 1.0 - (float)(*(float *)a6.i32 - (float)*(float *)a6.i32));
      v8 = (float32x4_t)a6;
    }
    a5.i32[0] = 0;
    a6.i8[0] = *(_BYTE *)(a3 + 50);
    result = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(a6, a5), 0), (int8x16_t)vmulq_f32(*a1, v8), (int8x16_t)vaddq_f32(*a1, v8));
  }
  else if (*(_BYTE *)(a3 + 50))
  {
    v13 = *(__n128 *)a1;
    C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
    result = (float32x4_t)v13;
  }
  else
  {
    v12.i32[2] = 0;
    v12.i64[0] = 0;
    v11 = *a1;
    C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
    v10 = v12;
    v10.i32[3] = 0;
    result = vmulq_f32(v11, v10);
  }
  result.i32[3] = a2->n128_i32[3];
  *a2 = (__n128)result;
  return result;
}

void C3DParticleAnimatePropertyWithDistance(uint64_t a1, unsigned int a2, unsigned int a3, float *a4, float32x4_t a5, double a6, int8x16_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ConstantDataPtrForSemantic;
  __n128 *v20;
  BOOL v21;
  unsigned int v22;
  float v23;
  float v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;

  v11 = *(_QWORD *)(a1 + 256);
  v12 = *((unsigned __int8 *)a4 + 1);
  v13 = *((unsigned __int16 *)a4 + 2);
  v14 = *((unsigned __int16 *)a4 + 3);
  v15 = *(_QWORD *)(a1 + 8 * *(unsigned __int8 *)a4);
  if (v15)
  {
    v16 = (float32x4_t *)(v15 + v14);
    v17 = *((unsigned __int16 *)a4 + 2);
  }
  else
  {
    v30 = a5;
    v18 = *(_QWORD *)(a1 + 256);
    ConstantDataPtrForSemantic = C3DParticleSystemGetConstantDataPtrForSemantic(*(_QWORD *)(a1 + 1040), *((unsigned __int16 *)a4 + 4));
    a5 = v30;
    if (!ConstantDataPtrForSemantic)
      return;
    v11 = v18;
    v16 = (float32x4_t *)ConstantDataPtrForSemantic;
    v17 = 0;
  }
  v20 = (__n128 *)v16;
  if ((_DWORD)v12 != 255)
    v20 = (__n128 *)(*(_QWORD *)(a1 + 8 * v12) + v14);
  v21 = a3 >= a2;
  v22 = a3 - a2;
  if (v22 != 0 && v21)
  {
    v23 = a4[18];
    v24 = a4[17] * a4[17];
    v25 = (float32x4_t *)(v11 + 16 * a2);
    v31 = a5;
    do
    {
      v26 = *v25++;
      v27 = vsubq_f32(v26, a5);
      v28 = vmulq_f32(v27, v27);
      v29 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1)));
      __evaluateAnimationGeneric(v16, v20, (uint64_t)a4, vmlas_n_f32(v23, v24, *(float *)v29.i32), v29, a7);
      a5 = v31;
      v20 = (__n128 *)((char *)v20 + v13);
      v16 = (float32x4_t *)((char *)v16 + v17);
      --v22;
    }
    while (v22);
  }
}

void __evaluateAnimationGeneric(float32x4_t *a1, __n128 *a2, uint64_t a3, float a4, int8x16_t a5, int8x16_t a6)
{
  int v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  v7 = *(unsigned __int16 *)(a3 + 2);
  switch(v7)
  {
    case 4:
      v8 = *(_QWORD *)(a3 + 56);
      if (v8)
      {
        *(float *)a6.i32 = fminf(fmaxf(a4, 0.0), 1.0) * *(float *)(a3 + 52);
        v9 = *(float32x4_t *)(v8 + 16 * *(float *)a6.i32);
        if (*(_BYTE *)(a3 + 49))
        {
          a6 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v8 + 16 * (*(float *)a6.i32 + 1)), *(float *)a6.i32 - (float)*(float *)a6.i32), v9, 1.0 - (float)(*(float *)a6.i32 - (float)*(float *)a6.i32));
          v9 = (float32x4_t)a6;
        }
        a5.i32[0] = 0;
        a6.i8[0] = *(_BYTE *)(a3 + 50);
        v10 = (float32x4_t)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(a6, a5), 0), (int8x16_t)vmulq_f32(*a1, v9), (int8x16_t)vaddq_f32(*a1, v9));
      }
      else if (*(_BYTE *)(a3 + 50))
      {
        v14 = *a1;
        C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
        v10 = v14;
        v10.i32[3] = 0;
      }
      else
      {
        v13.i32[2] = 0;
        v13.i64[0] = 0;
        v12 = *a1;
        C3DAnimationEvaluate(*(_QWORD *)(a3 + 16));
        v11 = v13;
        v11.i32[3] = 0;
        v10 = vmulq_f32(v12, v11);
      }
      *a2 = (__n128)v10;
      break;
    case 3:
      __evaluateAnimationFloat3(a1, a2, a3, a4, a5, a6);
      break;
    case 1:
      __evaluateAnimationFloat(a1->f32, (float *)a2, a3, a4);
      break;
  }
}

void C3DParticleAnimatePropertyWithOtherProperty(uint64_t a1, unsigned int a2, unsigned int a3, float *a4, double a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  unsigned int v16;
  uint64_t ConstantDataPtrForSemantic;
  __n128 *v18;
  int v19;
  uint64_t v20;
  float32x4_t *v21;
  float v22;
  float v23;
  unsigned int v25;
  uint64_t v26;
  int8x16_t v31;
  int8x16_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v11 = *((unsigned __int8 *)a4 + 1);
  v12 = *((unsigned __int16 *)a4 + 2);
  v13 = *((unsigned __int16 *)a4 + 3);
  v14 = *(_QWORD *)(a1 + 8 * *(unsigned __int8 *)a4);
  if (v14)
  {
    v15 = (float32x4_t *)(v14 + v13);
    v16 = *((unsigned __int16 *)a4 + 2);
  }
  else
  {
    ConstantDataPtrForSemantic = C3DParticleSystemGetConstantDataPtrForSemantic(*(_QWORD *)(a1 + 1040), *((unsigned __int16 *)a4 + 4));
    if (!ConstantDataPtrForSemantic)
      return;
    v15 = (float32x4_t *)ConstantDataPtrForSemantic;
    v16 = 0;
  }
  v18 = (__n128 *)v15;
  if ((_DWORD)v11 != 255)
    v18 = (__n128 *)(*(_QWORD *)(a1 + 8 * v11) + v13);
  v19 = *((unsigned __int16 *)a4 + 14);
  v20 = *((unsigned __int16 *)a4 + 15);
  v21 = (float32x4_t *)(*(_QWORD *)(a1 + 8 * *((unsigned __int8 *)a4 + 26))
                      + *((unsigned __int16 *)a4 + 16)
                      + v20 * a2);
  v22 = a4[17];
  v23 = a4[18];
  switch(v19)
  {
    case 1:
      _CF = a3 >= a2;
      v33 = a3 - a2;
      if (v33 != 0 && _CF)
      {
        v34 = v16;
        do
        {
          __evaluateAnimationGeneric(v15, v18, (uint64_t)a4, v23 + (float)(v22 * v21->f32[0]), a6, a7);
          v18 = (__n128 *)((char *)v18 + v12);
          v15 = (float32x4_t *)((char *)v15 + v34);
          v21 = (float32x4_t *)((char *)v21 + v20);
          --v33;
        }
        while (v33);
      }
      break;
    case 3:
      if ((_DWORD)v20 == 16)
      {
        _CF = a3 >= a2;
        v35 = a3 - a2;
        if (v35 != 0 && _CF)
        {
          v36 = v16;
          do
          {
            v37 = *v21++;
            v38 = vmulq_f32(v37, v37);
            v39 = vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1));
            __evaluateAnimationGeneric(v15, v18, (uint64_t)a4, v23 + (float)(v22 * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), v39).f32[0])), (int8x16_t)v39, a7);
            v18 = (__n128 *)((char *)v18 + v12);
            v15 = (float32x4_t *)((char *)v15 + v36);
            --v35;
          }
          while (v35);
        }
      }
      break;
    case 4:
      _CF = a3 >= a2;
      v25 = a3 - a2;
      if (v25 != 0 && _CF)
      {
        v26 = v16;
        __asm { FMOV            V0.4S, #0.25 }
        v40 = _Q0;
        do
        {
          v31 = (int8x16_t)vmulq_f32(*v21, v40);
          v32 = vextq_s8(v31, v31, 8uLL);
          __evaluateAnimationGeneric(v15, v18, (uint64_t)a4, v23 + (float)(v22 * vaddv_f32(vadd_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v32.i8))), v32, a7);
          v18 = (__n128 *)((char *)v18 + v12);
          v15 = (float32x4_t *)((char *)v15 + v26);
          v21 = (float32x4_t *)((char *)v21 + v20);
          --v25;
        }
        while (v25);
      }
      break;
  }
}

BOOL __lightNeedsClustering(uint64_t a1)
{
  int CastsShadow;
  int Type;

  if (C3DLightTypeSupportsShadow(a1))
    CastsShadow = C3DLightGetCastsShadow(a1);
  else
    CastsShadow = 0;
  if (C3DLightHasValidIES(a1) || ((C3DLightHasValidGobo(a1) | CastsShadow) & 1) != 0)
    return 0;
  Type = C3DLightGetType(a1);
  if (Type != 2 && Type != 3)
  {
    if (Type == 4)
      return C3DLightGetProbeType(a1) != 0;
    return 0;
  }
  return C3DLightGetAttenuationEndDistance(a1) > 0.0;
}

uint64_t __isLightGlobal(uint64_t a1)
{
  int Type;
  int v3;
  uint64_t result;
  int CastsShadow;

  Type = C3DLightGetType(a1);
  if ((Type & 0xFFFFFFFB) == 0)
    return 0;
  v3 = Type - 1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 5:
      return result;
    case 1:
    case 2:
      if (C3DLightGetAttenuationEndDistance(a1) <= 0.0)
        goto LABEL_9;
      goto LABEL_4;
    default:
LABEL_4:
      if (C3DLightTypeSupportsShadow(a1))
        CastsShadow = C3DLightGetCastsShadow(a1);
      else
        CastsShadow = 0;
      if (C3DLightHasValidIES(a1))
LABEL_9:
        result = 1;
      else
        result = C3DLightHasValidGobo(a1) | CastsShadow;
      break;
  }
  return result;
}

uint64_t __appendGlobalLight(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = (uint64_t)C3DNodeGetLight(a1);
  if (result)
  {
    v6 = result;
    result = __isLightGlobal(result);
    if ((_DWORD)result)
    {
      v7 = *(unsigned int *)(a3 + 568);
      if (v7 <= 7)
      {
        *(_DWORD *)(a3 + 4 * v7 + 504) = a2;
        result = C3DLightGetProgramHashCode(v6);
        *(_DWORD *)(a3 + 4 * (*(_DWORD *)(a3 + 568))++ + 536) = result;
      }
    }
  }
  return result;
}

void *_mm_realloc(void *a1, size_t a2, size_t a3, size_t alignment)
{
  void *memptr;

  memptr = 0;
  malloc_type_posix_memalign(&memptr, alignment, a3, 0x128F7C20uLL);
  if (a2)
    memcpy(memptr, a1, a2);
  free(a1);
  return memptr;
}

void __reserveData(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  size_t v18;
  void **v19;
  void *v20;
  void **v21;
  void **v22;
  void **v23;
  size_t v24;
  unsigned int v25;

  if (a2 >= 8)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __reserveData_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  else if (a2 == 4)
  {
    C3DLightProbesSystemSetProbesCount(*(_QWORD *)(a1 + 24), a3 + 1);
  }
  v14 = a1 + 4 * a2;
  v17 = *(_DWORD *)(v14 + 96);
  v16 = (_DWORD *)(v14 + 96);
  v15 = v17;
  if (v17 <= a3)
  {
    if (v15)
      v18 = 2 * v15;
    else
      v18 = 8;
    v19 = (void **)(a1 + 8 * a2);
    v21 = v19 + 17;
    v20 = v19[17];
    v22 = v19 + 25;
    if (v20)
    {
      *v21 = malloc_type_realloc(v20, 8 * v18, 0x2004093837F09uLL);
      v19[33] = malloc_type_realloc(v19[33], 8 * v18, 0x100004000313F17uLL);
      *v22 = malloc_type_realloc(*v22, 8 * v18, 0x2004093837F09uLL);
      v19[41] = malloc_type_realloc(v19[41], v18, 0x100004077774924uLL);
      v19[49] = malloc_type_realloc(v19[49], v18, 0x100004077774924uLL);
      switch(a2)
      {
        case 2u:
          *(_QWORD *)(a1 + 456) = _mm_realloc(*(void **)(a1 + 456), 16 * *v16, 16 * v18, 0x10uLL);
          break;
        case 3u:
          *(_QWORD *)(a1 + 472) = _mm_realloc(*(void **)(a1 + 472), 48 * *v16, 48 * v18, 0x10uLL);
          break;
        case 5u:
          *(_QWORD *)(a1 + 480) = _mm_realloc(*(void **)(a1 + 480), 80 * *v16, 80 * v18, 0x10uLL);
          break;
        case 6u:
          *(_QWORD *)(a1 + 464) = _mm_realloc(*(void **)(a1 + 464), 16 * *v16, 16 * v18, 0x10uLL);
          break;
        default:
          break;
      }
    }
    else
    {
      *v21 = malloc_type_calloc(8uLL, v18, 0xBAAE0A04uLL);
      v19[33] = malloc_type_calloc(8 * v18, 1uLL, 0xC11025D1uLL);
      *v22 = malloc_type_calloc(8uLL, v18, 0x64B0EBBDuLL);
      v19[41] = malloc_type_calloc(1uLL, v18, 0x445D957EuLL);
      v19[49] = malloc_type_calloc(1uLL, v18, 0xDFE8E096uLL);
      switch(a2)
      {
        case 2u:
          v23 = (void **)(a1 + 456);
          goto LABEL_21;
        case 3u:
          v23 = (void **)(a1 + 472);
          v24 = 48 * v18;
          v25 = -288221644;
          goto LABEL_22;
        case 5u:
          v23 = (void **)(a1 + 480);
          v24 = 80 * v18;
          v25 = 1112007933;
          goto LABEL_22;
        case 6u:
          v23 = (void **)(a1 + 464);
LABEL_21:
          v24 = 16 * v18;
          v25 = 1159420904;
LABEL_22:
          malloc_type_posix_memalign(v23, 0x10uLL, v24, v25 | 0x100004000000000);
          break;
        default:
          break;
      }
    }
    *v16 = v18;
  }
}

void C3DLightingSystemAddToLightsWithTechnique(uint64_t a1, void *value)
{
  __CFSet **v3;
  __CFSet *Mutable;

  v3 = (__CFSet **)(a1 + 116496);
  Mutable = *(__CFSet **)(a1 + 116496);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B3B0]);
    *v3 = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void C3DLightingSystemRemoveFromLightsWithTechnique(uint64_t a1, const void *a2)
{
  __CFSet *v2;

  v2 = *(__CFSet **)(a1 + 116496);
  if (v2)
    CFSetRemoveValue(v2, a2);
}

void __updateWorldData(uint64_t *a1, int a2, unsigned int a3, float32x4_t *a4, __n128 *a5)
{
  float32x4_t *WorldMatrix;
  uint64_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  unsigned int v22;
  float32x2_t v23;
  float32x2_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 ProbeExtents;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float AttenuationEndDistance;
  float32x4_t v60;

  WorldMatrix = C3DNodeGetWorldMatrix(a4);
  AttenuationEndDistance = C3DLightGetAttenuationEndDistance((uint64_t)a5);
  v11 = &a1[a2];
  *(_QWORD *)(v11[33] + 8 * a3) = C3DLightGetCategoryBitMask((uint64_t)a5);
  if (C3DLightIsBlack((uint64_t)a5) || C3DLightGetBaked((uint64_t)a5))
    *(_QWORD *)(v11[33] + 8 * a3) = 0;
  switch(a2)
  {
    case 2:
      v12 = a1[57];
      v13 = WorldMatrix[3];
      v13.f32[3] = AttenuationEndDistance;
      goto LABEL_21;
    case 3:
      v14 = C3DLightGetSpotOuterAngle((uint64_t)a5) / 180.0 * 3.14159265 * 0.5;
      if (AttenuationEndDistance <= 0.0)
        v15 = INFINITY;
      else
        v15 = AttenuationEndDistance;
      v16 = a1[59] + 48 * a3;
      v58 = WorldMatrix[2];
      v60 = WorldMatrix[3];
      v17 = tanf(v14);
      v18 = (int32x4_t)vmulq_f32(v58, v58);
      v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
      v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
      v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
      v21 = vmulq_n_f32(vnegq_f32(v58), vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
      *(float *)&v22 = (float)(v17 * v17) + 1.0;
      v23 = vrsqrte_f32((float32x2_t)v22);
      v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22, vmul_f32(v23, v23)));
      *(float32x4_t *)v16 = v60;
      *(float32x4_t *)(v16 + 16) = v21;
      *(float *)(v16 + 32) = v15;
      *(float *)(v16 + 36) = v15 * v17;
      *(_DWORD *)(v16 + 40) = vmul_f32(v24, vrsqrts_f32((float32x2_t)v22, vmul_f32(v24, v24))).u32[0];
      *(float *)(v16 + 44) = v17;
      break;
    case 4:
      if (C3DLightGetProbeType((uint64_t)a5))
      {
        v25 = scn_default_log();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
          __updateWorldData_cold_1(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      C3DLightProbesSystemSetProbeData(a1[3], a3, a4, (uint64_t)a5);
      break;
    case 5:
      if (C3DLightGetProbeType((uint64_t)a5) != 1)
      {
        v33 = scn_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
          __updateWorldData_cold_2(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      ProbeExtents = C3DLightGetProbeExtents(a5);
      v42.i64[0] = 0x3F0000003F000000;
      v42.i64[1] = 0x3F0000003F000000;
      v43 = vmulq_f32((float32x4_t)ProbeExtents, v42);
      v45 = *WorldMatrix;
      v44 = WorldMatrix[1];
      v46 = WorldMatrix[2];
      v48 = vaddq_f32(WorldMatrix[3], vmlaq_f32(vmlaq_f32(vmulq_f32(v44, (float32x4_t)0), (float32x4_t)0, *WorldMatrix), (float32x4_t)0, v46));
      v47 = 1.0;
      v48.i32[3] = 1.0;
      v49 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL), vnegq_f32(v44)), v46, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
      v50 = vmulq_f32(*WorldMatrix, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL));
      v51 = a1[60] + 80 * a3;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0] < 0.0)v47 = -1.0;
      v52 = vmulq_f32(v45, v45);
      v53 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1)));
      v54 = vmulq_f32(v44, v44);
      v53.f32[0] = sqrtf(v53.f32[0]);
      v55 = vmulq_f32(v46, v46);
      v53.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0]);
      v53.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0]);
      v56 = vmulq_n_f32(v53, v47);
      v57 = vmulq_f32(v43, v56);
      v57.i32[3] = 0;
      *(float32x4_t *)v51 = v48;
      *(float32x4_t *)(v51 + 16) = vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0));
      *(float32x4_t *)(v51 + 32) = vdivq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1));
      *(float32x4_t *)(v51 + 48) = vdivq_f32(v46, (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2));
      *(float32x4_t *)(v51 + 64) = v57;
      break;
    case 6:
      v13 = WorldMatrix[3];
      v13.i32[3] = 1120403456;
      v12 = a1[58];
LABEL_21:
      *(float32x4_t *)(v12 + 16 * a3) = v13;
      break;
    default:
      return;
  }
}

void _C3DLightingSystemCFFinalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  const void *v9;

  v2 = a1 + 116488;
  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 496));
  CFRelease(*(CFTypeRef *)(a1 + 488));
  if (*(_QWORD *)v2)
  {
    CFRelease(*(CFTypeRef *)v2);
    *(_QWORD *)v2 = 0;
  }
  v3 = *(const void **)(v2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v2 + 8) = 0;
  }
  v4 = a1 + 392;
  v5 = -64;
  do
  {
    free(*(void **)(v4 + v5 - 192));
    free(*(void **)(v4 + v5 - 128));
    free(*(void **)(v4 + v5 - 64));
    free(*(void **)(v4 + v5));
    free(*(void **)(v4 + v5 + 64));
    v5 += 8;
  }
  while (v5);
  free(*(void **)(a1 + 456));
  free(*(void **)(a1 + 464));
  free(*(void **)(a1 + 472));
  free(*(void **)(a1 + 480));
  v6 = 0;
  v7 = a1 + 117008;
  do
  {
    for (i = 0; i != 1536; i += 384)
    {
      v9 = *(const void **)(v7 + i);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(v7 + i) = 0;
      }
    }
    ++v6;
    v7 += 1568;
  }
  while (v6 != 8);
}

CFStringRef _C3DLightingSystemCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DLightingSystem %p>"), a1);
}

CFStringRef _C3DLightingSystemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DLightingSystem %p>"), a1);
}

uint64_t __lightOptimizedType(uint64_t a1)
{
  int Type;
  float AttenuationEndDistance;
  _BOOL4 v5;
  unsigned __int8 v6;
  int ProbeType;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Type = C3DLightGetType(a1);
  AttenuationEndDistance = C3DLightGetAttenuationEndDistance(a1);
  v5 = (LODWORD(AttenuationEndDistance) & 0x7FFFFFFF) == 0 || LODWORD(AttenuationEndDistance) == 2139095040;
  v6 = 0;
  switch(Type)
  {
    case 0:
      return v6;
    case 1:
      v6 = 1;
      break;
    case 2:
      if (v5)
        v6 = 1;
      else
        v6 = 2;
      break;
    case 3:
      v6 = 3;
      break;
    case 4:
      ProbeType = C3DLightGetProbeType(a1);
      if (ProbeType)
      {
        if (ProbeType != 1)
          goto LABEL_16;
        v6 = 5;
      }
      else
      {
        v6 = 4;
      }
      break;
    case 5:
      if (v5)
        v6 = 1;
      else
        v6 = 6;
      break;
    case 6:
      v6 = 7;
      break;
    default:
LABEL_16:
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        __lightOptimizedType_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
      v6 = 8;
      break;
  }
  return v6;
}

void C3DLightingSystemAdd(uint64_t a1, float32x4_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *Light;
  __n128 *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t v31[16];

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryTrackNode_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Light = C3DNodeGetLight((uint64_t)a2);
  if (Light)
  {
    v13 = (__n128 *)Light;
    if ((C3DNodeIsHiddenOrIsHiddenByAncestor((uint64_t)a2) & 1) == 0)
    {
      if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2))
      {
        v14 = scn_default_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          C3DLightingSystemAdd_cold_2(v14, v15, v16);
      }
      else
      {
        v26 = __lightOptimizedType((uint64_t)v13);
        v27 = a1 + 4 * v26;
        v28 = *(unsigned int *)(v27 + 64);
        *(_DWORD *)(v27 + 64) = v28 + 1;
        __reserveData(a1, v26, v28);
        v29 = a1 + 8 * v26;
        *(_QWORD *)(*(_QWORD *)(v29 + 136) + 8 * v28) = a2;
        *(_QWORD *)(*(_QWORD *)(v29 + 200) + 8 * v28) = v13;
        C3DLightSetRadianceProbeIndex((uint64_t)v13, v28 + 1);
        __updateWorldData((uint64_t *)a1, v26, v28, a2, v13);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, (const void *)(((int)v28 + 1) & 0xFFFFFFF | (v26 << 28)));
        if (__isLightGlobal((uint64_t)v13))
        {
          *(_DWORD *)(a1 + 568) = 0;
          *(_OWORD *)(a1 + 504) = 0u;
          *(_OWORD *)(a1 + 520) = 0u;
          CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)__appendGlobalLight, (void *)a1);
        }
        else if (!*(_DWORD *)(a1 + 572))
        {
          v30 = *(_QWORD *)(a1 + 116424);
          if (v30)
            C3DEnginePipelineInvalidateAllProgramHashCode(v30);
        }
        _recomputeLocalLightsCount(a1);
        if (C3DLightGetTechnique((uint64_t)v13))
          C3DLightingSystemAddToLightsWithTechnique(a1, v13);
      }
    }
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      __C3DLightDidChange_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
    v25 = scn_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1DCCB8000, v25, OS_LOG_TYPE_DEFAULT, "Warning: Should not register a node without light to the light system", v31, 2u);
    }
  }
}

uint64_t _recomputeLocalLightsCount(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  *(_DWORD *)(result + 572) = 0;
  for (i = 2; i != 7; ++i)
  {
    v3 = *(unsigned int *)(v1 + 4 * i + 64);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        result = *(_QWORD *)(*(_QWORD *)(v1 + 8 * i + 200) + v4);
        if (result)
        {
          result = __lightNeedsClustering(result);
          if ((_DWORD)result)
            ++*(_DWORD *)(v1 + 572);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void C3DLightingSystemRemove(uint64_t a1, const void *a2)
{
  const void *Value;
  const void *v5;
  const __CFDictionary *Light;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __CFSet *v27;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Value)
  {
    v5 = Value;
    Light = C3DNodeGetLight((uint64_t)a2);
    v7 = (v5 & 0xFFFFFFF) - 1;
    v8 = v5 >> 28;
    v9 = a1 + 4 * v8;
    v10 = (*(_DWORD *)(v9 + 64) - 1);
    *(_DWORD *)(v9 + 64) = v10;
    if (v7 < v10)
    {
      v11 = (_QWORD *)(a1 + 8 * v8);
      v12 = v11[17];
      v13 = *(float32x4_t **)(v12 + 8 * v10);
      v14 = *(_QWORD *)(v11[25] + 8 * v10);
      *(_QWORD *)(v12 + 8 * v7) = v13;
      *(_QWORD *)(v11[25] + 8 * v7) = v14;
      *(_BYTE *)(v11[41] + v7) = *(_BYTE *)(v11[41] + v10);
      *(_BYTE *)(v11[49] + v7) = *(_BYTE *)(v11[49] + v10);
      switch((int)v8)
      {
        case 2:
          v15 = *(_QWORD *)(a1 + 456);
          goto LABEL_9;
        case 3:
          v16 = *(_QWORD *)(a1 + 472);
          v17 = (__int128 *)(v16 + 48 * v10);
          v18 = *v17;
          v19 = v17[2];
          v20 = (_OWORD *)(v16 + 48 * v7);
          v20[1] = v17[1];
          v20[2] = v19;
          *v20 = v18;
          break;
        case 4:
          C3DLightProbesSystemSetProbeData(*(_QWORD *)(a1 + 24), v7, v13, v14);
          break;
        case 5:
          v21 = *(_QWORD *)(a1 + 480);
          v22 = (_OWORD *)(v21 + 80 * v7);
          v23 = (_OWORD *)(v21 + 80 * v10);
          *v22 = *v23;
          v24 = v23[1];
          v25 = v23[2];
          v26 = v23[4];
          v22[3] = v23[3];
          v22[4] = v26;
          v22[1] = v24;
          v22[2] = v25;
          C3DLightSetRadianceProbeIndex(v14, (__int16)v5);
          break;
        case 6:
          v15 = *(_QWORD *)(a1 + 464);
LABEL_9:
          *(_OWORD *)(v15 + 16 * v7) = *(_OWORD *)(v15 + 16 * v10);
          break;
        default:
          break;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v13, v5);
    }
    if ((_DWORD)v8 == 4)
      C3DLightProbesSystemSetProbesCount(*(_QWORD *)(a1 + 24), v10);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
    if (Light && __isLightGlobal((uint64_t)Light))
    {
      *(_DWORD *)(a1 + 568) = 0;
      *(_OWORD *)(a1 + 504) = 0u;
      *(_OWORD *)(a1 + 520) = 0u;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)__appendGlobalLight, (void *)a1);
    }
    _recomputeLocalLightsCount(a1);
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 496), a2);
    if (C3DLightGetTechnique((uint64_t)Light))
    {
      v27 = *(__CFSet **)(a1 + 116496);
      if (v27)
        CFSetRemoveValue(v27, Light);
    }
  }
}

void C3DLightingSystemLightDidUpdate(uint64_t a1, const void *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;

  if ((__isLightGlobal((uint64_t)a2) & 1) != 0)
    goto LABEL_2;
  v4 = *(unsigned int *)(a1 + 568);
  if ((_DWORD)v4)
  {
    if (*(const void **)(*(_QWORD *)(a1 + (((unint64_t)*(unsigned int *)(a1 + 504) >> 25) & 0x78) + 200)
                        + 8 * ((*(_DWORD *)(a1 + 504) & 0xFFFFFFFu) - 1)) == a2)
      goto LABEL_2;
    v5 = 0;
    do
    {
      v6 = v5;
      if (v4 - 1 == v5)
        break;
      v7 = *(const void **)(*(_QWORD *)(a1
                                      + (((unint64_t)*(unsigned int *)(a1 + 508 + 4 * v5) >> 25) & 0x78)
                                      + 200)
                          + 8 * ((*(_DWORD *)(a1 + 508 + 4 * v5) & 0xFFFFFFFu) - 1));
      ++v5;
    }
    while (v7 != a2);
    if (v6 + 1 < v4)
    {
LABEL_2:
      *(_DWORD *)(a1 + 568) = 0;
      *(_OWORD *)(a1 + 504) = 0u;
      *(_OWORD *)(a1 + 520) = 0u;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)__appendGlobalLight, (void *)a1);
    }
  }
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 488), a2);
}

uint64_t __LightsHaveChanged(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __n128 *v10;
  float32x4_t *v11;
  int v12;
  unsigned int *v14;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = a1 + 4 * v2;
    v5 = *(unsigned int *)(v4 + 64);
    v14 = (unsigned int *)(v4 + 64);
    if (*(_DWORD *)(v4 + 64))
    {
      v6 = 0;
      v7 = a1 + 8 * v2;
      v8 = (_QWORD *)(v7 + 200);
      v9 = (_QWORD *)(v7 + 136);
      do
      {
        v10 = *(__n128 **)(*v8 + 8 * v6);
        if (CFSetContainsValue(*(CFSetRef *)(a1 + 488), v10))
        {
          v11 = *(float32x4_t **)(*v9 + 8 * v6);
          v12 = __lightOptimizedType((uint64_t)v10);
          if (v2 == v12)
          {
            __updateWorldData((uint64_t *)a1, v2, v6, v11, v10);
          }
          else
          {
            C3DLightingSystemRemove(a1, v11);
            C3DLightingSystemAdd(a1, v11);
            v5 = *v14;
            --v6;
          }
          v3 |= v12 == 0;
          C3DNodeUpdateCullingSystemMembership((uint64_t)v11);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    ++v2;
  }
  while (v2 != 8);
  _recomputeLocalLightsCount(a1);
  return v3 & 1;
}

void __ComputeInfiniteLightSet(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  float32x4_t *DefaultLightNode;
  const __CFDictionary *Light;
  float32x4_t *PointOfView;
  BOOL v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v16[0] = 0;
  v2 = *(_DWORD *)(a1 + 68);
  if (v2 >= 8)
    v3 = 8;
  else
    v3 = v2;
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v4);
      if (v7 == -1)
        *((_BYTE *)v16 + v5++) = __runtimeIndex(a1, 1u, v4);
      else
        v6 |= v7;
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *(_QWORD *)(a1 + 592) = v6;
  v8 = *(_DWORD *)(a1 + 76) + *(_DWORD *)(a1 + 72);
  v9 = -*(_DWORD *)(a1 + 88);
  if ((_DWORD)v3)
    v10 = 0;
  else
    v10 = v8 == v9;
  if (v10 && (v11 = (uint64_t *)(a1 + 116416), __ShouldForceLighting(*(_QWORD *)(a1 + 116416))))
  {
    DefaultLightNode = C3DEngineContextGetDefaultLightNode(*v11);
    Light = C3DNodeGetLight((uint64_t)DefaultLightNode);
    PointOfView = C3DEngineContextGetPointOfView(*v11);
    C3DEngineContextSynchronizeDefaultLight(*v11, PointOfView);
    *(_DWORD *)(a1 + 5732) = C3DLightGetProgramHashCode((uint64_t)Light);
    *(_QWORD *)(a1 + 4704) = Light;
    *(_QWORD *)(a1 + 2656) = DefaultLightNode;
    _ComputeRuntimeDataForIndex(a1, 0xFFu, 0);
    LOBYTE(v16[0]) = -1;
    *(_QWORD *)(a1 + 576) = v16[0];
    v5 = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 576) = v16[0];
  }
  *(_DWORD *)(a1 + 584) = v5;
  v15 = v8 == v9 && !*(_QWORD *)(a1 + 592) || v5 == 8;
  *(_BYTE *)(a1 + 588) = v15;
}

uint64_t __runtimeIndex(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 v4;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1 + 8 * a2;
  v4 = *(_BYTE *)(*(_QWORD *)(v3 + 328) + a3);
  if (!v4)
  {
    v6 = *(_DWORD *)(a1 + 608);
    if (v6 == 256)
    {
      if ((__runtimeIndex_done & 1) == 0)
      {
        __runtimeIndex_done = 1;
        v7 = scn_default_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          __runtimeIndex_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      return 0;
    }
    else
    {
      v16 = a2;
      v4 = v6 + 1;
      *(_DWORD *)(a1 + 608) = v6 + 1;
      v17 = a1 + 8 * a2;
      v18 = *(_QWORD *)(*(_QWORD *)(v17 + 200) + 8 * a3);
      v19 = *(_QWORD *)(*(_QWORD *)(v17 + 136) + 8 * a3);
      v20 = a1 + 608 + 8 * v4;
      *(_QWORD *)(v20 + 2056) = v18;
      *(_QWORD *)(v20 + 8) = v19;
      *(_BYTE *)(*(_QWORD *)(v3 + 328) + a3) = v4;
      *(_DWORD *)(a1 + 608 + 4 * v4 + 4104) = C3DLightGetProgramHashCode(v18);
      _ComputeRuntimeDataForIndex(a1, v4, a3 & 0xFFFFFFF | (v16 << 28));
    }
  }
  return v4;
}

void _ComputeRuntimeDataForIndex(uint64_t a1, unsigned int a2, unsigned int a3)
{
  float32x4_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float *v10;
  _DWORD *v11;
  float32x4_t *WorldMatrix;
  int Type;
  int HasValidGobo;
  int UsesDeferredShadows;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  simd_float4 v26;
  simd_float4 *v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  char CoordinatesSystemOptions;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int ShadowCascadeCount;
  uint64_t v51;
  uint64_t Gobo;
  float32x2_t *TextureForEffectSlot;
  uint64_t v54;
  char v55;
  char *Matrix;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  __int128 *v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  __int128 *v68;
  __int128 *v69;
  float32x4_t *ImageTransform;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __CFString *Value;
  NSObject *v90;
  _QWORD *v91;
  uint64_t ShadowColor;
  uint64_t v93;
  float ShadowRadius;
  float v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  float Intensity;
  float32x4_t *key;
  __n128 v111;
  __n128 v112;
  __n128 v114;
  int CastsShadow;
  __n128 v116;
  int8x8_t RealShadowMapSize;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  simd_float4x4 v132;
  const void *v133;
  simd_float4x4 v134;
  simd_float4x4 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  simd_float4x4 v140;

  v4 = (float32x4_t *)(a1 + 116336);
  v6 = a1 + 608 + 432 * a2;
  v7 = v6 + 5136;
  v8 = a1 + 608 + 8 * a2;
  v9 = *(float32x4_t **)(v8 + 8);
  v10 = *(float **)(v8 + 2056);
  v11 = (_DWORD *)(v6 + 5248);
  *(_DWORD *)(v6 + 5248) = 0;
  key = v9;
  WorldMatrix = C3DNodeGetWorldMatrix(v9);
  memset(&v134, 0, sizeof(v134));
  C3DMatrix4x4Mult((uint64_t)WorldMatrix, v4, &v134);
  Type = C3DLightGetType((uint64_t)v10);
  HasValidGobo = C3DLightHasValidGobo((uint64_t)v10);
  UsesDeferredShadows = C3DLightGetUsesDeferredShadows((uint64_t)v10);
  CastsShadow = C3DLightGetCastsShadow((uint64_t)v10);
  v16 = C3DLightGetUsesModulatedMode((uint64_t)v10) & (HasValidGobo | UsesDeferredShadows ^ 1);
  if ((v16 & 1) == 0)
  {
    C3DLightGetColorModulatedByIntensity((uint64_t)v10, v17, v18, v19, v20, v21, v22, v23);
    *(_QWORD *)v7 = v24;
    *(_QWORD *)(v7 + 8) = v25;
    *v11 |= 0x40u;
  }
  if (Type > 6)
  {
LABEL_9:
    if (Type < 2)
      goto LABEL_17;
    goto LABEL_10;
  }
  if (((1 << Type) & 0x6C) == 0)
  {
    if (Type != 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v26 = v134.columns[3];
  *v11 |= 1u;
  v27 = (simd_float4 *)(a1 + 432 * a2);
  v26.i32[3] = v27[360].i32[3];
  v27[360] = v26;
  *(float *)(v7 + 28) = C3DLightGetAttenuationEndDistance((uint64_t)v10);
  if (((1 << Type) & 0x68) != 0)
  {
LABEL_8:
    v28 = (int32x4_t)vmulq_f32((float32x4_t)v134.columns[2], (float32x4_t)v134.columns[2]);
    v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
    v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
    v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
    v31 = vmulq_n_f32((float32x4_t)v134.columns[2], vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
    *v11 |= 2u;
    v32 = a1 + 432 * a2;
    *(_DWORD *)(v32 + 5784) = v31.i32[2];
    *(_QWORD *)(v32 + 5776) = v31.i64[0];
    goto LABEL_9;
  }
LABEL_10:
  *(float *)&v33 = C3DLightComputeDistanceAttenuations(v10, 0, v4[4].f32[0]);
  *(_OWORD *)(a1 + 432 * a2 + 5824) = v33;
  if (Type == 3)
    v34 = v16;
  else
    v34 = 1;
  if ((v34 & 1) != 0)
  {
    if (Type == 5)
    {
      *(float *)&v35 = 1.0 / (C3DLightGetIESSpotAngle((uint64_t)v10) / 180.0 * 3.14159265);
      v36 = a1 + 432 * a2;
      *(_DWORD *)(v36 + 5848) = 0;
      *(_QWORD *)(v36 + 5840) = v35;
    }
  }
  else
  {
    C3DLightComputeSpotAttenuations((uint64_t)v10);
    *(_OWORD *)(a1 + 432 * a2 + 5840) = v37;
  }
LABEL_17:
  v38 = C3DLightTypeSupportsShadow((uint64_t)v10);
  if (((CastsShadow ^ 1 | UsesDeferredShadows) & 1) == 0 && v38)
  {
    *v11 |= 0x10u;
    v39 = *(_QWORD *)(a1 + 8 * (a3 >> 28) + 392);
    v40 = *(unsigned __int8 *)(v39 + (a3 & 0xFFFFFFF));
    v41 = a2;
    if (*(_BYTE *)(v39 + (a3 & 0xFFFFFFF)))
    {
      CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(v4[5].i64[0]);
      v140 = __invert_f4(*(simd_float4x4 *)v4->f32);
      v114 = (__n128)v140.columns[1];
      v116 = (__n128)v140.columns[0];
      v111 = (__n128)v140.columns[3];
      v112 = (__n128)v140.columns[2];
      if (!C3DLightSupportsShadowCascades((uint64_t)v10))
      {
        v51 = 1;
LABEL_31:
        v83 = (__n128 *)(a1 + 1568 * (v40 - 1) + 116944);
        v84 = (_OWORD *)(a1 + 432 * a2 + 5920);
        do
        {
          *(double *)&v85 = _computeShadowMatrix(CoordinatesSystemOptions, v83[-7], v83[-6], v83[-5], v83[-4], v83[-3], v83[-2], v83[-1], *v83, v43, v44, v45, v46, v47, v48, v49, v116, v114, v112,
                              v111);
          *(v84 - 3) = v85;
          *(v84 - 2) = v86;
          *(v84 - 1) = v87;
          *v84 = v88;
          v83 += 24;
          v84 += 4;
          --v51;
        }
        while (v51);
        goto LABEL_33;
      }
      ShadowCascadeCount = C3DLightGetShadowCascadeCount((uint64_t)v10);
      if (ShadowCascadeCount)
      {
        v51 = ShadowCascadeCount;
        goto LABEL_31;
      }
    }
LABEL_33:
    Value = (__CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
    if (Value)
    {
      *(_QWORD *)(a1 + 432 * v41 + 6144) = C3DEngineContextGetTextureWithName(v4[5].i64[0], Value);
    }
    else if ((_ComputeRuntimeData_done & 1) == 0)
    {
      _ComputeRuntimeData_done = 1;
      v90 = scn_default_log();
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        _ComputeRuntimeDataForIndex_cold_1((uint64_t *)(a1 + 40), v90);
    }
    v91 = (_QWORD *)(a1 + 432 * v41);
    v91[769] = C3DTextureSamplerDepthCompare();
    ShadowColor = C3DLightGetShadowColor((uint64_t)v10);
    v91[767] = v93;
    v91[766] = ShadowColor;
    if (C3DLightGetEffectiveShadowSampleCount((uint64_t)v10) >= 2)
    {
      *v11 |= 0x20u;
      RealShadowMapSize = C3DLightGetRealShadowMapSize((uint64_t)v10);
      ShadowRadius = C3DLightGetShadowRadius((uint64_t)v10);
      v95 = *(float *)&RealShadowMapSize.i32[1];
      if (*(float *)RealShadowMapSize.i32 > *(float *)&RealShadowMapSize.i32[1])
        v95 = *(float *)RealShadowMapSize.i32;
      if (v95 < 1.0)
        v95 = 1.0;
      *(float *)(a1 + 432 * v41 + 5860) = ShadowRadius / v95;
    }
    return;
  }
  if (HasValidGobo)
  {
    Gobo = C3DLightGetGobo((uint64_t)v10, 0);
    v133 = 0;
    TextureForEffectSlot = C3DEngineContextGetTextureForEffectSlot(v4[5].i64[0], Gobo, &v133);
    v54 = a1 + 432 * a2;
    *(_QWORD *)(v54 + 6144) = TextureForEffectSlot;
    *(_QWORD *)(v54 + 6152) = v133;
    C3DEffectSlotSetTextureFromImageProxy(Gobo, TextureForEffectSlot);
    *v11 |= 0x10u;
    memset(&v132, 0, sizeof(v132));
    C3DMatrix4x4Invert(&v134, &v132);
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    C3DLightGetProjectionInfo((uint64_t)v10, (uint64_t)&v118);
    v55 = C3DEngineContextGetCoordinatesSystemOptions(v4[5].i64[0]);
    Matrix = C3DProjectionInfosGetMatrix((char *)&v118, 0, v55);
    v57 = 0;
    v58 = *(float32x4_t *)Matrix;
    v59 = *((float32x4_t *)Matrix + 1);
    v60 = *((float32x4_t *)Matrix + 2);
    v61 = *((float32x4_t *)Matrix + 3);
    v135 = v132;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v139 = 0u;
    do
    {
      *(__int128 *)((char *)&v136 + v57 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)&v135.columns[v57])), v59, *(float32x2_t *)v135.columns[v57].f32, 1), v60, (float32x4_t)v135.columns[v57], 2), v61, (float32x4_t)v135.columns[v57], 3);
      ++v57;
    }
    while (v57 != 4);
    v62 = (__int128 *)(a1 + 432 * a2);
    v63 = v62 + 367;
    v64 = v137;
    v65 = v138;
    v66 = v139;
    v62[367] = v136;
    v67 = v62 + 368;
    v62[368] = v64;
    v68 = v62 + 369;
    v62[369] = v65;
    v69 = v62 + 370;
    v62[370] = v66;
    if (C3DKeyframeControllerHasInterpolationModesPerKey(Gobo))
    {
      ImageTransform = (float32x4_t *)C3DEffectSlotGetImageTransform(Gobo);
      v71 = 0;
      v72 = *ImageTransform;
      v73 = ImageTransform[1];
      v74 = ImageTransform[2];
      v75 = ImageTransform[3];
      v76 = *v67;
      v77 = *v68;
      v78 = *v69;
      v136 = *v63;
      v137 = v76;
      v138 = v77;
      v139 = v78;
      v118 = 0u;
      v119 = 0u;
      v120 = 0u;
      v121 = 0u;
      do
      {
        *(__int128 *)((char *)&v118 + v71) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*(__int128 *)((char *)&v136 + v71))), v73, *(float32x2_t *)((char *)&v136 + v71), 1), v74, *(float32x4_t *)((char *)&v136 + v71), 2), v75, *(float32x4_t *)((char *)&v136 + v71), 3);
        v71 += 16;
      }
      while (v71 != 64);
      v79 = v118;
      v80 = v119;
      v81 = v120;
      v82 = v121;
    }
    else
    {
      v79 = *v63;
      v80 = *v67;
      v81 = *v68;
      v82 = *v69;
    }
    v96 = 0;
    v97 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
    v98 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
    v99 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
    v97.i32[0] = 0.5;
    v98.i32[1] = -0.5;
    v99.i32[2] = 1.0;
    v100.i64[0] = 0x3F0000003F000000;
    v100.i64[1] = *(_QWORD *)(MEMORY[0x1E0C83FF0] + 56);
    v136 = v79;
    v137 = v80;
    v138 = v81;
    v139 = v82;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    do
    {
      *(__int128 *)((char *)&v118 + v96) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v97, COERCE_FLOAT(*(__int128 *)((char *)&v136 + v96))), v98, *(float32x2_t *)((char *)&v136 + v96), 1), v99, *(float32x4_t *)((char *)&v136 + v96), 2), v100, *(float32x4_t *)((char *)&v136 + v96), 3);
      v96 += 16;
    }
    while (v96 != 64);
    v101 = v119;
    v102 = v120;
    v103 = v121;
    *v63 = v118;
    *v67 = v101;
    *v68 = v102;
    *v69 = v103;
    Intensity = C3DEffectSlotGetIntensity(Gobo);
    __asm { FMOV            V1.4S, #1.0 }
    *((float *)&_Q1 + 3) = Intensity;
    *(_OWORD *)(a1 + 432 * a2 + 6128) = _Q1;
  }
}

uint64_t __appendShadowTechnique(uint64_t a1, void *key, const void *a3, uint64_t a4, uint64_t a5, int a6)
{
  const void *ShadowTechniqueForNode;
  int EnableSampleDistributed;
  uint64_t result;
  const void *v15;

  ShadowTechniqueForNode = C3DLightingSystemGetShadowTechniqueForNode(a1, a3, key);
  if (!ShadowTechniqueForNode)
  {
    ShadowTechniqueForNode = (const void *)C3DFXTechniqueCreateSpotShadow((uint64_t)a3);
    C3DLightingSystemSetShadowTechniqueForNode(a1, a3, key, ShadowTechniqueForNode);
    CFRelease(ShadowTechniqueForNode);
  }
  if (C3DLightShouldAdjustsShadowProjection((uint64_t)key))
  {
    EnableSampleDistributed = C3DLightGetEnableSampleDistributed((uint64_t)key);
    C3DFXContextSetEnableSampleDistributedRange(a4, a5, EnableSampleDistributed);
  }
  result = C3DFXTechniqueMarkAsUsed((uint64_t)ShadowTechniqueForNode, a6);
  if ((_DWORD)result)
  {
    v15 = (const void *)C3DFXShadowMapTargetNameWithNode((uint64_t)a3);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a3, v15);
    return C3DFXContextAppendTechnique(a4, a5, (uint64_t)ShadowTechniqueForNode);
  }
  return result;
}

const void *C3DLightingSystemGetShadowTechniqueForNode(uint64_t a1, const void *a2, void *key)
{
  const __CFDictionary *v3;
  const __CFDictionary *Value;

  v3 = *(const __CFDictionary **)(a1 + 116488);
  if (v3 && (Value = (const __CFDictionary *)CFDictionaryGetValue(v3, key)) != 0)
    return CFDictionaryGetValue(Value, a2);
  else
    return 0;
}

void C3DLightingSystemSetShadowTechniqueForNode(uint64_t a1, const void *a2, void *key, const void *a4)
{
  CFMutableDictionaryRef *v7;
  const __CFDictionary *Mutable;
  void *Value;

  v7 = (CFMutableDictionaryRef *)(a1 + 116488);
  Mutable = *(const __CFDictionary **)(a1 + 116488);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 1, 0, MEMORY[0x1E0C9B3A0]);
    *v7 = Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable(0, 1, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(*v7, key, Value);
    CFRelease(Value);
  }
  CFDictionarySetValue((CFMutableDictionaryRef)Value, a2, a4);
}

uint64_t C3DLightingSystemAppendForwardShadowingTechniques(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Scene;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  Scene = C3DEngineContextGetScene(a3);
  result = C3DSceneGetFrameStamp(Scene);
  v8 = result;
  if (*(_DWORD *)(a1 + 116504) != (_DWORD)result)
    *(_DWORD *)(a1 + 116504) = result;
  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = 8 * v9;
    do
    {
      v12 = *(void **)(*(_QWORD *)(a1 + 208) + v10);
      result = C3DLightGetCastsShadow((uint64_t)v12);
      if ((_DWORD)result)
      {
        result = C3DLightGetUsesDeferredShadows((uint64_t)v12);
        if ((result & 1) == 0)
          result = __appendShadowTechnique(a1, v12, *(const void **)(*(_QWORD *)(a1 + 144) + v10), a2, a3, v8);
      }
      v10 += 8;
    }
    while (v11 != v10);
  }
  v13 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 8 * v13;
    do
    {
      v16 = *(void **)(*(_QWORD *)(a1 + 224) + v14);
      result = C3DLightGetCastsShadow((uint64_t)v16);
      if ((_DWORD)result)
      {
        result = C3DLightGetUsesDeferredShadows((uint64_t)v16);
        if ((result & 1) == 0)
          result = __appendShadowTechnique(a1, v16, *(const void **)(*(_QWORD *)(a1 + 160) + v14), a2, a3, v8);
      }
      v14 += 8;
    }
    while (v15 != v14);
  }
  return result;
}

unint64_t C3DLightingSystemQuery(uint64_t a1, float32x4_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float32x4_t v29;
  float v30;
  float32x4_t v31;
  char Baked;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 v51;
  _QWORD v52[2];

  v52[1] = *MEMORY[0x1E0C80C00];
  v7 = a1 + 116432;
  v52[0] = *(_QWORD *)(a1 + 576);
  v8 = *(unsigned int *)(a1 + 584);
  v47 = a2[1];
  v49 = *a2;
  if ((*(_QWORD *)(a1 + 592) & a3) != 0)
  {
    v9 = *(unsigned int *)(a1 + 68);
    if (v8 <= 7 && (_DWORD)v9 != 0)
    {
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v11);
        if (v12 != -1)
        {
          if (!*(_BYTE *)v7)
            goto LABEL_11;
          if ((C3DLightGetBaked(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * v11)) & 1) == 0)
            break;
        }
LABEL_13:
        if (v8 <= 7 && ++v11 < v9)
          continue;
        goto LABEL_15;
      }
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8 * v11);
LABEL_11:
      if ((v12 & a3) != 0)
        *((_BYTE *)v52 + v8++) = __runtimeIndex(a1, 1u, v11);
      goto LABEL_13;
    }
  }
LABEL_15:
  v13 = *(unsigned int *)(a1 + 72);
  if (v8 <= 7 && (_DWORD)v13 != 0)
  {
    v15 = 0;
    v44 = vnegq_f32(v47);
    do
    {
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 280) + 8 * v15) & a3) != 0
        && (!*(_BYTE *)v7 || (C3DLightGetBaked(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v15)) & 1) == 0))
      {
        v16 = *(float32x4_t *)(*(_QWORD *)(a1 + 456) + 16 * v15);
        v17 = vsubq_f32(v16, v49);
        v18 = vsubq_f32(v17, vmaxnmq_f32(vminnmq_f32(v17, v47), v44));
        v19 = vmulq_f32(v18, v18);
        if ((vmovn_s32(vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v16, v16), 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))))).u8[0] & 1) != 0)
        {
          v42 = *(float32x4_t *)(*(_QWORD *)(a1 + 456) + 16 * v15);
          *((_BYTE *)v52 + v8) = __runtimeIndex(a1, 2u, v15);
          if (*(_BYTE *)(v7 + 52))
          {
            v51 = xmmword_1DD009A00;
            C3DAuthoringEnvironmentAppendDebugSegment(*(_QWORD *)(v7 + 8), 0, (float *)&v51, 0, v42, *a2);
          }
          ++v8;
        }
      }
      if (v8 > 7)
        break;
      ++v15;
    }
    while (v15 < v13);
  }
  if (v8 <= 7)
  {
    v20 = *(unsigned int *)(a1 + 88);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v45 = vnegq_f32(v47);
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v21) & a3) != 0
          && (!*(_BYTE *)v7 || (C3DLightGetBaked(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v21)) & 1) == 0))
        {
          v22 = *(float32x4_t *)(*(_QWORD *)(a1 + 464) + 16 * v21);
          v23 = vsubq_f32(v22, v49);
          v24 = vsubq_f32(v23, vmaxnmq_f32(vminnmq_f32(v23, v47), v45));
          v25 = vmulq_f32(v24, v24);
          if ((vmovn_s32(vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))))).u8[0] & 1) != 0)
          {
            v43 = *(float32x4_t *)(*(_QWORD *)(a1 + 464) + 16 * v21);
            *((_BYTE *)v52 + v8) = __runtimeIndex(a1, 6u, v21);
            if (*(_BYTE *)(v7 + 52))
            {
              v51 = xmmword_1DD009A00;
              C3DAuthoringEnvironmentAppendDebugSegment(*(_QWORD *)(v7 + 8), 0, (float *)&v51, 0, v43, *a2);
            }
            ++v8;
          }
        }
        if (v8 > 7)
          break;
        ++v21;
      }
      while (v21 < v20);
    }
  }
  if (v8 <= 7)
  {
    v26 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v26)
    {
      v27 = 0;
      v28 = 0;
      v29 = vmulq_f32(v47, v47);
      v30 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]);
      v31 = v49;
      v31.f32[3] = v30;
      v48 = v30;
      v50 = v31;
      do
      {
        if ((*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v28) & a3) != 0)
        {
          if (!*(_BYTE *)v7
            || (Baked = C3DLightGetBaked(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v28)), v30 = v48, (Baked & 1) == 0))
          {
            v33 = (float32x4_t *)(*(_QWORD *)(a1 + 472) + v27);
            v34 = vsubq_f32(v50, *v33);
            v35 = vmulq_f32(v34, v34);
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0] <= (float)((float)(v30 + v33[2].f32[0]) * (float)(v30 + v33[2].f32[0])))
            {
              v36 = v33[1];
              v37 = vmulq_f32(v34, v36);
              v37.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u64[0];
              v38 = vmlsq_lane_f32(v34, v36, *(float32x2_t *)v37.f32, 0);
              v39 = vmulq_f32(v38, v38);
              if ((float)(v33[2].f32[2]
                         * (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0])- (float)(v33[2].f32[3] * v37.f32[0]))) < v30)
              {
                v46 = *v33;
                *((_BYTE *)v52 + v8) = __runtimeIndex(a1, 3u, v28);
                if (*(_BYTE *)(v7 + 52))
                {
                  v51 = xmmword_1DD009A00;
                  C3DAuthoringEnvironmentAppendDebugSegment(*(_QWORD *)(v7 + 8), 0, (float *)&v51, 0, v46, *a2);
                }
                ++v8;
                v30 = v48;
              }
            }
          }
        }
        if (v8 > 7)
          break;
        ++v28;
        v27 += 48;
      }
      while (v28 < v26);
    }
  }
  ++*(_DWORD *)(a1 + 4 * v8 + 116448);
  *a4 = v52[0];
  return v8;
}

uint64_t C3DLightingSystemGetLightingSetProgramHashCodes(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  uint8_t v11[4];
  _DWORD v12[7];

  v6 = 0;
  *(_QWORD *)&v12[5] = *MEMORY[0x1E0C80C00];
  *a3 = 0u;
  a3[1] = 0u;
  do
  {
    v7 = *(unsigned __int8 *)(a2 + v6);
    if (!*(_BYTE *)(a2 + v6))
      break;
    if ((_DWORD)v7 != 255 && *(_DWORD *)(a1 + 608) < v7)
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        C3DLightingSystemGetLightingSetProgramHashCodes_cold_1(v11, v12, v9);
    }
    *((_DWORD *)a3 + v6++) = *(_DWORD *)(a1 + 4 * v7 + 4712);
  }
  while (v6 != 8);
  return v6;
}

void C3DLightingSystemGetLightingSetDesc(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  NSObject *v11;
  unint64_t *v12;
  uint8_t v13;
  char v14[15];

  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a2 + v7);
    if (!*(_BYTE *)(a2 + v7))
      break;
    if ((_DWORD)v8 == 255 || *(_DWORD *)(a1 + 608) >= v8)
    {
      a3[v7 + 1] = *(_QWORD *)(a1 + 608 + 8 * v8 + 2056);
      v10 = a1 + 608 + 432 * v8 + 5136;
    }
    else
    {
      if ((C3DLightingSystemGetLightingSetDesc_done & 1) == 0)
      {
        C3DLightingSystemGetLightingSetDesc_done = 1;
        v11 = scn_default_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          C3DLightingSystemGetLightingSetDesc_cold_1(&v13, v14, v11);
      }
      v10 = 0;
      a3[v7 + 1] = 0;
    }
    a3[v7++ + 9] = v10;
    ++v6;
    if (v7 == 8)
    {
      *a3 = 8;
      return;
    }
  }
  *a3 = v7;
  if (v7 <= 7)
  {
    do
    {
      v12 = &a3[v6];
      v12[1] = 0;
      v12[9] = 0;
      ++v6;
    }
    while (v6 != 8);
  }
}

uint64_t C3DLightingSystemCheckLightingSetTextureUsage(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  unsigned int v5;
  NSObject *v7;
  uint8_t v9;
  _BYTE v10[15];

  for (i = 0; i != 8; ++i)
  {
    v5 = *(unsigned __int8 *)(a2 + i);
    if (!*(_BYTE *)(a2 + i))
      break;
    if (v5 == 255 || *(_DWORD *)(a1 + 608) >= v5)
    {
      if ((*(_BYTE *)(a1 + 432 * *(unsigned __int8 *)(a2 + i) + 5856) & 0x10) != 0)
        return 1;
    }
    else if ((C3DLightingSystemCheckLightingSetTextureUsage_done & 1) == 0)
    {
      C3DLightingSystemCheckLightingSetTextureUsage_done = 1;
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        C3DLightingSystemGetLightingSetDesc_cold_1(&v9, v10, v7);
    }
  }
  return 0;
}

void C3DLightingSystemEndProcessing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3)
    __C3DLightingSystemEndProcessing_block_invoke(a1, v3, a3, *(uint64_t **)(a1 + 224));
}

uint64_t C3DLightingSystemGetLightProbesSystem(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DLightingSystemGetIrradianceProbesCount_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

void C3DLightingSystemInvalidateShadowTechniqueForLight(uint64_t a1, const void *a2)
{
  __CFDictionary *v2;

  v2 = *(__CFDictionary **)(a1 + 116488);
  if (v2)
    CFDictionaryRemoveValue(v2, a2);
}

void C3DLightingSystemNextFrame(uint64_t a1)
{
  uint64_t v2;

  v2 = 0;
  *(_DWORD *)(a1 + 116760) = 0;
  do
  {
    bzero(*(void **)(a1 + 8 * v2 + 400), *(unsigned int *)(a1 + 4 * v2 + 68));
    ++v2;
  }
  while (v2 != 7);
  __CommitLightsUpdate(a1);
}

double _computeShadowMatrix(char a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17, __n128 a18, __n128 a19, __n128 a20)
{
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;

  v20 = 0;
  v21 = -0.5;
  if ((a1 & 2) == 0)
    v21 = 0.5;
  if ((a1 & 1) != 0)
    v22 = 1.0;
  else
    v22 = 0.5;
  if ((a1 & 1) != 0)
    v23 = 0.0;
  else
    v23 = 0.5;
  v24 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v25 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v24.i32[0] = 0.5;
  v26 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v25.f32[1] = v21;
  v26.f32[2] = v22;
  v27.i64[0] = 0x3F0000003F000000;
  v27.f32[2] = v23;
  v27.i32[3] = *(_DWORD *)(MEMORY[0x1E0C83FF0] + 60);
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a9;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v43 + v20) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(_OWORD *)((char *)&v39 + v20))), v25, (float32x2_t)v39.n128_u64[v20 / 8], 1), v26, *(float32x4_t *)((char *)&v39 + v20), 2), v27, *(float32x4_t *)((char *)&v39 + v20), 3);
    v20 += 16;
  }
  while (v20 != 64);
  v28 = 0;
  v29 = v43;
  v30 = v44;
  v31 = v45;
  v32 = v46;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v43 + v28) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v39 + v28))), v30, (float32x2_t)v39.n128_u64[v28 / 8], 1), v31, *(float32x4_t *)((char *)&v39 + v28), 2), v32, *(float32x4_t *)((char *)&v39 + v28), 3);
    v28 += 16;
  }
  while (v28 != 64);
  v33 = 0;
  v34 = v43;
  v35 = v44;
  v36 = v45;
  v37 = v46;
  v39 = a17;
  v40 = a18;
  v41 = a19;
  v42 = a20;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v43 + v33) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)((char *)&v39 + v33))), v35, (float32x2_t)v39.n128_u64[v33 / 8], 1), v36, *(float32x4_t *)((char *)&v39 + v33), 2), v37, *(float32x4_t *)((char *)&v39 + v33), 3);
    v33 += 16;
  }
  while (v33 != 64);
  return *(double *)v43.i64;
}

void __computeSplitPositions(uint64_t a1, unsigned int a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;

  v6 = a2 + 1;
  if (a2 == -1)
  {
    LODWORD(v6) = 0;
LABEL_6:
    v16 = v6;
    do
    {
      *(_DWORD *)(a1 + 4 * v16) = *(_DWORD *)(a1 + 4 * (v16 - 1));
      ++v16;
    }
    while ((_DWORD)v16 != 5);
    return;
  }
  v9 = 0;
  v10 = a4 - a3;
  v11 = (float)a2;
  v12 = a4 / a3;
  do
  {
    v13 = (float)v9 / v11;
    v14 = a3 + (float)(v10 * v13);
    v15 = powf(v12, v13);
    *(float *)(a1 + 4 * v9++) = (float)(v15 * a3) + (float)(a5 * (float)(v14 - (float)(v15 * a3)));
  }
  while (v6 != v9);
  if (v6 <= 4)
    goto LABEL_6;
}

double _computeOrthographicProjectionFromShadowBoundingBox(char a1, __n128 a2, __n128 a3)
{
  double v3;
  double v4;
  double v5;
  float64x2_t v6;
  float64x2_t v7;
  unsigned int v8;
  float v9;
  float64x2_t v10;
  unsigned int v11;
  __int128 v12;
  unsigned int v13;
  __int128 v14;
  unsigned int v15;
  uint64_t v16;
  _OWORD v18[4];
  _OWORD v19[4];

  v3 = (float)-a3.n128_f32[2];
  if (a2.n128_f32[2] < a3.n128_f32[2])
    v4 = (float)-a2.n128_f32[2];
  else
    v4 = v3 + 1.0;
  v5 = v3 - v4;
  v10 = vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  v6 = vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
  v7 = vsubq_f64(v6, v10);
  a3.n128_u16[0] = 0;
  a3.n128_u8[2] = 0;
  a3.n128_u8[3] = 0;
  a3.n128_u8[8] = 0;
  a3.n128_u8[9] = 0;
  a3.n128_u8[10] = 0;
  a3.n128_u8[11] = 0;
  a3.n128_u8[12] = 0;
  a3.n128_u8[13] = 0;
  a3.n128_u8[14] = 0;
  a3.n128_u8[15] = 0;
  *(float32x2_t *)&v10.f64[0] = vcvt_f32_f64(vdivq_f64(vnegq_f64(vaddq_f64(v10, v6)), v7));
  if ((a1 & 1) != 0)
  {
    *(float *)&v13 = 1.0 / v5;
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = v13;
  }
  else
  {
    *(float *)&v11 = 2.0 / v5;
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = v11;
    v3 = v4 + v3;
  }
  *((_QWORD *)&v14 + 1) = 0;
  *(float *)&v8 = 2.0 / v7.f64[0];
  *(_QWORD *)&v14 = v8;
  v9 = 2.0 / v7.f64[1];
  a3.n128_f32[1] = v9;
  *(float *)&v15 = v3 / v5;
  *(_QWORD *)&v10.f64[1] = __PAIR64__(1.0, v15);
  if ((a1 & 8) != 0)
  {
    v16 = 0;
    v18[0] = v14;
    v18[1] = a3;
    v18[2] = v12;
    v18[3] = v10;
    memset(v19, 0, sizeof(v19));
    do
    {
      v19[v16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, COERCE_FLOAT(v18[v16])), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)&v18[v16], 1), (float32x4_t)xmmword_1DD007960, (float32x4_t)v18[v16], 2), (float32x4_t)xmmword_1DD007E00, (float32x4_t)v18[v16], 3);
      ++v16;
    }
    while (v16 != 4);
    *(_QWORD *)&v14 = *(_QWORD *)&v19[0];
  }
  return *(double *)&v14;
}

void __computeStableCascade(uint64_t a1, uint64_t a2, char a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v8;
  simd_float4x4 v9;
  uint64_t v10;
  float v11;
  int32x2_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  __n128 v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float v49;
  float32x4_t v50;
  float32x2_t v51;
  int8x16_t v52;
  __int128 v53;
  int32x4_t v54;
  simd_float4 v55;
  simd_float4 v56;
  simd_float4 v57;
  simd_float4 v58;
  float32x4_t v60;
  __n128 v62;
  _OWORD v63[4];
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v76;
  simd_float4x4 v77;

  v76 = *MEMORY[0x1E0C80C00];
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), &v64);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), &v65);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), &v66);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 336), *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), &v67);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), &v68);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 296), &v69);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), &v70);
  scn_plane_intersect_3_planes(*(_QWORD *)(a1 + 320), *(_QWORD *)(a1 + 328), *(_QWORD *)(a1 + 304), *(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 264), &v71);
  v8 = 0;
  v9.columns[0] = 0uLL;
  do
  {
    v9.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v9.columns[0], *(float32x4_t *)((char *)&v64 + v8));
    v8 += 16;
  }
  while (v8 != 128);
  v10 = 0;
  v9.columns[1].i64[0] = 0x3E0000003E000000;
  v9.columns[1].i64[1] = 0x3E0000003E000000;
  v9.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v9.columns[0], (float32x4_t)v9.columns[1]);
  v9.columns[0].i32[0] = 0;
  do
  {
    v9.columns[1] = (simd_float4)vsubq_f32(*(float32x4_t *)((char *)&v64 + v10), (float32x4_t)v9.columns[3]);
    v9.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v9.columns[1], (float32x4_t)v9.columns[1]);
    v9.columns[0].f32[0] = fmaxf(v9.columns[0].f32[0], sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9.columns[1], 2), vaddq_f32((float32x4_t)v9.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.columns[1].f32, 1))).f32[0]));
    v10 += 16;
  }
  while (v10 != 128);
  v11 = ceilf(v9.columns[0].f32[0] * 16.0);
  v9.columns[0] = v9.columns[3];
  v9.columns[0].f32[3] = v11 * 0.0625;
  v54 = (int32x4_t)v9.columns[0];
  *(simd_float4 *)(a1 + 224) = v9.columns[0];
  v9.columns[3].i32[3] = *(_DWORD *)(a1 + 60);
  *(simd_float4 *)(a1 + 48) = v9.columns[3];
  v9.columns[0] = *(simd_float4 *)a1;
  v9.columns[1] = *(simd_float4 *)(a1 + 16);
  v9.columns[2] = *(simd_float4 *)(a1 + 32);
  v77 = __invert_f4(v9);
  v13 = 0;
  v14 = *(float32x4_t *)(a1 + 32);
  v15 = *(float32x4_t *)(a1 + 48);
  v16 = (int32x4_t)vmulq_f32(v14, v14);
  v16.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2), vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1))).u32[0];
  v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)));
  v19 = vmulq_n_f32(v14, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]);
  __asm { FMOV            V4.4S, #1.0 }
  v25 = _Q4;
  v28 = vdivq_f32(_Q4, v19);
  _Q4.f32[0] = -(float)(v11 * 0.0625);
  v26 = _Q4;
  v26.f32[1] = _Q4.f32[0];
  v57 = v77.columns[1];
  v58 = v77.columns[0];
  *(simd_float4x4 *)(a1 + 64) = v77;
  v26.f32[2] = v11 * 0.0625;
  v25.f32[0] = v11 * 0.0625;
  v55 = v77.columns[3];
  v56 = v77.columns[2];
  v27 = v25;
  v27.f32[1] = _Q4.f32[0];
  v27.f32[2] = v11 * 0.0625;
  v72 = v26;
  v73 = v27;
  v25.f32[1] = v11 * 0.0625;
  v25.f32[2] = v11 * 0.0625;
  _Q4.f32[1] = v11 * 0.0625;
  _Q4.f32[2] = v11 * 0.0625;
  v74 = v25;
  v75 = _Q4;
  v28.i32[3] = 1259902592;
  v29 = vsubq_f32(a4, a5);
  v30 = vaddq_f32(a4, a5);
  v31 = 0.0;
  do
  {
    v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)((char *)&v72 + v13 * 4))), *(float32x4_t *)(a1 + 16), *(float32x2_t *)&v72.f32[v13], 1), v14, *(float32x4_t *)((char *)&v72 + v13 * 4), 2), v15, *(float32x4_t *)((char *)&v72 + v13 * 4), 3);
    v32.i32[3] = 1.0;
    v33 = vmulq_f32(v28, vsubq_f32(v29, v32));
    v33.i32[3] = 0;
    v34 = vmulq_f32(v28, vsubq_f32(v30, v32));
    v34.i32[3] = 0;
    v35 = vminnmq_f32(v33, v34);
    v36 = vmaxnmq_f32(v33, v34);
    v37 = v35.f32[2];
    if (v35.f32[0] >= v35.f32[2])
      v37 = v35.f32[0];
    if (v37 < v35.f32[1])
      v37 = v35.f32[1];
    v38 = v36.f32[2];
    if (v36.f32[0] <= v36.f32[2])
      v38 = v36.f32[0];
    v36.i32[0] = v36.i32[1];
    if (v38 <= v36.f32[1])
      v36.f32[0] = v38;
    if (v36.f32[0] >= v37)
    {
      if (v37 > 0.0 && v37 < 10000000.0 || v36.f32[0] > 0.0 && (v37 = v36.f32[0], v36.f32[0] < 10000000.0))
        v31 = fmaxf(v31, v37);
    }
    v13 += 4;
  }
  while (v13 != 16);
  *(float *)v12.i32 = -(float)(v11 * 0.0625);
  v39 = (__n128)vdupq_laneq_s32(v54, 3);
  v39.n128_u32[1] = v54.u32[3];
  v39.n128_f32[2] = (float)(v11 * 0.0625) + v31;
  v60 = (float32x4_t)v39;
  v62 = (__n128)vdupq_lane_s32(v12, 0);
  *(double *)v40.i64 = _computeOrthographicProjectionFromShadowBoundingBox(a3, v62, v39);
  v44 = 0;
  *(float32x4_t *)(a1 + 128) = v40;
  *(float32x4_t *)(a1 + 144) = v41;
  *(float32x4_t *)(a1 + 160) = v42;
  *(float32x4_t *)(a1 + 176) = v43;
  v45.i64[0] = 0x3F0000003F000000;
  v45.i64[1] = 0x3F0000003F000000;
  v46 = vmulq_f32(vaddq_f32((float32x4_t)v62, v60), v45);
  v47 = vmulq_f32(vsubq_f32(v60, (float32x4_t)v62), v45);
  v46.i32[3] = 1.0;
  v47.i32[3] = 0;
  *(float32x4_t *)(a1 + 352) = v46;
  *(float32x4_t *)(a1 + 368) = v47;
  v63[0] = v58;
  v63[1] = v57;
  v63[2] = v56;
  v63[3] = v55;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v72 + v44 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(v63[v44])), v41, *(float32x2_t *)&v63[v44], 1), v42, (float32x4_t)v63[v44], 2), v43, (float32x4_t)v63[v44], 3);
    ++v44;
  }
  while (v44 != 4);
  v48 = vadd_f32(*(float32x2_t *)v75.f32, (float32x2_t)*(_OWORD *)&vmlaq_f32(vmlaq_f32(vmulq_f32(v72, (float32x4_t)0), (float32x4_t)0, v73), (float32x4_t)0, v74));
  v49 = *(float *)C3DLightGetRealShadowMapSize(a2).i32;
  *(float32x2_t *)v50.f32 = vmul_n_f32(v48, 0.5 * v49);
  v51 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vrndaq_f32(v50), *(float32x2_t *)v50.f32), 2.0 / v49);
  v52 = *(int8x16_t *)(a1 + 176);
  *(float32x2_t *)&v53 = vadd_f32(*(float32x2_t *)v52.i8, v51);
  *((_QWORD *)&v53 + 1) = vextq_s8(v52, v52, 8uLL).u64[0];
  *(_OWORD *)(a1 + 176) = v53;
}

void C3DLightingSystemComputeShadowMatrices(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, simd_float4 *a5, uint64_t a6, uint64_t a7, char a8)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *Value;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  NSObject *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __n128 *v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t *v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t *v103;
  simd_float4 v104;
  float v105;
  float v106;
  int AutomaticallyAdjustsShadowProjection;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float ShadowCascadeSplittingFactor;
  int32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  __int128 *v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  float *v128;
  unsigned int v129;
  uint64_t v130;
  simd_float4 v131;
  simd_float4 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  float32x2_t RealShadowMapSize;
  double ZNear;
  double ZFar;
  double v156;
  int8x16_t v157;
  int8x16_t v158;
  double v159;
  float v160;
  __int128 v161;
  __int128 v162;
  float64x2_t v163;
  __int128 v164;
  __int128 v165;
  float ShadowBias;
  float v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float64x2_t v177;
  __int128 v178;
  __int128 v179;
  int8x16_t v180;
  char *Matrix;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  _OWORD *v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  simd_float4 v191;
  simd_float4 v192;
  simd_float4 v193;
  float32x4_t *WorldMatrix;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  char v200;
  uint64_t v201;
  float32x4_t v202;
  float32x4_t v203;
  __int128 v204;
  float32x4_t v205;
  simd_float4 v206;
  char v207;
  simd_float4 v208;
  float32x4_t v209;
  simd_float4 v210;
  float32x4_t v211;
  simd_float4 v212;
  float32x4_t v213;
  uint64_t v214;
  simd_float4 v215;
  float32x4_t v216;
  simd_float4 v217;
  float32x4_t v218;
  int8x16_t v219;
  simd_float4 v220;
  int Type;
  uint64_t CullingSystem;
  float32x4_t v223;
  double v224;
  int8x16_t v225;
  int8x16_t v226;
  unsigned int ShadowCascadeCount;
  simd_float4 v228;
  __n128 v229;
  __n128 v230;
  __n128 v231;
  __n128 v232;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  float32x4_t v242;
  float32x4_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  float32x4_t v252;
  simd_float4 v253;
  simd_float4 v254;
  simd_float4 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  simd_float4x4 v261;
  simd_float4x4 v262;
  simd_float4x4 v263;
  simd_float4x4 v264;

  v260 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DLightingSystemComputeShadowMatrices_cold_6(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  __CommitLightsUpdate(a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (!Value)
  {
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      C3DLightingSystemComputeShadowMatrices_cold_1(v34, v35, v36);
    return;
  }
  v23 = Value >> 28;
  v24 = (Value & 0xFFFFFFF) - 1;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v23 + 200) + 8 * v24);
  if ((C3DLightGetCastsShadow(v25) & 1) == 0)
  {
    v37 = scn_default_log();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
      C3DLightingSystemComputeShadowMatrices_cold_5(v37, v38, v39, v40, v41, v42, v43, v44);
    return;
  }
  v26 = (float32x4_t *)(a1 + 116640);
  v231 = *(__n128 *)(a1 + 116704);
  v232 = *(__n128 *)(a1 + 116688);
  v229 = *(__n128 *)(a1 + 116736);
  v230 = *(__n128 *)(a1 + 116720);
  if (C3DLightSupportsShadowCascades(v25))
    ShadowCascadeCount = C3DLightGetShadowCascadeCount(v25);
  else
    ShadowCascadeCount = 1;
  v45 = *(_QWORD *)(a1 + 8 * v23 + 392);
  v46 = *(unsigned __int8 *)(v45 + v24);
  if (*(_BYTE *)(v45 + v24))
  {
    v214 = v25;
    if (v46 >= 9)
    {
      v47 = scn_default_log();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
        C3DLightingSystemComputeShadowMatrices_cold_4(v47, v27, v28, v29, v30, v31, v32, v33);
    }
    v48 = a1 + 1568 * (v46 - 1) + 116768;
    v49 = ShadowCascadeCount;
    goto LABEL_18;
  }
  v88 = *(_DWORD *)(a1 + 116760);
  if (v88 == 8)
  {
    if ((C3DLightingSystemComputeShadowMatrices_done & 1) == 0)
    {
      C3DLightingSystemComputeShadowMatrices_done = 1;
      v89 = scn_default_log();
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        C3DLightingSystemComputeShadowMatrices_cold_2(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    return;
  }
  v200 = *(_DWORD *)(a1 + 116760);
  v97 = v88 + 1;
  *(_DWORD *)(a1 + 116760) = v97;
  *(_BYTE *)(v45 + v24) = v97;
  v98 = v97 - 1;
  v99 = v25;
  v48 = a1 + 1568 * v98 + 116768;
  Type = C3DLightGetType(v99);
  v214 = v99;
  if (!C3DLightShouldAdjustsShadowProjection(v99))
  {
    v250 = 0u;
    v251 = 0u;
    v248 = 0u;
    v249 = 0u;
    v246 = 0u;
    v247 = 0u;
    v244 = 0u;
    v245 = 0u;
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v238 = 0u;
    v239 = 0u;
    C3DLightGetProjectionInfo(v99, (uint64_t)&v238);
    RealShadowMapSize = (float32x2_t)C3DLightGetRealShadowMapSize(v99);
    if (Type != 2)
    {
      if ((a8 & 8) != 0)
      {
        _Q1.i64[0] = 0;
      }
      else
      {
        RealShadowMapSize = vadd_f32(RealShadowMapSize, (float32x2_t)0xC0000000C0000000);
        __asm { FMOV            V1.2S, #1.0 }
      }
      *(float32x2_t *)&_Q1.u32[2] = RealShadowMapSize;
      v49 = ShadowCascadeCount;
      v252 = _Q1;
      Matrix = C3DProjectionInfosGetMatrix((char *)&v238, (uint64_t)&v252, a8);
      v182 = *((_OWORD *)Matrix + 3);
      v184 = *(_OWORD *)Matrix;
      v183 = *((_OWORD *)Matrix + 1);
      *(_OWORD *)(v48 + 160) = *((_OWORD *)Matrix + 2);
      *(_OWORD *)(v48 + 176) = v182;
      *(_OWORD *)(v48 + 128) = v184;
      *(_OWORD *)(v48 + 144) = v183;
      goto LABEL_84;
    }
    ZNear = C3DLightGetZNear(v99);
    ZFar = C3DLightGetZFar(v99);
    if (ZFar <= ZNear)
      ZFar = ZNear + 1.0;
    v224 = ZFar;
    v156 = __tanpi(0.25);
    if (v156 == 0.0)
      v159 = 1.0;
    else
      v159 = 1.0 / v156;
    v160 = v159;
    v161 = LODWORD(v160);
    LODWORD(v162) = 0;
    *((_QWORD *)&v162 + 1) = 0;
    *((float *)&v162 + 1) = v160;
    if ((a8 & 1) != 0)
    {
      v177.f64[0] = v224;
      v177.f64[1] = ZNear * v224;
      *(float32x2_t *)v158.i8 = vcvt_f32_f64(vdivq_f64(v177, (float64x2_t)vdupq_lane_s64(COERCE__INT64(ZNear - v224), 0)));
      v178 = xmmword_1DD008490;
      DWORD2(v178) = v158.i32[0];
      *(_QWORD *)&v179 = 0;
      *((_QWORD *)&v179 + 1) = v158.u32[1];
      *(_OWORD *)(a1 + 1568 * v98 + 116896) = LODWORD(v160);
      *(_OWORD *)(a1 + 1568 * v98 + 116912) = v162;
      *(_OWORD *)(a1 + 1568 * v98 + 116928) = v178;
      *(_OWORD *)(a1 + 1568 * v98 + 116944) = v179;
      if ((a8 & 8) != 0)
      {
        v190 = 0;
        v256 = LODWORD(v160);
        v257 = v162;
        v258 = v178;
        v259 = v179;
        v252 = 0uLL;
        v253 = 0uLL;
        v254 = 0uLL;
        v255 = 0uLL;
        v49 = ShadowCascadeCount;
        do
        {
          *(float32x4_t *)((char *)&v252 + v190) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, COERCE_FLOAT(*(__int128 *)((char *)&v256 + v190))), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)((char *)&v256 + v190), 1), (float32x4_t)xmmword_1DD007960, *(float32x4_t *)((char *)&v256 + v190), 2), (float32x4_t)xmmword_1DD007E00, *(float32x4_t *)((char *)&v256 + v190), 3);
          v190 += 16;
        }
        while (v190 != 64);
        v191 = v253;
        v192 = v254;
        v219 = (int8x16_t)v255;
        v193 = v255;
        v226 = (int8x16_t)v254;
        *(float32x4_t *)(v48 + 128) = v252;
        *(simd_float4 *)(v48 + 144) = v191;
        *(simd_float4 *)(v48 + 160) = v192;
        *(simd_float4 *)(v48 + 176) = v193;
        ShadowBias = C3DLightGetShadowBias(v99);
        v180 = vextq_s8(v226, v226, 8uLL);
        *(int32x2_t *)v180.i8 = vzip1_s32(*(int32x2_t *)v180.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
        v167 = -0.001;
        goto LABEL_83;
      }
      v225 = v158;
      ShadowBias = C3DLightGetShadowBias(v99);
    }
    else
    {
      v163.f64[0] = ZNear + v224;
      v163.f64[1] = (ZNear + ZNear) * v224;
      *(float32x2_t *)v157.i8 = vcvt_f32_f64(vdivq_f64(v163, (float64x2_t)vdupq_lane_s64(COERCE__INT64(ZNear - v224), 0)));
      v164 = xmmword_1DD008490;
      DWORD2(v164) = v157.i32[0];
      *(_QWORD *)&v165 = 0;
      v225 = v157;
      *((_QWORD *)&v165 + 1) = v157.u32[1];
      *(_OWORD *)(a1 + 1568 * v98 + 116896) = v161;
      *(_OWORD *)(a1 + 1568 * v98 + 116912) = v162;
      *(_OWORD *)(a1 + 1568 * v98 + 116928) = v164;
      *(_OWORD *)(a1 + 1568 * v98 + 116944) = v165;
      ShadowBias = C3DLightGetShadowBias(v99);
      if ((a8 & 8) != 0)
      {
        v167 = -0.001;
        v49 = ShadowCascadeCount;
LABEL_74:
        v180 = v225;
LABEL_83:
        *(float *)v180.i32 = -*(float *)v180.i32;
        *(float *)&v180.i32[2] = v167 * ShadowBias;
        *(int8x16_t *)(v48 + 192) = v180;
LABEL_84:
        WorldMatrix = C3DNodeGetWorldMatrix(a2);
        v195 = WorldMatrix[3];
        v197 = *WorldMatrix;
        v196 = WorldMatrix[1];
        *(float32x4_t *)(v48 + 32) = WorldMatrix[2];
        *(float32x4_t *)(v48 + 48) = v195;
        *(float32x4_t *)v48 = v197;
        *(float32x4_t *)(v48 + 16) = v196;
        *(simd_float4x4 *)(v48 + 64) = __invert_f4(*(simd_float4x4 *)v48);
LABEL_18:
        *(double *)v261.columns[0].i64 = _computeShadowMatrix(a8, *(__n128 *)(v48 + 64), *(__n128 *)(v48 + 80), *(__n128 *)(v48 + 96), *(__n128 *)(v48 + 112), *(__n128 *)(v48 + 128), *(__n128 *)(v48 + 144), *(__n128 *)(v48 + 160), *(__n128 *)(v48 + 176), v27, v28, v29, v30, v31, v32, v33, v232, v231, v230,
                                           v229);
        v210 = v261.columns[1];
        v212 = v261.columns[0];
        v206 = v261.columns[3];
        v208 = v261.columns[2];
        v262 = __invert_f4(v261);
        v220 = v262.columns[1];
        v228 = v262.columns[0];
        v215 = v262.columns[3];
        v217 = v262.columns[2];
        if (v49)
        {
          v57 = 0;
          __asm { FMOV            V0.4S, #1.0 }
          v204 = _Q0;
          do
          {
            if (a3)
            {
              v63 = (__int128 *)(v48 + 384 * v57);
              v64 = (_OWORD *)(a3 + (v57 << 6));
              v65 = *v63;
              v66 = v63[1];
              v67 = v63[3];
              v64[2] = v63[2];
              v64[3] = v67;
              *v64 = v65;
              v64[1] = v66;
            }
            if (a4)
            {
              v68 = (_OWORD *)(a4 + (v57 << 6));
              v69 = (_OWORD *)(v48 + 384 * v57);
              v70 = v69[8];
              v71 = v69[9];
              v72 = v69[11];
              v68[2] = v69[10];
              v68[3] = v72;
              *v68 = v70;
              v68[1] = v71;
            }
            if (v57)
            {
              v73 = (__n128 *)(v48 + 384 * v57);
              *(double *)v74.i64 = _computeShadowMatrix(a8, v73[4], v73[5], v73[6], v73[7], v73[8], v73[9], v73[10], v73[11], v50, v51, v52, v53, v54, v55, v56, v232, v231, v230,
                                     v229);
              v78 = 0;
              v252 = (float32x4_t)v228;
              v253 = v220;
              v254 = v217;
              v255 = v215;
              v238 = 0u;
              v239 = 0u;
              v240 = 0u;
              v241 = 0u;
              do
              {
                *(__int128 *)((char *)&v238 + v78) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, COERCE_FLOAT(*(_OWORD *)((char *)&v252 + v78))), v75, *(float32x2_t *)&v252.f32[v78 / 4], 1), v76, *(float32x4_t *)((char *)&v252 + v78), 2), v77, *(float32x4_t *)((char *)&v252 + v78), 3);
                v78 += 16;
              }
              while (v78 != 64);
              v79 = v238;
              v80 = v241;
              DWORD1(v79) = DWORD1(v239);
              DWORD2(v79) = DWORD2(v240);
              v81 = v48 + 384 * v57;
              *(_OWORD *)(v81 + 192) = v79;
              *(_OWORD *)(v81 + 208) = v80;
              v82 = a7;
              if (a5)
              {
                v83 = (float32x4_t *)&a5[4 * v57];
                *v83 = v74;
                v83[1] = v75;
                v83[2] = v76;
                v83[3] = v77;
              }
            }
            else
            {
              if (C3DLightGetType(v214) != 2)
              {
                *(_OWORD *)(v48 + 192) = v204;
                *(_OWORD *)(v48 + 208) = 0u;
              }
              v82 = a7;
              if (a5)
              {
                *a5 = v212;
                a5[1] = v210;
                a5[2] = v208;
                a5[3] = v206;
              }
            }
            if (a6)
            {
              v84 = *(_OWORD *)(v48 + 384 * v57 + 192);
              v85 = a6 + 16 * v57;
              HIDWORD(v84) = *(_DWORD *)(v85 + 12);
              *(_OWORD *)v85 = v84;
            }
            if (v82)
            {
              v86 = *(_OWORD *)(v48 + 384 * v57 + 208);
              v87 = v82 + 16 * v57;
              HIDWORD(v86) = *(_DWORD *)(v87 + 12);
              *(_OWORD *)v87 = v86;
            }
            ++v57;
          }
          while (v57 != v49);
        }
        return;
      }
    }
    v49 = ShadowCascadeCount;
    v167 = 0.001;
    goto LABEL_74;
  }
  if (Type == 1)
  {
    v100 = C3DGetScene(a2);
    CullingSystem = C3DSceneGetCullingSystem(v100);
    v237 = 0;
    v235 = 0u;
    v236 = 0u;
    C3DCullingSystemQueryMake(0, (uint64_t)&v235);
    *(_QWORD *)&v236 = 0x100000020;
    *(_QWORD *)&v235 = C3DLightGetCategoryBitMask(v99);
    C3DCullingSystemGetSceneBoundingBox(CullingSystem, (uint64_t)&v235);
    v218 = v102;
    v223 = v101;
    v103 = C3DNodeGetWorldMatrix(a2);
    v263.columns[1] = (simd_float4)v103[1];
    v104 = (simd_float4)v103[2];
    v252 = *v103;
    v253 = v263.columns[1];
    v263.columns[3] = *(simd_float4 *)(MEMORY[0x1E0C83FF0] + 48);
    v254 = v104;
    v255 = v263.columns[3];
    v263.columns[0] = (simd_float4)v252;
    v263.columns[2] = v254;
    v264 = __invert_f4(v263);
    v216 = (float32x4_t)v264.columns[0];
    v211 = (float32x4_t)v264.columns[2];
    v213 = (float32x4_t)v264.columns[1];
    v209 = (float32x4_t)v264.columns[3];
    v105 = *(float *)(a1 + 116672);
    v106 = fminf(*(float *)(a1 + 116676), C3DMeshElementGetPointSize(v99));
    AutomaticallyAdjustsShadowProjection = C3DLightGetAutomaticallyAdjustsShadowProjection(v99);
    v207 = AutomaticallyAdjustsShadowProjection;
    if (AutomaticallyAdjustsShadowProjection)
    {
      v108 = vmulq_f32(v218, v218);
      v108.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0]);
      v109 = vsubq_f32(v223, *(float32x4_t *)(a1 + 116656));
      v110 = vmulq_f32(v109, v109);
      v110.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1))).f32[0]);
      v105 = fmaxf(v105, v110.f32[0] - v108.f32[0]);
      v106 = fminf(v106, v108.f32[0] + v110.f32[0]);
    }
    ShadowCascadeSplittingFactor = C3DLightGetShadowCascadeSplittingFactor(v99);
    __computeSplitPositions(a1 + 1568 * v98 + 118304, ShadowCascadeCount, v105, v106, ShadowCascadeSplittingFactor);
    if (!ShadowCascadeCount)
    {
      LOBYTE(v127) = 0;
LABEL_78:
      v49 = ShadowCascadeCount;
      if (ShadowCascadeCount > v127)
      {
        *(double *)&v185 = _computeOrthographicProjectionFromShadowBoundingBox(a8, (__n128)vdupq_n_s32(0x47C34F80u), (__n128)vdupq_n_s32(0x47C35000u));
        v186 = (_OWORD *)(v48 + 384 * v127);
        v186[8] = v185;
        v186[9] = v187;
        v186[10] = v188;
        v186[11] = v189;
      }
      goto LABEL_18;
    }
    v112 = (int32x4_t)vmulq_f32(*v26, *v26);
    v112.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v112, 2), vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1))).u32[0];
    v113 = vrsqrte_f32((float32x2_t)v112.u32[0]);
    v114 = vmul_f32(v113, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v113, v113)));
    v203 = vmulq_n_f32(*v26, vmul_f32(v114, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v114, v114))).f32[0]);
    v205 = *(float32x4_t *)(a1 + 116656);
    v202 = vnegq_f32(v203);
    v115 = (__int128 *)(a1 + 116512);
    v117 = v218;
    v116 = v223;
    v119 = v211;
    v118 = v213;
    v120 = v216;
    v121 = v209;
    v122 = vaddq_f32(v209, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v213, *(float32x2_t *)v223.f32, 1), v216, v223.f32[0]), v211, v223, 2));
    v122.i32[3] = 1.0;
    v123 = v218;
    v123.i32[1] = v218.i32[0];
    v123.i32[2] = v218.i32[0];
    v124 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(v123, v216)), vabsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v218.f32, 1), (int32x4_t)v218), v213))), vabsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v117, (int32x4_t)v117), (int32x4_t)v218), v211)));
    v124.i32[2] = fminf(v124.f32[2], 10000.0);
    v198 = vaddq_f32(v122, v124);
    v199 = vsubq_f32(v122, v124);
    v125 = ShadowCascadeCount;
    v126 = a1 + 1568 * (v200 + 1);
    v127 = 0;
    v128 = (float *)(v126 + 116740);
    while (1)
    {
      v129 = v127;
      v130 = v48 + 384 * v127;
      v131 = v253;
      *(float32x4_t *)v130 = v252;
      *(simd_float4 *)(v130 + 16) = v131;
      v132 = v255;
      *(simd_float4 *)(v130 + 32) = v254;
      *(simd_float4 *)(v130 + 48) = v132;
      *(float32x4_t *)(v130 + 64) = v120;
      *(float32x4_t *)(v130 + 80) = v118;
      *(float32x4_t *)(v130 + 96) = v119;
      *(float32x4_t *)(v130 + 112) = v121;
      v134 = v115[1];
      v256 = *v115;
      v133 = v256;
      v257 = v134;
      v135 = v115[3];
      v136 = vmulq_f32(vmlaq_n_f32(v205, v202, *(v128 - 1)), v202);
      v137 = v202;
      v137.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0];
      v138 = vmulq_f32(v203, vmlaq_n_f32(v205, v202, *v128));
      v258 = v115[2];
      v259 = v135;
      v136.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0];
      v139 = v203;
      v139.i32[3] = v136.i32[0];
      *(_OWORD *)(v130 + 288) = v258;
      *(_OWORD *)(v130 + 304) = v135;
      *(_OWORD *)(v130 + 256) = v133;
      *(_OWORD *)(v130 + 272) = v134;
      *(float32x4_t *)(v130 + 320) = v139;
      *(float32x4_t *)(v130 + 336) = v137;
      if ((v207 & 1) != 0)
      {
        v201 = v127;
        v127 = *(_QWORD *)(v48 + 384 * v127 + 240);
        v238 = v256;
        v239 = v257;
        v240 = v258;
        v241 = v259;
        v242 = v139;
        v243 = v137;
        C3DConvexPolyhedronSetFrustum(v127, (uint64_t *)&v238);
        if (!C3DConvexPolyhedronClipAABB(v127, v223, v218))
          goto LABEL_55;
        v140 = C3DConvexPolyhedronComputeBoxInSpace(v127, v216, v213, v211, v209);
        v142 = vsubq_f32(v140, v141);
        v143 = vaddq_f32(v140, v141);
        v142.i32[2] = v199.i32[2];
        v143.i32[2] = v198.i32[2];
        v144.i64[0] = 0x3F0000003F000000;
        v144.i64[1] = 0x3F0000003F000000;
        C3DConvexPolyhedronSetAABB(v127, vmulq_f32(vaddq_f32(v142, v143), v144), vmulq_f32(vsubq_f32(v143, v142), v144));
        C3DConvexPolyhedronTransform(v127, &v252);
        if (!C3DConvexPolyhedronClipAABB(v127, v223, v218))
        {
LABEL_55:
          v120 = v216;
          v119 = v211;
          v118 = v213;
          v121 = v209;
          v127 = v201;
          goto LABEL_56;
        }
        v145 = C3DConvexPolyhedronComputeBoxInSpace(v127, v216, v213, v211, v209);
        v147 = vmulq_f32(vaddq_f32(v146, (float32x4_t)vdupq_n_s32(0x3C23D70Au)), (float32x4_t)vdupq_n_s32(0x3F800054u));
        v147.i32[3] = v146.i32[3];
        v148 = v48 + 384 * v129;
        *(float32x4_t *)(v148 + 352) = v145;
        *(float32x4_t *)(v148 + 368) = v147;
        *(double *)&v149 = _computeOrthographicProjectionFromShadowBoundingBox(a8, (__n128)vsubq_f32(v145, v147), (__n128)vaddq_f32(v145, v147));
        *(_OWORD *)(v148 + 128) = v149;
        *(_OWORD *)(v148 + 144) = v150;
        *(_OWORD *)(v148 + 160) = v151;
        *(_OWORD *)(v148 + 176) = v152;
        LODWORD(v127) = v201;
      }
      else
      {
        __computeStableCascade(v130, v214, a8, v116, v117);
      }
      v127 = (v127 + 1);
      v120 = v216;
      v119 = v211;
      v118 = v213;
      v121 = v209;
LABEL_56:
      ++v128;
      --v125;
      v117 = v218;
      v116 = v223;
      if (!v125)
        goto LABEL_78;
    }
  }
  v168 = scn_default_log();
  if (os_log_type_enabled(v168, OS_LOG_TYPE_FAULT))
    C3DLightingSystemComputeShadowMatrices_cold_3(v168, v169, v170, v171, v172, v173, v174, v175);
}

uint64_t C3DLightingSystemGetActiveNonAmbientLightCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 608);
}

uint64_t C3DLightingSystemApplyActiveNonAmbientLights(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (*(_DWORD *)(result + 608))
  {
    v3 = result;
    v4 = 0;
    v5 = result + 624;
    v6 = result + 6176;
    do
    {
      v7 = v4 + 1;
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a2, *(_QWORD *)(v5 + 8 * v4), v6);
      v6 += 432;
      v4 = v7;
    }
    while (v7 < *(unsigned int *)(v3 + 608));
  }
  return result;
}

uint64_t __lightsWithTechniqueEnumerator(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
}

void C3DLightingSystemSetShadowMapNameForNode(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, a3);
}

const void *C3DLightingSystemGetShadowMapNameForNode(uint64_t a1, const void *a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
}

const void *C3DLightingSystemGetActiveShadowCasterIndex(uint64_t a1, const void *a2)
{
  const void *result;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (result)
    return (const void *)*(unsigned __int8 *)((result & 0xFFFFFFF)
                                            + *(_QWORD *)(a1 + 8 * (result >> 28) + 392)
                                            - 1);
  return result;
}

uint64_t C3DLightingSystemGetActiveShadowCasterData(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    if (a2 >= 9)
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        C3DLightingSystemGetActiveShadowCasterData_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  else
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DLightingSystemGetActiveShadowCasterData_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  return a1 + 1568 * a2 + 115200;
}

uint64_t _isValidCustomPropertyType(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", objc_msgSend(a1, "objCType")), "isEqualToString:", CFSTR("{CGRect={CGPoint=dd}{CGSize=dd}}"));
  else
    return 0;
}

C3D::DrawBackgroundPass *C3D::DrawBackgroundPass::DrawBackgroundPass(C3D::DrawBackgroundPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::RenderPass *v4;

  v4 = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)v4 = off_1EA5999D8;
  bzero((char *)v4 + 240, 0x13A8uLL);
  return this;
}

const char *C3D::DrawBackgroundPass::name(C3D::DrawBackgroundPass *this)
{
  return "DrawBackgroundPass";
}

id C3D::DrawBackgroundPass::setup(C3D::DrawBackgroundPass *this)
{
  char *v2;
  uint64_t Scene;
  uint64_t EnginePipeline;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint32x2_t v11;
  float32x2_t v12;
  id result;
  __int128 v14;
  int v15;

  v2 = (char *)this + 4868;
  Scene = C3DEngineContextGetScene(*((_QWORD *)this + 2));
  EnginePipeline = C3DSceneGetEnginePipeline(Scene);
  *((_QWORD *)this + 658) = C3DSceneGetBackgroundEffectSlot(Scene, 0);
  C3D::Pass::setOutputCount(this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::DrawBackgroundPass *)((char *)this + 32), 0) + 8) = "BACKGROUND";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v14);
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::DrawBackgroundPass *)((char *)this + 32), 0);
  *(_OWORD *)(v5 + 16) = v14;
  *(_DWORD *)(v5 + 32) = v15;
  v6 = *((_QWORD *)this + 658);
  if (!v6 || C3DEffectSlotGetColorIfApplicable(v6))
  {
    v7 = C3D::PassDescriptor::outputAtIndex((C3D::DrawBackgroundPass *)((char *)this + 32), 0);
    *(_WORD *)(v7 + 66) = *(_WORD *)(v7 + 66) & 0xFFFC | 2;
  }
  *((_QWORD *)this + 30) = EnginePipeline;
  v2[66] = 0;
  *((_QWORD *)this + 622) = *((_QWORD *)this + 2);
  v2[64] = 1;
  *((_QWORD *)this + 621) = Scene;
  v8 = *((unsigned __int16 *)this + 19);
  *v2 = v8;
  v2[3] = 0;
  if ((_DWORD)v8)
    bzero((char *)this + 5152, 16 * v8);
  v2[4] = 0;
  *((_QWORD *)this + 612) = 0;
  *((_QWORD *)this + 613) = this;
  *((_QWORD *)this + 657) = 0;
  v2[65] = 0;
  v2[380] = 0;
  v2[2] = *((_DWORD *)this + 11);
  v2[68] = 0;
  *((_QWORD *)this + 614) = C3DSceneGetRootNode(Scene);
  v2[60] = 1;
  v9 = C3D::PassDescriptor::outputAtIndex((C3D::DrawBackgroundPass *)((char *)this + 32), 0);
  if (*((_BYTE *)this + 121))
  {
    v10 = *((_OWORD *)this + 8);
  }
  else
  {
    v11.i32[0] = *(unsigned __int16 *)(v9 + 16);
    v11.i32[1] = *(unsigned __int16 *)(v9 + 18);
    v12 = vcvt_f32_u32(v11);
    *(_QWORD *)&v10 = 0;
    *((float32x2_t *)&v10 + 1) = v12;
  }
  *((_OWORD *)this + 305) = v10;
  v2[61] = 0;
  C3DCullingContextSetupMatricesToIdentity((uint64_t)this + 240);
  result = C3DEngineContextGetAuthoringEnvironment(*((_QWORD *)this + 2), 0);
  *((_QWORD *)this + 620) = result;
  *((_WORD *)v2 + 31) = 0;
  return result;
}

void C3D::DrawBackgroundPass::execute(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _BYTE v5[27];
  __int16 v6;
  _BYTE v7[5024];

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v3 = (const void *)(v1 + 240);
  bzero(v5, 0x1410uLL);
  v5[24] = *(_BYTE *)(v2 + 4868);
  v6 = *(_WORD *)(v2 + 117);
  memcpy(v7, v3, sizeof(v7));
  v4 = *(_QWORD *)(v2 + 5264);
  if (v4)
    C3DEngineContextRenderBackgroundMap(*(_QWORD *)(v2 + 16), v4, (uint64_t)v5);
}

void sub_1DCE482E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _rendererCallback(float32x4_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v7;
  uint64_t UserInfo;
  void *v9;
  uint64_t Matrix4x4;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[4];

  memset(v25, 0, sizeof(v25));
  v7 = (void *)objc_msgSend(a3, "rendererDelegate");
  UserInfo = C3DEngineContextGetUserInfo((uint64_t)a1);
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 6);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  Matrix4x4 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 0);
  C3DMatrix4x4ToSCNMatrix4(Matrix4x4, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kProjectionTransform"));
  v11 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
  C3DMatrix4x4ToSCNMatrix4(v11, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kModelTransform"));
  v12 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
  C3DMatrix4x4ToSCNMatrix4(v12, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kViewTransform"));
  C3DEngineContextComputeNormalMatrix(a1, v25);
  C3DMatrix4x4ToSCNMatrix4((uint64_t)v25, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kNormalTransform"));
  v13 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
  v14 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
  C3DMatrix4x4Mult(v13, v14, v25);
  C3DMatrix4x4ToSCNMatrix4((uint64_t)v25, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kModelViewTransform"));
  v15 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 0);
  C3DMatrix4x4Mult((uint64_t)v25, v15, v25);
  C3DMatrix4x4ToSCNMatrix4((uint64_t)v25, &v21);
  v17 = v21;
  v18 = v22;
  v19 = v23;
  v20 = v24;
  objc_msgSend(v9, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v17), CFSTR("kModelViewProjectionTransform"));
  if (a4)
    objc_msgSend(v9, "setValue:forKey:", C3DFXPassGetName(a4), CFSTR("kRenderPassName"));
  return objc_msgSend(v7, "renderNode:renderer:arguments:", a3, UserInfo, v9);
}

void sub_1DCE4AEAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4B0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1DCE4B2A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4B46C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4D0BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4D194(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4D27C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4D388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE4D490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SCNNodeRemoveDeadParticleInstance(uint64_t result, uint64_t a2)
{
  if (result)
    return -[SCNNode _removeDeadParticleSystem:](+[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", result), "_removeDeadParticleSystem:", a2);
  return result;
}

void sub_1DCE4FE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _findClone(void *a1, void *a2, void *a3)
{
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (a1 == a2)
    return (uint64_t)a3;
  v6 = objc_msgSend((id)objc_msgSend(a3, "childNodes"), "count");
  v7 = objc_msgSend((id)objc_msgSend(a2, "childNodes"), "count");
  if (v7 >= v6)
  {
    if (v6)
    {
      v10 = v7;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = (void *)objc_msgSend((id)objc_msgSend(a2, "childNodes"), "objectAtIndex:", v11);
        if (objc_msgSend(v13, "isGizmo"))
        {
          do
          {
            if (++v11 >= v10)
              break;
            v13 = (void *)objc_msgSend((id)objc_msgSend(a2, "childNodes"), "objectAtIndex:", v11);
          }
          while ((objc_msgSend(v13, "isGizmo") & 1) != 0);
        }
        if ((objc_msgSend(v13, "isGizmo") & 1) != 0)
          break;
        result = _findClone(a1, v13, objc_msgSend((id)objc_msgSend(a3, "childNodes"), "objectAtIndex:", v12));
        if (!result && ++v12 < v6 && ++v11 < v10)
          continue;
        return result;
      }
    }
  }
  else
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _findClone_cold_1();
  }
  return 0;
}

void OUTLINED_FUNCTION_11_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1DCE522D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1DCE546B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

uint64_t C3DSceneGetPhysicsWorld(id *a1, uint64_t a2)
{
  return objc_msgSend(C3DEntityGetObjCWrapper(a1), "_physicsWorldCreateIfNeeded:", a2);
}

__n128 C3DPhysicsWorldGetWorldGravity(void *a1, _OWORD *a2)
{
  int v3;
  int v4;
  __int128 v5;
  __n128 result;

  objc_msgSend(a1, "gravity");
  DWORD1(v5) = v3;
  DWORD2(v5) = v4;
  *a2 = v5;
  result.n128_u64[0] = v5;
  result.n128_u32[2] = DWORD2(v5);
  return result;
}

uint64_t C3DSceneRegisterNodePhysicsField(id *a1, id *a2)
{
  id *ObjCWrapper;
  id *v4;
  uint64_t result;

  ObjCWrapper = C3DEntityGetObjCWrapper(a1);
  v4 = C3DEntityGetObjCWrapper(a2);
  result = objc_msgSend(v4, "physicsField");
  if (result)
    return objc_msgSend((id)objc_msgSend(ObjCWrapper, "physicsWorld"), "_addFieldToWorld:", objc_msgSend(v4, "physicsField"));
  return result;
}

uint64_t C3DSceneUnregisterNodePhysicsField(id *a1, id *a2)
{
  id *ObjCWrapper;
  id *v4;
  uint64_t result;

  ObjCWrapper = C3DEntityGetObjCWrapper(a1);
  v4 = C3DEntityGetObjCWrapper(a2);
  result = objc_msgSend(v4, "physicsField");
  if (result)
    return objc_msgSend((id)objc_msgSend(ObjCWrapper, "physicsWorld"), "_removeFieldFromWorld:", objc_msgSend(v4, "physicsField"));
  return result;
}

uint64_t __inferRenderingAPIFromGLContext(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 1;
  if (objc_msgSend(a1, "API") == 3)
    return 2;
  return 1;
}

void deleteGLFramebufferInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  if (*a1)
  {
    C3DRendererContextDeleteFramebuffer(a2, *a1, 1);
    CFRelease((CFTypeRef)*a1);
    *a1 = 0;
  }
  v4 = a1[1];
  if (v4)
  {
    C3DRendererContextDeleteFramebuffer(a2, v4, 1);
    CFRelease((CFTypeRef)a1[1]);
    a1[1] = 0;
  }
}

BOOL createGLFramebufferInfo(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, double a5, float32x2_t a6)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  int32x2_t v27;
  int8x8_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 result;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  double v45;

  if (*a1)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      createGLFramebufferInfo_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if (a1[1])
  {
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      createGLFramebufferInfo_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  v26 = vcvt_f32_f64(*((float64x2_t *)a1 + 1));
  a6.i32[0] = 0;
  v27 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_f32(v26, a6), 0), (int8x8_t)__PAIR64__(v26.u32[1], 1.0), (int8x8_t)v26);
  v28 = vbsl_s8((int8x8_t)vdup_lane_s32(vceq_f32((float32x2_t)vdup_lane_s32(v27, 1), a6), 0), (int8x8_t)__PAIR64__(1.0, v27.u32[0]), (int8x8_t)v27);
  v45 = *(double *)&v28;
  if (*(float *)v28.i32 <= 0.0 || *(float *)&v28.i32[1] <= 0.0)
  {
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      createGLFramebufferInfo_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
  }
  v37 = C3DFramebufferCreate();
  *a1 = v37;
  C3DFramebufferSetSize(v37, v45);
  *(_QWORD *)(*a1 + 136) = a4;
  v38 = C3DRenderTargetDescriptionMake(1u, a4 == 0);
  C3DFramebufferAddRenderTargetDescription(*a1, 0, v38);
  if (a2 <= 1)
  {
    v39 = C3DRenderTargetDescriptionMake(0x29u, 0);
    C3DFramebufferAddRenderTargetDescription(*a1, 4, v39);
  }
  result = C3DRendererContextSetupFramebuffer(a3, *a1);
  if (a2 >= 2 && result)
  {
    v41 = C3DFramebufferCreate();
    a1[1] = v41;
    v42 = a2;
    C3DFramebufferSetSampleCount(v41, a2);
    C3DFramebufferSetSize(a1[1], v45);
    v43 = C3DRenderTargetDescriptionMake(1u, 0);
    v44 = C3DRenderTargetDescriptionMake(0x29u, 0);
    C3DFramebufferAddRenderTargetDescription(a1[1], 0, v43 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v42 << 8));
    C3DFramebufferAddRenderTargetDescription(a1[1], 4, v44 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v42 << 8));
    return C3DRendererContextSetupFramebuffer(a3, a1[1]);
  }
  return result;
}

void _SCNGetEffectiveLegacyFieldOfView(double *a1, double *a2, double a3, double a4, long double a5)
{
  double v7;
  double v9;
  double v11;

  v7 = a3;
  if (a4 == 0.0 && a3 == 0.0)
    v9 = 60.0;
  else
    v9 = a4;
  if (a3 != 0.0 && v9 != 0.0)
  {
    v11 = tan(a3 / 180.0 * 3.14159265);
    if (v11 / tan(v9 / 180.0 * 3.14159265) <= a5)
      v7 = 0.0;
    else
      v9 = 0.0;
  }
  *a1 = v7;
  *a2 = v9;
}

double _SCNConvertFieldOfViewFromVerticalToHorizontal(double a1, double a2)
{
  double v3;
  double v4;

  v3 = __tanpi(a1 / 360.0);
  v4 = atan(v3 * a2);
  if (v4 < 0.0)
    v4 = 3.14159265 - v4;
  return v4 * 114.591559;
}

double _SCNConvertFieldOfViewFromHorizontalToVertical(double a1, double a2)
{
  double v3;
  double v4;

  v3 = __tanpi(a1 / 360.0);
  v4 = atan(v3 / a2);
  if (v4 < 0.0)
    v4 = 3.14159265 - v4;
  return v4 * 114.591559;
}

uint64_t _wantsMainPassCustomPostProcessEncodingEngineContextCallback(uint64_t a1)
{
  uint64_t UserInfo;

  UserInfo = C3DEngineContextGetUserInfo(a1);
  if (!UserInfo)
    return 0;
  if ((*(_WORD *)(UserInfo + 292) & 0x200) == 0)
  {
    if ((*(_WORD *)(UserInfo + 296) & 0x200) == 0)
      return 0;
    UserInfo = *(_QWORD *)(UserInfo + 344);
  }
  return objc_msgSend((id)UserInfo, "_wantsCustomMainPassPostProcessForRenderer:", UserInfo);
}

uint64_t _mainPassCustomPostProcessUsesExtraRenderTargetEngineContextCallback(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = C3DEngineContextGetUserInfo(a1);
  if (result)
  {
    v4 = result;
    if ((*(_WORD *)(result + 292) & 0x200) != 0)
    {
      v5 = 0;
    }
    else
    {
      if ((*(_WORD *)(result + 296) & 0x200) == 0)
        return 0;
      v5 = 0;
      result = *(_QWORD *)(result + 344);
    }
    result = objc_msgSend((id)result, "_customMainPassPostProcessUsesExtraRenderTargetForRenderer:pixelFormat:", v4, &v5);
    *a2 = v5;
  }
  return result;
}

uint64_t _useSpecificMainPassClearColorEngineContextCallback(uint64_t a1, uint64_t a2)
{
  uint64_t UserInfo;
  uint64_t v4;

  UserInfo = C3DEngineContextGetUserInfo(a1);
  if (!UserInfo)
    return 0;
  v4 = UserInfo;
  if ((*(_WORD *)(UserInfo + 292) & 0x200) == 0)
  {
    if ((*(_WORD *)(UserInfo + 296) & 0x200) == 0)
      return 0;
    UserInfo = *(_QWORD *)(UserInfo + 344);
  }
  return objc_msgSend((id)UserInfo, "_usesSpecificMainPassClearColorForRenderer:clearColor:", v4, a2);
}

void sub_1DCE578D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *_readSubdivCacheEngineContextCallback(uint64_t a1, uint64_t a2)
{
  void *result;

  result = (void *)C3DEngineContextGetUserInfo(a1);
  if (result)
    return (void *)objc_msgSend(result, "_readSubdivCacheForHash:", a2);
  return result;
}

void *_writeSubdivCacheEngineContextCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *result;

  result = (void *)C3DEngineContextGetUserInfo(a1);
  if (result)
    return (void *)objc_msgSend(result, "_writeSubdivCacheForHash:dataProvider:", a2, a3);
  return result;
}

uint64_t _encodeMainPassCustomPostProcessEngineContextCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  double v5;

  result = C3DEngineContextGetUserInfo(a1);
  if (result)
  {
    v4 = result;
    v5 = *(double *)(result + 160);
    if (v5 == 0.0)
      v5 = *(double *)(result + 144);
    if ((*(_WORD *)(result + 292) & 0x200) != 0)
      result = objc_msgSend((id)result, "_encodeCustomMainPassPostProcessForRenderer:atTime:helper:", result, a2, v5);
    if ((*(_WORD *)(v4 + 296) & 0x200) != 0)
      return objc_msgSend(*(id *)(v4 + 344), "_encodeCustomMainPassPostProcessForRenderer:atTime:helper:", *(_QWORD *)(v4 + 344), a2, v5);
  }
  return result;
}

void *_renderOverlayEngineContextCallback(uint64_t a1)
{
  void *result;

  result = (void *)C3DEngineContextGetUserInfo(a1);
  if (result)
    return (void *)objc_msgSend(result, "_drawOverlaySceneAtTime:", C3DEngineContextGetSceneTime(a1));
  return result;
}

void sub_1DCE58BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL SCNKitSplitKVCPath(void *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = objc_msgSend(a1, "rangeOfString:", CFSTR("."));
  v8 = v7;
  if (v7 == 1)
  {
    v9 = v6;
    *a2 = objc_msgSend(a1, "substringWithRange:", 0, v6);
    v10 = objc_msgSend(a1, "substringWithRange:", v9 + 1, objc_msgSend(a1, "length") + ~v9);
  }
  else
  {
    v10 = 0;
    *a2 = a1;
  }
  *a3 = v10;
  return v8 == 1;
}

CFTypeRef SCNCachedImageProxyFromSource(void *a1)
{
  uint64_t SharedInstance;

  SharedInstance = C3DResourceCacheGetSharedInstance();
  return C3DResourceCacheGetResource(SharedInstance, a1);
}

void SCNCacheImageProxyWithSource(const void *a1, void *a2)
{
  uint64_t SharedInstance;

  SharedInstance = C3DResourceCacheGetSharedInstance();
  C3DResourceCacheAddResource(SharedInstance, a2, a1);
}

uint64_t C3DColor4ToRGBCFColor(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CEA478], "scn_colorWithC3DColor:", a1);
}

uint64_t SCNLightTypeToC3DLightType(void *a1)
{
  uint64_t result;
  NSObject *v3;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("ambient")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("directional")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("omni")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("spot")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("probe")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("ies")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("area")) & 1) != 0)
    return 6;
  v3 = scn_default_log();
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    SCNLightTypeToC3DLightType_cold_1();
    return 0;
  }
  return result;
}

SCNLightType SCNLightTypeFromC3DLightType(int a1)
{
  const SCNLightType *v1;
  SCNLightType result;

  switch(a1)
  {
    case 0:
      v1 = &SCNLightTypeAmbient;
      goto LABEL_10;
    case 1:
      v1 = &SCNLightTypeDirectional;
      goto LABEL_10;
    case 2:
      v1 = &SCNLightTypeOmni;
      goto LABEL_10;
    case 3:
      v1 = &SCNLightTypeSpot;
      goto LABEL_10;
    case 4:
      v1 = &SCNLightTypeProbe;
      goto LABEL_10;
    case 5:
      v1 = &SCNLightTypeIES;
      goto LABEL_10;
    case 6:
      v1 = &SCNLightTypeArea;
LABEL_10:
      result = *v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t SCNEncodeColor(void *a1, CFTypeRef cf, uint64_t a3)
{
  CGColor *v5;
  __int128 v6;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = (CGColor *)objc_msgSend((id)scn_NSColorFromCGColorIfApplicable(cf), "CGColor");
  if (v5)
    *(double *)&v6 = C3DCGColorGetLinearExtendedSRGBComponents(v5);
  else
    v6 = xmmword_1DD007610;
  v8 = v6;
  return objc_msgSend(a1, "encodeBytes:length:forKey:", &v8, 16, a3);
}

uint64_t SCNDecodeColor(void *a1, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t v3;
  CGColorRef ExtendedLinearSRGBWithComponents;
  CGColorRef v5;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  v2 = (float32x4_t *)objc_msgSend(a1, "decodeBytesForKey:returnedLength:", a2, &v8);
  v3 = 0uLL;
  if (v8 == 16)
    v3 = *v2;
  ExtendedLinearSRGBWithComponents = C3DCGColorCreateExtendedLinearSRGBWithComponents(v3);
  if (!ExtendedLinearSRGBWithComponents)
    return 0;
  v5 = ExtendedLinearSRGBWithComponents;
  v6 = objc_msgSend(MEMORY[0x1E0CEA478], "colorWithCGColor:", ExtendedLinearSRGBWithComponents);
  CFRelease(v5);
  return v6;
}

uint64_t SCNEncodeVector3(void *a1, uint64_t a2, float a3, float a4, float a5)
{
  _DWORD v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(float *)v6 = a3;
  *(float *)&v6[1] = a4;
  *(float *)&v6[2] = a5;
  return objc_msgSend(a1, "encodeBytes:length:forKey:", v6, 12, a2);
}

uint64_t SCNEncodeVector4(void *a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  _DWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(float *)v7 = a3;
  *(float *)&v7[1] = a4;
  *(float *)&v7[2] = a5;
  *(float *)&v7[3] = a6;
  return objc_msgSend(a1, "encodeBytes:length:forKey:", v7, 16, a2);
}

uint64_t SCNEncodeSCNMatrix4(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "encodeBytes:length:forKey:", a3, 64, a2);
}

float SCNDecodeVector3(void *a1, uint64_t a2)
{
  uint64_t v2;
  float result;
  uint64_t v4;

  v4 = 0;
  v2 = objc_msgSend(a1, "decodeBytesForKey:returnedLength:", a2, &v4);
  result = 0.0;
  if (v4 == 12)
    return *(float *)v2;
  return result;
}

float SCNDecodeVector4(void *a1, uint64_t a2)
{
  uint64_t v2;
  float result;
  uint64_t v4;

  v4 = 0;
  v2 = objc_msgSend(a1, "decodeBytesForKey:returnedLength:", a2, &v4);
  result = 0.0;
  if (v4 == 16)
    return *(float *)v2;
  return result;
}

_OWORD *SCNDecodeSCNMatrix4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _OWORD *result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  result = (_OWORD *)objc_msgSend(a1, "decodeBytesForKey:returnedLength:", a2, &v8);
  if (v8 == 64)
  {
    v5 = result[1];
    *a3 = *result;
    a3[1] = v5;
    v6 = result[2];
    v7 = result[3];
  }
  else
  {
    *a3 = *(_OWORD *)&SCNMatrix4Identity.m11;
    a3[1] = *(_OWORD *)&SCNMatrix4Identity.m21;
    v6 = *(_OWORD *)&SCNMatrix4Identity.m31;
    v7 = *(_OWORD *)&SCNMatrix4Identity.m41;
  }
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t _SCNArrayFromCGPathApply(void *a1, unsigned int *a2)
{
  void *v4;
  int v5;
  double *v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  NSObject *v12;
  uint8_t v13[16];

  v4 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v5 = *a2;
  objc_msgSend(v4, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a2), CFSTR("type"));
  v6 = (double *)*((_QWORD *)a2 + 1);
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  switch(v5)
  {
    case 0:
    case 1:
      v8 = (void *)MEMORY[0x1E0CB3B18];
      v9 = *v6;
      v10 = v6[1];
      goto LABEL_5;
    case 2:
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "SCN_valueWithCGPoint:", *v6, v6[1]));
      v8 = (void *)MEMORY[0x1E0CB3B18];
      v9 = v6[2];
      v10 = v6[3];
      goto LABEL_5;
    case 3:
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "SCN_valueWithCGPoint:", *v6, v6[1]));
      objc_msgSend(v7, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "SCN_valueWithCGPoint:", v6[2], v6[3]));
      v8 = (void *)MEMORY[0x1E0CB3B18];
      v9 = v6[4];
      v10 = v6[5];
LABEL_5:
      objc_msgSend(v7, "addObject:", objc_msgSend(v8, "SCN_valueWithCGPoint:", v9, v10));
      break;
    case 4:
      break;
    default:
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1DCCB8000, v12, OS_LOG_TYPE_DEFAULT, "Warning: CGPath archiving: unknown path element type", v13, 2u);
      }
      break;
  }
  objc_msgSend(v4, "setValue:forKey:", v7, CFSTR("points"));
  return objc_msgSend(a1, "addObject:", v4);
}

CGPath *_SCNCGPathCreateFromArray(void *a1)
{
  CGPath *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Mutable = CGPathCreateMutable();
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v33 != v5)
          objc_enumerationMutation(a1);
        v7 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
        v8 = objc_msgSend((id)objc_msgSend(v7, "objectForKey:", CFSTR("type")), "intValue");
        v9 = (void *)objc_msgSend(v7, "objectForKey:", CFSTR("points"));
        v10 = v9;
        switch(v8)
        {
          case 0:
            objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", 0), "SCN_CGPointValue");
            CGPathMoveToPoint(Mutable, 0, v11, v12);
            break;
          case 1:
            objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", 0), "SCN_CGPointValue");
            CGPathAddLineToPoint(Mutable, 0, v13, v14);
            break;
          case 2:
            objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", 0), "SCN_CGPointValue");
            v16 = v15;
            v18 = v17;
            objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 1), "SCN_CGPointValue");
            CGPathAddQuadCurveToPoint(Mutable, 0, v16, v18, v19, v20);
            break;
          case 3:
            objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", 0), "SCN_CGPointValue");
            v22 = v21;
            v24 = v23;
            objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 1), "SCN_CGPointValue");
            v26 = v25;
            v28 = v27;
            objc_msgSend((id)objc_msgSend(v10, "objectAtIndex:", 2), "SCN_CGPointValue");
            CGPathAddCurveToPoint(Mutable, 0, v22, v24, v26, v28, v29, v30);
            break;
          case 4:
            CGPathCloseSubpath(Mutable);
            break;
          default:
            continue;
        }
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v4);
  }
  return Mutable;
}

uint64_t SCNEncodeCGPathForKey(uint64_t a1, const CGPath *a2, uint64_t a3)
{
  return _SCNEncodeCGPathForKey(a1, a2, 0, a3);
}

uint64_t _SCNEncodeCGPathForKey(uint64_t result, const CGPath *a2, _DWORD *a3, uint64_t a4)
{
  void *v7;
  void *v8;
  double v9;
  _QWORD v10[2];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v7 = (void *)result;
    v8 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    CGPathApply(a2, v8, (CGPathApplierFunction)_SCNArrayFromCGPathApply);
    if (a3)
    {
      v10[1] = CFSTR("flatness");
      v11[0] = v8;
      v10[0] = CFSTR("path");
      LODWORD(v9) = *a3;
      v11[1] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v9);
      return objc_msgSend(v7, "encodeObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, v10, 2), a4);
    }
    else
    {
      return objc_msgSend(v7, "encodeObject:forKey:", v8, a4);
    }
  }
  return result;
}

uint64_t SCNEncodeBezierPathForKey(uint64_t a1, void *a2, uint64_t a3)
{
  double v6;
  int v8;

  objc_msgSend(a2, "flatness");
  *(float *)&v6 = v6;
  v8 = LODWORD(v6);
  return _SCNEncodeCGPathForKey(a1, (const CGPath *)objc_msgSend(a2, "CGPath"), &v8, a3);
}

CGPath *SCNDecodeCGPathForKey(void *a1, uint64_t a2)
{
  CGPath *result;

  result = _SCNDecodeCGPathForKey(a1, a2, 0);
  if (result)
    return (CGPath *)CFAutorelease(result);
  return result;
}

CGPath *_SCNDecodeCGPathForKey(void *a1, uint64_t a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;

  v6 = (void *)MEMORY[0x1E0C99E60];
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = (void *)objc_msgSend(a1, "decodeObjectOfClasses:forKey:", objc_msgSend(v6, "setWithObjects:", v7, v8, v9, objc_opt_class(), 0), a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (a3)
      {
        objc_msgSend((id)objc_msgSend(v10, "valueForKey:", CFSTR("flatness")), "floatValue");
        *a3 = v11;
      }
      v10 = (void *)objc_msgSend(v10, "valueForKey:", CFSTR("path"));
    }
    else
    {
      v10 = 0;
    }
  }
  return _SCNCGPathCreateFromArray(v10);
}

void *SCNDecodeBezierPathForKey(void *a1, uint64_t a2)
{
  CGPath *v2;
  CGPath *v3;
  void *v4;
  float v6;

  v6 = -1.0;
  v2 = _SCNDecodeCGPathForKey(a1, a2, &v6);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CEA390], "bezierPathWithCGPath:", v2);
  CFRelease(v3);
  if (v6 >= 0.0)
    objc_msgSend(v4, "setFlatness:", v6);
  return v4;
}

uint64_t SCNEncodeEntity(void *a1, void *a2)
{
  uint64_t result;

  result = C3DEntityGetID(objc_msgSend(a2, "__CFObject"));
  if (result)
    return objc_msgSend(a1, "encodeObject:forKey:", result, CFSTR("entityID"));
  return result;
}

CFTypeRef SCNDecodeEntity(void *a1, void *a2)
{
  CFTypeRef result;

  result = (CFTypeRef)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), CFSTR("entityID"));
  if (result)
    return C3DEntitySetID(objc_msgSend(a2, "__CFObject"), result);
  return result;
}

uint64_t SCNEncodeMTLTextureAsDataForKey(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = SCNCreateDataWithMTLTexture(a2);
  if (result)
    return objc_msgSend(a1, "encodeObject:forKey:", result, a3);
  return result;
}

uint64_t SCNEncodeUnsafeObjectForKey(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a2, 1, 0);
  if (result)
    return objc_msgSend(a1, "encodeObject:forKey:", result, a3);
  return result;
}

uint64_t SCNDecodeUnsecureColor(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v7[0] = objc_opt_class();
  v7[1] = objc_opt_class();
  v5 = objc_msgSend(a1, "decodeObjectOfClasses:forKey:", objc_msgSend(v4, "setWithArray:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v7, 2)), a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClasses:fromData:error:", objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class()), v5, 0);
    else
      return 0;
  }
  return v5;
}

uint64_t SCNDecodeUnsafeObjectForKey(void *a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v3 = a3;
  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = objc_msgSend(a3, "setByAddingObject:", objc_opt_class());
  else
    v6 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v7 = objc_msgSend(a1, "decodeObjectOfClasses:forKey:", v6, a2);
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend(a1, "requiresSecureCoding"))
      {
        v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v7, 0);
        if (!v3)
        {
          if (SCNUserInfoClasses_onceToken != -1)
            dispatch_once(&SCNUserInfoClasses_onceToken, &__block_literal_global_83);
          v3 = (void *)SCNUserInfoClasses_set;
        }
        v7 = objc_msgSend(v8, "decodeObjectOfClasses:forKey:", v3, *MEMORY[0x1E0CB2CD0]);
        objc_msgSend(v8, "finishDecoding");

      }
      else
      {
        v9 = objc_msgSend(MEMORY[0x1E0CB3710], "unarchiveObjectWithData:", v7);
        if (objc_msgSend(v3, "count"))
        {
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          v10 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (!v10)
            return 0;
          v11 = *(_QWORD *)v15;
LABEL_15:
          v12 = 0;
          while (1)
          {
            if (*(_QWORD *)v15 != v11)
              objc_enumerationMutation(v3);
            if ((objc_opt_isKindOfClass() & 1) != 0)
              break;
            if (v10 == ++v12)
            {
              v10 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
              v7 = 0;
              if (v10)
                goto LABEL_15;
              return v7;
            }
          }
        }
        return v9;
      }
    }
  }
  return v7;
}

uint64_t SCNUserInfoClasses()
{
  if (SCNUserInfoClasses_onceToken != -1)
    dispatch_once(&SCNUserInfoClasses_onceToken, &__block_literal_global_83);
  return SCNUserInfoClasses_set;
}

void SCNEncodeC3DAnimationForKey(void *a1, const void *a2, uint64_t a3)
{
  void *v6;
  CFTypeID v7;
  const __CFString *v8;
  CFTypeID v9;
  CFTypeID v10;
  NSObject *v11;
  void *v12;

  v6 = (void *)C3DCopyPropertyList(a2, 0, 0, 0);
  v7 = CFGetTypeID(a2);
  if (v7 == C3DSimpleAnimationGetTypeID())
  {
    v8 = CFSTR("basic");
  }
  else
  {
    v9 = CFGetTypeID(a2);
    if (v9 == C3DKeyframedAnimationGetTypeID())
    {
      v8 = CFSTR("keyframe");
    }
    else
    {
      v10 = CFGetTypeID(a2);
      if (v10 == C3DAnimationGroupGetTypeID())
      {
        v8 = CFSTR("group");
      }
      else
      {
        v11 = scn_default_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          SCNEncodeC3DAnimationForKey_cold_1();
        v8 = 0;
      }
    }
  }
  v12 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 4);
  objc_msgSend(v12, "setValue:forKey:", v6, CFSTR("animation"));
  objc_msgSend(v12, "setValue:forKey:", v8, CFSTR("class"));
  objc_msgSend(a1, "encodeObject:forKey:", v12, a3);

}

uint64_t SCNDecodeC3DAnimationForKey(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  void *v7;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;

  if (SCNPlistClasses_onceToken != -1)
    dispatch_once(&SCNPlistClasses_onceToken, &__block_literal_global_74);
  v4 = objc_msgSend(a1, "decodeObjectOfClasses:forKey:", SCNPlistClasses_set, a2);
  if (!v4)
    return 0;
  v5 = (void *)v4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
      return SCNDecodeUnsafeObjectForKey(a1, a2, v7);
    }
    v9 = (void *)objc_msgSend(v5, "valueForKey:", CFSTR("class"));
    if (objc_msgSend(v9, "isEqualToString:", CFSTR("basic")))
    {
      v10 = (void *)C3DSimpleAnimationCreate();
    }
    else if (objc_msgSend(v9, "isEqualToString:", CFSTR("keyframe")))
    {
      v10 = (void *)C3DKeyframedAnimationCreate();
    }
    else
    {
      if (!objc_msgSend(v9, "isEqualToString:", CFSTR("group")))
        goto LABEL_18;
      v10 = (void *)C3DAnimationGroupCreate();
    }
    v6 = v10;
    if (v10)
    {
      v11 = v10;
      if ((C3DInitWithPropertyList(v6, objc_msgSend(v5, "valueForKey:", CFSTR("animation")), 0, 0) & 1) != 0)
        return (uint64_t)v6;
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        SCNDecodeC3DAnimationForKey_cold_2();
      return 0;
    }
LABEL_18:
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      SCNDecodeC3DAnimationForKey_cold_1();
    return 0;
  }
  return (uint64_t)v5;
}

uint64_t SCNPlistClasses()
{
  if (SCNPlistClasses_onceToken != -1)
    dispatch_once(&SCNPlistClasses_onceToken, &__block_literal_global_74);
  return SCNPlistClasses_set;
}

void *SCNEncodeAnimations(void *a1, void *a2)
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  __n128 *v14;
  const __CFArray *KeyPath;
  const __CFArray *v16;
  CFTypeID v17;
  uint64_t TypeID;
  void *v19;
  CFTypeID v20;
  char v21;
  const __CFString *v22;
  CFTypeID v23;
  NSObject *v24;
  CFTypeID v25;
  NSObject *v26;
  void *v27;
  BOOL v28;
  void *result;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  CFTypeID v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[3];
  _QWORD v55[3];
  uint8_t v56[128];
  uint8_t buf[4];
  void *v58;
  _BYTE v59[128];
  uint64_t v60;

  v2 = a2;
  v60 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a2, "animationKeys");
  v37 = a1;
  if (v4)
  {
    v5 = v4;
    if (objc_msgSend(v4, "count"))
    {
      v42 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v5, "count"));
      v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
      v43 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v5, "count"));
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      v53 = 0u;
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
      if (v7)
      {
        v8 = v7;
        v9 = *(_QWORD *)v51;
        v40 = v5;
        v41 = v2;
        v38 = *(_QWORD *)v51;
        v39 = v6;
        do
        {
          v10 = 0;
          v44 = v8;
          do
          {
            if (*(_QWORD *)v51 != v9)
              objc_enumerationMutation(v5);
            v11 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * v10);
            v12 = (void *)objc_msgSend(v2, "animationPlayerForKey:", v11);
            v13 = (void *)objc_msgSend(v12, "animation");
            v14 = (__n128 *)objc_msgSend(v13, "animationRef");
            if (v14
              || (objc_msgSend(v12, "prepareWithTarget:implicitDuration:", v2, 0.0),
                  (v14 = (__n128 *)objc_msgSend(v13, "animationRef")) != 0))
            {
              if ((C3DAnimationGetIsImplicit((uint64_t)v14) & 1) == 0)
              {
                objc_msgSend(v6, "addObject:", v12);
                objc_msgSend(v43, "addObject:", v11);
                KeyPath = (const __CFArray *)C3DAnimationGetKeyPath((uint64_t)v14);
                v16 = C3DCreatePathFromComponents(KeyPath);
                v17 = CFGetTypeID(v14);
                TypeID = C3DAnimationClusterGetTypeID();
                if (v17 == TypeID)
                  v14 = C3DAnimationGroupCreateWithAnimationCluster((uint64_t)v14);
                v19 = (void *)C3DCopyPropertyList(v14, 0, 0, 0);
                v20 = CFGetTypeID(v14);
                v45 = v17;
                if (v20 == C3DSimpleAnimationGetTypeID())
                {
                  v21 = 0;
                  v22 = CFSTR("basic");
                }
                else
                {
                  v23 = CFGetTypeID(v14);
                  if (v23 == C3DKeyframedAnimationGetTypeID())
                  {
                    v21 = 0;
                    v22 = CFSTR("keyframe");
                  }
                  else
                  {
                    v25 = CFGetTypeID(v14);
                    if (v25 == C3DAnimationGroupGetTypeID())
                    {
                      v21 = 0;
                      v22 = CFSTR("group");
                    }
                    else
                    {
                      v26 = scn_default_log();
                      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412290;
                        v58 = v13;
                        _os_log_error_impl(&dword_1DCCB8000, v26, OS_LOG_TYPE_ERROR, "Error: SCNEncodeAnimations unknown animation type: %@", buf, 0xCu);
                      }
                      v22 = 0;
                      v21 = 1;
                    }
                  }
                }
                v27 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 4);
                objc_msgSend(v27, "setValue:forKey:", v19, CFSTR("animation"));
                if (v16)
                  objc_msgSend(v27, "setValue:forKey:", v16, CFSTR("keyPath"));
                if ((v21 & 1) == 0)
                  objc_msgSend(v27, "setValue:forKey:", v22, CFSTR("class"));
                if (objc_msgSend(v13, "usesSceneTimeBase"))
                  objc_msgSend(v27, "setValue:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("usesSceneTimeBase"));
                objc_msgSend(v42, "setObject:forKey:", v27, v11);

                v8 = v44;
                v28 = v45 == TypeID;
                v5 = v40;
                v2 = v41;
                v9 = v38;
                v6 = v39;
                if (v28 && v14)
                  CFRelease(v14);
              }
            }
            else
            {
              v24 = scn_default_log();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v58 = v13;
                _os_log_error_impl(&dword_1DCCB8000, v24, OS_LOG_TYPE_ERROR, "Error: SCNEncodeAnimations failed to encode animation: %@", buf, 0xCu);
              }
            }
            ++v10;
          }
          while (v8 != v10);
          v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
        }
        while (v8);
      }
      if (objc_msgSend(v43, "count"))
      {
        if (v6)
          objc_msgSend(v37, "encodeObject:forKey:", v6, CFSTR("animation-players"));
        objc_msgSend(v37, "encodeObject:forKey:", v42, CFSTR("animations"));
        objc_msgSend(v37, "encodeObject:forKey:", v43, CFSTR("animation-keys"));
      }
    }
  }
  result = (void *)objc_msgSend(v2, "_scnBindings");
  if (result)
  {
    v30 = result;
    v31 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(result, "count"));
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v47 != v34)
            objc_enumerationMutation(v30);
          v36 = (void *)objc_msgSend(v30, "valueForKey:", *(_QWORD *)(*((_QWORD *)&v46 + 1) + 8 * i));
          if (objc_msgSend(v36, "sourceObject"))
          {
            v54[0] = CFSTR("sourceObject");
            v55[0] = objc_msgSend(v36, "sourceObject");
            v54[1] = CFSTR("keyPathSrc");
            v55[1] = objc_msgSend(v36, "keyPathSrc");
            v54[2] = CFSTR("keyPathDst");
            v55[2] = objc_msgSend(v36, "keyPathDst");
            objc_msgSend(v31, "addObject:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v55, v54, 3));
          }
        }
        v33 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v46, v56, 16);
      }
      while (v33);
    }
    return (void *)objc_msgSend(v37, "encodeObject:forKey:", v31, CFSTR("bindings"));
  }
  return result;
}

void *SCNDecodeAnimations(void *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;
  __n128 *v18;
  __n128 *v19;
  uint64_t v20;
  SCNAnimation *v21;
  NSObject *v22;
  NSObject *v23;
  void *result;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id obj;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t v41[128];
  uint8_t buf[4];
  void *v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  if (SCNPlistClasses_onceToken != -1)
    dispatch_once(&SCNPlistClasses_onceToken, &__block_literal_global_74);
  v29 = a1;
  v31 = (void *)objc_msgSend(a1, "scn_decodeDictionaryWithKeysOfClasses:objectsOfClasses:containingNestedContainersForKey:", v3, SCNPlistClasses_set, CFSTR("animations"));
  if (v31)
  {
    v4 = (void *)objc_msgSend(a1, "scn_decodeArrayOfObjectsOfClass:forKey:", objc_opt_class(), CFSTR("animation-keys"));
    v5 = (void *)objc_msgSend(a1, "scn_decodeArrayOfObjectsOfClass:forKey:", objc_opt_class(), CFSTR("animation-players"));
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    if (!v4)
      v4 = (void *)objc_msgSend(v31, "allKeys");
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      v9 = *(_QWORD *)v38;
      obj = v4;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v38 != v9)
            objc_enumerationMutation(obj);
          v11 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i);
          if (v5)
            v12 = (void *)objc_msgSend(v5, "objectAtIndex:", v8++);
          else
            v12 = 0;
          v13 = (void *)objc_msgSend(v31, "objectForKey:", v11);
          v14 = (void *)objc_msgSend(v13, "valueForKey:", CFSTR("class"));
          if (objc_msgSend(v14, "isEqualToString:", CFSTR("basic")))
          {
            v15 = C3DSimpleAnimationCreate();
            goto LABEL_18;
          }
          if (objc_msgSend(v14, "isEqualToString:", CFSTR("keyframe")))
          {
            v15 = C3DKeyframedAnimationCreate();
LABEL_18:
            v16 = (const void *)v15;
            v17 = 0;
            if (v15)
              goto LABEL_19;
            goto LABEL_29;
          }
          if (objc_msgSend(v14, "isEqualToString:", CFSTR("group")))
          {
            v17 = 1;
            v16 = (const void *)C3DAnimationGroupCreate();
            if (v16)
            {
LABEL_19:
              if (C3DInitWithPropertyList(v16, objc_msgSend(v13, "valueForKey:", CFSTR("animation")), 0, 0))
              {
                if (v17)
                {
                  v18 = C3DAnimationClusterCreateWithAnimationGroup((uint64_t)v16);
                  if (v18)
                  {
                    v19 = v18;
                    CFRelease(v16);
                    v16 = v19;
                  }
                }
                C3DAnimationSetIsSceneTimeBased((uint64_t)v16, objc_msgSend((id)objc_msgSend(v13, "valueForKey:", CFSTR("usesSceneTimeBase")), "BOOLValue"));
                v20 = objc_msgSend(v13, "valueForKey:", CFSTR("keyPath"));
                v21 = +[SCNAnimation animationWithC3DAnimation:](SCNAnimation, "animationWithC3DAnimation:", v16);
                -[SCNAnimation setKeyPath:](v21, "setKeyPath:", v20);
                if (v12)
                {
                  objc_msgSend(v12, "_setAnimation:", v21);
                  objc_msgSend(a2, "addAnimationPlayer:forKey:", v12, v11);
                }
                else
                {
                  objc_msgSend(a2, "addAnimation:forKey:", v21, v11);
                }
              }
              else
              {
                v22 = scn_default_log();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  v43 = v13;
                  _os_log_error_impl(&dword_1DCCB8000, v22, OS_LOG_TYPE_ERROR, "Error: failed to deserialize animation %@", buf, 0xCu);
                }
              }
              CFRelease(v16);
              continue;
            }
          }
LABEL_29:
          v23 = scn_default_log();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v43 = v13;
            _os_log_error_impl(&dword_1DCCB8000, v23, OS_LOG_TYPE_ERROR, "Error: can't deserialize animation %@", buf, 0xCu);
          }
        }
        v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
      }
      while (v7);
    }
  }
  if (SCNUserInfoClassesWithoutCollections_onceToken != -1)
    dispatch_once(&SCNUserInfoClassesWithoutCollections_onceToken, &__block_literal_global_70);
  result = (void *)objc_msgSend(v29, "scn_decodeArrayOfObjectsOfClasses:forKey:", SCNUserInfoClassesWithoutCollections_set, CFSTR("bindings"));
  if (result)
  {
    v25 = result;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    result = (void *)objc_msgSend(result, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    if (result)
    {
      v26 = result;
      v27 = *(_QWORD *)v34;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v34 != v27)
            objc_enumerationMutation(v25);
          objc_msgSend(a2, "bindAnimatablePath:toObject:withKeyPath:options:", objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v28), "objectForKeyedSubscript:", CFSTR("keyPathDst")), objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v28), "objectForKeyedSubscript:", CFSTR("sourceObject")), objc_msgSend(*(id *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v28), "objectForKeyedSubscript:", CFSTR("keyPathSrc")), 0);
          v28 = (char *)v28 + 1;
        }
        while (v26 != v28);
        result = (void *)objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
        v26 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t SCNFindImageNamedInAppBundle(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __CFString *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v21;

  v2 = (void *)objc_msgSend(a1, "path");
  v3 = objc_msgSend(v2, "rangeOfString:", CFSTR(".app/Contents/"));
  if (!v4 || (v5 = (void *)objc_msgSend(v2, "substringFromIndex:", v3 + v4)) == 0)
  {
    v5 = (void *)objc_msgSend(a1, "path");
    if (!v5)
      return 0;
  }
  v6 = (void *)objc_msgSend(v5, "pathComponents");
  v7 = objc_msgSend(v6, "count");
  if (!v7)
    return 0;
  v8 = v7;
  v21 = a1;
  v9 = (void *)SCNGetResourceBundle();
  v10 = objc_msgSend((id)objc_msgSend(v5, "lastPathComponent"), "stringByDeletingPathExtension");
  v11 = objc_msgSend(v5, "pathExtension");
  v12 = v8 - 1;
  if (v8 == 1)
  {
LABEL_12:
    v19 = (id)objc_msgSend(MEMORY[0x1E0CEA638], "imageNamed:", objc_msgSend(v21, "lastPathComponent"));
  }
  else
  {
    v13 = v11;
    v14 = 0;
    while (1)
    {
      v15 = objc_msgSend(v6, "count") - 1;
      v16 = &stru_1EA5A6480;
      if (v15 > v14)
      {
        v16 = &stru_1EA5A6480;
        v17 = v14;
        do
          v16 = (__CFString *)-[__CFString stringByAppendingPathComponent:](v16, "stringByAppendingPathComponent:", objc_msgSend(v6, "objectAtIndex:", v17++));
        while (v15 != v17);
      }
      v18 = objc_msgSend(v9, "pathForResource:ofType:inDirectory:", v10, v13, v16);
      if (v18)
        break;
      if (++v14 == v12)
        goto LABEL_12;
    }
    v19 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CEA638]), "initWithContentsOfFile:", v18);
  }
  return objc_msgSend(v19, "CGImage");
}

uint64_t SCNResolveImageContents(void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = 0;
    goto LABEL_4;
  }
  objc_opt_class();
  v5 = 0;
  v4 = a1;
  a1 = 0;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
LABEL_4:
    if (objc_msgSend((id)objc_msgSend(a1, "scheme"), "isEqualToString:", CFSTR("imageNamed")))
    {
      v6 = objc_msgSend(a1, "absoluteString");
    }
    else
    {
      if (v4)
        goto LABEL_9;
      if (!objc_msgSend(a1, "isFileURL") || objc_msgSend(a1, "query"))
        goto LABEL_21;
      v6 = objc_msgSend(a1, "path");
    }
    v4 = (void *)v6;
    if (!v6)
    {
LABEL_21:
      v4 = 0;
      if (!a1)
        return (uint64_t)v4;
      v12 = 0;
      goto LABEL_23;
    }
LABEL_9:
    if (objc_msgSend(v4, "hasPrefix:", CFSTR("imageNamed://")))
    {
      v7 = objc_msgSend(v4, "substringFromIndex:", 13);
      v8 = objc_msgSend(MEMORY[0x1E0CEA638], "imageNamed:", v7);
      if (v8)
        return v8;
      else
        return v7;
    }
    v9 = objc_msgSend(v4, "rangeOfString:", CFSTR(".app/Contents/"));
    if (v10)
    {
      v11 = (void *)objc_msgSend(v4, "substringFromIndex:", v9 + v10);
      if (v11)
      {
        v5 = objc_msgSend((id)SCNGetResourceBundle(), "URLForResource:withExtension:", objc_msgSend(v11, "stringByDeletingPathExtension"), objc_msgSend(v11, "pathExtension"));
        if (v5)
          return v5;
      }
    }
    v5 = objc_msgSend((id)SCNGetResourceBundle(), "URLForResource:withExtension:", objc_msgSend(v4, "stringByDeletingPathExtension"), objc_msgSend(v4, "pathExtension"));
    if (v5)
      return v5;
    if (!a1)
    {
      v14 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v4);
      v13 = 0;
      v12 = 1;
LABEL_29:
      v5 = objc_msgSend((id)SCNGetResourceBundle(), "URLForResource:withExtension:", objc_msgSend(v14, "lastPathComponent"), objc_msgSend(v14, "pathExtension"));
      if (v5)
        return v5;
      v5 = (uint64_t)v14;
      if ((objc_msgSend(v14, "checkResourceIsReachableAndReturnError:", 0) & 1) != 0)
        return v5;
      v15 = v12 ^ 1;
      if (!a2)
        v15 = 1;
      if ((v15 & 1) != 0)
      {
        v5 = (uint64_t)a1;
        if ((v13 & 1) != 0)
          return v5;
      }
      else
      {
        v16 = (void *)objc_msgSend(a2, "URLByAppendingPathComponent:", v4);
        v17 = (void *)objc_msgSend(v16, "URLByStandardizingPath");
        if (v17 != v16)
        {
          v5 = (uint64_t)v17;
          if ((objc_msgSend(v17, "checkResourceIsReachableAndReturnError:", 0) & 1) != 0)
            return v5;
        }
        v5 = (uint64_t)v16;
        if ((objc_msgSend(v16, "checkResourceIsReachableAndReturnError:", 0) & 1) != 0)
          return v5;
        v18 = (void *)objc_msgSend(a2, "URLByAppendingPathComponent:", objc_msgSend(v4, "lastPathComponent"));
        v19 = (void *)objc_msgSend(v18, "URLByStandardizingPath");
        if (v19 != v18)
        {
          v5 = (uint64_t)v19;
          if ((objc_msgSend(v19, "checkResourceIsReachableAndReturnError:", 0) & 1) != 0)
            return v5;
        }
        v20 = objc_msgSend(v18, "checkResourceIsReachableAndReturnError:", 0);
        v5 = (uint64_t)(v20 ? v18 : a1);
        if (((v13 | v20) & 1) != 0)
          return v5;
      }
      if (C3DWasLinkedBeforeMajorOSYear2016())
        return objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v4);
      return (uint64_t)v4;
    }
    v12 = 1;
LABEL_23:
    if (!objc_msgSend(a1, "isFileURL") || objc_msgSend(a1, "query"))
      return (uint64_t)a1;
    v13 = 1;
    v14 = a1;
    goto LABEL_29;
  }
  return v5;
}

id _SCNDecodeImageContents(id result)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;

  if (result)
  {
    v1 = result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend((id)objc_msgSend(v1, "valueForKey:", CFSTR("type")), "isEqualToString:", CFSTR("MDLSkyCubeTexture")))
      {
        v2 = objc_alloc(MEMORY[0x1E0CC77F0]);
        v3 = objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("name"));
        v4 = objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("channelEncoding")), "integerValue");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("dimensions.x")), "floatValue");
        v25 = v5;
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("dimensions.x")), "floatValue");
        v7 = COERCE_DOUBLE(vcvt_s32_f32((float32x2_t)__PAIR64__(v6, v25)));
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("turbidity")), "floatValue");
        v9 = v8;
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("sunElevation")), "floatValue");
        v11 = v10;
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("upperAtmosphereScattering")), "floatValue");
        v13 = v12;
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("groundAlbedo")), "floatValue");
        LODWORD(v15) = v14;
        LODWORD(v16) = v9;
        LODWORD(v17) = v11;
        LODWORD(v18) = v13;
        v19 = (void *)objc_msgSend(v2, "initWithName:channelEncoding:textureDimensions:turbidity:sunElevation:upperAtmosphereScattering:groundAlbedo:", v3, v4, v7, v16, v17, v18, v15);
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("horizonElevation")), "floatValue");
        objc_msgSend(v19, "setHorizonElevation:");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("gamma")), "floatValue");
        objc_msgSend(v19, "setGamma:");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("exposure")), "floatValue");
        objc_msgSend(v19, "setExposure:");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("brightness")), "floatValue");
        objc_msgSend(v19, "setBrightness:");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("contrast")), "floatValue");
        objc_msgSend(v19, "setContrast:");
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("saturation")), "floatValue");
        objc_msgSend(v19, "setSaturation:");
        v20 = objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("groundColor"));
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v21 = (void *)objc_msgSend(MEMORY[0x1E0CB3710], "unarchivedObjectOfClass:fromData:error:", objc_opt_class(), v20, 0);
          if (v21)
            objc_msgSend(v19, "setGroundColor:", objc_msgSend(v21, "CGColor"));
        }
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("highDynamicRangeCompression.x")), "floatValue");
        v26 = v22;
        objc_msgSend((id)objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("highDynamicRangeCompression.y")), "floatValue");
        objc_msgSend(v19, "setHighDynamicRangeCompression:", COERCE_DOUBLE(__PAIR64__(v23, v26)));
        if ((C3DWasLinkedBeforeMajorOSYear2018() & 1) == 0)
          objc_msgSend(v19, "updateTexture");
        return v19;
      }
      else
      {
        result = (id)objc_msgSend(v1, "valueForKey:", CFSTR("data"));
        if (!result)
        {
          result = (id)objc_msgSend(v1, "valueForKey:", CFSTR("path"));
          if (!result)
            return (id)objc_msgSend(v1, "valueForKey:", CFSTR("URL"));
        }
      }
    }
    else
    {
      v24 = scn_default_log();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        _SCNDecodeImageContents_cold_1(v24);
      return 0;
    }
  }
  return result;
}

id SCNDecodeImageContents(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", objc_opt_class());
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = (void *)objc_msgSend(a1, "scn_decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:", v4, objc_msgSend(v5, "setWithObjects:", v6, v7, v8, objc_opt_class(), 0), a2);
  return _SCNDecodeImageContents(v9);
}

uint64_t SCNEncodeC3DImage(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(a1, "encodeObject:forKey:", _SCNEncodedC3DImage(a1, a3), a2);
}

void *_SCNEncodedC3DImage(void *a1, uint64_t a2)
{
  int v4;
  void *URL;
  uint64_t v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t Data;
  CGImageRef v14;
  CGImage *v15;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v4 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "options"), "objectForKeyedSubscript:", CFSTR("SCNSceneExportEmbedImages")), "BOOLValue");
  else
    v4 = 0;
  URL = (void *)C3DImageGetURL(a2);
  v6 = (uint64_t)URL;
  if (URL)
    v7 = objc_msgSend((id)objc_msgSend(URL, "query"), "length") == 0;
  else
    v7 = 0;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v9 = v8;
  if (v7 && !v4)
  {
    v10 = CFSTR("URL");
    v11 = v6;
LABEL_12:
    objc_msgSend(v8, "setObject:forKey:", v11, v10);
    return v9;
  }
  Data = C3DImageGetData(a2);
  if (Data
    || (v14 = C3DImageCopyCGImage(a2)) != 0
    && (v15 = v14,
        Data = (uint64_t)UIImagePNGRepresentation((UIImage *)objc_msgSend(MEMORY[0x1E0CEA638], "imageWithCGImage:", v14)),
        CGImageRelease(v15),
        Data))
  {
    v10 = CFSTR("data");
    v8 = v9;
    v11 = Data;
    goto LABEL_12;
  }
  return v9;
}

void *SCNEncodeNamedObject(void *a1, const char *a2)
{
  if (a2)
    return (void *)objc_msgSend(a1, "encodeObject:forKey:", a2, CFSTR("name"));
  return a1;
}

void SCNEncodeImageContents(void *a1, uint64_t a2, void *a3)
{
  int v6;
  void *v7;
  void *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  __C3DImage *v12;
  __C3DImage *v13;
  uint64_t v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  void *v30;
  void *v31;
  double v32;
  uint64_t v33;
  const __CFString *v34;
  _QWORD v35[18];
  _QWORD v36[19];

  v36[18] = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v6 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "options"), "objectForKeyedSubscript:", CFSTR("SCNSceneExportEmbedImages")), "BOOLValue") ^ 1;
  else
    v6 = 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && v6)
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v8 = v7;
    v9 = CFSTR("path");
LABEL_7:
    objc_msgSend(v7, "setObject:forKey:", a3, v9);
    objc_msgSend(a1, "encodeObject:forKey:", v8, a2);
    return;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & v6) == 1 && !objc_msgSend((id)objc_msgSend(a3, "query"), "length"))
  {
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v8 = v7;
    v9 = CFSTR("URL");
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (objc_msgSend(a3, "groundColor"))
    {
      v10 = objc_msgSend(MEMORY[0x1E0CEA478], "colorWithCGColor:", objc_msgSend(a3, "groundColor"));
      v11 = objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v10, 1, 0);
    }
    else
    {
      v11 = 0;
    }
    v36[0] = CFSTR("MDLSkyCubeTexture");
    v35[0] = CFSTR("type");
    v35[1] = CFSTR("name");
    v14 = objc_msgSend(a3, "name");
    if (v14)
      v15 = (const __CFString *)v14;
    else
      v15 = &stru_1EA5A6480;
    v36[1] = v15;
    v35[2] = CFSTR("turbidity");
    v16 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "turbidity");
    v36[2] = objc_msgSend(v16, "numberWithFloat:");
    v35[3] = CFSTR("sunElevation");
    v17 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "sunElevation");
    v36[3] = objc_msgSend(v17, "numberWithFloat:");
    v35[4] = CFSTR("upperAtmosphereScattering");
    v18 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "upperAtmosphereScattering");
    v36[4] = objc_msgSend(v18, "numberWithFloat:");
    v35[5] = CFSTR("groundAlbedo");
    v19 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "groundAlbedo");
    v36[5] = objc_msgSend(v19, "numberWithFloat:");
    v35[6] = CFSTR("horizonElevation");
    v20 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "horizonElevation");
    v36[6] = objc_msgSend(v20, "numberWithFloat:");
    v35[7] = CFSTR("gamma");
    v21 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "gamma");
    v36[7] = objc_msgSend(v21, "numberWithFloat:");
    v35[8] = CFSTR("exposure");
    v22 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "exposure");
    v36[8] = objc_msgSend(v22, "numberWithFloat:");
    v35[9] = CFSTR("brightness");
    v23 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "brightness");
    v36[9] = objc_msgSend(v23, "numberWithFloat:");
    v35[10] = CFSTR("contrast");
    v24 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "contrast");
    v36[10] = objc_msgSend(v24, "numberWithFloat:");
    v35[11] = CFSTR("saturation");
    v25 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "saturation");
    v36[11] = objc_msgSend(v25, "numberWithFloat:");
    v35[12] = CFSTR("channelEncoding");
    v36[12] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a3, "channelEncoding"));
    v35[13] = CFSTR("dimensions.x");
    v26 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "dimensions");
    v36[13] = objc_msgSend(v26, "numberWithInt:", v27);
    v35[14] = CFSTR("dimensions.y");
    v28 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "dimensions");
    v36[14] = objc_msgSend(v28, "numberWithInt:", v29);
    v35[15] = CFSTR("highDynamicRangeCompression.x");
    v30 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "highDynamicRangeCompression");
    v36[15] = objc_msgSend(v30, "numberWithFloat:");
    v35[16] = CFSTR("highDynamicRangeCompression.y");
    v31 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a3, "highDynamicRangeCompression");
    LODWORD(v32) = HIDWORD(v32);
    v33 = objc_msgSend(v31, "numberWithFloat:", v32);
    v35[17] = CFSTR("groundColor");
    if (v11)
      v34 = (const __CFString *)v11;
    else
      v34 = &stru_1EA5A6480;
    v36[16] = v33;
    v36[17] = v34;
    objc_msgSend(a1, "encodeObject:forKey:", objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 18), a2);
  }
  else
  {
    v12 = +[SCNMaterialProperty copyC3DImageFromImage:](SCNMaterialProperty, "copyC3DImageFromImage:", a3);
    if (v12)
    {
      v13 = v12;
      objc_msgSend(a1, "encodeObject:forKey:", _SCNEncodedC3DImage(a1, (uint64_t)v12), a2);
      CFRelease(v13);
    }
  }
}

uint64_t SCNEncodeImageArray(void *a1, uint64_t a2, void *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __C3DImage *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(a3);
        v11 = +[SCNMaterialProperty copyC3DImageFromImage:](SCNMaterialProperty, "copyC3DImageFromImage:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v10));
        if (v11)
          objc_msgSend(v6, "addObject:", _SCNEncodedC3DImage(a1, (uint64_t)v11));
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }
  return objc_msgSend(a1, "encodeObject:forKey:", v6, a2);
}

void *SCNDecodeImageArray(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (SCNPlistClasses_onceToken != -1)
    dispatch_once(&SCNPlistClasses_onceToken, &__block_literal_global_74);
  v4 = objc_msgSend(a1, "decodeObjectOfClasses:forKey:", SCNPlistClasses_set, a2);
  if (!v4)
    return 0;
  v5 = (void *)v4;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v5);
        v11 = _SCNDecodeImageContents(*(id *)(*((_QWORD *)&v13 + 1) + 8 * i));
        if (v11)
          objc_msgSend(v6, "addObject:", v11);
      }
      v8 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v8);
  }
  return v6;
}

uint64_t C3DOrderedDictionaryGetValue(void *a1, const char *a2)
{
  return objc_msgSend(a1, "valueForKey:", a2);
}

uint64_t C3DOrderedDictionarySetValue(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "setValue:forKey:", a3, a2);
}

uint64_t C3DOrderedDictionaryRemoveValue(void *a1, const char *a2)
{
  return objc_msgSend(a1, "removeObjectForKey:", a2);
}

uint64_t C3DOrderedDictionaryApplyFunction(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "applyFunction:withContext:", a2, a3);
}

SCNOrderedDictionary *C3DOrderedDictionaryCreate()
{
  return objc_alloc_init(SCNOrderedDictionary);
}

uint64_t _CAToC3DFillMode(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    if ((objc_msgSend((id)result, "isEqualToString:", *MEMORY[0x1E0CD2B68]) & 1) != 0)
    {
      return 0;
    }
    else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CD2B60]) & 1) != 0)
    {
      return 1;
    }
    else if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0CD2B50]))
    {
      return 2;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t _C3DToCAFillMode(int a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v1 = (uint64_t *)MEMORY[0x1E0CD2B68];
      goto LABEL_9;
    case 1:
      v1 = (uint64_t *)MEMORY[0x1E0CD2B60];
      goto LABEL_9;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1E0CD2B50];
      goto LABEL_9;
    case 3:
      v1 = (uint64_t *)MEMORY[0x1E0CD2B58];
LABEL_9:
      result = *v1;
      break;
    default:
      v2 = scn_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        _C3DToCAFillMode_cold_1();
      result = 0;
      break;
  }
  return result;
}

_QWORD *_CAToC3DAnimationEvents(void *a1)
{
  _QWORD *result;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)objc_msgSend(a1, "count");
  if (result)
  {
    v3 = (void *)objc_msgSend(a1, "sortedArrayUsingComparator:", &__block_literal_global_75);
    v4 = (_QWORD *)C3DAnimationEventsCreateWithEventCount(objc_msgSend(v3, "count"));
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v3);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          objc_msgSend(v9, "time");
          C3DAnimationEventsAddEvent(v4, (void *)objc_msgSend(v9, "eventBlock"), v10);
        }
        v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }
    return v4;
  }
  return result;
}

void *_C3DToCAAnimationEvents(uint64_t a1)
{
  uint64_t Count;
  void *v3;
  uint64_t i;
  double EventTimeAtIndex;

  if (!a1)
    return 0;
  Count = C3DAnimationEventsGetCount(a1);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      EventTimeAtIndex = C3DAnimationEventsGetEventTimeAtIndex(a1, i);
      objc_msgSend(v3, "addObject:", +[SCNAnimationEvent animationEventWithKeyTime:block:](SCNAnimationEvent, "animationEventWithKeyTime:block:", C3DAnimationEventsGetEventBlockAtIndex(a1, i), EventTimeAtIndex));
    }
  }
  return v3;
}

__n128 *CAAnimationToC3DAnimation(void *a1, void *a2)
{
  __n128 *v2;
  uint64_t TypeID;
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  double PauseTime;
  double v8;
  double v9;

  v2 = (__n128 *)_CAAnimationToC3DAnimation(a1, a2);
  if (v2)
  {
    TypeID = C3DAnimationGroupGetTypeID();
    if (TypeID == CFGetTypeID(v2))
    {
      v4 = C3DAnimationClusterCreateWithAnimationGroup((uint64_t)v2);
      if (v4)
      {
        v5 = v4;
        v6 = v4;
        v2 = v5;
      }
    }
    if ((C3DAnimationGetIsSceneTimeBased((uint64_t)v2) & 1) == 0)
    {
      PauseTime = C3DAnimationNodeGetPauseTime((uint64_t)v2);
      if (PauseTime != 0.0)
      {
        v8 = PauseTime;
        C3DTransactionGetAtomicTime();
        C3DAnimationNodeSetPauseTime((uint64_t)v2, v8 - v9);
      }
    }
  }
  return v2;
}

uint64_t SCNAnimationGetTargetedBaseType(void *a1)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  const char *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    if (objc_msgSend(a1, "fromValue"))
    {
      v2 = objc_msgSend(a1, "fromValue");
    }
    else if (objc_msgSend(a1, "toValue"))
    {
      v2 = objc_msgSend(a1, "toValue");
    }
    else
    {
      v2 = objc_msgSend(a1, "byValue");
    }
    v3 = (void *)v2;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return SCNObjCEncodedTypeToC3DBaseType((const char *)objc_msgSend(v3, "objCType"));
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138412290;
      v8 = a1;
      v5 = "Warning: unable to infer the type of a basic animation: %@";
      goto LABEL_16;
    }
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend((id)objc_msgSend(a1, "values"), "count"))
      {
        v3 = (void *)objc_msgSend((id)objc_msgSend(a1, "values"), "objectAtIndexedSubscript:", 0);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          return SCNObjCEncodedTypeToC3DBaseType((const char *)objc_msgSend(v3, "objCType"));
      }
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 138412290;
        v8 = a1;
        v5 = "Warning: unable to infer the type of a keyframed animation: %@";
LABEL_16:
        _os_log_impl(&dword_1DCCB8000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v7, 0xCu);
      }
    }
  }
  return 0;
}

CAMediaTimingFunction *SCNKitGetImplicitAnimationTimingFunction()
{
  CAMediaTimingFunction *result;

  result = +[SCNTransaction animationTimingFunction](SCNTransaction, "animationTimingFunction");
  if (!result)
    return (CAMediaTimingFunction *)objc_msgSend(MEMORY[0x1E0CD27D0], "functionWithName:", *MEMORY[0x1E0CD3038]);
  return result;
}

SCNAnimationPlayer *SCNConvertC3DAnimationDictionaryFunc(uint64_t a1, uint64_t a2, void *a3)
{
  SCNAnimationPlayer *result;

  result = +[SCNAnimationPlayer animationPlayerWithAnimationPlayerRef:](SCNAnimationPlayer, "animationPlayerWithAnimationPlayerRef:", a2);
  if (result)
    return (SCNAnimationPlayer *)objc_msgSend(a3, "setValue:forKey:", result, a1);
  return result;
}

_WORD *CABasicAnimationToC3DAnimation(void *a1, int a2, int a3)
{
  NSObject *v3;
  int v5;
  void *v7;
  uint64_t v8;
  const void *v9;
  __C3DImage **Bytes;
  _WORD *v11;

  if (a3 == 2)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      CABasicAnimationToC3DAnimation_cold_1();
    return 0;
  }
  v5 = a2;
  if (!a2)
  {
    if (objc_msgSend(a1, "toValue"))
    {
      v7 = (void *)objc_msgSend(a1, "toValue");
LABEL_11:
      v5 = SCNObjCEncodedTypeToC3DBaseType((const char *)objc_msgSend(v7, "objCType"));
      goto LABEL_12;
    }
    if (objc_msgSend(a1, "fromValue"))
    {
      v7 = (void *)objc_msgSend(a1, "fromValue");
      goto LABEL_11;
    }
    if (objc_msgSend(a1, "byValue"))
    {
      v7 = (void *)objc_msgSend(a1, "byValue");
      goto LABEL_11;
    }
    v5 = 0;
  }
LABEL_12:
  v8 = C3DValueCreate(v5, 1);
  if (!v8)
    return 0;
  v9 = (const void *)v8;
  Bytes = (__C3DImage **)C3DValueGetBytes(v8);
  v11 = (_WORD *)C3DSimpleAnimationCreate();
  C3DAnimationSetupWithCAPropertyAnimation(v11, a1);
  if (objc_msgSend(a1, "toValue")
    && __SCNAnimationTargetCopyValueToAddress((void *)objc_msgSend(a1, "toValue"), v5, a3, Bytes))
  {
    C3DSimpleAnimationSetEndValue((uint64_t)v11, (uint64_t)v9);
  }
  if (objc_msgSend(a1, "fromValue")
    && __SCNAnimationTargetCopyValueToAddress((void *)objc_msgSend(a1, "fromValue"), v5, a3, Bytes))
  {
    C3DSimpleAnimationSetStartValue((uint64_t)v11, (uint64_t)v9);
  }
  if (objc_msgSend(a1, "byValue")
    && __SCNAnimationTargetCopyValueToAddress((void *)objc_msgSend(a1, "byValue"), v5, a3, Bytes))
  {
    C3DSimpleAnimationSetByValue((uint64_t)v11, (uint64_t)v9);
  }
  CFRelease(v9);
  return v11;
}

void C3DAnimationSetupWithCAPropertyAnimation(_WORD *a1, void *a2)
{
  const __CFString *v4;

  C3DAnimationSetupWithCAAnimation(a1, a2);
  v4 = C3DCreatePathComponentsFromString((const __CFString *)objc_msgSend(a2, "keyPath"));
  C3DAnimationSetKeyPath((uint64_t)a1, v4);
  if (v4)
    CFRelease(v4);
  C3DAnimationSetAdditive((uint64_t)a1, objc_msgSend(a2, "isAdditive"));
  C3DAnimationSetCumulative((uint64_t)a1, objc_msgSend(a2, "isCumulative"));
}

uint64_t __SCNAnimationTargetCopyValueToAddress(void *a1, int a2, int a3, __C3DImage **a4)
{
  __C3DImage *v5;
  uint64_t result;
  __C3DImage *v7;

  if (a2 != 5)
    return SCNWriteValueToTypedBytes(a1, (uint64_t)a4, a2);
  if (a3 != 2)
    return 0;
  v5 = +[SCNMaterialProperty copyC3DImageFromImage:](SCNMaterialProperty, "copyC3DImageFromImage:", a1);
  result = 0;
  if (a4)
  {
    if (v5)
    {
      *a4 = v5;
      v7 = v5;
      return 1;
    }
  }
  return result;
}

_WORD *CAKeyframeAnimationToC3DAnimation(void *a1, unsigned int a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  double v26;
  double v27;
  int v28;
  NSObject *v29;
  const void *v30;
  float v31;
  unint64_t v32;
  double v33;
  double v34;
  void *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  char v43;
  id v44;
  double v45;
  void *v46;
  float v47;
  char v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  _WORD *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  _OWORD __src[4];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = objc_msgSend(a1, "c3dAnimation");
    if (v6)
    {
      v7 = v6;
      SCNAnimationSetupDelegateWithCAAnimation(v6, a1);
      return (_WORD *)v7;
    }
  }
  if (!a2)
  {
    if (objc_msgSend((id)objc_msgSend(a1, "values"), "count"))
      a2 = SCNObjCEncodedTypeToC3DBaseType((const char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "values"), "objectAtIndexedSubscript:", 0), "objCType"));
    else
      a2 = 0;
  }
  v8 = C3DSizeOfBaseType(a2);
  if (v8 >= 0x41)
  {
    v9 = v8;
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      CAKeyframeAnimationToC3DAnimation_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  if (objc_msgSend(a1, "path"))
  {
    NSLog(CFSTR("CAKeyframeAnimation based on CGPath are not supported"));
    return 0;
  }
  v18 = objc_msgSend((id)objc_msgSend(a1, "values"), "count");
  if (!v18)
  {
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      CAKeyframeAnimationToC3DAnimation_cold_2();
    return 0;
  }
  v54 = v18;
  v55 = (_WORD *)C3DKeyframedAnimationCreate();
  C3DAnimationSetupWithCAPropertyAnimation(v55, a1);
  v19 = (void *)objc_msgSend(a1, "keyTimes");
  v63 = (void *)objc_msgSend(a1, "values");
  v20 = (void *)objc_msgSend(a1, "timingFunctions");
  v21 = (void *)objc_msgSend(a1, "calculationMode");
  v22 = (void *)objc_msgSend(a1, "tensionValues");
  v23 = (void *)objc_msgSend(a1, "continuityValues");
  v24 = (void *)objc_msgSend(a1, "biasValues");
  v62 = objc_msgSend(v19, "count");
  v25 = objc_msgSend(v20, "count");
  v58 = v22;
  v61 = objc_msgSend(v22, "count");
  v57 = v23;
  v60 = objc_msgSend(v23, "count");
  v56 = v24;
  v59 = objc_msgSend(v24, "count");
  objc_msgSend(a1, "duration");
  v27 = v26;
  v53 = *MEMORY[0x1E0CD2920];
  if ((objc_msgSend(v21, "isEqualToString:") & 1) != 0)
    v28 = 1;
  else
    v28 = objc_msgSend(v21, "isEqualToString:", *MEMORY[0x1E0CD2928]);
  v30 = (const void *)C3DKeyframeControllerCreateWithCapacity(v54, a2, a3, 0, v25 != 0, v28, v28);
  memset(__src, 0, sizeof(__src));
  v31 = (float)v54;
  v32 = 0;
  v33 = 0.0;
  if ((v28 & 1) != 0)
  {
    while (v19)
    {
      if (v62 > v32)
      {
        objc_msgSend((id)objc_msgSend(v19, "objectAtIndex:", v32), "doubleValue");
LABEL_26:
        v33 = v27 * v34;
      }
      if (v25 <= v32)
        v35 = 0;
      else
        v35 = (void *)objc_msgSend(v20, "objectAtIndex:", v32);
      v36 = 0.0;
      v37 = 0.0;
      if (v61 > v32)
      {
        objc_msgSend((id)objc_msgSend(v58, "objectAtIndex:", v32), "floatValue");
        v37 = v38;
      }
      if (v60 > v32)
      {
        objc_msgSend((id)objc_msgSend(v57, "objectAtIndex:", v32), "floatValue");
        v36 = v39;
      }
      v40 = 0.0;
      if (v59 > v32)
      {
        objc_msgSend((id)objc_msgSend(v56, "objectAtIndex:", v32), "floatValue");
        v40 = v41;
      }
      SCNWriteValueToTypedBytes((void *)objc_msgSend(v63, "objectAtIndex:", v32), (uint64_t)__src, a2);
      v42 = v33;
      v33 = v42;
      v43 = SCNInterpolationModeFromCACalculationMode(v21);
      v44 = C3DTimingFunctionFromCAMediaTimingFunction(v35);
      C3DKeyframeControllerSetKeyframeAtIndex((uint64_t)v30, v32++, __src, v43, (uint64_t)v44, 0, 0, v33, v37, v36, v40);
      if (v54 == v32)
        goto LABEL_47;
    }
    v34 = (float)((float)v32 / v31);
    goto LABEL_26;
  }
  do
  {
    if (v19)
    {
      if (v62 <= v32)
        goto LABEL_43;
      objc_msgSend((id)objc_msgSend(v19, "objectAtIndex:", v32), "doubleValue");
    }
    else
    {
      v45 = (float)((float)v32 / v31);
    }
    v33 = v27 * v45;
LABEL_43:
    if (v25 <= v32)
      v46 = 0;
    else
      v46 = (void *)objc_msgSend(v20, "objectAtIndex:", v32);
    SCNWriteValueToTypedBytes((void *)objc_msgSend(v63, "objectAtIndex:", v32), (uint64_t)__src, a2);
    v47 = v33;
    v33 = v47;
    v48 = SCNInterpolationModeFromCACalculationMode(v21);
    v49 = C3DTimingFunctionFromCAMediaTimingFunction(v46);
    C3DKeyframeControllerSetKeyframeAtIndex((uint64_t)v30, v32++, __src, v48, (uint64_t)v49, 0, 0, v33, 0.0, 0.0, 0.0);
  }
  while (v54 != v32);
LABEL_47:
  v50 = objc_msgSend(a1, "calculationMode");
  if (v50 == *MEMORY[0x1E0CD2930])
  {
    v51 = (uint64_t)v30;
    v52 = 1;
    goto LABEL_54;
  }
  if (v50 == *MEMORY[0x1E0CD2948])
  {
    C3DKeyframeControllerSetCalculationMode((uint64_t)v30, 1);
  }
  else
  {
    if (v50 == v53)
      goto LABEL_52;
    if (v50 == *MEMORY[0x1E0CD2928])
    {
      C3DKeyframeControllerSetCalculationMode((uint64_t)v30, 1);
LABEL_52:
      v51 = (uint64_t)v30;
      v52 = 2;
LABEL_54:
      C3DKeyframeControllerSetDefaultInterpolationMode(v51, v52);
    }
  }
  C3DKeyframedAnimationSetController((uint64_t)v55, v30);
  CFRelease(v30);
  return v55;
}

uint64_t SCNAnimationSetupDelegateWithCAAnimation(uint64_t a1, void *a2)
{
  _QWORD *AnimationCallbacks;
  uint64_t result;

  AnimationCallbacks = (_QWORD *)C3DAnimationGetAnimationCallbacks(a1);
  objc_msgSend(a2, "delegate");
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
    *AnimationCallbacks = SCNAnimationDidStart;
  AnimationCallbacks[1] = SCNAnimationDidStop;
  return result;
}

_WORD *_CAAnimationToC3DAnimation(void *a1, void *a2)
{
  const __CFArray *v5;
  uint64_t v6;
  const void *v7;
  unsigned int BaseType;
  int TypeSemantic;
  NSObject *v10;
  _WORD *v11;
  _WORD *v12;
  NSObject *v13;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return CAAnimationGroupToC3DAnimation(a1, (uint64_t)a2);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      _CAAnimationToC3DAnimation_cold_2((uint64_t)a1, v10);
    return 0;
  }
  v5 = (const __CFArray *)objc_msgSend(a2, "copyAnimationChannelForKeyPath:animation:", objc_msgSend(a1, "keyPath"), a1);
  if (v5
    && (v6 = C3DCFTypeCopyModelInfoAtSplittedPath((float32x4_t *)objc_msgSend(a2, "__CFObject"), v5, 0, 1)) != 0
    && (v7 = (const void *)v6, C3DModelTargetGetTargetAddress(v6)))
  {
    BaseType = C3DModelTargetGetBaseType((uint64_t)v7);
    TypeSemantic = C3DModelTargetGetTypeSemantic((uint64_t)v7);
    CFRelease(v7);
  }
  else
  {
    BaseType = 0;
    TypeSemantic = 0;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = CABasicAnimationToC3DAnimation(a1, BaseType, TypeSemantic);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v13 = scn_default_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _CAAnimationToC3DAnimation_cold_1((uint64_t)a1, v13);
      v11 = 0;
      goto LABEL_22;
    }
    v12 = CAKeyframeAnimationToC3DAnimation(a1, BaseType, TypeSemantic);
  }
  v11 = v12;
  if (v5)
  {
    if (v12)
      C3DAnimationSetKeyPath((uint64_t)v12, v5);
  }
LABEL_22:

  return v11;
}

id C3DAnimationToCAAnimation(const void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;

  v1 = _C3DAnimationToCAAnimation(a1);
  objc_msgSend(v1, "beginTime");
  if (v2 != 0.0 && (objc_msgSend(v1, "usesSceneTimeBase") & 1) == 0)
  {
    v3 = CACurrentMediaTime();
    objc_msgSend(v1, "beginTime");
    objc_msgSend(v1, "setBeginTime:", v3 + v4);
  }
  return v1;
}

id _C3DAnimationToCAAnimation(const void *a1)
{
  CFTypeID v2;
  SCN_CAKeyframeAnimation *v3;
  SCN_CAKeyframeAnimation *v4;
  id v5;
  CFTypeID v6;
  CFTypeID v7;
  uint64_t started;
  const void *v9;
  float32x2_t *Bytes;
  int Type;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  CFTypeID v17;
  __n128 *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  const void *v22;
  float32x2_t *v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  const void *v32;
  float32x2_t *v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  uint8_t v42[16];
  uint8_t v43[16];
  uint8_t buf[16];

  if (a1)
  {
    v2 = CFGetTypeID(a1);
    if (v2 == C3DKeyframedAnimationGetTypeID())
    {
      if (C3DKeyframedAnimationGetController((uint64_t)a1))
      {
        v3 = objc_alloc_init(SCN_CAKeyframeAnimation);
        -[SCN_CAKeyframeAnimation setC3dAnimation:](v3, "setC3dAnimation:", a1);
        v4 = v3;
LABEL_8:
        v5 = v4;
LABEL_35:
        objc_msgSend(v5, "setDuration:", C3DAnimationGetDuration((uint64_t)a1));
        return v5;
      }
    }
    else
    {
      v6 = CFGetTypeID(a1);
      if (v6 == C3DAnimationGroupGetTypeID())
      {
        v4 = (SCN_CAKeyframeAnimation *)SCNAnimationGroupToCAAnimationGroup((uint64_t)a1);
        goto LABEL_8;
      }
      v7 = CFGetTypeID(a1);
      if (v7 == C3DSimpleAnimationGetTypeID())
      {
        v5 = (id)objc_msgSend(MEMORY[0x1E0CD2710], "animation");
        started = C3DSimpleAnimationCopyStartValue((uint64_t)a1);
        if (started)
        {
          v9 = (const void *)started;
          Bytes = (float32x2_t *)C3DValueGetBytes(started);
          Type = C3DValueGetType((uint64_t)v9);
          v16 = SCNNSValueFromTypedBytes(Bytes, Type, v12, v13, v14, v15);
          if (v16)
          {
            objc_msgSend(v5, "setFromValue:", v16);
          }
          else
          {
            v20 = scn_default_log();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1DCCB8000, v20, OS_LOG_TYPE_DEFAULT, "Warning: SCNSimpleAnimationToCABasicAnimation - can't convert startValue", buf, 2u);
            }
          }
          CFRelease(v9);
        }
        v21 = C3DSimpleAnimationCopyEndValue((uint64_t)a1);
        if (v21)
        {
          v22 = (const void *)v21;
          v23 = (float32x2_t *)C3DValueGetBytes(v21);
          v24 = C3DValueGetType((uint64_t)v22);
          v29 = SCNNSValueFromTypedBytes(v23, v24, v25, v26, v27, v28);
          if (v29)
          {
            objc_msgSend(v5, "setToValue:", v29);
          }
          else
          {
            v30 = scn_default_log();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v43 = 0;
              _os_log_impl(&dword_1DCCB8000, v30, OS_LOG_TYPE_DEFAULT, "Warning: SCNSimpleAnimationToCABasicAnimation - can't convert endValue", v43, 2u);
            }
          }
          CFRelease(v22);
        }
        v31 = C3DSimpleAnimationCopyByValue((uint64_t)a1);
        if (v31)
        {
          v32 = (const void *)v31;
          v33 = (float32x2_t *)C3DValueGetBytes(v31);
          v34 = C3DValueGetType((uint64_t)v32);
          v39 = SCNNSValueFromTypedBytes(v33, v34, v35, v36, v37, v38);
          if (v39)
          {
            objc_msgSend(v5, "setByValue:", v39);
          }
          else
          {
            v40 = scn_default_log();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v42 = 0;
              _os_log_impl(&dword_1DCCB8000, v40, OS_LOG_TYPE_DEFAULT, "Warning: SCNSimpleAnimationToCABasicAnimation - can't convert byValue", v42, 2u);
            }
          }
          CFRelease(v32);
        }
        CAPropertyAnimationSetupWithSCNAnimation(v5, (uint64_t)a1);
        goto LABEL_35;
      }
      v17 = CFGetTypeID(a1);
      if (v17 == C3DAnimationClusterGetTypeID())
      {
        v18 = C3DAnimationGroupCreateWithAnimationCluster((uint64_t)a1);
        v5 = SCNAnimationGroupToCAAnimationGroup((uint64_t)v18);
        if (v18)
          CFRelease(v18);
        goto LABEL_35;
      }
      v19 = scn_default_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        _C3DAnimationToCAAnimation_cold_1();
    }
    v5 = 0;
    goto LABEL_35;
  }
  return 0;
}

__CFString *SCNCreateAnimationChannelWithObjectAndPath(void *a1, __CFString *a2)
{
  float32x4_t *v4;
  __CFString *v5;
  uint64_t v6;
  const void *v7;
  __CFString *v8;
  uint64_t v9;
  __int16 *v10;
  const void *v11;

  if (!-[__CFString length](a2, "length"))
    return 0;
  v4 = (float32x4_t *)objc_msgSend(a1, "__CFObject");
  v5 = (__CFString *)C3DCreatePathComponentsFromString(a2);
  v6 = C3DCFTypeCopyModelInfoAtSplittedPath(v4, (const __CFArray *)v5, 0, 0);
  v7 = (const void *)v6;
  if (v6 && C3DModelTargetGetTargetAddress(v6))
  {
    v8 = v5;
LABEL_12:
    CFRelease(v7);
    return v8;
  }
  v9 = SCNCopyValueFromObjCProperty(a1, a2);
  if (v9
    && (v10 = (__int16 *)v9, v11 = (const void *)objc_msgSend(a1, "__CFObject"), CFTypeIsC3DEntity(v11))
    && (C3DEntitySetValueForKey((uint64_t)v11, a2, v10), CFRelease(v10), C3DEntityGetValueForKey((uint64_t)v11, a2)))
  {
    v8 = (__CFString *)(id)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", -[__CFString count](v5, "count") + 1);
    -[__CFString addObject:](v8, "addObject:", CFSTR("customProperty"));
    -[__CFString addObjectsFromArray:](v8, "addObjectsFromArray:", v5);
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v5);
  if (v7)
    goto LABEL_12;
  return v8;
}

uint64_t SCNAddAnimation(void *a1, void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;

  if (!a3 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a1)
    {
LABEL_4:
      result = objc_msgSend(a1, "animationPlayerRef");
      if (result)
      {
        v15 = (uint64_t *)result;
        v16 = (float32x4_t *)objc_msgSend(a2, "__CFObject");
        if (v16)
        {
          v17 = v16;
          if ((CFTypeIsC3DEntity(v16) & 1) == 0)
          {
            v18 = scn_default_log();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
              SCNAddAnimation_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          C3DEntityAddAnimationForKey(v17, v15, a3);
        }
        return 1;
      }
      return result;
    }
  }
  else if (a1)
  {
    goto LABEL_4;
  }
  v26 = scn_default_log();
  result = os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    SCNAddAnimation_cold_1();
    return 0;
  }
  return result;
}

void SCNRemoveAnimation(void *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)objc_msgSend(a1, "__CFObject");
  if (v3)
  {
    v4 = v3;
    if ((CFTypeIsC3DEntity(v3) & 1) == 0)
    {
      v5 = scn_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
        SCNRemoveAnimation_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    C3DEntityRemoveAnimationForKey(v4, a2, 0);
  }
}

void SCNFadeAndRemoveAnimation(void *a1, void *a2, double a3)
{
  _QWORD *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (_QWORD *)objc_msgSend(a1, "__CFObject");
  if (v5)
  {
    v6 = v5;
    if ((CFTypeIsC3DEntity(v5) & 1) == 0)
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        SCNFadeAndRemoveAnimation_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    C3DEntityFadeAndRemoveAnimationForKey(v6, a2, a3);
  }
}

void SCNRemoveAllAnimations(void *a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (void *)objc_msgSend(a1, "__CFObject");
  if (v1)
  {
    v2 = v1;
    if ((CFTypeIsC3DEntity(v1) & 1) == 0)
    {
      v3 = scn_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
        SCNRemoveAllAnimations_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    C3DEntityRemoveAllAnimations(v2);
  }
}

void SCNFadeAndRemoveAllAnimations(void *a1, double a2)
{
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (void *)objc_msgSend(a1, "__CFObject");
  if (v3)
  {
    v4 = v3;
    if ((CFTypeIsC3DEntity(v3) & 1) == 0)
    {
      v5 = scn_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
        SCNFadeAndRemoveAllAnimations_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    C3DEntityFadeAndRemoveAllAnimations(v4, a2);
  }
}

void sub_1DCE65C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DCE661F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t SCNAnimationDidStart(uint64_t a1)
{
  id *Animation;
  id *ObjCWrapper;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  id *Owner;
  id *v9;
  _QWORD v10[6];

  Animation = (id *)C3DAnimationNodeGetAnimation(a1);
  ObjCWrapper = C3DEntityGetObjCWrapper(Animation);
  v4 = (void *)objc_msgSend(ObjCWrapper, "userAnimation");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    v4 = 0;
  v5 = objc_msgSend(v4, "delegate");
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __SCNAnimationDidStart_block_invoke;
    v10[3] = &unk_1EA59F420;
    v10[4] = v5;
    v10[5] = v4;
    dispatch_async(MEMORY[0x1E0C80D38], v10);
  }
  result = objc_msgSend(ObjCWrapper, "animationDidStart");
  if (result)
  {
    v7 = result;
    Owner = (id *)C3DAnimationNodeGetOwner(a1);
    v9 = C3DEntityGetObjCWrapper(Owner);
    return (*(uint64_t (**)(uint64_t, id *, id *))(v7 + 16))(v7, ObjCWrapper, v9);
  }
  return result;
}

uint64_t SCNAnimationDidStop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id *Animation;
  id *v8;
  id v9;
  uint64_t v10;
  id *Owner;
  id *ObjCWrapper;
  uint64_t TypeID;
  __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  const __CFArray *v20;
  uint64_t v21;
  id *v22;
  uint64_t Parent;
  id *v24;
  id *v25;
  const __CFArray *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id *v30;
  id *v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD block[6];
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v6 = a1;
  v43 = *MEMORY[0x1E0C80C00];
  Animation = (id *)C3DAnimationNodeGetAnimation(a1);
  v8 = C3DEntityGetObjCWrapper(Animation);
  v9 = (id)objc_msgSend(v8, "userAnimation");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = objc_msgSend(v9, "delegate");
  else
    v10 = 0;
  if (!C3DAnimationGetRemoveOnCompletion((uint64_t)Animation))
    goto LABEL_29;
  Owner = (id *)C3DAnimationNodeGetOwner(v6);
  ObjCWrapper = C3DEntityGetObjCWrapper(Owner);
  if (C3DAnimationGetCommitWhenDone((uint64_t)Animation))
  {
    TypeID = C3DAnimationClusterGetTypeID();
    if (TypeID == CFGetTypeID(Animation))
    {
      v34 = v10;
      v35 = a4;
      v33 = a2;
      v14 = C3DAnimationClusterCopyKeyPaths((uint64_t)Animation);
      +[SCNTransaction begin](SCNTransaction, "begin");
      +[SCNTransaction setDisableActions:](SCNTransaction, "setDisableActions:", 1);
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v15 = -[__CFArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      if (v15)
      {
        v16 = v15;
        v17 = *(_QWORD *)v39;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v39 != v17)
              objc_enumerationMutation(v14);
            objc_msgSend(ObjCWrapper, "setValue:forKeyPath:", objc_msgSend((id)objc_msgSend(ObjCWrapper, "presentationInstance"), "valueForKeyPath:", *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * v18)), *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * v18));
            ++v18;
          }
          while (v16 != v18);
          v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
        }
        while (v16);
      }
      +[SCNTransaction commit](SCNTransaction, "commit");

      a2 = v33;
LABEL_24:
      v10 = v34;
      a4 = v35;
      goto LABEL_25;
    }
    KeyPath = C3DAnimationGetKeyPath((uint64_t)Animation);
    if (KeyPath)
    {
      v20 = (const __CFArray *)KeyPath;
      v34 = v10;
      v35 = a4;
      if (ObjCWrapper)
      {
        v21 = a2;
        v22 = ObjCWrapper;
      }
      else
      {
        if (v6)
        {
          while (1)
          {
            Parent = C3DAnimationNodeGetParent(v6);
            v6 = Parent;
            if (!Parent)
              break;
            v24 = (id *)C3DAnimationNodeGetOwner(Parent);
            v25 = C3DEntityGetObjCWrapper(v24);
            if (v25)
            {
              v22 = v25;
              v21 = a2;
              goto LABEL_23;
            }
          }
        }
        v21 = a2;
        v22 = 0;
      }
LABEL_23:
      +[SCNTransaction begin](SCNTransaction, "begin");
      +[SCNTransaction setDisableActions:](SCNTransaction, "setDisableActions:", 1);
      v26 = C3DCreatePathFromComponents(v20);
      objc_msgSend(v22, "setValue:forKeyPath:", objc_msgSend((id)objc_msgSend(v22, "presentationInstance"), "valueForKeyPath:", v26), v26);

      +[SCNTransaction commit](SCNTransaction, "commit");
      a2 = v21;
      goto LABEL_24;
    }
  }
LABEL_25:
  if ((_DWORD)a2
    && (!C3DIsRunningInEditor() || C3DAnimationGetIsImplicit((uint64_t)Animation)))
  {
    v27 = objc_msgSend(ObjCWrapper, "__removeAnimation:forKey:", v8, a4);
    goto LABEL_30;
  }
LABEL_29:
  v27 = 0;
LABEL_30:
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __SCNAnimationDidStop_block_invoke;
    block[3] = &unk_1EA5A2728;
    block[4] = v10;
    block[5] = v9;
    v37 = a2;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
  v28 = objc_msgSend(v8, "animationDidStop");
  if (v28)
  {
    v29 = v28;
    v30 = (id *)C3DAnimationNodeGetOwner(v6);
    v31 = C3DEntityGetObjCWrapper(v30);
    (*(void (**)(uint64_t, id *, id *, uint64_t))(v29 + 16))(v29, v8, v31, a2);
  }

  return v27;
}

void _optimizeKeyframes(const void *a1)
{
  CFTypeID v2;
  int AnimationCount;
  CFIndex v4;
  uint64_t v5;
  const void *AnimationAtIndex;
  CFTypeID v7;
  uint64_t Controller;
  char v9;

  v2 = CFGetTypeID(a1);
  if (v2 == C3DAnimationGroupGetTypeID())
  {
    AnimationCount = C3DAnimationGroupGetAnimationCount((uint64_t)a1);
    if (AnimationCount >= 1)
    {
      v4 = 0;
      v5 = AnimationCount;
      do
      {
        AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a1, v4);
        _optimizeKeyframes(AnimationAtIndex);
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    v7 = CFGetTypeID(a1);
    if (v7 == C3DKeyframedAnimationGetTypeID())
    {
      Controller = C3DKeyframedAnimationGetController((uint64_t)a1);
      v9 = 0;
      C3DKeyframeControllerRemoveUselessKeys(Controller, &v9);
    }
  }
}

uint64_t C3DAnimationSetupWithCAAnimation(_WORD *a1, void *a2)
{
  double v4;
  double v5;
  int v6;
  float v7;
  float v8;
  float v9;
  double v10;
  float v11;
  double v12;
  double v13;
  float v14;
  double v15;
  double v16;
  float v17;
  double v18;
  double v19;
  char v20;
  _QWORD *v21;
  double v22;
  float v23;
  double v24;
  float v25;
  double v26;
  float v27;
  double v28;
  float v29;
  const void *Spring;
  void *v31;
  id v32;

  objc_msgSend(a2, "duration");
  v5 = v4;
  v6 = objc_msgSend(a2, "autoreverses");
  v7 = v5;
  C3DAnimationSetDuration((uint64_t)a1, v7);
  objc_msgSend(a2, "repeatCount");
  v9 = v8;
  objc_msgSend(a2, "repeatDuration");
  if (v9 == 0.0)
  {
    v11 = v10;
    if (v11 != 0.0 && v5 != 0.0)
    {
      v12 = v11;
      objc_msgSend(a2, "duration");
      v14 = v12 / v13;
      if (v6)
        v9 = v14 * 0.5;
      else
        v9 = v14;
    }
  }
  C3DAnimationSetRepeatCount((uint64_t)a1, v9);
  C3DAnimationSetAutoreverses((uint64_t)a1, v6);
  objc_msgSend(a2, "beginTime");
  C3DAnimationNodeSetPauseTime((uint64_t)a1, v15);
  objc_msgSend(a2, "timeOffset");
  C3DAnimationSetTimeOffset((uint64_t)a1, v16);
  objc_msgSend(a2, "speed");
  C3DAnimationSetSpeed((uint64_t)a1, v17);
  C3DAnimationSetRemoveOnCompletion((uint64_t)a1, objc_msgSend(a2, "isRemovedOnCompletion"));
  objc_msgSend(a2, "fadeInDuration");
  *(float *)&v18 = v18;
  C3DAnimationSetFadeInDuration((uint64_t)a1, *(float *)&v18);
  objc_msgSend(a2, "fadeOutDuration");
  *(float *)&v19 = v19;
  C3DAnimationSetFadeOutDuration((uint64_t)a1, *(float *)&v19);
  C3DAnimationSetCommitWhenDone(a1, objc_msgSend(a2, "commitsOnCompletion"));
  C3DAnimationSetIsSceneTimeBased((uint64_t)a1, objc_msgSend(a2, "usesSceneTimeBase"));
  v20 = _CAToC3DFillMode(objc_msgSend(a2, "fillMode"));
  C3DAnimationSetFillModeMask((uint64_t)a1, v20);
  v21 = _CAToC3DAnimationEvents((void *)objc_msgSend(a2, "animationEvents"));
  C3DAnimationSetAnimationEvents((uint64_t)a1, v21);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(a2, "mass");
    v23 = v22;
    objc_msgSend(a2, "stiffness");
    v25 = v24;
    objc_msgSend(a2, "damping");
    v27 = v26;
    objc_msgSend(a2, "initialVelocity");
    v29 = v28;
    Spring = (const void *)C3DTimingFunctionCreateSpring(v23, v25, v27, v29);
    C3DAnimationSetTimingFunction((uint64_t)a1, Spring);
    CFRelease(Spring);
  }
  else
  {
    v31 = (void *)objc_msgSend(a2, "timingFunction");
    if (v31)
    {
      v32 = C3DTimingFunctionFromCAMediaTimingFunction(v31);
      C3DAnimationSetTimingFunction((uint64_t)a1, v32);
    }
  }
  return SCNAnimationSetupDelegateWithCAAnimation((uint64_t)a1, a2);
}

uint64_t CAPropertyAnimationSetupWithSCNAnimation(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "setAdditive:", C3DAnimationGetAdditive(a2));
  objc_msgSend(a1, "setCumulative:", C3DAnimationGetCumulative(a2));
  return CAAnimationSetupWithSCNAnimation(a1, a2);
}

uint64_t CAAnimationSetupWithSCNAnimation(void *a1, uint64_t a2)
{
  double v4;
  double v5;
  int FillModeMask;
  uint64_t AnimationEvents;
  uint64_t result;

  objc_msgSend(a1, "setDuration:", C3DAnimationGetDuration(a2));
  *(float *)&v4 = C3DAnimationGetRepeatCount(a2);
  objc_msgSend(a1, "setRepeatCount:", v4);
  objc_msgSend(a1, "setAutoreverses:", C3DAnimationGetAutoreverses(a2));
  objc_msgSend(a1, "setBeginTime:", C3DAnimationNodeGetPauseTime(a2));
  objc_msgSend(a1, "setTimeOffset:", C3DAnimationGetTimeOffset(a2));
  *(float *)&v5 = C3DAnimationGetSpeed(a2);
  objc_msgSend(a1, "setSpeed:", v5);
  objc_msgSend(a1, "setFadeInDuration:", C3DAnimationGetFadeInDuration(a2));
  objc_msgSend(a1, "setFadeOutDuration:", C3DAnimationGetFadeOutDuration(a2));
  objc_msgSend(a1, "setRemovedOnCompletion:", C3DAnimationGetRemoveOnCompletion(a2));
  objc_msgSend(a1, "setCommitsOnCompletion:", C3DAnimationGetCommitWhenDone(a2));
  objc_msgSend(a1, "setUsesSceneTimeBase:", C3DAnimationGetIsSceneTimeBased(a2));
  FillModeMask = C3DAnimationGetFillModeMask(a2);
  objc_msgSend(a1, "setFillMode:", _C3DToCAFillMode(FillModeMask));
  AnimationEvents = C3DAnimationGetAnimationEvents(a2);
  objc_msgSend(a1, "setAnimationEvents:", _C3DToCAAnimationEvents(AnimationEvents));
  result = C3DAnimationGetTimingFunction(a2);
  if (result)
    return objc_msgSend(a1, "setTimingFunction:", CAMediaTimingFunctionFromC3DTimingFunction(result));
  return result;
}

_WORD *CAAnimationGroupToC3DAnimation(void *a1, uint64_t a2)
{
  _WORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  _WORD *v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (_WORD *)C3DAnimationGroupCreate();
  C3DAnimationSetupWithCAAnimation(v4, a1);
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = (void *)objc_msgSend(a1, "animations");
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v18;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * v9);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v11 = (void *)CAAnimationGroupToC3DAnimation(v10, a2);
          C3DAnimationGroupAddAnimation((uint64_t)v4, v11);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v12 = objc_msgSend((id)objc_msgSend(v10, "keyPath"), "copy");
            if (v12)
            {
              v13 = (void *)v12;
              v14 = (void *)_CAAnimationToC3DAnimation(v10, a2);
              if (v14)
                C3DAnimationGroupAddAnimation((uint64_t)v4, v14);

            }
            else
            {
              v15 = scn_default_log();
              if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v22 = v10;
                v23 = 2112;
                v24 = v4;
                _os_log_error_impl(&dword_1DCCB8000, v15, OS_LOG_TYPE_ERROR, "Error: sub-animation %@ of %@ has no keyPath - ignoring", buf, 0x16u);
              }
            }
          }
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v7);
  }
  return v4;
}

id SCNAnimationGroupToCAAnimationGroup(uint64_t a1)
{
  id v2;
  const __CFArray *Animations;
  CFIndex Count;
  void *v5;
  CFIndex i;
  const void *AnimationAtIndex;
  void *v8;
  void *KeyPath;
  NSObject *v10;
  uint8_t v12[16];

  v2 = objc_alloc_init(MEMORY[0x1E0CD2700]);
  CAAnimationSetupWithSCNAnimation(v2, a1);
  Animations = (const __CFArray *)C3DAnimationGroupGetAnimations(a1);
  if (Animations)
  {
    Count = CFArrayGetCount(Animations);
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", Count);
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(a1, i);
        v8 = (void *)_C3DAnimationToCAAnimation();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          KeyPath = (void *)C3DAnimationGetKeyPath((uint64_t)AnimationAtIndex);
          if (KeyPath)
          {
            objc_msgSend(v8, "setKeyPath:", objc_msgSend(KeyPath, "componentsJoinedByString:", CFSTR(".")));
          }
          else
          {
            v10 = scn_default_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v12 = 0;
              _os_log_impl(&dword_1DCCB8000, v10, OS_LOG_TYPE_DEFAULT, "Warning: SCNAnimationGroupToCAAnimationGroup - no target path", v12, 2u);
            }
          }
        }
        objc_msgSend(v5, "addObject:", v8);
      }
    }
  }
  else
  {
    v5 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
  }
  objc_msgSend(v2, "setAnimations:", v5);
  return v2;
}

void sub_1DCE699C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE69A5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE69AAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE6AB78()
{
  JUMPOUT(0x1DCE6AB80);
}

void sub_1DCE6AD0C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DCE6C1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double C3DAnimationManagerApplyActions(uint64_t a1, double result)
{
  const __CFDictionary *v2;
  const __CFDictionary *Copy;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  void *ValueAtIndex;
  CFTypeID v10;
  const void *v11;
  void *v12;
  void *v13;
  double v14;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  v14 = result;
  v2 = *(const __CFDictionary **)(a1 + 120);
  if (v2)
  {
    context[0] = a1;
    context[1] = &v14;
    *(_BYTE *)(a1 + 89) = 1;
    *(_DWORD *)(a1 + 160) = 0;
    Copy = CFDictionaryCreateCopy(0, v2);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)_applyActions, context);
    if (Copy)
      CFRelease(Copy);
    *(_BYTE *)(a1 + 89) = 0;
    v5 = *(const __CFArray **)(a1 + 128);
    if (v5)
    {
      Count = CFArrayGetCount(v5);
      if (Count >= 1)
      {
        v7 = Count;
        for (i = 0; i != v7; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 128), i);
          v10 = CFGetTypeID(ValueAtIndex);
          if (v10 == CFArrayGetTypeID())
          {
            v11 = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0);
            v12 = (void *)CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 1);
            v13 = (void *)CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 2);
            _C3DAnimationManagerRemoveActionWithKey(a1, v11, v12, v13);
          }
          else
          {
            C3DAnimationManagerRemoveActionsForObject(a1, ValueAtIndex);
          }
        }
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 128));
    }
    result = v14;
    *(double *)(a1 + 152) = v14;
  }
  return result;
}

void _applyActions(id *a1, CFArrayRef theArray, uint64_t *a3)
{
  uint64_t v5;
  double v6;
  CFIndex Count;
  CFIndex i;
  void *ValueAtIndex;
  CFIndex j;
  void *v11;

  v5 = *a3;
  v6 = *(double *)a3[1];
  Count = CFArrayGetCount(theArray);
  if (C3DIsRunningInEditor())
  {
    if (v6 == 0.0)
    {
      SCNActionRestoreState((uint64_t)a1);
      SCNActionReleaseCachedState((uint64_t)a1);
      SCNActionsReset(theArray);
    }
    else
    {
      SCNActionSaveStateIfNeeded((uint64_t)a1);
      if (v6 < *(double *)(v5 + 152))
      {
        SCNActionRestoreState((uint64_t)a1);
        SCNActionsReset(theArray);
        if (Count < 1)
          return;
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
          SCNActionApply(ValueAtIndex, a1, 0.0);
        }
      }
    }
  }
  if (Count >= 1)
  {
    for (j = 0; j < Count; ++j)
    {
      v11 = (void *)CFArrayGetValueAtIndex(theArray, j);
      if (!SCNActionIsPaused(v11))
      {
        if (SCNActionApply(v11, a1, v6))
        {
          CFRetain(a1);
          CFRetain(v11);
          SCNActionWasRemovedFromTargetAtTime(v11, a1, v6);
          CFArrayRemoveValueAtIndex(theArray, j--);
          --Count;
          SCNActionDidFinish(v11, a1);
          CFRelease(v11);
          CFRelease(a1);
        }
        else
        {
          ++*(_DWORD *)(v5 + 160);
        }
      }
    }
  }
}

void _C3DAnimationManagerRemoveActionWithKey(uint64_t a1, const void *a2, void *a3, void *a4)
{
  const __CFDictionary *v5;
  const __CFArray *Value;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  void *ValueAtIndex;
  int HasKey;
  BOOL v16;
  _BOOL4 v17;
  __CFArray *Mutable;
  CFArrayRef v19;
  const void *v20[4];

  v20[3] = *(const void **)MEMORY[0x1E0C80C00];
  v5 = *(const __CFDictionary **)(a1 + 120);
  if (v5)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v5, a2);
    if (Value)
    {
      v10 = Value;
      Count = CFArrayGetCount(Value);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        while (1)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v10, v13);
          HasKey = SCNActionHasKey(ValueAtIndex, a3);
          v16 = !a4 || ValueAtIndex == a4;
          v17 = v16;
          if (HasKey && v17)
            break;
          if (v12 == ++v13)
            return;
        }
        if (*(_BYTE *)(a1 + 89))
        {
          Mutable = *(__CFArray **)(a1 + 128);
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(a1 + 128) = Mutable;
          }
          v20[0] = a2;
          v20[1] = a3;
          v20[2] = ValueAtIndex;
          v19 = CFArrayCreate(0, v20, 3, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(Mutable, v19);
        }
        else
        {
          CFArrayRemoveValueAtIndex(v10, v13);
          if (v12 == 1)
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 120), a2);
        }
      }
    }
  }
}

void C3DAnimationManagerRemoveActionsForObject(uint64_t a1, void *key)
{
  const __CFDictionary *v3;
  __CFArray *Mutable;

  v3 = *(const __CFDictionary **)(a1 + 120);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 89))
    {
      Mutable = *(__CFArray **)(a1 + 128);
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
        *(_QWORD *)(a1 + 128) = Mutable;
      }
      CFArrayAppendValue(Mutable, key);
    }
    else if (CFDictionaryGetValue(v3, key))
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 120), key);
    }
  }
}

void C3DAnimationManagerAddAction(uint64_t a1, void *key, const void *a3)
{
  const __CFDictionary *Mutable;
  void *Value;

  Mutable = *(const __CFDictionary **)(a1 + 120);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 120) = Mutable;
  }
  Value = (void *)CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    Value = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 120), key, Value);
    CFRelease(Value);
  }
  CFArrayAppendValue((CFMutableArrayRef)Value, a3);
}

void C3DAnimationManagerRemoveActionWithKey(uint64_t a1, const void *a2, void *a3)
{
  _C3DAnimationManagerRemoveActionWithKey(a1, a2, a3, 0);
}

CFTypeRef C3DCommonProfileShaderAssignAttributesAndUniformsIndexes(CFTypeRef cf)
{
  if (C3DCommonProfileShaderAssignAttributesAndUniformsIndexes_onceToken != -1)
    dispatch_once(&C3DCommonProfileShaderAssignAttributesAndUniformsIndexes_onceToken, &__block_literal_global_77);
  _C3DFXGLSLProgramSetUniformDictionary(cf, (CFTypeRef)C3DCommonProfileShaderAssignAttributesAndUniformsIndexes_uniformIndexToSymbol);
  return _C3DFXGLSLProgramSetAttributesDictionary(cf, (CFTypeRef)C3DCommonProfileShaderAssignAttributesAndUniformsIndexes_attributeIndexToSymbol);
}

C3D::RenderProbePass *C3D::RenderProbePass::RenderProbePass(C3D::RenderProbePass *this, C3D::RenderGraph *a2, C3D::Pass *a3, __C3DNode *a4, int a5, MTLPixelFormat a6)
{
  C3D::DrawNodesPass *v9;
  NSObject *v10;
  _QWORD v12[5];
  __int128 v13;
  char v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char v18;

  v12[0] = 0;
  v12[1] = a4;
  memset(&v12[2], 0, 24);
  v13 = xmmword_1DD007D30;
  v14 = 1;
  v15 = 64;
  v16 = 0x1000000;
  v17 = 0;
  v18 = 2;
  v9 = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v12);
  *(_QWORD *)v9 = off_1EA599488;
  if (!C3DNodeGetLight(*((_QWORD *)v9 + 31)))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3D::RenderProbePass::RenderProbePass(v10);
  }
  *((_DWORD *)this + 1340) = a5;
  *((_QWORD *)this + 671) = a6;
  return this;
}

void C3D::RenderProbePass::setup(C3D::RenderProbePass *this)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;

  C3D::Pass::setOutputCount(this, 2u);
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::RenderProbePass *)((char *)this + 32), 0);
  *(_BYTE *)(v2 + 64) = 1;
  *(_QWORD *)(v2 + 8) = "PROBE";
  v3 = *(_WORD *)(v2 + 66);
  *(_WORD *)(v2 + 66) = v3 & 0xFFEF;
  v4 = *((_WORD *)this + 2680);
  v5 = *((_QWORD *)this + 671);
  *(_WORD *)(v2 + 16) = v4;
  *(_WORD *)(v2 + 18) = v4;
  *(_DWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 24) = 517;
  *(_WORD *)(v2 + 28) = v5;
  *(_DWORD *)(v2 + 32) = 0;
  *(_WORD *)(v2 + 30) = 5;
  *(_WORD *)(v2 + 66) = v3 & 0xFFEC | 2;
  v6 = C3D::PassDescriptor::outputAtIndex((C3D::RenderProbePass *)((char *)this + 32), 1u);
  *(_BYTE *)(v6 + 64) = 2;
  *(_QWORD *)(v6 + 8) = "DEPTH";
  v7 = *(_WORD *)(v6 + 66) | 0x18;
  *(_WORD *)(v6 + 66) = v7;
  v8 = *((_WORD *)this + 2680);
  *(_WORD *)(v6 + 16) = v8;
  *(_WORD *)(v6 + 18) = v8;
  *(_DWORD *)(v6 + 20) = 0;
  *(_DWORD *)(v6 + 24) = 517;
  *(_WORD *)(v6 + 28) = 252;
  *(_WORD *)(v6 + 30) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 66) = v7 & 0xFFFC | 2;
  C3D::DrawNodesPass::setup(this);
}

const char *C3D::RenderProbePass::name(C3D::RenderProbePass *this)
{
  return "RenderProbePass";
}

const char *C3D::RenderProbePass::programHashCodeStoreName(C3D::RenderProbePass *this)
{
  return "RenderProbePass";
}

void sub_1DCE6E480(_Unwind_Exception *a1)
{
  uint64_t v1;

  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_1DCE6E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DCE6E7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DCE6F074(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE6F0D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE6F1FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE6F248(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE6FC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1DCE707DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_1DCE712E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

uint64_t __UpdateLight(const void *a1, const void *a2, void *a3)
{
  return objc_msgSend(a3, "updateLightNode:withSourceNode:", a2, a1);
}

uint64_t __UpdateCamera(const void *a1, const void *a2, void *a3)
{
  return objc_msgSend(a3, "updateCameraNode:withSourceNode:", a2, a1);
}

uint64_t __UpdateParticles(const void *a1, const void *a2, void *a3)
{
  return objc_msgSend(a3, "updateParticlesNode:withSourceNode:", a2, a1);
}

uint64_t __UpdateFields(const void *a1, const void *a2, void *a3)
{
  return objc_msgSend(a3, "updateFieldNode:withSourceNode:", a2, a1);
}

SCNAuthoringEnvironment2 *C3DAuthoringEnvironment2Create(uint64_t a1)
{
  return -[SCNAuthoringEnvironment2 initWithScene:]([SCNAuthoringEnvironment2 alloc], "initWithScene:", +[SCNScene sceneWithSceneRef:](SCNScene, "sceneWithSceneRef:", a1));
}

uint64_t C3DAuthoringEnvironment2NodeAddedToScene(void *a1, id *a2)
{
  return objc_msgSend(a1, "addedNode:", C3DEntityGetObjCWrapper(a2));
}

id *C3DAuthoringEnvironment2NodeRemovedFromScene(void *a1, id *a2)
{
  id *result;

  result = C3DEntityGetObjCWrapper(a2);
  if (result)
    return (id *)objc_msgSend(a1, "removedNode:", result);
  return result;
}

uint64_t C3DAuthoringEnvironment2Update(void *a1, const char *a2)
{
  return objc_msgSend(a1, "updateWithRenderer:", a2);
}

void *C3DEAGLWrapperContextRetain(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t C3DFXTechniqueCreateAuthoring()
{
  const void *v0;

  v0 = (const void *)C3DDictionaryNamed(CFSTR("C3DFXAuthoring.plist"));
  return C3DFXTechniqueCreateWithDescription(v0, 0);
}

id SCNCreateFuntionConstants(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _WORD *a6, uint64_t a7)
{
  float *CommonProfile;
  BOOL v14;
  unsigned int v15;
  int v16;
  int LightingModel;
  BOOL v18;
  const __CFArray *ElementsCount;
  const __CFArray *v20;
  char v21;
  CFIndex i;
  const void *ElementAtIndex;
  uint64_t v24;
  NSObject *v25;
  char v26;
  uint64_t EffectSlot;
  BOOL v28;
  uint64_t v29;
  char IsDoubleSided;
  BOOL v31;
  char v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  char v42;
  uint64_t v43;
  int IsDynamicBatchingEnabled;
  BOOL v45;
  uint64_t v46;
  BOOL v47;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  int v55;
  char v56;
  unsigned __int8 v57;
  int v58;
  BOOL v59;
  uint8_t buf[4];
  int v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  CommonProfile = (float *)C3DMaterialGetCommonProfile(a7);
  if (a3)
    v14 = C3DMeshContainsSourcesWithSemantic(a3, 1);
  else
    v14 = 0;
  v51 = a2;
  v52 = a1;
  v50 = a4;
  if (a6)
  {
    v15 = (unsigned __int16)*a6;
    v53 = (v15 & 1) == 0;
    v16 = (v15 >> 1) & 1;
  }
  else
  {
    v53 = 0;
    v16 = 1;
  }
  v49 = v16;
  LightingModel = C3DEffectCommonProfileGetLightingModel((uint64_t)CommonProfile);
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  if (a3)
    v18 = C3DMeshContainsSourcesWithSemantic(a3, 2);
  else
    v18 = 0;
  LOBYTE(v63) = v18;
  BYTE1(v63) = 1;
  BYTE2(v63) = v14;
  ElementsCount = C3DMeshGetElementsCount(a3);
  if ((uint64_t)ElementsCount >= 1)
  {
    v20 = ElementsCount;
    v21 = 0;
    for (i = 0; (const __CFArray *)i != v20; ++i)
    {
      ElementAtIndex = C3DMeshGetElementAtIndex(a3, i, 1);
      v21 |= C3DMeshElementGetType((uint64_t)ElementAtIndex) == 3;
    }
    BYTE11(v75) = v21;
  }
  v24 = 0;
  v62 = 0;
  do
  {
    if (C3DEffectCommonProfileIsUsingMappingChannel((uint64_t)CommonProfile, v24))
    {
      if (a3 && C3DMeshGetSourceWithSemanticAtIndex(a3, 3, v24, 1))
      {
        *((_BYTE *)&v62 + v24) = 1;
      }
      else
      {
        v25 = scn_default_log();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v61 = v24;
          _os_log_impl(&dword_1DCCB8000, v25, OS_LOG_TYPE_DEFAULT, "Warning: MappingChannel %d needed but not available", buf, 8u);
        }
      }
    }
    ++v24;
  }
  while (v24 != 8);
  *(_QWORD *)((char *)&v63 + 4) = v62;
  BYTE12(v63) = v63;
  *(_WORD *)((char *)&v63 + 13) = 257;
  HIBYTE(v63) = 1;
  v59 = 0;
  *(_DWORD *)buf = 0;
  *((_QWORD *)&v78 + 1) = -1;
  if (C3DEffectCommonProfileIsUsingSelfIllumination((uint64_t)CommonProfile))
  {
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 9, (BOOL *)&v64 + 3, (BOOL *)&v64 + 10, (BOOL *)&v67 + 15, &v66, (int *)&v71 + 3, (_DWORD *)&v69 + 2, (int *)&v74);
    BYTE8(v75) = BYTE3(v64);
  }
  else
  {
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 0, (BOOL *)&v64 + 3, (BOOL *)&v64 + 10, (BOOL *)&v67 + 15, &v66, (int *)&v71 + 3, (_DWORD *)&v69 + 2, (int *)&v74);
  }
  if (C3DEffectCommonProfileIsUsingAmbientOcclusion((uint64_t)CommonProfile))
  {
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 8, (BOOL *)&v64, (BOOL *)&v64 + 11, (BOOL *)&v68, (_DWORD *)&v66 + 1, (int *)&v72, (_DWORD *)&v69 + 3, (int *)&v74 + 1);
    BYTE9(v75) = v64;
  }
  else if ((C3DEffectCommonProfileGetEnableLockAmbientWithDiffuse((uint64_t)CommonProfile) & 1) == 0 && v49)
  {
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 1, (BOOL *)&v64, (BOOL *)&v64 + 11, (BOOL *)&v68, (_DWORD *)&v66 + 1, (int *)&v72, (_DWORD *)&v69 + 3, (int *)&v74 + 1);
  }
  SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 2, (BOOL *)&v64 + 1, (BOOL *)&v64 + 7, (BOOL *)&v67 + 12, (_DWORD *)&v65 + 1, (int *)&v71, (_DWORD *)&v68 + 3, (int *)&v73 + 1);
  if ((LightingModel & 0xFFFFFFFE) == 2)
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 3, (BOOL *)&v64 + 2, (BOOL *)&v64 + 13, (BOOL *)&v68 + 2, (_DWORD *)&v66 + 3, (int *)&v72 + 2, (_DWORD *)&v70 + 1, (int *)&v74 + 3);
  SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 4, (BOOL *)&v64 + 5, (BOOL *)&v64 + 14, (BOOL *)&v68 + 3, &v67, (int *)buf, buf, (int *)buf);
  SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 5, (BOOL *)&v64 + 6, (BOOL *)&v64 + 9, (BOOL *)&v67 + 14, (_DWORD *)&v65 + 3, (int *)&v71 + 2, (_DWORD *)&v69 + 1, (int *)&v73 + 3);
  SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 6, (BOOL *)&v64 + 4, (BOOL *)&v64 + 12, (BOOL *)&v68 + 1, (_DWORD *)&v66 + 2, (int *)&v72 + 1, &v70, (int *)&v74 + 2);
  SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 7, &v59, (BOOL *)&v64 + 8, (BOOL *)&v67 + 13, (_DWORD *)&v65 + 2, (int *)&v71 + 1, &v69, (int *)&v73 + 2);
  if (LightingModel == 5)
  {
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 11, &v59, (BOOL *)&v65, (BOOL *)&v68 + 4, (_DWORD *)&v67 + 1, (int *)&v72 + 3, (_DWORD *)&v70 + 2, (int *)&v75);
    SCNStandardConstants::_setPropertyFlags((uint64_t)&v63, (uint64_t)CommonProfile, 10, &v59, (BOOL *)&v65 + 1, (BOOL *)&v68 + 5, (_DWORD *)&v67 + 2, (int *)&v73, (_DWORD *)&v70 + 3, (int *)&v75 + 1);
  }
  BYTE3(v63) = BYTE8(v64);
  v58 = 0;
  v57 = 0;
  v56 = 1;
  v26 = BYTE7(v64);
  if (BYTE7(v64))
  {
    EffectSlot = C3DEffectCommonProfileGetEffectSlot((uint64_t)CommonProfile, 2, 0);
    C3DEffectSlotGetTextureInfo(EffectSlot, &v58, &v57, &v56);
    if (v56)
      v28 = v57 == 0;
    else
      v28 = 1;
    v26 = !v28;
  }
  BYTE12(v75) = v26;
  if (BYTE14(v64))
  {
    v55 = 0;
    v29 = C3DEffectCommonProfileGetEffectSlot((uint64_t)CommonProfile, 4, 0);
    C3DEffectSlotGetTextureInfo(v29, &v55, &v59, &v59);
    if (v55 == 4)
      HIWORD(v64) = 256;
  }
  IsDoubleSided = C3DMaterialIsDoubleSided(a7);
  v31 = v53;
  if ((LightingModel & 0xFFFFFFFB) == 0)
    v31 = 0;
  BYTE9(v76) = IsDoubleSided;
  LODWORD(v76) = LightingModel;
  v32 = v31 && v14;
  if (LightingModel == 5)
    v32 = 1;
  BYTE4(v76) = v32;
  if (a6 && LightingModel == 5)
  {
    BYTE10(v76) = (*a6 & 0x70) != 0;
    LOBYTE(v33) = 1;
    v35 = v51;
    v34 = v52;
    v36 = v50;
  }
  else
  {
    BYTE10(v76) = 0;
    if (LightingModel == 5)
    {
      v35 = v51;
      v34 = v52;
      v36 = v50;
      LOBYTE(v33) = 1;
    }
    else
    {
      v35 = v51;
      v34 = v52;
      v36 = v50;
      LOBYTE(v33) = LightingModel == 5;
      if (a6)
        v33 = ((unsigned __int16)*a6 >> 1) & 1;
    }
  }
  BYTE5(v76) = v33;
  if (a5 < 1)
  {
    v40 = 0;
  }
  else if ((*(_BYTE *)(v36 + 1) & 0x10) != 0)
  {
    v40 = 1;
  }
  else
  {
    v37 = 1;
    do
    {
      v38 = v37;
      if (a5 == v37)
        break;
      v39 = *(_DWORD *)(v36 + 4 * v37++);
    }
    while ((v39 & 0x1000) == 0);
    v40 = v38 < a5;
  }
  BYTE6(v76) = v40;
  BYTE7(v76) = C3DEffectCommonProfileIsPerPixelLit((uint64_t)CommonProfile) ^ 1;
  v41 = C3DEffectCommonProfileGetFloatProperty(CommonProfile, 18) != 1.0;
  BYTE7(v68) = v41;
  v42 = BYTE5(v64);
  if (BYTE5(v64))
  {
    v42 = C3DEffectCommonProfileGetFloatProperty(CommonProfile, 20) != 0.0;
    v41 = BYTE7(v68);
  }
  BYTE6(v68) = v42;
  if (v41)
    LOBYTE(v41) = C3DEffectCommonProfileGetTransparencyMode((uint64_t)CommonProfile) == 1;
  BYTE8(v68) = v41;
  BYTE13(v75) = (BYTE9(v64) | v57) != 0;
  v43 = 4;
  if (a5 < 4)
    v43 = a5;
  switch(v43)
  {
    case 1:
      goto LABEL_73;
    case 2:
      goto LABEL_72;
    case 3:
      goto LABEL_71;
    case 4:
      DWORD2(v77) = *(_DWORD *)(v36 + 12);
LABEL_71:
      DWORD1(v77) = *(_DWORD *)(v36 + 8);
LABEL_72:
      LODWORD(v77) = *(_DWORD *)(v36 + 4);
LABEL_73:
      HIDWORD(v76) = *(_DWORD *)v36;
      break;
    default:
      break;
  }
  BYTE12(v77) = C3DNodeGetOpacity((uint64_t)v34) < 1.0;
  IsDynamicBatchingEnabled = C3DGeometryIsDynamicBatchingEnabled(v35);
  v45 = 0;
  if (IsDynamicBatchingEnabled && !BYTE12(v77))
    v45 = BYTE10(v76) == 0;
  BYTE14(v75) = v45;
  v47 = v34 && (v46 = C3DGetScene(v34)) != 0 && C3DSceneGetFogEndDistance(v46) > 0.0;
  BYTE13(v77) = v47;
  return objc_alloc_init(MEMORY[0x1E0CC6AA0]);
}

void SCNStandardConstants::_setPropertyFlags(uint64_t a1, uint64_t a2, int a3, BOOL *a4, BOOL *a5, BOOL *a6, _DWORD *a7, int *a8, _DWORD *a9, int *a10)
{
  uint64_t EffectSlot;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  int v26;
  NSObject *v27;

  EffectSlot = C3DEffectCommonProfileGetEffectSlot(a2, a3, 0);
  if (!EffectSlot)
    return;
  v18 = EffectSlot;
  *a4 = C3DEffectSlotIsValid(EffectSlot);
  *a5 = C3DEffectSlotHasImageOrTexture(v18);
  *a6 = C3DEffectSlotGetIntensity(v18) != 1.0;
  if (C3DEffectSlotGetTextureComponents(v18) == 15)
  {
    v19 = 0;
LABEL_7:
    *a7 = v19;
    goto LABEL_8;
  }
  v20 = (((unint64_t)*(unsigned __int16 *)(v18 + 48) >> 11) & 0xF) - 1;
  if (v20 <= 7 && ((0x8Bu >> v20) & 1) != 0)
  {
    v19 = dword_1DD02A9B4[v20];
    goto LABEL_7;
  }
LABEL_8:
  if (a3 != 4 && *a5)
  {
    *a9 = C3DEffectSlotGetUVSet(v18);
    if (C3DKeyframeControllerHasInterpolationModesPerKey(v18))
    {
      v21 = *(_DWORD *)(a1 + 244) + 1;
      *(_DWORD *)(a1 + 244) = v21;
      *a10 = v21;
      v22 = *(_DWORD *)(a1 + 240) + 1;
      *(_DWORD *)(a1 + 240) = v22;
    }
    else
    {
      v23 = a1 + *a9;
      v26 = *(unsigned __int8 *)(v23 + 248);
      v24 = (_BYTE *)(v23 + 248);
      LOBYTE(v25) = v26;
      if (v26 == 255)
      {
        v25 = *(_DWORD *)(a1 + 240) + 1;
        *(_DWORD *)(a1 + 240) = v25;
        *v24 = v25;
      }
      v22 = v25;
    }
    *a8 = v22;
    if (v22 >= 8)
    {
      v27 = scn_default_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
        SCNStandardConstants::_setPropertyFlags(v27);
    }
  }
}

void __DestroyControllers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(int *)(a1 + 888) >= 1)
  {
    v2 = 0;
    v3 = 56;
    do
    {
      free(*(void **)(*(_QWORD *)(a1 + 880) + v3));
      ++v2;
      v3 += 80;
    }
    while (v2 < *(int *)(a1 + 888));
  }
  free(*(void **)(a1 + 880));
  *(_QWORD *)(a1 + 880) = 0;
}

BOOL C3DParticleSystemGetAndClearMeshDidChange(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 856);
  if (*(_BYTE *)(a1 + 856))
    *(_BYTE *)(a1 + 856) = 0;
  return v1 != 0;
}

void __C3DParticleSystemControllersDidChange(uint64_t a1)
{
  const void *v2;

  __DestroyControllers(a1);
  *(_QWORD *)(a1 + 888) = -1;
  v2 = *(const void **)(a1 + 920);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 920) = 0;
  }
}

uint64_t C3DParticleSystemCreate()
{
  uint64_t Instance;

  if (C3DParticleSystemGetTypeID_onceToken != -1)
    dispatch_once(&C3DParticleSystemGetTypeID_onceToken, &__block_literal_global_78);
  Instance = C3DTypeCreateInstance_(C3DParticleSystemGetTypeID_typeID, 0x3C0uLL);
  C3DColor4Make((float *)(Instance + 256), 1.0, 1.0, 1.0, 1.0);
  *(_DWORD *)(Instance + 372) = 1065353216;
  *(_QWORD *)(Instance + 108) = 1065353216;
  *(_BYTE *)(Instance + 101) = 1;
  *(_DWORD *)(Instance + 204) = 1065353216;
  *(_DWORD *)(Instance + 288) = 1065353216;
  *(_DWORD *)(Instance + 296) = 1065353216;
  *(_DWORD *)(Instance + 212) = 1060320051;
  *(_DWORD *)(Instance + 228) = 0;
  *(_DWORD *)(Instance + 220) = 1065353216;
  *(_DWORD *)(Instance + 304) = 65537;
  *(_DWORD *)(Instance + 384) = 1065353216;
  *(_DWORD *)(Instance + 396) = 1077936128;
  *(_OWORD *)(Instance + 128) = xmmword_1DD007920;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  __C3DParticleSystemControllersDidChange(Instance);
  *(_DWORD *)(Instance + 872) = -1;
  *(_WORD *)(Instance + 857) = 257;
  *(_QWORD *)(Instance + 904) = 0;
  return Instance;
}

CFIndex __AddModifierForStage(uint64_t a1, _DWORD *a2, CFArrayRef theArray, int a4)
{
  CFIndex result;
  CFIndex v9;
  CFIndex i;
  const void *ValueAtIndex;
  unsigned int v12;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v9 = result;
    for (i = 0; i != v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      result = C3DParticleModifierGetStage((uint64_t)ValueAtIndex);
      if ((_DWORD)result == a4)
      {
        v12 = (*a2)++;
        *(_QWORD *)(a1 + 24 * v12 + 16) = ValueAtIndex;
      }
    }
  }
  return result;
}

void __C3DParticleSystemUpdateInternal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const __CFArray *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  float DampingFactor;
  unsigned int v8;
  __n128 (**v9)(uint64_t, unsigned int, unsigned int);
  __n128 (*v10)(uint64_t, unsigned int, unsigned int);
  uint64_t v11;
  const __CFArray *v12;
  void *v13;
  const __CFArray *v14;
  CFIndex Count;
  unsigned int v16;
  CFIndex v17;
  CFIndex i;
  const void *ValueAtIndex;
  _QWORD *v20;
  const __CFArray *v21;
  uint64_t SystemSpawnedOnLiving;
  unsigned int v23;
  void *v24;
  unsigned int v25;
  _QWORD __src[1536];
  uint64_t v27;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v27 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(v1 + 872) = 0;
  v25 = 0;
  bzero(__src, 0x3000uLL);
  if (C3DParticleSystemGetRenderingMode(v2) - 4 >= 0xFFFFFFFE)
  {
    v6 = (_QWORD *)(v2 + 864);
    free(*(void **)(v2 + 864));
LABEL_32:
    v23 = 0;
    *v6 = 0;
    goto LABEL_33;
  }
  v3 = *(const __CFArray **)(v2 + 896);
  if (v3)
    __AddModifierForStage((uint64_t)__src, &v25, v3, 0);
  if (C3DParticleSystemGetParticleMassVariation(v2) == 0.0)
  {
    DampingFactor = C3DParticleSystemGetDampingFactor(v2);
    v8 = v25;
    v5 = ++v25;
    v9 = (__n128 (**)(uint64_t, unsigned int, unsigned int))&__src[3 * v8];
    if (DampingFactor == 0.0)
      v10 = C3DParticleEulerIntegration_NoMassVariationNoDrag;
    else
      v10 = C3DParticleEulerIntegration_NoMassVariation;
    *v9 = v10;
  }
  else
  {
    v4 = v25;
    v5 = ++v25;
    __src[3 * v4] = C3DParticleEulerIntegration_C;
  }
  if (C3DParticleSystemGetAffectedByPhysicsFields(v2))
  {
    v11 = 3 * v5++;
    v25 = v5;
    __src[v11] = C3DParticleModifier_PhysicsField;
  }
  if (C3DParticleSystemHasTextureAnimation(v2))
  {
    v25 = v5 + 1;
    __src[3 * v5] = C3DParticleModifier_Frame;
  }
  v12 = *(const __CFArray **)(v2 + 896);
  if (v12)
  {
    __AddModifierForStage((uint64_t)__src, &v25, v12, 1);
    __AddModifierForStage((uint64_t)__src, &v25, *(CFArrayRef *)(v2 + 896), 2);
  }
  if (C3DParticleSystemGetEventBlock(v2, 2u, 0))
    v13 = C3DParticleGenericColliderWithBlock;
  else
    v13 = C3DParticleGenericCollider;
  v14 = *(const __CFArray **)(v2 + 360);
  if (v14)
  {
    Count = CFArrayGetCount(v14);
    v16 = v25;
    if (Count >= 1)
    {
      v17 = Count;
      for (i = 0; i != v17; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 360), i);
        v20 = &__src[3 * v16 + 3 * i];
        *v20 = v13;
        v20[1] = ValueAtIndex;
      }
      v16 += i;
    }
    v25 = v16;
  }
  v21 = *(const __CFArray **)(v2 + 896);
  if (v21)
    __AddModifierForStage((uint64_t)__src, &v25, v21, 3);
  SystemSpawnedOnLiving = C3DParticleSystemGetSystemSpawnedOnLiving(v2);
  v23 = v25;
  if (SystemSpawnedOnLiving)
  {
    __src[3 * v25] = C3DParticleSpawnSubSystem;
    ++v23;
  }
  v6 = (_QWORD *)(v2 + 864);
  free(*(void **)(v2 + 864));
  if (!v23)
    goto LABEL_32;
  v24 = malloc_type_malloc(24 * v23, 0xA0040114AFA65uLL);
  *v6 = v24;
  memcpy(v24, __src, 24 * v23);
LABEL_33:
  *(_DWORD *)(v2 + 872) = v23;
}

uint64_t C3DParticleSystemGetRenderingMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 91);
}

float C3DParticleSystemGetParticleMassVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 376);
}

float C3DParticleSystemGetDampingFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 380);
}

uint64_t C3DParticleSystemGetAffectedByPhysicsFields(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 97);
}

BOOL C3DParticleSystemHasTextureAnimation(uint64_t a1)
{
  return C3DParticleSystemGetImageSequenceColumnCount(a1) > 1
      || C3DParticleSystemGetImageSequenceRowCount(a1) > 1;
}

uint64_t C3DParticleSystemGetEventBlock(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (a3)
    *a3 = *(_QWORD *)(a1 + 8 * a2 + 952);
  return *(_QWORD *)(a1 + 8 * a2 + 928);
}

uint64_t C3DParticleSystemGetSystemSpawnedOnLiving(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 344);
}

uint64_t C3DParticleSystemGetParticleColor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1 + 256;
}

__n128 C3DParticleSystemSetParticleColor(__n128 *a1, __n128 *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DParticleSystemSetParticleColor_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *a2;
  a1[16] = *a2;
  return result;
}

uint64_t C3DParticleSystemGetParticleColorController(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(__int16 *)(a1 + 892) == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 880) + 80 * *(__int16 *)(a1 + 892) + 16);
}

uint64_t C3DParticleSystemGetParticleOpacityController(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(__int16 *)(a1 + 894) == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 880) + 80 * *(__int16 *)(a1 + 894) + 16);
}

uint64_t C3DParticleSystemGetParticleTexture(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 240);
}

CFTypeRef C3DParticleSystemSetParticleTexture(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 240);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 240) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 240) = result;
    *(_BYTE *)(a1 + 858) = 1;
  }
  return result;
}

void C3DParticleSystemSetColliderNodes(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(CFTypeRef *)(a1 + 360);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 360) = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 360) = v13;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

void C3DParticleSystemSetEventBlock(uint64_t a1, unsigned int a2, void *aBlock, CFTypeRef cf)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v18;
  _QWORD *v19;
  CFTypeRef v20;
  uint64_t v21;
  const void *v22;
  void **v23;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = a2;
  v17 = a1 + 8 * a2;
  v18 = *(CFTypeRef *)(v17 + 952);
  if (v18 != cf)
  {
    v19 = (_QWORD *)(v17 + 952);
    if (v18)
    {
      CFRelease(v18);
      *v19 = 0;
    }
    if (cf)
      v20 = CFRetain(cf);
    else
      v20 = 0;
    *v19 = v20;
  }
  v21 = a1 + 8 * v16;
  v22 = *(const void **)(v21 + 928);
  if (v22 != aBlock)
  {
    v23 = (void **)(v21 + 928);
    if (v22)
      _Block_release(v22);
    *v23 = _Block_copy(aBlock);
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

void C3DParticleSystemSetProperyControllers(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(CFTypeRef *)(a1 + 400);
  if (v12 != cf)
  {
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 400) = 0;
    }
    if (cf)
      v13 = CFRetain(cf);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 400) = v13;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

void C3DParticleSystemSetParticleColorVariation(uint64_t a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DParticleSystemGetRenderingMode_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  *(__n128 *)(a1 + 272) = a2;
  __C3DParticleSystemControllersDidChange(a1);
  *(_DWORD *)(a1 + 872) = -1;
  *(_WORD *)(a1 + 857) = 257;
  *(_QWORD *)(a1 + 904) = 0;
}

__n128 C3DParticleSystemGetOrientationDirection(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1[9];
}

void C3DParticleSystemSetOrientationDirection(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DParticleSystemGetRenderingMode_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[9] = a2;
}

float C3DParticleSystemGetLightEmissionRadiusFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 392);
}

void C3DParticleSystemSetLightEmissionRadiusFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 392) = a2;
}

__n128 C3DParticleSystemGetAcceleration(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1[10];
}

void C3DParticleSystemSetAcceleration(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DParticleSystemGetRenderingMode_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[10] = a2;
}

uint64_t C3DParticleSystemGetAffectedByGravity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 96);
}

void C3DParticleSystemSetAffectedByGravity(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 96) != a2)
  {
    *(_BYTE *)(a1 + 96) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

void C3DParticleSystemSetAffectedByPhysicsFields(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 97) != a2)
  {
    *(_BYTE *)(a1 + 97) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetBirthDirection(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 89);
}

void C3DParticleSystemSetBirthDirection(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 89) = a2;
}

uint64_t C3DParticleSystemGetBirthLocation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 88);
}

void C3DParticleSystemSetBirthLocation(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 88) = a2;
}

float C3DParticleSystemGetBirthRate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 64);
}

void C3DParticleSystemSetBirthRate(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 64) = a2;
}

float C3DParticleSystemGetBirthRateVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 68);
}

void C3DParticleSystemSetBirthRateVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 68) = a2;
}

uint64_t C3DParticleSystemGetBlackPassEnabled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 105);
}

void C3DParticleSystemSetBlackPassEnabled(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 105) != a2)
  {
    *(_BYTE *)(a1 + 105) = a2;
    *(_BYTE *)(a1 + 858) = 1;
  }
}

uint64_t C3DParticleSystemGetBlendMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 90);
}

void C3DParticleSystemSetBlendMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 90) != a2)
  {
    *(_BYTE *)(a1 + 90) = a2;
    *(_BYTE *)(a1 + 858) = 1;
  }
}

uint64_t C3DParticleSystemGetColliderNodes(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 360);
}

void C3DParticleSystemSetDampingFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 380) = a2;
}

float C3DParticleSystemGetEmissionDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 108);
}

void C3DParticleSystemSetEmissionDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 108) = a2;
}

float C3DParticleSystemGetEmissionDurationVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 112);
}

void C3DParticleSystemSetEmissionDurationVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 112) = a2;
}

uint64_t C3DParticleSystemGetEmitterShape(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 80);
}

CFTypeRef C3DParticleSystemSetEmitterShape(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 80);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

__n128 C3DParticleSystemGetEmittingDirection(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1[8];
}

void C3DParticleSystemSetEmittingDirection(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DParticleSystemGetRenderingMode_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[8] = a2;
}

float C3DParticleSystemGetFixedTimeStep(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 388);
}

void C3DParticleSystemSetFixedTimeStep(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 388) = a2;
}

float C3DParticleSystemGetFresnelExponent(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 396);
}

void C3DParticleSystemSetFresnelExponent(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 396) = a2;
}

float C3DParticleSystemGetIdleDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 116);
}

void C3DParticleSystemSetIdleDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 116) = a2;
}

float C3DParticleSystemGetIdleDurationVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 120);
}

void C3DParticleSystemSetIdleDurationVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 120) = a2;
}

uint64_t C3DParticleSystemGetImageSequenceAnimationMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 94);
}

void C3DParticleSystemSetImageSequenceAnimationMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 94) != a2)
  {
    *(_BYTE *)(a1 + 94) = a2;
    *(_BYTE *)(a1 + 858) = 1;
  }
}

uint64_t C3DParticleSystemGetImageSequenceColumnCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int16 *)(a1 + 304);
}

void C3DParticleSystemSetImageSequenceColumnCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 HasTextureAnimation;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int16 *)(a1 + 304) != a2)
  {
    HasTextureAnimation = C3DParticleSystemHasTextureAnimation(a1);
    *(_WORD *)(a1 + 304) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
    if (HasTextureAnimation != C3DParticleSystemHasTextureAnimation(a1))
    {
      *(_BYTE *)(a1 + 858) = 1;
      *(_BYTE *)(a1 + 856) = 1;
    }
  }
}

float C3DParticleSystemGetImageSequenceFrameRate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 316);
}

void C3DParticleSystemSetImageSequenceFrameRate(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 316) != a2)
  {
    *(float *)(a1 + 316) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetImageSequenceFrameRateVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 320);
}

void C3DParticleSystemSetImageSequenceFrameRateVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 320) != a2)
  {
    *(float *)(a1 + 320) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetImageSequenceInitialFrame(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 308);
}

void C3DParticleSystemSetImageSequenceInitialFrame(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 308) != a2)
  {
    *(float *)(a1 + 308) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetImageSequenceInitialFrameVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 312);
}

void C3DParticleSystemSetImageSequenceInitialFrameVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 312) != a2)
  {
    *(float *)(a1 + 312) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetImageSequenceRowCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int16 *)(a1 + 306);
}

void C3DParticleSystemSetImageSequenceRowCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 HasTextureAnimation;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int16 *)(a1 + 306) != a2)
  {
    HasTextureAnimation = C3DParticleSystemHasTextureAnimation(a1);
    *(_WORD *)(a1 + 306) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
    if (HasTextureAnimation != C3DParticleSystemHasTextureAnimation(a1))
    {
      *(_BYTE *)(a1 + 858) = 1;
      *(_BYTE *)(a1 + 856) = 1;
    }
  }
}

uint64_t C3DParticleSystemGetIsLocal(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 95);
}

void C3DParticleSystemSetIsLocal(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 95) != a2)
  {
    *(_BYTE *)(a1 + 95) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetLightingEnabled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 99);
}

void C3DParticleSystemSetLightingEnabled(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 99) != a2)
  {
    *(_BYTE *)(a1 + 99) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 904) = 0;
    *(_BYTE *)(a1 + 858) = 1;
    *(_WORD *)(a1 + 856) = 257;
  }
}

uint64_t C3DParticleSystemGetLoops(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 101);
}

void C3DParticleSystemSetLoops(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 101) != a2)
  {
    *(_BYTE *)(a1 + 101) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetOrientationMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 92);
}

void C3DParticleSystemSetOrientationMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 92) != a2)
  {
    *(_BYTE *)(a1 + 92) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleAngle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 180);
}

void C3DParticleSystemSetParticleAngle(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 180) != a2)
  {
    *(float *)(a1 + 180) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleAngleVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 184);
}

void C3DParticleSystemSetParticleAngleVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 184) != a2)
  {
    *(float *)(a1 + 184) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleAngularVelocity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 196);
}

void C3DParticleSystemSetParticleAngularVelocity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 196) != a2)
  {
    *(float *)(a1 + 196) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleAngularVelocityVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 200);
}

void C3DParticleSystemSetParticleAngularVelocityVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 200) != a2)
  {
    *(float *)(a1 + 200) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleBounce(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 212);
}

void C3DParticleSystemSetParticleBounce(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 212) != a2)
  {
    *(float *)(a1 + 212) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleBounceVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 216);
}

void C3DParticleSystemSetParticleBounceVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 216) != a2)
  {
    *(float *)(a1 + 216) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleCharge(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 228);
}

void C3DParticleSystemSetParticleCharge(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 228) != a2)
  {
    *(float *)(a1 + 228) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleChargeVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 232);
}

void C3DParticleSystemSetParticleChargeVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 232) != a2)
  {
    *(float *)(a1 + 232) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

__n128 C3DParticleSystemGetParticleColorVariation(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1[17];
}

uint64_t C3DParticleSystemGetParticleDiesOnCollision(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 104);
}

void C3DParticleSystemSetParticleDiesOnCollision(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 104) = a2;
}

float C3DParticleSystemGetParticleFriction(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 220);
}

void C3DParticleSystemSetParticleFriction(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 220) != a2)
  {
    *(float *)(a1 + 220) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleFrictionVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 224);
}

void C3DParticleSystemSetParticleFrictionVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 224) != a2)
  {
    *(float *)(a1 + 224) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleLifeSpan(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 204);
}

void C3DParticleSystemSetParticleLifeSpan(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 204) != a2)
  {
    *(float *)(a1 + 204) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleLifeSpanVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 208);
}

void C3DParticleSystemSetParticleLifeSpanVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 208) != a2)
  {
    *(float *)(a1 + 208) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleMass(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 372);
}

void C3DParticleSystemSetParticleMass(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 372) != a2)
  {
    *(float *)(a1 + 372) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

void C3DParticleSystemSetParticleMassVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 376) != a2)
  {
    *(float *)(a1 + 376) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleSize(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 288);
}

void C3DParticleSystemSetParticleSize(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 288) != a2)
  {
    *(float *)(a1 + 288) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleSizeVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 292);
}

void C3DParticleSystemSetParticleSizeVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 292) != a2)
  {
    *(float *)(a1 + 292) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleVelocity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 188);
}

void C3DParticleSystemSetParticleVelocity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 188) != a2)
  {
    *(float *)(a1 + 188) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetParticleVelocityVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 192);
}

void C3DParticleSystemSetParticleVelocityVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 192) != a2)
  {
    *(float *)(a1 + 192) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetPhysicsCollisionsEnabled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 98);
}

void C3DParticleSystemSetPhysicsCollisionsEnabled(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 98) = a2;
}

void C3DParticleSystemSetRenderingMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 91) != a2)
  {
    *(_BYTE *)(a1 + 91) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetSeed(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 368);
}

void C3DParticleSystemSetSeed(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 368) = a2;
}

uint64_t C3DParticleSystemGetSoftParticlesEnabled(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 103);
}

void C3DParticleSystemSetSoftParticlesEnabled(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 103) != a2)
  {
    *(_BYTE *)(a1 + 103) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

uint64_t C3DParticleSystemGetSortingMode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 93);
}

void C3DParticleSystemSetSortingMode(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(unsigned __int8 *)(a1 + 93) != a2)
  {
    *(_BYTE *)(a1 + 93) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_WORD *)(a1 + 857) = 257;
    *(_QWORD *)(a1 + 904) = 0;
  }
}

float C3DParticleSystemGetSpeedFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 384);
}

void C3DParticleSystemSetSpeedFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 384) = a2;
}

float C3DParticleSystemGetSpreadingAngle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 176);
}

void C3DParticleSystemSetSpreadingAngle(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 176) = a2;
}

float C3DParticleSystemGetStretchFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 248);
}

void C3DParticleSystemSetStretchFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 248) != a2)
  {
    *(float *)(a1 + 248) = a2;
    *(_BYTE *)(a1 + 858) = 1;
    *(_BYTE *)(a1 + 856) = 1;
  }
}

uint64_t C3DParticleSystemGetSystemSpawnedOnCollision(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 328);
}

CFTypeRef C3DParticleSystemSetSystemSpawnedOnCollision(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 328);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 328) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 328) = result;
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 912) = 0;
  }
  return result;
}

uint64_t C3DParticleSystemGetSystemSpawnedOnDying(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 336);
}

CFTypeRef C3DParticleSystemSetSystemSpawnedOnDying(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 336);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 336) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 336) = result;
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 912) = 0;
  }
  return result;
}

CFTypeRef C3DParticleSystemSetSystemSpawnedOnLiving(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 344);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 344) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 344) = result;
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 912) = 0;
  }
  return result;
}

float C3DParticleSystemGetWarmupDuration(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 72);
}

void C3DParticleSystemSetWarmupDuration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 72) = a2;
}

uint64_t C3DParticleSystemGetWritesToDepthBuffer(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 106);
}

void C3DParticleSystemSetWritesToDepthBuffer(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 106) = a2;
}

float C3DParticleSystemGetParticleIntensity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 296);
}

void C3DParticleSystemSetParticleIntensity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 296) != a2)
  {
    *(float *)(a1 + 296) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_BYTE *)(a1 + 858) = 1;
    *(_QWORD *)(a1 + 904) = 0;
    *(_WORD *)(a1 + 856) = 257;
  }
}

float C3DParticleSystemGetParticleIntensityVariation(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 300);
}

void C3DParticleSystemSetParticleIntensityVariation(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParticleSystemGetRenderingMode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 300) != a2)
  {
    *(float *)(a1 + 300) = a2;
    __C3DParticleSystemControllersDidChange(a1);
    *(_DWORD *)(a1 + 872) = -1;
    *(_BYTE *)(a1 + 858) = 1;
    *(_QWORD *)(a1 + 904) = 0;
    *(_WORD *)(a1 + 856) = 257;
  }
}

uint64_t C3DParticleSystemGetControllers(uint64_t a1, _DWORD *a2)
{
  int v4;
  const __CFDictionary *v5;
  size_t v6;
  void *v7;

  v4 = *(_DWORD *)(a1 + 888);
  if (v4 == -1)
  {
    *(_DWORD *)(a1 + 888) = 0;
    v5 = *(const __CFDictionary **)(a1 + 400);
    if (v5)
    {
      v6 = 80 * CFDictionaryGetCount(v5);
      v7 = malloc_type_malloc(v6, 0x1030040D754E354uLL);
      *(_QWORD *)(a1 + 880) = v7;
      bzero(v7, v6);
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 400), (CFDictionaryApplierFunction)__appendController, (void *)a1);
      v4 = *(_DWORD *)(a1 + 888);
    }
    else
    {
      v4 = 0;
    }
  }
  *a2 = v4;
  return *(_QWORD *)(a1 + 880);
}

void __appendController(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *Value;
  _BYTE *v10;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  const __CFNumber *v15;
  _DWORD *v16;
  const __CFNumber *v17;
  _DWORD *v18;
  unint64_t v19;
  __int16 v20;
  __int16 v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeID v29;
  uint64_t Controller;
  unsigned int KeyCount;
  int ValueType;
  int DefaultInterpolationMode;
  const void *v34;
  unint64_t PropertyIndexAndStride;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  float *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  unint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;

  v6 = *(_QWORD *)(a3 + 880);
  v7 = *(_DWORD *)(a3 + 888);
  *(_DWORD *)(a3 + 888) = v7 + 1;
  v8 = v6 + 80 * v7;
  Value = CFDictionaryGetValue(theDict, CFSTR("ControllerAnimation"));
  *(_QWORD *)(v8 + 16) = Value;
  *(_BYTE *)(v8 + 48) = 1;
  v10 = (_BYTE *)(v8 + 48);
  *(_BYTE *)(v8 + 24) = 0;
  v11 = (_BYTE *)(v8 + 24);
  v12 = CFDictionaryGetValue(theDict, CFSTR("ControllerVariableMode"));
  if (v12)
  {
    v13 = v12;
    if (CFEqual(v12, CFSTR("ControllerVariableOverLife")))
    {
      *v11 = 0;
    }
    else if (CFEqual(v13, CFSTR("ControllerVariableOverDistance")))
    {
      *v11 = 1;
    }
    else if (CFEqual(v13, CFSTR("ControllerVariableOverOtherProperty")))
    {
      v34 = CFDictionaryGetValue(theDict, CFSTR("ControllerVariableOverOtherProperty"));
      PropertyIndexAndStride = (unint64_t)C3DParticleSystemGetPropertyIndexAndStride(a3, v34);
      if ((PropertyIndexAndStride & 0xFFFF00000000) != 0)
      {
        *v11 = 2;
        v37 = v6 + 80 * v7;
        *(_QWORD *)(v37 + 26) = PropertyIndexAndStride;
        *(_WORD *)(v37 + 34) = v36;
      }
      else
      {
        v63 = scn_default_log();
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          __appendController_cold_3((uint64_t)v34, v63, v56, v57, v58, v59, v60, v61);
      }
    }
    else
    {
      v62 = scn_default_log();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        __appendController_cold_2((uint64_t)v13, v62, v50, v51, v52, v53, v54, v55);
    }
  }
  v14 = v6 + 80 * v7;
  *(_QWORD *)(v14 + 40) = CFDictionaryGetValue(theDict, CFSTR("ControllerVariableOrigin"));
  v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ControllerVariableScale"));
  v16 = (_DWORD *)(v14 + 68);
  if (v15)
    CFNumberGetValue(v15, kCFNumberFloatType, v16);
  else
    *v16 = 1065353216;
  v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("ControllerVariableBias"));
  v18 = (_DWORD *)(v6 + 80 * v7 + 72);
  if (v17)
    CFNumberGetValue(v17, kCFNumberFloatType, v18);
  else
    *v18 = 0;
  v19 = (unint64_t)C3DParticleSystemGetPropertyIndexAndStride(a3, a1);
  v21 = v20;
  if (CFEqual(a1, CFSTR("Color")) && !*v11)
  {
    *(_WORD *)(a3 + 892) = *(_WORD *)(a3 + 888) - 1;
LABEL_23:
    *v10 = 0;
    goto LABEL_24;
  }
  if (CFEqual(a1, CFSTR("Opacity")) && !*v11)
  {
    *(_WORD *)(a3 + 894) = *(_WORD *)(a3 + 888) - 1;
    goto LABEL_23;
  }
  if ((v19 & 0xFFFF00000000) != 0)
  {
    *(_QWORD *)v8 = v19;
    *(_WORD *)(v8 + 8) = v21;
  }
  else
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      __appendController_cold_1((uint64_t)a1, v22, v23, v24, v25, v26, v27, v28);
    --*(_DWORD *)(a3 + 888);
  }
LABEL_24:
  if (*v10)
  {
    if (Value)
    {
      v29 = CFGetTypeID(Value);
      if (v29 == C3DKeyframedAnimationGetTypeID())
      {
        Controller = C3DKeyframedAnimationGetController((uint64_t)Value);
        KeyCount = C3DKeyframeControllerGetKeyCount(Controller);
        ValueType = C3DKeyframeControllerGetValueType(Controller);
        DefaultInterpolationMode = C3DKeyframeControllerGetDefaultInterpolationMode(Controller);
        if (DefaultInterpolationMode)
        {
          if (DefaultInterpolationMode == 2)
            KeyCount *= 8;
        }
        else
        {
          KeyCount *= 2;
        }
        v38 = v6 + 80 * v7;
        *(_BYTE *)(v38 + 49) = DefaultInterpolationMode != 1;
        *(_BYTE *)(v38 + 50) = C3DAnimationGetAdditive(*(_QWORD *)(v8 + 16));
        if (KeyCount <= 0xFF)
        {
          v39 = KeyCount <= 2 ? 2 : KeyCount;
          v40 = v6 + 80 * v7;
          *(_DWORD *)(v40 + 64) = v39;
          v41 = (float *)(v40 + 64);
          *(v41 - 3) = (float)(v39 - 1);
          if (WORD2(v19))
          {
            v42 = malloc_type_malloc(WORD2(v19) + WORD2(v19) * v39, 0x2A9BEDFBuLL);
            v43 = v6 + 80 * v7;
            *(_QWORD *)(v43 + 56) = v42;
            v44 = (_QWORD *)(v43 + 56);
            bzero(v42, WORD2(v19) + WORD2(v19) * *(_DWORD *)v41);
            if (*(_DWORD *)v41)
            {
              v45 = 0;
              v46 = 0;
              v47 = 1.0 / (float)(*(_DWORD *)v41 - 1);
              v48 = 0.0;
              do
              {
                C3DAnimationEvaluate((uint64_t)Value);
                if (ValueType == 9)
                {
                  v49 = *v44 + v45;
                  *(_QWORD *)v49 = 0;
                  *(_DWORD *)(v49 + 8) = 0;
                }
                v48 = v47 + v48;
                ++v46;
                v45 += WORD2(v19);
              }
              while (v46 < *(unsigned int *)v41);
            }
            else
            {
              LODWORD(v46) = 0;
            }
            memcpy((void *)(*v44 + v46 * WORD2(v19)), (const void *)(*v44 + ((_DWORD)v46 - 1) * WORD2(v19)), WORD2(v19));
          }
        }
      }
    }
  }
}

void C3DParticleSystemProcessAffectors(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  const __CFArray *OverrideMaterial;
  _BYTE v15[256];
  _OWORD v16[16];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 872);
  if (v8 == -1)
  {
    __C3DParticleSystemUpdateInternal(a1);
    v8 = *(_DWORD *)(a1 + 872);
  }
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 864) + v9;
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        KeyPath = C3DAnimationGetKeyPath(v12);
        OverrideMaterial = (const __CFArray *)C3DGeometryGetOverrideMaterial(*(_QWORD *)(*(_QWORD *)(a1 + 864) + v9 + 16));
        memset(v16, 0, sizeof(v16));
        C3DParticleSystemInstanceFillUserData(a1, a2, OverrideMaterial, (uint64_t)v16, (uint64_t)v15, 0);
        (*(void (**)(uint64_t, _OWORD *, _BYTE *, _QWORD, _QWORD, float))(KeyPath + 16))(KeyPath, v16, v15, a3, a4, *(float *)(a2 + 1028));
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))v11)(a2, a3, a4, *(_QWORD *)(v11 + 8));
      }
      ++v10;
      v9 += 24;
    }
    while (v10 < *(int *)(a1 + 872));
  }
}

void *C3DParticleSystemGetSimulateLifeCallback(uint64_t a1)
{
  void *result;

  result = *(void **)(a1 + 912);
  if (!result)
  {
    if (C3DParticleSystemGetEventBlock(a1, 1u, 0))
    {
      result = C3DParticleSystemInstanceSimulateLifeWithBlock;
    }
    else if (*(_QWORD *)(a1 + 336))
    {
      result = C3DParticleSystemInstanceSimulateLifeAndSpawnWhenDying;
    }
    else
    {
      result = C3DParticleSystemInstanceSimulateLife;
    }
    *(_QWORD *)(a1 + 912) = result;
  }
  return result;
}

void (*C3DParticleSystemGetEmissionCallback(uint64_t a1))(uint64_t a1, float32x4_t *a2, double a3, float a4)
{
  void (*v1)(uint64_t, float32x4_t *, double, float);
  int v2;
  uint64_t (*v3)(uint64_t, float *, double, float);

  v1 = *(void (**)(uint64_t, float32x4_t *, double, float))(a1 + 904);
  if (!v1)
  {
    v2 = *(unsigned __int8 *)(a1 + 91);
    v3 = C3DParticleEmitStandard;
    if (v2 == 3)
      v3 = (uint64_t (*)(uint64_t, float *, double, float))C3DParticleEmitBeam;
    if (v2 == 2)
      v1 = C3DParticleEmitTrail;
    else
      v1 = (void (*)(uint64_t, float32x4_t *, double, float))v3;
    *(_QWORD *)(a1 + 904) = v1;
  }
  return v1;
}

const UInt8 *C3DParticleSystemGetColorRamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const UInt8 *result;
  uint64_t ParticleColorController;
  uint64_t ParticleOpacityController;
  const UInt8 *v13;
  uint64_t v14;
  float v15;
  float64x2_t v21;
  float32x2_t v22;
  double v23;
  float v24;
  UInt8 *v25;
  CFDataRef v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  float64x2_t v32;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      -[SCNNode replaceObjectInParticleSystemsAtIndex:withObject:].cold.1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (*(_QWORD *)(a1 + 920))
    return *(const UInt8 **)(a1 + 920);
  ParticleColorController = C3DParticleSystemGetParticleColorController(a1);
  ParticleOpacityController = C3DParticleSystemGetParticleOpacityController(a1);
  result = (const UInt8 *)C3DMalloc(0x400uLL);
  if (result)
  {
    v13 = result;
    v14 = 0;
    v15 = 0.0;
    __asm { FMOV            V0.2D, #1.0 }
    v32 = _Q0;
    do
    {
      if (ParticleColorController)
        C3DAnimationEvaluate(ParticleColorController);
      if (ParticleOpacityController)
        C3DAnimationEvaluate(ParticleOpacityController);
      v15 = v15 + 0.0039216;
      v21 = vmaxnmq_f64(vcvtq_f64_f32((float32x2_t)0x3F8000003F800000), (float64x2_t)0);
      v22 = vcvt_f32_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v21, v32), (int8x16_t)v32, (int8x16_t)v21));
      v23 = fmax(1.0, 0.0);
      if (v23 > 1.0)
        v23 = 1.0;
      v24 = v23;
      v25 = (UInt8 *)&v13[v14];
      *v25 = (int)((float)(1.0 * v22.f32[0]) * 255.0);
      v25[1] = (int)(vmuls_lane_f32(1.0, v22, 1) * 255.0);
      v25[2] = (int)((float)(1.0 * v24) * 255.0);
      v25[3] = (int)(1.0 * 255.0);
      v14 += 4;
    }
    while (v14 != 1024);
    v26 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v13, 1024, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v27 = C3DImageCreateWithRawData(v26, 0x20u, 4, 0.00781250196);
    if (v27)
    {
      v28 = (const void *)v27;
      v29 = C3DFXSamplerCreate();
      *(_QWORD *)(a1 + 920) = v29;
      C3DFXSamplerSetImage(v29, v28);
      CFRelease(v28);
      v30 = *(_QWORD *)(a1 + 920);
      v31 = (const void *)C3DTextureSamplerBilinearNoAnisotropy();
      C3DFXSamplerSetTextureSampler(v30, v31);
    }
    return *(const UInt8 **)(a1 + 920);
  }
  return result;
}

void __addPrimaryData(uint64_t a1, __CFDictionary *a2, int a3, const void *a4, __int16 a5, int a6, uint64_t a7, __int16 a8, char a9, char a10)
{
  uint64_t v10;
  __int16 v12;
  __int16 v15;
  char v17;
  int v18;
  _BYTE *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = *(unsigned int *)(a1 + 384);
  if (v10 > 0x1F)
  {
    if ((__addPrimaryData_done & 1) == 0)
    {
      __addPrimaryData_done = 1;
      v21 = scn_default_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        __addPrimaryData_cold_1(v21, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  else
  {
    v12 = a6;
    v15 = a3;
    *(_DWORD *)(a1 + 384) = v10 + 1;
    v17 = -1;
    if (a3 != 1 && a10)
    {
      *(_DWORD *)(a1 + 384) = v10 + 2;
      *(_DWORD *)(a1 + 4 * (v10 + 1)) = a6;
      v17 = v10 + 1;
    }
    if (a9)
      v18 = a6;
    else
      v18 = 0;
    if (!a9)
      a7 = 0;
    *(_DWORD *)(a1 + 4 * v10) = v18;
    *(_QWORD *)(a1 + 8 * v10 + 128) = a7;
    v20 = malloc_type_malloc(0xAuLL, 0x100004080B1215BuLL);
    *v20 = v10;
    v20[1] = v17;
    *((_WORD *)v20 + 1) = a5;
    *((_WORD *)v20 + 2) = v12;
    *((_WORD *)v20 + 3) = a8;
    *((_WORD *)v20 + 4) = v15;
    CFDictionarySetValue(a2, a4, v20);
  }
}

void __addSecondaryData(uint64_t a1, __CFDictionary *a2, const void *a3, __int16 a4, int a5, uint64_t a6, __int16 a7)
{
  unsigned int v7;
  __int16 v9;
  unsigned int v13;
  _BYTE *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_DWORD *)(a1 + 384);
  if (v7 > 0x1F)
  {
    if ((__addSecondaryData_done & 1) == 0)
    {
      __addSecondaryData_done = 1;
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        __addPrimaryData_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  else
  {
    v9 = a5;
    v13 = v7 - 1;
    *(_DWORD *)(a1 + 4 * v13) = a5;
    *(_QWORD *)(a1 + 8 * v13 + 128) = a6;
    v14 = malloc_type_malloc(0xAuLL, 0x100004080B1215BuLL);
    *v14 = v13;
    v14[1] = -1;
    *((_WORD *)v14 + 1) = a4;
    *((_WORD *)v14 + 2) = v9;
    *((_WORD *)v14 + 3) = a7;
    CFDictionarySetValue(a2, a3, v14);
  }
}

BOOL __semanticHasVariation(__n128 *a1, int a2)
{
  _BOOL8 result;
  float ParticleMassVariation;

  result = 1;
  switch(a2)
  {
    case 0:
    case 1:
      return result;
    case 6:
      ParticleMassVariation = C3DParticleSystemGetParticleMassVariation((uint64_t)a1);
      goto LABEL_9;
    case 7:
      ParticleMassVariation = C3DParticleSystemGetParticleSizeVariation((uint64_t)a1);
      goto LABEL_9;
    case 8:
      return vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32((float32x4_t)C3DParticleSystemGetParticleColorVariation(a1)))) >> 31;
    case 10:
      ParticleMassVariation = C3DParticleSystemGetParticleFrictionVariation((uint64_t)a1);
      goto LABEL_9;
    case 11:
      ParticleMassVariation = C3DParticleSystemGetParticleBounceVariation((uint64_t)a1);
      goto LABEL_9;
    case 12:
      ParticleMassVariation = C3DParticleSystemGetParticleChargeVariation((uint64_t)a1);
      goto LABEL_9;
    case 20:
      ParticleMassVariation = C3DParticleSystemGetParticleIntensityVariation((uint64_t)a1);
LABEL_9:
      result = ParticleMassVariation > 0.0;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

const __CFDictionary *__semanticIsUsedByController(uint64_t a1, unsigned int a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 400);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, *(&s_semanticsDesc + 3 * a2));
    if (result)
    {
      if ((a2 & 0xFFFFFFFE) == 8)
      {
        result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ControllerVariableMode"));
        if (result)
          return (const __CFDictionary *)(CFEqual(result, CFSTR("ControllerVariableOverLife")) == 0);
      }
      else
      {
        return (const __CFDictionary *)1;
      }
    }
  }
  return result;
}

BOOL __semanticIsUsedByEventBlock(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  CFTypeRef *v4;
  BOOL v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFArrayRef theArray;

  v3 = 0;
  v4 = (CFTypeRef *)(&s_semanticsDesc + 3 * a2);
  v5 = 1;
  while (1)
  {
    theArray = 0;
    if (C3DParticleSystemGetEventBlock(a1, v3, &theArray))
    {
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
          break;
      }
    }
LABEL_8:
    v5 = v3++ < 2;
    if (v3 == 3)
      return 0;
  }
  v7 = Count;
  v8 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
    if (CFEqual(ValueAtIndex, *v4))
      return v5;
    if (v7 == ++v8)
      goto LABEL_8;
  }
}

void __addSemanticData(__n128 *a1, __CFDictionary *a2, unsigned int a3, char a4)
{
  BOOL HasVariation;
  unsigned int v9;
  BOOL IsUsedByEventBlock;

  HasVariation = __semanticHasVariation(a1, a3);
  v9 = __semanticIsUsedByController((uint64_t)a1, a3);
  IsUsedByEventBlock = __semanticIsUsedByEventBlock((uint64_t)a1, a3);
  if ((a4 & 1) != 0 || HasVariation || v9)
    __addPrimaryData((uint64_t)&a1[26], a2, a3, *(&s_semanticsDesc + 3 * a3), *((unsigned __int8 *)&s_semanticsDesc + 24 * a3 + 8), *((unsigned __int8 *)&s_semanticsDesc + 24 * a3 + 9), (uint64_t)*(&s_semanticsDesc + 3 * a3 + 2), 0, a4 | IsUsedByEventBlock | HasVariation, v9);
}

uint64_t C3DParticleSystemGetParticleLayout(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  char v4;
  int v5;
  BOOL IsUsedByEventBlock;
  char v7;
  char v8;
  char HasTextureAnimation;
  uint64_t v10;
  int v11;
  uint64_t EventBlock;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *Value;
  int v21;
  CFArrayRef theArray;

  if (!*(_BYTE *)(a1 + 857))
    return a1 + 416;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  __releaseProperties(a1);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  __addSemanticData((__n128 *)a1, Mutable, 0, 1);
  __addSecondaryData(a1 + 416, Mutable, CFSTR("Angle"), 1, 16, (uint64_t)C3DParticleInitPositionAndVelocity, 12);
  __addSemanticData((__n128 *)a1, Mutable, 1u, 1);
  __addSecondaryData(a1 + 416, Mutable, CFSTR("AngularVelocity"), 1, 16, (uint64_t)C3DParticleInitDummy, 12);
  if (C3DParticleSystemGetParticleLifeSpanVariation(a1) <= 0.0)
  {
    __addSemanticData((__n128 *)a1, Mutable, 2u, 1);
  }
  else
  {
    __addPrimaryData(a1 + 416, Mutable, 2, CFSTR("Life"), 1, 4, (uint64_t)C3DParticleInitLifeWithVariation, 0, 1, 0);
    __addPrimaryData(a1 + 416, Mutable, 3, CFSTR("InvLifeSpan"), 1, 4, (uint64_t)C3DParticleInitDummy, 0, 1, 0);
  }
  __addSemanticData((__n128 *)a1, Mutable, 7u, 0);
  __addSemanticData((__n128 *)a1, Mutable, 0x14u, 0);
  __addSemanticData((__n128 *)a1, Mutable, 0xBu, 0);
  __addSemanticData((__n128 *)a1, Mutable, 0xAu, 0);
  __addSemanticData((__n128 *)a1, Mutable, 0xCu, 0);
  v4 = C3DParticleSystemGetOrientationMode(a1) == 2;
  __addSemanticData((__n128 *)a1, Mutable, 0xDu, v4);
  if (__semanticIsUsedByController(a1, 9u))
  {
    v5 = vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32((float32x4_t)C3DParticleSystemGetParticleColorVariation((__n128 *)a1))));
    IsUsedByEventBlock = __semanticIsUsedByEventBlock(a1, 8u);
    v7 = v5 < 0 || IsUsedByEventBlock;
    v8 = __semanticIsUsedByController(a1, 8u);
    __addPrimaryData(a1 + 416, Mutable, 8, CFSTR("Color"), 4, 16, (uint64_t)C3DParticleInitColor, 0, v7, v8);
    __addSecondaryData(a1 + 416, Mutable, CFSTR("Opacity"), 1, 16, (uint64_t)C3DParticleInitColor, 12);
  }
  else
  {
    __addSemanticData((__n128 *)a1, Mutable, 8u, 0);
  }
  __addSemanticData((__n128 *)a1, Mutable, 6u, 0);
  HasTextureAnimation = C3DParticleSystemHasTextureAnimation(a1);
  __addSemanticData((__n128 *)a1, Mutable, 0xEu, HasTextureAnimation);
  __addSemanticData((__n128 *)a1, Mutable, 0xFu, 0);
  v10 = C3DParticleSystemGetColliderNodes(a1) != 0;
  v11 = *(unsigned __int8 *)(a1 + 91);
  if (v11 == 3 || v11 == 2)
    goto LABEL_15;
  if (*(_BYTE *)(a1 + 93))
  {
    if (*(unsigned __int8 *)(a1 + 93) - 3 > 1)
    {
      v10 = 4;
      goto LABEL_16;
    }
LABEL_15:
    __addSemanticData((__n128 *)a1, Mutable, 4u, 1);
LABEL_16:
    __addSemanticData((__n128 *)a1, Mutable, 5u, 1);
  }
  EventBlock = C3DParticleSystemGetEventBlock(a1, 2u, 0);
  if (EventBlock | C3DParticleSystemGetEventBlock(a1, 1u, 0))
    __addSemanticData((__n128 *)a1, Mutable, 0x11u, 1);
  theArray = 0;
  if (C3DParticleSystemGetEventBlock(a1, 2u, &theArray))
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if (Count >= 1)
      {
        v14 = Count;
        v15 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
          if (CFEqual(ValueAtIndex, CFSTR("ContactPoint")))
            break;
          if (CFEqual(ValueAtIndex, CFSTR("ContactNormal")))
          {
            v17 = 19;
            goto LABEL_27;
          }
LABEL_28:
          if (v14 == ++v15)
            goto LABEL_29;
        }
        v17 = 18;
LABEL_27:
        __addSemanticData((__n128 *)a1, Mutable, v17, 1);
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v10)
    __addPrimaryData(a1 + 416, Mutable, 16, CFSTR("TempData"), 0, v10, 0, 0, 1, 0);
  *(_QWORD *)(a1 + 408) = CFDictionaryCreateCopy(v2, Mutable);
  CFRelease(Mutable);
  v18 = 0;
  v19 = (_BYTE *)(a1 + 804);
  do
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 408), *(__CFString **)((char *)&s_semanticsDesc + v18));
    if (Value)
    {
      *v19 = *Value;
      v21 = Value[1];
      if (v21 == 255)
        LOBYTE(v21) = *Value;
    }
    else
    {
      LOBYTE(v21) = -1;
      *v19 = -1;
    }
    v19[21] = v21;
    ++v19;
    v18 += 24;
  }
  while (v18 != 504);
  *(_BYTE *)(a1 + 857) = 0;
  return a1 + 416;
}

void __releaseProperties(uint64_t a1)
{
  const __CFDictionary *v2;
  const void *v3;

  v2 = *(const __CFDictionary **)(a1 + 408);
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)__freeProperty, 0);
    v3 = *(const void **)(a1 + 408);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 408) = 0;
    }
  }
}

unint64_t C3DParticleSystemGetMaterial(__n128 *a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6)
{
  char v9;
  uint64_t v12;
  uint64_t v13;
  int WritesToDepthBuffer;
  _QWORD *v15;

  v9 = a3;
  if (a1[53].n128_u8[10] || a1[53].n128_u8[11] != a3 || a1[53].n128_u8[12] != a5)
  {
    a1[53].n128_u8[12] = a5;
    a1[53].n128_u8[10] = 0;
    a1[53].n128_u8[11] = a3;
    if (!a1[53].n128_u64[0])
    {
      v12 = C3DMaterialCreate();
      a1[53].n128_u64[0] = v12;
      C3DMaterialSetDoubleSided(v12, 1);
      C3DMaterialSetEnableReadFromDepthBuffer(a1[53].n128_i64[0], 1);
      v13 = a1[53].n128_i64[0];
      WritesToDepthBuffer = C3DParticleSystemGetWritesToDepthBuffer((uint64_t)a1);
      C3DMaterialSetEnableWriteInDepthBuffer(v13, WritesToDepthBuffer);
    }
    v15 = C3DParticleManagerComputeTechniqueForSystem(a2, a1, v9, a4, a5, a6);
    C3DMaterialSetTechnique(a1[53].n128_i64[0], v15);
  }
  return a1[53].n128_u64[0];
}

const void *C3DParticleSystemGetPropertyIndexAndStride(uint64_t a1, const void *a2)
{
  const void *result;

  C3DParticleSystemGetParticleLayout(a1);
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 408), a2);
  if (result)
    return *(const void **)result;
  return result;
}

void C3DParticleSystemAddModifier(uint64_t a1, void *value)
{
  __CFArray *Mutable;

  Mutable = *(__CFArray **)(a1 + 896);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 896) = Mutable;
  }
  CFArrayAppendValue(Mutable, value);
  *(_DWORD *)(a1 + 872) = -1;
  *(_QWORD *)(a1 + 912) = 0;
}

void C3DParticleSystemRemoveModifier(uint64_t a1, int a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;

  v3 = *(const __CFArray **)(a1 + 896);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 896), v7);
        if (C3DParticleModifierGetStage((uint64_t)ValueAtIndex) == a2)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 896), v7);
          --v6;
        }
        else
        {
          ++v7;
        }
      }
      while (v7 < v6);
    }
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 912) = 0;
  }
}

void C3DParticleSystemRemoveAllModifiers(uint64_t a1)
{
  __CFArray *v2;

  v2 = *(__CFArray **)(a1 + 896);
  if (v2)
  {
    CFArrayRemoveAllValues(v2);
    *(_DWORD *)(a1 + 872) = -1;
    *(_QWORD *)(a1 + 912) = 0;
  }
}

uint64_t C3DParticleSystemHasFogSupport(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 859);
}

uint64_t C3DParticleSystemHasCubeMapTexture(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 240);
  if (result)
    return C3DImageIsCubeMap(result);
  return result;
}

uint64_t C3DParticleSystemGetConstantDataPtrForSemantic(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch((int)a2)
  {
    case 6:
      result = a1 + 372;
      break;
    case 7:
      result = a1 + 288;
      break;
    case 8:
      result = a1 + 256;
      break;
    case 9:
      result = a1 + 268;
      break;
    case 10:
      result = a1 + 220;
      break;
    case 11:
      result = a1 + 212;
      break;
    case 12:
      result = a1 + 228;
      break;
    case 14:
      result = a1 + 308;
      break;
    case 15:
      result = a1 + 316;
      break;
    case 20:
      result = a1 + 296;
      break;
    default:
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        C3DParticleSystemGetConstantDataPtrForSemantic_cold_1(a2, v4, v5, v6, v7, v8, v9, v10);
      result = 0;
      break;
  }
  return result;
}

void _C3DParticleSystemCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  uint64_t i;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v2 = *(const void **)(a1 + 240);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v3 = *(const void **)(a1 + 352);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 352) = 0;
  }
  v4 = *(const void **)(a1 + 920);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 920) = 0;
  }
  v5 = *(const void **)(a1 + 848);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 848) = 0;
  }
  v6 = *(const void **)(a1 + 80);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v7 = *(const void **)(a1 + 360);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 360) = 0;
  }
  v8 = *(const void **)(a1 + 328);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 328) = 0;
  }
  v9 = *(const void **)(a1 + 336);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 336) = 0;
  }
  v10 = *(const void **)(a1 + 344);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 344) = 0;
  }
  __releaseProperties(a1);
  for (i = 0; i != 24; i += 8)
  {
    v12 = a1 + i;
    v13 = *(const void **)(a1 + i + 928);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v12 + 928) = 0;
    }
    v14 = *(const void **)(v12 + 952);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v12 + 952) = 0;
    }
  }
  v15 = *(const void **)(a1 + 896);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 896) = 0;
  }
  free(*(void **)(a1 + 864));
  *(_QWORD *)(a1 + 864) = 0;
  __DestroyControllers(a1);
  v16 = *(const void **)(a1 + 400);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 400) = 0;
  }
}

CFStringRef _C3DParticleSystemCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleSystemRef>"));
}

CFStringRef _C3DParticleSystemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleSystemRef>"));
}

void _C3DParticleSystemSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  void *v6;

  if ((void *)(a1 + 248) == __dst)
  {
    C3DParticleSystemSetStretchFactor(a1, *__src);
  }
  else
  {
    v6 = (void *)(a1 + 256);
    memcpy(__dst, __src, __n);
    if (v6 != __dst)
    {
      __C3DParticleSystemControllersDidChange(a1);
      *(_DWORD *)(a1 + 872) = -1;
      *(_WORD *)(a1 + 857) = 257;
      *(_QWORD *)(a1 + 904) = 0;
    }
  }
}

void __freeProperty(int a1, void *a2)
{
  free(a2);
}

const __CFString *C3DLibraryGetStringForType(uint64_t a1)
{
  __CFString **v2;

  if (C3DGeometryGetTypeID() == a1 || C3DParametricGeometryGetTypeID() == a1 || C3DFloorGetTypeID() == a1)
  {
    v2 = kC3DGeometryTypeKey;
    return *v2;
  }
  if (C3DMeshGetTypeID() == a1)
  {
    v2 = kC3DMeshTypeKey;
    return *v2;
  }
  if (C3DAnimationGroupGetTypeID() == a1)
  {
    v2 = kC3DAnimationGroupTypeKey;
    return *v2;
  }
  if (C3DMaterialGetTypeID() == a1)
  {
    v2 = kC3DMaterialTypeKey;
    return *v2;
  }
  if (C3DImageGetTypeID() == a1)
  {
    v2 = kC3DImageTypeKey;
    return *v2;
  }
  if (C3DMeshElementGetTypeID() == a1)
  {
    v2 = kC3DMeshElementTypeKey;
    return *v2;
  }
  if (C3DNodeGetTypeID() == a1)
  {
    v2 = kC3DNodeTypeKey;
    return *v2;
  }
  if (C3DCameraGetTypeID() == a1)
  {
    v2 = kC3DCameraTypeKey;
    return *v2;
  }
  if (C3DLightGetTypeID() == a1)
  {
    v2 = kC3DLightTypeKey;
    return *v2;
  }
  if (C3DSkinGetTypeID() == a1)
  {
    v2 = kC3DSkinTypeKey;
    return *v2;
  }
  if (C3DMeshSourceGetTypeID() == a1)
  {
    v2 = kC3DMeshSourceTypeKey;
    return *v2;
  }
  if (C3DGenericSourceGetTypeID() == a1)
  {
    v2 = kC3DGenericSourceTypeKey;
    return *v2;
  }
  if (C3DMorphGetTypeID() == a1)
  {
    v2 = kC3DMorphTypeKey;
    return *v2;
  }
  if (C3DSceneGetTypeID() == a1)
    return CFSTR("scene");
  if (C3DKeyframedAnimationGetTypeID() == a1)
    return CFSTR("keyframedAnimations");
  return 0;
}

uint64_t C3DLibraryGetTypeForString(const __CFString *a1)
{
  if (CFStringCompare(a1, CFSTR("mesh"), 0) == kCFCompareEqualTo)
    return C3DGeometryGetTypeID();
  if (CFStringCompare(a1, CFSTR("geometry"), 0) == kCFCompareEqualTo)
    return C3DMeshGetTypeID();
  if (CFStringCompare(a1, CFSTR("animation"), 0) == kCFCompareEqualTo)
    return C3DAnimationGroupGetTypeID();
  if (CFStringCompare(a1, CFSTR("material"), 0) == kCFCompareEqualTo)
    return C3DMaterialGetTypeID();
  if (CFStringCompare(a1, CFSTR("image"), 0) == kCFCompareEqualTo)
    return C3DImageGetTypeID();
  if (CFStringCompare(a1, CFSTR("geometryElement"), 0) == kCFCompareEqualTo)
    return C3DMeshElementGetTypeID();
  if (CFStringCompare(a1, CFSTR("node"), 0) == kCFCompareEqualTo)
    return C3DNodeGetTypeID();
  if (CFStringCompare(a1, CFSTR("camera"), 0) == kCFCompareEqualTo)
    return C3DCameraGetTypeID();
  if (CFStringCompare(a1, CFSTR("light"), 0) == kCFCompareEqualTo)
    return C3DLightGetTypeID();
  if (CFStringCompare(a1, CFSTR("skin"), 0) == kCFCompareEqualTo)
    return C3DSkinGetTypeID();
  if (CFStringCompare(a1, CFSTR("morph"), 0) == kCFCompareEqualTo)
    return C3DMorphGetTypeID();
  if (CFStringCompare(a1, CFSTR("geometrySource"), 0) == kCFCompareEqualTo)
    return C3DMeshSourceGetTypeID();
  if (CFStringCompare(a1, CFSTR("genericSource"), 0))
    return 0;
  return C3DGenericSourceGetTypeID();
}

void _C3DLibrarySubStorageCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

CFStringRef _C3DLibrarySubStorageCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLibrarySubStorage>"));
}

CFStringRef _C3DLibrarySubStorageCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLibrarySubStorage>"));
}

__CFString *C3DLibraryCreateEntryIdentifier(uint64_t a1, uint64_t a2)
{
  __CFString *Mutable;
  const __CFString *v5;
  const __CFString *StringForType;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Mutable = CFStringCreateMutable(0, 0);
  v5 = CFStringCreateWithFormat(0, 0, CFSTR("%d"), a1);
  StringForType = C3DLibraryGetStringForType(a2);
  if (StringForType)
  {
    CFStringAppend(Mutable, StringForType);
    CFStringAppend(Mutable, CFSTR("/"));
    CFStringAppend(Mutable, v5);
    CFRelease(v5);
  }
  else
  {
    CFRelease(v5);
    CFRelease(Mutable);
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      C3DLibraryCreateEntryIdentifier_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
    return 0;
  }
  return Mutable;
}

uint64_t C3DLibraryGetRemappedID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  __CFString *EntryIdentifier;
  __CFString *v7;
  const __CFNumber *Value;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int valuePtr;

  if (!a2 || !*(_QWORD *)(a1 + 48))
    return 0;
  v4 = a3;
  v5 = a2;
  EntryIdentifier = C3DLibraryCreateEntryIdentifier(a2, a3);
  if (!EntryIdentifier)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      C3DLibraryGetRemappedID_cold_1(v5, v4, v10);
    return 0;
  }
  v7 = EntryIdentifier;
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), EntryIdentifier);
  if (Value)
  {
    valuePtr = 0;
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    v9 = valuePtr;
  }
  else
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      C3DLibraryGetRemappedID_cold_2((uint64_t)v7, v11, v12, v13, v14, v15, v16, v17);
    v9 = 0;
  }
  CFRelease(v7);
  return v9;
}

uint64_t C3DLibraryCreate()
{
  uint64_t Instance;

  if (C3DLibraryGetTypeID_onceToken != -1)
    dispatch_once(&C3DLibraryGetTypeID_onceToken, &__block_literal_global_8_1);
  Instance = C3DTypeCreateInstance_(C3DLibraryGetTypeID_typeID, 0x30uLL);
  if (Instance)
    *(_QWORD *)(Instance + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  return Instance;
}

_QWORD *C3DLibraryGetSubStorage(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  _QWORD *Value;
  const __CFAllocator *v14;
  const CFDictionaryValueCallBacks *v15;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DSceneFinalizeDeserialization_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(const __CFDictionary **)(a1 + 16);
  Value = CFDictionaryGetValue(v12, key);
  if (!Value)
  {
    if (C3DLibrarySubStorageGetTypeID_onceToken != -1)
      dispatch_once(&C3DLibrarySubStorageGetTypeID_onceToken, &__block_literal_global_79);
    Value = (_QWORD *)C3DTypeCreateInstance_(C3DLibrarySubStorageGetTypeID_typeID, 0x28uLL);
    if (Value)
    {
      v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v15 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      Value[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
      Value[3] = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], 0);
      Value[4] = CFDictionaryCreateMutable(v14, 0, 0, v15);
      Value[5] = 1;
      Value[6] = key;
    }
    CFDictionaryAddValue(v12, key, Value);
    CFRelease(Value);
  }
  return Value;
}

char *C3DLibraryAddEntry(uint64_t a1, const void *a2)
{
  char *v4;
  void *ID;

  v4 = _C3DLibraryAddEntry(a1, a2);
  ID = (void *)C3DEntityGetID((uint64_t)a2);
  if (ID)
    C3DLibraryTrackID(a1, ID, v4, a2);
  return v4;
}

char *_C3DLibraryAddEntry(uint64_t a1, CFTypeRef cf)
{
  void *v4;
  _QWORD *SubStorage;
  char *v6;

  v4 = (void *)CFGetTypeID(cf);
  SubStorage = C3DLibraryGetSubStorage(a1, v4);
  if (CFDictionaryGetValue((CFDictionaryRef)SubStorage[3], cf))
    return (char *)CFDictionaryGetValue((CFDictionaryRef)SubStorage[3], cf);
  v6 = (char *)SubStorage[5];
  SubStorage[5] = v6 + 1;
  CFDictionaryAddValue((CFMutableDictionaryRef)SubStorage[2], v6, cf);
  CFDictionaryAddValue((CFMutableDictionaryRef)SubStorage[3], cf, v6);
  return v6;
}

void C3DLibraryTrackID(uint64_t a1, void *key, const void *a3, const void *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *Mutable;
  void *v25;
  __CFDictionary *SubStorage;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DSceneFinalizeDeserialization_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DLibraryTrackID_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  Mutable = *(const __CFDictionary **)(a1 + 40);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 40) = Mutable;
  }
  if (!CFDictionaryGetValue(Mutable, key))
  {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 40), key, a4);
    if (CFTypeIsC3DEntity(a4))
      C3DEntitySetID((uint64_t)a4, key);
    v25 = (void *)CFGetTypeID(a4);
    SubStorage = (__CFDictionary *)C3DLibraryGetSubStorage(a1, v25);
    if (SubStorage)
      SubStorage = (__CFDictionary *)*((_QWORD *)SubStorage + 4);
    CFDictionaryAddValue(SubStorage, a3, key);
  }
}

CFDictionaryRef *C3DLibraryGetEntryID(uint64_t a1, CFTypeRef cf)
{
  const __CFDictionary *v3;
  const void *v4;
  CFDictionaryRef *result;

  v3 = *(const __CFDictionary **)(a1 + 16);
  v4 = (const void *)CFGetTypeID(cf);
  result = (CFDictionaryRef *)CFDictionaryGetValue(v3, v4);
  if (result)
    return (CFDictionaryRef *)CFDictionaryGetValue(result[3], cf);
  return result;
}

_QWORD *C3DLibraryGetEntry(uint64_t a1, void *key, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DSceneFinalizeDeserialization_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (result)
  {
    v15 = (uint64_t)result;
    if (!result[2])
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        C3DLibraryGetEntry_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    return CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 16), a3);
  }
  return result;
}

const void **C3DLibraryCopyEntriesWithKind(uint64_t a1, void *key, CFIndex *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFDictionaryRef *Value;
  const __CFDictionary *v15;
  CFIndex Count;
  const void **v17;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DSceneFinalizeDeserialization_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  Value = (CFDictionaryRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value && (v15 = Value[2]) != 0)
  {
    Count = CFDictionaryGetCount(Value[2]);
    v17 = (const void **)C3DMalloc(8 * Count);
    CFDictionaryGetKeysAndValues(v15, 0, v17);
  }
  else
  {
    Count = 0;
    v17 = 0;
  }
  *a3 = Count;
  return v17;
}

const void **C3DLibraryCopyIDsWithKind(uint64_t a1, void *a2, CFIndex *a3)
{
  _QWORD *SubStorage;
  const __CFDictionary *v5;
  CFIndex Count;
  const void **v7;

  SubStorage = C3DLibraryGetSubStorage(a1, a2);
  if (SubStorage && (v5 = (const __CFDictionary *)SubStorage[4]) != 0)
  {
    Count = CFDictionaryGetCount((CFDictionaryRef)SubStorage[4]);
    *a3 = Count;
    v7 = (const void **)C3DMalloc(8 * Count);
    CFDictionaryGetKeysAndValues(v5, 0, v7);
  }
  else
  {
    v7 = 0;
    *a3 = 0;
  }
  return v7;
}

const __CFDictionary *C3DLibraryGetEntryWithUniqueID(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DLibraryGetEntryWithUniqueID_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DLibraryGetEntryWithUniqueID_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *(const __CFDictionary **)(a1 + 32);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  return result;
}

const __CFDictionary *C3DLibraryGetEntryWithDocumentID(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    _C3DSceneFinalizeDeserialization_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DLibraryGetEntryWithDocumentID_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *(const __CFDictionary **)(a1 + 40);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  return result;
}

_QWORD *C3DLibraryGetMemoryUsageForKind(uint64_t a1, void *a2)
{
  _QWORD *result;
  const __CFDictionary *v5;
  CFIndex Count;
  uint64_t v7;
  _QWORD context[3];
  CFTypeRef cf;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  result = C3DLibraryGetSubStorage(a1, a2);
  if (result)
  {
    context[0] = &v7;
    context[1] = a2;
    context[2] = a1;
    v5 = (const __CFDictionary *)result[2];
    Count = CFDictionaryGetCount(v5);
    cf = CFSetCreateMutable(0, Count, 0);
    CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)_getMemoryUsage, context);
    CFRelease(cf);
    return (_QWORD *)v7;
  }
  return result;
}

void _getMemoryUsage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  const __CFData *Data;
  CFIndex v9;
  const void *Mesh;
  __CFSet *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t Accessor;
  const __CFArray *ElementsCount;
  const __CFArray *v20;
  CFIndex j;
  const void *ElementAtIndex;
  const __CFData *Indexes;
  void *TypeID;
  _QWORD *SubStorage;
  int v26;
  double Size;
  __int16 v28;
  _QWORD context[4];

  context[3] = *MEMORY[0x1E0C80C00];
  v6 = *(unint64_t **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  if (C3DImageGetTypeID() == v5)
  {
    Size = C3DImageGetSize(a2);
    if (C3DImageHasTextureRawData(a2))
    {
      Data = (const __CFData *)C3DImageGetData(a2);
      if (!Data)
        return;
      v9 = *v6 + CFDataGetLength(Data);
      goto LABEL_23;
    }
    v28 = 0;
    TypeID = (void *)C3DMaterialGetTypeID();
    SubStorage = C3DLibraryGetSubStorage(v7, TypeID);
    if (SubStorage)
    {
      context[0] = (char *)&v28 + 1;
      context[1] = &v28;
      context[2] = a2;
      CFDictionaryApplyFunction((CFDictionaryRef)SubStorage[2], (CFDictionaryApplierFunction)_fillImageSamplerMask, context);
      if (HIBYTE(v28))
      {
        v26 = C3DMakePowerOfTwo((int)*(float *)&Size);
        *v6 += (int)(4 * v26 * C3DMakePowerOfTwo((int)*((float *)&Size + 1)));
      }
      if ((_BYTE)v28)
      {
        v9 = (unint64_t)vmlas_n_f32((float)*v6, 4.0, vmul_lane_f32(*(float32x2_t *)&Size, *(float32x2_t *)&Size, 1).f32[0]);
LABEL_23:
        *v6 = v9;
      }
    }
  }
  else if (C3DGeometryGetTypeID() == v5)
  {
    Mesh = (const void *)C3DGeometryGetMesh(a2);
    v11 = *(__CFSet **)(a3 + 24);
    if (!CFSetContainsValue(v11, Mesh))
    {
      CFSetAddValue(v11, Mesh);
      v12 = C3DMeshCopyAllSources((uint64_t)Mesh, 1);
      if (v12)
      {
        v13 = v12;
        Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          v15 = Count;
          for (i = 0; i != v15; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
            Accessor = C3DMeshSourceGetAccessor(ValueAtIndex);
            *v6 += C3DSourceAccessorGetLength(Accessor);
          }
        }
        CFRelease(v13);
      }
      ElementsCount = C3DMeshGetElementsCount((uint64_t)Mesh);
      if ((uint64_t)ElementsCount >= 1)
      {
        v20 = ElementsCount;
        for (j = 0; (const __CFArray *)j != v20; ++j)
        {
          ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)Mesh, j, 1);
          LODWORD(context[0]) = 0;
          Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)ElementAtIndex, context);
          if (Indexes)
            *v6 += CFDataGetLength(Indexes);
        }
      }
    }
  }
}

void C3DLibraryApplyEntriesWithType(uint64_t a1, const void *a2, void *a3)
{
  const void *Value;
  const __CFDictionary *v5;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), a2);
  if (Value)
  {
    v5 = (const __CFDictionary *)*((_QWORD *)Value + 2);
    if (v5)
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)__applyBlock, a3);
  }
}

uint64_t __applyBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
}

CFMutableArrayRef C3DLibraryCopyKinds(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFDictionary *v10;
  CFIndex Count;
  CFMutableArrayRef Mutable;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DSceneFinalizeDeserialization_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(const __CFDictionary **)(a1 + 16);
  if (!v10)
    return 0;
  Count = CFDictionaryGetCount(v10);
  Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 16), (CFDictionaryApplierFunction)_getKinds, Mutable);
  return Mutable;
}

void _getKinds(int a1, uint64_t a2, __CFArray *a3)
{
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a1;
  v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFArrayAppendValue(a3, v4);
  CFRelease(v4);
}

_QWORD *C3DLibraryFillWithContentOfScene(uint64_t a1, const void *a2, uint64_t a3)
{
  return C3DFillLibraryForSerialization(a2, a1, a3);
}

void _C3DLibraryCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[3];
  if (v5)
  {
    CFRelease(v5);
    a1[3] = 0;
  }
  v6 = (const void *)a1[4];
  if (v6)
  {
    CFRelease(v6);
    a1[4] = 0;
  }
  v7 = (const void *)a1[5];
  if (v7)
  {
    CFRelease(v7);
    a1[5] = 0;
  }
}

CFStringRef _C3DLibraryCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLibrary>"));
}

CFStringRef _C3DLibraryCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DLibrary>"));
}

BOOL _C3DLibraryInitWithPropertyList(_QWORD *a1, CFDictionaryRef theDict, const __CFDictionary *a3, uint64_t a4)
{
  _QWORD *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *Value;
  const void *v25;
  CFTypeRef v26;
  const void *v27;
  const __CFAllocator *v28;
  const void *v29;
  const __CFAllocator *v30;
  CFIndex Count;
  const void **v32;
  BOOL v33;
  uint64_t v34;
  const __CFString *v35;
  uint64_t TypeForString;
  uint64_t v37;
  const __CFDictionary *v38;
  CFIndex v39;
  const void **v40;
  const void **v41;
  const __CFDictionary *v42;
  CFIndex v43;
  uint64_t v44;
  const void **v45;
  const __CFDictionary *v46;
  const __CFURL *v47;
  const __CFURL *v48;
  const __CFString *v49;
  CFURLRef v50;
  void *v51;
  uint64_t SharedInstance;
  CFTypeRef Resource;
  void *Empty;
  const void **v55;
  _QWORD *v56;
  const __CFDictionary *v57;
  uint64_t v58;
  uint64_t URL;
  void *v60;
  uint64_t v61;
  CFTypeRef v62;
  const void *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v72;
  uint64_t v73;
  CFIndex v74;
  const void *v75;
  const void **v76;
  uint64_t v77;
  const __CFAllocator *allocator;
  CFIndex v79;
  uint64_t TypeID;
  uint64_t IntValue;

  v7 = a1;
  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (!theDict)
    {
LABEL_4:
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        _C3DGeometryFinalizeDeserialization_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else if (!theDict)
  {
    goto LABEL_4;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("libraryStorage"));
  v25 = (const void *)v7[3];
  if (v25 != Value)
  {
    if (v25)
    {
      CFRelease(v25);
      v7[3] = 0;
    }
    if (Value)
      v26 = CFRetain(Value);
    else
      v26 = 0;
    v7[3] = v26;
  }
  v27 = (const void *)v7[6];
  if (v27)
  {
    CFRelease(v27);
    v7[6] = 0;
  }
  v28 = CFGetAllocator(v7);
  v7[6] = CFDictionaryCreateMutable(v28, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v29 = (const void *)v7[7];
  if (v29)
  {
    CFRelease(v29);
    v7[7] = 0;
  }
  v30 = CFGetAllocator(v7);
  v7[7] = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Count = CFDictionaryGetCount((CFDictionaryRef)Value);
  v32 = (const void **)C3DMalloc(8 * Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)Value, v32, 0);
  qsort(v32, Count, 8uLL, (int (__cdecl *)(const void *, const void *))__LibraryDeserializationCompareStrings);
  if (Count < 1)
  {
    v33 = 1;
    if (v32)
      goto LABEL_76;
    return v33;
  }
  v33 = 0;
  v34 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v75 = Value;
  v76 = v32;
  v74 = Count;
  while (1)
  {
    v35 = (const __CFString *)v32[v34];
    TypeForString = C3DLibraryGetTypeForString(v35);
    if (TypeForString)
      break;
LABEL_70:
    v33 = ++v34 >= Count;
    if (v34 == Count)
      goto LABEL_75;
  }
  v37 = TypeForString;
  v77 = v34;
  v73 = (uint64_t)v35;
  v38 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)Value, v35);
  TypeID = C3DImageGetTypeID();
  v39 = CFDictionaryGetCount(v38);
  v40 = (const void **)C3DMalloc(8 * v39);
  v41 = (const void **)C3DMalloc(8 * v39);
  v42 = v38;
  v43 = v39;
  CFDictionaryGetKeysAndValues(v42, v41, v40);
  if (v39 < 1)
  {
    v45 = v40;
    if (v40)
LABEL_67:
      free(v45);
    Value = v75;
    v32 = v76;
    Count = v74;
    v34 = v77;
    if (v41)
      free(v41);
    goto LABEL_70;
  }
  v72 = v33;
  v44 = 0;
  v45 = v40;
  v79 = v43;
  while (1)
  {
    v46 = (const __CFDictionary *)v45[v44];
    IntValue = CFStringGetIntValue((CFStringRef)v41[v44]);
    if (C3DImageGetTypeID() == v37)
    {
      v47 = (const __CFURL *)CFDictionaryGetValue(a3, CFSTR("kEnclosingFolderURL"));
      if (v47)
      {
        v48 = v47;
        v49 = (const __CFString *)CFDictionaryGetValue(v46, CFSTR("imageRelativePath"));
        if (v49)
        {
          v50 = CFURLCreateCopyAppendingPathComponent(allocator, v48, v49, 0);
          if (v50)
          {
            v51 = v50;
            SharedInstance = C3DResourceCacheGetSharedInstance();
            Resource = C3DResourceCacheGetResource(SharedInstance, v51);
            if (Resource)
            {
              __AddEntry((uint64_t)v7, v37, IntValue, 0, Resource);
LABEL_63:
              CFRelease(v51);
              goto LABEL_64;
            }
            CFRelease(v51);
          }
        }
      }
    }
    if (C3DGeometryGetTypeID() == v37)
    {
      Empty = (void *)C3DGeometryCreate();
      goto LABEL_53;
    }
    if (C3DMeshGetTypeID() == v37)
    {
      Empty = (void *)C3DMeshCreate();
      goto LABEL_53;
    }
    if (C3DMaterialGetTypeID() == v37)
    {
      Empty = (void *)C3DMaterialCreate();
      goto LABEL_53;
    }
    if (C3DImageGetTypeID() == v37)
    {
      Empty = (void *)C3DImageCreate();
      goto LABEL_53;
    }
    if (C3DNodeGetTypeID() == v37)
    {
      Empty = (void *)C3DNodeCreate();
      goto LABEL_53;
    }
    if (C3DCameraGetTypeID() == v37)
    {
      Empty = (void *)C3DCameraCreate();
      goto LABEL_53;
    }
    if (C3DLightGetTypeID() == v37)
    {
      Empty = (void *)C3DLightCreate();
      goto LABEL_53;
    }
    if (C3DAnimationGroupGetTypeID() == v37)
    {
      Empty = (void *)C3DAnimationGroupCreate();
      goto LABEL_53;
    }
    if (C3DSkinGetTypeID() == v37)
    {
      Empty = (void *)C3DSkinCreate();
      goto LABEL_53;
    }
    if (C3DMeshSourceGetTypeID() == v37)
    {
      Empty = (void *)_C3DMeshSourceCreate();
      goto LABEL_53;
    }
    if (C3DMorphGetTypeID() == v37)
    {
      Empty = (void *)C3DMorphCreate();
      goto LABEL_53;
    }
    if (C3DGenericSourceGetTypeID() == v37)
      break;
LABEL_64:
    if (v43 == ++v44)
      goto LABEL_67;
  }
  Empty = (void *)C3DGenericSourceCreateEmpty();
LABEL_53:
  v51 = Empty;
  if (!Empty)
    goto LABEL_64;
  if (C3DInitWithPropertyList(Empty, (uint64_t)v46, (uint64_t)a3, a4))
  {
    if (TypeID == v37)
    {
      v55 = v45;
      v56 = v7;
      v57 = a3;
      v58 = a4;
      URL = C3DImageGetURL((uint64_t)v51);
      if (URL)
      {
        v60 = (void *)URL;
        v61 = C3DResourceCacheGetSharedInstance();
        v62 = C3DResourceCacheGetResource(v61, v60);
        if (v62 != v51)
        {
          v63 = v62;
          if (v62)
          {
            CFRelease(v51);
            v51 = (void *)CFRetain(v63);
          }
        }
      }
      a4 = v58;
      a3 = v57;
      v7 = v56;
      v45 = v55;
      v43 = v79;
    }
    __AddEntry((uint64_t)v7, v37, IntValue, v46, v51);
    if (C3DAnimationGroupGetTypeID() == v37)
      _fillLibraryWithAnimationGroup((uint64_t)v7, v51);
    goto LABEL_63;
  }
  free(v45);
  free(v41);
  CFRelease(v51);
  v64 = scn_default_log();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    _C3DLibraryInitWithPropertyList_cold_1(v73, v64, v65, v66, v67, v68, v69, v70);
  v32 = v76;
  v33 = v72;
LABEL_75:
  if (v32)
LABEL_76:
    free(v32);
  return v33;
}

__CFDictionary *_C3DLibraryCopyPropertyList(CFDictionaryRef *cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFAllocator *v15;
  __CFDictionary *Mutable;
  const __CFAllocator *v17;
  __CFDictionary *v18;
  CFIndex Count;
  const void **v20;
  const void **v21;
  uint64_t *v22;
  const void *v23;
  CFMutableDictionaryRef v24;
  const __CFString *StringForType;
  BOOL v26;
  NSObject *v27;
  const void *TypeID;
  CFMutableDictionaryRef v29;
  CFMutableDictionaryRef v30;
  const void **v32;
  uint8_t buf[4];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!cf)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v17 = CFGetAllocator(cf);
    v18 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    Count = CFDictionaryGetCount(cf[2]);
    v20 = (const void **)C3DMalloc(8 * Count);
    v21 = (const void **)C3DMalloc(8 * Count);
    v32 = v20;
    CFDictionaryGetKeysAndValues(cf[2], v21, v20);
    if (Count >= 1)
    {
      v22 = (uint64_t *)v21;
      do
      {
        v23 = (const void *)*v22;
        if (!C3DTypeConformsToProtocol(*v22, 0))
        {
          v27 = scn_default_log();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v34 = (int)v23;
            _os_log_error_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_ERROR, "Error: type %d is not serializable\n", buf, 8u);
          }
          goto LABEL_18;
        }
        v24 = _copySerializedSubStorage(cf, v23, a3, a4, 0);
        StringForType = C3DLibraryGetStringForType((uint64_t)v23);
        if (StringForType)
          v26 = v24 == 0;
        else
          v26 = 1;
        if (v26)
        {
          if (!v24)
            goto LABEL_18;
        }
        else
        {
          CFDictionarySetValue(v18, StringForType, v24);
        }
        CFRelease(v24);
LABEL_18:
        ++v22;
        --Count;
      }
      while (Count);
    }
    TypeID = (const void *)C3DMaterialGetTypeID();
    v29 = _copySerializedSubStorage(cf, TypeID, a3, a4, (uint64_t (*)(const void *, CFDictionaryRef *, uint64_t, uint64_t))C3DMaterialCopyEffectPropertyList);
    if (v29)
    {
      v30 = v29;
      CFDictionarySetValue(v18, CFSTR("effect"), v29);
      CFRelease(v30);
    }
    CFDictionarySetValue(Mutable, CFSTR("libraryStorage"), v18);
    CFRelease(v18);
    if (v32)
      free(v32);
    if (v21)
      free(v21);
  }
  return Mutable;
}

uint64_t _C3DLibraryFinalizeDeserialization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex Count;
  const void **v23;
  uint64_t v24;
  const void **v25;
  char v26;
  const void *v27;
  CFDictionaryRef *Value;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  const void *v39;
  char v41;
  _QWORD context[4];

  context[3] = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DLibraryFinalizeDeserialization_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      _C3DLibraryFinalizeDeserialization_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
  v23 = (const void **)C3DMalloc(8 * Count);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), v23, 0);
  qsort(v23, Count, 8uLL, (int (__cdecl *)(const void *, const void *))__LibraryDeserializationCompare);
  v24 = 1;
  if (Count >= 1)
  {
    v25 = v23;
    v26 = 1;
    do
    {
      v27 = *v25++;
      Value = (CFDictionaryRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v27);
      v41 = 1;
      context[0] = a1;
      context[1] = a4;
      context[2] = &v41;
      CFDictionaryApplyFunction(Value[2], (CFDictionaryApplierFunction)__finalizeDeserialization, context);
      v26 &= v41 != 0;
      --Count;
    }
    while (Count);
    if ((v26 & 1) != 0)
    {
      v24 = 1;
    }
    else
    {
      v29 = scn_default_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        _C3DLibraryFinalizeDeserialization_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
      v24 = 0;
    }
  }
  v37 = *(const void **)(a1 + 56);
  if (v37)
  {
    CFRelease(v37);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v38 = *(const void **)(a1 + 48);
  if (v38)
  {
    CFRelease(v38);
    *(_QWORD *)(a1 + 48) = 0;
  }
  if (v23)
    free(v23);
  v39 = *(const void **)(a1 + 24);
  if (v39)
  {
    CFRelease(v39);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return v24;
}

uint64_t __LibraryDeserializationCompareStrings(const __CFString **a1, const __CFString **a2)
{
  const __CFString *v2;
  uint64_t TypeForString;
  int v4;
  uint64_t v5;

  v2 = *a2;
  TypeForString = C3DLibraryGetTypeForString(*a1);
  v4 = __LibraryDeserializationOrder(TypeForString);
  v5 = C3DLibraryGetTypeForString(v2);
  return v4 - __LibraryDeserializationOrder(v5);
}

uint64_t __LibraryDeserializationOrder(uint64_t a1)
{
  if (C3DAnimationGroupGetTypeID() == a1)
    return 1;
  if (C3DImageGetTypeID() == a1)
    return 2;
  if (C3DMaterialGetTypeID() == a1)
    return 4;
  if (C3DMeshSourceGetTypeID() == a1)
    return 5;
  if (C3DGenericSourceGetTypeID() == a1)
    return 6;
  if (C3DMeshGetTypeID() == a1)
    return 7;
  if (C3DMeshElementGetTypeID() == a1)
    return 8;
  if (C3DGeometryGetTypeID() == a1 || C3DParametricGeometryGetTypeID() == a1 || C3DFloorGetTypeID() == a1)
    return 9;
  if (C3DSkinGetTypeID() == a1)
    return 10;
  if (C3DMorphGetTypeID() == a1)
    return 11;
  if (C3DCameraGetTypeID() == a1)
    return 12;
  if (C3DLightGetTypeID() == a1)
    return 13;
  if (C3DNodeGetTypeID() == a1)
    return 14;
  return 0;
}

void __AddEntry(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5)
{
  CFNumberRef v10;
  __CFString *EntryIdentifier;
  __CFString *ID;
  __CFString *v13;
  char *v14;
  CFTypeID v15;
  char *valuePtr;

  valuePtr = C3DLibraryAddEntry(a1, a5);
  if (C3DTypeConformsToProtocol(a2, 0))
  {
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
    EntryIdentifier = C3DLibraryCreateEntryIdentifier(a3, a2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), EntryIdentifier, v10);
    if (a4)
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 56), a5, a4);
    if (v10)
      CFRelease(v10);
    if (EntryIdentifier)
      CFRelease(EntryIdentifier);
    ID = (__CFString *)C3DEntityGetID((uint64_t)a5);
    if (ID)
    {
      v13 = ID;
      CFRetain(ID);
    }
    else
    {
      v14 = valuePtr;
      v15 = CFGetTypeID(a5);
      v13 = C3DLibraryCreateEntryIdentifier((uint64_t)v14, v15);
    }
    C3DLibraryTrackID(a1, v13, valuePtr, a5);
    CFRelease(v13);
  }
}

void _fillLibraryWithAnimationGroup(uint64_t a1, const void *a2)
{
  CFIndex AnimationCount;
  CFIndex i;
  const void *AnimationAtIndex;

  AnimationCount = C3DAnimationGroupGetAnimationCount((uint64_t)a2);
  if (!C3DLibraryGetEntryID(a1, a2))
    _addAndTrackEntity(a1, a2);
  if (AnimationCount >= 1)
  {
    for (i = 0; i != AnimationCount; ++i)
    {
      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a2, i);
      if (C3DAnimationIsGroup(AnimationAtIndex))
        _fillLibraryWithAnimationGroup(a1, AnimationAtIndex);
      else
        _addAndTrackEntity(a1, AnimationAtIndex);
    }
  }
}

void _addAndTrackEntity(uint64_t a1, const void *a2)
{
  char *v4;
  void *ID;
  void *v6;
  CFTypeID v7;
  __CFString *EntryIdentifier;

  v4 = C3DLibraryAddEntry(a1, a2);
  ID = (void *)C3DEntityGetID((uint64_t)a2);
  if (ID)
  {
    v6 = ID;
    CFRetain(ID);
    C3DLibraryTrackID(a1, v6, v4, a2);
    CFRelease(v6);
  }
  else
  {
    v7 = CFGetTypeID(a2);
    EntryIdentifier = C3DLibraryCreateEntryIdentifier((uint64_t)v4, v7);
    C3DLibraryTrackID(a1, EntryIdentifier, v4, a2);
    if (EntryIdentifier)
      CFRelease(EntryIdentifier);
  }
}

CFMutableDictionaryRef _copySerializedSubStorage(CFDictionaryRef *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(const void *, CFDictionaryRef *, uint64_t, uint64_t))
{
  const void *Value;
  const void *v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  const __CFDictionary *v14;
  CFIndex Count;
  const void **v16;
  const void **v17;
  const void *v18;
  const __CFAllocator *v19;
  CFStringRef v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void **v26;
  const void **v27;
  __CFDictionary *theDict;

  Value = CFDictionaryGetValue(a1[2], a2);
  if (!Value)
    return 0;
  v10 = Value;
  v11 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = Mutable;
  v14 = (const __CFDictionary *)*((_QWORD *)v10 + 2);
  if (v14)
  {
    theDict = Mutable;
    Count = CFDictionaryGetCount(v14);
    v16 = (const void **)C3DMalloc(8 * Count);
    v17 = (const void **)C3DMalloc(8 * Count);
    CFDictionaryGetKeysAndValues(v14, v17, v16);
    v26 = v16;
    v27 = v17;
    if (Count >= 1)
    {
      while (1)
      {
        v18 = *v17;
        v19 = CFGetAllocator(a1);
        v20 = CFStringCreateWithFormat(v19, 0, CFSTR("%d"), v18, v26);
        v21 = *v16;
        v22 = (const void *)(a5 ? a5(v21, a1, a3, a4) : C3DCopyPropertyList(v21, (uint64_t)a1, a3, a4));
        v23 = v22;
        if (v22 && v20 != 0)
          break;
        if (v20)
          goto LABEL_17;
        if (v22)
          goto LABEL_14;
LABEL_15:
        ++v16;
        ++v17;
        if (!--Count)
          goto LABEL_21;
      }
      CFDictionarySetValue(theDict, v20, v22);
LABEL_17:
      CFRelease(v20);
      if (!v23)
        goto LABEL_15;
LABEL_14:
      CFRelease(v23);
      goto LABEL_15;
    }
    if (v16)
LABEL_21:
      free(v26);
    v13 = theDict;
    if (v27)
      free(v27);
  }
  return v13;
}

uint64_t __LibraryDeserializationCompare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;

  v2 = *a2;
  v3 = __LibraryDeserializationOrder(*a1);
  return v3 - __LibraryDeserializationOrder(v2);
}

void __finalizeDeserialization(int a1, void *key, uint64_t a3)
{
  const __CFDictionary *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *Value;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFErrorRef *v24;

  v5 = *(const __CFDictionary **)(*(_QWORD *)a3 + 56);
  if (!v5)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __finalizeDeserialization_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)a3;
  Value = CFDictionaryGetValue(v5, key);
  v16 = C3DFinalizeDeserialization(key, v14, (uint64_t)Value, *(_QWORD *)(a3 + 8));
  if (!v16)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      __finalizeDeserialization_cold_1((uint64_t)key, v17, v18, v19, v20, v21, v22, v23);
    v24 = *(CFErrorRef **)(a3 + 8);
    if (v24 && !*v24)
      *v24 = C3DSceneSourceCreateMalformedDocumentError(0);
  }
  **(_BYTE **)(a3 + 16) &= v16 != 0;
}

void _fillImageSamplerMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t CommonProfile;
  unsigned __int8 v7;
  uint64_t EffectSlot;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = *(_BYTE **)a3;
  v4 = *(_BYTE **)(a3 + 8);
  if (!**(_BYTE **)a3 || !*v4)
  {
    v5 = *(_QWORD *)(a3 + 16);
    CommonProfile = C3DMaterialGetCommonProfile(a2);
    v7 = 0;
    do
    {
      EffectSlot = C3DEffectCommonProfileGetEffectSlot(CommonProfile, (char)v7, 0);
      if (EffectSlot)
      {
        v9 = EffectSlot;
        if (C3DEffectSlotGetImage(EffectSlot) == v5)
        {
          if (C3DEffectSlotGetTextureSampler(v9))
          {
            if (C3DRendererContextTextureSamplerImpliesPow2TextureSize())
              *v3 = 1;
            else
              *v4 = 1;
          }
          else
          {
            v11 = scn_default_log();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v12 = 0;
              _os_log_impl(&dword_1DCCB8000, v11, OS_LOG_TYPE_DEFAULT, "Warning: C3DLibraryGetMemoryUsageForKind found an image with no sampler", v12, 2u);
            }
          }
        }
      }
      v10 = v7++;
    }
    while (v10 < 0x15);
  }
}

uint64_t C3DFloorGetBoundingBoxWithExtent(uint64_t a1, float32x4_t *a2, __n128 *a3, double a4)
{
  __n128 *v8;
  __n128 UpAxis;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  unint64_t v13;
  float32x4_t v14;
  int8x16_t v16;

  v8 = (__n128 *)C3DGetScene((_QWORD *)a1);
  if (v8)
  {
    v16.i32[2] = 0;
    v16.i64[0] = 0;
    UpAxis = C3DSceneGetUpAxis(v8, (__n128 *)&v16);
    v10 = v16;
  }
  else
  {
    v10 = (int8x16_t)xmmword_1DD007920;
  }
  UpAxis.n128_f32[0] = a4;
  UpAxis.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vceqz_f32(*(float32x2_t *)(a1 + 236)), (int8x8_t)vdup_lane_s32((int32x2_t)UpAxis.n128_u64[0], 0), *(int8x8_t *)(a1 + 236));
  if (*(float *)&v10.i32[1] == 0.0)
  {
    if (*(float *)&v10.i32[2] == 0.0)
    {
      v14.i32[0] = 0;
      v14.i32[3] = 0;
      v14.f32[1] = -UpAxis.n128_f32[0];
      v14.f32[2] = -UpAxis.n128_f32[1];
      *a2 = v14;
      v10.i32[0] = 925353388;
      UpAxis = (__n128)vextq_s8(vextq_s8(v10, v10, 4uLL), (int8x16_t)UpAxis, 0xCuLL);
    }
    else
    {
      *(float *)&v13 = -UpAxis.n128_f32[0];
      *((float *)&v13 + 1) = -UpAxis.n128_f32[1];
      *a2 = (float32x4_t)v13;
      UpAxis.n128_u32[2] = 925353388;
    }
  }
  else
  {
    v11 = vnegq_f32((float32x4_t)vzip1q_s32((int32x4_t)UpAxis, (int32x4_t)UpAxis));
    v11.i32[1] = 0;
    *a2 = v11;
    v12 = (int8x16_t)vdupq_n_s32(0x3727C5ACu);
    UpAxis = (__n128)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)v12, (int32x4_t)UpAxis), v12, 4uLL);
  }
  *a3 = UpAxis;
  return 1;
}

uint64_t C3DFloorCreate()
{
  uint64_t Instance;
  const void *Plane;
  uint64_t *CopyWithInterleavedSources;
  void *v3;
  uint64_t CommonProfile;
  const void *v5;
  int v6;
  unsigned int v7;

  if (C3DFloorGetTypeID_onceToken != -1)
    dispatch_once(&C3DFloorGetTypeID_onceToken, &__block_literal_global_80);
  Instance = C3DTypeCreateInstance_(C3DFloorGetTypeID_typeID, 0xF0uLL);
  C3DGeometryInit(Instance);
  *(_DWORD *)(Instance + 228) = 1056964608;
  *(_QWORD *)(Instance + 248) = -1;
  Plane = (const void *)C3DMeshCreatePlane(0, 10, 10, 0, 2.0, -2.0, 0.0);
  CopyWithInterleavedSources = (uint64_t *)C3DMeshCreateCopyWithInterleavedSources((uint64_t)Plane);
  if (Plane)
    CFRelease(Plane);
  C3DGeometrySetMesh(Instance, CopyWithInterleavedSources);
  CFRelease(CopyWithInterleavedSources);
  v3 = (void *)C3DMaterialCreate();
  C3DMaterialSetDoubleSided((uint64_t)v3, 1);
  CommonProfile = C3DMaterialGetCommonProfile((uint64_t)v3);
  C3DEffectCommonProfileSetPerPixelLit(CommonProfile, 1);
  C3DEffectCommonProfileSetEnableLockAmbientWithDiffuse(CommonProfile, 1);
  v5 = (const void *)C3DTextureSamplerCreateWithOptions(2, 2, 2, 2, 2, 2);
  v6 = 0;
  do
  {
    C3DMaterialSetTextureSampler((uint64_t)v3, (char)v6, v5);
    v7 = v6++;
  }
  while (v7 < 0xF);
  CFRelease(v5);
  C3DGeometryAppendMaterial(Instance, v3);
  CFRelease(v3);
  C3DFloorSetReflectivity(Instance, 0.25);
  return Instance;
}

float C3DFloorGetReflectivity(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 216);
}

void __notifyMaterialDidChangeAndInvalidatePasses(_QWORD *a1)
{
  uint64_t SharedInstance;
  const void *v3;

  _C3DGeometryShadingDidUpdate(a1);
  SharedInstance = C3DNotificationCenterGetSharedInstance();
  v3 = (const void *)C3DGetScene(a1);
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), v3, 0, 1u);
}

void C3DFloorSetReflectivity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 216);
  if (a2 != 0.0 && v12 == 0.0)
  {
    *(float *)(a1 + 216) = a2;
LABEL_9:
    __notifyMaterialDidChangeAndInvalidatePasses((_QWORD *)a1);
    return;
  }
  *(float *)(a1 + 216) = a2;
  if (a2 == 0.0 && v12 != 0.0)
    goto LABEL_9;
}

float C3DFloorGetReflectionFalloffStart(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 220);
}

void C3DFloorSetReflectionFalloffStart(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 220);
  if (a2 != 0.0 && v12 == 0.0)
  {
    *(float *)(a1 + 220) = a2;
LABEL_9:
    __notifyMaterialDidChangeAndInvalidatePasses((_QWORD *)a1);
    return;
  }
  *(float *)(a1 + 220) = a2;
  if (a2 == 0.0 && v12 != 0.0)
    goto LABEL_9;
}

float C3DFloorGetReflectionFalloffEnd(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 224);
}

void C3DFloorSetReflectionFalloffEnd(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(float *)(a1 + 224);
  if (a2 != 0.0 && v12 == 0.0)
  {
    *(float *)(a1 + 224) = a2;
LABEL_9:
    __notifyMaterialDidChangeAndInvalidatePasses((_QWORD *)a1);
    return;
  }
  *(float *)(a1 + 224) = a2;
  if (a2 == 0.0 && v12 != 0.0)
    goto LABEL_9;
}

float C3DFloorGetReflectionResolutionScaleFactor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 228);
}

void C3DFloorSetReflectionResolutionScaleFactor(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2 != 0.0 && *(float *)(a1 + 228) != a2)
  {
    *(float *)(a1 + 228) = a2;
    __notifyMaterialDidChangeAndInvalidatePasses((_QWORD *)a1);
  }
}

uint64_t C3DFloorGetReflectionSampleCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 232);
}

void C3DFloorSetReflectionSampleCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFloorGetReflectivity_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 232) != a2)
  {
    *(_DWORD *)(a1 + 232) = a2;
    __notifyMaterialDidChangeAndInvalidatePasses((_QWORD *)a1);
  }
}

float C3DFloorGetWidth(uint64_t a1)
{
  return *(float *)(a1 + 236);
}

uint64_t C3DFloorSetWidth(uint64_t result, float a2)
{
  *(float *)(result + 236) = a2;
  return result;
}

float C3DFloorGetLength(uint64_t a1)
{
  return *(float *)(a1 + 240);
}

uint64_t C3DFloorSetLength(uint64_t result, float a2)
{
  *(float *)(result + 240) = a2;
  return result;
}

uint64_t C3DFloorGetReflectionCategoryBitMask(uint64_t a1)
{
  return *(_QWORD *)(a1 + 248);
}

uint64_t C3DFloorSetReflectionCategoryBitMask(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 248) = a2;
  return result;
}

CFStringRef _C3DFloorCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFloor>"));
}

CFStringRef _C3DFloorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFloor>"));
}

uint64_t _C3DFloorInitWithPropertyList(_DWORD *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFNumber *Value;
  const __CFNumber *v18;
  const __CFNumber *v19;
  NSObject *v20;
  int v22;
  int v23;
  int valuePtr;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = _C3DGeometryInitWithPropertyList(a1, a2, a3, a4);
  if ((v16 & 1) != 0)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("reflectivity"));
    if (Value)
    {
      valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberFloatType, &valuePtr);
      a1[54] = valuePtr;
    }
    v18 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("reflectionFalloffStart"));
    if (v18)
    {
      v23 = 0;
      CFNumberGetValue(v18, kCFNumberFloatType, &v23);
      a1[55] = v23;
    }
    v19 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("reflectionFalloffEnd"));
    if (v19)
    {
      v22 = 0;
      CFNumberGetValue(v19, kCFNumberFloatType, &v22);
      a1[56] = v22;
    }
  }
  else
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      _C3DFloorInitWithPropertyList_cold_1(v20);
  }
  return v16;
}

__CFDictionary *_C3DFloorCopyPropertyList(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  int v19;
  int v20;
  int valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = _C3DGeometryCopyPropertyList((uint64_t)a1, a2, a3);
  if (v14)
  {
    valuePtr = a1[54];
    v15 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    CFDictionaryAddValue(v14, CFSTR("reflectivity"), v15);
    CFRelease(v15);
    v20 = a1[55];
    v16 = CFNumberCreate(0, kCFNumberFloatType, &v20);
    CFDictionaryAddValue(v14, CFSTR("reflectionFalloffStart"), v16);
    CFRelease(v16);
    v19 = a1[56];
    v17 = CFNumberCreate(0, kCFNumberFloatType, &v19);
    CFDictionaryAddValue(v14, CFSTR("reflectionFalloffEnd"), v17);
    CFRelease(v17);
  }
  return v14;
}

__CFArray *_C3DFloorCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  __CFArray *v37;
  uint64_t v39;
  int v40;
  int valuePtr;
  CFRange v42;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 216;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("reflectivity"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 220;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("reflectionFalloffStart"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 224;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("reflectionFalloffEnd"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 228;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("resolutionScaleFactor"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 232;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("sampleCount"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v40 = 0;
  valuePtr = 2;
  v39 = a1 + 248;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("reflectionBitMask"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 236;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("width"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v40 = 0;
  valuePtr = 1;
  v39 = a1 + 240;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v40);
  v36 = CFNumberCreate(0, kCFNumberLongType, &v39);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("length"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  v37 = _C3DGeometryCopyInstanceVariables(a1);
  v42.length = CFArrayGetCount(v37);
  v42.location = 0;
  CFArrayAppendArray(Mutable, v37, v42);
  CFRelease(v37);
  return Mutable;
}

uint64_t _C3DFloorGetBoundingBox(uint64_t a1, uint64_t a2, float32x4_t *a3, __n128 *a4)
{
  C3DFloorGetBoundingBoxWithExtent(a1, a3, a4, 1000000000.0);
  return 1;
}

const void *_C3DFloorGetBoundingSphere(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *result;

  result = (const void *)C3DGeometryGetMesh(a1);
  if (result)
    return (const void *)C3DGetBoundingSphere(result, a2, a3);
  return result;
}

uint64_t _C3DFloorSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

void _C3DFloorSetValue(uint64_t a1, void *__dst, float *__src, size_t __n)
{
  if ((void *)(a1 + 216) == __dst)
  {
    C3DFloorSetReflectivity(a1, *__src);
  }
  else if ((void *)(a1 + 224) == __dst)
  {
    C3DFloorSetReflectionFalloffEnd(a1, *__src);
  }
  else
  {
    memcpy(__dst, __src, __n);
  }
}

SCNMaterialAttachment *SCNTextureContentWithGLInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  SCNMaterialAttachment *v12;

  v12 = objc_alloc_init(SCNMaterialAttachment);
  -[SCNMaterialAttachment setOptions:](v12, "setOptions:", a4);
  -[SCNMaterialAttachment setGlID:](v12, "setGlID:", a2);
  -[SCNMaterialAttachment setTarget:](v12, "setTarget:", a3);
  -[SCNMaterialAttachment setContext:](v12, "setContext:", a1);
  -[SCNMaterialAttachment setSize:](v12, "setSize:", a5, a6);
  return v12;
}

Class __SKSceneClass()
{
  return NSClassFromString(CFSTR("SKScene"));
}

Class __SKTextureClass()
{
  return NSClassFromString(CFSTR("SKTexture"));
}

Class __GLKTextureInfoClass()
{
  return NSClassFromString(CFSTR("GLKTextureInfo"));
}

Class __AVPlayerClass()
{
  return NSClassFromString(CFSTR("AVPlayer"));
}

Class __AVCaptureDeviceClass()
{
  return NSClassFromString(CFSTR("AVCaptureDevice"));
}

void sub_1DCE87F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef _C3DProgramHashCodeStoreCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;

  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DProgramHashCodeStore %p>"), a1);
}

CFStringRef _C3DProgramHashCodeStoreCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DProgramHashCodeStore %p>"), a1);
}

uint64_t ___Z32C3DProgramHashCodeStoreGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  C3DProgramHashCodeStoreGetTypeID(void)::typeID = result;
  return result;
}

void C3DProgramHashCodeStoreInvalidateRendererElementSpan(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **ValuePtrAtIndex;
  uint64_t *v12;

  v2 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    v4 = 0;
    v5 = WORD1(a2);
    v6 = (unsigned __int16)a2;
    do
    {
      v7 = C3DRendererElementFlattenedIndexForSpanHandle(v6, (unsigned __int16)(v4 + v5));
      if (*(_DWORD *)(a1 + 44) != -15)
      {
        v8 = 0;
        v9 = v7;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v8) & 1) != 0)
          {
            v10 = *(_QWORD *)(a1 + 24);
            if (C3DArrayGetCount(*(_QWORD *)(v10 + 8 * v8)) > v9)
            {
              ValuePtrAtIndex = (void **)C3DArrayGetValuePtrAtIndex(*(_QWORD *)(v10 + 8 * v8), v9);
              if (*ValuePtrAtIndex)
              {
                v12 = (uint64_t *)ValuePtrAtIndex;
                C3DIndexStoreRemoveIndexForKey(*(_QWORD *)(a1 + 48), *ValuePtrAtIndex);
                C3DProgramHashCodeRelease(*v12);
                *v12 = 0;
              }
            }
          }
          ++v8;
        }
        while (v8 < (*(_DWORD *)(a1 + 44) + 15));
      }
      ++v4;
    }
    while (v4 != (_DWORD)v2);
  }
}

void C3DProgramHashCodeStoreRegisterProgramForRendererElement(uint64_t a1, unsigned int *a2, const void *a3, uint64_t a4, uint64_t a5)
{
  C3DProgramHashCodeStoreRegisterProgramForRendererElementAndHashPass(a1, a2, a3, a5);
}

void C3D::Hash<C3D::SmartPtr<__C3DArray *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>,C3D::MallocAllocator>::_grow(uint64_t a1)
{
  _QWORD *v2;
  CFTypeRef *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  CFTypeRef *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(CFTypeRef **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  C3D::Hash<std::unique_ptr<C3D::RenderGraphResource>,C3D::MallocAllocator>::_allocate(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        C3D::Hash<C3D::SmartPtr<__C3DArray *,C3D::detail::CFRetainFct,C3D::detail::CFReleaseFct>,C3D::MallocAllocator>::insert(a1, *v8, v7);
        if (*v7)
          CFRelease(*v7);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

void sub_1DCE8999C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t C3DFXGLSLProgramObjectGetTypeID()
{
  if (C3DFXGLSLProgramObjectGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramObjectGetTypeID_onceToken, &__block_literal_global_83);
  return C3DFXGLSLProgramObjectGetTypeID_typeID;
}

void _C3DFXGLSLProgramObjectCFFinalize(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (void *)a1[9];
  if (v2)
    free(v2);
  v3 = (void *)a1[10];
  if (v3)
    free(v3);
  v4 = (void *)a1[12];
  if (v4)
    free(v4);
  v5 = (const void *)a1[15];
  if (v5)
  {
    CFRelease(v5);
    a1[15] = 0;
  }
  v6 = (const void *)a1[13];
  if (v6)
  {
    CFRelease(v6);
    a1[13] = 0;
  }
  v7 = (const void *)a1[14];
  if (v7)
  {
    CFRelease(v7);
    a1[14] = 0;
  }
}

CFStringRef _C3DFXGLSLProgramObjectCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXGLSLProgramObject %p>"), a1);
}

CFStringRef _C3DFXGLSLProgramObjectCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXGLSLProgramObject %p>"), a1);
}

uint64_t C3DFXGLSLProgramObjectCreateWithProgramID(uint64_t a1)
{
  uint64_t Instance;
  uint64_t v3;

  if (C3DFXGLSLProgramObjectGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramObjectGetTypeID_onceToken, &__block_literal_global_83);
  Instance = C3DTypeCreateInstance_(C3DFXGLSLProgramObjectGetTypeID_typeID, 0x70uLL);
  v3 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 64) = 1;
    *(_QWORD *)(Instance + 96) = 0;
    *(_QWORD *)(Instance + 72) = 0;
    *(_QWORD *)(Instance + 80) = 0;
    C3DVRAMResourceSetID(Instance, a1);
  }
  return v3;
}

uint64_t C3DFXGLSLProgramObjectAttachWithProgram(uint64_t result)
{
  ++*(_DWORD *)(result + 64);
  return result;
}

uint64_t C3DFXGLSLProgramObjectDetachOfProgram(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(_DWORD *)(a1 + 64) - 1);
  *(_DWORD *)(a1 + 64) = v1;
  return v1;
}

uint64_t C3DFXGLSLProgramObjectGetProgramID(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DVRAMResourceGetID(a1);
}

void *C3DFXGLSLProgramObjectSetUniformsLocations(uint64_t a1, const void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *result;
  uint64_t v16;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  *(_QWORD *)(a1 + 88) = a3;
  v14 = malloc_type_realloc(*(void **)(a1 + 72), 8 * a3, 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 72) = v14;
  memcpy(v14, a2, 8 * a3);
  result = malloc_type_realloc(*(void **)(a1 + 80), 8 * a3, 0x80040B8603338uLL);
  *(_QWORD *)(a1 + 80) = result;
  if (a3 >= 1)
  {
    v16 = 0;
    do
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v16++) = -1;
    while (a3 != v16);
  }
  return result;
}

uint64_t C3DFXGLSLProgramObjectGetUniformLocation(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_QWORD *)(a1 + 88) > a2 && (v12 = *(_QWORD *)(a1 + 72)) != 0)
    return *(_QWORD *)(v12 + 8 * a2);
  else
    return -1;
}

uint64_t C3DFXGLSLProgramObjectGetUniformIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 88);
  if (v12 < 1)
    return -1;
  result = 0;
  while (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * result) != a2)
  {
    if (v12 == ++result)
      return -1;
  }
  return result;
}

uint64_t C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), key) - 1;
}

void C3DFXGLSLProgramObjectApplyFunctionForAttributes(uint64_t a1, CFDictionaryApplierFunction applier, void *context)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 112), applier, context);
}

void C3DFXGLSLProgramObjectApplyFunctionForUniforms(uint64_t a1, CFDictionaryApplierFunction applier, void *context)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DRendererElementStateDrawRendererElement_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 104), applier, context);
}

void C3DFXGLSLProgramObjectSetUniformValueAtIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DRendererElementStateDrawRendererElement_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2 < 0)
      return;
  }
  else if (a2 < 0)
  {
    return;
  }
  if (*(_QWORD *)(a1 + 88) > a2)
    *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2) = a3;
}

uint64_t C3DFXGLSLProgramObjectGetUniformValueAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DRendererElementStateDrawRendererElement_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2 < 0)
      return 0;
  }
  else if (a2 < 0)
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 88) > a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * a2);
  return 0;
}

BOOL SCNVector3EqualToVector3(SCNVector3 a, SCNVector3 b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z;
}

BOOL SCNVector4EqualToVector4(SCNVector4 a, SCNVector4 b)
{
  return a.x == b.x && a.y == b.y && a.z == b.z && a.w == b.w;
}

__n128 C3DMatrix4x4ToSCNMatrix4(uint64_t a1, _OWORD *a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  return result;
}

__n128 C3DMatrix4x4FromSCNMatrix4(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

SCNMatrix4 *__cdecl SCNMatrix4Invert(SCNMatrix4 *__return_ptr retstr, SCNMatrix4 *m)
{
  simd_float4 v3;
  simd_float4 v4;
  SCNMatrix4 *result;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4x4 v8;

  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  v3 = *(simd_float4 *)&m->m21;
  v8.columns[0] = *(simd_float4 *)&m->m11;
  v8.columns[1] = v3;
  v4 = *(simd_float4 *)&m->m41;
  v8.columns[2] = *(simd_float4 *)&m->m31;
  v8.columns[3] = v4;
  result = (SCNMatrix4 *)C3DMatrix4x4Invert(&v8, &v8);
  v6 = v8.columns[1];
  *(simd_float4 *)&retstr->m11 = v8.columns[0];
  *(simd_float4 *)&retstr->m21 = v6;
  v7 = v8.columns[3];
  *(simd_float4 *)&retstr->m31 = v8.columns[2];
  *(simd_float4 *)&retstr->m41 = v7;
  return result;
}

SCNMatrix4 *__cdecl SCNMatrix4Scale(SCNMatrix4 *__return_ptr retstr, SCNMatrix4 *m, float sx, float sy, float sz)
{
  __int128 v7;
  __int128 v8;
  SCNMatrix4 *result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v7 = *(_OWORD *)&m->m21;
  v17 = *(float32x4_t *)&m->m11;
  v18 = v7;
  v8 = *(_OWORD *)&m->m41;
  v19 = *(_OWORD *)&m->m31;
  v20 = v8;
  v16 = *(_OWORD *)&sx;
  C3DMatrix4x4Scale(&v17, (float32x2_t *)&v16);
  v12 = v18;
  *(float32x4_t *)&m->m11 = v17;
  *(_OWORD *)&m->m21 = v12;
  v13 = v20;
  *(_OWORD *)&m->m31 = v19;
  *(_OWORD *)&m->m41 = v13;
  v14 = *(_OWORD *)&m->m21;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&m->m11;
  *(_OWORD *)&retstr->m21 = v14;
  v15 = *(_OWORD *)&m->m41;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&m->m31;
  *(_OWORD *)&retstr->m41 = v15;
  return result;
}

BOOL SCNMatrix4EqualToMatrix4(SCNMatrix4 *a, SCNMatrix4 *b)
{
  return memcmp(a, b, 0x40uLL) == 0;
}

SCNMatrix4 *__cdecl SCNMatrix4Rotate(SCNMatrix4 *__return_ptr retstr, SCNMatrix4 *m, float angle, float x, float y, float z)
{
  __int128 v10;
  __int128 v11;
  float32x4_t *v12;
  float32x4_t *v13;
  SCNMatrix4 *result;
  __int128 v15;
  __int128 v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22[4];

  *(_OWORD *)&retstr->m31 = 0u;
  *(_OWORD *)&retstr->m41 = 0u;
  *(_OWORD *)&retstr->m11 = 0u;
  *(_OWORD *)&retstr->m21 = 0u;
  memset(v22, 0, sizeof(v22));
  v17 = *(float32x4_t *)&x;
  C3DMatrix4x4MakeAxisAngleRotation(v22, &v17, (float)-angle);
  v10 = *(_OWORD *)&m->m21;
  v18 = *(_OWORD *)&m->m11;
  v19 = v10;
  v11 = *(_OWORD *)&m->m41;
  v20 = *(_OWORD *)&m->m31;
  v21 = v11;
  if (C3DWasLinkedBeforeMajorOSYear2019())
  {
    v12 = (float32x4_t *)&v18;
    v13 = v22;
  }
  else
  {
    v12 = v22;
    v13 = (float32x4_t *)&v18;
  }
  C3DMatrix4x4Mult((uint64_t)v12, v13, &v18);
  v15 = v19;
  *(_OWORD *)&retstr->m11 = v18;
  *(_OWORD *)&retstr->m21 = v15;
  v16 = v21;
  *(_OWORD *)&retstr->m31 = v20;
  *(_OWORD *)&retstr->m41 = v16;
  return result;
}

GLKMatrix4 *__cdecl SCNMatrix4ToGLKMatrix4(GLKMatrix4 *__return_ptr retstr, GLKMatrix4 *mat)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)&mat->m[4];
  *(_OWORD *)&retstr->m00 = *(_OWORD *)&mat->m00;
  *(_OWORD *)&retstr->m[4] = v2;
  v3 = *(_OWORD *)&mat->m[12];
  *(_OWORD *)&retstr->m[8] = *(_OWORD *)&mat->m[8];
  *(_OWORD *)&retstr->m[12] = v3;
  return mat;
}

SCNMatrix4 *__cdecl SCNMatrix4FromGLKMatrix4(SCNMatrix4 *__return_ptr retstr, SCNMatrix4 *mat)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)&mat->m21;
  *(_OWORD *)&retstr->m11 = *(_OWORD *)&mat->m11;
  *(_OWORD *)&retstr->m21 = v2;
  v3 = *(_OWORD *)&mat->m41;
  *(_OWORD *)&retstr->m31 = *(_OWORD *)&mat->m31;
  *(_OWORD *)&retstr->m41 = v3;
  return mat;
}

uint64_t CreateRadialSpanSide(uint64_t a1, double a2, __n128 a3)
{
  float v4;
  __n128 v6;
  float32x4_t v7[4];

  v4 = (1.0 - a2) * 6.28318531;
  a3.n128_u32[0] = 0;
  a3.n128_f32[1] = v4;
  memset(v7, 0, sizeof(v7));
  a3.n128_u32[2] = 1078530011;
  v6 = a3;
  C3DMatrix4x4MakeEulerRotation(v7, &v6);
  return C3DMeshCopyWithTransform(a1, v7);
}

void generateRingProfile(float *a1, int a2, float a3, float a4, float a5, double a6, double a7, float a8, float a9)
{
  BOOL v11;
  float v12;
  float v13;
  double v14;
  __double2 v15;
  float v16;
  float v17;
  float v18;
  double v19;
  __double2 v20;
  float v21;
  uint64_t v22;

  v11 = a5 < 0.0;
  v12 = -1.0;
  if (!v11)
    v12 = 1.0;
  if (a2 == 3)
  {
    v18 = (1.0 - a8 + (float)((float)(a4 * a8) / a3)) * 0.5;
    v19 = v18;
    v20 = __sincos_stret(a9 * 6.28318531);
    v21 = v19 * v20.__cosval + 0.5;
    *a1 = v21;
    v17 = v19 * v20.__sinval + 0.5;
    v22 = 1;
  }
  else
  {
    if (a2 == 1)
    {
      *a1 = 0.0;
      a1[1] = v12;
      v17 = 0.0;
    }
    else
    {
      if (a2)
        return;
      v13 = (float)(a4 * a8) + (1.0 - a8) * a3;
      v14 = (float)(v12 * v13);
      v15 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v16 = v15.__sinval * v14;
      *a1 = v16;
      a1[1] = a5;
      v17 = v15.__cosval * v13;
    }
    v22 = 2;
  }
  a1[v22] = v17;
}

void generateSphereProfile(float *a1, int a2, float a3, float a4, float a5, double a6, double a7, float a8, float a9)
{
  double v11;
  float v12;
  double v13;
  __double2 v14;
  __double2 v15;
  float v16;
  float v17;
  uint64_t v18;
  __double2 v19;
  __double2 v20;
  float v21;
  float sinval;
  float v23;

  v11 = 1.0 - a8;
  if (a2 == 3)
  {
    *a1 = a9;
    v18 = 1;
  }
  else
  {
    v12 = (a5 + -0.5) * a8 + (a4 + -0.5) * v11;
    if (a2 == 1)
    {
      v19 = __sincos_stret(v12 * 3.14159265);
      v20 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v21 = v20.__sinval * v19.__cosval;
      sinval = v19.__sinval;
      *a1 = v21;
      a1[1] = sinval;
      v11 = v20.__cosval * v19.__cosval;
    }
    else
    {
      if (a2)
        return;
      v13 = a3;
      v14 = __sincos_stret(v12 * 3.14159265);
      v15 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v16 = v15.__sinval * (v14.__cosval * v13);
      v17 = v14.__sinval * v13;
      *a1 = v16;
      a1[1] = v17;
      v11 = v15.__cosval * (v14.__cosval * v13);
    }
    v18 = 2;
  }
  v23 = v11;
  a1[v18] = v23;
}

void generateCylinderProfile(float *a1, int a2, float a3, float a4, double a5, double a6, double a7, float a8, float a9)
{
  BOOL v12;
  double v13;
  double v14;
  __double2 v15;
  float v16;
  float v17;
  float cosval;
  __double2 v19;
  float sinval;

  v12 = a4 <= 0.0;
  v13 = 3.14159265;
  if (v12)
    v13 = 0.0;
  if (a2 == 3)
  {
    if (a4 <= 0.0)
    {
      *a1 = 1.0 - a9;
      a1[1] = a8;
    }
    else
    {
      *a1 = a9;
      a1[1] = 1.0 - a8;
    }
  }
  else
  {
    if (a2 == 1)
    {
      v19 = __sincos_stret(v13 + a9 * 6.28318531);
      sinval = v19.__sinval;
      *a1 = sinval;
      a1[1] = 0.0;
      cosval = v19.__cosval;
    }
    else
    {
      if (a2)
        return;
      v14 = a3;
      v15 = __sincos_stret(v13 + a9 * 6.28318531);
      v16 = v15.__sinval * v14;
      v17 = (a8 + -0.5) * a4;
      *a1 = v16;
      a1[1] = v17;
      cosval = v15.__cosval * v14;
    }
    a1[2] = cosval;
  }
}

void generateConeProfile(uint64_t a1, int a2, float a3, float a4, float a5, double a6, double a7, float a8, float a9)
{
  double v11;
  double v12;
  __double2 v13;
  float v14;
  float v15;
  float cosval;
  uint64_t v17;
  __double2 v18;
  float sinval;

  if (a2 == 3)
  {
    *(float *)a1 = a9;
    cosval = 1.0 - a8;
    v17 = 1;
  }
  else
  {
    if (a2 == 1)
    {
      v18 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      sinval = v18.__sinval;
      *(float *)a1 = sinval;
      *(_DWORD *)(a1 + 4) = 0;
      cosval = v18.__cosval;
    }
    else
    {
      if (a2)
        return;
      v11 = a8;
      v12 = (float)(a3 * a8) + (1.0 - a8) * a4;
      v13 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v14 = v12 * v13.__sinval;
      v15 = (v11 + -0.5) * a5;
      *(float *)a1 = v14;
      *(float *)(a1 + 4) = v15;
      cosval = v12 * v13.__cosval;
    }
    v17 = 2;
  }
  *(float *)(a1 + 4 * v17) = cosval;
}

void generateTorusProfile(float *a1, int a2, float a3, float a4, double a5, double a6, double a7, float a8, float a9)
{
  double v11;
  double v12;
  __double2 v13;
  double v14;
  __double2 v15;
  float v16;
  float v17;
  double v18;
  float v19;
  uint64_t v20;
  __double2 v21;
  __double2 v22;
  float v23;
  float sinval;

  if (a2 == 3)
  {
    *a1 = a9;
    v19 = 1.0 - a8;
    v20 = 1;
  }
  else
  {
    if (a2 == 1)
    {
      v21 = __sincos_stret((a8 + -0.5) * 6.28318531);
      v22 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v23 = v21.__cosval * v22.__sinval;
      sinval = v21.__sinval;
      *a1 = v23;
      a1[1] = sinval;
      v18 = v21.__cosval * v22.__cosval;
    }
    else
    {
      if (a2)
        return;
      v11 = a3;
      v12 = a4;
      v13 = __sincos_stret((a8 + -0.5) * 6.28318531);
      v14 = v11 + v12 * v13.__cosval;
      v15 = __sincos_stret(a9 * 6.28318531 + 3.14159265);
      v16 = v15.__sinval * v14;
      v17 = v13.__sinval * v12;
      *a1 = v16;
      a1[1] = v17;
      v18 = v15.__cosval * v14;
    }
    v19 = v18;
    v20 = 2;
  }
  a1[v20] = v19;
}

void generateCapsuleProfile(float *a1, int a2, int a3, float a4, float a5, double a6, double a7, double a8, float a9, float a10)
{
  double v15;
  __double2 v16;
  double v17;
  double cosval;
  __double2 v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __double2 v31;
  __double2 v32;
  float v33;
  float v34;
  __double2 v35;
  float v36;
  __double2 v37;
  __double2 v38;
  float v39;
  float v40;
  __double2 v41;
  float sinval;
  float v43;

  if (a2 == 3)
  {
    *a1 = a10;
    v22 = (float)(a4 / a5);
    v23 = 1.0 - v22;
    v24 = 1.0 - a9;
    v25 = (float)((float)(a4 / a5) * a9) + (1.0 - v22) * v24;
    v26 = 1;
    v27 = v24 * v22;
    v28 = v24 + a9 * v23;
    if (!a3)
      v27 = v28;
    if (a3 == 1)
      v27 = v25;
    else
      v26 = 1;
    goto LABEL_24;
  }
  if (a2 != 1)
  {
    if (a2)
      return;
    if (a3 == 2)
    {
      v30 = a4;
      v31 = __sincos_stret(a9 * 1.57079633);
      v32 = __sincos_stret(a10 * 6.28318531 + 3.14159265);
      v33 = v31.__cosval * v30 * v32.__sinval;
      v34 = a5 * 0.5 + v30 * v31.__sinval - v30;
      *a1 = v33;
      a1[1] = v34;
      v27 = v31.__cosval * v30 * v32.__cosval;
    }
    else
    {
      if (a3 == 1)
      {
        v17 = a4;
        v35 = __sincos_stret(a10 * 6.28318531 + 3.14159265);
        cosval = v35.__cosval;
        v20 = v35.__sinval * v17;
        v21 = (a9 + -0.5) * (float)(a5 + (float)(a4 * -2.0));
      }
      else
      {
        if (a3)
          return;
        v15 = a4;
        v16 = __sincos_stret((a9 + -1.0) * 1.57079633);
        v17 = v16.__cosval * v15;
        v19 = __sincos_stret(a10 * 6.28318531 + 3.14159265);
        cosval = v19.__cosval;
        v20 = v19.__sinval * (v16.__cosval * v15);
        v21 = a5 * -0.5 + v15 * v16.__sinval + v15;
      }
      v36 = v21;
      *a1 = v20;
      a1[1] = v36;
      v27 = cosval * v17;
    }
    goto LABEL_23;
  }
  if (a3 == 2)
  {
    v29 = a9;
  }
  else
  {
    if (a3 == 1)
    {
      v41 = __sincos_stret(a10 * 6.28318531 + 3.14159265);
      v27 = v41.__cosval;
      sinval = v41.__sinval;
      *a1 = sinval;
      a1[1] = 0.0;
      goto LABEL_23;
    }
    if (a3)
      return;
    v29 = a9 + -1.0;
  }
  v37 = __sincos_stret(v29 * 1.57079633);
  v38 = __sincos_stret(a10 * 6.28318531 + 3.14159265);
  v39 = v37.__cosval * v38.__sinval;
  v40 = v37.__sinval;
  *a1 = v39;
  a1[1] = v40;
  v27 = v37.__cosval * v38.__cosval;
LABEL_23:
  v26 = 2;
LABEL_24:
  v43 = v27;
  a1[v26] = v43;
}

void generateChamferCornerProfile(uint64_t a1, int a2, float a3, float32x4_t a4, float a5, float a6, float a7, float a8, float a9)
{
  float32x2_t v12;
  int v13;
  float v14;
  double v15;
  double v16;
  double cosval;
  __double2 v18;
  float v19;
  double v20;
  double v21;
  __double2 v22;
  float v23;
  double v24;
  double v25;
  double v26;
  __double2 v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float32x2_t v33;
  float v34;
  double v35;
  double v36;
  float32x2_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float32_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float v51;
  double v52;
  __double2 v53;
  float v54;
  float v56;
  float v57;

  _S21 = a3;
  v12 = vcvt_f32_s32((int32x2_t)(*(_QWORD *)&vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32((int)a7), (int8x8_t)0x200000001)) | 0x100000001));
  if (((int)a7 & 4) != 0)
    v13 = 1;
  else
    v13 = -1;
  v14 = (float)v13;
  if (a9 != 0.0)
  {
    if (a8 != 0.0)
    {
      v29 = _S21 / 1.41421356;
      v30 = _S21 / 1.73205081;
      v31 = v29 * v12.f32[0];
      v32 = v29 * v14;
      v33 = vmul_n_f32(v12, v30);
      v34 = vmuls_lane_f32(v29, v12, 1);
      v35 = 1.0 - a8;
      v36 = 1.0 - a9;
      v37.i32[0] = 0;
      v37.f32[1] = v34;
      v38 = (float32x4_t)vcvtq_f64_f32(vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(vmul_n_f32(v37, a8)), (float64x2_t)0, v35)));
      *(float32x2_t *)v38.f32 = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(vmul_n_f32(vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(vmul_n_f32(v33, a8)), (float64x2_t)COERCE_UNSIGNED_INT64(v31), v35)), a9)), (float64x2_t)v38, v36));
      v39 = (float)(v32 * a8) + v35 * (float)(v14 * _S21);
      v40 = (float)((float)(v30 * v14) * a8) + v35 * v32;
      v41 = (float)(v40 * a9) + v36 * v39;
      v38.f32[2] = v41;
      v42 = (int32x4_t)vmulq_f32(v38, v38);
      v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
      v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
      v44 = vmul_f32(v43, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)));
      _Q0 = vmulq_n_f32(v38, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
      if (!a2)
      {
        a4.f32[1] = a5;
        *(float32x2_t *)a4.f32 = vmla_n_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)_Q0.f32, _S21);
        __asm { FMLA            S3, S21, V0.S[2] }
        a4.i32[2] = _S3;
        _Q0 = a4;
      }
      *(_QWORD *)a1 = _Q0.i64[0];
      v51 = _Q0.f32[2];
      goto LABEL_20;
    }
    if (a2 != 1)
    {
      if (a2)
        return;
      v20 = a4.f32[0];
      v21 = (float)(_S21 * v12.f32[0]);
      v56 = a6;
      v57 = _S21;
      v22 = __sincos_stret(a9 * 0.785398163);
      cosval = v22.__cosval;
      v23 = v20 + v21 * v22.__sinval;
      *(float *)a1 = v23;
      *(float *)(a1 + 4) = a5;
      goto LABEL_12;
    }
    v52 = v12.f32[0];
    v53 = __sincos_stret(a9 * 0.785398163);
    v26 = v53.__cosval;
    v54 = v53.__sinval * v52;
    *(float *)a1 = v54;
    *(_DWORD *)(a1 + 4) = 0;
LABEL_18:
    v24 = v26 * v14;
    goto LABEL_19;
  }
  if (a2 == 1)
  {
    *(_DWORD *)a1 = 0;
    v25 = v12.f32[1];
    v27 = __sincos_stret(a8 * 0.785398163);
    v26 = v27.__cosval;
    v28 = v27.__sinval * v25;
    *(float *)(a1 + 4) = v28;
    goto LABEL_18;
  }
  if (a2)
    return;
  *(_DWORD *)a1 = a4.i32[0];
  v15 = a5;
  v16 = vmuls_lane_f32(_S21, v12, 1);
  v56 = a6;
  v57 = _S21;
  v18 = __sincos_stret(a8 * 0.785398163);
  cosval = v18.__cosval;
  v19 = v15 + v16 * v18.__sinval;
  *(float *)(a1 + 4) = v19;
LABEL_12:
  v24 = v56 + (float)(v14 * v57) * cosval;
LABEL_19:
  v51 = v24;
LABEL_20:
  *(float *)(a1 + 8) = v51;
}

void generateChamferQuadProfile(uint64_t a1, int a2, int a3, int a4, float32x4_t a5, float32_t a6, float32_t a7, double a8, float a9, float a10, float a11)
{
  double v17;
  float v18;
  unint64_t v19;
  __n128 v20;
  __int128 v21;
  __double2 v22;
  __int128 v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  __double2 v34;
  float v35;
  double v36;
  double v37;
  double v38;
  float v39;
  float v40;
  double v41;
  float v42;
  double v43;
  __double2 v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  int v50;
  float v51;
  float v52;
  float32x2_t v53;
  double v54;
  __double2 v55;
  double cosval;
  double v57;
  __double2 v58;
  float v59;
  int v60;
  __int128 v61;
  float v62;
  __n128 v63;
  int v65;

  if (a9 >= 4.0)
  {
    if (a9 == 4.0)
    {
      v20 = (__n128)xmmword_1DD02AC20;
      v21 = xmmword_1DD02AC30;
    }
    else
    {
      v20 = (__n128)xmmword_1DD02AC30;
      v21 = xmmword_1DD02AC20;
    }
    v63 = (__n128)v21;
  }
  else
  {
    v17 = a9;
    v18 = v17 * 1.57079633;
    v20.n128_u32[0] = 0;
    v20.n128_u64[1] = 0;
    LODWORD(v19) = 0;
    *((float *)&v19 + 1) = v18;
    v63 = (__n128)v19;
    *(float *)&v17 = v17 * -1.57079633;
    v20.n128_u32[1] = LODWORD(v17);
  }
  a5.f32[1] = a6;
  a5.f32[2] = a7;
  *(float32x2_t *)&v22.__sinval = C3DVector3EulerRotate(a5, v20);
  v24 = fabsf(*(float *)&v22.__sinval);
  v25 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(float32x2_t *)v25.f32 = vabs_f32((float32x2_t)vext_s8(*(int8x8_t *)&v22.__sinval, *(int8x8_t *)v25.f32, 4uLL));
  if (a2 == 3)
  {
    v29 = *(float *)&a8 / v24;
    if (a4)
    {
      if (a4 != 2)
      {
        if (a4 != 1)
          goto LABEL_41;
        v30 = v29 * a11;
LABEL_40:
        *(float *)a1 = v30;
LABEL_41:
        v39 = 1.0 - a10;
        v40 = *(float *)&a8 / v25.f32[0];
        if (a3)
        {
          if (a3 != 1)
          {
            v42 = v39 * v40;
            goto LABEL_47;
          }
          v41 = v39 + (1.0 - v40) * (1.0 - v39);
        }
        else
        {
          v41 = (1.0 - v40) * v39 + (1.0 - v39) * v40;
        }
        v42 = v41;
LABEL_47:
        *(float *)(a1 + 4) = v42;
        return;
      }
      v38 = a11;
      v36 = 1.0 - a11;
      v37 = 1.0 - v29;
    }
    else
    {
      v36 = 1.0 - a11;
      v37 = v29;
      v38 = (1.0 - v37) * a11;
    }
    v30 = v38 + v36 * v37;
    goto LABEL_40;
  }
  v26 = v24 * 0.5;
  *(float32x2_t *)&v23 = vmul_f32(*(float32x2_t *)v25.f32, (float32x2_t)0x3F0000003F000000);
  if (a2 != 1)
  {
    if (a2)
      return;
    HIDWORD(v22.__cosval) = v65;
    v27 = v25.f32[0] + (float)(*(float *)&a8 * -2.0);
    if (a4 != 2)
    {
      if (a4 != 1)
      {
        if (!a4)
        {
          HIDWORD(v22.__cosval) = v65;
          *(float *)&v22.__sinval = (a11 + -0.5) * (float)(v24 + (float)(*(float *)&a8 * -2.0));
          *(_DWORD *)a1 = LODWORD(v22.__sinval);
          if (a3 != 2)
          {
            if (a3 != 1)
            {
              if (!a3)
              {
                v28 = (a10 + -0.5) * v27;
                *(float *)(a1 + 4) = v28;
                *(_DWORD *)(a1 + 8) = DWORD1(v23);
              }
              goto LABEL_71;
            }
            v54 = (float)(*(float *)&a8 - *(float *)&v23);
            v62 = *((float *)&v23 + 1);
            v55 = __sincos_stret(a10 * 0.785398163 + -0.785398163);
            *(float *)&v22.__sinval = v54 + *(float *)&a8 * v55.__sinval;
            cosval = (float)(v62 - *(float *)&a8) + *(float *)&a8 * v55.__cosval;
            goto LABEL_70;
          }
          v53 = vsub_f32(*(float32x2_t *)&v23, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a8, 0));
          v22 = __sincos_stret(a10 * 0.785398163);
          *(float32x2_t *)&v22.__sinval = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(v53), (float64x2_t)v22, *(float *)&a8));
          goto LABEL_65;
        }
        goto LABEL_71;
      }
      if (a3 != 2)
      {
        if (a3 != 1)
        {
          if (a3)
            goto LABEL_71;
          v31 = (float)(*(float *)&a8 - v26);
          v32 = *(float *)&a8;
          v33 = a11 * 0.785398163 + -0.785398163;
LABEL_36:
          v61 = v23;
          v34 = __sincos_stret(v33);
          *(float *)&v22.__sinval = v31 + v32 * v34.__sinval;
          v35 = (a10 + -0.5) * v27;
          *(_DWORD *)a1 = LODWORD(v22.__sinval);
          *(float *)(a1 + 4) = v35;
          HIDWORD(v22.__cosval) = HIDWORD(v61);
          *(float *)&v22.__sinval = (float)(*((float *)&v61 + 1) - *(float *)&a8) + v32 * v34.__cosval;
LABEL_57:
          *(_DWORD *)(a1 + 8) = LODWORD(v22.__sinval);
          goto LABEL_71;
        }
        goto LABEL_62;
      }
      goto LABEL_61;
    }
    if (a3 != 2)
    {
      if (a3 != 1)
      {
        if (a3)
          goto LABEL_71;
        v31 = (float)(v26 - *(float *)&a8);
        v32 = *(float *)&a8;
        v33 = a11 * 0.785398163;
        goto LABEL_36;
      }
      goto LABEL_59;
    }
LABEL_58:
    v45 = *(float *)&a8;
    v25.f32[0] = v26 - *(float *)&a8;
    v46 = *(float *)&v23 - *(float *)&a8;
    v47 = *((float *)&v23 + 1) - *(float *)&a8;
    v48 = 7.0;
    v49 = a1;
    v50 = a2;
    v51 = a10;
LABEL_60:
    v52 = a11;
LABEL_63:
    generateChamferCornerProfile(v49, v50, v45, v25, v46, v47, v48, v51, v52);
    goto LABEL_71;
  }
  if (a4 == 2)
  {
    if (a3 == 2)
      goto LABEL_58;
    if (a3 == 1)
    {
LABEL_59:
      v45 = *(float *)&a8;
      v25.f32[0] = v26 - *(float *)&a8;
      v46 = *(float *)&a8 - *(float *)&v23;
      v47 = *((float *)&v23 + 1) - *(float *)&a8;
      v51 = 1.0 - a10;
      v48 = 5.0;
      v49 = a1;
      v50 = a2;
      goto LABEL_60;
    }
    if (a3)
      goto LABEL_71;
    v43 = a11 * 0.785398163;
LABEL_56:
    v44 = __sincos_stret(v43);
    *(float *)&v22.__sinval = v44.__sinval;
    *(_DWORD *)a1 = LODWORD(v22.__sinval);
    *(_DWORD *)(a1 + 4) = 0;
    *(float *)&v22.__sinval = v44.__cosval;
    goto LABEL_57;
  }
  if (a4 == 1)
  {
    if (a3 == 2)
    {
LABEL_61:
      v45 = *(float *)&a8;
      v25.f32[0] = *(float *)&a8 - v26;
      v46 = *(float *)&v23 - *(float *)&a8;
      v47 = *((float *)&v23 + 1) - *(float *)&a8;
      v52 = 1.0 - a11;
      v48 = 6.0;
      v49 = a1;
      v50 = a2;
      v51 = a10;
      goto LABEL_63;
    }
    if (a3 == 1)
    {
LABEL_62:
      v45 = *(float *)&a8;
      v25.f32[0] = *(float *)&a8 - v26;
      v46 = *(float *)&a8 - *(float *)&v23;
      v47 = *((float *)&v23 + 1) - *(float *)&a8;
      v51 = 1.0 - a10;
      v52 = 1.0 - a11;
      v48 = 4.0;
      v49 = a1;
      v50 = a2;
      goto LABEL_63;
    }
    if (a3)
      goto LABEL_71;
    v43 = a11 * 0.785398163 + -0.785398163;
    goto LABEL_56;
  }
  if (a4)
    goto LABEL_71;
  *(_DWORD *)a1 = 0;
  switch(a3)
  {
    case 2:
      v57 = a10 * 0.785398163;
LABEL_69:
      v58 = __sincos_stret(v57);
      cosval = v58.__cosval;
      *(float *)&v22.__sinval = v58.__sinval;
LABEL_70:
      v59 = cosval;
      *(_DWORD *)(a1 + 4) = LODWORD(v22.__sinval);
      *(float *)(a1 + 8) = v59;
      break;
    case 1:
      v57 = a10 * 0.785398163 + -0.785398163;
      goto LABEL_69;
    case 0:
      v22.__sinval = 0.0078125;
LABEL_65:
      *(double *)(a1 + 4) = v22.__sinval;
      break;
  }
LABEL_71:
  v22.__sinval = *(double *)a1;
  LODWORD(v22.__cosval) = *(_DWORD *)(a1 + 8);
  *(float32x2_t *)a1 = C3DVector3EulerRotate((float32x4_t)v22, v63);
  *(_DWORD *)(a1 + 8) = v60;
}

void generatePyramidProfile(uint64_t a1, int a2, float32x4_t a3, float32_t a4, float32_t a5, float a6, double a7, float a8, float a9)
{
  double v13;
  float v14;
  unint64_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  int v25;

  v13 = a6;
  v14 = a6 * -1.57079633;
  LODWORD(v15) = 0;
  *((float *)&v15 + 1) = v14;
  a3.f32[1] = a4;
  a3.f32[2] = a5;
  *(float32x2_t *)v16.f32 = C3DVector3EulerRotate(a3, (__n128)v15);
  v17 = fabsf(v16.f32[1]);
  v18 = fabsf(v16.f32[2]);
  if (a2)
  {
    if (a2 == 1)
    {
      *(_DWORD *)a1 = 0;
      v16.f32[0] = v18 * 0.5;
      v22 = sqrtf((float)(v16.f32[1] * v16.f32[1]) + (float)(v16.f32[0] * v16.f32[0]));
      v20 = v16.f32[0] / v22;
      v21 = v17 / v22;
      *(float *)(a1 + 4) = v16.f32[0] / v22;
      *(float *)(a1 + 8) = v21;
      v16.i32[0] = 0;
    }
    else
    {
      if (a2 == 3)
      {
        *(float *)a1 = a9;
        *(float *)(a1 + 4) = 1.0 - a8;
        return;
      }
      v16.i32[0] = *(_DWORD *)a1;
      v20 = *(float *)(a1 + 4);
      v21 = *(float *)(a1 + 8);
    }
  }
  else
  {
    v19 = 1.0 - a8;
    v16.f32[0] = (a9 + -0.5) * (v19 * fabsf(v16.f32[0]));
    v20 = v17 * a8;
    *(_DWORD *)a1 = v16.i32[0];
    *(float *)(a1 + 4) = v17 * a8;
    v21 = v19 * (v18 * 0.5);
    *(float *)(a1 + 8) = v21;
  }
  v23 = v13 * 1.57079633;
  LODWORD(v24) = 0;
  *((float *)&v24 + 1) = v23;
  v16.f32[1] = v20;
  v16.f32[2] = v21;
  *(float32x2_t *)a1 = C3DVector3EulerRotate(v16, (__n128)v24);
  *(_DWORD *)(a1 + 8) = v25;
}

uint64_t C3DMeshCreateFromProfile(void (*a1)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float), unsigned int a2, int *a3, int a4, int a5, int a6, int *a7, int a8, float a9, float a10, float a11, float a12, float a13, float a14)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFData *Mutable;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  const __CFData *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  int v59;
  int v60;
  int v61;
  __int16 v62;
  __int16 v63;
  int v64;
  int v65;
  UInt8 *v66;
  __CFData *v67;
  CFIndex v68;
  UInt8 *v69;
  __CFData *v70;
  CFIndex v71;
  __CFData *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  int v83;
  int v84;
  UInt8 *v85;
  __CFData *v86;
  int v87;
  CFIndex v88;
  UInt8 *v89;
  __CFData *v90;
  CFIndex v91;
  __CFData *v92;
  const void *v93;
  CFDataRef Copy;
  const CFArrayCallBacks *v95;
  const __CFArray *v96;
  const __CFArray *v97;
  uint64_t v98;
  uint64_t i;
  const void *v100;
  const __CFAllocator *allocator;
  uint64_t v103;
  uint64_t v104;
  int v105;
  __int16 v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  _BOOL4 v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v123;
  CFTypeRef cf;
  void *values[3];
  UInt8 v127[8];
  int v128;
  int v129;
  _BYTE v130[12];
  _DWORD v131[3];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a2))
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  values[0] = (void *)__CreateSourceFromProfileGenerator(a1, 0, a3, a4, a7, a8, a9, a10, a11, a12, a13, a14);
  values[1] = (void *)__CreateSourceFromProfileGenerator(a1, 1, a3, a4, a7, a8, a9, a10, a11, a12, a13, a14);
  values[2] = (void *)__CreateSourceFromProfileGenerator(a1, 3, a3, a4, a7, a8, a9, a10, a11, a12, a13, a14);
  cf = 0;
  if (!C3DMeshElementTypeDefinesTopology(a2))
  {
    v32 = scn_default_log();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v123 = (a4 - 1);
  v41 = 0;
  if (a4 >= 1)
  {
    v42 = a3;
    v43 = a4;
    do
    {
      v44 = *v42++;
      v41 += v44 + 1;
      --v43;
    }
    while (v43);
  }
  v45 = Mutable;
  if (a8 < 1)
  {
    v51 = 0;
    v52 = 2;
    goto LABEL_118;
  }
  v46 = 0;
  v47 = a8;
  v48 = a7;
  v103 = a8;
  do
  {
    v49 = *v48++;
    v46 += v49 + 1;
    --v47;
  }
  while (v47);
  v121 = a5;
  v110 = v41;
  if (v46 * v41 >= 0x10000)
  {
    v73 = 0;
    v51 = 0;
    v105 = 0;
    v52 = 4;
    while (1)
    {
      v74 = a7[v73];
      if (v74 < 1)
        goto LABEL_117;
      v75 = 0;
      v114 = v41 * v105;
      v116 = v41 + v41 * v105;
      v107 = v73;
      do
      {
        if (a4 < 1)
          goto LABEL_116;
        v76 = 0;
        v77 = 0;
        v109 = v75;
        v118 = v75 | v73;
        do
        {
          v78 = a3[v76];
          v120 = v77;
          if (v78 >= 1)
          {
            v79 = 0;
            if (a6)
              v80 = v76 == v123;
            else
              v80 = 0;
            v81 = v80;
            v82 = v116 + v77;
            v83 = v114 + v77;
            do
            {
              *(_DWORD *)v130 = v83 + v79;
              *(_DWORD *)&v130[4] = v82 + v79 + 1;
              v84 = v79 + 1;
              *(_DWORD *)&v130[8] = v83 + v79 + 1;
              v131[0] = v83 + v79;
              v131[1] = v82 + v79;
              v131[2] = *(_DWORD *)&v130[4];
              if (!a5 || v79 | v76)
              {
                if (v84 == v78)
                  v87 = v81;
                else
                  v87 = 0;
                if (v87 == 1)
                {
                  switch(a2)
                  {
                    case 3u:
                      *(_DWORD *)v127 = v83 + v79;
                      *(_DWORD *)&v127[4] = v82 + v79 + 1;
                      goto LABEL_105;
                    case 2u:
                      *(_DWORD *)v127 = v83 + v79;
                      *(_DWORD *)&v127[4] = v82 + v79;
                      v128 = v82 + v79;
                      v129 = v82 + v79 + 1;
LABEL_101:
                      v89 = v127;
                      v90 = v45;
                      v91 = 16;
LABEL_106:
                      CFDataAppendBytes(v90, v89, v91);
                      Mutable = v45;
                      v51 += 2;
                      break;
                    case 0u:
                      v86 = v45;
                      v85 = (UInt8 *)v131;
                      goto LABEL_92;
                  }
                }
                else
                {
                  switch(a2)
                  {
                    case 3u:
LABEL_98:
                      *(_DWORD *)v127 = v83 + v79;
                      *(_DWORD *)&v127[4] = v83 + v79 + 1;
LABEL_105:
                      v89 = v127;
                      v90 = v45;
                      v91 = 8;
                      goto LABEL_106;
                    case 2u:
                      *(_DWORD *)v127 = v83 + v79;
                      *(_DWORD *)&v127[4] = v82 + v79;
                      v128 = v82 + v79;
                      v129 = v82 + v79 + 1;
                      v92 = Mutable;
                      CFDataAppendBytes(Mutable, v127, 16);
                      if (v118)
                      {
                        v51 += 2;
                      }
                      else
                      {
                        *(_DWORD *)v127 = *(_DWORD *)v130;
                        *(_DWORD *)&v127[4] = *(_DWORD *)&v130[8];
                        CFDataAppendBytes(v92, v127, 8);
                        v51 += 3;
                      }
                      a5 = v121;
                      if (v76 != v123 || v79 != a3[v76] - 1)
                      {
                        Mutable = v45;
                        break;
                      }
                      *(_QWORD *)v127 = *(_QWORD *)&v130[4];
                      v85 = v127;
                      v86 = v45;
                      v88 = 8;
                      goto LABEL_93;
                    case 0u:
                      v89 = v130;
                      v90 = v45;
                      v91 = 24;
                      goto LABEL_106;
                  }
                }
              }
              else
              {
                switch(a2)
                {
                  case 3u:
                    goto LABEL_98;
                  case 2u:
                    *(_DWORD *)v127 = v83 + v79;
                    *(_DWORD *)&v127[4] = v82 + v79 + 1;
                    v128 = v83 + v79;
                    v129 = v83 + v79 + 1;
                    goto LABEL_101;
                  case 0u:
                    v85 = v130;
                    v86 = v45;
LABEL_92:
                    v88 = 12;
LABEL_93:
                    CFDataAppendBytes(v86, v85, v88);
                    Mutable = v45;
                    ++v51;
                    break;
                }
              }
              v78 = a3[v76];
              ++v79;
            }
            while (v84 < v78);
          }
          v77 = v120 + v78 + 1;
          ++v76;
        }
        while (v76 != a4);
        LODWORD(v41) = v110;
        v73 = v107;
        v75 = v109;
        v74 = a7[v107];
        v52 = 4;
LABEL_116:
        ++v75;
        v116 += v41;
        v114 += v41;
      }
      while (v75 < v74);
LABEL_117:
      v105 += v74 + 1;
      if (++v73 == v103)
        goto LABEL_118;
    }
  }
  v50 = 0;
  v51 = 0;
  v106 = 0;
  v52 = 2;
  do
  {
    v53 = a7[v50];
    if (v53 < 1)
      goto LABEL_62;
    v54 = 0;
    v104 = v50;
    do
    {
      v55 = v54 + 1;
      if (a4 < 1)
        goto LABEL_61;
      v56 = 0;
      v57 = 0;
      v58 = v50 == 0;
      v108 = v54 + 1;
      v113 = (v106 + v55) * v41;
      v115 = (v106 + v54) * v41;
      if ((_WORD)v54)
        v58 = 0;
      v117 = v58;
      do
      {
        v59 = a3[v56];
        v119 = v57;
        if (v59 >= 1)
        {
          v60 = 0;
          v61 = 0;
          v62 = v57 + v115;
          v63 = v57 + v113;
          do
          {
            *(_WORD *)v130 = v61 + v62;
            v64 = v61 + 1;
            *(_WORD *)&v130[2] = v61 + 1 + v63;
            *(_WORD *)&v130[4] = v61 + 1 + v62;
            *(_WORD *)&v130[6] = v61 + v62;
            *(_WORD *)&v130[8] = v61 + v63;
            *(_WORD *)&v130[10] = *(_WORD *)&v130[2];
            v65 = (__int16)(v61 + 1);
            if (v56 || (_WORD)v61 || !a5)
            {
              if (v56 == v123 && a6 && v59 == v65)
              {
                switch(a2)
                {
                  case 3u:
                    *(_WORD *)v127 = v61 + v62;
                    *(_WORD *)&v127[2] = v61 + 1 + v63;
                    goto LABEL_48;
                  case 2u:
                    *(_WORD *)v127 = v61 + v62;
                    *(_WORD *)&v127[2] = v61 + v63;
                    *(_WORD *)&v127[4] = v61 + v63;
                    *(_WORD *)&v127[6] = v61 + 1 + v63;
LABEL_46:
                    v69 = v127;
                    v70 = v45;
                    v71 = 8;
LABEL_49:
                    CFDataAppendBytes(v70, v69, v71);
                    Mutable = v45;
                    v51 += 2;
                    break;
                  case 0u:
                    v67 = v45;
                    v66 = &v130[6];
                    goto LABEL_37;
                }
              }
              else
              {
                switch(a2)
                {
                  case 3u:
LABEL_43:
                    *(_WORD *)v127 = v61 + v62;
                    *(_WORD *)&v127[2] = v61 + 1 + v62;
LABEL_48:
                    v69 = v127;
                    v70 = v45;
                    v71 = 4;
                    goto LABEL_49;
                  case 2u:
                    *(_WORD *)v127 = v61 + v62;
                    *(_WORD *)&v127[2] = v61 + v63;
                    *(_WORD *)&v127[4] = v61 + v63;
                    *(_WORD *)&v127[6] = v61 + 1 + v63;
                    v72 = Mutable;
                    CFDataAppendBytes(Mutable, v127, 8);
                    if (v117)
                    {
                      *(_WORD *)v127 = *(_WORD *)v130;
                      *(_WORD *)&v127[2] = *(_WORD *)&v130[4];
                      CFDataAppendBytes(v72, v127, 4);
                      v51 += 3;
                    }
                    else
                    {
                      v51 += 2;
                    }
                    a5 = v121;
                    if (v56 != v123 || a3[v56] - 1 != v60)
                    {
                      Mutable = v45;
                      break;
                    }
                    *(_DWORD *)v127 = *(_DWORD *)&v130[2];
                    v66 = v127;
                    v67 = v45;
                    v68 = 4;
                    goto LABEL_38;
                  case 0u:
                    v69 = v130;
                    v70 = v45;
                    v71 = 12;
                    goto LABEL_49;
                }
              }
            }
            else
            {
              switch(a2)
              {
                case 3u:
                  goto LABEL_43;
                case 2u:
                  *(_WORD *)v127 = v61 + v62;
                  *(_WORD *)&v127[2] = v61 + 1 + v63;
                  *(_WORD *)&v127[4] = v61 + v62;
                  *(_WORD *)&v127[6] = v61 + 1 + v62;
                  goto LABEL_46;
                case 0u:
                  v66 = v130;
                  v67 = v45;
LABEL_37:
                  v68 = 6;
LABEL_38:
                  CFDataAppendBytes(v67, v66, v68);
                  Mutable = v45;
                  ++v51;
                  break;
              }
            }
            v59 = a3[v56];
            v60 = v65;
            v61 = v64;
          }
          while (v59 > (__int16)v64);
        }
        v57 = v119 + v59 + 1;
        ++v56;
      }
      while (v56 != a4);
      LOWORD(v41) = v110;
      v50 = v104;
      v53 = a7[v104];
      v52 = 2;
      v55 = v108;
LABEL_61:
      v54 = v55;
    }
    while (v53 > (__int16)v55);
LABEL_62:
    v106 += v53 + 1;
    ++v50;
  }
  while (v50 != v103);
LABEL_118:
  v93 = (const void *)C3DMeshElementCreate();
  C3DMeshElementSetDoubleSided((uint64_t)v93, 0);
  Copy = CFDataCreateCopy(allocator, v45);
  C3DMeshElementInit((uint64_t)v93, a2, v51, Copy, v52);
  CFRelease(Copy);
  CFRelease(v45);
  cf = v93;
  v130[2] = 0;
  *(_WORD *)v130 = 0;
  v95 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v96 = CFArrayCreate(allocator, (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v97 = CFArrayCreate(allocator, &cf, 1, v95);
  v98 = C3DMeshCreateWithMeshSourcesAndMeshElements(v96, v97, (uint64_t)v130);
  CFRelease(v96);
  CFRelease(v97);
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  for (i = 0; i != 3; ++i)
  {
    v100 = values[i];
    if (v100)
    {
      CFRelease(v100);
      values[i] = 0;
    }
  }
  return v98;
}

uint64_t __CreateSourceFromProfileGenerator(void (*a1)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float), uint64_t a2, int *a3, int a4, int *a5, int a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  __CFData *Mutable;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  float v38;
  int v39;
  int v40;
  CFDataRef Copy;
  uint64_t v43;
  const __CFAllocator *allocator;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  UInt8 bytes[12];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v23 = a4;
  v24 = a4;
  if (a4 >= 1)
  {
    v25 = a4;
    v26 = a3;
    v24 = a4;
    do
    {
      v27 = *v26++;
      v24 += v27;
      --v25;
    }
    while (v25);
  }
  v48 = a6;
  v28 = a6;
  if (a6 >= 1)
  {
    v29 = a6;
    v30 = a5;
    v28 = a6;
    do
    {
      v31 = *v30++;
      v28 += v31;
      --v29;
    }
    while (v29);
  }
  if ((_DWORD)a2 == 3)
    v32 = 2;
  else
    v32 = 3;
  v46 = v28 * v24;
  v47 = v32;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4 * v28 * v24 * (int)v32);
  if (a6 >= 1)
  {
    v34 = 0;
    do
    {
      v35 = a5[v34];
      if ((v35 & 0x80000000) == 0)
      {
        v36 = 0;
        do
        {
          if (a4 >= 1)
          {
            v37 = 0;
            v50 = v36;
            v38 = (float)v36 * a12;
            do
            {
              v39 = a3[v37];
              if ((v39 & 0x80000000) == 0)
              {
                v40 = -1;
                do
                {
                  a1(bytes, a2, v37, v34, a7, a8, a9, a10, a11, (float)((float)++v40 / (float)v39) + 0.0, (float)(v38 / (float)a5[v34]) + 0.0);
                  CFDataAppendBytes(Mutable, bytes, (4 * v47));
                  v39 = a3[v37];
                }
                while (v40 < v39);
              }
              ++v37;
            }
            while (v37 != v23);
            v35 = a5[v34];
            v36 = v50;
          }
        }
        while (v36++ < v35);
      }
      ++v34;
    }
    while (v34 != v48);
  }
  Copy = CFDataCreateCopy(allocator, Mutable);
  v43 = C3DMeshSourceCreate(Copy, a2, v46, v47, 1);
  CFRelease(Mutable);
  CFRelease(Copy);
  return v43;
}

uint64_t C3DMeshCreateRing(unsigned int a1, int a2, float a3, float a4, float a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v22;
  int v23;

  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v22 = a2;
  v23 = 1;
  v20 = a6;
  return C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateRingProfile, a1, &v23, 1, 0, a4 == 0.0, &v22, 1, a3, a4, a5, 0.0, 0.0, v20);
}

uint64_t C3DMeshCreateSphere(unsigned int a1, uint64_t a2, int a3, double a4, double a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  float v20;
  float v21;
  float v23;
  float v24;
  float v25;
  double v26;
  const void *Ring;
  void *v28;
  __int128 v29;
  float v30;
  const __CFArray *v31;
  uint64_t i;
  const void *v33;
  __int128 v34;
  float32x4_t v35[4];
  int v36;
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if (a4 <= 0.0)
    return 0;
  if (a3 == 1)
    return C3DMeshCreateGeosphere(a1, a2, a4);
  v36 = a2;
  if (a5 == 1.0)
  {
    v21 = 0.5;
    if (a3 != 2)
      v21 = 0.0;
    v20 = a4;
    return C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateSphereProfile, a1, &v36, 1, a3 != 2, 1, &v36, 1, v20, v21, 1.0, 0.0, 0.0, 1.0);
  }
  v23 = a4;
  v24 = 0.0;
  if (a3 == 2)
  {
    v24 = 0.5;
    v26 = 0.25;
  }
  else
  {
    v26 = 0.5;
  }
  v25 = a5;
  values[0] = (void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateSphereProfile, a1, &v36, 1, a3 != 2, 1, &v36, 1, v23, v24, 1.0, 0.0, 0.0, v25);
  Ring = (const void *)C3DMeshCreateRing(a1, a2, v23, 0.0, 0.0, v26);
  memset(v35, 0, sizeof(v35));
  v34 = xmmword_1DD02AC40;
  C3DMatrix4x4MakeEulerRotation(v35, &v34);
  v28 = (void *)C3DMeshCopyWithTransform((uint64_t)Ring, v35);
  values[1] = v28;
  if (Ring)
    CFRelease(Ring);
  v30 = (1.0 - a5) * 6.28318531;
  LODWORD(v29) = 0;
  *((float *)&v29 + 1) = v30;
  DWORD2(v29) = 1078530011;
  v34 = v29;
  C3DMatrix4x4MakeEulerRotation(v35, &v34);
  values[2] = (void *)C3DMeshCopyWithTransform((uint64_t)v28, v35);
  v31 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v19 = C3DMeshCreateByMergingMeshes(v31);
  CFRelease(v31);
  for (i = 0; i != 3; ++i)
  {
    v33 = values[i];
    if (v33)
    {
      CFRelease(v33);
      values[i] = 0;
    }
  }
  return v19;
}

uint64_t C3DMeshCreateCylinder(unsigned int a1, int a2, uint64_t a3, double a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  float v21;
  float v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  unsigned int v28;
  float v29;
  float v30;
  const void *Ring;
  unint64_t v32;
  float v33;
  uint64_t v34;
  const void *Plane;
  unsigned int v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  const __CFArray *v40;
  uint64_t v41;
  const void *v42;
  __int128 v44;
  __n128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int v49;
  int v50;

  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (a4 <= 0.0)
    return 0;
  v49 = a2;
  v50 = a3;
  v20 = (const void **)malloc_type_calloc(5uLL, 8uLL, 0x2004093837F09uLL);
  if (a5 <= 0.0)
  {
    v23 = 0;
  }
  else
  {
    v21 = a5;
    v22 = a6;
    v23 = 1;
    v24 = a4;
    *v20 = (const void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateCylinderProfile, a1, &v50, 1, 0, 0, &v49, 1, v24, v21, 0.0, 0.0, 0.0, v22);
  }
  v26 = a5 * 0.5;
  v27 = a4;
  v28 = v23 + 1;
  v20[v23] = (const void *)C3DMeshCreateRing(a1, a2, v27, 0.0, v26, a6);
  if (a5 > 0.0)
  {
    v29 = a5 * -0.5;
    v30 = a4;
    Ring = (const void *)C3DMeshCreateRing(a1, a2, v30, 0.0, v29, a6);
    LODWORD(v32) = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v33 = a6 * 6.28318531;
    *((float *)&v32 + 1) = v33;
    v44 = v32;
    C3DMatrix4x4MakeEulerRotation((float32x4_t *)&v45, &v44);
    v34 = v23 | 2;
    v20[v28] = (const void *)C3DMeshCopyWithTransform((uint64_t)Ring, (float32x4_t *)&v45);
    if (Ring)
      CFRelease(Ring);
    if (a6 >= 1.0)
    {
      v28 = v23 | 2;
    }
    else
    {
      Plane = (const void *)C3DMeshCreatePlane(a1, 1, a3, 0, a4, a5, 0.0);
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = xmmword_1DD02AC50;
      C3DMatrix4x4MakeEulerRotation((float32x4_t *)&v45, &v44);
      *(float *)&v36 = a4 * -0.5;
      v37.n128_u64[0] = 0;
      v37.n128_u64[1] = v36;
      C3DMatrix4x4SetTranslation(&v45, v37);
      v38 = C3DMeshCopyWithTransform((uint64_t)Plane, (float32x4_t *)&v45);
      v20[v34] = (const void *)v38;
      if (Plane)
      {
        CFRelease(Plane);
        v38 = (uint64_t)v20[v34];
      }
      v28 = v23 | 4;
      v20[v23 + 3] = (const void *)CreateRadialSpanSide(v38, a6, v39);
    }
  }
  v40 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20, v28, MEMORY[0x1E0C9B378]);
  v25 = C3DMeshCreateByMergingMeshes(v40);
  CFRelease(v40);
  v41 = 0;
  do
  {
    v42 = v20[v41];
    if (v42)
    {
      CFRelease(v42);
      v20[v41] = 0;
    }
    ++v41;
  }
  while (v28 != v41);
  free(v20);
  return v25;
}

uint64_t C3DMeshCreateCone(unsigned int a1, int a2, int a3, double a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  float v23;
  float v24;
  uint64_t Ring;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  CFIndex v32;
  uint64_t v33;
  const __CFArray *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  int v39;
  int v40;
  void *values;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = 0;
  if (a4 >= 0.0 && a5 >= 0.0)
  {
    v20 = 0;
    v21 = a5 == 0.0 && a4 == 0.0;
    if (!v21 && a6 > 0.0)
    {
      v39 = a2;
      v40 = a3;
      v22 = a4 <= 0.0;
      v23 = a4;
      if (v22)
      {
        Ring = 0;
      }
      else
      {
        v24 = a6 * 0.5;
        Ring = C3DMeshCreateRing(a1, a2, v23, 0.0, v24, 1.0);
      }
      if (a5 <= 0.0)
      {
        v28 = 0;
      }
      else
      {
        v26 = a6 * -0.5;
        v27 = a5;
        v28 = C3DMeshCreateRing(a1, a2, v27, 0.0, v26, 1.0);
      }
      v42 = 0;
      v43 = 0;
      v29 = a6;
      v30 = a5;
      values = (void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateConeProfile, a1, &v40, 1, v28 == 0, Ring == 0, &v39, 1, v23, v30, v29, 0.0, 0.0, 1.0);
      if (Ring && v28)
      {
        v42 = Ring;
        v31 = 3;
        v32 = 2;
      }
      else
      {
        v32 = 1;
        v33 = Ring | v28;
        if (Ring)
          v28 = Ring;
        if (!v33)
          goto LABEL_25;
        v31 = 2;
      }
      *(&values + v32) = (void *)v28;
      v32 = v31;
LABEL_25:
      v34 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, v32, MEMORY[0x1E0C9B378]);
      v20 = C3DMeshCreateByMergingMeshes(v34);
      CFRelease(v34);
      v35 = 0;
      v36 = 8 * v32;
      do
      {
        v37 = *(void **)((char *)&values + v35);
        if (v37)
        {
          CFRelease(v37);
          *(void **)((char *)&values + v35) = 0;
        }
        v35 += 8;
      }
      while (v36 != v35);
    }
  }
  return v20;
}

uint64_t C3DMeshCreateTube(unsigned int a1, int a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  CFIndex v31;
  float v32;
  const void *Ring;
  unint64_t v34;
  float v35;
  uint64_t Plane;
  unsigned int v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  const __CFArray *v41;
  uint64_t v42;
  const void *v43;
  __int128 v45;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = 0;
  if (a4 <= a5 && a4 >= 0.0 && a5 > 0.0)
  {
    v23 = (const void **)malloc_type_calloc(6uLL, 8uLL, 0x2004093837F09uLL);
    if (a6 <= 0.0)
    {
      v29 = 0;
      v24 = a5;
      v27 = a4;
    }
    else
    {
      v46.n128_u32[0] = a2;
      LODWORD(v45) = a3;
      v24 = a5;
      v25 = a6;
      v26 = a7;
      *v23 = (const void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateCylinderProfile, a1, (int *)&v45, 1, 0, 0, (int *)&v46, 1, v24, v25, 0.0, 0.0, 0.0, v26);
      v27 = a4;
      v28 = a7;
      v23[1] = (const void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateCylinderProfile, a1, (int *)&v45, 1, 0, 0, (int *)&v46, 1, -v27, -v25, 0.0, 0.0, 0.0, v28);
      v29 = 2;
    }
    v30 = a6 * 0.5;
    v31 = v29 | 1;
    v23[v29] = (const void *)C3DMeshCreateRing(a1, a2, v24, v27, v30, a7);
    if (a6 > 0.0)
    {
      v32 = a6 * -0.5;
      Ring = (const void *)C3DMeshCreateRing(a1, a2, v24, v27, v32, a7);
      LODWORD(v34) = 0;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v35 = a7 * 6.28318531;
      *((float *)&v34 + 1) = v35;
      v45 = v34;
      C3DMatrix4x4MakeEulerRotation((float32x4_t *)&v46, &v45);
      v23[v31] = (const void *)C3DMeshCopyWithTransform((uint64_t)Ring, (float32x4_t *)&v46);
      if (Ring)
        CFRelease(Ring);
      if (a7 >= 1.0)
      {
        v31 = v29 + 2;
      }
      else
      {
        Plane = C3DMeshCreatePlane(a1, 1, a3, 0, a5 - a4, a6, 0.0);
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v45 = xmmword_1DD02AC50;
        C3DMatrix4x4MakeEulerRotation((float32x4_t *)&v46, &v45);
        *(float *)&v37 = (a4 + a5) * -0.5;
        v38.n128_u64[0] = 0;
        v38.n128_u64[1] = v37;
        C3DMatrix4x4SetTranslation(&v46, v38);
        v39 = C3DMeshCopyWithTransform(Plane, (float32x4_t *)&v46);
        v23[v29 + 2] = (const void *)v39;
        v31 = v29 | 4;
        v23[v29 + 3] = (const void *)CreateRadialSpanSide(v39, a7, v40);
      }
    }
    v41 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v23, v31, MEMORY[0x1E0C9B378]);
    v22 = C3DMeshCreateByMergingMeshes(v41);
    CFRelease(v41);
    v42 = 0;
    do
    {
      v43 = v23[v42];
      if (v43)
      {
        CFRelease(v43);
        v23[v42] = 0;
      }
      ++v42;
    }
    while (v31 != v42);
    free(v23);
  }
  return v22;
}

uint64_t C3DMeshCreateCapsule(unsigned int a1, int a2, int a3, int a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  double v21;
  float v22;
  float v23;
  int v24;
  int v25[3];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  result = 0;
  if (a5 > 0.0 && a6 > 0.0)
  {
    v21 = a6 * 0.5;
    if (a6 * 0.5 > a5)
      v21 = a5;
    v25[0] = a4;
    v25[1] = a3;
    v25[2] = a4;
    v24 = a2;
    v22 = v21;
    v23 = a6;
    return C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateCapsuleProfile, a1, v25, 3, 1, 1, &v24, 1, v22, v23, 0.0, 0.0, 0.0, 1.0);
  }
  return result;
}

uint64_t C3DMeshCreateTorus(unsigned int a1, int a2, int a3, double a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t Ring;
  __n128 v27;
  __n128 v28;
  const __CFArray *v29;
  uint64_t i;
  const void *v31;
  __int128 v33;
  float32x4_t v34[4];
  int v35;
  int v36;
  void *values;
  uint64_t v38;
  uint64_t RadialSpanSide;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = 0;
  if (a4 > 0.0 && a5 > 0.0)
  {
    v35 = a2;
    v36 = a3;
    if (a6 == 1.0)
    {
      v21 = a4;
      v22 = a5;
      return C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateTorusProfile, a1, &v36, 1, 0, 0, &v35, 1, v21, v22, 0.0, 0.0, 0.0, 1.0);
    }
    else
    {
      v23 = a4;
      v24 = a5;
      v25 = a6;
      values = (void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateTorusProfile, a1, &v36, 1, 0, 0, &v35, 1, v23, v24, 0.0, 0.0, 0.0, v25);
      Ring = C3DMeshCreateRing(a1, a3, v24, 0.0, 0.0, 1.0);
      memset(v34, 0, sizeof(v34));
      v33 = xmmword_1DD02AC60;
      C3DMatrix4x4MakeEulerRotation(v34, &v33);
      v27.n128_u64[0] = 0;
      v27.n128_u32[3] = 0;
      v27.n128_f32[2] = -v23;
      C3DMatrix4x4SetTranslation((__n128 *)v34, v27);
      v38 = C3DMeshCopyWithTransform(Ring, v34);
      RadialSpanSide = CreateRadialSpanSide(v38, a6, v28);
      v29 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 3, MEMORY[0x1E0C9B378]);
      v20 = C3DMeshCreateByMergingMeshes(v29);
      CFRelease(v29);
      for (i = 0; i != 24; i += 8)
      {
        v31 = *(void **)((char *)&values + i);
        if (v31)
        {
          CFRelease(v31);
          *(void **)((char *)&values + i) = 0;
        }
      }
    }
  }
  return v20;
}

uint64_t C3DMeshCreateChamferBox(unsigned int a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, double a7, double a8, double a9, double a10)
{
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  const __CFArray *v39;
  const CFArrayCallBacks *v40;
  __CFArray *Mutable;
  __CFArray *v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  int v48;
  const void *ValueAtIndex;
  char v50;
  CFIndex v51;
  const void *v52;
  CFTypeRef v53;
  const void *v54;
  const void *v55;
  const void *EmptyElement;
  uint64_t i;
  const void *v59;
  uint64_t v61;
  int v62;
  const __CFArray *theArray;
  void *values[2];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  int v69[3];
  int v70[3];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v19, v20, v21, v22, v23, v24, v25, v26);
  }
  v27 = 0;
  if (a7 >= 0.0 && a8 >= 0.0 && a9 >= 0.0 && a10 >= 0.0)
  {
    v28 = 0;
    v29 = a7 * 0.5;
    if (a7 * 0.5 >= a8 * 0.5)
      v29 = a8 * 0.5;
    v30 = a9 * 0.5;
    if (v29 < a9 * 0.5)
      v30 = v29;
    if (v30 > a10)
      v30 = a10;
    if (a5 >= 0)
      v31 = a5;
    else
      v31 = a5 + 1;
    v32 = v31 >> 1;
    if ((unint64_t)(a5 + 1) < 3)
      LODWORD(v32) = 1;
    v70[1] = v32;
    v70[2] = v32;
    v69[1] = v32;
    v69[2] = v32;
    if (v30 == 0.0)
      v33 = 1;
    else
      v33 = 3;
    *(_OWORD *)values = 0u;
    v66 = 0u;
    v70[0] = a3;
    v34 = a7;
    v35 = a8;
    v36 = a9;
    v37 = v30;
    do
    {
      if ((v28 & 0x7FFFFFFD) != 0)
        v38 = a4;
      else
        v38 = a2;
      v69[0] = v38;
      values[v28] = (void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateChamferQuadProfile, a1, v70, v33, 0, 0, v69, v33, v34, v35, v36, v37, (float)(int)v28, 1.0);
      ++v28;
    }
    while (v28 != 4);
    v70[0] = a4;
    v69[0] = a2;
    v67 = C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateChamferQuadProfile, a1, v70, v33, 0, 0, v69, v33, v34, v35, v36, v37, 4.0, 1.0);
    v68 = C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generateChamferQuadProfile, a1, v70, v33, 0, 0, v69, v33, v34, v35, v36, v37, 5.0, 1.0);
    v39 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 6, MEMORY[0x1E0C9B378]);
    v27 = C3DMeshCreateByMergingMeshes(v39);
    CFRelease(v39);
    if (a6)
    {
      v61 = v27;
      theArray = (const __CFArray *)C3DMeshGetMeshElements(v27, 0);
      v40 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      Mutable = CFArrayCreateMutable(0, 6, MEMORY[0x1E0C9B378]);
      v42 = CFArrayCreateMutable(0, 6, v40);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 4;
      v47 = 1;
      do
      {
        v48 = 1 << ((a6 >> (4 * v44)) & 0xF);
        if ((v48 & v45) != 0)
        {
          ++v43;
        }
        else
        {
          v62 = v45;
          CFArrayRemoveAllValues(Mutable);
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v44);
          CFArrayAppendValue(Mutable, ValueAtIndex);
          if (v44 <= 4)
          {
            v50 = v46;
            v51 = v47;
            do
            {
              if (((a6 >> (4 * v44)) & 0xF) == ((a6 >> v50) & 0xF))
              {
                v52 = CFArrayGetValueAtIndex(theArray, v51);
                CFArrayAppendValue(Mutable, v52);
              }
              ++v51;
              v50 += 4;
            }
            while (v51 != 6);
          }
          if (CFArrayGetCount(Mutable) < 2)
          {
            v54 = CFArrayGetValueAtIndex(Mutable, 0);
            v53 = CFRetain(v54);
          }
          else
          {
            v53 = (CFTypeRef)C3DMeshElementCreateByMergingElements(Mutable);
          }
          v55 = v53;
          if (v43 >= 1)
          {
            do
            {
              EmptyElement = (const void *)C3DMeshElementGetEmptyElement();
              CFArrayAppendValue(v42, EmptyElement);
              --v43;
            }
            while (v43);
          }
          if (!v55)
          {
            CFRelease(v42);
            CFRelease(Mutable);
            v27 = v61;
            goto LABEL_48;
          }
          v45 = v62 | v48;
          CFArrayAppendValue(v42, v55);
          CFRelease(v55);
          v43 = 0;
        }
        ++v47;
        v46 += 4;
      }
      while (v44++ < 5);
      CFRelease(Mutable);
      v27 = v61;
      if (v42)
      {
        C3DMeshSetMeshElements(v61, v42);
        CFRelease(v42);
      }
    }
LABEL_48:
    for (i = 0; i != 6; ++i)
    {
      v59 = values[i];
      if (v59)
      {
        CFRelease(v59);
        values[i] = 0;
      }
    }
  }
  return v27;
}

uint64_t C3DMeshCreatePyramid(unsigned int a1, uint64_t a2, __int32 a3, uint64_t a4, double a5, double a6, double a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  int v26;
  const void *Plane;
  const __CFArray *v28;
  uint64_t v29;
  uint64_t i;
  const void *v31;
  __int128 v33;
  float32x4_t v34[4];
  void *values[2];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!C3DMeshElementTypeDefinesTopology(a1))
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DMeshCreateFromProfile_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = 0;
  *(_OWORD *)values = 0u;
  v36 = 0u;
  v24 = a6;
  do
  {
    v34[0].i32[0] = a3;
    if ((v22 & 1) != 0)
      v26 = a4;
    else
      v26 = a2;
    LODWORD(v33) = v26;
    v23 = a5;
    v25 = a7;
    values[v22] = (void *)C3DMeshCreateFromProfile((void (*)(UInt8 *, uint64_t, uint64_t, uint64_t, float, float, float, float, float, float, float))generatePyramidProfile, a1, (int *)v34, 1, 0, 1, (int *)&v33, 1, v23, v24, v25, (float)(int)v22, 0.0, 1.0);
    ++v22;
  }
  while (v22 != 4);
  Plane = (const void *)C3DMeshCreatePlane(a1, a2, a4, 0, a5, a7, 0.0);
  memset(v34, 0, sizeof(v34));
  v33 = xmmword_1DD02AC20;
  C3DMatrix4x4MakeEulerRotation(v34, &v33);
  v37 = C3DMeshCopyWithTransform((uint64_t)Plane, v34);
  if (Plane)
    CFRelease(Plane);
  v28 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 5, MEMORY[0x1E0C9B378]);
  v29 = C3DMeshCreateByMergingMeshes(v28);
  CFRelease(v28);
  for (i = 0; i != 5; ++i)
  {
    v31 = values[i];
    if (v31)
    {
      CFRelease(v31);
      values[i] = 0;
    }
  }
  return v29;
}

void sub_1DCE90F58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCE91220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void *_commonAncessor_0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = 0;
  v5 = *(_QWORD *)v11;
  do
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_QWORD *)v11 != v5)
        objc_enumerationMutation(a1);
      v7 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
      if (v4)
      {
        while (!v7)
        {
LABEL_11:
          v4 = (void *)objc_msgSend(v4, "parentNode");
          if (!v4)
            return v4;
        }
        v8 = v7;
        while (v8 != v4)
        {
          v8 = (void *)objc_msgSend(v8, "parentNode");
          if (!v8)
            goto LABEL_11;
        }
      }
      else
      {
        v4 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * i);
      }
    }
    v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  }
  while (v3);
  return v4;
}

void C3DSubdivInitializeIfNeeded(void)
{
  if (C3DSubdivInitializeIfNeeded(void)::onceToken != -1)
    dispatch_once(&C3DSubdivInitializeIfNeeded(void)::onceToken, &__block_literal_global_85);
}

void _C3DSubdivErrorCallbackFunc()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    _C3DSubdivErrorCallbackFunc();
}

{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_0_4(&dword_1DCCB8000, v0, v1, "Error (OpenSubdiv): %s", v2);
  OUTLINED_FUNCTION_1();
}

void _C3DSubdivWarningCallbackFunc(const char *a1)
{
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = scn_default_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = a1;
    _os_log_impl(&dword_1DCCB8000, v2, OS_LOG_TYPE_DEFAULT, "Warning (OpenSubdiv): %s", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t C3DSubdivSourceSemanticCanBePrimvar(int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;

  if (a1 == 4)
    v3 = a3;
  else
    v3 = 0;
  if (a2)
    v3 = 0;
  if ((a1 & 0xFE) == 2)
    v3 = 1;
  if (a1)
    return v3;
  else
    return a2 == 0;
}

uint64_t C3DGeometryOsdGetPrimvarDataTypeHash(__C3DGeometry *a1)
{
  uint64_t result;
  _QWORD *var7;
  uint64_t Mesh;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  const void *SourceWithSemanticAtIndex;
  int v10;
  const void *v11;
  int v12;
  const void *v13;
  int v14;
  const void *v15;
  int v16;
  const void *v17;
  char v18;
  const void *v19;
  char v20;
  const void *v21;
  int v22;
  const void *v23;
  int v24;
  const void *v25;
  int v26;
  _QWORD v27[2];
  uint64_t (*v28)(uint64_t, uint64_t);
  void *v29;
  _QWORD *v30;

  result = C3DGeometryInitSubdivTopologyInfoIfNeeded(a1);
  if ((_DWORD)result)
  {
    var7 = a1->var10.var7;
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v28 = __C3DGeometryOsdGetPrimvarDataTypeHash_block_invoke;
    v29 = &__block_descriptor_tmp_2_2;
    v30 = var7;
    Mesh = C3DGeometryGetMesh((uint64_t)a1);
    v5 = Mesh;
    v6 = var7[10];
    v7 = var7[11];
    if (v6 != v7)
    {
      v8 = -1;
      do
      {
        if (*(_DWORD *)(v6 + 12) == 3)
        {
          if (v8 == -1)
          {
            v8 = *(_BYTE *)(v6 + 8);
          }
          else if (*(unsigned __int8 *)(v6 + 8) != v8)
          {
            v26 = 1;
            goto LABEL_11;
          }
        }
        v6 += 16;
      }
      while (v6 != v7);
    }
    v26 = 0;
LABEL_11:
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(Mesh, 2, 0, 0);
    v10 = v26 & 0xFFFFFFF9 | (2
                            * (__C3DGeometryOsdGetPrimvarDataTypeHash_block_invoke((uint64_t)v27, (uint64_t)SourceWithSemanticAtIndex) & 3));
    v11 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 0, 0);
    v12 = v10 & 0xFFFFFFE7 | (8 * (v28((uint64_t)v27, (uint64_t)v11) & 3));
    v13 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 1, 0);
    v14 = v12 & 0xFFFFFF9F | (32 * (v28((uint64_t)v27, (uint64_t)v13) & 3));
    v15 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 2, 0);
    v16 = v14 & 0xFFFFFE7F | ((v28((uint64_t)v27, (uint64_t)v15) & 3) << 7);
    v17 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 3, 0);
    v18 = v28((uint64_t)v27, (uint64_t)v17);
    v19 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 4, 0);
    v20 = v28((uint64_t)v27, (uint64_t)v19);
    v21 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 5, 0);
    v22 = (v28((uint64_t)v27, (uint64_t)v21) & 3) << 13;
    v23 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 6, 0);
    v24 = (v28((uint64_t)v27, (uint64_t)v23) & 3) << 15;
    v25 = C3DMeshGetSourceWithSemanticAtIndex(v5, 3, 7, 0);
    return v16 & 0xFFFFE1FF | ((v18 & 3) << 9) & 0xE7FF | ((v20 & 3) << 11) | v22 | v24 | ((v28((uint64_t)v27, (uint64_t)v25) & 3) << 17);
  }
  return result;
}

BOOL C3DGeometryInitSubdivTopologyInfoIfNeeded(__C3DGeometry *a1)
{
  uint64_t Mesh;
  _BYTE *v3;
  const void *SourceWithSemanticAtIndex;
  uint64_t Content;
  uint64_t v6;
  uint64_t v7;
  std::vector<int>::size_type v8;
  float32x4_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float32x4_t v13;
  _OWORD *v14;
  char v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  _QWORD *v39;
  NSObject *v40;
  _BOOL8 result;
  void **v42;
  void **v43;
  int v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  NSObject *v67;
  void **v68;
  void **v69;
  int v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  char *v83;
  _DWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  const __CFArray *ElementsCount;
  CFIndex v94;
  int v95;
  const void *ElementAtIndex;
  char Type;
  void *v98;
  CFIndex i;
  const void *v100;
  char v101;
  __int32 v102;
  uint64_t v103;
  void *v104;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v106;
  CFIndex j;
  const void *v108;
  char v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD v114[10];
  _QWORD v115[8];
  _QWORD v116[5];
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  float32x4_t v120;
  int v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (a1->var10.var7)
    return 1;
  Mesh = C3DGeometryGetMesh((uint64_t)a1);
  if (C3DMeshGetSourcesCountForSemantic(Mesh, 0) == 1)
  {
    v3 = malloc_type_calloc(1uLL, 0xD8uLL, 0x10F004000FC2A7CuLL);
    a1->var10.var7 = v3;
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(Mesh, 0, 0, 0);
    Content = C3DMeshSourceGetContent((uint64_t)SourceWithSemanticAtIndex);
    v7 = v6;
    v8 = v6;
    v113 = v6;
    if (C3DMeshUsesSameChannelForAllSources(Mesh, 0))
    {
      if (a1->var10.var2.var0)
      {
        if (C3DGeometryGetEffectiveDataKindForRendering(a1))
        {
          *v3 = 2;
          v118 = 0;
          v119 = 0;
          v117 = (uint64_t *)&v118;
          if ((_DWORD)v7)
          {
            v111 = Mesh;
            v12 = 0;
            do
            {
              *(double *)v13.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v7), (float *)(Content + BYTE5(v7) * v12), v9, v10, v11);
              v120 = v13;
              v121 = v119;
              v14 = _ZNSt3__16__treeINS_12__value_typeIDv3_fjEENS_19__map_value_compareIS2_S3_30__C3DSubdivWelderKeyComparatorLb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_jEEEEENSB_INS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(&v117, &v120, (uint64_t)&v120);
              v120.i8[0] = v15 ^ 1;
              v16 = *((_DWORD *)v14 + 12);
              v18 = (char *)*((_QWORD *)v3 + 2);
              v17 = *((_QWORD *)v3 + 3);
              if ((unint64_t)v18 >= v17)
              {
                v20 = (char *)*((_QWORD *)v3 + 1);
                v21 = (v18 - v20) >> 2;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62)
                  goto LABEL_155;
                v23 = v17 - (_QWORD)v20;
                if (v23 >> 1 > v22)
                  v22 = v23 >> 1;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                  v24 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v24 = v22;
                if (v24)
                {
                  v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 24), v24);
                  v20 = (char *)*((_QWORD *)v3 + 1);
                  v18 = (char *)*((_QWORD *)v3 + 2);
                }
                else
                {
                  v25 = 0;
                }
                v26 = &v25[4 * v21];
                *(_DWORD *)v26 = v16;
                v19 = v26 + 4;
                while (v18 != v20)
                {
                  v27 = *((_DWORD *)v18 - 1);
                  v18 -= 4;
                  *((_DWORD *)v26 - 1) = v27;
                  v26 -= 4;
                }
                *((_QWORD *)v3 + 1) = v26;
                *((_QWORD *)v3 + 2) = v19;
                *((_QWORD *)v3 + 3) = &v25[4 * v24];
                if (v20)
                  operator delete(v20);
              }
              else
              {
                *(_DWORD *)v18 = v16;
                v19 = v18 + 4;
              }
              *((_QWORD *)v3 + 2) = v19;
              std::vector<BOOL>::push_back((uint64_t)(v3 + 56), &v120);
              if (v120.i8[0])
              {
                *v3 = 3;
              }
              else
              {
                v29 = (char *)*((_QWORD *)v3 + 5);
                v28 = *((_QWORD *)v3 + 6);
                if ((unint64_t)v29 >= v28)
                {
                  v31 = (char *)*((_QWORD *)v3 + 4);
                  v32 = (v29 - v31) >> 2;
                  v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 62)
                    goto LABEL_155;
                  v34 = v28 - (_QWORD)v31;
                  if (v34 >> 1 > v33)
                    v33 = v34 >> 1;
                  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                    v35 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v35 = v33;
                  if (v35)
                  {
                    v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 48), v35);
                    v31 = (char *)*((_QWORD *)v3 + 4);
                    v29 = (char *)*((_QWORD *)v3 + 5);
                  }
                  else
                  {
                    v36 = 0;
                  }
                  v37 = &v36[4 * v32];
                  *(_DWORD *)v37 = v12;
                  v30 = v37 + 4;
                  while (v29 != v31)
                  {
                    v38 = *((_DWORD *)v29 - 1);
                    v29 -= 4;
                    *((_DWORD *)v37 - 1) = v38;
                    v37 -= 4;
                  }
                  *((_QWORD *)v3 + 4) = v37;
                  *((_QWORD *)v3 + 5) = v30;
                  *((_QWORD *)v3 + 6) = &v36[4 * v35];
                  if (v31)
                    operator delete(v31);
                }
                else
                {
                  *(_DWORD *)v29 = v12;
                  v30 = v29 + 4;
                }
                *((_QWORD *)v3 + 5) = v30;
              }
              ++v12;
            }
            while (v12 != v113);
            v39 = v118;
            Mesh = v111;
          }
          else
          {
            v39 = 0;
          }
          v8 = (uint64_t)(*((_QWORD *)v3 + 5) - *((_QWORD *)v3 + 4)) >> 2;
          std::__tree<char>::destroy((uint64_t)&v117, v39);
          goto LABEL_124;
        }
        if ((C3DGeometryInitSubdivTopologyInfoIfNeeded(__C3DGeometry *)::done & 1) == 0)
        {
          C3DGeometryInitSubdivTopologyInfoIfNeeded(__C3DGeometry *)::done = 1;
          v67 = scn_default_log();
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            C3DGeometryInitSubdivTopologyInfoIfNeeded();
        }
      }
      *v3 = 1;
      v68 = (void **)(v3 + 32);
      v69 = (void **)(v3 + 8);
      std::vector<unsigned int>::reserve((std::vector<int> *)(v3 + 8), v8);
      std::vector<unsigned int>::reserve((std::vector<int> *)(v3 + 32), v8);
      if ((_DWORD)v7)
      {
        v112 = Mesh;
        v70 = 0;
        do
        {
          v72 = (char *)*((_QWORD *)v3 + 2);
          v71 = *((_QWORD *)v3 + 3);
          if ((unint64_t)v72 >= v71)
          {
            v74 = (char *)*v69;
            v75 = (v72 - (_BYTE *)*v69) >> 2;
            v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 62)
              goto LABEL_155;
            v77 = v71 - (_QWORD)v74;
            if (v77 >> 1 > v76)
              v76 = v77 >> 1;
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
              v78 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v78 = v76;
            if (v78)
            {
              v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 24), v78);
              v74 = (char *)*((_QWORD *)v3 + 1);
              v72 = (char *)*((_QWORD *)v3 + 2);
            }
            else
            {
              v79 = 0;
            }
            v80 = &v79[4 * v75];
            *(_DWORD *)v80 = v70;
            v73 = v80 + 4;
            while (v72 != v74)
            {
              v81 = *((_DWORD *)v72 - 1);
              v72 -= 4;
              *((_DWORD *)v80 - 1) = v81;
              v80 -= 4;
            }
            *((_QWORD *)v3 + 1) = v80;
            *((_QWORD *)v3 + 2) = v73;
            *((_QWORD *)v3 + 3) = &v79[4 * v78];
            if (v74)
              operator delete(v74);
          }
          else
          {
            *(_DWORD *)v72 = v70;
            v73 = v72 + 4;
          }
          *((_QWORD *)v3 + 2) = v73;
          v83 = (char *)*((_QWORD *)v3 + 5);
          v82 = *((_QWORD *)v3 + 6);
          if ((unint64_t)v83 >= v82)
          {
            v85 = (char *)*v68;
            v86 = (v83 - (_BYTE *)*v68) >> 2;
            v87 = v86 + 1;
            if ((unint64_t)(v86 + 1) >> 62)
              goto LABEL_155;
            v88 = v82 - (_QWORD)v85;
            if (v88 >> 1 > v87)
              v87 = v88 >> 1;
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
              v89 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v89 = v87;
            if (v89)
            {
              v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 48), v89);
              v85 = (char *)*((_QWORD *)v3 + 4);
              v83 = (char *)*((_QWORD *)v3 + 5);
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[4 * v86];
            *(_DWORD *)v91 = v70;
            v84 = v91 + 4;
            while (v83 != v85)
            {
              v92 = *((_DWORD *)v83 - 1);
              v83 -= 4;
              *((_DWORD *)v91 - 1) = v92;
              v91 -= 4;
            }
            *((_QWORD *)v3 + 4) = v91;
            *((_QWORD *)v3 + 5) = v84;
            *((_QWORD *)v3 + 6) = &v90[4 * v89];
            if (v85)
              operator delete(v85);
          }
          else
          {
            *(_DWORD *)v83 = v70;
            v84 = v83 + 4;
          }
          *((_QWORD *)v3 + 5) = v84;
          ++v70;
        }
        while (v70 != (_DWORD)v7);
LABEL_121:
        Mesh = v112;
        LODWORD(v8) = v113;
      }
    }
    else
    {
      *v3 = 0;
      v42 = (void **)(v3 + 32);
      v43 = (void **)(v3 + 8);
      std::vector<unsigned int>::reserve((std::vector<int> *)(v3 + 8), v8);
      std::vector<unsigned int>::reserve((std::vector<int> *)(v3 + 32), v8);
      if ((_DWORD)v7)
      {
        v112 = Mesh;
        v44 = 0;
        do
        {
          v46 = (char *)*((_QWORD *)v3 + 2);
          v45 = *((_QWORD *)v3 + 3);
          if ((unint64_t)v46 >= v45)
          {
            v48 = (char *)*v43;
            v49 = (v46 - (_BYTE *)*v43) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
              goto LABEL_155;
            v51 = v45 - (_QWORD)v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 24), v52);
              v48 = (char *)*((_QWORD *)v3 + 1);
              v46 = (char *)*((_QWORD *)v3 + 2);
            }
            else
            {
              v53 = 0;
            }
            v54 = &v53[4 * v49];
            *(_DWORD *)v54 = v44;
            v47 = v54 + 4;
            while (v46 != v48)
            {
              v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            *((_QWORD *)v3 + 1) = v54;
            *((_QWORD *)v3 + 2) = v47;
            *((_QWORD *)v3 + 3) = &v53[4 * v52];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_DWORD *)v46 = v44;
            v47 = v46 + 4;
          }
          *((_QWORD *)v3 + 2) = v47;
          v57 = (char *)*((_QWORD *)v3 + 5);
          v56 = *((_QWORD *)v3 + 6);
          if ((unint64_t)v57 >= v56)
          {
            v59 = (char *)*v42;
            v60 = (v57 - (_BYTE *)*v42) >> 2;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 62)
LABEL_155:
              abort();
            v62 = v56 - (_QWORD)v59;
            if (v62 >> 1 > v61)
              v61 = v62 >> 1;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
              v63 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v3 + 48), v63);
              v59 = (char *)*((_QWORD *)v3 + 4);
              v57 = (char *)*((_QWORD *)v3 + 5);
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[4 * v60];
            *(_DWORD *)v65 = v44;
            v58 = v65 + 4;
            while (v57 != v59)
            {
              v66 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *((_DWORD *)v65 - 1) = v66;
              v65 -= 4;
            }
            *((_QWORD *)v3 + 4) = v65;
            *((_QWORD *)v3 + 5) = v58;
            *((_QWORD *)v3 + 6) = &v64[4 * v63];
            if (v59)
              operator delete(v59);
          }
          else
          {
            *(_DWORD *)v57 = v44;
            v58 = v57 + 4;
          }
          *((_QWORD *)v3 + 5) = v58;
          ++v44;
        }
        while (v44 != (_DWORD)v7);
        goto LABEL_121;
      }
    }
LABEL_124:
    v116[0] = MEMORY[0x1E0C809B0];
    v116[1] = 0x40000000;
    v116[2] = ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke;
    v116[3] = &__block_descriptor_tmp_4_4;
    v116[4] = v3;
    C3DMeshApplySources(Mesh, 0, (uint64_t)v116);
    *((_DWORD *)v3 + 26) = v8;
    ElementsCount = C3DMeshGetElementsCount(Mesh);
    if ((uint64_t)ElementsCount < 1)
    {
      v95 = 0;
    }
    else
    {
      v94 = 0;
      v95 = 0;
      do
      {
        ElementAtIndex = C3DMeshGetElementAtIndex(Mesh, v94, 0);
        Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
        if (C3DMeshElementTypeDefinesSurface(Type))
          v95 += C3DMeshElementGetPrimitiveCountByEvaluatingPrimitiveRanges((uint64_t)ElementAtIndex);
        ++v94;
      }
      while (ElementsCount != (const __CFArray *)v94);
    }
    *((_DWORD *)v3 + 27) = v95;
    v98 = malloc_type_malloc(4 * v95, 0x100004052888210uLL);
    *((_DWORD *)v3 + 52) = 0;
    v3[212] = 1;
    v120.i32[0] = 0;
    if ((uint64_t)ElementsCount < 1)
    {
      v102 = 0;
    }
    else
    {
      for (i = 0; (const __CFArray *)i != ElementsCount; ++i)
      {
        v100 = C3DMeshGetElementAtIndex(Mesh, i, 0);
        v101 = C3DMeshElementGetType((uint64_t)v100);
        if (C3DMeshElementTypeDefinesSurface(v101))
        {
          v115[0] = MEMORY[0x1E0C809B0];
          v115[1] = 0x40000000;
          v115[2] = ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke_2;
          v115[3] = &__block_descriptor_tmp_6_6;
          v115[4] = v100;
          v115[5] = v98;
          v115[6] = &v120;
          v115[7] = v3;
          C3DMeshElementEnumeratePrimitiveIndicesByEvaluatingPrimitiveRanges((uint64_t)v100, (uint64_t)v115);
        }
      }
      v102 = v120.i32[0];
    }
    if (v102 != *((_DWORD *)v3 + 27))
      C3DGeometryInitSubdivTopologyInfoIfNeeded();
    *((_QWORD *)v3 + 14) = v98;
    if ((v7 - 1) >= 0x7FFFFFFF)
      v103 = 0x7FFFFFFFLL;
    else
      v103 = (v7 - 1);
    v104 = malloc_type_malloc(4 * *((unsigned int *)v3 + 52), 0x100004052888210uLL);
    ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(Mesh, 0, 0);
    LODWORD(v117) = 0;
    if ((uint64_t)ElementsCount < 1)
    {
      v110 = 0;
    }
    else
    {
      v106 = ChannelForSourceWithSemanticAtIndex;
      for (j = 0; (const __CFArray *)j != ElementsCount; ++j)
      {
        v108 = C3DMeshGetElementAtIndex(Mesh, j, 0);
        v109 = C3DMeshElementGetType((uint64_t)v108);
        if (C3DMeshElementTypeDefinesSurface(v109))
        {
          v114[0] = MEMORY[0x1E0C809B0];
          v114[1] = 0x40000000;
          v114[2] = ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke_3;
          v114[3] = &__block_descriptor_tmp_9_1;
          v114[4] = v108;
          v114[5] = v106;
          v114[6] = v103;
          v114[7] = v3;
          v114[8] = v104;
          v114[9] = &v117;
          C3DMeshElementEnumeratePrimitiveIndicesByEvaluatingPrimitiveRanges((uint64_t)v108, (uint64_t)v114);
        }
      }
      v110 = (int)v117;
    }
    if (v110 != *((_DWORD *)v3 + 52))
      C3DGeometryInitSubdivTopologyInfoIfNeeded();
    *((_QWORD *)v3 + 15) = v104;
    return 1;
  }
  v40 = scn_default_log();
  result = os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
  if (result)
  {
    C3DGeometryInitSubdivTopologyInfoIfNeeded();
    return 0;
  }
  return result;
}

uint64_t C3DGeometryOsdGetColorDataType(unsigned int a1)
{
  return (a1 >> 1) & 3;
}

uint64_t C3DGeometryOsdGetTextureCoordinatesDataType(unsigned int a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch((int)a2)
  {
    case 0:
      result = (a1 >> 3) & 3;
      break;
    case 1:
      result = (a1 >> 5) & 3;
      break;
    case 2:
      result = (a1 >> 7) & 3;
      break;
    case 3:
      result = (a1 >> 9) & 3;
      break;
    case 4:
      result = (a1 >> 11) & 3;
      break;
    case 5:
      result = (a1 >> 13) & 3;
      break;
    case 6:
      result = (a1 >> 15) & 3;
      break;
    case 7:
      result = (a1 >> 17) & 3;
      break;
    default:
      v4 = scn_default_log();
      result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        C3DGeometryOsdGetTextureCoordinatesDataType(a2, v4, v5, v6, v7, v8, v9, v10);
        result = 0;
      }
      break;
  }
  return result;
}

BOOL C3DGeometryOsdGetColorIsVarying(char a1)
{
  return (a1 & 6) == 4;
}

uint64_t C3DGeometryOsdGetVaryingTextureCoordinatesCount(unsigned int a1)
{
  int v1;
  int v2;
  int32x4_t v3;
  uint8x8_t v4;
  __int32 v5;

  v1 = (a1 & 0x18) == 16;
  if ((a1 & 0x18) == 0x10)
    v2 = 2;
  else
    v2 = 1;
  if ((a1 & 0x60) == 0x40)
    v1 = v2;
  v3 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_1DD02ACB0), (int32x4_t)xmmword_1DD02ACC0), (int8x16_t)xmmword_1DD007E80);
  v3.i32[0] = vaddvq_s32(v3) & 0xF;
  v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v3.i8);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.i32[0];
  if ((a1 & 0x18000) == 0x10000)
    v5 = v4.i32[0] + 1;
  if ((a1 & 0x60000) == 0x40000)
    ++v1;
  return (v5 + v1);
}

BOOL C3DGeometryOsdGetColorIsFaceVarying(int a1)
{
  return (~a1 & 6) == 0;
}

uint64_t C3DGeometryOsdGetFaceVaryingTextureCoordinatesCount(unsigned int a1)
{
  int v1;
  int v2;
  int32x4_t v3;
  uint8x8_t v4;
  __int32 v5;

  v1 = (~a1 & 0x18) == 0;
  if ((~a1 & 0x18) != 0)
    v2 = 1;
  else
    v2 = 2;
  if ((~a1 & 0x60) == 0)
    v1 = v2;
  v3 = (int32x4_t)vandq_s8((int8x16_t)vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(a1), (int8x16_t)xmmword_1DD02ACB0), (int32x4_t)xmmword_1DD02ACB0), (int8x16_t)xmmword_1DD007E80);
  v3.i32[0] = vaddvq_s32(v3) & 0xF;
  v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v3.i8);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.i32[0];
  if ((~a1 & 0x18000) == 0)
    v5 = v4.i32[0] + 1;
  if ((~a1 & 0x60000) == 0)
    ++v1;
  return (v5 + v1);
}

uint64_t C3DGeometryOsdGetHasMultipleFaceVaryingChannels(char a1)
{
  return a1 & 1;
}

void _Z68C3DSubdivCPUPrimvarDataCopyCrossNormalizedDataAtIndexToBufferAtIndexIDv2_fEvRNSt3__16vectorI16C3DSubdivCPUDataIT_ENS1_9allocatorIS5_EEEES9_iPfi()
{
  NSObject *v0;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    _Z68C3DSubdivCPUPrimvarDataCopyCrossNormalizedDataAtIndexToBufferAtIndexIDv2_fEvRNSt3__16vectorI16C3DSubdivCPUDataIT_ENS1_9allocatorIS5_EEEES9_iPfi_cold_1();
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      abort();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

void ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  _QWORD *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  if (a3)
  {
    if ((a3 & 0xFE) != 2)
      return;
    v7 = *(_QWORD **)(a1 + 32);
    v8 = *(unsigned __int8 *)v7;
    if (v8 >= 2)
    {
      if (v8 == 2)
      {
        v9 = 2;
        goto LABEL_11;
      }
      if (v8 != 3)
      {
        v9 = 0;
        goto LABEL_11;
      }
    }
    v9 = 3;
  }
  else
  {
    if (a4)
      return;
    v7 = *(_QWORD **)(a1 + 32);
    v9 = 1;
  }
LABEL_11:
  v10 = v7[12];
  v11 = v7[11];
  if (v11 >= v10)
  {
    v13 = v7[10];
    v14 = (uint64_t)(v11 - v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      abort();
    v16 = v10 - v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
      v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v7 + 12), v17);
    else
      v18 = 0;
    v19 = &v18[16 * v14];
    v20 = &v18[16 * v17];
    *(_QWORD *)v19 = a2;
    v19[8] = a5;
    *(_WORD *)(v19 + 9) = 0;
    v19[11] = 0;
    *((_DWORD *)v19 + 3) = v9;
    v12 = v19 + 16;
    v22 = (char *)v7[10];
    v21 = (char *)v7[11];
    if (v21 != v22)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v21 - 1);
        v19 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      v21 = (char *)v7[10];
    }
    v7[10] = v19;
    v7[11] = v12;
    v7[12] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_QWORD *)v11 = a2;
    *(_BYTE *)(v11 + 8) = a5;
    *(_WORD *)(v11 + 9) = 0;
    *(_BYTE *)(v11 + 11) = 0;
    v12 = (char *)(v11 + 16);
    *(_DWORD *)(v11 + 12) = v9;
  }
  v7[11] = v12;
}

uint64_t ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke_2(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = C3DMeshElementGetVertexCountForPrimitiveAtIndex(a1[4], a2);
  v4 = a1[5];
  v5 = (_DWORD *)a1[6];
  v6 = *v5;
  *v5 = v6 + 1;
  *(_DWORD *)(v4 + 4 * v6) = result;
  v7 = a1[7];
  *(_DWORD *)(v7 + 208) += result;
  if (result != 4)
    *(_BYTE *)(v7 + 212) = 0;
  return result;
}

uint64_t ___Z41C3DGeometryInitSubdivTopologyInfoIfNeededP13__C3DGeometry_block_invoke_3(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  v3 = a2;
  result = C3DMeshElementGetVertexCountForPrimitiveAtIndex(a1[4], a2);
  if (result >= 1)
  {
    v5 = result;
    for (i = 0; i != v5; ++i)
    {
      result = C3DMeshElementGetIndex(a1[4], v3, i, a1[5]);
      v7 = a1[6];
      v8 = a1[7];
      if (result < v7)
        v7 = result;
      if (*(_BYTE *)v8 == 3)
        LODWORD(v7) = *(_DWORD *)(*(_QWORD *)(v8 + 8) + 4 * v7);
      v9 = a1[8];
      v10 = (_DWORD *)a1[9];
      v11 = *v10;
      *v10 = v11 + 1;
      *(_DWORD *)(v9 + 4 * v11) = v7;
    }
  }
  return result;
}

void C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFArray *ElementsCount;
  CFIndex v14;
  const void *ElementAtIndex;
  char Type;
  uint64_t v17;
  uint64_t PrimitiveCount;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int Index;
  int v30;
  unsigned __int8 ChannelForSourceWithSemanticAtIndex;
  CFIndex v32;
  uint64_t v33;
  const void *v34;
  char v35;
  int v36;
  uint64_t v37;
  char *v38;
  const void *SourceWithSemanticAtIndex;
  _QWORD *v40;
  size_t v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  CFIndex v45;
  const void *v46;
  char v47;
  uint64_t i;
  uint64_t VertexCountForPrimitiveAtIndex;
  uint64_t v50;
  uint64_t j;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *Accessor;
  size_t v57;
  char *v58;
  const __CFArray *v59;
  _DWORD *v60;
  CFIndex v61;
  BOOL v62;
  uint64_t v63;
  _QWORD v65[5];
  int v66;
  int v67;
  _OWORD v68[3];
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char v77;

  v3 = a1[5];
  if (!v3)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(int *)(v3 + 128) <= 0 && *(int *)(v3 + 152) <= 0)
  {
    v12 = a1[2];
    if (v12 && a1[1])
    {
      v55 = a1[1];
      ElementsCount = C3DMeshGetElementsCount(a2);
      if ((uint64_t)ElementsCount < 1)
      {
        v62 = 0;
      }
      else
      {
        v14 = 0;
        v62 = 1;
        do
        {
          ElementAtIndex = C3DMeshGetElementAtIndex(a2, v14, 0);
          Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
          if (C3DMeshElementTypeDefinesSurface(Type) && C3DMeshElementGetPrimitiveRange((uint64_t)ElementAtIndex) != -1)
            break;
          v62 = ++v14 < (uint64_t)ElementsCount;
        }
        while (ElementsCount != (const __CFArray *)v14);
      }
      Accessor = (_QWORD *)C3DMeshSourceGetAccessor(v12);
      v17 = v55;
      PrimitiveCount = C3DMeshElementGetPrimitiveCount(v55);
      v60 = malloc_type_malloc(4 * PrimitiveCount, 0x100004052888210uLL);
      v58 = (char *)malloc_type_malloc(8 * PrimitiveCount, 0x100004052888210uLL);
      if (C3DMeshElementGetIndicesChannelCount(v55) != 1)
      {
        v19 = scn_default_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
          C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      if (PrimitiveCount < 1)
      {
        LODWORD(v28) = 0;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v54 = PrimitiveCount;
        do
        {
          Index = C3DMeshElementGetIndex(v17, v27, 0, 0);
          v30 = C3DMeshElementGetIndex(v17, v27, 1, 0);
          if (!v62)
            goto LABEL_27;
          v74 = 0;
          v75 = &v74;
          v76 = 0x2000000000;
          v77 = 0;
          ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(a2, 0, 0);
          if ((uint64_t)ElementsCount >= 1)
          {
            v32 = 0;
            v33 = ChannelForSourceWithSemanticAtIndex;
            do
            {
              v34 = C3DMeshGetElementAtIndex(a2, v32, 0);
              v35 = C3DMeshElementGetType((uint64_t)v34);
              if (C3DMeshElementTypeDefinesSurface(v35))
              {
                v73 = 0;
                v71 = 0u;
                v72 = 0u;
                v70 = 0u;
                C3DMeshElementGetContent((uint64_t)v34, v33, (uint64_t)&v70);
                v68[0] = v70;
                v68[1] = v71;
                v68[2] = v72;
                v69 = v73;
                v65[0] = MEMORY[0x1E0C809B0];
                v65[1] = 0x40000000;
                v65[2] = ___Z50C3DGeometrySubdivTopologyInfoInitCreasesAndCornersPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke;
                v65[3] = &unk_1EA5A2F18;
                v66 = Index;
                v67 = v30;
                v65[4] = &v74;
                C3DIndicesContentEnumeratePrimitivesByEvaluatingPrimitiveRanges((uint64_t)v68, (uint64_t)v65, v72);
              }
              ++v32;
            }
            while (ElementsCount != (const __CFArray *)v32);
          }
          v36 = *((unsigned __int8 *)v75 + 24);
          _Block_object_dispose(&v74, 8);
          PrimitiveCount = v54;
          v17 = v55;
          if (v36)
          {
LABEL_27:
            if (*(_BYTE *)v3 == 3)
            {
              v37 = *(_QWORD *)(v3 + 8);
              Index = *(_DWORD *)(v37 + 4 * Index);
              v30 = *(_DWORD *)(v37 + 4 * v30);
            }
            v38 = &v58[8 * v28];
            *(_DWORD *)v38 = Index;
            *((_DWORD *)v38 + 1) = v30;
            v60[v28++] = *(_DWORD *)C3DSourceAccessorGetValuePtrAtIndex(Accessor, v27);
          }
          ++v27;
        }
        while (v27 != PrimitiveCount);
      }
      *(_DWORD *)(v3 + 128) = v28;
      *(_QWORD *)(v3 + 136) = v58;
      *(_QWORD *)(v3 + 144) = v60;
    }
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a2, 7, 0, 0);
    if (SourceWithSemanticAtIndex)
    {
      v40 = (_QWORD *)C3DMeshSourceGetAccessor(SourceWithSemanticAtIndex);
      v41 = *(_QWORD *)(v3 + 40) - *(_QWORD *)(v3 + 32);
      v42 = malloc_type_malloc(v41, 0x100004052888210uLL);
      v57 = v41;
      v43 = malloc_type_malloc(v41, 0x100004052888210uLL);
      v44 = C3DMeshGetChannelForSourceWithSemanticAtIndex(a2, 7, 0);
      v59 = C3DMeshGetElementsCount(a2);
      if ((uint64_t)v59 >= 1)
      {
        v45 = 0;
        do
        {
          v61 = v45;
          v46 = C3DMeshGetElementAtIndex(a2, v45, 0);
          v47 = C3DMeshElementGetType((uint64_t)v46);
          if (C3DMeshElementTypeDefinesSurface(v47))
          {
            v63 = C3DMeshElementGetPrimitiveCount((uint64_t)v46);
            if (v63 >= 1)
            {
              for (i = 0; i != v63; ++i)
              {
                VertexCountForPrimitiveAtIndex = C3DMeshElementGetVertexCountForPrimitiveAtIndex((uint64_t)v46, i);
                if (VertexCountForPrimitiveAtIndex >= 1)
                {
                  v50 = VertexCountForPrimitiveAtIndex;
                  for (j = 0; j != v50; ++j)
                  {
                    v52 = C3DMeshElementGetIndex((uint64_t)v46, i, j, v44);
                    v53 = v52;
                    if (*(_BYTE *)v3 == 3)
                      v53 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 4 * v52);
                    v42[v53] = *(_DWORD *)C3DSourceAccessorGetValuePtrAtIndex(v40, v52);
                    v43[v53] = v53;
                  }
                }
              }
            }
          }
          v45 = v61 + 1;
        }
        while ((const __CFArray *)(v61 + 1) != v59);
      }
      *(_DWORD *)(v3 + 152) = v57 >> 2;
      *(_QWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 168) = v42;
    }
  }
}

uint64_t ___Z50C3DGeometrySubdivTopologyInfoInitCreasesAndCornersPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  if (a4)
  {
    v4 = 0;
    v5 = *(_DWORD *)(result + 40);
    do
    {
      v6 = *(_DWORD *)(a3 + 4 * v4);
      if (a4 - 1 == v4)
        v7 = 0;
      else
        v7 = v4 + 1;
      v8 = *(_DWORD *)(a3 + 4 * v7);
      if (v5 == v6 && *(_DWORD *)(result + 44) == v8 || v5 == v8 && *(_DWORD *)(result + 44) == v6)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
      ++v4;
    }
    while (a4 != v4);
  }
  return result;
}

OpenSubdiv::v3_1_1::Far::TopologyRefiner *C3DSubdivCreateRefiner(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unsigned __int16 v13;
  __int16 v14;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  v11 = *(unsigned __int8 *)(a1 + 3);
  if (v11 == 1)
    v12 = 21;
  else
    v12 = 20;
  if (v11 == 2)
    v13 = 22;
  else
    v13 = v12;
  switch(*(_BYTE *)(a1 + 4))
  {
    case 0:
      v13 &= 3u;
      break;
    case 1:
      v13 &= 7u;
      break;
    case 2:
      v14 = 8;
      goto LABEL_15;
    case 3:
      v14 = 12;
LABEL_15:
      v13 = v14 & 0xFFFC | v13 & 3;
      break;
    case 4:
      v13 &= 0x13u;
      break;
    default:
      return OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::Create((int *)(v2 + 104), ((unint64_t)v13 << 32) | 1, 0);
  }
  return OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::Create((int *)(v2 + 104), ((unint64_t)v13 << 32) | 1, 0);
}

OpenSubdiv::v3_1_1::Far::TopologyRefiner *OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::Create(int *a1, unint64_t a2, char a3)
{
  unint64_t v6;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v7;
  OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *v8;

  v6 = HIDWORD(a2);
  v7 = (OpenSubdiv::v3_1_1::Far::TopologyRefiner *)operator new();
  v8 = (OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *)OpenSubdiv::v3_1_1::Far::TopologyRefiner::TopologyRefiner((uint64_t)v7, a2, v6);
  if ((OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::populateBaseLevel(v8, a1, a2, a3) & 1) == 0)
  {
    OpenSubdiv::v3_1_1::Far::TopologyRefiner::~TopologyRefiner(v7);
    MEMORY[0x1DF0D41C0]();
    return 0;
  }
  return v7;
}

void C3DSubdivInitCPUPrimvarContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFArray *ElementsCount;
  const __CFArray *v26;
  CFIndex v27;
  uint64_t v28;
  const void *ElementAtIndex;
  char Type;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];
  char v35;
  int v36;
  _QWORD v37[6];
  uint8_t v38[4];
  _QWORD v39[3];

  *(_QWORD *)((char *)&v39[1] + 4) = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 0x40000000;
  v37[2] = ___Z30C3DSubdivInitCPUPrimvarContextP26C3DSubdivCPUPrimvarContextPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke;
  v37[3] = &__block_descriptor_tmp_15;
  v37[4] = a2;
  v37[5] = a1;
  C3DMeshApplySources(a3, 0, (uint64_t)v37);
  v15 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  v16 = (v15 >> 5);
  if ((v15 >> 5))
  {
    if (!*(_DWORD *)(v6 + 196))
    {
      v17 = (char *)malloc_type_malloc((v15 >> 1) & 0xFF0, 0x105004037B82EA9uLL);
      v18 = 0;
      do
      {
        v19 = *(unsigned int *)(v6 + 208);
        *(_DWORD *)&v17[v18] = v19;
        *(_QWORD *)&v17[v18 + 8] = malloc_type_malloc(4 * v19, 0x100004052888210uLL);
        v18 += 16;
      }
      while (16 * v16 != v18);
      *(_DWORD *)(v6 + 196) = v16;
      *(_QWORD *)(v6 + 200) = v17;
    }
    v20 = 0;
    if (v16 <= 1)
      v21 = 1;
    else
      v21 = v16;
    v32 = v21;
    v33 = a1;
    do
    {
      v22 = *(_QWORD *)(a1 + 48) + 32 * v20;
      v24 = *(_QWORD *)(v22 + 8);
      v23 = *(_QWORD *)(v22 + 16);
      v36 = 0;
      ElementsCount = C3DMeshGetElementsCount(a3);
      if ((uint64_t)ElementsCount >= 1)
      {
        v26 = ElementsCount;
        v27 = 0;
        v28 = (v23 - v24) >> 3;
        do
        {
          ElementAtIndex = C3DMeshGetElementAtIndex(a3, v27, 0);
          Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
          if (C3DMeshElementTypeDefinesSurface(Type))
          {
            v34[0] = MEMORY[0x1E0C809B0];
            v34[1] = 0x40000000;
            v34[2] = ___Z30C3DSubdivInitCPUPrimvarContextP26C3DSubdivCPUPrimvarContextPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_2;
            v34[3] = &__block_descriptor_tmp_16_2;
            v34[4] = ElementAtIndex;
            v34[5] = v28;
            v34[6] = v22;
            v34[7] = v6;
            v35 = v20;
            v34[8] = &v36;
            C3DMeshElementEnumeratePrimitiveIndicesByEvaluatingPrimitiveRanges((uint64_t)ElementAtIndex, (uint64_t)v34);
          }
          ++v27;
        }
        while (v26 != (const __CFArray *)v27);
      }
      if (v36 != *(_DWORD *)(v6 + 208))
      {
        v31 = scn_default_log();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
          C3DSubdivInitCPUPrimvarContext(v38, v39, v31);
      }
      ++v20;
      a1 = v33;
    }
    while (v20 != v32);
  }
  else
  {
    *(_DWORD *)(v6 + 196) = 0;
    *(_QWORD *)(v6 + 200) = 0;
  }
}

void ___Z30C3DSubdivInitCPUPrimvarContextP26C3DSubdivCPUPrimvarContextPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unsigned __int8 v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void *__p[2];
  __int128 v33;

  if (a3)
  {
    if ((a3 & 0xFFFFFFFE) == 2)
      goto LABEL_5;
    if (a3 != 4)
      return;
  }
  if (a4)
    return;
LABEL_5:
  C3DMeshSourceGetContent(a2);
  if (!v11 || !C3DBaseTypeIsFloatingValue(v10))
    return;
  if (a3)
  {
    if ((a3 & 0xFFFFFFFE) == 2 || a3 == 4 && !a4)
      goto LABEL_15;
  }
  else if (!a4)
  {
    goto LABEL_24;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
  {
    ___Z30C3DSubdivInitCPUPrimvarContextP26C3DSubdivCPUPrimvarContextPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_cold_1();
    if (!a3)
      goto LABEL_24;
LABEL_15:
    v13 = *(_QWORD *)(a1 + 40);
    v15 = *(unsigned __int8 **)(v13 + 48);
    v16 = *(unsigned __int8 **)(v13 + 56);
    v14 = (uint64_t *)(v13 + 48);
    while (v15 != v16)
    {
      if (*v15 == a5)
      {
        v18 = (void **)(v15 + 8);
        goto LABEL_25;
      }
      v15 += 32;
    }
    *(_OWORD *)__p = 0u;
    v33 = 0u;
    std::vector<C3DSubdivCPUFVarPrimvarInfo>::push_back[abi:nn180100](v14, (char *)__p);
    if (__p[1])
    {
      *(void **)&v33 = __p[1];
      operator delete(__p[1]);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
    *(_BYTE *)(v17 - 32) = a5;
    v18 = (void **)(v17 - 24);
    goto LABEL_25;
  }
  if (a3)
    goto LABEL_15;
LABEL_24:
  v18 = *(void ***)(a1 + 40);
LABEL_25:
  v19 = (unint64_t)v18[2];
  v20 = (uint64_t *)v18[1];
  if ((unint64_t)v20 >= v19)
  {
    v22 = ((char *)v20 - (_BYTE *)*v18) >> 3;
    if ((unint64_t)(v22 + 1) >> 61)
      abort();
    v23 = v19 - (_QWORD)*v18;
    v24 = v23 >> 2;
    if (v23 >> 2 <= (unint64_t)(v22 + 1))
      v24 = v22 + 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
      v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(v18 + 2), v25);
    else
      v26 = 0;
    v27 = (uint64_t *)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = a2;
    v21 = v27 + 1;
    v30 = (char *)*v18;
    v29 = (char *)v18[1];
    if (v29 != *v18)
    {
      do
      {
        v31 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v27 = v31;
      }
      while (v29 != v30);
      v29 = (char *)*v18;
    }
    *v18 = v27;
    v18[1] = v21;
    v18[2] = v28;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *v20 = a2;
    v21 = v20 + 1;
  }
  v18[1] = v21;
}

uint64_t C3DSubdivSourceGetPrimvarDataType(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  NSObject *v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  NSObject *v21;

  if (a3)
  {
    if ((a3 & 0xFFFFFFFE) == 2 || a3 == 4 && !a4 && (a5 & 1) != 0)
    {
LABEL_9:
      if (a5)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if (!a4)
  {
    goto LABEL_9;
  }
  v9 = scn_default_log();
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
    goto LABEL_9;
  C3DSubdivSourceGetPrimvarDataType();
  if (a5)
  {
LABEL_10:
    if (a3)
      return 3;
    else
      return 1;
  }
LABEL_14:
  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  for (i = *(_QWORD *)(v11 + 80); i != *(_QWORD *)(v11 + 88); i += 16)
  {
    if (*(_QWORD *)i == a2)
      return *(unsigned int *)(i + 12);
  }
  v21 = scn_default_log();
  result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    __C3DGeometryOsdGetPrimvarDataTypeHash_block_invoke_cold_1();
    return 0;
  }
  return result;
}

uint64_t std::vector<C3DSubdivCPUFVarPrimvarInfo>::push_back[abi:nn180100](uint64_t *a1, char *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      abort();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Token>>(result, v12);
    v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *v14 = *a2;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *((_QWORD *)v14 + 1) = 0;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v14 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v16[2] = v14 + 32;
    std::vector<C3DSubdivCPUFVarPrimvarInfo>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<C3DSubdivCPUFVarPrimvarInfo>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_BYTE *)v7 = *a2;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

uint64_t ___Z30C3DSubdivInitCPUPrimvarContextP26C3DSubdivCPUPrimvarContextPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_2(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t Count;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;

  v3 = a2;
  result = C3DMeshElementGetVertexCountForPrimitiveAtIndex(*(_QWORD *)(a1 + 32), a2);
  if (result >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    do
    {
      if (v7)
      {
        for (i = 0; i < v7; ++i)
        {
          Count = C3DMeshSourceGetCount(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 8 * i));
          if (Count >= 0x80000000)
            v10 = 0x80000000;
          else
            v10 = Count;
          v11 = v10 - 1;
          result = C3DMeshElementGetIndex(*(_QWORD *)(a1 + 32), v3, v6, **(unsigned __int8 **)(a1 + 48));
          if (result >= v11)
            v12 = v11;
          else
            v12 = result;
          v13 = *(_DWORD **)(a1 + 64);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 200) + 16 * *(unsigned __int8 *)(a1 + 72) + 8)
                    + 4 * *v13) = v12;
          v7 = *(_QWORD *)(a1 + 40);
        }
      }
      else
      {
        v13 = *(_DWORD **)(a1 + 64);
      }
      ++*v13;
      ++v6;
    }
    while (v6 != v5);
  }
  return result;
}

void C3DSubdivFeedCPUPrimvar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  v6 = *(uint64_t **)a1;
  v7 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v7)
  {
    do
    {
      v8 = *v6++;
      __C3DSubdivFeedCPUPrimvar(a2, a3, v8, 0, (uint64_t *)(a1 + 72), 0);
    }
    while (v6 != v7);
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *(uint64_t **)(a1 + 32);
  while (v9 != v10)
  {
    v11 = *v9++;
    __C3DSubdivFeedCPUPrimvar(a2, a3, v11, 0, (uint64_t *)(a1 + 144), 1);
  }
  v12 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  v13 = (v12 >> 5);
  std::vector<C3DSubdivCPUPrimvarDataGroup>::resize((uint64_t *)(a1 + 216), v13);
  if ((v12 & 0x1FE0) != 0)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a1 + 48) + 32 * v14;
      v16 = *(uint64_t **)(v15 + 8);
      v17 = *(uint64_t **)(v15 + 16);
      if (v16 != v17)
      {
        v18 = (uint64_t *)(*(_QWORD *)(a1 + 216) + 72 * v14);
        do
        {
          v19 = *v16++;
          __C3DSubdivFeedCPUPrimvar(a2, a3, v19, v14, v18, 2);
        }
        while (v16 != v17);
      }
      ++v14;
    }
    while (v14 != v13);
  }
}

void __C3DSubdivFeedCPUPrimvar(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, int a6)
{
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[3];
  void *v31;
  void *v32;
  void *__p;
  void *v34;

  v11 = *(_QWORD *)(a1 + 40);
  if (!v11)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  C3DMeshSourceGetContent(a3);
  v21 = HIBYTE(v20);
  if (BYTE4(v20) - 23 >= 2)
    v22 = HIBYTE(v20);
  else
    v22 = 4;
  switch(v22)
  {
    case 4:
      _ZN23C3DSubdivCPUPrimvarDataIDv3_fEC2EPK15__C3DMeshSourceP29C3DGeometrySubdivTopologyInfoPN10OpenSubdiv6v3_1_13Far15TopologyRefinerEh37C3DSubdivPrimvarDataInterpolationMode((uint64_t)v30, a3, v11, a2, a4, a6);
      _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE9push_backB8nn180100ERKS3_(a5 + 6, (uint64_t)v30);
      goto LABEL_13;
    case 3:
      _ZN23C3DSubdivCPUPrimvarDataIDv3_fEC2EPK15__C3DMeshSourceP29C3DGeometrySubdivTopologyInfoPN10OpenSubdiv6v3_1_13Far15TopologyRefinerEh37C3DSubdivPrimvarDataInterpolationMode((uint64_t)v30, a3, v11, a2, a4, a6);
      _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE9push_backB8nn180100ERKS3_(a5 + 3, (uint64_t)v30);
      goto LABEL_13;
    case 2:
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2EPK15__C3DMeshSourceP29C3DGeometrySubdivTopologyInfoPN10OpenSubdiv6v3_1_13Far15TopologyRefinerEh37C3DSubdivPrimvarDataInterpolationMode((uint64_t)v30, a3, v11, a2, a4, a6);
      _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE9push_backB8nn180100ERKS3_(a5, (uint64_t)v30);
LABEL_13:
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v30[0])
      {
        v30[1] = v30[0];
        operator delete(v30[0]);
      }
      return;
  }
  v23 = scn_default_log();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    __C3DSubdivFeedCPUPrimvar(v21, v23, v24, v25, v26, v27, v28, v29);
}

void std::vector<C3DSubdivCPUPrimvarDataGroup>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (void **)a1[1];
  v4 = 0x8E38E38E38E38E39 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<C3DSubdivCPUPrimvarDataGroup>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 72 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 9;
      std::allocator<C3DSubdivCPUPrimvarDataGroup>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void C3DSubdivInterpolateCPUPrimvar(uint64_t a1, double a2, float32x4_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, int **a7)
{
  double v10;
  float32x4_t v11;
  float32x4_t v12;
  double v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  __C3DSubdivInterpolateCPUPrimvar((_QWORD *)(a1 + 72), a6, a7, a2, a3, a4);
  __C3DSubdivInterpolateCPUPrimvar((_QWORD *)(a1 + 144), a6, a7, v10, v11, v12);
  v16 = *(_DWORD *)(a1 + 48);
  if (((*(_DWORD *)(a1 + 56) - v16) >> 5))
  {
    v17 = 0;
    v18 = 72 * ((*(_DWORD *)(a1 + 56) - v16) >> 5);
    do
    {
      __C3DSubdivInterpolateCPUPrimvar((_QWORD *)(*(_QWORD *)(a1 + 216) + v17), a6, a7, v13, v14, v15);
      v17 += 72;
    }
    while (v18 != v17);
  }
}

void __C3DSubdivInterpolateCPUPrimvar(_QWORD *a1, uint64_t a2, int **a3, double a4, float32x4_t a5, float32x4_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  if ((*(_BYTE *)(a2 + 8) & 0x3C) != 0)
  {
    v9 = 0;
    do
    {
      v10 = a1[1] - *a1;
      if (v10)
      {
        v11 = 0;
        v12 = v10 / 112;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        do
        {
          _ZN23C3DSubdivCPUPrimvarDataIDv2_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(*a1 + v11, (v9 + 1), a3, a2, a4, *(double *)a5.i64);
          v11 += 112;
          --v13;
        }
        while (v13);
      }
      v14 = a1[4] - a1[3];
      if (v14)
      {
        v15 = 0;
        v16 = v14 / 112;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        do
        {
          _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(a1[3] + v15, (v9 + 1), a3, a2, a4, *(double *)a5.i64, a6);
          v15 += 112;
          --v17;
        }
        while (v17);
      }
      v18 = a1[7] - a1[6];
      if (v18)
      {
        v19 = 0;
        v20 = v18 / 112;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        do
        {
          _ZN23C3DSubdivCPUPrimvarDataIDv4_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(a1[6] + v19, (v9 + 1), a3, a2, a4, a5);
          v19 += 112;
          --v21;
        }
        while (v21);
      }
      ++v9;
    }
    while (v9 < (((unint64_t)*(unsigned __int8 *)(a2 + 8) >> 2) & 0xF));
  }
}

void C3DSubdivInitGPUPrimvarDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t Content;
  float32x4_t v26;
  float v27;
  float v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  NSObject *v32;
  int8x16_t v33;
  unsigned __int8 v34;
  int32x2_t v35;
  int32x4_t v36;
  int32x4_t v37;
  unsigned __int16 v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  NSObject *v62;
  int8x16_t v63;
  unsigned __int8 v64;
  int32x2_t v65;
  int32x4_t v66;
  int32x4_t v67;
  unsigned __int16 v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  int v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const __CFArray *ElementsCount;
  const __CFArray *v93;
  CFIndex v94;
  uint64_t v95;
  const void *ElementAtIndex;
  char Type;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  void **v108;
  uint64_t v109;
  int v110;
  int8x16_t v111;
  int8x16_t v112;
  uint64_t v113;
  int8x16_t v114;
  int8x16_t v115;
  _QWORD v116[9];
  char v117;
  int v118;
  _QWORD v119[6];
  uint8_t buf[4];
  const char *v121;
  __int16 v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DGeometrySubdivTopologyInfoInitCreasesAndCorners(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v119[0] = MEMORY[0x1E0C809B0];
  v119[1] = 0x40000000;
  v119[2] = ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke;
  v119[3] = &__block_descriptor_tmp_18_1;
  v119[4] = a2;
  v119[5] = a1;
  v109 = a3;
  C3DMeshApplySources(a3, 0, (uint64_t)v119);
  v101 = *(_QWORD *)(a1 + 8);
  v102 = *(_QWORD *)(a1 + 16);
  v99 = *(_QWORD *)(a1 + 64);
  v100 = *(_QWORD *)(a1 + 72);
  std::vector<float>::reserve((void **)(a1 + 32), (*(_DWORD *)(v6 + 208) * *(_DWORD *)a1));
  v108 = (void **)(a1 + 88);
  std::vector<float>::reserve((void **)(a1 + 88), (*(_DWORD *)(v6 + 208) * *(_DWORD *)(a1 + 56)));
  v15 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  while (v15 != v16)
  {
    std::vector<float>::reserve((void **)(v15 + 40), (*(_DWORD *)(v6 + 208) * *(_DWORD *)(v15 + 8)));
    v15 += 64;
  }
  v104 = v6;
  if (*(_DWORD *)(v6 + 104))
  {
    v17 = 0;
    v18 = (_QWORD *)(a1 + 48);
    v19 = (_QWORD *)(a1 + 104);
    if ((unint64_t)((v102 - v101) >> 4) <= 1)
      v20 = 1;
    else
      v20 = (v102 - v101) >> 4;
    if ((unint64_t)((v100 - v99) >> 4) <= 1)
      v21 = 1;
    else
      v21 = (v100 - v99) >> 4;
    v105 = v21;
    v106 = v20;
    v107 = (void **)(a1 + 32);
    do
    {
      v103 = v17;
      v110 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 4 * v17);
      if (v102 != v101)
      {
        v22 = 0;
        do
        {
          v23 = *(_QWORD *)(a1 + 8) + 16 * v22;
          v24 = *(_DWORD *)(v23 + 4);
          Content = C3DMeshSourceGetContent(*(_QWORD *)(v23 + 8));
          v30 = WORD2(v29);
          v31 = HIBYTE(v29);
          if (HIBYTE(v29) >= 5)
          {
            v32 = scn_default_log();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315394;
              v121 = "srcContent.componentCount <= 4";
              v122 = 1024;
              v123 = v31;
              _os_log_fault_impl(&dword_1DCCB8000, v32, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", buf, 0x12u);
            }
          }
          *(double *)v33.i64 = C3DConvertFloatingTypeToFloat4(v30, (float *)(Content + HIBYTE(v30) * v110), v26, v27, v28);
          if (v24)
          {
            v34 = 0;
            v35.i32[0] = 0;
            v35.i32[1] = v31;
            v36 = vzip1q_s32((int32x4_t)(unint64_t)v35, vdupq_lane_s32(v35, 1));
            v37.i64[0] = v31 | 0x100000000;
            v37.i64[1] = 0x300000002;
            v38 = vmovn_s32(vceqq_s32(v36, v37)).u16[0];
            *(int16x4_t *)v36.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v36, (uint32x4_t)v37));
            v36.i16[0] = v38;
            v39 = (int8x16_t)xmmword_1DD007610;
            v39.i32[0] = v33.i32[0];
            v33.i32[0] = 0;
            v40 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v36.i8), v33, v39);
            v41 = *(char **)(a1 + 40);
            v111 = v40;
            do
            {
              v115 = v40;
              v42 = *(_DWORD *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF3 | (4 * (v34 & 3)));
              if ((unint64_t)v41 >= *v18)
              {
                v44 = (char *)*v107;
                v45 = (v41 - (_BYTE *)*v107) >> 2;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62)
LABEL_88:
                  abort();
                v47 = *v18 - (_QWORD)v44;
                if (v47 >> 1 > v46)
                  v46 = v47 >> 1;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                  v48 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 48, v48);
                  v44 = *(char **)(a1 + 32);
                  v41 = *(char **)(a1 + 40);
                }
                else
                {
                  v49 = 0;
                }
                v50 = &v49[4 * v45];
                *(_DWORD *)v50 = v42;
                v43 = v50 + 4;
                while (v41 != v44)
                {
                  v51 = *((_DWORD *)v41 - 1);
                  v41 -= 4;
                  *((_DWORD *)v50 - 1) = v51;
                  v50 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v50;
                *(_QWORD *)(a1 + 40) = v43;
                *(_QWORD *)(a1 + 48) = &v49[4 * v48];
                if (v44)
                  operator delete(v44);
                v40 = v111;
              }
              else
              {
                *(_DWORD *)v41 = v42;
                v43 = v41 + 4;
              }
              *(_QWORD *)(a1 + 40) = v43;
              ++v34;
              v41 = v43;
            }
            while (v24 > v34);
          }
          ++v22;
        }
        while (v22 != v106);
      }
      if (v100 != v99)
      {
        v52 = 0;
        do
        {
          v53 = *(_QWORD *)(a1 + 64) + 16 * v52;
          v54 = *(_DWORD *)(v53 + 4);
          v55 = C3DMeshSourceGetContent(*(_QWORD *)(v53 + 8));
          v60 = WORD2(v59);
          v61 = HIBYTE(v59);
          if (HIBYTE(v59) >= 5)
          {
            v62 = scn_default_log();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315394;
              v121 = "srcContent.componentCount <= 4";
              v122 = 1024;
              v123 = v61;
              _os_log_fault_impl(&dword_1DCCB8000, v62, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", buf, 0x12u);
            }
          }
          *(double *)v63.i64 = C3DConvertFloatingTypeToFloat4(v60, (float *)(v55 + HIBYTE(v60) * v110), v56, v57, v58);
          if (v54)
          {
            v64 = 0;
            v65.i32[0] = 0;
            v65.i32[1] = v61;
            v66 = vzip1q_s32((int32x4_t)(unint64_t)v65, vdupq_lane_s32(v65, 1));
            v67.i64[0] = v61 | 0x100000000;
            v67.i64[1] = 0x300000002;
            v68 = vmovn_s32(vceqq_s32(v66, v67)).u16[0];
            *(int16x4_t *)v66.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v66, (uint32x4_t)v67));
            v66.i16[0] = v68;
            v69 = (int8x16_t)xmmword_1DD007610;
            v69.i32[0] = v63.i32[0];
            v63.i32[0] = 0;
            v70 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v66.i8), v63, v69);
            v71 = *(char **)(a1 + 96);
            v112 = v70;
            do
            {
              v114 = v70;
              v72 = *(_DWORD *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF3 | (4 * (v64 & 3)));
              if ((unint64_t)v71 >= *v19)
              {
                v74 = (char *)*v108;
                v75 = (v71 - (_BYTE *)*v108) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
                  goto LABEL_88;
                v77 = *v19 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 104, v78);
                  v74 = *(char **)(a1 + 88);
                  v71 = *(char **)(a1 + 96);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[4 * v75];
                *(_DWORD *)v80 = v72;
                v73 = v80 + 4;
                while (v71 != v74)
                {
                  v81 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }
                *(_QWORD *)(a1 + 88) = v80;
                *(_QWORD *)(a1 + 96) = v73;
                *(_QWORD *)(a1 + 104) = &v79[4 * v78];
                if (v74)
                  operator delete(v74);
                v70 = v112;
              }
              else
              {
                *(_DWORD *)v71 = v72;
                v73 = v71 + 4;
              }
              *(_QWORD *)(a1 + 96) = v73;
              ++v64;
              v71 = v73;
            }
            while (v54 > v64);
          }
          ++v52;
        }
        while (v52 != v105);
      }
      v6 = v104;
      v17 = v103 + 1;
    }
    while (v103 + 1 < (unint64_t)*(unsigned int *)(v104 + 104));
  }
  v82 = *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112);
  v83 = (v82 >> 6);
  if ((v82 >> 6))
  {
    if (!*(_DWORD *)(v6 + 196))
    {
      v84 = (char *)malloc_type_malloc((v82 >> 2) & 0xFF0, 0x105004037B82EA9uLL);
      v85 = 0;
      do
      {
        v86 = *(unsigned int *)(v6 + 208);
        *(_DWORD *)&v84[v85] = v86;
        *(_QWORD *)&v84[v85 + 8] = malloc_type_malloc(4 * v86, 0x100004052888210uLL);
        v85 += 16;
      }
      while (16 * v83 != v85);
      *(_DWORD *)(v6 + 196) = v83;
      *(_QWORD *)(v6 + 200) = v84;
    }
    v87 = 0;
    if (v83 <= 1)
      v88 = 1;
    else
      v88 = v83;
    v113 = v88;
    do
    {
      v89 = *(_QWORD *)(a1 + 112) + (v87 << 6);
      v91 = *(_QWORD *)(v89 + 16);
      v90 = *(_QWORD *)(v89 + 24);
      v118 = 0;
      ElementsCount = C3DMeshGetElementsCount(v109);
      if ((uint64_t)ElementsCount >= 1)
      {
        v93 = ElementsCount;
        v94 = 0;
        v95 = (v90 - v91) >> 4;
        do
        {
          ElementAtIndex = C3DMeshGetElementAtIndex(v109, v94, 0);
          Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
          if (C3DMeshElementTypeDefinesSurface(Type))
          {
            v116[0] = MEMORY[0x1E0C809B0];
            v116[1] = 0x40000000;
            v116[2] = ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_19;
            v116[3] = &__block_descriptor_tmp_20_4;
            v116[4] = ElementAtIndex;
            v116[5] = v95;
            v116[6] = v89;
            v116[7] = v104;
            v117 = v87;
            v116[8] = &v118;
            C3DMeshElementEnumeratePrimitiveIndicesByEvaluatingPrimitiveRanges((uint64_t)ElementAtIndex, (uint64_t)v116);
          }
          ++v94;
        }
        while (v93 != (const __CFArray *)v94);
      }
      if (v118 != *(_DWORD *)(v104 + 208))
      {
        v98 = scn_default_log();
        if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
          C3DSubdivInitGPUPrimvarDescriptor(buf, &v121, v98);
      }
      ++v87;
    }
    while (v87 != v113);
  }
  else
  {
    *(_DWORD *)(v6 + 196) = 0;
    *(_QWORD *)(v6 + 200) = 0;
  }
}

unint64_t ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v7;
  unsigned __int8 v8;
  int v9;
  NSObject *v10;
  char *v11;

  v7 = result;
  if (a3)
  {
    if ((a3 & 0xFFFFFFFE) != 2)
      return result;
  }
  else if (a4)
  {
    return result;
  }
  result = C3DMeshSourceGetContent(a2);
  if (v9)
  {
    result = C3DBaseTypeIsFloatingValue(v8);
    if ((_DWORD)result)
    {
      if (a3 && a3 != 3 && a3 != 2)
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_cold_2(a3, v10);
      }
      v11 = (char *)&loc_1DCE968F8
          + 4 * byte_1DD02AC9D[C3DSubdivSourceGetPrimvarDataType(*(_QWORD *)(v7 + 32), a2, a3, a4, 0)];
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_1DCE96A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_cold_1(&a9);
}

uint64_t std::vector<C3DSubdivGPUFVarPrimvarData>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = std::vector<C3DSubdivGPUFVarPrimvarData>::__push_back_slow_path<C3DSubdivGPUFVarPrimvarData>(a1, a2);
  }
  else
  {
    *(_BYTE *)v3 = *(_BYTE *)a2;
    *(_DWORD *)(v3 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    result = v3 + 64;
  }
  a1[1] = result;
  return result;
}

void C3DSubdivGPUFVarPrimvarData::~C3DSubdivGPUFVarPrimvarData(C3DSubdivGPUFVarPrimvarData *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void ___Z33C3DSubdivInitGPUPrimvarDescriptorP29C3DSubdivGPUPrimvarDescriptorPK26C3DGeometrySubdivisionInfoP9__C3DMesh_block_invoke_19(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t i;
  uint64_t Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t Index;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t Content;
  float32x4_t v13;
  float v14;
  float v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  NSObject *v19;
  int8x16_t v20;
  unsigned __int8 v21;
  int32x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  unsigned __int16 v25;
  int8x16_t v26;
  int8x16_t v27;
  _QWORD *v28;
  int v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t VertexCountForPrimitiveAtIndex;
  uint64_t v42;
  uint64_t v43;
  int8x16_t v44;
  int8x16_t v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v42 = a2;
  VertexCountForPrimitiveAtIndex = C3DMeshElementGetVertexCountForPrimitiveAtIndex(*(_QWORD *)(a1 + 32), a2);
  if (VertexCountForPrimitiveAtIndex >= 1)
  {
    v43 = 0;
    v3 = *(_QWORD *)(a1 + 40);
    do
    {
      if (v3)
      {
        for (i = 0; i < v3; ++i)
        {
          Count = C3DMeshSourceGetCount(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + 16 * i + 8));
          v6 = 0x80000000;
          if (Count < 0x80000000)
            v6 = Count;
          v7 = v6 - 1;
          Index = C3DMeshElementGetIndex(*(_QWORD *)(a1 + 32), v42, v43, **(unsigned __int8 **)(a1 + 48));
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 200) + 16 * *(unsigned __int8 *)(a1 + 72) + 8)
                    + 4 * **(unsigned int **)(a1 + 64)) = **(_DWORD **)(a1 + 64);
          if (Index >= v7)
            v9 = v7;
          else
            v9 = Index;
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + 16 * i;
          v11 = *(_DWORD *)(v10 + 4);
          Content = C3DMeshSourceGetContent(*(_QWORD *)(v10 + 8));
          v17 = WORD2(v16);
          v18 = HIBYTE(v16);
          if (HIBYTE(v16) >= 5)
          {
            v19 = scn_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136315394;
              v47 = "srcContent.componentCount <= 4";
              v48 = 1024;
              v49 = v18;
              _os_log_fault_impl(&dword_1DCCB8000, v19, OS_LOG_TYPE_FAULT, "Assertion '%s' failed. Primvar data size is too big (cannot fit %d floats in a float4)", buf, 0x12u);
            }
          }
          *(double *)v20.i64 = C3DConvertFloatingTypeToFloat4(v17, (float *)(Content + HIBYTE(v17) * v9), v13, v14, v15);
          if (v11)
          {
            v21 = 0;
            v22.i32[0] = 0;
            v22.i32[1] = v18;
            v23.i64[0] = v18 | 0x100000000;
            v24 = vzip1q_s32((int32x4_t)(unint64_t)v22, vdupq_lane_s32(v22, 1));
            v23.i64[1] = 0x300000002;
            v25 = vmovn_s32(vceqq_s32(v24, v23)).u16[0];
            *(int16x4_t *)v24.i8 = vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)v24, (uint32x4_t)v23));
            v24.i16[0] = v25;
            v26 = (int8x16_t)xmmword_1DD007610;
            v26.i32[0] = v20.i32[0];
            v20.i32[0] = 0;
            v27 = vbslq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v24.i8), v20, v26);
            v44 = v27;
            do
            {
              v28 = *(_QWORD **)(a1 + 48);
              v45 = v27;
              v29 = *(_DWORD *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
              v30 = (char *)v28[6];
              v31 = v28[7];
              if ((unint64_t)v30 >= v31)
              {
                v33 = (char *)v28[5];
                v34 = (v30 - v33) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  abort();
                v36 = v31 - (_QWORD)v33;
                if (v36 >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v37 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v28 + 7), v37);
                  v33 = (char *)v28[5];
                  v30 = (char *)v28[6];
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[4 * v34];
                *(_DWORD *)v39 = v29;
                v32 = v39 + 4;
                while (v30 != v33)
                {
                  v40 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                v28[5] = v39;
                v28[6] = v32;
                v28[7] = &v38[4 * v37];
                if (v33)
                  operator delete(v33);
                v27 = v44;
              }
              else
              {
                *(_DWORD *)v30 = v29;
                v32 = v30 + 4;
              }
              v28[6] = v32;
              ++v21;
            }
            while (v11 > v21);
          }
          v3 = *(_QWORD *)(a1 + 40);
        }
      }
      ++**(_DWORD **)(a1 + 64);
      ++v43;
    }
    while (v43 != VertexCountForPrimitiveAtIndex);
  }
}

uint64_t *C3DSubdivComputeElementToFaceRangeTable(OpenSubdiv::v3_1_1::Far::TopologyRefiner *a1, __C3DMesh *a2)
{
  uint64_t ElementsCount;
  CFIndex v5;
  int v6;
  const void *ElementAtIndex;
  char Type;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 i;
  NSObject *v30;
  uint64_t v31;
  unsigned int v32;
  char **v33;
  char *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *__p;
  char *v65;
  char *v66;
  uint8_t v67[4];
  _DWORD v68[7];

  *(_QWORD *)&v68[5] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v65 = 0;
  v66 = 0;
  ElementsCount = C3DMeshGetElementsCount((uint64_t)a2);
  if (ElementsCount)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)a2, v5, 0);
      Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
      if (C3DMeshElementTypeDefinesSurface(Type))
      {
        v6 += C3DMeshElementGetPrimitiveCountByEvaluatingPrimitiveRanges((uint64_t)ElementAtIndex);
        v9 = v65;
        if (v65 >= v66)
        {
          v11 = __p;
          v12 = (v65 - __p) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
LABEL_74:
            abort();
          v14 = v66 - __p;
          if ((v66 - __p) >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v66, v15);
            v11 = __p;
            v9 = v65;
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = v6;
          v10 = v17 + 4;
          while (v9 != v11)
          {
            v18 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          __p = v17;
          v66 = &v16[4 * v15];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *(_DWORD *)v65 = v6;
          v10 = v65 + 4;
        }
        v65 = v10;
      }
      ++v5;
    }
    while (v5 != ElementsCount);
    v19 = (v65 - __p) >> 2;
  }
  else
  {
    LODWORD(v19) = 0;
  }
  v20 = (uint64_t *)operator new();
  std::vector<std::vector<CFRange>>::vector(v20, v19);
  v21 = **(unsigned int **)(*((_QWORD *)a1 + 11) + 24 * (((unint64_t)*((unsigned __int8 *)a1 + 8) >> 2) & 0xF));
  if ((_DWORD)v21)
  {
    v22 = 0;
    while (1)
    {
      v23 = *((unsigned __int8 *)a1 + 8);
      if ((v23 & 0x3C) != 0)
      {
        v24 = (v23 >> 2) & 0xF;
        v25 = v24 + 1;
        v26 = (uint64_t *)(*((_QWORD *)a1 + 11) + 24 * v24 + 8);
        v27 = v22;
        do
        {
          v28 = *v26;
          v26 -= 3;
          v27 = *(_DWORD *)(*(_QWORD *)(v28 + 264) + 4 * (int)v27);
          --v25;
        }
        while (v25 > 1);
      }
      else
      {
        v27 = v22;
      }
      for (i = 0; v19 > i; ++i)
      {
        if (v27 < *(_DWORD *)&__p[4 * i])
          break;
      }
      if (v19 <= i)
      {
        v30 = scn_default_log();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
          C3DSubdivComputeElementToFaceRangeTable(v67, v68, v30);
      }
      v31 = *v20;
      if (0xAAAAAAAAAAAAAAABLL * ((v20[1] - *v20) >> 3) <= i)
        goto LABEL_74;
      v32 = i;
      v33 = (char **)(v31 + 24 * i);
      v35 = v33 + 1;
      v34 = v33[1];
      v36 = *v33;
      v37 = (v34 - *v33) >> 4;
      if (v34 == *v33)
        break;
      v38 = *((_QWORD *)v34 - 1);
      if (v22 != (_DWORD)v38 + *((_DWORD *)v34 - 4))
      {
        v53 = v31 + 24 * v32;
        v56 = *(_QWORD *)(v53 + 16);
        v55 = (_QWORD *)(v53 + 16);
        v54 = v56;
        if ((unint64_t)v34 < v56)
        {
LABEL_54:
          *(_QWORD *)v34 = v22;
          *((_QWORD *)v34 + 1) = 1;
          v52 = v34 + 16;
          goto LABEL_69;
        }
        v57 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60)
          goto LABEL_74;
        v58 = v54 - (_QWORD)v36;
        if (v58 >> 3 > v57)
          v57 = v58 >> 3;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
          v59 = 0xFFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v55, v59);
          v34 = *v35;
          v36 = *v33;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[16 * v37];
        *(_QWORD *)v61 = v22;
        *((_QWORD *)v61 + 1) = 1;
        v62 = v61;
        if (v34 != v36)
        {
          do
          {
            *((_OWORD *)v62 - 1) = *((_OWORD *)v34 - 1);
            v62 -= 16;
            v34 -= 16;
          }
          while (v34 != v36);
          v36 = *v33;
        }
        *v33 = v62;
        v52 = v61 + 16;
        *v35 = v61 + 16;
        *v55 = &v60[16 * v59];
        if (!v36)
          goto LABEL_69;
        goto LABEL_68;
      }
      *((_QWORD *)v34 - 1) = v38 + 1;
LABEL_70:
      if (++v22 == v21)
        goto LABEL_71;
    }
    v39 = v31 + 24 * v32;
    v42 = *(_QWORD *)(v39 + 16);
    v41 = (_QWORD *)(v39 + 16);
    v40 = v42;
    if ((unint64_t)v34 < v42)
      goto LABEL_54;
    v43 = v40 - (_QWORD)v36;
    if (v43 >> 3 <= (unint64_t)(v37 + 1))
      v44 = v37 + 1;
    else
      v44 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v44;
    v46 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v41, v45);
    v48 = &v46[16 * v37];
    *(_QWORD *)v48 = v22;
    *((_QWORD *)v48 + 1) = 1;
    v49 = *v35;
    v50 = *v33;
    v51 = v48;
    if (*v35 != *v33)
    {
      do
      {
        *((_OWORD *)v51 - 1) = *((_OWORD *)v49 - 1);
        v51 -= 16;
        v49 -= 16;
      }
      while (v49 != v50);
      v49 = *v33;
    }
    *v33 = v51;
    v52 = v48 + 16;
    *v35 = v48 + 16;
    *v41 = &v46[16 * v47];
    if (!v49)
    {
LABEL_69:
      *v35 = v52;
      goto LABEL_70;
    }
    v36 = v49;
LABEL_68:
    operator delete(v36);
    goto LABEL_69;
  }
LABEL_71:
  if (__p)
    operator delete(__p);
  return v20;
}

_QWORD *C3DSubdivComputeElementToPatchRangeTable(OpenSubdiv::v3_1_1::Far::TopologyRefiner *a1, const OpenSubdiv::v3_1_1::Far::PatchTable *a2, __C3DMesh *a3)
{
  unsigned __int8 ElementsCount;
  CFIndex v6;
  uint64_t v7;
  const void *ElementAtIndex;
  unsigned int Type;
  int PrimitiveCountByEvaluatingPrimitiveRanges;
  unsigned __int8 ChannelForSourceWithSemanticAtIndex;
  NSObject *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t *v37;
  char **v38;
  char *v39;
  char **v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v69;
  unint64_t v70;
  int v71[2];
  int v72;
  uint64_t v73[3];
  __n128 v74;
  __n128 v75;
  __n128 v76;
  uint64_t v77;
  uint8_t buf;
  char v79[7];
  _QWORD v80[5];
  __n128 v81[3];
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  void **v90;
  uint8_t v91[4];
  _QWORD v92[5];

  *(_QWORD *)((char *)&v92[2] + 4) = *MEMORY[0x1E0C80C00];
  v86 = 0;
  v87 = &v86;
  v88 = 0x2000000000;
  v89 = 0;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  ElementsCount = C3DMeshGetElementsCount((uint64_t)a3);
  if ((ElementsCount & 0xFE) == 0)
  {
    v27 = 0;
    goto LABEL_83;
  }
  v6 = 0;
  v7 = ElementsCount;
  do
  {
    ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)a3, v6, 0);
    Type = C3DMeshElementGetType((uint64_t)ElementAtIndex);
    if (!C3DMeshElementTypeDefinesSurface(Type))
      goto LABEL_28;
    if (Type >= 2)
    {
      if (Type == 4)
      {
        ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex((uint64_t)a3, 0, 0);
        v77 = 0;
        v75 = 0u;
        v76 = 0u;
        v74 = 0u;
        C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v74);
        v81[0] = v74;
        v81[1] = v75;
        v81[2] = v76;
        v82 = v77;
        v80[0] = MEMORY[0x1E0C809B0];
        v80[1] = 0x40000000;
        v80[2] = ___Z40C3DSubdivComputeElementToPatchRangeTablePN10OpenSubdiv6v3_1_13Far15TopologyRefinerEPKNS1_10PatchTableEP9__C3DMesh_block_invoke;
        v80[3] = &unk_1EA5A2FC0;
        v80[4] = &v86;
        C3DIndicesContentEnumeratePrimitivesByEvaluatingPrimitiveRanges((uint64_t)v81, (uint64_t)v80, v76);
        goto LABEL_11;
      }
      if (Type != 5)
      {
        v12 = scn_default_log();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          C3DSubdivComputeElementToPatchRangeTable(&buf, v79, v12);
        goto LABEL_11;
      }
    }
    PrimitiveCountByEvaluatingPrimitiveRanges = C3DMeshElementGetPrimitiveCountByEvaluatingPrimitiveRanges((uint64_t)ElementAtIndex);
    *((_DWORD *)v87 + 6) += 3 * PrimitiveCountByEvaluatingPrimitiveRanges;
LABEL_11:
    v13 = v87;
    v14 = v84;
    if (v84 >= v85)
    {
      v16 = v83;
      v17 = (v84 - v83) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
LABEL_84:
        abort();
      v19 = v85 - v83;
      if ((v85 - v83) >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v85, v20);
        v16 = v83;
        v14 = v84;
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      *(_DWORD *)v22 = *((_DWORD *)v13 + 6);
      v15 = v22 + 4;
      while (v14 != v16)
      {
        v23 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      v83 = v22;
      v84 = v15;
      v85 = &v21[4 * v20];
      if (v16)
        operator delete(v16);
    }
    else
    {
      *(_DWORD *)v84 = *((_DWORD *)v87 + 6);
      v15 = v14 + 4;
    }
    v84 = v15;
LABEL_28:
    ++v6;
  }
  while (v6 != v7);
  v24 = v83;
  v25 = v84 - v83;
  v26 = (unint64_t)(v84 - v83) >> 2;
  if (v26 >= 2)
  {
    OpenSubdiv::v3_1_1::Osd::CpuPatchTable::CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)&v74, a2);
    v70 = v74.n128_u64[0];
    *(_QWORD *)v71 = v77;
    v28 = v74.n128_u64[1] - v74.n128_u64[0];
    v69 = ((v74.n128_u64[1] - v74.n128_u64[0]) >> 4);
    std::vector<std::vector<CFRange>>::vector(v73, v69);
    v27 = (_QWORD *)operator new();
    std::vector<std::vector<std::vector<CFRange>>>::vector(v27, (v25 >> 2), v73);
    if ((v28 & 0xFFFFFFFF0) == 0)
    {
LABEL_81:
      v90 = (void **)v73;
      std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v90);
      OpenSubdiv::v3_1_1::Osd::CpuPatchTable::~CpuPatchTable((OpenSubdiv::v3_1_1::Osd::CpuPatchTable *)&v74);
      v24 = v83;
      if (v83)
        goto LABEL_82;
      goto LABEL_83;
    }
    v29 = 0;
    while (1)
    {
      v30 = v70 + 16 * v29;
      v31 = *(unsigned int *)(v30 + 4);
      if ((_DWORD)v31)
        break;
LABEL_80:
      if (++v29 == v69)
        goto LABEL_81;
    }
    v32 = 0;
    v72 = *(_DWORD *)(v30 + 12);
    while (1)
    {
      v33 = 0;
      while ((*(_DWORD *)(*(_QWORD *)v71 + 12 * (v72 + v32)) & 0xFFFFFFFu) >= *(_DWORD *)&v83[4 * v33])
      {
        v34 = ++v33;
        if (v33 >= v26)
          goto LABEL_42;
      }
      v34 = v33;
LABEL_42:
      if (v34 >= v26)
      {
        v35 = scn_default_log();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
          C3DSubdivComputeElementToFaceRangeTable(v91, v92, v35);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27[1] - *v27) >> 3) <= v33)
        goto LABEL_84;
      v37 = (uint64_t *)(*v27 + 24 * v33);
      v36 = *v37;
      if (0xAAAAAAAAAAAAAAABLL * ((v37[1] - *v37) >> 3) <= v29)
        goto LABEL_84;
      v38 = (char **)(v36 + 24 * v29);
      v40 = v38 + 1;
      v39 = v38[1];
      v41 = *v38;
      v42 = (v39 - *v38) >> 4;
      if (v39 == *v38)
        break;
      v43 = *((_QWORD *)v39 - 1);
      if (v32 != (_DWORD)v43 + *((_DWORD *)v39 - 4))
      {
        v58 = v36 + 24 * v29;
        v61 = *(_QWORD *)(v58 + 16);
        v60 = (_QWORD *)(v58 + 16);
        v59 = v61;
        if ((unint64_t)v39 < v61)
        {
LABEL_63:
          *(_QWORD *)v39 = v32;
          *((_QWORD *)v39 + 1) = 1;
          v57 = v39 + 16;
          goto LABEL_78;
        }
        v62 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          goto LABEL_84;
        v63 = v59 - (_QWORD)v41;
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v60, v64);
          v39 = *v40;
          v41 = *v38;
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[16 * v42];
        *(_QWORD *)v66 = v32;
        *((_QWORD *)v66 + 1) = 1;
        v67 = v66;
        if (v39 != v41)
        {
          do
          {
            *((_OWORD *)v67 - 1) = *((_OWORD *)v39 - 1);
            v67 -= 16;
            v39 -= 16;
          }
          while (v39 != v41);
          v41 = *v38;
        }
        *v38 = v67;
        v57 = v66 + 16;
        *v40 = v66 + 16;
        *v60 = &v65[16 * v64];
        if (!v41)
          goto LABEL_78;
        goto LABEL_77;
      }
      *((_QWORD *)v39 - 1) = v43 + 1;
LABEL_79:
      if (++v32 == v31)
        goto LABEL_80;
    }
    v44 = v36 + 24 * v29;
    v47 = *(_QWORD *)(v44 + 16);
    v46 = (_QWORD *)(v44 + 16);
    v45 = v47;
    if ((unint64_t)v39 < v47)
      goto LABEL_63;
    v48 = v45 - (_QWORD)v41;
    if (v48 >> 3 <= (unint64_t)(v42 + 1))
      v49 = v42 + 1;
    else
      v49 = v48 >> 3;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
      v50 = 0xFFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    v51 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v46, v50);
    v53 = &v51[16 * v42];
    *(_QWORD *)v53 = v32;
    *((_QWORD *)v53 + 1) = 1;
    v54 = *v40;
    v55 = *v38;
    v56 = v53;
    if (*v40 != *v38)
    {
      do
      {
        *((_OWORD *)v56 - 1) = *((_OWORD *)v54 - 1);
        v56 -= 16;
        v54 -= 16;
      }
      while (v54 != v55);
      v54 = *v38;
    }
    *v38 = v56;
    v57 = v53 + 16;
    *v40 = v53 + 16;
    *v46 = &v51[16 * v52];
    if (!v54)
    {
LABEL_78:
      *v40 = v57;
      goto LABEL_79;
    }
    v41 = v54;
LABEL_77:
    operator delete(v41);
    goto LABEL_78;
  }
  v27 = 0;
  if (!v83)
    goto LABEL_83;
LABEL_82:
  v84 = v24;
  operator delete(v24);
LABEL_83:
  _Block_object_dispose(&v86, 8);
  return v27;
}

uint64_t ___Z40C3DSubdivComputeElementToPatchRangeTablePN10OpenSubdiv6v3_1_13Far15TopologyRefinerEPKNS1_10PatchTableEP9__C3DMesh_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;

  if (a4 == 4)
    v4 = 1;
  else
    v4 = a4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += v4;
  return result;
}

uint64_t C3DSubdivCreateMesh(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __C3DMesh *a5)
{
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  CFIndex v14;
  uint64_t v15;
  __CFArray *Mutable;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  const void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const void **v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int v37;
  void **v38;
  unint64_t v39;
  unsigned int v40;
  char *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  OpenSubdiv::v3_1_1::Vtr::internal::Level *v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  unsigned int v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int i;
  unsigned int j;
  int *FaceFVarValues;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  int v64;
  NSObject *v65;
  unint64_t v66;
  CFDataRef v67;
  uint64_t v68;
  const void **v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  const __CFArray *v74;
  const void *v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  unint64_t v79;
  int v80;
  const void **v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  CFAllocatorRef v87;
  _BYTE *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  void **v92;
  void **v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint8_t v97[4];
  _BYTE v98[28];

  *(_QWORD *)&v98[12] = *MEMORY[0x1E0C80C00];
  v10 = (OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(a3 + 88)
                                                    + 24 * (((unint64_t)*(unsigned __int8 *)(a3 + 8) >> 2) & 0xF));
  v94 = 0;
  v95 = 0;
  v96 = 0;
  __C3DSubdivCreateMesh(a2, a4, v10, a1 + 9, 0, (void **)&v94);
  __C3DSubdivCreateMesh(a2, a4, v10, a1 + 18, 0, (void **)&v94);
  v12 = (_QWORD *)a1[27];
  v13 = (_QWORD *)a1[28];
  while (v12 != v13)
  {
    __C3DSubdivCreateMesh(a2, a4, v10, v12, 1, (void **)&v94);
    v12 += 9;
  }
  v84 = &v76;
  v14 = (-85 * (((_DWORD)v95 - (_DWORD)v94) >> 3));
  MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v76 - v15;
  v87 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable(v87, v14, MEMORY[0x1E0C9B378]);
  if (v14)
  {
    v17 = 0;
    v18 = 24 * v14;
    v19 = v88;
    do
    {
      v20 = (const void **)&v94[v17];
      if (v94[v17])
        v21 = v94[v17 + 1] + 1;
      else
        v21 = 0;
      *v19++ = v21;
      CFArrayAppendValue(Mutable, v20[2]);
      CFRelease(v20[2]);
      v17 += 24;
    }
    while (v18 != v17);
  }
  v23 = a1[6];
  v22 = a1[7];
  v24 = C3DSubdivComputeElementToFaceRangeTable((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a3, a5);
  v25 = (-85 * ((v24[1] - *v24) >> 3));
  MEMORY[0x1E0C80A78](v24);
  v28 = (const void **)((char *)&v76 - v27);
  if (v26 >= 0x200)
    v29 = 512;
  else
    v29 = v26;
  bzero((char *)&v76 - v27, v29);
  if (v25)
  {
    v30 = 0;
    v31 = (unint64_t)(v22 - v23) >> 5;
    v32 = v31;
    v80 = v31 + 1;
    v79 = 3 * (v31 + 1);
    v33 = 6 * (v31 + 1);
    v77 = v98;
    v82 = v25;
    v83 = v24;
    v81 = v28;
    v78 = v33;
    do
    {
      v34 = *v24;
      if (0xAAAAAAAAAAAAAAABLL * ((v24[1] - *v24) >> 3) <= v30)
        abort();
      v86 = v30;
      std::vector<CFRange>::vector(&v92, v34 + 24 * v30);
      v35 = v92;
      v36 = v93;
      if (v92 == v93)
      {
        v37 = 0;
      }
      else
      {
        v37 = 0;
        v38 = v92;
        do
        {
          v37 += *((_DWORD *)v38 + 2);
          v38 += 2;
        }
        while (v38 != v93);
      }
      v39 = (v33 * v37);
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v85 = v39;
      if ((_DWORD)v39)
      {
        v40 = v33 * v37;
        std::vector<float>::__vallocate[abi:nn180100](&v89, v39);
        v41 = v90;
        bzero(v90, 4 * v40);
        v90 = &v41[4 * v40];
        v35 = v92;
        v36 = v93;
      }
      if (v35 == v36)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        do
        {
          v43 = *(_DWORD *)v35;
          v44 = *((_DWORD *)v35 + 2) + *(_DWORD *)v35 - 1;
          if (v44 >= *(_DWORD *)v35)
          {
            v45 = *v10;
            v46 = *((_QWORD *)*v10 + 3);
            v47 = v89;
            v48 = 2 * v43;
            v49 = *(_DWORD *)v35;
            do
            {
              if (*(_DWORD *)(v46 + 4 * v48) != 4)
                C3DSubdivCreateMesh();
              v50 = (int *)(*((_QWORD *)v45 + 6) + 4 * *(int *)(v46 + 4 * (v48 + 1)));
              v51 = *v50;
              v52 = v50[1];
              v53 = v50[2];
              LODWORD(v50) = v50[3];
              v47[v42] = v51;
              v47[v42 + 1] = v52;
              v47[v42 + 2] = v53;
              v47[v42 + 3] = v51;
              v54 = v42 + 5;
              v47[v42 + 4] = v53;
              v42 += 6;
              v47[v54] = (_DWORD)v50;
              ++v49;
              v48 += 2;
            }
            while (v49 <= v44);
          }
          if (v32)
          {
            for (i = 0; i != v32; ++i)
            {
              for (j = v43; j <= v44; v63[v64] = v62)
              {
                FaceFVarValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::Level::getFaceFVarValues(*v10, j, i);
                if (v58 != 4)
                  C3DSubdivCreateMesh();
                v59 = *FaceFVarValues;
                v60 = FaceFVarValues[1];
                v61 = FaceFVarValues[2];
                v62 = FaceFVarValues[3];
                v63 = v89;
                v89[v42] = *FaceFVarValues;
                v63[v42 + 1] = v60;
                v63[v42 + 2] = v61;
                v63[v42 + 3] = v59;
                v63[v42 + 4] = v61;
                v64 = v42 + 5;
                v42 += 6;
                ++j;
              }
            }
          }
          v35 += 2;
        }
        while (v35 != v36);
      }
      if (v42 != (_DWORD)v85)
      {
        v65 = scn_default_log();
        if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
          C3DSubdivCreateMesh(v97, v77, v65);
      }
      v66 = ((v90 - (char *)v89) >> 2) / v79;
      v67 = CFDataCreate(v87, (const UInt8 *)v89, v90 - (char *)v89);
      v68 = C3DMeshElementCreate();
      C3DMeshElementInitIndexed(v68, 0, v66, v80, 0, v67, 4);
      CFRelease(v67);
      v69 = v81;
      v70 = v86;
      v81[v86] = (const void *)v68;
      v24 = v83;
      v33 = v78;
      if (v89)
      {
        v90 = (char *)v89;
        operator delete(v89);
      }
      v71 = v82;
      if (v92)
      {
        v93 = v92;
        operator delete(v92);
      }
      v30 = v70 + 1;
    }
    while (v30 < v71);
    v74 = CFArrayCreate(v87, v69, v71, MEMORY[0x1E0C9B378]);
    do
    {
      v75 = *v69++;
      CFRelease(v75);
      --v71;
    }
    while (v71);
  }
  else
  {
    v74 = CFArrayCreate(v87, v28, 0, MEMORY[0x1E0C9B378]);
  }
  v92 = (void **)v24;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v92);
  MEMORY[0x1DF0D41C0](v24, 0x20C40960023A9);
  v72 = C3DMeshCreateWithMeshSourcesAndMeshElements(Mutable, v74, (uint64_t)v88);
  CFRelease(Mutable);
  CFRelease(v74);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return v72;
}

void __C3DSubdivCreateMesh(uint64_t a1, uint64_t *a2, OpenSubdiv::v3_1_1::Vtr::internal::Level **a3, _QWORD *a4, int a5, void **a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = a4[1] - *a4;
  if (v12)
  {
    v13 = 0;
    v14 = v12 / 112;
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    do
    {
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(*a4 + v13, a3, a2, a5, a1 + 2, a6);
      v13 += 112;
      --v15;
    }
    while (v15);
  }
  v16 = a4[4] - a4[3];
  if (v16)
  {
    v17 = 0;
    v18 = v16 / 112;
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v18;
    do
    {
      _ZN23C3DSubdivCPUPrimvarDataIDv3_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(a4[3] + v17, a3, a2, a5, a1 + 2, a6);
      v17 += 112;
      --v19;
    }
    while (v19);
  }
  v20 = a4[7] - a4[6];
  if (v20)
  {
    v21 = 0;
    v22 = v20 / 112;
    v23 = a1 + 2;
    if (v22 <= 1)
      v24 = 1;
    else
      v24 = v22;
    do
    {
      _ZN23C3DSubdivCPUPrimvarDataIDv4_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(a4[6] + v21, a3, a2, a5, v23, a6);
      v21 += 112;
      --v24;
    }
    while (v24);
  }
}

void C3DGeometryInvalidateSubdivCreaseAndCornerTopologyInfo(__C3DGeometry *a1)
{
  void **var7;

  var7 = (void **)a1->var10.var7;
  if (var7)
  {
    free(var7[17]);
    free(var7[18]);
    free(var7[20]);
    free(var7[21]);
    *((_DWORD *)var7 + 32) = 0;
    var7[17] = 0;
    var7[18] = 0;
    *((_DWORD *)var7 + 38) = 0;
    var7[20] = 0;
    var7[21] = 0;
  }
}

void _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE9push_backB8nn180100ERKS3_(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    if ((unint64_t)(v9 + 1) > 0x249249249249249)
      abort();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x124924924924924)
      v12 = 0x249249249249249;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorI23C3DSubdivCPUPrimvarDataIDv2_fEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS8_m(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[112 * v9];
    v17 = &v13[112 * v12];
    _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2ERKS1_((uint64_t)v15, a2);
    v16 = v15 + 112;
    _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(a1, &v14);
    v8 = a1[1];
    _ZNSt3__114__split_bufferI23C3DSubdivCPUPrimvarDataIDv2_fERNS_9allocatorIS3_EEED2Ev(&v14);
  }
  else
  {
    _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2ERKS1_(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 112;
  }
  a1[1] = v8;
}

uint64_t _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2EPK15__C3DMeshSourceP29C3DGeometrySubdivTopologyInfoPN10OpenSubdiv6v3_1_13Far15TopologyRefinerEh37C3DSubdivPrimvarDataInterpolationMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  unint64_t v9;
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v10;
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v11;
  unint64_t Count;
  unint64_t NumFVarValues;
  int NumFVarValuesTotal;
  unint64_t v15;
  uint64_t Content;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float v20;
  float v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  float32x4_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = a5;
  v9 = ((unint64_t)*(unsigned __int8 *)(a4 + 8) >> 2) & 0xF;
  *(_DWORD *)(a1 + 76) = v9;
  *(_QWORD *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 88) = a6;
  v10 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level ***)(a4 + 88);
  v11 = &v10[3 * v9];
  if (a6 == 2)
  {
    Count = C3DMeshSourceGetCount(a2);
    NumFVarValues = (int)OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*v11, *(unsigned __int8 *)(a1 + 72));
    NumFVarValuesTotal = OpenSubdiv::v3_1_1::Far::TopologyRefiner::GetNumFVarValuesTotal((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a4, *(unsigned __int8 *)(a1 + 72));
    v15 = (int)(NumFVarValuesTotal
              - OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*v10, *(unsigned __int8 *)(a1 + 72)))
        - NumFVarValues;
    std::vector<ClippedCorner>::resize(a1, Count);
    Content = C3DMeshSourceGetContent(a2);
    if ((_DWORD)Count)
    {
      v22 = Content;
      v23 = 0;
      v24 = 0;
      v25 = v17;
      v26 = v18;
      do
      {
        *(double *)v19.i64 = C3DConvertFloatingTypeToFloat4(v25, (float *)(v22 + v23), v19, v20, v21);
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v24++) = v19.i64[0];
        v23 += v26;
      }
      while ((_DWORD)Count != v24);
    }
  }
  else
  {
    v28 = *((int *)*v10 + 2);
    NumFVarValues = *((int *)*v11 + 2);
    v15 = *(int *)(a4 + 20) - v28 - NumFVarValues;
    std::vector<ClippedCorner>::resize(a1, v28);
    v29 = C3DMeshSourceGetContent(a2);
    if ((_DWORD)v28)
    {
      v35 = v29;
      v36 = 0;
      v37 = v28;
      v38 = v30;
      v39 = v31;
      do
      {
        *(double *)v32.i64 = C3DConvertFloatingTypeToFloat4(v38, (float *)(v35 + *(int *)(*(_QWORD *)(a3 + 32) + 4 * v36) * (uint64_t)v39), v32, v33, v34);
        *(_QWORD *)(*(_QWORD *)a1 + 8 * (int)v36++) = v32.i64[0];
      }
      while (v37 != (_DWORD)v36);
    }
  }
  std::vector<ClippedCorner>::resize(a1 + 24, v15);
  std::vector<ClippedCorner>::resize(a1 + 48, NumFVarValues);
  v40 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 104) = v40;
  return a1;
}

double _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2ERKS1_(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v6;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v7;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v8;
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v9;
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 104) = v11;
  return result;
}

void _ZNSt3__16vectorI23C3DSubdivCPUPrimvarDataIDv2_fENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 112;
    _ZN23C3DSubdivCPUPrimvarDataIDv2_fEC2ERKS1_(v6 - 112, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorI23C3DSubdivCPUPrimvarDataIDv2_fEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS8_m(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(112 * a2);
}

void **_ZNSt3__114__split_bufferI23C3DSubdivCPUPrimvarDataIDv2_fERNS_9allocatorIS3_EEED2Ev(void **a1)
{
  _ZNSt3__114__split_bufferI23C3DSubdivCPUPrimvarDataIDv2_fERNS_9allocatorIS3_EEE5clearB8nn180100Ev(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void _ZNSt3__114__split_bufferI23C3DSubdivCPUPrimvarDataIDv2_fERNS_9allocatorIS3_EEE5clearB8nn180100Ev(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 112;
    _ZNSt3__19allocatorI23C3DSubdivCPUPrimvarDataIDv4_fEE7destroyB8nn180100EPS3_(v4, i - 112);
  }
}

uint64_t _ZN23C3DSubdivCPUPrimvarDataIDv3_fEC2EPK15__C3DMeshSourceP29C3DGeometrySubdivTopologyInfoPN10OpenSubdiv6v3_1_13Far15TopologyRefinerEh37C3DSubdivPrimvarDataInterpolationMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  unint64_t v9;
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v10;
  OpenSubdiv::v3_1_1::Vtr::internal::Level **v11;
  unint64_t Count;
  unint64_t NumFVarValues;
  int NumFVarValuesTotal;
  unint64_t v15;
  uint64_t Content;
  unsigned __int8 v17;
  unsigned __int8 v18;
  float32x4_t v19;
  float v20;
  float v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  float32x4_t v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 72) = a5;
  v9 = ((unint64_t)*(unsigned __int8 *)(a4 + 8) >> 2) & 0xF;
  *(_DWORD *)(a1 + 76) = v9;
  *(_QWORD *)(a1 + 80) = a2;
  *(_BYTE *)(a1 + 88) = a6;
  v10 = *(OpenSubdiv::v3_1_1::Vtr::internal::Level ***)(a4 + 88);
  v11 = &v10[3 * v9];
  if (a6 == 2)
  {
    Count = C3DMeshSourceGetCount(a2);
    NumFVarValues = (int)OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*v11, *(unsigned __int8 *)(a1 + 72));
    NumFVarValuesTotal = OpenSubdiv::v3_1_1::Far::TopologyRefiner::GetNumFVarValuesTotal((OpenSubdiv::v3_1_1::Far::TopologyRefiner *)a4, *(unsigned __int8 *)(a1 + 72));
    v15 = (int)(NumFVarValuesTotal
              - OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*v10, *(unsigned __int8 *)(a1 + 72)))
        - NumFVarValues;
    _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1, Count);
    Content = C3DMeshSourceGetContent(a2);
    if ((_DWORD)Count)
    {
      v22 = Content;
      v23 = 0;
      v24 = 0;
      v25 = v17;
      v26 = v18;
      do
      {
        *(double *)v19.i64 = C3DConvertFloatingTypeToFloat4(v25, (float *)(v22 + v23), v19, v20, v21);
        *(float32x4_t *)(*(_QWORD *)a1 + 16 * v24++) = v19;
        v23 += v26;
      }
      while ((_DWORD)Count != v24);
    }
  }
  else
  {
    v28 = *((int *)*v10 + 2);
    NumFVarValues = *((int *)*v11 + 2);
    v15 = *(int *)(a4 + 20) - v28 - NumFVarValues;
    _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1, v28);
    v29 = C3DMeshSourceGetContent(a2);
    if ((_DWORD)v28)
    {
      v35 = v29;
      v36 = 0;
      v37 = v28;
      v38 = v30;
      v39 = v31;
      do
      {
        *(double *)v32.i64 = C3DConvertFloatingTypeToFloat4(v38, (float *)(v35 + *(int *)(*(_QWORD *)(a3 + 32) + 4 * v36) * (uint64_t)v39), v32, v33, v34);
        *(float32x4_t *)(*(_QWORD *)a1 + 16 * (int)v36++) = v32;
      }
      while (v37 != (_DWORD)v36);
    }
  }
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1 + 24, v15);
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1 + 48, NumFVarValues);
  v40 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 104) = v40;
  return a1;
}

void _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void _ZN23C3DSubdivCPUPrimvarDataIDv2_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(uint64_t a1, uint64_t a2, int **a3, uint64_t a4, double a5, double a6)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(a1 + 76) < (int)a2)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *(unsigned __int8 *)(a1 + 88);
  if (*(_DWORD *)(a1 + 76) != (_DWORD)a2)
  {
    if (v18 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fES7_EEviRKT_RT0_i(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104), *(unsigned __int8 *)(a1 + 72));
    }
    else if (v18 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t)a3, a2, (_QWORD *)(a1 + 96), (_QWORD *)(a1 + 104), a5, a6);
    }
    else
    {
      if (*(_BYTE *)(a1 + 88))
      {
LABEL_20:
        v19 = *(_QWORD *)(a1 + 104);
        v20 = v19 + 8 * *(int *)(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 24 * (int)a2) + 8);
        *(_QWORD *)(a1 + 96) = v19;
        *(_QWORD *)(a1 + 104) = v20;
        return;
      }
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104));
    }
    if (*(_BYTE *)(a1 + 88) == 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) += 8
                             * (int)OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(a4 + 88)+ 24 * (int)a2), *(unsigned __int8 *)(a1 + 72));
      return;
    }
    goto LABEL_20;
  }
  if (v18 == 2)
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  }
  else if (v18 == 1)
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t)a3, a2, (_QWORD *)(a1 + 96), (_QWORD *)(a1 + 48), a5, a6);
  }
  else if (!*(_BYTE *)(a1 + 88))
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48));
  }
  std::vector<ClippedCorner>::resize(a1, 0);
  std::vector<ClippedCorner>::resize(a1 + 24, 0);
}

void _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(uint64_t a1, uint64_t a2, int **a3, uint64_t a4, double a5, double a6, float32x4_t a7)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t j;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  uint64_t i;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v10 = a1;
  if (*(_DWORD *)(a1 + 76) < (int)a2)
  {
    v11 = scn_default_log();
    a1 = os_log_type_enabled(v11, OS_LOG_TYPE_FAULT);
    if ((_DWORD)a1)
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(v11, a2, (uint64_t)a3, v12, v13, v14, v15, v16);
  }
  v17 = *(unsigned __int8 *)(v10 + 88);
  if (*(_DWORD *)(v10 + 76) != (_DWORD)a2)
  {
    if (v17 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv3_fES7_EEviRKT_RT0_i(a3, a2, (uint64_t *)(v10 + 96), (uint64_t *)(v10 + 104), *(unsigned __int8 *)(v10 + 72));
    }
    else if (v17 == 1)
    {
      if ((int)a2 < 1
        || (v37 = *((_QWORD *)*a3 + 8), (int)((unint64_t)(*((_QWORD *)*a3 + 9) - v37) >> 3) < (int)a2))
      {
        _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(a1, a2, (uint64_t)a3);
      }
      v38 = *(_QWORD *)(v37 + 8 * (a2 - 1));
      v39 = *(int **)(v38 + 8);
      if (*(int *)(v38 + 52) >= 1 && *v39 >= 1)
      {
        v40 = 0;
        do
        {
          v41 = *(int *)(*(_QWORD *)(v38 + 168) + 4 * v40);
          if ((_DWORD)v41 != -1)
          {
            v42 = *((_QWORD *)v39 + 6);
            v43 = *(unsigned int *)(*((_QWORD *)v39 + 3) + 8 * v40);
            v44 = *(int *)(*((_QWORD *)v39 + 3) + 8 * v40 + 4);
            *(_OWORD *)(*(_QWORD *)(v10 + 104) + 16 * v41) = 0uLL;
            if ((int)v43 >= 1)
            {
              v45 = (int *)(v42 + 4 * v44);
              a7.f32[0] = 1.0 / (float)(int)v43;
              a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
              do
              {
                v46 = *v45++;
                *(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v41) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 104)+ 16 * v41), *(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * v46), a7);
                --v43;
              }
              while (v43);
            }
          }
          ++v40;
        }
        while (v40 < *v39);
      }
      v47 = v39[1];
      if (v47 >= 1)
      {
        v48 = 0;
        v49 = 0;
        v50.i64[0] = 0x3F0000003F000000;
        v50.i64[1] = 0x3F0000003F000000;
        do
        {
          v51 = *(int *)(*(_QWORD *)(v38 + 216) + 4 * v49);
          if ((_DWORD)v51 != -1)
          {
            v52 = (int *)(*((_QWORD *)v39 + 15) + v48);
            *(_OWORD *)(*(_QWORD *)(v10 + 104) + 16 * v51) = 0uLL;
            *(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v51) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v51), v50, *(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * *v52));
            *(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v51) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v51), v50, *(float32x4_t *)(*(_QWORD *)(v10 + 96)+ 16 * v52[1]));
            v47 = v39[1];
          }
          ++v49;
          v48 += 8;
        }
        while (v49 < v47);
      }
      v53 = v39[2];
      if (v53 >= 1)
      {
        for (i = 0; i < v53; ++i)
        {
          v55 = *(int *)(*(_QWORD *)(v38 + 240) + 4 * i);
          if ((_DWORD)v55 != -1)
          {
            *(_OWORD *)(*(_QWORD *)(v10 + 104) + 16 * v55) = 0uLL;
            *(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v55) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * i), *(float32x4_t *)(*(_QWORD *)(v10 + 104) + 16 * v55));
            v53 = v39[2];
          }
        }
      }
    }
    else
    {
      if (*(_BYTE *)(v10 + 88))
      {
LABEL_58:
        v56 = *(_QWORD *)(v10 + 104);
        v57 = v56 + 16 * *(int *)(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 24 * (int)a2) + 8);
        *(_QWORD *)(v10 + 96) = v56;
        *(_QWORD *)(v10 + 104) = v57;
        return;
      }
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(v10 + 96), (uint64_t *)(v10 + 104));
    }
    if (*(_BYTE *)(v10 + 88) == 2)
    {
      *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 104);
      *(_QWORD *)(v10 + 104) += 16
                              * (int)OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(a4 + 88)+ 24 * (int)a2), *(unsigned __int8 *)(v10 + 72));
      return;
    }
    goto LABEL_58;
  }
  if (v17 == 2)
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(a3, a2, (uint64_t *)(v10 + 96), (uint64_t *)(v10 + 48), *(unsigned __int8 *)(v10 + 72));
  }
  else if (v17 == 1)
  {
    if ((int)a2 < 1
      || (v18 = *((_QWORD *)*a3 + 8), (int)((unint64_t)(*((_QWORD *)*a3 + 9) - v18) >> 3) < (int)a2))
    {
      _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(a1, a2, (uint64_t)a3);
    }
    v19 = *(_QWORD *)(v18 + 8 * (a2 - 1));
    v20 = *(int **)(v19 + 8);
    if (*(int *)(v19 + 52) >= 1 && *v20 >= 1)
    {
      v21 = 0;
      do
      {
        v22 = *(int *)(*(_QWORD *)(v19 + 168) + 4 * v21);
        if ((_DWORD)v22 != -1)
        {
          v23 = *((_QWORD *)v20 + 6);
          v24 = *(unsigned int *)(*((_QWORD *)v20 + 3) + 8 * v21);
          v25 = *(int *)(*((_QWORD *)v20 + 3) + 8 * v21 + 4);
          *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v22) = 0uLL;
          if ((int)v24 >= 1)
          {
            v26 = (int *)(v23 + 4 * v25);
            a7.f32[0] = 1.0 / (float)(int)v24;
            a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
            do
            {
              v27 = *v26++;
              *(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v22) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v22), *(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * v27), a7);
              --v24;
            }
            while (v24);
          }
        }
        ++v21;
      }
      while (v21 < *v20);
    }
    v28 = v20[1];
    if (v28 >= 1)
    {
      v29 = 0;
      v30 = 0;
      v31.i64[0] = 0x3F0000003F000000;
      v31.i64[1] = 0x3F0000003F000000;
      do
      {
        v32 = *(int *)(*(_QWORD *)(v19 + 216) + 4 * v30);
        if ((_DWORD)v32 != -1)
        {
          v33 = (int *)(*((_QWORD *)v20 + 15) + v29);
          *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v32) = 0uLL;
          *(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v32) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v32), v31, *(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * *v33));
          *(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v32) = vmlaq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v32), v31, *(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * v33[1]));
          v28 = v20[1];
        }
        ++v30;
        v29 += 8;
      }
      while (v30 < v28);
    }
    v34 = v20[2];
    if (v34 >= 1)
    {
      for (j = 0; j < v34; ++j)
      {
        v36 = *(int *)(*(_QWORD *)(v19 + 240) + 4 * j);
        if ((_DWORD)v36 != -1)
        {
          *(_OWORD *)(*(_QWORD *)(v10 + 48) + 16 * v36) = 0uLL;
          *(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v36) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v10 + 96) + 16 * j), *(float32x4_t *)(*(_QWORD *)(v10 + 48) + 16 * v36));
          v34 = v20[2];
        }
      }
    }
  }
  else if (!*(_BYTE *)(v10 + 88))
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(v10 + 96), (uint64_t *)(v10 + 48));
  }
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(v10, 0);
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(v10 + 24, 0);
}

void _ZN23C3DSubdivCPUPrimvarDataIDv4_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE(uint64_t a1, uint64_t a2, int **a3, uint64_t a4, double a5, float32x4_t a6)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_DWORD *)(a1 + 76) < (int)a2)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v18 = *(unsigned __int8 *)(a1 + 88);
  if (*(_DWORD *)(a1 + 76) != (_DWORD)a2)
  {
    if (v18 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv4_fES7_EEviRKT_RT0_i(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104), *(unsigned __int8 *)(a1 + 72));
    }
    else if (v18 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t)a3, a2, (_QWORD *)(a1 + 96), (_QWORD *)(a1 + 104), a5, a6);
    }
    else
    {
      if (*(_BYTE *)(a1 + 88))
      {
LABEL_20:
        v19 = *(_QWORD *)(a1 + 104);
        v20 = v19 + 16 * *(int *)(*(_QWORD *)(*(_QWORD *)(a4 + 88) + 24 * (int)a2) + 8);
        *(_QWORD *)(a1 + 96) = v19;
        *(_QWORD *)(a1 + 104) = v20;
        return;
      }
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 104));
    }
    if (*(_BYTE *)(a1 + 88) == 2)
    {
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) += 16
                             * (int)OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*(OpenSubdiv::v3_1_1::Vtr::internal::Level **)(*(_QWORD *)(a4 + 88)+ 24 * (int)a2), *(unsigned __int8 *)(a1 + 72));
      return;
    }
    goto LABEL_20;
  }
  if (v18 == 2)
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
  }
  else if (v18 == 1)
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t)a3, a2, (_QWORD *)(a1 + 96), (_QWORD *)(a1 + 48), a5, a6);
  }
  else if (!*(_BYTE *)(a1 + 88))
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_((uint64_t *)a3, a2, (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 48));
  }
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1, 0);
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm(a1 + 24, 0);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t j;
  uint64_t v24;
  void *__p;
  void *v26;

  v4 = (a2 - 1);
  if ((int)a2 < 1 || (v5 = a2, (int)((*(_QWORD *)(*a1 + 72) - *(_QWORD *)(*a1 + 64)) >> 3) < (int)a2))
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0__cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v9 = *(_DWORD *)*a1;
  if (v9)
  {
    if (v9 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
    else if (v9 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      v10 = operator new(4 * v13);
      __p = v10;
    }
    v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      v15 = 0;
      for (i = 0; i < v14; ++i)
      {
        v17 = *(int *)(*(_QWORD *)(v11 + 216) + 4 * i);
        if ((_DWORD)v17 != -1)
        {
          v18 = (int *)(*(_QWORD *)(v12 + 120) + v15);
          *(_QWORD *)(*a4 + 8 * v17) = 0;
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v17), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * *v18));
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v17), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v18[1]));
          v14 = *(_DWORD *)(v12 + 4);
        }
        v15 += 8;
      }
      v10 = __p;
    }
    operator delete(v10);
    v19 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v21 = *(_QWORD *)(v20 + 8);
    v26 = 0;
    if ((2 * *(_DWORD *)(v21 + 20)) >= 0x21)
    {
      v19 = operator new(4 * (2 * *(_DWORD *)(v21 + 20)));
      v26 = v19;
    }
    v22 = *(_DWORD *)(v21 + 8);
    if (v22 >= 1)
    {
      for (j = 0; j < v22; ++j)
      {
        v24 = *(int *)(*(_QWORD *)(v20 + 240) + 4 * j);
        if ((_DWORD)v24 != -1)
        {
          *(_QWORD *)(*a4 + 8 * v24) = 0;
          *(float32x2_t *)(*a4 + 8 * v24) = vadd_f32(*(float32x2_t *)(*a3 + 8 * j), *(float32x2_t *)(*a4 + 8 * v24));
          v22 = *(_DWORD *)(v21 + 8);
        }
      }
      v19 = v26;
    }
    operator delete(v19);
  }
}

uint64_t _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t j;
  uint64_t v23;

  if ((int)a2 < 1
    || (v6 = *(_QWORD *)(*(_QWORD *)result + 64),
        (int)((unint64_t)(*(_QWORD *)(*(_QWORD *)result + 72) - v6) >> 3) < (int)a2))
  {
    _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(result, a2, (uint64_t)a3);
  }
  v7 = *(_QWORD *)(v6 + 8 * (a2 - 1));
  v8 = *(int **)(v7 + 8);
  if (*(int *)(v7 + 52) >= 1 && *v8 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(int *)(*(_QWORD *)(v7 + 168) + 4 * v9);
      if ((_DWORD)v10 != -1)
      {
        v11 = *((_QWORD *)v8 + 6);
        v12 = *(unsigned int *)(*((_QWORD *)v8 + 3) + 8 * v9);
        v13 = *(int *)(*((_QWORD *)v8 + 3) + 8 * v9 + 4);
        *(_QWORD *)(*a4 + 8 * v10) = 0;
        if ((int)v12 >= 1)
        {
          v14 = (int *)(v11 + 4 * v13);
          *(float *)&a6 = 1.0 / (float)(int)v12;
          a6 = COERCE_DOUBLE(vdup_lane_s32(*(int32x2_t *)&a6, 0));
          do
          {
            v15 = *v14++;
            *(float32x2_t *)(*a4 + 8 * v10) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v10), *(float32x2_t *)(*a3 + 8 * v15), *(float32x2_t *)&a6);
            --v12;
          }
          while (v12);
        }
      }
      ++v9;
    }
    while (v9 < *v8);
  }
  v16 = v8[1];
  if (v16 >= 1)
  {
    v17 = 0;
    for (i = 0; i < v16; ++i)
    {
      v19 = *(int *)(*(_QWORD *)(v7 + 216) + 4 * i);
      if ((_DWORD)v19 != -1)
      {
        v20 = (int *)(*((_QWORD *)v8 + 15) + v17);
        *(_QWORD *)(*a4 + 8 * v19) = 0;
        *(float32x2_t *)(*a4 + 8 * v19) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v19), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * *v20));
        *(float32x2_t *)(*a4 + 8 * v19) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v19), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v20[1]));
        v16 = v8[1];
      }
      v17 += 8;
    }
  }
  v21 = v8[2];
  if (v21 >= 1)
  {
    for (j = 0; j < v21; ++j)
    {
      v23 = *(int *)(*(_QWORD *)(v7 + 240) + 4 * j);
      if ((_DWORD)v23 != -1)
      {
        *(_QWORD *)(*a4 + 8 * v23) = 0;
        *(float32x2_t *)(*a4 + 8 * v23) = vadd_f32(*(float32x2_t *)(*a3 + 8 * j), *(float32x2_t *)(*a4 + 8 * v23));
        v21 = v8[2];
      }
    }
  }
  return result;
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fES7_EEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  void *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  void *__p;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    v7 = 0;
    v8 = *(int **)(v4 + 8);
    v9 = v8[5];
    v19 = (float *)&v20;
    __p = 0;
    if (v9 >= 0x11)
    {
      v7 = operator new(4 * v9);
      __p = v7;
      v19 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *(int *)(*(_QWORD *)(v4 + 168) + 4 * v10);
        if ((_DWORD)v11 != -1)
        {
          v12 = (unsigned int *)(*((_QWORD *)v8 + 3) + 8 * v10);
          v13 = *v12;
          if ((int)v13 < 1)
          {
            *(_QWORD *)(*a4 + 8 * v11) = 0;
          }
          else
          {
            v14 = *((_QWORD *)v8 + 6) + 4 * (int)v12[1];
            v15 = v19;
            v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            *(_QWORD *)(*a4 + 8 * v11) = 0;
            v17 = 0;
            v18 = 4 * v13;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v11) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v11), *(float32x2_t *)(*a3 + 8 * *(int *)(v14 + v17)), v19[v17 / 4]);
              v17 += 4;
            }
            while (v18 != v17);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      v7 = __p;
    }
    operator delete(v7);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  uint64_t v38;
  int v39;
  int v40;
  float *v41;
  int v42;
  int v43;
  uint64_t v44;
  void *__p;
  float v46[2];
  uint64_t v47;

  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v36 = *(_QWORD *)(v9 + 16);
  v40 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v41 = (float *)&v44;
  v42 = v11;
  v43 = 8;
  v38 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v41 = (float *)v7;
    v43 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v37[0] = v46;
        v37[1] = 0;
        v37[2] = v41;
        memset(&v37[3], 0, 13);
        v39 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v40, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v38, (uint64_t)v37, v20, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v14) >> 7) & 0xF);
        *(_QWORD *)(*a4 + 8 * v14) = 0;
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * *v15), v46[0]);
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * v15[1]), v46[1]);
        if (SLODWORD(v37[4]) >= 1 && (int)v18 >= 1)
        {
          v24 = 0;
          v25 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v37[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v26 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v25 + 4 * v24));
              if (v26 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v27 = *a4;
              v28 = *a4;
            }
            else
            {
              v29 = 0;
              v30 = *(int *)(v25 + 4 * v24);
              v31 = *(_QWORD *)(v10 + 24);
              v32 = *(int *)(v31 + 8 * v30 + 4);
              v33 = *(_DWORD *)(v31 + 8 * (_DWORD)v30);
              do
                v34 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v32 + 4 * v29++);
              while (i != v34);
              v35 = *(_QWORD *)(v10 + 48) + 4 * v32;
              if ((int)v29 + 1 < v33)
                v33 = 0;
              v26 = *(_DWORD *)(v35 + 4 * ((int)v29 - v33 + 1));
              v28 = *a4;
              v27 = *a3;
            }
            *(float32x2_t *)(v28 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(v28 + 8 * v14), *(float32x2_t *)(v27 + 8 * v26), v41[v24++]);
          }
          while (v24 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[5];
  float v42;
  _QWORD v43[2];
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  void *__p;
  uint64_t v54;

  v7 = 0;
  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v48 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v49 = &v52;
  v50 = v12;
  v51 = 32;
  v43[0] = v11;
  v43[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v49 = (uint64_t *)v7;
    v51 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v39 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v38 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v42 = 0.0;
        v22 = v49;
        v23 = (float *)v49 + v19;
        v40 = v19;
        v41[0] = &v42;
        v41[1] = v49;
        v41[2] = v23;
        memset(&v41[3], 0, 13);
        v44 = i;
        v45 = v15;
        v46 = *(_DWORD *)(*(_QWORD *)(v43[0] + 336) + 8 * i);
        v47 = *(_DWORD *)(*(_QWORD *)(v43[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v48, (uint64_t)v43, (uint64_t)v41, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        *(_QWORD *)(*a4 + 8 * v16) = 0;
        if (SLODWORD(v41[4]) >= 1)
        {
          if (!BYTE4(v41[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v28 = (int *)(v24 + 4 * v37);
            do
            {
              v29 = *v28++;
              v30 = *(int *)(v9[21] + 4 * v29);
              if ((_DWORD)v30 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v31 = *v23++;
              *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a4 + 8 * v30), v31);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v41[3]) >= 1)
        {
          v32 = v40;
          if (v40 >= 1)
          {
            v33 = (int *)(v39 + 4 * v38);
            do
            {
              v34 = *v33++;
              v35 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v34);
              LODWORD(v34) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * (int)v35[i == *v35]), *(float *)&v34);
              --v32;
            }
            while (v32);
          }
        }
        *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * i), v42);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  uint64_t v38;
  int v39;
  int v40;
  float *v41;
  int v42;
  int v43;
  uint64_t v44;
  void *__p;
  float v46[2];
  uint64_t v47;

  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v36 = *(_QWORD *)(v9 + 16);
  v40 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v41 = (float *)&v44;
  v42 = v11;
  v43 = 8;
  v38 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v41 = (float *)v7;
    v43 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v37[0] = v46;
        v37[1] = 0;
        v37[2] = v41;
        memset(&v37[3], 0, 13);
        v39 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v40, (int *)&v38, (uint64_t)v37, v20, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v14) >> 7) & 0xF);
        *(_QWORD *)(*a4 + 8 * v14) = 0;
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * *v15), v46[0]);
        *(float32x2_t *)(*a4 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v14), *(float32x2_t *)(*a3 + 8 * v15[1]), v46[1]);
        if (SLODWORD(v37[4]) >= 1 && (int)v18 >= 1)
        {
          v24 = 0;
          v25 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v37[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v26 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v25 + 4 * v24));
              if (v26 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v27 = *a4;
              v28 = *a4;
            }
            else
            {
              v29 = 0;
              v30 = *(int *)(v25 + 4 * v24);
              v31 = *(_QWORD *)(v10 + 24);
              v32 = *(int *)(v31 + 8 * v30 + 4);
              v33 = *(_DWORD *)(v31 + 8 * (_DWORD)v30);
              do
                v34 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v32 + 4 * v29++);
              while (i != v34);
              v35 = *(_QWORD *)(v10 + 48) + 4 * v32;
              if ((int)v29 + 1 < v33)
                v33 = 0;
              v26 = *(_DWORD *)(v35 + 4 * ((int)v29 - v33 + 1));
              v28 = *a4;
              v27 = *a3;
            }
            *(float32x2_t *)(v28 + 8 * v14) = vmla_n_f32(*(float32x2_t *)(v28 + 8 * v14), *(float32x2_t *)(v27 + 8 * v26), v41[v24++]);
          }
          while (v24 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[5];
  float v42;
  _QWORD v43[2];
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  void *__p;
  uint64_t v54;

  v7 = 0;
  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v48 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v49 = &v52;
  v50 = v12;
  v51 = 32;
  v43[0] = v11;
  v43[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v49 = (uint64_t *)v7;
    v51 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v39 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v38 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v42 = 0.0;
        v22 = v49;
        v23 = (float *)v49 + v19;
        v40 = v19;
        v41[0] = &v42;
        v41[1] = v49;
        v41[2] = v23;
        memset(&v41[3], 0, 13);
        v44 = i;
        v45 = v15;
        v46 = *(_DWORD *)(*(_QWORD *)(v43[0] + 336) + 8 * i);
        v47 = *(_DWORD *)(*(_QWORD *)(v43[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v48, (uint64_t)v43, (uint64_t)v41, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        *(_QWORD *)(*a4 + 8 * v16) = 0;
        if (SLODWORD(v41[4]) >= 1)
        {
          if (!BYTE4(v41[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v28 = (int *)(v24 + 4 * v37);
            do
            {
              v29 = *v28++;
              v30 = *(int *)(v9[21] + 4 * v29);
              if ((_DWORD)v30 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v31 = *v23++;
              *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a4 + 8 * v30), v31);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v41[3]) >= 1)
        {
          v32 = v40;
          if (v40 >= 1)
          {
            v33 = (int *)(v39 + 4 * v38);
            do
            {
              v34 = *v33++;
              v35 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v34);
              LODWORD(v34) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * (int)v35[i == *v35]), *(float *)&v34);
              --v32;
            }
            while (v32);
          }
        }
        *(float32x2_t *)(*a4 + 8 * v16) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v16), *(float32x2_t *)(*a3 + 8 * i), v42);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

int *OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(int *result, OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *this, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v18;
  float *v21;
  float v22;
  float v23;
  float v25;
  float *v26;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float *v35;
  uint64_t v36;
  float v37;
  float v38;
  float32_t v39;
  float v40;
  float *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v7 = *(_QWORD *)this;
    v8 = *((int *)this + 2);
    if (*(float *)(*(_QWORD *)(*(_QWORD *)this + 216) + 4 * v8) <= 0.0)
      goto LABEL_13;
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        v9 = *(_QWORD *)this;
        LODWORD(v10) = *((_DWORD *)this + 2);
        goto LABEL_8;
      }
    }
    else if (a4 != 4)
    {
      v9 = *(_QWORD *)this;
      v10 = *((int *)this + 2);
      v23 = *(float *)(*(_QWORD *)(*(_QWORD *)this + 216) + 4 * v10);
      if (v23 < 1.0 && ((*result & 0x60) == 0 || (float)(v23 + -1.0) <= 0.0))
      {
LABEL_8:
        v11 = *(unsigned int *)(*(_QWORD *)(v9 + 144) + 8 * (_DWORD)v10);
        *(_QWORD *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v11;
        *(_BYTE *)(a3 + 36) = 1;
        if ((*(_WORD *)result & 0x180) == 0x80)
        {
          if ((_DWORD)v11 == 2)
          {
            result = OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface::GetNumVerticesPerFace((int *)this, &v43);
            if (v43 == 3 || v44 == 3)
            {
              v37 = 0.47;
              if (v44 == 3)
                v38 = 0.47;
              else
                v38 = 0.25;
              if (v43 != 3)
                v37 = 0.25;
              v29 = (float)(v37 + v38) * 0.5;
              v39 = (float)((float)(v29 * -2.0) + 1.0) * 0.5;
              v12 = *(float32x2_t **)a3;
              v12->f32[0] = v39;
              v12->f32[1] = v39;
              v28 = *(float **)(a3 + 16);
              *v28 = v29;
              goto LABEL_50;
            }
            v12 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(_QWORD **)a3 = _D0;
LABEL_32:
            v28 = *(float **)(a3 + 16);
            *v28 = 0.25;
            v29 = 0.25;
LABEL_50:
            v28[1] = v29;
            v9 = *(_QWORD *)this;
            LODWORD(v11) = *(_DWORD *)(a3 + 32);
LABEL_51:
            v40 = *(float *)(*(_QWORD *)(v9 + 216) + 4 * *((int *)this + 2));
            *v12 = vmla_n_f32(vmul_n_f32(*v12, 1.0 - v40), (float32x2_t)0x3F0000003F000000, v40);
            if ((int)v11 >= 1)
            {
              v41 = *(float **)(a3 + 16);
              v42 = v11;
              do
              {
                *v41 = (float)(1.0 - v40) * *v41;
                ++v41;
                --v42;
              }
              while (v42);
            }
            return result;
          }
          v12 = *(float32x2_t **)a3;
          __asm { FMOV            V0.2S, #0.25 }
          **(_QWORD **)a3 = _D0;
        }
        else
        {
          v12 = *(float32x2_t **)a3;
          __asm { FMOV            V0.2S, #0.25 }
          **(_QWORD **)a3 = _D0;
          if ((_DWORD)v11 == 2)
            goto LABEL_32;
        }
        if ((int)v11 >= 1)
        {
          v35 = *(float **)(a3 + 16);
          v36 = v11;
          do
          {
            *v35++ = 0.5 / (float)(int)v11;
            --v36;
          }
          while (v36);
        }
        goto LABEL_51;
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(_QWORD *)(a3 + 28) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    v21 = *(float **)a3;
    **(_DWORD **)a3 = 1056964608;
    v22 = 0.5;
    goto LABEL_25;
  }
  if (a4 != 1)
    goto LABEL_5;
  v7 = *(_QWORD *)this;
  LODWORD(v8) = *((_DWORD *)this + 2);
LABEL_13:
  v18 = *(unsigned int *)(*(_QWORD *)(v7 + 144) + 8 * (_DWORD)v8);
  *(_QWORD *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v18;
  *(_BYTE *)(a3 + 36) = 1;
  if ((*(_WORD *)result & 0x180) == 0x80)
  {
    if ((_DWORD)v18 == 2)
    {
      result = OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface::GetNumVerticesPerFace((int *)this, &v43);
      if (v43 == 3 || v44 == 3)
      {
        v30 = 0.47;
        if (v44 == 3)
          v31 = 0.47;
        else
          v31 = 0.25;
        if (v43 != 3)
          v30 = 0.25;
        v22 = (float)(v30 + v31) * 0.5;
        v32 = (float)((float)(v22 * -2.0) + 1.0) * 0.5;
        v33 = *(float **)a3;
        *v33 = v32;
        v33[1] = v32;
        v21 = *(float **)(a3 + 16);
        *v21 = v22;
        goto LABEL_25;
      }
      __asm { FMOV            V0.2S, #0.25 }
      **(_QWORD **)a3 = _D0;
      goto LABEL_19;
    }
    __asm { FMOV            V0.2S, #0.25 }
    **(_QWORD **)a3 = _D0;
  }
  else
  {
    __asm { FMOV            V0.2S, #0.25 }
    **(_QWORD **)a3 = _D0;
    if ((_DWORD)v18 == 2)
    {
LABEL_19:
      v21 = *(float **)(a3 + 16);
      *v21 = 0.25;
      v22 = 0.25;
LABEL_25:
      v21[1] = v22;
      return result;
    }
  }
  if ((int)v18 >= 1)
  {
    v25 = 0.5 / (float)(int)v18;
    v26 = *(float **)(a3 + 16);
    do
    {
      *v26++ = v25;
      --v18;
    }
    while (v18);
  }
  return result;
}

int *OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface::GetNumVerticesPerFace(int *this, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  v3 = this[2];
  v4 = *(_QWORD *)(*(_QWORD *)this + 144);
  v5 = *(unsigned int *)(v4 + 8 * (_DWORD)v3);
  if ((int)v5 >= 1)
  {
    v6 = (int *)(*(_QWORD *)(v2 + 168) + 4 * *(int *)(v4 + 8 * v3 + 4));
    v7 = *(_QWORD *)(v2 + 24);
    do
    {
      v8 = *v6++;
      *a2++ = *(_DWORD *)(v7 + 8 * v8);
      --v5;
    }
    while (v5);
  }
  return this;
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  float v9;
  float *v10;
  float *v11;
  int v12;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  float v25;
  int *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float *v33;
  float *v34;
  uint64_t v35;
  float *v36;
  float v37;
  uint64_t v38;
  float *v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  float *ChildSharpnessPerEdge;
  const float *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  float *v58;
  uint64_t v59;
  float *v60;
  uint64_t v61;
  float *v62;
  float v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float *v69;
  uint64_t v70;
  float *v71;
  float v72;
  float *v73;
  uint64_t v74;
  float *v75;
  float v76;
  float *v77;
  float *v78;
  uint64_t v79;
  float v80;
  float *v81;
  uint64_t v82;
  float v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    v8 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v8 != *(_DWORD *)(a2 + 24))
      OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)a1, a2, a3);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v8;
    *(_DWORD *)(a3 + 32) = v8;
    *(_BYTE *)(a3 + 36) = 1;
    **(float **)a3 = (float)(v8 - 2) / (float)(int)v8;
    if ((int)v8 >= 1)
    {
      v9 = 1.0 / (float)(v8 * v8);
      v10 = *(float **)(a3 + 8);
      v11 = *(float **)(a3 + 16);
      do
      {
        *v10++ = v9;
        *v11++ = v9;
        --v8;
      }
      while (v8);
    }
    return;
  }
  v12 = a4;
  if (a5)
    v14 = 1;
  else
    v14 = a4 == 0;
  if (v14)
    v15 = a5;
  else
    v15 = a4;
  v16 = *(int *)(a2 + 24);
  v17 = *(unsigned int *)(a2 + 24);
  v18 = 4 * v16;
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v84 - ((4 * v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v19, 4 * v16);
  if ((v12 | 4) != 4 && v15 == v12)
  {
    v19 = 0;
    v25 = 0.0;
LABEL_27:
    if (v12 == 4)
    {
      v85 = v15;
      v86 = v17;
      v35 = 0xFFFFFFFF00000000;
      v36 = (float *)v19;
      do
      {
        v37 = *v36++;
        v35 += 0x100000000;
      }
      while (v37 <= 0.0);
      v38 = v16 << 32;
      v39 = (float *)&v19[4 * v16 - 4];
      do
      {
        v40 = *v39--;
        v38 -= 0x100000000;
      }
      while (v40 <= 0.0);
      v41 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = v41;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      v42 = *(_QWORD *)(a3 + 8);
      if ((int)v41 >= 1)
        bzero(*(void **)(a3 + 8), 4 * v41);
      *(_DWORD *)(v42 + (v35 >> 30)) = 1040187392;
      *(_DWORD *)(v42 + (v38 >> 30)) = 1040187392;
      v17 = v86;
      v15 = v85;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v15 != v12)
    {
      v87 = *a1;
      MEMORY[0x1E0C80A78](v20);
      bzero((char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), 4 * v16);
      ChildSharpnessPerEdge = OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge((OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *)a2, (const OpenSubdiv::v3_1_1::Sdc::Crease *)&v87, (float *)((char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0)));
      v44 = ChildSharpnessPerEdge;
      v45 = *(int *)(a2 + 20);
      v46 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 408);
      v47 = *(float *)(v46 + 4 * v45);
      if (v15
        || (ChildSharpnessPerEdge = (float *)OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v87, *(float *)(v46 + 4 * v45), v16, ChildSharpnessPerEdge), v15 = (int)ChildSharpnessPerEdge, (_DWORD)ChildSharpnessPerEdge != v12))
      {
        MEMORY[0x1E0C80A78](ChildSharpnessPerEdge);
        v49 = (float *)((char *)&v84 - v48);
        bzero((char *)&v84 - v48, v50);
        v54 = v49 + 1;
        v55 = v15 - 1;
        if ((v15 - 1) > 1)
        {
          if (v15 == 4)
          {
            v84 = 3;
            v86 = v17;
            v17 = 0xFFFFFFFF00000000;
            v62 = (float *)v44;
            do
            {
              v63 = *v62++;
              v17 += 0x100000000;
            }
            while (v63 <= 0.0);
            v64 = v16 << 32;
            v65 = (float *)&v44[v16 - 1];
            do
            {
              v66 = *v65--;
              v64 -= 0x100000000;
            }
            while (v66 <= 0.0);
            v61 = *(unsigned int *)(a2 + 24);
            *v49 = 0.75;
            if ((int)v61 >= 1)
            {
              bzero(v49 + 1, 4 * v61);
              v54 = v49 + 1;
            }
            v85 = 0;
            LODWORD(v56) = 0;
            *(float *)((char *)v54 + (v17 >> 30)) = 0.125;
            v60 = v54;
            *(float *)((char *)v54 + (v64 >> 30)) = 0.125;
            LODWORD(v17) = v86;
            v55 = v84;
          }
          else
          {
            v60 = v49 + 1;
            v85 = 0;
            LODWORD(v56) = 0;
            LODWORD(v61) = 0;
            *v49 = 1.0;
          }
        }
        else
        {
          v56 = *(unsigned int *)(a2 + 28);
          if ((_DWORD)v56 != *(_DWORD *)(a2 + 24))
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(v51, v52, v53);
          *v49 = (float)(v56 - 2) / (float)(int)v56;
          if ((int)v56 >= 1)
          {
            v57 = 1.0 / (float)(v56 * v56);
            v58 = v49 + 1;
            v59 = v56;
            do
            {
              *v58 = v57;
              v58[v16] = v57;
              ++v58;
              --v59;
            }
            while (v59);
          }
          v60 = v49 + 1;
          v85 = 1;
          LODWORD(v61) = v56;
        }
        v67 = OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v87, v25, v47, v17, (float *)v19, v44);
        v68 = 1.0 - v67;
        **(float **)a3 = (float)((float)(1.0 - v67) * *v49) + (float)(v67 * **(float **)a3);
        if ((_DWORD)v61)
        {
          if (*(_DWORD *)(a3 + 28))
          {
            if ((int)v61 >= 1)
            {
              v69 = *(float **)(a3 + 8);
              v70 = v61;
              v71 = v60;
              do
              {
                v72 = *v71++;
                *v69 = (float)(v68 * v72) + (float)(v67 * *v69);
                ++v69;
                --v70;
              }
              while (v70);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 28) = v61;
            if ((int)v61 >= 1)
            {
              v73 = *(float **)(a3 + 8);
              v74 = v61;
              v75 = v60;
              do
              {
                v76 = *v75++;
                *v73++ = v68 * v76;
                --v74;
              }
              while (v74);
            }
          }
        }
        if ((_DWORD)v56)
        {
          v77 = &v60[v16];
          if (*(_DWORD *)(a3 + 32))
          {
            if (v55 < 2 != (*(_BYTE *)(a3 + 36) != 0))
              OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>();
            if ((int)v56 >= 1)
            {
              v78 = *(float **)(a3 + 16);
              v79 = v56;
              do
              {
                v80 = *v77++;
                *v78 = (float)(v68 * v80) + (float)(v67 * *v78);
                ++v78;
                --v79;
              }
              while (v79);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 32) = v56;
            *(_BYTE *)(a3 + 36) = v85;
            if ((int)v56 >= 1)
            {
              v81 = *(float **)(a3 + 16);
              v82 = v56;
              do
              {
                v83 = *v77++;
                *v81++ = v68 * v83;
                --v82;
              }
              while (v82);
            }
          }
        }
      }
    }
    return;
  }
  v23 = *(_QWORD **)a2;
  v24 = *(int *)(a2 + 16);
  v25 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 408) + 4 * v24);
  if ((int)v16 >= 1)
  {
    v26 = (int *)(v23[45] + 4 * *(int *)(v23[42] + 8 * v24 + 4));
    v27 = v23[27];
    v28 = (int *)((char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    v29 = v17;
    do
    {
      v30 = *v26++;
      *v28++ = *(_DWORD *)(v27 + 4 * v30);
      --v29;
    }
    while (v29);
  }
  if (!v12)
  {
    v87 = *a1;
    v20 = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v87, v25, v17, (float *)((char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0)));
    v12 = v20;
    v7 = v20 - 1;
  }
  if (v7 > 1)
    goto LABEL_27;
  v31 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v31 != *(_DWORD *)(a2 + 24))
    OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(v20, v21, v22);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v31;
  *(_DWORD *)(a3 + 32) = v31;
  *(_BYTE *)(a3 + 36) = 1;
  **(float **)a3 = (float)(v31 - 2) / (float)(int)v31;
  if ((int)v31 >= 1)
  {
    v32 = 1.0 / (float)(v31 * v31);
    v33 = *(float **)(a3 + 8);
    v34 = *(float **)(a3 + 16);
    do
    {
      *v33++ = v32;
      *v34++ = v32;
      --v31;
    }
    while (v31);
  }
}

float *OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge(OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *this, const OpenSubdiv::v3_1_1::Sdc::Crease *a2, float *a3)
{
  uint64_t v6;
  uint64_t *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  void *__p;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 6);
  v7 = &v14;
  __p = 0;
  if (v6 >= 0x11)
  {
    v7 = (uint64_t *)operator new(4 * v6);
    __p = v7;
    LODWORD(v6) = *((_DWORD *)this + 6);
  }
  if ((int)v6 >= 1)
  {
    v8 = (int *)(*(_QWORD *)(*(_QWORD *)this + 360)
               + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)this + 336) + 8 * *((int *)this + 4) + 4));
    v9 = *(_QWORD *)(*(_QWORD *)this + 216);
    v10 = v6;
    v11 = v7;
    do
    {
      v12 = *v8++;
      *(_DWORD *)v11 = *(_DWORD *)(v9 + 4 * v12);
      v11 = (uint64_t *)((char *)v11 + 4);
      --v10;
    }
    while (v10);
  }
  OpenSubdiv::v3_1_1::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(a2, v6, (float *)v7, a3);
  operator delete(__p);
  return a3;
}

_DWORD *OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(_DWORD *result, int *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  uint64_t v17;
  float32x2_t *v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  uint64_t v25;
  float v26;
  float *v27;

  if (!a4)
  {
    v5 = *(_QWORD *)a2;
    v6 = a2[2];
    if (*(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v6) <= 0.0)
      goto LABEL_10;
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        v7 = *(_QWORD *)a2;
        LODWORD(v8) = a2[2];
LABEL_8:
        v9 = (int)v8;
        v10 = *(unsigned int *)(*(_QWORD *)(v7 + 144) + 8 * (int)v8);
        *(_QWORD *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v10;
        *(_BYTE *)(a3 + 36) = 0;
        v11 = *(float32x2_t **)a3;
        __asm { FMOV            V0.2S, #0.375 }
        **(_QWORD **)a3 = _D0;
        if ((_DWORD)v10 == 2)
        {
          **(_QWORD **)(a3 + 16) = 0x3E0000003E000000;
        }
        else if ((int)v10 >= 1)
        {
          v24 = *(float **)(a3 + 16);
          v25 = v10;
          do
          {
            *v24++ = (float)(2.0 / (float)(int)v10) * 0.125;
            --v25;
          }
          while (v25);
        }
        v26 = *(float *)(*(_QWORD *)(v7 + 216) + 4 * v9);
        *v11 = vmla_n_f32(vmul_n_f32(*v11, 1.0 - v26), (float32x2_t)0x3F0000003F000000, v26);
        if ((int)v10 >= 1)
        {
          v27 = *(float **)(a3 + 16);
          do
          {
            *v27 = (float)(1.0 - v26) * *v27;
            ++v27;
            --v10;
          }
          while (v10);
        }
        return result;
      }
    }
    else if (a4 != 4)
    {
      v7 = *(_QWORD *)a2;
      v8 = a2[2];
      v23 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 216) + 4 * v8);
      if (v23 < 1.0 && ((*result & 0x60) == 0 || (float)(v23 + -1.0) <= 0.0))
        goto LABEL_8;
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(_QWORD *)(a3 + 28) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    v19 = *(float32x2_t **)a3;
    **(_DWORD **)a3 = 1056964608;
    v20 = 0.5;
    goto LABEL_21;
  }
  if (a4 != 1)
    goto LABEL_5;
  v5 = *(_QWORD *)a2;
  LODWORD(v6) = a2[2];
LABEL_10:
  v17 = *(unsigned int *)(*(_QWORD *)(v5 + 144) + 8 * (_DWORD)v6);
  *(_QWORD *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v17;
  *(_BYTE *)(a3 + 36) = 0;
  __asm { FMOV            V0.2S, #0.375 }
  **(_QWORD **)a3 = _D0;
  if ((_DWORD)v17 == 2)
  {
    v19 = *(float32x2_t **)(a3 + 16);
    v19->i32[0] = 1040187392;
    v20 = 0.125;
LABEL_21:
    v19->f32[1] = v20;
    return result;
  }
  if ((int)v17 >= 1)
  {
    v21 = (float)(2.0 / (float)(int)v17) * 0.125;
    v22 = *(float **)(a3 + 16);
    do
    {
      *v22++ = v21;
      --v17;
    }
    while (v17);
  }
  return result;
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  float v9;
  int v10;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  float v21;
  int *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float *v32;
  float v33;
  uint64_t v34;
  float *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  float *ChildSharpnessPerEdge;
  const float *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float *v45;
  size_t v46;
  float *v47;
  uint64_t v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  int v53;
  float *v54;
  float v55;
  uint64_t v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  uint64_t v62;
  float v63;
  float v64;
  float *v65;
  uint64_t v66;
  float v67;
  float *v68;
  uint64_t v69;
  float v70;
  _BYTE v71[4];
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 28) = v8;
    *(_BYTE *)(a3 + 36) = 0;
    if ((_DWORD)v8 == 6)
    {
      **(_DWORD **)a3 = 1059061760;
      v9 = 0.0625;
    }
    else
    {
      v29 = 1.0 / (float)(int)v8;
      v30 = cosf(v29 * 6.2832);
      v9 = v29 * (float)(0.625 - (float)((float)((float)(v30 * 0.25) + 0.375) * (float)((float)(v30 * 0.25) + 0.375)));
      **(float **)a3 = 1.0 - (float)(v9 * (float)(int)v8);
      if ((int)v8 < 1)
        return;
    }
    v31 = *(float **)(a3 + 8);
    do
    {
      *v31++ = v9;
      --v8;
    }
    while (v8);
    return;
  }
  v10 = a4;
  if (a5)
    v12 = 1;
  else
    v12 = a4 == 0;
  if (v12)
    v13 = a5;
  else
    v13 = a4;
  v14 = *(int *)(a2 + 24);
  v15 = *(unsigned int *)(a2 + 24);
  v16 = 4 * v14;
  MEMORY[0x1E0C80A78](a1);
  v17 = &v71[-((4 * v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v17, 4 * v14);
  if ((v10 | 4) != 4 && v13 == v10)
  {
    v17 = 0;
    v21 = 0.0;
    goto LABEL_25;
  }
  v19 = *(_QWORD **)a2;
  v20 = *(int *)(a2 + 16);
  v21 = *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 408) + 4 * v20);
  if ((int)v14 >= 1)
  {
    v22 = (int *)(v19[45] + 4 * *(int *)(v19[42] + 8 * v20 + 4));
    v23 = v19[27];
    v24 = &v71[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v25 = v15;
    do
    {
      v26 = *v22++;
      *v24++ = *(_DWORD *)(v23 + 4 * v26);
      --v25;
    }
    while (v25);
  }
  if (!v10)
  {
    v74 = *a1;
    v18 = OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v74, v21, v15, (float *)&v71[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v10 = v18;
    v7 = v18 - 1;
  }
  if (v7 > 1)
  {
LABEL_25:
    if (v10 == 4)
    {
      v72 = v13;
      v73 = v15;
      v15 = 0xFFFFFFFF00000000;
      v32 = (float *)v17;
      do
      {
        v33 = *v32++;
        v15 += 0x100000000;
      }
      while (v33 <= 0.0);
      v34 = v14 << 32;
      v35 = (float *)&v17[4 * v14 - 4];
      do
      {
        v36 = *v35--;
        v34 -= 0x100000000;
      }
      while (v36 <= 0.0);
      v37 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = v37;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      v38 = *(_QWORD *)(a3 + 8);
      if ((int)v37 >= 1)
        bzero(*(void **)(a3 + 8), 4 * v37);
      *(_DWORD *)(v38 + (v15 >> 30)) = 1040187392;
      *(_DWORD *)(v38 + (v34 >> 30)) = 1040187392;
      LODWORD(v15) = v73;
      v13 = v72;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v13 == v10)
      return;
    v74 = *a1;
    MEMORY[0x1E0C80A78](v18);
    bzero(&v71[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v14);
    ChildSharpnessPerEdge = OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface::GetChildSharpnessPerEdge((OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface *)a2, (const OpenSubdiv::v3_1_1::Sdc::Crease *)&v74, (float *)&v71[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    v40 = ChildSharpnessPerEdge;
    v41 = *(int *)(a2 + 20);
    v42 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 408);
    v43 = *(float *)(v42 + 4 * v41);
    if (!v13)
    {
      ChildSharpnessPerEdge = (float *)OpenSubdiv::v3_1_1::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::v3_1_1::Sdc::Crease *)&v74, *(float *)(v42 + 4 * v41), v14, ChildSharpnessPerEdge);
      v13 = (int)ChildSharpnessPerEdge;
      if ((_DWORD)ChildSharpnessPerEdge == v10)
        return;
    }
    MEMORY[0x1E0C80A78](ChildSharpnessPerEdge);
    v45 = (float *)&v71[-v44];
    bzero(&v71[-v44], v46);
    v47 = v45 + 1;
    if ((v13 - 1) > 1)
    {
      if (v13 == 4)
      {
        v53 = v15;
        v15 = 0xFFFFFFFF00000000;
        v54 = (float *)v40;
        do
        {
          v55 = *v54++;
          v15 += 0x100000000;
        }
        while (v55 <= 0.0);
        v56 = v14 << 32;
        v57 = (float *)&v40[v14 - 1];
        do
        {
          v58 = *v57--;
          v56 -= 0x100000000;
        }
        while (v58 <= 0.0);
        v48 = *(unsigned int *)(a2 + 24);
        *v45 = 0.75;
        if ((int)v48 >= 1)
          bzero(v45 + 1, 4 * v48);
        *(float *)((char *)v47 + (v15 >> 30)) = 0.125;
        *(float *)((char *)v47 + (v56 >> 30)) = 0.125;
        LODWORD(v15) = v53;
      }
      else
      {
        LODWORD(v48) = 0;
        *v45 = 1.0;
      }
      goto LABEL_57;
    }
    v48 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v48 == 6)
    {
      *v45 = 0.625;
      v49 = 0.0625;
    }
    else
    {
      v59 = 1.0 / (float)(int)v48;
      v60 = cosf(v59 * 6.2832);
      v49 = v59 * (float)(0.625 - (float)((float)((float)(v60 * 0.25) + 0.375) * (float)((float)(v60 * 0.25) + 0.375)));
      *v45 = 1.0 - (float)(v49 * (float)(int)v48);
      if ((int)v48 < 1)
        goto LABEL_57;
    }
    v61 = v45 + 1;
    v62 = v48;
    do
    {
      *v61++ = v49;
      --v62;
    }
    while (v62);
LABEL_57:
    v63 = OpenSubdiv::v3_1_1::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::v3_1_1::Sdc::Crease *)&v74, v21, v43, v15, (float *)v17, v40);
    v64 = 1.0 - v63;
    **(float **)a3 = (float)((float)(1.0 - v63) * *v45) + (float)(v63 * **(float **)a3);
    if ((_DWORD)v48)
    {
      if (*(_DWORD *)(a3 + 28))
      {
        if ((int)v48 >= 1)
        {
          v65 = *(float **)(a3 + 8);
          v66 = v48;
          do
          {
            v67 = *v47++;
            *v65 = (float)(v64 * v67) + (float)(v63 * *v65);
            ++v65;
            --v66;
          }
          while (v66);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v48;
        if ((int)v48 >= 1)
        {
          v68 = *(float **)(a3 + 8);
          v69 = v48;
          do
          {
            v70 = *v47++;
            *v68++ = v64 * v70;
            --v69;
          }
          while (v69);
        }
      }
    }
    return;
  }
  v27 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 28) = v27;
  *(_BYTE *)(a3 + 36) = 0;
  if ((_DWORD)v27 == 6)
  {
    **(_DWORD **)a3 = 1059061760;
    v28 = 0.0625;
  }
  else
  {
    v50 = 1.0 / (float)(int)v27;
    v51 = cosf(v50 * 6.2832);
    v28 = v50 * (float)(0.625 - (float)((float)((float)(v51 * 0.25) + 0.375) * (float)((float)(v51 * 0.25) + 0.375)));
    **(float **)a3 = 1.0 - (float)(v28 * (float)(int)v27);
    if ((int)v27 < 1)
      return;
  }
  v52 = *(float **)(a3 + 8);
  do
  {
    *v52++ = v28;
    --v27;
  }
  while (v27);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  void *v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  void *__p;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    v8 = 0;
    v9 = *(int **)(v5 + 8);
    v10 = *(_QWORD **)(*((_QWORD *)v9 + 57) + 8 * a5);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 456) + 8 * a5);
    v12 = v9[5];
    v23 = (float *)&v24;
    __p = 0;
    if (v12 >= 0x11)
    {
      v8 = operator new(4 * v12);
      __p = v8;
      v23 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = *(int *)(*(_QWORD *)(v5 + 168) + 4 * v13);
        if ((_DWORD)v14 != -1)
        {
          v15 = *(int *)(*(_QWORD *)(v11 + 96) + 4 * v14);
          v16 = (unsigned int *)(*(_QWORD *)(*v10 + 24) + 8 * v13);
          v17 = *v16;
          if ((int)v17 < 1)
          {
            *(_QWORD *)(*a4 + 8 * v15) = 0;
          }
          else
          {
            v18 = v10[3] + 4 * (int)v16[1];
            v19 = v23;
            v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            *(_QWORD *)(*a4 + 8 * v15) = 0;
            v21 = 0;
            v22 = 4 * v17;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v15) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v15), *(float32x2_t *)(*a3 + 8 * *(int *)(v18 + v21)), v23[v21 / 4]);
              v21 += 4;
            }
            while (v22 != v21);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      v8 = __p;
    }
    operator delete(v8);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD v48[5];
  int v49;
  int v50;
  int v51;
  _BYTE *v52;
  int v53;
  int v54;
  _BYTE v55[32];
  void *__p;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v49 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v42 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v42 + 456) + 8 * a5);
  v45 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v55;
  v52 = v55;
  v53 = v13;
  v54 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v52 = EdgeFaceValues;
    v54 = v13;
    v14 = EdgeFaceValues;
  }
  v48[0] = v57;
  v48[1] = 0;
  v48[2] = v14;
  memset(&v48[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v48[3]) = 2;
    LODWORD(v48[4]) = 0;
    v57[0] = 0x3F0000003F000000;
    v43 = 1;
  }
  else
  {
    v43 = 0;
  }
  v46 = v45;
  if (*(int *)(v45 + 4) >= 1)
  {
    v16 = 0;
    v44 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v37 = v12[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v17);
          if (*(_WORD *)(v37 + 2 * v17))
          {
            v39 = 0;
            do
            {
              v40 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v39 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v39 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v40);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v40, &v50);
              v41 = v18[v39];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              *(float32x2_t *)(*a4 + 8 * v41) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v41), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v50));
              *(float32x2_t *)(*a4 + 8 * v41) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v41), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v51));
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          if ((v43 & 1) == 0)
          {
            v47 = v16;
            if (*(float *)(*(_QWORD *)(v45 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v49, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v46, (uint64_t)v48, v19, (*(unsigned __int16 *)(*(_QWORD *)(v42 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v50);
          v21 = *v18;
          *(_QWORD *)(*a4 + 8 * v21) = 0;
          *(float32x2_t *)(*a4 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v21), *(float32x2_t *)(*a3 + 8 * v50), *(float *)v57);
          *(float32x2_t *)(*a4 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v21), *(float32x2_t *)(*a3 + 8 * v51), *((float *)v57 + 1));
          EdgeFaceValues = (void *)v44;
          if (SLODWORD(v48[4]) >= 1)
          {
            v22 = (unsigned int *)(*(_QWORD *)(v45 + 144) + 8 * v16);
            v23 = *v22;
            if ((int)v23 >= 1)
            {
              v24 = 0;
              v25 = *(_QWORD *)(v45 + 168) + 4 * (int)v22[1];
              do
              {
                v26 = *(int *)(v25 + 4 * v24);
                if (BYTE4(v48[4]))
                {
                  v27 = *(int *)(*(_QWORD *)(v44 + 168) + 4 * v26);
                  if ((_DWORD)v27 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v44, a2, v20);
                  v28 = (int *)(v12[12] + 4 * v27);
                  v29 = *a4;
                  v30 = *a4;
                }
                else
                {
                  v31 = 0;
                  v32 = (2 * (int)v26) | 1;
                  v33 = *(_QWORD *)(v45 + 24);
                  v34 = *(_QWORD *)(v45 + 72) + 4 * *(int *)(v33 + 4 * v32);
                  v35 = *(_DWORD *)(v33 + 8 * v26);
                  do
                    v36 = *(unsigned int *)(v34 + 4 * v31++);
                  while (v16 != v36);
                  if ((int)v31 + 1 < v35)
                    v35 = 0;
                  v28 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v32)
                              + 4 * ((int)v31 - v35 + 1));
                  v30 = *a4;
                  v29 = *a3;
                }
                *(float32x2_t *)(v30 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(v30 + 8 * v21), *(float32x2_t *)(v29 + 8 * *v28), *(float *)&v52[4 * v24++]);
              }
              while (v24 != v23);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v44;
    }
    while (v16 < *(int *)(v45 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  int v44;
  unsigned int v45;
  float FractionalWeight;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BOOL4 v52;
  _QWORD *v53;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  uint64_t v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v57;
  int v58;
  float v59;
  _QWORD v60[2];
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66[2];
  uint64_t *v67;
  float *v68;
  _DWORD v69[4];
  int *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v65 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v56 = v53[1];
  v48 = v53[2];
  v57 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v56 + 456) + 8 * a5);
  if (*((_BYTE *)v57 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v52 = v7;
  v55 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v53[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v56 + 20);
  v75 = &v78;
  v76 = 2 * v9;
  v77 = 32;
  v79 = 0;
  if (2 * v9 >= 0x21)
  {
    v79 = (uint64_t *)operator new(8 * v9);
    v75 = v79;
    v77 = 2 * v9;
    v9 = *(_DWORD *)(v56 + 20);
  }
  VertexCreaseEndValues = 0;
  v70 = (int *)&v73;
  v71 = v9;
  v72 = 16;
  v74 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v74 = VertexCreaseEndValues;
    v70 = VertexCreaseEndValues;
    v72 = v9;
  }
  v60[0] = v56;
  v60[1] = v48;
  if (*(int *)(v56 + 8) >= 1)
  {
    v51 = v8;
    v11 = 0;
    v13 = v53;
    v12 = a3;
    v14 = v52;
    v15 = v55;
    do
    {
      v58 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v58 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v57 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v57 + 18) + 4 * v16);
        v18 = *(int *)(v51[12] + 4 * v58);
        v19 = (int *)(v51[18] + 4 * v18);
        v20 = *v19;
        v21 = v51[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          *(_QWORD *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v35 = v51[9];
          v36 = *(unsigned __int16 *)(v35 + 2 * v58);
          if (*(_WORD *)(v35 + 2 * v58))
          {
            v37 = 0;
            v38 = v21 + v18;
            v49 = v38;
            v50 = *((_QWORD *)v57 + 21) + v16;
            do
            {
              v39 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v58)
                                         + (unsigned __int16)v37));
              if (v37 != v39)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v40 = v17[v39];
              v41 = v19[v37];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              if (!v14 && (*(_BYTE *)(v38 + v37) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v57, v11, v39, v66);
                if ((*(_BYTE *)(v50 + v39) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v50 + v39) & 0x20) != 0)
                  {
                    v45 = v39 == 0;
                    v44 = v11;
                  }
                  else
                  {
                    v44 = v11;
                    v45 = v39;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v44, v45, v58);
                  v47 = 1.0 - FractionalWeight;
                  v43 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v42 = v47 * 0.125;
                }
                else
                {
                  v42 = 0.125;
                  v43 = 0.75;
                }
                v13 = v53;
                v12 = a3;
                v14 = v52;
                v15 = v55;
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[0]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[1]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v40), v43);
                v38 = v49;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v41) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v40), *(float32x2_t *)(*a4 + 8 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v23 = *(int *)(*(_QWORD *)(v56 + 336) + 8 * v11);
          v59 = 0.0;
          v24 = v75;
          v25 = (float *)v75 + v23;
          *(_QWORD *)v66 = &v59;
          v67 = v75;
          v68 = v25;
          memset(v69, 0, 13);
          v61 = v11;
          v62 = v58;
          v63 = *(_DWORD *)(*(_QWORD *)(v60[0] + 336) + 8 * v11);
          v64 = *(_DWORD *)(*(_QWORD *)(v60[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v65, (uint64_t)v60, (uint64_t)v66, (*(unsigned __int16 *)(*(_QWORD *)(v56 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v58) >> 7) & 0xF);
          v13 = v53;
          v12 = a3;
          v26 = *v17;
          v27 = *v19;
          *(_QWORD *)(*a4 + 8 * v27) = 0;
          if (v69[2] >= 1)
          {
            if (!LOBYTE(v69[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v28 = *(_QWORD *)(v56 + 264);
            v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              v30 = (int *)(*(_QWORD *)(v56 + 288) + 4 * *(int *)(v28 + 4 * ((2 * v11) | 1)));
              do
              {
                v31 = *v30++;
                v32 = *(int *)(v53[21] + 4 * v31);
                if ((_DWORD)v32 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * *(int *)(v51[12] + 4 * v32)), v33);
                --v29;
              }
              while (v29);
            }
          }
          if (v69[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v57, v11, v70);
            v13 = v53;
            v12 = a3;
            if ((int)v23 >= 1)
            {
              v34 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * v70[v34]), *(float *)((char *)v24 + v34 * 4));
                ++v34;
              }
              while (v23 != v34);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v59);
          v14 = v52;
          v15 = v55;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v56 + 8));
    VertexCreaseEndValues = v74;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v79);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD v48[5];
  int v49;
  int v50;
  int v51;
  _BYTE *v52;
  int v53;
  int v54;
  _BYTE v55[32];
  void *__p;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v49 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v42 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v42 + 456) + 8 * a5);
  v45 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v55;
  v52 = v55;
  v53 = v13;
  v54 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v52 = EdgeFaceValues;
    v54 = v13;
    v14 = EdgeFaceValues;
  }
  v48[0] = v57;
  v48[1] = 0;
  v48[2] = v14;
  memset(&v48[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v48[3]) = 2;
    LODWORD(v48[4]) = 0;
    v57[0] = 0x3F0000003F000000;
    v43 = 1;
  }
  else
  {
    v43 = 0;
  }
  v46 = v45;
  if (*(int *)(v45 + 4) >= 1)
  {
    v16 = 0;
    v44 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v37 = v12[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v17);
          if (*(_WORD *)(v37 + 2 * v17))
          {
            v39 = 0;
            do
            {
              v40 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v39 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v39 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v40);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v40, &v50);
              v41 = v18[v39];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              *(float32x2_t *)(*a4 + 8 * v41) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v41), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v50));
              *(float32x2_t *)(*a4 + 8 * v41) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v41), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v51));
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          if ((v43 & 1) == 0)
          {
            v47 = v16;
            if (*(float *)(*(_QWORD *)(v45 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v49, (int *)&v46, (uint64_t)v48, v19, (*(unsigned __int16 *)(*(_QWORD *)(v42 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v50);
          v21 = *v18;
          *(_QWORD *)(*a4 + 8 * v21) = 0;
          *(float32x2_t *)(*a4 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v21), *(float32x2_t *)(*a3 + 8 * v50), *(float *)v57);
          *(float32x2_t *)(*a4 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v21), *(float32x2_t *)(*a3 + 8 * v51), *((float *)v57 + 1));
          EdgeFaceValues = (void *)v44;
          if (SLODWORD(v48[4]) >= 1)
          {
            v22 = (unsigned int *)(*(_QWORD *)(v45 + 144) + 8 * v16);
            v23 = *v22;
            if ((int)v23 >= 1)
            {
              v24 = 0;
              v25 = *(_QWORD *)(v45 + 168) + 4 * (int)v22[1];
              do
              {
                v26 = *(int *)(v25 + 4 * v24);
                if (BYTE4(v48[4]))
                {
                  v27 = *(int *)(*(_QWORD *)(v44 + 168) + 4 * v26);
                  if ((_DWORD)v27 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v44, a2, v20);
                  v28 = (int *)(v12[12] + 4 * v27);
                  v29 = *a4;
                  v30 = *a4;
                }
                else
                {
                  v31 = 0;
                  v32 = (2 * (int)v26) | 1;
                  v33 = *(_QWORD *)(v45 + 24);
                  v34 = *(_QWORD *)(v45 + 72) + 4 * *(int *)(v33 + 4 * v32);
                  v35 = *(_DWORD *)(v33 + 8 * v26);
                  do
                    v36 = *(unsigned int *)(v34 + 4 * v31++);
                  while (v16 != v36);
                  if ((int)v31 + 1 < v35)
                    v35 = 0;
                  v28 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v32)
                              + 4 * ((int)v31 - v35 + 1));
                  v30 = *a4;
                  v29 = *a3;
                }
                *(float32x2_t *)(v30 + 8 * v21) = vmla_n_f32(*(float32x2_t *)(v30 + 8 * v21), *(float32x2_t *)(v29 + 8 * *v28), *(float *)&v52[4 * v24++]);
              }
              while (v24 != v23);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v44;
    }
    while (v16 < *(int *)(v45 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  int v44;
  unsigned int v45;
  float FractionalWeight;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BOOL4 v52;
  _QWORD *v53;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  uint64_t v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v57;
  int v58;
  float v59;
  _QWORD v60[2];
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66[2];
  uint64_t *v67;
  float *v68;
  _DWORD v69[4];
  int *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v65 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v56 = v53[1];
  v48 = v53[2];
  v57 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v56 + 456) + 8 * a5);
  if (*((_BYTE *)v57 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v52 = v7;
  v55 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v53[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v56 + 20);
  v75 = &v78;
  v76 = 2 * v9;
  v77 = 32;
  v79 = 0;
  if (2 * v9 >= 0x21)
  {
    v79 = (uint64_t *)operator new(8 * v9);
    v75 = v79;
    v77 = 2 * v9;
    v9 = *(_DWORD *)(v56 + 20);
  }
  VertexCreaseEndValues = 0;
  v70 = (int *)&v73;
  v71 = v9;
  v72 = 16;
  v74 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v74 = VertexCreaseEndValues;
    v70 = VertexCreaseEndValues;
    v72 = v9;
  }
  v60[0] = v56;
  v60[1] = v48;
  if (*(int *)(v56 + 8) >= 1)
  {
    v51 = v8;
    v11 = 0;
    v13 = v53;
    v12 = a3;
    v14 = v52;
    v15 = v55;
    do
    {
      v58 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v58 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v57 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v57 + 18) + 4 * v16);
        v18 = *(int *)(v51[12] + 4 * v58);
        v19 = (int *)(v51[18] + 4 * v18);
        v20 = *v19;
        v21 = v51[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          *(_QWORD *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v35 = v51[9];
          v36 = *(unsigned __int16 *)(v35 + 2 * v58);
          if (*(_WORD *)(v35 + 2 * v58))
          {
            v37 = 0;
            v38 = v21 + v18;
            v49 = v38;
            v50 = *((_QWORD *)v57 + 21) + v16;
            do
            {
              v39 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v58)
                                         + (unsigned __int16)v37));
              if (v37 != v39)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v40 = v17[v39];
              v41 = v19[v37];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              if (!v14 && (*(_BYTE *)(v38 + v37) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v57, v11, v39, v66);
                if ((*(_BYTE *)(v50 + v39) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v50 + v39) & 0x20) != 0)
                  {
                    v45 = v39 == 0;
                    v44 = v11;
                  }
                  else
                  {
                    v44 = v11;
                    v45 = v39;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v44, v45, v58);
                  v47 = 1.0 - FractionalWeight;
                  v43 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v42 = v47 * 0.125;
                }
                else
                {
                  v42 = 0.125;
                  v43 = 0.75;
                }
                v13 = v53;
                v12 = a3;
                v14 = v52;
                v15 = v55;
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[0]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[1]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v40), v43);
                v38 = v49;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v41) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v40), *(float32x2_t *)(*a4 + 8 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v23 = *(int *)(*(_QWORD *)(v56 + 336) + 8 * v11);
          v59 = 0.0;
          v24 = v75;
          v25 = (float *)v75 + v23;
          *(_QWORD *)v66 = &v59;
          v67 = v75;
          v68 = v25;
          memset(v69, 0, 13);
          v61 = v11;
          v62 = v58;
          v63 = *(_DWORD *)(*(_QWORD *)(v60[0] + 336) + 8 * v11);
          v64 = *(_DWORD *)(*(_QWORD *)(v60[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v65, (uint64_t)v60, (uint64_t)v66, (*(unsigned __int16 *)(*(_QWORD *)(v56 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v58) >> 7) & 0xF);
          v13 = v53;
          v12 = a3;
          v26 = *v17;
          v27 = *v19;
          *(_QWORD *)(*a4 + 8 * v27) = 0;
          if (v69[2] >= 1)
          {
            if (!LOBYTE(v69[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v28 = *(_QWORD *)(v56 + 264);
            v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              v30 = (int *)(*(_QWORD *)(v56 + 288) + 4 * *(int *)(v28 + 4 * ((2 * v11) | 1)));
              do
              {
                v31 = *v30++;
                v32 = *(int *)(v53[21] + 4 * v31);
                if ((_DWORD)v32 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * *(int *)(v51[12] + 4 * v32)), v33);
                --v29;
              }
              while (v29);
            }
          }
          if (v69[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v57, v11, v70);
            v13 = v53;
            v12 = a3;
            if ((int)v23 >= 1)
            {
              v34 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * v70[v34]), *(float *)((char *)v24 + v34 * 4));
                ++v34;
              }
              while (v23 != v34);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v59);
          v14 = v52;
          v15 = v55;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v56 + 8));
    VertexCreaseEndValues = v74;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v79);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void *EdgeFaceValues;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;

  EdgeFaceValues = 0;
  v31 = *MEMORY[0x1E0C80C00];
  v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v23 = v22[1];
  v9 = *(_QWORD *)(v22[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v23 + 456) + 8 * a5);
  v11 = *(_QWORD **)(*(_QWORD *)(v22[2] + 456) + 8 * a5);
  v12 = *(unsigned int *)(v23 + 16);
  v26 = &v29;
  v27 = v12;
  v28 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    EdgeFaceValues = operator new(4 * v12);
    __p = EdgeFaceValues;
    v26 = (uint64_t *)EdgeFaceValues;
    v28 = v12;
  }
  if (*(int *)(v23 + 4) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(int *)(v22[27] + 4 * v13);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if ((*(_BYTE *)(v11[21] + *v15) & 1) != 0)
        {
          v17 = v11[9];
          v18 = *(unsigned __int16 *)(v17 + 2 * v14);
          if (*(_WORD *)(v17 + 2 * v14))
          {
            v19 = 0;
            do
            {
              v20 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 40)
                                        + 2 * (v19 + *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) + 4 * v14)));
              if (v19 != v20)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v20);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, v20, &v24);
              v21 = v15[v19];
              *(_QWORD *)(*a4 + 8 * v21) = 0;
              *(float32x2_t *)(*a4 + 8 * v21) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v21), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v24));
              *(float32x2_t *)(*a4 + 8 * v21) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v21), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v25));
              ++v19;
            }
            while (v18 != v19);
          }
        }
        else
        {
          EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, 0, &v24);
          v16 = *v15;
          *(_QWORD *)(*a4 + 8 * v16) = 0;
          *(float32x2_t *)(*a4 + 8 * v16) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v16), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v24));
          *(float32x2_t *)(*a4 + 8 * v16) = vmla_f32(*(float32x2_t *)(*a4 + 8 * v16), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)(*a3 + 8 * v25));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v23 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v36;
  int v37;
  unsigned int v38;
  float FractionalWeight;
  float v40;
  _QWORD *v41;
  _BOOL4 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v49;
  int v50[2];
  uint64_t *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  void *__p;
  uint64_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v47 = v6;
  v48 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v49 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  if (*((_BYTE *)v49 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v42 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v41 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v48 + 20);
  v56 = &v59;
  v57 = 2 * v12;
  v58 = 32;
  v60 = 0;
  if (2 * v12 >= 0x21)
  {
    v60 = operator new(8 * v12);
    v56 = (uint64_t *)v60;
    v58 = 2 * v12;
    v12 = *(_DWORD *)(v48 + 20);
  }
  VertexCreaseEndValues = 0;
  v51 = &v54;
  v52 = v12;
  v53 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v51 = (uint64_t *)VertexCreaseEndValues;
    v53 = v12;
  }
  if (*(int *)(v48 + 8) >= 1)
  {
    v14 = 0;
    v15 = a3;
    v16 = v42;
    while (1)
    {
      v17 = *(int *)(v47[30] + 4 * v14);
      if ((_DWORD)v17 != -1)
      {
        v18 = *(int *)(*((_QWORD *)v49 + 12) + 4 * v14);
        v19 = (int *)(*((_QWORD *)v49 + 18) + 4 * v18);
        v20 = *(int *)(v41[12] + 4 * v17);
        v21 = (int *)(v41[18] + 4 * v20);
        v22 = *v21;
        v23 = v41[21];
        if ((*(_BYTE *)(v23 + v22) & 1) == 0 && v16)
        {
          *(_QWORD *)(*a4 + 8 * v22) = 0;
          v25 = (float32x2_t *)(*a4 + 8 * *v21);
          v26 = *v19;
        }
        else
        {
          if ((*(_BYTE *)(v23 + v22) & 1) != 0)
          {
            v27 = v41[9];
            v28 = *(unsigned __int16 *)(v27 + 2 * v17);
            if (*(_WORD *)(v27 + 2 * v17))
            {
              v29 = 0;
              v45 = *((_QWORD *)v49 + 21) + v18;
              v46 = *(unsigned __int16 *)(v27 + 2 * v17);
              v30 = v23 + v20;
              v44 = v30;
              do
              {
                v31 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v17)
                                           + (unsigned __int16)v29));
                if (v29 != v31)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v32 = v19[v31];
                v33 = v21[v29];
                *(_QWORD *)(*a4 + 8 * v33) = 0;
                if (!v16 && (*(_BYTE *)(v30 + v29) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v49, v14, v31, v50);
                  if ((*(_BYTE *)(v45 + v31) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v45 + v31) & 0x20) != 0)
                    {
                      v38 = v31 == 0;
                      v36 = v11;
                      v37 = v14;
                    }
                    else
                    {
                      v36 = v11;
                      v37 = v14;
                      v38 = v31;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v36, v37, v38, v17);
                    v40 = 1.0 - FractionalWeight;
                    v35 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v34 = v40 * 0.125;
                  }
                  else
                  {
                    v34 = 0.125;
                    v35 = 0.75;
                  }
                  v15 = a3;
                  v30 = v44;
                  v16 = v42;
                  v28 = v46;
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[0]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[1]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v32), v35);
                }
                else
                {
                  *(float32x2_t *)(*a4 + 8 * v33) = vadd_f32(*(float32x2_t *)(*v15 + 8 * v32), *(float32x2_t *)(*a4 + 8 * v33));
                }
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_19;
          }
          v26 = *v19;
          *(_QWORD *)(*a4 + 8 * v22) = 0;
          v25 = (float32x2_t *)(*a4 + 8 * v22);
        }
        *v25 = vadd_f32(*(float32x2_t *)(*v15 + 8 * v26), *v25);
      }
LABEL_19:
      if (++v14 >= *(int *)(v48 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v60);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  int v44;
  unsigned int v45;
  float FractionalWeight;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BOOL4 v52;
  _QWORD *v53;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  uint64_t v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v57;
  int v58;
  float v59;
  _QWORD v60[2];
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66[2];
  uint64_t *v67;
  float *v68;
  _DWORD v69[4];
  int *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v65 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v56 = v53[1];
  v48 = v53[2];
  v57 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v56 + 456) + 8 * a5);
  if (*((_BYTE *)v57 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v52 = v7;
  v55 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v53[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v56 + 20);
  v75 = &v78;
  v76 = 2 * v9;
  v77 = 32;
  v79 = 0;
  if (2 * v9 >= 0x21)
  {
    v79 = (uint64_t *)operator new(8 * v9);
    v75 = v79;
    v77 = 2 * v9;
    v9 = *(_DWORD *)(v56 + 20);
  }
  VertexCreaseEndValues = 0;
  v70 = (int *)&v73;
  v71 = v9;
  v72 = 16;
  v74 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v74 = VertexCreaseEndValues;
    v70 = VertexCreaseEndValues;
    v72 = v9;
  }
  v60[0] = v56;
  v60[1] = v48;
  if (*(int *)(v56 + 8) >= 1)
  {
    v51 = v8;
    v11 = 0;
    v13 = v53;
    v12 = a3;
    v14 = v52;
    v15 = v55;
    do
    {
      v58 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v58 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v57 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v57 + 18) + 4 * v16);
        v18 = *(int *)(v51[12] + 4 * v58);
        v19 = (int *)(v51[18] + 4 * v18);
        v20 = *v19;
        v21 = v51[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          *(_QWORD *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v35 = v51[9];
          v36 = *(unsigned __int16 *)(v35 + 2 * v58);
          if (*(_WORD *)(v35 + 2 * v58))
          {
            v37 = 0;
            v38 = v21 + v18;
            v49 = v38;
            v50 = *((_QWORD *)v57 + 21) + v16;
            do
            {
              v39 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v58)
                                         + (unsigned __int16)v37));
              if (v37 != v39)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v40 = v17[v39];
              v41 = v19[v37];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              if (!v14 && (*(_BYTE *)(v38 + v37) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v57, v11, v39, v66);
                if ((*(_BYTE *)(v50 + v39) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v50 + v39) & 0x20) != 0)
                  {
                    v45 = v39 == 0;
                    v44 = v11;
                  }
                  else
                  {
                    v44 = v11;
                    v45 = v39;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v44, v45, v58);
                  v47 = 1.0 - FractionalWeight;
                  v43 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v42 = v47 * 0.125;
                }
                else
                {
                  v42 = 0.125;
                  v43 = 0.75;
                }
                v13 = v53;
                v12 = a3;
                v14 = v52;
                v15 = v55;
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[0]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[1]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v40), v43);
                v38 = v49;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v41) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v40), *(float32x2_t *)(*a4 + 8 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v23 = *(int *)(*(_QWORD *)(v56 + 336) + 8 * v11);
          v59 = 0.0;
          v24 = v75;
          v25 = (float *)v75 + v23;
          *(_QWORD *)v66 = &v59;
          v67 = v75;
          v68 = v25;
          memset(v69, 0, 13);
          v61 = v11;
          v62 = v58;
          v63 = *(_DWORD *)(*(_QWORD *)(v60[0] + 336) + 8 * v11);
          v64 = *(_DWORD *)(*(_QWORD *)(v60[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v65, (uint64_t)v60, (uint64_t)v66, (*(unsigned __int16 *)(*(_QWORD *)(v56 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v58) >> 7) & 0xF);
          v13 = v53;
          v12 = a3;
          v26 = *v17;
          v27 = *v19;
          *(_QWORD *)(*a4 + 8 * v27) = 0;
          if (v69[2] >= 1)
          {
            if (!LOBYTE(v69[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v28 = *(_QWORD *)(v56 + 264);
            v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              v30 = (int *)(*(_QWORD *)(v56 + 288) + 4 * *(int *)(v28 + 4 * ((2 * v11) | 1)));
              do
              {
                v31 = *v30++;
                v32 = *(int *)(v53[21] + 4 * v31);
                if ((_DWORD)v32 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * *(int *)(v51[12] + 4 * v32)), v33);
                --v29;
              }
              while (v29);
            }
          }
          if (v69[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v57, v11, v70);
            v13 = v53;
            v12 = a3;
            if ((int)v23 >= 1)
            {
              v34 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * v70[v34]), *(float *)((char *)v24 + v34 * 4));
                ++v34;
              }
              while (v23 != v34);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v59);
          v14 = v52;
          v15 = v55;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v56 + 8));
    VertexCreaseEndValues = v74;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v79);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  int v44;
  unsigned int v45;
  float FractionalWeight;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BOOL4 v52;
  _QWORD *v53;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v55;
  uint64_t v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v57;
  int v58;
  float v59;
  _QWORD v60[2];
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66[2];
  uint64_t *v67;
  float *v68;
  _DWORD v69[4];
  int *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v53 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v65 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v56 = v53[1];
  v48 = v53[2];
  v57 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v56 + 456) + 8 * a5);
  if (*((_BYTE *)v57 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v52 = v7;
  v55 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v53[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v56 + 20);
  v75 = &v78;
  v76 = 2 * v9;
  v77 = 32;
  v79 = 0;
  if (2 * v9 >= 0x21)
  {
    v79 = (uint64_t *)operator new(8 * v9);
    v75 = v79;
    v77 = 2 * v9;
    v9 = *(_DWORD *)(v56 + 20);
  }
  VertexCreaseEndValues = 0;
  v70 = (int *)&v73;
  v71 = v9;
  v72 = 16;
  v74 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v74 = VertexCreaseEndValues;
    v70 = VertexCreaseEndValues;
    v72 = v9;
  }
  v60[0] = v56;
  v60[1] = v48;
  if (*(int *)(v56 + 8) >= 1)
  {
    v51 = v8;
    v11 = 0;
    v13 = v53;
    v12 = a3;
    v14 = v52;
    v15 = v55;
    do
    {
      v58 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v58 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v57 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v57 + 18) + 4 * v16);
        v18 = *(int *)(v51[12] + 4 * v58);
        v19 = (int *)(v51[18] + 4 * v18);
        v20 = *v19;
        v21 = v51[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          *(_QWORD *)(*a4 + 8 * v20) = 0;
          *(float32x2_t *)(*a4 + 8 * *v19) = vadd_f32(*(float32x2_t *)(*v12 + 8 * *v17), *(float32x2_t *)(*a4 + 8 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v35 = v51[9];
          v36 = *(unsigned __int16 *)(v35 + 2 * v58);
          if (*(_WORD *)(v35 + 2 * v58))
          {
            v37 = 0;
            v38 = v21 + v18;
            v49 = v38;
            v50 = *((_QWORD *)v57 + 21) + v16;
            do
            {
              v39 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v58)
                                         + (unsigned __int16)v37));
              if (v37 != v39)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v40 = v17[v39];
              v41 = v19[v37];
              *(_QWORD *)(*a4 + 8 * v41) = 0;
              if (!v14 && (*(_BYTE *)(v38 + v37) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v57, v11, v39, v66);
                if ((*(_BYTE *)(v50 + v39) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v50 + v39) & 0x20) != 0)
                  {
                    v45 = v39 == 0;
                    v44 = v11;
                  }
                  else
                  {
                    v44 = v11;
                    v45 = v39;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v55, v44, v45, v58);
                  v47 = 1.0 - FractionalWeight;
                  v43 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v42 = v47 * 0.125;
                }
                else
                {
                  v42 = 0.125;
                  v43 = 0.75;
                }
                v13 = v53;
                v12 = a3;
                v14 = v52;
                v15 = v55;
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[0]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v66[1]), v42);
                *(float32x2_t *)(*a4 + 8 * v41) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v41), *(float32x2_t *)(*a3 + 8 * v40), v43);
                v38 = v49;
              }
              else
              {
                *(float32x2_t *)(*a4 + 8 * v41) = vadd_f32(*(float32x2_t *)(*v12 + 8 * v40), *(float32x2_t *)(*a4 + 8 * v41));
              }
              ++v37;
            }
            while (v36 != v37);
          }
        }
        else
        {
          v23 = *(int *)(*(_QWORD *)(v56 + 336) + 8 * v11);
          v59 = 0.0;
          v24 = v75;
          v25 = (float *)v75 + v23;
          *(_QWORD *)v66 = &v59;
          v67 = v75;
          v68 = v25;
          memset(v69, 0, 13);
          v61 = v11;
          v62 = v58;
          v63 = *(_DWORD *)(*(_QWORD *)(v60[0] + 336) + 8 * v11);
          v64 = *(_DWORD *)(*(_QWORD *)(v60[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v65, (uint64_t)v60, (uint64_t)v66, (*(unsigned __int16 *)(*(_QWORD *)(v56 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v58) >> 7) & 0xF);
          v13 = v53;
          v12 = a3;
          v26 = *v17;
          v27 = *v19;
          *(_QWORD *)(*a4 + 8 * v27) = 0;
          if (v69[2] >= 1)
          {
            if (!LOBYTE(v69[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v28 = *(_QWORD *)(v56 + 264);
            v29 = *(unsigned int *)(v28 + 8 * v11);
            if ((int)v29 >= 1)
            {
              v30 = (int *)(*(_QWORD *)(v56 + 288) + 4 * *(int *)(v28 + 4 * ((2 * v11) | 1)));
              do
              {
                v31 = *v30++;
                v32 = *(int *)(v53[21] + 4 * v31);
                if ((_DWORD)v32 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = *v25++;
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a4 + 8 * *(int *)(v51[12] + 4 * v32)), v33);
                --v29;
              }
              while (v29);
            }
          }
          if (v69[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v57, v11, v70);
            v13 = v53;
            v12 = a3;
            if ((int)v23 >= 1)
            {
              v34 = 0;
              do
              {
                *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*a3 + 8 * v70[v34]), *(float *)((char *)v24 + v34 * 4));
                ++v34;
              }
              while (v23 != v34);
            }
          }
          *(float32x2_t *)(*a4 + 8 * v27) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v27), *(float32x2_t *)(*v12 + 8 * v26), v59);
          v14 = v52;
          v15 = v55;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v56 + 8));
    VertexCreaseEndValues = v74;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v79);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv2_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v36;
  int v37;
  unsigned int v38;
  float FractionalWeight;
  float v40;
  _QWORD *v41;
  _BOOL4 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v49;
  int v50[2];
  uint64_t *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  void *__p;
  uint64_t *v56;
  int v57;
  int v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v47 = v6;
  v48 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v49 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  if (*((_BYTE *)v49 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v42 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v41 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v48 + 20);
  v56 = &v59;
  v57 = 2 * v12;
  v58 = 32;
  v60 = 0;
  if (2 * v12 >= 0x21)
  {
    v60 = operator new(8 * v12);
    v56 = (uint64_t *)v60;
    v58 = 2 * v12;
    v12 = *(_DWORD *)(v48 + 20);
  }
  VertexCreaseEndValues = 0;
  v51 = &v54;
  v52 = v12;
  v53 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v51 = (uint64_t *)VertexCreaseEndValues;
    v53 = v12;
  }
  if (*(int *)(v48 + 8) >= 1)
  {
    v14 = 0;
    v15 = a3;
    v16 = v42;
    while (1)
    {
      v17 = *(int *)(v47[30] + 4 * v14);
      if ((_DWORD)v17 != -1)
      {
        v18 = *(int *)(*((_QWORD *)v49 + 12) + 4 * v14);
        v19 = (int *)(*((_QWORD *)v49 + 18) + 4 * v18);
        v20 = *(int *)(v41[12] + 4 * v17);
        v21 = (int *)(v41[18] + 4 * v20);
        v22 = *v21;
        v23 = v41[21];
        if ((*(_BYTE *)(v23 + v22) & 1) == 0 && v16)
        {
          *(_QWORD *)(*a4 + 8 * v22) = 0;
          v25 = (float32x2_t *)(*a4 + 8 * *v21);
          v26 = *v19;
        }
        else
        {
          if ((*(_BYTE *)(v23 + v22) & 1) != 0)
          {
            v27 = v41[9];
            v28 = *(unsigned __int16 *)(v27 + 2 * v17);
            if (*(_WORD *)(v27 + 2 * v17))
            {
              v29 = 0;
              v45 = *((_QWORD *)v49 + 21) + v18;
              v46 = *(unsigned __int16 *)(v27 + 2 * v17);
              v30 = v23 + v20;
              v44 = v30;
              do
              {
                v31 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v17)
                                           + (unsigned __int16)v29));
                if (v29 != v31)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v32 = v19[v31];
                v33 = v21[v29];
                *(_QWORD *)(*a4 + 8 * v33) = 0;
                if (!v16 && (*(_BYTE *)(v30 + v29) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v49, v14, v31, v50);
                  if ((*(_BYTE *)(v45 + v31) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v45 + v31) & 0x20) != 0)
                    {
                      v38 = v31 == 0;
                      v36 = v11;
                      v37 = v14;
                    }
                    else
                    {
                      v36 = v11;
                      v37 = v14;
                      v38 = v31;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v36, v37, v38, v17);
                    v40 = 1.0 - FractionalWeight;
                    v35 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v34 = v40 * 0.125;
                  }
                  else
                  {
                    v34 = 0.125;
                    v35 = 0.75;
                  }
                  v15 = a3;
                  v30 = v44;
                  v16 = v42;
                  v28 = v46;
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[0]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v50[1]), v34);
                  *(float32x2_t *)(*a4 + 8 * v33) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v33), *(float32x2_t *)(*a3 + 8 * v32), v35);
                }
                else
                {
                  *(float32x2_t *)(*a4 + 8 * v33) = vadd_f32(*(float32x2_t *)(*v15 + 8 * v32), *(float32x2_t *)(*a4 + 8 * v33));
                }
                ++v29;
              }
              while (v28 != v29);
            }
            goto LABEL_19;
          }
          v26 = *v19;
          *(_QWORD *)(*a4 + 8 * v22) = 0;
          v25 = (float32x2_t *)(*a4 + 8 * v22);
        }
        *v25 = vadd_f32(*(float32x2_t *)(*v15 + 8 * v26), *v25);
      }
LABEL_19:
      if (++v14 >= *(int *)(v48 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v60);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t i;
  uint64_t v25;
  void *__p;
  void *v27;

  v4 = (a2 - 1);
  if ((int)a2 < 1 || (v5 = a2, (int)((*(_QWORD *)(*a1 + 72) - *(_QWORD *)(*a1 + 64)) >> 3) < (int)a2))
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0__cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v9 = *(_DWORD *)*a1;
  if (v9)
  {
    if (v9 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
    else if (v9 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      v10 = operator new(4 * v13);
      __p = v10;
    }
    v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      do
      {
        v18 = *(int *)(*(_QWORD *)(v11 + 216) + 4 * v16);
        if ((_DWORD)v18 != -1)
        {
          v19 = (int *)(*(_QWORD *)(v12 + 120) + v15);
          *(_OWORD *)(*a4 + 16 * v18) = 0uLL;
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * *v19));
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * v19[1]));
          v14 = *(_DWORD *)(v12 + 4);
        }
        ++v16;
        v15 += 8;
      }
      while (v16 < v14);
      v10 = __p;
    }
    operator delete(v10);
    v20 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v22 = *(_QWORD *)(v21 + 8);
    v27 = 0;
    if ((2 * *(_DWORD *)(v22 + 20)) >= 0x21)
    {
      v20 = operator new(4 * (2 * *(_DWORD *)(v22 + 20)));
      v27 = v20;
    }
    v23 = *(_DWORD *)(v22 + 8);
    if (v23 >= 1)
    {
      for (i = 0; i < v23; ++i)
      {
        v25 = *(int *)(*(_QWORD *)(v21 + 240) + 4 * i);
        if ((_DWORD)v25 != -1)
        {
          *(_OWORD *)(*a4 + 16 * v25) = 0uLL;
          *(float32x4_t *)(*a4 + 16 * v25) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v25));
          v23 = *(_DWORD *)(v22 + 8);
        }
      }
      v20 = v27;
    }
    operator delete(v20);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv3_fES7_EEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  void *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  void *__p;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    v7 = 0;
    v8 = *(int **)(v4 + 8);
    v9 = v8[5];
    v19 = (float *)&v20;
    __p = 0;
    if (v9 >= 0x11)
    {
      v7 = operator new(4 * v9);
      __p = v7;
      v19 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *(int *)(*(_QWORD *)(v4 + 168) + 4 * v10);
        if ((_DWORD)v11 != -1)
        {
          v12 = (unsigned int *)(*((_QWORD *)v8 + 3) + 8 * v10);
          v13 = *v12;
          if ((int)v13 < 1)
          {
            *(_OWORD *)(*a4 + 16 * v11) = 0uLL;
          }
          else
          {
            v14 = *((_QWORD *)v8 + 6) + 4 * (int)v12[1];
            v15 = v19;
            v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            *(_OWORD *)(*a4 + 16 * v11) = 0uLL;
            v17 = 0;
            v18 = 4 * v13;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v11) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v11), *(float32x4_t *)(*a3 + 16 * *(int *)(v14 + v17)), v19[v17 / 4]);
              v17 += 4;
            }
            while (v18 != v17);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      v7 = __p;
    }
    operator delete(v7);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  uint64_t v39;
  int v40;
  int v41;
  float *v42;
  int v43;
  int v44;
  uint64_t v45;
  void *__p;
  _QWORD v47[3];

  v7 = 0;
  v47[1] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v37 = *(_QWORD *)(v9 + 16);
  v41 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v42 = (float *)&v45;
  v43 = v11;
  v44 = 8;
  v39 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v42 = (float *)v7;
    v44 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v38[0] = v47;
        v38[1] = 0;
        v38[2] = v42;
        memset(&v38[3], 0, 13);
        v40 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v41, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v39, (uint64_t)v38, v20, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v14) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v14) = 0u;
        v24 = (float32x2_t)v47[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v47);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v24, 1);
        if (SLODWORD(v38[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v38[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v27 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v26 + 4 * v25));
              if (v27 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v28 = *a4;
              v29 = *a4;
            }
            else
            {
              v30 = 0;
              v31 = *(int *)(v26 + 4 * v25);
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * v31 + 4);
              v34 = *(_DWORD *)(v32 + 8 * (_DWORD)v31);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v30++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v30 + 1 < v34)
                v34 = 0;
              v27 = *(_DWORD *)(v36 + 4 * ((int)v30 - v34 + 1));
              v29 = *a4;
              v28 = *a3;
            }
            *(float32x4_t *)(v29 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v29 + 16 * v14), *(float32x4_t *)(v28 + 16 * v27), v42[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[5];
  float v42;
  _QWORD v43[2];
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  void *__p;
  uint64_t v54;

  v7 = 0;
  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v48 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v49 = &v52;
  v50 = v12;
  v51 = 32;
  v43[0] = v11;
  v43[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v49 = (uint64_t *)v7;
    v51 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v39 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v38 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v42 = 0.0;
        v22 = v49;
        v23 = (float *)v49 + v19;
        v40 = v19;
        v41[0] = &v42;
        v41[1] = v49;
        v41[2] = v23;
        memset(&v41[3], 0, 13);
        v44 = i;
        v45 = v15;
        v46 = *(_DWORD *)(*(_QWORD *)(v43[0] + 336) + 8 * i);
        v47 = *(_DWORD *)(*(_QWORD *)(v43[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v48, (uint64_t)v43, (uint64_t)v41, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v16) = 0u;
        if (SLODWORD(v41[4]) >= 1)
        {
          if (!BYTE4(v41[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v28 = (int *)(v24 + 4 * v37);
            do
            {
              v29 = *v28++;
              v30 = *(int *)(v9[21] + 4 * v29);
              if ((_DWORD)v30 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v31 = *v23++;
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v30), v31);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v41[3]) >= 1)
        {
          v32 = v40;
          if (v40 >= 1)
          {
            v33 = (int *)(v39 + 4 * v38);
            do
            {
              v34 = *v33++;
              v35 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v34);
              LODWORD(v34) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v35[i == *v35]), *(float *)&v34);
              --v32;
            }
            while (v32);
          }
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v42);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  uint64_t v39;
  int v40;
  int v41;
  float *v42;
  int v43;
  int v44;
  uint64_t v45;
  void *__p;
  _QWORD v47[3];

  v7 = 0;
  v47[1] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v37 = *(_QWORD *)(v9 + 16);
  v41 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v42 = (float *)&v45;
  v43 = v11;
  v44 = 8;
  v39 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v42 = (float *)v7;
    v44 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v38[0] = v47;
        v38[1] = 0;
        v38[2] = v42;
        memset(&v38[3], 0, 13);
        v40 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v41, (int *)&v39, (uint64_t)v38, v20, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v14) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v14) = 0u;
        v24 = (float32x2_t)v47[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v47);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v24, 1);
        if (SLODWORD(v38[4]) >= 1 && (int)v18 >= 1)
        {
          v25 = 0;
          v26 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v38[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v27 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v26 + 4 * v25));
              if (v27 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v28 = *a4;
              v29 = *a4;
            }
            else
            {
              v30 = 0;
              v31 = *(int *)(v26 + 4 * v25);
              v32 = *(_QWORD *)(v10 + 24);
              v33 = *(int *)(v32 + 8 * v31 + 4);
              v34 = *(_DWORD *)(v32 + 8 * (_DWORD)v31);
              do
                v35 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v33 + 4 * v30++);
              while (i != v35);
              v36 = *(_QWORD *)(v10 + 48) + 4 * v33;
              if ((int)v30 + 1 < v34)
                v34 = 0;
              v27 = *(_DWORD *)(v36 + 4 * ((int)v30 - v34 + 1));
              v29 = *a4;
              v28 = *a3;
            }
            *(float32x4_t *)(v29 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v29 + 16 * v14), *(float32x4_t *)(v28 + 16 * v27), v42[v25++]);
          }
          while (v25 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD v41[5];
  float v42;
  _QWORD v43[2];
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  void *__p;
  uint64_t v54;

  v7 = 0;
  v54 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v48 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v49 = &v52;
  v50 = v12;
  v51 = 32;
  v43[0] = v11;
  v43[1] = v10;
  v36 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v49 = (uint64_t *)v7;
    v51 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v39 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v38 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v37 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v42 = 0.0;
        v22 = v49;
        v23 = (float *)v49 + v19;
        v40 = v19;
        v41[0] = &v42;
        v41[1] = v49;
        v41[2] = v23;
        memset(&v41[3], 0, 13);
        v44 = i;
        v45 = v15;
        v46 = *(_DWORD *)(*(_QWORD *)(v43[0] + 336) + 8 * i);
        v47 = *(_DWORD *)(*(_QWORD *)(v43[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v48, (uint64_t)v43, (uint64_t)v41, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v36 + 432) + 2 * v15) >> 7) & 0xF);
        *(_OWORD *)(*a4 + 16 * v16) = 0u;
        if (SLODWORD(v41[4]) >= 1)
        {
          if (!BYTE4(v41[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v28 = (int *)(v24 + 4 * v37);
            do
            {
              v29 = *v28++;
              v30 = *(int *)(v9[21] + 4 * v29);
              if ((_DWORD)v30 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v31 = *v23++;
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v30), v31);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v41[3]) >= 1)
        {
          v32 = v40;
          if (v40 >= 1)
          {
            v33 = (int *)(v39 + 4 * v38);
            do
            {
              v34 = *v33++;
              v35 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v34);
              LODWORD(v34) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v35[i == *v35]), *(float *)&v34);
              --v32;
            }
            while (v32);
          }
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v42);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  void *v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  void *__p;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    v8 = 0;
    v9 = *(int **)(v5 + 8);
    v10 = *(_QWORD **)(*((_QWORD *)v9 + 57) + 8 * a5);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 456) + 8 * a5);
    v12 = v9[5];
    v23 = (float *)&v24;
    __p = 0;
    if (v12 >= 0x11)
    {
      v8 = operator new(4 * v12);
      __p = v8;
      v23 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = *(int *)(*(_QWORD *)(v5 + 168) + 4 * v13);
        if ((_DWORD)v14 != -1)
        {
          v15 = *(int *)(*(_QWORD *)(v11 + 96) + 4 * v14);
          v16 = (unsigned int *)(*(_QWORD *)(*v10 + 24) + 8 * v13);
          v17 = *v16;
          if ((int)v17 < 1)
          {
            *(_OWORD *)(*a4 + 16 * v15) = 0uLL;
          }
          else
          {
            v18 = v10[3] + 4 * (int)v16[1];
            v19 = v23;
            v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            *(_OWORD *)(*a4 + 16 * v15) = 0uLL;
            v21 = 0;
            v22 = 4 * v17;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v15) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v15), *(float32x4_t *)(*a3 + 16 * *(int *)(v18 + v21)), v23[v21 / 4]);
              v21 += 4;
            }
            while (v22 != v21);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      v8 = __p;
    }
    operator delete(v8);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD v52[5];
  int v53;
  int v54;
  int v55;
  _BYTE *v56;
  int v57;
  int v58;
  _BYTE v59[32];
  void *__p;
  _QWORD v61[3];

  v61[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v53 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v46 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v46 + 456) + 8 * a5);
  v49 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v59;
  v56 = v59;
  v57 = v13;
  v58 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v56 = EdgeFaceValues;
    v58 = v13;
    v14 = EdgeFaceValues;
  }
  v52[0] = v61;
  v52[1] = 0;
  v52[2] = v14;
  memset(&v52[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v52[3]) = 2;
    LODWORD(v52[4]) = 0;
    v61[0] = 0x3F0000003F000000;
    v47 = 1;
  }
  else
  {
    v47 = 0;
  }
  v50 = v49;
  if (*(int *)(v49 + 4) >= 1)
  {
    v16 = 0;
    v48 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v39 = v12[9];
          v40 = *(unsigned __int16 *)(v39 + 2 * v17);
          if (*(_WORD *)(v39 + 2 * v17))
          {
            v41 = 0;
            do
            {
              v42 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)
                                         + (unsigned __int16)v41));
              if (v41 != v42)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v42);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v42, &v54);
              v43 = v18[v41];
              *(_OWORD *)(*a4 + 16 * v43) = 0u;
              v44 = v55;
              v45.i64[0] = 0x3F0000003F000000;
              v45.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v43), v45, *(float32x4_t *)(*a3 + 16 * v54));
              *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v43), v45, *(float32x4_t *)(*a3 + 16 * v44));
              ++v41;
            }
            while (v40 != v41);
          }
        }
        else
        {
          if ((v47 & 1) == 0)
          {
            v51 = v16;
            if (*(float *)(*(_QWORD *)(v49 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v53, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v50, (uint64_t)v52, v19, (*(unsigned __int16 *)(*(_QWORD *)(v46 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v54);
          v21 = *v18;
          *(_OWORD *)(*a4 + 16 * v21) = 0u;
          v22 = v55;
          v23 = (float32x2_t)v61[0];
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v54), *(float *)v61);
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v22), v23, 1);
          EdgeFaceValues = (void *)v48;
          if (SLODWORD(v52[4]) >= 1)
          {
            v24 = (unsigned int *)(*(_QWORD *)(v49 + 144) + 8 * v16);
            v25 = *v24;
            if ((int)v25 >= 1)
            {
              v26 = 0;
              v27 = *(_QWORD *)(v49 + 168) + 4 * (int)v24[1];
              do
              {
                v28 = *(int *)(v27 + 4 * v26);
                if (BYTE4(v52[4]))
                {
                  v29 = *(int *)(*(_QWORD *)(v48 + 168) + 4 * v28);
                  if ((_DWORD)v29 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v48, a2, v20);
                  v30 = (int *)(v12[12] + 4 * v29);
                  v31 = *a4;
                  v32 = *a4;
                }
                else
                {
                  v33 = 0;
                  v34 = (2 * (int)v28) | 1;
                  v35 = *(_QWORD *)(v49 + 24);
                  v36 = *(_QWORD *)(v49 + 72) + 4 * *(int *)(v35 + 4 * v34);
                  v37 = *(_DWORD *)(v35 + 8 * v28);
                  do
                    v38 = *(unsigned int *)(v36 + 4 * v33++);
                  while (v16 != v38);
                  if ((int)v33 + 1 < v37)
                    v37 = 0;
                  v30 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v34)
                              + 4 * ((int)v33 - v37 + 1));
                  v32 = *a4;
                  v31 = *a3;
                }
                *(float32x4_t *)(v32 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(v32 + 16 * v21), *(float32x4_t *)(v31 + 16 * *v30), *(float *)&v56[4 * v26++]);
              }
              while (v26 != v25);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v48;
    }
    while (v16 < *(int *)(v49 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  unsigned int v46;
  float FractionalWeight;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BOOL4 v53;
  _QWORD *v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v56;
  uint64_t v57;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v58;
  int v59;
  float v60;
  _QWORD v61[2];
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67[2];
  uint64_t *v68;
  float *v69;
  _DWORD v70[4];
  int *v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v54 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v66 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v57 = v54[1];
  v49 = v54[2];
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v57 + 456) + 8 * a5);
  if (*((_BYTE *)v58 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v53 = v7;
  v56 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v54[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v49 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v57 + 20);
  v76 = &v79;
  v77 = 2 * v9;
  v78 = 32;
  v80 = 0;
  if (2 * v9 >= 0x21)
  {
    v80 = (uint64_t *)operator new(8 * v9);
    v76 = v80;
    v78 = 2 * v9;
    v9 = *(_DWORD *)(v57 + 20);
  }
  VertexCreaseEndValues = 0;
  v71 = (int *)&v74;
  v72 = v9;
  v73 = 16;
  v75 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v75 = VertexCreaseEndValues;
    v71 = VertexCreaseEndValues;
    v73 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    v52 = v8;
    v11 = 0;
    v12 = 0uLL;
    v14 = v54;
    v13 = a3;
    v15 = v53;
    v16 = v56;
    do
    {
      v59 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v59 != -1)
      {
        v17 = *(int *)(*((_QWORD *)v58 + 12) + 4 * v11);
        v18 = (int *)(*((_QWORD *)v58 + 18) + 4 * v17);
        v19 = *(int *)(v52[12] + 4 * v59);
        v20 = (int *)(v52[18] + 4 * v19);
        v21 = *v20;
        v22 = v52[21];
        if ((*(_BYTE *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if ((*(_BYTE *)(v22 + v21) & 1) != 0)
        {
          v36 = v52[9];
          v37 = *(unsigned __int16 *)(v36 + 2 * v59);
          if (*(_WORD *)(v36 + 2 * v59))
          {
            v38 = 0;
            v39 = v22 + v19;
            v50 = v39;
            v51 = *((_QWORD *)v58 + 21) + v17;
            do
            {
              v40 = *(unsigned __int16 *)(*((_QWORD *)v16 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 96) + 4 * v59)
                                         + (unsigned __int16)v38));
              if (v38 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v41 = v18[v40];
              v42 = v20[v38];
              *(_OWORD *)(*a4 + 16 * v42) = v12;
              if (!v15 && (*(_BYTE *)(v39 + v38) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v58, v11, v40, v67);
                if ((*(_BYTE *)(v51 + v40) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v51 + v40) & 0x20) != 0)
                  {
                    v46 = v40 == 0;
                    v45 = v11;
                  }
                  else
                  {
                    v45 = v11;
                    v46 = v40;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v56, v45, v46, v59);
                  v48 = 1.0 - FractionalWeight;
                  v44 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v43 = v48 * 0.125;
                }
                else
                {
                  v43 = 0.125;
                  v44 = 0.75;
                }
                v14 = v54;
                v13 = a3;
                v15 = v53;
                v16 = v56;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[0]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[1]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v44);
                v12 = 0uLL;
                v39 = v50;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v57 + 336) + 8 * v11);
          v60 = 0.0;
          v25 = v76;
          v26 = (float *)v76 + v24;
          *(_QWORD *)v67 = &v60;
          v68 = v76;
          v69 = v26;
          memset(v70, 0, 13);
          v62 = v11;
          v63 = v59;
          v64 = *(_DWORD *)(*(_QWORD *)(v61[0] + 336) + 8 * v11);
          v65 = *(_DWORD *)(*(_QWORD *)(v61[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(_QWORD *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          v12 = 0uLL;
          v14 = v54;
          v13 = a3;
          v27 = *v18;
          v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (v70[2] >= 1)
          {
            if (!LOBYTE(v70[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v29 = *(_QWORD *)(v57 + 264);
            v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              v31 = (int *)(*(_QWORD *)(v57 + 288) + 4 * *(int *)(v29 + 4 * ((2 * v11) | 1)));
              do
              {
                v32 = *v31++;
                v33 = *(int *)(v54[21] + 4 * v32);
                if ((_DWORD)v33 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v52[12] + 4 * v33)), v34);
                --v30;
              }
              while (v30);
            }
          }
          if (v70[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v58, v11, v71);
            v12 = 0uLL;
            v14 = v54;
            v13 = a3;
            if ((int)v24 >= 1)
            {
              v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v71[v35]), *(float *)((char *)v25 + v35 * 4));
                ++v35;
              }
              while (v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v60);
          v15 = v53;
          v16 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    VertexCreaseEndValues = v75;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v80);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD v52[5];
  int v53;
  int v54;
  int v55;
  _BYTE *v56;
  int v57;
  int v58;
  _BYTE v59[32];
  void *__p;
  _QWORD v61[3];

  v61[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v53 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v46 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v46 + 456) + 8 * a5);
  v49 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v59;
  v56 = v59;
  v57 = v13;
  v58 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v56 = EdgeFaceValues;
    v58 = v13;
    v14 = EdgeFaceValues;
  }
  v52[0] = v61;
  v52[1] = 0;
  v52[2] = v14;
  memset(&v52[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v52[3]) = 2;
    LODWORD(v52[4]) = 0;
    v61[0] = 0x3F0000003F000000;
    v47 = 1;
  }
  else
  {
    v47 = 0;
  }
  v50 = v49;
  if (*(int *)(v49 + 4) >= 1)
  {
    v16 = 0;
    v48 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v39 = v12[9];
          v40 = *(unsigned __int16 *)(v39 + 2 * v17);
          if (*(_WORD *)(v39 + 2 * v17))
          {
            v41 = 0;
            do
            {
              v42 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)
                                         + (unsigned __int16)v41));
              if (v41 != v42)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v42);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v42, &v54);
              v43 = v18[v41];
              *(_OWORD *)(*a4 + 16 * v43) = 0u;
              v44 = v55;
              v45.i64[0] = 0x3F0000003F000000;
              v45.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v43), v45, *(float32x4_t *)(*a3 + 16 * v54));
              *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v43), v45, *(float32x4_t *)(*a3 + 16 * v44));
              ++v41;
            }
            while (v40 != v41);
          }
        }
        else
        {
          if ((v47 & 1) == 0)
          {
            v51 = v16;
            if (*(float *)(*(_QWORD *)(v49 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v53, (int *)&v50, (uint64_t)v52, v19, (*(unsigned __int16 *)(*(_QWORD *)(v46 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v54);
          v21 = *v18;
          *(_OWORD *)(*a4 + 16 * v21) = 0u;
          v22 = v55;
          v23 = (float32x2_t)v61[0];
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v54), *(float *)v61);
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v22), v23, 1);
          EdgeFaceValues = (void *)v48;
          if (SLODWORD(v52[4]) >= 1)
          {
            v24 = (unsigned int *)(*(_QWORD *)(v49 + 144) + 8 * v16);
            v25 = *v24;
            if ((int)v25 >= 1)
            {
              v26 = 0;
              v27 = *(_QWORD *)(v49 + 168) + 4 * (int)v24[1];
              do
              {
                v28 = *(int *)(v27 + 4 * v26);
                if (BYTE4(v52[4]))
                {
                  v29 = *(int *)(*(_QWORD *)(v48 + 168) + 4 * v28);
                  if ((_DWORD)v29 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v48, a2, v20);
                  v30 = (int *)(v12[12] + 4 * v29);
                  v31 = *a4;
                  v32 = *a4;
                }
                else
                {
                  v33 = 0;
                  v34 = (2 * (int)v28) | 1;
                  v35 = *(_QWORD *)(v49 + 24);
                  v36 = *(_QWORD *)(v49 + 72) + 4 * *(int *)(v35 + 4 * v34);
                  v37 = *(_DWORD *)(v35 + 8 * v28);
                  do
                    v38 = *(unsigned int *)(v36 + 4 * v33++);
                  while (v16 != v38);
                  if ((int)v33 + 1 < v37)
                    v37 = 0;
                  v30 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v34)
                              + 4 * ((int)v33 - v37 + 1));
                  v32 = *a4;
                  v31 = *a3;
                }
                *(float32x4_t *)(v32 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(v32 + 16 * v21), *(float32x4_t *)(v31 + 16 * *v30), *(float *)&v56[4 * v26++]);
              }
              while (v26 != v25);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v48;
    }
    while (v16 < *(int *)(v49 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  unsigned int v46;
  float FractionalWeight;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BOOL4 v53;
  _QWORD *v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v56;
  uint64_t v57;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v58;
  int v59;
  float v60;
  _QWORD v61[2];
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67[2];
  uint64_t *v68;
  float *v69;
  _DWORD v70[4];
  int *v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v54 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v66 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v57 = v54[1];
  v49 = v54[2];
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v57 + 456) + 8 * a5);
  if (*((_BYTE *)v58 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v53 = v7;
  v56 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v54[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v49 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v57 + 20);
  v76 = &v79;
  v77 = 2 * v9;
  v78 = 32;
  v80 = 0;
  if (2 * v9 >= 0x21)
  {
    v80 = (uint64_t *)operator new(8 * v9);
    v76 = v80;
    v78 = 2 * v9;
    v9 = *(_DWORD *)(v57 + 20);
  }
  VertexCreaseEndValues = 0;
  v71 = (int *)&v74;
  v72 = v9;
  v73 = 16;
  v75 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v75 = VertexCreaseEndValues;
    v71 = VertexCreaseEndValues;
    v73 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    v52 = v8;
    v11 = 0;
    v12 = 0uLL;
    v14 = v54;
    v13 = a3;
    v15 = v53;
    v16 = v56;
    do
    {
      v59 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v59 != -1)
      {
        v17 = *(int *)(*((_QWORD *)v58 + 12) + 4 * v11);
        v18 = (int *)(*((_QWORD *)v58 + 18) + 4 * v17);
        v19 = *(int *)(v52[12] + 4 * v59);
        v20 = (int *)(v52[18] + 4 * v19);
        v21 = *v20;
        v22 = v52[21];
        if ((*(_BYTE *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if ((*(_BYTE *)(v22 + v21) & 1) != 0)
        {
          v36 = v52[9];
          v37 = *(unsigned __int16 *)(v36 + 2 * v59);
          if (*(_WORD *)(v36 + 2 * v59))
          {
            v38 = 0;
            v39 = v22 + v19;
            v50 = v39;
            v51 = *((_QWORD *)v58 + 21) + v17;
            do
            {
              v40 = *(unsigned __int16 *)(*((_QWORD *)v16 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 96) + 4 * v59)
                                         + (unsigned __int16)v38));
              if (v38 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v41 = v18[v40];
              v42 = v20[v38];
              *(_OWORD *)(*a4 + 16 * v42) = v12;
              if (!v15 && (*(_BYTE *)(v39 + v38) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v58, v11, v40, v67);
                if ((*(_BYTE *)(v51 + v40) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v51 + v40) & 0x20) != 0)
                  {
                    v46 = v40 == 0;
                    v45 = v11;
                  }
                  else
                  {
                    v45 = v11;
                    v46 = v40;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v56, v45, v46, v59);
                  v48 = 1.0 - FractionalWeight;
                  v44 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v43 = v48 * 0.125;
                }
                else
                {
                  v43 = 0.125;
                  v44 = 0.75;
                }
                v14 = v54;
                v13 = a3;
                v15 = v53;
                v16 = v56;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[0]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[1]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v44);
                v12 = 0uLL;
                v39 = v50;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v57 + 336) + 8 * v11);
          v60 = 0.0;
          v25 = v76;
          v26 = (float *)v76 + v24;
          *(_QWORD *)v67 = &v60;
          v68 = v76;
          v69 = v26;
          memset(v70, 0, 13);
          v62 = v11;
          v63 = v59;
          v64 = *(_DWORD *)(*(_QWORD *)(v61[0] + 336) + 8 * v11);
          v65 = *(_DWORD *)(*(_QWORD *)(v61[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(_QWORD *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          v12 = 0uLL;
          v14 = v54;
          v13 = a3;
          v27 = *v18;
          v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (v70[2] >= 1)
          {
            if (!LOBYTE(v70[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v29 = *(_QWORD *)(v57 + 264);
            v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              v31 = (int *)(*(_QWORD *)(v57 + 288) + 4 * *(int *)(v29 + 4 * ((2 * v11) | 1)));
              do
              {
                v32 = *v31++;
                v33 = *(int *)(v54[21] + 4 * v32);
                if ((_DWORD)v33 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v52[12] + 4 * v33)), v34);
                --v30;
              }
              while (v30);
            }
          }
          if (v70[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v58, v11, v71);
            v12 = 0uLL;
            v14 = v54;
            v13 = a3;
            if ((int)v24 >= 1)
            {
              v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v71[v35]), *(float *)((char *)v25 + v35 * 4));
                ++v35;
              }
              while (v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v60);
          v15 = v53;
          v16 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    VertexCreaseEndValues = v75;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v80);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void *EdgeFaceValues;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  void *__p;
  uint64_t v35;

  EdgeFaceValues = 0;
  v35 = *MEMORY[0x1E0C80C00];
  v26 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v27 = v26[1];
  v9 = *(_QWORD *)(v26[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v27 + 456) + 8 * a5);
  v11 = *(_QWORD **)(*(_QWORD *)(v26[2] + 456) + 8 * a5);
  v12 = *(unsigned int *)(v27 + 16);
  v30 = &v33;
  v31 = v12;
  v32 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    EdgeFaceValues = operator new(4 * v12);
    __p = EdgeFaceValues;
    v30 = (uint64_t *)EdgeFaceValues;
    v32 = v12;
  }
  if (*(int *)(v27 + 4) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(int *)(v26[27] + 4 * v13);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if ((*(_BYTE *)(v11[21] + *v15) & 1) != 0)
        {
          v19 = v11[9];
          v20 = *(unsigned __int16 *)(v19 + 2 * v14);
          if (*(_WORD *)(v19 + 2 * v14))
          {
            v21 = 0;
            do
            {
              v22 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 40)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) + 4 * v14)
                                         + (unsigned __int16)v21));
              if (v21 != v22)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v22);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, v22, &v28);
              v23 = v15[v21];
              *(_OWORD *)(*a4 + 16 * v23) = 0u;
              v24 = v29;
              v25.i64[0] = 0x3F0000003F000000;
              v25.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v23), v25, *(float32x4_t *)(*a3 + 16 * v28));
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v23), v25, *(float32x4_t *)(*a3 + 16 * v24));
              ++v21;
            }
            while (v20 != v21);
          }
        }
        else
        {
          EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, 0, &v28);
          v16 = *v15;
          *(_OWORD *)(*a4 + 16 * v16) = 0u;
          v17 = v29;
          v18.i64[0] = 0x3F0000003F000000;
          v18.i64[1] = 0x3F0000003F000000;
          *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v16), v18, *(float32x4_t *)(*a3 + 16 * v28));
          *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v16), v18, *(float32x4_t *)(*a3 + 16 * v17));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v27 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v37;
  int v38;
  unsigned int v39;
  float FractionalWeight;
  float v41;
  uint64_t v42;
  _QWORD *v43;
  _BOOL4 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v51;
  int v52[2];
  uint64_t *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  void *__p;
  uint64_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v49 = v6;
  v50 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v51 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v50 + 456) + 8 * a5);
  if (*((_BYTE *)v51 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v44 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v43 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v50 + 20);
  v58 = &v61;
  v59 = 2 * v12;
  v60 = 32;
  v62 = 0;
  if (2 * v12 >= 0x21)
  {
    v62 = operator new(8 * v12);
    v58 = (uint64_t *)v62;
    v60 = 2 * v12;
    v12 = *(_DWORD *)(v50 + 20);
  }
  VertexCreaseEndValues = 0;
  v53 = &v56;
  v54 = v12;
  v55 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v53 = (uint64_t *)VertexCreaseEndValues;
    v55 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    v14 = 0;
    v15 = 0uLL;
    v16 = a3;
    v17 = v44;
    while (1)
    {
      v18 = *(int *)(v49[30] + 4 * v14);
      if ((_DWORD)v18 != -1)
      {
        v19 = *(int *)(*((_QWORD *)v51 + 12) + 4 * v14);
        v20 = (int *)(*((_QWORD *)v51 + 18) + 4 * v19);
        v21 = *(int *)(v43[12] + 4 * v18);
        v22 = (int *)(v43[18] + 4 * v21);
        v23 = *v22;
        v24 = v43[21];
        if ((*(_BYTE *)(v24 + v23) & 1) == 0 && v17)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          v26 = (float32x4_t *)(*a4 + 16 * *v22);
          v27 = *v20;
        }
        else
        {
          if ((*(_BYTE *)(v24 + v23) & 1) != 0)
          {
            v28 = v43[9];
            v29 = *(unsigned __int16 *)(v28 + 2 * v18);
            if (*(_WORD *)(v28 + 2 * v18))
            {
              v30 = 0;
              v47 = *((_QWORD *)v51 + 21) + v19;
              v48 = *(unsigned __int16 *)(v28 + 2 * v18);
              v31 = v24 + v21;
              v46 = v24 + v21;
              do
              {
                v32 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v18)
                                           + (unsigned __int16)v30));
                if (v30 != v32)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = v20[v32];
                v34 = v22[v30];
                *(_OWORD *)(*a4 + 16 * v34) = v15;
                if (!v17 && (*(_BYTE *)(v31 + v30) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v51, v14, v32, v52);
                  if ((*(_BYTE *)(v47 + v32) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v47 + v32) & 0x20) != 0)
                    {
                      v39 = v32 == 0;
                      v37 = v11;
                      v38 = v14;
                    }
                    else
                    {
                      v37 = v11;
                      v38 = v14;
                      v39 = v32;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v37, v38, v39, v18);
                    v41 = 1.0 - FractionalWeight;
                    v36 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v35 = v41 * 0.125;
                  }
                  else
                  {
                    v35 = 0.125;
                    v36 = 0.75;
                  }
                  v16 = a3;
                  v31 = v46;
                  v17 = v44;
                  v15 = 0uLL;
                  v29 = v48;
                  v42 = v52[1];
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v52[0]), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v42), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v33), v36);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v34) = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v33), *(float32x4_t *)(*a4 + 16 * v34));
                }
                ++v30;
              }
              while (v29 != v30);
            }
            goto LABEL_19;
          }
          v27 = *v20;
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          v26 = (float32x4_t *)(*a4 + 16 * v23);
        }
        *v26 = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v50 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v62);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  unsigned int v46;
  float FractionalWeight;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BOOL4 v53;
  _QWORD *v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v56;
  uint64_t v57;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v58;
  int v59;
  float v60;
  _QWORD v61[2];
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67[2];
  uint64_t *v68;
  float *v69;
  _DWORD v70[4];
  int *v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v54 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v66 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v57 = v54[1];
  v49 = v54[2];
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v57 + 456) + 8 * a5);
  if (*((_BYTE *)v58 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v53 = v7;
  v56 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v54[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v49 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v57 + 20);
  v76 = &v79;
  v77 = 2 * v9;
  v78 = 32;
  v80 = 0;
  if (2 * v9 >= 0x21)
  {
    v80 = (uint64_t *)operator new(8 * v9);
    v76 = v80;
    v78 = 2 * v9;
    v9 = *(_DWORD *)(v57 + 20);
  }
  VertexCreaseEndValues = 0;
  v71 = (int *)&v74;
  v72 = v9;
  v73 = 16;
  v75 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v75 = VertexCreaseEndValues;
    v71 = VertexCreaseEndValues;
    v73 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    v52 = v8;
    v11 = 0;
    v12 = 0uLL;
    v14 = v54;
    v13 = a3;
    v15 = v53;
    v16 = v56;
    do
    {
      v59 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v59 != -1)
      {
        v17 = *(int *)(*((_QWORD *)v58 + 12) + 4 * v11);
        v18 = (int *)(*((_QWORD *)v58 + 18) + 4 * v17);
        v19 = *(int *)(v52[12] + 4 * v59);
        v20 = (int *)(v52[18] + 4 * v19);
        v21 = *v20;
        v22 = v52[21];
        if ((*(_BYTE *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if ((*(_BYTE *)(v22 + v21) & 1) != 0)
        {
          v36 = v52[9];
          v37 = *(unsigned __int16 *)(v36 + 2 * v59);
          if (*(_WORD *)(v36 + 2 * v59))
          {
            v38 = 0;
            v39 = v22 + v19;
            v50 = v39;
            v51 = *((_QWORD *)v58 + 21) + v17;
            do
            {
              v40 = *(unsigned __int16 *)(*((_QWORD *)v16 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 96) + 4 * v59)
                                         + (unsigned __int16)v38));
              if (v38 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v41 = v18[v40];
              v42 = v20[v38];
              *(_OWORD *)(*a4 + 16 * v42) = v12;
              if (!v15 && (*(_BYTE *)(v39 + v38) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v58, v11, v40, v67);
                if ((*(_BYTE *)(v51 + v40) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v51 + v40) & 0x20) != 0)
                  {
                    v46 = v40 == 0;
                    v45 = v11;
                  }
                  else
                  {
                    v45 = v11;
                    v46 = v40;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v56, v45, v46, v59);
                  v48 = 1.0 - FractionalWeight;
                  v44 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v43 = v48 * 0.125;
                }
                else
                {
                  v43 = 0.125;
                  v44 = 0.75;
                }
                v14 = v54;
                v13 = a3;
                v15 = v53;
                v16 = v56;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[0]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[1]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v44);
                v12 = 0uLL;
                v39 = v50;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v57 + 336) + 8 * v11);
          v60 = 0.0;
          v25 = v76;
          v26 = (float *)v76 + v24;
          *(_QWORD *)v67 = &v60;
          v68 = v76;
          v69 = v26;
          memset(v70, 0, 13);
          v62 = v11;
          v63 = v59;
          v64 = *(_DWORD *)(*(_QWORD *)(v61[0] + 336) + 8 * v11);
          v65 = *(_DWORD *)(*(_QWORD *)(v61[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(_QWORD *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          v12 = 0uLL;
          v14 = v54;
          v13 = a3;
          v27 = *v18;
          v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (v70[2] >= 1)
          {
            if (!LOBYTE(v70[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v29 = *(_QWORD *)(v57 + 264);
            v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              v31 = (int *)(*(_QWORD *)(v57 + 288) + 4 * *(int *)(v29 + 4 * ((2 * v11) | 1)));
              do
              {
                v32 = *v31++;
                v33 = *(int *)(v54[21] + 4 * v32);
                if ((_DWORD)v33 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v52[12] + 4 * v33)), v34);
                --v30;
              }
              while (v30);
            }
          }
          if (v70[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v58, v11, v71);
            v12 = 0uLL;
            v14 = v54;
            v13 = a3;
            if ((int)v24 >= 1)
            {
              v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v71[v35]), *(float *)((char *)v25 + v35 * 4));
                ++v35;
              }
              while (v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v60);
          v15 = v53;
          v16 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    VertexCreaseEndValues = v75;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v80);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _BOOL4 v15;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  int v45;
  unsigned int v46;
  float FractionalWeight;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _BOOL4 v53;
  _QWORD *v54;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v56;
  uint64_t v57;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v58;
  int v59;
  float v60;
  _QWORD v61[2];
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67[2];
  uint64_t *v68;
  float *v69;
  _DWORD v70[4];
  int *v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v54 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v66 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v57 = v54[1];
  v49 = v54[2];
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v57 + 456) + 8 * a5);
  if (*((_BYTE *)v58 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v53 = v7;
  v56 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v54[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v49 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v57 + 20);
  v76 = &v79;
  v77 = 2 * v9;
  v78 = 32;
  v80 = 0;
  if (2 * v9 >= 0x21)
  {
    v80 = (uint64_t *)operator new(8 * v9);
    v76 = v80;
    v78 = 2 * v9;
    v9 = *(_DWORD *)(v57 + 20);
  }
  VertexCreaseEndValues = 0;
  v71 = (int *)&v74;
  v72 = v9;
  v73 = 16;
  v75 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v75 = VertexCreaseEndValues;
    v71 = VertexCreaseEndValues;
    v73 = v9;
  }
  v61[0] = v57;
  v61[1] = v49;
  if (*(int *)(v57 + 8) >= 1)
  {
    v52 = v8;
    v11 = 0;
    v12 = 0uLL;
    v14 = v54;
    v13 = a3;
    v15 = v53;
    v16 = v56;
    do
    {
      v59 = *(_DWORD *)(v14[30] + 4 * v11);
      if (v59 != -1)
      {
        v17 = *(int *)(*((_QWORD *)v58 + 12) + 4 * v11);
        v18 = (int *)(*((_QWORD *)v58 + 18) + 4 * v17);
        v19 = *(int *)(v52[12] + 4 * v59);
        v20 = (int *)(v52[18] + 4 * v19);
        v21 = *v20;
        v22 = v52[21];
        if ((*(_BYTE *)(v22 + v21) & 1) == 0 && v15)
        {
          *(_OWORD *)(*a4 + 16 * v21) = v12;
          *(float32x4_t *)(*a4 + 16 * *v20) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * *v18), *(float32x4_t *)(*a4 + 16 * *v20));
        }
        else if ((*(_BYTE *)(v22 + v21) & 1) != 0)
        {
          v36 = v52[9];
          v37 = *(unsigned __int16 *)(v36 + 2 * v59);
          if (*(_WORD *)(v36 + 2 * v59))
          {
            v38 = 0;
            v39 = v22 + v19;
            v50 = v39;
            v51 = *((_QWORD *)v58 + 21) + v17;
            do
            {
              v40 = *(unsigned __int16 *)(*((_QWORD *)v16 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 4) + 96) + 4 * v59)
                                         + (unsigned __int16)v38));
              if (v38 != v40)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v41 = v18[v40];
              v42 = v20[v38];
              *(_OWORD *)(*a4 + 16 * v42) = v12;
              if (!v15 && (*(_BYTE *)(v39 + v38) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v58, v11, v40, v67);
                if ((*(_BYTE *)(v51 + v40) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v51 + v40) & 0x20) != 0)
                  {
                    v46 = v40 == 0;
                    v45 = v11;
                  }
                  else
                  {
                    v45 = v11;
                    v46 = v40;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v56, v45, v46, v59);
                  v48 = 1.0 - FractionalWeight;
                  v44 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v43 = v48 * 0.125;
                }
                else
                {
                  v43 = 0.125;
                  v44 = 0.75;
                }
                v14 = v54;
                v13 = a3;
                v15 = v53;
                v16 = v56;
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[0]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v67[1]), v43);
                *(float32x4_t *)(*a4 + 16 * v42) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v42), *(float32x4_t *)(*a3 + 16 * v41), v44);
                v12 = 0uLL;
                v39 = v50;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v42) = vaddq_f32(*(float32x4_t *)(*v13 + 16 * v41), *(float32x4_t *)(*a4 + 16 * v42));
              }
              ++v38;
            }
            while (v37 != v38);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v57 + 336) + 8 * v11);
          v60 = 0.0;
          v25 = v76;
          v26 = (float *)v76 + v24;
          *(_QWORD *)v67 = &v60;
          v68 = v76;
          v69 = v26;
          memset(v70, 0, 13);
          v62 = v11;
          v63 = v59;
          v64 = *(_DWORD *)(*(_QWORD *)(v61[0] + 336) + 8 * v11);
          v65 = *(_DWORD *)(*(_QWORD *)(v61[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v66, (uint64_t)v61, (uint64_t)v67, (*(unsigned __int16 *)(*(_QWORD *)(v57 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v49 + 432) + 2 * v59) >> 7) & 0xF);
          v12 = 0uLL;
          v14 = v54;
          v13 = a3;
          v27 = *v18;
          v28 = *v20;
          *(_OWORD *)(*a4 + 16 * v28) = 0u;
          if (v70[2] >= 1)
          {
            if (!LOBYTE(v70[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v29 = *(_QWORD *)(v57 + 264);
            v30 = *(unsigned int *)(v29 + 8 * v11);
            if ((int)v30 >= 1)
            {
              v31 = (int *)(*(_QWORD *)(v57 + 288) + 4 * *(int *)(v29 + 4 * ((2 * v11) | 1)));
              do
              {
                v32 = *v31++;
                v33 = *(int *)(v54[21] + 4 * v32);
                if ((_DWORD)v33 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v52[12] + 4 * v33)), v34);
                --v30;
              }
              while (v30);
            }
          }
          if (v70[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v58, v11, v71);
            v12 = 0uLL;
            v14 = v54;
            v13 = a3;
            if ((int)v24 >= 1)
            {
              v35 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v71[v35]), *(float *)((char *)v25 + v35 * 4));
                ++v35;
              }
              while (v24 != v35);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v13 + 16 * v27), v60);
          v15 = v53;
          v16 = v56;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v57 + 8));
    VertexCreaseEndValues = v75;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v80);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv3_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v37;
  int v38;
  unsigned int v39;
  float FractionalWeight;
  float v41;
  uint64_t v42;
  _QWORD *v43;
  _BOOL4 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v51;
  int v52[2];
  uint64_t *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  void *__p;
  uint64_t *v58;
  int v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v49 = v6;
  v50 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v51 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v50 + 456) + 8 * a5);
  if (*((_BYTE *)v51 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v44 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v43 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v50 + 20);
  v58 = &v61;
  v59 = 2 * v12;
  v60 = 32;
  v62 = 0;
  if (2 * v12 >= 0x21)
  {
    v62 = operator new(8 * v12);
    v58 = (uint64_t *)v62;
    v60 = 2 * v12;
    v12 = *(_DWORD *)(v50 + 20);
  }
  VertexCreaseEndValues = 0;
  v53 = &v56;
  v54 = v12;
  v55 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v53 = (uint64_t *)VertexCreaseEndValues;
    v55 = v12;
  }
  if (*(int *)(v50 + 8) >= 1)
  {
    v14 = 0;
    v15 = 0uLL;
    v16 = a3;
    v17 = v44;
    while (1)
    {
      v18 = *(int *)(v49[30] + 4 * v14);
      if ((_DWORD)v18 != -1)
      {
        v19 = *(int *)(*((_QWORD *)v51 + 12) + 4 * v14);
        v20 = (int *)(*((_QWORD *)v51 + 18) + 4 * v19);
        v21 = *(int *)(v43[12] + 4 * v18);
        v22 = (int *)(v43[18] + 4 * v21);
        v23 = *v22;
        v24 = v43[21];
        if ((*(_BYTE *)(v24 + v23) & 1) == 0 && v17)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          v26 = (float32x4_t *)(*a4 + 16 * *v22);
          v27 = *v20;
        }
        else
        {
          if ((*(_BYTE *)(v24 + v23) & 1) != 0)
          {
            v28 = v43[9];
            v29 = *(unsigned __int16 *)(v28 + 2 * v18);
            if (*(_WORD *)(v28 + 2 * v18))
            {
              v30 = 0;
              v47 = *((_QWORD *)v51 + 21) + v19;
              v48 = *(unsigned __int16 *)(v28 + 2 * v18);
              v31 = v24 + v21;
              v46 = v24 + v21;
              do
              {
                v32 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v18)
                                           + (unsigned __int16)v30));
                if (v30 != v32)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v33 = v20[v32];
                v34 = v22[v30];
                *(_OWORD *)(*a4 + 16 * v34) = v15;
                if (!v17 && (*(_BYTE *)(v31 + v30) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v51, v14, v32, v52);
                  if ((*(_BYTE *)(v47 + v32) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v47 + v32) & 0x20) != 0)
                    {
                      v39 = v32 == 0;
                      v37 = v11;
                      v38 = v14;
                    }
                    else
                    {
                      v37 = v11;
                      v38 = v14;
                      v39 = v32;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v37, v38, v39, v18);
                    v41 = 1.0 - FractionalWeight;
                    v36 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v35 = v41 * 0.125;
                  }
                  else
                  {
                    v35 = 0.125;
                    v36 = 0.75;
                  }
                  v16 = a3;
                  v31 = v46;
                  v17 = v44;
                  v15 = 0uLL;
                  v29 = v48;
                  v42 = v52[1];
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v52[0]), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v42), v35);
                  *(float32x4_t *)(*a4 + 16 * v34) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v34), *(float32x4_t *)(*a3 + 16 * v33), v36);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v34) = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v33), *(float32x4_t *)(*a4 + 16 * v34));
                }
                ++v30;
              }
              while (v29 != v30);
            }
            goto LABEL_19;
          }
          v27 = *v20;
          *(_OWORD *)(*a4 + 16 * v23) = v15;
          v26 = (float32x4_t *)(*a4 + 16 * v23);
        }
        *v26 = vaddq_f32(*(float32x4_t *)(*v16 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v50 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v62);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v5;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;
  void *__p;
  void *v29;

  v4 = (a2 - 1);
  if ((int)a2 < 1 || (v5 = a2, (int)((*(_QWORD *)(*a1 + 72) - *(_QWORD *)(*a1 + 64)) >> 3) < (int)a2))
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner11InterpolateIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0__cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v9 = *(_DWORD *)*a1;
  if (v9)
  {
    if (v9 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
    else if (v9 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(a1, v5, a3, a4);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_((uint64_t)a1, a2, a3, a4);
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v12 = *(_QWORD *)(v11 + 8);
    v13 = *(unsigned int *)(v12 + 16);
    __p = 0;
    if (v13 >= 9)
    {
      v10 = operator new(4 * v13);
      __p = v10;
    }
    v14 = *(_DWORD *)(v12 + 4);
    if (v14 >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      do
      {
        v18 = *(int *)(*(_QWORD *)(v11 + 216) + 4 * v16);
        if ((_DWORD)v18 != -1)
        {
          v19 = (int *)(*(_QWORD *)(v12 + 120) + v15);
          v20 = (_QWORD *)(*a4 + 16 * v18);
          *v20 = 0;
          v20[1] = 0;
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * *v19));
          *(float32x4_t *)(*a4 + 16 * v18) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v18), v17, *(float32x4_t *)(*a3 + 16 * v19[1]));
          v14 = *(_DWORD *)(v12 + 4);
        }
        ++v16;
        v15 += 8;
      }
      while (v16 < v14);
      v10 = __p;
    }
    operator delete(v10);
    v21 = 0;
    v22 = *(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4);
    v23 = *(_QWORD *)(v22 + 8);
    v29 = 0;
    if ((2 * *(_DWORD *)(v23 + 20)) >= 0x21)
    {
      v21 = operator new(4 * (2 * *(_DWORD *)(v23 + 20)));
      v29 = v21;
    }
    v24 = *(_DWORD *)(v23 + 8);
    if (v24 >= 1)
    {
      for (i = 0; i < v24; ++i)
      {
        v26 = *(int *)(*(_QWORD *)(v22 + 240) + 4 * i);
        if ((_DWORD)v26 != -1)
        {
          v27 = (_QWORD *)(*a4 + 16 * v26);
          *v27 = 0;
          v27[1] = 0;
          *(float32x4_t *)(*a4 + 16 * v26) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v26));
          v24 = *(_DWORD *)(v23 + 8);
        }
      }
      v21 = v29;
    }
    operator delete(v21);
  }
}

uint64_t _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner18InterpolateVaryingIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4, double a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;

  if ((int)a2 < 1
    || (v6 = *(_QWORD *)(*(_QWORD *)result + 64),
        (int)((unint64_t)(*(_QWORD *)(*(_QWORD *)result + 72) - v6) >> 3) < (int)a2))
  {
    _ZN23C3DSubdivCPUPrimvarDataIDv3_fE11InterpolateEiPN10OpenSubdiv6v3_1_13Far14PrimvarRefinerEPNS4_15TopologyRefinerE_cold_1(result, a2, (uint64_t)a3);
  }
  v7 = *(_QWORD *)(v6 + 8 * (a2 - 1));
  v8 = *(int **)(v7 + 8);
  if (*(int *)(v7 + 52) >= 1 && *v8 >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(int *)(*(_QWORD *)(v7 + 168) + 4 * v9);
      if ((_DWORD)v10 != -1)
      {
        v11 = *((_QWORD *)v8 + 6);
        v12 = *(unsigned int *)(*((_QWORD *)v8 + 3) + 8 * v9);
        v13 = *(int *)(*((_QWORD *)v8 + 3) + 8 * v9 + 4);
        v14 = (_QWORD *)(*a4 + 16 * v10);
        *v14 = 0;
        v14[1] = 0;
        if ((int)v12 >= 1)
        {
          v15 = (int *)(v11 + 4 * v13);
          a6.f32[0] = 1.0 / (float)(int)v12;
          a6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
          do
          {
            v16 = *v15++;
            *(float32x4_t *)(*a4 + 16 * v10) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v10), *(float32x4_t *)(*a3 + 16 * v16), a6);
            --v12;
          }
          while (v12);
        }
      }
      ++v9;
    }
    while (v9 < *v8);
  }
  v17 = v8[1];
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = 0;
    v20.i64[0] = 0x3F0000003F000000;
    v20.i64[1] = 0x3F0000003F000000;
    do
    {
      v21 = *(int *)(*(_QWORD *)(v7 + 216) + 4 * v19);
      if ((_DWORD)v21 != -1)
      {
        v22 = (int *)(*((_QWORD *)v8 + 15) + v18);
        v23 = (_QWORD *)(*a4 + 16 * v21);
        *v23 = 0;
        v23[1] = 0;
        *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v21), v20, *(float32x4_t *)(*a3 + 16 * *v22));
        *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v21), v20, *(float32x4_t *)(*a3 + 16 * v22[1]));
        v17 = v8[1];
      }
      ++v19;
      v18 += 8;
    }
    while (v19 < v17);
  }
  v24 = v8[2];
  if (v24 >= 1)
  {
    for (i = 0; i < v24; ++i)
    {
      v26 = *(int *)(*(_QWORD *)(v7 + 240) + 4 * i);
      if ((_DWORD)v26 != -1)
      {
        v27 = (_QWORD *)(*a4 + 16 * v26);
        *v27 = 0;
        v27[1] = 0;
        *(float32x4_t *)(*a4 + 16 * v26) = vaddq_f32(*(float32x4_t *)(*a3 + 16 * i), *(float32x4_t *)(*a4 + 16 * v26));
        v24 = v8[2];
      }
    }
  }
  return result;
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv4_fES7_EEviRKT_RT0_i(int **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  int v10;

  if ((int)a2 < 1 || (int)((*((_QWORD *)*a1 + 9) - *((_QWORD *)*a1 + 8)) >> 3) < (int)a2)
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner22InterpolateFaceVaryingIP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS6_NS8_9allocatorIS6_EEEEEEviRKT_RT0_i_cold_1((uint64_t)a1, a2, (uint64_t)a3);
  v10 = **a1;
  if (v10)
  {
    if (v10 == 2)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
    else if (v10 == 1)
    {
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
      _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    }
  }
  else
  {
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i((uint64_t)a1, a2, a3, a4, a5);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  void *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float *v21;
  uint64_t v22;
  void *__p;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v4 + 52))
  {
    v7 = 0;
    v8 = *(int **)(v4 + 8);
    v9 = v8[5];
    v21 = (float *)&v22;
    __p = 0;
    if (v9 >= 0x11)
    {
      v7 = operator new(4 * v9);
      __p = v7;
      v21 = (float *)v7;
    }
    if (*v8 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = *(int *)(*(_QWORD *)(v4 + 168) + 4 * v10);
        if ((_DWORD)v11 != -1)
        {
          v12 = (unsigned int *)(*((_QWORD *)v8 + 3) + 8 * v10);
          v13 = *v12;
          if ((int)v13 < 1)
          {
            v20 = (_QWORD *)(*a4 + 16 * v11);
            *v20 = 0;
            v20[1] = 0;
          }
          else
          {
            v14 = *((_QWORD *)v8 + 6) + 4 * (int)v12[1];
            v15 = v21;
            v16 = v13;
            do
            {
              *v15++ = 1.0 / (float)(int)v13;
              --v16;
            }
            while (v16);
            v17 = (_QWORD *)(*a4 + 16 * v11);
            *v17 = 0;
            v17[1] = 0;
            v18 = 0;
            v19 = 4 * v13;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v11) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v11), *(float32x4_t *)(*a3 + 16 * *(int *)(v14 + v18)), v21[v18 / 4]);
              v18 += 4;
            }
            while (v19 != v18);
          }
        }
        ++v10;
      }
      while (v10 < *v8);
      v7 = __p;
    }
    operator delete(v7);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  int v41;
  int v42;
  float *v43;
  int v44;
  int v45;
  uint64_t v46;
  void *__p;
  _QWORD v48[3];

  v7 = 0;
  v48[1] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v38 = *(_QWORD *)(v9 + 16);
  v42 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v43 = (float *)&v46;
  v44 = v11;
  v45 = 8;
  v40 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v43 = (float *)v7;
    v45 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v39[0] = v48;
        v39[1] = 0;
        v39[2] = v43;
        memset(&v39[3], 0, 13);
        v41 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v42, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v40, (uint64_t)v39, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v24 = (_QWORD *)(*a4 + 16 * v14);
        *v24 = 0;
        v24[1] = 0;
        v25 = (float32x2_t)v48[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v48);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v25, 1);
        if (SLODWORD(v39[4]) >= 1 && (int)v18 >= 1)
        {
          v26 = 0;
          v27 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v39[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v28 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v27 + 4 * v26));
              if (v28 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v29 = *a4;
              v30 = *a4;
            }
            else
            {
              v31 = 0;
              v32 = *(int *)(v27 + 4 * v26);
              v33 = *(_QWORD *)(v10 + 24);
              v34 = *(int *)(v33 + 8 * v32 + 4);
              v35 = *(_DWORD *)(v33 + 8 * (_DWORD)v32);
              do
                v36 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v34 + 4 * v31++);
              while (i != v36);
              v37 = *(_QWORD *)(v10 + 48) + 4 * v34;
              if ((int)v31 + 1 < v35)
                v35 = 0;
              v28 = *(_DWORD *)(v37 + 4 * ((int)v31 - v35 + 1));
              v30 = *a4;
              v29 = *a3;
            }
            *(float32x4_t *)(v30 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v30 + 16 * v14), *(float32x4_t *)(v29 + 16 * v28), v43[v26++]);
          }
          while (v26 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD v42[5];
  float v43;
  _QWORD v44[2];
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  void *__p;
  uint64_t v55;

  v7 = 0;
  v55 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v49 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v50 = &v53;
  v51 = v12;
  v52 = 32;
  v44[0] = v11;
  v44[1] = v10;
  v37 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v50 = (uint64_t *)v7;
    v52 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v40 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v39 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v38 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v43 = 0.0;
        v22 = v50;
        v23 = (float *)v50 + v19;
        v41 = v19;
        v42[0] = &v43;
        v42[1] = v50;
        v42[2] = v23;
        memset(&v42[3], 0, 13);
        v45 = i;
        v46 = v15;
        v47 = *(_DWORD *)(*(_QWORD *)(v44[0] + 336) + 8 * i);
        v48 = *(_DWORD *)(*(_QWORD *)(v44[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v49, (uint64_t)v44, (uint64_t)v42, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v15) >> 7) & 0xF);
        v28 = (_QWORD *)(*a4 + 16 * v16);
        *v28 = 0;
        v28[1] = 0;
        if (SLODWORD(v42[4]) >= 1)
        {
          if (!BYTE4(v42[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v29 = (int *)(v24 + 4 * v38);
            do
            {
              v30 = *v29++;
              v31 = *(int *)(v9[21] + 4 * v30);
              if ((_DWORD)v31 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v32 = *v23++;
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v31), v32);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v42[3]) >= 1)
        {
          v33 = v41;
          if (v41 >= 1)
          {
            v34 = (int *)(v40 + 4 * v39);
            do
            {
              v35 = *v34++;
              v36 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v35);
              LODWORD(v35) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v36[i == *v36]), *(float *)&v35);
              --v33;
            }
            while (v33);
          }
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v43);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  int v41;
  int v42;
  float *v43;
  int v44;
  int v45;
  uint64_t v46;
  void *__p;
  _QWORD v48[3];

  v7 = 0;
  v48[1] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v10 = *(_QWORD *)(v9 + 8);
  v38 = *(_QWORD *)(v9 + 16);
  v42 = *(_DWORD *)(v8 + 4);
  v11 = *(unsigned int *)(v10 + 16);
  v43 = (float *)&v46;
  v44 = v11;
  v45 = 8;
  v40 = v10;
  __p = 0;
  if (v11 >= 9)
  {
    v7 = operator new(4 * v11);
    __p = v7;
    v43 = (float *)v7;
    v45 = v11;
  }
  v12 = *(_DWORD *)(v10 + 4);
  if (v12 >= 1)
  {
    for (i = 0; i < v12; ++i)
    {
      v14 = *(int *)(*(_QWORD *)(v9 + 216) + 4 * i);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(*(_QWORD *)(v10 + 120) + 8 * i);
        v16 = *(_QWORD *)(v10 + 168);
        v17 = (unsigned int *)(*(_QWORD *)(v10 + 144) + 8 * i);
        v18 = *v17;
        v19 = (int)v17[1];
        v39[0] = v48;
        v39[1] = 0;
        v39[2] = v43;
        memset(&v39[3], 0, 13);
        v41 = i;
        if (*(float *)(*(_QWORD *)(v10 + 216) + 4 * i) <= 0.0)
          v20 = 1;
        else
          v20 = 4;
        v21 = OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v42, (int *)&v40, (uint64_t)v39, v20, (*(unsigned __int16 *)(*(_QWORD *)(v38 + 432) + 2 * v14) >> 7) & 0xF);
        v24 = (_QWORD *)(*a4 + 16 * v14);
        *v24 = 0;
        v24[1] = 0;
        v25 = (float32x2_t)v48[0];
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * *v15), *(float *)v48);
        *(float32x4_t *)(*a4 + 16 * v14) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v14), *(float32x4_t *)(*a3 + 16 * v15[1]), v25, 1);
        if (SLODWORD(v39[4]) >= 1 && (int)v18 >= 1)
        {
          v26 = 0;
          v27 = v16 + 4 * v19;
          do
          {
            if (BYTE4(v39[4]))
            {
              if (*(int *)(v9 + 52) <= 0)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1((uint64_t)v21, v22, v23);
              v28 = *(_DWORD *)(*(_QWORD *)(v9 + 168) + 4 * *(int *)(v27 + 4 * v26));
              if (v28 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2((uint64_t)v21, v22, v23);
              v29 = *a4;
              v30 = *a4;
            }
            else
            {
              v31 = 0;
              v32 = *(int *)(v27 + 4 * v26);
              v33 = *(_QWORD *)(v10 + 24);
              v34 = *(int *)(v33 + 8 * v32 + 4);
              v35 = *(_DWORD *)(v33 + 8 * (_DWORD)v32);
              do
                v36 = *(unsigned int *)(*(_QWORD *)(v10 + 72) + 4 * v34 + 4 * v31++);
              while (i != v36);
              v37 = *(_QWORD *)(v10 + 48) + 4 * v34;
              if ((int)v31 + 1 < v35)
                v35 = 0;
              v28 = *(_DWORD *)(v37 + 4 * ((int)v31 - v35 + 1));
              v30 = *a4;
              v29 = *a3;
            }
            *(float32x4_t *)(v30 + 16 * v14) = vmlaq_n_f32(*(float32x4_t *)(v30 + 16 * v14), *(float32x4_t *)(v29 + 16 * v28), v43[v26++]);
          }
          while (v26 != v18);
        }
        v12 = *(_DWORD *)(v10 + 4);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_(uint64_t *a1, int a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD v42[5];
  float v43;
  _QWORD v44[2];
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  void *__p;
  uint64_t v55;

  v7 = 0;
  v55 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9 = *(_QWORD **)(*(_QWORD *)(v8 + 64) + 8 * (a2 - 1));
  v11 = v9[1];
  v10 = v9[2];
  v49 = *(_DWORD *)(v8 + 4);
  v12 = 2 * *(_DWORD *)(v11 + 20);
  v50 = &v53;
  v51 = v12;
  v52 = 32;
  v44[0] = v11;
  v44[1] = v10;
  v37 = v10;
  __p = 0;
  if (v12 >= 0x21)
  {
    v7 = operator new(4 * v12);
    __p = v7;
    v50 = (uint64_t *)v7;
    v52 = v12;
  }
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= 1)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_DWORD *)(v9[30] + 4 * i);
      if (v15 != -1)
      {
        v16 = v15;
        v40 = *(_QWORD *)(v11 + 360);
        v17 = *(_QWORD *)(v11 + 336);
        v18 = (8 * i) | 4;
        v39 = *(int *)(v17 + v18);
        v19 = *(int *)(v17 + 8 * i);
        v20 = *(_QWORD *)(v11 + 264);
        v38 = *(int *)(v20 + v18);
        v21 = *(unsigned int *)(v20 + 8 * i);
        v43 = 0.0;
        v22 = v50;
        v23 = (float *)v50 + v19;
        v41 = v19;
        v42[0] = &v43;
        v42[1] = v50;
        v42[2] = v23;
        memset(&v42[3], 0, 13);
        v45 = i;
        v46 = v15;
        v47 = *(_DWORD *)(*(_QWORD *)(v44[0] + 336) + 8 * i);
        v48 = *(_DWORD *)(*(_QWORD *)(v44[0] + 264) + 8 * i);
        v24 = *(_QWORD *)(v11 + 288);
        OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v49, (uint64_t)v44, (uint64_t)v42, (*(unsigned __int16 *)(*(_QWORD *)(v11 + 432) + 2 * i) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v37 + 432) + 2 * v15) >> 7) & 0xF);
        v28 = (_QWORD *)(*a4 + 16 * v16);
        *v28 = 0;
        v28[1] = 0;
        if (SLODWORD(v42[4]) >= 1)
        {
          if (!BYTE4(v42[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_1(v25, v26, v27);
          if ((int)v21 >= 1)
          {
            v29 = (int *)(v24 + 4 * v38);
            do
            {
              v30 = *v29++;
              v31 = *(int *)(v9[21] + 4 * v30);
              if ((_DWORD)v31 == -1)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner15interpFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1__cold_2(v25, v26, v27);
              v32 = *v23++;
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a4 + 16 * v31), v32);
              --v21;
            }
            while (v21);
          }
        }
        if (SHIDWORD(v42[3]) >= 1)
        {
          v33 = v41;
          if (v41 >= 1)
          {
            v34 = (int *)(v40 + 4 * v39);
            do
            {
              v35 = *v34++;
              v36 = (_DWORD *)(*(_QWORD *)(v11 + 120) + 8 * v35);
              LODWORD(v35) = *(_DWORD *)v22;
              v22 = (uint64_t *)((char *)v22 + 4);
              *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * (int)v36[i == *v36]), *(float *)&v35);
              --v33;
            }
            while (v33);
          }
        }
        *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v16), *(float32x4_t *)(*a3 + 16 * i), v43);
        v13 = *(_DWORD *)(v11 + 8);
      }
    }
    v7 = __p;
  }
  operator delete(v7);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromFacesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, int a2, _QWORD *a3, _QWORD *a4, int a5)
{
  uint64_t v5;
  void *v8;
  int *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  float *v25;
  uint64_t v26;
  void *__p;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * (a2 - 1));
  if (*(_DWORD *)(v5 + 52))
  {
    v8 = 0;
    v9 = *(int **)(v5 + 8);
    v10 = *(_QWORD **)(*((_QWORD *)v9 + 57) + 8 * a5);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 16) + 456) + 8 * a5);
    v12 = v9[5];
    v25 = (float *)&v26;
    __p = 0;
    if (v12 >= 0x11)
    {
      v8 = operator new(4 * v12);
      __p = v8;
      v25 = (float *)v8;
    }
    if (*v9 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = *(int *)(*(_QWORD *)(v5 + 168) + 4 * v13);
        if ((_DWORD)v14 != -1)
        {
          v15 = *(int *)(*(_QWORD *)(v11 + 96) + 4 * v14);
          v16 = (unsigned int *)(*(_QWORD *)(*v10 + 24) + 8 * v13);
          v17 = *v16;
          if ((int)v17 < 1)
          {
            v24 = (_QWORD *)(*a4 + 16 * v15);
            *v24 = 0;
            v24[1] = 0;
          }
          else
          {
            v18 = v10[3] + 4 * (int)v16[1];
            v19 = v25;
            v20 = v17;
            do
            {
              *v19++ = 1.0 / (float)(int)v17;
              --v20;
            }
            while (v20);
            v21 = (_QWORD *)(*a4 + 16 * v15);
            *v21 = 0;
            v21[1] = 0;
            v22 = 0;
            v23 = 4 * v17;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v15) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v15), *(float32x4_t *)(*a3 + 16 * *(int *)(v18 + v22)), v25[v22 / 4]);
              v22 += 4;
            }
            while (v23 != v22);
          }
        }
        ++v13;
      }
      while (v13 < *v9);
      v8 = __p;
    }
    operator delete(v8);
  }
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float32x2_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD v54[5];
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  int v59;
  int v60;
  _BYTE v61[32];
  void *__p;
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v55 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v48 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v51 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v61;
  v58 = v61;
  v59 = v13;
  v60 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v58 = EdgeFaceValues;
    v60 = v13;
    v14 = EdgeFaceValues;
  }
  v54[0] = v63;
  v54[1] = 0;
  v54[2] = v14;
  memset(&v54[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v54[3]) = 2;
    LODWORD(v54[4]) = 0;
    v63[0] = 0x3F0000003F000000;
    v49 = 1;
  }
  else
  {
    v49 = 0;
  }
  v52 = v51;
  if (*(int *)(v51 + 4) >= 1)
  {
    v16 = 0;
    v50 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v40 = v12[9];
          v41 = *(unsigned __int16 *)(v40 + 2 * v17);
          if (*(_WORD *)(v40 + 2 * v17))
          {
            v42 = 0;
            do
            {
              v43 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v42 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v42 != v43)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v43);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v43, &v56);
              v44 = v18[v42];
              v45 = (_QWORD *)(*a4 + 16 * v44);
              *v45 = 0;
              v45[1] = 0;
              v46 = v57;
              v47.i64[0] = 0x3F0000003F000000;
              v47.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v44) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v44), v47, *(float32x4_t *)(*a3 + 16 * v56));
              *(float32x4_t *)(*a4 + 16 * v44) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v44), v47, *(float32x4_t *)(*a3 + 16 * v46));
              ++v42;
            }
            while (v41 != v42);
          }
        }
        else
        {
          if ((v49 & 1) == 0)
          {
            v53 = v16;
            if (*(float *)(*(_QWORD *)(v51 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v55, (OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface *)&v52, (uint64_t)v54, v19, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v56);
          v21 = *v18;
          v22 = (_QWORD *)(*a4 + 16 * v21);
          *v22 = 0;
          v22[1] = 0;
          v23 = v57;
          v24 = (float32x2_t)v63[0];
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v56), *(float *)v63);
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v23), v24, 1);
          EdgeFaceValues = (void *)v50;
          if (SLODWORD(v54[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v51 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v51 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v54[4]))
                {
                  v30 = *(int *)(*(_QWORD *)(v50 + 168) + 4 * v29);
                  if ((_DWORD)v30 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v50, a2, v20);
                  v31 = (int *)(v12[12] + 4 * v30);
                  v32 = *a4;
                  v33 = *a4;
                }
                else
                {
                  v34 = 0;
                  v35 = (2 * (int)v29) | 1;
                  v36 = *(_QWORD *)(v51 + 24);
                  v37 = *(_QWORD *)(v51 + 72) + 4 * *(int *)(v36 + 4 * v35);
                  v38 = *(_DWORD *)(v36 + 8 * v29);
                  do
                    v39 = *(unsigned int *)(v37 + 4 * v34++);
                  while (v16 != v39);
                  if ((int)v34 + 1 < v38)
                    v38 = 0;
                  v31 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v35)
                              + 4 * ((int)v34 - v38 + 1));
                  v33 = *a4;
                  v32 = *a3;
                }
                *(float32x4_t *)(v33 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(v33 + 16 * v21), *(float32x4_t *)(v32 + 16 * *v31), *(float *)&v58[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v50;
    }
    while (v16 < *(int *)(v51 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  float v45;
  float v46;
  int v47;
  unsigned int v48;
  float FractionalWeight;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  _QWORD *v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v58;
  uint64_t v59;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v60;
  int v61;
  float v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69[2];
  uint64_t *v70;
  float *v71;
  _DWORD v72[4];
  int *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v56 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v68 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v59 = v56[1];
  v51 = v56[2];
  v60 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v59 + 456) + 8 * a5);
  if (*((_BYTE *)v60 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v55 = v7;
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v56[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v51 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v59 + 20);
  v78 = &v81;
  v79 = 2 * v9;
  v80 = 32;
  v82 = 0;
  if (2 * v9 >= 0x21)
  {
    v82 = (uint64_t *)operator new(8 * v9);
    v78 = v82;
    v80 = 2 * v9;
    v9 = *(_DWORD *)(v59 + 20);
  }
  VertexCreaseEndValues = 0;
  v73 = (int *)&v76;
  v74 = v9;
  v75 = 16;
  v77 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v77 = VertexCreaseEndValues;
    v73 = VertexCreaseEndValues;
    v75 = v9;
  }
  v63[0] = v59;
  v63[1] = v51;
  if (*(int *)(v59 + 8) >= 1)
  {
    v54 = v8;
    v11 = 0;
    v13 = v56;
    v12 = a3;
    v14 = v55;
    v15 = v58;
    do
    {
      v61 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v61 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v60 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v60 + 18) + 4 * v16);
        v18 = *(int *)(v54[12] + 4 * v61);
        v19 = (int *)(v54[18] + 4 * v18);
        v20 = *v19;
        v21 = v54[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          v23 = (_QWORD *)(*a4 + 16 * v20);
          *v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v37 = v54[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v61);
          if (*(_WORD *)(v37 + 2 * v61))
          {
            v39 = 0;
            v40 = v21 + v18;
            v52 = v40;
            v53 = *((_QWORD *)v60 + 21) + v16;
            do
            {
              v41 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v61)
                                         + (unsigned __int16)v39));
              if (v39 != v41)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v42 = v17[v41];
              v43 = v19[v39];
              v44 = (_QWORD *)(*a4 + 16 * v43);
              *v44 = 0;
              v44[1] = 0;
              if (!v14 && (*(_BYTE *)(v40 + v39) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v60, v11, v41, v69);
                if ((*(_BYTE *)(v53 + v41) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v53 + v41) & 0x20) != 0)
                  {
                    v48 = v41 == 0;
                    v47 = v11;
                  }
                  else
                  {
                    v47 = v11;
                    v48 = v41;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v58, v47, v48, v61);
                  v50 = 1.0 - FractionalWeight;
                  v46 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v45 = v50 * 0.125;
                }
                else
                {
                  v45 = 0.125;
                  v46 = 0.75;
                }
                v13 = v56;
                v12 = a3;
                v14 = v55;
                v15 = v58;
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[0]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[1]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v42), v46);
                v40 = v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v43) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v42), *(float32x4_t *)(*a4 + 16 * v43));
              }
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v59 + 336) + 8 * v11);
          v62 = 0.0;
          v25 = v78;
          v26 = (float *)v78 + v24;
          *(_QWORD *)v69 = &v62;
          v70 = v78;
          v71 = v26;
          memset(v72, 0, 13);
          v64 = v11;
          v65 = v61;
          v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v11);
          v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v68, (uint64_t)v63, (uint64_t)v69, (*(unsigned __int16 *)(*(_QWORD *)(v59 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v51 + 432) + 2 * v61) >> 7) & 0xF);
          v13 = v56;
          v12 = a3;
          v27 = *v17;
          v28 = *v19;
          v29 = (_QWORD *)(*a4 + 16 * v28);
          *v29 = 0;
          v29[1] = 0;
          if (v72[2] >= 1)
          {
            if (!LOBYTE(v72[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v30 = *(_QWORD *)(v59 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v59 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v11) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v56[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v35 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v54[12] + 4 * v34)), v35);
                --v31;
              }
              while (v31);
            }
          }
          if (v72[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v60, v11, v73);
            v13 = v56;
            v12 = a3;
            if ((int)v24 >= 1)
            {
              v36 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v73[v36]), *(float *)((char *)v25 + v36 * 4));
                ++v36;
              }
              while (v24 != v36);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v62);
          v14 = v55;
          v15 = v58;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v59 + 8));
    VertexCreaseEndValues = v77;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  void *EdgeFaceValues;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float32x2_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  float32x4_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD v54[5];
  int v55;
  int v56;
  int v57;
  _BYTE *v58;
  int v59;
  int v60;
  _BYTE v61[32];
  void *__p;
  _QWORD v63[3];

  v63[1] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v55 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v9 = v8[1];
  v10 = *(_QWORD *)(v8[60] + 8 * a5);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 456) + 8 * a5);
  v48 = v8[2];
  v12 = *(_QWORD **)(*(_QWORD *)(v48 + 456) + 8 * a5);
  v51 = v9;
  v13 = *(unsigned int *)(v9 + 16);
  v14 = v61;
  v58 = v61;
  v59 = v13;
  v60 = 8;
  __p = 0;
  if (v13 < 9)
  {
    EdgeFaceValues = 0;
  }
  else
  {
    EdgeFaceValues = operator new(4 * v13);
    __p = EdgeFaceValues;
    v58 = EdgeFaceValues;
    v60 = v13;
    v14 = EdgeFaceValues;
  }
  v54[0] = v63;
  v54[1] = 0;
  v54[2] = v14;
  memset(&v54[3], 0, 13);
  if (*(_BYTE *)(v11 + 12) || !**(_DWORD **)a1)
  {
    LODWORD(v54[3]) = 2;
    LODWORD(v54[4]) = 0;
    v63[0] = 0x3F0000003F000000;
    v49 = 1;
  }
  else
  {
    v49 = 0;
  }
  v52 = v51;
  if (*(int *)(v51 + 4) >= 1)
  {
    v16 = 0;
    v50 = (uint64_t)v8;
    do
    {
      v17 = *(int *)(v8[27] + 4 * v16);
      if ((_DWORD)v17 != -1)
      {
        v18 = (int *)(v12[18] + 4 * *(int *)(v12[12] + 4 * v17));
        if ((*(_BYTE *)(v12[21] + *v18) & 1) != 0)
        {
          v40 = v12[9];
          v41 = *(unsigned __int16 *)(v40 + 2 * v17);
          if (*(_WORD *)(v40 + 2 * v17))
          {
            v42 = 0;
            do
            {
              v43 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 40)
                                        + 2 * (v42 + *(int *)(*(_QWORD *)(*(_QWORD *)(v10 + 32) + 96) + 4 * v17)));
              if (v42 != v43)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v43);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, v43, &v56);
              v44 = v18[v42];
              v45 = (_QWORD *)(*a4 + 16 * v44);
              *v45 = 0;
              v45[1] = 0;
              v46 = v57;
              v47.i64[0] = 0x3F0000003F000000;
              v47.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v44) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v44), v47, *(float32x4_t *)(*a3 + 16 * v56));
              *(float32x4_t *)(*a4 + 16 * v44) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v44), v47, *(float32x4_t *)(*a3 + 16 * v46));
              ++v42;
            }
            while (v41 != v42);
          }
        }
        else
        {
          if ((v49 & 1) == 0)
          {
            v53 = v16;
            if (*(float *)(*(_QWORD *)(v51 + 216) + 4 * v16) <= 0.0)
              v19 = 1;
            else
              v19 = 4;
            OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeEdgeVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::EdgeInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v55, (int *)&v52, (uint64_t)v54, v19, (*(unsigned __int16 *)(*(_QWORD *)(v48 + 432) + 2 * v17) >> 7) & 0xF);
          }
          OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues((_QWORD *)v11, v16, 0, &v56);
          v21 = *v18;
          v22 = (_QWORD *)(*a4 + 16 * v21);
          *v22 = 0;
          v22[1] = 0;
          v23 = v57;
          v24 = (float32x2_t)v63[0];
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v56), *(float *)v63);
          *(float32x4_t *)(*a4 + 16 * v21) = vmlaq_lane_f32(*(float32x4_t *)(*a4 + 16 * v21), *(float32x4_t *)(*a3 + 16 * v23), v24, 1);
          EdgeFaceValues = (void *)v50;
          if (SLODWORD(v54[4]) >= 1)
          {
            v25 = (unsigned int *)(*(_QWORD *)(v51 + 144) + 8 * v16);
            v26 = *v25;
            if ((int)v26 >= 1)
            {
              v27 = 0;
              v28 = *(_QWORD *)(v51 + 168) + 4 * (int)v25[1];
              do
              {
                v29 = *(int *)(v28 + 4 * v27);
                if (BYTE4(v54[4]))
                {
                  v30 = *(int *)(*(_QWORD *)(v50 + 168) + 4 * v29);
                  if ((_DWORD)v30 == -1)
                    _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1(v50, a2, v20);
                  v31 = (int *)(v12[12] + 4 * v30);
                  v32 = *a4;
                  v33 = *a4;
                }
                else
                {
                  v34 = 0;
                  v35 = (2 * (int)v29) | 1;
                  v36 = *(_QWORD *)(v51 + 24);
                  v37 = *(_QWORD *)(v51 + 72) + 4 * *(int *)(v36 + 4 * v35);
                  v38 = *(_DWORD *)(v36 + 8 * v29);
                  do
                    v39 = *(unsigned int *)(v37 + 4 * v34++);
                  while (v16 != v39);
                  if ((int)v34 + 1 < v38)
                    v38 = 0;
                  v31 = (int *)(*(_QWORD *)(v11 + 24)
                              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 4 * v35)
                              + 4 * ((int)v34 - v38 + 1));
                  v33 = *a4;
                  v32 = *a3;
                }
                *(float32x4_t *)(v33 + 16 * v21) = vmlaq_n_f32(*(float32x4_t *)(v33 + 16 * v21), *(float32x4_t *)(v32 + 16 * *v31), *(float *)&v58[4 * v27++]);
              }
              while (v27 != v26);
            }
          }
        }
      }
      ++v16;
      v8 = (_QWORD *)v50;
    }
    while (v16 < *(int *)(v51 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  float v45;
  float v46;
  int v47;
  unsigned int v48;
  float FractionalWeight;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  _QWORD *v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v58;
  uint64_t v59;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v60;
  int v61;
  float v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69[2];
  uint64_t *v70;
  float *v71;
  _DWORD v72[4];
  int *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v56 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v68 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v59 = v56[1];
  v51 = v56[2];
  v60 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v59 + 456) + 8 * a5);
  if (*((_BYTE *)v60 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v55 = v7;
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v56[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v51 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v59 + 20);
  v78 = &v81;
  v79 = 2 * v9;
  v80 = 32;
  v82 = 0;
  if (2 * v9 >= 0x21)
  {
    v82 = (uint64_t *)operator new(8 * v9);
    v78 = v82;
    v80 = 2 * v9;
    v9 = *(_DWORD *)(v59 + 20);
  }
  VertexCreaseEndValues = 0;
  v73 = (int *)&v76;
  v74 = v9;
  v75 = 16;
  v77 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v77 = VertexCreaseEndValues;
    v73 = VertexCreaseEndValues;
    v75 = v9;
  }
  v63[0] = v59;
  v63[1] = v51;
  if (*(int *)(v59 + 8) >= 1)
  {
    v54 = v8;
    v11 = 0;
    v13 = v56;
    v12 = a3;
    v14 = v55;
    v15 = v58;
    do
    {
      v61 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v61 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v60 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v60 + 18) + 4 * v16);
        v18 = *(int *)(v54[12] + 4 * v61);
        v19 = (int *)(v54[18] + 4 * v18);
        v20 = *v19;
        v21 = v54[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          v23 = (_QWORD *)(*a4 + 16 * v20);
          *v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v37 = v54[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v61);
          if (*(_WORD *)(v37 + 2 * v61))
          {
            v39 = 0;
            v40 = v21 + v18;
            v52 = v40;
            v53 = *((_QWORD *)v60 + 21) + v16;
            do
            {
              v41 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v61)
                                         + (unsigned __int16)v39));
              if (v39 != v41)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v42 = v17[v41];
              v43 = v19[v39];
              v44 = (_QWORD *)(*a4 + 16 * v43);
              *v44 = 0;
              v44[1] = 0;
              if (!v14 && (*(_BYTE *)(v40 + v39) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v60, v11, v41, v69);
                if ((*(_BYTE *)(v53 + v41) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v53 + v41) & 0x20) != 0)
                  {
                    v48 = v41 == 0;
                    v47 = v11;
                  }
                  else
                  {
                    v47 = v11;
                    v48 = v41;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v58, v47, v48, v61);
                  v50 = 1.0 - FractionalWeight;
                  v46 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v45 = v50 * 0.125;
                }
                else
                {
                  v45 = 0.125;
                  v46 = 0.75;
                }
                v13 = v56;
                v12 = a3;
                v14 = v55;
                v15 = v58;
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[0]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[1]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v42), v46);
                v40 = v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v43) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v42), *(float32x4_t *)(*a4 + 16 * v43));
              }
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v59 + 336) + 8 * v11);
          v62 = 0.0;
          v25 = v78;
          v26 = (float *)v78 + v24;
          *(_QWORD *)v69 = &v62;
          v70 = v78;
          v71 = v26;
          memset(v72, 0, 13);
          v64 = v11;
          v65 = v61;
          v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v11);
          v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v68, (uint64_t)v63, (uint64_t)v69, (*(unsigned __int16 *)(*(_QWORD *)(v59 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v51 + 432) + 2 * v61) >> 7) & 0xF);
          v13 = v56;
          v12 = a3;
          v27 = *v17;
          v28 = *v19;
          v29 = (_QWORD *)(*a4 + 16 * v28);
          *v29 = 0;
          v29[1] = 0;
          if (v72[2] >= 1)
          {
            if (!LOBYTE(v72[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v30 = *(_QWORD *)(v59 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v59 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v11) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v56[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v35 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v54[12] + 4 * v34)), v35);
                --v31;
              }
              while (v31);
            }
          }
          if (v72[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v60, v11, v73);
            v13 = v56;
            v12 = a3;
            if ((int)v24 >= 1)
            {
              v36 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v73[v36]), *(float *)((char *)v25 + v36 * 4));
                ++v36;
              }
              while (v24 != v36);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v62);
          v14 = v55;
          v15 = v58;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v59 + 8));
    VertexCreaseEndValues = v77;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  void *EdgeFaceValues;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  float32x4_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t v35;
  void *__p;
  uint64_t v37;

  EdgeFaceValues = 0;
  v37 = *MEMORY[0x1E0C80C00];
  v28 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v29 = v28[1];
  v9 = *(_QWORD *)(v28[60] + 8 * a5);
  v10 = *(_QWORD **)(*(_QWORD *)(v29 + 456) + 8 * a5);
  v11 = *(_QWORD **)(*(_QWORD *)(v28[2] + 456) + 8 * a5);
  v12 = *(unsigned int *)(v29 + 16);
  v32 = &v35;
  v33 = v12;
  v34 = 8;
  __p = 0;
  if (v12 >= 9)
  {
    EdgeFaceValues = operator new(4 * v12);
    __p = EdgeFaceValues;
    v32 = (uint64_t *)EdgeFaceValues;
    v34 = v12;
  }
  if (*(int *)(v29 + 4) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(int *)(v28[27] + 4 * v13);
      if ((_DWORD)v14 != -1)
      {
        v15 = (int *)(v11[18] + 4 * *(int *)(v11[12] + 4 * v14));
        if ((*(_BYTE *)(v11[21] + *v15) & 1) != 0)
        {
          v20 = v11[9];
          v21 = *(unsigned __int16 *)(v20 + 2 * v14);
          if (*(_WORD *)(v20 + 2 * v14))
          {
            v22 = 0;
            do
            {
              v23 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 40)
                                        + 2 * (v22 + *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 96) + 4 * v14)));
              if (v22 != v23)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromEdgesILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)EdgeFaceValues, a2, v23);
              EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, v23, &v30);
              v24 = v15[v22];
              v25 = (_QWORD *)(*a4 + 16 * v24);
              *v25 = 0;
              v25[1] = 0;
              v26 = v31;
              v27.i64[0] = 0x3F0000003F000000;
              v27.i64[1] = 0x3F0000003F000000;
              *(float32x4_t *)(*a4 + 16 * v24) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v24), v27, *(float32x4_t *)(*a3 + 16 * v30));
              *(float32x4_t *)(*a4 + 16 * v24) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v24), v27, *(float32x4_t *)(*a3 + 16 * v26));
              ++v22;
            }
            while (v21 != v22);
          }
        }
        else
        {
          EdgeFaceValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getEdgeFaceValues(v10, v13, 0, &v30);
          v16 = *v15;
          v17 = (_QWORD *)(*a4 + 16 * v16);
          *v17 = 0;
          v17[1] = 0;
          v18 = v31;
          v19.i64[0] = 0x3F0000003F000000;
          v19.i64[1] = 0x3F0000003F000000;
          *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v16), v19, *(float32x4_t *)(*a3 + 16 * v30));
          *(float32x4_t *)(*a4 + 16 * v16) = vmlaq_f32(*(float32x4_t *)(*a4 + 16 * v16), v19, *(float32x4_t *)(*a3 + 16 * v18));
        }
      }
      ++v13;
    }
    while (v13 < *(int *)(v29 + 4));
    EdgeFaceValues = __p;
  }
  operator delete(EdgeFaceValues);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  float32x4_t *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v39;
  int v40;
  unsigned int v41;
  float FractionalWeight;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  _BOOL4 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v53;
  int v54[2];
  uint64_t *v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  void *__p;
  uint64_t *v60;
  int v61;
  int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v51 = v6;
  v52 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v53 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v52 + 456) + 8 * a5);
  if (*((_BYTE *)v53 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v46 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v45 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v52 + 20);
  v60 = &v63;
  v61 = 2 * v12;
  v62 = 32;
  v64 = 0;
  if (2 * v12 >= 0x21)
  {
    v64 = operator new(8 * v12);
    v60 = (uint64_t *)v64;
    v62 = 2 * v12;
    v12 = *(_DWORD *)(v52 + 20);
  }
  VertexCreaseEndValues = 0;
  v55 = &v58;
  v56 = v12;
  v57 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v55 = (uint64_t *)VertexCreaseEndValues;
    v57 = v12;
  }
  if (*(int *)(v52 + 8) >= 1)
  {
    v14 = 0;
    v15 = a3;
    v16 = v46;
    while (1)
    {
      v17 = *(int *)(v51[30] + 4 * v14);
      if ((_DWORD)v17 != -1)
      {
        v18 = *(int *)(*((_QWORD *)v53 + 12) + 4 * v14);
        v19 = (int *)(*((_QWORD *)v53 + 18) + 4 * v18);
        v20 = *(int *)(v45[12] + 4 * v17);
        v21 = (int *)(v45[18] + 4 * v20);
        v22 = *v21;
        v23 = v45[21];
        if ((*(_BYTE *)(v23 + v22) & 1) == 0 && v16)
        {
          v25 = (_QWORD *)(*a4 + 16 * v22);
          *v25 = 0;
          v25[1] = 0;
          v26 = (float32x4_t *)(*a4 + 16 * *v21);
          v27 = *v19;
        }
        else
        {
          if ((*(_BYTE *)(v23 + v22) & 1) != 0)
          {
            v29 = v45[9];
            v30 = *(unsigned __int16 *)(v29 + 2 * v17);
            if (*(_WORD *)(v29 + 2 * v17))
            {
              v31 = 0;
              v49 = *((_QWORD *)v53 + 21) + v18;
              v50 = *(unsigned __int16 *)(v29 + 2 * v17);
              v32 = v23 + v20;
              v48 = v32;
              do
              {
                v33 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v17)
                                           + (unsigned __int16)v31));
                if (v31 != v33)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = v19[v33];
                v35 = v21[v31];
                v36 = (_QWORD *)(*a4 + 16 * v35);
                *v36 = 0;
                v36[1] = 0;
                if (!v16 && (*(_BYTE *)(v32 + v31) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v53, v14, v33, v54);
                  if ((*(_BYTE *)(v49 + v33) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v49 + v33) & 0x20) != 0)
                    {
                      v41 = v33 == 0;
                      v39 = v11;
                      v40 = v14;
                    }
                    else
                    {
                      v39 = v11;
                      v40 = v14;
                      v41 = v33;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v39, v40, v41, v17);
                    v43 = 1.0 - FractionalWeight;
                    v38 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v37 = v43 * 0.125;
                  }
                  else
                  {
                    v37 = 0.125;
                    v38 = 0.75;
                  }
                  v15 = a3;
                  v32 = v48;
                  v16 = v46;
                  v30 = v50;
                  v44 = v54[1];
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v54[0]), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v44), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v34), v38);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v35) = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v34), *(float32x4_t *)(*a4 + 16 * v35));
                }
                ++v31;
              }
              while (v30 != v31);
            }
            goto LABEL_19;
          }
          v27 = *v19;
          v28 = (_QWORD *)(*a4 + 16 * v22);
          *v28 = 0;
          v28[1] = 0;
          v26 = (float32x4_t *)(*a4 + 16 * v22);
        }
        *v26 = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v52 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v64);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  float v45;
  float v46;
  int v47;
  unsigned int v48;
  float FractionalWeight;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  _QWORD *v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v58;
  uint64_t v59;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v60;
  int v61;
  float v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69[2];
  uint64_t *v70;
  float *v71;
  _DWORD v72[4];
  int *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v56 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v68 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v59 = v56[1];
  v51 = v56[2];
  v60 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v59 + 456) + 8 * a5);
  if (*((_BYTE *)v60 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v55 = v7;
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v56[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v51 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v59 + 20);
  v78 = &v81;
  v79 = 2 * v9;
  v80 = 32;
  v82 = 0;
  if (2 * v9 >= 0x21)
  {
    v82 = (uint64_t *)operator new(8 * v9);
    v78 = v82;
    v80 = 2 * v9;
    v9 = *(_DWORD *)(v59 + 20);
  }
  VertexCreaseEndValues = 0;
  v73 = (int *)&v76;
  v74 = v9;
  v75 = 16;
  v77 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v77 = VertexCreaseEndValues;
    v73 = VertexCreaseEndValues;
    v75 = v9;
  }
  v63[0] = v59;
  v63[1] = v51;
  if (*(int *)(v59 + 8) >= 1)
  {
    v54 = v8;
    v11 = 0;
    v13 = v56;
    v12 = a3;
    v14 = v55;
    v15 = v58;
    do
    {
      v61 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v61 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v60 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v60 + 18) + 4 * v16);
        v18 = *(int *)(v54[12] + 4 * v61);
        v19 = (int *)(v54[18] + 4 * v18);
        v20 = *v19;
        v21 = v54[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          v23 = (_QWORD *)(*a4 + 16 * v20);
          *v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v37 = v54[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v61);
          if (*(_WORD *)(v37 + 2 * v61))
          {
            v39 = 0;
            v40 = v21 + v18;
            v52 = v40;
            v53 = *((_QWORD *)v60 + 21) + v16;
            do
            {
              v41 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v61)
                                         + (unsigned __int16)v39));
              if (v39 != v41)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v42 = v17[v41];
              v43 = v19[v39];
              v44 = (_QWORD *)(*a4 + 16 * v43);
              *v44 = 0;
              v44[1] = 0;
              if (!v14 && (*(_BYTE *)(v40 + v39) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v60, v11, v41, v69);
                if ((*(_BYTE *)(v53 + v41) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v53 + v41) & 0x20) != 0)
                  {
                    v48 = v41 == 0;
                    v47 = v11;
                  }
                  else
                  {
                    v47 = v11;
                    v48 = v41;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v58, v47, v48, v61);
                  v50 = 1.0 - FractionalWeight;
                  v46 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v45 = v50 * 0.125;
                }
                else
                {
                  v45 = 0.125;
                  v46 = 0.75;
                }
                v13 = v56;
                v12 = a3;
                v14 = v55;
                v15 = v58;
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[0]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[1]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v42), v46);
                v40 = v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v43) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v42), *(float32x4_t *)(*a4 + 16 * v43));
              }
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v59 + 336) + 8 * v11);
          v62 = 0.0;
          v25 = v78;
          v26 = (float *)v78 + v24;
          *(_QWORD *)v69 = &v62;
          v70 = v78;
          v71 = v26;
          memset(v72, 0, 13);
          v64 = v11;
          v65 = v61;
          v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v11);
          v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v68, (uint64_t)v63, (uint64_t)v69, (*(unsigned __int16 *)(*(_QWORD *)(v59 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v51 + 432) + 2 * v61) >> 7) & 0xF);
          v13 = v56;
          v12 = a3;
          v27 = *v17;
          v28 = *v19;
          v29 = (_QWORD *)(*a4 + 16 * v28);
          *v29 = 0;
          v29[1] = 0;
          if (v72[2] >= 1)
          {
            if (!LOBYTE(v72[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v30 = *(_QWORD *)(v59 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v59 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v11) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v56[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v35 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v54[12] + 4 * v34)), v35);
                --v31;
              }
              while (v31);
            }
          }
          if (v72[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v60, v11, v73);
            v13 = v56;
            v12 = a3;
            if ((int)v24 >= 1)
            {
              v36 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v73[v36]), *(float *)((char *)v25 + v36 * 4));
                ++v36;
              }
              while (v24 != v36);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v62);
          v14 = v55;
          v15 = v58;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v59 + 8));
    VertexCreaseEndValues = v77;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE2EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _DWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int v9;
  int *VertexCreaseEndValues;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _BOOL4 v14;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  float v45;
  float v46;
  int v47;
  unsigned int v48;
  float FractionalWeight;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _BOOL4 v55;
  _QWORD *v56;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v58;
  uint64_t v59;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v60;
  int v61;
  float v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69[2];
  uint64_t *v70;
  float *v71;
  _DWORD v72[4];
  int *v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  int *v77;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD **)a1;
  v56 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v68 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  v59 = v56[1];
  v51 = v56[2];
  v60 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v59 + 456) + 8 * a5);
  if (*((_BYTE *)v60 + 12))
    v7 = 1;
  else
    v7 = *v6 == 0;
  v55 = v7;
  v58 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v56[60] + 8 * a5);
  v8 = *(_QWORD **)(*(_QWORD *)(v51 + 456) + 8 * a5);
  v9 = *(_DWORD *)(v59 + 20);
  v78 = &v81;
  v79 = 2 * v9;
  v80 = 32;
  v82 = 0;
  if (2 * v9 >= 0x21)
  {
    v82 = (uint64_t *)operator new(8 * v9);
    v78 = v82;
    v80 = 2 * v9;
    v9 = *(_DWORD *)(v59 + 20);
  }
  VertexCreaseEndValues = 0;
  v73 = (int *)&v76;
  v74 = v9;
  v75 = 16;
  v77 = 0;
  if (v9 >= 0x11)
  {
    VertexCreaseEndValues = (int *)operator new(4 * v9);
    v77 = VertexCreaseEndValues;
    v73 = VertexCreaseEndValues;
    v75 = v9;
  }
  v63[0] = v59;
  v63[1] = v51;
  if (*(int *)(v59 + 8) >= 1)
  {
    v54 = v8;
    v11 = 0;
    v13 = v56;
    v12 = a3;
    v14 = v55;
    v15 = v58;
    do
    {
      v61 = *(_DWORD *)(v13[30] + 4 * v11);
      if (v61 != -1)
      {
        v16 = *(int *)(*((_QWORD *)v60 + 12) + 4 * v11);
        v17 = (int *)(*((_QWORD *)v60 + 18) + 4 * v16);
        v18 = *(int *)(v54[12] + 4 * v61);
        v19 = (int *)(v54[18] + 4 * v18);
        v20 = *v19;
        v21 = v54[21];
        if ((*(_BYTE *)(v21 + v20) & 1) == 0 && v14)
        {
          v23 = (_QWORD *)(*a4 + 16 * v20);
          *v23 = 0;
          v23[1] = 0;
          *(float32x4_t *)(*a4 + 16 * *v19) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * *v17), *(float32x4_t *)(*a4 + 16 * *v19));
        }
        else if ((*(_BYTE *)(v21 + v20) & 1) != 0)
        {
          v37 = v54[9];
          v38 = *(unsigned __int16 *)(v37 + 2 * v61);
          if (*(_WORD *)(v37 + 2 * v61))
          {
            v39 = 0;
            v40 = v21 + v18;
            v52 = v40;
            v53 = *((_QWORD *)v60 + 21) + v16;
            do
            {
              v41 = *(unsigned __int16 *)(*((_QWORD *)v15 + 5)
                                        + 2
                                        * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v15 + 4) + 96) + 4 * v61)
                                         + (unsigned __int16)v39));
              if (v39 != v41)
                _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
              v42 = v17[v41];
              v43 = v19[v39];
              v44 = (_QWORD *)(*a4 + 16 * v43);
              *v44 = 0;
              v44[1] = 0;
              if (!v14 && (*(_BYTE *)(v40 + v39) & 8) != 0)
              {
                VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v60, v11, v41, v69);
                if ((*(_BYTE *)(v53 + v41) & 0x10) != 0)
                {
                  if ((*(_BYTE *)(v53 + v41) & 0x20) != 0)
                  {
                    v48 = v41 == 0;
                    v47 = v11;
                  }
                  else
                  {
                    v47 = v11;
                    v48 = v41;
                  }
                  FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v58, v47, v48, v61);
                  v50 = 1.0 - FractionalWeight;
                  v46 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                  v45 = v50 * 0.125;
                }
                else
                {
                  v45 = 0.125;
                  v46 = 0.75;
                }
                v13 = v56;
                v12 = a3;
                v14 = v55;
                v15 = v58;
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[0]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v69[1]), v45);
                *(float32x4_t *)(*a4 + 16 * v43) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v43), *(float32x4_t *)(*a3 + 16 * v42), v46);
                v40 = v52;
              }
              else
              {
                *(float32x4_t *)(*a4 + 16 * v43) = vaddq_f32(*(float32x4_t *)(*v12 + 16 * v42), *(float32x4_t *)(*a4 + 16 * v43));
              }
              ++v39;
            }
            while (v38 != v39);
          }
        }
        else
        {
          v24 = *(int *)(*(_QWORD *)(v59 + 336) + 8 * v11);
          v62 = 0.0;
          v25 = v78;
          v26 = (float *)v78 + v24;
          *(_QWORD *)v69 = &v62;
          v70 = v78;
          v71 = v26;
          memset(v72, 0, 13);
          v64 = v11;
          v65 = v61;
          v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v11);
          v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v11);
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexVertexMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(&v68, (uint64_t)v63, (uint64_t)v69, (*(unsigned __int16 *)(*(_QWORD *)(v59 + 432) + 2 * v11) >> 7) & 0xF, (*(unsigned __int16 *)(*(_QWORD *)(v51 + 432) + 2 * v61) >> 7) & 0xF);
          v13 = v56;
          v12 = a3;
          v27 = *v17;
          v28 = *v19;
          v29 = (_QWORD *)(*a4 + 16 * v28);
          *v29 = 0;
          v29[1] = 0;
          if (v72[2] >= 1)
          {
            if (!LOBYTE(v72[3]))
              _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_1((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
            v30 = *(_QWORD *)(v59 + 264);
            v31 = *(unsigned int *)(v30 + 8 * v11);
            if ((int)v31 >= 1)
            {
              v32 = (int *)(*(_QWORD *)(v59 + 288) + 4 * *(int *)(v30 + 4 * ((2 * v11) | 1)));
              do
              {
                v33 = *v32++;
                v34 = *(int *)(v56[21] + 4 * v33);
                if ((_DWORD)v34 == -1)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_2((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v35 = *v26++;
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a4 + 16 * *(int *)(v54[12] + 4 * v34)), v35);
                --v31;
              }
              while (v31);
            }
          }
          if (v72[1] >= 1)
          {
            VertexCreaseEndValues = (int *)OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexEdgeValues(v60, v11, v73);
            v13 = v56;
            v12 = a3;
            if ((int)v24 >= 1)
            {
              v36 = 0;
              do
              {
                *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*a3 + 16 * v73[v36]), *(float *)((char *)v25 + v36 * 4));
                ++v36;
              }
              while (v24 != v36);
            }
          }
          *(float32x4_t *)(*a4 + 16 * v28) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v28), *(float32x4_t *)(*v12 + 16 * v27), v62);
          v14 = v55;
          v15 = v58;
        }
      }
      ++v11;
    }
    while (v11 < *(int *)(v59 + 8));
    VertexCreaseEndValues = v77;
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE0EP16C3DSubdivCPUDataIDv4_fES9_EEviRKT0_RT1_i(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v11;
  unsigned int v12;
  void *VertexCreaseEndValues;
  uint64_t v14;
  _QWORD *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  float32x4_t *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement *v39;
  int v40;
  unsigned int v41;
  float FractionalWeight;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  _BOOL4 v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel *v53;
  int v54[2];
  uint64_t *v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  void *__p;
  uint64_t *v60;
  int v61;
  int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 8 * ((int)a2 - 1));
  v7 = v6[2];
  v51 = v6;
  v52 = v6[1];
  v8 = v6[60];
  v9 = *(_QWORD *)(v7 + 456);
  v53 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel **)(*(_QWORD *)(v52 + 456) + 8 * a5);
  if (*((_BYTE *)v53 + 12))
    v10 = 1;
  else
    v10 = **(_DWORD **)a1 == 0;
  v46 = v10;
  v11 = *(OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement **)(v8 + 8 * a5);
  v45 = *(_QWORD **)(v9 + 8 * a5);
  v12 = *(_DWORD *)(v52 + 20);
  v60 = &v63;
  v61 = 2 * v12;
  v62 = 32;
  v64 = 0;
  if (2 * v12 >= 0x21)
  {
    v64 = operator new(8 * v12);
    v60 = (uint64_t *)v64;
    v62 = 2 * v12;
    v12 = *(_DWORD *)(v52 + 20);
  }
  VertexCreaseEndValues = 0;
  v55 = &v58;
  v56 = v12;
  v57 = 16;
  __p = 0;
  if (v12 >= 0x11)
  {
    VertexCreaseEndValues = operator new(4 * v12);
    __p = VertexCreaseEndValues;
    v55 = (uint64_t *)VertexCreaseEndValues;
    v57 = v12;
  }
  if (*(int *)(v52 + 8) >= 1)
  {
    v14 = 0;
    v15 = a3;
    v16 = v46;
    while (1)
    {
      v17 = *(int *)(v51[30] + 4 * v14);
      if ((_DWORD)v17 != -1)
      {
        v18 = *(int *)(*((_QWORD *)v53 + 12) + 4 * v14);
        v19 = (int *)(*((_QWORD *)v53 + 18) + 4 * v18);
        v20 = *(int *)(v45[12] + 4 * v17);
        v21 = (int *)(v45[18] + 4 * v20);
        v22 = *v21;
        v23 = v45[21];
        if ((*(_BYTE *)(v23 + v22) & 1) == 0 && v16)
        {
          v25 = (_QWORD *)(*a4 + 16 * v22);
          *v25 = 0;
          v25[1] = 0;
          v26 = (float32x4_t *)(*a4 + 16 * *v21);
          v27 = *v19;
        }
        else
        {
          if ((*(_BYTE *)(v23 + v22) & 1) != 0)
          {
            v29 = v45[9];
            v30 = *(unsigned __int16 *)(v29 + 2 * v17);
            if (*(_WORD *)(v29 + 2 * v17))
            {
              v31 = 0;
              v49 = *((_QWORD *)v53 + 21) + v18;
              v50 = *(unsigned __int16 *)(v29 + 2 * v17);
              v32 = v23 + v20;
              v48 = v32;
              do
              {
                v33 = *(unsigned __int16 *)(*((_QWORD *)v11 + 5)
                                          + 2
                                          * (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 4) + 96) + 4 * v17)
                                           + (unsigned __int16)v31));
                if (v31 != v33)
                  _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner19interpFVarFromVertsILNS0_3Sdc10SchemeTypeE1EP16C3DSubdivCPUDataIDv2_fENSt3__16vectorIS8_NSA_9allocatorIS8_EEEEEEviRKT0_RT1_i_cold_3((uint64_t)VertexCreaseEndValues, a2, (uint64_t)a3);
                v34 = v19[v33];
                v35 = v21[v31];
                v36 = (_QWORD *)(*a4 + 16 * v35);
                *v36 = 0;
                v36[1] = 0;
                if (!v16 && (*(_BYTE *)(v32 + v31) & 8) != 0)
                {
                  VertexCreaseEndValues = OpenSubdiv::v3_1_1::Vtr::internal::FVarLevel::getVertexCreaseEndValues(v53, v14, v33, v54);
                  if ((*(_BYTE *)(v49 + v33) & 0x10) != 0)
                  {
                    if ((*(_BYTE *)(v49 + v33) & 0x20) != 0)
                    {
                      v41 = v33 == 0;
                      v39 = v11;
                      v40 = v14;
                    }
                    else
                    {
                      v39 = v11;
                      v40 = v14;
                      v41 = v33;
                    }
                    FractionalWeight = OpenSubdiv::v3_1_1::Vtr::internal::FVarRefinement::getFractionalWeight(v39, v40, v41, v17);
                    v43 = 1.0 - FractionalWeight;
                    v38 = FractionalWeight + (float)((float)(1.0 - FractionalWeight) * 0.75);
                    v37 = v43 * 0.125;
                  }
                  else
                  {
                    v37 = 0.125;
                    v38 = 0.75;
                  }
                  v15 = a3;
                  v32 = v48;
                  v16 = v46;
                  v30 = v50;
                  v44 = v54[1];
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v54[0]), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v44), v37);
                  *(float32x4_t *)(*a4 + 16 * v35) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v35), *(float32x4_t *)(*a3 + 16 * v34), v38);
                }
                else
                {
                  *(float32x4_t *)(*a4 + 16 * v35) = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v34), *(float32x4_t *)(*a4 + 16 * v35));
                }
                ++v31;
              }
              while (v30 != v31);
            }
            goto LABEL_19;
          }
          v27 = *v19;
          v28 = (_QWORD *)(*a4 + 16 * v22);
          *v28 = 0;
          v28[1] = 0;
          v26 = (float32x4_t *)(*a4 + 16 * v22);
        }
        *v26 = vaddq_f32(*(float32x4_t *)(*v15 + 16 * v27), *v26);
      }
LABEL_19:
      if (++v14 >= *(int *)(v52 + 8))
      {
        VertexCreaseEndValues = __p;
        break;
      }
    }
  }
  operator delete(VertexCreaseEndValues);
  operator delete(v64);
}

void OpenSubdiv::v3_1_1::Osd::CpuPatchTable::~CpuPatchTable(OpenSubdiv::v3_1_1::Osd::CpuPatchTable *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v7 = (void **)((char *)this + 168);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)((char *)this + 144);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)((char *)this + 120);
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

void _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, uint64_t *a3, int a4, uint64_t a5, void **a6)
{
  uint64_t MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  uint64_t v10;
  uint64_t Content;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  size_t v25;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  const UInt8 *v32;
  uint64_t i;
  _DWORD *v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  void **v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  CFDataRef v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  void *__p;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;

  MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext = _ZN23C3DSubdivCPUPrimvarDataIDv2_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(a1, a2, a4, *(_QWORD *)(a1 + 80), a6);
  if (!MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext)
    return;
  v10 = MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  if (C3DMeshSourceGetSemantic(MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext))
    return;
  Content = C3DMeshSourceGetContent(v10);
  v13 = v12;
  v15 = v14;
  if (*(_BYTE *)(a1 + 88))
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(unsigned __int8 *)(a5 + 3);
  if (v24 >= 2)
  {
    v62 = a6;
    if (v24 != 2)
      return;
    if (v15 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
    {
      v66 = scn_default_log();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_1(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    v32 = (const UInt8 *)malloc_type_malloc(12 * v15, 0x100004052888210uLL);
    v80 = *(_QWORD *)(a1 + 48);
    v81 = *(_QWORD *)(a1 + 56);
    v82 = (uint64_t *)(a1 + 48);
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v83 = v81 - v80;
    if (v81 == v80)
    {
      v115 = 0;
      v116 = 0;
      v117 = 0;
      __p = 0;
      v113 = 0;
      v114 = 0;
    }
    else
    {
      std::vector<Statement *>::__vallocate[abi:nn180100](&v118, v83 >> 3);
      v84 = v119;
      bzero(v119, v83);
      v119 = &v84[v83];
      v115 = 0;
      v116 = 0;
      v117 = 0;
      std::vector<Statement *>::__vallocate[abi:nn180100](&v115, v83 >> 3);
      v85 = (char *)v116;
      bzero(v116, v83);
      v116 = &v85[v83];
      __p = 0;
      v113 = 0;
      v114 = 0;
      std::vector<Statement *>::__vallocate[abi:nn180100](&__p, v83 >> 3);
      v86 = (char *)v113;
      bzero(v113, v83);
      v113 = &v86[v83];
    }
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      v87 = *(_DWORD *)*a3;
      if (v87)
      {
        if (v87 == 2)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v118, &v115, &__p);
        }
        else if (v87 == 1)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v118, &v115, &__p);
        }
      }
      else
      {
        _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_((uint64_t)a3, v82, (uint64_t *)&v118, &v115, &__p);
      }
    }
    else
    {
      OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v74, v75, v76, v77, v78, v79, v104);
    }
    if (v15)
    {
      v88 = v15;
      do
      {
        _Z68C3DSubdivCPUPrimvarDataCopyCrossNormalizedDataAtIndexToBufferAtIndexIDv2_fEvRNSt3__16vectorI16C3DSubdivCPUDataIT_ENS1_9allocatorIS5_EEEES9_iPfi();
        --v88;
      }
      while (v88);
    }
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
LABEL_45:
    if (!v32)
      return;
    goto LABEL_46;
  }
  v105 = v15;
  v25 = *((int *)*a2 + 2);
  v26 = (const UInt8 *)malloc_type_calloc(v25, 0xCuLL, 0x100004052888210uLL);
  v32 = v26;
  v106 = *(unsigned int *)*a2;
  if ((int)v106 >= 1)
  {
    for (i = 0; i != v106; ++i)
    {
      v34 = (_DWORD *)(*((_QWORD *)*a2 + 3) + 8 * i);
      if (*v34 != 4)
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_2((uint64_t)v26, v27, v28);
      v35 = (int *)(*((_QWORD *)*a2 + 6) + 4 * (int)v34[1]);
      v36 = v35[2];
      v37 = v35[3];
      v38 = v35[1];
      *(double *)v39.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + *v35 * (unint64_t)HIBYTE(v13)), v29, v30, v31);
      v110 = v39;
      *(double *)v42.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v38 * (unint64_t)HIBYTE(v13)), v39, v40, v41);
      v111 = v42;
      *(double *)v45.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v36 * (unint64_t)HIBYTE(v13)), v42, v43, v44);
      v109 = v45;
      *(double *)v48.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v37 * (unint64_t)HIBYTE(v13)), v45, v46, v47);
      v49 = vsubq_f32(v109, v110);
      if (*(_BYTE *)(a5 + 3))
      {
        v50 = vsubq_f32(v48, v111);
        v51 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v51, v51);
      }
      else
      {
        v54 = vsubq_f32(v111, v110);
        v55 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v54)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v55, v55);
      }
      v56 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), *(float32x2_t *)v53.i8)).u32[0];
      v57 = vrsqrte_f32((float32x2_t)v56);
      v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56, vmul_f32(v57, v57)));
      v59 = 0;
      v29 = vmulq_n_f32(v52, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56, vmul_f32(v58, v58))).f32[0]);
      v30 = v29.f32[2];
      do
      {
        v60 = 3 * v35[v59];
        *(float32x2_t *)&v32[12 * v35[v59]] = vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)&v32[12 * v35[v59]]);
        v60 += 2;
        v31 = v29.f32[2] + *(float *)&v32[4 * v60];
        *(float *)&v32[4 * v60] = v31;
        ++v59;
      }
      while (v59 != 4);
    }
  }
  if ((int)v25 < 1)
  {
    v15 = v105;
    v62 = a6;
    goto LABEL_45;
  }
  v61 = v32 + 8;
  v15 = v105;
  v62 = a6;
  do
  {
    v29.i64[0] = *((_QWORD *)v61 - 1);
    v29.i32[2] = *v61;
    v63 = (int32x4_t)vmulq_f32(v29, v29);
    v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
    v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
    v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
    v29 = vmulq_n_f32(v29, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]);
    *((_QWORD *)v61 - 1) = v29.i64[0];
    *v61 = v29.i32[2];
    v61 += 3;
    --v25;
  }
  while (v25);
LABEL_46:
  v89 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v32, 12 * v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  v90 = C3DMeshSourceCreateWithData(1, v89, 1, 3, v15, 12, 0);
  CFRelease(v89);
  v91 = (unint64_t)v62[2];
  v92 = v62[1];
  if ((unint64_t)v92 >= v91)
  {
    v94 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92 - (_BYTE *)*v62) >> 3);
    v95 = v94 + 1;
    if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (_QWORD)*v62) >> 3);
    if (2 * v96 > v95)
      v95 = 2 * v96;
    if (v96 >= 0x555555555555555)
      v97 = 0xAAAAAAAAAAAAAAALL;
    else
      v97 = v95;
    if (v97)
      v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v62 + 2), v97);
    else
      v98 = 0;
    v99 = &v98[24 * v94];
    v100 = &v98[24 * v97];
    *(_QWORD *)v99 = 0;
    *((_QWORD *)v99 + 1) = 0;
    *((_QWORD *)v99 + 2) = v90;
    v93 = v99 + 24;
    v102 = (char *)*v62;
    v101 = (char *)v62[1];
    if (v101 != *v62)
    {
      do
      {
        v103 = *(_OWORD *)(v101 - 24);
        *((_QWORD *)v99 - 1) = *((_QWORD *)v101 - 1);
        *(_OWORD *)(v99 - 24) = v103;
        v99 -= 24;
        v101 -= 24;
      }
      while (v101 != v102);
      v101 = (char *)*v62;
    }
    *v62 = v99;
    v62[1] = v93;
    v62[2] = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *v92 = 0;
    v92[1] = 0;
    v93 = v92 + 3;
    v92[2] = v90;
  }
  v62[1] = v93;
}

void _ZN23C3DSubdivCPUPrimvarDataIDv3_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, uint64_t *a3, int a4, uint64_t a5, void **a6)
{
  uint64_t MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  uint64_t v10;
  uint64_t Content;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  size_t v25;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  const UInt8 *v32;
  uint64_t i;
  _DWORD *v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  void **v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  void *v88;
  float32x4_t *v89;
  _DWORD *v90;
  uint64_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  CFDataRef v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  char v116;
  void **v117;
  uint64_t v118;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  void *__p;
  void *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;

  MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext = _ZN23C3DSubdivCPUPrimvarDataIDv3_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(a1, a2, a4, *(_QWORD *)(a1 + 80), a6);
  if (!MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext)
    return;
  v10 = MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  if (C3DMeshSourceGetSemantic(MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext))
    return;
  v117 = a6;
  Content = C3DMeshSourceGetContent(v10);
  v13 = v12;
  v15 = v14;
  if (*(_BYTE *)(a1 + 88))
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(unsigned __int8 *)(a5 + 3);
  if (v24 >= 2)
  {
    v62 = v117;
    if (v24 != 2)
      return;
    if (v15 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
    {
      v66 = scn_default_log();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_1(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    v32 = (const UInt8 *)malloc_type_malloc(12 * v15, 0x100004052888210uLL);
    v80 = *(_QWORD *)(a1 + 48);
    v81 = *(_QWORD *)(a1 + 56);
    v82 = (uint64_t *)(a1 + 48);
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v83 = v81 - v80;
    if (v81 == v80)
    {
      v127 = 0;
      v128 = 0;
      v129 = 0;
      __p = 0;
      v125 = 0;
      v126 = 0;
    }
    else
    {
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v130, v83 >> 4);
      v84 = v131;
      bzero(v131, v83);
      v131 = &v84[v83];
      v127 = 0;
      v128 = 0;
      v129 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v127, v83 >> 4);
      v85 = (char *)v128;
      bzero(v128, v83);
      v128 = &v85[v83];
      __p = 0;
      v125 = 0;
      v126 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__p, v83 >> 4);
      v86 = (char *)v125;
      bzero(v125, v83);
      v125 = &v86[v83];
    }
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      v87 = *(_DWORD *)*a3;
      if (v87)
      {
        if (v87 == 2)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v130, &v127, &__p);
        }
        else if (v87 == 1)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v130, &v127, &__p);
        }
      }
      else
      {
        _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_((uint64_t)a3, v82, (uint64_t *)&v130, &v127, &__p);
      }
    }
    else
    {
      OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v74, v75, v76, v77, v78, v79, v116);
    }
    v88 = __p;
    if (v15)
    {
      v89 = (float32x4_t *)v127;
      v90 = v32 + 8;
      v91 = v15;
      v92 = (float32x4_t *)__p;
      do
      {
        v93 = *v89++;
        v94 = v93;
        v95 = *v92++;
        v96 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL), vnegq_f32(v94)), v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL));
        v97 = (int32x4_t)vmulq_f32(v96, v96);
        v97.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), *(float32x2_t *)v97.i8)).u32[0];
        v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
        v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
        v100 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL), vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
        *((_QWORD *)v90 - 1) = v100.i64[0];
        *v90 = v100.i32[2];
        v90 += 3;
        --v91;
      }
      while (v91);
    }
    else if (!__p)
    {
LABEL_42:
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      if (v130)
      {
        v131 = v130;
        operator delete(v130);
      }
LABEL_46:
      if (!v32)
        return;
      goto LABEL_47;
    }
    v125 = v88;
    operator delete(v88);
    goto LABEL_42;
  }
  v25 = *((int *)*a2 + 2);
  v26 = (const UInt8 *)malloc_type_calloc(v25, 0xCuLL, 0x100004052888210uLL);
  v32 = v26;
  v118 = *(unsigned int *)*a2;
  if ((int)v118 >= 1)
  {
    for (i = 0; i != v118; ++i)
    {
      v34 = (_DWORD *)(*((_QWORD *)*a2 + 3) + 8 * i);
      if (*v34 != 4)
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_2((uint64_t)v26, v27, v28);
      v35 = (int *)(*((_QWORD *)*a2 + 6) + 4 * (int)v34[1]);
      v36 = v35[2];
      v37 = v35[3];
      v38 = v35[1];
      *(double *)v39.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + *v35 * (unint64_t)HIBYTE(v13)), v29, v30, v31);
      v122 = v39;
      *(double *)v42.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v38 * (unint64_t)HIBYTE(v13)), v39, v40, v41);
      v123 = v42;
      *(double *)v45.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v36 * (unint64_t)HIBYTE(v13)), v42, v43, v44);
      v121 = v45;
      *(double *)v48.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v37 * (unint64_t)HIBYTE(v13)), v45, v46, v47);
      v49 = vsubq_f32(v121, v122);
      if (*(_BYTE *)(a5 + 3))
      {
        v50 = vsubq_f32(v48, v123);
        v51 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v51, v51);
      }
      else
      {
        v54 = vsubq_f32(v123, v122);
        v55 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v54)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v55, v55);
      }
      v56 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), *(float32x2_t *)v53.i8)).u32[0];
      v57 = vrsqrte_f32((float32x2_t)v56);
      v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56, vmul_f32(v57, v57)));
      v59 = 0;
      v29 = vmulq_n_f32(v52, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56, vmul_f32(v58, v58))).f32[0]);
      v30 = v29.f32[2];
      do
      {
        v60 = 3 * v35[v59];
        *(float32x2_t *)&v32[12 * v35[v59]] = vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)&v32[12 * v35[v59]]);
        v60 += 2;
        v31 = v29.f32[2] + *(float *)&v32[4 * v60];
        *(float *)&v32[4 * v60] = v31;
        ++v59;
      }
      while (v59 != 4);
    }
  }
  if ((int)v25 < 1)
  {
    v62 = v117;
    goto LABEL_46;
  }
  v61 = v32 + 8;
  v62 = v117;
  do
  {
    v29.i64[0] = *((_QWORD *)v61 - 1);
    v29.i32[2] = *v61;
    v63 = (int32x4_t)vmulq_f32(v29, v29);
    v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
    v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
    v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
    v29 = vmulq_n_f32(v29, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]);
    *((_QWORD *)v61 - 1) = v29.i64[0];
    *v61 = v29.i32[2];
    v61 += 3;
    --v25;
  }
  while (v25);
LABEL_47:
  v101 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v32, 12 * v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  v102 = C3DMeshSourceCreateWithData(1, v101, 1, 3, v15, 12, 0);
  CFRelease(v101);
  v103 = (unint64_t)v62[2];
  v104 = v62[1];
  if ((unint64_t)v104 >= v103)
  {
    v106 = 0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (_BYTE *)*v62) >> 3);
    v107 = v106 + 1;
    if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)*v62) >> 3);
    if (2 * v108 > v107)
      v107 = 2 * v108;
    if (v108 >= 0x555555555555555)
      v109 = 0xAAAAAAAAAAAAAAALL;
    else
      v109 = v107;
    if (v109)
      v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v62 + 2), v109);
    else
      v110 = 0;
    v111 = &v110[24 * v106];
    v112 = &v110[24 * v109];
    *(_QWORD *)v111 = 0;
    *((_QWORD *)v111 + 1) = 0;
    *((_QWORD *)v111 + 2) = v102;
    v105 = v111 + 24;
    v114 = (char *)*v62;
    v113 = (char *)v62[1];
    if (v113 != *v62)
    {
      do
      {
        v115 = *(_OWORD *)(v113 - 24);
        *((_QWORD *)v111 - 1) = *((_QWORD *)v113 - 1);
        *(_OWORD *)(v111 - 24) = v115;
        v111 -= 24;
        v113 -= 24;
      }
      while (v113 != v114);
      v113 = (char *)*v62;
    }
    *v62 = v111;
    v62[1] = v105;
    v62[2] = v112;
    if (v113)
      operator delete(v113);
  }
  else
  {
    *v104 = 0;
    v104[1] = 0;
    v105 = v104 + 3;
    v104[2] = v102;
  }
  v62[1] = v105;
}

void _ZN23C3DSubdivCPUPrimvarDataIDv4_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, uint64_t *a3, int a4, uint64_t a5, void **a6)
{
  uint64_t MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  uint64_t v10;
  uint64_t Content;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  size_t v25;
  const UInt8 *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  const UInt8 *v32;
  uint64_t i;
  _DWORD *v34;
  int *v35;
  int v36;
  int v37;
  int v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 v56;
  float32x2_t v57;
  float32x2_t v58;
  uint64_t v59;
  int v60;
  _DWORD *v61;
  void **v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  CFDataRef v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  __int128 v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  void *__p;
  void *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;

  MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext = _ZN23C3DSubdivCPUPrimvarDataIDv4_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(a1, a2, a4, *(_QWORD *)(a1 + 80), a6);
  if (!MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext)
    return;
  v10 = MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext;
  if (C3DMeshSourceGetSemantic(MeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext))
    return;
  Content = C3DMeshSourceGetContent(v10);
  v13 = v12;
  v15 = v14;
  if (*(_BYTE *)(a1 + 88))
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  v24 = *(unsigned __int8 *)(a5 + 3);
  if (v24 >= 2)
  {
    v62 = a6;
    if (v24 != 2)
      return;
    if (v15 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 88)
                                      + 24 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                          + 8))
    {
      v66 = scn_default_log();
      if (os_log_type_enabled(v66, OS_LOG_TYPE_FAULT))
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_1(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    v32 = (const UInt8 *)malloc_type_malloc(12 * v15, 0x100004052888210uLL);
    v80 = *(_QWORD *)(a1 + 48);
    v81 = *(_QWORD *)(a1 + 56);
    v82 = (uint64_t *)(a1 + 48);
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v83 = v81 - v80;
    if (v81 == v80)
    {
      v115 = 0;
      v116 = 0;
      v117 = 0;
      __p = 0;
      v113 = 0;
      v114 = 0;
    }
    else
    {
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v118, v83 >> 4);
      v84 = v119;
      bzero(v119, v83);
      v119 = &v84[v83];
      v115 = 0;
      v116 = 0;
      v117 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v115, v83 >> 4);
      v85 = (char *)v116;
      bzero(v116, v83);
      v116 = &v85[v83];
      __p = 0;
      v113 = 0;
      v114 = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&__p, v83 >> 4);
      v86 = (char *)v113;
      bzero(v113, v83);
      v113 = &v86[v83];
    }
    if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 368)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a3 + 40)
                                 + 8 * (((unint64_t)*(unsigned __int8 *)(*a3 + 8) >> 2) & 0xF))
                     + 360)) & 0x3FFFFFFFCLL) != 0)
    {
      v87 = *(_DWORD *)*a3;
      if (v87)
      {
        if (v87 == 2)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v118, &v115, &__p);
        }
        else if (v87 == 1)
        {
          _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(a3, v82, &v118, &v115, &__p);
        }
      }
      else
      {
        _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_((uint64_t)a3, v82, (uint64_t *)&v118, &v115, &__p);
      }
    }
    else
    {
      OpenSubdiv::v3_1_1::Far::Error(4, (uint64_t)"Failure in PrimvarRefiner::Limit() -- last level of refinement does not include full topology.", v74, v75, v76, v77, v78, v79, v104);
    }
    if (v15)
    {
      v88 = v15;
      do
      {
        _Z68C3DSubdivCPUPrimvarDataCopyCrossNormalizedDataAtIndexToBufferAtIndexIDv2_fEvRNSt3__16vectorI16C3DSubdivCPUDataIT_ENS1_9allocatorIS5_EEEES9_iPfi();
        --v88;
      }
      while (v88);
    }
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
LABEL_45:
    if (!v32)
      return;
    goto LABEL_46;
  }
  v105 = v15;
  v25 = *((int *)*a2 + 2);
  v26 = (const UInt8 *)malloc_type_calloc(v25, 0xCuLL, 0x100004052888210uLL);
  v32 = v26;
  v106 = *(unsigned int *)*a2;
  if ((int)v106 >= 1)
  {
    for (i = 0; i != v106; ++i)
    {
      v34 = (_DWORD *)(*((_QWORD *)*a2 + 3) + 8 * i);
      if (*v34 != 4)
        _ZN23C3DSubdivCPUPrimvarDataIDv2_fE17CreateMeshSourcesERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEPNS4_14PrimvarRefinerEbPK22C3DSubdivisionSettingsP31C3DSubdivCPUMeshCreationContext_cold_2((uint64_t)v26, v27, v28);
      v35 = (int *)(*((_QWORD *)*a2 + 6) + 4 * (int)v34[1]);
      v36 = v35[2];
      v37 = v35[3];
      v38 = v35[1];
      *(double *)v39.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + *v35 * (unint64_t)HIBYTE(v13)), v29, v30, v31);
      v110 = v39;
      *(double *)v42.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v38 * (unint64_t)HIBYTE(v13)), v39, v40, v41);
      v111 = v42;
      *(double *)v45.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v36 * (unint64_t)HIBYTE(v13)), v42, v43, v44);
      v109 = v45;
      *(double *)v48.i64 = C3DConvertFloatingTypeToFloat4(v13, (float *)(Content + v37 * (unint64_t)HIBYTE(v13)), v45, v46, v47);
      v49 = vsubq_f32(v109, v110);
      if (*(_BYTE *)(a5 + 3))
      {
        v50 = vsubq_f32(v48, v111);
        v51 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v49)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v51, v51);
      }
      else
      {
        v54 = vsubq_f32(v111, v110);
        v55 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v54)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v55, v55);
      }
      v56 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), *(float32x2_t *)v53.i8)).u32[0];
      v57 = vrsqrte_f32((float32x2_t)v56);
      v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56, vmul_f32(v57, v57)));
      v59 = 0;
      v29 = vmulq_n_f32(v52, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56, vmul_f32(v58, v58))).f32[0]);
      v30 = v29.f32[2];
      do
      {
        v60 = 3 * v35[v59];
        *(float32x2_t *)&v32[12 * v35[v59]] = vadd_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)&v32[12 * v35[v59]]);
        v60 += 2;
        v31 = v29.f32[2] + *(float *)&v32[4 * v60];
        *(float *)&v32[4 * v60] = v31;
        ++v59;
      }
      while (v59 != 4);
    }
  }
  if ((int)v25 < 1)
  {
    v15 = v105;
    v62 = a6;
    goto LABEL_45;
  }
  v61 = v32 + 8;
  v15 = v105;
  v62 = a6;
  do
  {
    v29.i64[0] = *((_QWORD *)v61 - 1);
    v29.i32[2] = *v61;
    v63 = (int32x4_t)vmulq_f32(v29, v29);
    v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
    v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
    v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
    v29 = vmulq_n_f32(v29, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]);
    *((_QWORD *)v61 - 1) = v29.i64[0];
    *v61 = v29.i32[2];
    v61 += 3;
    --v25;
  }
  while (v25);
LABEL_46:
  v89 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v32, 12 * v15, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  v90 = C3DMeshSourceCreateWithData(1, v89, 1, 3, v15, 12, 0);
  CFRelease(v89);
  v91 = (unint64_t)v62[2];
  v92 = v62[1];
  if ((unint64_t)v92 >= v91)
  {
    v94 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92 - (_BYTE *)*v62) >> 3);
    v95 = v94 + 1;
    if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v91 - (_QWORD)*v62) >> 3);
    if (2 * v96 > v95)
      v95 = 2 * v96;
    if (v96 >= 0x555555555555555)
      v97 = 0xAAAAAAAAAAAAAAALL;
    else
      v97 = v95;
    if (v97)
      v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v62 + 2), v97);
    else
      v98 = 0;
    v99 = &v98[24 * v94];
    v100 = &v98[24 * v97];
    *(_QWORD *)v99 = 0;
    *((_QWORD *)v99 + 1) = 0;
    *((_QWORD *)v99 + 2) = v90;
    v93 = v99 + 24;
    v102 = (char *)*v62;
    v101 = (char *)v62[1];
    if (v101 != *v62)
    {
      do
      {
        v103 = *(_OWORD *)(v101 - 24);
        *((_QWORD *)v99 - 1) = *((_QWORD *)v101 - 1);
        *(_OWORD *)(v99 - 24) = v103;
        v99 -= 24;
        v101 -= 24;
      }
      while (v101 != v102);
      v101 = (char *)*v62;
    }
    *v62 = v99;
    v62[1] = v93;
    v62[2] = v100;
    if (v101)
      operator delete(v101);
  }
  else
  {
    *v92 = 0;
    v92[1] = 0;
    v93 = v92 + 3;
    v92[2] = v90;
  }
  v62[1] = v93;
}

