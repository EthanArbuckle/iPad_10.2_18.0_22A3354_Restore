uint64_t _ZN23C3DSubdivCPUPrimvarDataIDv2_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, int a3, uint64_t a4, void **a5)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int Semantic;
  int NumFVarValues;
  malloc_type_id_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const UInt8 *v21;
  const UInt8 *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  CFDataRef v26;
  BOOL v27;
  char v28;
  BOOL *v29;
  BOOL *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  BOOL *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v43;

  C3DMeshSourceGetContent(a4);
  v11 = v10;
  v12 = BYTE4(v10);
  v13 = C3DSizeOfBaseType(BYTE4(v10));
  Semantic = C3DMeshSourceGetSemantic(a4);
  if (Semantic || HIBYTE(v11) >= 3 && (C3DBaseTypeIsFloatingValue(BYTE6(v11)) & 1) != 0)
  {
    v43 = a4;
    if (a3)
    {
      NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*a2, *(unsigned __int8 *)(a1 + 72));
      v16 = 728374720;
    }
    else
    {
      NumFVarValues = *((_DWORD *)*a2 + 2);
      v16 = 2842004764;
    }
    v19 = NumFVarValues;
    v20 = v13 * NumFVarValues;
    v21 = (const UInt8 *)malloc_type_malloc(v20, v16);
    v22 = v21;
    if (NumFVarValues >= 1)
    {
      v23 = 0;
      v24 = (uint64_t)v21;
      do
      {
        v25.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v23);
        v25.i64[1] = v25.i64[0];
        C3DConvertFloatingTypeFromFloat4(v12, v24, v25);
        v24 += (unsigned __int16)v13;
        v23 += 8;
      }
      while (8 * v19 != v23);
    }
    v26 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v20, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v18 = C3DMeshSourceCreateWithData(Semantic, v26, v12, 1, v19, v13, 0);
    CFRelease(v26);
    v27 = *(_BYTE *)(a1 + 88) == 2;
    v28 = *(_BYTE *)(a1 + 72);
    v29 = (BOOL *)a5[2];
    v30 = (BOOL *)a5[1];
    if (v30 >= v29)
    {
      v32 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)*a5) >> 3);
      v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v34 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)*a5) >> 3);
      if (2 * v34 > v33)
        v33 = 2 * v34;
      if (v34 >= 0x555555555555555)
        v35 = 0xAAAAAAAAAAAAAAALL;
      else
        v35 = v33;
      if (v35)
        v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a5 + 2), v35);
      else
        v36 = 0;
      v37 = (BOOL *)&v36[24 * v32];
      v38 = &v36[24 * v35];
      *v37 = v27;
      v37[1] = v28;
      *(_DWORD *)(v37 + 2) = 0;
      *((_WORD *)v37 + 3) = 0;
      *((_QWORD *)v37 + 1) = v43;
      *((_QWORD *)v37 + 2) = v18;
      v31 = (char *)(v37 + 24);
      v40 = (char *)*a5;
      v39 = (char *)a5[1];
      if (v39 != *a5)
      {
        do
        {
          v41 = *(_OWORD *)(v39 - 24);
          *((_QWORD *)v37 - 1) = *((_QWORD *)v39 - 1);
          *(_OWORD *)(v37 - 24) = v41;
          v37 -= 24;
          v39 -= 24;
        }
        while (v39 != v40);
        v39 = (char *)*a5;
      }
      *a5 = v37;
      a5[1] = v31;
      a5[2] = v38;
      if (v39)
        operator delete(v39);
    }
    else
    {
      *v30 = v27;
      v30[1] = v28;
      *(_DWORD *)(v30 + 2) = 0;
      *((_WORD *)v30 + 3) = 0;
      v31 = (char *)(v30 + 24);
      *((_QWORD *)v30 + 1) = v43;
      *((_QWORD *)v30 + 2) = v18;
    }
    a5[1] = v31;
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext_cold_1();
    return 0;
  }
  return v18;
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  _QWORD v68[5];
  _QWORD v69[5];
  _QWORD v70[5];
  int v71;
  _BYTE *v72;
  unsigned int v73;
  int v74;
  _BYTE v75[400];
  void *__p;
  uint64_t *v77;
  int v78;
  int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v71 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v77 = &v80;
  v78 = v11;
  v79 = 33;
  v81 = 0;
  v60 = v10;
  v59 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v59;
    v10 = v60;
    v81 = v15;
    v77 = (uint64_t *)v15;
    v79 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v75;
  v72 = v75;
  v73 = v16;
  v74 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v59;
    v10 = v60;
    __p = v18;
    v72 = v18;
    v74 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v70[0] = v17;
  v70[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v70[2] = v20;
  memset(&v70[3], 0, 13);
  v53 = &v17[v11 + v11];
  v54 = &v17[v11];
  v69[0] = v54;
  v69[1] = v21;
  v69[2] = v22;
  memset(&v69[3], 0, 13);
  v68[0] = v53;
  v68[1] = v21 + 4 * v11;
  v68[2] = v22 + 4 * v11;
  memset(&v68[3], 0, 13);
  v63[0] = v10;
  v63[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v57 = (uint64_t)&v17[v11 + 1];
    v58 = v17;
    v56 = v21 + 4 * v11;
    v55 = v22 + 4 * v11;
    do
    {
      v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        *(_QWORD *)(*a3 + 8 * v23) = 0;
        *(float32x2_t *)(*a3 + 8 * v23) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v23), *(float32x2_t *)(*a3 + 8 * v23));
        if ((v13 & 1) == 0)
        {
          *(_QWORD *)(*a4 + 8 * v23) = 0;
          *(_QWORD *)(*a5 + 8 * v23) = 0;
        }
      }
      else
      {
        v27 = (2 * v23) | 1;
        v61 = *(int *)(v25 + 4 * v27);
        v62 = v10[45];
        v64 = v23;
        v65 = v23;
        v28 = (v24 >> 7) & 0xF;
        v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v23);
        v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v71, (unsigned int *)v63, (uint64_t)v70, v28);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v71, (int *)v63, (uint64_t)v70, (uint64_t)v69, (uint64_t)v68, v28);
        v30 = v77;
        v10 = v60;
        if (v26 >= 1)
        {
          v31 = (int *)(v62 + 4 * v61);
          v32 = v60[15];
          v33 = v26;
          v34 = v77;
          do
          {
            v35 = *v31++;
            *(_DWORD *)v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        v36 = (char *)v30 + 4 * v26;
        LOBYTE(v13) = v59;
        if (LODWORD(v70[4]) || (!LODWORD(v69[4]) ? (v37 = 1) : (v37 = v59), (v37 & 1) == 0))
        {
          v38 = v60[33];
          v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            v40 = *(int *)(v38 + 4 * v27);
            v41 = (int *)(v60[36] + 4 * v40);
            v42 = (unsigned __int16 *)(v60[39] + 2 * v40);
            v43 = v60[3];
            v44 = v60[6];
            v45 = (_DWORD *)v30 + v26;
            do
            {
              v46 = *v41++;
              v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              v48 = *(_DWORD *)(v43 + 8 * (_DWORD)v46);
              LODWORD(v46) = *v42++;
              v29 = (v46 + 2);
              if (v48 > (unsigned __int16)(v46 + 2))
                LOWORD(v48) = 0;
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v29 - v48));
              --v39;
            }
            while (v39);
          }
        }
        *(_QWORD *)(*a3 + 8 * v23) = 0;
        if (SLODWORD(v70[4]) >= 1)
        {
          v49 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v49]), *(float *)(v20 + 4 * v49));
            ++v49;
          }
          while (v49 < SLODWORD(v70[4]));
        }
        if (SHIDWORD(v70[3]) >= 1)
        {
          v50 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v50)), *(float *)&v19[4 * v50]);
            ++v50;
          }
          while (v50 < SHIDWORD(v70[3]));
        }
        *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v58);
        if ((v59 & 1) == 0)
        {
          if (LODWORD(v69[4]) != LODWORD(v68[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v29, (uint64_t)v60, v59);
          if (HIDWORD(v69[3]) != HIDWORD(v68[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v29, (uint64_t)v60, v59);
          *(_QWORD *)(*a4 + 8 * v23) = 0;
          *(_QWORD *)(*a5 + 8 * v23) = 0;
          if (SLODWORD(v69[4]) >= 1)
          {
            v51 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v51]), *(float *)(v20 + 4 * v11 + 4 * v51));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v51]), *(float *)(v55 + 4 * v51));
              ++v51;
            }
            while (v51 < SLODWORD(v69[4]));
          }
          if (SHIDWORD(v69[3]) >= 1)
          {
            v52 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v52)), *(float *)(v57 + 4 * v52));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v52)), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SHIDWORD(v69[3]));
          }
          *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v54);
          *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v53);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v81);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  int v64;
  int v65;
  int v66;
  int v67;
  _QWORD v68[5];
  _QWORD v69[5];
  _QWORD v70[5];
  int v71;
  _BYTE *v72;
  unsigned int v73;
  int v74;
  _BYTE v75[400];
  void *__p;
  uint64_t *v77;
  int v78;
  int v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v71 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v77 = &v80;
  v78 = v11;
  v79 = 33;
  v81 = 0;
  v60 = v10;
  v59 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v59;
    v10 = v60;
    v81 = v15;
    v77 = (uint64_t *)v15;
    v79 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v75;
  v72 = v75;
  v73 = v16;
  v74 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v59;
    v10 = v60;
    __p = v18;
    v72 = v18;
    v74 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v70[0] = v17;
  v70[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v70[2] = v20;
  memset(&v70[3], 0, 13);
  v53 = &v17[v11 + v11];
  v54 = &v17[v11];
  v69[0] = v54;
  v69[1] = v21;
  v69[2] = v22;
  memset(&v69[3], 0, 13);
  v68[0] = v53;
  v68[1] = v21 + 4 * v11;
  v68[2] = v22 + 4 * v11;
  memset(&v68[3], 0, 13);
  v63[0] = v10;
  v63[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v57 = (uint64_t)&v17[v11 + 1];
    v58 = v17;
    v56 = v21 + 4 * v11;
    v55 = v22 + 4 * v11;
    do
    {
      v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        *(_QWORD *)(*a3 + 8 * v23) = 0;
        *(float32x2_t *)(*a3 + 8 * v23) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v23), *(float32x2_t *)(*a3 + 8 * v23));
        if ((v13 & 1) == 0)
        {
          *(_QWORD *)(*a4 + 8 * v23) = 0;
          *(_QWORD *)(*a5 + 8 * v23) = 0;
        }
      }
      else
      {
        v27 = (2 * v23) | 1;
        v61 = *(int *)(v25 + 4 * v27);
        v62 = v10[45];
        v64 = v23;
        v65 = v23;
        v28 = (v24 >> 7) & 0xF;
        v66 = *(_DWORD *)(*(_QWORD *)(v63[0] + 336) + 8 * v23);
        v67 = *(_DWORD *)(*(_QWORD *)(v63[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v71, (unsigned int *)v63, (uint64_t)v70, v28);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v71, (int *)v63, (uint64_t)v70, (uint64_t)v69, (uint64_t)v68, v28);
        v30 = v77;
        v10 = v60;
        if (v26 >= 1)
        {
          v31 = (int *)(v62 + 4 * v61);
          v32 = v60[15];
          v33 = v26;
          v34 = v77;
          do
          {
            v35 = *v31++;
            *(_DWORD *)v34 = *(_DWORD *)(v32 + 8 * v35 + 4 * (v23 == *(_DWORD *)(v32 + 8 * v35)));
            v34 = (uint64_t *)((char *)v34 + 4);
            --v33;
          }
          while (v33);
        }
        v36 = (char *)v30 + 4 * v26;
        LOBYTE(v13) = v59;
        if (LODWORD(v70[4]) || (!LODWORD(v69[4]) ? (v37 = 1) : (v37 = v59), (v37 & 1) == 0))
        {
          v38 = v60[33];
          v39 = *(unsigned int *)(v38 + 8 * v23);
          if ((int)v39 >= 1)
          {
            v40 = *(int *)(v38 + 4 * v27);
            v41 = (int *)(v60[36] + 4 * v40);
            v42 = (unsigned __int16 *)(v60[39] + 2 * v40);
            v43 = v60[3];
            v44 = v60[6];
            v45 = (_DWORD *)v30 + v26;
            do
            {
              v46 = *v41++;
              v47 = v44 + 4 * *(int *)(v43 + 8 * v46 + 4);
              v48 = *(_DWORD *)(v43 + 8 * (_DWORD)v46);
              LODWORD(v46) = *v42++;
              v29 = (v46 + 2);
              if (v48 > (unsigned __int16)(v46 + 2))
                LOWORD(v48) = 0;
              *v45++ = *(_DWORD *)(v47 + 4 * (unsigned __int16)(v29 - v48));
              --v39;
            }
            while (v39);
          }
        }
        *(_QWORD *)(*a3 + 8 * v23) = 0;
        if (SLODWORD(v70[4]) >= 1)
        {
          v49 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v49]), *(float *)(v20 + 4 * v49));
            ++v49;
          }
          while (v49 < SLODWORD(v70[4]));
        }
        if (SHIDWORD(v70[3]) >= 1)
        {
          v50 = 0;
          do
          {
            *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v50)), *(float *)&v19[4 * v50]);
            ++v50;
          }
          while (v50 < SHIDWORD(v70[3]));
        }
        *(float32x2_t *)(*a3 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v58);
        if ((v59 & 1) == 0)
        {
          if (LODWORD(v69[4]) != LODWORD(v68[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v29, (uint64_t)v60, v59);
          if (HIDWORD(v69[3]) != HIDWORD(v68[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v29, (uint64_t)v60, v59);
          *(_QWORD *)(*a4 + 8 * v23) = 0;
          *(_QWORD *)(*a5 + 8 * v23) = 0;
          if (SLODWORD(v69[4]) >= 1)
          {
            v51 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v51]), *(float *)(v20 + 4 * v11 + 4 * v51));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *(int *)&v36[4 * v51]), *(float *)(v55 + 4 * v51));
              ++v51;
            }
            while (v51 < SLODWORD(v69[4]));
          }
          if (SHIDWORD(v69[3]) >= 1)
          {
            v52 = 0;
            do
            {
              *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v52)), *(float *)(v57 + 4 * v52));
              *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * *((int *)v30 + v52)), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SHIDWORD(v69[3]));
          }
          *(float32x2_t *)(*a4 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v54);
          *(float32x2_t *)(*a5 + 8 * v23) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v23), *(float32x2_t *)(*a2 + 8 * v23), *v53);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v81);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  int v13;
  unsigned int v14;
  float *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 8) >> 2) & 0xF));
  v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4)
    v11 = a5 == 0;
  else
    v11 = 1;
  v12 = v11;
  if (v11)
    v13 = 1;
  else
    v13 = 3;
  v42 = (int *)&v45;
  v43 = v10;
  v44 = 33;
  v46 = 0;
  if (v10 >= 0x22)
  {
    v46 = (int *)operator new(4 * v10);
    v42 = v46;
    v44 = v10;
  }
  v14 = v10 * v13;
  v15 = (float *)&v40;
  __p = 0;
  if (v14 < 0x64)
  {
    v16 = 0;
  }
  else
  {
    v16 = operator new(4 * v14);
    __p = v16;
    v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = &v15[v10];
    v21 = &v20[v10];
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v22 = (unsigned int *)(*(_QWORD *)(v9 + 336) + 8 * v17), v23 = *v22, !(_DWORD)v23))
      {
        *(_QWORD *)(*a3 + 8 * v17) = 0;
        *(float32x2_t *)(*a3 + 8 * v17) = vadd_f32(*(float32x2_t *)(*a2 + 8 * v17), *(float32x2_t *)(*a3 + 8 * v17));
        if ((v12 & 1) == 0)
        {
          *(_QWORD *)(*a4 + 8 * v17) = 0;
          *(_QWORD *)(*a5 + 8 * v17) = 0;
        }
      }
      else
      {
        v24 = *(_QWORD *)(v9 + 360);
        v25 = (int)v22[1];
        v26 = v15;
        if ((v12 & 1) == 0)
        {
          *v15 = 1.0;
          *(_QWORD *)v20 = 0x3F800000BF800000;
          v20[2] = 0.0;
          v26 = &v20[v10 + 2];
          v19 = 2;
          v18 = 2;
          *(_QWORD *)v21 = 3212836864;
        }
        *v26 = 1.0;
        v27 = v42;
        if ((int)v23 >= 1)
        {
          v28 = (int *)(v24 + 4 * v25);
          v29 = *(_QWORD *)(v9 + 120);
          v30 = v42;
          do
          {
            v31 = *v28++;
            *v30++ = *(_DWORD *)(v29 + 8 * v31 + 4 * (v17 == *(_DWORD *)(v29 + 8 * v31)));
            --v23;
          }
          while (v23);
        }
        *(_QWORD *)(*a3 + 8 * v17) = 0;
        v32 = *a3;
        v33 = *a2;
        *(float32x2_t *)(*a3 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          if (v18 != v19)
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1((uint64_t)v27, v32, v33);
          *(_QWORD *)(*a4 + 8 * v17) = 0;
          *(_QWORD *)(*a5 + 8 * v17) = 0;
          v34 = v19;
          v35 = v20 + 1;
          v36 = &v20[v10 + 1];
          if ((int)v19 >= 1)
          {
            do
            {
              v37 = *v35++;
              *(float32x2_t *)(*a4 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v17), *(float32x2_t *)(*a2 + 8 * *v27), v37);
              v39 = *v27++;
              v38 = v39;
              *(float *)&v39 = *v36++;
              *(float32x2_t *)(*a5 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v38), *(float *)&v39);
              --v34;
            }
            while (v34);
          }
          *(float32x2_t *)(*a4 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a4 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v20);
          *(float32x2_t *)(*a5 + 8 * v17) = vmla_n_f32(*(float32x2_t *)(*a5 + 8 * v17), *(float32x2_t *)(*a2 + 8 * v17), *v21);
          v18 = v19;
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    v16 = __p;
  }
  operator delete(v16);
  operator delete(v46);
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  float v35;
  float *v36;
  float *v37;
  int v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if ((a6 - 1) > 1)
  {
    if (a6 == 4)
    {
      v12 = a2[6];
      v13 = a2[6];
      MEMORY[0x1E0C80A78](a1);
      v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v15, v14);
      if ((int)v12 >= 1)
      {
        v16 = (int *)(*(_QWORD *)(*(_QWORD *)a2 + 360)
                    + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 336) + 8 * a2[4] + 4));
        v17 = *(_QWORD *)(*(_QWORD *)a2 + 216);
        v18 = v15;
        v19 = v13;
        do
        {
          v20 = *v16++;
          *v18++ = *(_DWORD *)(v17 + 4 * v20);
          --v19;
        }
        while (v19);
      }
      v21 = 0xFFFFFFFF00000000;
      v22 = -1;
      v23 = (float *)v15;
      do
      {
        v24 = *v23++;
        v21 += 0x100000000;
        ++v22;
      }
      while (v24 <= 0.0);
      v25 = 0;
      v38[0] = v22;
      v26 = v12 << 32;
      do
      {
        v27 = *(float *)&v15[4 * v12 - 4 + 4 * v25];
        v26 -= 0x100000000;
        --v25;
      }
      while (v27 <= 0.0);
      v38[1] = v13 + v25;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v13;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1059760811;
      v28 = *(char **)(a3 + 8);
      if ((int)v13 >= 1)
        bzero(v28, 4 * v12);
      *(_DWORD *)&v28[v21 >> 30] = 1042983595;
      *(_DWORD *)&v28[v26 >> 30] = 1042983595;
      OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::assignCreaseLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(a1, (uint64_t)a2, a4, a5, v38);
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
      v29 = a2[6];
      *(_DWORD *)(a4 + 24) = 1;
      *(_QWORD *)(a4 + 28) = v29;
      *(_BYTE *)(a4 + 36) = 0;
      *(_DWORD *)(a5 + 24) = 1;
      *(_QWORD *)(a5 + 28) = v29;
      *(_BYTE *)(a5 + 36) = 0;
      **(_DWORD **)a4 = -1082130432;
      v30 = *(_QWORD **)(a4 + 8);
      *v30 = 1065353216;
      **(_DWORD **)a5 = -1082130432;
      v31 = *(_QWORD **)(a5 + 8);
      *v31 = 0x3F80000000000000;
      if ((int)v29 >= 3)
      {
        v32 = v29 - 2;
        v33 = v31 + 1;
        v34 = v30 + 1;
        do
        {
          *v34++ = 0;
          *v33++ = 0;
          --v32;
        }
        while (v32);
      }
    }
  }
  else
  {
    v11 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    if ((_DWORD)v11 == 2)
    {
      *(_BYTE *)(a3 + 36) = 0;
      *(_QWORD *)(a3 + 28) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    else
    {
      *(_DWORD *)(a3 + 28) = v11;
      *(_DWORD *)(a3 + 32) = v11;
      *(_BYTE *)(a3 + 36) = 0;
      if ((_DWORD)v11 == 4)
      {
        **(_DWORD **)a3 = 1055100473;
        *(int32x4_t *)*(_QWORD *)(a3 + 8) = vdupq_n_s32(0x3DE38E39u);
        *(int32x4_t *)*(_QWORD *)(a3 + 16) = vdupq_n_s32(0x3CE38E39u);
      }
      else
      {
        v35 = 1.0 / (float)((float)((float)(int)v11 + 5.0) * (float)(int)v11);
        **(float **)a3 = 1.0 - (float)((float)(int)v11 * (float)(v35 + (float)(v35 * 4.0)));
        if ((int)v11 >= 1)
        {
          v36 = *(float **)(a3 + 8);
          v37 = *(float **)(a3 + 16);
          do
          {
            *v36++ = v35 * 4.0;
            *v37++ = v35;
            --v11;
          }
          while (v11);
        }
      }
    }
    OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::assignSmoothLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(a1, (uint64_t)a2, a4, a5);
  }
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  int *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  float *v22;
  char *v23;
  int32x4_t *v24;
  float v25;
  float *v26;
  float *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if ((a4 - 1) > 1)
  {
    if (a4 != 4)
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      goto LABEL_18;
    }
    v7 = a2[6];
    MEMORY[0x1E0C80A78](a1);
    v9 = (char *)v28 - v8;
    bzero((char *)v28 - v8, v10);
    if ((int)v7 >= 1)
    {
      v11 = (int *)(*(_QWORD *)(*(_QWORD *)a2 + 360)
                  + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 336) + 8 * (int)a2[4] + 4));
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 216);
      v13 = v9;
      v14 = v7;
      do
      {
        v15 = *v11++;
        *v13++ = *(_DWORD *)(v12 + 4 * v15);
        --v14;
      }
      while (v14);
    }
    v16 = 0xFFFFFFFF00000000;
    v17 = (float *)v9;
    do
    {
      v18 = *v17++;
      v16 += 0x100000000;
    }
    while (v18 <= 0.0);
    v19 = (uint64_t)(int)v7 << 32;
    v20 = (float *)&v9[4 * (int)v7 - 4];
    do
    {
      v21 = *v20--;
      v19 -= 0x100000000;
    }
    while (v21 <= 0.0);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v7;
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    v22 = *(float **)a3;
    v23 = *(char **)(a3 + 8);
    *v22 = 0.66667;
    if ((int)v7 >= 1)
      bzero(v23, 4 * v7);
    *(_DWORD *)&v23[v16 >> 30] = 1042983595;
    *(_DWORD *)&v23[v19 >> 30] = 1042983595;
  }
  else
  {
    v6 = a2[7];
    *(_DWORD *)(a3 + 24) = 1;
    if ((_DWORD)v6 == 2)
    {
      *(_BYTE *)(a3 + 36) = 0;
      *(_QWORD *)(a3 + 28) = 0;
LABEL_18:
      **(_DWORD **)a3 = 1065353216;
      return;
    }
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 32) = v6;
    *(_BYTE *)(a3 + 36) = 0;
    if ((_DWORD)v6 == 4)
    {
      v24 = *(int32x4_t **)(a3 + 8);
      **(_DWORD **)a3 = 1055100473;
      *v24 = vdupq_n_s32(0x3DE38E39u);
      *(int32x4_t *)*(_QWORD *)(a3 + 16) = vdupq_n_s32(0x3CE38E39u);
    }
    else
    {
      v25 = 1.0 / (float)((float)((float)(int)v6 + 5.0) * (float)(int)v6);
      **(float **)a3 = 1.0 - (float)((float)(int)v6 * (float)(v25 + (float)(v25 * 4.0)));
      if ((int)v6 >= 1)
      {
        v26 = *(float **)(a3 + 8);
        v27 = *(float **)(a3 + 16);
        do
        {
          *v26++ = v25 * 4.0;
          *v27++ = v25;
          --v6;
        }
        while (v6);
      }
    }
  }
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::assignSmoothLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  double v15;
  double v16;
  double v17;
  int v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  long double v24;
  float v25;
  _DWORD *v26;
  int *v27;
  int *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  int v34;

  v6 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v6 == 2)
  {
    v7 = *(unsigned int *)(a2 + 24);
    *(_DWORD *)(a3 + 24) = 1;
    *(_QWORD *)(a3 + 28) = v7;
    *(_BYTE *)(a3 + 36) = 0;
    *(_DWORD *)(a4 + 24) = 1;
    *(_QWORD *)(a4 + 28) = v7;
    *(_BYTE *)(a4 + 36) = 0;
    v8 = *(_QWORD **)(a3 + 8);
    **(_DWORD **)a3 = -1082130432;
    *v8 = 1065353216;
    v9 = *(_QWORD **)(a4 + 8);
    **(_DWORD **)a4 = -1082130432;
    *v9 = 0x3F80000000000000;
    if ((int)v7 >= 3)
    {
      v10 = v7 - 2;
      v11 = v9 + 1;
      v12 = v8 + 1;
      do
      {
        *v12++ = 0;
        *v11++ = 0;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 32) = v6;
    *(_BYTE *)(a3 + 36) = 0;
    **(_DWORD **)a3 = 0;
    if ((_DWORD)v6 == 4)
    {
      v13 = *(_OWORD **)(a3 + 16);
      *(_OWORD *)*(_QWORD *)(a3 + 8) = xmmword_1DD02ACD0;
      *v13 = xmmword_1DD02ACE0;
      *(_QWORD *)(a4 + 24) = 0x400000001;
      *(_DWORD *)(a4 + 32) = 4;
      *(_BYTE *)(a4 + 36) = 0;
      v14 = *(_OWORD **)(a4 + 8);
      **(_DWORD **)a4 = 0;
      *v14 = xmmword_1DD02ACF0;
      *(_OWORD *)*(_QWORD *)(a4 + 16) = xmmword_1DD008460;
    }
    else
    {
      v15 = 6.28318531 / (double)(int)v6;
      v16 = cos(v15);
      v17 = cos(v15 * 0.5);
      v18 = v6 - 1;
      if ((int)v6 >= 1)
      {
        v19 = 0;
        v20 = 1.0 / (((v16 + v17 * sqrt(v16 + 9.0 + v16 + 9.0)) * 0.0625 + 0.3125) * 4.0 + -1.0);
        v21 = *(_QWORD *)(a3 + 8);
        v22 = *(_QWORD *)(a3 + 16);
        do
        {
          v23 = cos(v15 * (double)(int)v19);
          v24 = cos(v15 * (double)((int)v19 + 1));
          v25 = v23 * 4.0;
          *(float *)(v21 + 4 * v19) = v25;
          *(float *)&v24 = v20 * (v23 + v24);
          *(_DWORD *)(v22 + 4 * v19++) = LODWORD(v24);
        }
        while (v6 != v19);
      }
      *(_DWORD *)(a4 + 24) = 1;
      *(_DWORD *)(a4 + 28) = v6;
      *(_DWORD *)(a4 + 32) = v6;
      *(_BYTE *)(a4 + 36) = 0;
      v26 = *(_DWORD **)(a4 + 8);
      **(_DWORD **)a4 = 0;
      v27 = *(int **)(a3 + 8);
      v28 = *(int **)(a3 + 16);
      *v26 = v27[v18];
      v29 = *(_DWORD **)(a4 + 16);
      *v29 = v28[v18];
      if ((int)v6 > 1)
      {
        v30 = v29 + 1;
        v31 = v26 + 1;
        v32 = v6 - 1;
        do
        {
          v33 = *v27++;
          *v31++ = v33;
          v34 = *v28++;
          *v30++ = v34;
          --v32;
        }
        while (v32);
      }
    }
  }
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::assignCreaseLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  double v22;
  double v23;
  __double2 v24;
  double sinval;
  double v26;
  double v27;
  float v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  double v32;
  long double v33;
  float v34;
  float v35;

  v8 = *(unsigned int *)(a2 + 24);
  v9 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v8;
  *(_DWORD *)(a3 + 32) = v9;
  *(_BYTE *)(a3 + 36) = 0;
  **(_DWORD **)a3 = 0;
  if ((int)v8 >= 1)
    bzero(*(void **)(a3 + 8), 4 * v8);
  if ((int)v9 >= 1)
    bzero(*(void **)(a3 + 16), 4 * v9);
  v10 = *(_QWORD *)(a3 + 8);
  v11 = a5[1];
  *(_DWORD *)(v10 + 4 * *a5) = 1056964608;
  *(_DWORD *)(v10 + 4 * v11) = -1090519040;
  *(_DWORD *)(a4 + 24) = 1;
  *(_DWORD *)(a4 + 28) = v8;
  *(_DWORD *)(a4 + 32) = v9;
  *(_BYTE *)(a4 + 36) = 0;
  v12 = *a5;
  if (*a5 >= 1)
  {
    v13 = *(_DWORD **)(a4 + 8);
    v14 = *(_DWORD **)(a4 + 16);
    v15 = *a5;
    do
    {
      *v13++ = 0;
      *v14++ = 0;
      --v15;
    }
    while (v15);
  }
  v16 = v12;
  v17 = a5[1];
  v18 = v17 - v12;
  if ((_DWORD)v17 - v12 == 2)
  {
    v19 = *(_QWORD *)(a4 + 8);
    **(_DWORD **)a4 = -1087722837;
    *(_DWORD *)(v19 + 4 * v12) = -1104500053;
    v20 = v12 + 1;
    *(_DWORD *)(v19 + 4 * v20) = 1059760811;
    *(_DWORD *)(v19 + 4 * v17) = -1104500053;
    v21 = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(v21 + 4 * v12) = 1042983595;
    *(_DWORD *)(v21 + 4 * v20) = 1042983595;
  }
  else if (v18 < 3)
  {
    v19 = *(_QWORD *)(a4 + 8);
    **(_DWORD **)a4 = -1061158912;
    *(_DWORD *)(v19 + 4 * v12) = 1077936128;
    *(_DWORD *)(v19 + 4 * v17) = 1077936128;
    v21 = *(_QWORD *)(a4 + 16);
    *(_DWORD *)(v21 + 4 * v12) = 0;
  }
  else
  {
    v22 = (double)v18;
    v23 = 3.14159265 / (double)v18;
    v24 = __sincos_stret(v23);
    sinval = v24.__sinval;
    v26 = 1.0 / ((v24.__cosval + 3.0) * v22);
    v27 = (v24.__cosval + 1.0) / v24.__sinval;
    v28 = v26 * ((v24.__cosval + -1.0) * (v27 * 4.0));
    v19 = *(_QWORD *)(a4 + 8);
    **(float **)a4 = v28;
    *(float *)&v27 = -(v27 * (v24.__cosval * 2.0 + 1.0)) * v26;
    v29 = (_DWORD *)(v19 + 4 * v16);
    *v29 = LODWORD(v27);
    *(_DWORD *)(v19 + 4 * v17) = LODWORD(v27);
    *(float *)&v27 = v24.__sinval * v26;
    v21 = *(_QWORD *)(a4 + 16);
    v30 = (_DWORD *)(v21 + 4 * v16);
    *v30 = LODWORD(v27);
    v31 = 1;
    do
    {
      v32 = (double)((int)v31 + 1);
      v33 = sin(v23 * v32);
      v34 = v26 * (sinval * 4.0);
      *(float *)&v29[v31] = v34;
      v35 = v26 * (sinval + v33);
      *(float *)&v30[v31++] = v35;
      sinval = v33;
    }
    while (v32 < v22);
  }
  if ((int)v17 < (int)v9)
    bzero((void *)(v21 + 4 * v17), 4 * (v9 + ~(_DWORD)v17) + 4);
  if ((int)v17 + 1 < (int)v8)
    bzero((void *)(v19 + 4 * ((int)v17 + 1)), 4 * (v8 - v17 - 2) + 4);
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int32x4_t *v11;
  int32x4_t v12;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float *v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  float v37;
  float v38;
  float v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  __double2 v48;
  float cosval;
  float sinval;
  unsigned int v51[2];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((a6 - 1) > 1)
  {
    if (a6 == 4)
    {
      v14 = a2[6];
      v15 = a2[6];
      MEMORY[0x1E0C80A78](a1);
      v17 = (char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v17, v16);
      if ((int)v14 >= 1)
      {
        v18 = (int *)(*(_QWORD *)(*(_QWORD *)a2 + 360)
                    + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 336) + 8 * a2[4] + 4));
        v19 = *(_QWORD *)(*(_QWORD *)a2 + 216);
        v20 = v17;
        v21 = v15;
        do
        {
          v22 = *v18++;
          *v20++ = *(_DWORD *)(v19 + 4 * v22);
          --v21;
        }
        while (v21);
      }
      v23 = 0xFFFFFFFF00000000;
      v24 = -1;
      v25 = (float *)v17;
      do
      {
        v26 = *v25++;
        v23 += 0x100000000;
        ++v24;
      }
      while (v26 <= 0.0);
      v27 = 0;
      v51[0] = v24;
      v28 = v14 << 32;
      do
      {
        v29 = *(float *)&v17[4 * v14 - 4 + 4 * v27];
        v28 -= 0x100000000;
        --v27;
      }
      while (v29 <= 0.0);
      v51[1] = v15 + v27;
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v15;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1059760811;
      v30 = *(char **)(a3 + 8);
      if ((int)v15 >= 1)
        bzero(v30, 4 * v14);
      *(_DWORD *)&v30[v23 >> 30] = 1042983595;
      *(_DWORD *)&v30[v28 >> 30] = 1042983595;
      OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::assignCreaseLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(a1, (uint64_t)a2, a4, a5, v51);
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
      v31 = a2[6];
      *(_DWORD *)(a4 + 24) = 1;
      *(_QWORD *)(a4 + 28) = v31;
      *(_BYTE *)(a4 + 36) = 0;
      *(_DWORD *)(a5 + 24) = 1;
      *(_QWORD *)(a5 + 28) = v31;
      *(_BYTE *)(a5 + 36) = 0;
      **(_DWORD **)a4 = -1069547520;
      v32 = *(_QWORD **)(a4 + 8);
      *v32 = 1077936128;
      **(_DWORD **)a5 = -1069547520;
      v33 = *(_QWORD **)(a5 + 8);
      *v33 = 0x4040000000000000;
      if ((int)v31 >= 3)
      {
        v34 = v31 - 2;
        v35 = v33 + 1;
        v36 = v32 + 1;
        do
        {
          *v36++ = 0;
          *v35++ = 0;
          --v34;
        }
        while (v34);
      }
    }
  }
  else
  {
    v10 = a2[7];
    if ((_DWORD)v10 == 2)
      OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>();
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v10;
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    if ((_DWORD)v10 == 6)
    {
      **(_DWORD **)a3 = 1056964608;
      v11 = *(int32x4_t **)(a3 + 8);
      v12 = vdupq_n_s32(0x3DAAAAABu);
      *v11 = v12;
      v11[1].i64[0] = v12.i64[0];
    }
    else
    {
      v37 = 1.0 / (float)(int)v10;
      v38 = cosf(v37 * 6.2832);
      v39 = 1.0
          / (float)((float)(3.0
                          / (float)((float)(v37
                                          * (float)(0.625
                                                  - (float)((float)((float)(v38 * 0.25) + 0.375)
                                                          * (float)((float)(v38 * 0.25) + 0.375))))
                                  * 8.0))
                  + (float)(int)v10);
      **(float **)a3 = 1.0 - (float)(v39 * (float)(int)v10);
      if ((int)v10 >= 1)
      {
        v40 = *(float **)(a3 + 8);
        v41 = v10;
        do
        {
          *v40++ = v39;
          --v41;
        }
        while (v41);
      }
    }
    *(_DWORD *)(a4 + 24) = 1;
    *(_DWORD *)(a4 + 28) = v10;
    *(_DWORD *)(a4 + 32) = 0;
    *(_BYTE *)(a4 + 36) = 0;
    *(_DWORD *)(a5 + 24) = 1;
    *(_DWORD *)(a5 + 28) = v10;
    *(_DWORD *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 36) = 0;
    **(_DWORD **)a4 = 0;
    **(_DWORD **)a5 = 0;
    if ((_DWORD)v10 == 6)
    {
      v42 = *(_QWORD *)(a4 + 8);
      *(_OWORD *)v42 = xmmword_1DD02AD00;
      *(_QWORD *)(v42 + 16) = 0x3F000000BF000000;
      v43 = *(_QWORD *)(a5 + 8);
      *(_OWORD *)v43 = xmmword_1DD02AD10;
      *(int32x2_t *)(v43 + 16) = vdup_n_s32(0xBF5DB3D7);
    }
    else if ((int)v10 >= 1)
    {
      v44 = 0;
      v46 = *(_QWORD *)(a4 + 8);
      v47 = *(_QWORD *)(a5 + 8);
      do
      {
        v45 = 6.28318531 / (double)(int)v10;
        v48 = __sincos_stret((float)(v45 * (float)(int)v44));
        cosval = v48.__cosval;
        *(float *)(v46 + 4 * v44) = cosval;
        sinval = v48.__sinval;
        *(float *)(v47 + 4 * v44++) = sinval;
      }
      while (v10 != v44);
    }
  }
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v6;
  int32x4_t *v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  float *v24;
  char *v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x1E0C80C00];
  if ((a4 - 1) > 1)
  {
    if (a4 == 4)
    {
      v9 = a2[6];
      MEMORY[0x1E0C80A78](a1);
      v11 = (char *)v30 - v10;
      bzero((char *)v30 - v10, v12);
      if ((int)v9 >= 1)
      {
        v13 = (int *)(*(_QWORD *)(*(_QWORD *)a2 + 360)
                    + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 336) + 8 * (int)a2[4] + 4));
        v14 = *(_QWORD *)(*(_QWORD *)a2 + 216);
        v15 = v11;
        v16 = v9;
        do
        {
          v17 = *v13++;
          *v15++ = *(_DWORD *)(v14 + 4 * v17);
          --v16;
        }
        while (v16);
      }
      v18 = 0xFFFFFFFF00000000;
      v19 = (float *)v11;
      do
      {
        v20 = *v19++;
        v18 += 0x100000000;
      }
      while (v20 <= 0.0);
      v21 = (uint64_t)(int)v9 << 32;
      v22 = (float *)&v11[4 * (int)v9 - 4];
      do
      {
        v23 = *v22--;
        v21 -= 0x100000000;
      }
      while (v23 <= 0.0);
      *(_DWORD *)(a3 + 24) = 1;
      *(_DWORD *)(a3 + 28) = v9;
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      v24 = *(float **)a3;
      v25 = *(char **)(a3 + 8);
      *v24 = 0.66667;
      if ((int)v9 >= 1)
        bzero(v25, 4 * v9);
      *(_DWORD *)&v25[v18 >> 30] = 1042983595;
      *(_DWORD *)&v25[v21 >> 30] = 1042983595;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(_QWORD *)(a3 + 28) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
  }
  else
  {
    v6 = a2[7];
    if ((_DWORD)v6 == 2)
      OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>();
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v6;
    *(_DWORD *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 36) = 0;
    if ((_DWORD)v6 == 6)
    {
      v7 = *(int32x4_t **)(a3 + 8);
      **(_DWORD **)a3 = 1056964608;
      v8 = vdupq_n_s32(0x3DAAAAABu);
      *v7 = v8;
      v7[1].i64[0] = v8.i64[0];
    }
    else
    {
      v26 = 1.0 / (float)(int)v6;
      v27 = cosf(v26 * 6.2832);
      v28 = 1.0
          / (float)((float)(3.0
                          / (float)((float)(v26
                                          * (float)(0.625
                                                  - (float)((float)((float)(v27 * 0.25) + 0.375)
                                                          * (float)((float)(v27 * 0.25) + 0.375))))
                                  * 8.0))
                  + (float)(int)v6);
      **(float **)a3 = 1.0 - (float)(v28 * (float)(int)v6);
      if ((int)v6 >= 1)
      {
        v29 = *(float **)(a3 + 8);
        do
        {
          *v29++ = v28;
          --v6;
        }
        while (v6);
      }
    }
  }
}

void OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::assignCreaseLimitTangentMasks<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  __double2 v18;
  unint64_t v19;
  float cosval;
  _DWORD *v21;
  float sinval;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  float *v27;
  int64x2_t v28;
  double v29;
  float v30;
  float v31;
  _DWORD *v32;
  uint64x2_t v33;
  double v34;
  float64x2_t __x;
  double v36;
  int32x2_t v37;

  v7 = *(unsigned int *)(a2 + 24);
  *(_DWORD *)(a3 + 24) = 1;
  *(_QWORD *)(a3 + 28) = v7;
  *(_BYTE *)(a3 + 36) = 0;
  v8 = *(void **)(a3 + 8);
  **(_DWORD **)a3 = 0;
  if ((int)v7 >= 1)
    bzero(v8, 4 * v7);
  v9 = (int)a5[1];
  *((_DWORD *)v8 + (int)*a5) = 1069547520;
  *((_DWORD *)v8 + v9) = -1077936128;
  *(_DWORD *)(a4 + 24) = 1;
  *(_DWORD *)(a4 + 28) = v7;
  *(_DWORD *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 36) = 0;
  v10 = *a5;
  v11 = (int)v10;
  if ((int)v10 >= 1)
    bzero(*(void **)(a4 + 8), 4 * v10);
  v12 = (int)a5[1];
  v13 = (v12 - v10);
  if ((_DWORD)v13 == 3)
  {
    v14 = *(_DWORD **)a4;
    v15 = *(_QWORD *)(a4 + 8);
    *v14 = -1075989545;
    *(_DWORD *)(v15 + 4 * (int)v10) = -1084378153;
    *(_DWORD *)(v15 + 4 * v12) = -1084378153;
    v16 = 1071494103;
    *(_DWORD *)(v15 + 4 * ((int)v10 + 1)) = 1071494103;
    v17 = v10 + 2;
LABEL_17:
    *(_DWORD *)(v15 + 4 * v17) = v16;
    goto LABEL_18;
  }
  if ((int)v13 < 4)
  {
    v32 = *(_DWORD **)a4;
    if ((_DWORD)v13 == 2)
    {
      *v32 = -1069547520;
      v15 = *(_QWORD *)(a4 + 8);
      *(_DWORD *)(v15 + 4 * (int)v10) = 0;
      *(_DWORD *)(v15 + 4 * v12) = 0;
      v17 = v10 + 1;
      v16 = 1077936128;
      goto LABEL_17;
    }
    *v32 = -1061158912;
    v15 = *(_QWORD *)(a4 + 8);
    *(_DWORD *)(v15 + 4 * (int)v10) = 1077936128;
    *(_DWORD *)(v15 + 4 * v12) = 1077936128;
  }
  else
  {
    v34 = 3.14159265 / (double)(int)v13;
    v18 = __sincos_stret(v34);
    v19 = 0;
    cosval = v18.__cosval;
    v21 = *(_DWORD **)a4;
    v15 = *(_QWORD *)(a4 + 8);
    *v21 = 0;
    v33 = (uint64x2_t)vdupq_n_s64(v13 - 2);
    sinval = v18.__sinval;
    v23 = sinval * -3.0;
    v24 = (float)((float)(cosval * 2.0) + -2.0) * -3.0;
    v25 = (float *)(v15 + 4 * v11);
    *v25 = v23;
    *(float *)(v15 + 4 * v12) = v23;
    v26 = v13 & 0xFFFFFFFE;
    v27 = v25 + 2;
    do
    {
      v37 = vmovn_s64((int64x2_t)vcgeq_u64(v33, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v19), (int8x16_t)xmmword_1DD008320)));
      v28.i64[0] = (int)(v19 | 1);
      v28.i64[1] = vadd_s32(vdup_lane_s32((int32x2_t)v19, 0), (int32x2_t)0x200000002).i32[1];
      __x = vmulq_n_f64(vcvtq_f64_s64(v28), v34);
      v36 = sin(__x.f64[1]);
      v29 = sin(__x.f64[0]);
      if ((v37.i8[0] & 1) != 0)
      {
        v30 = v29;
        *(v27 - 1) = v24 * v30;
      }
      if ((v37.i8[4] & 1) != 0)
      {
        v31 = v36;
        *v27 = v24 * v31;
      }
      v19 += 2;
      v27 += 2;
    }
    while (v26 != v19);
  }
LABEL_18:
  if ((int)v12 + 1 < (int)v7)
    bzero((void *)(v15 + 4 * ((int)v12 + 1)), 4 * (v7 - v12 - 2) + 4);
}

uint64_t _ZN23C3DSubdivCPUPrimvarDataIDv3_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, int a3, uint64_t a4, void **a5)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int Semantic;
  int NumFVarValues;
  malloc_type_id_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const UInt8 *v21;
  const UInt8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  CFDataRef v27;
  BOOL v28;
  char v29;
  BOOL *v30;
  BOOL *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  BOOL *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v44;

  C3DMeshSourceGetContent(a4);
  v11 = v10;
  v12 = BYTE4(v10);
  v13 = C3DSizeOfBaseType(BYTE4(v10));
  Semantic = C3DMeshSourceGetSemantic(a4);
  if (Semantic || HIBYTE(v11) >= 3 && (C3DBaseTypeIsFloatingValue(BYTE6(v11)) & 1) != 0)
  {
    v44 = a4;
    if (a3)
    {
      NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*a2, *(unsigned __int8 *)(a1 + 72));
      v16 = 728374720;
    }
    else
    {
      NumFVarValues = *((_DWORD *)*a2 + 2);
      v16 = 2842004764;
    }
    v19 = NumFVarValues;
    v20 = v13 * NumFVarValues;
    v21 = (const UInt8 *)malloc_type_malloc(v20, v16);
    v22 = v21;
    if (NumFVarValues >= 1)
    {
      v23 = 0;
      v24 = (uint64_t)v21;
      do
      {
        v25 = *(_QWORD *)(a1 + 48);
        v26 = *(float32x4_t *)(v25 + v23);
        v26.i32[3] = *(_QWORD *)(v25 + v23 + 8);
        C3DConvertFloatingTypeFromFloat4(v12, v24, v26);
        v24 += (unsigned __int16)v13;
        v23 += 16;
      }
      while (16 * v19 != v23);
    }
    v27 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v20, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v18 = C3DMeshSourceCreateWithData(Semantic, v27, v12, 1, v19, v13, 0);
    CFRelease(v27);
    v28 = *(_BYTE *)(a1 + 88) == 2;
    v29 = *(_BYTE *)(a1 + 72);
    v30 = (BOOL *)a5[2];
    v31 = (BOOL *)a5[1];
    if (v31 >= v30)
    {
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (_BYTE *)*a5) >> 3);
      v34 = v33 + 1;
      if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (_BYTE *)*a5) >> 3);
      if (2 * v35 > v34)
        v34 = 2 * v35;
      if (v35 >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v34;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a5 + 2), v36);
      else
        v37 = 0;
      v38 = (BOOL *)&v37[24 * v33];
      v39 = &v37[24 * v36];
      *v38 = v28;
      v38[1] = v29;
      *(_DWORD *)(v38 + 2) = 0;
      *((_WORD *)v38 + 3) = 0;
      *((_QWORD *)v38 + 1) = v44;
      *((_QWORD *)v38 + 2) = v18;
      v32 = (char *)(v38 + 24);
      v41 = (char *)*a5;
      v40 = (char *)a5[1];
      if (v40 != *a5)
      {
        do
        {
          v42 = *(_OWORD *)(v40 - 24);
          *((_QWORD *)v38 - 1) = *((_QWORD *)v40 - 1);
          *(_OWORD *)(v38 - 24) = v42;
          v38 -= 24;
          v40 -= 24;
        }
        while (v40 != v41);
        v40 = (char *)*a5;
      }
      *a5 = v38;
      a5[1] = v32;
      a5[2] = v39;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *v31 = v28;
      v31[1] = v29;
      *(_DWORD *)(v31 + 2) = 0;
      *((_WORD *)v31 + 3) = 0;
      v32 = (char *)(v31 + 24);
      *((_QWORD *)v31 + 1) = v44;
      *((_QWORD *)v31 + 2) = v18;
    }
    a5[1] = v32;
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext_cold_1();
    return 0;
  }
  return v18;
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  int v66;
  int v67;
  int v68;
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[5];
  int v72;
  _BYTE *v73;
  unsigned int v74;
  int v75;
  _BYTE v76[400];
  void *__p;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v72 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v78 = &v81;
  v79 = v11;
  v80 = 33;
  v82 = 0;
  v61 = v10;
  v60 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v60;
    v10 = v61;
    v82 = v15;
    v78 = (uint64_t *)v15;
    v80 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v76;
  v73 = v76;
  v74 = v16;
  v75 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v60;
    v10 = v61;
    __p = v18;
    v73 = v18;
    v75 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v71[0] = v17;
  v71[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v71[2] = v20;
  memset(&v71[3], 0, 13);
  v54 = &v17[v11 + v11];
  v55 = &v17[v11];
  v70[0] = v55;
  v70[1] = v21;
  v70[2] = v22;
  memset(&v70[3], 0, 13);
  v69[0] = v54;
  v69[1] = v21 + 4 * v11;
  v69[2] = v22 + 4 * v11;
  memset(&v69[3], 0, 13);
  v64[0] = v10;
  v64[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v24 = 0uLL;
    v58 = (uint64_t)&v17[v11 + 1];
    v59 = v17;
    v57 = v21 + 4 * v11;
    v56 = v22 + 4 * v11;
    do
    {
      v25 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v25 & 0x800) != 0 || (v26 = v10[42], (v27 = *(_DWORD *)(v26 + 8 * v23)) == 0))
      {
        *(_OWORD *)(*a3 + 16 * v23) = v24;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v24;
          *(_OWORD *)(*a5 + 16 * v23) = v24;
        }
      }
      else
      {
        v28 = (2 * v23) | 1;
        v62 = *(int *)(v26 + 4 * v28);
        v63 = v10[45];
        v65 = v23;
        v66 = v23;
        v29 = (v25 >> 7) & 0xF;
        v67 = *(_DWORD *)(*(_QWORD *)(v64[0] + 336) + 8 * v23);
        v68 = *(_DWORD *)(*(_QWORD *)(v64[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v72, (unsigned int *)v64, (uint64_t)v71, v29);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v72, (int *)v64, (uint64_t)v71, (uint64_t)v70, (uint64_t)v69, v29);
        v31 = v78;
        v10 = v61;
        v24 = 0uLL;
        if (v27 >= 1)
        {
          v32 = (int *)(v63 + 4 * v62);
          v33 = v61[15];
          v34 = v27;
          v35 = v78;
          do
          {
            v36 = *v32++;
            *(_DWORD *)v35 = *(_DWORD *)(v33 + 8 * v36 + 4 * (v23 == *(_DWORD *)(v33 + 8 * v36)));
            v35 = (uint64_t *)((char *)v35 + 4);
            --v34;
          }
          while (v34);
        }
        v37 = (char *)v31 + 4 * v27;
        LOBYTE(v13) = v60;
        if (LODWORD(v71[4]) || (!LODWORD(v70[4]) ? (v38 = 1) : (v38 = v60), (v38 & 1) == 0))
        {
          v39 = v61[33];
          v40 = *(unsigned int *)(v39 + 8 * v23);
          if ((int)v40 >= 1)
          {
            v41 = *(int *)(v39 + 4 * v28);
            v42 = (int *)(v61[36] + 4 * v41);
            v43 = (unsigned __int16 *)(v61[39] + 2 * v41);
            v44 = v61[3];
            v45 = v61[6];
            v46 = (_DWORD *)v31 + v27;
            do
            {
              v47 = *v42++;
              v48 = v45 + 4 * *(int *)(v44 + 8 * v47 + 4);
              v49 = *(_DWORD *)(v44 + 8 * (_DWORD)v47);
              LODWORD(v47) = *v43++;
              v30 = (v47 + 2);
              if (v49 > (unsigned __int16)(v47 + 2))
                LOWORD(v49) = 0;
              *v46++ = *(_DWORD *)(v48 + 4 * (unsigned __int16)(v30 - v49));
              --v40;
            }
            while (v40);
          }
        }
        *(_OWORD *)(*a3 + 16 * v23) = 0uLL;
        if (SLODWORD(v71[4]) >= 1)
        {
          v50 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v50]), *(float *)(v20 + 4 * v50));
            ++v50;
          }
          while (v50 < SLODWORD(v71[4]));
        }
        if (SHIDWORD(v71[3]) >= 1)
        {
          v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v51)), *(float *)&v19[4 * v51]);
            ++v51;
          }
          while (v51 < SHIDWORD(v71[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v59);
        if ((v60 & 1) == 0)
        {
          if (LODWORD(v70[4]) != LODWORD(v69[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v30, (uint64_t)v61, v60);
          if (HIDWORD(v70[3]) != HIDWORD(v69[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v30, (uint64_t)v61, v60);
          *(_OWORD *)(*a4 + 16 * v23) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v23) = 0uLL;
          if (SLODWORD(v70[4]) >= 1)
          {
            v52 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v52]), *(float *)(v20 + 4 * v11 + 4 * v52));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v52]), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SLODWORD(v70[4]));
          }
          if (SHIDWORD(v70[3]) >= 1)
          {
            v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v53)), *(float *)(v58 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v53)), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SHIDWORD(v70[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v54);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  int v66;
  int v67;
  int v68;
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[5];
  int v72;
  _BYTE *v73;
  unsigned int v74;
  int v75;
  _BYTE v76[400];
  void *__p;
  uint64_t *v78;
  int v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v72 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v78 = &v81;
  v79 = v11;
  v80 = 33;
  v82 = 0;
  v61 = v10;
  v60 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v60;
    v10 = v61;
    v82 = v15;
    v78 = (uint64_t *)v15;
    v80 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v76;
  v73 = v76;
  v74 = v16;
  v75 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v60;
    v10 = v61;
    __p = v18;
    v73 = v18;
    v75 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v71[0] = v17;
  v71[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v71[2] = v20;
  memset(&v71[3], 0, 13);
  v54 = &v17[v11 + v11];
  v55 = &v17[v11];
  v70[0] = v55;
  v70[1] = v21;
  v70[2] = v22;
  memset(&v70[3], 0, 13);
  v69[0] = v54;
  v69[1] = v21 + 4 * v11;
  v69[2] = v22 + 4 * v11;
  memset(&v69[3], 0, 13);
  v64[0] = v10;
  v64[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v24 = 0uLL;
    v58 = (uint64_t)&v17[v11 + 1];
    v59 = v17;
    v57 = v21 + 4 * v11;
    v56 = v22 + 4 * v11;
    do
    {
      v25 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v25 & 0x800) != 0 || (v26 = v10[42], (v27 = *(_DWORD *)(v26 + 8 * v23)) == 0))
      {
        *(_OWORD *)(*a3 + 16 * v23) = v24;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = v24;
          *(_OWORD *)(*a5 + 16 * v23) = v24;
        }
      }
      else
      {
        v28 = (2 * v23) | 1;
        v62 = *(int *)(v26 + 4 * v28);
        v63 = v10[45];
        v65 = v23;
        v66 = v23;
        v29 = (v25 >> 7) & 0xF;
        v67 = *(_DWORD *)(*(_QWORD *)(v64[0] + 336) + 8 * v23);
        v68 = *(_DWORD *)(*(_QWORD *)(v64[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v72, (unsigned int *)v64, (uint64_t)v71, v29);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v72, (int *)v64, (uint64_t)v71, (uint64_t)v70, (uint64_t)v69, v29);
        v31 = v78;
        v10 = v61;
        v24 = 0uLL;
        if (v27 >= 1)
        {
          v32 = (int *)(v63 + 4 * v62);
          v33 = v61[15];
          v34 = v27;
          v35 = v78;
          do
          {
            v36 = *v32++;
            *(_DWORD *)v35 = *(_DWORD *)(v33 + 8 * v36 + 4 * (v23 == *(_DWORD *)(v33 + 8 * v36)));
            v35 = (uint64_t *)((char *)v35 + 4);
            --v34;
          }
          while (v34);
        }
        v37 = (char *)v31 + 4 * v27;
        LOBYTE(v13) = v60;
        if (LODWORD(v71[4]) || (!LODWORD(v70[4]) ? (v38 = 1) : (v38 = v60), (v38 & 1) == 0))
        {
          v39 = v61[33];
          v40 = *(unsigned int *)(v39 + 8 * v23);
          if ((int)v40 >= 1)
          {
            v41 = *(int *)(v39 + 4 * v28);
            v42 = (int *)(v61[36] + 4 * v41);
            v43 = (unsigned __int16 *)(v61[39] + 2 * v41);
            v44 = v61[3];
            v45 = v61[6];
            v46 = (_DWORD *)v31 + v27;
            do
            {
              v47 = *v42++;
              v48 = v45 + 4 * *(int *)(v44 + 8 * v47 + 4);
              v49 = *(_DWORD *)(v44 + 8 * (_DWORD)v47);
              LODWORD(v47) = *v43++;
              v30 = (v47 + 2);
              if (v49 > (unsigned __int16)(v47 + 2))
                LOWORD(v49) = 0;
              *v46++ = *(_DWORD *)(v48 + 4 * (unsigned __int16)(v30 - v49));
              --v40;
            }
            while (v40);
          }
        }
        *(_OWORD *)(*a3 + 16 * v23) = 0uLL;
        if (SLODWORD(v71[4]) >= 1)
        {
          v50 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v50]), *(float *)(v20 + 4 * v50));
            ++v50;
          }
          while (v50 < SLODWORD(v71[4]));
        }
        if (SHIDWORD(v71[3]) >= 1)
        {
          v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v51)), *(float *)&v19[4 * v51]);
            ++v51;
          }
          while (v51 < SHIDWORD(v71[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v59);
        if ((v60 & 1) == 0)
        {
          if (LODWORD(v70[4]) != LODWORD(v69[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v30, (uint64_t)v61, v60);
          if (HIDWORD(v70[3]) != HIDWORD(v69[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v30, (uint64_t)v61, v60);
          *(_OWORD *)(*a4 + 16 * v23) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v23) = 0uLL;
          if (SLODWORD(v70[4]) >= 1)
          {
            v52 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v52]), *(float *)(v20 + 4 * v11 + 4 * v52));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v52]), *(float *)(v56 + 4 * v52));
              ++v52;
            }
            while (v52 < SLODWORD(v70[4]));
          }
          if (SHIDWORD(v70[3]) >= 1)
          {
            v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v53)), *(float *)(v58 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v53)), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SHIDWORD(v70[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v54);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v82);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  int v13;
  unsigned int v14;
  float *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  float *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  int *v42;
  int v43;
  int v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 8) >> 2) & 0xF));
  v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4)
    v11 = a5 == 0;
  else
    v11 = 1;
  v12 = v11;
  if (v11)
    v13 = 1;
  else
    v13 = 3;
  v42 = (int *)&v45;
  v43 = v10;
  v44 = 33;
  v46 = 0;
  if (v10 >= 0x22)
  {
    v46 = (int *)operator new(4 * v10);
    v42 = v46;
    v44 = v10;
  }
  v14 = v10 * v13;
  v15 = (float *)&v40;
  __p = 0;
  if (v14 < 0x64)
  {
    v16 = 0;
  }
  else
  {
    v16 = operator new(4 * v14);
    __p = v16;
    v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = &v15[v10];
    v21 = &v20[v10];
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v22 = (unsigned int *)(*(_QWORD *)(v9 + 336) + 8 * v17), v23 = *v22, !(_DWORD)v23))
      {
        *(_OWORD *)(*a3 + 16 * v17) = 0uLL;
        *(float32x4_t *)(*a3 + 16 * v17) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v17), *(float32x4_t *)(*a3 + 16 * v17));
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
        }
      }
      else
      {
        v24 = *(_QWORD *)(v9 + 360);
        v25 = (int)v22[1];
        v26 = v15;
        if ((v12 & 1) == 0)
        {
          *v15 = 1.0;
          *(_QWORD *)v20 = 0x3F800000BF800000;
          v20[2] = 0.0;
          v26 = &v20[v10 + 2];
          v19 = 2;
          v18 = 2;
          *(_QWORD *)v21 = 3212836864;
        }
        *v26 = 1.0;
        v27 = v42;
        if ((int)v23 >= 1)
        {
          v28 = (int *)(v24 + 4 * v25);
          v29 = *(_QWORD *)(v9 + 120);
          v30 = v42;
          do
          {
            v31 = *v28++;
            *v30++ = *(_DWORD *)(v29 + 8 * v31 + 4 * (v17 == *(_DWORD *)(v29 + 8 * v31)));
            --v23;
          }
          while (v23);
        }
        *(_OWORD *)(*a3 + 16 * v17) = 0uLL;
        v32 = *a3;
        v33 = *a2;
        *(float32x4_t *)(*a3 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          if (v18 != v19)
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1((uint64_t)v27, v32, v33);
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
          v34 = v19;
          v35 = v20 + 1;
          v36 = &v20[v10 + 1];
          if ((int)v19 >= 1)
          {
            do
            {
              v37 = *v35++;
              *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * *v27), v37);
              v39 = *v27++;
              v38 = v39;
              *(float *)&v39 = *v36++;
              *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v38), *(float *)&v39);
              --v34;
            }
            while (v34);
          }
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v20);
          *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v21);
          v18 = v19;
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    v16 = __p;
  }
  operator delete(v16);
  operator delete(v46);
}

uint64_t _ZN23C3DSubdivCPUPrimvarDataIDv4_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext(uint64_t a1, OpenSubdiv::v3_1_1::Vtr::internal::Level **a2, int a3, uint64_t a4, void **a5)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int Semantic;
  int NumFVarValues;
  malloc_type_id_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  const UInt8 *v21;
  const UInt8 *v22;
  uint64_t v23;
  uint64_t v24;
  CFDataRef v25;
  BOOL v26;
  char v27;
  BOOL *v28;
  BOOL *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  BOOL *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v42;

  C3DMeshSourceGetContent(a4);
  v11 = v10;
  v12 = BYTE4(v10);
  v13 = C3DSizeOfBaseType(BYTE4(v10));
  Semantic = C3DMeshSourceGetSemantic(a4);
  if (Semantic || HIBYTE(v11) >= 3 && (C3DBaseTypeIsFloatingValue(BYTE6(v11)) & 1) != 0)
  {
    v42 = a4;
    if (a3)
    {
      NumFVarValues = OpenSubdiv::v3_1_1::Vtr::internal::Level::getNumFVarValues(*a2, *(unsigned __int8 *)(a1 + 72));
      v16 = 728374720;
    }
    else
    {
      NumFVarValues = *((_DWORD *)*a2 + 2);
      v16 = 2842004764;
    }
    v19 = NumFVarValues;
    v20 = v13 * NumFVarValues;
    v21 = (const UInt8 *)malloc_type_malloc(v20, v16);
    v22 = v21;
    if (NumFVarValues >= 1)
    {
      v23 = 0;
      v24 = (uint64_t)v21;
      do
      {
        C3DConvertFloatingTypeFromFloat4(v12, v24, *(float32x4_t *)(*(_QWORD *)(a1 + 48) + v23));
        v24 += (unsigned __int16)v13;
        v23 += 16;
      }
      while (16 * v19 != v23);
    }
    v25 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, v20, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v18 = C3DMeshSourceCreateWithData(Semantic, v25, v12, 1, v19, v13, 0);
    CFRelease(v25);
    v26 = *(_BYTE *)(a1 + 88) == 2;
    v27 = *(_BYTE *)(a1 + 72);
    v28 = (BOOL *)a5[2];
    v29 = (BOOL *)a5[1];
    if (v29 >= v28)
    {
      v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - (_BYTE *)*a5) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (_BYTE *)*a5) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v32;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a5 + 2), v34);
      else
        v35 = 0;
      v36 = (BOOL *)&v35[24 * v31];
      v37 = &v35[24 * v34];
      *v36 = v26;
      v36[1] = v27;
      *(_DWORD *)(v36 + 2) = 0;
      *((_WORD *)v36 + 3) = 0;
      *((_QWORD *)v36 + 1) = v42;
      *((_QWORD *)v36 + 2) = v18;
      v30 = (char *)(v36 + 24);
      v39 = (char *)*a5;
      v38 = (char *)a5[1];
      if (v38 != *a5)
      {
        do
        {
          v40 = *(_OWORD *)(v38 - 24);
          *((_QWORD *)v36 - 1) = *((_QWORD *)v38 - 1);
          *(_OWORD *)(v36 - 24) = v40;
          v36 -= 24;
          v38 -= 24;
        }
        while (v38 != v39);
        v38 = (char *)*a5;
      }
      *a5 = v36;
      a5[1] = v30;
      a5[2] = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v29 = v26;
      v29[1] = v27;
      *(_DWORD *)(v29 + 2) = 0;
      *((_WORD *)v29 + 3) = 0;
      v30 = (char *)(v29 + 24);
      *((_QWORD *)v29 + 1) = v42;
      *((_QWORD *)v29 + 2) = v18;
    }
    a5[1] = v30;
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      _ZN23C3DSubdivCPUPrimvarDataIDv2_fE26_CreateMeshSourceForSourceERKN10OpenSubdiv6v3_1_13Far13TopologyLevelEbPK15__C3DMeshSourceP31C3DSubdivCPUMeshCreationContext_cold_1();
    return 0;
  }
  return v18;
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  int v68;
  int v69;
  _QWORD v70[5];
  _QWORD v71[5];
  _QWORD v72[5];
  int v73;
  _BYTE *v74;
  unsigned int v75;
  int v76;
  _BYTE v77[400];
  void *__p;
  uint64_t *v79;
  int v80;
  int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v73 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v79 = &v82;
  v80 = v11;
  v81 = 33;
  v83 = 0;
  v62 = v10;
  v61 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v61;
    v10 = v62;
    v83 = v15;
    v79 = (uint64_t *)v15;
    v81 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v77;
  v74 = v77;
  v75 = v16;
  v76 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v61;
    v10 = v62;
    __p = v18;
    v74 = v18;
    v76 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v72[0] = v17;
  v72[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v72[2] = v20;
  memset(&v72[3], 0, 13);
  v55 = &v17[v11 + v11];
  v56 = &v17[v11];
  v71[0] = v56;
  v71[1] = v21;
  v71[2] = v22;
  memset(&v71[3], 0, 13);
  v70[0] = v55;
  v70[1] = v21 + 4 * v11;
  v70[2] = v22 + 4 * v11;
  memset(&v70[3], 0, 13);
  v65[0] = v10;
  v65[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v59 = (uint64_t)&v17[v11 + 1];
    v60 = v17;
    v58 = v21 + 4 * v11;
    v57 = v22 + 4 * v11;
    do
    {
      v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        v30 = (_QWORD *)(*a3 + 16 * v23);
        *v30 = 0;
        v30[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
        }
      }
      else
      {
        v27 = (2 * v23) | 1;
        v63 = *(int *)(v25 + 4 * v27);
        v64 = v10[45];
        v66 = v23;
        v67 = v23;
        v28 = (v24 >> 7) & 0xF;
        v68 = *(_DWORD *)(*(_QWORD *)(v65[0] + 336) + 8 * v23);
        v69 = *(_DWORD *)(*(_QWORD *)(v65[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v73, (unsigned int *)v65, (uint64_t)v72, v28);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)1>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v73, (int *)v65, (uint64_t)v72, (uint64_t)v71, (uint64_t)v70, v28);
        v31 = v79;
        v10 = v62;
        if (v26 >= 1)
        {
          v32 = (int *)(v64 + 4 * v63);
          v33 = v62[15];
          v34 = v26;
          v35 = v79;
          do
          {
            v36 = *v32++;
            *(_DWORD *)v35 = *(_DWORD *)(v33 + 8 * v36 + 4 * (v23 == *(_DWORD *)(v33 + 8 * v36)));
            v35 = (uint64_t *)((char *)v35 + 4);
            --v34;
          }
          while (v34);
        }
        v37 = (char *)v31 + 4 * v26;
        LOBYTE(v13) = v61;
        if (LODWORD(v72[4]) || (!LODWORD(v71[4]) ? (v38 = 1) : (v38 = v61), (v38 & 1) == 0))
        {
          v39 = v62[33];
          v40 = *(unsigned int *)(v39 + 8 * v23);
          if ((int)v40 >= 1)
          {
            v41 = *(int *)(v39 + 4 * v27);
            v42 = (int *)(v62[36] + 4 * v41);
            v43 = (unsigned __int16 *)(v62[39] + 2 * v41);
            v44 = v62[3];
            v45 = v62[6];
            v46 = (_DWORD *)v31 + v26;
            do
            {
              v47 = *v42++;
              v48 = v45 + 4 * *(int *)(v44 + 8 * v47 + 4);
              v49 = *(_DWORD *)(v44 + 8 * (_DWORD)v47);
              LODWORD(v47) = *v43++;
              v29 = (v47 + 2);
              if (v49 > (unsigned __int16)(v47 + 2))
                LOWORD(v49) = 0;
              *v46++ = *(_DWORD *)(v48 + 4 * (unsigned __int16)(v29 - v49));
              --v40;
            }
            while (v40);
          }
        }
        v50 = (_QWORD *)(*a3 + 16 * v23);
        *v50 = 0;
        v50[1] = 0;
        if (SLODWORD(v72[4]) >= 1)
        {
          v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v51]), *(float *)(v20 + 4 * v51));
            ++v51;
          }
          while (v51 < SLODWORD(v72[4]));
        }
        if (SHIDWORD(v72[3]) >= 1)
        {
          v52 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v52)), *(float *)&v19[4 * v52]);
            ++v52;
          }
          while (v52 < SHIDWORD(v72[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v60);
        if ((v61 & 1) == 0)
        {
          if (LODWORD(v71[4]) != LODWORD(v70[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v29, (uint64_t)v62, v61);
          if (HIDWORD(v71[3]) != HIDWORD(v70[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v29, (uint64_t)v62, v61);
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
          if (SLODWORD(v71[4]) >= 1)
          {
            v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v53]), *(float *)(v20 + 4 * v11 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v53]), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SLODWORD(v71[4]));
          }
          if (SHIDWORD(v71[3]) >= 1)
          {
            v54 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v54)), *(float *)(v59 + 4 * v54));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v54)), *(float *)(v58 + 4 * v54));
              ++v54;
            }
            while (v54 < SHIDWORD(v71[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v56);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v83);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE2ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  void *v15;
  unsigned int v16;
  float *v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  int v67;
  int v68;
  int v69;
  _QWORD v70[5];
  _QWORD v71[5];
  _QWORD v72[5];
  int v73;
  _BYTE *v74;
  unsigned int v75;
  int v76;
  _BYTE v77[400];
  void *__p;
  uint64_t *v79;
  int v80;
  int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v73 = *(_DWORD *)(*a1 + 4);
  v10 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * (((unint64_t)*(unsigned __int8 *)(v9 + 8) >> 2) & 0xF));
  v11 = (2 * *((int *)v10 + 5)) | 1;
  if (a4)
    v12 = a5 == 0;
  else
    v12 = 1;
  v13 = v12;
  if (v12)
    v14 = 1;
  else
    v14 = 3;
  v79 = &v82;
  v80 = v11;
  v81 = 33;
  v83 = 0;
  v62 = v10;
  v61 = v13;
  if (v11 >= 0x22)
  {
    v15 = operator new(4 * v11);
    LOBYTE(v13) = v61;
    v10 = v62;
    v83 = v15;
    v79 = (uint64_t *)v15;
    v81 = v11;
  }
  v16 = v11 * v14;
  v17 = (float *)v77;
  v74 = v77;
  v75 = v16;
  v76 = 99;
  __p = 0;
  if (v16 < 0x64)
  {
    v18 = 0;
  }
  else
  {
    v18 = operator new(4 * v16);
    LOBYTE(v13) = v61;
    v10 = v62;
    __p = v18;
    v74 = v18;
    v76 = v16;
    v17 = (float *)v18;
  }
  v19 = v17 + 1;
  v20 = (uint64_t)&v17[*((int *)v10 + 5) + 1];
  v21 = (uint64_t)&v17[v11 + 1];
  v72[0] = v17;
  v72[1] = v17 + 1;
  v22 = v20 + 4 * v11;
  v72[2] = v20;
  memset(&v72[3], 0, 13);
  v55 = &v17[v11 + v11];
  v56 = &v17[v11];
  v71[0] = v56;
  v71[1] = v21;
  v71[2] = v22;
  memset(&v71[3], 0, 13);
  v70[0] = v55;
  v70[1] = v21 + 4 * v11;
  v70[2] = v22 + 4 * v11;
  memset(&v70[3], 0, 13);
  v65[0] = v10;
  v65[1] = v10;
  if (*((int *)v10 + 2) >= 1)
  {
    v23 = 0;
    v59 = (uint64_t)&v17[v11 + 1];
    v60 = v17;
    v58 = v21 + 4 * v11;
    v57 = v22 + 4 * v11;
    do
    {
      v24 = *(unsigned __int16 *)(v10[54] + 2 * v23);
      if ((v24 & 0x800) != 0 || (v25 = v10[42], (v26 = *(_DWORD *)(v25 + 8 * v23)) == 0))
      {
        v30 = (_QWORD *)(*a3 + 16 * v23);
        *v30 = 0;
        v30[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v23) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v23), *(float32x4_t *)(*a3 + 16 * v23));
        if ((v13 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
        }
      }
      else
      {
        v27 = (2 * v23) | 1;
        v63 = *(int *)(v25 + 4 * v27);
        v64 = v10[45];
        v66 = v23;
        v67 = v23;
        v28 = (v24 >> 7) & 0xF;
        v68 = *(_DWORD *)(*(_QWORD *)(v65[0] + 336) + 8 * v23);
        v69 = *(_DWORD *)(*(_QWORD *)(v65[0] + 264) + 8 * v23);
        if ((v13 & 1) != 0)
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v73, (unsigned int *)v65, (uint64_t)v72, v28);
        else
          OpenSubdiv::v3_1_1::Sdc::Scheme<(OpenSubdiv::v3_1_1::Sdc::SchemeType)2>::ComputeVertexLimitMask<OpenSubdiv::v3_1_1::Vtr::internal::VertexInterface,OpenSubdiv::v3_1_1::Far::PrimvarRefiner::Mask>((uint64_t)&v73, (int *)v65, (uint64_t)v72, (uint64_t)v71, (uint64_t)v70, v28);
        v31 = v79;
        v10 = v62;
        if (v26 >= 1)
        {
          v32 = (int *)(v64 + 4 * v63);
          v33 = v62[15];
          v34 = v26;
          v35 = v79;
          do
          {
            v36 = *v32++;
            *(_DWORD *)v35 = *(_DWORD *)(v33 + 8 * v36 + 4 * (v23 == *(_DWORD *)(v33 + 8 * v36)));
            v35 = (uint64_t *)((char *)v35 + 4);
            --v34;
          }
          while (v34);
        }
        v37 = (char *)v31 + 4 * v26;
        LOBYTE(v13) = v61;
        if (LODWORD(v72[4]) || (!LODWORD(v71[4]) ? (v38 = 1) : (v38 = v61), (v38 & 1) == 0))
        {
          v39 = v62[33];
          v40 = *(unsigned int *)(v39 + 8 * v23);
          if ((int)v40 >= 1)
          {
            v41 = *(int *)(v39 + 4 * v27);
            v42 = (int *)(v62[36] + 4 * v41);
            v43 = (unsigned __int16 *)(v62[39] + 2 * v41);
            v44 = v62[3];
            v45 = v62[6];
            v46 = (_DWORD *)v31 + v26;
            do
            {
              v47 = *v42++;
              v48 = v45 + 4 * *(int *)(v44 + 8 * v47 + 4);
              v49 = *(_DWORD *)(v44 + 8 * (_DWORD)v47);
              LODWORD(v47) = *v43++;
              v29 = (v47 + 2);
              if (v49 > (unsigned __int16)(v47 + 2))
                LOWORD(v49) = 0;
              *v46++ = *(_DWORD *)(v48 + 4 * (unsigned __int16)(v29 - v49));
              --v40;
            }
            while (v40);
          }
        }
        v50 = (_QWORD *)(*a3 + 16 * v23);
        *v50 = 0;
        v50[1] = 0;
        if (SLODWORD(v72[4]) >= 1)
        {
          v51 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v51]), *(float *)(v20 + 4 * v51));
            ++v51;
          }
          while (v51 < SLODWORD(v72[4]));
        }
        if (SHIDWORD(v72[3]) >= 1)
        {
          v52 = 0;
          do
          {
            *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v52)), *(float *)&v19[4 * v52]);
            ++v52;
          }
          while (v52 < SHIDWORD(v72[3]));
        }
        *(float32x4_t *)(*a3 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v60);
        if ((v61 & 1) == 0)
        {
          if (LODWORD(v71[4]) != LODWORD(v70[4]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_2(v29, (uint64_t)v62, v61);
          if (HIDWORD(v71[3]) != HIDWORD(v70[3]))
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1(v29, (uint64_t)v62, v61);
          *(_OWORD *)(*a4 + 16 * v23) = 0u;
          *(_OWORD *)(*a5 + 16 * v23) = 0u;
          if (SLODWORD(v71[4]) >= 1)
          {
            v53 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v53]), *(float *)(v20 + 4 * v11 + 4 * v53));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *(int *)&v37[4 * v53]), *(float *)(v57 + 4 * v53));
              ++v53;
            }
            while (v53 < SLODWORD(v71[4]));
          }
          if (SHIDWORD(v71[3]) >= 1)
          {
            v54 = 0;
            do
            {
              *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v54)), *(float *)(v59 + 4 * v54));
              *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * *((int *)v31 + v54)), *(float *)(v58 + 4 * v54));
              ++v54;
            }
            while (v54 < SHIDWORD(v71[3]));
          }
          *(float32x4_t *)(*a4 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v56);
          *(float32x4_t *)(*a5 + 16 * v23) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v23), *(float32x4_t *)(*a2 + 16 * v23), *v55);
        }
      }
      ++v23;
    }
    while (v23 < *((int *)v10 + 2));
    v18 = __p;
  }
  operator delete(v18);
  operator delete(v83);
}

void _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE0ENSt3__16vectorI16C3DSubdivCPUDataIDv4_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3_(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  int v13;
  unsigned int v14;
  float *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *__p;
  int *v44;
  int v45;
  int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40)
                 + 8 * (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)a1 + 8) >> 2) & 0xF));
  v10 = (2 * *(int *)(v9 + 20)) | 1;
  if (a4)
    v11 = a5 == 0;
  else
    v11 = 1;
  v12 = v11;
  if (v11)
    v13 = 1;
  else
    v13 = 3;
  v44 = (int *)&v47;
  v45 = v10;
  v46 = 33;
  v48 = 0;
  if (v10 >= 0x22)
  {
    v48 = (int *)operator new(4 * v10);
    v44 = v48;
    v46 = v10;
  }
  v14 = v10 * v13;
  v15 = (float *)&v42;
  __p = 0;
  if (v14 < 0x64)
  {
    v16 = 0;
  }
  else
  {
    v16 = operator new(4 * v14);
    __p = v16;
    v15 = (float *)v16;
  }
  if (*(int *)(v9 + 8) >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = &v15[v10];
    v21 = &v20[v10];
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(v9 + 432) + 2 * v17) & 0x800) != 0
        || (v22 = (unsigned int *)(*(_QWORD *)(v9 + 336) + 8 * v17), v23 = *v22, !(_DWORD)v23))
      {
        v41 = (_QWORD *)(*a3 + 16 * v17);
        *v41 = 0;
        v41[1] = 0;
        *(float32x4_t *)(*a3 + 16 * v17) = vaddq_f32(*(float32x4_t *)(*a2 + 16 * v17), *(float32x4_t *)(*a3 + 16 * v17));
        if ((v12 & 1) == 0)
        {
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
        }
      }
      else
      {
        v24 = *(_QWORD *)(v9 + 360);
        v25 = (int)v22[1];
        v26 = v15;
        if ((v12 & 1) == 0)
        {
          *v15 = 1.0;
          *(_QWORD *)v20 = 0x3F800000BF800000;
          v20[2] = 0.0;
          v26 = &v20[v10 + 2];
          v19 = 2;
          v18 = 2;
          *(_QWORD *)v21 = 3212836864;
        }
        *v26 = 1.0;
        v27 = v44;
        if ((int)v23 >= 1)
        {
          v28 = (int *)(v24 + 4 * v25);
          v29 = *(_QWORD *)(v9 + 120);
          v30 = v44;
          do
          {
            v31 = *v28++;
            *v30++ = *(_DWORD *)(v29 + 8 * v31 + 4 * (v17 == *(_DWORD *)(v29 + 8 * v31)));
            --v23;
          }
          while (v23);
        }
        v32 = (_QWORD *)(*a3 + 16 * v17);
        *v32 = 0;
        v32[1] = 0;
        v33 = *a3;
        v34 = *a2;
        *(float32x4_t *)(*a3 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a3 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v15);
        if ((v12 & 1) == 0)
        {
          if (v18 != v19)
            _ZNK10OpenSubdiv6v3_1_13Far14PrimvarRefiner5limitILNS0_3Sdc10SchemeTypeE1ENSt3__16vectorI16C3DSubdivCPUDataIDv2_fENS6_9allocatorISA_EEEESD_SD_SD_EEvRKT0_RT1_PT2_PT3__cold_1((uint64_t)v27, v33, v34);
          *(_OWORD *)(*a4 + 16 * v17) = 0uLL;
          *(_OWORD *)(*a5 + 16 * v17) = 0uLL;
          v35 = v19;
          v36 = v20 + 1;
          v37 = &v20[v10 + 1];
          if ((int)v19 >= 1)
          {
            do
            {
              v38 = *v36++;
              *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * *v27), v38);
              v40 = *v27++;
              v39 = v40;
              *(float *)&v40 = *v37++;
              *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v39), *(float *)&v40);
              --v35;
            }
            while (v35);
          }
          *(float32x4_t *)(*a4 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a4 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v20);
          *(float32x4_t *)(*a5 + 16 * v17) = vmlaq_n_f32(*(float32x4_t *)(*a5 + 16 * v17), *(float32x4_t *)(*a2 + 16 * v17), *v21);
          v18 = v19;
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v9 + 8));
    v16 = __p;
  }
  operator delete(v16);
  operator delete(v48);
}

_OWORD *_ZNSt3__16__treeINS_12__value_typeIDv3_fjEENS_19__map_value_compareIS2_S3_30__C3DSubdivWelderKeyComparatorLb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_jEEEEENSB_INS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(uint64_t **a1, float32x4_t *a2, uint64_t a3)
{
  float32x4_t **equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT;
  _OWORD *v6;
  uint64_t **v7;
  float32x4_t **v9;

  equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT = _ZNSt3__16__treeINS_12__value_typeIDv3_fjEENS_19__map_value_compareIS2_S3_30__C3DSubdivWelderKeyComparatorLb1EEENS_9allocatorIS3_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT_((uint64_t)a1, &v9, a2);
  v6 = *equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT;
  if (!*equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT)
  {
    v7 = (uint64_t **)equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_DWORD *)v6 + 12) = *(_DWORD *)(a3 + 16);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v6);
  }
  return v6;
}

float32x4_t **_ZNSt3__16__treeINS_12__value_typeIDv3_fjEENS_19__map_value_compareIS2_S3_30__C3DSubdivWelderKeyComparatorLb1EEENS_9allocatorIS3_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISE_EERKT_(uint64_t a1, float32x4_t ***a2, float32x4_t *a3)
{
  float32x4_t **result;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t **v7;
  float32x4_t v8;
  int32x4_t v9;
  uint32x4_t v10;
  int32x4_t v11;
  __int32 v12;
  int32x4_t v14;
  int32x2_t v15;
  BOOL v16;
  int v17;

  v5 = *(float32x4_t **)(a1 + 8);
  result = (float32x4_t **)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    while (1)
    {
      while (1)
      {
        v7 = (float32x4_t **)v4;
        v8 = v4[2];
        v9 = vceqq_f32(v6, v8);
        v10 = (uint32x4_t)v9;
        v10.i32[3] = v9.i32[2];
        if ((vminvq_u32(v10) & 0x80000000) != 0)
          goto LABEL_28;
        v11 = vcgtq_f32(v8, v6);
        if (!v11.i32[0])
          break;
LABEL_5:
        v4 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_28;
      }
      if (v9.i32[0])
      {
        if (v11.i32[1])
          goto LABEL_5;
        v12 = v9.i32[1];
        if (v9.i32[1] && v11.i32[2] != 0)
          goto LABEL_5;
        v14 = vcgtq_f32(v6, v8);
        v15 = vceqz_s32(vrev64_s32(*(int32x2_t *)v14.i8));
        if (v12)
          v16 = v14.i32[2] == 0;
        else
          v16 = 1;
        v17 = !v16;
        if ((v15.i8[4] & 1) != 0 && (v15.i8[0] & 1) != 0 && !v17)
          goto LABEL_28;
      }
      else if ((vmovn_s32(vcgtq_f32(v6, v8)).u8[0] & 1) == 0)
      {
        goto LABEL_28;
      }
      result = v7 + 1;
      v4 = v7[1];
      if (!v4)
        goto LABEL_28;
    }
  }
  v7 = result;
LABEL_28:
  *a2 = v7;
  return result;
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:nn180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

uint64_t OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::populateBaseLevel(OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase *a1, int *a2, uint64_t a3, char a4)
{
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v18;
  OpenSubdiv::v3_1_1::Far::TopologyRefiner *v19;

  if (OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::resizeComponentTopology((uint64_t)a1, a2)&& OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(a1, v7, v8, v9, v10, v11, v12, v13)&& OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTopology((uint64_t)a1, (uint64_t)a2)&& OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment(a1, a4 & 1, (void (*)(uint64_t, char *, uint64_t))OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::reportInvalidTopology, (uint64_t)a2,
                       v14,
                       v15,
                       v16,
                       v17)
    && OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignComponentTags((uint64_t)a1, (uint64_t)a2)&& OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(a1, v18)&& OpenSubdiv::v3_1_1::Far::TopologyRefinerFactory<OpenSubdiv::v3_1_1::Far::TopologyDescriptor>::assignFaceVaryingTopology((uint64_t)a1, (uint64_t)a2))
  {
    return OpenSubdiv::v3_1_1::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(a1, v19);
  }
  else
  {
    return 0;
  }
}

uint64_t *std::vector<C3DSubdivCPUFVarPrimvarInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_BYTE *)(v6 - 32) = *(_BYTE *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<C3DSubdivCPUFVarPrimvarInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<C3DSubdivCPUFVarPrimvarInfo>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<C3DSubdivCPUFVarPrimvarInfo>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void std::vector<C3DSubdivCPUPrimvarDataGroup>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL)
      abort();
    v10 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x1C71C71C71C71C7)
      v11 = 0x38E38E38E38E38ELL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<C3DSubdivCPUPrimvarDataGroup>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[72 * v8];
    v18 = &v12[72 * v11];
    v14 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<C3DSubdivCPUPrimvarDataGroup>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<C3DSubdivCPUPrimvarDataGroup>::~__split_buffer(&v15);
  }
}

void std::vector<C3DSubdivCPUPrimvarDataGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 9;
      v4 -= 72;
      std::allocator<C3DSubdivCPUPrimvarDataGroup>::construct[abi:nn180100]<C3DSubdivCPUPrimvarDataGroup,C3DSubdivCPUPrimvarDataGroup>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<C3DSubdivCPUPrimvarDataGroup>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(72 * a2);
}

__n128 std::allocator<C3DSubdivCPUPrimvarDataGroup>::construct[abi:nn180100]<C3DSubdivCPUPrimvarDataGroup,C3DSubdivCPUPrimvarDataGroup>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  result = *(__n128 *)(a3 + 48);
  *((__n128 *)a2 + 3) = result;
  a2[8] = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  return result;
}

void **std::__split_buffer<C3DSubdivCPUPrimvarDataGroup>::~__split_buffer(void **a1)
{
  std::__split_buffer<C3DSubdivCPUPrimvarDataGroup>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<C3DSubdivCPUPrimvarDataGroup>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<C3DSubdivCPUPrimvarDataGroup>::destroy[abi:nn180100](v4, (void **)(i - 72));
  }
}

uint64_t std::vector<C3DSubdivGPUFVarPrimvarData>::__push_back_slow_path<C3DSubdivGPUFVarPrimvarData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v8 = a1[2];
  v7 = a1 + 2;
  v9 = v8 - v2;
  if (v9 >> 5 > v4)
    v4 = v9 >> 5;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFC0)
    v10 = 0x3FFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v16[4] = v7;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>((uint64_t)v7, v10);
  v12 = &v11[64 * v3];
  v16[0] = v11;
  v16[1] = v12;
  v16[3] = &v11[64 * v13];
  *v12 = *(_BYTE *)a2;
  *((_DWORD *)v12 + 2) = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *((_OWORD *)v12 + 1) = *(_OWORD *)(a2 + 16);
  *((_QWORD *)v12 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_QWORD *)v12 + 6) = 0;
  *((_QWORD *)v12 + 7) = 0;
  *((_QWORD *)v12 + 5) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *((_QWORD *)v12 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v16[2] = v12 + 64;
  std::vector<C3DSubdivGPUFVarPrimvarData>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<C3DSubdivGPUFVarPrimvarData>::~__split_buffer(v16);
  return v14;
}

void std::vector<C3DSubdivGPUFVarPrimvarData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<C3DSubdivGPUFVarPrimvarData>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<C3DSubdivGPUFVarPrimvarData>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>,std::reverse_iterator<C3DSubdivGPUFVarPrimvarData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_BYTE *)(v8 - 64) = *(_BYTE *)(a3 + v7 - 64);
      *(_DWORD *)(v8 - 56) = *(_DWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void **std::__split_buffer<C3DSubdivGPUFVarPrimvarData>::~__split_buffer(void **a1)
{
  std::__split_buffer<C3DSubdivGPUFVarPrimvarData>::clear[abi:nn180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<C3DSubdivGPUFVarPrimvarData>::clear[abi:nn180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<C3DSubdivGPUFVarPrimvarData>::destroy[abi:nn180100](v4, (_QWORD *)(i - 64));
  }
}

void OUTLINED_FUNCTION_3_5(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 822, a4);
}

void OUTLINED_FUNCTION_4_12(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 961, a4);
}

void OUTLINED_FUNCTION_6_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 926, a4);
}

void OUTLINED_FUNCTION_7_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 789, a4);
}

void OUTLINED_FUNCTION_8_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 622, a4);
}

void OUTLINED_FUNCTION_9_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 617, a4);
}

void OUTLINED_FUNCTION_10_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 550, a4);
}

void OUTLINED_FUNCTION_11_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 547, a4);
}

void OUTLINED_FUNCTION_12_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 933, a4);
}

void OUTLINED_FUNCTION_15(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1116, a4);
}

void OUTLINED_FUNCTION_17_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 293, a4);
}

void OUTLINED_FUNCTION_19_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 407, a4);
}

void OUTLINED_FUNCTION_20_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 1115, a4);
}

void OUTLINED_FUNCTION_23(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 182, a4);
}

void OUTLINED_FUNCTION_27(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 462, a4);
}

void sub_1DCEAD86C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t __updateJointsTransformHandles(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  CFIndex v3;
  uint64_t v4;
  int v5;
  CFIndex v6;

  if (*(_QWORD *)(result + 104))
  {
    v1 = result;
    free(*(void **)(result + 96));
    *(_QWORD *)(v1 + 96) = malloc_type_malloc(4 * *(_QWORD *)(v1 + 104), 0x100004052888210uLL);
    result = C3DGetScene((_QWORD *)v1);
    if (*(uint64_t *)(v1 + 104) >= 1)
    {
      v2 = result;
      v3 = 0;
      do
      {
        result = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 88), v3);
        if (result && (v4 = result, result = C3DGetScene((_QWORD *)result), result == v2))
          v5 = *(_DWORD *)(v4 + 88);
        else
          v5 = -1;
        v6 = *(_QWORD *)(v1 + 104);
        *(_DWORD *)(*(_QWORD *)(v1 + 96) + 4 * v3++) = v5;
      }
      while (v3 < v6);
    }
  }
  return result;
}

__C3DMesh *_C3DGetEffectiveBaseMesh(uint64_t a1, uint64_t a2, __C3DGeometry *a3, int a4)
{
  uint64_t Morpher;

  Morpher = C3DNodeGetMorpher(a2);
  if (a4 != 2 && Morpher)
    return (__C3DMesh *)C3DMorpherGetMorphedMeshLegacy(Morpher);
  if (a3)
    return C3DGeometryGetRenderingMesh(a3);
  return 0;
}

__n128 C3DSkinnerCreate()
{
  uint64_t Instance;
  __n128 result;

  if (C3DSkinnerGetTypeID_onceToken != -1)
    dispatch_once(&C3DSkinnerGetTypeID_onceToken, &__block_literal_global_86);
  Instance = C3DTypeCreateInstance_(C3DSkinnerGetTypeID_typeID, 0xD0uLL);
  *(_BYTE *)(Instance + 195) = 0;
  *(_DWORD *)(Instance + 208) = 1;
  *(_WORD *)(Instance + 193) = 1;
  result = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
  *(__n128 *)(Instance + 160) = result;
  *(_OWORD *)(Instance + 176) = xmmword_1DD0076D0;
  return result;
}

uint64_t C3DSkinnerCreateWithSkin(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  C3DSkinnerCreate();
  v3 = v2;
  C3DSkinnerSetSkin(v2, a1);
  return v3;
}

__n128 C3DSkinnerSetSkin(uint64_t a1, void *cf)
{
  void *v3;
  const void *v5;
  __n128 *v6;
  __n128 result;

  v3 = *(void **)(a1 + 72);
  if (v3 != cf)
  {
    if (v3)
    {
      C3DRemoveSceneRef(v3, *(_QWORD *)(a1 + 48));
      v5 = *(const void **)(a1 + 72);
      if (v5)
        CFRelease(v5);
    }
    *(_QWORD *)(a1 + 72) = cf;
    if (cf)
    {
      CFRetain(cf);
      C3DAddSceneRef((uint64_t *)cf, *(_QWORD *)(a1 + 48));
    }
    v6 = (__n128 *)MEMORY[0x1E0C83FF0];
    *(_BYTE *)(a1 + 193) = 1;
    result = v6[3];
    *(__n128 *)(a1 + 160) = result;
    *(_OWORD *)(a1 + 176) = xmmword_1DD0076D0;
  }
  return result;
}

uint64_t C3DSkinnerCreateCopy(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  CFArrayRef Copy;

  v2 = *(void **)(a1 + 72);
  C3DSkinnerCreate();
  v4 = v3;
  C3DSkinnerSetSkin(v3, v2);
  C3DSkinnerSetSkeleton(v4, *(_QWORD **)(a1 + 80));
  Copy = CFArrayCreateCopy(0, *(CFArrayRef *)(a1 + 88));
  C3DSkinnerSetJoints(v4, Copy);
  CFRelease(Copy);
  *(_BYTE *)(v4 + 192) = *(_BYTE *)(a1 + 192);
  C3DEntityCopyTo(a1, (CFTypeRef *)v4);
  return v4;
}

__n128 C3DSkinnerSetSkeleton(uint64_t a1, _QWORD *cf)
{
  _QWORD *CommonAncestor;
  const __CFArray *v4;
  _QWORD *v5;
  CFTypeRef v6;
  __n128 *v7;
  __n128 result;

  CommonAncestor = cf;
  if (!cf)
  {
    v4 = *(const __CFArray **)(a1 + 88);
    if (v4)
      CommonAncestor = C3DNodeFindCommonAncestor(v4);
    else
      CommonAncestor = 0;
  }
  v5 = *(_QWORD **)(a1 + 80);
  if (v5 != CommonAncestor)
  {
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (CommonAncestor)
      v6 = CFRetain(CommonAncestor);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 80) = v6;
  }
  v7 = (__n128 *)MEMORY[0x1E0C83FF0];
  *(_BYTE *)(a1 + 193) = 1;
  result = v7[3];
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = xmmword_1DD0076D0;
  return result;
}

uint64_t C3DSkinnerGetJoints(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void C3DSkinnerSetJoints(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFIndex Count;
  _BOOL4 v6;
  CFIndex i;
  const void *ValueAtIndex;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;

  v3 = *(CFTypeRef *)(a1 + 88);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    if (cf)
    {
      *(_QWORD *)(a1 + 88) = CFRetain(cf);
      Count = CFArrayGetCount((CFArrayRef)cf);
      *(_QWORD *)(a1 + 104) = Count;
      v6 = Count > 0;
      if (Count < 1)
      {
        v6 = 0;
      }
      else
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
          C3DNodeSetIsJoint((uint64_t)ValueAtIndex, 1);
        }
      }
    }
    else
    {
      v6 = 0;
      Count = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 104) = 0;
    }
    v9 = *(void **)(a1 + 112);
    if (v9)
      free(v9);
    v10 = *(void **)(a1 + 120);
    if (v10)
      free(v10);
    v11 = *(void **)(a1 + 128);
    if (v11)
      free(v11);
    v12 = *(void **)(a1 + 144);
    if (v12)
      free(v12);
    if (Count)
    {
      *(_QWORD *)(a1 + 112) = C3DMalloc(Count << 6);
      *(_QWORD *)(a1 + 120) = C3DMalloc(Count << 6);
      *(_QWORD *)(a1 + 128) = C3DMalloc(48 * Count);
      v13 = C3DMalloc(32 * Count);
    }
    else
    {
      v13 = 0;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
    }
    *(_QWORD *)(a1 + 144) = v13;
    v14 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    if (v6)
    {
      v15 = 0;
      v16 = 0;
      v18 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
      do
      {
        C3DMatrix4x4MakeIdentity(*(_QWORD *)(a1 + 112) + v15);
        C3DMatrix4x4MakeIdentity(*(_QWORD *)(a1 + 120) + v15);
        v14 = v18;
        v17 = (_OWORD *)(*(_QWORD *)(a1 + 144) + v16);
        *v17 = v18;
        v17[1] = xmmword_1DD0076D0;
        v16 += 32;
        v15 += 64;
        --Count;
      }
      while (Count);
    }
    *(_BYTE *)(a1 + 193) = 1;
    *(_OWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 176) = xmmword_1DD0076D0;
    free(*(void **)(a1 + 96));
    *(_QWORD *)(a1 + 96) = 0;
  }
}

void C3DSkinnerSetOwnerNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSkinnerSetOwnerNode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 64) = a2;
}

BOOL C3DSkinnerTransposeSkeleton(uint64_t a1, _QWORD *a2)
{
  CFIndex Count;
  const __CFArray *MutableCopy;
  uint64_t v6;
  BOOL v7;
  _BOOL8 v8;
  NSObject *v9;
  __int16 v12[6];
  int v13;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
  MutableCopy = CFArrayCreateMutableCopy(0, Count, *(CFArrayRef *)(a1 + 88));
  v13 = 0;
  if ((C3DSkinnerFindJointsInClone(a1, MutableCopy, *(const void **)(a1 + 80), a2, &v13) & 1) != 0)
  {
    v6 = v13;
    v7 = CFArrayGetCount(MutableCopy) == v6;
    v8 = v7;
    if (v7)
    {
      C3DSkinnerSetJoints(a1, MutableCopy);
      C3DSkinnerSetSkeleton(a1, a2);
    }
    else
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v12[0] = 0;
        _os_log_impl(&dword_1DCCB8000, v9, OS_LOG_TYPE_DEFAULT, "Warning: C3DSkinnerTransposeSkeleton - unable to transpose every joints", (uint8_t *)v12, 2u);
      }
    }
    CFRelease(MutableCopy);
  }
  else
  {
    CFRelease(MutableCopy);
    return 0;
  }
  return v8;
}

uint64_t C3DSkinnerFindJointsInClone(uint64_t a1, __CFArray *a2, const void *a3, const void *a4, _DWORD *a5)
{
  CFIndex Count;
  _BOOL4 HasChildren;
  _BOOL4 v12;
  BOOL v13;
  uint64_t result;
  unsigned int ChildNodesCount;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ChildNodeAtIndex;
  uint64_t v20;

  if (!a3)
    return 0;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) >= 1)
  {
    Count = 0;
    do
    {
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), Count) == a3)
      {
        CFArraySetValueAtIndex(a2, Count, a4);
        ++*a5;
        Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
      }
      ++Count;
    }
    while (Count < CFArrayGetCount(*(CFArrayRef *)(a1 + 88)));
  }
  free(*(void **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  HasChildren = C3DNodeHasChildren((uint64_t)a3);
  v12 = C3DNodeHasChildren((uint64_t)a4);
  v13 = v12;
  result = HasChildren ^ v12 ^ 1u;
  if (HasChildren && v13)
  {
    ChildNodesCount = C3DNodeGetChildNodesCount((uint64_t)a3);
    if (ChildNodesCount == C3DNodeGetChildNodesCount((uint64_t)a4))
    {
      v16 = ChildNodesCount;
      if (ChildNodesCount)
      {
        v17 = 0;
        v18 = v16 - 1;
        do
        {
          ChildNodeAtIndex = C3DNodeGetChildNodeAtIndex((uint64_t)a3, v17);
          v20 = C3DNodeGetChildNodeAtIndex((uint64_t)a4, v17);
          result = C3DSkinnerFindJointsInClone(a1, a2, ChildNodeAtIndex, v20, a5);
          if (!(_DWORD)result)
            break;
        }
        while (v18 != v17++);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFIndex C3DSkinnerSkeletonNeedsRetargeting(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  const void *ValueAtIndex;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
  if (result)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), 0);
    return ValueAtIndex != (const void *)a2 && !C3DNodeIsAncestor((uint64_t)ValueAtIndex, a2);
  }
  return result;
}

BOOL C3DSkinnerTransposeSkeletonUsingNodeNames(uint64_t a1, _QWORD *a2)
{
  uint64_t Count;
  CFMutableArrayRef Mutable;
  BOOL v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t Name;
  uint64_t v10;
  const void *NodeWithName;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
  Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  if (Count < 1)
  {
    v6 = 1;
LABEL_8:
    C3DSkinnerSetJoints(a1, Mutable);
    C3DSkinnerSetSkeleton(a1, a2);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v7);
      Name = C3DNodeGetName((uint64_t)ValueAtIndex);
      if (!Name)
      {
        v12 = scn_default_log();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          goto LABEL_14;
        LOWORD(v18) = 0;
        v13 = "Warning: Cannot update the joints using node names: unammed joint found";
        v14 = v12;
        v15 = 2;
        goto LABEL_13;
      }
      v10 = Name;
      NodeWithName = (const void *)C3DNodeGetNodeWithName((uint64_t)a2, Name);
      if (!NodeWithName)
        break;
      CFArrayAppendValue(Mutable, NodeWithName);
      v6 = ++v7 >= Count;
      if (Count == v7)
        goto LABEL_8;
    }
    v16 = scn_default_log();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    v18 = 138412290;
    v19 = v10;
    v13 = "Warning: Cannot update the joints using node names: can't find node named %@";
    v14 = v16;
    v15 = 12;
LABEL_13:
    _os_log_impl(&dword_1DCCB8000, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v18, v15);
  }
LABEL_14:
  CFRelease(Mutable);
  return v6;
}

BOOL C3DSkinnerHasOnlyOneJoint(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) == 1;
}

void _C3DSkinnerUpdateBoundingBox(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t Geometry;
  __C3DGeometry *v5;
  const __CFArray *v6;
  CFIndex Count;
  NSObject *v8;
  int JointsCount;
  _QWORD *VertexWeightsPointers;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  float32x4_t *DefaultShapeMatrix;
  float32x4_t *InverseBindMatricesPtr;
  NSObject *v16;
  __C3DMesh *v17;
  const void *PositionSource;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  BOOL v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  __int16 *v35;
  unsigned __int16 v36;
  int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __C3DMesh *RenderingMesh;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  NSObject *v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t Content;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[4];
  uint8_t buf[16];
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 72);
  if (v2)
  {
    Geometry = C3DNodeGetGeometry(a2);
    if (Geometry)
    {
      v5 = (__C3DGeometry *)Geometry;
      v6 = *(const __CFArray **)(a1 + 88);
      if (v6)
        Count = CFArrayGetCount(v6);
      else
        Count = 0;
      JointsCount = C3DSkinGetJointsCount((uint64_t)v2);
      if (Count && Count == JointsCount)
      {
        v74 = 0;
        v75 = 0;
        v73 = 0;
        VertexWeightsPointers = C3DSkinGetVertexWeightsPointers(v2, &v75, &v74, &v73);
        v11 = MEMORY[0x1E0C80A78](VertexWeightsPointers);
        v12 = (float32x4_t *)(&v69 - 2 * Count);
        MEMORY[0x1E0C80A78](v11);
        v13 = v12;
        if (Count >= 1)
        {
          memset_pattern16(&v69 - 2 * Count, &xmmword_1DD02AD30, 16 * Count);
          memset_pattern16(&v69 - 2 * Count, &xmmword_1DD02AD40, 16 * Count);
        }
        DefaultShapeMatrix = (float32x4_t *)C3DSkinGetDefaultShapeMatrix((uint64_t)v2);
        InverseBindMatricesPtr = (float32x4_t *)C3DSkinGetInverseBindMatricesPtr((uint64_t)v2);
        v69 = (uint64_t)&v69;
        if (Count == 1)
        {
          v72.i32[2] = 0;
          v72.i64[0] = 0;
          v71.i32[2] = 0;
          v71.i64[0] = 0;
          if (C3DGeometryUsesDeformerBasedDynamicMesh((uint64_t)v5))
          {
            C3DGetBoundingBox(v5, 0, (uint64_t)&v72, (uint64_t)&v71);
          }
          else
          {
            RenderingMesh = C3DGeometryGetRenderingMesh(v5);
            C3DMeshGetBoundingBox((uint64_t)RenderingMesh, &v72, &v71);
          }
          v42 = 0;
          v43 = vaddq_f32(v72, v71);
          v44.i64[0] = 0x3F0000003F000000;
          v44.i64[1] = 0x3F0000003F000000;
          v45 = vmulq_f32(vsubq_f32(v71, v72), v44);
          v46 = *InverseBindMatricesPtr;
          v47 = InverseBindMatricesPtr[1];
          v48 = InverseBindMatricesPtr[2];
          v49 = InverseBindMatricesPtr[3];
          v50 = DefaultShapeMatrix[1];
          v51 = DefaultShapeMatrix[2];
          v52 = DefaultShapeMatrix[3];
          v76[0] = *DefaultShapeMatrix;
          v76[1] = v50;
          v76[2] = v51;
          v76[3] = v52;
          *(_OWORD *)buf = 0u;
          v78 = 0u;
          v79 = 0u;
          v80 = 0u;
          do
          {
            *(float32x4_t *)&buf[v42 * 16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(v76[v42])), v47, *(float32x2_t *)&v76[v42], 1), v48, (float32x4_t)v76[v42], 2), v49, (float32x4_t)v76[v42], 3);
            ++v42;
          }
          while (v42 != 4);
          v53.i64[0] = 0x3F0000003F000000;
          v53.i64[1] = 0x3F0000003F000000;
          v54 = vmulq_f32(v43, v53);
          v55 = v45;
          v55.i32[3] = 0;
          v56 = vaddq_f32(v80, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v78, *(float32x2_t *)v54.f32, 1), *(float32x4_t *)buf, v54.f32[0]), v79, v54, 2));
          v56.i32[3] = 1.0;
          v57 = (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v45.f32, 1), (int32x4_t)v55);
          v58 = (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v55, (int32x4_t)v55), (int32x4_t)v55);
          v55.i32[1] = v45.i32[0];
          v55.i32[2] = v45.i32[0];
          v59 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(v55, *(float32x4_t *)buf)), vabsq_f32(vmulq_f32(v57, v78))), vabsq_f32(vmulq_f32(v58, v79)));
          *v12 = vsubq_f32(v56, v59);
          *v12 = vaddq_f32(v59, v56);
        }
        else
        {
          v17 = C3DGeometryGetRenderingMesh(v5);
          PositionSource = C3DMeshGetPositionSource((uint64_t)v17, 0);
          Content = C3DMeshSourceGetContent((uint64_t)PositionSource);
          v20 = BYTE5(v19);
          if (BYTE5(v19))
          {
            v21 = v19;
            if ((int)v19 - 1 < C3DMeshSourceGetMTLVertexFormat((uint64_t)v2))
            {
              v25 = 0;
              do
              {
                *(double *)v26.i64 = C3DConvertFloatingTypeToFloat4(BYTE4(v21), (float *)(Content + (v20 * v25)), v22, v23.f32[0], v24.f32[0]);
                v23 = *DefaultShapeMatrix;
                v24 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(DefaultShapeMatrix[1], *(float32x2_t *)v26.f32, 1), *DefaultShapeMatrix, v26.f32[0]), DefaultShapeMatrix[2], v26, 2);
                v22 = vaddq_f32(DefaultShapeMatrix[3], v24);
                if (v75)
                  v27 = Count < 2;
                else
                  v27 = 1;
                if (v27)
                {
                  v24 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(InverseBindMatricesPtr[1], *(float32x2_t *)v22.f32, 1), *InverseBindMatricesPtr, v22.f32[0]), InverseBindMatricesPtr[2], v22, 2);
                  v28 = vaddq_f32(InverseBindMatricesPtr[3], v24);
                  v29 = *v12;
                  v28.i32[3] = 0;
                  v29.i32[3] = 0;
                  *v12 = vminnmq_f32(v28, v29);
                  v23 = *v12;
                  v23.i32[3] = 0;
                  v22 = vmaxnmq_f32(v28, v23);
                  *v12 = v22;
                  ++v25;
                }
                else
                {
                  v30 = *(_QWORD *)(v75 + 8 * v25++);
                  v31 = *(_QWORD *)(v75 + 8 * v25);
                  v27 = v31 <= v30;
                  v32 = v31 - v30;
                  if (!v27)
                  {
                    v33 = v73;
                    v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0);
                    v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2);
                    v34 = (float *)(v73 + 4 * v30);
                    v35 = (__int16 *)(v74 + 2 * v30);
                    do
                    {
                      v37 = *v35++;
                      v36 = v37;
                      if ((v37 & 0x80000000) == 0 && (!v33 || *v34 > 0.0) && Count > v36)
                      {
                        v38 = vaddq_f32(InverseBindMatricesPtr[4 * (unint64_t)v36 + 3], vmlaq_f32(vmlaq_f32(vmulq_lane_f32(InverseBindMatricesPtr[4 * (unint64_t)v36 + 1], *(float32x2_t *)v22.f32, 1), InverseBindMatricesPtr[4 * (unint64_t)v36], v23), InverseBindMatricesPtr[4 * (unint64_t)v36 + 2], v24));
                        v39 = v12[v36];
                        v38.i32[3] = 0;
                        v39.i32[3] = 0;
                        v12[v36] = vminnmq_f32(v38, v39);
                        v40 = v12[v36];
                        v40.i32[3] = 0;
                        v12[v36] = vmaxnmq_f32(v38, v40);
                      }
                      ++v34;
                      --v32;
                    }
                    while (v32);
                  }
                }
              }
              while (v25 != v21);
            }
          }
          else
          {
            v60 = scn_default_log();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              _C3DSkinnerUpdateBoundingBox_cold_1();
          }
        }
        if (Count >= 1)
        {
          v61 = 0;
          v62.i64[0] = 0x3F0000003F000000;
          v62.i64[1] = 0x3F0000003F000000;
          do
          {
            v63 = (float32x4_t *)(*(_QWORD *)(a1 + 144) + v61);
            v64 = *v12++;
            v65 = v64;
            v66 = *v13++;
            v67 = vmulq_f32(vaddq_f32(v65, v66), v62);
            v68 = vmulq_f32(vsubq_f32(v66, v65), v62);
            v67.i32[3] = 1.0;
            v68.i32[3] = 0;
            *v63 = v67;
            v63[1] = v68;
            v61 += 32;
            --Count;
          }
          while (Count);
        }
        *(_BYTE *)(a1 + 193) = 0;
      }
      else if ((_C3DSkinnerUpdateBoundingBox_done & 1) == 0)
      {
        _C3DSkinnerUpdateBoundingBox_done = 1;
        v16 = scn_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          _C3DSkinnerUpdateBoundingBox_cold_2();
      }
    }
    else
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_DEFAULT, "Warning: _C3DSkinnerUpdateBoundingBox - skinned node has no geometry", buf, 2u);
      }
    }
  }
}

uint64_t __skin_PNx4_1influence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, unsigned __int8 a12, uint64_t a13, int a14, char a15, unsigned __int8 a16, uint64_t a17, int a18, char a19, unsigned __int8 a20)
{
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t i;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  const float *v36;
  const float *v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  float32x2_t v47;
  int32x4_t v48;
  float32x4_t v49;
  float *v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float *v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4x3_t v76;
  float32x4x3_t v77;
  float32x4x3_t v78;

  v75 = *MEMORY[0x1E0C80C00];
  v27 = a1 + 3;
  if (a1 >= 0)
    v27 = a1;
  if (a1 < 4)
  {
    v28 = 0;
  }
  else
  {
    v28 = 0;
    v29 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    v30 = a2;
    do
    {
      for (i = 0; i != 32; i += 8)
      {
        v32 = (_OWORD *)&v59.f32[2 * i];
        v33 = (_OWORD *)(a5 + ((uint64_t)*(__int16 *)(a4 + 2 * *(_QWORD *)(v30 + i)) << 6));
        v34 = v33[1];
        *v32 = *v33;
        v32[1] = v34;
        v35 = v33[3];
        v32[2] = v33[2];
        v32[3] = v35;
      }
      v36 = (const float *)(a9 + v28 * a12);
      v78 = vld3q_f32(v36);
      v37 = (const float *)(a17 + v28 * a20);
      v76 = vld3q_f32(v37);
      v38 = (int32x4_t)vaddq_f32(v62, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v59, v78.val[0].f32[0]), v60, v78.val[1].f32[0]), v61, v78.val[2].f32[0]));
      v39 = (int32x4_t)vaddq_f32(v66, vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v63, *(float32x2_t *)v78.val[0].f32, 1), v64, *(float32x2_t *)v78.val[1].f32, 1), v65, *(float32x2_t *)v78.val[2].f32, 1));
      v40 = (int32x4_t)vaddq_f32(v70, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v67, v78.val[0], 2), v68, v78.val[1], 2), v69, v78.val[2], 2));
      v41 = (int32x4_t)vaddq_f32(v74, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v71, v78.val[0], 3), v72, v78.val[1], 3), v73, v78.val[2], 3));
      v42 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v59, v76.val[0].f32[0]), v60, v76.val[1].f32[0]), v61, v76.val[2].f32[0]), (float32x4_t)0, v62);
      v78.val[0] = vmulq_f32(v42, v42);
      *(float32x2_t *)v78.val[0].f32 = vadd_f32(*(float32x2_t *)v78.val[0].f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78.val[0], (int8x16_t)v78.val[0], 8uLL));
      v78.val[0].i32[0] = vadd_f32(*(float32x2_t *)v78.val[0].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.val[0].f32, 1)).u32[0];
      *(float32x2_t *)v78.val[1].f32 = vrsqrte_f32((float32x2_t)v78.val[0].u32[0]);
      v43 = (int32x4_t)vmulq_n_f32(v42, vmul_f32(*(float32x2_t *)v78.val[1].f32, vrsqrts_f32((float32x2_t)v78.val[0].u32[0], vmul_f32(*(float32x2_t *)v78.val[1].f32, *(float32x2_t *)v78.val[1].f32))).f32[0]);
      v78.val[0] = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v63, *(float32x2_t *)v76.val[0].f32, 1), v64, *(float32x2_t *)v76.val[1].f32, 1), v65, *(float32x2_t *)v76.val[2].f32, 1), (float32x4_t)0, v66);
      v78.val[1] = vmulq_f32(v78.val[0], v78.val[0]);
      *(float32x2_t *)v78.val[1].f32 = vadd_f32(*(float32x2_t *)v78.val[1].f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78.val[1], (int8x16_t)v78.val[1], 8uLL));
      v78.val[1].i32[0] = vadd_f32(*(float32x2_t *)v78.val[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.val[1].f32, 1)).u32[0];
      *(float32x2_t *)v78.val[2].f32 = vrsqrte_f32((float32x2_t)v78.val[1].u32[0]);
      v44 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v67, v76.val[0], 2), v68, v76.val[1], 2), v69, v76.val[2], 2), (float32x4_t)0, v70);
      v45 = (int8x16_t)vmulq_f32(v44, v44);
      *(float32x2_t *)v45.i8 = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v46 = (int32x4_t)vmulq_n_f32(v78.val[0], vmul_f32(*(float32x2_t *)v78.val[2].f32, vrsqrts_f32((float32x2_t)v78.val[1].u32[0], vmul_f32(*(float32x2_t *)v78.val[2].f32, *(float32x2_t *)v78.val[2].f32))).f32[0]);
      v45.i32[0] = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1)).u32[0];
      v47 = vrsqrte_f32((float32x2_t)v45.u32[0]);
      v48 = (int32x4_t)vmulq_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v47, v47))).f32[0]);
      v49 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v71, v76.val[0], 3), v72, v76.val[1], 3), v73, v76.val[2], 3), (float32x4_t)0, v74);
      v76.val[0] = vmulq_f32(v49, v49);
      *(float32x2_t *)v76.val[0].f32 = vadd_f32(*(float32x2_t *)v76.val[0].f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v76.val[0], (int8x16_t)v76.val[0], 8uLL));
      v76.val[0].i32[0] = vadd_f32(*(float32x2_t *)v76.val[0].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v76.val[0].f32, 1)).u32[0];
      *(float32x2_t *)v76.val[1].f32 = vrsqrte_f32((float32x2_t)v76.val[0].u32[0]);
      v50 = (float *)(a6 + v28 * BYTE5(a7));
      v76.val[2] = (float32x4_t)vtrn1q_s32(v38, v40);
      v51 = vtrn2q_s32(v38, v40);
      v52 = vtrn1q_s32(v39, v41);
      v77.val[0] = (float32x4_t)vzip1q_s32((int32x4_t)v76.val[2], v52);
      v77.val[2] = (float32x4_t)vzip2q_s32((int32x4_t)v76.val[2], v52);
      v77.val[1] = (float32x4_t)vzip1q_s32(v51, vtrn2q_s32(v39, v41));
      vst3q_f32(v50, v77);
      v53 = (int32x4_t)vmulq_n_f32(v49, vmul_f32(*(float32x2_t *)v76.val[1].f32, vrsqrts_f32((float32x2_t)v76.val[0].u32[0], vmul_f32(*(float32x2_t *)v76.val[1].f32, *(float32x2_t *)v76.val[1].f32))).f32[0]);
      v54 = (float *)(a13 + v28 * a16);
      v55 = vtrn1q_s32(v43, v48);
      v76.val[1] = (float32x4_t)vtrn1q_s32(v46, v53);
      v76.val[2] = (float32x4_t)vzip1q_s32(v55, (int32x4_t)v76.val[1]);
      v56 = vzip2q_s32(v55, (int32x4_t)v76.val[1]);
      v57 = vzip1q_s32(vtrn2q_s32(v43, v48), vtrn2q_s32(v46, v53));
      vst3q_f32(v54, *(float32x4x3_t *)((char *)&v76 + 32));
      v28 += 4;
      v30 += 32;
    }
    while (v28 < v29);
  }
  return __skinCPULike_PN(v28, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t __skinCPULike_PN(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, unsigned __int8 a12, uint64_t a13, int a14, char a15, unsigned __int8 a16, uint64_t a17, int a18, char a19, unsigned __int8 a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float *v29;
  __int16 *v30;
  float v31;
  uint64_t v32;
  float32x4_t *v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x2_t v46;
  float32x4_t v47;
  uint64_t v48;

  if (result < a2)
  {
    v20 = BYTE5(a8);
    v21 = *(_QWORD *)(a3 + 8 * result);
    do
    {
      v22 = result + 1;
      v23 = *(_QWORD *)(a3 + 8 * (result + 1));
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      v28 = v23 - v21;
      if (v23 > v21)
      {
        v29 = (float *)(a4 + 4 * v21);
        v30 = (__int16 *)(a5 + 2 * v21);
        do
        {
          if (a4)
            v31 = *v29;
          else
            v31 = 1.0;
          v32 = *v30++;
          v33 = (float32x4_t *)(a6 + (v32 << 6));
          v24 = vaddq_f32(v24, vmulq_n_f32(*v33, v31));
          v25 = vaddq_f32(v25, vmulq_n_f32(v33[1], v31));
          v26 = vaddq_f32(v26, vmulq_n_f32(v33[2], v31));
          v27 = vaddq_f32(v27, vmulq_n_f32(v33[3], v31));
          ++v29;
          --v28;
        }
        while (v28);
      }
      v34 = (float *)(a9 + result * a12);
      v35 = *v34;
      v36 = v34[1];
      v37 = v34[2];
      v38 = (float *)(a17 + result * a20);
      v39 = *v38;
      v40 = v38[1];
      v41 = v38[2];
      v42 = vaddq_f32(v27, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v24, v35), v25, v36), v26, v37));
      v43 = a7 + result * v20;
      *(_QWORD *)v43 = v42.i64[0];
      *(_DWORD *)(v43 + 8) = v42.i32[2];
      v44 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v24, v39), v25, v40), v26, v41), (float32x4_t)0, v27);
      v45 = (int8x16_t)vmulq_f32(v44, v44);
      *(float32x2_t *)v45.i8 = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v45.i32[0] = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1)).u32[0];
      v46 = vrsqrte_f32((float32x2_t)v45.u32[0]);
      v47 = vmulq_n_f32(v44, vmul_f32(v46, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v46, v46))).f32[0]);
      v48 = a13 + result * a16;
      *(_QWORD *)v48 = v47.i64[0];
      *(_DWORD *)(v48 + 8) = v47.i32[2];
      v21 = v23;
      ++result;
    }
    while (v22 != a2);
  }
  return result;
}

uint64_t __skin_PNx4_1bone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int32x4_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, unsigned __int8 a12, uint64_t a13, int a14, char a15, unsigned __int8 a16, uint64_t a17, int a18, char a19, unsigned __int8 a20)
{
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float *v39;
  float *v40;
  const float *v41;
  const float *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4x3_t v54;
  float32x4x3_t v55;
  float32x4x3_t v56;

  v25 = a1 + 3;
  if (a1 >= 0)
    v25 = a1;
  if (a1 < 4)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    v27 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    v28 = a6[1];
    v29 = a6[2];
    v30 = vdupq_laneq_s32(v28, 3);
    v31 = (float32x4_t)vzip1q_s32(*a6, v28);
    v31.i32[2] = v29.i32[0];
    v32 = (float32x4_t)vzip2q_s32(vzip1q_s32(*a6, v29), vdupq_lane_s32(*(int32x2_t *)v28.i8, 1));
    v33 = (float32x4_t)vzip2q_s32(*a6, v28);
    v33.i32[2] = a6[2].i64[1];
    v34 = (float32x4_t)vzip2q_s32(vzip2q_s32(*a6, v29), v30);
    v39 = (float *)a13;
    v40 = (float *)a7;
    v41 = (const float *)a17;
    v42 = (const float *)a9;
    do
    {
      v54 = vld3q_f32(v42);
      v35 = 4 * a12;
      v42 = (const float *)((char *)v42 + v35);
      v55 = vld3q_f32(v41);
      v36 = 4 * a20;
      v41 = (const float *)((char *)v41 + v36);
      v43 = (int32x4_t)vaddq_f32(v34, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, v54.val[0].f32[0]), v32, v54.val[1].f32[0]), v33, v54.val[2].f32[0]));
      v44 = (int32x4_t)vaddq_f32(v34, vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v31, *(float32x2_t *)v54.val[0].f32, 1), v32, *(float32x2_t *)v54.val[1].f32, 1), v33, *(float32x2_t *)v54.val[2].f32, 1));
      v45 = (int32x4_t)vaddq_f32(v34, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v31, v54.val[0], 2), v32, v54.val[1], 2), v33, v54.val[2], 2));
      v54.val[1] = vaddq_f32(v34, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v31, v54.val[0], 3), v32, v54.val[1], 3), v33, v54.val[2], 3));
      v54.val[0] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v31, v55.val[0].f32[0]), v32, v55.val[1].f32[0]), v33, v55.val[2].f32[0]), (float32x4_t)0, v34);
      v54.val[2] = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v31, *(float32x2_t *)v55.val[0].f32, 1), v32, *(float32x2_t *)v55.val[1].f32, 1), v33, *(float32x2_t *)v55.val[2].f32, 1), (float32x4_t)0, v34);
      v46 = (int32x4_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v31, v55.val[0], 2), v32, v55.val[1], 2), v33, v55.val[2], 2), (float32x4_t)0, v34);
      v47 = (int32x4_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v31, v55.val[0], 3), v32, v55.val[1], 3), v33, v55.val[2], 3), (float32x4_t)0, v34);
      v55.val[0] = (float32x4_t)vzip1q_s32((int32x4_t)v54.val[0], v46);
      v55.val[1] = (float32x4_t)vzip1q_s32((int32x4_t)v54.val[2], v47);
      v55.val[2] = (float32x4_t)vzip1q_s32((int32x4_t)v55.val[0], (int32x4_t)v55.val[1]);
      v55.val[0] = (float32x4_t)vzip2q_s32((int32x4_t)v55.val[0], (int32x4_t)v55.val[1]);
      v54.val[0] = (float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v54.val[0], v46), vzip2q_s32((int32x4_t)v54.val[2], v47));
      v54.val[2] = vaddq_f32(vmulq_f32(v54.val[0], v54.val[0]), vaddq_f32(vmulq_f32(v55.val[2], v55.val[2]), vmulq_f32(v55.val[0], v55.val[0])));
      v55.val[1] = (float32x4_t)vzip1q_s32(v43, v45);
      v48 = vzip1q_s32(v44, (int32x4_t)v54.val[1]);
      v56.val[0] = (float32x4_t)vzip1q_s32((int32x4_t)v55.val[1], v48);
      v56.val[1] = (float32x4_t)vzip2q_s32((int32x4_t)v55.val[1], v48);
      v49 = vzip2q_s32(v43, v45);
      v50 = vrsqrteq_f32(v54.val[2]);
      v56.val[2] = (float32x4_t)vzip1q_s32(v49, vzip2q_s32(v44, (int32x4_t)v54.val[1]));
      vst3q_f32(v40, v56);
      v37 = 4 * BYTE5(a8);
      v40 = (float *)((char *)v40 + v37);
      v51 = vmulq_f32(v50, vrsqrtsq_f32(v54.val[2], vmulq_f32(v50, v50)));
      v55.val[1] = vmulq_f32(v51, v55.val[2]);
      v55.val[2] = vmulq_f32(v51, v55.val[0]);
      v52 = vmulq_f32(v51, v54.val[0]);
      vst3q_f32(v39, *(float32x4x3_t *)((char *)&v55 + 16));
      v38 = 4 * a16;
      v39 = (float *)((char *)v39 + v38);
      v26 += 4;
    }
    while (v26 < v27);
  }
  return __skinCPULike_PN(v26, a1, a2, a3, a4, a5, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
}

uint64_t __skin_PNx4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, unsigned __int8 a14, uint64_t a15, int a16, char a17, unsigned __int8 a18, uint64_t a19, int a20,char a21,unsigned __int8 a22,uint64_t a23)
{
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  __int16 *v37;
  float *v38;
  int v39;
  uint64_t v40;
  float v41;
  float32x4_t *v42;
  int32x4_t *v43;
  const float *v44;
  const float *v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float *v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float *v75;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  uint64_t v90;
  float32x4x3_t v91;
  float32x4x3_t v92;
  float32x4x3_t v93;

  v90 = *MEMORY[0x1E0C80C00];
  v23 = a2 + 3;
  if (a2 >= 0)
    v23 = a2;
  v24 = 0;
  if (a2 >= 4)
  {
    v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26 = 0;
      v27 = v24 + a1;
      do
      {
        v28 = (uint64_t *)(a3 + 8 * (v26 + v27));
        v29 = *v28;
        if (a4)
          v30 = *(float *)(a4 + 4 * v29);
        else
          v30 = 1.0;
        v31 = v28[1];
        v32 = (float32x4_t *)(a7 + 48 * *(__int16 *)(a5 + 2 * v29));
        v33 = vmulq_n_f32(*v32, v30);
        v34 = vmulq_n_f32(v32[1], v30);
        v35 = vmulq_n_f32(v32[2], v30);
        if (v29 + 1 < v31)
        {
          v36 = ~v29 + v31;
          v37 = (__int16 *)(a5 + 2 + 2 * v29);
          v38 = (float *)(a4 + 4 + 4 * v29);
          do
          {
            v40 = *v37++;
            v39 = v40;
            if (v40 < a23)
            {
              if (a4)
                v41 = *v38;
              else
                v41 = 1.0;
              v42 = (float32x4_t *)(a7 + 48 * v39);
              v33 = vmlaq_n_f32(v33, *v42, v41);
              v34 = vmlaq_n_f32(v34, v42[1], v41);
              v35 = vmlaq_n_f32(v35, v42[2], v41);
            }
            ++v38;
            --v36;
          }
          while (v36);
        }
        v43 = &v78 + 3 * v26;
        *v43 = (int32x4_t)v33;
        v43[1] = (int32x4_t)v34;
        v43[2] = (int32x4_t)v35;
        ++v26;
      }
      while (v26 != 4);
      v44 = (const float *)(a11 + v27 * a14);
      v92 = vld3q_f32(v44);
      v45 = (const float *)(a19 + v27 * a22);
      v91 = vld3q_f32(v45);
      v46 = (float32x4_t)vzip1q_s32(vzip1q_s32(v78, v80), v79);
      v47 = (float32x4_t)vtrn2q_s32(v78, v79);
      v47.i32[2] = v80.i32[1];
      v48 = (float32x4_t)vzip1q_s32(vzip2q_s32(v78, v80), vdupq_laneq_s32(v79, 2));
      v49 = (float32x4_t)vuzp2q_s32(vuzp2q_s32(v78, v79), v78);
      v49.i32[2] = v80.i32[3];
      v50 = (int32x4_t)vaddq_f32(v49, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v46, v92.val[0].f32[0]), v47, v92.val[1].f32[0]), v48, v92.val[2].f32[0]));
      v51 = (float32x4_t)vzip1q_s32(vzip1q_s32(v81, v83), v82);
      v52 = (float32x4_t)vtrn2q_s32(v81, v82);
      v52.i32[2] = v83.i32[1];
      v53 = (float32x4_t)vzip1q_s32(vzip2q_s32(v81, v83), vdupq_laneq_s32(v82, 2));
      v54 = (float32x4_t)vuzp2q_s32(vuzp2q_s32(v81, v82), v81);
      v54.i32[2] = v83.i32[3];
      v55 = (int32x4_t)vaddq_f32(v54, vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v51, *(float32x2_t *)v92.val[0].f32, 1), v52, *(float32x2_t *)v92.val[1].f32, 1), v53, *(float32x2_t *)v92.val[2].f32, 1));
      v56 = (float32x4_t)vzip1q_s32(vzip1q_s32(v84, v86), v85);
      v57 = (float32x4_t)vtrn2q_s32(v84, v85);
      v57.i32[2] = v86.i32[1];
      v58 = (float32x4_t)vuzp2q_s32(vuzp2q_s32(v84, v85), v84);
      v58.i32[2] = v86.i32[3];
      v59 = (float32x4_t)vzip1q_s32(vzip2q_s32(v84, v86), vdupq_laneq_s32(v85, 2));
      v60 = (int32x4_t)vaddq_f32(v58, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v56, v92.val[0], 2), v57, v92.val[1], 2), v59, v92.val[2], 2));
      v61 = (float32x4_t)vtrn2q_s32(v87, v88);
      v61.i32[2] = v89.i32[1];
      v62 = (float32x4_t)vzip1q_s32(vzip1q_s32(v87, v89), v88);
      v63 = (float32x4_t)vzip1q_s32(vzip2q_s32(v87, v89), vdupq_laneq_s32(v88, 2));
      v64 = (float32x4_t)vuzp2q_s32(vuzp2q_s32(v87, v88), v87);
      v64.i32[2] = v89.i32[3];
      v92.val[0] = vaddq_f32(v64, vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v62, v92.val[0], 3), v61, v92.val[1], 3), v63, v92.val[2], 3));
      v92.val[1] = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v46, v91.val[0].f32[0]), v47, v91.val[1].f32[0]), v48, v91.val[2].f32[0]), (float32x4_t)0, v49);
      v65 = (int32x4_t)vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v51, *(float32x2_t *)v91.val[0].f32, 1), v52, *(float32x2_t *)v91.val[1].f32, 1), v53, *(float32x2_t *)v91.val[2].f32, 1), (float32x4_t)0, v54);
      v92.val[2] = vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v56, v91.val[0], 2), v57, v91.val[1], 2), v59, v91.val[2], 2), (float32x4_t)0, v58);
      v66 = (int32x4_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v62, v91.val[0], 3), v61, v91.val[1], 3), v63, v91.val[2], 3), (float32x4_t)0, v64);
      v91.val[0] = (float32x4_t)vzip1q_s32((int32x4_t)v92.val[1], (int32x4_t)v92.val[2]);
      v91.val[1] = (float32x4_t)vzip2q_s32((int32x4_t)v92.val[1], (int32x4_t)v92.val[2]);
      v91.val[2] = (float32x4_t)vzip1q_s32(v65, v66);
      v92.val[1] = (float32x4_t)vzip1q_s32((int32x4_t)v91.val[0], (int32x4_t)v91.val[2]);
      v91.val[0] = (float32x4_t)vzip2q_s32((int32x4_t)v91.val[0], (int32x4_t)v91.val[2]);
      v91.val[1] = (float32x4_t)vzip1q_s32((int32x4_t)v91.val[1], vzip2q_s32(v65, v66));
      v91.val[2] = vaddq_f32(vmulq_f32(v91.val[1], v91.val[1]), vaddq_f32(vmulq_f32(v92.val[1], v92.val[1]), vmulq_f32(v91.val[0], v91.val[0])));
      v67 = vrsqrteq_f32(v91.val[2]);
      v68 = (float *)(a9 + v27 * BYTE5(a10));
      v69 = vzip1q_s32(v50, v60);
      v70 = vzip2q_s32(v50, v60);
      v71 = vzip1q_s32(v55, (int32x4_t)v92.val[0]);
      v93.val[0] = (float32x4_t)vzip1q_s32(v69, v71);
      v93.val[1] = (float32x4_t)vzip2q_s32(v69, v71);
      v93.val[2] = (float32x4_t)vzip1q_s32(v70, vzip2q_s32(v55, (int32x4_t)v92.val[0]));
      vst3q_f32(v68, v93);
      v72 = vmulq_f32(v67, vrsqrtsq_f32(v91.val[2], vmulq_f32(v67, v67)));
      v91.val[2] = vmulq_f32(v72, v92.val[1]);
      v73 = vmulq_f32(v72, v91.val[0]);
      v74 = vmulq_f32(v72, v91.val[1]);
      v75 = (float *)(a15 + v27 * a18);
      vst3q_f32(v75, *(float32x4x3_t *)((char *)&v91 + 32));
      v24 += 4;
    }
    while (v24 < v25);
  }
  return __skinCPULike_PN(v24 + a1, a2 + a1, a3, a4, a5, a6, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
           a22);
}

void __skin_generic_1bone(uint64_t a1, double a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  float *v5;
  float *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  BOOL v15;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  v4 = *(_QWORD *)a1;
  if (*(uint64_t *)a1 >= 1)
  {
    v5 = *(float **)(a1 + 64);
    v6 = *(float **)(a1 + 96);
    v7 = *(_QWORD *)(a1 + 112);
    v8 = *(float **)(a1 + 128);
    v9 = *(_QWORD *)(a1 + 144);
    v10 = *(float32x4_t **)(a1 + 32);
    v11 = *v10;
    v12 = v10[1];
    v14 = v10[2];
    v13 = v10[3];
    v38 = v13;
    v37 = *(unsigned __int8 *)(a1 + 157);
    v36 = *(unsigned __int8 *)(a1 + 141);
    v28 = *(unsigned __int8 *)(a1 + 140);
    v35 = *(unsigned __int8 *)(a1 + 125);
    v34 = *(unsigned __int8 *)(a1 + 109);
    v29 = *(unsigned __int8 *)(a1 + 108);
    if (v8)
      v15 = v7 == 0;
    else
      v15 = 1;
    v33 = *(unsigned __int8 *)(a1 + 93);
    v17 = !v15 && v9 != 0;
    v32 = v17;
    v31 = *(unsigned __int8 *)(a1 + 77);
    v18 = (_DWORD *)(v9 + 8);
    v19 = (_DWORD *)(v7 + 8);
    v30 = *(unsigned __int8 *)(a1 + 76);
    v39 = *(_QWORD *)(a1 + 80);
    v20 = (_DWORD *)(v39 + 8);
    v21 = (_DWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v22 = *(_QWORD *)(a1 + 96);
    v23 = *(unsigned __int8 *)(a1 + 61);
    v43 = v11;
    v41 = v14;
    v42 = v12;
    do
    {
      *(double *)v24.i64 = C3DConvertFloatingTypeToFloat4(v30, v5, v13, a3.f32[0], a4.f32[0]);
      a4 = v24;
      v13 = 0uLL;
      v44 = 0u;
      if (v22)
      {
        v40 = a4;
        *(double *)v13.i64 = C3DConvertFloatingTypeToFloat4(v29, v6, (float32x4_t)0, v25, a4.f32[0]);
        a4 = v40;
      }
      v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v42, *(float32x2_t *)a4.f32, 1), v43, a4.f32[0]), v41, a4, 2);
      a4.i32[0] = v38.i32[0];
      a3 = vaddq_f32(v38, v26);
      *((_QWORD *)v21 - 1) = a3.i64[0];
      *v21 = a3.i32[2];
      if (v39)
      {
        a3 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v42, *(float32x2_t *)v13.f32, 1), v43, v13.f32[0]), v41, v13, 2);
        *((_QWORD *)v20 - 1) = a3.i64[0];
        v44 = a3;
        *v20 = a3.i32[2];
      }
      if (v32)
      {
        *(double *)v27.i64 = C3DConvertFloatingTypeToFloat4(v28, v8, v13, a3.f32[0], v38.f32[0]);
        a3 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v42, *(float32x2_t *)v27.f32, 1), v43, v27.f32[0]), v41, v27, 2);
        *((_QWORD *)v19 - 1) = a3.i64[0];
        *v19 = a3.i32[2];
        a4 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL), vnegq_f32(v44)), a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
        v13 = (float32x4_t)vextq_s8((int8x16_t)a4, (int8x16_t)a4, 8uLL);
        v13.i32[1] = a4.i32[0];
        *((_QWORD *)v18 - 1) = v13.i64[0];
        *v18 = a4.i32[1];
      }
      v18 = (_DWORD *)((char *)v18 + v37);
      v19 = (_DWORD *)((char *)v19 + v35);
      v8 = (float *)((char *)v8 + v36);
      v20 = (_DWORD *)((char *)v20 + v33);
      v21 = (_DWORD *)((char *)v21 + v23);
      v6 = (float *)((char *)v6 + v34);
      v5 = (float *)((char *)v5 + v31);
      --v4;
    }
    while (v4);
  }
}

double (*__skin_generic_pn(uint64_t a1))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  double (*v8)();
  double (*result)();
  uint64_t v10;
  double (*v11)();
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  __int16 *v27;
  float v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;

  v36 = *(unsigned __int8 *)(a1 + 61);
  v37 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 64);
  v2 = *(unsigned __int8 *)(a1 + 77);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned __int8 *)(a1 + 93);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(unsigned __int8 *)(a1 + 108);
  v7 = *(unsigned __int8 *)(a1 + 109);
  v8 = C3DConvertGetReadToFloat4Function(*(unsigned __int8 *)(a1 + 76));
  result = C3DConvertGetReadToFloat4Function(v6);
  v10 = *(_QWORD *)a1;
  if (*(uint64_t *)a1 >= 1)
  {
    v11 = result;
    v12 = 0;
    do
    {
      *(double *)v13.i64 = ((double (*)(uint64_t))v8)(v35 + v12 * v2);
      v38 = v13;
      result = (double (*)())((uint64_t (*)(uint64_t))v11)(v5 + v12 * v7);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(v15 + 8 * v12);
      v17 = v12 + 1;
      v18 = *(_QWORD *)(v15 + 8 * (v12 + 1));
      v19 = 0uLL;
      v20 = 0uLL;
      v21 = 0uLL;
      v22 = 0uLL;
      v23 = v18 <= v16;
      v24 = v18 - v16;
      if (!v23)
      {
        v25 = *(_QWORD *)(a1 + 16);
        v26 = (float *)(v25 + 4 * v16);
        v27 = (__int16 *)(*(_QWORD *)(a1 + 24) + 2 * v16);
        do
        {
          if (v25)
            v28 = *v26;
          else
            v28 = 1.0;
          v29 = *v27++;
          v30 = (float32x4_t *)(*(_QWORD *)(a1 + 32) + (v29 << 6));
          v22 = vmlaq_n_f32(v22, *v30, v28);
          v21 = vmlaq_n_f32(v21, v30[1], v28);
          v20 = vmlaq_n_f32(v20, v30[2], v28);
          v19 = vmlaq_n_f32(v19, v30[3], v28);
          ++v26;
          --v24;
        }
        while (v24);
      }
      v31 = vaddq_f32(v19, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v21, *(float32x2_t *)v38.f32, 1), v22, v38.f32[0]), v20, v38, 2));
      v32 = v37 + v12 * v36;
      *(_QWORD *)v32 = v31.i64[0];
      *(_DWORD *)(v32 + 8) = v31.i32[2];
      v33 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v21, *(float32x2_t *)v14.f32, 1), v22, v14.f32[0]), v20, v14, 2);
      v34 = v3 + v12 * v4;
      *(_QWORD *)v34 = v33.i64[0];
      *(_DWORD *)(v34 + 8) = v33.i32[2];
      ++v12;
    }
    while (v17 != v10);
  }
  return result;
}

void __skin_generic(uint64_t a1, float32x4_t a2, int32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v13;
  uint64_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  float *v29;
  __int16 *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;

  v4 = *(_QWORD *)a1;
  if (*(uint64_t *)a1 >= 1)
  {
    v6 = 0;
    v57 = *(_QWORD *)(a1 + 48);
    v56 = *(_QWORD *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 96);
    v46 = *(unsigned __int8 *)(a1 + 157);
    v47 = *(_QWORD *)(a1 + 144);
    v45 = *(unsigned __int8 *)(a1 + 141);
    v44 = *(unsigned __int8 *)(a1 + 140);
    v43 = *(unsigned __int8 *)(a1 + 125);
    v52 = *(unsigned __int8 *)(a1 + 109);
    v51 = *(unsigned __int8 *)(a1 + 108);
    v49 = *(_QWORD *)(a1 + 112);
    v50 = *(unsigned __int8 *)(a1 + 93);
    v9 = *(unsigned __int8 *)(a1 + 77);
    v10 = *(unsigned __int8 *)(a1 + 76);
    v48 = *(_QWORD *)(a1 + 128);
    if (v48)
      v11 = *(_QWORD *)(a1 + 112) == 0;
    else
      v11 = 1;
    v13 = !v11 && *(_QWORD *)(a1 + 144) != 0;
    v14 = *(unsigned __int8 *)(a1 + 61);
    while (1)
    {
      *(double *)v15.i64 = C3DConvertFloatingTypeToFloat4(v10, (float *)(v56 + v6 * v9), a2, *(float *)a3.i32, a4.f32[0]);
      v17 = v15;
      v18 = 0uLL;
      a2 = 0uLL;
      if (v8)
      {
        v58 = v17;
        *(double *)a2.i64 = C3DConvertFloatingTypeToFloat4(v51, (float *)(v8 + v6 * v52), (float32x4_t)0, v16, a4.f32[0]);
        v18 = 0uLL;
        v17 = v58;
      }
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(v19 + 8 * v6);
      v21 = v6 + 1;
      v22 = *(_QWORD *)(v19 + 8 * (v6 + 1));
      v23 = 0uLL;
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = v22 <= v20;
      v27 = v22 - v20;
      if (!v26)
      {
        v28 = *(_QWORD *)(a1 + 16);
        v29 = (float *)(v28 + 4 * v20);
        v30 = (__int16 *)(*(_QWORD *)(a1 + 24) + 2 * v20);
        do
        {
          if (v28)
            v31 = *v29;
          else
            v31 = 1.0;
          v33 = *v30++;
          v32 = v33;
          if ((int)v33 < *(__int16 *)(a1 + 160))
          {
            v34 = (float32x4_t *)(*(_QWORD *)(a1 + 32) + (v32 << 6));
            a4 = *v34;
            v25 = vmlaq_n_f32(v25, *v34, v31);
            v24 = vmlaq_n_f32(v24, v34[1], v31);
            v23 = vmlaq_n_f32(v23, v34[2], v31);
            v18 = vmlaq_n_f32(v18, v34[3], v31);
          }
          ++v29;
          --v27;
        }
        while (v27);
      }
      v35 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v24, *(float32x2_t *)v17.f32, 1), v25, v17.f32[0]), v23, v17, 2));
      v36 = v57 + v6 * v14;
      *(_QWORD *)v36 = v35.i64[0];
      *(_DWORD *)(v36 + 8) = v35.i32[2];
      if (!v7)
        break;
      a3 = (int32x4_t)vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v24, *(float32x2_t *)a2.f32, 1), v25, a2.f32[0]), v23, a2, 2);
      v37 = v7 + v6 * v50;
      *(_QWORD *)v37 = a3.i64[0];
      *(_DWORD *)(v37 + 8) = a3.i32[2];
      if (v13)
        goto LABEL_24;
LABEL_25:
      ++v6;
      if (v21 == v4)
        return;
    }
    a3 = 0uLL;
    if (!v13)
      goto LABEL_25;
LABEL_24:
    v54 = v25;
    v55 = v23;
    v53 = v24;
    v59 = (float32x4_t)a3;
    *(double *)v38.i64 = C3DConvertFloatingTypeToFloat4(v44, (float *)(v48 + v6 * v45), a2, *(float *)a3.i32, a4.f32[0]);
    v39 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v53, *(float32x2_t *)v38.f32, 1), v54, v38.f32[0]), v55, v38, 2);
    v40 = v49 + v6 * v43;
    *(_QWORD *)v40 = v39.i64[0];
    *(_DWORD *)(v40 + 8) = v39.i32[2];
    a4 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL), vnegq_f32(v59)), v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL));
    v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a4, (int32x4_t)a4), (int8x16_t)a4, 0xCuLL);
    a3 = (int32x4_t)vmulq_f32(a4, a4);
    a3.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a3.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(a3, 2), *(float32x2_t *)a3.i8)).u32[0];
    *(float32x2_t *)a4.f32 = vrsqrte_f32((float32x2_t)a3.u32[0]);
    a3.i32[0] = vmul_f32(*(float32x2_t *)a4.f32, vrsqrts_f32((float32x2_t)a3.u32[0], vmul_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)a4.f32))).u32[0];
    a2 = vmulq_n_f32(v41, *(float *)a3.i32);
    v42 = v47 + v6 * v46;
    *(_QWORD *)v42 = a2.i64[0];
    *(_DWORD *)(v42 + 8) = a2.i32[2];
    goto LABEL_25;
  }
}

uint64_t C3DSkinnerSkinVertexOptimized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t Count;
  CFIndex v16;
  int MaxInfluencesPerVertex;
  uint64_t v18;
  int32x4_t *v19;
  uint64_t Content;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x4_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v63;
  _QWORD v64[22];

  Count = C3DMeshSourceGetCount(a4);
  v16 = CFArrayGetCount(*(CFArrayRef *)(a11 + 88));
  MaxInfluencesPerVertex = C3DSkinGetMaxInfluencesPerVertex(*(_QWORD *)(a11 + 72));
  v18 = *(_QWORD *)(a11 + 112);
  v19 = *(int32x4_t **)(a11 + 128);
  Content = C3DMeshSourceGetContent(a4);
  if ((v21 & 0xFF00000000) != 0x900000000)
    return 0;
  v57 = v18;
  v58 = v21;
  v50 = MaxInfluencesPerVertex;
  v53 = v16;
  v54 = v19;
  v55 = Content;
  v56 = Count;
  v51 = a2;
  v52 = a1;
  v23 = C3DMeshSourceGetContent(a3);
  v28 = v27;
  v29 = v27 & 0xFF00000000;
  v30 = (v27 & 0xFF00000000) != 0x900000000;
  if (a6)
  {
    v31 = C3DMeshSourceGetContent(a6);
    if ((v32 & 0xFF00000000) != 0x900000000)
      return 0;
    v33 = v32;
    v34 = v31;
    if (!a5)
      goto LABEL_5;
  }
  else
  {
    v34 = 0;
    v33 = 0;
    if (!a5)
    {
LABEL_5:
      v35 = 0;
      v36 = 0;
      goto LABEL_13;
    }
  }
  v35 = C3DMeshSourceGetContent(a5);
  v36 = v37;
  v30 = v29 != 0x900000000 || (v37 & 0xFF00000000) != 0x900000000;
LABEL_13:
  v39 = a7;
  if (a8)
  {
    v40 = C3DMeshSourceGetContent(a8);
    if ((v41 & 0xFF00000000) == 0xA00000000)
    {
      v42 = v41;
      v63 = v40;
      v39 = a7;
      goto LABEL_17;
    }
    return 0;
  }
  v63 = 0;
  v42 = 0;
LABEL_17:
  v49 = v23;
  if (!v39)
  {
    v43 = 0;
    v45 = 0;
    if (a9)
      goto LABEL_21;
LABEL_24:
    v46 = 0;
    v47 = 0;
    goto LABEL_25;
  }
  v43 = C3DMeshSourceGetContent(v39);
  v45 = v44;
  if ((v44 & 0xFF00000000) != 0x900000000)
    v30 = 1;
  if (!a9)
    goto LABEL_24;
LABEL_21:
  v46 = C3DMeshSourceGetContent(a9);
  if ((v47 & 0xFF00000000) != 0x900000000)
    return 0;
LABEL_25:
  if (!v30
    && v34
    && v35
    && !v43
    && (v28 & 0xFF0000000000) == 0xC0000000000
    && (v36 & 0xFF0000000000) == 0xC0000000000)
  {
    if (v53 == 1)
    {
      __skin_PNx4_1bone(v56, v52, v51, a10, v57, v54, v55, v58, v49, v28, SBYTE4(v28), BYTE5(v28), v34, v33, SBYTE4(v33), BYTE5(v33), v35, v36, SBYTE4(v36),
        BYTE5(v36));
    }
    else if (v50 == 1)
    {
      __skin_PNx4_1influence(v56, v52, v51, a10, v57, v55, v58, v22, v49, v28, SBYTE4(v28), BYTE5(v28), v34, v33, SBYTE4(v33), BYTE5(v33), v35, v36, SBYTE4(v36),
        BYTE5(v36));
    }
    else
    {
      __skin_PNx4(0, v56, v52, v51, a10, v57, (uint64_t)v54, v22, v55, v58, v49, v28, SBYTE4(v28), BYTE5(v28), v34, v33, SBYTE4(v33), BYTE5(v33), v35,
        v36,
        SBYTE4(v36),
        BYTE5(v36),
        v53);
    }
  }
  else
  {
    v64[0] = v56;
    v64[1] = v52;
    v64[2] = v51;
    v64[3] = a10;
    v64[4] = v57;
    v64[5] = v54;
    v64[6] = v55;
    v64[7] = v58;
    v64[8] = v49;
    v64[9] = v28;
    v64[10] = v34;
    v64[11] = v33;
    v64[12] = v35;
    v64[13] = v36;
    v64[14] = v63;
    v64[15] = v42;
    v64[16] = v43;
    v64[17] = v45;
    v64[18] = v46;
    v64[19] = v47;
    v64[20] = (unsigned __int16)v53;
    if (v53 == 1)
    {
      __skin_generic_1bone((uint64_t)v64, *(double *)v24.i64, v25, v26);
    }
    else if (v34 && v35 && !v43)
    {
      __skin_generic_pn((uint64_t)v64);
    }
    else
    {
      __skin_generic((uint64_t)v64, v24, (int32x4_t)v25, v26);
    }
  }
  return 1;
}

void __C3DSkinnerPrepareSkinnedMesh(uint64_t a1, uint64_t a2, uint64_t a3, __C3DGeometry *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EffectiveCalculationMode;
  const void *PositionSource;
  const void *CopyWithBaseType;
  const void *NormalSource;
  const void *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t IndexedBoneIndices;
  uint64_t IndexedBoneWeights;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __C3DSkinnerPrepareSkinnedMesh_cold_4(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    EffectiveCalculationMode = C3DSkinnerGetEffectiveCalculationMode(a1, a4);
    *(_WORD *)(a1 + 194) = 0;
    switch(EffectiveCalculationMode)
    {
      case 3:
        v22 = scn_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          __C3DSkinnerPrepareSkinnedMesh_cold_3();
        break;
      case 1:
        IndexedBoneIndices = C3DSkinGetIndexedBoneIndices(v16);
        IndexedBoneWeights = C3DSkinGetIndexedBoneWeights(v16);
        v41 = 0;
        __C3DMeshCopyByAddingOriginalSourcesWithPositionChannel(a3, a2, (const void **)&IndexedBoneIndices);
        if (IndexedBoneIndices)
        {
          if (!C3DMeshGetSourceWithSemanticAtIndex(a3, 5, 0, 1))
          {
            v23 = scn_default_log();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
              __C3DSkinnerPrepareSkinnedMesh_cold_2(v23, v24, v25, v26, v27, v28, v29, v30);
          }
        }
        if (IndexedBoneWeights)
        {
          if (!C3DMeshGetSourceWithSemanticAtIndex(a3, 6, 0, 1))
          {
            v31 = scn_default_log();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
              __C3DSkinnerPrepareSkinnedMesh_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
          }
        }
        *(_BYTE *)(a1 + 195) = 1;
        break;
      case 0:
        C3DMeshCopyRenderableSourceAndElements(a3, a2);
        PositionSource = C3DMeshGetPositionSource(a2, 1);
        CopyWithBaseType = (const void *)C3DMeshSourceCreateCopyWithBaseType((uint64_t)PositionSource, 9u, 1);
        C3DMeshSetSourceWithInputSet(a3, CopyWithBaseType, 0, 0);
        CFRelease(CopyWithBaseType);
        NormalSource = C3DMeshGetNormalSource(a2, 1);
        if (NormalSource)
        {
          v21 = (const void *)C3DMeshSourceCreateCopyWithBaseType((uint64_t)NormalSource, 9u, 1);
          C3DMeshSetSourceWithInputSet(a3, v21, 0, 0);
          CFRelease(v21);
        }
        *(_BYTE *)(a1 + 194) = 1;
        break;
    }
    C3DMeshCopyBoundingVolumes(a2, a3);
  }
}

uint64_t C3DSkinnerGetEffectiveCalculationMode(uint64_t a1, __C3DGeometry *a2)
{
  uint64_t result;
  NSObject *v4;
  NSObject *v5;

  if (*(_QWORD *)(a1 + 104) == 1)
    return 3;
  if (a2 && C3DGeometryOpenSubdivGPUIsActive(a2))
    return 2;
  result = *(unsigned int *)(a1 + 208);
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      if (C3DMetalIsUsed())
        return 2;
      else
        return 1;
    case 2:
      return 2;
    case 3:
      v5 = scn_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        C3DSkinnerGetEffectiveCalculationMode_cold_2();
      goto LABEL_14;
    default:
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        __C3DSkinnerPrepareSkinnedMesh_cold_3();
LABEL_14:
      result = 1;
      break;
  }
  return result;
}

void _computeJointMatrices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, simd_float4 a6, simd_float4 a7, simd_float4 a8, simd_float4 a9)
{
  const simd_float4x4 *IOSurface;
  uint64_t v14;
  __C3DTransformTree *TransformTree;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  void *updated;
  float32x4_t v21;
  int v22;
  CFIndex v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  __int128 *WorldTransformPtr;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float32x4_t *ValueAtIndex;
  NSObject *v32;
  __int128 v33;
  __int128 v34;
  char v35;
  simd_float4x4 v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x2_t *v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  char IsBoundingBoxFixed;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  simd_float4x4 *v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  _QWORD *v67;
  const simd_float4x4 *v68;
  float32x4_t v69;
  simd_float4x4 v70;
  uint8_t buf[4];
  _BYTE v72[28];
  simd_float4x4 v73;
  simd_float4x4 v74;

  v70.columns[2] = a8;
  v70.columns[3] = a9;
  v70.columns[0] = a6;
  v70.columns[1] = a7;
  *(_QWORD *)&v72[20] = *MEMORY[0x1E0C80C00];
  IOSurface = (const simd_float4x4 *)C3DTextureGetIOSurface(a2);
  v73 = __invert_f4(v70);
  v70.columns[2] = v73.columns[1];
  v70.columns[3] = v73.columns[0];
  v70.columns[0] = v73.columns[3];
  v70.columns[1] = v73.columns[2];
  v14 = C3DGetSceneRef(a3);
  if (v14)
    TransformTree = (__C3DTransformTree *)C3DSceneGetTransformTree(v14);
  else
    TransformTree = 0;
  v16 = *(_QWORD **)(a1 + 80);
  if (v16)
    v17 = C3DGetScene(v16);
  else
    v17 = 0;
  v18 = (_OWORD *)MEMORY[0x1E0C83FF0];
  v19 = C3DGetScene((_QWORD *)a1);
  updated = *(void **)(a1 + 96);
  if (v17 == v19)
  {
    if (!updated)
      updated = (void *)__updateJointsTransformHandles(a1);
  }
  else
  {
    free(updated);
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(double *)v21.i64 = MEMORY[0x1E0C80A78](updated);
  v69 = v21;
  if (a4 < 1)
  {
    IsBoundingBoxFixed = C3DNodeIsBoundingBoxFixed(a3);
    v36.columns[1] = v70.columns[2];
    v36.columns[0] = v70.columns[3];
    v37 = (float32x4_t)v70.columns[0];
    v36.columns[2] = v70.columns[1];
    if ((IsBoundingBoxFixed & 1) == 0)
    {
      v39 = (float32x4_t)xmmword_1DD0076D0;
      v43 = v69;
LABEL_30:
      v55 = vaddq_f32(v37, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v36.columns[1], *(float32x2_t *)v43.f32, 1), (float32x4_t)v36.columns[0], v43.f32[0]), (float32x4_t)v36.columns[2], v43, 2));
      v55.i32[3] = 1.0;
      v36.columns[3] = (simd_float4)v39;
      v36.columns[3].i32[1] = v39.i32[0];
      v36.columns[3].i32[2] = v39.i32[0];
      *(float32x4_t *)(a1 + 160) = v55;
      *(float32x4_t *)(a1 + 176) = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32((float32x4_t)v36.columns[0], (float32x4_t)v36.columns[3])), vabsq_f32(vmulq_f32((float32x4_t)v36.columns[1], (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v39.f32, 1), (int32x4_t)v39)))), vabsq_f32(vmulq_f32((float32x4_t)v36.columns[2], (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v39, (int32x4_t)v39), (int32x4_t)v39))));
    }
  }
  else
  {
    v68 = IOSurface;
    v22 = a5;
    v23 = 0;
    v67 = v72;
    v24 = &(&v67)[-8 * a4];
    do
    {
      v25 = *(_QWORD *)(a1 + 96);
      if (!v25 || (v26 = *(_DWORD *)(v25 + 4 * v23), v26 == -1))
      {
        ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v23);
        if (ValueAtIndex)
        {
          C3DNodeComputeWorldTransform(ValueAtIndex, (uint64_t)v24);
        }
        else
        {
          v32 = scn_default_log();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
            _computeJointMatrices_cold_1(buf, v67, v32);
          v33 = v18[1];
          *v24 = *v18;
          v24[1] = v33;
          v34 = v18[3];
          v24[2] = v18[2];
          v24[3] = v34;
        }
      }
      else
      {
        WorldTransformPtr = (__int128 *)C3DTransformTreeGetWorldTransformPtr(TransformTree, v26);
        v28 = WorldTransformPtr[3];
        v30 = *WorldTransformPtr;
        v29 = WorldTransformPtr[1];
        v24[2] = WorldTransformPtr[2];
        v24[3] = v28;
        *v24 = v30;
        v24[1] = v29;
      }
      ++v23;
      v24 += 4;
    }
    while (a4 != v23);
    v35 = C3DNodeIsBoundingBoxFixed(a3);
    a5 = v22;
    IOSurface = v68;
    v36.columns[1] = v70.columns[2];
    v36.columns[0] = v70.columns[3];
    v37 = (float32x4_t)v70.columns[0];
    v36.columns[2] = v70.columns[1];
    if ((v35 & 1) == 0)
    {
      v38 = (float32x4_t *)&(&v67)[-8 * a4 + 4];
      v39 = (float32x4_t)xmmword_1DD0076D0;
      v40 = (float32x2_t *)(*(_QWORD *)(a1 + 144) + 16);
      v41.i64[0] = 0x3F0000003F000000;
      v41.i64[1] = 0x3F0000003F000000;
      v42 = a4;
      v43 = v69;
      do
      {
        if ((vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)v40->f32)) & 0x80000000) != 0)
        {
          v44 = v38[-2];
          v45 = v38[-1];
          v46 = vaddq_f32(v38[1], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v45, v40[-2], 1), v44, COERCE_FLOAT(*(_OWORD *)v40[-2].f32)), *v38, *(float32x4_t *)v40[-2].f32, 2));
          v47 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)v40->f32))), vabsq_f32(vmulq_lane_f32(v45, *v40, 1))), vabsq_f32(vmulq_laneq_f32(*v38, *(float32x4_t *)v40->f32, 2)));
          v48 = vsubq_f32(v43, v39);
          v49 = vsubq_f32(v46, v47);
          v48.i32[3] = 0;
          v49.i32[3] = 0;
          v50 = vminnmq_f32(v48, v49);
          v51 = vaddq_f32(v43, v39);
          v51.i32[3] = 0;
          v52 = vaddq_f32(v46, v47);
          v52.i32[3] = 0;
          v53 = vmaxnmq_f32(v51, v52);
          v43 = vmulq_f32(vaddq_f32(v50, v53), v41);
          v39 = vmulq_f32(vsubq_f32(v53, v50), v41);
          v43.i32[3] = 1.0;
          v39.i32[3] = 0;
        }
        v38 += 4;
        v40 += 4;
        --v42;
      }
      while (v42);
      goto LABEL_30;
    }
  }
  v36.columns[3] = (simd_float4)v37;
  scn_matrix_multiply_batch((float32x4_t *)&(&v67)[-8 * a4], v36, (const simd_float4x4 *)&(&v67)[-8 * a4], a4);
  scn_matrix_multiply_batch(*(simd_float4x4 **)(a1 + 112), (const simd_float4x4 *)&(&v67)[-8 * a4], IOSurface, a4);
  scn_matrix_transpose_batch(*(_QWORD *)(a1 + 128), *(int32x4_t **)(a1 + 112), a4);
  if (a4 >= 1 && a5)
  {
    v56 = 0;
    do
    {
      v57 = *(_QWORD *)(a1 + 112);
      v58 = (simd_float4x4 *)(*(_QWORD *)(a1 + 120) + v56);
      v59 = *(int32x4_t *)(v57 + v56);
      v60 = *(int32x4_t *)(v57 + v56 + 16);
      v61 = *(int32x4_t *)(v57 + v56 + 32);
      v62 = *(int32x4_t *)(v57 + v56 + 48);
      v63 = vzip1q_s32(v59, v61);
      v64 = vzip2q_s32(v59, v61);
      v65 = vzip1q_s32(v60, v62);
      v66 = vzip2q_s32(v60, v62);
      v74.columns[0] = (simd_float4)vzip1q_s32(v63, v65);
      v74.columns[1] = (simd_float4)vzip2q_s32(v63, v65);
      v74.columns[2] = (simd_float4)vzip1q_s32(v64, v66);
      v74.columns[3] = (simd_float4)vzip2q_s32(v64, v66);
      *v58 = __invert_f4(v74);
      v56 += 64;
      --a4;
    }
    while (a4);
  }
}

uint64_t C3DSkinnerUpdateCurrentMesh(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __C3DGeometry *Geometry;
  __C3DGeometry *v16;
  int EffectiveCalculationMode;
  const __CFArray *MaterialsCount;
  const __CFArray *v19;
  const __CFArray *MaterialAtIndex;
  uint64_t v21;
  uint64_t v22;
  const __CFArray *v23;
  uint64_t Technique;
  uint64_t *v25;
  uint64_t RendererContextGL;
  uint64_t SkinnedMeshLegacy;
  __C3DMesh *v29;
  uint64_t v30;
  uint64_t LayoutTimeStamp;
  int v32;
  char v33;
  char v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t MutabilityTimeStamp;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *PositionSource;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const void *NormalSource;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t v79[16];

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DSkinnerSetOwnerNode_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 104);
  Geometry = (__C3DGeometry *)C3DNodeGetGeometry((uint64_t)a2);
  if (Geometry)
  {
    v16 = Geometry;
    EffectiveCalculationMode = C3DSkinnerGetEffectiveCalculationMode(a1, Geometry);
    if (a3 && !C3DEngineContextGetRenderContext(a3) && EffectiveCalculationMode)
    {
      if (v14 > 20)
        goto LABEL_68;
      MaterialsCount = C3DGeometryGetMaterialsCount((uint64_t)v16);
      if ((uint64_t)MaterialsCount >= 1)
      {
        v19 = MaterialsCount;
        MaterialAtIndex = C3DGeometryGetMaterialAtIndex((uint64_t)v16, 0);
        if (C3DMaterialGetTechnique((uint64_t)MaterialAtIndex))
          goto LABEL_68;
        v21 = 1;
        do
        {
          v22 = v21;
          if (v19 == (const __CFArray *)v21)
            break;
          v23 = C3DGeometryGetMaterialAtIndex((uint64_t)v16, v21);
          Technique = C3DMaterialGetTechnique((uint64_t)v23);
          v21 = v22 + 1;
        }
        while (!Technique);
        if (v22 < (uint64_t)v19)
        {
LABEL_68:
          if (*(_DWORD *)(a1 + 208))
          {
            v25 = *(uint64_t **)(a1 + 64);
            if (v25)
              C3DNodeGeometryDidUpdate(v25);
          }
          *(_DWORD *)(a1 + 208) = 0;
        }
      }
    }
    if (v14 == 1)
      goto LABEL_20;
    RendererContextGL = C3DEngineContextGetRendererContextGL(a3);
    SkinnedMeshLegacy = C3DSkinnerGetSkinnedMeshLegacy(a1, (uint64_t)a2);
    v29 = _C3DGetEffectiveBaseMesh(SkinnedMeshLegacy, (uint64_t)a2, v16, EffectiveCalculationMode);
    if (!v29)
      return 0;
    v30 = (uint64_t)v29;
    if (RendererContextGL
      && (LayoutTimeStamp = C3DMeshGetLayoutTimeStamp((uint64_t)v29), *(_QWORD *)(a1 + 136) != LayoutTimeStamp))
    {
      *(_QWORD *)(a1 + 136) = LayoutTimeStamp;
      v32 = 1;
      if (EffectiveCalculationMode)
        goto LABEL_26;
    }
    else
    {
      v32 = 0;
      if (EffectiveCalculationMode)
      {
        if (EffectiveCalculationMode == 2)
          goto LABEL_40;
LABEL_26:
        if (EffectiveCalculationMode == 1)
        {
          if (*(_BYTE *)(a1 + 195))
            v33 = v32;
          else
            v33 = 1;
          if ((v33 & 1) == 0)
            goto LABEL_45;
LABEL_41:
          if (!RendererContextGL)
          {
            v36 = scn_default_log();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
              C3DSkinnerUpdateCurrentMesh_cold_5(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          __C3DSkinnerPrepareSkinnedMesh(a1, v30, SkinnedMeshLegacy, v16);
          goto LABEL_45;
        }
        v35 = scn_default_log();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v79 = 0;
          _os_log_error_impl(&dword_1DCCB8000, v35, OS_LOG_TYPE_ERROR, "Unreachable code: Unknown skinning calculation mode.", v79, 2u);
          if ((v32 & 1) != 0)
            goto LABEL_41;
        }
        else
        {
LABEL_40:
          if (v32)
            goto LABEL_41;
        }
LABEL_45:
        if (C3DNodeGetMorpher((uint64_t)a2) && EffectiveCalculationMode)
        {
          MutabilityTimeStamp = C3DMeshGetMutabilityTimeStamp(SkinnedMeshLegacy);
          if (MutabilityTimeStamp != C3DMeshGetMutabilityTimeStamp(v30))
            C3DMeshDidMutate(SkinnedMeshLegacy);
          goto LABEL_50;
        }
        if (EffectiveCalculationMode)
        {
LABEL_50:
          if (EffectiveCalculationMode != 2 && !*(_BYTE *)(a1 + 195))
          {
            v45 = scn_default_log();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
              C3DSkinnerUpdateCurrentMesh_cold_4(v45, v46, v47, v48, v49, v50, v51, v52);
          }
LABEL_20:
          C3DSkinnerUpdateJointsAndBoundingBox(a1, a2);
          return 0;
        }
LABEL_54:
        if (!*(_BYTE *)(a1 + 194))
        {
          v53 = scn_default_log();
          if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
            C3DSkinnerUpdateCurrentMesh_cold_3(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        PositionSource = C3DMeshGetPositionSource(SkinnedMeshLegacy, 1);
        if ((C3DMeshSourceIsMutable(PositionSource) & 1) == 0)
        {
          v62 = scn_default_log();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
            C3DSkinnerUpdateCurrentMesh_cold_2(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        if (C3DMeshGetNormalSource(SkinnedMeshLegacy, 1))
        {
          NormalSource = C3DMeshGetNormalSource(SkinnedMeshLegacy, 1);
          if ((C3DMeshSourceIsMutable(NormalSource) & 1) == 0)
          {
            v71 = scn_default_log();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
              C3DSkinnerUpdateCurrentMesh_cold_1(v71, v72, v73, v74, v75, v76, v77, v78);
          }
        }
        goto LABEL_20;
      }
    }
    if (*(_BYTE *)(a1 + 194))
      v34 = v32;
    else
      v34 = 1;
    if ((v34 & 1) == 0)
    {
      C3DNodeGetMorpher((uint64_t)a2);
      goto LABEL_54;
    }
    goto LABEL_41;
  }
  return 0;
}

uint64_t C3DSkinnerGetSkinnedMeshLegacy(uint64_t a1, uint64_t a2)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Morpher;
  const void *MorphedMeshLegacy;
  uint64_t v15;
  uint64_t Mesh;
  uint64_t v17;
  uint64_t Name;
  const __CFString *v19;
  uint64_t Geometry;

  if (!*(_QWORD *)(a1 + 200))
  {
    if (!a2)
    {
      v5 = scn_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
        C3DSkinnerGetSkinnedMeshLegacy_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    if (*(_QWORD *)(a1 + 104) == 1)
    {
      if (C3DNodeGetMorpher(a2))
      {
        Morpher = C3DNodeGetMorpher(a2);
        MorphedMeshLegacy = (const void *)C3DMorpherGetMorphedMeshLegacy(Morpher);
        if (!MorphedMeshLegacy)
          return *(_QWORD *)(a1 + 200);
      }
      else
      {
        Geometry = C3DNodeGetGeometry(a2);
        if (!Geometry)
          return *(_QWORD *)(a1 + 200);
        MorphedMeshLegacy = (const void *)C3DGeometryGetMesh(Geometry);
        if (!MorphedMeshLegacy)
          return *(_QWORD *)(a1 + 200);
      }
      *(_QWORD *)(a1 + 200) = CFRetain(MorphedMeshLegacy);
      return *(_QWORD *)(a1 + 200);
    }
    v15 = C3DNodeGetGeometry(a2);
    if (v15)
    {
      Mesh = C3DGeometryGetMesh(v15);
      if (Mesh)
      {
        v17 = Mesh;
        *(_QWORD *)(a1 + 200) = C3DMeshCreateCopy(Mesh);
        Name = C3DEntityGetName(v17);
        v19 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ - Skinned"), Name);
        C3DEntitySetName(*(_QWORD *)(a1 + 200), v19);
        CFRelease(v19);
      }
    }
  }
  return *(_QWORD *)(a1 + 200);
}

void C3DSkinnerUpdateJointsAndBoundingBox(uint64_t a1, float32x4_t *a2)
{
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int JointsCount;
  uint64_t v14;
  uint64_t v15;
  __C3DGeometry *Geometry;
  int EffectiveCalculationMode;
  _BOOL8 v18;
  _BOOL4 HasSourcesWithSemantic;
  uint64_t v20;
  NSObject *v21;
  __C3DMesh *v22;
  simd_float4 *WorldMatrix;
  uint64_t v24;
  const void *NormalSource;
  const void *SourceWithSemanticAtIndex;
  const void *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  BOOL v75;
  uint64_t v76;
  float *v77;
  __int16 *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  __n128 v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x2_t v85;
  float32x2_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  float32x4_t *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  const void *v94;
  uint64_t v95;
  uint64_t Count;
  const void *PositionSource;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105[4];
  float32x4_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float32x4_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  float32x4_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  if (*(_BYTE *)(a1 + 193))
    _C3DSkinnerUpdateBoundingBox(a1, (uint64_t)a2);
  v4 = *(_QWORD **)(a1 + 72);
  if (!v4)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  JointsCount = C3DSkinGetJointsCount((uint64_t)v4);
  if (*(_QWORD *)(a1 + 88) && (v14 = *(_QWORD *)(a1 + 104)) != 0 && (v15 = JointsCount, v14 == JointsCount))
  {
    Geometry = (__C3DGeometry *)C3DNodeGetGeometry((uint64_t)a2);
    EffectiveCalculationMode = C3DSkinnerGetEffectiveCalculationMode(a1, Geometry);
    v18 = C3DGeometryUsesDeformerBasedDynamicMesh((uint64_t)Geometry);
    if (v18)
    {
      HasSourcesWithSemantic = 0;
      v20 = 0;
    }
    else
    {
      v22 = _C3DGetEffectiveBaseMesh(v18, (uint64_t)a2, Geometry, EffectiveCalculationMode);
      v20 = (uint64_t)v22;
      if (EffectiveCalculationMode)
        HasSourcesWithSemantic = 0;
      else
        HasSourcesWithSemantic = C3DMeshHasSourcesWithSemantic((uint64_t)v22, 1, 1, 0);
    }
    WorldMatrix = (simd_float4 *)C3DNodeGetWorldMatrix(a2);
    _computeJointMatrices(a1, (uint64_t)v4, (uint64_t)a2, v15, HasSourcesWithSemantic, *WorldMatrix, WorldMatrix[1], WorldMatrix[2], WorldMatrix[3]);
    if (*(_QWORD *)(a1 + 104) == 1 || EffectiveCalculationMode)
    {
      v87 = (uint64_t)a2;
LABEL_60:
      C3DNodeBoundingBoxDidUpdate(v87);
      return;
    }
    v24 = *(_QWORD *)(a1 + 200);
    if (v24)
    {
      PositionSource = C3DMeshGetPositionSource(v20, 1);
      NormalSource = C3DMeshGetNormalSource(v20, 1);
      SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(v20, 4, 0, 1);
      v27 = C3DMeshGetPositionSource(v24, 1);
      v28 = (uint64_t)v27;
      if (!v27 || v27 == PositionSource)
      {
        v29 = scn_default_log();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
          C3DSkinnerUpdateJointsAndBoundingBox_cold_6(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      if ((C3DMeshSourceIsMutable(v28) & 1) == 0)
      {
        v37 = scn_default_log();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
          C3DSkinnerUpdateJointsAndBoundingBox_cold_5(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      v45 = C3DMeshGetNormalSource(v24, 1);
      v46 = (uint64_t)v45;
      if (v45)
      {
        if (v45 == NormalSource)
        {
          v47 = scn_default_log();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
            C3DSkinnerUpdateJointsAndBoundingBox_cold_4(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        if ((C3DMeshSourceIsMutable(v46) & 1) == 0)
        {
          v55 = scn_default_log();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
            C3DSkinnerUpdateJointsAndBoundingBox_cold_3(v55, v56, v57, v58, v59, v60, v61, v62);
        }
      }
      v89 = v24;
      v90 = a2;
      v63 = C3DMeshGetSourceWithSemanticAtIndex(v24, 4, 0, 1);
      Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
      v103 = 0;
      v104 = 0;
      v102 = 0;
      C3DSkinGetVertexWeightsPointers(v4, &v104, &v102, &v103);
      v95 = a1;
      v91 = v46;
      if ((C3DSkinnerSkinVertexOptimized(v104, v103, (uint64_t)PositionSource, v28, (uint64_t)NormalSource, v46, (uint64_t)SourceWithSemanticAtIndex, (uint64_t)v63, 0, v102, a1) & 1) == 0&& Count >= 1)
      {
        v64 = 0;
        if (NormalSource)
          v65 = v46 == 0;
        else
          v65 = 1;
        v66 = !v65;
        v92 = v66;
        v93 = v28;
        v94 = SourceWithSemanticAtIndex;
        do
        {
          v67 = v103;
          v68 = *(_QWORD *)(v104 + 8 * v64);
          v101 = v64 + 1;
          v69 = *(_QWORD *)(v104 + 8 * (v64 + 1));
          v98 = v102;
          v70 = *(_QWORD *)(v95 + 112);
          v71 = *(_QWORD *)(v95 + 120);
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v112 = 0u;
          v113 = 0u;
          v110 = 0u;
          v111 = 0u;
          C3DMatrix4x4MakeZero(&v114);
          C3DMatrix4x4MakeZero(&v110);
          v72 = (int)v64;
          *(double *)v73.i64 = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)PositionSource, (int)v64);
          v100 = v73;
          v74 = 0uLL;
          if (NormalSource)
            *(double *)v74.i64 = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)NormalSource, (int)v64);
          v99 = v74;
          if (SourceWithSemanticAtIndex)
            C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)SourceWithSemanticAtIndex, (int)v64);
          v75 = v69 <= v68;
          v76 = v69 - v68;
          if (!v75)
          {
            v77 = (float *)(v67 + 4 * v68);
            v78 = (__int16 *)(v98 + 2 * v68);
            do
            {
              v80 = *v78++;
              v79 = v80;
              v109 = 0u;
              v107 = 0u;
              v108 = 0u;
              v106 = 0u;
              memset(v105, 0, sizeof(v105));
              if (v67)
                v81 = *v77;
              else
                v81 = 1.0;
              C3DMatrix4x4MultFloat((float32x4_t *)(v70 + (v79 << 6)), &v106, v81);
              C3DMatrix4x4Add(&v114, &v106, &v114);
              if (NormalSource)
              {
                C3DMatrix4x4MultFloat((float32x4_t *)(v71 + (v79 << 6)), v105, v81);
                C3DMatrix4x4Add(&v110, v105, &v110);
              }
              ++v77;
              --v76;
            }
            while (v76);
          }
          v106 = v114;
          v107 = v115;
          v108 = v116;
          v109 = v117;
          v82.n128_f64[0] = C3DVector3MultMatrix4x4(&v106, v100);
          C3DMeshSourceSetValueAtIndexAsVector3(v93, v72, v82);
          if (v92)
          {
            v106 = v110;
            v107 = v111;
            v108 = v112;
            v109 = v113;
            *(float32x2_t *)v83.f32 = C3DVector3RotateAndScale((float32x2_t *)&v106, v99);
            v84 = (int32x4_t)vmulq_f32(v83, v83);
            v84.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v84, 2), vadd_f32(*(float32x2_t *)v84.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1))).u32[0];
            v85 = vrsqrte_f32((float32x2_t)v84.u32[0]);
            v86 = vmul_f32(v85, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v85, v85)));
            C3DMeshSourceSetValueAtIndexAsVector3(v91, v72, (__n128)vmulq_n_f32(v83, vmul_f32(v86, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v86, v86))).f32[0]));
          }
          v64 = v101;
          SourceWithSemanticAtIndex = v94;
        }
        while (v101 != Count);
      }
      C3DMeshDidMutate(v89);
      C3DMeshResetBoundingVolumes(v89);
      v87 = (uint64_t)v90;
      goto LABEL_60;
    }
    if ((C3DSkinnerUpdateJointsAndBoundingBox_done_14 & 1) == 0)
    {
      C3DSkinnerUpdateJointsAndBoundingBox_done_14 = 1;
      v88 = scn_default_log();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        C3DSkinnerUpdateJointsAndBoundingBox_cold_2();
    }
  }
  else if ((C3DSkinnerUpdateJointsAndBoundingBox_done & 1) == 0)
  {
    C3DSkinnerUpdateJointsAndBoundingBox_done = 1;
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      _C3DSkinnerUpdateBoundingBox_cold_2();
  }
}

uint64_t C3DSkinnerGetJointMatrices(uint64_t a1, _QWORD *a2)
{
  if (a2)
    *a2 = 3 * *(_QWORD *)(a1 + 104);
  return *(_QWORD *)(a1 + 128);
}

__n128 C3DSkinnerGetBoundingBox(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  CFIndex v10;
  float32x4_t *ValueAtIndex;
  float32x4_t *WorldMatrix;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  __C3DGeometry *Geometry;
  __n128 result;
  __C3DMesh *RenderingMesh;
  float32x4_t v30;
  float32x4_t v31;
  simd_float4x4 *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  float32x4_t v37;
  float32x4_t v38;
  simd_float4x4 v39;
  float32x4_t v40;

  if (*(_BYTE *)(a1 + 193))
    _C3DSkinnerUpdateBoundingBox(a1, (uint64_t)a2);
  if ((vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)(a1 + 176))) & 0x80000000) != 0)
    goto LABEL_17;
  v6 = *(const __CFArray **)(a1 + 88);
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    if (Count)
    {
      v8 = Count;
      v37 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
      if (Count < 1)
      {
        v38 = (float32x4_t)xmmword_1DD0076D0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v38 = (float32x4_t)xmmword_1DD0076D0;
        do
        {
          ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v10);
          WorldMatrix = C3DNodeGetWorldMatrix(ValueAtIndex);
          v13 = (float32x4_t *)(*(_QWORD *)(a1 + 144) + v9);
          v14 = v13[1];
          if ((vminvq_u32((uint32x4_t)vcgezq_f32(v14)) & 0x80000000) != 0)
          {
            v15 = WorldMatrix[1];
            v16 = WorldMatrix[2];
            v17 = vaddq_f32(WorldMatrix[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v15, *(float32x2_t *)v13->f32, 1), *WorldMatrix, COERCE_FLOAT(*v13)), v16, *v13, 2));
            v18 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_n_f32(*WorldMatrix, v14.f32[0])), vabsq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v14.f32, 1))), vabsq_f32(vmulq_laneq_f32(v16, v14, 2)));
            v19 = vsubq_f32(v37, v38);
            v20 = vsubq_f32(v17, v18);
            v19.i32[3] = 0;
            v20.i32[3] = 0;
            v21 = vminnmq_f32(v19, v20);
            v22 = vaddq_f32(v37, v38);
            v23 = vaddq_f32(v17, v18);
            v22.i32[3] = 0;
            v23.i32[3] = 0;
            v24 = vmaxnmq_f32(v22, v23);
            v22.i64[0] = 0x3F0000003F000000;
            v22.i64[1] = 0x3F0000003F000000;
            v25 = vmulq_f32(vaddq_f32(v21, v24), v22);
            v26 = vmulq_f32(vsubq_f32(v24, v21), v22);
            v25.i32[3] = 1.0;
            v26.i32[3] = 0;
            v37 = v25;
            v38 = v26;
          }
          ++v10;
          v9 += 32;
        }
        while (v8 != v10);
      }
      memset(&v39, 0, sizeof(v39));
      v32 = (simd_float4x4 *)C3DNodeGetWorldMatrix(a2);
      C3DMatrix4x4Invert(v32, &v39);
      v33 = vaddq_f32((float32x4_t)v39.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v39.columns[1], *(float32x2_t *)v37.f32, 1), (float32x4_t)v39.columns[0], v37.f32[0]), (float32x4_t)v39.columns[2], v37, 2));
      v33.i32[3] = 1.0;
      v34 = v38;
      v34.i32[1] = v38.i32[0];
      v34.i32[2] = v38.i32[0];
      v35 = vaddq_f32(vaddq_f32(vabsq_f32(vmulq_f32(v34, (float32x4_t)v39.columns[0])), vabsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v38.f32, 1), (int32x4_t)v38), (float32x4_t)v39.columns[1]))), vabsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v38, (int32x4_t)v38), (int32x4_t)v38), (float32x4_t)v39.columns[2])));
      *(float32x4_t *)(a1 + 160) = v33;
      *(float32x4_t *)(a1 + 176) = v35;
LABEL_17:
      result = *(__n128 *)(a1 + 160);
      v36 = *(_OWORD *)(a1 + 176);
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v36;
      return result;
    }
  }
  Geometry = (__C3DGeometry *)C3DNodeGetGeometry((uint64_t)a2);
  if (Geometry)
  {
    RenderingMesh = C3DGeometryGetRenderingMesh(Geometry);
    v39.columns[0].i32[2] = 0;
    v39.columns[0].i64[0] = 0;
    v40.i32[2] = 0;
    v40.i64[0] = 0;
    C3DMeshGetBoundingBox((uint64_t)RenderingMesh, &v39, &v40);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    v31 = vmulq_f32(vaddq_f32((float32x4_t)v39.columns[0], v40), v30);
    result = (__n128)vmulq_f32(vsubq_f32(v40, (float32x4_t)v39.columns[0]), v30);
    v31.i32[3] = 1.0;
    result.n128_u32[3] = 0;
    *(float32x4_t *)a3 = v31;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t C3DSkinnerGetJointBoundingBoxes(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSkinnerSetOwnerNode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_BYTE *)(a1 + 193))
    _C3DSkinnerUpdateBoundingBox(a1, a2);
  return *(_QWORD *)(a1 + 144);
}

void C3DSkinnerAppendDebugBones(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v7;
  BOOL v8;
  _QWORD v9[7];
  float v10;
  char v11;
  BOOL v12;

  if (*(_BYTE *)(a1 + 193))
    _C3DSkinnerUpdateBoundingBox(a1, a3);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
  {
    v8 = C3DNodeGetChildNodesCount(v7) == 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = __C3DSkinnerAppendDebugBones_block_invoke;
    v9[3] = &__block_descriptor_tmp_23_1;
    v9[4] = a2;
    v9[5] = v7;
    v10 = a4;
    v9[6] = &C3DAuthoringEnvironmentColorOrangeDark;
    v11 = 1;
    v12 = v8;
    C3DNodeApplyHierarchy(v7, (uint64_t)v9);
  }
}

void C3DSkinnerAppendDebugBoundingBoxes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  CFIndex i;
  float32x4_t *ValueAtIndex;
  float32x4_t *WorldMatrix;
  __int128 v11;

  if (*(_BYTE *)(a1 + 193))
    _C3DSkinnerUpdateBoundingBox(a1, a3);
  v11 = xmmword_1DD007880;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 88));
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      if ((vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 144) + v7 + 16))) & 0x80000000) != 0)
      {
        ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), i);
        WorldMatrix = C3DNodeGetWorldMatrix(ValueAtIndex);
        C3DAuthoringEnvironmentAppendDebugBoundingBox(a2, (float32x4_t *)(*(_QWORD *)(a1 + 144) + v7), WorldMatrix, (float *)&v11);
      }
      v7 += 32;
    }
  }
}

BOOL C3DSkinnerCalculationModeUsesGPU(int a1)
{
  return (a1 - 1) < 2;
}

void C3DSkinnerInputGeometryDidChange(uint64_t a1)
{
  const void *v2;

  *(_DWORD *)(a1 + 192) = 256;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *(_OWORD *)(a1 + 176) = xmmword_1DD0076D0;
  v2 = *(const void **)(a1 + 200);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 200) = 0;
}

id _C3DSkinnerCFFinalize(_QWORD *a1)
{
  void *v2;
  const void *v3;
  void *v4;
  void *v5;
  void *v6;
  const void *v7;
  void *v8;
  const void *v9;

  if (a1[9])
    C3DSkinnerSetSkin((uint64_t)a1, 0);
  v2 = (void *)a1[16];
  if (v2)
    free(v2);
  v3 = (const void *)a1[11];
  if (v3)
    CFRelease(v3);
  v4 = (void *)a1[14];
  if (v4)
    free(v4);
  v5 = (void *)a1[15];
  if (v5)
    free(v5);
  v6 = (void *)a1[18];
  if (v6)
    free(v6);
  v7 = (const void *)a1[25];
  if (v7)
    CFRelease(v7);
  v8 = (void *)a1[12];
  if (v8)
    free(v8);
  v9 = (const void *)a1[10];
  if (v9)
  {
    CFRelease(v9);
    a1[10] = 0;
  }
  return C3DEntityCFFinalize((uint64_t)a1);
}

__CFString *_C3DSkinnerCFCopyDebugDescription(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  uint64_t v4;
  __CFString *Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(const __CFArray **)(a1 + 88);
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *(unsigned __int8 *)(a1 + 195);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DSkinner %p skeleton:%p jointCount:%d cpuReady:%d gpuReady:%d\n"), a1, *(_QWORD *)(a1 + 80), Count, *(unsigned __int8 *)(a1 + 194), v4);
  CFStringAppendFormat(Mutable, 0, CFSTR("  skin:%p skinnedMesh:%p calcMode:%d\n"), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 200), *(unsigned int *)(a1 + 208));
  if (*(uint64_t *)(a1 + 104) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a1 + 144);
      if (!v8)
        break;
      v9 = v8 + v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  JointBbox[%d] {%f,%f,%f} {%f,%f,%f}\n"), v7++, *(float *)v9, *(float *)(v9 + 4), *(float *)(v9 + 8), COERCE_FLOAT(*(_OWORD *)(v9 + 16)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(v9 + 16))), COERCE_FLOAT(*(_QWORD *)(v9 + 24)));
      v6 += 32;
    }
    while (v7 < *(_QWORD *)(a1 + 104));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

BOOL _C3DSkinnerInitWithPropertyList(int a1, CFTypeRef cf)
{
  CFTypeID v2;

  v2 = CFGetTypeID(cf);
  return v2 == CFDictionaryGetTypeID();
}

__CFDictionary *_C3DSkinnerCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  const void *v15;
  CFNumberRef v16;
  CFNumberRef v17;
  __CFArray *Mutable;
  CFIndex v19;
  const void *ValueAtIndex;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFDictionaryRef *valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  v15 = *(const void **)(a1 + 80);
  if (v15)
  {
    v16 = __EntryNumberCreate(a2, v15);
    if (!v16)
    {
LABEL_13:
      CFRelease(v14);
      return 0;
    }
    v17 = v16;
    CFDictionaryAddValue(v14, CFSTR("skeletonID"), v16);
    CFRelease(v17);
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) >= 1)
  {
    v19 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v19);
      v21 = __EntryNumberCreate(a2, ValueAtIndex);
      if (!v21)
        break;
      v22 = v21;
      CFArrayAppendValue(Mutable, v21);
      CFRelease(v22);
      if (++v19 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 88)))
        goto LABEL_11;
    }
    CFRelease(Mutable);
    goto LABEL_13;
  }
LABEL_11:
  CFDictionaryAddValue(v14, CFSTR("joints"), Mutable);
  CFRelease(Mutable);
  valuePtr = C3DLibraryGetEntryID(a2, *(CFTypeRef *)(a1 + 72));
  v23 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFDictionarySetValue(v14, CFSTR("skinID"), v23);
  CFRelease(v23);
  return v14;
}

BOOL _C3DSkinnerFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFNumber *Value;
  void *TypeID;
  _QWORD *v26;
  NSObject *v27;
  const __CFArray *v28;
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v31;
  const __CFNumber *ValueAtIndex;
  void *v33;
  _QWORD *v34;
  const __CFNumber *v35;
  void *v36;
  _QWORD *v37;
  NSObject *v38;
  NSObject *v40;
  void *v41;
  uint8_t v42[16];

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DSkinnerSetOwnerNode_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    _C3DSceneFinalizeDeserialization_cold_3(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("skeletonID"));
  TypeID = (void *)C3DNodeGetTypeID();
  v26 = __EntryForEntryNumber(a2, Value, TypeID);
  if (!v26)
  {
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_DEFAULT, "Warning: Skinner deserialization: cannot find the specified skeleton", v42, 2u);
    }
  }
  C3DSkinnerSetSkeleton(a1, v26);
  v28 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("joints"));
  Count = CFArrayGetCount(v28);
  Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount(v28) >= 1)
  {
    v31 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v28, v31);
      v33 = (void *)C3DNodeGetTypeID();
      v34 = __EntryForEntryNumber(a2, ValueAtIndex, v33);
      if (!v34)
        break;
      CFArrayAppendValue(Mutable, v34);
      if (++v31 >= CFArrayGetCount(v28))
        goto LABEL_13;
    }
    v38 = scn_default_log();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinnerFinalizeDeserialization_cold_1();
      if (a4)
      {
LABEL_17:
        if (!*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      }
    }
    else if (a4)
    {
      goto LABEL_17;
    }
    CFRelease(Mutable);
    return 0;
  }
LABEL_13:
  C3DSkinnerSetJoints(a1, Mutable);
  CFRelease(Mutable);
  v35 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("skinID"));
  v36 = (void *)C3DSkinGetTypeID();
  v37 = __EntryForEntryNumber(a2, v35, v36);
  if (!v37)
  {
    v40 = scn_default_log();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinnerFinalizeDeserialization_cold_2();
      if (a4)
      {
LABEL_22:
        if (!*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      }
    }
    else if (a4)
    {
      goto LABEL_22;
    }
    v41 = (void *)C3DSkinCreate();
    C3DSkinnerSetSkin(a1, v41);
    CFRelease(v41);
    return v37 != 0;
  }
  C3DSkinnerSetSkin(a1, v37);
  return v37 != 0;
}

uint64_t _C3DSkinnerFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v18;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DSkinnerSetOwnerNode_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  C3DLibraryAddEntry(a2, *(const void **)(a1 + 72));
  C3DFillLibraryForSerialization(*(const void **)(a1 + 72), a2, a3);
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v15 = result;
      for (i = 0; i != v15; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), i);
        result = (uint64_t)C3DLibraryAddEntry(a2, ValueAtIndex);
      }
    }
  }
  v18 = *(const void **)(a1 + 80);
  if (v18)
    return (uint64_t)C3DLibraryAddEntry(a2, v18);
  return result;
}

CFNumberRef __EntryNumberCreate(uint64_t a1, const void *a2)
{
  CFDictionaryRef *EntryID;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  int valuePtr;

  EntryID = C3DLibraryGetEntryID(a1, a2);
  if (EntryID)
  {
    v3 = (int)EntryID;
    if ((unint64_t)EntryID >= 0x7FFFFFFF)
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
        __EntryNumberCreate_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    }
    valuePtr = v3;
    return CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  else
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      __EntryNumberCreate_cold_1();
    return 0;
  }
}

_QWORD *__EntryForEntryNumber(uint64_t a1, CFNumberRef number, void *a3)
{
  const void *RemappedID;
  NSObject *v7;
  NSObject *v8;
  int valuePtr;

  if (number)
  {
    valuePtr = 0;
    if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
    {
      RemappedID = (const void *)C3DLibraryGetRemappedID(a1, valuePtr, (uint64_t)a3);
      return C3DLibraryGetEntry(a1, a3, RemappedID);
    }
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      __EntryForEntryNumber_cold_2();
  }
  else
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      __EntryForEntryNumber_cold_1();
  }
  return 0;
}

__CFArray *_C3DSkinnerCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  const __CFArray *v37;
  CFIndex Count;
  uint64_t v39;
  uint64_t v40;
  CFStringRef v41;
  __CFDictionary *v42;
  uint64_t v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFStringRef v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFIndex v54;
  __CFArray *v55;
  uint64_t Attributes;
  int v57;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 1;
  valuePtr = 5;
  Attributes = C3DEntityGetAttributes(a1);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v8 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v57 = 2;
  valuePtr = 5;
  Attributes = a1 + 72;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v12 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("skin"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 2;
  valuePtr = 5;
  Attributes = a1 + 80;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v16 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("skeleton"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 2;
  valuePtr = 5;
  Attributes = a1 + 88;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v20 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("joints"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 3;
  Attributes = a1 + 192;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v24 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("meshCreated"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 3;
  Attributes = a1 + 193;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v28 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("bboxDirty"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 2;
  Attributes = a1 + 208;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v32 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("calculationMode"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 2;
  valuePtr = 5;
  Attributes = a1 + 200;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v36 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("skinnedMesh"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  v55 = Mutable;
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  v37 = *(const __CFArray **)(a1 + 88);
  if (v37)
  {
    Count = CFArrayGetCount(v37);
    if (Count >= 1)
    {
      v39 = 0;
      v40 = 0;
      v54 = Count;
      do
      {
        v41 = CFStringCreateWithFormat(0, 0, CFSTR("verticesJointsMatrices[%d]"), v40);
        v42 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v57 = 0;
        valuePtr = 11;
        Attributes = *(_QWORD *)(a1 + 112) + v39;
        v43 = a1;
        v44 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
        v46 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
        CFDictionarySetValue(v42, CFSTR("name"), v41);
        CFDictionarySetValue(v42, CFSTR("type"), v44);
        CFDictionarySetValue(v42, CFSTR("address"), v46);
        CFDictionarySetValue(v42, CFSTR("semantic"), v45);
        CFArrayAppendValue(v55, v42);
        CFRelease(v45);
        CFRelease(v42);
        CFRelease(v46);
        CFRelease(v44);
        CFRelease(v41);
        v47 = CFStringCreateWithFormat(0, 0, CFSTR("normalsJointsMatrices[%d]"), v40);
        v48 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v57 = 0;
        valuePtr = 11;
        Attributes = *(_QWORD *)(v43 + 120) + v39;
        v49 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        v50 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
        v51 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
        CFDictionarySetValue(v48, CFSTR("name"), v47);
        CFDictionarySetValue(v48, CFSTR("type"), v49);
        CFDictionarySetValue(v48, CFSTR("address"), v51);
        CFDictionarySetValue(v48, CFSTR("semantic"), v50);
        CFArrayAppendValue(v55, v48);
        CFRelease(v50);
        CFRelease(v48);
        CFRelease(v51);
        v52 = v49;
        a1 = v43;
        CFRelease(v52);
        CFRelease(v47);
        ++v40;
        v39 += 64;
      }
      while (v54 != v40);
    }
  }
  return v55;
}

uint64_t _C3DSkinnerEnumerateSubEntities(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 72);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

void _C3DSkinnerWillRemoveFromScene(uint64_t a1)
{
  free(*(void **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
}

uint64_t _C3DSkinnerSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return C3DSearchByID(*(const void **)(a1 + 72), (uint64_t)a2);
}

void _AppendC3DMatrix4x4(__CFString *a1, const __CFString *a2, float *a3)
{
  CFStringAppend(a1, a2);
  CFStringAppendFormat(a1, 0, CFSTR(" %f %f %f %f\n"), *a3, a3[1], a3[2], a3[3]);
  CFStringAppendFormat(a1, 0, CFSTR(" %f %f %f %f\n"), a3[4], a3[5], a3[6], a3[7]);
  CFStringAppendFormat(a1, 0, CFSTR(" %f %f %f %f\n"), a3[8], a3[9], a3[10], a3[11]);
  CFStringAppendFormat(a1, 0, CFSTR(" %f %f %f %f\n"), a3[12], a3[13], a3[14], a3[15]);
}

uint64_t _C3DSkinEnumerateSubEntities(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 88);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

uint64_t C3DSkinCreate()
{
  uint64_t Instance;

  if (C3DSkinGetTypeID_onceToken != -1)
    dispatch_once(&C3DSkinGetTypeID_onceToken, &__block_literal_global_87);
  Instance = C3DTypeCreateInstance_(C3DSkinGetTypeID_typeID, 0xE0uLL);
  C3DMatrix4x4MakeIdentity(Instance + 112);
  return Instance;
}

uint64_t C3DSkinCreateWith(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  const __CFString *Name;
  const void *v10;
  CFTypeRef v11;
  size_t v12;

  v8 = C3DSkinCreate();
  if (a4)
  {
    Name = (const __CFString *)C3DGeometryGetName((uint64_t)a4);
    C3DEntitySetName(v8, Name);
  }
  *(_WORD *)(v8 + 64) = a2;
  *(_QWORD *)(v8 + 80) = a1;
  *(_QWORD *)(v8 + 96) = C3DMalloc((uint64_t)a2 << 6);
  *(_QWORD *)(v8 + 104) = C3DMalloc((uint64_t)a2 << 6);
  v10 = *(const void **)(v8 + 88);
  if (v10 != a4)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v8 + 88) = 0;
    }
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    *(_QWORD *)(v8 + 88) = v11;
  }
  if (a2 == 1)
  {
    *(_QWORD *)(v8 + 72) = 0;
    *(_QWORD *)(v8 + 184) = 0;
    *(_QWORD *)(v8 + 192) = 0;
    *(_QWORD *)(v8 + 176) = 0;
  }
  else
  {
    v12 = 8 * a1 + 8;
    if (a3)
    {
      *(_QWORD *)(v8 + 72) = a3;
      *(_QWORD *)(v8 + 176) = C3DMalloc(v12);
      *(_QWORD *)(v8 + 184) = C3DMalloc(2 * a3);
      *(_QWORD *)(v8 + 192) = C3DMalloc(4 * a3);
    }
    else
    {
      *(_QWORD *)(v8 + 72) = 0;
      *(_QWORD *)(v8 + 176) = C3DMalloc(v12);
      *(_QWORD *)(v8 + 184) = C3DMalloc(0);
      *(_QWORD *)(v8 + 192) = 0;
    }
  }
  return v8;
}

uint64_t C3DSkinCreateWithSkinnableMesh(uint64_t a1, int a2)
{
  uint64_t v4;
  const void *PositionSource;
  uint64_t Count;
  const void *SourceWithSemanticAtIndex;
  unsigned __int8 *Content;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = C3DSkinCreate();
  PositionSource = C3DMeshGetPositionSource(a1, 1);
  Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, 5, 0, 1);
  if (SourceWithSemanticAtIndex)
  {
    Content = (unsigned __int8 *)C3DMeshSourceGetContent((uint64_t)SourceWithSemanticAtIndex);
    v10 = v9;
    v11 = C3DMeshGetSourceWithSemanticAtIndex(a1, 6, 0, 1);
    v12 = (uint64_t)v11;
    if (!v11)
    {
      *(_WORD *)(v4 + 200) = 1;
      v19 = Count;
      goto LABEL_35;
    }
    v13 = C3DMeshSourceGetContent((uint64_t)v11);
    v15 = HIWORD(v14);
    if (BYTE6(v14) == 1 || BYTE6(v14) == 21)
    {
      if ((_DWORD)v10)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = v14 & 0xFF000000000000;
        v21 = HIBYTE(v14);
        if (HIBYTE(v14) <= 1u)
          v22 = 1;
        else
          v22 = HIBYTE(v14);
        v23 = BYTE5(v14);
        while (1)
        {
          v24 = (float *)(v13 + v16);
          if (v20 == 0x1000000000000)
          {
            if (v21)
            {
              v25 = 0;
              v26 = v22;
              do
              {
                v27 = *v24++;
                if (v27 > 0.0)
                  ++v25;
                --v26;
              }
              while (v26);
              goto LABEL_23;
            }
          }
          else if (v21)
          {
            v25 = 0;
            v28 = v22;
            do
            {
              v29 = *(unsigned __int8 *)v24;
              v24 = (float *)((char *)v24 + 1);
              if (v29)
                ++v25;
              --v28;
            }
            while (v28);
            goto LABEL_23;
          }
          v25 = 0;
LABEL_23:
          if (v18 <= v25)
            v18 = v25;
          v19 += v25;
          ++v17;
          v16 += v23;
          if (v17 == v10)
            goto LABEL_32;
        }
      }
      v19 = 0;
      LOWORD(v18) = 0;
LABEL_32:
      *(_WORD *)(v4 + 200) = v18;
    }
    else
    {
      v30 = scn_default_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        C3DSkinCreateWithSkinnableMesh_cold_1(v30, v31, v32);
      v19 = 0;
    }
    if (v15 == 1 || v15 == 21)
    {
LABEL_35:
      *(_QWORD *)(v4 + 176) = C3DMalloc(8 * Count + 8);
      *(_WORD *)(v4 + 64) = a2;
      *(_QWORD *)(v4 + 72) = v19;
      *(_QWORD *)(v4 + 80) = Count;
      v33 = (uint64_t)a2 << 6;
      *(_QWORD *)(v4 + 96) = C3DMalloc(v33);
      *(_QWORD *)(v4 + 104) = C3DMalloc(v33);
      *(_QWORD *)(v4 + 184) = C3DMalloc(2 * v19);
      v34 = C3DMalloc(4 * v19);
      *(_QWORD *)(v4 + 192) = v34;
      if (v12)
      {
        v35 = C3DMeshSourceGetContent(v12);
        v38 = *(_QWORD *)(v4 + 176);
        if (Count >= 1)
        {
          v39 = 0;
          v40 = 0;
          v41 = v36 & 0xFF000000000000;
          v42 = BYTE5(v36);
          v43 = HIBYTE(v36);
          if (HIBYTE(v36) <= 1u)
            v43 = 1;
          v44 = HIBYTE(v36);
          do
          {
            *(_QWORD *)(v38 + 8 * v39) = v40;
            if (v41 == 0x1000000000000)
            {
              if (v44)
              {
                v45 = 0;
                do
                {
                  LODWORD(v37) = *(_DWORD *)(v35 + 4 * v45);
                  if (*(float *)&v37 > 0.0)
                  {
                    v46 = *(_QWORD *)(v4 + 192);
                    *(_WORD *)(*(_QWORD *)(v4 + 184) + 2 * v40) = Content[v45];
                    *(_DWORD *)(v46 + 4 * v40++) = LODWORD(v37);
                  }
                  ++v45;
                }
                while (v43 != v45);
              }
            }
            else if (v44)
            {
              v47 = (_BYTE *)v35;
              v48 = Content;
              v49 = v43;
              do
              {
                if (*v47)
                {
                  v50 = *(_QWORD *)(v4 + 192);
                  *(_WORD *)(*(_QWORD *)(v4 + 184) + 2 * v40) = *v48;
                  LOBYTE(v37) = *v47;
                  v37 = (double)*(unint64_t *)&v37 / 255.0;
                  *(float *)&v37 = v37;
                  *(_DWORD *)(v50 + 4 * v40++) = LODWORD(v37);
                }
                ++v48;
                ++v47;
                --v49;
              }
              while (v49);
            }
            ++v39;
            Content += BYTE5(v10);
            v35 += v42;
          }
          while (v39 != Count);
          goto LABEL_60;
        }
      }
      else
      {
        v38 = *(_QWORD *)(v4 + 176);
        if (Count >= 1)
        {
          v51 = 0;
          v52 = *(_QWORD *)(v4 + 184);
          do
          {
            *(_QWORD *)(v38 + 8 * v51) = v51;
            *(_WORD *)(v52 + 2 * v51) = *Content;
            v34[v51] = 1065353216;
            Content += BYTE5(v10);
            ++v51;
          }
          while (Count != v51);
          v40 = Count;
          goto LABEL_60;
        }
      }
      v40 = 0;
LABEL_60:
      *(_QWORD *)(v38 + 8 * Count) = v40;
      return v4;
    }
  }
  return 0;
}

uint64_t C3DSkinGetInverseBindMatricesPtr(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

void __computeInverseBindMatricesMultipliedByShapeMatrix(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 104) && *(__int16 *)(a1 + 64) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      C3DMatrix4x4Mult(a1 + 112, (float32x4_t *)(*(_QWORD *)(a1 + 96) + v2), (_OWORD *)(*(_QWORD *)(a1 + 104) + v2));
      ++v3;
      v2 += 64;
    }
    while (v3 < *(__int16 *)(a1 + 64));
  }
}

void C3DSkinCopyInverseBindMatricesPtr(uint64_t a1, void *__src)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 96))
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSkinCopyInverseBindMatricesPtr_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  memcpy(*(void **)(a1 + 96), __src, (uint64_t)*(__int16 *)(a1 + 64) << 6);
  __computeInverseBindMatricesMultipliedByShapeMatrix(a1);
}

void C3DSkinPackWeightAndIndices(size_t *a1)
{
  size_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  size_t v6;
  _WORD *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  __int16 v23;
  size_t *v24;
  void *v25;
  _QWORD v26[2];
  size_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1[9];
  if (v1)
  {
    v3 = a1[10];
    if (v1 != v3)
    {
      v4 = (_QWORD *)a1[22];
      v5 = a1[23];
      v6 = a1[24];
      v7 = malloc_type_calloc(2uLL, v1, 0xAD8FF4B2uLL);
      v8 = (float *)malloc_type_calloc(4uLL, a1[9], 0x8D81DCB3uLL);
      v26[1] = v26;
      v27 = a1;
      v29 = v4;
      v9 = *v4;
      MEMORY[0x1E0C80A78](v8);
      v11 = (char *)v26 - v10;
      if (v3 < 1)
      {
        v13 = 0;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = v29;
        v28 = v3;
        do
        {
          v15 = v14[++v12];
          if ((uint64_t)((unint64_t)(v15 - v9) << 48) >= 1)
          {
            v30 = v14[v12];
            v31 = v12;
            v16 = 0;
            if ((__int16)(v15 - v9) <= 1)
              v17 = 1;
            else
              v17 = (__int16)(v15 - v9);
            do
            {
              v18 = 0;
              if (v16)
              {
                while (*(float *)(v6 + 4 * (v16 + v9)) <= *(float *)(v6 + 4 * (*(_QWORD *)&v11[8 * v18] + v9)))
                {
                  if (v16 == ++v18)
                  {
                    v18 = v16;
                    goto LABEL_16;
                  }
                }
              }
              if (v16 != v18)
                memmove(&v11[8 * v18 + 8], &v11[8 * v18], 8 * (v16 - v18));
LABEL_16:
              *(_QWORD *)&v11[8 * v18] = v16++;
            }
            while (v16 != v17);
            v19 = (uint64_t *)v11;
            v3 = v28;
            v14 = v29;
            v15 = v30;
            v12 = v31;
            do
            {
              v20 = *v19++;
              v21 = v20 + v9;
              v22 = *(float *)(v6 + 4 * (v20 + v9));
              if (v22 <= 0.00000011921)
                break;
              v23 = *(_WORD *)(v5 + 2 * v21);
              v8[v13] = v22;
              v7[v13++] = v23;
              --v17;
            }
            while (v17);
          }
          v14[v12] = v13;
          v9 = v15;
        }
        while (v12 != v3);
      }
      v24 = v27;
      if (v13 >= (uint64_t)v27[9])
      {
        free(v7);
        free(v8);
      }
      else
      {
        free((void *)v27[23]);
        free((void *)v24[24]);
        if (v13)
        {
          v24[23] = (size_t)malloc_type_realloc(v7, 2 * v13, 0x1000040BDFB0063uLL);
          v25 = malloc_type_realloc(v8, 4 * v13, 0x100004052888210uLL);
        }
        else
        {
          free(v7);
          free(v8);
          v25 = 0;
          v24[23] = 0;
        }
        v24[24] = (size_t)v25;
        v24[9] = v13;
      }
    }
  }
}

_QWORD *C3DSkinGetVertexWeightsPointers(_QWORD *result, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  if (a2)
    *a2 = result[22];
  if (a3)
    *a3 = result[23];
  if (a4)
    *a4 = result[24];
  return result;
}

uint64_t C3DSkinGetWeightsCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 72);
}

__n128 C3DSkinSetDefaultShapeMatrix(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 144) = a2[2];
  *(_OWORD *)(a1 + 160) = v4;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v3;
  __computeInverseBindMatricesMultipliedByShapeMatrix(a1);
  return result;
}

uint64_t C3DSkinGetDefaultShapeMatrix(uint64_t a1)
{
  return a1 + 112;
}

uint64_t C3DSkinGetJointsCount(uint64_t a1)
{
  return *(__int16 *)(a1 + 64);
}

void __CreateIndexedJointsWeightsSourcesIfNeeded(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Mutable;
  uint64_t v12;
  char *Content;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (!*(_QWORD *)(a1 + 224))
  {
    v10 = *(_QWORD *)(a1 + 80);
    Mutable = C3DMeshSourceCreateMutable(0, 5, v10, 4, 16);
    C3DMeshSourceMakeImmutable(Mutable);
    if (*(__int16 *)(a1 + 200) <= 1)
    {
      Content = (char *)C3DMeshSourceGetContent(Mutable);
      v15 = v19;
      v12 = 0;
    }
    else
    {
      v12 = C3DMeshSourceCreateMutable(0, 6, v10, 4, 21);
      C3DMeshSourceMakeImmutable(v12);
      Content = (char *)C3DMeshSourceGetContent(Mutable);
      v15 = v14;
      if (v12)
      {
        v16 = (char *)C3DMeshSourceGetContent(v12);
        v18 = v17;
LABEL_10:
        C3DSkinFillJointWeightsBuffers((_QWORD *)a1, Content, v15, v16, v18);
        *(_QWORD *)(a1 + 216) = v12;
        *(_QWORD *)(a1 + 224) = Mutable;
        return;
      }
    }
    v16 = 0;
    v18 = 0;
    goto LABEL_10;
  }
}

void C3DSkinFillJointWeightsBuffers(_QWORD *a1, char *__b, uint64_t a3, char *a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  float v28;
  int v29;
  float v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  _BOOL4 v34;
  uint64_t v35;
  float v36;
  uint64_t i;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  char v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t buf[4];
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  _QWORD v74[2];
  float v75[4];
  uint64_t v76;

  v8 = a1;
  v76 = *MEMORY[0x1E0C80C00];
  v9 = a1[10];
  memset(__b, 255, (4 * v9));
  v10 = BYTE5(a5);
  if (a4)
  {
    bzero(a4, v9 * BYTE5(a5));
    v11 = (_DWORD)v9 == (_DWORD)a5;
  }
  else
  {
    v11 = 1;
  }
  v12 = !v11;
  if ((_DWORD)v9 != (_DWORD)a3 || v12 != 0)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DSkinFillJointWeightsBuffers_cold_2(v14);
  }
  v15 = v8[23];
  v61 = v8[22];
  v16 = v8[24];
  v74[0] = 0;
  v74[1] = 0;
  if ((_DWORD)v9)
  {
    v17 = 0;
    v18 = 0;
    v58 = v9;
    v59 = BYTE5(a3);
    v19 = 0;
    v65 = v16;
    v54 = v8;
    v55 = a4;
    v60 = v10;
    while (1)
    {
      v20 = *(_QWORD *)(v61 + 8 * v17);
      if (v20 < 0
        || ((v64 = v17 + 1, v21 = *(_QWORD *)(v61 + 8 * (v17 + 1)), v22 = v8[9], v20 <= v22)
          ? (v23 = v21 <= v22)
          : (v23 = 0),
            !v23))
      {
        if ((C3DSkinFillJointWeightsBuffers_done & 1) == 0)
        {
          C3DSkinFillJointWeightsBuffers_done = 1;
          v51 = scn_default_log();
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            C3DSkinFillJointWeightsBuffers_cold_1(v51, v52, v53);
        }
        return;
      }
      v24 = (v59 * v17);
      v63 = v21 - v20;
      if (v21 <= v20)
        break;
      v56 = v17;
      v25 = 0;
      v57 = v19;
      v26 = &a4[v19];
      v27 = &__b[v24];
      v28 = 0.0;
      do
      {
        v29 = *(__int16 *)(v15 + 2 * v20);
        if (v29 <= 255)
        {
          v30 = *(float *)(v16 + 4 * v20);
          if (v30 > 0.0039216)
          {
            if (v25 < 4)
            {
              v27[v25] = v29;
              v75[v25] = v30;
              v28 = v28 + v30;
              ++v25;
            }
            else
            {
              if ((v18 & 1) == 0)
              {
                v31 = v24;
                v32 = v27;
                v33 = scn_default_log();
                v34 = os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
                v27 = v32;
                v24 = v31;
                v16 = v65;
                if (v34)
                {
                  *(_DWORD *)buf = 134218752;
                  v67 = v63;
                  v68 = 1024;
                  v69 = 4;
                  v70 = 1024;
                  v71 = v56;
                  v72 = 1024;
                  v73 = 4;
                  _os_log_impl(&dword_1DCCB8000, v33, OS_LOG_TYPE_INFO, "Info: Too many influencing joints (%ld > %d) on the vertex #%u, will cap to %d and renormalize", buf, 0x1Eu);
                  v27 = v32;
                  v24 = v31;
                  v16 = v65;
                }
              }
              v35 = 0;
              v36 = v75[0];
              for (i = 1; i != 4; ++i)
              {
                if (v36 > v75[i])
                {
                  v35 = i;
                  v36 = v75[i];
                }
              }
              if (v30 > v36)
              {
                v28 = v30 + (float)(v28 - v36);
                v75[v35] = v30;
                v27[v35] = v29;
              }
              v18 = 1;
            }
          }
        }
        ++v20;
      }
      while (v20 != v21);
      if (v28 > 0.0 && v28 != 1.0 && v25 >= 1)
      {
        v40 = v75;
        v41 = v25;
        do
        {
          *v40 = *v40 / v28;
          ++v40;
          --v41;
        }
        while (v41);
      }
      a4 = v55;
      v19 = v57;
      if (v55 && v25 >= 1)
      {
        v42 = 0;
        v43 = 0;
        do
        {
          v44 = (int)rintf(v75[v42] * 255.0);
          if (v44 >= 255)
            v44 = 255;
          v45 = v44 & ~(v44 >> 31);
          v26[v42] = v45;
          v43 += v45;
          ++v42;
        }
        while (v25 != v42);
        while (1)
        {
LABEL_63:
          if (v43 == 255)
            break;
          v46 = v25;
          v47 = v26;
          while (1)
          {
            v48 = *v47;
            if (v43 > 254)
              break;
            if (v48 != 255)
            {
              v49 = 1;
              v50 = 1;
              goto LABEL_62;
            }
LABEL_59:
            ++v47;
            if (!--v46)
              goto LABEL_63;
          }
          if (!*v47)
            goto LABEL_59;
          v50 = -1;
          v49 = -1;
LABEL_62:
          *v47 = v48 + v49;
          v43 += v50;
        }
      }
      if (v25 >= 1)
        ++*((_DWORD *)v74 + v25 - 1);
      v8 = v54;
      if (v25 <= 3)
        goto LABEL_69;
LABEL_70:
      v19 += v60;
      v17 = v64;
      if (v64 == v58)
        return;
    }
    v25 = 0;
LABEL_69:
    bzero(&__b[v25 + v24], 4 - v25);
    bzero(&v75[v25], 16 - 4 * v25);
    v16 = v65;
    goto LABEL_70;
  }
}

uint64_t C3DSkinGetIndexedBoneIndices(uint64_t a1)
{
  __CreateIndexedJointsWeightsSourcesIfNeeded(a1);
  return *(_QWORD *)(a1 + 224);
}

uint64_t C3DSkinGetIndexedBoneWeights(uint64_t a1)
{
  __CreateIndexedJointsWeightsSourcesIfNeeded(a1);
  return *(_QWORD *)(a1 + 216);
}

uint64_t C3DSkinGetMaxInfluencesPerVertex(uint64_t a1)
{
  return *(__int16 *)(a1 + 200);
}

uint64_t C3DSkinSetMaxInfluencesPerVertex(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 200) = a2;
  return result;
}

CFTypeRef C3DSkinSetInfluencingMorpher(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 208);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 208) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 208) = result;
  }
  return result;
}

id _C3DSkinCFFinalize(_QWORD *a1)
{
  uint64_t SharedInstance;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationSkinWillDie"), a1, 0, 1u);
  v3 = (void *)a1[12];
  if (v3)
    free(v3);
  v4 = (void *)a1[13];
  if (v4)
    free(v4);
  v5 = (void *)a1[24];
  if (v5)
    free(v5);
  v6 = (void *)a1[22];
  if (v6)
    free(v6);
  v7 = (void *)a1[23];
  if (v7)
    free(v7);
  if (a1[26])
    C3DSkinSetInfluencingMorpher((uint64_t)a1, 0);
  v8 = (const void *)a1[11];
  if (v8)
  {
    CFRelease(v8);
    a1[11] = 0;
  }
  v9 = (const void *)a1[28];
  if (v9)
  {
    CFRelease(v9);
    a1[28] = 0;
  }
  v10 = (const void *)a1[27];
  if (v10)
  {
    CFRelease(v10);
    a1[27] = 0;
  }
  return C3DEntityCFFinalize((uint64_t)a1);
}

__CFString *_C3DSkinCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t Name;
  float *v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DEntityGetName(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DSkin %p name:%@ joint:%d weight:%d vertexCount:%d\n"), a1, Name, *(__int16 *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  CFStringAppendFormat(Mutable, 0, CFSTR("  maxInf:%d morpher:%p\n"), *(__int16 *)(a1 + 200), *(_QWORD *)(a1 + 208));
  _AppendC3DMatrix4x4(Mutable, CFSTR("defaultShapeMatrix\n"), (float *)(a1 + 112));
  v4 = *(float **)(a1 + 96);
  if (v4)
    _AppendC3DMatrix4x4(Mutable, CFSTR("inverseBindMatrix"), v4);
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

BOOL _C3DSkinInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *Value;
  const __CFNumber *v16;
  _WORD *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  const __CFData *v31;
  const __CFData *v32;
  NSObject *v33;
  NSObject *v34;
  CFErrorRef MalformedDocumentError;
  int v36;
  const __CFDictionary *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) == 0)
  {
    v19 = scn_default_log();
    result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DSkinInitWithPropertyList_cold_6(v19, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  if (!a1)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("jointsCount"));
  if (!Value)
  {
    v28 = scn_default_log();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinInitWithPropertyList_cold_1();
      if (!a4)
        return 0;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (!CFNumberGetValue(Value, kCFNumberShortType, (void *)(a1 + 64)))
  {
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinInitWithPropertyList_cold_2();
      if (!a4)
        return 0;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_QWORD *)(a1 + 96) = C3DMalloc((uint64_t)*(__int16 *)(a1 + 64) << 6);
  *(_QWORD *)(a1 + 104) = C3DMalloc((uint64_t)*(__int16 *)(a1 + 64) << 6);
  v16 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("maxInfluences"));
  if (v16)
  {
    v17 = (_WORD *)(a1 + 200);
    if (CFNumberGetValue(v16, kCFNumberShortType, (void *)(a1 + 200)))
      goto LABEL_23;
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v36 = 138412290;
      v37 = a2;
      _os_log_impl(&dword_1DCCB8000, v18, OS_LOG_TYPE_DEFAULT, "Warning: Unable to read the maxInfluences in the skin %@, defaulting to 4. Please re-convert your assets.", (uint8_t *)&v36, 0xCu);
    }
  }
  else
  {
    v30 = scn_default_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v36 = 138412290;
      v37 = a2;
      _os_log_impl(&dword_1DCCB8000, v30, OS_LOG_TYPE_DEFAULT, "Warning: No maxInfluences in the skin %@, defaulting to 4. Please re-convert your assets.", (uint8_t *)&v36, 0xCu);
    }
    v17 = (_WORD *)(a1 + 200);
  }
  *v17 = 4;
LABEL_23:
  v31 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("inverseBindMatrices"));
  if (v31)
  {
    C3DInitC3DFloatArrayWithSerializedData(v31, 16 * *(__int16 *)(a1 + 64), *(_DWORD **)(a1 + 96));
    v32 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("defaultShapeMatrix"));
    if (v32)
    {
      C3DInitC3DFloatArrayWithSerializedData(v32, 16, (_DWORD *)(a1 + 112));
      __computeInverseBindMatricesMultipliedByShapeMatrix(a1);
      return 1;
    }
    v34 = scn_default_log();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinInitWithPropertyList_cold_4();
      if (!a4)
        return 0;
      goto LABEL_31;
    }
  }
  else
  {
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      _C3DSkinInitWithPropertyList_cold_3();
      if (!a4)
        return 0;
      goto LABEL_31;
    }
  }
LABEL_30:
  if (!a4)
    return 0;
LABEL_31:
  if (*a4)
    return 0;
  MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
  result = 0;
  *a4 = MalformedDocumentError;
  return result;
}

__CFDictionary *_C3DSkinCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *v5;
  const void *v6;
  uint64_t v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFDataRef v17;
  CFDataRef v18;
  CFDataRef v19;
  CFDataRef v20;
  uint64_t v21;
  UInt8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  CFDataRef v28;
  CFDataRef v29;
  CFDataRef v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFDataRef v37;
  uint8_t v39;
  _BYTE v40[7];
  CFDictionaryRef *valuePtr;

  v5 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 80);
  v6 = *(const void **)(a1 + 88);
  if (v6)
  {
    valuePtr = C3DLibraryGetEntryID(a2, v6);
    v8 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    CFDictionarySetValue(v5, CFSTR("baseMeshID"), v8);
    CFRelease(v8);
  }
  v9 = CFNumberCreate(0, kCFNumberCFIndexType, (const void *)(a1 + 80));
  if (!v9)
    goto LABEL_26;
  v10 = v9;
  CFDictionarySetValue(v5, CFSTR("vertexCount"), v9);
  CFRelease(v10);
  v11 = CFNumberCreate(0, kCFNumberShortType, (const void *)(a1 + 64));
  if (!v11)
    goto LABEL_26;
  v12 = v11;
  CFDictionarySetValue(v5, CFSTR("jointsCount"), v11);
  CFRelease(v12);
  v13 = CFNumberCreate(0, kCFNumberCFIndexType, (const void *)(a1 + 72));
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  CFDictionarySetValue(v5, CFSTR("weightsCount"), v13);
  CFRelease(v14);
  v15 = CFNumberCreate(0, kCFNumberShortType, (const void *)(a1 + 200));
  if (!v15)
    goto LABEL_26;
  v16 = v15;
  CFDictionarySetValue(v5, CFSTR("maxInfluences"), v15);
  CFRelease(v16);
  v17 = C3DCreateSerializedDataFromC3DFloatBuffer(*(_QWORD *)(a1 + 96), 16 * *(__int16 *)(a1 + 64));
  if (!v17)
    goto LABEL_26;
  v18 = v17;
  CFDictionarySetValue(v5, CFSTR("inverseBindMatrices"), v17);
  CFRelease(v18);
  v19 = C3DCreateSerializedDataFromC3DFloatBuffer(a1 + 112, 16);
  if (!v19)
    goto LABEL_26;
  v20 = v19;
  CFDictionarySetValue(v5, CFSTR("defaultShapeMatrix"), v19);
  CFRelease(v20);
  v21 = 4 * v7 + 4;
  v22 = (UInt8 *)C3DMalloc(v21);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 176);
    v25 = v7 + 1;
    do
    {
      if (!v24)
        goto LABEL_17;
      if (*(uint64_t *)(v24 + 8 * v23) >= 0x80000000)
      {
        v26 = scn_default_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          _C3DSkinCopyPropertyList_cold_1(&v39, v40, v26);
      }
      v24 = *(_QWORD *)(a1 + 176);
      if (v24)
        v27 = *(_QWORD *)(v24 + 8 * v23);
      else
LABEL_17:
        LODWORD(v27) = 0;
      *(_DWORD *)&v22[4 * v23++] = v27;
    }
    while (v25 != v23);
    v28 = CFDataCreate(0, v22, v21);
    goto LABEL_21;
  }
  v28 = CFDataCreate(0, v22, 4 * v7 + 4);
  if (v22)
LABEL_21:
    free(v22);
  if (!v28)
    goto LABEL_26;
  CFDictionarySetValue(v5, CFSTR("vertexWeightIndices"), v28);
  CFRelease(v28);
  v29 = CFDataCreate(0, *(const UInt8 **)(a1 + 184), 2 * *(_QWORD *)(a1 + 72));
  if (!v29)
    goto LABEL_26;
  v30 = v29;
  CFDictionarySetValue(v5, CFSTR("jointsForVertexWeights"), v29);
  CFRelease(v30);
  v31 = 4 * *(_QWORD *)(a1 + 72);
  v32 = (char *)C3DMalloc(v31);
  v33 = *(char **)(a1 + 192);
  v34 = *(_QWORD *)(a1 + 72);
  v35 = C3DSizeOfBaseType(1);
  v36 = C3DSizeOfBaseType(1);
  if (!C3DConvertToPlatformIndependentData(v33, v32, v31, v31, 1, 1, v34, v35, v36))
  {
LABEL_26:
    v37 = v5;
    v5 = 0;
    goto LABEL_27;
  }
  v37 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v32, v31, 0);
  CFDictionarySetValue(v5, CFSTR("vertexWeights"), v37);
LABEL_27:
  CFRelease(v37);
  return v5;
}

uint64_t _C3DSkinFinalizeDeserialization(_QWORD *a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFNumber *Value;
  uint64_t v17;
  uint64_t TypeID;
  uint64_t RemappedID;
  const void *v20;
  void *v21;
  const void *Entry;
  uint64_t v23;
  uint64_t Mesh;
  const void *PositionSource;
  uint64_t Count;
  const __CFNumber *v27;
  const __CFNumber *v28;
  const __CFData *v29;
  const __CFData *v30;
  UInt8 *v31;
  _QWORD *v32;
  uint64_t v33;
  UInt8 *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  const __CFData *v40;
  const __CFData *v41;
  const __CFData *v42;
  char *BytePtr;
  char *v44;
  CFIndex Length;
  CFIndex v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  uint64_t valuePtr;
  CFRange v56;
  CFRange v57;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("baseMeshID"));
  if (Value)
  {
    valuePtr = 0;
    if (!CFNumberGetValue(Value, kCFNumberLongType, &valuePtr))
      return 0;
    v17 = valuePtr;
    TypeID = C3DGeometryGetTypeID();
    RemappedID = C3DLibraryGetRemappedID(a2, v17, TypeID);
    if (!RemappedID)
    {
      v38 = scn_default_log();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        _C3DSkinFinalizeDeserialization_cold_5(&valuePtr, v38);
        if (!a4)
          return 0;
      }
      else if (!a4)
      {
        return 0;
      }
      if (!*a4)
        *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      return 0;
    }
    v20 = (const void *)RemappedID;
    v21 = (void *)C3DGeometryGetTypeID();
    Entry = C3DLibraryGetEntry(a2, v21, v20);
    v23 = (uint64_t)Entry;
    if (Entry)
      Entry = CFRetain(Entry);
    a1[11] = Entry;
    Mesh = C3DGeometryGetMesh(v23);
    PositionSource = C3DMeshGetPositionSource(Mesh, 1);
    Count = C3DMeshSourceGetCount((uint64_t)PositionSource);
    a1[10] = Count;
  }
  else
  {
    v27 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("vertexCount"));
    if (!CFNumberGetValue(v27, kCFNumberLongType, a1 + 10))
      return 0;
    Count = a1[10];
  }
  v28 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("weightsCount"));
  if (!v28 || !CFNumberGetValue(v28, kCFNumberCFIndexType, a1 + 9))
  {
    v36 = scn_default_log();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      _C3DSkinFinalizeDeserialization_cold_1();
    goto LABEL_21;
  }
  a1[22] = C3DMalloc(8 * Count + 8);
  a1[23] = C3DMalloc(2 * a1[9]);
  a1[24] = C3DMalloc(4 * a1[9]);
  v29 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("vertexWeightIndices"));
  if (!v29)
    return 0;
  v30 = v29;
  v31 = (UInt8 *)C3DMalloc(4 * Count + 4);
  v56.location = 0;
  v56.length = 4 * Count + 4;
  CFDataGetBytes(v30, v56, v31);
  if (Count < 0)
  {
    if (!v31)
      goto LABEL_32;
  }
  else
  {
    v32 = (_QWORD *)a1[22];
    v33 = Count + 1;
    v34 = v31;
    do
    {
      v35 = *(int *)v34;
      v34 += 4;
      *v32++ = v35;
      --v33;
    }
    while (v33);
  }
  free(v31);
LABEL_32:
  v40 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("jointsForVertexWeights"));
  if (v40)
  {
    v57.length = 2 * a1[9];
    v57.location = 0;
    CFDataGetBytes(v40, v57, (UInt8 *)a1[23]);
    v41 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("vertexWeights"));
    if (v41)
    {
      v42 = v41;
      BytePtr = (char *)CFDataGetBytePtr(v41);
      v44 = (char *)a1[24];
      Length = CFDataGetLength(v42);
      v46 = CFDataGetLength(v42);
      v47 = a1[9];
      v37 = 1;
      v48 = C3DSizeOfBaseType(1);
      v49 = C3DSizeOfBaseType(1);
      if (C3DConvertFromPlatformIndependentData(BytePtr, v44, Length, v46, 1u, 1, v47, v48, v49))
        return v37;
      v50 = scn_default_log();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        _C3DSkinFinalizeDeserialization_cold_4(v50, v51, v52);
    }
    else
    {
      v54 = scn_default_log();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        _C3DSkinFinalizeDeserialization_cold_3();
    }
  }
  else
  {
    v53 = scn_default_log();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      _C3DSkinFinalizeDeserialization_cold_2();
  }
LABEL_21:
  if (!a4 || *a4)
    return 0;
  v37 = 0;
  *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
  return v37;
}

_QWORD *_C3DSkinFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  _QWORD *result;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DSkinnerUpdateJointsAndBoundingBox_cold_7(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(const void **)(a1 + 88);
  if (v14)
  {
    C3DLibraryAddEntry(a2, v14);
    C3DFillLibraryForSerialization(*(const void **)(a1 + 88), a2, a3);
  }
  result = *(_QWORD **)(a1 + 208);
  if (result)
    return C3DFillLibraryForSerialization(result, a2, a3);
  return result;
}

__CFArray *_C3DSkinCopyInstanceVariables(_QWORD *a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFArray *v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFDictionary *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  CFStringRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFStringRef v49;
  __CFDictionary *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFStringRef v54;
  __CFDictionary *v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  _QWORD *v60;
  uint64_t v61;
  __CFArray *theArray;
  _QWORD *v63;
  int v64;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v64 = 0;
  valuePtr = 14;
  v63 = a1 + 8;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("jointsCount"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v64 = 0;
  valuePtr = 2;
  v63 = a1 + 9;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("weightsCount"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v64 = 0;
  valuePtr = 2;
  v63 = a1 + 10;
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v12, CFSTR("name"), CFSTR("vertexCount"));
  v16 = Mutable;
  CFDictionarySetValue(v12, CFSTR("type"), v13);
  CFDictionarySetValue(v12, CFSTR("address"), v15);
  CFDictionarySetValue(v12, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v15);
  CFRelease(v13);
  v60 = a1;
  if (a1[12])
  {
    v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v64 = 0;
    valuePtr = 11;
    v63 = (_QWORD *)a1[12];
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
    v20 = CFNumberCreate(0, kCFNumberLongType, &v63);
    CFDictionarySetValue(v17, CFSTR("name"), CFSTR("inverseBindMatrices"));
    CFDictionarySetValue(v17, CFSTR("type"), v18);
    CFDictionarySetValue(v17, CFSTR("address"), v20);
    CFDictionarySetValue(v17, CFSTR("semantic"), v19);
    CFArrayAppendValue(v16, v17);
    CFRelease(v19);
    CFRelease(v17);
    CFRelease(v20);
    CFRelease(v18);
  }
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v22 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v64 = 0;
  valuePtr = 11;
  v63 = a1 + 14;
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v25 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("defaultShapeMatrix"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(v16, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v26 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v21);
  v64 = 0;
  valuePtr = 14;
  v63 = a1 + 25;
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v29 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v26, CFSTR("name"), CFSTR("maxInfluencesPerVertex"));
  CFDictionarySetValue(v26, CFSTR("type"), v27);
  CFDictionarySetValue(v26, CFSTR("address"), v29);
  CFDictionarySetValue(v26, CFSTR("semantic"), v28);
  CFArrayAppendValue(v16, v26);
  CFRelease(v28);
  CFRelease(v26);
  CFRelease(v29);
  CFRelease(v27);
  v30 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v21);
  v64 = 2;
  valuePtr = 5;
  v63 = a1 + 26;
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
  v33 = CFNumberCreate(0, kCFNumberLongType, &v63);
  CFDictionarySetValue(v30, CFSTR("name"), CFSTR("influencingMorpher"));
  CFDictionarySetValue(v30, CFSTR("type"), v31);
  CFDictionarySetValue(v30, CFSTR("address"), v33);
  CFDictionarySetValue(v30, CFSTR("semantic"), v32);
  theArray = v16;
  CFArrayAppendValue(v16, v30);
  CFRelease(v32);
  v34 = v30;
  v35 = a1;
  CFRelease(v34);
  CFRelease(v33);
  CFRelease(v31);
  if (a1[22])
  {
    v36 = a1[10];
    if (v36 >= 1)
    {
      v37 = 0;
      for (i = 0; i != v36; ++i)
      {
        v39 = CFStringCreateWithFormat(0, 0, CFSTR("vertexWeightIndices[%d]"), i);
        v40 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v64 = 0;
        valuePtr = 2;
        v63 = (_QWORD *)(v35[22] + v37);
        v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
        v43 = CFNumberCreate(0, kCFNumberLongType, &v63);
        CFDictionarySetValue(v40, CFSTR("name"), v39);
        CFDictionarySetValue(v40, CFSTR("type"), v41);
        CFDictionarySetValue(v40, CFSTR("address"), v43);
        CFDictionarySetValue(v40, CFSTR("semantic"), v42);
        CFArrayAppendValue(theArray, v40);
        v44 = v42;
        v35 = v60;
        CFRelease(v44);
        CFRelease(v40);
        CFRelease(v43);
        CFRelease(v41);
        CFRelease(v39);
        v37 += 8;
      }
    }
  }
  if (v35[24])
  {
    v45 = v35;
    if (v35[23])
    {
      if ((uint64_t)v35[9] >= 1)
      {
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v61 = v35[9];
        do
        {
          v49 = CFStringCreateWithFormat(0, 0, CFSTR("vertexWeights[%d]"), v48);
          v50 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v64 = 0;
          valuePtr = 1;
          v63 = (_QWORD *)(v45[24] + v46);
          v51 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          v52 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
          v53 = CFNumberCreate(0, kCFNumberLongType, &v63);
          CFDictionarySetValue(v50, CFSTR("name"), v49);
          CFDictionarySetValue(v50, CFSTR("type"), v51);
          CFDictionarySetValue(v50, CFSTR("address"), v53);
          CFDictionarySetValue(v50, CFSTR("semantic"), v52);
          CFArrayAppendValue(theArray, v50);
          CFRelease(v52);
          CFRelease(v50);
          CFRelease(v53);
          CFRelease(v51);
          CFRelease(v49);
          v54 = CFStringCreateWithFormat(0, 0, CFSTR("jointsForVertexWeights[%d]"), v48);
          v55 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v64 = 0;
          valuePtr = 14;
          v63 = (_QWORD *)(v45[23] + v47);
          v56 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          v57 = CFNumberCreate(0, kCFNumberSInt32Type, &v64);
          v58 = CFNumberCreate(0, kCFNumberLongType, &v63);
          CFDictionarySetValue(v55, CFSTR("name"), v54);
          CFDictionarySetValue(v55, CFSTR("type"), v56);
          CFDictionarySetValue(v55, CFSTR("address"), v58);
          CFDictionarySetValue(v55, CFSTR("semantic"), v57);
          CFArrayAppendValue(theArray, v55);
          CFRelease(v57);
          CFRelease(v55);
          CFRelease(v58);
          CFRelease(v56);
          CFRelease(v54);
          ++v48;
          v47 += 2;
          v46 += 4;
        }
        while (v61 != v48);
      }
    }
  }
  return theArray;
}

uint64_t _C3DSkinSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return C3DSearchByID(*(const void **)(a1 + 208), (uint64_t)a2);
}

const void *C3DIOCreateUnzippedData(uint64_t a1)
{
  C3DIONSZipFileArchive *v1;
  C3DIONSZipFileArchive *v2;
  id v3;
  id v4;
  const void *v5;

  v1 = -[C3DIONSZipFileArchive initWithData:options:error:]([C3DIONSZipFileArchive alloc], "initWithData:options:error:", a1, 0, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = -[C3DIONSZipFileArchive entryNames](v1, "entryNames");
  if (objc_msgSend(v3, "count"))
  {
    v4 = -[C3DIONSZipFileArchive contentsForEntryName:](v2, "contentsForEntryName:", objc_msgSend(v3, "objectAtIndex:", 0));
    v5 = v4;
    if (v4)
      CFRetain(v4);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

const void *C3DIOCreateZippedData(uint64_t a1)
{
  C3DIONSZipFileArchive *v2;
  uint64_t v3;
  C3DIONSZipFileArchive *v4;
  C3DIONSZipFileArchive *v5;
  id v6;
  const void *v7;

  v2 = [C3DIONSZipFileArchive alloc];
  v3 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", CFSTR("contents"));
  v4 = -[C3DIONSZipFileArchive initWithEntryNames:contents:properties:options:](v2, "initWithEntryNames:contents:properties:options:", v3, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", a1, CFSTR("contents")), 0, 0);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = -[C3DIONSZipFileArchive archiveData](v4, "archiveData");
  v7 = v6;
  if (v6)
    CFRetain(v6);

  return v7;
}

uint64_t _openFile(void *a1)
{
  const char *v1;
  int v3;
  unsigned int v4;
  stat v6;

  memset(&v6, 0, sizeof(v6));
  v1 = (const char *)objc_msgSend(a1, "fileSystemRepresentation");
  if (!stat(v1, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1)
  {
    v3 = open(v1, 0, 511);
    if ((v3 & 0x80000000) == 0)
    {
      v4 = v3;
      if (!fstat(v3, &v6) && (v6.st_mode & 0xF000) == 0x8000 && v6.st_size >= 1)
        return v4;
      close(v4);
    }
  }
  return -1;
}

uLong _crcFromBytes(const Bytef *a1, uInt a2)
{
  uLong v4;

  v4 = crc32(0, 0, 0);
  return crc32(v4, a1, a2);
}

C3D::RenderPass *C3D::HDRFrameLuminancePass::HDRFrameLuminancePass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)result = off_1EA599F68;
  *((_QWORD *)result + 30) = a4;
  return result;
}

const char *C3D::HDRFrameLuminancePass::name(C3D::HDRFrameLuminancePass *this)
{
  return "HDRFrameLuminancePass";
}

uint64_t C3D::HDRFrameLuminancePass::setup(C3D::HDRFrameLuminancePass *this)
{
  C3D::Pass *v1;
  uint64_t result;

  v1 = this;
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(v1, 1u);
  v1 = (C3D::Pass *)((char *)v1 + 32);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex(v1, 0) + 8) = "COLOR";
  result = C3D::PassDescriptor::outputAtIndex(v1, 0);
  *(_QWORD *)(result + 8) = "FrameLuminance";
  *(_BYTE *)(result + 65) = 0;
  *(_WORD *)(result + 28) = 25;
  *(_DWORD *)(result + 16) = 16777472;
  *(_BYTE *)(result + 30) = 9;
  return result;
}

void C3D::HDRFrameLuminancePass::compile(C3D::HDRFrameLuminancePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::HDRFrameLuminancePass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 31) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A528;
    *((_QWORD *)this + 31) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, (uint64_t)v7);
    v8 = *((_QWORD *)this + 31);
    *((_QWORD *)&v13 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v14 = 25;
    *((_QWORD *)&v15 + 1) = CFSTR("scn_draw_fullscreen_triangle_VR_uv_vertex");
    *(_QWORD *)&v16 = CFSTR("scn_hdr_luminance_frag");
    v9 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v12);
    v10 = *(void **)(v8 + 16);
    if (v10 != (void *)v9)
    {
      v11 = v9;
      if (v10)

      *(_QWORD *)(v8 + 16) = v11;
    }
  }
}

uint64_t C3D::HDRFrameLuminancePass::execute(C3D::Pass *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  __int128 v7;

  v3 = *a2;
  v4 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 31) + 16), "state", 0x3F8000003F800000, 0);
  if (*(_QWORD *)(v3 + 3376) != v4)
  {
    *(_QWORD *)(v3 + 3376) = v4;
    objc_msgSend(*(id *)(v3 + 3392), "setRenderPipelineState:", v4);
  }
  v5 = C3D::Pass::inputTextureAtIndex(a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v5, 0);
  SCNMTLRenderCommandEncoder::setFragmentBuffer(v3, *(_QWORD *)(*((_QWORD *)a1 + 30) + 40), *(_QWORD *)(*((_QWORD *)a1 + 30) + 48), 0);
  SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v3, &v7, 0x10uLL, 0);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v3);
}

void C3D::HDRFrameLuminancePassResource::~HDRFrameLuminancePassResource(C3D::HDRFrameLuminancePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A528;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A528;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

BOOL _C3DSourceAccessorInitWithPropertyList(_WORD *a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  const __CFNumber *Value;
  Boolean v8;
  NSObject *v9;
  _BOOL8 result;
  NSObject *v11;
  const __CFNumber *v12;
  NSObject *v13;
  const __CFNumber *v14;
  Boolean v15;
  NSObject *v16;
  const __CFNumber *v17;
  NSObject *v18;
  const __CFNumber *v19;
  NSObject *v20;
  CFErrorRef MalformedDocumentError;
  const __CFNumber *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t valuePtr;

  if (!a2)
    return 0;
  if ((C3DCFTypeIsDictionary() & 1) != 0)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("componentsType"));
    if (!Value
      || (valuePtr = 0, v8 = CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr),
                          a1[12] = valuePtr,
                          (v8 & 1) == 0))
    {
      v9 = scn_default_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        _C3DSourceAccessorInitWithPropertyList_cold_1();
      goto LABEL_26;
    }
    v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("valuesCount"));
    if (!v12 || (CFNumberGetValue(v12, kCFNumberCFIndexType, a1 + 16) & 1) == 0)
    {
      v13 = scn_default_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _C3DSourceAccessorInitWithPropertyList_cold_2();
      goto LABEL_26;
    }
    v14 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("componentsPerValue"));
    if (v14
      && (valuePtr = 0, v15 = CFNumberGetValue(v14, kCFNumberCFIndexType, &valuePtr),
                          a1[13] = valuePtr,
                          (v15 & 1) != 0))
    {
      v17 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("stride"));
      if (v17 && (CFNumberGetValue(v17, kCFNumberCFIndexType, a1 + 20) & 1) != 0)
      {
        v19 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("offset"));
        if (v19 && (CFNumberGetValue(v19, kCFNumberCFIndexType, a1 + 24) & 1) != 0)
        {
          v22 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("padding"));
          v23 = a1 + 28;
          if (v22)
          {
            if ((CFNumberGetValue(v22, kCFNumberCFIndexType, v23) & 1) == 0)
            {
              v24 = scn_default_log();
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
                _C3DSourceAccessorInitWithPropertyList_cold_6();
              goto LABEL_26;
            }
          }
          else
          {
            *v23 = 0;
          }
          return 1;
        }
        v20 = scn_default_log();
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
LABEL_26:
          if (!a4 || *a4)
            return 0;
          MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
          result = 0;
          *a4 = MalformedDocumentError;
          return result;
        }
      }
      else
      {
        v18 = scn_default_log();
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          goto LABEL_26;
      }
    }
    else
    {
      v16 = scn_default_log();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
    }
    _C3DSourceAccessorInitWithPropertyList_cold_3();
    goto LABEL_26;
  }
  v11 = scn_default_log();
  result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _C3DSourceAccessorInitWithPropertyList_cold_7(v11);
    return 0;
  }
  return result;
}

__CFDictionary *_C3DSourceAccessorCopyPropertyList(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFNumberRef v6;
  CFNumberRef v7;
  NSObject *v8;
  NSObject *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  NSObject *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  NSObject *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  int v23;
  const __CFString *StringForType;
  NSObject *v25;
  CFDictionaryRef *valuePtr;

  v4 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  LODWORD(valuePtr) = *(__int16 *)(a1 + 24);
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v6)
  {
    v9 = scn_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _C3DSourceAccessorCopyPropertyList_cold_2();
    goto LABEL_22;
  }
  v7 = v6;
  CFDictionaryAddValue(Mutable, CFSTR("componentsType"), v6);
  CFRelease(v7);
  if (*(uint64_t *)(a1 + 32) >= 0x80000000)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      _C3DSourceAccessorCopyPropertyList_cold_3();
    goto LABEL_22;
  }
  LODWORD(valuePtr) = *(_QWORD *)(a1 + 32);
  v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v10)
    goto LABEL_22;
  v11 = v10;
  CFDictionaryAddValue(Mutable, CFSTR("valuesCount"), v10);
  CFRelease(v11);
  LODWORD(valuePtr) = *(unsigned __int16 *)(a1 + 26);
  v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v12)
    goto LABEL_22;
  v13 = v12;
  CFDictionaryAddValue(Mutable, CFSTR("componentsPerValue"), v12);
  CFRelease(v13);
  LODWORD(valuePtr) = *(_QWORD *)(a1 + 40);
  v14 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v14)
    goto LABEL_22;
  v15 = v14;
  CFDictionaryAddValue(Mutable, CFSTR("stride"), v14);
  CFRelease(v15);
  if (*(_QWORD *)(a1 + 48) >> 31)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      _C3DSourceAccessorCopyPropertyList_cold_4();
    goto LABEL_22;
  }
  LODWORD(valuePtr) = *(_QWORD *)(a1 + 48);
  v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v17)
    goto LABEL_22;
  v18 = v17;
  CFDictionaryAddValue(Mutable, CFSTR("offset"), v17);
  CFRelease(v18);
  if (*(_QWORD *)(a1 + 56) >> 31)
  {
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      _C3DSourceAccessorCopyPropertyList_cold_5();
    goto LABEL_22;
  }
  LODWORD(valuePtr) = *(_QWORD *)(a1 + 56);
  v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v20)
  {
LABEL_22:
    v25 = scn_default_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      _C3DSourceAccessorCopyPropertyList_cold_1();
    CFRelease(Mutable);
    return 0;
  }
  v21 = v20;
  CFDictionaryAddValue(Mutable, CFSTR("padding"), v20);
  CFRelease(v21);
  if (a2)
  {
    valuePtr = C3DLibraryGetEntryID(a2, *(CFTypeRef *)(a1 + 16));
    v22 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    CFDictionarySetValue(Mutable, CFSTR("sourceID"), v22);
    CFRelease(v22);
  }
  v23 = CFGetTypeID(*(CFTypeRef *)(a1 + 16));
  StringForType = C3DLibraryGetStringForType(v23);
  CFDictionaryAddValue(Mutable, CFSTR("sourceTypeID"), StringForType);
  return Mutable;
}

uint64_t _C3DSourceAccessorFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  const __CFNumber *Value;
  const __CFString *v9;
  uint64_t TypeForString;
  void *v11;
  const void *RemappedID;
  uint64_t v13;
  _QWORD *Entry;
  uint64_t result;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  CFErrorRef MalformedDocumentError;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t valuePtr;

  if (theDict)
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("sourceID"));
    if (Value && CFNumberGetValue(Value, kCFNumberLongType, &valuePtr))
    {
      v9 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("sourceTypeID"));
      if (v9 && (TypeForString = C3DLibraryGetTypeForString(v9)) != 0)
      {
        v11 = (void *)TypeForString;
        RemappedID = (const void *)C3DLibraryGetRemappedID(a2, valuePtr, TypeForString);
        if (RemappedID)
        {
          v13 = (uint64_t)RemappedID;
          Entry = C3DLibraryGetEntry(a2, v11, RemappedID);
          if (Entry)
          {
            *(_QWORD *)(a1 + 16) = Entry;
            return 1;
          }
          v28 = scn_default_log();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            _C3DSourceAccessorFinalizeDeserialization_cold_5(v13, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          v20 = scn_default_log();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            _C3DSourceAccessorFinalizeDeserialization_cold_4(v20, v21, v22, v23, v24, v25, v26, v27);
        }
      }
      else
      {
        v18 = scn_default_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          _C3DSourceAccessorFinalizeDeserialization_cold_3();
      }
    }
    else
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        _C3DSourceAccessorFinalizeDeserialization_cold_2();
    }
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      _C3DSourceAccessorFinalizeDeserialization_cold_1();
      if (!a4)
        return 0;
      goto LABEL_17;
    }
  }
  if (!a4)
    return 0;
LABEL_17:
  if (*a4)
    return 0;
  MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
  result = 0;
  *a4 = MalformedDocumentError;
  return result;
}

uint64_t C3DSourceAccessorGetVectorType(uint64_t a1)
{
  return C3DBaseTypeGetCompoundType(*(__int16 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26));
}

__CFData *C3DSourceAccessorGetMutableValuePtrAtIndex(_QWORD *a1, uint64_t a2)
{
  __CFData *result;
  NSObject *v5;

  if (a1[4] <= a2)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      C3DSourceAccessorGetMutableValuePtrAtIndex_cold_1();
    return 0;
  }
  else
  {
    result = (__CFData *)C3DSourceAccessorGetData((uint64_t)a1);
    if (result)
      return (__CFData *)&CFDataGetMutableBytePtr(result)[a1[6] + a1[5] * a2];
  }
  return result;
}

uint64_t C3DSourceAccessorGetVolatileValuePtrAtIndex(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v13;

  if (a1[4] <= a2)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      C3DSourceAccessorGetVolatileValuePtrAtIndex_cold_2();
    return 0;
  }
  v2 = a1[2];
  if ((*(_BYTE *)(v2 + 88) & 4) == 0)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetVolatileValuePtrAtIndex_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  v13 = *(_QWORD *)(v2 + 72);
  if (!v13)
    return 0;
  return v13 + a1[5] * a2;
}

uint64_t C3DSourceAccessorCreateCopy(uint64_t a1)
{
  uint64_t result;

  result = C3DSourceAccessorCreate(*(__int16 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(result + 16) = *(_QWORD *)(a1 + 16);
  return result;
}

uint64_t C3DSourceAccessorGetValueLength(uint64_t a1)
{
  uint64_t v1;

  v1 = *(unsigned __int16 *)(a1 + 26);
  return C3DSizeOfBaseType(*(__int16 *)(a1 + 24)) * v1;
}

uint64_t C3DSourceAccessorSetCount(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

BOOL C3DSourceAccessorIsInterleaved(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(unsigned __int16 *)(a1 + 26);
  return v1 != *(_QWORD *)(a1 + 56) + C3DSizeOfBaseType(*(__int16 *)(a1 + 24)) * v2;
}

BOOL C3DSourceAccessorCopyDataToAccessor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  size_t v7;
  const __CFData *Data;
  NSObject *v10;
  _BOOL8 result;
  __CFData *MutableValuePtrAtIndex;
  __CFData *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const UInt8 *ValuePtrAtIndex;
  const UInt8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  NSObject *v25;

  if (*(unsigned __int16 *)(a1 + 24) != *(unsigned __int16 *)(a2 + 24))
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 26);
  v6 = *(unsigned __int16 *)(a2 + 26);
  if (v5 > v6)
    return 0;
  v7 = *(_QWORD *)(a2 + 40) * *(_QWORD *)(a1 + 32);
  if (!v7)
    return 0;
  Data = (const __CFData *)C3DSourceAccessorGetData(a2);
  if (v7 > CFDataGetLength(Data) - *(_QWORD *)(a2 + 40) * a3)
  {
    v10 = scn_default_log();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    C3DSourceAccessorCopyDataToAccessor_cold_1();
    return 0;
  }
  MutableValuePtrAtIndex = C3DSourceAccessorGetMutableValuePtrAtIndex((_QWORD *)a2, a3);
  if (!MutableValuePtrAtIndex)
  {
    v25 = scn_default_log();
    result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    C3DSourceAccessorCopyDataToAccessor_cold_2();
    return 0;
  }
  v13 = MutableValuePtrAtIndex;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int16 *)(a1 + 26);
  if (v14 == *(_QWORD *)(a1 + 56) + C3DSizeOfBaseType(*(__int16 *)(a1 + 24)) * v15)
  {
    v16 = *(_QWORD *)(a2 + 40);
    v17 = *(unsigned __int16 *)(a2 + 26);
    v18 = C3DSizeOfBaseType(*(__int16 *)(a2 + 24));
    if (v6 <= v5 && v16 == *(_QWORD *)(a2 + 56) + v18 * v17)
    {
      ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex((_QWORD *)a1, 0);
      memcpy(v13, ValuePtrAtIndex, v7);
      return 1;
    }
  }
  v20 = C3DSourceAccessorGetValuePtrAtIndex((_QWORD *)a1, 0);
  v21 = *(unsigned __int16 *)(a1 + 26);
  v22 = C3DSizeOfBaseType(*(__int16 *)(a1 + 24));
  if (*(uint64_t *)(a1 + 32) < 1)
    return 1;
  v23 = 0;
  v24 = v22 * v21;
  do
  {
    memcpy(v13, v20, v24);
    v20 += *(_QWORD *)(a1 + 40);
    v13 = (__CFData *)((char *)v13 + *(_QWORD *)(a2 + 40));
    ++v23;
    result = 1;
  }
  while (v23 < *(_QWORD *)(a1 + 32));
  return result;
}

void C3DSourceAccessorSetOffset(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 48) = a2;
}

void C3DSourceAccessorSetStride(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 40) = a2;
}

uint64_t C3DSourceAccessorSetPadding(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = a2;
  return result;
}

uint64_t C3DSourceAccessorGetLength(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 32) * *(_QWORD *)(a1 + 40);
}

uint64_t C3DSourceAccessorGetPlatformIndependentLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) * C3DSourceAccessorGetPlatformIndependentValueLength(a1);
}

uint64_t C3DSourceAccessorGetPlatformIndependentValueLength(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return C3DSizeOfBaseType(*(__int16 *)(a1 + 24)) * *(unsigned __int16 *)(a1 + 26);
}

uint64_t C3DSourceAccessorGetPlatformLength(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) * C3DSourceAccessorGetPlatformValueLength(a1);
}

uint64_t C3DSourceAccessorGetPlatformValueLength(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(unsigned __int16 *)(a1 + 26);
  return C3DSizeOfBaseType(*(__int16 *)(a1 + 24)) * v10;
}

CFIndex C3DSourceAccessorsConvertToCurrentPlatform(const __CFArray *a1)
{
  uint64_t v2;
  CFIndex v3;
  _QWORD *ValueAtIndex;
  CFIndex result;
  CFIndex i;

  if (CFArrayGetCount(a1) < 1)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      ValueAtIndex[6] = v2;
      v2 += C3DSourceAccessorGetPlatformValueLength((uint64_t)ValueAtIndex);
      ++v3;
    }
    while (v3 < CFArrayGetCount(a1));
  }
  result = CFArrayGetCount(a1);
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      *((_QWORD *)CFArrayGetValueAtIndex(a1, i) + 5) = v2;
      result = CFArrayGetCount(a1);
    }
  }
  return result;
}

CFStringRef _C3DSourceAccessorCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DSourceAccessor %lx>"), a1);
}

CFStringRef _C3DSourceAccessorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DSourceAccessor %lx>"), a1);
}

__CFArray *_C3DSourceAccessorCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const CFDictionaryKeyCallBacks *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  uint64_t v40;
  int v41;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 5;
  v40 = *(_QWORD *)(a1 + 16) + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("accessor"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v41 = 2;
  valuePtr = 5;
  v40 = *(_QWORD *)(a1 + 16) + 72;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("data"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = v4;
  v14 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 24;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v17 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v14, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v14, CFSTR("type"), v15);
  CFDictionarySetValue(v14, CFSTR("address"), v17);
  CFDictionarySetValue(v14, CFSTR("semantic"), v16);
  CFArrayAppendValue(Mutable, v14);
  CFRelease(v16);
  CFRelease(v14);
  CFRelease(v17);
  CFRelease(v15);
  v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v19 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v13);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 26;
  v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v22 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v19, CFSTR("name"), CFSTR("componentsCountPerValue"));
  CFDictionarySetValue(v19, CFSTR("type"), v20);
  CFDictionarySetValue(v19, CFSTR("address"), v22);
  CFDictionarySetValue(v19, CFSTR("semantic"), v21);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v21);
  CFRelease(v19);
  CFRelease(v22);
  CFRelease(v20);
  v23 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 32;
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v26 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v23, CFSTR("name"), CFSTR("count"));
  CFDictionarySetValue(v23, CFSTR("type"), v24);
  CFDictionarySetValue(v23, CFSTR("address"), v26);
  CFDictionarySetValue(v23, CFSTR("semantic"), v25);
  CFArrayAppendValue(Mutable, v23);
  CFRelease(v25);
  CFRelease(v23);
  CFRelease(v26);
  CFRelease(v24);
  v27 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 40;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v30 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("stride"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v18, v13);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 48;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v34 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("offset"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 56;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v38 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("padding"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  return Mutable;
}

id _C3DGenericSourceCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_QWORD *)(a1 + 80) || (*(_BYTE *)(a1 + 88) & 4) == 0)
  {
    v2 = *(const void **)(a1 + 72);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return C3DEntityCFFinalize(a1);
}

CFStringRef _C3DGenericSourceCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DGenericSource %lx>"), a1);
}

BOOL _C3DGenericSourceInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  const void *Value;
  uint64_t v9;
  const void *v10;
  _BOOL8 result;
  NSObject *v12;
  const __CFNumber *v13;
  CFNumberType Type;
  uint64_t v15;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFNumber *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  const __CFNumber *v29;
  NSObject *v30;
  const __CFData *v31;
  uint64_t v32;
  uint64_t valuePtr;

  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) != 0)
  {
    if (!a2)
      return 1;
    Value = CFDictionaryGetValue(a2, CFSTR("accessor"));
    if (!Value)
    {
      v32 = 0;
      valuePtr = 0;
      v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("componentsType"));
      if (v13)
      {
        Type = CFNumberGetType(v13);
        v15 = Type;
        if (Type != kCFNumberFloat32Type && Type != kCFNumberFloatType)
        {
          v17 = scn_default_log();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
            _C3DGenericSourceInitWithPropertyList_cold_4(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        v25 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("valuesCount"));
        if (v25 && (CFNumberGetValue(v25, kCFNumberCFIndexType, &valuePtr) & 1) != 0)
        {
          v29 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("componentsPerValue"));
          if (v29 && (CFNumberGetValue(v29, kCFNumberCFIndexType, &v32) & 1) != 0)
          {
            v10 = (const void *)C3DSourceAccessorCreate(1, v32, valuePtr, 4 * v32, 0);
            C3DSourceAccessorSetSource((uint64_t)v10, a1);
            v31 = (const __CFData *)CFDictionaryGetValue(a2, CFSTR("data"));
            *(_QWORD *)(a1 + 72) = C3DCopyLittleEndianToHostRepresentationOfData(v31, v15, v32 * valuePtr);
            goto LABEL_6;
          }
          v30 = scn_default_log();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            _C3DGenericSourceInitWithPropertyList_cold_3();
        }
        else
        {
          v26 = scn_default_log();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            _C3DGenericSourceInitWithPropertyList_cold_2();
        }
      }
      else
      {
        v28 = scn_default_log();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          _C3DGenericSourceInitWithPropertyList_cold_1();
      }
      return 0;
    }
    v9 = (uint64_t)Value;
    v10 = (const void *)_C3DSourceAccessorCreate();
    if ((C3DInitWithPropertyList(v10, v9, a3, (uint64_t)a4) & 1) != 0)
    {
      C3DSourceAccessorSetSource((uint64_t)v10, a1);
LABEL_6:
      C3DAnimationSetKeyPath(a1, v10);
      CFRelease(v10);
      return 1;
    }
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      _C3DGenericSourceInitWithPropertyList_cold_5();
      if (a4)
      {
LABEL_23:
        if (!*a4)
          *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
      }
    }
    else if (a4)
    {
      goto LABEL_23;
    }
    CFRelease(v10);
    return 0;
  }
  v12 = scn_default_log();
  result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  _C3DGenericSourceInitWithPropertyList_cold_6(v12);
  return 0;
}

__CFDictionary *_C3DGenericSourceCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;

  v8 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (v8)
  {
    v9 = (const void *)C3DCopyPropertyList(*(const void **)(a1 + 64), a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      CFDictionarySetValue(v8, CFSTR("accessor"), v9);
      CFRelease(v10);
    }
    else
    {
      v11 = scn_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        _C3DGenericSourceCopyPropertyList_cold_1();
      CFRelease(v8);
      return 0;
    }
  }
  return v8;
}

uint64_t _C3DGenericSourceFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  const void *Value;
  NSObject *v9;

  Value = CFDictionaryGetValue(theDict, CFSTR("accessor"));
  if (Value)
    return C3DFinalizeDeserialization(*(const void **)(a1 + 64), a2, (uint64_t)Value, (uint64_t)a4);
  v9 = scn_default_log();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    _C3DGenericSourceFinalizeDeserialization_cold_1();
    if (a4)
    {
LABEL_5:
      if (!*a4)
        *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
    }
  }
  else if (a4)
  {
    goto LABEL_5;
  }
  return 0;
}

uint64_t C3DGenericSourceCreateEmpty()
{
  if (C3DGenericSourceGetTypeID_onceToken != -1)
    dispatch_once(&C3DGenericSourceGetTypeID_onceToken, &__block_literal_global_89);
  return C3DTypeCreateInstance_(C3DGenericSourceGetTypeID_typeID, 0x50uLL);
}

uint64_t C3DGenericSourceCreate(const void *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Empty;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Empty = C3DGenericSourceCreateEmpty();
  if (!Empty)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  C3DGenericSourceInit(Empty, a1);
  return Empty;
}

uint64_t C3DGenericSourceCreateMutable(const void *a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFIndex Length;
  __CFData *Mutable;
  CFIndex v15;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DSourceAccessorGetData_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DGenericSourceCreate(a1);
  *(_BYTE *)(v12 + 88) |= 1u;
  if (a2)
  {
    Length = C3DSourceAccessorGetLength((uint64_t)a1);
    Mutable = CFDataCreateMutable(0, Length);
    v15 = C3DSourceAccessorGetLength((uint64_t)a1);
    CFDataSetLength(Mutable, v15);
    C3DGenericSourceSetData(v12, Mutable);
    CFRelease(Mutable);
  }
  return v12;
}

CFTypeRef C3DGenericSourceSetData(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((*(_BYTE *)(a1 + 88) & 4) != 0)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DGenericSourceSetData_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DGenericSourceSetData_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

void C3DGenericSourceSetMTLBuffer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  *(_QWORD *)(a1 + 72) = a2;
  *(_QWORD *)(a1 + 80) = a3;
}

void C3DGenericSourceInitDeepCopy(uint64_t a1, uint64_t a2)
{
  const UInt8 *Content;
  unint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  const void *v8;
  size_t PlatformIndependentValueLength;
  __CFData *Mutable;
  const UInt8 *BytePtr;
  UInt8 *v12;
  int v13;
  const void *Copy;
  NSObject *v15;
  const void *v16;
  __CFData *v17;
  UInt8 *MutableBytePtr;
  const __CFData *v19;
  CFMutableDataRef MutableCopy;
  CFIndex capacity;
  uint8_t buf[16];

  if (C3DSourceAccessorIsInterleaved(*(_QWORD *)(a1 + 64)))
  {
    Content = C3DGenericSourceGetContent(a1);
    v6 = BYTE5(v5);
    v7 = v5;
    v8 = (const void *)C3DSourceAccessorCreate(BYTE6(v5), HIBYTE(v5), v5, 0, 0);
    C3DAnimationSetKeyPath(a2, v8);
    C3DSourceAccessorSetSource((uint64_t)v8, a2);
    CFRelease(v8);
    if (Content)
    {
      PlatformIndependentValueLength = C3DSourceAccessorGetPlatformIndependentValueLength(*(_QWORD *)(a1 + 64));
      Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], PlatformIndependentValueLength * v7);
      CFDataSetLength(Mutable, PlatformIndependentValueLength * v7);
      BytePtr = CFDataGetBytePtr(Mutable);
      if (v7)
      {
        v12 = (UInt8 *)BytePtr;
        v13 = 0;
        do
        {
          memcpy(v12, &Content[v13], PlatformIndependentValueLength);
          v13 += v6;
          v12 += PlatformIndependentValueLength;
          --v7;
        }
        while (v7);
      }
      C3DGenericSourceSetData(a2, Mutable);
      CFRelease(Mutable);
    }
  }
  else
  {
    Copy = (const void *)C3DSourceAccessorCreateCopy(*(_QWORD *)(a1 + 64));
    C3DAnimationSetKeyPath(a2, Copy);
    C3DSourceAccessorSetSource((uint64_t)Copy, a2);
    CFRelease(Copy);
    if (*(_QWORD *)(a1 + 80))
    {
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1DCCB8000, v15, OS_LOG_TYPE_DEFAULT, "Warning: Cannot duplicate a Metal Buffer source. Create an empty data instead.", buf, 2u);
      }
      capacity = 0;
      v16 = (const void *)C3DPtrFromMTLBuffer(*(void **)(a1 + 72), &capacity);
      v17 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], capacity);
      CFDataSetLength(v17, capacity);
      MutableBytePtr = CFDataGetMutableBytePtr(v17);
      memcpy(MutableBytePtr, v16, capacity);
      C3DGenericSourceSetData(a2, v17);
      CFRelease(v17);
    }
    else
    {
      v19 = *(const __CFData **)(a1 + 72);
      if (v19)
      {
        MutableCopy = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v19);
        C3DGenericSourceSetData(a2, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }
}

const UInt8 *C3DGenericSourceGetContent(uint64_t a1)
{
  _QWORD *v1;
  const UInt8 *ValuePtrAtIndex;
  unsigned int ComponentsValueType;
  int ComponentsCountPerValue;

  v1 = *(_QWORD **)(a1 + 64);
  if (C3DSourceAccessorGetData((uint64_t)v1))
    ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(v1, 0);
  else
    ValuePtrAtIndex = 0;
  C3DSourceAccessorGetCount((uint64_t)v1);
  C3DSceneSourceGetLibrary((uint64_t)v1);
  ComponentsValueType = C3DSourceAccessorGetComponentsValueType((uint64_t)v1);
  ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v1);
  if (ComponentsValueType != C3DBaseTypeGetComponentType(ComponentsValueType))
    C3DBaseTypeGetComponentCount(ComponentsValueType);
  C3DBaseTypeGetCompoundType(ComponentsValueType, ComponentsCountPerValue);
  return ValuePtrAtIndex;
}

void C3DGenericSourceInitMutableCopy(uint64_t a1, uint64_t a2)
{
  C3DGenericSourceInitDeepCopy(a1, a2);
  *(_BYTE *)(a2 + 88) |= 1u;
}

uint64_t C3DGenericSourceCreateDeepCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Empty;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  Empty = C3DGenericSourceCreateEmpty();
  C3DGenericSourceInitDeepCopy(a1, Empty);
  return Empty;
}

void C3DGenericSourceSetVolatileData(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if ((*(_BYTE *)(a1 + 88) & 4) == 0)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DGenericSourceSetVolatileData_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      C3DGenericSourceSetVolatileData_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  *(_QWORD *)(a1 + 72) = a2;
}

uint64_t C3DGenericSourceMakeImmutable(uint64_t result)
{
  *(_BYTE *)(result + 88) &= ~1u;
  return result;
}

uint64_t C3DGenericSourceMarkMutable(uint64_t result)
{
  *(_BYTE *)(result + 88) |= 1u;
  return result;
}

BOOL C3DGenericSourcesHaveSharedData(uint64_t a1, uint64_t a2)
{
  uint64_t Accessor;
  uint64_t v4;
  uint64_t URL;

  Accessor = C3DGenericSourceGetAccessor(a1);
  v4 = C3DGenericSourceGetAccessor(a2);
  URL = C3DSceneSourceGetURL(Accessor);
  return URL == C3DSceneSourceGetURL(v4);
}

BOOL C3DGenericSourceIsPrimary(uint64_t a1)
{
  uint64_t Accessor;

  if (*(_QWORD *)(a1 + 80) || !*(_QWORD *)(a1 + 72))
    return 0;
  Accessor = C3DGenericSourceGetAccessor(a1);
  return C3DSourceAccessorGetData(Accessor) == *(void **)(a1 + 72);
}

CFDataRef C3DGenericSourceCreateSerializedDataWithAccessors(uint64_t a1, const __CFArray *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFData *OwnData;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const UInt8 *BytePtr;
  CFIndex v22;
  uint64_t v23;
  size_t v24;
  const void *ValueAtIndex;
  const UInt8 *v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  CFIndex Length;
  const UInt8 *v32;
  const __CFArray *v33;
  const __CFData *v34;
  int ComponentsValueType;
  int ComponentsCountPerValue;
  unint64_t v37;
  int v38;
  uint64_t v40;
  char *v41;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreate_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  OwnData = (const __CFData *)C3DGenericSourceGetOwnData(a1);
  if (!OwnData)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DGenericSourceCreateSerializedDataWithAccessors_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  BytePtr = CFDataGetBytePtr(OwnData);
  if (CFArrayGetCount(a2) < 1)
  {
    v24 = 0;
    v23 = 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v22);
      v24 += C3DSourceAccessorGetPlatformIndependentLength((uint64_t)ValueAtIndex);
      v23 += C3DSourceAccessorGetPlatformIndependentValueLength((uint64_t)ValueAtIndex);
      C3DSceneSourceGetLibrary((uint64_t)ValueAtIndex);
      ++v22;
    }
    while (v22 < CFArrayGetCount(a2));
  }
  v40 = v23;
  v26 = (const UInt8 *)C3DMalloc(v24);
  if (CFArrayGetCount(a2) >= 1)
  {
    v27 = 0;
    v28 = 0;
    do
    {
      v29 = (uint64_t *)CFArrayGetValueAtIndex(a2, v27);
      v41 = (char *)&BytePtr[v29[6]];
      v30 = v24;
      Length = CFDataGetLength(OwnData);
      v32 = BytePtr;
      v33 = a2;
      v34 = OwnData;
      ComponentsValueType = C3DSourceAccessorGetComponentsValueType((uint64_t)v29);
      ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v29);
      v37 = Length;
      v24 = v30;
      v38 = ComponentsValueType;
      OwnData = v34;
      a2 = v33;
      BytePtr = v32;
      C3DConvertToPlatformIndependentData(v41, (char *)&v26[v28], v37, v30, v38, ComponentsCountPerValue, v29[4], v29[5], v40);
      v28 += C3DSourceAccessorGetPlatformIndependentValueLength((uint64_t)v29);
      ++v27;
    }
    while (v27 < CFArrayGetCount(a2));
  }
  return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v26, v24, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
}

__CFData *C3DGenericSourceCreateDeserializedDataWithAccessors(uint64_t a1, CFDataRef theData, const __CFArray *a3)
{
  unint64_t v5;
  uint64_t v6;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  __CFData *Mutable;
  uint64_t v11;
  uint64_t v12;
  CFIndex v13;
  _QWORD *v14;
  NSObject *v15;
  char *v16;
  char *v17;
  unsigned int ComponentsValueType;
  int ComponentsCountPerValue;
  __CFData *v21;
  const __CFArray *theArray;
  const UInt8 *BytePtr;
  UInt8 *MutableBytePtr;
  CFIndex Length;
  uint8_t buf[4];
  _DWORD v28[7];

  *(_QWORD *)&v28[5] = *MEMORY[0x1E0C80C00];
  Length = CFDataGetLength(theData);
  if (CFArrayGetCount(a3) < 1)
  {
    v8 = 0;
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a3, v7);
      v5 += C3DSourceAccessorGetPlatformLength((uint64_t)ValueAtIndex);
      v6 += C3DSourceAccessorGetPlatformValueLength((uint64_t)ValueAtIndex);
      v8 += C3DSourceAccessorGetPlatformIndependentValueLength((uint64_t)ValueAtIndex);
      C3DSceneSourceGetLibrary((uint64_t)ValueAtIndex);
      ++v7;
    }
    while (v7 < CFArrayGetCount(a3));
  }
  Mutable = CFDataCreateMutable(0, v5);
  CFDataSetLength(Mutable, v5);
  v21 = Mutable;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  BytePtr = CFDataGetBytePtr(theData);
  if (CFArrayGetCount(a3) >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    theArray = a3;
    do
    {
      v14 = CFArrayGetValueAtIndex(a3, v13);
      if (C3DSceneSourceGetURL((uint64_t)v14) != a1)
      {
        v15 = scn_default_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
          C3DGenericSourceCreateDeserializedDataWithAccessors_cold_1(buf, v28, v15);
      }
      v16 = (char *)&MutableBytePtr[v12];
      v17 = (char *)&BytePtr[v11];
      v12 += C3DSourceAccessorGetPlatformValueLength((uint64_t)v14);
      v11 += C3DSourceAccessorGetPlatformIndependentValueLength((uint64_t)v14);
      ComponentsValueType = C3DSourceAccessorGetComponentsValueType((uint64_t)v14);
      ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v14);
      C3DConvertFromPlatformIndependentData(v17, v16, Length, v5, ComponentsValueType, ComponentsCountPerValue, v14[4], v8, v6);
      ++v13;
      a3 = theArray;
    }
    while (v13 < CFArrayGetCount(theArray));
  }
  return v21;
}

void C3DGenericSourceSetListener(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *Default;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 88) & 0xFD | (2 * (a2 != 0));
  if (a2)
  {
    Default = (const __CFDictionary *)C3DValueCreateDefault(5);
    *(_QWORD *)C3DValueGetBytes((uint64_t)Default) = a2;
    C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("listener"), Default);
    if (Default)
      CFRelease(Default);
  }
  else
  {
    C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("listener"), 0);
  }
}

uint64_t C3DGenericSourceGetListener(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframedAnimationCopy_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if ((*(_BYTE *)(a1 + 88) & 2) == 0)
    return 0;
  result = (uint64_t)C3DEntityGetAttribute(a1, CFSTR("listener"));
  if (result)
  {
    result = C3DValueGetBytes(result);
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

CFStringRef _C3DGenericSourceCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DGenericSource %lx>"), a1);
}

uint64_t _C3DGenericSourceSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return 0;
}

uint64_t _C3DGenericSourceSetValue(uint64_t a1, void *__s1, void *__s2, size_t __n)
{
  uint64_t result;

  result = memcmp(__s1, __s2, __n);
  if ((_DWORD)result)
  {
    memcpy(__s1, __s2, __n);
    result = C3DGenericSourceGetListener(a1);
    if (result)
      return (uint64_t)C3DGenericSourceDidChange((CFTypeRef)result, a1);
  }
  return result;
}

void _C3DResourceCacheCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  __CFNotificationCenter *LocalCenter;
  __CFNotificationCenter *v6;

  if ((_QWORD *)_sharedInstance == a1)
    _sharedInstance = 0;
  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, CFSTR("kC3DNotificationImageProxyWillDie"), 0);
  v6 = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(v6, a1, CFSTR("kC3DNotificationImageWillDie"), 0);
}

CFStringRef _C3DResourceCacheCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DResourceCache 0x%lx>"), a1);
}

CFStringRef _C3DResourceCacheCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DResourceCache 0x%lx>"), a1);
}

void _C3DResourceCacheResourceWillDie(int a1, uint64_t a2, int a3, CFNumberRef number)
{
  const void *valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  C3DResourceCacheRemoveResource(a2, valuePtr);
}

CFTypeRef C3DResourceCacheGetResource(uint64_t a1, void *a2)
{
  void *v3;
  CFTypeRef result;

  v3 = (void *)_C3DResourceCacheStandardizeSource(a2);
  result = C3DResourceCacheCopyResourceForSource(a1, v3);
  if (result)
    return CFAutorelease(result);
  return result;
}

void C3DResourceCacheRemoveResource(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *Value;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceCacheCopyResourceForSource_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DResourceCacheGetSourceForResource_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (Value)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), Value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
}

uint64_t C3D::drawNodesPassShouldPushRenderableElementsToVisible(C3D *this, __C3DCullingContext *a2, uint64_t a3, __C3DNode *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, __C3DCullingContext *))(**((_QWORD **)this + 583) + 120))(*((_QWORD *)this + 583), a3, a2);
}

const char *C3D::DrawNodesPass::name(C3D::DrawNodesPass *this, uint64_t a2, uint64_t a3, void *a4)
{
  const char **v4;

  v4 = (const char **)*((_QWORD *)this + 30);
  if (v4)
    return C3D::CachedFXPassName((void **)this + 669, v4, *(__C3DFXPass **)(*((_QWORD *)this + 3) + 16), a4);
  else
    return "DrawNodesPass";
}

uint64_t C3D::DrawNodesPass::getCullingContext(C3D::DrawNodesPass *this)
{
  return (uint64_t)this + 320;
}

BOOL C3D::DrawNodesPass::_shouldPushNodeToVisible(C3D::DrawNodesPass *this, __C3DNode *a2)
{
  return !*((_BYTE *)this + 301) || (*((_BYTE *)a2 + 221) & 0x10) == 0;
}

uint64_t C3DAnimationGroupCreate()
{
  uint64_t Instance;

  if (C3DAnimationGroupGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationGroupGetTypeID_onceToken, &__block_literal_global_91);
  Instance = C3DTypeCreateInstance_(C3DAnimationGroupGetTypeID_typeID, 0xA0uLL);
  C3DAnimationCommonInit(Instance);
  *(_QWORD *)(Instance + 168) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  return Instance;
}

void C3DAnimationGroupAddAnimation(uint64_t a1, void *value)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 168), value);
}

void C3DAnimationGroupAddAnimations(uint64_t a1, CFArrayRef theArray)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFArray *v20;
  CFRange v21;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationGroupAddAnimations_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (theArray)
      goto LABEL_6;
  }
  else if (theArray)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationGroupAddAnimations_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(__CFArray **)(a1 + 168);
  v21.length = CFArrayGetCount(theArray);
  v21.location = 0;
  CFArrayAppendArray(v20, theArray, v21);
}

CFIndex C3DAnimationGroupGetAnimationCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 168));
}

const void *C3DAnimationGroupGetAnimationAtIndex(uint64_t a1, CFIndex idx)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimation_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 168), idx);
}

uint64_t C3DAnimationGroupGetAnimations(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 168);
}

void C3DAnimationGroupRemoveAllAnimations(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimation_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 168));
}

void C3DAnimationGroupCopy(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *Animations;
  uint64_t Count;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *Copy;
  int IsAnimationClip;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframedAnimationCopy_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationGroupCopy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  C3DAnimationGroupRemoveAllAnimations(a2);
  Animations = (const __CFArray *)C3DAnimationGroupGetAnimations(a1);
  Count = CFArrayGetCount(Animations);
  Mutable = CFArrayCreateMutable(0, Count, MEMORY[0x1E0C9B378]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Animations, i);
      Copy = (const void *)C3DAnimationCreateCopy(ValueAtIndex);
      CFArrayAppendValue(Mutable, Copy);
      CFRelease(Copy);
    }
  }
  C3DAnimationGroupAddAnimations(a2, Mutable);
  CFRelease(Mutable);
  IsAnimationClip = C3DAnimationGroupIsAnimationClip(a1);
  C3DAnimationGroupSetIsAnimationClip(a2, IsAnimationClip);
}

void C3DAnimationGroupSetIsAnimationClip(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimations_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 256;
  else
    v12 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFEFF | v12;
}

uint64_t C3DAnimationGroupIsAnimationClip(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationGroupAddAnimations_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return HIBYTE(*(unsigned __int16 *)(a1 + 84)) & 1;
}

id _C3DAnimationGroupCFFinalize(_QWORD *a1)
{
  const void *v2;

  v2 = (const void *)a1[21];
  if (v2)
  {
    CFRelease(v2);
    a1[21] = 0;
  }
  return _C3DAnimationCFFinalize(a1);
}

CFStringRef _C3DAnimationGroupCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationGroup %p animations:%@>"), a1, a1[21]);
}

CFStringRef _C3DAnimationGroupCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAnimationGroup %p animations:%@>"), a1, a1[21]);
}

BOOL _C3DAnimationGroupInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, CFErrorRef *a4)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFIndex v10;
  CFIndex v11;
  CFIndex v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  void *v16;
  const void *v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex i;
  const void *ValueAtIndex;
  void *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFErrorRef MalformedDocumentError;
  NSObject *v48;
  _BOOL8 result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if ((_C3DAnimationInitWithPropertyList(a1, a2, a3) & 1) != 0)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("channels"));
    if (!Value || (v9 = Value, v10 = CFArrayGetCount(Value), v10 < 1))
    {
LABEL_14:
      v18 = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("subAnimations"));
      if (v18)
      {
        v19 = v18;
        Count = CFArrayGetCount(v18);
        if (Count >= 1)
        {
          v21 = Count;
          for (i = 0; i != v21; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v19, i);
            v24 = (void *)C3DAnimationGroupCreate();
            C3DInitWithPropertyList(v24, (uint64_t)ValueAtIndex, (uint64_t)a3, (uint64_t)a4);
            C3DAnimationGroupAddAnimation(a1, v24);
            CFRelease(v24);
          }
        }
      }
      return 1;
    }
    v11 = v10;
    v12 = 0;
    while (1)
    {
      v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v12);
      v14 = (const __CFDictionary *)CFDictionaryGetValue(v13, CFSTR("animation"));
      if (!v14)
      {
        v33 = scn_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          _C3DAnimationGroupInitWithPropertyList_cold_1((uint64_t)a2, v33, v34, v35, v36, v37, v38, v39);
          if (!a4)
            return 0;
        }
        else
        {
LABEL_27:
          if (!a4)
            return 0;
        }
LABEL_28:
        if (*a4)
          return 0;
        MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
        result = 0;
        *a4 = MalformedDocumentError;
        return result;
      }
      v15 = v14;
      if (CFDictionaryContainsKey(v14, CFSTR("type")))
      {
        v16 = (void *)C3DAnimationCreateWithPropertyList(v15, (uint64_t)a3, (uint64_t)a4);
        if (!v16)
        {
          v48 = scn_default_log();
          result = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
          if (result)
          {
            _C3DAnimationGroupInitWithPropertyList_cold_4(v48, v50, v51, v52, v53, v54, v55, v56);
            return 0;
          }
          return result;
        }
      }
      else
      {
        v16 = (void *)C3DKeyframedAnimationCreate();
        if ((C3DInitWithPropertyList(v16, (uint64_t)v15, (uint64_t)a3, (uint64_t)a4) & 1) == 0)
        {
          v57 = scn_default_log();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            _C3DAnimationGroupInitWithPropertyList_cold_3(v57, v58, v59, v60, v61, v62, v63, v64);
          CFRelease(v16);
          return 0;
        }
      }
      v17 = CFDictionaryGetValue(v13, CFSTR("targetPath"));
      if (!v17)
      {
        if (v16)
          CFRelease(v16);
        v40 = scn_default_log();
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        _C3DAnimationGroupInitWithPropertyList_cold_2((uint64_t)a2, v40, v41, v42, v43, v44, v45, v46);
        if (!a4)
          return 0;
        goto LABEL_28;
      }
      C3DAnimationSetKeyPath((uint64_t)v16, v17);
      C3DAnimationGroupAddAnimation(a1, v16);
      if (v16)
        CFRelease(v16);
      if (v11 == ++v12)
        goto LABEL_14;
    }
  }
  v25 = scn_default_log();
  result = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _C3DAnimationGroupInitWithPropertyList_cold_5(v25, v26, v27, v28, v29, v30, v31, v32);
    return 0;
  }
  return result;
}

CFMutableDictionaryRef _C3DAnimationGroupCopyPropertyList(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AnimationCount;
  const __CFAllocator *v17;
  __CFArray *Mutable;
  CFIndex i;
  const void *AnimationAtIndex;
  const __CFAllocator *v21;
  __CFDictionary *v22;
  const void *KeyPath;
  NSObject *v24;
  const void *v25;
  const void *v26;
  const __CFAllocator *v27;
  __CFArray *v28;
  CFIndex j;
  const void *v30;
  const void *v31;
  CFMutableDictionaryRef theDict;
  uint8_t buf;
  _BYTE v35[15];

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      _C3DGeometryFillLibraryForSerialization_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  theDict = _C3DAnimationCopyPropertyList((uint64_t)a1, a2, a3, a4);
  AnimationCount = C3DAnimationGroupGetAnimationCount((uint64_t)a1);
  v17 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v17, AnimationCount, MEMORY[0x1E0C9B378]);
  if (AnimationCount >= 1)
  {
    for (i = 0; i != AnimationCount; ++i)
    {
      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a1, i);
      if (!C3DAnimationIsGroup(AnimationAtIndex))
      {
        v21 = CFGetAllocator(a1);
        v22 = CFDictionaryCreateMutable(v21, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        KeyPath = (const void *)C3DAnimationGetKeyPath((uint64_t)AnimationAtIndex);
        if (KeyPath)
        {
          CFDictionaryAddValue(v22, CFSTR("targetPath"), KeyPath);
        }
        else
        {
          v24 = scn_default_log();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            _C3DAnimationGroupCopyPropertyList_cold_1(&buf, v35, v24);
        }
        v25 = (const void *)C3DCopyPropertyList(AnimationAtIndex, a2, a3, a4);
        if (v25)
        {
          v26 = v25;
          CFDictionaryAddValue(v22, CFSTR("animation"), v25);
          CFRelease(v26);
        }
        CFArrayAppendValue(Mutable, v22);
        CFRelease(v22);
      }
    }
  }
  if (CFArrayGetCount(Mutable) > 0)
    CFDictionaryAddValue(theDict, CFSTR("channels"), Mutable);
  CFRelease(Mutable);
  v27 = CFGetAllocator(a1);
  v28 = CFArrayCreateMutable(v27, AnimationCount, MEMORY[0x1E0C9B378]);
  if (AnimationCount >= 1)
  {
    for (j = 0; j != AnimationCount; ++j)
    {
      v30 = C3DAnimationGroupGetAnimationAtIndex((uint64_t)a1, j);
      if (C3DAnimationIsGroup(v30))
      {
        v31 = (const void *)C3DCopyPropertyList(v30, a2, a3, a4);
        CFArrayAppendValue(v28, v31);
        CFRelease(v31);
      }
    }
  }
  if (CFArrayGetCount(v28) > 0)
    CFDictionaryAddValue(theDict, CFSTR("subAnimations"), v28);
  CFRelease(v28);
  return theDict;
}

void C3D::SSAOUpSamplePass::SSAOUpSamplePass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA5997A8;
  v5[15] = a4;
}

const char *C3D::SSAOUpSamplePass::name(C3D::SSAOUpSamplePass *this)
{
  return "SSAOUpSamplePass";
}

uint64_t C3D::SSAOUpSamplePass::setup(C3D::Pass ***this)
{
  uint64_t v2;
  C3D::PassDescriptor *v3;
  C3D::PassDescriptor *v4;
  C3D::PassDescriptor *v5;
  unint64_t v6;
  C3D::PassDescriptor *v7;
  unint64_t v8;
  uint64_t v9;
  C3D::PassDescriptor *v10;
  C3D::PassDescriptor *v11;
  uint64_t result;
  __int16 v13;

  C3D::Pass::setInputCount((C3D::Pass *)this, 2u);
  C3D::Pass::setOutputCount((C3D::Pass *)this, 1u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(this + 4), 0);
  *(_QWORD *)(v2 + 8) = "SSAO-DepthNormal";
  v3 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  *(_WORD *)(v2 + 16) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v3, 0) + 16);
  v4 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  *(_WORD *)(v2 + 18) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 18);
  v5 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  v6 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v5, 0) + 16) / (unint64_t)this[15][2];
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(this + 4), 1u) + 16) = v6;
  v7 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  v8 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v7, 0) + 18) / (unint64_t)this[15][2];
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(this + 4), 1u) + 18) = v8;
  v9 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(this + 4), 0);
  *(_WORD *)(v9 + 28) = 25;
  *(_QWORD *)(v9 + 8) = "SSAO-Final";
  v10 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  *(_WORD *)(v9 + 16) = *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v10, 0) + 16);
  v11 = (C3D::PassDescriptor *)C3D::Pass::descriptor(*this[15]);
  result = C3D::PassDescriptor::outputAtIndex(v11, 0);
  *(_WORD *)(v9 + 18) = *(_WORD *)(result + 18);
  *(_WORD *)(v9 + 66) |= 0x10u;
  if (*(_BYTE *)(v9 + 24) == 5)
    v13 = 6;
  else
    v13 = 1;
  *((_WORD *)this + 19) = v13;
  return result;
}

void C3D::SSAOUpSamplePass::compile(C3D::SSAOUpSamplePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 15) + 24) | (2 * *(unsigned __int8 *)(*((_QWORD *)this + 15) + 25)) | (4 * *(_QWORD *)(*((_QWORD *)this + 15) + 16)) | (*(_QWORD *)(*((_QWORD *)this + 15) + 8) << 6);
  v5 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::SSAOUpSamplePass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))));
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 14) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1EA59A418;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_QWORD *)this + 14) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v11 = *((_QWORD *)this + 14);
    v12 = *(void **)(v11 + 24);
    *(_QWORD *)(v11 + 24) = v10;
    if (v12)

    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 8, 29, CFSTR("SSAOSampleCount"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 16, 29, CFSTR("SSAODownSample"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 24, 53, CFSTR("SSAOCameraOrtho"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 25, 53, CFSTR("SSAOVRRendering"));
    v13 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", CFSTR("scn_ssao_upsampling"), C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24));
    v14 = *((_QWORD *)this + 14);
    v15 = *(void **)(v14 + 16);
    *(_QWORD *)(v14 + 16) = v13;
    if (v15)

  }
}

void C3D::SSAOUpSamplePass::execute(uint64_t *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  void **v6;
  void **v7;
  MTLTexture *v8;
  _QWORD *v9;
  uint64_t v10;
  MTLComputePipelineState *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD v28[16];

  v3 = *a2;
  PointOfView = C3DEngineContextGetPointOfView(a1[2]);
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    if (Camera)
    {
      v28[13] = fmaxf(C3DCameraGetScreenSpaceAmbientOcclusionDepthThreshold((uint64_t)Camera), 0.0);
      v6 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
      if ((void **)v3->_textures[1] != v6)
      {
        v3->_textures[1] = (MTLTexture *)v6;
        v3->_texturesToBind[0] |= 2uLL;
      }
      v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
      if ((void **)v3->_textures[0] != v7)
      {
        v3->_textures[0] = (MTLTexture *)v7;
        v3->_texturesToBind[0] |= 1uLL;
      }
      v8 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
      if (v3->_textures[2] != v8)
      {
        v3->_textures[2] = v8;
        v3->_texturesToBind[0] |= 4uLL;
      }
      SCNMTLComputeCommandEncoder::setBytes(v3, v28, 0x40uLL, 0);
      v9 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
      v10 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(a1[14] + 16);
      v11 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v10);
      SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v9, v11);
    }
    else if ((C3D::SSAOUpSamplePass::execute(C3D::ComputeArgs const&)::done & 1) == 0)
    {
      C3D::SSAOUpSamplePass::execute(C3D::ComputeArgs const&)::done = 1;
      v20 = scn_default_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        C3D::SSAORaytracePass::execute(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  else if ((C3D::SSAOUpSamplePass::execute(C3D::ComputeArgs const&)::done & 1) == 0)
  {
    C3D::SSAOUpSamplePass::execute(C3D::ComputeArgs const&)::done = 1;
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      C3D::SSAORaytracePass::execute(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

void C3D::SSAOPassUpSamplingResource::~SSAOPassUpSamplingResource(C3D::SSAOPassUpSamplingResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A418;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A418;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

btPoint2PointConstraint *_createConstraintFromDefinition(uint64_t a1)
{
  id v2;
  btRigidBody *v4;
  btRigidBody *v5;
  btPoint2PointConstraint *v6;
  NSObject *v7;
  btRigidBody *v8;
  btVector3 v10;
  btVector3 v11;

  v2 = *(id *)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v4 = (btRigidBody *)objc_msgSend(v2, "_handle");
    *(_QWORD *)v11.var0.var0 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v11.var0.var0[2] = *(unsigned int *)(a1 + 24);
    v5 = (btRigidBody *)objc_msgSend(*(id *)(a1 + 8), "_handle");
    *(_QWORD *)v10.var0.var0 = *(_QWORD *)(a1 + 28);
    *(_QWORD *)&v10.var0.var0[2] = *(unsigned int *)(a1 + 36);
    v6 = (btPoint2PointConstraint *)btAlignedAllocInternal(432, 16);
    btPoint2PointConstraint::btPoint2PointConstraint(v6, v4, v5, &v11, &v10);
  }
  else
  {
    if (!v2)
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        _createConstraintFromDefinition(v7);
    }
    v8 = (btRigidBody *)objc_msgSend(*(id *)a1, "_handle");
    *(_QWORD *)v11.var0.var0 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v11.var0.var0[2] = *(unsigned int *)(a1 + 24);
    v6 = (btPoint2PointConstraint *)btAlignedAllocInternal(432, 16);
    btPoint2PointConstraint::btPoint2PointConstraint(v6, v8, &v11);
  }
  return v6;
}

void sub_1DCEBA2E0(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

const char *C3D::JitteringPass::name(C3D::JitteringPass *this)
{
  return "JitteringPass";
}

void C3D::JitteringPass::setup(C3D::JitteringPass *this)
{
  uint64_t v2;
  uint64_t RenderContext;
  __int16 v4;
  int UpdateMainFramebuffer;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  C3D::Pass::setInputCount(this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0) + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0);
  *(_OWORD *)(v2 + 16) = v13;
  *(_DWORD *)(v2 + 32) = v14;
  *(_BYTE *)(C3D::PassDescriptor::inputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0) + 31) = 0;
  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v4 = -[SCNMTLRenderContext features](RenderContext);
  UpdateMainFramebuffer = C3DEngineContextGetUpdateMainFramebuffer(*((_QWORD *)this + 2));
  if ((v4 & 0x800) != 0)
  {
    if (UpdateMainFramebuffer)
      v9 = 2;
    else
      v9 = 1;
    C3D::Pass::setOutputCount(this, v9);
    v10 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0);
    C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
    *(_OWORD *)(v10 + 16) = v13;
    *(_DWORD *)(v10 + 32) = v14;
    *(_WORD *)(v10 + 28) = 115;
    *(_BYTE *)(v10 + 65) = 0;
    *(_WORD *)(v10 + 66) |= 0x100u;
    if (C3DEngineContextGetJitteringStep(*((_QWORD *)this + 2)))
      v11 = 1;
    else
      v11 = 2;
    *(_WORD *)(v10 + 66) = *(_WORD *)(v10 + 66) & 0xFFFC | v11;
    if (C3DEngineContextGetUpdateMainFramebuffer(*((_QWORD *)this + 2)))
    {
      v12 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 1u);
      *(_QWORD *)(v12 + 8) = "COLOR";
      C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
      *(_OWORD *)(v12 + 16) = v13;
      *(_DWORD *)(v12 + 32) = v14;
      *(_BYTE *)(v12 + 65) = 1;
    }
  }
  else
  {
    if (UpdateMainFramebuffer)
    {
      C3D::Pass::setOutputCount(this, 2u);
      v6 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0);
      *(_QWORD *)(v6 + 8) = "pingPongTex";
      C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
      *(_OWORD *)(v6 + 16) = v13;
      *(_DWORD *)(v6 + 32) = v14;
      *(_WORD *)(v6 + 28) = 115;
      *(_BYTE *)(v6 + 65) = 0;
      *(_WORD *)(v6 + 66) = *(_WORD *)(v6 + 66) & 0xFEF4 | 0x108;
      v7 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 1u);
      *(_QWORD *)(v7 + 8) = "COLOR";
      C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
      *(_OWORD *)(v7 + 16) = v13;
      *(_DWORD *)(v7 + 32) = v14;
      *(_BYTE *)(v7 + 65) = 1;
      v8 = *(_WORD *)(v7 + 66) & 0xFFFC;
    }
    else
    {
      C3D::Pass::setOutputCount(this, 1u);
      v7 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0);
      *(_QWORD *)(v7 + 8) = "COLOR";
      C3D::Pass::parentColorDesc(this, (uint64_t)&v13);
      *(_OWORD *)(v7 + 16) = v13;
      *(_DWORD *)(v7 + 32) = v14;
      *(_WORD *)(v7 + 28) = 115;
      *(_BYTE *)(v7 + 65) = 0;
      v8 = *(_WORD *)(v7 + 66) & 0xFEFC | 0x100;
    }
    *(_WORD *)(v7 + 66) = v8;
  }
}

void C3D::JitteringPass::compile(C3D::JitteringPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  __int16 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  C3D::RenderGraphResourceManager *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  C3D::PassResource *v31;
  uint64_t v32;
  uint64_t v33;
  C3D::RefCountedResource *PersistentResource;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[6];
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::JitteringPass *)((char *)this + 32), 0);
  v5 = -[SCNMTLRenderContext features](RenderContext);
  v6 = 0;
  if ((v5 & 0x800) == 0)
    v6 = (C3DEngineContextGetJitteringStep(*((_QWORD *)this + 2)) & 1) == 0;
  *((_BYTE *)this + 248) = v6;
  v7 = (*(uint64_t (**)(C3D::JitteringPass *))(*(_QWORD *)this + 88))(this);
  v8 = *(int *)(v4 + 16) | (*(_QWORD *)(v7 + 24) << 32);
  v9 = 0xC6A4A7935BD1E995
     * (C3D::Pass::hashName(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995
                                                          * ((0xC6A4A7935BD1E995 * v8) ^ ((0xC6A4A7935BD1E995 * v8) >> 47))));
  v10 = (0xC6A4A7935BD1E995 * (v9 ^ (v9 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v9 ^ (v9 >> 47))) >> 47);
  v11 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v12 = C3D::RenderGraphResourceManager::get(v11, v10);
  *((_QWORD *)this + 30) = v12;
  if (!v12)
  {
    v13 = operator new();
    *(_QWORD *)v13 = &off_1EA599FD8;
    *(_QWORD *)(v13 + 8) = 0;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *((_QWORD *)this + 30) = v13;
    C3D::RenderGraphResourceManager::set((uint64_t)v11, v10, v13);
    v14 = *((_QWORD *)this + 30);
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0;
    v43 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    *(_QWORD *)&v44 = 115;
    v15 = CFSTR("scn_jittering_color_attachment");
    if ((v5 & 0x800) == 0)
      v15 = CFSTR("scn_jittering_texture");
    *((_QWORD *)&v55 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v56 = v15;
    v16 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v41);
    v17 = *(void **)(v14 + 40);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v14 + 40) = v18;
    }
    v19 = *((_QWORD *)this + 30);
    *((_QWORD *)&v36 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    v37 = 115;
    v38 = *(_QWORD *)(v7 + 24);
    v20 = CFSTR("scn_jittering_texture_drawable");
    if ((v5 & 0x800) != 0)
      v20 = CFSTR("scn_jittering_color_attachment_drawable");
    *((_QWORD *)&v39 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v40 = v20;
    v21 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v35);
    v22 = *(void **)(v19 + 32);
    if (v22 != (void *)v21)
    {
      v23 = v21;
      if (v22)

      *(_QWORD *)(v19 + 32) = v23;
    }
    v24 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    objc_msgSend(v24, "setTextureType:", 2);
    objc_msgSend(v24, "setWidth:", *(unsigned __int16 *)(v4 + 16));
    objc_msgSend(v24, "setHeight:", *(unsigned __int16 *)(v4 + 18));
    objc_msgSend(v24, "setPixelFormat:", 115);
    objc_msgSend(v24, "setUsage:", 7);
    if ((v5 & 0x800) == 0)
      objc_msgSend(v24, "setStorageMode:", 0);
    v25 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newTextureWithDescriptor:", v24);
    v26 = *((_QWORD *)this + 30);
    v27 = *(void **)(v26 + 16);
    *(_QWORD *)(v26 + 16) = v25;
    if (v27)

    if ((v5 & 0x800) == 0)
    {
      v28 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newTextureWithDescriptor:", v24);
      v29 = *((_QWORD *)this + 30);
      v30 = *(void **)(v29 + 24);
      *(_QWORD *)(v29 + 24) = v28;
      if (v30)

    }
  }
  v31 = (C3D::PassResource *)C3D::Pass::resource(this);
  v32 = *((_QWORD *)this + 3);
  v33 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 30) + 8 * *((unsigned __int8 *)this + 248) + 16);
  PersistentResource = (C3D::RefCountedResource *)C3D::RenderGraph::createPersistentResource(v32, v33);
  C3D::PassResource::setOutputAtIndex(v31, PersistentResource, 0);
}

uint64_t C3D::JitteringPass::execute(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int JitteringStep;
  int32x2_t v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  int UpdateMainFramebuffer;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t RenderContext;
  void *v23;
  int32x2_t v25;
  float32x2_t v26;

  v3 = *a2;
  JitteringStep = C3DEngineContextGetJitteringStep(*(_QWORD *)(a1 + 16));
  *(float *)v5.i32 = (float)(JitteringStep + 1);
  if (JitteringStep == -1)
  {
    v25 = v5;
    v6 = scn_default_log();
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_FAULT);
    v5 = v25;
    if (v7)
    {
      C3D::JitteringPass::execute(v6, v8, v9);
      v5 = v25;
    }
  }
  v10 = (float32x2_t)vdup_lane_s32(v5, 0);
  __asm { FMOV            V1.2S, #-1.0 }
  _D1.i32[0] = vadd_f32((float32x2_t)v5, _D1).u32[0];
  __asm { FMOV            V2.2S, #1.0 }
  _D1.i32[1] = vdiv_f32(_D2, v10).i32[1];
  v26 = _D1;
  UpdateMainFramebuffer = C3DEngineContextGetUpdateMainFramebuffer(*(_QWORD *)(a1 + 16));
  v18 = *(_QWORD *)(a1 + 240);
  if (UpdateMainFramebuffer)
    v19 = v18 + 32;
  else
    v19 = v18 + 40;
  v20 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v19), "state");
  if (*(_QWORD *)(v3 + 3376) != v20)
  {
    *(_QWORD *)(v3 + 3376) = v20;
    objc_msgSend(*(id *)(v3 + 3392), "setRenderPipelineState:");
  }
  v21 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v21, 0);
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  if ((-[SCNMTLRenderContext features](RenderContext) & 0x800) == 0)
  {
    v23 = (void *)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 240) + 8 * (*(_BYTE *)(a1 + 248) == 0) + 16);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v3, v23, 1uLL);
  }
  SCNMTLRenderCommandEncoder::setFragmentBytes((SCNMTLRenderCommandEncoder *)v3, &v26, 8uLL, 0);
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v3);
}

void C3D::JitteringPassResource::~JitteringPassResource(C3D::JitteringPassResource *this)
{
  void *v2;
  void *v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)this = &off_1EA599FD8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  for (i = 24; i != 8; i -= 8)
  {
    v5 = *(void **)((char *)this + i);
    if (v5)

  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1EA599FD8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)

  v4 = 24;
  while (1)
  {
    v5 = *(void **)((char *)this + v4);
    if (v5)

    v4 -= 8;
    if (v4 == 8)
      JUMPOUT(0x1DF0D41C0);
  }
}

uint64_t vertexSort(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  unsigned int v7;

  v3 = a1[1];
  v4 = a1[2];
  v5 = *(float *)(*a1 + v3 + v4 * *a2);
  v6 = *(float *)(*a1 + v3 + v4 * *a3);
  if (v6 > v5)
    v7 = 1;
  else
    v7 = -1;
  if (v6 == v5)
    return 0;
  else
    return v7;
}

float32x4_t __computeBindingSpaceAndOffset(uint64_t a1, uint64_t a2, uint64_t a3, simd_float4x4 a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  uint64_t v16;
  float32x4_t result;
  uint64_t v18;
  float32x4_t v23;
  simd_float3x3 v24;
  simd_float4x4 v25;

  v25 = __invert_f4(a4);
  v11 = vaddq_f32((float32x4_t)v25.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v25.columns[1], *(float32x2_t *)a6.f32, 1), (float32x4_t)v25.columns[0], a6.f32[0]), (float32x4_t)v25.columns[2], a6, 2));
  v12 = vaddq_f32((float32x4_t)v25.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v25.columns[1], *(float32x2_t *)a8.f32, 1), (float32x4_t)v25.columns[0], a8.f32[0]), (float32x4_t)v25.columns[2], a8, 2));
  v23 = vaddq_f32((float32x4_t)v25.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v25.columns[1], *(float32x2_t *)a5.f32, 1), (float32x4_t)v25.columns[0], a5.f32[0]), (float32x4_t)v25.columns[2], a5, 2));
  v25.columns[0] = (simd_float4)vsubq_f32(vaddq_f32((float32x4_t)v25.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v25.columns[1], *(float32x2_t *)a7.f32, 1), (float32x4_t)v25.columns[0], a7.f32[0]), (float32x4_t)v25.columns[2], a7, 2)), v11);
  v25.columns[2] = (simd_float4)vsubq_f32(v12, v11);
  v25.columns[3] = (simd_float4)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25.columns[0], (int32x4_t)v25.columns[0]), (int8x16_t)v25.columns[0], 0xCuLL), vnegq_f32((float32x4_t)v25.columns[2])), (float32x4_t)v25.columns[0], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25.columns[2], (int32x4_t)v25.columns[2]), (int8x16_t)v25.columns[2], 0xCuLL));
  v25.columns[1] = (simd_float4)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25.columns[3], (int32x4_t)v25.columns[3]), (int8x16_t)v25.columns[3], 0xCuLL);
  v13 = (int32x4_t)vmulq_f32((float32x4_t)v25.columns[0], (float32x4_t)v25.columns[0]);
  v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
  v25.columns[0] = (simd_float4)vmulq_n_f32((float32x4_t)v25.columns[0], vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
  v25.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v25.columns[3], (float32x4_t)v25.columns[3]);
  v25.columns[3].i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.columns[3].f32, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v25.columns[3], 2), *(float32x2_t *)v25.columns[3].f32)).u32[0];
  *(float32x2_t *)v13.i8 = vrsqrte_f32((float32x2_t)v25.columns[3].u32[0]);
  *(float32x2_t *)v13.i8 = vmul_f32(*(float32x2_t *)v13.i8, vrsqrts_f32((float32x2_t)v25.columns[3].u32[0], vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8)));
  v25.columns[1] = (simd_float4)vmulq_n_f32((float32x4_t)v25.columns[1], vmul_f32(*(float32x2_t *)v13.i8, vrsqrts_f32((float32x2_t)v25.columns[3].u32[0], vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8))).f32[0]);
  v25.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v25.columns[2], (float32x4_t)v25.columns[2]);
  v25.columns[3].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v25.columns[3], 2), vadd_f32(*(float32x2_t *)v25.columns[3].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.columns[3].f32, 1))).u32[0];
  *(float32x2_t *)v13.i8 = vrsqrte_f32((float32x2_t)v25.columns[3].u32[0]);
  *(float32x2_t *)v13.i8 = vmul_f32(*(float32x2_t *)v13.i8, vrsqrts_f32((float32x2_t)v25.columns[3].u32[0], vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8)));
  v25.columns[2] = (simd_float4)vmulq_n_f32((float32x4_t)v25.columns[2], vmul_f32(*(float32x2_t *)v13.i8, vrsqrts_f32((float32x2_t)v25.columns[3].u32[0], vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v13.i8))).f32[0]);
  v16 = a2 + 36 * a1;
  v25.columns[3] = v25.columns[0];
  v25.columns[3].i32[3] = v25.columns[1].i32[0];
  *(simd_float4 *)v16 = v25.columns[3];
  *(int8x16_t *)(v16 + 16) = vextq_s8(vextq_s8((int8x16_t)v25.columns[1], (int8x16_t)v25.columns[1], 0xCuLL), (int8x16_t)v25.columns[2], 8uLL);
  *(_DWORD *)(v16 + 32) = v25.columns[2].i32[2];
  v24 = __invert_f3(*(simd_float3x3 *)v25.columns[0].f32);
  result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v24.columns[0], v23.f32[0]), (float32x4_t)v24.columns[1], *(float32x2_t *)v23.f32, 1), (float32x4_t)v24.columns[2], v23, 2);
  v18 = a3 + 12 * a1;
  *(_QWORD *)v18 = result.i64[0];
  *(_DWORD *)(v18 + 8) = result.i32[2];
  return result;
}

void C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs(uint64_t a1, size_t count, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23,size_t *a24)
{
  int v28;
  const __CFArray *ElementsCount;
  CFIndex v30;
  char *v31;
  const void *ElementAtIndex;
  __n128 v33;
  uint64_t v34;
  size_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  uint32x2_t v44;
  float32x2_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  __int32 v60;
  int v61;
  unint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int v68;
  int8x16_t v69;
  __int128 v70;
  uint64_t v72;
  size_t v73;
  void *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  simd_float3 v84;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  _QWORD v89[18];
  int v90;
  _QWORD block[16];
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96[3];
  __int128 v97;
  uint64_t v98;
  simd_float3x3 v99;
  simd_float3x3 v100;
  simd_float4x4 v101;
  simd_float4x4 v102;

  v98 = *MEMORY[0x1E0C80C00];
  if (a13 == a14)
  {
    block[0] = MEMORY[0x1E0C809B0];
    v28 = count;
    block[1] = 3221225472;
    block[2] = ___Z68C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_PK15__C3DMeshSourceS5_S5_S5_llll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_PSA_Pm_block_invoke;
    block[3] = &__block_descriptor_128_e8_v16__0Q8l;
    block[4] = a7;
    block[5] = a4;
    block[6] = a6;
    block[7] = a8;
    block[8] = a15;
    block[9] = a16;
    block[10] = a17;
    block[11] = a22;
    block[12] = a21;
    block[13] = a18;
    block[14] = a19;
    block[15] = a20;
    dispatch_apply(count, 0, block);
  }
  else
  {
    v92.i64[0] = 0;
    v92.i64[1] = (uint64_t)&v92;
    v93.i64[0] = 0x2020000000;
    v93.i32[2] = 0;
    v28 = count;
    v79 = malloc_type_calloc(count, 4uLL, 0x100004052888210uLL);
    ElementsCount = C3DMeshGetElementsCount(a3);
    if ((uint64_t)ElementsCount <= 0)
    {
      v34 = v92.i64[1];
    }
    else
    {
      v72 = a8;
      v30 = 0;
      v31 = (char *)ElementsCount - 1;
      do
      {
        ElementAtIndex = C3DMeshGetElementAtIndex(a3, v30, 0);
        C3DMeshElementGetContent((uint64_t)ElementAtIndex, a13, (uint64_t)v96);
        C3DMeshElementGetContent((uint64_t)ElementAtIndex, a14, (uint64_t)&v97 + 8);
        v89[0] = MEMORY[0x1E0C809B0];
        v89[1] = 3221225472;
        v89[2] = ___Z68C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_PK15__C3DMeshSourceS5_S5_S5_llll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_PSA_Pm_block_invoke_2;
        v89[3] = &unk_1EA5A3140;
        v89[6] = a7;
        v89[7] = a4;
        v89[8] = a6;
        v89[9] = v72;
        v89[10] = a15;
        v89[11] = a16;
        v89[12] = a17;
        v89[13] = a22;
        v89[14] = a21;
        v89[15] = a18;
        v89[16] = a19;
        v89[17] = a20;
        v89[4] = &v92;
        v89[5] = v79;
        v90 = v28;
        C3DIndicesContentArrayEnumeratePrimitives(v96[0].i64, 2u, (uint64_t)v89, v33);
        v34 = v92.i64[1];
        if (*(_DWORD *)(v92.i64[1] + 24) == v28)
          break;
      }
      while (v31 != (char *)v30++);
    }
    if (*(_DWORD *)(v34 + 24) != v28)
      __assert_rtn("C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs", "SCNGeometryWrapDeformerUtils.mm", 889, "doneIndicesCount == vertexCount");
    free(v79);
    _Block_object_dispose(&v92, 8);
  }
  if (a1 == 1)
  {
    v36 = 16 * (3 * v28);
  }
  else if (a1)
  {
    v36 = 0;
  }
  else
  {
    v36 = 4 * (3 * v28);
  }
  v73 = v36;
  v37 = malloc_type_malloc(v36, 0xD2ACD806uLL);
  if (v28)
  {
    v38 = 0;
    while (1)
    {
      if (a18)
      {
        v39 = *(unsigned __int8 *)(a18 + (3 * v38));
        v40 = *(unsigned __int8 *)(a18 + (3 * v38 + 1));
        v41 = *(unsigned __int8 *)(a18 + (3 * v38 + 2));
      }
      else if (a19)
      {
        v39 = *(unsigned __int16 *)(a19 + 2 * (3 * v38));
        v40 = *(unsigned __int16 *)(a19 + 2 * (3 * v38 + 1));
        v41 = *(unsigned __int16 *)(a19 + 2 * (3 * v38 + 2));
      }
      else if (a20)
      {
        v39 = *(unsigned int *)(a20 + 4 * (3 * v38));
        v40 = *(unsigned int *)(a20 + 4 * (3 * v38 + 1));
        v41 = *(unsigned int *)(a20 + 4 * (3 * v38 + 2));
      }
      else
      {
        v41 = 0;
        v40 = 0;
        v39 = 0;
      }
      v42 = (2 * v38);
      if (a22)
      {
        v43 = (unsigned __int16 *)(a22 + 2 * v42);
        v44.i32[0] = *v43;
        v44.i32[1] = v43[1];
        v45 = vdiv_f32(vcvt_f32_u32(v44), (float32x2_t)vdup_n_s32(0x477FFF00u));
      }
      else
      {
        v45 = *(float32x2_t *)(a21 + 4 * v42);
      }
      *(float32x2_t *)v86.f32 = v45;
      *(double *)v46.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a6, v39);
      v83 = v46;
      *(double *)v47.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a6, v40);
      v81 = v47;
      *(double *)v48.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a6, v41);
      v87 = vmlaq_n_f32(vmlaq_n_f32(vmulq_lane_f32(v81, *(float32x2_t *)v86.f32, 1), v83, v86.f32[0]), v48, (float)(1.0 - v86.f32[0]) - v86.f32[1]);
      v49 = vsubq_f32(v81, v83);
      v50 = vsubq_f32(v48, v83);
      v51 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v50)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL));
      v52 = (int32x4_t)vmulq_f32(v49, v49);
      v53 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
      v52.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v52, 2), vadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1))).u32[0];
      v54 = vrsqrte_f32((float32x2_t)v52.u32[0]);
      v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v54, v54)));
      v56 = vmulq_n_f32(v49, vmul_f32(v55, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v55, v55))).f32[0]);
      v57 = (int32x4_t)vmulq_f32(v51, v51);
      v57.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), *(float32x2_t *)v57.i8)).u32[0];
      *(float32x2_t *)v51.f32 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      *(float32x2_t *)v51.f32 = vmul_f32(*(float32x2_t *)v51.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32)));
      v82 = vmulq_n_f32(v53, vmul_f32(*(float32x2_t *)v51.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32))).f32[0]);
      v84 = (simd_float3)v56;
      v58 = (int32x4_t)vmulq_f32(v50, v50);
      v58.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v58, 2), vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1))).u32[0];
      *(float32x2_t *)v53.f32 = vrsqrte_f32((float32x2_t)v58.u32[0]);
      *(float32x2_t *)v53.f32 = vmul_f32(*(float32x2_t *)v53.f32, vrsqrts_f32((float32x2_t)v58.u32[0], vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32)));
      v80 = vmulq_n_f32(v50, vmul_f32(*(float32x2_t *)v53.f32, vrsqrts_f32((float32x2_t)v58.u32[0], vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v53.f32))).f32[0]);
      if (a1 == 1)
        break;
      if (!a1)
      {
        *(double *)v59.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a5, v38);
        v88 = vsubq_f32(vaddq_f32(a12, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a10, *(float32x2_t *)v59.f32, 1), a9, v59.f32[0]), a11, v59, 2)), v87);
        v99.columns[1] = (simd_float3)v82;
        v99.columns[0] = v84;
        v99.columns[2] = (simd_float3)v80;
        v100 = __invert_f3(v99);
        v100.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v100.columns[0], v88.f32[0]), (float32x4_t)v100.columns[1], *(float32x2_t *)v88.f32, 1), (float32x4_t)v100.columns[2], v88, 2);
        v37[(3 * v38)] = v100.columns[0].i32[0];
        v37[(3 * v38 + 1)] = v100.columns[0].i32[1];
        v60 = v100.columns[0].i32[2];
        v61 = 3 * v38 + 2;
LABEL_35:
        v37[v61] = v60;
      }
      if (++v38 == v28)
        goto LABEL_37;
    }
    v101.columns[1] = (simd_float4)v82;
    v101.columns[0] = (simd_float4)v56;
    v101.columns[0].i32[3] = 0;
    v101.columns[1].i32[3] = 0;
    v101.columns[2] = (simd_float4)v80;
    v101.columns[2].i32[3] = 0;
    __asm { FMOV            V3.4S, #1.0 }
    v101.columns[3].i64[0] = v87.i64[0];
    v101.columns[3].i32[2] = v87.i32[2];
    v102 = __invert_f4(v101);
    v65 = 0;
    v92 = a9;
    v93 = a10;
    v94 = a11;
    v95 = a12;
    do
    {
      v96[v65 / 4] = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v102.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v92 + v65 * 4))), (float32x4_t)v102.columns[1], *(float32x2_t *)&v92.f32[v65], 1), (float32x4_t)v102.columns[2], *(float32x4_t *)((char *)&v92 + v65 * 4), 2), (float32x4_t)v102.columns[3], *(float32x4_t *)((char *)&v92 + v65 * 4), 3);
      v65 += 4;
    }
    while (v65 != 16);
    v66 = v96[0];
    v67 = v96[1];
    v68 = 12 * v38;
    v69 = v96[2];
    v70 = v97;
    v37[v68] = v96[0].i32[0];
    v37[(12 * (_DWORD)v38) | 1] = v67.i32[0];
    v37[(12 * (_DWORD)v38) | 2] = v69.i32[0];
    v37[(12 * (_DWORD)v38) | 3] = v70;
    *(int32x2_t *)&v37[v68 + 4] = vzip2_s32(*(int32x2_t *)v66.i8, *(int32x2_t *)v67.i8);
    *(int32x2_t *)&v37[v68 + 6] = vzip2_s32(*(int32x2_t *)v69.i8, *(int32x2_t *)&v70);
    *(int32x2_t *)&v37[v68 + 8] = vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
    v37[v68 + 10] = v69.i32[2];
    v60 = DWORD2(v70);
    v61 = 12 * v38 + 11;
    goto LABEL_35;
  }
LABEL_37:
  *a23 = v37;
  *a24 = v73;
}

void sub_1DCEBCA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;

  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

void ___Z68C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_PK15__C3DMeshSourceS5_S5_S5_llll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_PSA_Pm_block_invoke(uint64_t *a1, uint64_t a2)
{
  double ValueAtIndexAsVector2;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  DWORD2(v15) = 0;
  *(_QWORD *)&v15 = 0;
  DWORD2(v14) = 0;
  *(_QWORD *)&v14 = 0;
  DWORD2(v13) = 0;
  *(_QWORD *)&v13 = 0;
  ValueAtIndexAsVector2 = C3DMeshSourceGetValueAtIndexAsVector2(a1[4], a2);
  __bindToUV(a1[5], a1[7], a1[8], a1[9], &v14, &v13, &v15, ValueAtIndexAsVector2);
  v5 = a1[11];
  if (a1[10])
    v6 = &v14;
  else
    v6 = &v13;
  v7 = *v6;
  if (v5)
  {
    *(_WORD *)(v5 + 4 * a2) = (int)(float)(65535.0 * *(float *)&v7);
    *(_WORD *)(v5 + ((4 * a2) | 2)) = (int)vmuls_lane_f32(65535.0, *(float32x2_t *)&v7, 1);
  }
  else
  {
    *(_QWORD *)(a1[12] + 8 * a2) = v7;
  }
  v8 = a1[13];
  if (v8)
  {
    *(_BYTE *)(v8 + 3 * a2) = v15;
    *(_BYTE *)(3 * a2 + a1[13] + 1) = BYTE4(v15);
    *(_BYTE *)(3 * a2 + a1[13] + 2) = BYTE8(v15);
  }
  else
  {
    v9 = a1[14];
    if (v9)
    {
      v10 = (_WORD *)(v9 + 6 * a2);
      *v10 = v15;
      v10[1] = WORD2(v15);
      v10[2] = WORD4(v15);
    }
    else
    {
      v11 = a1[15];
      if (v11)
      {
        v12 = v11 + 12 * a2;
        *(_QWORD *)v12 = v15;
        *(_DWORD *)(v12 + 8) = DWORD2(v15);
      }
    }
  }
}

void __bindToUV(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, double a8)
{
  const __CFArray *ElementsCount;
  CFIndex v16;
  const void *ElementAtIndex;
  __n128 v18;
  uint64_t *v19;
  _QWORD v21[14];
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28[7];
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v23 = 2139095039;
  v40 = 0;
  v41 = &v40;
  v44 = 0;
  v42 = 0x3020000000;
  v43 = 0;
  v35 = 0;
  v36 = &v35;
  v39 = 0;
  v37 = 0x3020000000;
  v38 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3020000000;
  v34 = 0;
  v33 = 0;
  ElementsCount = C3DMeshGetElementsCount(a1);
  if ((uint64_t)ElementsCount >= 1)
  {
    v16 = 0;
    do
    {
      if (*((_BYTE *)v25 + 24))
        break;
      ElementAtIndex = C3DMeshGetElementAtIndex(a1, v16, 0);
      C3DMeshElementGetContent((uint64_t)ElementAtIndex, a3, (uint64_t)v28);
      C3DMeshElementGetContent((uint64_t)ElementAtIndex, a4, (uint64_t)&v29);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = ___ZL10__bindToUVDv2_fP9__C3DMeshPK15__C3DMeshSourceS4_llPDv3_fS6_PDv3_j_block_invoke;
      v21[3] = &unk_1EA5A31B0;
      *(double *)&v21[10] = a8;
      v21[11] = a5;
      v21[12] = a6;
      v21[13] = a7;
      v21[4] = &v24;
      v21[5] = v22;
      v21[6] = &v35;
      v21[7] = &v40;
      v21[8] = &v30;
      v21[9] = a2;
      C3DIndicesContentArrayEnumeratePrimitives(v28, 2u, (uint64_t)v21, v18);
      ++v16;
    }
    while (ElementsCount != (const __CFArray *)v16);
  }
  v19 = v25;
  if (!*((_BYTE *)v25 + 24))
  {
    *a5 = *((_OWORD *)v36 + 2);
    *a6 = *((_OWORD *)v41 + 2);
    *a7 = *((_OWORD *)v31 + 2);
    *((_BYTE *)v19 + 24) = 1;
  }
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_1DCEBCE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 256), 8);
  _Block_object_dispose((const void *)(v29 - 208), 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void ___Z68C3DWrapDeformerComputeBindingPointIndicesAndBarycentricCoordsFromUVs34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_PK15__C3DMeshSourceS5_S5_S5_llll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_PSA_Pm_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double ValueAtIndexAsVector2;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  if (a4)
  {
    v8 = 0;
    v9 = 2 * a4;
    while (1)
    {
      v10 = *(unsigned int *)(a3 + 4 * v8);
      v11 = *(_QWORD *)(a1 + 40);
      if (!*(_DWORD *)(v11 + 4 * v10))
      {
        v12 = *(unsigned int *)(a3 + 4 * (v8 + 1));
        *(_DWORD *)(v11 + 4 * v10) = 1;
        DWORD2(v23) = 0;
        *(_QWORD *)&v23 = 0;
        DWORD2(v22) = 0;
        *(_QWORD *)&v22 = 0;
        DWORD2(v21) = 0;
        *(_QWORD *)&v21 = 0;
        ValueAtIndexAsVector2 = C3DMeshSourceGetValueAtIndexAsVector2(*(_QWORD *)(a1 + 48), v12);
        __bindToUV(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), &v22, &v21, &v23, ValueAtIndexAsVector2);
        v14 = *(_QWORD *)(a1 + 104);
        v15 = *(_QWORD *)(a1 + 96) ? &v22 : &v21;
        v16 = *v15;
        if (v14)
        {
          *(_WORD *)(v14 + 2 * (2 * v10)) = (int)(float)(65535.0 * *(float *)&v16);
          *(_WORD *)(v14 + 2 * ((2 * (_DWORD)v10) | 1u)) = (int)vmuls_lane_f32(65535.0, *(float32x2_t *)&v16, 1);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 112) + 4 * (2 * v10)) = v16;
        }
        v17 = *(_QWORD *)(a1 + 120);
        if (v17)
        {
          v18 = (3 * v10);
          *(_BYTE *)(v17 + v18) = v23;
          *(_BYTE *)(*(_QWORD *)(a1 + 120) + (v18 + 1)) = BYTE4(v23);
          *(_BYTE *)(*(_QWORD *)(a1 + 120) + (v18 + 2)) = BYTE8(v23);
        }
        else
        {
          v19 = *(_QWORD *)(a1 + 128);
          if (v19)
          {
            *(_WORD *)(v19 + 2 * (3 * v10)) = v23;
            *(_WORD *)(v19 + 2 * (3 * v10 + 1)) = WORD2(v23);
            *(_WORD *)(v19 + 2 * (3 * v10 + 2)) = WORD4(v23);
          }
          else
          {
            v20 = *(_QWORD *)(a1 + 136);
            if (v20)
            {
              *(_DWORD *)(v20 + 4 * (3 * v10)) = v23;
              *(_DWORD *)(v20 + 4 * (3 * v10 + 1)) = DWORD1(v23);
              *(_DWORD *)(v20 + 4 * (3 * v10 + 2)) = DWORD2(v23);
            }
          }
        }
        if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == *(_DWORD *)(a1 + 144))
          break;
      }
      v8 += 2;
      if (v9 == v8)
        return;
    }
    *a5 = 1;
  }
}

void C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions(uint64_t a1, size_t iterations, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,void **a23,size_t *a24,void **a25,_QWORD *a26,size_t *a27)
{
  unsigned int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  size_t v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD block[4];
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  void **v65;
  void **v66;
  _QWORD *v67;

  v27 = iterations;
  v30 = a20;
  v29 = a21;
  v31 = a18;
  v32 = a19;
  v34 = a16;
  v33 = a17;
  if (a1 == 1)
  {
    v36 = 4 * (9 * iterations);
    *a24 = v36;
    v44 = a7;
    v45 = a8;
    v42 = a4;
    v43 = a6;
    v40 = a11;
    v41 = a12;
    v38 = a9;
    v39 = a10;
    *a22 = malloc_type_malloc(v36, 0x371B70CuLL);
    *a23 = malloc_type_malloc(*a24, 0x4A522E49uLL);
    v37 = 12 * v27;
    *a27 = v37;
    *a25 = malloc_type_malloc(v37, 0xDF8D148FuLL);
    v35 = malloc_type_malloc(*a27, 0x24B29066uLL);
    v34 = a16;
    v33 = a17;
    v32 = a19;
    v30 = a20;
    v29 = a21;
    v31 = a18;
    a9 = v38;
    a10 = v39;
    a11 = v40;
    a12 = v41;
    a4 = v42;
    a6 = v43;
    a7 = v44;
    a8 = v45;
    goto LABEL_5;
  }
  if (!a1)
  {
    v35 = 0;
    *a24 = 0;
    *a22 = 0;
    *a23 = 0;
    *a27 = 0;
    *a25 = 0;
LABEL_5:
    *a26 = v35;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___Z90C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_S2_PK15__C3DMeshSourceS5_S5_ll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_SA_PSA_SB_PmSB_SB_SC__block_invoke;
  block[3] = &__block_descriptor_232_e8_v16__0Q8l;
  v47 = a9;
  v48 = a10;
  v49 = a11;
  v50 = a12;
  v51 = a6;
  v52 = a4;
  v53 = a13;
  v54 = a7;
  v55 = a8;
  v56 = a15;
  v57 = v29;
  v58 = v30;
  v59 = v32;
  v60 = v34;
  v61 = v33;
  v62 = v31;
  v63 = a1;
  v64 = a22;
  v65 = a25;
  v66 = a23;
  v67 = a26;
  dispatch_apply(v27, 0, block);
}

void ___Z90C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_S2_PK15__C3DMeshSourceS5_S5_ll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_SA_PSA_SB_PmSB_SB_SC__block_invoke(uint64_t a1, uint64_t a2)
{
  float32x4_t v3;
  const __CFArray *ElementsCount;
  CFIndex i;
  const void *ElementAtIndex;
  uint64_t *v7;
  _QWORD *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  _DWORD *v31;
  __n128 v32;
  __n128 v34;
  __n128 v35;
  float32x4_t v36;
  __n128 v37;
  float32x4_t v38;
  __n128 v39;
  float32x4_t v40;
  __n128 v41;
  float32x4_t v42;
  __int128 v43;
  float32x4_t v44;
  __n128 v45;
  _QWORD v46[4];
  __n128 v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  __int128 v56;
  _OWORD v57[3];
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD v85[4];
  int v86;
  uint64_t v87;
  _QWORD v88[4];
  int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  *(double *)v3.i64 = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 96), a2);
  v44 = v3;
  v40 = *(float32x4_t *)(a1 + 64);
  v42 = *(float32x4_t *)(a1 + 32);
  v36 = *(float32x4_t *)(a1 + 48);
  v38 = *(float32x4_t *)(a1 + 80);
  v65 = 0;
  v66 = &v65;
  v67 = 0x2020000000;
  v68 = 0;
  v90 = 0;
  v91 = &v90;
  v92 = 0x3020000000;
  v94 = 0;
  v93 = 0;
  v87 = 0;
  v88[0] = &v87;
  v89 = 0;
  v88[1] = 0x3020000000;
  v88[3] = 0;
  v84 = 0;
  v85[0] = &v84;
  v86 = 0;
  v85[1] = 0x3020000000;
  v85[3] = 0;
  v63[0] = 0;
  v63[1] = v63;
  v63[2] = 0x2020000000;
  v64 = 2139095039;
  v79 = 0;
  v80 = &v79;
  v83 = 0;
  v81 = 0x3020000000;
  v82 = 0;
  v74 = 0;
  v75 = &v74;
  v78 = 0;
  v76 = 0x3020000000;
  v77 = 0;
  v69 = 0;
  v70 = &v69;
  v71 = 0x3020000000;
  v73 = 0;
  v72 = 0;
  ElementsCount = C3DMeshGetElementsCount(*(_QWORD *)(a1 + 104));
  v45 = (__n128)vaddq_f32(v38, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v36, *(float32x2_t *)v44.f32, 1), v42, v44.f32[0]), v40, v44, 2));
  if ((uint64_t)ElementsCount >= 1)
  {
    for (i = 0; (const __CFArray *)i != ElementsCount; ++i)
    {
      if (*((_BYTE *)v66 + 24))
        break;
      ElementAtIndex = C3DMeshGetElementAtIndex(*(_QWORD *)(a1 + 104), i, 0);
      v62 = 0;
      v60 = 0u;
      v61 = 0u;
      v59 = 0u;
      C3DMeshElementGetContent((uint64_t)ElementAtIndex, *(_QWORD *)(a1 + 112), (uint64_t)&v59);
      v57[0] = v59;
      v57[1] = v60;
      v57[2] = v61;
      v58 = v62;
      v46[0] = MEMORY[0x1E0C809B0];
      v46[1] = 3221225472;
      v46[2] = ___Z90C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_S2_PK15__C3DMeshSourceS5_S5_ll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_SA_PSA_SB_PmSB_SB_SC__block_invoke_2;
      v46[3] = &unk_1EA5A3168;
      v56 = *(_OWORD *)(a1 + 120);
      v47 = v45;
      v48 = &v65;
      v49 = &v87;
      v50 = &v84;
      v51 = &v90;
      v52 = v63;
      v53 = &v79;
      v54 = &v74;
      v55 = &v69;
      C3DIndicesContentEnumeratePrimitives((uint64_t *)v57, (uint64_t)v46, v45);
    }
  }
  v7 = v66;
  if (!*((_BYTE *)v66 + 24))
  {
    *(_OWORD *)(v88[0] + 32) = *((_OWORD *)v75 + 2);
    *(_OWORD *)(v85[0] + 32) = *((_OWORD *)v80 + 2);
    *((_OWORD *)v91 + 2) = *((_OWORD *)v70 + 2);
    *((_BYTE *)v7 + 24) = 1;
  }
  if (*(_QWORD *)(a1 + 136))
    v8 = v88;
  else
    v8 = v85;
  v43 = *(_OWORD *)(*v8 + 32);
  v9.n128_f64[0] = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 120), *((unsigned int *)v91 + 8));
  v41 = v9;
  v10.n128_f64[0] = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 120), *((unsigned int *)v91 + 9));
  v39 = v10;
  v11.n128_f64[0] = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 120), *((unsigned int *)v91 + 10));
  v37 = v11;
  v12.n128_f64[0] = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 128), *((unsigned int *)v91 + 8));
  v35 = v12;
  v13.n128_f64[0] = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 128), *((unsigned int *)v91 + 9));
  v34 = v13;
  *(double *)v14.i64 = C3DMeshSourceGetValueAtIndexAsVector3(*(_QWORD *)(a1 + 128), *((unsigned int *)v91 + 10));
  v15 = (float)(1.0 - *(float *)&v43) - *((float *)&v43 + 1);
  v32 = (__n128)v14;
  v16 = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v39, *(float32x2_t *)&v43, 1), (float32x4_t)v41, *(float *)&v43), (float32x4_t)v37, v15), (float32x4_t)v45);
  v17 = vsubq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v34, *(float32x2_t *)&v43, 1), (float32x4_t)v35, *(float *)&v43), v14, v15), (float32x4_t)v45);
  v18 = vmulq_f32(v16, v16);
  v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
  v20 = vmulq_f32(v17, v17);
  v21 = vmulq_f32(v16, v17);
  v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0] >= 0.0)
  {
    if (v19 < v22)
    {
      v24 = __adjustDistanceByAligningProjection((float32x4_t)v45, v35, v34, v32, v16);
      v25 = v24 / (float)(v19 + v24);
      goto LABEL_16;
    }
    v23 = v22 + __adjustDistanceByAligningProjection((float32x4_t)v45, v41, v39, v37, v17);
  }
  else
  {
    v23 = v19 + v22;
  }
  v25 = v22 / v23;
LABEL_16:
  *(float *)(*(_QWORD *)(a1 + 144) + 4 * a2) = v25;
  v26 = *(_QWORD *)(a1 + 152);
  if (v26)
  {
    *(_WORD *)(v26 + 4 * a2) = (int)(float)(*(float *)&v43 * 65535.0);
    *(_WORD *)(v26 + ((4 * a2) | 2)) = (int)(float)(*((float *)&v43 + 1) * 65535.0);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * a2) = v43;
  }
  v27 = *(_QWORD *)(a1 + 168);
  if (v27)
  {
    *(_BYTE *)(v27 + 3 * a2) = *((_OWORD *)v91 + 2);
    *(_BYTE *)(3 * a2 + *(_QWORD *)(a1 + 168) + 1) = *((_BYTE *)v91 + 36);
    *(_BYTE *)(3 * a2 + *(_QWORD *)(a1 + 168) + 2) = *((_BYTE *)v91 + 40);
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 176);
    if (v28)
    {
      v29 = (_WORD *)(v28 + 6 * a2);
      *v29 = *((_OWORD *)v91 + 2);
      v29[1] = *((_WORD *)v91 + 18);
      v29[2] = *((_WORD *)v91 + 20);
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 184);
      if (v30)
      {
        v31 = (_DWORD *)(v30 + 12 * a2);
        *v31 = *((_DWORD *)v91 + 8);
        v31[1] = *((_DWORD *)v91 + 9);
        v31[2] = *((_DWORD *)v91 + 10);
      }
    }
  }
  if (*(_QWORD *)(a1 + 192) == 1)
  {
    __computeBindingSpaceAndOffset(a2, **(_QWORD **)(a1 + 200), **(_QWORD **)(a1 + 208), *(simd_float4x4 *)(a1 + 32), (float32x4_t)v45, (float32x4_t)v41, (float32x4_t)v39, (float32x4_t)v37);
    __computeBindingSpaceAndOffset(a2, **(_QWORD **)(a1 + 216), **(_QWORD **)(a1 + 224), *(simd_float4x4 *)(a1 + 32), (float32x4_t)v45, (float32x4_t)v35, (float32x4_t)v34, (float32x4_t)v32);
  }
  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v74, 8);
  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(v63, 8);
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v87, 8);
  _Block_object_dispose(&v90, 8);
  _Block_object_dispose(&v65, 8);
}

void sub_1DCEBD7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;
  uint64_t v69;

  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v69 - 224), 8);
  _Block_object_dispose((const void *)(v69 - 176), 8);
  _Block_object_dispose(&a65, 8);
  _Unwind_Resume(a1);
}

BOOL ___Z90C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_S2_PK15__C3DMeshSourceS5_S5_ll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_SA_PSA_SB_PmSB_SB_SC__block_invoke_2(float32x4_t *a1, uint64_t a2, unsigned int *a3, int a4, _BYTE *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t *v29;
  float32x4_t *v30;
  float32x4_t *v31;
  char v32;
  _BOOL8 result;
  unsigned int v34;
  unsigned int v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned int v44;
  float32x4_t v45;
  float32x4_t v46;
  unsigned int v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66[3];

  if (a4 != 4)
    ___Z90C3DWrapDeformerComputeSharedBindingPointIndicesAndBarycentricCoordsFromSandwichedPositions34SCNGeometryWrapDeformerBindingMode13simd_float4x4jP9__C3DMeshS2_S2_PK15__C3DMeshSourceS5_S5_ll38SCNWrapDeformerBarycentricCoordsPolicyPhPtPjPfS8_SA_PSA_SB_PmSB_SB_SC__block_invoke_2_cold_1();
  v7 = *a3;
  v6 = a3[1];
  v8 = a3[2];
  v9 = a3[3];
  *(double *)v10.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[0], v7);
  v54 = v10;
  *(double *)v11.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[0], v6);
  v53 = v11;
  *(double *)v12.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[0], v8);
  v52 = v12;
  *(double *)v13.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[0], v9);
  v46 = v13;
  *(double *)v14.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[1], v7);
  v62 = v14;
  *(double *)v15.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[1], v6);
  v60 = v15;
  *(double *)v16.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[1], v8);
  v58 = v16;
  *(double *)v17.i64 = C3DMeshSourceGetValueAtIndexAsVector3(a1[7].i64[1], v9);
  v18 = 0;
  v51 = vsubq_f32(v62, v54);
  v19 = vsubq_f32(v60, v53);
  v50 = v19;
  v20 = v7;
  v19.i32[0] = v7;
  v21 = v19;
  v48 = v6;
  v21.i32[1] = v6;
  v49 = vsubq_f32(v58, v52);
  v22 = v21;
  v22.i32[2] = v8;
  v21.i32[2] = v9;
  v42 = v21;
  v43 = v22;
  v45 = vsubq_f32(v17, v46);
  v47 = v8;
  v19.i32[1] = v8;
  v44 = v9;
  v19.i32[2] = v9;
  v41 = v19;
  while (1)
  {
    v23 = (double)v18 * 0.025;
    v24 = a1[2];
    v56 = v23;
    v25 = (float32x4_t *)(*(_QWORD *)(a1[3].i64[1] + 8) + 32);
    v26 = (float32x4_t *)(*(_QWORD *)(a1[4].i64[0] + 8) + 32);
    v27 = (float32x4_t *)(*(_QWORD *)(a1[4].i64[1] + 8) + 32);
    v28 = *(_QWORD *)(a1[5].i64[0] + 8);
    v29 = *(float32x4_t **)(a1[5].i64[1] + 8);
    v30 = *(float32x4_t **)(a1[6].i64[0] + 8);
    v31 = *(float32x4_t **)(a1[6].i64[1] + 8);
    v66[0] = 0.0;
    v65.i32[2] = 0;
    v65.i64[0] = 0;
    v64.i32[2] = 0;
    v64.i64[0] = 0;
    v59 = vmlaq_n_f32(v53, v50, v23);
    v61 = vmlaq_n_f32(v54, v51, v23);
    v55 = vmlaq_n_f32(v52, v49, v23);
    v63 = v24;
    if (__computeBarycentricCoordinates3D(v66, &v64, &v65, v61, v59, v55, v24))
    {
      v32 = 1;
      result = v20;
      v35 = v47;
      v34 = v48;
      goto LABEL_19;
    }
    v36 = v29 + 2;
    v37 = v30 + 2;
    v38 = v31 + 2;
    if (v66[0] < *(float *)(v28 + 24))
    {
      *(float *)(v28 + 24) = v66[0];
      *v37 = v64;
      *v36 = v65;
      *v38 = v43;
    }
    v57 = vmlaq_n_f32(v46, v45, v56);
    if (__computeBarycentricCoordinates3D(v66, &v64, &v65, v61, v59, v57, v63))
    {
      v32 = 1;
      result = v20;
      v34 = v48;
      goto LABEL_18;
    }
    if (v66[0] < *(float *)(v28 + 24))
    {
      *(float *)(v28 + 24) = v66[0];
      *v37 = v64;
      *v36 = v65;
      *v38 = v42;
    }
    if (__computeBarycentricCoordinates3D(v66, &v64, &v65, v61, v55, v57, v63))
    {
      v32 = 1;
      result = v20;
LABEL_17:
      v34 = v47;
LABEL_18:
      v35 = v44;
LABEL_19:
      *v25 = v64;
      v39.i32[3] = v65.i32[3];
      *v26 = v65;
      v39.i64[0] = __PAIR64__(v34, result);
      v39.i32[2] = v35;
      *v27 = v39;
      goto LABEL_20;
    }
    if (v66[0] < *(float *)(v28 + 24))
    {
      *(float *)(v28 + 24) = v66[0];
      *v37 = v64;
      *v36 = v65;
      *v38 = v41;
    }
    result = __computeBarycentricCoordinates3D(v66, &v64, &v65, v59, v55, v57, v63);
    if (result)
    {
      v32 = 1;
      result = v48;
      goto LABEL_17;
    }
    v32 = 0;
    if (v66[0] < *(float *)(v28 + 24))
    {
      v25 = v37;
      *(float *)(v28 + 24) = v66[0];
      v26 = v36;
      result = v48;
      v34 = v47;
      v35 = v44;
      v27 = v38;
      goto LABEL_19;
    }
LABEL_20:
    *(_BYTE *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24) = v32;
    if (*(_BYTE *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24))
      break;
    if (++v18 == 41)
      return result;
  }
  *a5 = 1;
  return result;
}

float __adjustDistanceByAligningProjection(float32x4_t a1, __n128 a2, __n128 a3, __n128 a4, float32x4_t a5)
{
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v13;
  _OWORD v14[2];
  float v15[4];
  _OWORD v16[3];

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  C3DPlaneMakeWithTriangle((uint64_t)v15, (uint64_t)v16);
  v5 = (int32x4_t)vmulq_f32(a5, a5);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  v14[0] = a1;
  v14[1] = vmulq_n_f32(a5, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]);
  v13.i32[2] = 0;
  v13.i64[0] = 0;
  if (!C3DIntersectionRay3Plane((uint64_t)v14, v15, &v13))
    __adjustDistanceByAligningProjection();
  v8 = vsubq_f32(v13, a1);
  v9 = vmulq_f32(v8, v8);
  return sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
}

uint64_t ___ZL10__bindToUVDv2_fP9__C3DMeshPK15__C3DMeshSourceS4_llPDv3_fS6_PDv3_j_block_invoke(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, _BYTE *a5)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __int32 v11;
  uint64_t v12;
  __int32 v13;
  double ValueAtIndexAsVector2;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int8x16_t v21;
  uint64_t result;
  double v23;
  double v24;
  double v25;
  int8x16_t v26;
  __int128 v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float v49;
  uint64_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float v53;
  uint64_t v54;
  __int128 v55;
  float32x4_t v56;
  float32x4_t v57;

  if (a4 != 4)
    ___ZL10__bindToUVDv2_fP9__C3DMeshPK15__C3DMeshSourceS4_llPDv3_fS6_PDv3_j_block_invoke_cold_1();
  v7 = *a3;
  v9 = a3[2];
  v8 = a3[3];
  v11 = a3[4];
  v10 = a3[5];
  v13 = a3[6];
  v12 = a3[7];
  ValueAtIndexAsVector2 = C3DMeshSourceGetValueAtIndexAsVector2(*(_QWORD *)(a1 + 72), a3[1]);
  v15 = C3DMeshSourceGetValueAtIndexAsVector2(*(_QWORD *)(a1 + 72), v8);
  v16 = C3DMeshSourceGetValueAtIndexAsVector2(*(_QWORD *)(a1 + 72), v10);
  v17 = C3DMeshSourceGetValueAtIndexAsVector2(*(_QWORD *)(a1 + 72), v12);
  v57.i32[2] = 0;
  v57.i64[0] = 0;
  v56.i32[2] = 0;
  v56.i64[0] = 0;
  result = __computeBarycentricCoordinates2D(&v56, &v57, *(float32x2_t *)&ValueAtIndexAsVector2, *(float32x2_t *)&v15, *(float32x2_t *)&v16, *(float32x2_t *)(a1 + 80), v18, v19, v20, v21);
  if ((_DWORD)result)
  {
    *(float32x4_t *)*(_QWORD *)(a1 + 88) = v56;
    HIDWORD(v27) = v57.i32[3];
    *(float32x4_t *)*(_QWORD *)(a1 + 96) = v57;
    *(_QWORD *)&v27 = __PAIR64__(v9, v7);
    DWORD2(v27) = v11;
LABEL_18:
    *(_OWORD *)*(_QWORD *)(a1 + 104) = v27;
    *a5 = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return result;
  }
  v28 = v57;
  v29 = *(float32x2_t *)(a1 + 80);
  v30 = vsub_f32(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v15, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)&ValueAtIndexAsVector2, v57.f32[0]), *(float32x2_t *)&v16, v57, 2), v29);
  v31 = vaddv_f32(vmul_f32(v30, v30));
  v32 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v31 < *(float *)(v32 + 24))
  {
    *(float *)(v32 + 24) = v31;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v56;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32) = v28;
    v28.i64[0] = __PAIR64__(v9, v7);
    v28.i32[2] = v11;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = v28;
    v29 = *(float32x2_t *)(a1 + 80);
  }
  result = __computeBarycentricCoordinates2D(&v56, &v57, *(float32x2_t *)&ValueAtIndexAsVector2, *(float32x2_t *)&v15, *(float32x2_t *)&v17, v29, v23, v24, v25, v26);
  if ((_DWORD)result)
  {
    *(float32x4_t *)*(_QWORD *)(a1 + 88) = v56;
    HIDWORD(v27) = v57.i32[3];
    *(float32x4_t *)*(_QWORD *)(a1 + 96) = v57;
    *(_QWORD *)&v27 = __PAIR64__(v9, v7);
LABEL_17:
    DWORD2(v27) = v13;
    goto LABEL_18;
  }
  v37 = v57;
  v38 = *(float32x2_t *)(a1 + 80);
  v39 = vsub_f32(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v15, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)&ValueAtIndexAsVector2, v57.f32[0]), *(float32x2_t *)&v17, v57, 2), v38);
  v40 = vaddv_f32(vmul_f32(v39, v39));
  v41 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v40 < *(float *)(v41 + 24))
  {
    *(float *)(v41 + 24) = v40;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v56;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32) = v37;
    v37.i64[0] = __PAIR64__(v9, v7);
    v37.i32[2] = v13;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = v37;
    v38 = *(float32x2_t *)(a1 + 80);
  }
  result = __computeBarycentricCoordinates2D(&v56, &v57, *(float32x2_t *)&ValueAtIndexAsVector2, *(float32x2_t *)&v16, *(float32x2_t *)&v17, v38, v33, v34, v35, v36);
  if ((_DWORD)result)
  {
    *(float32x4_t *)*(_QWORD *)(a1 + 88) = v56;
    HIDWORD(v27) = v57.i32[3];
    *(float32x4_t *)*(_QWORD *)(a1 + 96) = v57;
    LODWORD(v27) = v7;
LABEL_16:
    DWORD1(v27) = v11;
    goto LABEL_17;
  }
  v46 = v57;
  v47 = *(float32x2_t *)(a1 + 80);
  v48 = vsub_f32(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v16, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)&ValueAtIndexAsVector2, v57.f32[0]), *(float32x2_t *)&v17, v57, 2), v47);
  v49 = vaddv_f32(vmul_f32(v48, v48));
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v49 < *(float *)(v50 + 24))
  {
    *(float *)(v50 + 24) = v49;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v56;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32) = v46;
    v46.i64[0] = __PAIR64__(v11, v7);
    v46.i32[2] = v13;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = v46;
    v47 = *(float32x2_t *)(a1 + 80);
  }
  result = __computeBarycentricCoordinates2D(&v56, &v57, *(float32x2_t *)&v15, *(float32x2_t *)&v16, *(float32x2_t *)&v17, v47, v42, v43, v44, v45);
  if ((_DWORD)result)
  {
    *(float32x4_t *)*(_QWORD *)(a1 + 88) = v56;
    HIDWORD(v27) = v57.i32[3];
    *(float32x4_t *)*(_QWORD *)(a1 + 96) = v57;
    LODWORD(v27) = v9;
    goto LABEL_16;
  }
  v51 = v57;
  v52 = vsub_f32(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v16, *(float32x2_t *)v57.f32, 1), *(float32x2_t *)&v15, v57.f32[0]), *(float32x2_t *)&v17, v57, 2), *(float32x2_t *)(a1 + 80));
  v53 = vaddv_f32(vmul_f32(v52, v52));
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v53 < *(float *)(v54 + 24))
  {
    *(float *)(v54 + 24) = v53;
    HIDWORD(v55) = v56.i32[3];
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32) = v56;
    *(_QWORD *)&v55 = __PAIR64__(v11, v9);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 32) = v51;
    DWORD2(v55) = v13;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32) = v55;
  }
  return result;
}

uint64_t __computeBarycentricCoordinates2D(float32x4_t *a1, float32x4_t *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, double a7, double a8, double a9, int8x16_t _Q7)
{
  int8x16_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v21;
  float32x2_t v22;
  float32x4_t v27;
  float32x4_t v28;
  uint32x4_t v30;
  unsigned int v31;
  float v32;
  float v33;
  float32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;

  v11 = vsub_f32(a4, a3);
  v12 = vsub_f32(a5, a3);
  v13 = vsub_f32(a6, a3);
  v14 = (int32x2_t)vmul_f32(v11, v11);
  v15 = vadd_f32((float32x2_t)v14, (float32x2_t)vdup_lane_s32(v14, 1));
  *(float32x2_t *)_Q7.i8 = vmul_f32(v11, v12);
  v16 = (int32x2_t)vmul_f32(v12, v12);
  v17 = (int32x2_t)vmul_f32(v11, v13);
  v18 = (int32x2_t)vmul_f32(v12, v13);
  _D6 = vadd_f32((float32x2_t)vzip1_s32(v17, *(int32x2_t *)_Q7.i8), (float32x2_t)vzip2_s32(v17, *(int32x2_t *)_Q7.i8));
  _D5 = vadd_f32((float32x2_t)vzip1_s32(v18, v16), (float32x2_t)vzip2_s32(v18, v16));
  v21 = (int32x2_t)vmla_n_f32(vmul_n_f32(_D6, -_D6.f32[1]), _D5, v15.f32[0]);
  v22 = (float32x2_t)vdup_lane_s32(v21, 0);
  __asm { FMLA            S7, S6, V5.S[1] }
  v22.i32[0] = _Q7.i32[0];
  *(float32x2_t *)_Q7.i8 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v21, 1));
  *(float *)v10.i32 = (float)(1.0 - *(float *)_Q7.i32) - *(float *)&_Q7.i32[1];
  v27 = (float32x4_t)vextq_s8(vextq_s8(v10, v10, 4uLL), _Q7, 0xCuLL);
  v28 = v27;
  v28.i32[3] = v27.i32[2];
  __asm { FMOV            V20.4S, #1.0 }
  v30 = (uint32x4_t)vceqq_f32(vminq_f32(vmaxq_f32(v28, (float32x4_t)0), _Q20), v27);
  v30.i32[3] = v30.i32[2];
  v31 = vminvq_u32(v30);
  if ((v31 & 0x80000000) != 0)
  {
    *a1 = v28;
    goto LABEL_29;
  }
  if (*(float *)v10.i32 < 0.0)
  {
    if (*(float *)_Q7.i32 < 0.0)
    {
      *a1 = v28;
      v28 = (float32x4_t)xmmword_1DD007600;
      goto LABEL_29;
    }
    if (*(float *)&_Q7.i32[1] < 0.0)
    {
      *a1 = v28;
      v28 = (float32x4_t)xmmword_1DD007920;
      goto LABEL_29;
    }
    v34 = vsub_f32(a5, a4);
    v35 = (int32x2_t)vmul_f32(v34, vsub_f32(a6, a4));
    v36 = (int32x2_t)vmul_f32(v34, v34);
    v37 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32(v35, v36), (float32x2_t)vzip2_s32(v35, v36));
    v33 = vdiv_f32((float32x2_t)v37, (float32x2_t)vdup_lane_s32(v37, 1)).f32[0];
    if (v33 >= 1.0)
      v33 = 1.0;
    if (v33 <= 0.0)
      v33 = 0.0;
    *a1 = v28;
    v28.i32[0] = 0;
    v28.i32[3] = 0;
    v28.f32[1] = 1.0 - v33;
LABEL_28:
    v28.f32[2] = v33;
    goto LABEL_29;
  }
  if (*(float *)_Q7.i32 < 0.0 && *(float *)&_Q7.i32[1] < 0.0)
  {
    *a1 = v28;
    v28 = (float32x4_t)xmmword_1DD007970;
    goto LABEL_29;
  }
  if (*(float *)&_Q7.i32[1] >= 0.0)
  {
    if (*(float *)_Q7.i32 >= 0.0)
      __computeBarycentricCoordinates2D();
    v33 = _D5.f32[0] / _D5.f32[1];
    if ((float)(_D5.f32[0] / _D5.f32[1]) >= 1.0)
      v33 = 1.0;
    if (v33 <= 0.0)
      v33 = 0.0;
    *a1 = v28;
    v28.i32[1] = 0;
    v28.i32[3] = 0;
    v28.f32[0] = 1.0 - v33;
    goto LABEL_28;
  }
  v32 = vdiv_f32(_D6, v15).f32[0];
  if (v32 >= 1.0)
    v32 = 1.0;
  if (v32 <= 0.0)
    v32 = 0.0;
  *a1 = v28;
  v28.i64[1] = 0;
  v28.f32[0] = 1.0 - v32;
  v28.f32[1] = v32;
LABEL_29:
  *a2 = v28;
  return v31 >> 31;
}

BOOL __computeBarycentricCoordinates3D(_DWORD *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v45;
  float32x4_t v46;

  v10 = vsubq_f32(a5, a4);
  v11 = vsubq_f32(a6, a4);
  v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
  v14 = (int8x16_t)vmlaq_f32(vmulq_f32(v13, vnegq_f32(v11)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL));
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
  v16 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(v10)), v15, v13);
  v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
  v18 = (int32x4_t)vmulq_f32(v10, v10);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  v21 = vmulq_n_f32(v10, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  v22 = (int32x4_t)vmulq_f32(v16, v16);
  v22.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), *(float32x2_t *)v22.i8)).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  v25 = vmulq_n_f32(v17, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  v26 = vmulq_f32(a7, v21);
  v27 = vmulq_f32(a7, v25);
  v28 = vmlaq_n_f32(vmulq_n_f32(v25, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]), v21, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
  v29 = (int32x4_t)vmulq_f32(v10, v21);
  v30 = (int32x4_t)vmulq_f32(v10, v25);
  *(int32x2_t *)v30.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))));
  v31 = (int32x4_t)vmulq_f32(v11, v21);
  v32 = (int32x4_t)vmulq_f32(v11, v25);
  v33 = vsubq_f32(v28, a4);
  v34 = (int32x4_t)vmulq_f32(v21, v33);
  v35 = (int8x16_t)vdupq_laneq_s32(v34, 2);
  *(int32x2_t *)v21.f32 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))));
  v36 = (int32x4_t)vmulq_f32(v25, v33);
  v46.i32[2] = 0;
  v46.i64[0] = 0;
  v45.i32[2] = 0;
  v45.i64[0] = 0;
  __computeBarycentricCoordinates2D(&v46, &v45, 0, *(float32x2_t *)v30.i8, *(float32x2_t *)v21.f32, (float32x2_t)vzip1_s32((int32x2_t)vadd_f32(*(float32x2_t *)v35.i8, vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1)))), 0.0, *(double *)v33.i64, *(double *)v34.i64, v35);
  v37 = v45;
  v38 = vsubq_f32(a7, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a5, *(float32x2_t *)v45.f32, 1), a4, v45.f32[0]), a6, v45, 2));
  v39 = vmulq_f32(v38, v38);
  v39.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0];
  *a1 = v39.i32[0];
  *a2 = v46;
  *a3 = v37;
  return v39.f32[0] == 0.0;
}

uint64_t C3DMeshCreatePlaneWithOffset(int a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9)
{
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  void *PlaneMeshSource;
  float v22;
  float v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  CFIndex v35;
  UInt8 *v36;
  UInt8 *v37;
  __int16 v38;
  uint64_t v39;
  UInt8 *v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t Count;
  char v48;
  UInt8 *v49;
  char v50;
  uint64_t i;
  uint64_t v52;
  char v53;
  UInt8 *v54;
  int v55;
  uint64_t v56;
  UInt8 *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  UInt8 *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  UInt8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t *v84;
  _DWORD *v85;
  const __CFAllocator *v86;
  CFDataRef v87;
  const CFArrayCallBacks *v88;
  const __CFArray *v89;
  const __CFArray *v90;
  uint64_t v91;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD v105[2];
  uint64_t (*v106)(uint64_t, int, int, uint64_t, int);
  void *v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD v110[2];
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD v115[2];
  uint64_t (*v116)(uint64_t, int, int, uint64_t, int);
  void *v117;
  uint64_t *v118;
  uint64_t v119;
  _QWORD v120[2];
  uint64_t (*v121)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  UInt8 *v128;
  void *v129;
  void *values;
  CFTypeRef v131;
  CFTypeRef v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v13 = fabs(a5) * 0.5;
  v14 = fabs(a6);
  if (v13 >= v14 * 0.5)
  {
    if (v14 * 0.5 <= a7)
      a7 = v14 * 0.5;
  }
  else if (v13 <= a7)
  {
    a7 = v13;
  }
  if (a4 <= 1)
    v15 = 1;
  else
    v15 = a4;
  if (a2 <= 1)
    v16 = 1;
  else
    v16 = a2;
  if (a3 <= 1)
    v17 = 1;
  else
    v17 = a3;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  PlaneMeshSource = (void *)__CreatePlaneMeshSource(0, v16, v17, v15, v18, v19, v20, a8, a9);
  values = PlaneMeshSource;
  v22 = a7;
  v131 = (CFTypeRef)__CreatePlaneMeshSource(1, v16, v17, v15, v18, v19, v22, a8, a9);
  v23 = a7;
  v132 = (CFTypeRef)__CreatePlaneMeshSource(3, v16, v17, v15, v18, v19, v23, a8, a9);
  v24 = (void *)C3DMeshElementCreate();
  v129 = v24;
  C3DMeshElementSetType((uint64_t)v24, a1);
  if (a1 == 3)
  {
    Count = C3DMeshSourceGetCount((uint64_t)PlaneMeshSource);
    v31 = Count;
    v48 = 1;
    if (Count >= 0x10000)
      v48 = 2;
    v35 = Count << v48;
    v49 = (UInt8 *)malloc_type_malloc(Count << v48, 0x9DCEAEA2uLL);
    v37 = v49;
    if (v31 >= 0x10000)
      v50 = 4;
    else
      v50 = 2;
    if (v31 < 0x10000)
    {
      if (v31 < 1)
      {
        v50 = 2;
      }
      else
      {
        for (i = 0; i != v31; ++i)
          *(_WORD *)&v49[2 * i] = i;
      }
    }
    else
    {
      for (j = 0; j != v31; ++j)
        *(_DWORD *)&v49[4 * j] = j;
    }
  }
  else
  {
    v25 = v16 + 1;
    v26 = (v17 + 1) * (v16 + 1);
    v27 = v15 + v16 + v26;
    v28 = v15 + v17 + v27;
    v29 = v17 * (v16 + 1);
    if (a1 == 2)
    {
      v96 = v15 + v16 + v26;
      v98 = v29 + v16;
      v100 = v15 + v17 + v27;
      v102 = v15 + v16 + v28;
      v104 = v17 * (v16 + 1);
      if (a7 > 0.0)
        v31 = 8 * v15 + 4 * (v17 + 1 + v25) + v17 + v16 + 2 * v17 * v16 - 8;
      else
        v31 = v17 + v16 + 2 * v17 * v16;
      v52 = 2 * v31;
      v53 = 1;
      if (v31 >= 0x8000)
        v53 = 2;
      v35 = v52 << v53;
      v54 = (UInt8 *)malloc_type_malloc(v52 << v53, 0xFFD07E1CuLL);
      v37 = v54;
      if (v31 >= 0x8000)
        v50 = 4;
      else
        v50 = 2;
      v55 = 0;
      v56 = 0;
      if (v31 < 0x8000)
      {
        v125 = 0;
        v126 = &v125;
        v127 = 0x2000000000;
        v128 = v54;
        v57 = v54;
        do
        {
          v58 = 0;
          ++v56;
          do
          {
            *(_WORD *)v57 = v55 + v58;
            v59 = v16 + v55 + v58;
            v60 = v58 + 1;
            v61 = v55 + v58 + 1;
            *(_WORD *)(v126[3] + 2) = v61;
            *(_WORD *)(v126[3] + 4) = v61;
            *(_WORD *)(v126[3] + 6) = v59 + 2;
            v57 = (UInt8 *)(v126[3] + 8);
            v126[3] = (uint64_t)v57;
            v58 = v60;
          }
          while (v16 != v60);
          LOWORD(v55) = v55 + v25;
        }
        while (v56 != v17);
        v62 = 0;
        v63 = v17;
        do
        {
          *(_WORD *)v57 = v62;
          v62 += v25;
          *(_WORD *)(v126[3] + 2) = v62;
          v57 = (UInt8 *)(v126[3] + 4);
          v126[3] = (uint64_t)v57;
          --v63;
        }
        while (v63);
        v64 = v17 * (v16 + 1);
        v65 = v16;
        do
        {
          *(_WORD *)v57 = v64;
          *(_WORD *)(v126[3] + 2) = v64 + 1;
          v57 = (UInt8 *)(v126[3] + 4);
          v126[3] = (uint64_t)v57;
          ++v64;
          --v65;
        }
        while (v65);
        if (a7 > 0.0)
        {
          v110[0] = MEMORY[0x1E0C809B0];
          v110[1] = 0x40000000;
          v111 = __C3DMeshCreatePlaneWithOffset_block_invoke_3;
          v112 = &unk_1EA5A3228;
          v113 = &v125;
          v114 = v15;
          __C3DMeshCreatePlaneWithOffset_block_invoke_3((uint64_t)v110, 0, (v17 + 1) * (v16 + 1), v16, 1);
          __C3DMeshCreatePlaneWithOffset_block_invoke_3((uint64_t)v110, v16, v96, v17, v16 + 1);
          v111((uint64_t)v110, v98, v100, v16, -1);
          v111((uint64_t)v110, v104, v102, v17, ~v16);
          *(_WORD *)(v126[3] - 2) = v26;
        }
      }
      else
      {
        v125 = 0;
        v126 = &v125;
        v127 = 0x2000000000;
        v128 = v54;
        v67 = v54;
        do
        {
          v68 = 0;
          ++v56;
          do
          {
            *(_DWORD *)v67 = v55 + v68;
            v69 = v16 + v55 + v68;
            v70 = v68 + 1;
            v71 = v55 + v68 + 1;
            *(_DWORD *)(v126[3] + 4) = v71;
            *(_DWORD *)(v126[3] + 8) = v71;
            *(_DWORD *)(v126[3] + 12) = v69 + 2;
            v67 = (UInt8 *)(v126[3] + 16);
            v126[3] = (uint64_t)v67;
            v68 = v70;
          }
          while (v16 != v70);
          v55 += v16 + 1;
        }
        while (v56 != v17);
        v72 = 0;
        v73 = v17;
        do
        {
          *(_DWORD *)v67 = v72;
          v72 += v16 + 1;
          *(_DWORD *)(v126[3] + 4) = v72;
          v67 = (UInt8 *)(v126[3] + 8);
          v126[3] = (uint64_t)v67;
          --v73;
        }
        while (v73);
        v74 = v17 + v17 * v16;
        v75 = v16;
        do
        {
          *(_DWORD *)v67 = v74++;
          *(_DWORD *)(v126[3] + 4) = v74;
          v67 = (UInt8 *)(v126[3] + 8);
          v126[3] = (uint64_t)v67;
          --v75;
        }
        while (v75);
        if (a7 > 0.0)
        {
          v105[0] = MEMORY[0x1E0C809B0];
          v105[1] = 0x40000000;
          v106 = __C3DMeshCreatePlaneWithOffset_block_invoke_4;
          v107 = &unk_1EA5A3250;
          v108 = &v125;
          v109 = v15;
          __C3DMeshCreatePlaneWithOffset_block_invoke_4((uint64_t)v105, 0, (v17 + 1) * (v16 + 1), v16, 1);
          __C3DMeshCreatePlaneWithOffset_block_invoke_4((uint64_t)v105, v16, v96, v17, v16 + 1);
          v106((uint64_t)v105, v98, v100, v16, -1);
          v106((uint64_t)v105, v104, v102, v17, ~v16);
          *(_DWORD *)(v126[3] - 4) = v26;
        }
      }
      _Block_object_dispose(&v125, 8);
    }
    else if (a1)
    {
      v37 = 0;
      LODWORD(v31) = 0;
      v35 = 0;
      v50 = 0;
    }
    else
    {
      v95 = v15 + v16 + v26;
      v97 = v29 + v16;
      v99 = v15 + v17 + v27;
      v101 = v15 + v16 + v28;
      v103 = v17 * (v16 + 1);
      v30 = 4 * (v15 + v16 + v17);
      if (a7 <= 0.0)
        v30 = 0;
      v93 = v17 * v16;
      v31 = v30 + 2 * v17 * v16;
      v32 = 3 * v31;
      if (v31 >= 21846)
        v33 = 4;
      else
        v33 = 2;
      v94 = v33;
      v34 = 1;
      if (v31 >= 21846)
        v34 = 2;
      v35 = v32 << v34;
      v36 = (UInt8 *)malloc_type_malloc(v32 << v34, 0x9F6DD928uLL);
      v37 = v36;
      if (v31 > 21845)
      {
        v76 = 0;
        v77 = 0;
        v125 = 0;
        v126 = &v125;
        v127 = 0x2000000000;
        v128 = v36;
        v78 = v36;
        do
        {
          v79 = 0;
          ++v77;
          v80 = v76;
          do
          {
            *(_DWORD *)v78 = v80;
            ++v79;
            v81 = v80 + 1;
            *(_DWORD *)(v126[3] + 4) = v80 + 1;
            v82 = v16 + v80;
            v83 = v16 + v80 + 2;
            *(_DWORD *)(v126[3] + 8) = v83;
            *(_DWORD *)(v126[3] + 12) = v80;
            v84 = v126;
            v85 = (_DWORD *)v126[3];
            v85[4] = v83;
            v85[5] = v82 + 1;
            v78 = (UInt8 *)(v85 + 6);
            v84[3] = (uint64_t)(v85 + 6);
            v80 = v81;
          }
          while (v16 != v79);
          v76 += (v16 + 1);
        }
        while (v77 != v17);
        if (a7 > 0.0)
        {
          v115[0] = MEMORY[0x1E0C809B0];
          v115[1] = 0x40000000;
          v116 = __C3DMeshCreatePlaneWithOffset_block_invoke_2;
          v117 = &unk_1EA5A3200;
          v118 = &v125;
          v119 = v15;
          __C3DMeshCreatePlaneWithOffset_block_invoke_2((uint64_t)v115, 0, (v17 + 1) * (v16 + 1), v16, 1);
          *(_DWORD *)&v37[24 * v93 + 4] = C3DMeshSourceGetCount((uint64_t)PlaneMeshSource) - 1;
          __C3DMeshCreatePlaneWithOffset_block_invoke_2((uint64_t)v115, v16, v95, v17, v16 + 1);
          v116((uint64_t)v115, v97, v99, v16, -1);
          v116((uint64_t)v115, v103, v101, v17, ~v16);
        }
      }
      else
      {
        v38 = 0;
        v39 = 0;
        v125 = 0;
        v126 = &v125;
        v127 = 0x2000000000;
        v128 = v36;
        v40 = v36;
        do
        {
          v41 = 0;
          ++v39;
          v42 = v16 + v38;
          do
          {
            v43 = v38 + v41;
            *(_WORD *)v40 = v38 + v41;
            *(_WORD *)(v126[3] + 2) = v38 + v41 + 1;
            v44 = v42 + v41;
            v45 = v41 + 1;
            v46 = v42 + v41 + 2;
            *(_WORD *)(v126[3] + 4) = v46;
            *(_WORD *)(v126[3] + 6) = v43;
            *(_WORD *)(v126[3] + 8) = v46;
            *(_WORD *)(v126[3] + 10) = v44 + 1;
            v40 = (UInt8 *)(v126[3] + 12);
            v126[3] = (uint64_t)v40;
            v41 = v45;
          }
          while (v16 != v45);
          v38 += v25;
        }
        while (v39 != v17);
        if (a7 > 0.0)
        {
          v120[0] = MEMORY[0x1E0C809B0];
          v120[1] = 0x40000000;
          v121 = __C3DMeshCreatePlaneWithOffset_block_invoke;
          v122 = &unk_1EA5A31D8;
          v123 = &v125;
          v124 = v15;
          __C3DMeshCreatePlaneWithOffset_block_invoke((uint64_t)v120, 0, (v17 + 1) * (v16 + 1), v16, 1);
          *(_WORD *)&v37[12 * v93 + 2] = C3DMeshSourceGetCount((uint64_t)PlaneMeshSource) - 1;
          __C3DMeshCreatePlaneWithOffset_block_invoke((uint64_t)v120, v16, v95, v17, v16 + 1);
          v121((uint64_t)v120, v97, v99, v16, -1);
          v121((uint64_t)v120, v103, v101, v17, ~v16);
        }
      }
      _Block_object_dispose(&v125, 8);
      v50 = v94;
    }
  }
  v86 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v87 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v37, v35);
  C3DMeshElementSetPrimitives((uint64_t)v24, v31, v87, v50);
  CFRelease(v87);
  free(v37);
  BYTE2(v125) = 0;
  LOWORD(v125) = 0;
  v88 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v89 = CFArrayCreate(v86, (const void **)&values, 3, MEMORY[0x1E0C9B378]);
  v90 = CFArrayCreate(v86, (const void **)&v129, 1, v88);
  v91 = C3DMeshCreateWithMeshSourcesAndMeshElements(v89, v90, (uint64_t)&v125);
  CFRelease(v90);
  CFRelease(v89);
  if (values)
  {
    CFRelease(values);
    values = 0;
  }
  if (v131)
  {
    CFRelease(v131);
    v131 = 0;
  }
  if (v132)
  {
    CFRelease(v132);
    v132 = 0;
  }
  if (v129)
    CFRelease(v129);
  return v91;
}

uint64_t __CreatePlaneMeshSource(int a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, double a8, double a9)
{
  const __CFAllocator *v16;
  __CFData *Mutable;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  uint64_t v27;
  float v28;
  CFDataRef Copy;
  uint64_t v30;
  float v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  void (*v38)(uint64_t, float, float, float, float, float);
  void *v39;
  uint64_t *v40;
  double v41;
  double v42;
  __CFData *v43;
  float v44;
  float v45;
  int v46;
  char v47;
  _QWORD v48[2];
  void (*v49)(uint64_t, double, float, float);
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  double v53;
  double v54;
  __CFData *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  UInt8 bytes[4];
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  v63 = &v62;
  v64 = 0x2000000000;
  v65 = 0;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a1 == 3)
    v18 = 2;
  else
    v18 = 3;
  v19 = a5 + (float)(a7 * -2.0);
  v34 = a6 + (float)(a7 * -2.0);
  if ((a3 & 0x8000000000000000) == 0)
  {
    v20 = 0;
    v21 = (float)a2;
    while (a2 < 0)
    {
LABEL_16:
      if (++v20 > a3)
        goto LABEL_17;
    }
    v22 = 0;
    v23 = (float)(v34 * (float)(int)v20) / (float)a3;
    *(float *)&v24 = 1.0 - (float)((float)(v23 + a7) / a6);
    *(float *)&v25 = a9 + v34 * -0.5 + v23;
    v35 = v25;
    v36 = v24;
    while (1)
    {
      if (a1 == 3)
      {
        *(float *)bytes = (float)((float)((float)(v19 * (float)(int)v22) / v21) + a7) / a5;
        v27 = v36;
        goto LABEL_14;
      }
      if (a1 == 1)
        break;
      if (!a1)
      {
        v26 = a8 + v19 * -0.5 + (float)((float)(v19 * (float)(int)v22) / v21);
        *(float *)bytes = v26;
        v27 = v35;
LABEL_14:
        v67 = v27;
      }
      ++*((_DWORD *)v63 + 6);
      CFDataAppendBytes(Mutable, bytes, (4 * v18));
      if (++v22 > a2)
        goto LABEL_16;
    }
    *(float *)bytes = 0.0;
    v27 = 0x3F80000000000000;
    goto LABEL_14;
  }
LABEL_17:
  if (a7 > 0.0)
  {
    v48[0] = MEMORY[0x1E0C809B0];
    v48[1] = 0x40000000;
    v49 = ____CreatePlaneMeshSource_block_invoke;
    v50 = &unk_1EA5A3278;
    v61 = a1;
    v28 = 1.57079633 / (double)a4;
    v56 = a7;
    v57 = v28;
    v53 = a8;
    v54 = a9;
    v58 = a5;
    v59 = a6;
    v51 = &v62;
    v52 = a4;
    v55 = Mutable;
    v60 = v18;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v38 = ____CreatePlaneMeshSource_block_invoke_2;
    v39 = &unk_1EA5A32A0;
    v47 = a1;
    v41 = a8;
    v42 = a9;
    v44 = a5;
    v45 = a6;
    v40 = &v62;
    v43 = Mutable;
    v46 = v18;
    ____CreatePlaneMeshSource_block_invoke((uint64_t)v48, -3.14159265, v19 * -0.5, v34 * -0.5);
    ____CreatePlaneMeshSource_block_invoke_2((uint64_t)v37, v19 * -0.5, a6 * -0.5, v19, 0.0, (float)a2);
    ____CreatePlaneMeshSource_block_invoke((uint64_t)v48, -1.57079633, v19 * 0.5, v34 * -0.5);
    ((void (*)(_QWORD *, float, float, float, float))v38)(v37, a5 * 0.5, v34 * -0.5, 0.0, v34);
    v49((uint64_t)v48, 0.0, v19 * 0.5, v34 * 0.5);
    v38((uint64_t)v37, v19 * 0.5, a6 * 0.5, -v19, 0.0, (float)a2);
    v49((uint64_t)v48, 1.57079633, v19 * -0.5, v34 * 0.5);
    v38((uint64_t)v37, a5 * -0.5, v34 * 0.5, 0.0, -v34, (float)a3);
  }
  Copy = CFDataCreateCopy(v16, Mutable);
  v30 = C3DMeshSourceCreate(Copy, a1, *((int *)v63 + 6), v18, 1);
  CFRelease(Mutable);
  CFRelease(Copy);
  _Block_object_dispose(&v62, 8);
  return v30;
}

uint64_t C3DMeshCreatePlane(int a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  return C3DMeshCreatePlaneWithOffset(a1, a2, a3, a4, a5, a6, a7, 0.0, 0.0);
}

const char *C3D::ScenePass::name(C3D::ScenePass *this, uint64_t a2, uint64_t a3, void *a4)
{
  if (*((_QWORD *)this + 30))
    return C3D::DrawNodesPass::name(this, a2, a3, a4);
  else
    return "ScenePass";
}

void ___ZN3C3D9ScenePass5setupEv_block_invoke(_QWORD *a1, unsigned int a2, __C3DNode **a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  C3D::Pass *v10;
  uint64_t v11;
  C3D::Pass *v12;
  C3D::Pass *v13;
  uint64_t v14;
  C3D::PassDescriptor *v15;
  uint64_t v16;
  C3D::DrawNodesPass *v17;
  C3D::Pass *v18;
  __C3DNode *v19;

  if (a2)
  {
    v7 = a1[7];
    for (i = a2; i; --i)
    {
      v9 = *a4;
      if (C3DLightTypeSupportsShadow(*a4) && C3DLightGetCastsShadow(v9))
      {
        C3DLightShouldAdjustsShadowProjection(v9);
        v19 = *a3;
        if (C3DLightGetUsesDeferredShadows(v9))
        {
          if (!*(_BYTE *)(v7 + 5361) || *(_QWORD *)(v7 + 240))
            return;
          v10 = C3D::ScenePass::_shadowMapForLightNode((C3D::ScenePass *)v7, v19);
          v11 = *(_QWORD *)(v7 + 24);
          v17 = (C3D::DrawNodesPass *)v7;
          v18 = (C3D::Pass *)v7;
          v12 = C3D::RenderGraph::createPass<C3D::DeferredShadowPass,C3D::ScenePass *,__C3DNode *&,C3D::ScenePass *>(v11, &v18, &v19, &v17);
          C3D::Pass::addDependency(v12, v10);
          v13 = *(C3D::Pass **)(*(_QWORD *)(a1[4] + 8) + 24);
          if (v13)
            C3D::Pass::addDependency(v12, v13);
          C3D::Pass::addDependency(v12, (C3D::Pass *)v7);
          *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v12;
        }
        else
        {
          if (!*(_BYTE *)(v7 + 5360))
            return;
          v18 = 0;
          v18 = C3D::ScenePass::_shadowMapForLightNode((C3D::ScenePass *)v7, v19);
          C3D::Pass::addDependency((C3D::Pass *)v7, v18);
          v14 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          v15 = (C3D::PassDescriptor *)C3D::Pass::descriptor(v18);
          v16 = C3D::PassDescriptor::outputAtIndex(v15, 0);
          C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(v14, v16);
          C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(*(_DWORD **)(*(_QWORD *)(a1[6] + 8) + 24), &v18);
        }
      }
      ++a4;
      ++a3;
    }
  }
}

C3D::Pass *C3D::ScenePass::_shadowMapForLightNode(C3D::ScenePass *this, __C3DNode *a2)
{
  __C3DNode *v2;
  uint64_t Light;
  int AutomaticallyAdjustsShadowProjection;
  int Type;
  C3D::Pass *CurrentFrameCachedPass;
  uint64_t v8;
  C3D::Pass *v10;
  __C3DNode *v11;

  v2 = a2;
  v11 = a2;
  Light = (uint64_t)C3DNodeGetLight((uint64_t)a2);
  AutomaticallyAdjustsShadowProjection = C3DLightGetAutomaticallyAdjustsShadowProjection(Light);
  Type = C3DLightGetType(Light);
  if (AutomaticallyAdjustsShadowProjection && Type == 1)
    v2 = (__C3DNode *)(Light ^ (*((_QWORD *)this + 31) << 32));
  CurrentFrameCachedPass = (C3D::Pass *)C3D::RenderGraph::getCurrentFrameCachedPass(*((C3D::RenderGraph **)this + 3), (uint64_t)v2);
  if (!CurrentFrameCachedPass)
  {
    v8 = *((_QWORD *)this + 3);
    v10 = this;
    CurrentFrameCachedPass = C3D::RenderGraph::createPass<C3D::ShadowMapPass,C3D::ScenePass *,__C3DNode *&>(v8, &v10, &v11);
    C3D::RenderGraph::cachePassForCurrentFrame(*((C3D::RenderGraph **)this + 3), (uint64_t)v2, CurrentFrameCachedPass);
  }
  return CurrentFrameCachedPass;
}

C3D::DeferredShadowPass *C3D::RenderGraph::createPass<C3D::DeferredShadowPass,C3D::ScenePass *,__C3DNode *&,C3D::ScenePass *>(uint64_t a1, C3D::Pass **a2, __C3DNode **a3, C3D::DrawNodesPass **a4)
{
  C3D::DeferredShadowPass *Aligned;

  Aligned = (C3D::DeferredShadowPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 272, 16, 0);
  C3D::DeferredShadowPass::DeferredShadowPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3, *a4);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::DeferredShadowPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

uint64_t C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::back(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_DWORD *)(a1 + 8))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::back(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16) + 80 * *(unsigned int *)(a1 + 8) - 80;
}

C3D::CIFilterPass *C3D::RenderGraph::createPass<C3D::CIFilterPass,C3D::ScenePass *,__C3DNode *&>(uint64_t a1, C3D::ScenePass **a2, __C3DNode **a3)
{
  C3D::CIFilterPass *Aligned;

  Aligned = (C3D::CIFilterPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 176, 16, 0);
  C3D::CIFilterPass::CIFilterPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CIFilterPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

BOOL C3D::ScenePass::_shouldPushNodeToVisible(C3D::ScenePass *this, __C3DNode *a2, int a3)
{
  int v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  __C3DNode **v9;
  uint64_t v10;
  uint64_t v11;
  __C3DNode **v12;
  __C3DNode *v13;
  uint64_t Parent;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  __int16 v25;
  __int16 v26;
  _DWORD *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _QWORD v38[5];
  int v39;
  __int16 v40;
  char v41;
  C3D::Pass *v42;
  __C3DNode *v43;

  v43 = a2;
  v5 = *((_DWORD *)a2 + 55);
  if ((v5 & 0x1000) == 0)
  {
    if ((v5 & 0x4000) == 0)
      return (*((_DWORD *)a2 + 55) & 0x80) == 0;
    if (*((_BYTE *)this + 5362))
    {
      v8 = *((_QWORD *)this + 672);
      v9 = *(__C3DNode ***)(v8 + 16);
      v10 = *(unsigned int *)(v8 + 8);
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = v9;
        while (*v12 != a2)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            v12 = &v9[v10];
            break;
          }
        }
      }
      else
      {
        v12 = v9;
      }
      if (v10 == v12 - v9)
      {
        do
        {
          v13 = a2;
          Parent = C3DNodeGetParent((uint64_t)a2);
          if (!Parent)
            break;
          a2 = (__C3DNode *)Parent;
        }
        while ((*(_BYTE *)(Parent + 220) & 0x80) != 0);
        if ((*((_BYTE *)v13 + 221) & 0x40) == 0)
        {
          v15 = scn_default_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
            C3D::ScenePass::_shouldPushNodeToVisible(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        v38[0] = MEMORY[0x1E0C809B0];
        v38[1] = 3221225472;
        v38[2] = ___ZN3C3D9ScenePass24_shouldPushNodeToVisibleEP9__C3DNodei_block_invoke;
        v38[3] = &__block_descriptor_40_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
        v38[4] = this;
        C3DNodeApplyHierarchy((uint64_t)v13, (uint64_t)v38);
        v23 = (char *)this + 16 * a3;
        v24 = v23 + 5232;
        v25 = *((_WORD *)v13 + 112);
        v26 = *((_WORD *)v13 + 113) + *((_WORD *)v13 + 114) - 1;
        v27 = v23 + 5240;
        if ((*((_DWORD *)v23 + 1310) + 1) > *((_DWORD *)v23 + 1311))
        {
          v28 = scn_default_log();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
            C3D::ScenePass::_shouldPushNodeToVisible(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        result = 0;
        v36 = *v27;
        v37 = (_WORD *)(*v24 + 4 * v36);
        *v37 = v25;
        v37[1] = v26;
        *v27 = v36 + 1;
        return result;
      }
    }
    return 0;
  }
  if (*((_BYTE *)this + 5008) || *((_QWORD *)this + 625) || !*((_BYTE *)this + 5363))
    return 0;
  if (!a3)
  {
    v7 = *((_QWORD *)this + 3);
    v42 = this;
    v41 = 0;
    v39 = 16842753;
    v40 = 0;
    v42 = C3D::RenderGraph::createPass<C3D::FloorPass,C3D::ScenePass *,__C3DNode *&,unsigned char,C3D::ScenePass::Parameters>(v7, &v42, &v43, &v41, (const Parameters *)&v39);
    C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(*((_DWORD **)this + 671), &v42);
  }
  return 1;
}

C3D::Pass *C3D::RenderGraph::createPass<C3D::FloorPass,C3D::ScenePass *,__C3DNode *&,unsigned char,C3D::ScenePass::Parameters>(uint64_t a1, C3D::Pass **a2, __C3DNode **a3, char *a4, const Parameters *a5)
{
  uint64_t v6;
  C3D::Pass *v7;
  C3D::RenderGraph *v9;

  v6 = *(_QWORD *)(a1 + 16);
  v9 = (C3D::RenderGraph *)a1;
  v7 = C3D::ScratchAllocate<C3D::FloorPass,C3D::RenderGraph *,C3D::ScenePass *,__C3DNode *&,unsigned char,C3D::ScenePass::Parameters>(v6, &v9, a2, a3, a4, a5);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, v7);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::Pass *))(*(_QWORD *)v7 + 8))(v7);
  return v7;
}

uint64_t ___ZN3C3D9ScenePass24_shouldPushNodeToVisibleEP9__C3DNodei_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_BYTE *)(a2 + 221) & 0x40) != 0)
    C3D::Array<char const*,0u,C3D::StackAllocator>::push_back<char const*&>(*(_DWORD **)(*(_QWORD *)(a1 + 32) + 5376), &v3);
  return 0;
}

C3D::ShadowMapPass *C3D::RenderGraph::createPass<C3D::ShadowMapPass,C3D::ScenePass *,__C3DNode *&>(uint64_t a1, C3D::Pass **a2, __C3DNode **a3)
{
  C3D::ShadowMapPass *Aligned;

  Aligned = (C3D::ShadowMapPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5376, 16, 0);
  C3D::ShadowMapPass::ShadowMapPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ShadowMapPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::DrawNodesPass *C3D::ScratchAllocate<C3D::FloorPass,C3D::RenderGraph *,C3D::ScenePass *,__C3DNode *&,unsigned char,C3D::ScenePass::Parameters>(uint64_t a1, C3D::RenderGraph **a2, C3D::Pass **a3, __C3DNode **a4, char *a5, const Parameters *a6)
{
  C3D::FloorPass *Aligned;
  C3D::RenderGraph *v12;
  C3D::Pass *v13;
  __C3DNode *v14;
  char v15;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  Aligned = (C3D::FloorPass *)C3DScratchAllocatorAllocateAligned(a1, 5472, 16, 0);
  v12 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v18 = 0;
  v20 = 0u;
  v21 = 0x20000;
  memset(v17, 0, sizeof(v17));
  v19 = -1;
  BYTE8(v20) = 1;
  return C3D::FloorPass::FloorPass(Aligned, v12, v13, v14, v15, a6, (const Parameters *)v17);
}

void sub_1DCECB998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4082928971);
  _Unwind_Resume(a1);
}

void SCNCActionCustom::SCNCActionCustom(SCNCActionCustom *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA596260;
  *(_QWORD *)(v3 + 24) = a2->var3;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
  *(_QWORD *)(v3 + 144) = 0;
}

void SCNCActionCustom::~SCNCActionCustom(SCNCAction *this)
{
  SCNCActionCustom::~SCNCActionCustom(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  void **var0;

  this->var0 = (void **)&off_1EA596260;
  var0 = this[1].var0;
  if (var0)
  {
    _Block_release(var0);
    this[1].var0 = 0;
  }
  SCNCAction::~SCNCAction(this);
}

SCNCAction *SCNCActionCustom::cpp_updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  double v6;
  double v7;
  SCNCAction *result;
  float v9;

  v6 = SCNCAction::cpp_ratioForTime(this, a3);
  v7 = v6;
  result = (SCNCAction *)this[1].var0;
  if (result)
    result = (SCNCAction *)((uint64_t (*)(SCNCAction *, SCNNode *, double))result->var2)(result, a2, v6 * this->var1);
  v9 = v7;
  if ((COERCE_UNSIGNED_INT(v9 + -1.0) & 0x60000000) == 0)
    return SCNCAction::didFinishWithTargetAtTime(this, a2, a3);
  return result;
}

void sub_1DCECBCF8(_Unwind_Exception *a1)
{
  SCNCAction *v1;

  SCNCAction::~SCNCAction(v1);
  _Unwind_Resume(a1);
}

void C3DParametricGeometryGeneratePoints(uint64_t a1)
{
  void (*v1)(void);
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(void))(a1 + 352);
  if (v1)
  {
    v1();
  }
  else
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      C3DParametricGeometryGeneratePoints_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void C3DParametricGeometryValidate(uint64_t a1)
{
  uint64_t MaterialsCount;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const __CFArray *MaterialAtIndex;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  CFDataRef v12;
  const void *Value;
  const void *CopyWithInterleavedSources;
  CFDataRef v15;
  CFTypeRef v16;
  uint64_t v17;
  const void *v18;
  uint64_t *Copy;
  _QWORD v20[14];

  v20[13] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 64))
  {
    if (*(uint64_t (**)(uint64_t))(a1 + 312) == C3DBoxCreateMesh)
    {
      MaterialsCount = (uint64_t)C3DGeometryGetMaterialsCount(a1);
      v3 = 0;
      if (MaterialsCount <= 8)
      {
        v4 = MaterialsCount;
        if (MaterialsCount)
        {
          if (MaterialsCount >= 1)
          {
            v5 = 0;
            do
            {
              MaterialAtIndex = C3DGeometryGetMaterialAtIndex(a1, v5);
              if (v5)
              {
                v7 = MaterialAtIndex;
                v8 = 0;
                while (C3DGeometryGetMaterialAtIndex(a1, v8) != v7)
                {
                  if (v5 == ++v8)
                  {
                    v8 = v5;
                    break;
                  }
                }
              }
              else
              {
                v8 = 0;
              }
              v20[v5++] = v8 + 1;
            }
            while (v5 != v4);
          }
          v9 = 0;
          v10 = 0;
          v3 = 0;
          do
          {
            v3 |= v20[v10 % v4] << v9;
            ++v10;
            v9 += 4;
          }
          while (v10 != 8);
        }
      }
      *(_DWORD *)(a1 + 308) = v3;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
    _C3DParametricGeometryCreateCacheIfNeeded_not_thread_safe();
    if (*(_QWORD *)(a1 + 360))
      _C3DParametricGeometryReleaseCachedMesh_not_thread_safe(a1);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD *))(a1 + 344))(a1, v20);
    if (v11 >= 0x65)
      C3DParametricGeometryValidate_cold_1();
    v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v20, v11);
    Value = CFDictionaryGetValue((CFDictionaryRef)_C3DParametricGeometryMeshCache, v12);
    if (Value)
    {
      CopyWithInterleavedSources = Value;
      _C3DParametricGeometryCacheIncrRetainCountForHash_not_thread_safe(v12);
    }
    else
    {
      v17 = (*(uint64_t (**)(uint64_t))(a1 + 312))(a1 + 216);
      if (!v17
        || (v18 = (const void *)v17,
            CopyWithInterleavedSources = (const void *)C3DMeshCreateCopyWithInterleavedSources(v17),
            CFRelease(v18),
            !CopyWithInterleavedSources))
      {
        C3DGeometrySetMesh(a1, 0);
LABEL_35:
        CFRelease(v12);
        os_unfair_lock_unlock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
        return;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)_C3DParametricGeometryCacheRetainCounts, v12, (const void *)1);
      CFDictionarySetValue((CFMutableDictionaryRef)_C3DParametricGeometryMeshCache, v12, CopyWithInterleavedSources);
      CFRelease(CopyWithInterleavedSources);
    }
    v15 = *(CFDataRef *)(a1 + 360);
    if (v15 != v12)
    {
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(a1 + 360) = 0;
      }
      if (v12)
        v16 = CFRetain(v12);
      else
        v16 = 0;
      *(_QWORD *)(a1 + 360) = v16;
    }
    Copy = (uint64_t *)C3DMeshCreateCopy((uint64_t)CopyWithInterleavedSources);
    C3DGeometrySetMesh(a1, Copy);
    if (Copy)
      CFRelease(Copy);
    goto LABEL_35;
  }
}

uint64_t C3DBoxCreateMesh(uint64_t a1)
{
  return C3DMeshCreateChamferBox(*(char *)(a1 + 84), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(int *)(a1 + 60), *(_DWORD *)(a1 + 92), *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8), *(float *)(a1 + 12));
}

void C3DParametricGeometryMaterialDidChange(uint64_t a1)
{
  if (*(uint64_t (**)(uint64_t))(a1 + 312) == C3DBoxCreateMesh)
  {
    __Invalidate(a1);
    *(_DWORD *)(a1 + 308) = -1;
  }
}

void __Invalidate(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 64))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
    _C3DParametricGeometryReleaseCachedMesh_not_thread_safe(a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
  }
  C3DGeometrySetMesh(a1, 0);
}

uint64_t C3DParametricGeometryGetType(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[3];

  memset(v10, 0, sizeof(v10));
  C3DParametricGeometryGetCallbacks(a1, (uint64_t)v10);
  if (!memcmp(v10, &kC3DBoxCallBacks, 0x30uLL))
    return 1;
  if (!memcmp(v10, kC3DPyramidCallBacks, 0x30uLL))
    return 2;
  if (!memcmp(v10, kC3DCylinderCallBacks, 0x30uLL))
    return 4;
  if (!memcmp(v10, kC3DConeCallBacks, 0x30uLL))
    return 5;
  if (!memcmp(v10, kC3DTubeCallBacks, 0x30uLL))
    return 6;
  if (!memcmp(v10, kC3DCapsuleCallBacks, 0x30uLL))
    return 7;
  if (!memcmp(v10, kC3DTorusCallBacks, 0x30uLL))
    return 8;
  if (!memcmp(v10, kC3DSphereCallBacks, 0x30uLL))
    return 3;
  result = memcmp(v10, kC3DPlaneCallBacks, 0x30uLL);
  if ((_DWORD)result)
  {
    v2 = scn_default_log();
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      C3DParametricGeometryGetType_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
      return 0;
    }
  }
  return result;
}

__n128 C3DParametricGeometryGetCallbacks@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryGetName_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_OWORD *)(a1 + 328);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 16) = v12;
  result = *(__n128 *)(a1 + 344);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

float64_t C3DPlaneGetBoundingBoxForPlaneParameters(float32x2_t *a1, uint64_t a2, float64x2_t a3, float64_t a4)
{
  if (a1)
    _ZF = a2 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    a3.f64[1] = a4;
    __asm { FMOV            V1.2D, #-0.5 }
    a1[1].i32[0] = 0;
    *a1 = vcvt_f32_f64(vmulq_f64(a3, _Q1));
    __asm { FMOV            V1.2D, #0.5 }
    *(float32x2_t *)&a3.f64[0] = vcvt_f32_f64(vmulq_f64(a3, _Q1));
    *(_DWORD *)(a2 + 8) = 0;
    *(float64_t *)a2 = a3.f64[0];
  }
  return a3.f64[0];
}

float32x2_t C3DPlaneGetBoundingBox(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3)
{
  BOOL v3;
  float32x2_t v4;
  float32x2_t result;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = a1[27];
    a2[1].i32[0] = 0;
    *a2 = vmul_f32(v4, (float32x2_t)0xBF000000BF000000);
    result = vmul_f32(v4, (float32x2_t)0x3F0000003F000000);
    a3[1].i32[0] = 0;
    *a3 = result;
  }
  return result;
}

double C3DParametricGeometryGetFloatValue(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = _C3DParametricGeometryFloatPtr(a1, a2);
  if (v2)
    return *(float *)v2;
  else
    return 0.0;
}

BOOL C3DPlaneGetBoundingSphereForPlaneParameters(_OWORD *a1, double a2, double a3)
{
  float v3;
  __int128 v4;

  if (a1)
  {
    v3 = sqrt(a3 * a3 + a2 * a2) * 0.5;
    *(_QWORD *)&v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL C3DPlaneGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float v2;
  __int128 v3;

  if (a2)
  {
    v2 = sqrt(*(float *)(a1 + 220) * *(float *)(a1 + 220) + *(float *)(a1 + 216) * *(float *)(a1 + 216)) * 0.5;
    *(_QWORD *)&v3 = 0;
    DWORD2(v3) = 0;
    *((float *)&v3 + 3) = v2;
    *a2 = v3;
  }
  return a2 != 0;
}

void C3DPlaneGeneratePointsCallBack(_QWORD *a1, uint64_t a2, unsigned int *a3, float64x2_t *a4, _OWORD *a5, unsigned int a6)
{
  float32x2_t v12;
  float ChamferRadius;
  float64x2_t v14;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  float v29;
  double v30;
  double v31;
  float64x2_t v32;
  float64x2_t v33;
  _OWORD *v34;
  int v35;
  uint32x2_t v36;
  uint32x2_t v37;
  uint64x2_t v38;
  float64x2_t v39;

  v12 = (float32x2_t)a1[27];
  ChamferRadius = C3DParametricGeometryGetChamferRadius((uint64_t)a1);
  if (a6 >= 2)
  {
    if (a6 == 2)
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
  }
  else
  {
    v14 = vcvtq_f64_f32(v12);
    __asm { FMOV            V2.2D, #0.5 }
    v20 = vmulq_f64(v14, _Q2);
    if (ChamferRadius <= 0.0)
    {
      if (a2 >= 1)
      {
        v32 = vnegq_f64(v20);
        v33 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
        v34 = a5;
        do
        {
          v35 = 214013 * *a3 + 2531011;
          *a3 = 214013 * v35 + 2531011;
          v36.i32[0] = v35;
          v36.i32[1] = 214013 * v35 + 2531011;
          v37 = vshr_n_u32(v36, 0x10uLL);
          v38.i64[0] = v37.u32[0];
          v38.i64[1] = v37.u32[1];
          v39 = vmulq_f64(vcvtq_f64_u64(v38), v33);
          *(float32x2_t *)&v39.f64[0] = vcvt_f32_f64(vmlaq_f64(v32, v14, v39));
          LODWORD(v39.f64[1]) = 0;
          *a4 = v39;
          if (a5)
            *v34 = xmmword_1DD007600;
          ++v34;
          ++a4;
          --a2;
        }
        while (a2);
      }
    }
    else
    {
      v21 = ChamferRadius;
      if (v20.f64[0] >= v20.f64[1])
        v22 = v20.f64[1];
      else
        v22 = v20.f64[0];
      if (v22 <= v21)
        v23 = v22;
      else
        v23 = v21;
      if (a2 >= 1)
      {
        v24 = 0;
        v25 = -v20.f64[0];
        v20.f64[0] = v23 - v20.f64[0];
        do
        {
          v26 = *a3;
          do
          {
            v27 = 214013 * v26 + 2531011;
            v28 = v25 + (double)HIWORD(v27) * 0.0000152590219 * v14.f64[0];
            v26 = 214013 * v27 + 2531011;
            v29 = (double)HIWORD(v26) * 0.0000152590219 * v14.f64[1] - v20.f64[1];
            v30 = v20.f64[0] + fabsf(v28);
            if (v30 <= 0.0)
              break;
            v31 = v23 - v20.f64[1] + fabsf(v29);
            if (v31 <= 0.0)
              break;
          }
          while (v31 * v31 + v30 * v30 > v23 * v23);
          *a3 = v26;
          a4[v24] = (float64x2_t)__PAIR64__(LODWORD(v29), LODWORD(v28));
          if (a5)
            a5[v24] = xmmword_1DD007600;
          ++v24;
        }
        while (v24 != a2);
      }
    }
  }
}

float C3DParametricGeometryGetChamferRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 228);
}

uint64_t C3DPlaneCreateMesh(uint64_t a1)
{
  return C3DMeshCreatePlane(*(char *)(a1 + 84), *(int *)(a1 + 48), *(int *)(a1 + 52), *(int *)(a1 + 60), *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t C3DPlaneSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 0, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 3, 0.0);
  C3DParametricGeometrySetIntValue(a1, 11, 1);
  C3DParametricGeometrySetIntValue(a1, 12, 1);
  return C3DParametricGeometrySetIntValue(a1, 14, 10);
}

uint64_t C3DPlaneHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 0;
  a2[1] = a1[75];
  a2[2] = a1[54];
  a2[3] = a1[55];
  a2[4] = a1[57];
  a2[5] = a1[66];
  a2[6] = a1[67];
  a2[7] = a1[69];
  a2[8] = a1[77];
  return 36;
}

float64_t C3DBoxGetBoundingBoxForBoxParameters(float32x2_t *a1, uint64_t a2, float64x2_t a3, float64_t a4, double a5)
{
  float32_t v10;

  if (a1)
    _ZF = a2 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    a3.f64[1] = a4;
    __asm { FMOV            V1.2D, #-0.5 }
    v10 = a5 * -0.5;
    a1[1].f32[0] = v10;
    *a1 = vcvt_f32_f64(vmulq_f64(a3, _Q1));
    __asm { FMOV            V1.2D, #0.5 }
    *(float32x2_t *)&a3.f64[0] = vcvt_f32_f64(vmulq_f64(a3, _Q1));
    *(float *)_Q1.f64 = a5 * 0.5;
    *(_DWORD *)(a2 + 8) = LODWORD(_Q1.f64[0]);
    *(float64_t *)a2 = a3.f64[0];
  }
  return a3.f64[0];
}

float32_t C3DBoxGetBoundingBox(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3)
{
  BOOL v3;
  float v4;
  float32x2_t v5;
  float32_t result;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = a1[28].f32[0];
    v5 = a1[27];
    a2[1].f32[0] = v4 * -0.5;
    *a2 = vmul_f32(v5, (float32x2_t)0xBF000000BF000000);
    result = v4 * 0.5;
    a3[1].f32[0] = result;
    *a3 = vmul_f32(v5, (float32x2_t)0x3F0000003F000000);
  }
  return result;
}

BOOL C3DBoxGetBoundingSphereForBoxParameters(_OWORD *a1, double a2, double a3, double a4)
{
  float v4;
  __int128 v5;

  if (a1)
  {
    v4 = sqrt(a3 * a3 + a2 * a2 + a4 * a4) * 0.5;
    *(_QWORD *)&v5 = 0;
    DWORD2(v5) = 0;
    *((float *)&v5 + 3) = v4;
    *a1 = v5;
  }
  return a1 != 0;
}

BOOL C3DBoxGetBoundingSphere(float *a1, _OWORD *a2)
{
  float v2;
  __int128 v3;

  if (a2)
  {
    v2 = sqrt(a1[55] * a1[55] + a1[54] * a1[54] + a1[56] * a1[56]) * 0.5;
    *(_QWORD *)&v3 = 0;
    DWORD2(v3) = 0;
    *((float *)&v3 + 3) = v2;
    *a2 = v3;
  }
  return a2 != 0;
}

void C3DBoxGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, float32x4_t *a4, float32x4_t *a5, int a6)
{
  float Width;
  float Height;
  float Length;
  float ChamferRadius;
  int32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __int32 v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  double v25;
  double v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  double v30;
  double v31;
  double v32;
  int8x16_t v33;
  float32x4_t *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  double v38;
  unsigned int v39;
  _BOOL4 v40;
  char v41;
  double v42;
  double v43;
  char v44;
  char v45;
  float v46;
  float v47;
  float v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  char v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  __int32 *v60;
  double v61;
  int8x16_t v62;
  __int32 *v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  double v74;
  double v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  float32_t v79;
  float32_t v80;
  float32x4_t v81;
  float v82;
  int v83;
  float v84;
  int32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  double v88;
  double v89;
  float32x4_t *v90;
  unsigned int v91;
  unsigned int v92;
  double v93;
  unsigned int v94;
  float32_t v95;
  int32x4_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;

  Width = C3DParametricGeometryGetWidth((uint64_t)a1);
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  Length = C3DParametricGeometryGetLength((uint64_t)a1);
  ChamferRadius = C3DParametricGeometryGetChamferRadius((uint64_t)a1);
  v20.f32[0] = Width * 0.5;
  v21 = Height * 0.5;
  v22.f32[0] = Length * 0.5;
  if ((float)(Width * 0.5) >= (float)(Height * 0.5))
    v23 = Height * 0.5;
  else
    v23 = Width * 0.5;
  if (v23 >= v22.f32[0])
    v23 = Length * 0.5;
  if (ChamferRadius >= v23)
    *(float *)v16.i32 = v23;
  else
    *(float *)v16.i32 = ChamferRadius;
  if (a6 == 2)
  {
    C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
  }
  else
  {
    v24 = v20;
    v24.f32[1] = Height * 0.5;
    v24.f32[2] = Length * 0.5;
    v25 = *(float *)v16.i32;
    v26 = v25 * v25;
    v27 = vsubq_f32(v24, (float32x4_t)vdupq_lane_s32(v16, 0));
    if (a6 == 1)
    {
      v70 = Width;
      v71 = Height;
      v72 = Length;
      if (*(float *)v16.i32 <= 0.0)
      {
        if (a2 >= 1)
        {
          v88 = -v20.f32[0];
          v89 = -v22.f32[0];
          v90 = a5;
          do
          {
            v91 = 214013 * *a3 + 2531011;
            *(double *)v22.i64 = (double)HIWORD(v91) * 0.0000152590219;
            v92 = 214013 * v91 + 2531011;
            v93 = (double)HIWORD(v92) * 0.0000152590219 * v71 - v21;
            v94 = 214013 * v92 + 2531011;
            *a3 = v94;
            v22.f32[0] = v88 + *(double *)v22.i64 * v70;
            *(float *)&v93 = v93;
            v95 = v89 + (double)HIWORD(v94) * 0.0000152590219 * v72;
            v22.i32[1] = LODWORD(v93);
            v22.f32[2] = v95;
            *a4 = v22;
            if (a5)
            {
              v96 = (int32x4_t)vmulq_f32(v22, v22);
              v96.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v96, 2), vadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v96.i8, 1))).u32[0];
              v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
              v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
              v22 = vmulq_n_f32(v22, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]);
              *v90 = v22;
            }
            ++v90;
            ++a4;
            --a2;
          }
          while (a2);
        }
      }
      else if (a2 >= 1)
      {
        v73 = 0;
        v74 = -v21;
        v75 = -v22.f32[0];
        do
        {
          v76 = *a3;
          do
          {
            v77 = 214013 * v76 + 2531011;
            v18.f32[0] = (double)HIWORD(v77) * 0.0000152590219 * v70 - v20.f32[0];
            v78 = 214013 * v77 + 2531011;
            v79 = v74 + (double)HIWORD(v78) * 0.0000152590219 * v71;
            v76 = 214013 * v78 + 2531011;
            v80 = v75 + (double)HIWORD(v76) * 0.0000152590219 * v72;
            v18.f32[1] = v79;
            v18.f32[2] = v80;
            v81 = vsubq_f32(vabsq_f32(v18), v27);
            v82 = v81.f32[1];
            v83 = v81.f32[1] > 0.0;
            if (v81.f32[0] > 0.0)
              ++v83;
            if (v81.f32[2] > 0.0)
              ++v83;
            if (v83 == 2)
            {
              if (v81.f32[0] <= v81.f32[1])
                v81.f32[0] = v81.f32[1];
              if (v81.f32[1] <= v81.f32[2])
                v82 = v81.f32[2];
              v84 = (float)(v82 * v82) + (float)(v81.f32[0] * v81.f32[0]);
            }
            else
            {
              if (v83 != 3)
                break;
              v84 = (float)((float)(v81.f32[1] * v81.f32[1]) + (float)(v81.f32[0] * v81.f32[0]))
                  + (float)(v81.f32[2] * v81.f32[2]);
            }
          }
          while (v26 < v84);
          *a3 = v76;
          a4[v73] = v18;
          if (a5)
          {
            v85 = (int32x4_t)vmulq_f32(v18, v18);
            v85.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v85, 2), vadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v85.i8, 1))).u32[0];
            v86 = vrsqrte_f32((float32x2_t)v85.u32[0]);
            v87 = vmul_f32(v86, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v86, v86)));
            v18 = vmulq_n_f32(v18, vmul_f32(v87, vrsqrts_f32((float32x2_t)v85.u32[0], vmul_f32(v87, v87))).f32[0]);
            a5[v73] = v18;
          }
          ++v73;
        }
        while (v73 != a2);
      }
    }
    else if (!a6 && a2 >= 1)
    {
      v17.f32[0] = v21 * v22.f32[0];
      v28 = v17;
      v28.f32[1] = v20.f32[0] * v22.f32[0];
      v28.f32[2] = v20.f32[0] * v21;
      v29 = vmulq_n_f32(v28, 1.0/ (float)((float)(v20.f32[0] * v21) + (float)((float)(v21 * v22.f32[0]) + (float)(v20.f32[0] * v22.f32[0]))));
      v30 = v29.f32[0];
      v31 = v30 + v30;
      v32 = v30 + v30 + v29.f32[1] * 2.0;
      v33.i64[0] = 0x8000000080000000;
      v33.i64[1] = 0x8000000080000000;
      v34 = a5;
      do
      {
        v35 = 214013 * *a3 + 2531011;
        v36 = 214013 * v35 + 2531011;
        v37 = 214013 * v36 + 2531011;
        *a3 = v37;
        v38 = (double)HIWORD(v37) * 0.0000152590219 + (double)HIWORD(v37) * 0.0000152590219;
        if (v38 >= v31)
        {
          if (v38 >= v32)
          {
            v40 = v38 - v32 < v29.f32[2] || v29.f32[2] == 1.0;
            v39 = 2;
          }
          else
          {
            v40 = v38 - v31 < v29.f32[1] || v29.f32[1] == 1.0;
            v39 = 1;
          }
          v41 = -1;
        }
        else
        {
          v39 = 0;
          v40 = v29.f32[0] == 1.0;
          if (v38 < v30)
            v40 = 1;
          v41 = 2;
        }
        v42 = (double)HIWORD(v35) * 0.0000152590219 * 2.0 + -1.0;
        v43 = (double)HIWORD(v36) * 0.0000152590219 * 2.0 + -1.0;
        if (v39 == 2)
          v44 = 0;
        else
          v44 = v39 + 1;
        v45 = v39 + v41;
        v104 = v24;
        v46 = *(float *)((unint64_t)&v104 | (4 * v39));
        if (!v40)
          v46 = -v46;
        v105 = 0uLL;
        *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFF3 | (4 * (v39 & 3))) = v46;
        v47 = v42 * *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3)));
        v106 = v105;
        *(float *)((unint64_t)&v106 & 0xFFFFFFFFFFFFFFF3 | (4 * (v44 & 3))) = v47;
        v48 = v43 * *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFF3 | (4 * (v45 & 3)));
        v107 = (int8x16_t)v106;
        *(float *)((unint64_t)&v107 & 0xFFFFFFFFFFFFFFF3 | (4 * (v45 & 3))) = v48;
        v49 = v107;
        v50 = (float32x4_t)v107;
        v50.i32[3] = v19;
        if (*(float *)v16.i32 <= 0.0)
          goto LABEL_57;
        v51 = vsubq_f32(vabsq_f32((float32x4_t)v107), v27);
        v52 = v51.f32[1] > 0.0;
        if (v51.f32[0] > 0.0)
          ++v52;
        if (v51.f32[2] > 0.0)
          ++v52;
        if (v52 == 3)
        {
          v64 = vmulq_f32(v51, v51);
          v65 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0];
          if (v26 < v65)
          {
            v66 = vmlaq_n_f32(v27, v51, *(float *)v16.i32 / sqrtf(v65));
            *(int8x8_t *)v50.f32 = vbsl_s8((int8x8_t)0x8000000080000000, *(int8x8_t *)v66.f32, *(int8x8_t *)v107.i8);
            v51.i32[0] = v66.i32[2];
            v49.i32[0] = v107.i32[2];
            v50.i32[2] = vbslq_s8(v33, (int8x16_t)v51, v49).u32[0];
LABEL_56:
            v50.i32[3] = v19;
          }
        }
        else if (v52 == 2)
        {
          v53 = 2 * (v51.f32[0] > 0.0);
          if (v51.f32[1] <= 0.0)
            v54 = 1;
          else
            v54 = 2;
          if (v39)
            v54 = 0;
          if (v39 != 1)
            v53 = v54;
          if (v39 == 2)
            v55 = v51.f32[1] <= 0.0;
          else
            v55 = v53;
          if ((_DWORD)v55 == 2)
            v56 = 0;
          else
            v56 = v55 + 1;
          v57 = v55 + 2 + ((int)v55 + 2) / 3u;
          v99 = v51;
          *(_DWORD *)((unint64_t)&v99 | (4 * v55)) = 0;
          v58 = v99;
          v59 = vmulq_f32(v58, v58);
          *(double *)v59.i64 = v25
                             / sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).f32[0]);
          v60 = (__int32 *)((unint64_t)&v102 & 0xFFFFFFFFFFFFFFF3 | (4 * (v56 & 3)));
          v100 = v27;
          v61 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v56 & 3)));
          v101 = v99;
          *(double *)v58.i64 = v61
                             + *(float *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFF3 | (4 * (v56 & 3)))
                             * *(double *)v59.i64;
          v58.f32[0] = *(double *)v58.i64;
          v102 = v49;
          v49.i32[0] = *v60;
          *v60 = vbslq_s8(v33, (int8x16_t)v58, v49).u32[0];
          v62 = v102;
          v63 = (__int32 *)((unint64_t)&v103 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)));
          *(double *)v58.i64 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)))
                             + *(float *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFF3 | (4 * (v57 & 3)))
                             * *(double *)v59.i64;
          v58.f32[0] = *(double *)v58.i64;
          v103 = (float32x4_t)v102;
          v62.i32[0] = *v63;
          *v63 = vbslq_s8(v33, (int8x16_t)v58, v62).u32[0];
          v50 = v103;
          goto LABEL_56;
        }
LABEL_57:
        *a4 = v50;
        if (a5)
        {
          v67 = (int32x4_t)vmulq_f32(v50, v50);
          v67.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
          v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
          v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
          *v34 = vmulq_n_f32(v50, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
        }
        ++v34;
        ++a4;
        v19 = v50.i32[3];
        --a2;
      }
      while (a2);
    }
  }
}

float C3DParametricGeometryGetWidth(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 216);
}

float C3DParametricGeometryGetHeight(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 220);
}

float C3DParametricGeometryGetLength(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 224);
}

uint64_t C3DBoxSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 0, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 2, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 3, 0.0);
  C3DParametricGeometrySetIntValue(a1, 11, 1);
  C3DParametricGeometrySetIntValue(a1, 12, 1);
  C3DParametricGeometrySetIntValue(a1, 13, 1);
  return C3DParametricGeometrySetIntValue(a1, 14, 5);
}

uint64_t C3DBoxHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 1;
  a2[1] = a1[75];
  a2[2] = a1[54];
  a2[3] = a1[55];
  a2[4] = a1[56];
  a2[5] = a1[57];
  a2[6] = a1[66];
  a2[7] = a1[67];
  a2[8] = a1[68];
  a2[9] = a1[69];
  a2[10] = a1[77];
  return 44;
}

double C3DPyramidGetBoundingBoxForPyramidParameters(uint64_t a1, uint64_t a2, int32x4_t a3, double a4, float64_t a5)
{
  float64x2_t v6;
  float64x2_t v11;
  double v12;
  float v13;

  if (a1)
    _ZF = a2 == 0;
  else
    _ZF = 1;
  if (!_ZF)
  {
    *(_QWORD *)&v6.f64[0] = a3.i64[0];
    v6.f64[1] = a5;
    __asm { FMOV            V4.2D, #-0.5 }
    v11 = vmulq_f64(v6, _Q4);
    *(float32x2_t *)&v11.f64[0] = vcvt_f32_f64(v11);
    LODWORD(_Q4.f64[0]) = vzip1q_s32((int32x4_t)v11, a3).u32[0];
    *(_DWORD *)(a1 + 8) = HIDWORD(v11.f64[0]);
    v12 = *(double *)a3.i64 * 0.5;
    *(double *)&a3.i64[1] = a4;
    *(_QWORD *)a1 = LODWORD(_Q4.f64[0]);
    *(float32x2_t *)a3.i8 = vcvt_f32_f64((float64x2_t)a3);
    v13 = a5 * 0.5;
    *(float *)(a2 + 8) = v13;
    *(_QWORD *)a2 = a3.i64[0];
  }
  return *(double *)a3.i64;
}

float C3DPyramidGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int32x4_t v7;
  BOOL v8;
  int32x4_t v9;
  uint64_t v10;
  float Height;
  int32x4_t v13;

  *(float *)&v6 = C3DParametricGeometryGetWidth(a1);
  v13.i64[0] = v6;
  Height = C3DParametricGeometryGetHeight(a1);
  *(float *)v7.i32 = C3DParametricGeometryGetLength(a1);
  if (a2)
    v8 = a3 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = v13;
    v9.i32[1] = v7.i32[0];
    *(float32x2_t *)v9.i8 = vmul_f32(*(float32x2_t *)v9.i8, (float32x2_t)0xBF000000BF000000);
    *(_DWORD *)(a2 + 8) = v9.i32[1];
    *(_QWORD *)a2 = vzip1q_s32(v9, v7).u32[0];
    *(float *)&v10 = *(float *)v13.i32 * 0.5;
    *((float *)&v10 + 1) = Height;
    *(float *)v7.i32 = *(float *)v7.i32 * 0.5;
    *(_DWORD *)(a3 + 8) = v7.i32[0];
    *(_QWORD *)a3 = v10;
  }
  return *(float *)v7.i32;
}

BOOL C3DPyramidGetBoundingSphereForPyramidParameters(int32x4_t *a1, double a2, float64x2_t a3, double a4)
{
  float64x2_t v9;

  if (a1)
  {
    a3.f64[1] = sqrt(a3.f64[0] * a3.f64[0] + a2 * a2 + a4 * a4);
    __asm { FMOV            V0.2D, #0.5 }
    v9 = vmulq_f64(a3, _Q0);
    *(float32x2_t *)&v9.f64[0] = vcvt_f32_f64(v9);
    *a1 = vtrn1q_s32((int32x4_t)0, vzip1q_s32((int32x4_t)v9, (int32x4_t)v9));
  }
  return a1 != 0;
}

BOOL C3DPyramidGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float Width;
  float Height;
  float Length;
  float v7;
  __int128 v8;

  Width = C3DParametricGeometryGetWidth(a1);
  Height = C3DParametricGeometryGetHeight(a1);
  Length = C3DParametricGeometryGetLength(a1);
  if (a2)
  {
    v7 = sqrt(Height * Height + Width * Width + Length * Length) * 0.5;
    LODWORD(v8) = 0;
    DWORD2(v8) = 0;
    *((float *)&v8 + 1) = Height * 0.5;
    *((float *)&v8 + 3) = v7;
    *a2 = v8;
  }
  return a2 != 0;
}

void C3DPyramidGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, float32x4_t *a4, float32x4_t *a5, int a6)
{
  float Width;
  float Length;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t *v22;
  unsigned int v23;
  float32_t v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  float32_t v28;
  int32x4_t v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int32 v58;
  uint64_t v59;
  float v60;
  unsigned int v61;
  float v62;
  unsigned int v63;
  float v64;
  unsigned int v65;
  float v66;
  float32x4_t v67;
  unsigned int v68;
  float v69;
  double v70;
  float v71;
  float v72;
  float v73;
  int32x4_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float Height;
  __int128 v78;
  float v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  Width = C3DParametricGeometryGetWidth((uint64_t)a1);
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  Length = C3DParametricGeometryGetLength((uint64_t)a1);
  v18.f32[0] = Width * 0.5;
  v19.f32[0] = Length * 0.5;
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v20 = Height;
      v21 = v19.f32[0];
      v22 = a5;
      do
      {
        v23 = 214013 * *a3 + 2531011;
        v24 = (double)HIWORD(v23) * 0.0000152590219 * v20;
        *(double *)v19.i64 = v20 - v24;
        v25 = *(double *)v19.i64 * v21 / v20;
        v26 = 214013 * v23 + 2531011;
        v19.f32[0] = ((double)HIWORD(v26) * 0.0000152590219 * 2.0 + -1.0) * (*(double *)v19.i64 * v18.f32[0] / v20);
        v27 = 214013 * v26 + 2531011;
        *a3 = v27;
        v28 = ((double)HIWORD(v27) * 0.0000152590219 * 2.0 + -1.0) * v25;
        v19.f32[1] = v24;
        v19.f32[2] = v28;
        *a4 = v19;
        if (a5)
        {
          v29 = (int32x4_t)vmulq_f32(v19, v19);
          v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
          v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
          v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
          v19 = vmulq_n_f32(v19, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
          *v22 = v19;
        }
        ++v22;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v32 = 0;
    v35.i32[1] = 0;
    v35.i32[3] = 0;
    v36.i32[1] = 0;
    v36.i32[3] = 0;
    v36.f32[0] = Width * 0.5;
    v18 = (float32x4_t)v18.u32[0];
    v18.f32[2] = Length * 0.5;
    v33.i32[0] = 0;
    v33.i64[1] = 0;
    v33.f32[1] = Height;
    v35.f32[0] = -(float)(Width * 0.5);
    v34 = (float32x4_t)v35.u32[0];
    v34.f32[2] = Length * 0.5;
    v35.f32[2] = -(float)(Length * 0.5);
    v36.f32[2] = v35.f32[2];
    v37 = vsubq_f32(v18, v34);
    v38 = vsubq_f32(v36, v18);
    v39 = vsubq_f32(v35, v36);
    v40 = vsubq_f32(v34, v35);
    v41 = vsubq_f32((float32x4_t)v33.u64[0], v34);
    v42 = vsubq_f32((float32x4_t)v33.u64[0], v36);
    v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL);
    v44 = (int8x16_t)vmlaq_f32(vmulq_f32(v43, vnegq_f32(v38)), v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL));
    v45 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL);
    v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL);
    v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
    v48 = vnegq_f32(v40);
    v49 = (int8x16_t)vmlaq_f32(vmulq_f32(v47, v48), v41, v46);
    v50 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
    v51 = (int8x16_t)vmlaq_f32(vmulq_f32(v43, vnegq_f32(v39)), v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL));
    v52 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), v51, 0xCuLL);
    v53 = (int8x16_t)vmlaq_f32(vmulq_f32(v47, vnegq_f32(v37)), v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL));
    v54 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL);
    do
    {
      v55 = v14;
      v56 = v15;
      v57 = v17;
      v58 = v16.i32[3];
      v79 = 0.16667;
      v78 = xmmword_1DD02AE5C;
      v59 = 4;
      v60 = 0.33333;
      do
      {
        v60 = v60 + *(float *)((char *)&v78 + v59);
        *(float *)((char *)&v78 + v59) = v60;
        v59 += 4;
      }
      while (v59 != 20);
      v61 = 214013 * *a3 + 2531011;
      v62 = (double)HIWORD(v61) * 0.0000152590219;
      v14 = v34;
      v15 = v48;
      v17 = v37;
      v16 = (float32x4_t)xmmword_1DD007A00;
      if (v62 >= 0.33333)
      {
        v14 = v33;
        v15 = v18;
        v17 = v34;
        v16 = (float32x4_t)v54;
        if (*((float *)&v78 + 1) <= v62)
        {
          v14 = v33;
          v15 = v35;
          v17 = v36;
          v16 = (float32x4_t)v52;
          if (*((float *)&v78 + 2) <= v62)
          {
            v14 = v35;
            v15 = v33;
            v17 = v34;
            v16 = (float32x4_t)v50;
            if (*((float *)&v78 + 3) <= v62)
            {
              if (v79 <= v62)
              {
                v16.i64[0] = 0;
                v16.i32[2] = 0;
                v16.i32[3] = v58;
                v14 = v55;
                v15 = v56;
                v17 = v57;
              }
              else
              {
                v14 = v36;
                v15 = v18;
                v17 = v33;
                v16 = (float32x4_t)v45;
              }
            }
          }
        }
      }
      v63 = 214013 * v61 + 2531011;
      v64 = (double)HIWORD(v63) * 0.0000152590219;
      v65 = 214013 * v63 + 2531011;
      *a3 = v65;
      v66 = (double)HIWORD(v65) * 0.0000152590219;
      if (v62 >= 0.33333)
      {
        v68 = 214013 * v65 + 2531011;
        *a3 = v68;
        v69 = (double)HIWORD(v68) * 0.0000152590219;
        v70 = 1.0 / (float)((float)(v64 + v66) + v69);
        v71 = v70 * v64;
        v72 = v70 * v66;
        v73 = v70 * v69;
        v67 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v15, v72), v17, v71), v14, v73);
      }
      else
      {
        v67 = vaddq_f32(v14, vmlaq_n_f32(vmulq_n_f32(v15, v66), v17, v64));
      }
      a4[v32] = v67;
      if (a5)
      {
        v74 = (int32x4_t)vmulq_f32(v16, v16);
        v74.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v74, 2), vadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1))).u32[0];
        v75 = vrsqrte_f32((float32x2_t)v74.u32[0]);
        v76 = vmul_f32(v75, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v75, v75)));
        a5[v32] = vmulq_n_f32(v16, vmul_f32(v76, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v76, v76))).f32[0]);
      }
      ++v32;
    }
    while (v32 != a2);
  }
}

uint64_t C3DPyramidCreateMesh(uint64_t a1)
{
  return C3DMeshCreatePyramid(*(char *)(a1 + 84), *(int *)(a1 + 48), *(_DWORD *)(a1 + 52), *(int *)(a1 + 56), *(float *)a1, *(float *)(a1 + 4), *(float *)(a1 + 8));
}

uint64_t C3DPyramidSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 0, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetFloatValue(a1, 2, 1.0);
  C3DParametricGeometrySetIntValue(a1, 11, 1);
  C3DParametricGeometrySetIntValue(a1, 12, 1);
  return C3DParametricGeometrySetIntValue(a1, 13, 1);
}

uint64_t C3DPyramidHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 2;
  a2[1] = a1[75];
  a2[2] = a1[54];
  a2[3] = a1[55];
  a2[4] = a1[56];
  a2[5] = a1[66];
  a2[6] = a1[67];
  a2[7] = a1[68];
  a2[8] = a1[77];
  return 36;
}

uint64_t C3DSphereCreateMesh(uint64_t a1)
{
  return C3DMeshCreateSphere(*(char *)(a1 + 84), *(int *)(a1 + 64), *(_DWORD *)(a1 + 88), *(float *)(a1 + 16), *(float *)(a1 + 44));
}

float C3DSphereGetBoundingBoxForSphereParameters(uint64_t a1, uint64_t a2, double a3, double a4)
{
  BOOL v4;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    *(float *)&a3 = a3;
    *(float *)&a4 = -*(float *)&a3;
    *(float *)(a1 + 8) = -*(float *)&a3;
    *(_QWORD *)a1 = vdupq_lane_s32(*(int32x2_t *)&a4, 0).u64[0];
    *(_DWORD *)(a2 + 8) = LODWORD(a3);
    *(_QWORD *)a2 = vdupq_lane_s32(*(int32x2_t *)&a3, 0).u64[0];
  }
  return *(float *)&a3;
}

float C3DSphereGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  BOOL v5;

  if (a2)
    v5 = a3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    LODWORD(a4) = *(_DWORD *)(a1 + 232);
    *(float *)&a5 = -*(float *)&a4;
    *(float *)(a2 + 8) = -*(float *)&a4;
    *(_QWORD *)a2 = vdupq_lane_s32(*(int32x2_t *)&a5, 0).u64[0];
    *(_DWORD *)(a3 + 8) = LODWORD(a4);
    *(_QWORD *)a3 = vdupq_lane_s32(*(int32x2_t *)&a4, 0).u64[0];
  }
  return *(float *)&a4;
}

BOOL C3DSphereGetBoundingSphereForSphereParameters(_OWORD *a1, double a2)
{
  float v2;
  __int128 v3;

  if (a1)
  {
    v2 = a2;
    *(_QWORD *)&v3 = 0;
    DWORD2(v3) = 0;
    *((float *)&v3 + 3) = v2;
    *a1 = v3;
  }
  return a1 != 0;
}

BOOL C3DSphereGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  __int128 v2;

  if (a2)
  {
    *(_QWORD *)&v2 = 0;
    DWORD2(v2) = 0;
    HIDWORD(v2) = *(_DWORD *)(a1 + 232);
    *a2 = v2;
  }
  return a2 != 0;
}

void C3DSphereGeneratePointsCallBack(_DWORD *a1, uint64_t a2, unsigned int *a3, float32x4_t *a4, float32x4_t *a5, int a6, double a7)
{
  float32x4_t v7;
  float32x4_t *v9;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  unsigned int v19;
  int v20;
  float32x4_t v21;
  int32x2_t v22;
  float32x4_t *v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  __float2 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32_t v30;

  v9 = a4;
  v11 = a2;
  LODWORD(a7) = a1[58];
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v12 = 0;
      v13 = (float32x2_t)vdup_n_s32(0x37800080u);
      __asm { FMOV            V3.2S, #-1.0 }
      do
      {
        v19 = *a3;
        do
        {
          v20 = 214013 * v19 + 2531011;
          v7.i32[0] = v20;
          v7.i32[1] = 214013 * v20 + 2531011;
          *(float32x2_t *)v7.f32 = vmla_f32(_D3, (float32x2_t)0x4000000040000000, vmul_f32(vcvt_f32_u32(vshr_n_u32(*(uint32x2_t *)v7.f32, 0x10uLL)), v13));
          v19 = 214013 * (214013 * v20 + 2531011) + 2531011;
          v7.f32[2] = (float)((float)((float)HIWORD(v19) * 0.000015259) * 2.0) + -1.0;
          v21 = vmulq_f32(v7, v7);
          v22 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u64[0];
          *(float *)v22.i32 = sqrtf(*(float *)v22.i32);
        }
        while (*(float *)v22.i32 > 1.0);
        *a3 = v19;
        if (a5)
          a5[v12] = vdivq_f32(v7, (float32x4_t)vdupq_lane_s32(v22, 0));
        v7 = vaddq_f32(vmulq_n_f32(v7, *(float *)&a7), (float32x4_t)0);
        a4[v12++] = v7;
      }
      while (v12 != a2);
    }
  }
  else if (a2 >= 1)
  {
    v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    v23 = a5;
    do
    {
      v24 = 214013 * *a3 + 2531011;
      v30 = (float)((float)((float)HIWORD(v24) * 0.000015259) * 2.0) + -1.0;
      v25 = 214013 * v24 + 2531011;
      *a3 = v25;
      v26 = (float)((float)((float)HIWORD(v25) * 0.000015259) + (float)((float)HIWORD(v25) * 0.000015259)) * 3.14159265;
      v27 = __sincosf_stret(v26);
      *(float32x2_t *)v28.f32 = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v27.__sinval), LODWORD(v27.__cosval)), sqrtf(1.0 - (float)(v30 * v30)));
      v28.f32[2] = v30;
      *v9 = vmlaq_f32((float32x4_t)0, v29, v28);
      if (a5)
        *v23 = v28;
      ++v23;
      ++v9;
      --v11;
    }
    while (v11);
  }
}

uint64_t C3DSphereSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetIntValue(a1, 22, 3);
  C3DParametricGeometrySetFloatValue(a1, 4, 0.5);
  C3DParametricGeometrySetIntValue(a1, 23, 24);
  return C3DParametricGeometrySetFloatValue(a1, 21, 1.0);
}

uint64_t C3DSphereHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 3;
  a2[1] = a1[75];
  a2[2] = a1[76];
  a2[3] = a1[58];
  a2[4] = a1[70];
  a2[5] = a1[65];
  a2[6] = a1[77];
  return 28;
}

uint64_t C3DCylinderCreateMesh(uint64_t a1)
{
  return C3DMeshCreateCylinder(*(char *)(a1 + 84), *(_DWORD *)(a1 + 68), *(int *)(a1 + 52), *(float *)(a1 + 16), *(float *)(a1 + 4), *(float *)(a1 + 44));
}

float64_t C3DCylinderGetBoundingBoxForCylinderParameters(uint64_t a1, uint64_t a2, float64x2_t a3, double a4)
{
  BOOL v4;
  float v5;
  uint64_t v6;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = a4 * -0.5;
    a3.f64[1] = a4 * 0.5;
    *(float32x2_t *)&a3.f64[0] = vcvt_f32_f64(a3);
    *(float *)&v6 = -*(float *)a3.f64;
    *(float *)(a1 + 8) = -*(float *)a3.f64;
    *((float *)&v6 + 1) = v5;
    *(_QWORD *)a1 = v6;
    *(_DWORD *)(a2 + 8) = LODWORD(a3.f64[0]);
    *(float64_t *)a2 = a3.f64[0];
  }
  return a3.f64[0];
}

float C3DCylinderGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;
  BOOL v7;
  uint64_t v8;
  float Radius;

  Radius = C3DParametricGeometryGetRadius(a1);
  result = C3DParametricGeometryGetHeight(a1);
  if (a2)
    v7 = a3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    *(float *)&v8 = -Radius;
    *(float *)(a2 + 8) = -Radius;
    *((float *)&v8 + 1) = result * -0.5;
    *(_QWORD *)a2 = v8;
    result = result * 0.5;
    *(float *)(a3 + 8) = Radius;
    *(_QWORD *)a3 = __PAIR64__(LODWORD(result), LODWORD(Radius));
  }
  return result;
}

float C3DParametricGeometryGetRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 232);
}

BOOL C3DCylinderGetBoundingSphereForCylinderParameters(_OWORD *a1, double a2, double a3)
{
  float v3;
  __int128 v4;

  if (a1)
  {
    v3 = sqrt(a3 * 0.25 * a3 + a2 * a2);
    *(_QWORD *)&v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL C3DCylinderGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float Radius;
  float Height;
  float v6;
  __int128 v7;

  Radius = C3DParametricGeometryGetRadius(a1);
  Height = C3DParametricGeometryGetHeight(a1);
  if (a2)
  {
    v6 = sqrt(Height * 0.25 * Height + Radius * Radius);
    *(_QWORD *)&v7 = 0;
    DWORD2(v7) = 0;
    *((float *)&v7 + 3) = v6;
    *a2 = v7;
  }
  return a2 != 0;
}

void C3DCylinderGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  float Radius;
  double Height;
  double v14;
  _OWORD *v15;
  unsigned int v16;
  float v17;
  __double2 v18;
  float sinval;
  float cosval;
  unsigned int v21;
  double v22;
  float64x2_t v23;
  unsigned int v24;
  __int128 v25;
  _OWORD *v26;
  unsigned int v27;
  float v28;
  __double2 v29;
  float v30;
  float v31;
  unsigned int v32;
  __int128 v33;
  float v34;
  __int128 v35;

  Radius = C3DParametricGeometryGetRadius((uint64_t)a1);
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v14 = Radius;
      v15 = a5;
      do
      {
        v16 = 214013 * *a3 + 2531011;
        v17 = (double)HIWORD(v16) * 0.0000152590219 + (double)HIWORD(v16) * 0.0000152590219;
        v18 = __sincos_stret(v17 * 3.14159265);
        sinval = v18.__sinval;
        cosval = v18.__cosval;
        v21 = 214013 * v16 + 2531011;
        v22 = (double)HIWORD(v21) * 0.0000152590219 * v14;
        v23.f64[0] = v22 * cosval;
        v24 = 214013 * v21 + 2531011;
        v23.f64[1] = Height * -0.5 + (double)HIWORD(v24) * 0.0000152590219 * Height;
        *a3 = v24;
        *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(v23);
        *(float *)&v22 = v22 * sinval;
        LODWORD(v23.f64[1]) = LODWORD(v22);
        *a4 = v23;
        if (a5)
        {
          *(_QWORD *)&v25 = LODWORD(cosval);
          *((_QWORD *)&v25 + 1) = LODWORD(sinval);
          *v15 = v25;
        }
        ++v15;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v26 = a5;
    do
    {
      v27 = 214013 * *a3 + 2531011;
      v28 = (double)HIWORD(v27) * 0.0000152590219 + (double)HIWORD(v27) * 0.0000152590219;
      v29 = __sincos_stret(v28 * 3.14159265);
      v30 = v29.__sinval;
      v31 = v29.__cosval;
      v32 = 214013 * v27 + 2531011;
      *a3 = v32;
      *(float *)&v33 = Radius * v31;
      v34 = Height * -0.5 + (double)HIWORD(v32) * 0.0000152590219 * Height;
      *((float *)&v33 + 1) = v34;
      *((float *)&v33 + 2) = Radius * v30;
      *a4 = v33;
      if (a5)
      {
        *(_QWORD *)&v35 = LODWORD(v31);
        *((_QWORD *)&v35 + 1) = LODWORD(v30);
        *v26 = v35;
      }
      ++v26;
      ++a4;
      --a2;
    }
    while (a2);
  }
}

uint64_t C3DCylinderSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 4, 0.5);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetIntValue(a1, 15, 48);
  C3DParametricGeometrySetIntValue(a1, 12, 1);
  return C3DParametricGeometrySetFloatValue(a1, 21, 1.0);
}

uint64_t C3DCylinderHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 4;
  a2[1] = a1[75];
  a2[2] = a1[58];
  a2[3] = a1[55];
  a2[4] = a1[71];
  a2[5] = a1[67];
  a2[6] = a1[65];
  a2[7] = a1[77];
  return 32;
}

uint64_t C3DConeCreateMesh(uint64_t a1)
{
  return C3DMeshCreateCone(*(char *)(a1 + 84), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 52), *(float *)(a1 + 20), *(float *)(a1 + 24), *(float *)(a1 + 4));
}

float64_t C3DConeGetBoundingBoxForConeParameters(uint64_t a1, uint64_t a2, float64x2_t a3, float64_t a4, double a5)
{
  BOOL v5;
  float v6;
  uint64_t v7;

  if (a1)
    v5 = a2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    if (a3.f64[0] <= a4)
      a3.f64[0] = a4;
    v6 = a5 * -0.5;
    a3.f64[1] = a5 * 0.5;
    *(float32x2_t *)&a3.f64[0] = vcvt_f32_f64(a3);
    *(float *)&v7 = -*(float *)a3.f64;
    *(float *)(a1 + 8) = -*(float *)a3.f64;
    *((float *)&v7 + 1) = v6;
    *(_QWORD *)a1 = v7;
    *(_DWORD *)(a2 + 8) = LODWORD(a3.f64[0]);
    *(float64_t *)a2 = a3.f64[0];
  }
  return a3.f64[0];
}

uint64_t C3DConeGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float TopRadius;
  float BottomRadius;
  float Height;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  TopRadius = C3DParametricGeometryGetTopRadius(a1);
  BottomRadius = C3DParametricGeometryGetBottomRadius(a1);
  Height = C3DParametricGeometryGetHeight(a1);
  if (a2)
    v9 = a3 == 0;
  else
    v9 = 1;
  result = !v9;
  if (!v9)
  {
    if (TopRadius <= BottomRadius)
      *(float *)&v11 = BottomRadius;
    else
      *(float *)&v11 = TopRadius;
    *(float *)&v12 = -*(float *)&v11;
    *(float *)(a2 + 8) = -*(float *)&v11;
    *((float *)&v12 + 1) = Height * -0.5;
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a3 + 8) = v11;
    *((float *)&v11 + 1) = Height * 0.5;
    *(_QWORD *)a3 = v11;
  }
  return result;
}

float C3DParametricGeometryGetTopRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 236);
}

float C3DParametricGeometryGetBottomRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 240);
}

BOOL C3DConeGetBoundingSphereForConeParameters(_OWORD *a1, double a2, double a3, double a4)
{
  float v4;
  __int128 v5;

  if (a1)
  {
    if (a2 <= a3)
      a2 = a3;
    v4 = sqrt(a2 * a2 + a4 * 0.25 * a4);
    *(_QWORD *)&v5 = 0;
    DWORD2(v5) = 0;
    *((float *)&v5 + 3) = v4;
    *a1 = v5;
  }
  return a1 != 0;
}

BOOL C3DConeGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float TopRadius;
  float BottomRadius;
  float Height;
  double v7;
  float v8;
  float v9;
  __int128 v10;

  TopRadius = C3DParametricGeometryGetTopRadius(a1);
  BottomRadius = C3DParametricGeometryGetBottomRadius(a1);
  Height = C3DParametricGeometryGetHeight(a1);
  if (a2)
  {
    v7 = Height;
    if (TopRadius <= BottomRadius)
      v8 = BottomRadius;
    else
      v8 = TopRadius;
    v9 = sqrt(v8 * v8 + v7 * 0.25 * v7);
    *(_QWORD *)&v10 = 0;
    DWORD2(v10) = 0;
    *((float *)&v10 + 3) = v9;
    *a2 = v10;
  }
  return a2 != 0;
}

void C3DConeGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  double TopRadius;
  double BottomRadius;
  double Height;
  double v15;
  _OWORD *v16;
  unsigned int v17;
  float v18;
  __double2 v19;
  float sinval;
  float cosval;
  unsigned int v22;
  double v23;
  unsigned int v24;
  double v25;
  float64x2_t v26;
  double v27;
  __int128 v28;
  __int128 v29;
  double v30;
  _OWORD *v31;
  unsigned int v32;
  float v33;
  __double2 v34;
  float v35;
  float v36;
  unsigned int v37;
  double v38;
  double v39;
  float64x2_t v40;
  double v41;
  __int128 v42;
  __int128 v43;

  TopRadius = C3DParametricGeometryGetTopRadius((uint64_t)a1);
  BottomRadius = C3DParametricGeometryGetBottomRadius((uint64_t)a1);
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v15 = TopRadius - BottomRadius;
      v16 = a5;
      do
      {
        v17 = 214013 * *a3 + 2531011;
        v18 = (double)HIWORD(v17) * 0.0000152590219 + (double)HIWORD(v17) * 0.0000152590219;
        v19 = __sincos_stret(v18 * 3.14159265);
        sinval = v19.__sinval;
        cosval = v19.__cosval;
        v22 = 214013 * v17 + 2531011;
        v23 = (double)HIWORD(v22) * 0.0000152590219;
        v24 = 214013 * v22 + 2531011;
        *a3 = v24;
        v25 = (BottomRadius + v23 * v15) * ((double)HIWORD(v24) * 0.0000152590219);
        v26.f64[0] = v25 * cosval;
        v26.f64[1] = Height * -0.5 + v23 * Height;
        v27 = v25 * sinval;
        *(float32x2_t *)&v28 = vcvt_f32_f64(v26);
        *(float *)&v27 = v27;
        DWORD2(v28) = LODWORD(v27);
        *a4 = v28;
        if (a5)
        {
          *(_QWORD *)&v29 = LODWORD(cosval);
          *((_QWORD *)&v29 + 1) = LODWORD(sinval);
          *v16 = v29;
        }
        ++v16;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v30 = TopRadius - BottomRadius;
    v31 = a5;
    do
    {
      v32 = 214013 * *a3 + 2531011;
      v33 = (double)HIWORD(v32) * 0.0000152590219 + (double)HIWORD(v32) * 0.0000152590219;
      v34 = __sincos_stret(v33 * 3.14159265);
      v35 = v34.__sinval;
      v36 = v34.__cosval;
      v37 = 214013 * v32 + 2531011;
      *a3 = v37;
      v38 = (double)HIWORD(v37) * 0.0000152590219;
      v39 = BottomRadius + v38 * v30;
      v40.f64[0] = v39 * v36;
      v40.f64[1] = Height * -0.5 + v38 * Height;
      v41 = v39 * v35;
      *(float32x2_t *)&v42 = vcvt_f32_f64(v40);
      *(float *)&v41 = v41;
      DWORD2(v42) = LODWORD(v41);
      *a4 = v42;
      if (a5)
      {
        *(_QWORD *)&v43 = LODWORD(v36);
        *((_QWORD *)&v43 + 1) = LODWORD(v35);
        *v31 = v43;
      }
      ++v31;
      ++a4;
      --a2;
    }
    while (a2);
  }
}

uint64_t C3DConeSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 5, 0.0);
  C3DParametricGeometrySetFloatValue(a1, 6, 0.5);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetIntValue(a1, 15, 48);
  return C3DParametricGeometrySetIntValue(a1, 12, 1);
}

uint64_t C3DConeHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 5;
  a2[1] = a1[75];
  a2[2] = a1[59];
  a2[3] = a1[60];
  a2[4] = a1[55];
  a2[5] = a1[71];
  a2[6] = a1[67];
  a2[7] = a1[77];
  return 32;
}

uint64_t C3DTubeCreateMesh(uint64_t a1)
{
  return C3DMeshCreateTube(*(char *)(a1 + 84), *(_DWORD *)(a1 + 68), *(int *)(a1 + 52), *(float *)(a1 + 28), *(float *)(a1 + 32), *(float *)(a1 + 4), *(float *)(a1 + 44));
}

float C3DTubeGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  float result;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *(float *)(a1 + 220);
    LODWORD(v5) = *(_DWORD *)(a1 + 248);
    *(float *)&v6 = -*(float *)&v5;
    *(float *)(a2 + 8) = -*(float *)&v5;
    *((float *)&v6 + 1) = v4 * -0.5;
    *(_QWORD *)a2 = v6;
    result = v4 * 0.5;
    *(_DWORD *)(a3 + 8) = v5;
    *((float *)&v5 + 1) = result;
    *(_QWORD *)a3 = v5;
  }
  return result;
}

BOOL C3DTubeGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float v2;
  __int128 v3;

  if (a2)
  {
    v2 = sqrt(*(float *)(a1 + 220) * 0.25 * *(float *)(a1 + 220) + *(float *)(a1 + 248) * *(float *)(a1 + 248));
    *(_QWORD *)&v3 = 0;
    DWORD2(v3) = 0;
    *((float *)&v3 + 3) = v2;
    *a2 = v3;
  }
  return a2 != 0;
}

void C3DTubeGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  double OuterRadius;
  double InnerRadius;
  double Height;
  double v15;
  _OWORD *v16;
  unsigned int v17;
  float v18;
  __double2 v19;
  float sinval;
  float cosval;
  unsigned int v22;
  double v23;
  double v24;
  float64x2_t v25;
  unsigned int v26;
  __int128 v27;
  _OWORD *v28;
  unsigned int v29;
  float v30;
  __double2 v31;
  float v32;
  float v33;
  unsigned int v34;
  double v35;
  double v36;
  float64x2_t v37;
  unsigned int v38;
  float v39;
  __int128 v40;

  OuterRadius = C3DParametricGeometryGetOuterRadius((uint64_t)a1);
  InnerRadius = C3DParametricGeometryGetInnerRadius((uint64_t)a1);
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v15 = OuterRadius - InnerRadius;
      v16 = a5;
      do
      {
        v17 = 214013 * *a3 + 2531011;
        v18 = (double)HIWORD(v17) * 0.0000152590219 + (double)HIWORD(v17) * 0.0000152590219;
        v19 = __sincos_stret(v18 * 3.14159265);
        sinval = v19.__sinval;
        cosval = v19.__cosval;
        v22 = 214013 * v17 + 2531011;
        v23 = (double)HIWORD(v22) * 0.0000152590219;
        v24 = InnerRadius + v15 * v23;
        v25.f64[0] = v24 * cosval;
        v26 = 214013 * v22 + 2531011;
        v25.f64[1] = Height * -0.5 + (double)HIWORD(v26) * 0.0000152590219 * Height;
        *a3 = v26;
        *(float32x2_t *)&v25.f64[0] = vcvt_f32_f64(v25);
        *(float *)&v24 = v24 * sinval;
        LODWORD(v25.f64[1]) = LODWORD(v24);
        *a4 = v25;
        if (a5)
        {
          if (v23 > 0.5)
          {
            cosval = -cosval;
            sinval = -sinval;
          }
          *(_QWORD *)&v27 = LODWORD(cosval);
          *((_QWORD *)&v27 + 1) = LODWORD(sinval);
          *v16 = v27;
        }
        ++v16;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v28 = a5;
    do
    {
      v29 = 214013 * *a3 + 2531011;
      v30 = (double)HIWORD(v29) * 0.0000152590219 + (double)HIWORD(v29) * 0.0000152590219;
      v31 = __sincos_stret(v30 * 3.14159265);
      v32 = v31.__sinval;
      v33 = v31.__cosval;
      v34 = 214013 * v29 + 2531011;
      v35 = (double)HIWORD(v34) * 0.0000152590219;
      if (v35 <= 0.5)
        v36 = OuterRadius;
      else
        v36 = InnerRadius;
      v37.f64[0] = v36 * v33;
      v38 = 214013 * v34 + 2531011;
      v37.f64[1] = Height * -0.5 + (double)HIWORD(v38) * 0.0000152590219 * Height;
      *a3 = v38;
      *(float32x2_t *)&v37.f64[0] = vcvt_f32_f64(v37);
      v39 = v36 * v32;
      *(float *)&v37.f64[1] = v39;
      *a4 = v37;
      if (a5)
      {
        if (v35 > 0.5)
        {
          v33 = -v33;
          v32 = -v32;
        }
        *(_QWORD *)&v40 = LODWORD(v33);
        *((_QWORD *)&v40 + 1) = LODWORD(v32);
        *v28 = v40;
      }
      ++v28;
      ++a4;
      --a2;
    }
    while (a2);
  }
}

float C3DParametricGeometryGetOuterRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 248);
}

float C3DParametricGeometryGetInnerRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 244);
}

uint64_t C3DTubeSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 7, 0.25);
  C3DParametricGeometrySetFloatValue(a1, 8, 0.5);
  C3DParametricGeometrySetFloatValue(a1, 1, 1.0);
  C3DParametricGeometrySetIntValue(a1, 15, 48);
  C3DParametricGeometrySetIntValue(a1, 12, 1);
  return C3DParametricGeometrySetFloatValue(a1, 21, 1.0);
}

uint64_t C3DTubeHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 6;
  a2[1] = a1[75];
  a2[2] = a1[61];
  a2[3] = a1[62];
  a2[4] = a1[55];
  a2[5] = a1[71];
  a2[6] = a1[67];
  a2[7] = a1[65];
  a2[8] = a1[77];
  return 36;
}

uint64_t C3DCapsuleCreateMesh(uint64_t a1)
{
  return C3DMeshCreateCapsule(*(char *)(a1 + 84), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 72), *(float *)(a1 + 16), *(float *)(a1 + 4));
}

float C3DCapsuleGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float result;
  BOOL v7;
  uint64_t v8;
  float Radius;

  Radius = C3DParametricGeometryGetRadius(a1);
  result = C3DParametricGeometryGetHeight(a1);
  if (a2)
    v7 = a3 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    *(float *)&v8 = -Radius;
    *(float *)(a2 + 8) = -Radius;
    *((float *)&v8 + 1) = result * -0.5;
    *(_QWORD *)a2 = v8;
    result = result * 0.5;
    *(float *)(a3 + 8) = Radius;
    *(_QWORD *)a3 = __PAIR64__(LODWORD(result), LODWORD(Radius));
  }
  return result;
}

BOOL C3DCapsuleGetBoundingSphereForCapsuleParameters(_OWORD *a1, double a2, double a3)
{
  float v3;
  __int128 v4;

  if (a1)
  {
    v3 = a3 * 0.5;
    *(_QWORD *)&v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL C3DCapsuleGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  float Height;
  __int128 v5;

  C3DParametricGeometryGetRadius(a1);
  Height = C3DParametricGeometryGetHeight(a1);
  if (a2)
  {
    *(_QWORD *)&v5 = 0;
    DWORD2(v5) = 0;
    *((float *)&v5 + 3) = Height * 0.5;
    *a2 = v5;
  }
  return a2 != 0;
}

void C3DCapsuleGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, float64x2_t *a4, float64x2_t *a5, int a6)
{
  float Radius;
  double v13;
  double Height;
  int8x16_t v15;
  double v16;
  double v17;
  float64x2_t *v18;
  unsigned int v19;
  float v20;
  __double2 v21;
  float sinval;
  float64x2_t v23;
  unsigned int v24;
  int8x16_t v25;
  unsigned int v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  float v30;
  float v31;
  float64x2_t v32;
  double v33;
  float v34;
  double v35;
  __double2 *v36;
  unsigned int v37;
  float v38;
  __double2 v39;
  __double2 v40;
  float v41;
  float64x2_t v42;
  unsigned int v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float v47;
  float v48;
  __double2 v49;
  int8x16_t v50;
  int8x16_t v51;

  Radius = C3DParametricGeometryGetRadius((uint64_t)a1);
  v13 = Radius;
  Height = C3DParametricGeometryGetHeight((uint64_t)a1);
  *(double *)v15.i64 = Height * 0.5;
  v16 = Height * 0.5 - Radius;
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v17 = -*(double *)v15.i64;
      *(float *)v15.i32 = v16;
      v50 = v15;
      v18 = a5;
      do
      {
        v19 = 214013 * *a3 + 2531011;
        v20 = (double)HIWORD(v19) * 0.0000152590219 + (double)HIWORD(v19) * 0.0000152590219;
        v21 = __sincos_stret(v20 * 3.14159265);
        sinval = v21.__sinval;
        *(float *)v23.f64 = v21.__cosval;
        v24 = 214013 * v19 + 2531011;
        *(float *)v25.i32 = v17 + (double)HIWORD(v24) * 0.0000152590219 * Height;
        v26 = 214013 * v24 + 2531011;
        *a3 = v26;
        v27 = (double)HIWORD(v26) * 0.0000152590219 * v13;
        *(double *)v28.i64 = fabsf(*(float *)v25.i32) - v16;
        if (*(double *)v28.i64 <= 0.0)
        {
          *(_QWORD *)&v32.f64[0] = LODWORD(v23.f64[0]);
          *(_QWORD *)&v32.f64[1] = LODWORD(sinval);
          *(float *)v23.f64 = v27 * *(float *)v23.f64;
          HIDWORD(v23.f64[0]) = v25.i32[0];
        }
        else
        {
          *(double *)v28.i64 = *(double *)v28.i64 / v13;
          *(float *)v28.i32 = *(double *)v28.i64;
          v29.i64[0] = 0x8000000080000000;
          v29.i64[1] = 0x8000000080000000;
          v30 = *(float *)vbslq_s8(v29, v28, v25).i32;
          v31 = sqrtf(1.0 - (float)(v30 * v30));
          *(float *)v23.f64 = v31 * *(float *)v23.f64;
          sinval = v31 * sinval;
          v32 = v23;
          *((float *)v32.f64 + 1) = v30;
          *(float *)&v32.f64[1] = sinval;
          v33 = v27 * *(float *)v23.f64;
          v23.f64[1] = *(float *)vbslq_s8(v29, v50, v25).i32 + v30 * v27;
          *(float32x2_t *)&v23.f64[0] = vcvt_f32_f64(v23);
        }
        v34 = v27 * sinval;
        *(float *)&v23.f64[1] = v34;
        *a4 = v23;
        if (a5)
          *v18 = v32;
        ++v18;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else if (a2 >= 1)
  {
    v35 = -*(double *)v15.i64;
    *(float *)v15.i32 = v16;
    v51 = v15;
    v36 = (__double2 *)a5;
    do
    {
      v37 = 214013 * *a3 + 2531011;
      v38 = (double)HIWORD(v37) * 0.0000152590219 + (double)HIWORD(v37) * 0.0000152590219;
      v40 = __sincos_stret(v38 * 3.14159265);
      v41 = v40.__sinval;
      *(float *)v42.f64 = v40.__cosval;
      v43 = 214013 * v37 + 2531011;
      *a3 = v43;
      *(float *)v44.i32 = v35 + (double)HIWORD(v43) * 0.0000152590219 * Height;
      *(double *)v45.i64 = fabsf(*(float *)v44.i32) - v16;
      if (*(double *)v45.i64 <= 0.0)
      {
        *(_QWORD *)&v49.__sinval = LODWORD(v42.f64[0]);
        *(_QWORD *)&v49.__cosval = LODWORD(v41);
        *(float *)v42.f64 = Radius * *(float *)v42.f64;
      }
      else
      {
        *(double *)v45.i64 = *(double *)v45.i64 / v13;
        *(float *)v45.i32 = *(double *)v45.i64;
        v46.i64[0] = 0x8000000080000000;
        v46.i64[1] = 0x8000000080000000;
        v47 = *(float *)vbslq_s8(v46, v45, v44).i32;
        v48 = sqrtf(1.0 - (float)(v47 * v47));
        *(float *)&v39.__sinval = v48 * *(float *)v42.f64;
        v41 = v48 * v41;
        *(float *)v42.f64 = Radius * (float)(v48 * *(float *)v42.f64);
        v49 = v39;
        *((float *)&v49.__sinval + 1) = v47;
        *(float *)&v49.__cosval = v41;
        *(float *)v44.i32 = *(float *)vbslq_s8(v46, v51, v44).i32 + v47 * v13;
      }
      HIDWORD(v42.f64[0]) = v44.i32[0];
      *(float *)&v42.f64[1] = Radius * v41;
      *a4 = v42;
      if (a5)
        *v36 = v49;
      ++v36;
      ++a4;
      --a2;
    }
    while (a2);
  }
}

uint64_t C3DCapsuleSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 4, 0.5);
  C3DParametricGeometrySetFloatValue(a1, 1, 2.0);
  C3DParametricGeometrySetIntValue(a1, 15, 48);
  C3DParametricGeometrySetIntValue(a1, 16, 24);
  return C3DParametricGeometrySetIntValue(a1, 12, 1);
}

uint64_t C3DCapsuleHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 7;
  a2[1] = a1[75];
  a2[2] = a1[58];
  a2[3] = a1[55];
  a2[4] = a1[71];
  a2[5] = a1[72];
  a2[6] = a1[67];
  a2[7] = a1[77];
  return 32;
}

uint64_t C3DTorusCreateMesh(uint64_t a1)
{
  return C3DMeshCreateTorus(*(char *)(a1 + 84), *(_DWORD *)(a1 + 76), *(_DWORD *)(a1 + 80), *(float *)(a1 + 36), *(float *)(a1 + 40), *(float *)(a1 + 44));
}

float32x4_t C3DTorusGetBoundingBoxForTorusParameters(uint64_t a1, uint64_t a2, float32x4_t result, float64_t a4)
{
  BOOL v4;
  float64x2_t v5;
  int32x2_t v6;
  float32x4_t v7;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5.f64[0] = *(double *)result.i64 + a4;
    v5.f64[1] = a4;
    v6 = (int32x2_t)vcvt_f32_f64(v5);
    v7 = vcvt_hight_f32_f64(v6, v5);
    result = vnegq_f32(v7);
    *(_DWORD *)(a1 + 8) = result.i32[2];
    *(_QWORD *)a1 = result.i64[0];
    *(_DWORD *)(a2 + 8) = v6.i32[0];
    *(_QWORD *)a2 = v7.i64[0];
  }
  return result;
}

float C3DTorusGetBoundingBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float result;

  if (a2)
    v3 = a3 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = *(float32x2_t *)(a1 + 252);
    v5 = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v4, 1), v4);
    v6.i64[0] = __PAIR64__(v4.u32[1], v5.u32[0]);
    *(float32x2_t *)&v6.u32[2] = v5;
    v7 = vnegq_f32(v6);
    *(_DWORD *)(a2 + 8) = v7.i32[2];
    result = vaddv_f32(v4);
    *(_QWORD *)a2 = v7.i64[0];
    *(float *)(a3 + 8) = result;
    *(_QWORD *)a3 = v6.i64[0];
  }
  return result;
}

BOOL C3DTorusGetBoundingSphereForTorusParameters(_OWORD *a1, double a2, double a3)
{
  float v3;
  __int128 v4;

  if (a1)
  {
    v3 = a2 + a3;
    *(_QWORD *)&v4 = 0;
    DWORD2(v4) = 0;
    *((float *)&v4 + 3) = v3;
    *a1 = v4;
  }
  return a1 != 0;
}

BOOL C3DTorusGetBoundingSphere(uint64_t a1, _OWORD *a2)
{
  __int128 v2;

  if (a2)
  {
    *(_QWORD *)&v2 = 0;
    DWORD2(v2) = 0;
    *((float *)&v2 + 3) = *(float *)(a1 + 256) + *(float *)(a1 + 252);
    *a2 = v2;
  }
  return a2 != 0;
}

void C3DTorusGeneratePointsCallBack(const void *a1, uint64_t a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, int a6)
{
  double RingRadius;
  __int128 v13;
  double v14;
  _OWORD *v15;
  unsigned int v16;
  float v17;
  __double2 v18;
  float sinval;
  float cosval;
  unsigned int v21;
  double v22;
  float v23;
  unsigned int v24;
  __double2 v25;
  float v26;
  __int128 v27;
  __int128 v28;
  float64x2_t *v29;
  unsigned int v30;
  float v31;
  __double2 v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  double v37;
  __double2 v38;
  float v39;
  float64x2_t v40;
  __int128 v41;
  __int128 v42;
  float v43;
  float v44;
  int v45;

  RingRadius = C3DParametricGeometryGetRingRadius((uint64_t)a1);
  *(float *)&v13 = C3DParametricGeometryGetPipeRadius((uint64_t)a1);
  v14 = *(float *)&v13;
  if (a6)
  {
    if (a6 == 2)
    {
      C3DGeometryGeneratePoints(a1, a2, a3, a4, a5, 2);
    }
    else if (a6 == 1 && a2 >= 1)
    {
      v15 = a5;
      do
      {
        v16 = 214013 * *a3 + 2531011;
        v17 = (double)HIWORD(v16) * 0.0000152590219 + (double)HIWORD(v16) * 0.0000152590219;
        v18 = __sincos_stret(v17 * 3.14159265);
        sinval = v18.__sinval;
        cosval = v18.__cosval;
        v21 = 214013 * v16 + 2531011;
        v22 = sqrt((double)HIWORD(v21) * 0.0000152590219) * v14;
        v23 = RingRadius + cosval * v22;
        *(float *)&v22 = v22 * sinval;
        v43 = sinval;
        v45 = LODWORD(v22);
        v24 = 214013 * v21 + 2531011;
        *a3 = v24;
        *(float *)&v22 = (double)HIWORD(v24) * 0.0000152590219 + (double)HIWORD(v24) * 0.0000152590219;
        v25 = __sincos_stret(*(float *)&v22 * 3.14159265);
        v26 = v25.__sinval;
        *(float *)&v27 = v25.__cosval;
        *(float *)&v28 = v23 * *(float *)&v27;
        DWORD1(v28) = v45;
        *((float *)&v28 + 2) = v23 * v26;
        *a4 = v28;
        if (a5)
        {
          *(float *)&v27 = cosval * *(float *)&v27;
          *((float *)&v27 + 1) = v43;
          *((float *)&v27 + 2) = cosval * v26;
          *v15 = v27;
        }
        ++v15;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
  else
  {
    v42 = v13;
    if (a2 >= 1)
    {
      v29 = (float64x2_t *)a5;
      do
      {
        v30 = 214013 * *a3 + 2531011;
        v31 = (double)HIWORD(v30) * 0.0000152590219 + (double)HIWORD(v30) * 0.0000152590219;
        v32 = __sincos_stret(v31 * 3.14159265);
        v33 = 214013 * v30 + 2531011;
        v34 = v32.__cosval;
        v35 = RingRadius + v34 * v14;
        v44 = v35;
        *a3 = v33;
        v36 = (double)HIWORD(v33) * 0.0000152590219 + (double)HIWORD(v33) * 0.0000152590219;
        v38 = __sincos_stret(v36 * 3.14159265);
        v37 = v38.__cosval;
        v39 = v38.__sinval;
        v40.f64[1] = v32.__sinval;
        *(float32x2_t *)&v40.f64[0] = vcvt_f32_f64(v40);
        HIDWORD(v41) = HIDWORD(v42);
        *(float32x2_t *)&v41 = vmul_f32((float32x2_t)__PAIR64__(v42, LODWORD(v44)), *(float32x2_t *)&v40.f64[0]);
        *((float *)&v41 + 2) = v39 * v44;
        *a4 = v41;
        if (a5)
        {
          *(float *)v40.f64 = v34 * *(float *)v40.f64;
          *(float *)&v40.f64[1] = v34 * v39;
          *v29 = v40;
        }
        ++v29;
        ++a4;
        --a2;
      }
      while (a2);
    }
  }
}

float C3DParametricGeometryGetRingRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 252);
}

float C3DParametricGeometryGetPipeRadius(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 256);
}

uint64_t C3DTorusSetupDefaultParameters(uint64_t a1)
{
  C3DParametricGeometrySetFloatValue(a1, 9, 0.5);
  C3DParametricGeometrySetFloatValue(a1, 10, 0.25);
  C3DParametricGeometrySetIntValue(a1, 17, 48);
  C3DParametricGeometrySetIntValue(a1, 18, 24);
  return C3DParametricGeometrySetFloatValue(a1, 21, 1.0);
}

uint64_t C3DTorusHashParameters(_DWORD *a1, _DWORD *a2)
{
  *a2 = 8;
  a2[1] = a1[75];
  a2[2] = a1[63];
  a2[3] = a1[64];
  a2[4] = a1[73];
  a2[5] = a1[74];
  a2[6] = a1[65];
  a2[7] = a1[77];
  return 32;
}

uint64_t C3DParametricGeometryCreate(__int128 *a1, __int128 *a2)
{
  return _C3DParametricGeometryCreate(a1, a2, 1);
}

uint64_t _C3DParametricGeometryCreate(__int128 *a1, __int128 *a2, int a3)
{
  uint64_t Instance;
  double v7;
  void *Default;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (C3DParametricGeometryGetTypeID_onceToken != -1)
    dispatch_once(&C3DParametricGeometryGetTypeID_onceToken, &__block_literal_global_92);
  Instance = C3DTypeCreateInstance_(C3DParametricGeometryGetTypeID_typeID, 0x160uLL);
  v7 = C3DGeometryInit(Instance);
  if (a3)
  {
    Default = (void *)C3DMaterialCreateDefault(v7);
    C3DGeometryAppendMaterial(Instance, Default);
    CFRelease(Default);
  }
  *(_QWORD *)(Instance + 120) = kC3DParametricGeometryValidationCallBacks;
  v9 = (_OWORD *)(Instance + 312);
  if (a2)
  {
    v10 = *a2;
    v11 = a2[2];
    *(_OWORD *)(Instance + 328) = a2[1];
    *(_OWORD *)(Instance + 344) = v11;
    *v9 = v10;
    C3DParametricGeometrySetIntValue(Instance, 20, 0);
    if (!a1)
    {
LABEL_12:
      (*(void (**)(uint64_t))(Instance + 336))(Instance);
      return Instance;
    }
  }
  else
  {
    *(_OWORD *)(Instance + 328) = 0u;
    *(_OWORD *)(Instance + 344) = 0u;
    *v9 = 0u;
    C3DParametricGeometrySetIntValue(Instance, 20, 0);
    if (!a1)
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
        _C3DParametricGeometryCreate_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
      goto LABEL_12;
    }
  }
  v12 = *a1;
  *(_OWORD *)(Instance + 232) = a1[1];
  *(_OWORD *)(Instance + 216) = v12;
  v13 = a1[2];
  v14 = a1[3];
  v15 = a1[5];
  *(_OWORD *)(Instance + 280) = a1[4];
  *(_OWORD *)(Instance + 296) = v15;
  *(_OWORD *)(Instance + 264) = v14;
  *(_OWORD *)(Instance + 248) = v13;
  return Instance;
}

void C3DParametricGeometryCopy(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t *v10;
  const void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  C3DGeometryCopy(a1, a2);
  if (*(_QWORD *)(a1 + 312))
  {
    v4 = *(_OWORD *)(a1 + 312);
    v5 = *(_OWORD *)(a1 + 344);
    *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 328);
    *(_OWORD *)(a2 + 344) = v5;
    *(_OWORD *)(a2 + 312) = v4;
  }
  v6 = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 216) = v6;
  v7 = *(_OWORD *)(a1 + 248);
  v8 = *(_OWORD *)(a1 + 264);
  v9 = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 280) = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(a2 + 296) = v9;
  *(_OWORD *)(a2 + 264) = v8;
  *(_OWORD *)(a2 + 248) = v7;
  os_unfair_lock_lock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
  v10 = *(uint64_t **)(a1 + 64);
  v11 = *(const void **)(a1 + 360);
  if ((v10 != 0) == (v11 == 0))
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      C3DParametricGeometryCopy_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
      if (!v10)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  if (v10)
  {
LABEL_6:
    C3DGeometrySetMesh(a2, v10);
    v20 = (void *)CFRetain(v11);
    *(_QWORD *)(a2 + 360) = v20;
    _C3DParametricGeometryCacheIncrRetainCountForHash_not_thread_safe(v20);
  }
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
}

void _C3DParametricGeometryCacheIncrRetainCountForHash_not_thread_safe(void *key)
{
  char *Value;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  Value = (char *)CFDictionaryGetValue((CFDictionaryRef)_C3DParametricGeometryCacheRetainCounts, key);
  if (!Value)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      _C3DParametricGeometryCacheIncrRetainCountForHash_not_thread_safe_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  CFDictionarySetValue((CFMutableDictionaryRef)_C3DParametricGeometryCacheRetainCounts, key, Value + 1);
}

uint64_t _C3DParametricGeometryFloatPtr(uint64_t a1, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = a1 + 216;
      break;
    case 1:
      result = a1 + 220;
      break;
    case 2:
      result = a1 + 224;
      break;
    case 3:
      result = a1 + 228;
      break;
    case 4:
      result = a1 + 232;
      break;
    case 5:
      result = a1 + 236;
      break;
    case 6:
      result = a1 + 240;
      break;
    case 7:
      result = a1 + 244;
      break;
    case 8:
      result = a1 + 248;
      break;
    case 9:
      result = a1 + 252;
      break;
    case 10:
      result = a1 + 256;
      break;
    case 21:
      result = a1 + 260;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t C3DParametricGeometrySetFloatValue(uint64_t a1, int a2, double a3)
{
  uint64_t result;
  float *v6;
  float v7;

  result = _C3DParametricGeometryFloatPtr(a1, a2);
  if (result)
  {
    v6 = (float *)result;
    if (*(float *)result == a3)
    {
      return 0;
    }
    else
    {
      __Invalidate(a1);
      v7 = a3;
      *v6 = v7;
      return 1;
    }
  }
  return result;
}

uint64_t _C3DParametricGeometryIntPtr(uint64_t a1, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 11:
      result = a1 + 264;
      break;
    case 12:
      result = a1 + 268;
      break;
    case 13:
      result = a1 + 272;
      break;
    case 14:
      result = a1 + 276;
      break;
    case 15:
      result = a1 + 284;
      break;
    case 16:
      result = a1 + 288;
      break;
    case 17:
      result = a1 + 292;
      break;
    case 18:
      result = a1 + 296;
      break;
    case 20:
      result = a1 + 300;
      break;
    case 22:
      result = a1 + 304;
      break;
    case 23:
      result = a1 + 280;
      break;
    default:
      return result;
  }
  return result;
}

int *C3DParametricGeometryGetIntValue(uint64_t a1, int a2)
{
  int *result;

  result = (int *)_C3DParametricGeometryIntPtr(a1, a2);
  if (result)
    return (int *)*result;
  return result;
}

uint64_t C3DParametricGeometrySetIntValue(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  _DWORD *v6;

  result = _C3DParametricGeometryIntPtr(a1, a2);
  if (result)
  {
    v6 = (_DWORD *)result;
    if (*(_DWORD *)result == a3)
    {
      return 0;
    }
    else
    {
      __Invalidate(a1);
      *v6 = a3;
      return 1;
    }
  }
  return result;
}

BOOL C3DParametricGeometryIsHemispheric(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryIsHemispheric_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 304) == 2;
}

void C3DParametricGeometrySetHemispheric(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryIsHemispheric_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  *(_DWORD *)(a1 + 304) = 2;
  __Invalidate(a1);
}

BOOL C3DParametricGeometryIsGeodesic(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryIsHemispheric_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 304) == 1;
}

void C3DParametricGeometrySetGeodesic(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryIsHemispheric_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 304) = a2;
  __Invalidate(a1);
}

void C3DParametricGeometrySetChamferRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 228) != a2)
  {
    *(float *)(a1 + 228) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetChamferSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 276);
}

void C3DParametricGeometrySetChamferSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 276) != a2)
  {
    *(_DWORD *)(a1 + 276) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetHeight(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 220) != a2)
  {
    *(float *)(a1 + 220) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetHeightSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 268);
}

void C3DParametricGeometrySetHeightSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 268) != a2)
  {
    *(_DWORD *)(a1 + 268) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetLength(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 224) != a2)
  {
    *(float *)(a1 + 224) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetLengthSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 272);
}

void C3DParametricGeometrySetLengthSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 272) != a2)
  {
    *(_DWORD *)(a1 + 272) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetPrimitiveType(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(char *)(a1 + 300);
}

void C3DParametricGeometrySetPrimitiveType(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 300) != a2)
  {
    *(_DWORD *)(a1 + 300) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetWidth(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 216) != a2)
  {
    *(float *)(a1 + 216) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetWidthSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 264);
}

void C3DParametricGeometrySetWidthSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 264) != a2)
  {
    *(_DWORD *)(a1 + 264) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetCapRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 232) != a2)
  {
    *(float *)(a1 + 232) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetCapSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 288);
}

void C3DParametricGeometrySetCapSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a2 & ~(a2 >> 31);
  if (v12 != *(_DWORD *)(a1 + 288))
  {
    *(_DWORD *)(a1 + 288) = v12;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetRadialSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 284);
}

void C3DParametricGeometrySetRadialSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 284) != a2)
  {
    *(_DWORD *)(a1 + 284) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetBottomRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 240) != a2)
  {
    *(float *)(a1 + 240) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetTopRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 236) != a2)
  {
    *(float *)(a1 + 236) = a2;
    __Invalidate(a1);
  }
}

float C3DParametricGeometryGetRadialSpan(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 260);
}

void C3DParametricGeometrySetRadialSpan(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 260) != a2)
  {
    *(float *)(a1 + 260) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 280);
}

void C3DParametricGeometrySetSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 280) != a2)
  {
    *(_DWORD *)(a1 + 280) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetPipeRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 256) != a2)
  {
    *(float *)(a1 + 256) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetPipeSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 296);
}

void C3DParametricGeometrySetPipeSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 296) != a2)
  {
    *(_DWORD *)(a1 + 296) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetRingRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 252) != a2)
  {
    *(float *)(a1 + 252) = a2;
    __Invalidate(a1);
  }
}

uint64_t C3DParametricGeometryGetRingSegmentCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 292);
}

void C3DParametricGeometrySetRingSegmentCount(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 292) != a2)
  {
    *(_DWORD *)(a1 + 292) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetInnerRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 244) != a2)
  {
    *(float *)(a1 + 244) = a2;
    __Invalidate(a1);
  }
}

void C3DParametricGeometrySetOuterRadius(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DParametricGeometryGetChamferRadius_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (*(float *)(a1 + 248) != a2)
  {
    *(float *)(a1 + 248) = a2;
    __Invalidate(a1);
  }
}

void _C3DParametricGeometryCreateCacheIfNeeded_not_thread_safe()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;

  if (!_C3DParametricGeometryMeshCache)
  {
    v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    _C3DParametricGeometryMeshCache = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    _C3DParametricGeometryCacheRetainCounts = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, 0);
  }
}

void _C3DParametricGeometryReleaseCachedMesh_not_thread_safe(uint64_t a1)
{
  const void *v2;
  char *Value;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  _C3DParametricGeometryCreateCacheIfNeeded_not_thread_safe();
  v2 = *(const void **)(a1 + 360);
  if (v2)
  {
    Value = (char *)CFDictionaryGetValue((CFDictionaryRef)_C3DParametricGeometryCacheRetainCounts, *(const void **)(a1 + 360));
    v4 = Value;
    if (Value)
    {
      if (Value == (char *)1)
      {
        CFDictionaryRemoveValue((CFMutableDictionaryRef)_C3DParametricGeometryMeshCache, v2);
        CFDictionaryRemoveValue((CFMutableDictionaryRef)_C3DParametricGeometryCacheRetainCounts, v2);
LABEL_8:
        CFRelease(*(CFTypeRef *)(a1 + 360));
        *(_QWORD *)(a1 + 360) = 0;
        return;
      }
    }
    else
    {
      v5 = scn_default_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
        _C3DParametricGeometryReleaseCachedMesh_not_thread_safe_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    CFDictionarySetValue((CFMutableDictionaryRef)_C3DParametricGeometryCacheRetainCounts, v2, v4 - 1);
    goto LABEL_8;
  }
}

id _C3DParametricGeometryCFFinalize(__C3DGeometry *a1)
{
  if (a1[1].var10.var3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
    _C3DParametricGeometryReleaseCachedMesh_not_thread_safe((uint64_t)a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&_C3DParametricGeometryCacheLock);
  }
  return _C3DGeometryCFFinalize(a1);
}

__CFString *_C3DParametricGeometryCFCopyDebugDescription(const void *a1)
{
  const __CFString *v2;
  CFTypeID v3;
  CFStringRef v4;
  __CFString *Mutable;
  uint64_t Name;
  uint64_t Mesh;
  uint64_t v8;
  const __CFArray *MaterialAtIndex;
  _OWORD __s1[3];

  memset(__s1, 0, sizeof(__s1));
  C3DParametricGeometryGetCallbacks((uint64_t)a1, (uint64_t)__s1);
  if (!memcmp(__s1, &kC3DBoxCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Box");
  }
  else if (!memcmp(__s1, kC3DPyramidCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Pyramid");
  }
  else if (!memcmp(__s1, kC3DCylinderCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Cylinder");
  }
  else if (!memcmp(__s1, kC3DConeCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Cone");
  }
  else if (!memcmp(__s1, kC3DTubeCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Tube");
  }
  else if (!memcmp(__s1, kC3DCapsuleCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Capsule");
  }
  else if (!memcmp(__s1, kC3DTorusCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Torus");
  }
  else if (!memcmp(__s1, kC3DSphereCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Sphere");
  }
  else if (!memcmp(__s1, kC3DPlaneCallBacks, 0x30uLL))
  {
    v2 = CFSTR("Plane");
  }
  else
  {
    v2 = CFSTR("Unknown");
  }
  v3 = CFGetTypeID(a1);
  v4 = CFCopyTypeIDDescription(v3);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DGeometryGetName((uint64_t)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<%@<%@>:%p \"%@\"\n"), v4, v2, a1, Name);
  Mesh = C3DGeometryGetMesh((uint64_t)a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("  mesh: %@\n"), Mesh);
  if ((uint64_t)C3DGeometryGetMaterialsCount((uint64_t)a1) >= 1)
  {
    v8 = 0;
    do
    {
      MaterialAtIndex = C3DGeometryGetMaterialAtIndex((uint64_t)a1, v8);
      CFStringAppendFormat(Mutable, 0, CFSTR("  mat%d: %@\n"), v8++, MaterialAtIndex);
    }
    while (v8 < (uint64_t)C3DGeometryGetMaterialsCount((uint64_t)a1));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  CFRelease(v4);
  return Mutable;
}

uint64_t _C3DParametricGeometryGetBoundingBox(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t *v4;
  uint64_t (*v6)(void);

  v4 = *(float32x4_t **)(a1 + 104);
  if (v4)
  {
    *a3 = vsubq_f32(*v4, v4[1]);
    *a4 = vaddq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 104), *(float32x4_t *)(*(_QWORD *)(a1 + 104) + 16));
    return 1;
  }
  else
  {
    v6 = *(uint64_t (**)(void))(a1 + 320);
    if (v6)
      return v6();
    else
      return 0;
  }
}

uint64_t _C3DParametricGeometryGetBoundingSphere(uint64_t a1)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(a1 + 328);
  if (v1)
    return v1();
  else
    return 0;
}

void _C3DParametricGeometrySetValue(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);
  __Invalidate(a1);
}

uint64_t _C3DParametricGeometryCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCopy_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = _C3DParametricGeometryCreate((__int128 *)(a1 + 216), 0, 0);
  C3DParametricGeometryCopy(a1, v10);
  return v10;
}

uint64_t C3DGLSLProfileBindPassInputs(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  float32x2_t *RendererContextGL;
  uint64_t UniformIndex;
  void *v19;
  uint64_t UniformLocationOfSymbolNamed;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  float32x4_t *Matrix4x4;
  uint64_t v27;
  float32x4_t *v28;
  _QWORD *v29;
  int v30;
  uint64_t OutputDepthTexture;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  const void *v36;
  GLuint v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  uint64_t UserInfo;
  id *RootNode;
  id *ObjCWrapper;
  GLuint v46;
  int v47;
  int v48;
  unsigned __int16 v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  float32x4_t *v53;
  uint64_t v54;
  const void *TextureSampler;
  uint64_t Image;
  void *v57;
  uint64_t ResourceManager;
  float32x2_t *ImageResident;
  NSObject *v60;
  uint64_t v61;
  uint64_t ProgramID;
  void (*v63)(uint64_t, uint64_t, uint64_t, id *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  simd_float4x4 *v70;
  uint64_t v71;
  float32x4_t *v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  simd_float4x4 *p_value;
  float32x4_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  simd_float4x4 *v81;
  uint64_t FXContext;
  uint64_t OutputFramebuffer;
  float32x2_t v84;
  double SystemTime;
  double v86;
  float v87;
  __n128 Viewport;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  float32x2_t *v94;
  uint64_t RendererElementState;
  int v96;
  unsigned int x;
  simd_float4x4 value;
  simd_float4x4 v100;
  simd_float4x4 buf;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  RendererElementState = C3DEngineContextGetRendererElementState((uint64_t)a1);
  x = C3DRendererElementStateGetActiveTextureUnit(RendererElementState);
  if (*(uint64_t *)(a3 + 520) >= 1)
  {
    v93 = a4;
    v9 = 0;
    __asm { FMOV            V8.2S, #1.0 }
    v96 = a5;
    v15 = a2;
    while (1)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a3 + 512) + 8 * v9);
      RendererContextGL = (float32x2_t *)C3DEngineContextGetRendererContextGL((uint64_t)a1);
      if (C3DSubdivisionGetPathTypeSupportsSingleCrease(*(_DWORD *)(v16 + 32)))
        goto LABEL_103;
      UniformIndex = *(_QWORD *)(v16 + 40);
      if (UniformIndex == -2)
        goto LABEL_103;
      if (UniformIndex == -1)
      {
        v19 = *(void **)(v16 + 48);
        if (!v19)
          goto LABEL_68;
        UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v15, v19);
        UniformIndex = C3DFXGLSLProgramObjectGetUniformIndex(v15, UniformLocationOfSymbolNamed);
      }
      else
      {
        UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocation(v15, *(_QWORD *)(v16 + 40));
      }
      if (UniformLocationOfSymbolNamed == -1)
        goto LABEL_68;
      if (a5)
      {
        v21 = *(void **)(v16 + 48);
        if (v21)
        {
          if (*(_QWORD *)(v16 + 40) != -1)
          {
            v22 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v15, v21);
            if (v22 != UniformLocationOfSymbolNamed)
            {
              if (v22 == -1)
              {
                v60 = scn_default_log();
                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  v90 = *(_QWORD *)(v16 + 48);
                  buf.columns[0].i32[0] = 138412290;
                  *(uint64_t *)((char *)buf.columns[0].i64 + 4) = v90;
                  _os_log_error_impl(&dword_1DCCB8000, v60, OS_LOG_TYPE_ERROR, "Error: wrong location returned for input named %@", (uint8_t *)&buf, 0xCu);
                }
LABEL_68:
                *(_QWORD *)(v16 + 40) = -2;
                goto LABEL_103;
              }
              v33 = C3DFXGLSLProgramObjectGetUniformIndex(v15, UniformLocationOfSymbolNamed);
              *(_QWORD *)(v16 + 40) = v33;
              v34 = scn_default_log();
              v35 = v34;
              if (v33 == -1)
              {
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  v65 = *(_QWORD *)(v16 + 48);
                  buf.columns[0].i32[0] = 138412290;
                  *(uint64_t *)((char *)buf.columns[0].i64 + 4) = v65;
                  v41 = v35;
                  v42 = "Error: can't find input named %@";
LABEL_45:
                  _os_log_error_impl(&dword_1DCCB8000, v41, OS_LOG_TYPE_ERROR, v42, (uint8_t *)&buf, 0xCu);
                }
LABEL_102:
                v15 = a2;
                goto LABEL_103;
              }
              v15 = a2;
              if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                buf.columns[0].i16[0] = 0;
                _os_log_impl(&dword_1DCCB8000, v35, OS_LOG_TYPE_DEFAULT, "Warning: the same program is shared by two passes but indexed in a different manner", (uint8_t *)&buf, 2u);
              }
            }
          }
        }
      }
      v23 = *(_DWORD *)(v16 + 16);
      if (*(_DWORD *)(v16 + 32))
        break;
      if (v23 == 3)
      {
        UserInfo = C3DEngineContextGetUserInfo((uint64_t)a1);
        RootNode = (id *)C3DFXPassGetRootNode(a3);
        if (RootNode)
          ObjCWrapper = C3DEntityGetObjCWrapper(RootNode);
        else
          ObjCWrapper = 0;
        v61 = *(_QWORD *)(v16 + 96);
        ProgramID = C3DFXGLSLProgramObjectGetProgramID(a2);
        v63 = *(void (**)(uint64_t, uint64_t, uint64_t, id *, uint64_t))(v61 + 16);
        v64 = v61;
        v15 = a2;
        v63(v64, ProgramID, UniformLocationOfSymbolNamed, ObjCWrapper, UserInfo);
LABEL_71:
        a5 = v96;
        goto LABEL_103;
      }
      v24 = &qword_1F03C6000;
      if (v23 == 2)
      {
        if (a5)
        {
          v46 = C3DFXGLSLProgramObjectGetProgramID(a2);
          v47 = C3DGLSLGetUniformType((int)RendererContextGL, v46, UniformLocationOfSymbolNamed);
          v48 = *(unsigned __int16 *)(v16 + 20);
          if (v47 == 13)
            v49 = 10;
          else
            v49 = v47;
          if (v48 == 13)
            v48 = 10;
          if (v48 != v49)
          {
            v50 = scn_default_log();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v91 = *(_QWORD *)(v16 + 56);
              buf.columns[0].i32[0] = 138412290;
              *(uint64_t *)((char *)buf.columns[0].i64 + 4) = v91;
              _os_log_error_impl(&dword_1DCCB8000, v50, OS_LOG_TYPE_ERROR, "Error: declared type doesn't match the uniform named %@", (uint8_t *)&buf, 0xCu);
            }
          }
        }
        v51 = **(_QWORD **)(v93 + 96);
        if (v51)
        {
          v52 = *(unsigned __int16 *)(v16 + 20);
          v53 = (float32x4_t *)(v51 + *(_QWORD *)(v16 + 88));
          if (v52 == 5)
          {
            v54 = v53->i64[0];
            if (!v53->i64[0] || (TextureSampler = (const void *)C3DFXSamplerGetTextureSampler(v53->i64[0])) == 0)
            {
              TextureSampler = *(const void **)(v16 + 72);
              if (!TextureSampler)
                TextureSampler = (const void *)C3DTextureSamplerBilinearNoAnisotropy();
              if (!v54)
                goto LABEL_100;
            }
            Image = C3DFXSamplerGetImage(v54);
            if (Image)
            {
              v57 = (void *)Image;
              ResourceManager = C3DEngineContextGetResourceManager((uint64_t)a1);
              ImageResident = C3DResourceManagerMakeImageResident(ResourceManager, v57, TextureSampler, RendererContextGL);
            }
            else
            {
LABEL_100:
              ImageResident = 0;
            }
            a5 = v96;
            C3DRendererContextBindTexture((uint64_t)RendererContextGL, ImageResident, (uint64_t)TextureSampler, 0, x);
            C3DRendererContextSetIntUniformAtLocation((uint64_t)RendererContextGL, UniformLocationOfSymbolNamed, x++);
          }
          else
          {
            C3DRendererContextSetTypedBytesUniformAtLocation((uint64_t)RendererContextGL, UniformLocationOfSymbolNamed, (__int16)v52, v53, *(_DWORD *)(v16 + 24));
          }
        }
        goto LABEL_102;
      }
      if (v23 == 1)
        goto LABEL_21;
LABEL_103:
      if (++v9 >= *(_QWORD *)(a3 + 520))
        return C3DRendererElementStateSetActiveTextureUnit(RendererElementState, x);
    }
    v24 = &qword_1F03C6000;
    if (v23 != 1)
    {
      memset(&buf, 0, sizeof(buf));
      memset(&v100, 0, sizeof(v100));
      v25 = C3DEngineContextGetRendererContextGL((uint64_t)a1);
      switch(*(_DWORD *)(v16 + 32))
      {
        case 6:
          memset(&value, 0, sizeof(value));
          Matrix4x4 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
          v27 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
          C3DMatrix4x4Mult(v27, Matrix4x4, &buf);
          v28 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 0);
          C3DMatrix4x4Mult((uint64_t)&buf, v28, &value);
          goto LABEL_84;
        case 7:
          v66 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
          v67 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
          C3DMatrix4x4Mult(v67, v66, &buf);
          goto LABEL_86;
        case 8:
          v68 = (uint64_t)a1;
          v69 = 2;
          goto LABEL_81;
        case 9:
          v68 = (uint64_t)a1;
          v69 = 1;
          goto LABEL_81;
        case 0xA:
          v68 = (uint64_t)a1;
          v69 = 0;
LABEL_81:
          v70 = (simd_float4x4 *)C3DEngineContextGetMatrix4x4(v68, v69);
          v71 = *(_QWORD *)(v16 + 24);
          goto LABEL_94;
        case 0xB:
          memset(&value, 0, sizeof(value));
          C3DEngineContextComputeNormalMatrix(a1, &value);
          goto LABEL_93;
        case 0xC:
          memset(&value, 0, sizeof(value));
          v72 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
          v73 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
          C3DMatrix4x4Mult(v73, v72, &buf);
          v74 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 0);
          C3DMatrix4x4Mult((uint64_t)&buf, v74, &value);
          C3DMatrix4x4Invert(&value, &value);
LABEL_84:
          v75 = *(_QWORD *)(v16 + 24);
          p_value = &value;
          goto LABEL_87;
        case 0xD:
          v77 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)a1, 1);
          v78 = C3DEngineContextGetMatrix4x4((uint64_t)a1, 2);
          C3DMatrix4x4Mult(v78, v77, &buf);
          C3DMatrix4x4Invert(&buf, &buf);
LABEL_86:
          v75 = *(_QWORD *)(v16 + 24);
          p_value = &buf;
LABEL_87:
          C3DRendererContextSetMatrix4x4UniformAtLocation(v25, UniformLocationOfSymbolNamed, (GLfloat *)p_value, v75);
          goto LABEL_102;
        case 0xE:
          v79 = (uint64_t)a1;
          v80 = 2;
          goto LABEL_91;
        case 0xF:
          v79 = (uint64_t)a1;
          v80 = 1;
          goto LABEL_91;
        case 0x10:
          v79 = (uint64_t)a1;
          v80 = 0;
LABEL_91:
          v81 = (simd_float4x4 *)C3DEngineContextGetMatrix4x4(v79, v80);
          C3DMatrix4x4Invert(v81, &v100);
          v71 = *(_QWORD *)(v16 + 24);
          v70 = &v100;
          goto LABEL_94;
        case 0x11:
          memset(&value, 0, sizeof(value));
          C3DEngineContextComputeNormalMatrix(a1, &value);
          C3DMatrix4x4Invert(&value, &value);
LABEL_93:
          v71 = *(_QWORD *)(v16 + 24);
          v70 = &value;
LABEL_94:
          C3DRendererContextSetMatrix4x4UniformAtLocation(v25, UniformLocationOfSymbolNamed, (GLfloat *)v70, v71);
          break;
        case 0x12:
          FXContext = C3DEngineContextGetFXContext((uint64_t)a1);
          OutputFramebuffer = C3DFXContextGetOutputFramebuffer(FXContext);
          if (OutputFramebuffer)
          {
            *(double *)&v84 = C3DFramebufferGetSize(OutputFramebuffer);
          }
          else
          {
            Viewport = C3DEngineContextGetViewport((__n128 *)a1);
            v84 = (float32x2_t)vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL).u64[0];
          }
          *(float32x2_t *)value.columns[0].f32 = vdiv_f32(_D8, vmaxnm_f32(v84, _D8));
          C3DRendererContextSetVector2UniformAtLocation(v25, UniformLocationOfSymbolNamed, (GLfloat *)&value, *(_QWORD *)(v16 + 24));
          break;
        case 0x13:
          SystemTime = C3DEngineContextGetSystemTime((uint64_t)a1);
          v86 = *(double *)&_bindSemanticUniform_t0;
          if (*(double *)&_bindSemanticUniform_t0 == 0.0)
          {
            _bindSemanticUniform_t0 = *(_QWORD *)&SystemTime;
            v86 = SystemTime;
          }
          v87 = SystemTime - v86;
          value.columns[0].f32[0] = v87;
          C3DRendererContextSetFloatUniformAtLocation(v25, UniformLocationOfSymbolNamed, (GLfloat *)&value, *(_QWORD *)(v16 + 24));
          break;
        default:
          goto LABEL_103;
      }
      goto LABEL_103;
    }
LABEL_21:
    v29 = (_QWORD *)C3DEngineContextGetFXContext((uint64_t)a1);
    if ((*(_BYTE *)(v16 + 80) & 1) != 0)
    {
      v32 = v29[16];
      if (v32)
        goto LABEL_33;
    }
    else
    {
      if ((*(_BYTE *)(v16 + 80) & 2) == 0)
      {
        v30 = *(_DWORD *)(v16 + 32);
        if (v30 == 28)
        {
          OutputDepthTexture = C3DFXContextGetOutputDepthTexture((uint64_t)v29, (__n128 *)a1);
        }
        else if (v30 == 20)
        {
          OutputDepthTexture = C3DFXContextGetOutputColorTexture((uint64_t)v29, (__n128 *)a1);
        }
        else
        {
          OutputDepthTexture = (uint64_t)C3DFramebufferRegistryGetTextureWithName(v29[30], *(const __CFString **)(v16 + 56));
        }
LABEL_34:
        if (OutputDepthTexture)
        {
          v94 = (float32x2_t *)OutputDepthTexture;
          v36 = *(const void **)(v16 + 72);
          if (!v36)
          {
            v36 = (const void *)C3DTextureSamplerBilinearNoAnisotropy();
            *(_QWORD *)(v16 + 72) = CFRetain(v36);
          }
          if (v96)
          {
            v37 = C3DFXGLSLProgramObjectGetProgramID(a2);
            if (C3DGLSLGetUniformType((int)RendererContextGL, v37, UniformLocationOfSymbolNamed) != 5)
            {
              v38 = scn_default_log();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              {
                v89 = *(_QWORD *)(v16 + 56);
                buf.columns[0].i32[0] = 138412290;
                *(uint64_t *)((char *)buf.columns[0].i64 + 4) = v89;
                _os_log_error_impl(&dword_1DCCB8000, v38, OS_LOG_TYPE_ERROR, "Error: declared type doesn't match the uniform named %@", (uint8_t *)&buf, 0xCu);
              }
            }
          }
          C3DRendererContextSetIntUniformAtLocation((uint64_t)RendererContextGL, UniformLocationOfSymbolNamed, x);
          C3DFXGLSLProgramObjectSetUniformValueAtIndex(a2, UniformIndex, x);
          C3DRendererContextBindTexture((uint64_t)RendererContextGL, v94, (uint64_t)v36, 0, x++);
          v15 = a2;
          goto LABEL_71;
        }
        goto LABEL_42;
      }
      v32 = v29[17];
      if (v32)
      {
LABEL_33:
        OutputDepthTexture = *(_QWORD *)(v32 + 24);
        goto LABEL_34;
      }
    }
LABEL_42:
    if ((*((_BYTE *)v24 + 409) & 1) == 0)
    {
      *((_BYTE *)v24 + 409) = 1;
      v39 = scn_default_log();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_QWORD *)(v16 + 56);
        buf.columns[0].i32[0] = 138412290;
        *(uint64_t *)((char *)buf.columns[0].i64 + 4) = v40;
        v41 = v39;
        v42 = "Error: failed to find texture target named %@";
        goto LABEL_45;
      }
      goto LABEL_102;
    }
    goto LABEL_103;
  }
  return C3DRendererElementStateSetActiveTextureUnit(RendererElementState, x);
}

void C3DGLSLProfileBindProfileInputs(float32x4_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t PassCount;
  uint64_t v7;
  uint64_t i;
  uint64_t PassAtIndex;
  NSObject *v10;

  if (a3)
  {
    PassCount = C3DFXTechniqueGetPassCount(a3);
    if (PassCount >= 1)
    {
      v7 = PassCount;
      for (i = 0; i != v7; ++i)
      {
        PassAtIndex = C3DFXTechniqueGetPassAtIndex(a3, i);
        C3DGLSLProfileBindPassInputs(a1, a2, PassAtIndex, a3, 0);
      }
    }
  }
  else if ((C3DGLSLProfileBindProfileInputs_done & 1) == 0)
  {
    C3DGLSLProfileBindProfileInputs_done = 1;
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      C3DGLSLProfileBindProfileInputs_cold_1(v10);
  }
}

CFTypeRef C3DValueInitFrom(uint64_t a1, const void *a2)
{
  CFTypeRef *Bytes;
  CFTypeRef result;
  size_t Length;
  void *v7;

  if (C3DValueGetTypeSemantic(a1) == 1)
  {
    Bytes = (CFTypeRef *)C3DValueGetBytes(a1);
    if (*Bytes)
    {
      CFRelease(*Bytes);
      *Bytes = 0;
    }
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *Bytes = result;
  }
  else
  {
    Length = C3DValueGetLength(a1);
    v7 = (void *)C3DValueGetBytes(a1);
    return memcpy(v7, a2, Length);
  }
  return result;
}

void CFStringScanFloats(const char *a1, int *a2, int a3)
{
  const char *CString;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;

  if (a3)
  {
    CString = SCNStringGetCString(a1);
    if (a3 >= 1)
    {
      v6 = CString;
      v7 = 0;
      v8 = MEMORY[0x1E0C80978];
      while (1)
      {
        v17 = 0;
        *(float *)&v9 = strtod(v6, &v17);
        a2[v7] = v9;
        if (v6 == v17)
          break;
        v10 = v17 - 1;
        do
        {
          v11 = v10[1];
          if ((v11 & 0x80000000) != 0)
            v12 = __maskrune(v10[1], 0x4000uLL);
          else
            v12 = *(_DWORD *)(v8 + 4 * v11 + 60) & 0x4000;
          ++v10;
        }
        while (v12);
        if (v11 == 44)
          v6 = v10 + 1;
        else
          v6 = v10;
        if (++v7 == a3)
          return;
      }
      if ((_DWORD)v7 == 1 && a3 >= 2)
      {
        v14 = *a2;
        v13 = a2 + 1;
        v15 = v14;
        v16 = a3 - 1;
        do
        {
          *v13++ = v15;
          --v16;
        }
        while (v16);
      }
    }
  }
}

char *CFStringScanCGFloats(char *result, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *i;
  unsigned int v9;
  char *v10;

  if (!a3)
    return result;
  result = (char *)SCNStringGetCString(result);
  v10 = result;
  if (a3 < 1)
    return result;
  v5 = 0;
  v6 = a3;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    *(double *)(a2 + 8 * v5) = strtod(v10, &v10);
    for (i = v10 + 1; ; ++i)
    {
      v9 = *(i - 1);
      if ((v9 & 0x80000000) != 0)
        break;
      result = (char *)(*(_DWORD *)(v7 + 4 * v9 + 60) & 0x4000);
      if (!(_DWORD)result)
        goto LABEL_10;
LABEL_9:
      v10 = i;
    }
    result = (char *)__maskrune(*(i - 1), 0x4000uLL);
    if ((_DWORD)result)
      goto LABEL_9;
LABEL_10:
    if (v9 == 44)
      v10 = i;
    ++v5;
  }
  while (v5 != v6);
  return result;
}

CFStringRef C3DStringCreateSubstringAfterPrefix(const __CFString *a1, const __CFString *a2)
{
  CFRange v3;
  CFRange v4;

  v3 = CFStringFind(a1, a2, 0);
  if (v3.location == -1)
    return 0;
  v4.length = CFStringGetLength(a1) - (v3.location + v3.length);
  if (v4.length < 1)
    return 0;
  v4.location = v3.location + v3.length;
  return CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v4);
}

BOOL C3DValueSetValueFromString(uint64_t a1, const __CFString *a2)
{
  uint64_t Bytes;
  float DoubleValue;
  BOOL v6;
  NSObject *v7;
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *SubstringAfterPrefix;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  __int128 v23;

  Bytes = C3DValueGetBytes(a1);
  switch(*(_WORD *)(a1 + 16))
  {
    case 1:
      DoubleValue = CFStringGetDoubleValue(a2);
      *(float *)Bytes = DoubleValue;
      goto LABEL_21;
    case 2:
      *(_DWORD *)Bytes = CFStringGetIntValue(a2);
      goto LABEL_21;
    case 3:
      if (CFStringCompare(a2, CFSTR("true"), 0))
      {
        v6 = 1;
      }
      else if (CFStringCompare(a2, CFSTR("false"), 0))
      {
        v6 = 0;
      }
      else
      {
        v6 = CFStringGetIntValue(a2) != 0;
      }
      *(_BYTE *)Bytes = v6;
      goto LABEL_21;
    case 8:
      v16 = 0;
      *(_QWORD *)&v23 = 0;
      SubstringAfterPrefix = (const char *)C3DStringCreateSubstringAfterPrefix(a2, CFSTR("vec2("));
      if (SubstringAfterPrefix)
      {
        v18 = SubstringAfterPrefix;
        CFStringScanFloats(SubstringAfterPrefix, (int *)&v23, 2);
        CFRelease(v18);
        v16 = v23;
      }
      *(_QWORD *)Bytes = v16;
      goto LABEL_21;
    case 9:
      v23 = 0uLL;
      v19 = (const char *)C3DStringCreateSubstringAfterPrefix(a2, CFSTR("vec3("));
      if (v19)
      {
        v20 = v19;
        CFStringScanFloats(v19, (int *)&v23, 3);
        CFRelease(v20);
      }
      *(_QWORD *)Bytes = v23;
      *(_DWORD *)(Bytes + 8) = DWORD2(v23);
      goto LABEL_21;
    case 0xA:
      v23 = 0uLL;
      v21 = (const char *)C3DStringCreateSubstringAfterPrefix(a2, CFSTR("vec4("));
      if (v21)
      {
        v22 = v21;
        CFStringScanFloats(v21, (int *)&v23, 4);
        CFRelease(v22);
      }
      *(_OWORD *)Bytes = v23;
LABEL_21:
      result = 1;
      break;
    default:
      v7 = scn_default_log();
      result = os_log_type_enabled(v7, OS_LOG_TYPE_FAULT);
      if (result)
      {
        C3DValueSetValueFromString_cold_1(v7, v9, v10, v11, v12, v13, v14, v15);
        result = 0;
      }
      break;
  }
  return result;
}

void C3DValueConcat(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Type;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t *Bytes;
  float32x4_t *v48;
  float32x4_t *v49;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DValueConcat_cold_5(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DValueConcat_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DValueConcat_cold_3(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  Type = C3DValueGetType(a1);
  if ((_DWORD)Type != C3DValueGetType(a2))
  {
    v31 = scn_default_log();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
      C3DValueConcat_cold_2(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  if ((_DWORD)Type != C3DValueGetType(a3))
  {
    v39 = scn_default_log();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
      C3DValueConcat_cold_1(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  Bytes = (float32x2_t *)C3DValueGetBytes(a1);
  v48 = (float32x4_t *)C3DValueGetBytes(a2);
  v49 = (float32x4_t *)C3DValueGetBytes(a3);
  C3DConcatBaseType(Type, Bytes, v48, v49);
}

CFStringRef _C3DValueCFCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFString *v3;

  v2 = CFGetAllocator((CFTypeRef)a1);
  v3 = C3DBaseTypeStringDescription(*(__int16 *)(a1 + 16));
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DValue %p - %@ ptr:%p >"), a1, v3, *(_QWORD *)(a1 + 24));
}

__CFArray *_C3DValueCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  int v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v17;
  int v18;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v18 = 0;
  valuePtr = 2;
  v17 = a1 + 16;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("baseType"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v18 = 0;
  valuePtr = 2;
  v17 = a1 + 32;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("count"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = *(__int16 *)(a1 + 16);
  v18 = 0;
  valuePtr = v12;
  v17 = *(_QWORD *)(a1 + 24);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v17);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("value"));
  CFDictionarySetValue(v11, CFSTR("type"), v13);
  CFDictionarySetValue(v11, CFSTR("address"), v15);
  CFDictionarySetValue(v11, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v14);
  CFRelease(v11);
  CFRelease(v15);
  CFRelease(v13);
  return Mutable;
}

void _C3DFXSamplerCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[2];
  if (v3)
  {
    CFRelease(v3);
    a1[2] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

uint64_t C3DFXSamplerCreate()
{
  if (C3DFXSamplerGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXSamplerGetTypeID_onceToken, &__block_literal_global_94);
  return C3DTypeCreateInstance_(C3DFXSamplerGetTypeID_typeID, 0x18uLL);
}

CFTypeRef C3DFXSamplerSetTextureSampler(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t C3DFXSamplerGetTextureSampler(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

CFTypeRef C3DFXSamplerSetImage(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

uint64_t C3DFXSamplerGetImage(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

CFTypeRef C3DFXSamplerSetTexture(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 32);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t C3DFXSamplerGetTexture(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXSamplerSetTextureSampler_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 32);
}

CFStringRef _C3DFXSamplerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXSampler>"));
}

CFStringRef _C3DFXSamplerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXSampler>"));
}

__CFArray *_C3DFXSamplerCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t v12;
  int v13;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 2;
  valuePtr = 5;
  v12 = a1 + 16;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("sampler"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = 2;
  valuePtr = 5;
  v12 = a1 + 24;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v13);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v12);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("image"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  return Mutable;
}

void __FillSetWithUVSet(uint64_t a1, __CFSet *a2, uint64_t a3)
{
  const void *SourceWithSemanticAtIndex;

  if (a3 != -1)
  {
    SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a1, 3, a3, 1);
    if (SourceWithSemanticAtIndex)
      CFSetSetValue(a2, SourceWithSemanticAtIndex);
  }
}

BOOL C3DNodeNeedsSpecialUpAxisConversion(uint64_t a1)
{
  const __CFDictionary *Light;
  _BOOL8 result;

  result = 1;
  if ((C3DNodeHasCamera(a1) & 1) == 0)
  {
    Light = C3DNodeGetLight(a1);
    if (!Light || (C3DLightGetType((uint64_t)Light) & 0xFFFFFFFD) != 1)
      return 0;
  }
  return result;
}

uint64_t C3DIONeedsUnitOrUpAxisConversion(__n128 *a1, CFDictionaryRef theDict, int *a3, float *a4, _DWORD *a5)
{
  const __CFBoolean *Value;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  const __CFNumber *v14;
  float Unit;
  float v16;
  double v17;
  __n128 v19;

  if (!theDict
    || (Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceConvertToYUpIfNeeded"))) == 0)
  {
    v11 = 0;
    if (!a3)
      goto LABEL_7;
    goto LABEL_6;
  }
  v11 = CFBooleanGetValue(Value) != 0;
  if (a3)
LABEL_6:
    *a3 = 0;
LABEL_7:
  if (a4)
    *a4 = 1.0;
  if (a5)
    *a5 = 0;
  if (v11)
  {
    v19.n128_u32[2] = 0;
    v19.n128_u64[0] = 0;
    C3DSceneGetUpAxis(a1, &v19);
    v12 = v19.n128_f32[1] <= 0.0001;
    if (a3 && v19.n128_f32[1] <= 0.0001)
    {
      if (v19.n128_f32[0] <= 0.0001)
        v13 = 1;
      else
        v13 = 2;
      *a3 = v13;
    }
  }
  else
  {
    v12 = 0;
  }
  v19.n128_u32[0] = 0;
  if (theDict)
  {
    v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceConvertToUnit"));
    if (v14)
    {
      CFNumberGetValue(v14, kCFNumberFloatType, &v19);
      if (v19.n128_f32[0] != 0.0)
      {
        if (a5)
          *a5 = v19.n128_u32[0];
        Unit = C3DSceneGetUnit((uint64_t)a1);
        if (Unit != 0.0 && v19.n128_f32[0] != 0.0)
        {
          v16 = Unit / v19.n128_f32[0];
          v17 = fabs(v16 + -1.0);
          if (v17 > 0.0001)
            v12 = 1;
          else
            v12 = v12;
          if (a4 && v17 > 0.0001)
          {
            *a4 = v16;
            return 1;
          }
        }
      }
    }
  }
  return v12;
}

void C3DIOFinalizeLoadScene(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  __n128 *v6;
  uint64_t RootNode;
  const void *Value;
  uint64_t v9;
  const __CFArray *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t Geometry;
  uint64_t Mesh;
  const void *v18;
  uint64_t v19;
  const __CFArray *v20;
  const __CFArray *v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex j;
  _QWORD *v25;
  const void *v26;
  uint64_t v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFIndex v30;
  const void *v31;
  uint64_t v32;
  const __CFDictionary *LightmapInfo;
  uint64_t Skinner;
  void *v35;
  const CFSetCallBacks *v36;
  CFMutableSetRef Mutable;
  const __CFNumber *v38;
  unsigned int v39;
  uint64_t v40;
  NSObject *v41;
  const void *SourceWithSemanticAtIndex;
  const __CFArray *MaterialsCount;
  const __CFArray *v44;
  uint64_t k;
  const __CFArray *MaterialAtIndex;
  uint64_t CommonProfile;
  uint64_t v48;
  uint64_t UVSet;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t SourcesCountForSemantic;
  __CFSet *v65;
  uint64_t v66;
  uint64_t m;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  const void *PositionSource;
  const __CFArray *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CFIndex v80;
  CFIndex v81;
  BOOL v82;
  CFIndex ii;
  const void *v84;
  uint64_t Accessor;
  _QWORD *v86;
  int ComponentsValueType;
  uint64_t v88;
  const UInt8 *ValuePtrAtIndex;
  const UInt8 *v90;
  uint64_t ComponentsCountPerValue;
  CFIndex v92;
  const void *v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  size_t v97;
  CFIndex v98;
  UInt8 *v99;
  uint64_t *v100;
  UInt8 *v101;
  uint64_t v102;
  uint64_t v103;
  const UInt8 *v104;
  CFDataRef v105;
  __int16 Semantic;
  uint64_t v107;
  uint64_t Library;
  uint64_t Offset;
  uint64_t v110;
  const void *v111;
  CFIndex v112;
  const void *ElementAtIndex;
  const __CFData *Indexes;
  uint64_t PrimitiveCount;
  uint64_t v116;
  UInt8 *v117;
  UInt8 *v118;
  UInt8 *BytePtr;
  NSObject *v120;
  const void *v121;
  uint64_t v122;
  const __CFArray *v123;
  const __CFArray *v124;
  CFIndex v125;
  float32x4_t *v126;
  float32x4_t *v127;
  uint64_t v128;
  const __CFBoolean *v129;
  uint64_t v130;
  const __CFArray *v131;
  const __CFArray *v132;
  CFIndex v133;
  CFIndex v134;
  uint64_t v135;
  const void *v136;
  const __CFDictionary *Light;
  int Type;
  CFIndex jj;
  const void *v140;
  const __CFDictionary *v141;
  float *Color;
  const void *v143;
  uint64_t v144;
  const void *v145;
  uint64_t v146;
  const void *v147;
  const __CFArray *v148;
  const __CFArray *v149;
  CFIndex v150;
  CFIndex v151;
  __n128 *v152;
  CFIndex v153;
  char v154;
  float32x4_t *v155;
  float32x4_t *v156;
  double ZFar;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  NSObject *v161;
  const __CFDictionary *Camera;
  uint64_t ProjectionInfosPtr;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  double v170;
  const __CFBoolean *v171;
  uint64_t v172;
  const __CFArray *v173;
  const __CFArray *v174;
  __n128 *v175;
  CFIndex v176;
  CFIndex v177;
  CFIndex kk;
  const void *v179;
  uint64_t v180;
  unsigned int v181;
  __int32 v182;
  NSObject *v183;
  float v184;
  const void *v185;
  const void *TypeID;
  uint64_t v187;
  const void *v188;
  const void *v189;
  uint64_t v190;
  const void *v191;
  const void *v192;
  const void *v193;
  uint64_t AnimationManager;
  float32x4_t *v195;
  __CFArray *v196;
  CFIndex v197;
  uint64_t v198;
  __C3DGeometry *v199;
  uint64_t *v200;
  __CFArray *v201;
  CFIndex v202;
  CFIndex v203;
  CFIndex mm;
  float32x4_t *v205;
  float32x4_t *Copy;
  float32x4_t *v207;
  const void *v208;
  void *v209;
  const void *v210;
  char IsSupported;
  uint64_t v212;
  const __CFBoolean *v213;
  const __CFBoolean *v214;
  __n128 *v215;
  const __CFDictionary *v218;
  const __CFArray *cf;
  CFIndex v220;
  CFIndex v221;
  __CFSet *v222;
  const __CFAllocator *allocator;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t InputSetForSource;
  void *v229;
  __CFSet *theSet;
  uint64_t n;
  uint64_t v232;
  float v233;
  uint64_t v234;
  uint8_t v235;
  char v236[15];
  simd_float4x4 v237;
  __int128 v238;
  __int128 v239;
  simd_float4x4 valuePtr;
  __int128 v241;
  __int128 v242;
  float32x4_t v243;
  _QWORD v244[4];
  unsigned int v245;
  __int32 v246;
  simd_float4x4 buf;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  float32x4_t v258;
  float32x4_t v259;
  unsigned int v260;
  __int32 v261;
  char v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v6 = (__n128 *)a1;
  RootNode = C3DSceneGetRootNode(a1);
  if (RootNode)
    C3DNodeApplyHierarchy(RootNode, (uint64_t)&__block_literal_global_95);
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("kSceneSourceRemoveColorArrays"));
    if (Value)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
      {
        v9 = C3DSceneGetRootNode((uint64_t)v6);
        if (v9)
        {
          v10 = C3DNodeCopyNodesWithAttribute(v9, CFSTR("kMeshKey"), 0);
          if (v10)
          {
            v11 = v10;
            Count = CFArrayGetCount(v10);
            if (Count >= 1)
            {
              v13 = Count;
              for (i = 0; i != v13; ++i)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
                Geometry = C3DNodeGetGeometry((uint64_t)ValueAtIndex);
                Mesh = C3DGeometryGetMesh(Geometry);
                C3DMeshRemoveSourcesWithSemantic(Mesh, 2);
              }
            }
            CFRelease(v11);
          }
        }
      }
    }
    v18 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceRemoveAllLights"));
    if (v18)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v18))
      {
        v19 = C3DSceneGetRootNode((uint64_t)v6);
        if (v19)
        {
          v20 = C3DNodeCopyNodesWithAttribute(v19, CFSTR("kLightKey"), 0);
          if (v20)
          {
            v21 = v20;
            v22 = CFArrayGetCount(v20);
            if (v22 >= 1)
            {
              v23 = v22;
              for (j = 0; j != v23; ++j)
              {
                v25 = CFArrayGetValueAtIndex(v21, j);
                C3DNodeRemoveFromParentNode(v25);
              }
            }
            CFRelease(v21);
          }
        }
      }
    }
    v26 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceCleanupMeshes"));
    v218 = a3;
    if (v26)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v26))
      {
        v27 = C3DSceneGetRootNode((uint64_t)v6);
        if (v27)
        {
          v28 = C3DNodeCopyNodesWithAttribute(v27, CFSTR("kMeshKey"), 0);
          if (v28)
          {
            v29 = v28;
            v220 = CFArrayGetCount(v28);
            if (v220 <= 0)
            {
              CFRelease(v29);
            }
            else
            {
              v215 = v6;
              v30 = 0;
              allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              cf = v29;
              do
              {
                v221 = v30;
                v31 = CFArrayGetValueAtIndex(v29, v30);
                v32 = C3DNodeGetGeometry((uint64_t)v31);
                LightmapInfo = C3DNodeGetLightmapInfo((uint64_t)v31);
                Skinner = C3DNodeGetSkinner((uint64_t)v31);
                v35 = (void *)C3DGeometryGetMesh(v32);
                v36 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
                theSet = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
                Mutable = CFSetCreateMutable(0, 0, v36);
                valuePtr.columns[0].i32[0] = 0;
                if (LightmapInfo)
                {
                  v38 = (const __CFNumber *)CFDictionaryGetValue(LightmapInfo, CFSTR("uv_set"));
                  if (v38)
                  {
                    CFNumberGetValue(v38, kCFNumberIntType, &valuePtr);
                    v39 = valuePtr.columns[0].i32[0];
                  }
                  else
                  {
                    v39 = 1;
                    valuePtr.columns[0].i32[0] = 1;
                  }
                  if (v39 >= C3DMeshGetSourcesCountForSemantic((uint64_t)v35, 3))
                  {
                    v41 = scn_default_log();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                    {
                      buf.columns[0].i32[0] = 67109120;
                      buf.columns[0].i32[1] = valuePtr.columns[0].i32[0];
                      _os_log_impl(&dword_1DCCB8000, v41, OS_LOG_TYPE_DEFAULT, "Warning: light_map uv_set:%d is pointing to an invalid uv_set(no corresponding source) and was reset to 1", (uint8_t *)&buf, 8u);
                    }
                    valuePtr.columns[0].i32[0] = 1;
                    v40 = 1;
                  }
                  else
                  {
                    v40 = valuePtr.columns[0].u32[0];
                  }
                  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v35, 3, v40, 0);
                  if (SourceWithSemanticAtIndex)
                    CFSetSetValue(theSet, SourceWithSemanticAtIndex);
                }
                v222 = Mutable;
                MaterialsCount = C3DGeometryGetMaterialsCount(v32);
                if ((uint64_t)MaterialsCount >= 1)
                {
                  v44 = MaterialsCount;
                  for (k = 0; (const __CFArray *)k != v44; ++k)
                  {
                    MaterialAtIndex = C3DGeometryGetMaterialAtIndex(v32, k);
                    CommonProfile = C3DMaterialGetCommonProfile((uint64_t)MaterialAtIndex);
                    if (CommonProfile)
                    {
                      v48 = CommonProfile;
                      UVSet = C3DEffectCommonProfileGetUVSet(CommonProfile, 0);
                      __FillSetWithUVSet((uint64_t)v35, theSet, UVSet);
                      v50 = C3DEffectCommonProfileGetUVSet(v48, 1);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v50);
                      v51 = C3DEffectCommonProfileGetUVSet(v48, 2);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v51);
                      v52 = C3DEffectCommonProfileGetUVSet(v48, 3);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v52);
                      v53 = C3DEffectCommonProfileGetUVSet(v48, 5);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v53);
                      v54 = C3DEffectCommonProfileGetUVSet(v48, 7);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v54);
                      v55 = C3DEffectCommonProfileGetUVSet(v48, 8);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v55);
                      v56 = C3DEffectCommonProfileGetUVSet(v48, 9);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v56);
                      v57 = C3DEffectCommonProfileGetUVSet(v48, 10);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v57);
                      v58 = C3DEffectCommonProfileGetUVSet(v48, 11);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v58);
                      v59 = C3DEffectCommonProfileGetUVSet(v48, 12);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v59);
                      v60 = C3DEffectCommonProfileGetUVSet(v48, 13);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v60);
                      v61 = C3DEffectCommonProfileGetUVSet(v48, 14);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v61);
                      v62 = C3DEffectCommonProfileGetUVSet(v48, 15);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v62);
                      v63 = C3DEffectCommonProfileGetUVSet(v48, 16);
                      __FillSetWithUVSet((uint64_t)v35, theSet, v63);
                    }
                  }
                }
                SourcesCountForSemantic = C3DMeshGetSourcesCountForSemantic((uint64_t)v35, 3);
                v65 = v222;
                if (SourcesCountForSemantic >= 1)
                {
                  v66 = SourcesCountForSemantic;
                  for (m = 0; m != v66; ++m)
                  {
                    v68 = C3DMeshGetSourceWithSemanticAtIndex((uint64_t)v35, 3, m, 0);
                    if (v68)
                    {
                      v69 = v68;
                      if (!CFSetContainsValue(theSet, v68))
                        CFSetSetValue(v222, v69);
                    }
                  }
                }
                CFSetApplyFunction(v222, (CFSetApplierFunction)__RemoveSources, v35);
                v70 = C3DGeometryGetMesh(v32);
                if (!Skinner)
                {
                  v71 = v70;
                  PositionSource = C3DMeshGetPositionSource(v70, 1);
                  v73 = C3DMeshCopyAllSources(v71, 1);
                  v74 = C3DMeshSourceGetCount((uint64_t)PositionSource);
                  v75 = malloc_type_malloc(8 * v74, 0x100004000313F17uLL);
                  v224 = (uint64_t *)malloc_type_malloc(8 * v74, 0x100004000313F17uLL);
                  v225 = v71;
                  v229 = v75;
                  if (v74 < 1)
                  {
                    v77 = 0;
                  }
                  else
                  {
                    memset(v75, 255, 8 * v74);
                    v76 = 0;
                    v77 = 0;
                    v227 = v74;
                    do
                    {
                      if (v74 <= v76 + 1)
                        v78 = v76 + 1;
                      else
                        v78 = v74;
                      while (*((_QWORD *)v75 + v76) != -1)
                      {
                        if (v78 == ++v76)
                        {
                          v76 = v78 + 1;
                          goto LABEL_69;
                        }
                      }
                      *((_QWORD *)v75 + v76) = v77;
                      v79 = v76 + 1;
                      for (n = v77; v79 < v74; ++v79)
                      {
                        if (*((_QWORD *)v75 + v79) == -1)
                        {
                          v80 = CFArrayGetCount(v73);
                          if (v80 < 1)
                            goto LABEL_66;
                          v81 = v80;
                          v82 = 0;
                          for (ii = 0; ii != v81; v82 = ii >= v81)
                          {
                            v84 = CFArrayGetValueAtIndex(v73, ii);
                            Accessor = C3DMeshSourceGetAccessor(v84);
                            if (Accessor)
                            {
                              v86 = (_QWORD *)Accessor;
                              ComponentsValueType = C3DSourceAccessorGetComponentsValueType(Accessor);
                              v88 = C3DSizeOfBaseType(ComponentsValueType);
                              ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(v86, v76);
                              v90 = C3DSourceAccessorGetValuePtrAtIndex(v86, v79);
                              ComponentsCountPerValue = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v86);
                              if (memcmp(ValuePtrAtIndex, v90, ComponentsCountPerValue * v88))
                                break;
                            }
                            ++ii;
                          }
                          v74 = v227;
                          v75 = v229;
                          v77 = n;
                          if (v82)
LABEL_66:
                            *((_QWORD *)v75 + v79) = v77;
                        }
                      }
                      v71 = v225;
                      v224[v77++] = v76++;
LABEL_69:
                      ;
                    }
                    while (v76 < v74);
                  }
                  if (CFArrayGetCount(v73) >= 1)
                  {
                    v92 = 0;
                    v232 = v77;
                    do
                    {
                      v93 = CFArrayGetValueAtIndex(v73, v92);
                      InputSetForSource = C3DMeshGetInputSetForSource(v71, v93, 1);
                      v94 = (_QWORD *)C3DMeshSourceGetAccessor(v93);
                      v95 = C3DSourceAccessorGetComponentsValueType((uint64_t)v94);
                      v96 = C3DSizeOfBaseType(v95);
                      v97 = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v94) * v96;
                      v98 = v97 * v77;
                      v226 = v95;
                      if (v97 * v77)
                        v99 = (UInt8 *)malloc_type_malloc(v97 * v77, 0x706BBC51uLL);
                      else
                        v99 = 0;
                      if (v77 >= 1)
                      {
                        v100 = v224;
                        v101 = v99;
                        v102 = v232;
                        do
                        {
                          v103 = *v100++;
                          v104 = C3DSourceAccessorGetValuePtrAtIndex(v94, v103);
                          memcpy(v101, v104, v97);
                          v101 += v97;
                          --v102;
                        }
                        while (v102);
                      }
                      v105 = CFDataCreate(allocator, v99, v98);
                      Semantic = C3DMeshSourceGetSemantic((uint64_t)v93);
                      v107 = C3DSourceAccessorGetComponentsCountPerValue((uint64_t)v94);
                      Library = C3DSceneSourceGetLibrary((uint64_t)v94);
                      Offset = C3DSourceAccessorGetOffset((uint64_t)v94);
                      v110 = v107;
                      v77 = v232;
                      v111 = (const void *)C3DMeshSourceCreateWithData(Semantic, v105, v226, v110, v232, Library, Offset);
                      CFRelease(v105);
                      free(v99);
                      v71 = v225;
                      __C3DMeshSetRenderableSourceWithInputSetAndPositionChannel(v225, v111, InputSetForSource);
                      CFRelease(v111);
                      ++v92;
                    }
                    while (v92 < CFArrayGetCount(v73));
                  }
                  a3 = v218;
                  if ((uint64_t)C3DMeshGetElementsCount(v71) >= 1)
                  {
                    v112 = 0;
                    do
                    {
                      ElementAtIndex = C3DMeshGetElementAtIndex(v71, v112, 1);
                      buf.columns[0].i32[0] = 0;
                      Indexes = (const __CFData *)C3DMeshElementGetIndexes((uint64_t)ElementAtIndex, &buf);
                      PrimitiveCount = C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
                      v116 = C3DMeshElementGetIndexCountPerPrimitive((uint64_t)ElementAtIndex) * PrimitiveCount;
                      switch(buf.columns[0].i32[0])
                      {
                        case 4:
                          BytePtr = (UInt8 *)CFDataGetBytePtr(Indexes);
                          if (v116 >= 1)
                          {
                            do
                            {
                              *(_DWORD *)BytePtr = *((_QWORD *)v229 + *(unsigned int *)BytePtr);
                              BytePtr += 4;
                              --v116;
                            }
                            while (v116);
                          }
                          break;
                        case 2:
                          v118 = (UInt8 *)CFDataGetBytePtr(Indexes);
                          if (v116 >= 1)
                          {
                            do
                            {
                              *(_WORD *)v118 = *((_QWORD *)v229 + *(unsigned __int16 *)v118);
                              v118 += 2;
                              --v116;
                            }
                            while (v116);
                          }
                          break;
                        case 1:
                          v117 = (UInt8 *)CFDataGetBytePtr(Indexes);
                          if (v116 >= 1)
                          {
                            do
                            {
                              *v117 = *((_QWORD *)v229 + *v117);
                              ++v117;
                              --v116;
                            }
                            while (v116);
                          }
                          break;
                        default:
                          v120 = scn_default_log();
                          if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
                            C3DIOFinalizeLoadScene_cold_1(&v235, v236, v120);
                          break;
                      }
                      ++v112;
                    }
                    while (v112 < (uint64_t)C3DMeshGetElementsCount(v71));
                  }
                  CFRelease(v73);
                  free(v229);
                  free(v224);
                  v65 = v222;
                }
                CFRelease(v65);
                CFRelease(theSet);
                v30 = v221 + 1;
                v29 = cf;
              }
              while (v221 + 1 != v220);
              CFRelease(cf);
              v6 = v215;
            }
          }
        }
      }
    }
    v121 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceCreateCameraIfAbsent"));
    if (v121)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v121))
      {
        v122 = C3DSceneGetRootNode((uint64_t)v6);
        if (v122)
        {
          v123 = C3DNodeCopyNodesWithAttribute(v122, CFSTR("kCameraKey"), 1);
          if (!v123 || (v124 = v123, v125 = CFArrayGetCount(v123), CFRelease(v124), v125 <= 0))
          {
            v126 = C3DCreateDefaultCameraNode(v6, 1);
            if (v126)
            {
              v127 = v126;
              v128 = C3DSceneGetRootNode((uint64_t)v6);
              C3DNodeAddChildNode(v128, v127);
              CFRelease(v127);
            }
          }
        }
      }
    }
    v129 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kSceneSourceCreateLightIfAbsent"));
    if (v129 && CFBooleanGetValue(v129))
    {
      v130 = C3DSceneGetRootNode((uint64_t)v6);
      if (v130)
      {
        v131 = C3DNodeCopyNodesWithAttribute(v130, CFSTR("kLightKey"), 0);
        if (v131)
        {
          v132 = v131;
          v133 = CFArrayGetCount(v131);
          if (v133 >= 1)
          {
            v134 = v133;
            v135 = 1;
            do
            {
              v136 = CFArrayGetValueAtIndex(v132, v135 - 1);
              Light = C3DNodeGetLight((uint64_t)v136);
              Type = C3DLightGetType((uint64_t)Light);
              if (v135 >= v134)
                break;
              ++v135;
            }
            while (!Type);
            if (!Type)
            {
              for (jj = 0; jj != v134; ++jj)
              {
                v140 = CFArrayGetValueAtIndex(v132, jj);
                v141 = C3DNodeGetLight((uint64_t)v140);
                Color = (float *)C3DLightGetColor((uint64_t)v141);
                if ((float)((float)(*Color + Color[1]) + Color[2]) >= 1.5)
                {
                  buf.columns[0] = 0uLL;
                  C3DColor4Make((float *)&buf, 0.0, 0.0, 0.0, 0.0);
                  C3DLightSetColor((uint64_t)v141, (float *)&buf);
                }
              }
            }
          }
          CFRelease(v132);
        }
      }
      C3DSceneSetAttribute(v6, CFSTR("defaultLight"), *MEMORY[0x1E0C9AE50]);
    }
    v143 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceCreateNormalsIfAbsent"));
    if (v143)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v143))
      {
        v144 = C3DSceneGetRootNode((uint64_t)v6);
        if (v144)
          C3DNodeApplyHierarchy(v144, (uint64_t)&__block_literal_global_9_1);
      }
    }
    v145 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceAdjustInvalidClippingPlanes"));
    if (v145)
    {
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v145))
      {
        v146 = C3DSceneGetRootNode((uint64_t)v6);
        if (v146)
        {
          v147 = (const void *)v146;
          v148 = C3DNodeCopyNodesWithAttribute(v146, CFSTR("kCameraKey"), 0);
          if (v148)
          {
            v149 = v148;
            v150 = CFArrayGetCount(v148);
            if (v150 > 0)
            {
              v151 = v150;
              v152 = v6;
              v153 = 0;
              v154 = 0;
              while (1)
              {
                v256 = 0u;
                v257 = 0u;
                v254 = 0u;
                v255 = 0u;
                v252 = 0u;
                v253 = 0u;
                v250 = 0u;
                v251 = 0u;
                v248 = 0u;
                v249 = 0u;
                memset(&buf, 0, sizeof(buf));
                v155 = (float32x4_t *)CFArrayGetValueAtIndex(v149, v153);
                if (!v155)
                  goto LABEL_149;
                v156 = v155;
                if (!C3DNodeGetProjectionInfos((uint64_t)v155, (uint64_t)&buf))
                  goto LABEL_149;
                ZFar = C3DProjectionInfosGetZFar((uint64_t)&buf);
                if (ZFar <= C3DProjectionInfosGetZNear((uint64_t)&buf))
                  break;
                if ((v154 & 1) == 0 && !C3DGetBoundingBox(v147, 1, (uint64_t)&v258, (uint64_t)&v259))
                  goto LABEL_148;
                v241 = 0u;
                v242 = 0u;
                memset(&valuePtr, 0, sizeof(valuePtr));
                C3DComputeFrustumPlanesFromNode(v156, (float32x4_t *)&valuePtr, (__n128)xmmword_1DD007E00);
                v158.i64[0] = 0x3F0000003F000000;
                v158.i64[1] = 0x3F0000003F000000;
                v159 = vmulq_f32(vaddq_f32(v258, v259), v158);
                v160 = vmulq_f32(vsubq_f32(v259, v258), v158);
                v159.i32[3] = 1.0;
                v160.i32[3] = 0;
                v237 = valuePtr;
                v238 = v241;
                v239 = v242;
                if (scn_frustum_classify_aabb((float32x4_t *)&v237, v159, v160) == 1)
                {
                  v161 = scn_default_log();
                  if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                  {
                    v237.columns[0].i16[0] = 0;
                    _os_log_impl(&dword_1DCCB8000, v161, OS_LOG_TYPE_DEFAULT, "Warning: invalid zRange detected (whole scene clipped)", (uint8_t *)&v237, 2u);
                  }
LABEL_144:
                  Camera = C3DNodeGetCamera((uint64_t)v156);
                  if (Camera)
                  {
                    ProjectionInfosPtr = C3DCameraGetProjectionInfosPtr((uint64_t)Camera);
                    if (ProjectionInfosPtr)
                    {
                      v164 = ProjectionInfosPtr;
                      valuePtr.columns[0].i32[2] = 0;
                      valuePtr.columns[0].i64[0] = 0;
                      C3DNodeGetWorldPosition(v156, (__n128 *)&valuePtr);
                      *(double *)v165.i64 = C3DVector3MidVector(v258, v259);
                      v166 = vsubq_f32(v258, v259);
                      v167 = vmulq_f32(v166, v166);
                      v168 = vsubq_f32((float32x4_t)valuePtr.columns[0], v165);
                      v169 = vmulq_f32(v168, v168);
                      v170 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))).f32[0])+ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v169, 2), vaddq_f32(v169, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.f32, 1))).f32[0]));
                      C3DProjectionInfosSetZFar(v164, v170);
                      C3DProjectionInfosSetZNear(v164, v170 / 250.0);
                    }
                  }
                }
                v154 = 1;
LABEL_149:
                if (v151 == ++v153)
                {
                  CFRelease(v149);
                  v6 = v152;
                  a3 = v218;
                  goto LABEL_152;
                }
              }
              if ((v154 & 1) == 0 && !C3DGetBoundingBox(v147, 1, (uint64_t)&v258, (uint64_t)&v259))
              {
LABEL_148:
                v154 = 0;
                goto LABEL_149;
              }
              goto LABEL_144;
            }
            CFRelease(v149);
          }
        }
      }
    }
LABEL_152:
    v171 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kSceneSourceMakeSourcesCheaper"));
    if (v171)
    {
      if (CFBooleanGetValue(v171))
      {
        v172 = C3DSceneGetRootNode((uint64_t)v6);
        if (v172)
        {
          v173 = C3DNodeCopyNodesWithAttribute(v172, CFSTR("kMeshKey"), 0);
          if (v173)
          {
            v174 = v173;
            v175 = v6;
            v176 = CFArrayGetCount(v173);
            if (v176 >= 1)
            {
              v177 = v176;
              for (kk = 0; kk != v177; ++kk)
              {
                v179 = CFArrayGetValueAtIndex(v174, kk);
                v180 = C3DNodeGetGeometry((uint64_t)v179);
                C3DNodeGetLightmapInfo((uint64_t)v179);
                C3DGeometryMakeSourcesCheaperWhenRelevant(v180);
              }
            }
            CFRelease(v174);
            v6 = v175;
          }
        }
      }
    }
  }
  v234 = 0;
  v233 = 0.0;
  if (C3DIONeedsUnitOrUpAxisConversion(v6, a3, (int *)&v234 + 1, (float *)&v234, &v233))
  {
    v181 = HIDWORD(v234);
    v182 = v234;
    if (HIDWORD(v234) || *(float *)&v234 != 1.0)
    {
      if (a5 == 1)
      {
        v183 = scn_default_log();
        if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
        {
          buf.columns[0].i16[0] = 0;
          _os_log_impl(&dword_1DCCB8000, v183, OS_LOG_TYPE_INFO, "Info: SCNSceneSourceConvertUnitsToMetersKey and SCNSceneSourceConvertToYUpKey have no effect on compressed assets. Use Xcode's compression options instead", (uint8_t *)&buf, 2u);
        }
      }
      else
      {
        v184 = v233;
        v185 = a2;
        if (a2)
        {
          CFRetain(a2);
        }
        else
        {
          v185 = (const void *)C3DLibraryCreate();
          C3DLibraryFillWithContentOfScene((uint64_t)v185, v6, 0);
        }
        TypeID = (const void *)C3DMeshGetTypeID();
        v187 = MEMORY[0x1E0C809B0];
        v237.columns[0].i64[0] = MEMORY[0x1E0C809B0];
        v237.columns[0].i64[1] = 0x40000000;
        v237.columns[1].i64[0] = (uint64_t)___convertUnitsAndUpAxis_block_invoke;
        v237.columns[1].i64[1] = (uint64_t)&__block_descriptor_tmp_11_1;
        v237.columns[2].i64[0] = __PAIR64__(v182, v181);
        v237.columns[2].i8[8] = 0;
        C3DLibraryApplyEntriesWithType((uint64_t)v185, TypeID, &v237);
        v188 = (const void *)C3DNodeGetTypeID();
        v244[0] = v187;
        v244[1] = 0x40000000;
        v244[2] = ___convertUnitsAndUpAxis_block_invoke_2;
        v244[3] = &__block_descriptor_tmp_12_0;
        v245 = v181;
        v246 = v182;
        C3DLibraryApplyEntriesWithType((uint64_t)v185, v188, v244);
        v189 = (const void *)C3DSkinGetTypeID();
        v258.i64[0] = v187;
        v258.i64[1] = 0x40000000;
        v259.i64[0] = (uint64_t)___convertUnitsAndUpAxis_block_invoke_3;
        v259.i64[1] = (uint64_t)&__block_descriptor_tmp_13_1;
        v260 = v181;
        v261 = v182;
        v262 = 0;
        C3DLibraryApplyEntriesWithType((uint64_t)v185, v189, &v258);
        if (v181 == 1)
        {
          memset(&buf, 0, sizeof(buf));
          memset(&valuePtr, 0, sizeof(valuePtr));
          v243 = (float32x4_t)xmmword_1DD007970;
          C3DMatrix4x4MakeAxisAngleRotation((float32x4_t *)&valuePtr, &v243, 1.57079633);
          C3DMatrix4x4Invert(&valuePtr, &buf);
          v190 = C3DSceneGetRootNode((uint64_t)v6);
          _convertDirectionalNodes(v190, (uint64_t)&valuePtr, (uint64_t)&buf);
        }
        if (*(float *)&v182 != 1.0)
        {
          v191 = (const void *)C3DLightGetTypeID();
          buf.columns[0].i64[0] = v187;
          buf.columns[0].i64[1] = 0x40000000;
          buf.columns[1].i64[0] = (uint64_t)___convertUnitsAndUpAxis_block_invoke_4;
          buf.columns[1].i64[1] = (uint64_t)&__block_descriptor_tmp_14_4;
          buf.columns[2].i32[0] = v182;
          C3DLibraryApplyEntriesWithType((uint64_t)v185, v191, &buf);
          v192 = (const void *)C3DCameraGetTypeID();
          valuePtr.columns[0].i64[0] = v187;
          valuePtr.columns[0].i64[1] = 0x40000000;
          valuePtr.columns[1].i64[0] = (uint64_t)___convertUnitsAndUpAxis_block_invoke_5;
          valuePtr.columns[1].i64[1] = (uint64_t)&__block_descriptor_tmp_15_0;
          valuePtr.columns[2].i32[0] = v182;
          C3DLibraryApplyEntriesWithType((uint64_t)v185, v192, &valuePtr);
          if (v184 != 0.0)
            C3DSceneSetUnit((uint64_t)v6, v184);
        }
        if (v181)
        {
          v243 = (float32x4_t)xmmword_1DD007920;
          C3DSceneSetUpAxis(v6, (__n128 *)&v243);
        }
        CFRelease(v185);
      }
    }
  }
  if (!a3)
  {
    if ((C3DMetalIsSupported() & 1) != 0)
      return;
    goto LABEL_194;
  }
  v193 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceFlattenScene"));
  if (v193)
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v193))
    {
      AnimationManager = C3DSceneGetAnimationManager((uint64_t)v6);
      if (!AnimationManager || C3DAnimationManagerIsEmpty(AnimationManager))
      {
        v195 = (float32x4_t *)C3DSceneGetRootNode((uint64_t)v6);
        v196 = C3DNodeCopyChildNodesPassingTest(v195, (uint64_t)&__block_literal_global_20_0, 1);
        v197 = CFArrayGetCount(v196);
        CFRelease(v196);
        if (v197 <= 0)
        {
          v198 = (uint64_t)v6;
          v199 = (__C3DGeometry *)_C3DCreateFlattenedGeometryFromNodeHierarchy(v195, 1, 1, 0);
          v200 = (uint64_t *)C3DNodeCreate();
          v201 = C3DNodeCopyChildNodesPassingTest(v195, (uint64_t)&__block_literal_global_22, 1);
          memset(&buf, 0, sizeof(buf));
          v202 = CFArrayGetCount(v201);
          if (v202 >= 1)
          {
            v203 = v202;
            for (mm = 0; mm != v203; ++mm)
            {
              v205 = (float32x4_t *)CFArrayGetValueAtIndex(v201, mm);
              C3DNodeComputeWorldMatrix(v205, (uint64_t)&buf);
              C3DNodeSetMatrix(v205, (uint64_t)&buf);
              Copy = (float32x4_t *)C3DNodeCreateCopy((uint64_t)v205, 0);
              C3DNodeAddChildNode((uint64_t)v200, Copy);
              CFRelease(Copy);
            }
          }
          v207 = (float32x4_t *)C3DNodeCreate();
          C3DNodeSetGeometry((uint64_t)v207, v199);
          CFRelease(v199);
          C3DNodeSetName((uint64_t)v207, CFSTR("nodeFromflattenedMesh"));
          C3DNodeAddChildNode((uint64_t)v200, v207);
          CFRelease(v207);
          v208 = (const void *)C3DSceneCreate();
          C3DSceneSetRootNode((uint64_t)v208, v200);
          CFRelease(v200);
          CFRelease(v201);
          v6 = (__n128 *)v198;
          if (v208)
          {
            v209 = (void *)C3DSceneGetRootNode((uint64_t)v208);
            CFRetain(v209);
            C3DSceneSetRootNode((uint64_t)v208, 0);
            C3DSceneSetRootNode(v198, (uint64_t *)v209);
            CFRelease(v209);
            CFRelease(v208);
          }
        }
      }
    }
  }
  v210 = CFDictionaryGetValue(a3, CFSTR("kSceneSourceSplitMeshesForGLES"));
  IsSupported = C3DMetalIsSupported();
  if (!v210)
  {
    if ((IsSupported & 1) != 0)
      goto LABEL_195;
LABEL_194:
    v212 = C3DSceneGetRootNode((uint64_t)v6);
    C3DSplitMeshesIfNeededInNodeTree(v212, 0xFFFFLL);
    if (!a3)
      return;
    goto LABEL_195;
  }
  if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], v210))
    goto LABEL_194;
LABEL_195:
  v213 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kSceneSourceInterleaveSources"));
  if (v213 && CFBooleanGetValue(v213))
    _C3DIOApplyFunctionToMeshes((uint64_t)v6, __InterleaveSources);
  v214 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kSceneSourceDeinterleaveSources"));
  if (v214)
  {
    if (CFBooleanGetValue(v214))
      _C3DIOApplyFunctionToMeshes((uint64_t)v6, __DeinterleaveSources);
  }
}

void _C3DIOApplyFunctionToMeshes(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t RootNode;
  const __CFArray *v4;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t Geometry;

  RootNode = C3DSceneGetRootNode(a1);
  if (RootNode)
  {
    v4 = C3DNodeCopyNodesWithAttribute(RootNode, CFSTR("kMeshKey"), 0);
    if (v4)
    {
      v5 = v4;
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v7 = Count;
        for (i = 0; i != v7; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
          Geometry = C3DNodeGetGeometry((uint64_t)ValueAtIndex);
          a2(Geometry);
        }
      }
      CFRelease(v5);
    }
  }
}

void __InterleaveSources(uint64_t a1)
{
  uint64_t Mesh;
  uint64_t *CopyWithInterleavedSources;
  uint64_t *v4;

  Mesh = C3DGeometryGetMesh(a1);
  CopyWithInterleavedSources = (uint64_t *)C3DMeshCreateCopyWithInterleavedSources(Mesh);
  if (CopyWithInterleavedSources)
  {
    v4 = CopyWithInterleavedSources;
    C3DGeometrySetMesh(a1, CopyWithInterleavedSources);
    CFRelease(v4);
  }
}

void __DeinterleaveSources(uint64_t a1)
{
  uint64_t Mesh;
  uint64_t *CopyWithDeinterleavedSources;
  uint64_t *v4;

  Mesh = C3DGeometryGetMesh(a1);
  if (C3DMeshIsInterleaved(Mesh))
  {
    CopyWithDeinterleavedSources = (uint64_t *)C3DMeshCreateCopyWithDeinterleavedSources(Mesh);
    if (CopyWithDeinterleavedSources)
    {
      v4 = CopyWithDeinterleavedSources;
      C3DGeometrySetMesh(a1, CopyWithDeinterleavedSources);
      CFRelease(v4);
    }
  }
}

const __CFURL *C3DIOCopyResolvedImageURL(const __CFURL *a1, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFBoolean *v5;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v8;
  const __CFURL *v9;
  const __CFArray *v10;
  const __CFBoolean *v11;
  char v12;
  const __CFArray *v13;
  int v15;
  const __CFURL *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (theDict)
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("preferredExtensions"));
  else
    Value = 0;
  v5 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceUseSafeMode"));
  if (v5 && CFBooleanGetValue(v5))
  {
    v6 = CFURLCopyScheme(a1);
    if (v6)
    {
      v7 = v6;
      if (CFStringCompare(v6, CFSTR("file"), 0))
      {
        v8 = scn_default_log();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 138412290;
          v16 = a1;
          _os_log_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_DEFAULT, "Warning: Safe mode enabled, denying the download of a network URL %@", (uint8_t *)&v15, 0xCu);
        }
        CFRelease(v7);
        return 0;
      }
      CFRelease(v7);
    }
    v10 = (const __CFArray *)CFCopySearchPathForDirectoriesInDomains();
  }
  else
  {
    v10 = 0;
  }
  v11 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceOverrideAssetURLs"));
  if (v11)
  {
    v12 = CFBooleanGetValue(v11) != 0;
    if (theDict)
    {
LABEL_16:
      v13 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceAssetDirectoryURLs"));
      goto LABEL_19;
    }
  }
  else
  {
    v12 = 0;
    if (theDict)
      goto LABEL_16;
  }
  v13 = 0;
LABEL_19:
  v9 = C3DIOCopyURLForInitialURL(a1, v13, Value, 0, v10, v12);
  if (v10)
    CFRelease(v10);
  return v9;
}

uint64_t C3DIOShouldActivateSecurityChecks(const __CFURL *a1, CFDictionaryRef theDict)
{
  const __CFBoolean *Value;
  int v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  int HasPrefix;

  if (theDict)
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("kSceneSourceCheckConsistency"));
    if (Value)
      return CFBooleanGetValue(Value) != 0;
  }
  v5 = C3DURLIsInMainBundle(a1);
  v6 = v5;
  if (a1
    && (v5 & 1) == 0
    && (v7 = CFURLCopyPath(a1)) != 0
    && (v8 = v7, HasPrefix = CFStringHasPrefix(v7, CFSTR("/System")), CFRelease(v8), HasPrefix))
  {
    return 0;
  }
  else
  {
    return v6 ^ 1u;
  }
}

void __RemoveSources(const void *a1, uint64_t a2)
{
  C3DMeshRemoveSource(a2, a1);
}

void ___convertUnitsAndUpAxis_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  _QWORD v5[4];
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 36);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___meshConvertUnitAndUpAxis_block_invoke;
  v5[3] = &__block_descriptor_tmp_17;
  v6 = v3;
  v7 = v4;
  C3DMeshApplySources(a2, 0, (uint64_t)v5);
  C3DMeshResetBoundingVolumes(a2);
}

void ___convertUnitsAndUpAxis_block_invoke_2(uint64_t a1, __n128 *a2)
{
  int v3;
  __n128 v4;
  float v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  int8x16_t v9;
  __int32 v10;
  __n128 v11;
  float v12;
  int32x4_t v13;
  float v14;

  v3 = *(_DWORD *)(a1 + 32);
  v14 = *(float *)(a1 + 36);
  v4.n128_f64[0] = C3DNodeGetPosition(a2);
  if (v3 == 1)
  {
    v6.n128_u64[0] = __PAIR64__(v4.n128_u32[2], v4.n128_u32[0]);
    v6.n128_f32[2] = -v4.n128_f32[1];
    v5 = v14;
  }
  else
  {
    v5 = v14;
    if (v3 != 2)
      goto LABEL_6;
    v6.n128_f32[0] = -v4.n128_f32[1];
    v6.n128_u32[1] = v4.n128_u32[0];
    v6.n128_u32[2] = v4.n128_u32[2];
  }
  v6.n128_u32[3] = v4.n128_u32[3];
  v4 = v6;
LABEL_6:
  if (v5 != 1.0)
    v4 = (__n128)vmulq_n_f32((float32x4_t)v4, v5);
  C3DNodeSetPosition((uint64_t)a2, v4);
  if (v3)
  {
    C3DNodeGetAxisAngle((float32x4_t *)a2);
    if (v3 == 1)
    {
      v12 = v7.n128_f32[1];
      v7.n128_u32[1] = v7.n128_u32[2];
      v7.n128_f32[2] = -v12;
      C3DNodeSetAxisAngle((float32x4_t *)a2, v7);
      *(double *)v13.i64 = C3DNodeGetScale(a2);
      v10 = v13.i32[3];
      v11 = (__n128)vuzp1q_s32(v13, vrev64q_s32(v13));
    }
    else
    {
      if (v3 != 2)
      {
        C3DNodeSetAxisAngle((float32x4_t *)a2, v7);
        v11.n128_f64[0] = C3DNodeGetScale(a2);
        goto LABEL_15;
      }
      v8.n128_u64[1] = v7.n128_u64[1];
      v8.n128_f32[0] = -v7.n128_f32[1];
      v8.n128_u32[1] = v7.n128_u32[0];
      C3DNodeSetAxisAngle((float32x4_t *)a2, v8);
      *(double *)v9.i64 = C3DNodeGetScale(a2);
      v10 = v9.i32[3];
      v11 = (__n128)vzip1q_s32((int32x4_t)vextq_s8(v9, v9, 4uLL), (int32x4_t)v9);
    }
    v11.n128_u32[3] = v10;
LABEL_15:
    C3DNodeSetScale((float32x4_t *)a2, v11);
  }
  C3DNodeGeometryDidUpdate((uint64_t *)a2);
}

uint64_t ___convertUnitsAndUpAxis_block_invoke_3(uint64_t a1, uint64_t a2)
{
  int v3;
  float v4;
  simd_float4 *DefaultShapeMatrix;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4x4 *InverseBindMatricesPtr;
  int JointsCount;
  uint64_t v11;
  simd_float4x4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;

  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(float *)(a1 + 36);
  DefaultShapeMatrix = (simd_float4 *)C3DSkinGetDefaultShapeMatrix(a2);
  v6 = DefaultShapeMatrix[3];
  v8 = *DefaultShapeMatrix;
  v7 = DefaultShapeMatrix[1];
  v16 = DefaultShapeMatrix[2];
  v17 = v6;
  v14 = v8;
  v15 = v7;
  _convertMatrix((float32x4_t *)&v14, v3, v4);
  v13.columns[0] = v14;
  v13.columns[1] = v15;
  v13.columns[2] = v16;
  v13.columns[3] = v17;
  C3DSkinSetDefaultShapeMatrix(a2, (__int128 *)&v13);
  InverseBindMatricesPtr = (simd_float4x4 *)C3DSkinGetInverseBindMatricesPtr(a2);
  JointsCount = C3DSkinGetJointsCount(a2);
  if (JointsCount >= 1)
  {
    v11 = JointsCount;
    do
    {
      memset(&v13, 0, sizeof(v13));
      C3DMatrix4x4Invert(InverseBindMatricesPtr, &v13);
      _convertMatrix((float32x4_t *)&v13, v3, v4);
      C3DMatrix4x4Invert(&v13, InverseBindMatricesPtr++);
      --v11;
    }
    while (v11);
  }
  return C3DSkinInverseBindMatricesHaveChanged(a2);
}

uint64_t _convertDirectionalNodes(uint64_t result, uint64_t a2, uint64_t a3)
{
  float32x4_t *v5;
  unsigned int ChildNodesCount;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *ChildNodeAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  float32x4_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];

  if (result)
  {
    v5 = (float32x4_t *)result;
    if (C3DNodeNeedsSpecialUpAxisConversion(result))
    {
      memset(v18, 0, sizeof(v18));
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      C3DNodeGetMatrix((uint64_t)v5, (uint64_t)&v14);
      C3DMatrix4x4Mult(a2, &v14, v18);
      C3DNodeSetMatrix(v5, (uint64_t)v18);
      ChildNodesCount = C3DNodeGetChildNodesCount((uint64_t)v5);
      if (ChildNodesCount)
      {
        v7 = 0;
        v8 = ChildNodesCount;
        do
        {
          ChildNodeAtIndex = (float32x4_t *)C3DNodeGetChildNodeAtIndex((uint64_t)v5, v7);
          C3DNodeGetMatrix((uint64_t)ChildNodeAtIndex, (uint64_t)v13);
          v14 = (float32x4_t)v13[0];
          v15 = v13[1];
          v16 = v13[2];
          v17 = v13[3];
          C3DMatrix4x4Mult(a3, &v14, v18);
          C3DNodeSetMatrix(ChildNodeAtIndex, (uint64_t)v18);
          ++v7;
        }
        while (v8 != v7);
      }
    }
    result = C3DNodeGetChildNodesCount((uint64_t)v5);
    if ((_DWORD)result)
    {
      v10 = 0;
      v11 = result;
      do
      {
        v12 = C3DNodeGetChildNodeAtIndex((uint64_t)v5, v10);
        result = _convertDirectionalNodes(v12, a2, a3);
        ++v10;
      }
      while (v11 != v10);
    }
  }
  return result;
}

float32x2_t ___convertUnitsAndUpAxis_block_invoke_4(uint64_t a1, uint64_t a2)
{
  return C3DLightScaleUnits(a2, *(float *)(a1 + 32));
}

float64x2_t ___convertUnitsAndUpAxis_block_invoke_5(uint64_t a1, uint64_t a2)
{
  float v2;
  float64x2_t result;

  v2 = *(float *)(a1 + 32);
  *(float *)(a2 + 288) = v2 * *(float *)(a2 + 288);
  result = vmulq_n_f64(*(float64x2_t *)(a2 + 72), v2);
  *(float64x2_t *)(a2 + 72) = result;
  return result;
}

void ___meshConvertUnitAndUpAxis_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  float v4;

  if (a3 == 4 || a3 == 1)
  {
    v3 = *(_DWORD *)(a1 + 32);
    v4 = 1.0;
  }
  else
  {
    if (a3)
      return;
    v3 = *(_DWORD *)(a1 + 32);
    v4 = *(float *)(a1 + 36);
  }
  _sourceConvert(a2, v3, v4);
}

void _sourceConvert(uint64_t a1, int a2, float a3)
{
  uint64_t Content;
  unsigned __int8 v5;
  unsigned __int8 v6;
  float32x4_t v7;
  float v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;

  Content = C3DMeshSourceGetContent(a1);
  v11 = v10;
  if (v10)
  {
    v12 = Content;
    v13 = 0;
    v14 = v5;
    v15 = v6;
    do
    {
      *(double *)v16.i64 = C3DConvertFloatingTypeToFloat4(v14, (float *)(v12 + v13), v7, v8, v9);
      if (a2 == 1)
      {
        v17 = v16;
        v17.i32[1] = v16.i32[2];
        v17.f32[2] = -v16.f32[1];
        v18 = a3;
      }
      else
      {
        v17 = v16;
        v18 = a3;
        if (a2 == 2)
        {
          v17.f32[0] = -v16.f32[1];
          v17.i32[1] = v16.i32[0];
          v17.i32[2] = v16.i32[2];
        }
      }
      if (v18 != 1.0)
        v17 = vmulq_n_f32(v17, v18);
      v17.i32[3] = v16.i32[3];
      C3DConvertFloatingTypeFromFloat4(v14, v12 + v13, v17);
      v13 += v15;
      --v11;
    }
    while (v11);
  }
}

double _convertMatrix(float32x4_t *a1, int a2, float a3)
{
  float32x4_t v5;
  unint64_t v6;
  float v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v15;
  double result;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;

  v21.i32[2] = 0;
  v21.i64[0] = 0;
  v20.i32[2] = 0;
  v20.i64[0] = 0;
  v18 = 0u;
  v19 = 0u;
  C3DMatrix4x4GetAffineTransforms((uint64_t)a1, &v21, (int8x16_t *)&v19, (float32x4_t *)&v20);
  C3DQuaternionGetAxisAngle(&v19, &v18);
  if (a2 == 1)
  {
    v8 = v18;
    v8.i32[1] = v18.i32[2];
    v8.f32[2] = -v18.f32[1];
    v18 = v8;
    v6 = __PAIR64__(v21.u32[2], v21.u32[0]);
    v7 = -v21.f32[1];
  }
  else
  {
    if (a2 != 2)
      goto LABEL_6;
    v5.i64[1] = v18.i64[1];
    v5.f32[0] = -v18.f32[1];
    v5.i32[1] = v18.i32[0];
    v18 = v5;
    *(float *)&v6 = -v21.f32[1];
    HIDWORD(v6) = v21.i32[0];
    v7 = v21.f32[2];
  }
  v21.f32[2] = v7;
  v21.i64[0] = v6;
LABEL_6:
  if (a3 != 1.0)
    v21 = vmulq_n_f32(v21, a3);
  if (a2 == 1)
  {
    v9 = vuzp1q_s32(v20, vrev64q_s32(v20));
    goto LABEL_12;
  }
  if (a2 == 2)
  {
    v9 = vzip1q_s32((int32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL), v20);
LABEL_12:
    v20.i32[2] = v9.i32[2];
    v20.i64[0] = v9.i64[0];
    goto LABEL_14;
  }
  v9 = v20;
LABEL_14:
  __asm { FMOV            V2.4S, #1.0 }
  if (!(!_ZF & _CF))
  {
    v15 = _Q2;
    v15.i32[1] = v9.i32[1];
    v15.i32[2] = v9.i32[2];
    v20.i32[2] = v9.i32[2];
    v9.i32[0] = 1.0;
    v20.i64[0] = v9.i64[0];
    v9 = v15;
  }
  if (fabs(*(float *)&v9.i32[1] + -1.0) <= 0.000001)
  {
    _Q2.i32[0] = v9.i32[0];
    _Q2.i32[2] = v9.i32[2];
    v20.i32[2] = v9.i32[2];
    v9.i32[1] = 1.0;
    v20.i64[0] = v9.i64[0];
    v9 = _Q2;
  }
  if (fabs(*(float *)&v9.i32[2] + -1.0) <= 0.000001)
  {
    v20.i32[2] = 1065353216;
    v20.i64[0] = v9.i64[0];
  }
  C3DQuaternionMakeAxisAngle(&v19, &v18);
  *(_QWORD *)&result = C3DMatrix4x4MakeAffine(a1, &v21, &v19, (float32x2_t *)&v20).u64[0];
  return result;
}

void C3D::CIFilterPass::CIFilterPass(C3D::CIFilterPass *this, C3D::RenderGraph *a2, C3D::ScenePass *a3, __C3DNode *a4)
{
  _QWORD *v5;

  C3D::CustomPass::CustomPass(this, a2, a3, 0);
  *v5 = off_1EA598B58;
  v5[16] = 0;
  v5[18] = 0;
  v5[19] = 0;
  v5[20] = a4;
  v5[21] = 0;
}

char *C3D::CIFilterPass::name(C3D::CIFilterPass *this)
{
  return C3D::kCIFilterPassName;
}

void C3D::CIFilterPass::setup(void **this)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  C3D::Pass *v6;
  __int128 v7;
  int v8;

  C3D::Pass::setInputCount((C3D::Pass *)this, 1u);
  C3D::Pass::setOutputCount((C3D::Pass *)this, 1u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(this + 4), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  *(_BYTE *)(v2 + 65) = 0;
  C3D::Pass::parentColorDesc((C3D::Pass *)this, (uint64_t)&v7);
  *(_OWORD *)(v2 + 16) = v7;
  *(_DWORD *)(v2 + 32) = v8;
  *(_WORD *)(v2 + 28) = 115;
  *(_BYTE *)(v2 + 26) = 1;
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFFFC | 1;
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(this + 4), 0);
  v4 = C3D::CIFilterEffectColorPrefix((C3D *)v3);
  *(_QWORD *)(v3 + 8) = C3D::Pass::nameWithPrefixAndPointer((C3D::Pass *)this, v4, this[20]);
  *(_BYTE *)(v3 + 65) = 0;
  C3D::Pass::parentColorDesc((C3D::Pass *)this, (uint64_t)&v7);
  *(_OWORD *)(v3 + 16) = v7;
  *(_DWORD *)(v3 + 32) = v8;
  *(_BYTE *)(v3 + 26) = 2;
  *(_WORD *)(v3 + 28) = 115;
  v5 = (uint64_t)this[3];
  *(_QWORD *)&v7 = this[1];
  v6 = C3D::RenderGraph::createPass<C3D::CIFilterDrawNodesPass,C3D::ScenePass *,__C3DNode *&>(v5, (C3D::ScenePass **)&v7, (__C3DNode **)this + 20);
  this[16] = v6;
  C3D::Pass::addDependency((C3D::Pass *)this, v6);
}

C3D::CIFilterDrawNodesPass *C3D::RenderGraph::createPass<C3D::CIFilterDrawNodesPass,C3D::ScenePass *,__C3DNode *&>(uint64_t a1, C3D::ScenePass **a2, __C3DNode **a3)
{
  C3D::CIFilterDrawNodesPass *Aligned;

  Aligned = (C3D::CIFilterDrawNodesPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 5392, 16, 0);
  C3D::CIFilterDrawNodesPass::CIFilterDrawNodesPass(Aligned, (C3D::RenderGraph *)a1, *a2, *a3);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::CIFilterDrawNodesPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void **C3D::CIFilterPass::compile(C3D::CIFilterPass *this)
{
  C3D::RenderGraphResourceManager *v2;
  uint64_t v3;
  void **result;
  _QWORD *v5;
  uint64_t RenderContext;
  void *v7;

  v2 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v3 = (*(uint64_t (**)(C3D::CIFilterPass *))(*(_QWORD *)this + 64))(this);
  result = (void **)C3D::RenderGraphResourceManager::get(v2, v3);
  *((_QWORD *)this + 21) = result;
  if (!result)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA599CA8;
    *((_QWORD *)this + 21) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v2, v3, (uint64_t)v5);
    RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithMTLDevice:", -[SCNMTLRenderContext device](RenderContext));
    return C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator=((void **)(*((_QWORD *)this + 21) + 16), v7);
  }
  return result;
}

void **C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator=(void **a1, void *a2)
{
  id v4;
  void *v5;

  if (a2)
    v4 = a2;
  v5 = *a1;
  *a1 = a2;
  if (v5)

  return a1;
}

void C3D::CIFilterPass::execute(float32x4_t *a1, uint64_t a2)
{
  uint64_t Stats;
  double v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int8x16_t v9;
  NSObject *v11;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFDictionary *Filters;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  float64x2_t v45;
  float64x2_t v46;
  _QWORD *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  unsigned int v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint8_t buf[16];
  _BYTE v69[128];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  Stats = C3DEngineContextGetStats(a1[1].i64[0]);
  v5 = CACurrentMediaTime();
  v6 = C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)&a1[2], 0);
  v7 = *(unsigned __int16 *)(v6 + 16);
  v8 = *(unsigned __int16 *)(v6 + 18);
  v9 = C3D::CIFilterPass::_computeProjectedBox((C3D::CIFilterPass *)a1, *(unsigned __int16 *)(a2 + 8));
  if (*(float *)&v9.i32[2] <= *(float *)v9.i32 || *(float *)&v9.i32[3] <= *(float *)&v9.i32[1])
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DCCB8000, v11, OS_LOG_TYPE_DEFAULT, "Warning: CIFilter should have been clipped by the culling", buf, 2u);
    }
LABEL_7:
    *(double *)(Stats + 160) = *(double *)(Stats + 160) + CACurrentMediaTime() - v5;
    return;
  }
  if (*(float *)&v9.i32[3] < 0.0 || *(float *)v9.i32 >= (float)v7 || *(float *)&v9.i32[1] >= (float)v8)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1DCCB8000, v14, OS_LOG_TYPE_DEFAULT, "Warning: CIFilter should have been clipped by the culling (2)", buf, 2u);
    }
    goto LABEL_7;
  }
  v62 = v7;
  v61 = (_QWORD *)a2;
  v15 = *(float *)v9.i32;
  v16 = *(float *)&v9.i32[1];
  v17 = (float)(*(float *)&v9.i32[2] - *(float *)v9.i32);
  v18 = (float)(*(float *)&v9.i32[3] - *(float *)&v9.i32[1]);
  v19 = (void *)objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CICrop"));
  objc_msgSend(v19, "setDefaults");
  v20 = (double)v8;
  v21 = (double)v8 - (v16 + v18);
  objc_msgSend(v19, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:Z:W:", v15, v21, v17, v18), CFSTR("inputRectangle"));
  v22 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDC8]), "initWithMTLTexture:options:", C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0), 0);
  v23 = *MEMORY[0x1E0C9E1F8];
  v59 = (void *)v22;
  objc_msgSend(v19, "setValue:forKey:");
  v24 = *MEMORY[0x1E0C9E298];
  v25 = (void *)objc_msgSend(v19, "valueForKey:", *MEMORY[0x1E0C9E298]);
  v60 = (void *)C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator CIContext *(a1[10].i64[1] + 16);
  Filters = C3DNodeGetFilters(a1[10].i64[0]);
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v27 = -[__CFDictionary countByEnumeratingWithState:objects:count:](Filters, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
  if (v27)
  {
    v28 = *(_QWORD *)v65;
    do
    {
      for (i = 0; i != v27; ++i)
      {
        if (*(_QWORD *)v65 != v28)
          objc_enumerationMutation(Filters);
        v30 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * i);
        objc_msgSend(v30, "setValue:forKey:", v25, v23);
        v25 = (void *)objc_msgSend(v30, "valueForKey:", v24);
      }
      v27 = -[__CFDictionary countByEnumeratingWithState:objects:count:](Filters, "countByEnumeratingWithState:objects:count:", &v64, v69, 16);
    }
    while (v27);
  }
  objc_msgSend(v25, "extent");
  v35 = v20 - (v34 + v33);
  if (v31 >= 0.0)
    v36 = -0.0;
  else
    v36 = v31;
  v37 = v32 + v36;
  v38 = 0.0;
  if (v31 >= 0.0)
    v39 = v31;
  else
    v39 = 0.0;
  if (v35 >= 0.0)
    v40 = -0.0;
  else
    v40 = v35;
  v41 = v33 + v40;
  v42 = (double)v62;
  if (v35 >= 0.0)
    v38 = v35;
  if (v39 + v37 <= v42)
    v43 = v37;
  else
    v43 = v42 - v39;
  if (v38 + v41 <= v20)
    v44 = v41;
  else
    v44 = v20 - v38;
  v57 = v44;
  v58 = v43;
  v45.f64[0] = v43;
  v45.f64[1] = v44;
  v63 = v39;
  v46.f64[0] = v39;
  v56 = v38;
  v46.f64[1] = v38;
  a1[9] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v46), v45);
  v47 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  if (!v47)
  {
    v48 = scn_default_log();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
      C3D::CIFilterPass::execute(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  objc_msgSend(v60, "render:toMTLTexture:commandBuffer:bounds:colorSpace:", v25, v47, *v61, C3DColorSpaceLinearSRGB(), v63, v20 - (v56 + v57), v58);
  *(double *)(Stats + 160) = *(double *)(Stats + 160) + CACurrentMediaTime() - v5;

}

int8x16_t C3D::CIFilterPass::_computeProjectedBox(C3D::CIFilterPass *this, unsigned int a2)
{
  uint64_t v4;
  uint32x2_t v5;
  float32x4_t v6;
  float32x4_t *WorldMatrix;
  uint64_t CullingContext;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  C3D::Pass *v12;
  float32x4_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t result;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[3];
  __int16 v20;
  C3D::CIFilterPass *v21;
  int v22;
  char v23;
  __int128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28[4];

  v4 = C3D::PassDescriptor::outputAtIndex((C3D::CIFilterPass *)((char *)this + 32), 0);
  v5.i32[0] = *(unsigned __int16 *)(v4 + 16);
  v5.i32[1] = *(unsigned __int16 *)(v4 + 18);
  *(float32x2_t *)v6.f32 = vcvt_f32_u32(v5);
  v6.i64[1] = v6.i64[0];
  v17 = v6;
  WorldMatrix = C3DNodeGetWorldMatrix(*((float32x4_t **)this + 20));
  CullingContext = C3D::DrawNodesPass::getCullingContext(*((C3D::DrawNodesPass **)this + 16));
  C3DMatrix4x4Mult((uint64_t)WorldMatrix, (float32x4_t *)(CullingContext + ((unint64_t)a2 << 6) + 3856), v28);
  v25 = 0uLL;
  v9 = C3DNodeComputeHierarchicalBoundingBox(*((float32x4_t **)this + 20), 1, &v26);
  C3D::CIFilterPass::computeBoundingRectangle(v9, v26.f32, &v27, v28, &v25, &v24);
  v18 = vmulq_f32(v25, v17);
  v10 = *((_QWORD *)this + 3);
  v11 = (**(uint64_t (***)(C3D::CIFilterPass *))this)(this);
  v19[1] = 0;
  v19[2] = 0;
  v19[0] = v11;
  v20 = 0;
  v21 = this;
  v22 = 1;
  v23 = 1;
  v12 = C3D::RenderGraph::search(v10, (uint64_t)v19);
  if (!v12)
    return (int8x16_t)v18;
  v13 = *((float32x4_t *)v12 + 9);
  if ((vminvq_u32((uint32x4_t)vceqzq_f32(v13)) & 0x80000000) != 0)
  {
    return (int8x16_t)v18;
  }
  else
  {
    v14 = v18.i64[0];
    v15.i64[0] = *((_QWORD *)v12 + 18);
    v15.i64[1] = v18.i64[1];
    result.i64[1] = *((_QWORD *)v12 + 19);
    result.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v18, v13), v15, result).u64[0];
  }
  return result;
}

uint64_t C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator CIContext *(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3D::SmartPtr<CIContext *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator CIContext *(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)a1;
}

void C3D::CIFilterPass::computeBoundingRectangle(uint64_t a1, float *a2, float *a3, float32x4_t *a4, float32x4_t *a5, _OWORD *a6)
{
  uint64_t v8;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float32x4_t v22;
  double v23;
  float v24;
  float v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;

  v8 = 0;
  v9 = 0;
  v46 = *MEMORY[0x1E0C80C00];
  *a5 = (float32x4_t)xmmword_1DD008460;
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = *a3;
  v14 = a3[1];
  *(float *)&v15 = *a2 + *a3;
  *(float *)&v16 = *(float *)&v15;
  *((float *)&v16 + 1) = v11 + v14;
  v17 = a3[2];
  v31 = v12 + v17;
  v30 = v16;
  v33 = v12 - v17;
  v32 = v16;
  *((float *)&v15 + 1) = v11 - v14;
  v35 = v12 + v17;
  v34 = v15;
  v37 = v12 - v17;
  v36 = v15;
  *(float *)&v18 = v10 - v13;
  LODWORD(v19) = v18;
  *((float *)&v19 + 1) = v11 + v14;
  v39 = v12 + v17;
  v38 = v19;
  v41 = v12 - v17;
  v40 = v19;
  *((float *)&v18 + 1) = v11 - v14;
  v43 = v12 + v17;
  v42 = v18;
  v45 = v12 - v17;
  v44 = v18;
  *a6 = 0u;
  v20 = 1.0;
  while (2)
  {
    v21 = 16 * v8++;
    while (1)
    {
      v22 = *(float32x4_t *)((char *)&v30 + v21);
      v22.f32[3] = v20;
      v23 = C3DVector4MultMatrix4x4(a4, v22);
      if (v24 <= 0.0)
        break;
      v25 = (float)(1.0 / v24) * *(float *)&v23;
      v26 = *a5;
      v20 = 1.0;
      if (v25 < COERCE_FLOAT(*a5))
      {
        v26.f32[0] = (float)(1.0 / v24) * *(float *)&v23;
        *a5 = v26;
      }
      v27 = vmuls_lane_f32(1.0 / v24, *(float32x2_t *)&v23, 1);
      if (v27 < v26.f32[1])
      {
        v26.f32[1] = v27;
        *a5 = v26;
      }
      if (v25 > v26.f32[2])
      {
        v26.f32[2] = v25;
        *a5 = v26;
      }
      if (v27 > v26.f32[3])
      {
        v26.f32[3] = v27;
        *a5 = v26;
      }
      ++v8;
      v21 += 16;
      if (v8 == 9)
      {
        v28 = (float32x4_t)xmmword_1DD007E00;
        if ((v9 & 1) == 0)
        {
          v29.i64[0] = 0x3F0000003F000000;
          v29.i64[1] = 0x3F0000003F000000;
          v28 = vmlaq_f32(v29, v29, *a5);
        }
        goto LABEL_18;
      }
    }
    v9 = 1;
    v20 = 1.0;
    if (v8 != 8)
      continue;
    break;
  }
  v28 = (float32x4_t)xmmword_1DD007E00;
LABEL_18:
  *a5 = v28;
}

void C3D::CIFilterPassResource::~CIFilterPassResource(C3D::CIFilterPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA599CA8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA599CA8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

C3D::CIFilterDrawNodesPass *C3D::CIFilterDrawNodesPass::CIFilterDrawNodesPass(C3D::CIFilterDrawNodesPass *this, C3D::RenderGraph *a2, C3D::ScenePass *a3, __C3DNode *a4)
{
  C3D::DrawNodesPass *v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v10 = 0;
  v12 = 0u;
  v13 = 0x20000;
  memset(v9, 0, sizeof(v9));
  v11 = -1;
  BYTE8(v12) = 1;
  v7 = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v9);
  *(_QWORD *)v7 = off_1EA599E98;
  *((_QWORD *)v7 + 671) = a4;
  *((_QWORD *)this + 670) = *(_QWORD *)(C3D::DrawNodesPass::getCullingContext(a3) + 4680);
  return this;
}

const char *C3D::CIFilterDrawNodesPass::name(C3D::CIFilterDrawNodesPass *this)
{
  return "CIFilterDrawNodesPass";
}

uint64_t C3D::CIFilterDrawNodesPass::setup(C3D::CIFilterDrawNodesPass *this)
{
  uint64_t v2;
  C3D::PassDescriptor *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t StackAllocator;
  void *v8;
  C3D::ScratchAllocator *Aligned;
  uint64_t v10;
  int v11;
  unsigned int i;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[6];
  unsigned int v20[4];
  int v21;

  C3D::Pass::setOutputCount(this, 2u);
  v2 = *((_QWORD *)this + 670);
  *((_BYTE *)this + 112) = v2 != 0;
  *((_QWORD *)this + 625) = v2;
  v3 = (C3D::CIFilterDrawNodesPass *)((char *)this + 32);
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::CIFilterDrawNodesPass *)((char *)this + 32), 0);
  *(_QWORD *)(v4 + 8) = "COLOR";
  *(_BYTE *)(v4 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)v20);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v20;
  *(_DWORD *)(v4 + 32) = v21;
  *(_WORD *)(v4 + 28) = 115;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 66) = *(_WORD *)(v4 + 66) & 0xFFBC | 0x42;
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::CIFilterDrawNodesPass *)((char *)this + 32), 1u);
  v6 = C3D::CIFilterEffectDepthPrefix((C3D *)v5);
  *(_QWORD *)(v5 + 8) = C3D::Pass::nameWithPrefixAndPointer(this, v6, *((void **)this + 671));
  *(_BYTE *)(v5 + 64) = 2;
  C3D::Pass::parentDepthDesc(this, (uint64_t)v20);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v20;
  *(_DWORD *)(v5 + 32) = v21;
  *(_WORD *)(v5 + 66) = *(_WORD *)(v5 + 66) & 0xFFFC | 2;
  *((_BYTE *)this + 296) = 1;
  StackAllocator = C3DEngineContextGetStackAllocator(*((_QWORD *)this + 2));
  C3DStackAllocatorPushFrame(StackAllocator);
  C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::Array(v20, StackAllocator);
  *((_QWORD *)this + 672) = v20;
  v8 = *(void **)(*((_QWORD *)this + 3) + 16);
  Aligned = (C3D::ScratchAllocator *)C3DScratchAllocatorAllocateAligned(v8, 24, 8, 0);
  C3D::Array<__C3DNode *,0u,C3D::ScratchAllocator>::Array(Aligned, v8);
  v10 = *((_QWORD *)this + 671);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___ZN3C3D21CIFilterDrawNodesPass5setupEv_block_invoke;
  v19[3] = &__block_descriptor_48_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
  v19[4] = this;
  v19[5] = Aligned;
  C3DNodeApplyHierarchy(v10, (uint64_t)v19);
  *((_QWORD *)this + 34) = Aligned;
  C3D::DrawNodesPass::setup(this);
  v11 = LOWORD(v20[2]);
  C3D::Pass::setInputCount(this, LOWORD(v20[2]));
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = (_OWORD *)C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::operator[]((uint64_t)v20, i);
      v14 = (_OWORD *)C3D::PassDescriptor::inputAtIndex(v3, (unsigned __int16)i);
      *v14 = *v13;
      v15 = v13[4];
      v17 = v13[1];
      v16 = v13[2];
      v14[3] = v13[3];
      v14[4] = v15;
      v14[1] = v17;
      v14[2] = v16;
    }
  }
  return C3DStackAllocatorPopFrame(StackAllocator);
}

void C3D::CIFilterDrawNodesPass::_setupPointOfViewMatrices(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t *v4;

  C3D::DrawNodesPass::_setupPointOfViewMatrices(a1, a2, a3);
  v4 = *(float32x4_t **)(a1 + 5360);
  if (v4)
    C3DCullingContextSetupMirrorMatrices(a1 + 320, v4);
}

uint64_t C3D::CIFilterDrawNodesPass::_shouldPushNodeToVisible(C3D::CIFilterDrawNodesPass *this, __C3DNode *a2, int a3)
{
  __int16 v5;
  __int16 v6;
  __int16 v7;
  char *v8;
  C3D *v9;
  const char *v10;
  C3D *v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  __int128 v26;
  int v27;
  __int128 v28;
  __int128 v29;
  int v30;
  char v31;
  _BYTE v32[8];
  char *v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*((__C3DNode **)this + 671) != a2 && (*((_BYTE *)a2 + 221) & 0x40) != 0)
  {
    v5 = *((_WORD *)a2 + 114);
    v6 = *((_WORD *)a2 + 113);
    v7 = *((_WORD *)a2 + 112);
    v8 = (char *)this + 16 * a3;
    C3D::PassIODescriptor::PassIODescriptor((uint64_t)v32, 2);
    C3D::Pass::parentColorDesc(this, (uint64_t)&v28);
    v34 = v28;
    v35 = v29;
    WORD6(v34) = 115;
    v10 = C3D::CIFilterEffectColorPrefix(v9);
    v33 = C3D::Pass::nameWithPrefixAndPointer(this, v10, a2);
    C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(*((_QWORD *)this + 672), (uint64_t)v32);
    C3D::PassIODescriptor::PassIODescriptor((uint64_t)&v28, 2);
    C3D::Pass::parentDepthDesc(this, (uint64_t)&v26);
    v29 = v26;
    v30 = v27;
    v31 = 2;
    BYTE10(v29) = 7;
    v12 = C3D::CIFilterEffectDepthPrefix(v11);
    *((_QWORD *)&v28 + 1) = C3D::Pass::nameWithPrefixAndPointer(this, v12, a2);
    C3D::Array<C3D::PassIODescriptor,0u,C3D::StackAllocator>::push_back<C3D::PassIODescriptor&>(*((_QWORD *)this + 672), (uint64_t)&v28);
    v13 = v5 + v6 - 1;
    v14 = v8 + 5240;
    if ((*((_DWORD *)v8 + 1310) + 1) > *((_DWORD *)v8 + 1311))
    {
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        C3D::ScenePass::_shouldPushNodeToVisible(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *v14;
    v24 = (_WORD *)(*((_QWORD *)v8 + 654) + 4 * v23);
    *v24 = v7;
    v24[1] = v13;
    *v14 = v23 + 1;
  }
  return 1;
}

BOOL ___ZN3C3D21CIFilterDrawNodesPass5setupEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2;
  v2 = *(_QWORD *)(a1 + 32);
  C3D::Array<C3D::Pass *,0u,C3D::ScratchAllocator>::push_back<C3D::Pass *&>(*(_DWORD **)(a1 + 40), &v4);
  return v4 != *(_QWORD *)(v2 + 5368) && (*(_BYTE *)(v4 + 221) & 0x40) != 0;
}

void C3D::computeSampleCountsPerLevels(uint64_t a1, unsigned int a2, void *a3, int a4, double a5, double a6)
{
  float v8;
  BOOL v9;
  uint64_t v10;
  uint64x2_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int64x2_t v24;
  uint64x2_t v25;
  float v26;
  float v27;
  int32x2_t v28;
  int64x2_t v29;

  LODWORD(a5) = 28.0;
  if (a4)
  {
    *(float *)&a5 = (float)(unint64_t)(4 * objc_msgSend(a3, "width", a5));
    HIDWORD(a6) = 1174405120;
    if (*(float *)&a5 >= 8192.0)
      *(float *)&a5 = 8192.0;
    v8 = *(float *)&a5 + -4.0;
    v9 = *(float *)&a5 > 32.0;
    LODWORD(a5) = 28.0;
    if (v9)
      *(float *)&a5 = v8;
  }
  if (a2)
  {
    v10 = 0;
    *(float *)&a6 = (float)(a2 - 1);
    v25 = (uint64x2_t)vdupq_n_s64((unint64_t)a2 - 1);
    v11 = (uint64x2_t)xmmword_1DD008320;
    v24 = vdupq_n_s64(2uLL);
    v12 = (a2 + 1) & 0x1FFFFFFFELL;
    v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
    __asm { FMOV            V10.2S, #4.0 }
    do
    {
      v28 = vmovn_s64((int64x2_t)vcgeq_u64(v25, v11));
      v29 = (int64x2_t)v11;
      v20.i32[0] = v10;
      v20.i32[1] = v10 + 1;
      v21 = vdiv_f32(vcvt_f32_u32(v20), v14);
      v26 = v21.f32[0];
      v27 = powf(v21.f32[1], 0.25);
      v22.f32[0] = powf(v26, 0.25);
      v22.f32[1] = v27;
      v23 = vmla_f32(_D10, v13, v22);
      if ((v28.i8[0] & 1) != 0)
        *(_DWORD *)(a1 + 4 * v10) = v23.f32[0];
      if ((v28.i8[4] & 1) != 0)
        *(_DWORD *)(a1 + 4 * v10 + 4) = v23.f32[1];
      v10 += 2;
      v11 = (uint64x2_t)vaddq_s64(v29, v24);
    }
    while (v12 != v10);
  }
}

void C3D::ComputeRadiancePass::ComputeRadiancePass(C3D::ComputeRadiancePass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  uint64_t v5;
  uint64_t v6;

  C3D::ComputePass::ComputePass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA599B68;
  v6 = *(_QWORD *)&a4->var0;
  *(_DWORD *)(v5 + 116) = *(_DWORD *)&a4->var8;
  *(_QWORD *)(v5 + 108) = v6;
}

uint64_t C3D::ComputeRadiancePass::setup(C3D::ComputeRadiancePass *this)
{
  uint64_t result;
  BOOL v3;
  int v4;
  char v5;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  result = C3D::PassDescriptor::outputAtIndex((C3D::ComputeRadiancePass *)((char *)this + 32), 0);
  *(_QWORD *)(result + 8) = "PreFiltered Radiance";
  v3 = *((_BYTE *)this + 108) == 0;
  v4 = *((unsigned __int16 *)this + 58);
  *(_WORD *)(result + 16) = v4 << (*((_BYTE *)this + 108) != 0);
  if (v3)
    v5 = 5;
  else
    v5 = 2;
  *(_WORD *)(result + 18) = v4;
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 24) = v5;
  *(_WORD *)(result + 25) = 2;
  *(_BYTE *)(result + 27) = 0;
  *(_QWORD *)(result + 28) = 327795;
  return result;
}

void C3D::ComputeRadiancePass::compile(C3D::ComputeRadiancePass *this)
{
  uint64_t RenderContext;
  void *v3;
  _BOOL4 HasFeatures;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const __CFString *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  HasFeatures = C3DEngineContextHasFeatures(*((_QWORD *)this + 2), 512);
  v5 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995
       * ((*(uint64_t (**)(C3D::ComputeRadiancePass *))(*(_QWORD *)this + 64))(this) ^ 0x4FB7DAE84DD6F2FCLL ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * *(_QWORD *)((char *)this + 108)) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)((char *)this + 108)) >> 47))))) ^ *((unsigned int *)this + 29));
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 15) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1EA599B48;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_QWORD *)this + 15) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = *((unsigned __int8 *)this + 108);
    if (v10 == 2)
    {
      v15 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("compute_specularPreIntegratedLD_dual_paraboloid_half"));
      v16 = *((_QWORD *)this + 15);
      v17 = *(void **)(v16 + 16);
      *(_QWORD *)(v16 + 16) = v15;
      if (v17)

      v14 = CFSTR("compute_specularPreIntegratedLD_dual_paraboloid_float");
    }
    else if (v10 == 1)
    {
      v18 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("compute_specularPreIntegratedLD_equirectangular_half"));
      v19 = *((_QWORD *)this + 15);
      v20 = *(void **)(v19 + 16);
      *(_QWORD *)(v19 + 16) = v18;
      if (v20)

      v14 = CFSTR("compute_specularPreIntegratedLD_equirectangular_float");
    }
    else
    {
      if (*((_BYTE *)this + 108))
        return;
      if (HasFeatures)
      {
        v11 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("compute_specularPreIntegratedLD_var_texturecube_half"));
        v12 = *((_QWORD *)this + 15);
        v13 = *(void **)(v12 + 16);
        *(_QWORD *)(v12 + 16) = v11;
        if (v13)

        v14 = CFSTR("compute_specularPreIntegratedLD_var_texturecube_float");
      }
      else
      {
        v21 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("compute_specularPreIntegratedLD_var_texture2d"));
        v22 = *((_QWORD *)this + 15);
        v23 = *(void **)(v22 + 16);
        *(_QWORD *)(v22 + 16) = v21;
        if (v23)

        v14 = CFSTR("compute_specularPreIntegratedLD_var_texture2d");
      }
    }
    v24 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", v14);
    v25 = *((_QWORD *)this + 15);
    v26 = *(void **)(v25 + 24);
    *(_QWORD *)(v25 + 24) = v24;
    if (v26)

  }
}

void C3D::ComputeRadiancePass::execute(uint64_t a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BOOL4 v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  MTLTexture *v20;
  MTLTexture *v21;
  MTLTexture *v22;
  BOOL HasFeatures;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  MTLTexture *v32;
  MTLTexture *v33;
  MTLTexture *v34;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  float v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  v5 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  v6 = objc_msgSend(v4, "mipmapLevelCount");
  v7 = objc_msgSend(v5, "mipmapLevelCount");
  v8 = objc_msgSend(v5, "pixelFormat");
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = *(_DWORD *)(a1 + 112) == 1;
  v40 = (char *)&v37 - v11;
  v41 = v7;
  C3D::computeSampleCountsPerLevels((uint64_t)&v37 - v11, v7, v4, v10, v9, v12);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16);
  if (objc_msgSend(v4, "pixelFormat") == 125)
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24);
  v14 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v13);
  if (v3->_computePipelineState != (MTLComputePipelineState *)v14)
  {
    v3->_computePipelineState = (MTLComputePipelineState *)v14;
    -[MTLComputeCommandEncoder setComputePipelineState:](v3->_encoder, "setComputePipelineState:", v14);
  }
  v15 = *(unsigned __int8 *)(a1 + 108);
  v39 = v4;
  if (v15)
  {
    if ((void **)v3->_textures[1] != v4)
    {
      v3->_textures[1] = (MTLTexture *)v4;
      v3->_texturesToBind[0] |= 2uLL;
    }
    if (v41)
    {
      v16 = 0;
      v17 = v6 - v41;
      if ((uint64_t)(v6 - v41) >= -1)
        v17 = -1;
      v18 = v17 + 1;
      v19 = v39;
      do
      {
        if (v6 >= 2)
        {
          v20 = (MTLTexture *)(id)objc_msgSend(v19, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v19, "pixelFormat"), 5, v18 + v16, 1, 0, 6);
          if (v3->_textures[1] != v20)
          {
            v3->_textures[1] = v20;
            v3->_texturesToBind[0] |= 2uLL;
          }
        }
        v44 = 0.0;
        v44 = (float)v16 / (float)(unint64_t)(objc_msgSend(v5, "mipmapLevelCount") - 1);
        SCNMTLComputeCommandEncoder::setBytes(v3, &v44, 4uLL, 0);
        v43 = *(_DWORD *)&v40[4 * v16];
        SCNMTLComputeCommandEncoder::setBytes(v3, &v43, 4uLL, 1uLL);
        v21 = (MTLTexture *)objc_msgSend(v5, "newTextureViewWithPixelFormat:textureType:levels:slices:", v8, 2, v16, 1, 0, 1);
        v22 = v21;
        if (v3->_textures[0] != v21)
        {
          v3->_textures[0] = v21;
          v3->_texturesToBind[0] |= 1uLL;
        }
        SCNMTLComputeCommandEncoder::dispatchOnGrid2D(v3, -[MTLTexture width](v21, "width"), -[MTLTexture height](v21, "height"));

        ++v16;
      }
      while (v41 != v16);
    }
  }
  else
  {
    HasFeatures = C3DEngineContextHasFeatures(*(_QWORD *)(a1 + 16), 512);
    if ((void **)v3->_textures[1] != v4)
    {
      v3->_textures[1] = (MTLTexture *)v4;
      v3->_texturesToBind[0] |= 2uLL;
    }
    if (v41)
    {
      v24 = 0;
      v25 = v6 - v41;
      if ((uint64_t)(v6 - v41) >= -1)
        v25 = -1;
      v38 = v25 + 1;
      do
      {
        v26 = v6;
        if (v6 < 2)
        {
          v30 = 0;
        }
        else
        {
          v27 = v39;
          v28 = objc_msgSend(v39, "pixelFormat");
          v29 = objc_msgSend(v27, "newTextureViewWithPixelFormat:textureType:levels:slices:", v28, 5, v38 + v24, 1, 0, 6);
          v30 = (void *)v29;
          if (v3->_textures[1] != (MTLTexture *)v29)
          {
            v3->_textures[1] = (MTLTexture *)v29;
            v3->_texturesToBind[0] |= 2uLL;
          }
        }
        v44 = 0.0;
        v44 = (float)v24 / (float)(unint64_t)(objc_msgSend(v5, "mipmapLevelCount") - 1);
        SCNMTLComputeCommandEncoder::setBytes(v3, &v44, 4uLL, 0);
        v43 = *(_DWORD *)&v40[4 * v24];
        SCNMTLComputeCommandEncoder::setBytes(v3, &v43, 4uLL, 1uLL);
        v31 = 0;
        do
        {
          if (HasFeatures)
          {
            v32 = (MTLTexture *)objc_msgSend(v5, "newTextureViewWithPixelFormat:textureType:levels:slices:", v8, 5, v24, 1, 0, 6);
            v33 = v32;
            if (v3->_textures[0] != v32)
            {
              v3->_textures[0] = v32;
              v3->_texturesToBind[0] |= 1uLL;
            }
            SCNMTLComputeCommandEncoder::dispatchOnTextureCube(v3, v32);
          }
          else
          {
            v42 = v31;
            SCNMTLComputeCommandEncoder::setBytes(v3, &v42, 4uLL, 2uLL);
            v34 = (MTLTexture *)objc_msgSend(v5, "newTextureViewWithPixelFormat:textureType:levels:slices:", v8, 2, v24, 1, v31, 1);
            v33 = v34;
            if (v3->_textures[0] != v34)
            {
              v3->_textures[0] = v34;
              v3->_texturesToBind[0] |= 1uLL;
            }
            SCNMTLComputeCommandEncoder::dispatchOnGrid2D(v3, -[MTLTexture width](v34, "width"), -[MTLTexture height](v34, "height"));
          }

          v36 = v31++ > 4 || HasFeatures;
        }
        while ((v36 & 1) == 0);

        ++v24;
        v6 = v26;
      }
      while (v24 != v41);
    }
  }
}

const char *C3D::ComputeRadiancePass::name(C3D::ComputeRadiancePass *this)
{
  return "ComputeRadiancePass";
}

void C3D::ComputeRadiancePass::Resource::~Resource(C3D::ComputeRadiancePass::Resource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599B48;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599B48;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t _createConstraintFromDefinition(uint64_t a1)
{
  uint64_t v2;
  id v3;
  btRigidBody *v4;
  unsigned int v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  btRigidBody *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float v25;
  NSObject *v26;
  btRigidBody *v27;
  unsigned int v28;
  unsigned int v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  btTransform v38;
  btTransform v39;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(id *)a1;
  if (v2)
  {
    v4 = (btRigidBody *)objc_msgSend(v3, "_handle");
    v5 = *(_DWORD *)(a1 + 12);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(float *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 28);
    v9 = *(_DWORD *)(a1 + 32);
    v10 = *(_DWORD *)(a1 + 40);
    v11 = *(_DWORD *)(a1 + 44);
    v12 = *(_DWORD *)(a1 + 48);
    v13 = *(_DWORD *)(a1 + 64);
    v39.var0.var0[0].var0.var0[0] = *(float *)(a1 + 8);
    v39.var0.var0[0].var0.var0[1] = v7;
    *(_QWORD *)&v39.var0.var0[0].var0.var0[2] = v10;
    *(_QWORD *)v39.var0.var0[1].var0.var0 = __PAIR64__(v8, v5);
    *(_QWORD *)&v39.var0.var0[1].var0.var0[2] = v11;
    *(_QWORD *)v39.var0.var0[2].var0.var0 = __PAIR64__(v9, v6);
    *(_QWORD *)&v39.var0.var0[2].var0.var0[2] = v12;
    *(_QWORD *)v39.var1.var0.var0 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v39.var1.var0.var0[2] = v13;
    v14 = (btRigidBody *)objc_msgSend(*(id *)(a1 + 72), "_handle");
    v15 = *(_DWORD *)(a1 + 84);
    v16 = *(_DWORD *)(a1 + 88);
    v17 = *(_DWORD *)(a1 + 96);
    v18 = *(_DWORD *)(a1 + 100);
    v19 = *(_DWORD *)(a1 + 104);
    v20 = *(_DWORD *)(a1 + 112);
    v21 = *(_DWORD *)(a1 + 116);
    v22 = *(_DWORD *)(a1 + 120);
    v23 = *(_DWORD *)(a1 + 136);
    v38.var0.var0[0].var0.var0[0] = *(float *)(a1 + 80);
    *(_QWORD *)&v38.var0.var0[0].var0.var0[1] = __PAIR64__(v20, v17);
    v38.var0.var0[0].var0.var0[3] = 0.0;
    *(_QWORD *)v38.var0.var0[1].var0.var0 = __PAIR64__(v18, v15);
    *(_QWORD *)&v38.var0.var0[1].var0.var0[2] = v21;
    *(_QWORD *)v38.var0.var0[2].var0.var0 = __PAIR64__(v19, v16);
    *(_QWORD *)&v38.var0.var0[2].var0.var0[2] = v22;
    *(_QWORD *)v38.var1.var0.var0 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)&v38.var1.var0.var0[2] = v23;
    v24 = btAlignedAllocInternal(704, 16);
    btConeTwistConstraint::btConeTwistConstraint((btConeTwistConstraint *)v24, v4, v14, &v39, &v38);
    v25 = *(double *)(a1 + 160);
    *(float32x2_t *)(v24 + 512) = vcvt_f32_f64(*(float64x2_t *)(a1 + 144));
    *(float *)(v24 + 520) = v25;
    *(_QWORD *)(v24 + 496) = 0x3E99999A3F000000;
    *(_DWORD *)(v24 + 504) = 1065353216;
    *(_BYTE *)(v24 + 592) = 1;
  }
  else
  {
    if (!v3)
    {
      v26 = scn_default_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        _createConstraintFromDefinition(v26);
    }
    v27 = (btRigidBody *)objc_msgSend(*(id *)a1, "_handle");
    v28 = *(_DWORD *)(a1 + 12);
    v29 = *(_DWORD *)(a1 + 16);
    v30 = *(float *)(a1 + 24);
    v31 = *(_DWORD *)(a1 + 28);
    v32 = *(_DWORD *)(a1 + 32);
    v33 = *(_DWORD *)(a1 + 40);
    v34 = *(_DWORD *)(a1 + 44);
    v35 = *(_DWORD *)(a1 + 48);
    v36 = *(_DWORD *)(a1 + 64);
    v39.var0.var0[0].var0.var0[0] = *(float *)(a1 + 8);
    v39.var0.var0[0].var0.var0[1] = v30;
    *(_QWORD *)&v39.var0.var0[0].var0.var0[2] = v33;
    *(_QWORD *)v39.var0.var0[1].var0.var0 = __PAIR64__(v31, v28);
    *(_QWORD *)&v39.var0.var0[1].var0.var0[2] = v34;
    *(_QWORD *)v39.var0.var0[2].var0.var0 = __PAIR64__(v32, v29);
    *(_QWORD *)&v39.var0.var0[2].var0.var0[2] = v35;
    *(_QWORD *)v39.var1.var0.var0 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v39.var1.var0.var0[2] = v36;
    v24 = btAlignedAllocInternal(704, 16);
    btConeTwistConstraint::btConeTwistConstraint((btConeTwistConstraint *)v24, v27, &v39);
  }
  return v24;
}

{
  btVector3 v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  btVector3 v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  id v38;
  btRigidBody *v39;
  btRigidBody *v40;
  uint64_t v41;
  NSObject *v42;
  btRigidBody *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  double v48;
  float v49;
  float v50;
  double v51;
  float v52;
  float v53;
  btTransform v55;
  btTransform v56;

  *(_QWORD *)v2.var0.var0 = *(_QWORD *)(a1 + 28);
  *(_QWORD *)&v2.var0.var0[2] = *(unsigned int *)(a1 + 36);
  v56.var1 = v2;
  v4 = *(float *)(a1 + 16);
  v3 = *(float *)(a1 + 20);
  v5 = *(float *)(a1 + 24);
  if (fabsf(v5) <= 0.70711)
  {
    v14 = (float)(v3 * v3) + (float)(v4 * v4);
    v15 = 1.0 / sqrtf(v14);
    v13 = -(float)(v3 * v15);
    v8 = v4 * v15;
    v10 = -(float)(v5 * (float)(v4 * v15));
    v11 = v5 * v13;
    v12 = v14 * v15;
    v9 = 0.0;
  }
  else
  {
    v6 = (float)(v5 * v5) + (float)(v3 * v3);
    v7 = 1.0 / sqrtf(v6);
    v8 = -(float)(v5 * v7);
    v9 = v3 * v7;
    v10 = v6 * v7;
    v11 = -(float)(v4 * (float)(v3 * v7));
    v12 = v4 * v8;
    v13 = 0.0;
  }
  v56.var0.var0[0].var0.var0[0] = *(float *)(a1 + 16);
  v56.var0.var0[0].var0.var0[1] = v13;
  *(_QWORD *)&v56.var0.var0[0].var0.var0[2] = LODWORD(v10);
  *(_QWORD *)v56.var0.var0[1].var0.var0 = __PAIR64__(LODWORD(v8), LODWORD(v3));
  *(_QWORD *)&v56.var0.var0[1].var0.var0[2] = LODWORD(v11);
  *(_QWORD *)v56.var0.var0[2].var0.var0 = __PAIR64__(LODWORD(v9), LODWORD(v5));
  *(_QWORD *)&v56.var0.var0[2].var0.var0[2] = LODWORD(v12);
  *(_QWORD *)v16.var0.var0 = *(_QWORD *)(a1 + 52);
  *(_QWORD *)&v16.var0.var0[2] = *(unsigned int *)(a1 + 60);
  v55.var1 = v16;
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = *(float *)(a1 + 48);
  v20 = fabsf(v19) <= 0.70711;
  v21 = (float)(v18 * v18) + (float)(v17 * v17);
  v22 = 1.0 / sqrtf(v21);
  v23 = -(float)(v18 * v22);
  v24 = v17 * v22;
  v25 = -(float)(v19 * (float)(v17 * v22));
  v26 = v19 * v23;
  v27 = v21 * v22;
  v28 = 0.0;
  v29 = (float)(v19 * v19) + (float)(v18 * v18);
  v30 = 1.0 / sqrtf(v29);
  v31 = -(float)(v19 * v30);
  v32 = v18 * v30;
  v33 = v29 * v30;
  v34 = -(float)(v17 * v32);
  if (v20)
    v33 = v25;
  else
    v23 = 0.0;
  v55.var0.var0[0].var0.var0[0] = *(float *)(a1 + 40);
  *(_QWORD *)&v55.var0.var0[0].var0.var0[1] = __PAIR64__(LODWORD(v33), LODWORD(v23));
  v55.var0.var0[0].var0.var0[3] = 0.0;
  v35 = v17 * v31;
  if (v20)
    v36 = v24;
  else
    v36 = v31;
  if (v20)
  {
    v37 = v26;
  }
  else
  {
    v28 = v32;
    v27 = v35;
    v37 = v34;
  }
  *(_QWORD *)v55.var0.var0[1].var0.var0 = __PAIR64__(LODWORD(v36), LODWORD(v18));
  *(_QWORD *)&v55.var0.var0[1].var0.var0[2] = LODWORD(v37);
  *(_QWORD *)v55.var0.var0[2].var0.var0 = __PAIR64__(LODWORD(v28), LODWORD(v19));
  *(_QWORD *)&v55.var0.var0[2].var0.var0[2] = LODWORD(v27);
  v38 = *(id *)a1;
  if (*(_QWORD *)(a1 + 8))
  {
    v39 = (btRigidBody *)objc_msgSend(v38, "_handle", *(_QWORD *)v55.var0.var0[0].var0.var0, *(_QWORD *)&v55.var0.var0[0].var0.var0[2], *(_QWORD *)v55.var0.var0[1].var0.var0, *(_QWORD *)&v55.var0.var0[1].var0.var0[2], *(_QWORD *)v55.var0.var0[2].var0.var0, *(_QWORD *)&v55.var0.var0[2].var0.var0[2], *(_OWORD *)&v55.var1, *(_OWORD *)v56.var0.var0, *(_OWORD *)&v56.var0.var0[1], *(_OWORD *)&v56.var0.var0[2], *(_OWORD *)&v56.var1);
    v40 = (btRigidBody *)objc_msgSend(*(id *)(a1 + 8), "_handle");
    v41 = btAlignedAllocInternal(1248, 16);
    btSliderConstraint::btSliderConstraint((btSliderConstraint *)v41, v39, v40, &v56, &v55, 1);
  }
  else
  {
    if (!v38)
    {
      v42 = scn_default_log();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
        _createConstraintFromDefinition(v42);
    }
    v43 = (btRigidBody *)objc_msgSend(*(id *)a1, "_handle", *(_QWORD *)v55.var0.var0[0].var0.var0, *(_QWORD *)&v55.var0.var0[0].var0.var0[2], *(_QWORD *)v55.var0.var0[1].var0.var0, *(_QWORD *)&v55.var0.var0[1].var0.var0[2], *(_QWORD *)v55.var0.var0[2].var0.var0, *(_QWORD *)&v55.var0.var0[2].var0.var0[2], *(_OWORD *)&v55.var1, *(_OWORD *)v56.var0.var0, *(_OWORD *)&v56.var0.var0[1], *(_OWORD *)&v56.var0.var0[2], *(_OWORD *)&v56.var1);
    v41 = btAlignedAllocInternal(1248, 16);
    btSliderConstraint::btSliderConstraint((btSliderConstraint *)v41, v43, &v56, 1);
  }
  *(float32x2_t *)(v41 + 212) = vcvt_f32_f64(*(float64x2_t *)(a1 + 64));
  v44 = *(double *)(a1 + 80);
  v45 = fmodf(v44, 6.2832);
  if (v45 >= -3.1416)
  {
    if (v45 > 3.1416)
      v45 = v45 + -6.2832;
  }
  else
  {
    v45 = v45 + 6.2832;
  }
  *(float *)(v41 + 220) = v45;
  v46 = *(double *)(a1 + 88);
  v47 = fmodf(v46, 6.2832);
  if (v47 >= -3.1416)
  {
    if (v47 > 3.1416)
      v47 = v47 + -6.2832;
  }
  else
  {
    v47 = v47 + 6.2832;
  }
  *(float *)(v41 + 224) = v47;
  v48 = *(double *)(a1 + 96);
  if (v48 != 0.0)
  {
    *(_BYTE *)(v41 + 1216) = 1;
    v49 = v48;
    *(float *)(v41 + 1220) = v49;
    v50 = *(double *)(a1 + 104);
    *(float *)(v41 + 1224) = v50;
  }
  v51 = *(double *)(a1 + 112);
  if (v51 != 0.0)
  {
    *(_BYTE *)(v41 + 1232) = 1;
    v52 = v51;
    *(float *)(v41 + 1236) = v52;
    v53 = *(double *)(a1 + 120);
    *(float *)(v41 + 1240) = v53;
  }
  return v41;
}

void sub_1DCED6374(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

__n128 *C3DIOCreateSceneWithData(const __CFData *a1, uint64_t a2, const void *a3, CFDictionaryRef theDict, uint64_t a5)
{
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  __n128 *v11;

  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("__library__"), a3);
  v11 = _C3DIOCreateSceneWithData(a1, a2, a3, v10, a5);
  CFRelease(v10);
  return v11;
}

__n128 *_C3DIOCreateSceneWithData(CFDataRef data, uint64_t a2, const void *a3, __CFDictionary *a4, uint64_t a5)
{
  __n128 *v10;
  const __CFDictionary *v11;
  const __CFString *Value;
  const __CFString *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CFNumberRef v19;
  NSObject *v20;
  NSObject *v21;
  CFErrorRef v22;
  const __CFBoolean *v24;
  const void *v25;
  const __CFData *v26;
  const __CFData *v27;
  const void *v28;
  NSObject *v29;
  const void *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  const void *v34;
  const void *v35;
  NSObject *v36;
  const void *v37;
  const void *v38;
  const char *v39;
  CFNumberRef v40;
  __CFDictionary *Mutable;
  const void *v42;
  void *TypeID;
  const void **v44;
  __CFString **v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  CFIndex i;
  uint64_t v57;
  CFIndex AnimationCount;
  CFIndex v59;
  CFIndex j;
  const void *AnimationAtIndex;
  CFIndex v62;
  CFIndex v63;
  _WORD *v64;
  __CFString *Name;
  CFTypeRef *Copy;
  _BOOL4 v67;
  _BOOL4 v68;
  int v69;
  float v70;
  uint64_t AnimationManager;
  __CFString *v72;
  CFIndex v73;
  float Unit;
  __n128 v75;
  CFTypeRef cf;
  CFPropertyListFormat format;
  char v78;
  double valuePtr;
  CFErrorRef error;
  uint8_t buf[16];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  valuePtr = 0.0;
  error = 0;
  v78 = 0;
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 4, 0, &v78, 0.0);
    v10 = 0;
    if (v78)
      return v10;
  }
  format = 0;
  v11 = (const __CFDictionary *)CFPropertyListCreateWithData(0, data, 0, &format, 0);
  if (v11)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      Value = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("version"));
      v13 = (const __CFString *)CFDictionaryGetValue(v11, CFSTR("readerMinimumRequiredVersion"));
      valuePtr = C3DParseVersionNumber(Value);
      v14 = C3DParseVersionNumber(CFSTR("0.12"));
      v15 = v14;
      if (v13)
        v16 = C3DParseVersionNumber(v13);
      else
        v16 = v14;
      v17 = C3DParseVersionNumber(CFSTR("0.10"));
      v18 = C3DParseVersionNumber(CFSTR("0.9"));
      v19 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      CFDictionarySetValue(a4, CFSTR("versionNumber"), v19);
      CFRelease(v19);
      if (valuePtr < v17)
      {
        v20 = scn_default_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          _C3DIOCreateSceneWithData_cold_1();
          if (!a5)
            goto LABEL_25;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      if (v16 > v15)
      {
        v21 = scn_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          _C3DIOCreateSceneWithData_cold_2();
          if (!a5)
            goto LABEL_25;
          goto LABEL_24;
        }
LABEL_23:
        if (!a5)
        {
LABEL_25:
          CFRelease(v11);
          return 0;
        }
LABEL_24:
        v22 = CFErrorCreate(0, CFSTR("SCNKitErrorDomain"), 1, 0);
        (*(void (**)(uint64_t, uint64_t, CFErrorRef, char *, float))(a5 + 16))(a5, 0xFFFFFFFFLL, v22, &v78, 0.0);
        CFRelease(v22);
        goto LABEL_25;
      }
      if (valuePtr >= v18)
      {
        v24 = (const __CFBoolean *)CFDictionaryGetValue(v11, CFSTR("zipped"));
        if (v24)
        {
          if (CFBooleanGetValue(v24))
          {
            v25 = CFDictionaryGetValue(v11, CFSTR("zippedData"));
            if (v25)
            {
              v26 = (const __CFData *)C3DIOCreateUnzippedData((uint64_t)v25);
              if (v26)
              {
                v27 = v26;
                CFRelease(v11);
                v11 = (const __CFDictionary *)CFPropertyListCreateWithData(0, v27, 0, &format, &error);
                CFRelease(v27);
                if (!v11)
                {
                  v48 = scn_default_log();
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                    _C3DIOCreateSceneWithData_cold_9((uint64_t)&error, v48, v49, v50, v51, v52, v53, v54);
                  if (error)
                  {
                    CFRelease(error);
                    error = 0;
                  }
                  __EmitMalformedDocumentErrorIfNeeded(a5, (uint64_t)&v78);
                  return 0;
                }
                if (error)
                {
                  CFRelease(error);
                  error = 0;
                }
                goto LABEL_36;
              }
              v47 = scn_default_log();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                _C3DIOCreateSceneWithData_cold_8();
            }
            else
            {
              v46 = scn_default_log();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                _C3DIOCreateSceneWithData_cold_7();
            }
            __EmitMalformedDocumentErrorIfNeeded(a5, (uint64_t)&v78);
            goto LABEL_25;
          }
        }
      }
LABEL_36:
      if (a5)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 12, 0, &v78, 0.2);
        if (v78)
          goto LABEL_25;
      }
      cf = 0;
      v28 = CFDictionaryGetValue(v11, CFSTR("library"));
      if (!v28)
      {
        v33 = scn_default_log();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          _C3DIOCreateSceneWithData_cold_3();
        __EmitMalformedDocumentErrorIfNeeded(a5, (uint64_t)&v78);
        v10 = 0;
        goto LABEL_10;
      }
      if ((C3DInitWithPropertyList(a3, (uint64_t)v28, (uint64_t)a4, (uint64_t)&cf) & 1) == 0)
      {
        v29 = scn_default_log();
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          if (!a5)
            goto LABEL_43;
          goto LABEL_42;
        }
        _C3DIOCreateSceneWithData_cold_6();
        if (a5)
LABEL_42:
          (*(void (**)(uint64_t, uint64_t, CFTypeRef, char *, float))(a5 + 16))(a5, 0xFFFFFFFFLL, cf, &v78, 1.0);
      }
LABEL_43:
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (a5)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 12, 0, &v78, 0.4);
        v10 = 0;
        if (v78)
          goto LABEL_10;
      }
      v30 = CFDictionaryGetValue(v11, CFSTR("scene"));
      if (!v30)
      {
        v10 = 0;
        goto LABEL_58;
      }
      v31 = (uint64_t)v30;
      v10 = (__n128 *)C3DSceneCreate();
      if ((C3DInitWithPropertyList(v10, v31, (uint64_t)a4, (uint64_t)&cf) & 1) == 0)
      {
        v32 = scn_default_log();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          if (!a5)
            goto LABEL_52;
          goto LABEL_51;
        }
        _C3DIOCreateSceneWithData_cold_5();
        if (a5)
LABEL_51:
          (*(void (**)(uint64_t, uint64_t, CFTypeRef, char *, float))(a5 + 16))(a5, 0xFFFFFFFFLL, cf, &v78, 1.0);
      }
LABEL_52:
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
LABEL_58:
      if (a5)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 12, 0, &v78, 0.5);
        if (v78)
          goto LABEL_10;
      }
      v34 = CFDictionaryGetValue(v11, CFSTR("scene"));
      if (!v34)
        goto LABEL_64;
      if (C3DFinalizeDeserialization(v10, (uint64_t)a3, (uint64_t)v34, (uint64_t)&cf))
      {
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
LABEL_64:
        if (!a5
          || ((*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 12, 0, &v78, 0.6), !v78))
        {
          v35 = CFDictionaryGetValue(v11, CFSTR("library"));
          if (v35)
          {
            if (!C3DFinalizeDeserialization(a3, (uint64_t)a3, (uint64_t)v35, (uint64_t)&cf))
            {
              v36 = scn_default_log();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1DCCB8000, v36, OS_LOG_TYPE_DEFAULT, "Warning: cannot finalize library deserialization", buf, 2u);
              }
            }
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
          if (!a5
            || ((*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 12, 0, &v78, 0.9),
                !v78))
          {
            v37 = CFDictionaryGetValue(v11, CFSTR("created"));
            if (v37)
            {
              v38 = v37;
              C3DSceneSourceSetProperty(a2, CFSTR("created"), v37);
              C3DSceneSourceSetProperty(a2, CFSTR("modified"), v38);
            }
            v75.n128_u32[2] = 0;
            v75.n128_u64[0] = 0;
            C3DSceneGetUpAxis(v10, &v75);
            snprintf((char *)buf, 0x10uLL, "%.1f %.1f %.1f", v75.n128_f32[0], v75.n128_f32[1], v75.n128_f32[2]);
            v39 = C3DIOCreateCFStringFromCString((const char *)buf);
            C3DSceneSourceSetProperty(a2, CFSTR("up_axis"), v39);
            CFRelease(v39);
            Unit = C3DSceneGetUnit((uint64_t)v10);
            v40 = CFNumberCreate(0, kCFNumberFloatType, &Unit);
            Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySetValue(Mutable, CFSTR("unitName"), CFSTR("meter"));
            CFDictionarySetValue(Mutable, CFSTR("unitMeter"), v40);
            C3DSceneSourceSetProperty(a2, CFSTR("unit"), Mutable);
            CFRelease(v40);
            CFRelease(Mutable);
            v42 = CFDictionaryGetValue(v11, CFSTR("contributors"));
            if (v42)
              C3DSceneSourceSetProperty(a2, CFSTR("contributors"), v42);
            v73 = 0;
            TypeID = (void *)C3DAnimationGroupGetTypeID();
            v44 = C3DLibraryCopyEntriesWithKind((uint64_t)a3, TypeID, &v73);
            AnimationManager = C3DSceneGetAnimationManager((uint64_t)v10);
            if (!a4 || (v72 = (__CFString *)CFDictionaryGetValue(a4, CFSTR("kSceneSourceAnimationLoadingMode"))) == 0)
            {
              if (C3DWasLinkedBeforeMajorOSYear2014())
                v45 = kC3DIOSceneSourceAnimationLoadingModePlayUsingSceneTime;
              else
                v45 = kC3DIOSceneSourceAnimationLoadingModePlayRepeatedly;
              v72 = *v45;
            }
            if (v44 && v72 != CFSTR("keepSeparate"))
            {
              if (v73 >= 1)
              {
                for (i = 0; i < v73; ++i)
                {
                  v57 = (uint64_t)v44[i];
                  AnimationCount = C3DAnimationGroupGetAnimationCount(v57);
                  if (AnimationCount >= 1)
                  {
                    v59 = AnimationCount;
                    for (j = 0; j != v59; ++j)
                    {
                      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(v57, j);
                      if (C3DAnimationIsGroup(AnimationAtIndex))
                        _flagChildAnimationGroup((uint64_t)AnimationAtIndex);
                    }
                  }
                  v62 = v73;
                }
                if (v73 >= 1)
                {
                  v63 = 0;
                  do
                  {
                    v64 = v44[v63];
                    if ((v64[42] & 0x1000) == 0)
                    {
                      Name = (__CFString *)C3DAnimationGetName((uint64_t)v44[v63]);
                      if (!Name)
                      {
                        Name = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("unnamed animation #%d"), v63);
                        C3DAnimationSetName((uint64_t)v64, Name);
                        CFRelease(Name);
                      }
                      Copy = C3DAnimationCreateCopy(v64);
                      v67 = CFEqual(v72, CFSTR("playUsingSceneTime")) != 0;
                      C3DAnimationSetIsSceneTimeBased((uint64_t)Copy, v67);
                      v68 = CFEqual(v72, CFSTR("playUsingSceneTime")) == 0;
                      C3DAnimationSetRemoveOnCompletion((uint64_t)Copy, v68);
                      v69 = CFEqual(v72, CFSTR("playRepeatedly"));
                      v70 = INFINITY;
                      if (!v69)
                        v70 = 0.0;
                      C3DAnimationSetRepeatCount((uint64_t)Copy, v70);
                      C3DAnimationManagerAddAnimationToSceneForKey(AnimationManager, Copy, v10, (uint64_t)a3, Name);
                      CFRelease(Copy);
                      v62 = v73;
                    }
                    ++v63;
                  }
                  while (v63 < v62);
                }
              }
              free(v44);
            }
            goto LABEL_8;
          }
        }
LABEL_10:
        if (v10)
          CFRelease(v10);
        if (!v11)
          return 0;
        goto LABEL_25;
      }
      v55 = scn_default_log();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        _C3DIOCreateSceneWithData_cold_4();
        if (!a5)
        {
LABEL_97:
          if (cf)
            CFRelease(cf);
          goto LABEL_10;
        }
      }
      else if (!a5)
      {
        goto LABEL_97;
      }
      (*(void (**)(uint64_t, uint64_t, CFTypeRef, char *, float))(a5 + 16))(a5, 0xFFFFFFFFLL, cf, &v78, 1.0);
      goto LABEL_97;
    }
  }
  v10 = 0;
LABEL_8:
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 16, 0, &v78, 1.0);
    if (v78)
      goto LABEL_10;
  }
  if (v11)
    CFRelease(v11);
  return v10;
}

__n128 *C3DIOCreateSceneAtURL(const __CFURL *a1, uint64_t a2, const void *a3, CFDictionaryRef theDict, uint64_t a5)
{
  __CFDictionary *v9;
  const __CFData *v10;
  const __CFData *v11;
  __n128 *v12;

  v9 = C3DIOCreateImportContextFromOptions(theDict, a1);
  CFDictionarySetValue(v9, CFSTR("__library__"), a3);
  v10 = (const __CFData *)C3DCreateDataWithContentOfURL((uint64_t)a1, 0);
  if (!v10)
  {
    v12 = 0;
    if (!v9)
      return v12;
    goto LABEL_3;
  }
  v11 = v10;
  v12 = _C3DIOCreateSceneWithData(v10, a2, a3, v9, a5);
  CFRelease(v11);
  if (v9)
LABEL_3:
    CFRelease(v9);
  return v12;
}

__CFDictionary *_C3DCreatePropertyListFromScene(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5)
{
  __CFDictionary *Mutable;
  const __CFBoolean *Value;
  __CFDictionary *v11;
  int v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  __CFDictionary *v17;
  __CFBundle *MainBundle;
  CFStringRef Identifier;
  __CFString *v20;
  __CFArray *v21;
  __CFWriteStream *v22;
  CFTypeRef v23;
  const void *v24;
  const void **v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  CFErrorRef v34;
  __n128 v35;
  NSObject *v36;
  __n128 v37;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;

  v46 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("version"), CFSTR("0.12"));
  CFDictionarySetValue(Mutable, CFSTR("readerMinimumRequiredVersion"), CFSTR("0.11"));
  if (a3
    && (Value = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("kCreatePropertyListShouldZipOption"))) != 0
    && CFBooleanGetValue(Value))
  {
    v11 = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = 1;
    if (!a5)
      goto LABEL_8;
  }
  else
  {
    v11 = (__CFDictionary *)CFRetain(Mutable);
    v12 = 0;
    if (!a5)
      goto LABEL_8;
  }
  v45 = 0;
  (*(void (**)(uint64_t, _QWORD, char *, float))(a5 + 16))(a5, 0, &v45, 0.1);
  if (v45)
    goto LABEL_39;
LABEL_8:
  v13 = (const void *)C3DCopyPropertyList(a2, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v46);
  if (v13)
  {
    v14 = v13;
    CFDictionaryAddValue(v11, CFSTR("library"), v13);
    CFRelease(v14);
  }
  if (a5)
  {
    v44 = 0;
    (*(void (**)(uint64_t, uint64_t, char *, float))(a5 + 16))(a5, v46, &v44, 0.5);
    if (v44)
      goto LABEL_39;
  }
  v15 = (const void *)C3DCopyPropertyList(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)&v46);
  if (v15)
  {
    v16 = v15;
    CFDictionaryAddValue(v11, CFSTR("scene"), v15);
    CFRelease(v16);
  }
  if (a5)
  {
    v43 = 0;
    (*(void (**)(uint64_t, uint64_t, char *, float))(a5 + 16))(a5, v46, &v43, 0.75);
    if (v43)
      goto LABEL_39;
  }
  v17 = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MainBundle = CFBundleGetMainBundle();
  Identifier = CFBundleGetIdentifier(MainBundle);
  v20 = Identifier ? (__CFString *)Identifier : CFSTR("SceneKit");
  CFDictionarySetValue(v17, CFSTR("authoring_tool"), v20);
  CFDictionarySetValue(v17, CFSTR("author"), CFSTR("SceneKit"));
  v21 = CFArrayCreateMutable(0, 1, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(v21, v17);
  CFDictionaryAddValue(v11, CFSTR("contributors"), v21);
  CFRelease(v21);
  CFRelease(v17);
  if (a5)
  {
    v42 = 0;
    (*(void (**)(uint64_t, uint64_t, char *, float))(a5 + 16))(a5, v46, &v42, 0.77);
    if (v42)
      goto LABEL_39;
  }
  if (!v12)
  {
    v25 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_26;
  }
  v22 = CFWriteStreamCreateWithAllocatedBuffers(0, 0);
  CFWriteStreamOpen(v22);
  CFPropertyListWrite(v11, v22, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFWriteStreamClose(v22);
  v23 = CFWriteStreamCopyProperty(v22, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
  CFRelease(v22);
  if (!v23)
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      _C3DCreatePropertyListFromScene_cold_2((uint64_t)v11, v26, v27, v28, v29, v30, v31, v32);
    CFRelease(v11);
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      _C3DCreatePropertyListFromScene_cold_1();
      if (!a5)
        goto LABEL_39;
    }
    else if (!a5)
    {
      goto LABEL_39;
    }
    v41 = 1;
    v34 = C3DErrorCreate(0, CFSTR("Could not get the data for the serialized property list"), 0);
    v35.n128_u32[0] = 1061997773;
    (*(void (**)(uint64_t, uint64_t, char *, __n128))(a5 + 16))(a5, v46, &v41, v35);
    goto LABEL_37;
  }
  v24 = C3DIOCreateZippedData((uint64_t)v23);
  CFRelease(v23);
  if (!v24)
  {
    CFRelease(v11);
    v36 = scn_default_log();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      _C3DCreatePropertyListFromScene_cold_3();
      if (a5)
        goto LABEL_36;
    }
    else if (a5)
    {
LABEL_36:
      v40 = 1;
      v34 = C3DErrorCreate(0, CFSTR("Could not zip the serialized property list"), 0);
      v37.n128_u32[0] = 1062836634;
      (*(void (**)(uint64_t, uint64_t, char *, __n128))(a5 + 16))(a5, v46, &v40, v37);
LABEL_37:
      if (v34)
        CFRelease(v34);
    }
LABEL_39:
    CFRelease(Mutable);
    return 0;
  }
  CFDictionaryAddValue(Mutable, CFSTR("zippedData"), v24);
  CFRelease(v24);
  v25 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_26:
  CFDictionaryAddValue(Mutable, CFSTR("zipped"), *v25);
  CFRelease(v11);
  if (a5)
  {
    v39 = 0;
    (*(void (**)(uint64_t, uint64_t, char *, float))(a5 + 16))(a5, v46, &v39, 1.0);
    if (v39)
      goto LABEL_39;
  }
  return Mutable;
}

__CFDictionary *C3DCreatePropertyListFromScene(const void *a1, const void *a2, const __CFDictionary *a3, uint64_t a4)
{
  return _C3DCreatePropertyListFromScene(a1, a2, a3, a4, 0);
}

BOOL C3DIOWriteSceneToURL(const __CFURL *a1, const void *a2, const __CFDictionary *a3, const void *a4, uint64_t a5)
{
  const void *v10;
  const void *Value;
  uint64_t v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  void *v19;
  const void **v20;
  CFIndex j;
  const void *v22;
  void *ID;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v25;
  const void *v26;
  CFURLRef PathComponent;
  CFURLRef v28;
  uint64_t v29;
  __CFDictionary *v30;
  __CFWriteStream *v31;
  __CFWriteStream *v32;
  _BOOL8 v33;
  const void *v35;
  const void *v36;
  uint64_t v37;
  const __CFURL *v38;
  CFIndex v39;
  void *valuePtr;

  v10 = (const void *)C3DLibraryCreate();
  C3DLibraryFillWithContentOfScene((uint64_t)v10, a2, (uint64_t)a3);
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("kSceneSourceInputLibrary"));
    if (Value)
    {
      v12 = (uint64_t)Value;
      v13 = C3DLibraryCopyKinds((uint64_t)Value);
      if (v13)
      {
        v14 = v13;
        v35 = a4;
        v36 = a2;
        v37 = a5;
        v38 = a1;
        Count = CFArrayGetCount(v13);
        if (Count >= 1)
        {
          v16 = Count;
          for (i = 0; i != v16; ++i)
          {
            ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v14, i);
            valuePtr = 0;
            CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr);
            v19 = valuePtr;
            if (v19 != (void *)C3DKeyframedAnimationGetTypeID() && v19 != (void *)C3DMeshSourceGetTypeID())
            {
              v39 = 0;
              v20 = C3DLibraryCopyEntriesWithKind(v12, v19, &v39);
              if (v39 >= 1)
              {
                for (j = 0; j < v39; ++j)
                {
                  v22 = v20[j];
                  ID = (void *)C3DEntityGetID((uint64_t)v22);
                  if (ID
                    && !C3DLibraryGetEntryWithDocumentID((uint64_t)v10, ID)
                    && (v19 != (void *)C3DAnimationGroupGetTypeID()
                     || C3DAnimationGroupIsAnimationClip((uint64_t)v22)))
                  {
                    C3DLibraryAddEntry((uint64_t)v10, v22);
                  }
                }
              }
              free(v20);
            }
          }
        }
        CFRelease(v14);
        a5 = v37;
        a1 = v38;
        a4 = v35;
        a2 = v36;
      }
    }
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a3);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v25 = MutableCopy;
  v26 = CFDictionaryGetValue(MutableCopy, CFSTR("SCNSceneExportDestinationURL"));
  if (!v26)
  {
    v26 = C3DCopyResolvedURLFromFileURL(a1);
    CFDictionarySetValue(v25, CFSTR("SCNSceneExportDestinationURL"), v26);
    CFRelease(v26);
  }
  if (CFURLHasDirectoryPath((CFURLRef)v26))
    PathComponent = CFURLCopyAbsoluteURL((CFURLRef)v26);
  else
    PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, (CFURLRef)v26);
  v28 = PathComponent;
  CFDictionarySetValue(v25, CFSTR("kEnclosingFolderURL"), PathComponent);
  CFRelease(v28);
  if (a4)
    CFDictionarySetValue(v25, CFSTR("kC3DIOSerializationExportDelegate"), a4);
  v30 = _C3DCreatePropertyListFromScene(a2, v10, v25, v29, a5);
  CFRelease(v25);
  if (v30)
  {
    v31 = CFWriteStreamCreateWithFile(0, a1);
    if (v31)
    {
      v32 = v31;
      if (CFWriteStreamOpen(v31))
      {
        v33 = CFPropertyListWrite(v30, v32, kCFPropertyListBinaryFormat_v1_0, 0, 0) != 0;
        CFWriteStreamClose(v32);
      }
      else
      {
        v33 = 0;
      }
      CFRelease(v32);
    }
    else
    {
      v33 = 0;
    }
    CFRelease(v30);
  }
  else
  {
    v33 = 0;
  }
  CFRelease(v10);
  return v33;
}

void __EmitMalformedDocumentErrorIfNeeded(uint64_t a1, uint64_t a2)
{
  CFErrorRef MalformedDocumentError;

  if (a1)
  {
    MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
    (*(void (**)(uint64_t, uint64_t, CFErrorRef, uint64_t, float))(a1 + 16))(a1, 0xFFFFFFFFLL, MalformedDocumentError, a2, 0.0);
    CFRelease(MalformedDocumentError);
  }
}

uint64_t _flagChildAnimationGroup(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  CFIndex i;
  const void *AnimationAtIndex;

  *(_WORD *)(a1 + 84) |= 0x1000u;
  result = C3DAnimationGroupGetAnimationCount(a1);
  if (result >= 1)
  {
    v3 = result;
    for (i = 0; i != v3; ++i)
    {
      AnimationAtIndex = C3DAnimationGroupGetAnimationAtIndex(a1, i);
      result = C3DAnimationIsGroup(AnimationAtIndex);
      if ((_DWORD)result)
        result = _flagChildAnimationGroup(AnimationAtIndex);
    }
  }
  return result;
}

double C3D::SSRRaytracePass::SSRRaytracePass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::RenderPass *v5;
  double result;

  v5 = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)v5 = off_1EA599518;
  *((_QWORD *)v5 + 31) = a4;
  result = 0.0;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  return result;
}

const char *C3D::SSRRaytracePass::name(C3D::SSRRaytracePass *this)
{
  return "SSRRaytracePass";
}

double C3D::SSRRaytracePass::setup(C3D::SSRRaytracePass *this)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v5;
  int v6;

  C3D::Pass::setInputCount(this, 3u);
  C3D::Pass::setOutputCount(this, 2u);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 0) + 8) = "ColorDownSampled";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 1u) + 8) = "Normals";
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 2u) + 8) = "DepthDownSampled";
  v2 = C3D::PassDescriptor::outputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "SSR";
  *(_BYTE *)(v2 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v5);
  *(_OWORD *)(v2 + 16) = v5;
  *(_DWORD *)(v2 + 32) = v6;
  *(_WORD *)(v2 + 16) = **((_WORD **)this + 31);
  *(_WORD *)(v2 + 18) = *(_WORD *)(*((_QWORD *)this + 31) + 2);
  *(_WORD *)(v2 + 66) &= 0xFFFCu;
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 1u);
  *(_QWORD *)(v3 + 8) = "lobeFootprint";
  *(_BYTE *)(v3 + 65) = 1;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v5);
  result = *(double *)&v5;
  *(_OWORD *)(v3 + 16) = v5;
  *(_DWORD *)(v3 + 32) = v6;
  *(_WORD *)(v3 + 28) = 115;
  *(_WORD *)(v3 + 16) = **((_WORD **)this + 31);
  *(_WORD *)(v3 + 18) = *(_WORD *)(*((_QWORD *)this + 31) + 2);
  *(_WORD *)(v3 + 66) &= 0xFFFCu;
  return result;
}

uint64_t C3D::SSRRaytracePass::compile(C3D::SSRRaytracePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t Scene;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  C3D::RenderGraphResourceManager *v10;
  uint64_t result;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[6];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  const __CFString *v38;
  const __CFString *v39;
  __int128 v40;
  __int128 v41;
  char v42;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  Scene = C3DEngineContextGetScene(*((_QWORD *)this + 2));
  if (Scene)
    v5 = C3DSceneGetFogEndDistance(Scene) > 0.0;
  else
    v5 = 0;
  *((_BYTE *)this + 392) = v5;
  v6 = -[SCNMTLRenderContext reverseZ](RenderContext);
  v42 = v6;
  v7 = ((2
       * *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 0) + 28)) << (4 * *((_BYTE *)this + 392))) | v6;
  v8 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::SSRRaytracePass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v7) ^ ((0xC6A4A7935BD1E995 * v7) >> 47))));
  v9 = (0xC6A4A7935BD1E995 * (v8 ^ (v8 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v8 ^ (v8 >> 47))) >> 47);
  v10 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  result = C3D::RenderGraphResourceManager::get(v10, v9);
  *((_QWORD *)this + 30) = result;
  if (!result)
  {
    v12 = (_QWORD *)operator new();
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1EA59A318;
    *((_QWORD *)this + 30) = v12;
    C3D::RenderGraphResourceManager::set((uint64_t)v10, v9, (uint64_t)v12);
    v13 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend(v13, "setConstantValue:type:withName:", &v42, 53, CFSTR("SSRReverseZ"));
    objc_msgSend(v13, "setConstantValue:type:withName:", *((_QWORD *)this + 31) + 4, 29, CFSTR("SSRDownSample"));
    objc_msgSend(v13, "setConstantValue:type:withName:", (char *)this + 392, 53, CFSTR("SSREnableFog"));
    v14 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
    v15 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::SSRRaytracePass *)((char *)this + 32), 0) + 28);
    v16 = *((_QWORD *)this + 30);
    memset(v21, 0, sizeof(v21));
    v22 = 0;
    v23 = v14;
    v24 = v15;
    v25 = 115;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v35 = 0;
    v36 = v13;
    v37 = 0;
    v38 = CFSTR("scn_ssr_raytrace_vert");
    v39 = CFSTR("scn_ssr_raytrace_frag");
    v40 = 0u;
    v41 = 0u;
    v17 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v21);
    v18 = *(void **)(v16 + 16);
    if (v18 != (void *)v17)
    {
      v19 = v17;
      if (v18)

      *(_QWORD *)(v16 + 16) = v19;
    }

    v20 = (void *)objc_msgSend((id)-[SCNMTLRenderContext commandQueue](RenderContext), "commandBuffer");
    *((_QWORD *)this + 48) = C3D::getBlueNoise32(v20, RenderContext, v10);
    return objc_msgSend(v20, "commit");
  }
  return result;
}

_OWORD *C3D::SSRRaytracePass::execute(uint64_t a1, uint64_t *a2)
{
  C3D::RenderGraphResourceManager *v4;
  uint64_t Scene;
  _OWORD *result;
  uint64_t v7;
  _OWORD *CullingContext;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float PointOfViewScale;
  __int128 v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void **v17;
  simd_float4x4 v18;

  v4 = *(C3D::RenderGraphResourceManager **)(*(_QWORD *)(a1 + 24) + 128);
  Scene = C3DEngineContextGetScene(*(_QWORD *)(a1 + 16));
  result = C3DEngineContextGetPointOfView(*(_QWORD *)(a1 + 16));
  if (result)
  {
    result = C3DNodeGetCamera((uint64_t)result);
    if (result)
    {
      v7 = *a2;
      CullingContext = (_OWORD *)C3D::DrawNodesPass::getCullingContext(*(C3D::DrawNodesPass **)(a1 + 8));
      v9 = CullingContext[218];
      v10 = CullingContext[219];
      v11 = CullingContext[220];
      *(_OWORD *)(a1 + 256) = CullingContext[217];
      *(_OWORD *)(a1 + 272) = v9;
      *(_OWORD *)(a1 + 288) = v10;
      *(_OWORD *)(a1 + 304) = v11;
      *(_DWORD *)(a1 + 336) = C3DSceneGetSSRSampleCount(Scene);
      *(float *)(a1 + 332) = fmaxf(C3DSceneGetSSRMaxRayDistance(Scene), 0.0);
      *(float *)(a1 + 328) = fmaxf(C3DSceneGetSSRStride(Scene), 1.0);
      *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8);
      PointOfViewScale = C3DEngineContextGetPointOfViewScale(*(_QWORD *)(a1 + 16));
      *(__n64 *)&v13 = C3DSceneComputeFogParameters(Scene, PointOfViewScale);
      *(_OWORD *)(a1 + 352) = v13;
      result = (_OWORD *)C3DSceneGetFogColor(Scene);
      *(_OWORD *)(a1 + 368) = *result;
      if (*(int *)(a1 + 336) >= 1)
      {
        *(_QWORD *)(a1 + 384) = C3D::getBlueNoise32(0, 0, v4);
        v14 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 240) + 16), "state");
        if (*(_QWORD *)(v7 + 3376) != v14)
        {
          *(_QWORD *)(v7 + 3376) = v14;
          objc_msgSend(*(id *)(v7 + 3392), "setRenderPipelineState:", v14);
        }
        v18 = __invert_f4(*(simd_float4x4 *)(a1 + 256));
        SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v7, &v18, 0x40uLL, 0);
        v15 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
        SCNMTLRenderCommandEncoder::setFragmentTexture(v7, v15, 0);
        v16 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 1u);
        SCNMTLRenderCommandEncoder::setFragmentTexture(v7, v16, 1uLL);
        v17 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 2u);
        SCNMTLRenderCommandEncoder::setFragmentTexture(v7, v17, 2uLL);
        SCNMTLRenderCommandEncoder::setFragmentTexture(v7, *(void **)(a1 + 384), 3uLL);
        SCNMTLRenderCommandEncoder::setFragmentBytes((SCNMTLRenderCommandEncoder *)v7, (const void *)(a1 + 256), 0x80uLL, 0);
        return (_OWORD *)SCNMTLRenderCommandEncoder::drawFullScreenQuad((SCNMTLRenderCommandEncoder *)v7);
      }
    }
  }
  return result;
}

void C3D::SSRRaytracePassResource::~SSRRaytracePassResource(C3D::SSRRaytracePassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A318;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A318;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void Mesh::AddVertex(Mesh *this, const SCNVector3 *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;

  v6 = *((_QWORD *)this + 2);
  v4 = (char *)this + 16;
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)this) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(_QWORD *)this) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = &v14[12 * v10];
    v16 = &v14[12 * v13];
    v17 = *(_QWORD *)&a2->x;
    *((_DWORD *)v15 + 2) = LODWORD(a2->z);
    *(_QWORD *)v15 = v17;
    v9 = v15 + 12;
    v19 = *(_DWORD **)this;
    v18 = (_DWORD *)*((_QWORD *)this + 1);
    if (v18 != *(_DWORD **)this)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 3);
        v18 -= 3;
        v21 = v18[2];
        *(_QWORD *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *(_DWORD **)this;
    }
    *(_QWORD *)this = v15;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = *(_QWORD *)&a2->x;
    *(float *)(v7 + 8) = a2->z;
    *(_QWORD *)v7 = v8;
    v9 = (char *)(v7 + 12);
  }
  *((_QWORD *)this + 1) = v9;
}

void Mesh::AddColor(Mesh *this, const C3DColor4 *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  C3DColor4 *v7;
  C3DColor4 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  C3DColor4 *v15;
  char *v16;
  C3DColor4 *v17;
  C3DColor4 *v18;

  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = (C3DColor4 *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *((_QWORD *)this + 3);
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v5 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v4, v13);
    else
      v14 = 0;
    v15 = (C3DColor4 *)&v14[16 * v10];
    v16 = &v14[16 * v13];
    *v15 = *a2;
    v8 = v15 + 1;
    v18 = (C3DColor4 *)*((_QWORD *)this + 3);
    v17 = (C3DColor4 *)*((_QWORD *)this + 4);
    if (v17 != v18)
    {
      do
      {
        v15[-1] = v17[-1];
        --v15;
        --v17;
      }
      while (v17 != v18);
      v17 = (C3DColor4 *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 3) = v15;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 4) = v8;
}

void Mesh::AddIndex(Mesh *this, __int16 a2)
{
  char *v3;
  unint64_t v4;
  __int16 v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v3 = (char *)this + 64;
  v4 = *((_QWORD *)this + 8);
  v5 = *((_WORD *)this + 36) + a2;
  v6 = (char *)*((_QWORD *)this + 7);
  if ((unint64_t)v6 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 6);
    v9 = v6 - v8;
    if (v6 - v8 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v4 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)v3, v13);
      v8 = (char *)*((_QWORD *)this + 6);
      v6 = (char *)*((_QWORD *)this + 7);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = v5;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *((_QWORD *)this + 6) = v15;
    *((_QWORD *)this + 7) = v7;
    *((_QWORD *)this + 8) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v6 = v5;
    v7 = v6 + 2;
  }
  *((_QWORD *)this + 7) = v7;
}

void Mesh::AllocateVertices(Mesh *this, unsigned int a2)
{
  std::vector<SCNVector3>::resize((uint64_t)this, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2) + a2);
  _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm((uint64_t)this + 24, ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4) + a2);
}

void std::vector<SCNVector3>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<SCNVector3>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

SCNGeometry *Mesh::CreateLineGeometry(Mesh *this)
{
  SCNGeometrySource *v2;
  SCNGeometryElement *v3;
  uint64_t v4;
  uint64_t v5;
  SCNGeometrySource *v6;
  uint64_t v7;
  void *v8;
  SCNGeometryElement **v9;
  SCNGeometry *v10;
  SCNGeometryElement *v12;
  SCNGeometrySource *v13;
  SCNGeometryElement *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v2 = +[SCNGeometrySource geometrySourceWithVertices:count:](SCNGeometrySource, "geometrySourceWithVertices:count:");
  v3 = +[SCNGeometryElement geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:](SCNGeometryElement, "geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)this + 6), *((_QWORD *)this + 7) - *((_QWORD *)this + 6)), 2, (unint64_t)((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1) >> 1, 2);
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  if (v4 == v5)
  {
    v13 = v2;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v13, 1);
    v12 = v3;
    v8 = (void *)MEMORY[0x1E0C99D20];
    v9 = &v12;
  }
  else
  {
    v6 = +[SCNGeometrySource geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:](SCNGeometrySource, "geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v4, v5 - v4), CFSTR("kGeometrySourceSemanticColor"), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4, 1, 4, 4, 0, 0);
    v15[0] = v2;
    v15[1] = v6;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 2);
    v14 = v3;
    v8 = (void *)MEMORY[0x1E0C99D20];
    v9 = &v14;
  }
  v10 = +[SCNGeometry geometryWithSources:elements:](SCNGeometry, "geometryWithSources:elements:", v7, objc_msgSend(v8, "arrayWithObjects:count:", v9, 1));
  objc_msgSend(-[SCNGeometry material](v10, "material"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  return v10;
}

SCNGeometry *Mesh::CreateTriangleGeometry(Mesh *this)
{
  SCNGeometrySource *v2;
  SCNGeometryElement *v3;
  uint64_t v4;
  uint64_t v5;
  SCNGeometrySource *v6;
  uint64_t v7;
  void *v8;
  SCNGeometryElement **v9;
  SCNGeometry *v10;
  SCNGeometryElement *v12;
  SCNGeometrySource *v13;
  SCNGeometryElement *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v2 = +[SCNGeometrySource geometrySourceWithVertices:count:](SCNGeometrySource, "geometrySourceWithVertices:count:");
  v3 = +[SCNGeometryElement geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:](SCNGeometryElement, "geometryElementWithData:primitiveType:primitiveCount:bytesPerIndex:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)this + 6), *((_QWORD *)this + 7) - *((_QWORD *)this + 6)), 0, ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1) / 3uLL, 2);
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  if (v4 == v5)
  {
    v13 = v2;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v13, 1);
    v12 = v3;
    v8 = (void *)MEMORY[0x1E0C99D20];
    v9 = &v12;
  }
  else
  {
    v6 = +[SCNGeometrySource geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:](SCNGeometrySource, "geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:", objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v4, v5 - v4), CFSTR("kGeometrySourceSemanticColor"), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 4, 1, 4, 4, 0, 0);
    v15[0] = v2;
    v15[1] = v6;
    v7 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v15, 2);
    v14 = v3;
    v8 = (void *)MEMORY[0x1E0C99D20];
    v9 = &v14;
  }
  v10 = +[SCNGeometry geometryWithSources:elements:](SCNGeometry, "geometryWithSources:elements:", v7, objc_msgSend(v8, "arrayWithObjects:count:", v9, 1));
  objc_msgSend(-[SCNGeometry material](v10, "material"), "setLightingModelName:", CFSTR("SCNLightingModelConstant"));
  return v10;
}

SCNGeometry *Mesh::CreateCameraGeometry(Mesh *this)
{
  SCNGeometry *LineGeometry;
  SCNVector3 v3;
  SCNVector3 v4;
  SCNVector3 v5;
  SCNVector3 v6;
  SCNVector3 v7;
  SCNVector3 v8;
  void *v9[2];
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  SCNVector3 v14;

  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  *(_OWORD *)v9 = 0u;
  v14.x = 0.5;
  v14.y = 0.5;
  v14.z = 0.75;
  Mesh::AppendWireframeBox((Mesh *)v9, &stru_1DD02AEE0, v14, &C3DAuthoringEnvironmentColorGrayMedium);
  *(_QWORD *)&v8.x = 0x3F000000BF000000;
  v8.z = -0.5;
  *(_QWORD *)&v7.x = 0x3F0000003F000000;
  v7.z = -0.5;
  *(_QWORD *)&v6.x = 0xBF0000003F000000;
  v6.z = -0.5;
  *(_QWORD *)&v5.x = 0xBF000000BF000000;
  v5.z = -0.5;
  *(_QWORD *)&v4.x = 0;
  v4.z = 0.0;
  Mesh::AppendWireframePyramid((Mesh *)v9, &v4, &v8, &v7, &v6, &v5, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  v4.x = 0.0;
  *(_QWORD *)&v4.y = 0x3FA000003F800000;
  Mesh::AppendWireframeXCylinder((Mesh *)v9, &v4, 0.5, 0.5, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  v3.x = 0.0;
  *(_QWORD *)&v3.y = 0x3E8000003F800000;
  Mesh::AppendWireframeXCylinder((Mesh *)v9, &v3, 0.5, 0.5, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  LineGeometry = Mesh::CreateLineGeometry((Mesh *)v9);
  if ((_QWORD)v12)
  {
    *((_QWORD *)&v12 + 1) = v12;
    operator delete((void *)v12);
  }
  if (__p[1])
  {
    *(void **)&v11 = __p[1];
    operator delete(__p[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return LineGeometry;
}

void sub_1DCED9220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)va);
  _Unwind_Resume(a1);
}

void Mesh::AppendWireframeBox(Mesh *this, const SCNVector3 *a2, SCNVector3 a3, const C3DColor4 *a4)
{
  unint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float v14;
  uint64_t i;
  uint64_t v16;
  SCNVector3 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;

  v6 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v7 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v7;
  v8.i64[0] = *(_QWORD *)&a2->x;
  v8.i32[2] = LODWORD(a2->z);
  v8.i32[3] = 1.0;
  v9.i64[0] = *(_QWORD *)&a3.x;
  v9.i64[1] = LODWORD(a3.z);
  v10 = (int8x16_t)vaddq_f32(v9, v9);
  v11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 3);
  v11.i32[0] = v10.i32[0];
  v18 = vsubq_f32(v8, v9);
  v19 = vaddq_f32(v11, v18);
  v20 = vaddq_f32((float32x4_t)vextq_s8(v10, (int8x16_t)vuzp2q_s32((int32x4_t)v10, (int32x4_t)v10), 0xCuLL), v18);
  v21 = vaddq_f32(v11, v20);
  v12 = (int8x16_t)vzip2q_s32((int32x4_t)v10, (int32x4_t)v10);
  v13 = (float32x4_t)vextq_s8(v12, v12, 8uLL);
  v22 = vaddq_f32(v13, v18);
  v23 = vaddq_f32(v13, v19);
  v24 = vaddq_f32(v13, v20);
  v25 = vaddq_f32(v13, v21);
  do
  {
    v14 = v18.f32[v6 / 4 + 2];
    *(_QWORD *)&v17.x = v18.i64[v6 / 8];
    v17.z = v14;
    Mesh::AddVertex(this, &v17);
    Mesh::AddColor(this, a4);
    v6 += 16;
  }
  while (v6 != 128);
  for (i = 0; i != 24; ++i)
    Mesh::AddIndex(this, word_1DD02AEEC[i]);
  v16 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v16;
}

void Mesh::AppendWireframePyramid(Mesh *this, const SCNVector3 *a2, const SCNVector3 *a3, const SCNVector3 *a4, const SCNVector3 *a5, const SCNVector3 *a6, const C3DColor4 *a7)
{
  uint64_t v13;
  int v14;
  uint64_t i;
  uint64_t v16;

  v13 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v13;
  Mesh::AddVertex(this, a2);
  Mesh::AddVertex(this, a3);
  Mesh::AddVertex(this, a4);
  Mesh::AddVertex(this, a5);
  Mesh::AddVertex(this, a6);
  v14 = 5;
  do
  {
    Mesh::AddColor(this, a7);
    --v14;
  }
  while (v14);
  for (i = 0; i != 16; ++i)
    Mesh::AddIndex(this, word_1DD02AF1C[i]);
  v16 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v16;
}

uint64_t Mesh::AppendWireframeXCylinder(Mesh *this, const SCNVector3 *a2, float a3, float a4, const C3DColor4 *a5)
{
  char *v10;
  uint64_t v11;
  double v12;
  int i;
  float v14;
  __float2 v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  float *v22;
  float *v23;
  int v24;
  __int16 v25;
  int v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t result;
  unint64_t v33;

  v10 = (char *)this + 48;
  v11 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v11;
  Mesh::AllocateVertices(this, 0x18u);
  v12 = 0.0;
  for (i = 12; i != 24; ++i)
  {
    v14 = v12 * 6.28318531 / 12.0;
    v15 = __sincosf_stret(v14);
    v16 = (float)(v15.__sinval * a3) + a2->y;
    v17 = (float)(v15.__cosval * a3) + a2->z;
    v18 = a2->x + a4;
    v19 = i + *((_DWORD *)this + 18);
    v20 = v19 - 12;
    v21 = *(_QWORD *)this;
    v22 = (float *)(*(_QWORD *)this + 12 * (v19 - 12));
    *v22 = a2->x - a4;
    v22[1] = v16;
    v22[2] = v17;
    v23 = (float *)(v21 + 12 * v19);
    *v23 = v18;
    v23[1] = v16;
    v23[2] = v17;
    *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * v20) = *a5;
    *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * (i + *((_DWORD *)this + 18))) = *a5;
    v12 = v12 + 1.0;
  }
  std::vector<unsigned short>::resize((uint64_t)v10, ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1) + 72);
  v24 = 0;
  v25 = 0;
  v26 = *((_DWORD *)this + 18);
  v27 = *((_DWORD *)this + 19);
  v28 = *((_QWORD *)this + 6);
  do
  {
    v29 = v26 + v25;
    v30 = v27 + v24;
    *(_WORD *)(v28 + 2 * (v27 + v24)) = v26 + v25;
    if (v24 == 66)
      v31 = 0;
    else
      v31 = v25 + 1;
    *(_WORD *)(v28 + 2 * (v30 + 1)) = v26 + v31;
    ++v25;
    *(_WORD *)(v28 + 2 * (v30 + 2)) = v29 + 12;
    result = (v30 + 3);
    *(_WORD *)(v28 + 2 * result) = v26 + 12 + v31;
    *(_WORD *)(v28 + 2 * (v30 + 4)) = v29;
    *(_WORD *)(v28 + 2 * (v30 + 5)) = v29 + 12;
    v24 += 6;
  }
  while (v24 != 72);
  v33 = (unint64_t)(*((_QWORD *)this + 7) - v28) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v33;
  return result;
}

SCNGeometry *Mesh::CreateCameraFrustumGeometry(Mesh *this)
{
  SCNGeometry *LineGeometry;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *__p[2];
  __int128 v7;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  Mesh::AppendWireframeCameraFrustum((Mesh *)v3, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  LineGeometry = Mesh::CreateLineGeometry((Mesh *)v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4[1])
  {
    *(void **)&v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
  return LineGeometry;
}

void sub_1DCED971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Mesh::AppendWireframeCameraFrustum(Mesh *this, const C3DColor4 *a2)
{
  SCNVector3 v10;
  SCNVector3 v11;
  SCNVector3 v12;
  SCNVector3 v13;
  SCNVector3 v14;

  *(_QWORD *)&v14.x = 0;
  v14.z = 0.0;
  *(_QWORD *)&v13.x = 0x3F800000BF800000;
  v13.z = -1.0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v12.x = _D0;
  v12.z = -1.0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)&v11.x = _D0;
  v11.z = -1.0;
  *(_QWORD *)&v10.x = 0xBF8000003F800000;
  v10.z = -1.0;
  Mesh::AppendSegment(this, &v14, &v13, a2, a2);
  Mesh::AppendSegment(this, &v14, &v12, a2, a2);
  Mesh::AppendSegment(this, &v14, &v10, a2, a2);
  Mesh::AppendSegment(this, &v14, &v11, a2, a2);
  Mesh::AppendQuad(this, &v13, &v12, &v10, &v11, a2);
}

SCNGeometry *Mesh::CreateOrthographicCameraFrustumGeometry(Mesh *this)
{
  SCNGeometry *LineGeometry;
  SCNVector3 v3;
  void *v4[2];
  void *v5[2];
  __int128 v6;
  void *__p[2];
  __int128 v8;
  SCNVector3 v9;

  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v5 = 0u;
  v6 = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)&v3.x = 0;
  v3.z = -1.0;
  v9.x = 1.0;
  v9.y = 1.0;
  v9.z = 1.0;
  Mesh::AppendWireframeBox((Mesh *)v4, &v3, v9, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  LineGeometry = Mesh::CreateLineGeometry((Mesh *)v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[1])
  {
    *(void **)&v6 = v5[1];
    operator delete(v5[1]);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
  return LineGeometry;
}

void sub_1DCED98C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)va);
  _Unwind_Resume(a1);
}

SCNGeometry *Mesh::CreateCameraNearPlaneGeometry(Mesh *this)
{
  SCNGeometry *LineGeometry;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *__p[2];
  __int128 v7;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  Mesh::AppendWireframeCameraNearPlane((Mesh *)v3, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  LineGeometry = Mesh::CreateLineGeometry((Mesh *)v3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4[1])
  {
    *(void **)&v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
  return LineGeometry;
}

void sub_1DCED9958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double Mesh::AppendWireframeCameraNearPlane(Mesh *this, const C3DColor4 *a2)
{
  double result;
  SCNVector3 v9;
  SCNVector3 v10;
  SCNVector3 v11;
  SCNVector3 v12;

  *(_QWORD *)&v12.x = 0x3F800000BF800000;
  v12.z = -1.0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&v11.x = _D0;
  v11.z = -1.0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)&v10.x = _D0;
  v10.z = -1.0;
  *(_QWORD *)&v9.x = 0xBF8000003F800000;
  v9.z = -1.0;
  Mesh::AppendQuad(this, &v12, &v11, &v9, &v10, a2);
  return result;
}

SCNGeometry *Mesh::CreatePhysicsFieldGeometry(Mesh *this)
{
  SCNGeometry *LineGeometry;
  SCNVector3 v3;
  void *v4[2];
  void *v5[2];
  __int128 v6;
  void *__p[2];
  __int128 v8;

  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v5 = 0u;
  v6 = 0u;
  *(_OWORD *)v4 = 0u;
  *(_QWORD *)&v3.x = 1065353216;
  v3.z = 0.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  *(_QWORD *)&v3.x = 3212836864;
  v3.z = 0.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  *(_QWORD *)&v3.x = 0x3F80000000000000;
  v3.z = 0.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  *(_QWORD *)&v3.x = 0xBF80000000000000;
  v3.z = 0.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  *(_QWORD *)&v3.x = 0;
  v3.z = 1.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  *(_QWORD *)&v3.x = 0;
  v3.z = -1.0;
  Mesh::AppendCone((Mesh *)v4, &SCNVector3Zero, &v3, 0.2, 0.1, (const C3DColor4 *)C3DAuthoringEnvironmentColorWhite);
  LineGeometry = Mesh::CreateLineGeometry((Mesh *)v4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[1])
  {
    *(void **)&v6 = v5[1];
    operator delete(v5[1]);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
  return LineGeometry;
}

void sub_1DCED9B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)va);
  _Unwind_Resume(a1);
}

void Mesh::AppendCone(Mesh *this, const SCNVector3 *a2, const SCNVector3 *a3, float a4, float a5, const C3DColor4 *a6)
{
  char *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  float v15;
  __float2 v16;
  float32x4_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  __int16 v27;
  unint64_t v28;
  float z;
  uint64_t v31;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  v10 = (char *)this + 48;
  v11 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v11;
  Mesh::AllocateVertices(this, 0x33u);
  v12.i64[0] = *(_QWORD *)&a2->x;
  z = a2->z;
  v31 = *(_QWORD *)&a2->x;
  v13 = v12;
  v13.f32[2] = z;
  v12.i64[0] = *(_QWORD *)&a3->x;
  v12.i32[2] = LODWORD(a3->z);
  v33 = vmlaq_n_f32(v13, v12, a4);
  v35.i32[2] = 0;
  v35.i64[0] = 0;
  v34.i32[2] = 0;
  v34.i64[0] = 0;
  C3DVectorGenerateOrthogonalBasis(&v35, (int8x16_t *)&v34, v12);
  v14 = 0;
  v34 = vmulq_n_f32(v34, a5);
  v35 = vmulq_n_f32(v35, a5);
  v15 = 0.0;
  do
  {
    v16 = __sincosf_stret(v15);
    v17 = vmlaq_n_f32(vmlaq_n_f32(v33, v35, v16.__cosval), v34, v16.__sinval);
    v18 = v14 + *((_DWORD *)this + 18);
    v19 = *(_QWORD *)this + 12 * v18;
    *(_QWORD *)v19 = v17.i64[0];
    *(_DWORD *)(v19 + 8) = v17.i32[2];
    *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * v18) = *a6;
    ++v14;
    v15 = v15 + 0.12566;
  }
  while (v14 != 50);
  v20 = *((_DWORD *)this + 18) + 50;
  v21 = *(_QWORD *)this + 12 * v20;
  *(_QWORD *)v21 = v31;
  *(float *)(v21 + 8) = z;
  *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * v20) = *a6;
  std::vector<unsigned short>::resize((uint64_t)v10, ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1) + 108);
  v22 = *((_DWORD *)this + 18);
  v23 = *((_DWORD *)this + 19);
  v24 = *((_QWORD *)this + 6);
  v25 = 1;
  v26 = v23;
  do
  {
    *(_WORD *)(v24 + 2 * v26) = v22 + v25 - 1;
    if (v25 == 50)
      v27 = 0;
    else
      v27 = v25;
    *(_WORD *)(v24 + 2 * (v26 + 1)) = v22 + v27;
    v26 += 2;
    ++v25;
  }
  while (v25 != 51);
  *(_WORD *)(v24 + 2 * (v23 + 100)) = v22 + 50;
  *(_WORD *)(v24 + 2 * (v23 + 101)) = v22;
  *(_WORD *)(v24 + 2 * (v23 + 102)) = v22 + 50;
  *(_WORD *)(v24 + 2 * (v23 + 103)) = v22 + 12;
  *(_WORD *)(v24 + 2 * (v23 + 104)) = v22 + 50;
  *(_WORD *)(v24 + 2 * (v23 + 105)) = v22 + 25;
  *(_WORD *)(v24 + 2 * (v23 + 106)) = v22 + 50;
  *(_WORD *)(v24 + 2 * (v23 + 107)) = v22 + 37;
  v28 = (unint64_t)(*((_QWORD *)this + 7) - v24) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v28;
}

void Mesh::AppendWireframeXYDisk(Mesh *this, const SCNVector3 *a2, float a3, const C3DColor4 *a4)
{
  uint64_t v8;
  double v9;
  int v10;
  float v11;
  float x;
  __float2 v13;
  float y;
  float z;
  int i;
  __int16 v17;
  uint64_t v18;
  SCNVector3 v19;

  v8 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v8;
  v9 = 0.0;
  v10 = 24;
  do
  {
    v11 = v9 * 6.28318531 / 23.0;
    x = a2->x;
    v13 = __sincosf_stret(v11);
    y = a2->y;
    z = a2->z;
    v19.x = x + (float)(a3 * v13.__cosval);
    v19.y = y + (float)(a3 * v13.__sinval);
    v19.z = z + 0.0;
    Mesh::AddVertex(this, &v19);
    Mesh::AddColor(this, a4);
    v9 = v9 + 1.0;
    --v10;
  }
  while (v10);
  for (i = 1; i != 25; ++i)
  {
    Mesh::AddIndex(this, i - 1);
    if (i == 24)
      v17 = 0;
    else
      v17 = i;
    Mesh::AddIndex(this, v17);
  }
  v18 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v18;
}

void Mesh::AppendWireframeXYDisk(Mesh *this, float a2, const C3DColor4 *a3)
{
  Mesh::AppendWireframeXYDisk(this, &SCNVector3Zero, a2, a3);
}

void Mesh::AppendWireframeEllispoid(uint64_t a1, float *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const SCNVector3 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const C3DColor4 *v13;
  __int128 v14;
  __int16 *v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  const SCNVector3 *v22;
  float v23;
  __float2 v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  float v29;
  __float2 v30;
  float *p_x;
  int v32;
  double v33;
  float v34;
  __float2 v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  __float2 v40;
  float v41;
  float v42;
  float *v43;
  const C3DColor4 *v44;
  int v45;
  int v46;
  unsigned int v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  _BYTE *v51;
  uint64_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  __int16 *v56;
  int8x16_t v57;
  int8x16_t v58;
  __int16 v59;
  uint64_t v60;
  _BYTE v61[4];
  int v62;
  const C3DColor4 *v63;
  float v64;
  double v65;
  float v66;
  double v67;
  __int128 v68;
  uint64_t v69;
  int16x8x2_t v70;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  *(_DWORD *)(a1 + 76) = v6;
  v7 = 48 * a3;
  MEMORY[0x1E0C80A78](a1);
  v9 = (const SCNVector3 *)&v61[-4 * v8];
  v11 = (32 * v10);
  *(double *)&v14 = MEMORY[0x1E0C80A78](v12);
  v15 = (__int16 *)&v61[-2 * v11];
  if (v16)
  {
    v63 = v13;
    v17 = 0;
    v62 = 2 * a3;
    v65 = (double)(a3 + 1);
    v18 = *a2;
    v64 = a2[1];
    v19 = *((float *)&v14 + 1);
    v20 = a2[2];
    v68 = v14;
    v21 = *((float *)&v14 + 2);
    v67 = 3.14159265;
    v22 = v9;
    v66 = *((float *)&v14 + 2);
    do
    {
      v23 = (double)++v17 * v67 / v65;
      v24 = __sincosf_stret(v23);
      v25 = 0;
      v26 = *(float *)&v68 * v24.__sinval;
      v27 = v64 + (float)(v19 * v24.__cosval);
      v28 = v21 * v24.__sinval;
      v29 = 0.0;
      do
      {
        v30 = __sincosf_stret(v29);
        p_x = &v22[v25].x;
        *p_x = v18 + (float)(v26 * v30.__cosval);
        p_x[1] = v27;
        p_x[2] = v20 + (float)(v28 * v30.__sinval);
        v29 = v29 + 0.2618;
        ++v25;
      }
      while (v25 != 24);
      v22 += 24;
      v21 = v66;
    }
    while (v17 != a3);
    v32 = 0;
    v65 = (double)a3;
    v33 = 0.0;
    do
    {
      v34 = v33 * v67 / v65;
      v35 = __sincosf_stret(v34);
      v36 = 0;
      v37 = *(float *)&v68 * v35.__cosval;
      v38 = 0.0;
      do
      {
        v39 = *a2;
        v40 = __sincosf_stret(v38);
        v41 = a2[1];
        v42 = a2[2] + (float)((float)(v21 * v35.__sinval) * v40.__cosval);
        v43 = &v22[v36].x;
        *v43 = v39 + (float)(v37 * v40.__cosval);
        v43[1] = v41 + (float)(v19 * v40.__sinval);
        v43[2] = v42;
        v38 = v38 + 0.2618;
        ++v36;
      }
      while (v36 != 24);
      v22 += 24;
      v33 = v33 + 1.0;
      ++v32;
    }
    while (v32 != a3);
    v44 = v63;
    v45 = v62;
    if (v62)
    {
      v46 = 0;
      v47 = 0;
      v48.i64[0] = 0x100000001;
      v48.i64[1] = 0x100000001;
      v49.i64[0] = 0x1800000018;
      v49.i64[1] = 0x1800000018;
      v50.i64[0] = 0x800000008;
      v50.i64[1] = 0x800000008;
      v51 = &v61[-2 * v11];
      do
      {
        v52 = 0;
        v53 = vdupq_n_s32(v47);
        v54 = (int32x4_t)xmmword_1DD029FB0;
        v55 = (int32x4_t)xmmword_1DD02AED0;
        do
        {
          v56 = (__int16 *)&v51[v52];
          v70.val[0] = vuzp1q_s16((int16x8_t)vaddq_s32(v54, v53), (int16x8_t)vaddq_s32(v55, v53));
          v57 = (int8x16_t)vaddq_s32(v55, v48);
          v58 = (int8x16_t)vaddq_s32(v54, v48);
          v70.val[1] = vuzp1q_s16((int16x8_t)vaddq_s32((int32x4_t)vbicq_s8(v58, (int8x16_t)vceqq_s32((int32x4_t)v58, v49)), v53), (int16x8_t)vaddq_s32((int32x4_t)vbicq_s8(v57, (int8x16_t)vceqq_s32((int32x4_t)v57, v49)), v53));
          vst2q_s16(v56, v70);
          v54 = vaddq_s32(v54, v50);
          v55 = vaddq_s32(v55, v50);
          v52 += 32;
        }
        while (v52 != 96);
        v47 += 24;
        ++v46;
        v51 += 96;
      }
      while (v46 != v45);
    }
    if ((_DWORD)v7)
    {
      do
      {
        Mesh::AddVertex((Mesh *)a1, v9);
        Mesh::AddColor((Mesh *)a1, v44);
        ++v9;
        --v7;
      }
      while (v7);
    }
    if ((_DWORD)v11)
    {
      do
      {
        v59 = *v15++;
        Mesh::AddIndex((Mesh *)a1, v59);
        --v11;
      }
      while (v11);
    }
  }
  v60 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = -1431655765 * ((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  *(_DWORD *)(a1 + 76) = v60;
}

void Mesh::AppendWireframeSphere(uint64_t this, float *a2, float s0_0, unsigned int a3, const C3DColor4 *a5)
{
  Mesh::AppendWireframeEllispoid(this, a2, a3);
}

void Mesh::AppendWireframeSphere(Mesh *this, float a2, unsigned int a3, const C3DColor4 *a4)
{
  Mesh::AppendWireframeEllispoid((uint64_t)this, &SCNVector3Zero.x, a3);
}

void Mesh::AppendSegment(Mesh *this, const SCNVector3 *a2, const SCNVector3 *a3, const C3DColor4 *a4, const C3DColor4 *a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v9;
  Mesh::AddVertex(this, a2);
  Mesh::AddVertex(this, a3);
  Mesh::AddColor(this, a4);
  Mesh::AddColor(this, a5);
  Mesh::AddIndex(this, 0);
  Mesh::AddIndex(this, 1);
  v10 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v10;
}

void Mesh::AppendQuad(Mesh *this, const SCNVector3 *a2, const SCNVector3 *a3, const SCNVector3 *a4, const SCNVector3 *a5, const C3DColor4 *a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v12;
  Mesh::AppendSegment(this, a2, a3, a6, a6);
  Mesh::AppendSegment(this, a3, a4, a6, a6);
  Mesh::AppendSegment(this, a4, a5, a6, a6);
  Mesh::AppendSegment(this, a5, a2, a6, a6);
  v13 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v13;
}

void Mesh::AppendSphericalCap(Mesh *this, float a2, float a3, const C3DColor4 *a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __float2 v12;
  float v13;
  float v14;
  double v15;
  int i;
  float v17;
  __float2 v18;
  unsigned int v19;
  float *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int j;
  __int16 v28;
  unsigned int v29;
  int k;
  unint64_t v31;

  v8 = (char *)this + 48;
  v9 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v9;
  Mesh::AllocateVertices(this, 0x1Au);
  v10 = *(_QWORD *)this + 12 * *((unsigned int *)this + 18);
  *(_DWORD *)(v10 + 8) = 0;
  *(_QWORD *)v10 = 0;
  *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * *((unsigned int *)this + 18)) = *a4;
  LODWORD(v10) = *((_DWORD *)this + 18) + 1;
  v11 = *(_QWORD *)this + 12 * v10;
  *(_QWORD *)v11 = 0;
  *(float *)(v11 + 8) = -a2;
  *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * v10) = *a4;
  v12 = __sincosf_stret(a3);
  v13 = -(float)(a2 * v12.__cosval);
  v14 = v12.__sinval * a2;
  v15 = 0.0;
  for (i = 2; i != 26; ++i)
  {
    v17 = v15 * 6.28318531 / 24.0;
    v18 = __sincosf_stret(v17);
    v19 = i + *((_DWORD *)this + 18);
    v20 = (float *)(*(_QWORD *)this + 12 * v19);
    *v20 = v14 * v18.__cosval;
    v20[1] = v14 * v18.__sinval;
    v20[2] = v13;
    *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * v19) = *a4;
    v15 = v15 + 1.0;
  }
  std::vector<unsigned short>::resize((uint64_t)v8, ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1) + 76);
  v21 = *((_DWORD *)this + 18);
  v22 = *((_DWORD *)this + 19);
  v23 = *((_QWORD *)this + 6);
  v24 = 2;
  v25 = v22;
  do
  {
    *(_WORD *)(v23 + 2 * v25) = v21 + 1;
    *(_WORD *)(v23 + 2 * (v25 + 1)) = v21 + v24;
    v25 += 2;
    v24 += 4;
  }
  while (v24 != 26);
  v26 = v22 + 13;
  for (j = 3; j != 27; ++j)
  {
    *(_WORD *)(v23 + 2 * (v26 - 1)) = v21 + j - 1;
    if (j == 26)
      v28 = 2;
    else
      v28 = j;
    *(_WORD *)(v23 + 2 * v26) = v21 + v28;
    v26 += 2;
  }
  v29 = v22 + 61;
  for (k = 2; k != 26; k += 6)
  {
    *(_WORD *)(v23 + 2 * (v29 - 1)) = v21;
    *(_WORD *)(v23 + 2 * v29) = v21 + k;
    v29 += 2;
  }
  v31 = (unint64_t)(*((_QWORD *)this + 7) - v23) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v31;
}

void Mesh::AppendZUpArrow(Mesh *this, const C3DColor4 *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  __double2 v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (uint64_t *)((char *)this + 48);
  v5 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v5;
  Mesh::AllocateVertices(this, 0x25u);
  std::vector<unsigned short>::resize((uint64_t)v4, ((*((_QWORD *)this + 7) - *v4) >> 1) + 180);
  v6 = 0;
  v7 = *((_DWORD *)this + 18);
  v8 = *v4;
  v9 = *(_QWORD *)this;
  v10 = *((_DWORD *)this + 19) + 11;
  do
  {
    v11 = (unsigned __int16)v6;
    v12 = __sincos_stret(((double)v11 + (double)v11) * 3.14159265 / 12.0);
    v13 = v12.__cosval * 0.00999999978;
    *(_WORD *)(v8 + 2 * (v10 - 11)) = v7;
    v14 = v12.__sinval * 0.00999999978;
    *(_WORD *)(v8 + 2 * (v10 - 9)) = v7 + 1;
    *(_WORD *)(v8 + 2 * (v10 - 5)) = v7 + 1;
    *(_WORD *)(v8 + 2 * (v10 - 3)) = v7 + 2;
    *(_WORD *)(v8 + 2 * (v10 - 2)) = v7 + 1;
    v15 = v9 + 12 * v7;
    *(float *)v15 = v13;
    *(float *)(v15 + 4) = v14;
    *(_DWORD *)(v15 + 8) = 0;
    v16 = v9 + 12 * (v7 + 1);
    *(float *)v16 = v13;
    *(float *)(v16 + 4) = v14;
    *(_DWORD *)(v16 + 8) = 1061158912;
    v17 = v9 + 12 * (v7 + 2);
    *(float *)v17 = v13 * 5.0;
    *(float *)(v17 + 4) = v14 * 5.0;
    *(_DWORD *)(v17 + 8) = 1061158912;
    ++v6;
    if (v11 == 11)
      v18 = -36;
    else
      v18 = 0;
    v19 = v18 + v7;
    v20 = v19 + 4;
    *(_WORD *)(v8 + 2 * (v10 - 10)) = v19 + 4;
    *(_WORD *)(v8 + 2 * (v10 - 8)) = v7;
    *(_WORD *)(v8 + 2 * (v10 - 7)) = v19 + 3;
    *(_WORD *)(v8 + 2 * (v10 - 6)) = v19 + 4;
    v19 += 5;
    *(_WORD *)(v8 + 2 * (v10 - 4)) = v19;
    *(_WORD *)(v8 + 2 * (v10 - 1)) = v20;
    *(_WORD *)(v8 + 2 * v10) = v19;
    v7 += 3;
    v10 += 12;
  }
  while (v11 < 0xB);
  v21 = 0;
  v23 = *((_DWORD *)this + 18);
  v22 = *((_DWORD *)this + 19);
  v24 = v23 + 36;
  v25 = *((_QWORD *)this + 6);
  v26 = v23 + 32;
  do
  {
    v27 = v22 + v21;
    *(_WORD *)(v25 + 2 * (v22 + v21 + 144)) = v24;
    if (v21 == 33)
      v28 = 36;
    else
      v28 = 0;
    *(_WORD *)(v25 + 2 * (v27 + 145)) = v28 + v26;
    *(_WORD *)(v25 + 2 * (v27 + 146)) = v26 + 3;
    v21 += 3;
    v26 -= 3;
  }
  while (v21 != 36);
  v29 = 0;
  v30 = *(_QWORD *)this + 12 * v24;
  *(_QWORD *)v30 = 0;
  *(_DWORD *)(v30 + 8) = 1065353216;
  do
  {
    *(C3DColor4 *)(*((_QWORD *)this + 3) + 16 * (v29 + *((_DWORD *)this + 18))) = *a2;
    ++v29;
  }
  while (v29 != 37);
  v31 = (*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 1;
  *((_DWORD *)this + 18) = -1431655765 * ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
  *((_DWORD *)this + 19) = v31;
}

void std::vector<SCNVector3>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<vmesh::Triangle>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[12 * v8];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *((_DWORD *)v18 + 2);
        *(_QWORD *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void _C3DEntityCFInit()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    _C3DEntityCFInit_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
}

void _C3DEntityCFFinalize()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = scn_default_log();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    _C3DEntityCFFinalize_cold_1(v0, v1, v2, v3, v4, v5, v6, v7);
}

void C3DEntitySetAttribute(CFTypeRef *a1, void *a2, const __CFDictionary *a3)
{
  _C3DEntitySetAttribute(a1, a2, a3, 1);
}

void C3DEntitySetAttributes(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFDictionary *MutableCopy;
  const void *Value;
  const __CFString *v5;

  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  Value = CFDictionaryGetValue(MutableCopy, CFSTR("kIDKey"));
  v5 = (const __CFString *)CFDictionaryGetValue(MutableCopy, CFSTR("kNameKey"));
  if (Value)
  {
    C3DEntitySetID(a1, Value);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("kIDKey"));
  }
  if (v5)
  {
    C3DEntitySetName(a1, v5);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("kNameKey"));
  }
  _C3DEntitySetAttributes(a1, MutableCopy);
  CFRelease(MutableCopy);
}

uint64_t C3DEntityInitWithPropertyList(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t IsDictionary;
  const __CFString *Value;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  const void *v13;
  NSObject *v14;
  const void *v16;
  const __CFString *v17;

  IsDictionary = C3DCFTypeIsDictionary();
  if ((IsDictionary & 1) != 0)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("entity-name"));
    v6 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("attributes"));
    if (v6)
    {
      v7 = v6;
      v8 = (unint64_t)CFDictionaryGetValue(v6, CFSTR("kSkinnerKey"));
      v9 = (unint64_t)CFDictionaryGetValue(v7, CFSTR("kMorpherKey"));
      if (!(v8 | v9))
      {
        C3DEntitySetAttributes(a1, v7);
        if (Value)
          goto LABEL_10;
LABEL_15:
        v16 = CFDictionaryGetValue(a2, CFSTR("id"));
        if (v16)
          C3DEntitySetID(a1, v16);
        v17 = (const __CFString *)CFDictionaryGetValue(a2, CFSTR("name"));
        if (v17)
          C3DEntitySetName(a1, v17);
        return IsDictionary;
      }
      v10 = v9;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v7);
      v12 = MutableCopy;
      if (v8)
        CFDictionaryRemoveValue(MutableCopy, CFSTR("kSkinnerKey"));
      if (v10)
        CFDictionaryRemoveValue(v12, CFSTR("kMorpherKey"));
      C3DEntitySetAttributes(a1, v12);
      CFRelease(v12);
    }
    if (Value)
    {
LABEL_10:
      v13 = CFDictionaryGetValue(a2, CFSTR("entity-ID"));
      C3DEntitySetName(a1, Value);
      C3DEntitySetID(a1, v13);
      return IsDictionary;
    }
    goto LABEL_15;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    C3DEntityInitWithPropertyList_cold_1(v14);
  return IsDictionary;
}

__CFDictionary *C3DEntityCopyPropertyList(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v6;
  __CFDictionary *Mutable;
  const __CFDictionary *Attributes;
  const __CFDictionary *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;

  v6 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Attributes = (const __CFDictionary *)C3DEntityGetAttributes((uint64_t)a1);
  if (Attributes)
  {
    v9 = Attributes;
    CFRetain(Attributes);
  }
  else
  {
    v9 = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  _temporaryRemoveAttribute(v9, CFSTR("kCameraKey"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kLightKey"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kLightmapInfoKey"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kConstraints"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kAnimationsKey"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kActionsKey"), v10);
  _temporaryRemoveAttribute(v9, CFSTR("kShaderModifiers"), v10);
  v11 = C3DCreatePropertyListFromDictionary(v9, a3, a2);
  CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)__restoreTemporaryRemovedAttributes, v9);
  CFRelease(v10);
  v12 = (const void *)a1[3];
  if (v12)
    CFDictionaryAddValue(v11, CFSTR("kIDKey"), v12);
  v13 = (const void *)a1[4];
  if (v13)
    CFDictionaryAddValue(v11, CFSTR("kNameKey"), v13);
  CFDictionarySetValue(Mutable, CFSTR("attributes"), v11);
  CFRelease(v11);
  CFRelease(v9);
  v14 = (const void *)a1[3];
  if (v14)
    CFDictionarySetValue(Mutable, CFSTR("id"), v14);
  v15 = (const void *)a1[4];
  if (v15)
    CFDictionarySetValue(Mutable, CFSTR("name"), v15);
  return Mutable;
}

void _temporaryRemoveAttribute(const __CFDictionary *a1, const void *a2, __CFDictionary *a3)
{
  const void *Value;

  if (a1)
  {
    Value = CFDictionaryGetValue(a1, a2);
    if (Value)
    {
      CFDictionaryAddValue(a3, a2, Value);
      CFDictionaryRemoveValue(a1, a2);
    }
  }
}

void C3DEntityAddAnimationForKey(float32x4_t *a1, uint64_t *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFDictionary *SubAttributeOrderedDictionary;
  uint64_t v31;
  uint64_t v32;
  uint64_t AnimationManager;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    _C3DAnimationManagerAddAnimationForKey_cold_4(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  C3DEntityRemoveAnimationForKey(a1, a3, 1);
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kAnimationsKey"), 1);
  C3DOrderedDictionarySetValue(SubAttributeOrderedDictionary, (const char *)a3, (uint64_t)a2);
  v31 = C3DGetScene(a1);
  if (v31)
  {
    v32 = v31;
    AnimationManager = C3DSceneGetAnimationManager(v31);
    C3DAddSceneRef(a2, v32);
    C3DAnimationManagerAddAnimationPlayerForKey(AnimationManager, (uint64_t)a2, a1, a3);
  }
}

void C3DEntityRemoveAnimationForKey(_QWORD *a1, void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *SubAttributeOrderedDictionary;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AnimationManager;
  void *Value;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kAnimationsKey"), 0);
  if (SubAttributeOrderedDictionary)
  {
    v23 = SubAttributeOrderedDictionary;
    CFRetain(SubAttributeOrderedDictionary);
    v24 = C3DGetScene(a1);
    v25 = v24;
    if (v24)
    {
      AnimationManager = C3DSceneGetAnimationManager(v24);
      if (a3)
        C3DAnimationManagerExecRemoveAnimation(AnimationManager, a1, a2);
      else
        C3DAnimationManagerRemoveAnimationForKey(AnimationManager, a1, a2);
    }
    Value = (void *)C3DOrderedDictionaryGetValue(v23, (const char *)a2);
    if (Value)
    {
      C3DRemoveSceneRef(Value, v25);
      C3DOrderedDictionaryRemoveValue(v23, (const char *)a2);
      if ((a3 & 1) == 0 && !C3DOrderedDictionaryGetCount(v23))
        _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kAnimationsKey"), 0, 1);
    }
    CFRelease(v23);
  }
}

void _removeAnimationPlayerSceneRef(int a1, void *cf, uint64_t a3)
{
  C3DRemoveSceneRef(cf, a3);
}

void C3DEntityFadeAndRemoveAllAnimations(void *a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AnimationManager;
  const __CFDictionary *SubAttributeOrderedDictionary;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = C3DGetSceneRef((uint64_t)a1);
  v13 = v12;
  if (v12)
  {
    AnimationManager = C3DSceneGetAnimationManager(v12);
    if (AnimationManager)
      C3DAnimationManagerFadeAndRemoveAllAnimationsForObject(AnimationManager, a1, a2);
  }
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kAnimationsKey"), 0);
  if (SubAttributeOrderedDictionary)
  {
    C3DOrderedDictionaryApplyFunction(SubAttributeOrderedDictionary, (const char *)_removeAnimationPlayerSceneRef, v13);
    _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kAnimationsKey"), 0, 1);
  }
}

void C3DEntityFadeAndRemoveAnimationForKey(_QWORD *a1, void *a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *SubAttributeOrderedDictionary;
  const __CFDictionary *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AnimationManager;
  void *Value;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kAnimationsKey"), 0);
  if (SubAttributeOrderedDictionary)
  {
    v23 = SubAttributeOrderedDictionary;
    CFRetain(SubAttributeOrderedDictionary);
    v24 = C3DGetScene(a1);
    v25 = v24;
    if (v24)
    {
      AnimationManager = C3DSceneGetAnimationManager(v24);
      C3DAnimationManagerFadeAndRemoveAnimationForKey(AnimationManager, a1, a2, a3);
    }
    Value = (void *)C3DOrderedDictionaryGetValue(v23, (const char *)a2);
    if (Value)
    {
      C3DRemoveSceneRef(Value, v25);
      C3DOrderedDictionaryRemoveValue(v23, (const char *)a2);
      if (!C3DOrderedDictionaryGetCount(v23))
        _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kAnimationsKey"), 0, 1);
    }
    CFRelease(v23);
  }
}

uint64_t C3DEntityAddBinding(float32x4_t *a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFArray *SubAttributeArray;
  uint64_t result;
  uint64_t AnimationManager;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DValueConcat_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  SubAttributeArray = _C3DEntityGetSubAttributeArray((uint64_t)a1, CFSTR("kBindingsKey"), 1);
  CFArrayAppendValue(SubAttributeArray, a2);
  result = C3DGetScene(a1);
  if (result)
  {
    AnimationManager = C3DSceneGetAnimationManager(result);
    return C3DAnimationManagerAddBinding(AnimationManager, a1, (CFStringRef)objc_msgSend(a2, "keyPathDst"), (float32x4_t *)objc_msgSend(a2, "sourceObject"), (const __CFString *)objc_msgSend(a2, "keyPathSrc"), (void *)objc_msgSend(a2, "options"));
  }
  return result;
}

void C3DEntityRemoveAllBindings(CFTypeRef *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AnimationManager;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEntityRemoveAllAnimations_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DGetScene(a1);
  if (v10)
  {
    AnimationManager = C3DSceneGetAnimationManager(v10);
    if (AnimationManager)
      C3DAnimationManagerRemoveAllBindings(AnimationManager, (uint64_t)a1);
  }
  _C3DEntitySetAttribute(a1, CFSTR("kBindingsKey"), 0, 1);
}

void C3DEntityRemoveBindingWithKeyPath(float32x4_t *a1, const __CFString *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *SubAttributeArray;
  const __CFDictionary *v21;
  const __CFDictionary *v22;
  uint64_t v23;
  uint64_t AnimationManager;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEntityRemoveBindingWithKeyPath_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  SubAttributeArray = _C3DEntityGetSubAttributeArray((uint64_t)a1, CFSTR("kBindingsKey"), 0);
  if (SubAttributeArray)
  {
    v21 = SubAttributeArray;
    v22 = SubAttributeArray;
    v23 = C3DGetScene(a1);
    if (v23)
    {
      AnimationManager = C3DSceneGetAnimationManager(v23);
      C3DAnimationManagerRemoveBinding(AnimationManager, a1, a2);
    }
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v25 = (id)-[__CFDictionary copy](v21, "copy", 0);
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v27; ++i)
        {
          if (*(_QWORD *)v32 != v28)
            objc_enumerationMutation(v25);
          v30 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
          if (objc_msgSend((id)objc_msgSend(v30, "keyPathDst"), "isEqualToString:", a2))
            -[__CFDictionary removeObject:](v21, "removeObject:", v30);
        }
        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
      }
      while (v27);
    }
    if (!-[__CFDictionary count](v21, "count"))
      _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kBindingsKey"), 0, 1);

  }
}

void C3DEntityAddAction(_QWORD *a1, const void *a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFDictionary *SubAttributeOrderedDictionary;
  uint64_t v31;
  uint64_t AnimationManager;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DEntityAddAction_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  C3DEntityRemoveActionForKey(a1, a3);
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kActionsKey"), 1);
  C3DOrderedDictionarySetValue(SubAttributeOrderedDictionary, (const char *)a3, (uint64_t)a2);
  v31 = C3DGetScene(a1);
  if (v31)
  {
    AnimationManager = C3DSceneGetAnimationManager(v31);
    C3DAnimationManagerAddAction(AnimationManager, a1, a2);
  }
}

void C3DEntityRemoveActionForKey(_QWORD *a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *SubAttributeOrderedDictionary;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t AnimationManager;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kActionsKey"), 0);
  if (SubAttributeOrderedDictionary)
  {
    v21 = SubAttributeOrderedDictionary;
    CFRetain(SubAttributeOrderedDictionary);
    v22 = C3DGetScene(a1);
    if (v22)
    {
      AnimationManager = C3DSceneGetAnimationManager(v22);
      C3DAnimationManagerRemoveActionWithKey(AnimationManager, a1, a2);
    }
    C3DOrderedDictionaryRemoveValue(v21, (const char *)a2);
    if (!C3DOrderedDictionaryGetCount(v21))
      _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kActionsKey"), 0, 1);
    CFRelease(v21);
  }
}

void _C3DEntityCleanupActionForKey(CFTypeRef *a1, const void *a2, const char *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFDictionary *SubAttributeOrderedDictionary;
  const __CFDictionary *v23;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  SubAttributeOrderedDictionary = _C3DEntityGetSubAttributeOrderedDictionary((uint64_t)a1, CFSTR("kActionsKey"), 0);
  if (SubAttributeOrderedDictionary)
  {
    v23 = SubAttributeOrderedDictionary;
    if (CFDictionaryGetValue(SubAttributeOrderedDictionary, a3) == a2)
    {
      C3DOrderedDictionaryRemoveValue(v23, a3);
      if (!C3DOrderedDictionaryGetCount(v23))
        _C3DEntitySetAttribute(a1, CFSTR("kActionsKey"), 0, 1);
    }
  }
}

void C3DEntityRemoveAllActions(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AnimationManager;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEntityRemoveAllAnimations_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DGetScene(a1);
  if (v10)
  {
    AnimationManager = C3DSceneGetAnimationManager(v10);
    if (AnimationManager)
      C3DAnimationManagerRemoveActionsForObject(AnimationManager, a1);
  }
  _C3DEntitySetAttribute((CFTypeRef *)a1, CFSTR("kActionsKey"), 0, 1);
}

const __CFArray *C3DEntityHasShaderModifiers(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *result;
  const __CFArray *v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const void *ValueAtIndex;
  BOOL v18;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DEntityGetShaderModifiers(a1);
  if (result)
  {
    v13 = result;
    Count = CFArrayGetCount(result);
    v15 = Count - 1;
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v16 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v13, v16);
        v18 = C3DShaderModifierGetEntryPoint((uint64_t)ValueAtIndex) == a2;
        result = (const __CFArray *)v18;
        v18 = v18 || v15 == v16++;
      }
      while (!v18);
    }
  }
  return result;
}

void C3DEntitySetShadableMinimumMTLLanguageVersion(CFTypeRef *a1, const __CFDictionary *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  _C3DEntitySetAttribute(a1, CFSTR("kShadableMinimumMTLLanguageVersionKey"), a2, 1);
}

void C3DEntityResetValueForKey(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *KeyValueStore;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEntitySetValueForKey_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  KeyValueStore = _C3DEntityGetKeyValueStore(a1, 1);
  C3DKeyValueStoreResetValueForKey((uint64_t)KeyValueStore, a2);
}

const __CFDictionary *C3DEntityGetValueForKey(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEntityRemoveAllAnimations_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEntitySetValueForKey_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *(const __CFDictionary **)(a1 + 40);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("_kvc"));
    if (result)
      return (const __CFDictionary *)C3DKeyValueStoreGetValueForKey((uint64_t)result, a2);
  }
  return result;
}

CFStringRef _C3DEntityCFCopyFormatDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DEntity:%p>"), a1);
}

CFStringRef _C3DEntityCFCopyDebugDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<C3DEntity:%p>"), a1);
}

void __restoreTemporaryRemovedAttributes(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

const __CFDictionary *_C3DEntityWillRemoveFromScene(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *result;

  result = _C3DEntityGetSubAttributeOrderedDictionary(a1, CFSTR("kAnimationsKey"), 0);
  if (result)
    return (const __CFDictionary *)C3DOrderedDictionaryApplyFunction(result, (const char *)_removeAnimationPlayerSceneRef, a2);
  return result;
}

void _fillAnimationManager(void *a1, uint64_t *cf, uint64_t a3)
{
  uint64_t v5;
  float32x4_t *v6;

  v6 = *(float32x4_t **)a3;
  v5 = *(_QWORD *)(a3 + 8);
  C3DAddSceneRef(cf, *(_QWORD *)(a3 + 16));
  C3DAnimationManagerAddAnimationPlayerForKey(v5, (uint64_t)cf, v6, a1);
}

void _fillAnimationManagerWithActions(uint64_t a1, const void *a2, uint64_t a3)
{
  C3DAnimationManagerAddAction(*(_QWORD *)(a3 + 8), *(void **)a3, a2);
}

void C3D::MBTileMaxPass::MBTileMaxPass(C3D::MBTileMaxPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  _QWORD *v3;

  C3D::ComputePass::ComputePass(this, a2, a3);
  *v3 = off_1EA598F38;
}

const char *C3D::MBTileMaxPass::name(C3D::MBTileMaxPass *this)
{
  return "MBTileMaxPass";
}

void C3D::MBTileMaxPass::setup(C3D::MBTileMaxPass *this)
{
  C3D::PassDescriptor *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  unsigned int v7;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = (C3D::MBTileMaxPass *)((char *)this + 32);
  v3 = (*(uint64_t (**)(C3D::MBTileMaxPass *))(*(_QWORD *)this + 88))(this);
  v4 = C3D::PassDescriptor::inputAtIndex(v2, 0);
  *(_QWORD *)(v4 + 8) = "VELOCITY";
  *(_WORD *)(v4 + 16) = (int)*(float *)(v3 + 8);
  *(_WORD *)(v4 + 18) = (int)*(float *)(v3 + 12);
  v5 = C3D::PassDescriptor::outputAtIndex(v2, 0);
  *(_QWORD *)(v5 + 8) = "MB-TileMax";
  *(_WORD *)(v5 + 28) = 115;
  *(_WORD *)(v5 + 16) = (int)(float)(*(float *)(v3 + 8) * 0.5);
  *(_WORD *)(v5 + 18) = (int)(float)(*(float *)(v3 + 12) * 0.5);
  v6 = fmax((double)(float)(*(float *)(v3 + 8) * 0.5), (double)(float)(*(float *)(v3 + 12) * 0.5));
  v7 = (int)(float)(floorf(log2f(v6)) + 1.0);
  if (v7 >= 6)
    LOBYTE(v7) = 6;
  *(_BYTE *)(v5 + 30) = v7;
}

void C3D::MBTileMaxPass::compile(C3D::MBTileMaxPass *this)
{
  uint64_t RenderContext;
  void *v3;
  C3D::RenderGraphResourceManager *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v5 = (*(uint64_t (**)(C3D::MBTileMaxPass *))(*(_QWORD *)this + 64))(this);
  v6 = C3D::RenderGraphResourceManager::get(v4, v5);
  *((_QWORD *)this + 14) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA599FF8;
    *((_QWORD *)this + 14) = v7;
    v8 = (*(uint64_t (**)(C3D::MBTileMaxPass *))(*(_QWORD *)this + 64))(this);
    C3D::RenderGraphResourceManager::set((uint64_t)v4, v8, *((_QWORD *)this + 14));
    v9 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("scn_motionblur_tilemax"));
    v10 = *((_QWORD *)this + 14);
    v11 = *(void **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v9;
    if (v11)

  }
}

unint64_t C3D::MBTileMaxPass::execute(C3D::Pass *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  void **v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  MTLComputePipelineState *v8;
  unint64_t result;
  unint64_t v10;
  MTLTexture *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  MTLComputePipelineState *v15;

  v3 = *a2;
  v4 = C3D::Pass::inputTextureAtIndex(a1, 0);
  if ((void **)v3->_textures[0] != v4)
  {
    v3->_textures[0] = (MTLTexture *)v4;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v5 = C3D::Pass::outputTextureAtIndex(a1, 0);
  v6 = v5;
  if ((_QWORD *)v3->_textures[1] != v5)
  {
    v3->_textures[1] = (MTLTexture *)v5;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v7 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 14) + 16);
  v8 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v7);
  SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v6, v8);
  result = objc_msgSend(v6, "mipmapLevelCount");
  if (result >= 2)
  {
    v10 = 1;
    v11 = (MTLTexture *)v6;
    do
    {
      v12 = objc_msgSend(v6, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v6, "pixelFormat"), objc_msgSend(v6, "textureType"), v10, 1, 0, 1);
      v13 = (void *)v12;
      if (v3->_textures[0] != v11)
      {
        v3->_textures[0] = v11;
        v3->_texturesToBind[0] |= 1uLL;
      }
      if (v3->_textures[1] != (MTLTexture *)v12)
      {
        v3->_textures[1] = (MTLTexture *)v12;
        v3->_texturesToBind[0] |= 2uLL;
      }
      v14 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 14) + 16);
      v15 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v14);
      SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v13, v15);

      ++v10;
      result = objc_msgSend(v6, "mipmapLevelCount");
      v11 = (MTLTexture *)v13;
    }
    while (v10 < result);
  }
  return result;
}

void C3D::MBTileMaxPassResource::~MBTileMaxPassResource(C3D::MBTileMaxPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA599FF8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA599FF8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void _C3DEngineNotificationQueueCFFinalize(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const void *v3;
  const void *v4;

  v2 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  os_unfair_lock_unlock(v2);
}

CFStringRef _C3DEngineNotificationQueueCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DEngineNotificationQueue %p>"), a1);
}

CFStringRef _C3DEngineNotificationQueueCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DEngineNotificationQueue %p>"), a1);
}

void C3DEngineNotificationQueueStopObserving(_BYTE *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t SharedInstance;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineNotificationQueueStartObserving_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  if (a1[49])
  {
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterRemoveObserver(SharedInstance, a1, CFSTR("kC3DNotificationEntityAttributeDidChange"), 0);
  }
}

void ___dispatchAutoFlush_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const __CFDictionary *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "engineNotificationQueue");
  if (v2)
  {
    v3 = v2;
    if (CACurrentMediaTime() - *(double *)(v2 + 40) >= 1.0)
    {
      *(_BYTE *)(v3 + 48) = 0;
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
      v4 = *(const __CFDictionary **)(v3 + 16);
      *(_QWORD *)(v3 + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
      if (CFDictionaryGetCount(v4) >= 1)
        *(_BYTE *)(v3 + 50) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
      CFRelease(v4);
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
      _dispatchAutoFlush(v3);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
    }
  }
}

void _C3DDynamicBatchingSystemCFFinalize(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 16));
  free(*(void **)(a1 + 24));
}

CFStringRef _C3DDynamicBatchingSystemCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DDynamicBatchingSystem %p>"), a1);
}

CFStringRef _C3DDynamicBatchingSystemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DDynamicBatchingSystem %p>"), a1);
}

uint64_t C3DDynamicBatchingSystemCurrentBatchReset(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  return result;
}

BOOL C3DDynamicBatchingSystemCurrentBatchAppend(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  NSObject *v6;
  _BOOL4 v7;
  uint8_t v8[16];

  v2 = a1[4];
  v3 = a1[5];
  if (v2 >= v3)
  {
    v6 = scn_default_log();
    v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v7)
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1DCCB8000, v6, OS_LOG_TYPE_DEFAULT, "Warning: overflow the max batch size boundary", v8, 2u);
      return 0;
    }
  }
  else
  {
    v4 = a1[3];
    a1[4] = v2 + 1;
    *(_QWORD *)(v4 + 8 * v2) = a2;
    return v2 + 1 < v3;
  }
  return result;
}

void SCNCAction::SCNCAction(SCNCAction *this)
{
  this->var4 = 0;
  this->var1 = 0.0;
  this->var2 = 0;
  this->var0 = (void **)&off_1EA595108;
  *(_OWORD *)&this->var5 = xmmword_1DD02AF50;
  this->var7 = 0.0;
  this->var8 = 0.0;
  this->var9 = -1.0;
  *(_WORD *)&this->var10 = 0;
  *(_OWORD *)&this->var12 = 0u;
  *(_OWORD *)&this->var14 = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&this->var16 = _Q0;
  this->var18 = 1.0;
}

void SCNCAction::SCNCAction(SCNCAction *this, const SCNCAction *a2)
{
  this->var0 = (void **)&off_1EA595108;
  this->var1 = 0.0;
  this->var2 = a2->var2;
  this->var4 = 1;
  *(_OWORD *)&this->var5 = *(_OWORD *)&a2->var5;
  *(_OWORD *)&this->var7 = *(_OWORD *)&a2->var7;
  this->var9 = -1.0;
  *(_WORD *)&this->var10 = *(_WORD *)&a2->var10;
  this->var12 = 0;
  this->var13 = 0;
  this->var14 = a2->var14;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)&this->var15 = xmmword_1DD008310;
  *(_OWORD *)&this->var17 = _Q1;
}

void SCNCAction::~SCNCAction(SCNCAction *this)
{
  __CFString *var13;
  id var12;
  id var2;

  this->var0 = (void **)&off_1EA595108;
  var13 = this->var13;
  if (var13)
    CFRelease(var13);
  var12 = this->var12;
  if (var12)
    _Block_release(var12);
  var2 = this->var2;
  if (var2)
    _Block_release(var2);
}

{
  SCNCAction::~SCNCAction(this);
  JUMPOUT(0x1DF0D41C0);
}

double SCNCAction::cpp_timeByApplyingTimingfunction(SCNCAction *this, double result)
{
  double v3;
  double var1;
  float v5;

  if (this->var14 || this->var2)
  {
    v3 = SCNCAction::cpp_ratioForTime(this, result);
    var1 = this->var1;
    v5 = var1;
    if ((LODWORD(v5) & 0x60000000) == 0)
      var1 = 0.000000999999997;
    return this->var5 + v3 * var1;
  }
  return result;
}

double SCNCAction::cpp_ratioForTime(SCNCAction *this, double a2)
{
  double var1;
  float v3;
  double v4;
  double var15;
  double var18;
  float v7;
  double v8;
  int v9;
  unsigned int v10;
  double v11;
  double v12;
  int v13;
  int v14;
  unsigned int v15;
  double v16;
  float v17;
  double v18;
  int v19;
  unsigned int v20;
  float v21;
  int v22;
  float v23;
  void (**var2)(float);

  var1 = this->var1;
  v3 = var1;
  if ((LODWORD(v3) & 0x60000000) == 0)
    var1 = 0.000000999999997;
  v4 = (a2 - this->var5) / var1;
  switch(this->var14)
  {
    case 1:
      v7 = this->var15 + this->var18 * v4;
      v8 = v7;
      v9 = LODWORD(v7);
      v10 = LODWORD(v7) & 0x7FFFFFFF;
      v11 = 1.0;
      if (v10 <= 0x3F800000)
        v11 = v8;
      if (v9 < 0)
        v11 = 0.0;
      v12 = 2.0 - v11;
      goto LABEL_21;
    case 2:
      *(float *)&v13 = this->var15 + this->var18 * v4;
      v14 = v13;
      v15 = v13 & 0x7FFFFFFF;
      v4 = (float)(1.0 - *(float *)&v13);
      if (v15 > 0x3F800000)
        v4 = 0.0;
      var15 = 1.0;
      if (v14 < 0)
        v4 = 1.0;
      var18 = -((2.0 - v4) * v4);
      goto LABEL_15;
    case 3:
      v17 = this->var15 + this->var18 * v4;
      v18 = v17;
      v19 = LODWORD(v17);
      v20 = LODWORD(v17) & 0x7FFFFFFF;
      v11 = 1.0;
      if (v20 <= 0x3F800000)
        v11 = v18;
      if (v19 < 0)
        v11 = 0.0;
      v12 = v11 * -2.0 + 3.0;
LABEL_21:
      v16 = v11 * (v11 * v12);
      goto LABEL_22;
    default:
      var15 = this->var15;
      var18 = this->var18;
LABEL_15:
      v16 = var15 + var18 * v4;
LABEL_22:
      v21 = v16;
      v22 = LODWORD(v21);
      v23 = 1.0;
      if ((LODWORD(v21) & 0x7FFFFFFFu) > 0x3F800000)
        v21 = 1.0;
      if (v22 < 0)
        v21 = 0.0;
      var2 = (void (**)(float))this->var2;
      if (var2)
      {
        if ((COERCE_UNSIGNED_INT(v21 + -1.0) & 0x60000000) != 0)
          var2[2](v21);
      }
      else
      {
        return v21;
      }
      return v23;
  }
}

uint64_t SCNCAction::cpp_reverse(SCNCAction *this)
{
  return 0;
}

uint64_t SCNCAction::cpp_copy(SCNCAction *this)
{
  return 0;
}

void SCNCAction::cpp_updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  float v6;

  v6 = SCNCAction::cpp_ratioForTime(this, a3);
  if ((COERCE_UNSIGNED_INT(v6 + -1.0) & 0x60000000) == 0)
    SCNCAction::didFinishWithTargetAtTime(this, a2, a3);
}

SCNCAction *SCNCAction::didFinishWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *v5;

  v5 = this;
  if (!this->var10)
  {
    this->var10 = 1;
    this = (SCNCAction *)this->var12;
    if (this)
      this = (SCNCAction *)((uint64_t (*)(void))this->var2)();
  }
  if (v5->var4)
    return (SCNCAction *)(*((uint64_t (**)(SCNCAction *, SCNNode *, double))v5->var0 + 14))(v5, a2, a3);
  return this;
}

uint64_t SCNCAction::cpp_backwardUpdateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 7))(this, a2, a3);
}

SCNCAction *SCNCAction::cpp_wasAddedToTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *v3;
  double var7;
  double var8;
  float v6;
  double v7;
  double v8;
  double v9;

  v3 = this;
  this->var10 = 0;
  var7 = this->var7;
  var8 = this->var8;
  v6 = var8;
  if ((LODWORD(v6) & 0x60000000) != 0)
  {
    v7 = var8 * 0.5;
    v8 = var7 - v7;
    v9 = v7 + var7;
    this = (SCNCAction *)rand();
    var7 = v8 + (double)(int)this / 2147483650.0 * (v9 - v8);
    if (var7 < 0.0)
      var7 = 0.0;
  }
  v3->var1 = var7;
  return this;
}

SCNCAction *SCNCAction::cpp_wasRemovedFromTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  *(_WORD *)&this->var10 = 1;
  return this;
}

SCNCAction *SCNCAction::cpp_willStartWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  this->var5 = a3;
  this->var15 = 0.0;
  *(_WORD *)&this->var10 = 256;
  return this;
}

SCNCAction *SCNCAction::cpp_reset(SCNCAction *this)
{
  this->var11 = 0;
  return this;
}

SCNCAction *SCNCAction::cpp_wasPausedWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  this->var6 = a3;
  return this;
}

double SCNCAction::cpp_willResumeWithTargetAtTime(SCNCAction *this, SCNNode *a2, double result)
{
  double var6;

  var6 = this->var6;
  if (var6 > 0.0)
  {
    result = result - var6 + this->var5;
    this->var5 = result;
    this->var6 = -1.0;
  }
  return result;
}

double SCNCAction::cpp_timeJumpWithTarget(SCNCAction *this, SCNNode *a2, double a3)
{
  double result;

  result = this->var5 + a3;
  this->var5 = result;
  return result;
}

uint64_t SCNCAction::cpp_didFinishWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  uint64_t result;

  this->var10 = 1;
  result = C3DIsRunningInEditor();
  if ((result & 1) == 0)
    this->var11 = 0;
  return result;
}

uint64_t SCNCAction::updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 7))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "updateWithTarget:forTime:", a2, a3);
}

uint64_t SCNCAction::wasAddedToTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  int v6;
  __n128 v7;

  this->var9 = -1.0;
  v6 = C3DIsRunningInEditor();
  v7.n128_u64[0] = 0;
  if (!v6)
    v7.n128_f64[0] = a3;
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, __n128))this->var0 + 8))(this, a2, v7);
  else
    return objc_msgSend(this->var3, "wasAddedToTarget:atTime:", a2, v7.n128_f64[0]);
}

uint64_t SCNCAction::wasRemovedFromTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 9))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "wasRemovedFromTarget:atTime:", a2, a3);
}

uint64_t SCNCAction::willStartWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  this->var9 = -1.0;
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 10))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "willStartWithTarget:atTime:", a2, a3);
}

uint64_t SCNCAction::wasPausedWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 11))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "wasPausedWithTarget:atTime:", a2, a3);
}

uint64_t SCNCAction::willResumeWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 12))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "willResumeWithTarget:atTime:", a2, a3);
}

uint64_t SCNCAction::timeJumpWithTarget(SCNCAction *this, SCNNode *a2, double a3)
{
  if (this->var4)
    return (*((uint64_t (**)(SCNCAction *, SCNNode *, double))this->var0 + 13))(this, a2, a3);
  else
    return objc_msgSend(this->var3, "timeJumpWithTarget:timeOffset:", a2, a3);
}

double SCNCAction::setSpeed(SCNCAction *this, double a2)
{
  CFTimeInterval v4;
  double var6;
  double var5;
  double result;

  if ((C3DIsRunningInEditor() & 1) == 0)
  {
    v4 = CACurrentMediaTime();
    var5 = this->var5;
    var6 = this->var6;
    if (var6 > var5)
    {
      this->var5 = var5 + v4 - var6;
      this->var6 = v4;
    }
    this->var15 = SCNCAction::cpp_ratioForTime(this, v4);
    this->var5 = v4;
  }
  result = this->var16 * a2;
  this->var17 = a2;
  this->var18 = result;
  return result;
}

double SCNCAction::setBaseSpeed(SCNCAction *this, double a2)
{
  CFTimeInterval v4;
  double var6;
  double var5;
  double result;

  if ((C3DIsRunningInEditor() & 1) == 0)
  {
    v4 = CACurrentMediaTime();
    var5 = this->var5;
    var6 = this->var6;
    if (var6 > var5)
    {
      this->var5 = var5 + v4 - var6;
      this->var6 = v4;
    }
    this->var15 = SCNCAction::cpp_ratioForTime(this, v4);
    this->var5 = v4;
  }
  this->var16 = a2;
  result = this->var17 * a2;
  this->var18 = result;
  return result;
}

double SCNCAction::finishTime(SCNCAction *this)
{
  double result;

  result = this->var9;
  if (result < 0.0)
    return this->var5 + this->var1 * ((1.0 - this->var15) / this->var18);
  return result;
}

void sub_1DCEDF0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t C3DFXShadowMapTargetNameWithNode(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SceneKit-spotShadowDepth-%p"), a1);
}

uint64_t C3DFXTechniqueCreateSpotShadow(uint64_t a1)
{
  const __CFDictionary *Light;
  int v3;
  uint64_t v4;
  __CFString *v5;
  const void *v6;
  uint64_t v7;
  uint64_t PassNamed;
  uint64_t v9;
  _QWORD v11[5];

  Light = C3DNodeGetLight(a1);
  if (Light)
    v3 = C3DLightGetUsesDeferredShadows((uint64_t)Light) ^ 1;
  else
    v3 = 0;
  v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SceneKit-spotShadowDepth-%p"), a1);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __C3DFXTechniqueCreateSpotShadow_block_invoke;
  v11[3] = &unk_1EA5A3568;
  v11[4] = v4;
  if (v3)
    v5 = CFSTR("C3DFXForwardShadowPass.json");
  else
    v5 = CFSTR("C3DFXDeferredShadowPass.json");
  v6 = (const void *)C3DJsonNamed(v5, (uint64_t)v11);
  v7 = C3DFXTechniqueCreateWithDescription(v6, a1);
  PassNamed = C3DFXTechniqueGetPassNamed(v7, CFSTR("SceneKit_renderSceneFromLight"));
  C3DFXPassSetInitializeCallback(PassNamed, (uint64_t)_initializeRenderFromLightPass);
  C3DFXPassSetUserInfo(PassNamed, a1);
  if ((v3 & 1) == 0)
  {
    v9 = C3DFXTechniqueGetPassNamed(v7, CFSTR("SceneKit_applyDeferredShadows"));
    C3DFXPassSetInitializeCallback(v9, (uint64_t)_initializeDeferredShadows);
    C3DFXPassSetWillExecuteCallback(v9, (uint64_t)_willExecuteDeferredShadows);
    C3DFXPassSetSetupCallback(v9, (uint64_t)_setupDeferredShadows);
    C3DFXPassSetUserInfo(v9, a1);
  }
  return v7;
}

void _initializeRenderFromLightPass(uint64_t *a1)
{
  const void *v2;
  uint64_t CommonProfile;
  uint64_t HashCode;
  const __CFDictionary *Light;
  uint64_t v6;
  float32x2_t *FramebufferDescription;
  NSObject *v13;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v2 = (const void *)C3DMaterialCreate();
  C3DEntitySetName((uint64_t)v2, CFSTR("--ShadowMaterial--"));
  CommonProfile = C3DMaterialGetCommonProfile((uint64_t)v2);
  C3DEffectCommonProfileSetLightingModel(CommonProfile, 4);
  C3DFXPassSetMaterial(*a1, v2);
  C3DColor4Make((float *)v14, 1.0, 1.0, 1.0, 1.0);
  C3DEffectCommonProfileSetColor(CommonProfile, 2, (float *)v14);
  CFRelease(v2);
  HashCode = C3DProgramHashCodeGetHashCode(*a1);
  Light = C3DNodeGetLight(HashCode);
  if (Light)
  {
    v6 = (uint64_t)Light;
    FramebufferDescription = (float32x2_t *)C3DFXPassGetFramebufferDescription(*a1);
    *FramebufferDescription = (float32x2_t)C3DLightGetRealShadowMapSize(v6);
    C3DFramebufferDescriptionSetViewportDependant((uint64_t)FramebufferDescription, 0);
    if (C3DLightGetShadowCascadeCount(v6) < 2 || !C3DLightSupportsShadowCascades(v6))
    {
      __asm { FMOV            V0.2S, #1.0 }
      *(float32x2_t *)&_Q0.n128_i8[8] = vadd_f32(*FramebufferDescription, (float32x2_t)0xC0000000C0000000);
      C3DFXPassSetViewport((__n128 *)*a1, _Q0);
    }
  }
  else
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      _initializeRenderFromLightPass_cold_1();
  }
}

void _initializeDeferredShadows(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t HashCode;
  const __CFDictionary *Light;
  uint64_t v7;
  const void *BuiltInProgramWithName;
  uint64_t Shader;
  const __CFString *Source;
  __CFString *Mutable;
  uint64_t EffectiveShadowSampleCount;
  uint64_t v13;
  const void *InputWithName;
  uint64_t v15;
  const void *v16;
  NSObject *v17;
  id v18;
  int ShadowCascadeCount;
  const __CFString *v20;
  const void *v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  char v25;
  int v26;
  int v27;

  v4 = *a1;
  HashCode = C3DProgramHashCodeGetHashCode(*a1);
  Light = C3DNodeGetLight(HashCode);
  if (Light)
  {
    v7 = (uint64_t)Light;
    if (a2 == 1)
    {
      BuiltInProgramWithName = (const void *)C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-spotShadow"));
      Shader = C3DFXGLSLProgramGetShader(BuiltInProgramWithName, 1);
      Source = (const __CFString *)C3DFXShaderGetSource(Shader);
      Mutable = CFStringCreateMutable(0, 0);
      EffectiveShadowSampleCount = C3DLightGetEffectiveShadowSampleCount(v7);
      CFStringAppend(Mutable, CFSTR("precision highp float;\n"));
      CFStringAppend(Mutable, CFSTR("#define TARGET_OS_IPHONE 1\n"));
      CFStringAppendFormat(Mutable, 0, CFSTR("#define MAX_SAMPLE %d\n"), EffectiveShadowSampleCount);
      v13 = _createShadowProgramWithLight_k++;
      CFStringAppendFormat(Mutable, 0, CFSTR("#define unshareIndex %d\n"), v13);
      if (C3DLightGetType(v7) == 3)
        CFStringAppend(Mutable, CFSTR("#define SPOT_SHADOW 1\n"));
      CFStringAppend(Mutable, CFSTR("#define USE_PCF 1\n"));
      CFStringAppend(Mutable, Source);
      C3DFXShaderSetSource(Shader, Mutable);
      CFRelease(Mutable);
      C3DFXPassSetProgram(v4, BuiltInProgramWithName);
      CFRelease(BuiltInProgramWithName);
      InputWithName = C3DFXPassGetInputWithName(v4, CFSTR("lightDepthSampler"));
      if (InputWithName)
      {
        v15 = (uint64_t)InputWithName;
        v16 = (const void *)C3DTextureSamplerDepthCompare();
        C3DFXPassInputSetSampler(v15, v16);
      }
    }
    else
    {
      v18 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      if (C3DLightSupportsShadowCascades(v7))
        ShadowCascadeCount = C3DLightGetShadowCascadeCount(v7);
      else
        ShadowCascadeCount = 1;
      v27 = ShadowCascadeCount;
      objc_msgSend(v18, "setConstantValue:type:withName:", &v27, 29, CFSTR("cascadeCount"));
      v26 = C3DLightGetEffectiveShadowSampleCount(v7);
      objc_msgSend(v18, "setConstantValue:type:withName:", &v26, 29, CFSTR("sampleCount"));
      v25 = 0;
      objc_msgSend(v18, "setConstantValue:type:withName:", &v25, 53, CFSTR("cascadeBlending"));
      v24 = C3DLightGetShadowCascadeDebugFactor(v7) > 0.0;
      objc_msgSend(v18, "setConstantValue:type:withName:", &v24, 53, CFSTR("debugCascades"));
      v23 = C3DLightGetType(v7) == 3;
      objc_msgSend(v18, "setConstantValue:type:withName:", &v23, 53, CFSTR("isSpotLight"));
      v22 = (C3DEngineContextGetCoordinatesSystemOptions(a1[3]) & 8) != 0;
      objc_msgSend(v18, "setConstantValue:type:withName:", &v22, 53, CFSTR("reverseZ"));
      if (v27 <= 1)
        v20 = CFSTR("deferredShadow_frag");
      else
        v20 = CFSTR("deferredShadowCascades_frag");
      v21 = (const void *)C3DFXMetalProgramCreateFromLibraryWithConstants(CFSTR("deferredShadow_vert"), v20, 0, v18, 0, 0);

      C3DFXProgramSetClientProgram((uint64_t)v21, *(unsigned __int8 *)(v4 + 80));
      C3DFXPassSetProgram(v4, v21);
      if (v21)
        CFRelease(v21);
    }
  }
  else
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      _initializeDeferredShadows_cold_1();
  }
}

void _willExecuteDeferredShadows(uint64_t *a1)
{
  uint64_t FXContext;
  float32x4_t *v3;
  const __CFDictionary *Light;
  uint64_t v5;
  uint64_t Scene;
  uint64_t LightingSystem;
  uint64_t MainPassInstance;
  char CoordinatesSystemOptions;
  float32x4_t *v10;
  __int128 v11;
  float ShadowRadius;
  __int32 v13;
  uint64_t v14;
  NSObject *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x8_t RealShadowMapSize;
  _QWORD v21[3];
  float v22;
  simd_float4x4 v23;
  float ShadowCascadeDebugFactor;
  __int128 v25;
  float32x4_t v26;
  float32x4_t v27;
  _BYTE v28[64];
  _BYTE v29[64];
  simd_float4 v30[16];
  _BYTE v31[32];
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  FXContext = C3DEngineContextGetFXContext(a1[3]);
  v3 = (float32x4_t *)a1[7];
  Light = C3DNodeGetLight((uint64_t)v3);
  if (Light)
  {
    v5 = (uint64_t)Light;
    Scene = C3DEngineContextGetScene(a1[3]);
    LightingSystem = C3DSceneGetLightingSystem(Scene);
    MainPassInstance = C3DFXContextGetMainPassInstance(FXContext);
    CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(a1[3]);
    C3DLightingSystemComputeShadowMatrices(LightingSystem, v3, (uint64_t)v31, 0, v30, (uint64_t)v29, (uint64_t)v28, CoordinatesSystemOptions);
    v10 = (float32x4_t *)(MainPassInstance + ((unint64_t)*(unsigned __int8 *)(FXContext + 120) << 6));
    v18 = v10[198];
    v19 = v32;
    v16 = v10[199];
    v17 = v10[200];
    v27 = vaddq_f32(v10[201], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v16, *(float32x2_t *)v33.f32, 1), v18, v33.f32[0]), v17, v33, 2));
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-u_lightPos-symbol"), &v27);
    v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v16, *(float32x2_t *)v19.f32, 1), v18, v19.f32[0]), v17, v19, 2);
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-u_lightDir-symbol"), &v26);
    C3DLightComputeSpotAttenuations(v5);
    v25 = v11;
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-u_lightSpotAtt-symbol"), &v25);
    C3DFXTechniqueSetValueForSymbolWithCount(a1[1], CFSTR("C3D-light_MVP-symbol"), v30, 4);
    C3DFXTechniqueSetValueForSymbolWithCount(a1[1], CFSTR("C3D-cascadeScale-symbol"), v29, 4);
    C3DFXTechniqueSetValueForSymbolWithCount(a1[1], CFSTR("C3D-cascadeBias-symbol"), v28, 4);
    ShadowCascadeDebugFactor = C3DLightGetShadowCascadeDebugFactor(v5);
    if (ShadowCascadeDebugFactor > 0.0)
      C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-shadowCascadeDebugFactor-symbol"), &ShadowCascadeDebugFactor);
    memset(&v23, 0, sizeof(v23));
    C3DMatrix4x4Invert((simd_float4x4 *)(MainPassInstance + ((unint64_t)*(unsigned __int8 *)(FXContext + 120) << 6) + 3552), &v23);
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-camera_MVP_i-symbol"), &v23);
    RealShadowMapSize = C3DLightGetRealShadowMapSize(v5);
    ShadowRadius = C3DLightGetShadowRadius(v5);
    v13 = RealShadowMapSize.i32[1];
    if (*(float *)RealShadowMapSize.i32 >= *(float *)&RealShadowMapSize.i32[1])
      v13 = RealShadowMapSize.i32[0];
    v22 = ShadowRadius / fmaxf(*(float *)&v13, 1.0);
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-shadowRadius-symbol"), &v22);
    v21[0] = C3DLightGetShadowColor(v5);
    v21[1] = v14;
    C3DFXTechniqueSetValueForSymbol(a1[1], CFSTR("C3D-shadowColor-symbol"), v21);
  }
  else
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      _willExecuteDeferredShadows_cold_1();
  }
}

void _setupDeferredShadows(uint64_t *a1)
{
  const __CFDictionary *Light;
  uint64_t v3;
  int EffectiveShadowSampleCount;
  int v5;
  NSObject *v6;
  float32x4_t v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  Light = C3DNodeGetLight(a1[7]);
  if (Light)
  {
    v3 = (uint64_t)Light;
    EffectiveShadowSampleCount = C3DLightGetEffectiveShadowSampleCount((uint64_t)Light);
    if (EffectiveShadowSampleCount >= 2)
    {
      v5 = EffectiveShadowSampleCount;
      C3DLightComputeShadowKernel(v3, v7, EffectiveShadowSampleCount, a1[3]);
      C3DFXTechniqueSetValueForSymbolWithCount(a1[1], CFSTR("C3D-shadowKernel-symbol"), v7, v5);
    }
  }
  else
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      _setupDeferredShadows_cold_1();
  }
}

void sub_1DCEE0914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  USDKitConverter::~USDKitConverter((USDKitConverter *)va);
  _Unwind_Resume(a1);
}

uint64_t USDKitConverter::makeUSKScene(USDKitConverter *this, NSURL *a2)
{
  id v3;
  id v4;
  void *v5;
  float v6;
  float v7;
  const __CFString *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  SCNNode *v19;
  NSString *GeomPath;
  float v21;
  double v22;
  double v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 7) = objc_msgSend((id)USKScene_weak, "newSceneWithURL:", a2);
  objc_msgSend(*((id *)this + 7), "setDictionaryMetadataWithKey:dictionaryKey:value:", CFSTR("customLayerData"), CFSTR("creator"), +[USKData_helper dataWithString:](USKData_helper, "dataWithString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SceneKit export preview %.02f"), 0x3FE51EB860000000)));
  v3 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", *((_QWORD *)this + 3));
  v4 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v3, USKNodeTypeTransform_weak);
  objc_msgSend(v4, "setDictionaryMetadataWithKey:dictionaryKey:value:", CFSTR("assetInfo"), CFSTR("name"), +[USKData_helper dataWithString:](USKData_helper, "dataWithString:", *((_QWORD *)this + 1)));
  objc_msgSend(v4, "setMetadataWithKey:value:", CFSTR("kind"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("component"))));
  objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("defaultPrim"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", *((_QWORD *)this + 1))));
  v5 = (void *)objc_msgSend(*(id *)this, "attributeForKey:", CFSTR("kSceneUpAxisAttributeKey"));
  if (!v5)
    goto LABEL_6;
  objc_msgSend(v5, "SCNVector3Value");
  if (v7 == 1.0)
  {
    v8 = CFSTR("X");
    goto LABEL_7;
  }
  if (v6 == 1.0)
    v8 = CFSTR("Z");
  else
LABEL_6:
    v8 = CFSTR("Y");
LABEL_7:
  objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("upAxis"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", v8)));
  objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("metersPerUnit"), +[USKData_helper dataWithDouble:](USKData_helper, "dataWithDouble:", C3DSceneGetUnit(objc_msgSend(*(id *)this, "sceneRef"))));
  USDKitConverter::prepareSkinning(this);
  USDKitConverter::prepareBlendShapes((id *)this);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v9 = (void *)objc_msgSend((id)objc_msgSend(*(id *)this, "rootNode"), "childNodes");
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v35 != v12)
          objc_enumerationMutation(v9);
        USDKitConverter::prepareAnimations(this, *(SCNNode **)(*((_QWORD *)&v34 + 1) + 8 * i));
      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    }
    while (v11);
  }
  USDKitConverter::calculateTimeCodes((uint64_t)this);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v14 = (void *)objc_msgSend((id)objc_msgSend(*(id *)this, "rootNode"), "childNodes");
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v31;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v31 != v17)
          objc_enumerationMutation(v14);
        v19 = *(SCNNode **)(*((_QWORD *)&v30 + 1) + 8 * j);
        GeomPath = (NSString *)USDKitConverter::getGeomPath(this);
        USDKitConverter::processSCNNode((uint64_t)this, v19, GeomPath, 0, 0);
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    }
    while (v16);
  }
  USDKitConverter::processBlendShapeAnimations((id *)this);
  ShapeBlending::updateAnimationsWithBlendShapeList((uint64_t *)this + 55);
  USDKitConverter::processSkinnedMeshes(this);
  if (*((double *)this + 59) > 0.0)
  {
    objc_msgSend((id)objc_msgSend(*(id *)this, "attributeForKey:", CFSTR("kSceneStartTimeAttributeKey")), "floatValue");
    v22 = v21 / *((double *)this + 63) + 0.0;
    v23 = (double)(int)v22;
    if (vabdd_f64(v22, v23) >= 0.001)
    {
      if (1.0 - (v22 - v23) < 0.001)
        v22 = v23 + 1.0;
    }
    else
    {
      v22 = (double)(int)v22;
    }
    objc_msgSend((id)objc_msgSend(*(id *)this, "attributeForKey:", CFSTR("kSceneEndTimeAttributeKey")), "floatValue");
    v25 = v24 / *((double *)this + 63) + 0.0;
    v26 = (double)(int)v25;
    if (vabdd_f64(v25, v26) >= 0.001)
    {
      if (1.0 - (v25 - v26) < 0.001)
        v25 = v26 + 1.0;
    }
    else
    {
      v25 = (double)(int)v25;
    }
    v27 = *((double *)this + 58);
    if (v27 == -1.0 || v27 > v22)
    {
      *((double *)this + 58) = v22;
      v27 = v22;
    }
    v28 = *((double *)this + 59);
    if (v28 == -1.0 || v28 < v25)
      *((double *)this + 59) = v25;
    objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("startTimeCode"), +[USKData_helper dataWithDouble:](USKData_helper, "dataWithDouble:", v27));
    objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("endTimeCode"), +[USKData_helper dataWithDouble:](USKData_helper, "dataWithDouble:", *((double *)this + 59)));
  }
  if (*((int *)this + 120) >= 1)
    objc_msgSend(*((id *)this + 7), "setMetadataWithKey:value:", CFSTR("timeCodesPerSecond"), +[USKData_helper dataWithInt:](USKData_helper, "dataWithInt:"));
  return *((_QWORD *)this + 7);
}

void ___ZL21SCNLoadUsdKitIfNeededv_block_invoke()
{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  NSObject *v79;

  v0 = dlopen("/System/Library/PrivateFrameworks/USDKit.framework/USDKit", 2);
  if (v0 || (v0 = dlopen("../SharedFrameworks/USDKit.framework/USDKit", 2)) != 0)
  {
    USKObjectPath_weak = (uint64_t)NSClassFromString(CFSTR("USKObjectPath"));
    USKToken_weak = (uint64_t)NSClassFromString(CFSTR("USKToken"));
    USKData_weak = (uint64_t)NSClassFromString(CFSTR("USKData"));
    USKScene_weak = (uint64_t)NSClassFromString(CFSTR("USKScene"));
    v1 = (uint64_t *)dlsym(v0, "USKDataTypeResourcePath");
    if (v1)
      v2 = *v1;
    else
      v2 = 0;
    USKDataTypeResourcePath_weak = v2;
    v3 = (uint64_t *)dlsym(v0, "USKDataTypeInt");
    if (v3)
      v4 = *v3;
    else
      v4 = 0;
    USKDataTypeInt_weak = v4;
    v5 = (uint64_t *)dlsym(v0, "USKDataTypeBool");
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    USKDataTypeBool_weak = v6;
    v7 = (uint64_t *)dlsym(v0, "USKDataTypeDouble3");
    if (v7)
      v8 = *v7;
    else
      v8 = 0;
    USKDataTypeDouble3_weak = v8;
    v9 = (uint64_t *)dlsym(v0, "USKDataTypeDouble4x4");
    if (v9)
      v10 = *v9;
    else
      v10 = 0;
    USKDataTypeDouble4x4_weak = v10;
    v11 = (uint64_t *)dlsym(v0, "USKDataTypeDouble4x4Array");
    if (v11)
      v12 = *v11;
    else
      v12 = 0;
    USKDataTypeDouble4x4Array_weak = v12;
    v13 = (uint64_t *)dlsym(v0, "USKDataTypeFloat");
    if (v13)
      v14 = *v13;
    else
      v14 = 0;
    USKDataTypeFloat_weak = v14;
    v15 = (uint64_t *)dlsym(v0, "USKDataTypeFloat2");
    if (v15)
      v16 = *v15;
    else
      v16 = 0;
    USKDataTypeFloat2_weak = v16;
    v17 = (uint64_t *)dlsym(v0, "USKDataTypeFloat3");
    if (v17)
      v18 = *v17;
    else
      v18 = 0;
    USKDataTypeFloat3_weak = v18;
    v19 = (uint64_t *)dlsym(v0, "USKDataTypeFloat4");
    if (v19)
      v20 = *v19;
    else
      v20 = 0;
    USKDataTypeFloat4_weak = v20;
    v21 = (uint64_t *)dlsym(v0, "USKDataTypeFloat2Array");
    if (v21)
      v22 = *v21;
    else
      v22 = 0;
    USKDataTypeFloat2Array_weak = v22;
    v23 = (uint64_t *)dlsym(v0, "USKDataTypeFloat3Array");
    if (v23)
      v24 = *v23;
    else
      v24 = 0;
    USKDataTypeFloat3Array_weak = v24;
    v25 = (uint64_t *)dlsym(v0, "USKDataTypeFloatArray");
    if (v25)
      v26 = *v25;
    else
      v26 = 0;
    USKDataTypeFloatArray_weak = v26;
    v27 = (uint64_t *)dlsym(v0, "USKDataTypeIntArray");
    if (v27)
      v28 = *v27;
    else
      v28 = 0;
    USKDataTypeIntArray_weak = v28;
    v29 = (uint64_t *)dlsym(v0, "USKDataTypeObjectPath");
    if (v29)
      v30 = *v29;
    else
      v30 = 0;
    USKDataTypeObjectPath_weak = v30;
    v31 = (uint64_t *)dlsym(v0, "USKDataTypeObjectPathArray");
    if (v31)
      v32 = *v31;
    else
      v32 = 0;
    USKDataTypeObjectPathArray_weak = v32;
    v33 = (uint64_t *)dlsym(v0, "USKDataTypeQuatf");
    if (v33)
      v34 = *v33;
    else
      v34 = 0;
    USKDataTypeQuatf_weak = v34;
    v35 = (uint64_t *)dlsym(v0, "USKDataTypeQuatfArray");
    if (v35)
      v36 = *v35;
    else
      v36 = 0;
    USKDataTypeQuatfArray_weak = v36;
    v37 = (uint64_t *)dlsym(v0, "USKDataTypeStringArray");
    if (v37)
      v38 = *v37;
    else
      v38 = 0;
    USKDataTypeStringArray_weak = v38;
    v39 = (uint64_t *)dlsym(v0, "USKDataTypeToken");
    if (v39)
      v40 = *v39;
    else
      v40 = 0;
    USKDataTypeToken_weak = v40;
    v41 = (uint64_t *)dlsym(v0, "USKDataTypeTokenArray");
    if (v41)
      v42 = *v41;
    else
      v42 = 0;
    USKDataTypeTokenArray_weak = v42;
    v43 = (uint64_t *)dlsym(v0, "USKNodeTypeCamera");
    if (v43)
      v44 = *v43;
    else
      v44 = 0;
    USKNodeTypeCamera_weak = v44;
    v45 = (uint64_t *)dlsym(v0, "USKNodeTypeMaterial");
    if (v45)
      v46 = *v45;
    else
      v46 = 0;
    USKNodeTypeMaterial_weak = v46;
    v47 = (uint64_t *)dlsym(v0, "USKNodeTypeMesh");
    if (v47)
      v48 = *v47;
    else
      v48 = 0;
    USKNodeTypeMesh_weak = v48;
    v49 = (uint64_t *)dlsym(v0, "USKNodeTypeMeshGroup");
    if (v49)
      v50 = *v49;
    else
      v50 = 0;
    USKNodeTypeMeshGroup_weak = v50;
    v51 = (uint64_t *)dlsym(v0, "USKNodeTypeScope");
    if (v51)
      v52 = *v51;
    else
      v52 = 0;
    USKNodeTypeScope_weak = v52;
    v53 = (uint64_t *)dlsym(v0, "USKNodeTypeShader");
    if (v53)
      v54 = *v53;
    else
      v54 = 0;
    USKNodeTypeShader_weak = v54;
    v55 = (uint64_t *)dlsym(v0, "USKNodeTypeSkeletalAnimation");
    if (v55)
      v56 = *v55;
    else
      v56 = 0;
    USKNodeTypeSkeletalAnimation_weak = v56;
    v57 = (uint64_t *)dlsym(v0, "USKNodeTypeSkeleton");
    if (v57)
      v58 = *v57;
    else
      v58 = 0;
    USKNodeTypeSkeleton_weak = v58;
    v59 = (uint64_t *)dlsym(v0, "USKNodeTypeSkeletonRoot");
    if (v59)
      v60 = *v59;
    else
      v60 = 0;
    USKNodeTypeSkeletonRoot_weak = v60;
    v61 = (uint64_t *)dlsym(v0, "USKNodeTypeBlendShape");
    if (v61)
      v62 = *v61;
    else
      v62 = 0;
    USKNodeTypeBlendShape_weak = v62;
    v63 = (uint64_t *)dlsym(v0, "USKNodeTypeTransform");
    if (v63)
      v64 = *v63;
    else
      v64 = 0;
    USKNodeTypeTransform_weak = v64;
    v65 = (uint64_t *)dlsym(v0, "USKRoleTypeColor");
    if (v65)
      v66 = *v65;
    else
      v66 = 0;
    USKRoleTypeColor_weak = v66;
    v67 = (uint64_t *)dlsym(v0, "USKRoleTypeNone");
    if (v67)
      v68 = *v67;
    else
      v68 = 0;
    USKRoleTypeNone_weak = v68;
    v69 = (uint64_t *)dlsym(v0, "USKRoleTypeNormal");
    if (v69)
      v70 = *v69;
    else
      v70 = 0;
    USKRoleTypeNormal_weak = v70;
    v71 = (uint64_t *)dlsym(v0, "USKRoleTypePoint");
    if (v71)
      v72 = *v71;
    else
      v72 = 0;
    USKRoleTypePoint_weak = v72;
    v73 = (uint64_t *)dlsym(v0, "USKRoleTypeVector");
    if (v73)
      v74 = *v73;
    else
      v74 = 0;
    USKRoleTypeVector_weak = v74;
    v75 = (uint64_t *)dlsym(v0, "USKRoleTypeTextureCoordinate");
    if (v75)
      v76 = *v75;
    else
      v76 = 0;
    USKRoleTypeTextureCoordinate_weak = v76;
    v77 = (uint64_t *)dlsym(v0, "USKSchemaTypeBindingAPI");
    if (v77)
      v78 = *v77;
    else
      v78 = 0;
    USKSchemaTypeBindingAPI_weak = v78;
    SCNLoadUsdKitIfNeeded(void)::loaded = 1;
  }
  else
  {
    v79 = scn_default_log();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      ___ZL21SCNLoadUsdKitIfNeededv_block_invoke_cold_1(v79);
  }
}

void USDKitConverter::USDKitConverter(USDKitConverter *this, SCNScene *a2, NSString *a3, NSURL *a4, NSString *a5)
{
  NSString *v7;
  void *v8;
  float v9;
  double v10;
  double v11;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = a5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 11) = objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", 8, a4);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  *((_QWORD *)this + 27) = (char *)this + 224;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = (char *)this + 328;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 52) = (char *)this + 424;
  *((_QWORD *)this + 49) = (char *)this + 400;
  *((_QWORD *)this + 54) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 468) = 0u;
  *((_QWORD *)this + 61) = 0x7FEFFFFFFFFFFFFFLL;
  *((_OWORD *)this + 31) = xmmword_1DD02AF80;
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 3) = objc_msgSend(CFSTR("/"), "stringByAppendingString:", v8);
  objc_msgSend(-[SCNScene attributeForKey:](a2, "attributeForKey:", CFSTR("kSceneFrameRateAttributeKey")), "floatValue");
  if (v9 > 1.0)
  {
    v10 = 1.0 / v9;
    if (v10 > 0.001)
    {
      v11 = *((double *)this + 63);
      if (v11 == 0.0 || v11 > v10)
        *((double *)this + 63) = v10;
    }
  }
}

void sub_1DCEE178C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  std::__tree<std::string>::destroy(*(_QWORD *)(v1 - 104), **(char ***)(v1 - 96));
  _Unwind_Resume(*(_Unwind_Exception **)(v1 - 88));
}

void *`anonymous namespace'::correctPath(_anonymous_namespace_ *this, NSString *a2)
{
  void *v2;
  uint64_t v4;

  v4 = 0;
  v2 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("[^A-Za-z0-9]"), 1, &v4), "stringByReplacingMatchesInString:options:range:withTemplate:", this, 0, 0, -[_anonymous_namespace_ length](this, "length"), CFSTR("_"));
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet"), "characterIsMember:", objc_msgSend(v2, "characterAtIndex:", 0)))return (void *)objc_msgSend(CFSTR("_"), "stringByAppendingString:", v2);
  return v2;
}

void ShapeBlending::~ShapeBlending(ShapeBlending *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1DF0D41C0](*v2, 0x1080C406BDE4C18);
      ++v2;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void Skinning::~Skinning(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;

  v2 = *this;
  v3 = this[1];
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      std::__tree<char>::destroy(v4 + 64, *(_QWORD **)(v4 + 72));
      std::__tree<char>::destroy(v4 + 32, *(_QWORD **)(v4 + 40));
      v5 = *(void **)(v4 + 8);
      if (v5)
      {
        *(_QWORD *)(v4 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x1DF0D41C0](v4, 0x10A0C402AA64608);
    }
    ++v2;
  }
  v6 = this[3];
  v7 = this[4];
  while (v6 != v7)
  {
    v8 = *v6;
    if (*v6)
    {
      std::__tree<char>::destroy(v8 + 72, *(_QWORD **)(v8 + 80));
      std::__tree<char>::destroy(v8 + 48, *(_QWORD **)(v8 + 56));
      std::__tree<char>::destroy(v8 + 24, *(_QWORD **)(v8 + 32));
      v9 = *(void **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(v8 + 8) = v9;
        operator delete(v9);
      }
      MEMORY[0x1DF0D41C0](v8, 0x10A0C400C584343);
    }
    ++v6;
  }
  std::__tree<char>::destroy((uint64_t)(this + 6), this[7]);
  v10 = this[3];
  if (v10)
  {
    this[4] = v10;
    operator delete(v10);
  }
  v11 = *this;
  if (*this)
  {
    this[1] = v11;
    operator delete(v11);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<__C3DImage *,std::string>,std::__map_value_compare<__C3DImage *,std::__value_type<__C3DImage *,std::string>,std::less<__C3DImage *>,true>,std::allocator<std::__value_type<__C3DImage *,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__C3DImage *,std::string>,std::__map_value_compare<__C3DImage *,std::__value_type<__C3DImage *,std::string>,std::less<__C3DImage *>,true>,std::allocator<std::__value_type<__C3DImage *,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<__C3DImage *,std::string>,std::__map_value_compare<__C3DImage *,std::__value_type<__C3DImage *,std::string>,std::less<__C3DImage *>,true>,std::allocator<std::__value_type<__C3DImage *,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void USDKitConverter::prepareSkinning(USDKitConverter *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  SCNNode *v7;
  _anonymous_namespace_ ****v8;
  _anonymous_namespace_ ****v9;
  _anonymous_namespace_ ***v10;
  _anonymous_namespace_ **v11;
  _anonymous_namespace_ **v12;
  _anonymous_namespace_ **v13;
  _anonymous_namespace_ **v14;
  _anonymous_namespace_ *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  void *v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  SCNNode *v29;
  Skeleton **v30;
  Skeleton **v31;
  uint64_t **v32;
  Skeleton *v33;
  _anonymous_namespace_ *NodeWithAnimation;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*(id *)this, "rootNode"), "childNodes");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v36 != v5)
          objc_enumerationMutation(v2);
        USDKitConverter::prepareSkinning(this, *(SCNNode **)(*((_QWORD *)&v35 + 1) + 8 * i));
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v4);
  }
  Skinning::createSkeletonsFromSkins((USDKitConverter *)((char *)this + 344));
  v8 = (_anonymous_namespace_ ****)*((_QWORD *)this + 46);
  v9 = (_anonymous_namespace_ ****)*((_QWORD *)this + 47);
  if (v8 != v9)
  {
    do
    {
      v10 = *v8;
      v11 = **v8;
      v12 = (*v8)[1];
      if (v11 != v12)
      {
        {
          if (++v11 == v12)
          {
            v13 = *v10;
            v14 = v10[1];
            if (v13 != v14)
            {
              v15 = *v13;
              do
              {
                NodeWithAnimation = 0;
                NodeWithAnimation = *v13;
                if (v15 != NodeWithAnimation)
                  std::__tree<SCNNode *>::__emplace_unique_key_args<SCNNode *,SCNNode * const&>((uint64_t **)this + 31, (unint64_t *)&NodeWithAnimation, (uint64_t *)&NodeWithAnimation);
                ++v13;
              }
              while (v13 != v14);
            }
            break;
          }
        }
      }
      ++v8;
    }
    while (v8 != v9);
    v16 = (uint64_t *)*((_QWORD *)this + 46);
    v17 = (uint64_t *)*((_QWORD *)this + 47);
    if (v16 != v17)
    {
      v18 = (char *)this + 280;
      do
      {
        v19 = (char *)*((_QWORD *)this + 34);
        if (v19 != v18)
        {
          v20 = *v16;
          do
          {
            if (*(_QWORD *)(*((_QWORD *)v19 + 5) + 56) == v20)
            {
              v24 = **(void ***)v20;
              if (v24)
              {
                v25 = (_anonymous_namespace_ *)*((_QWORD *)v19 + 4);
                v26 = objc_msgSend(v24, "parentNode");
                if (v26)
                {
                  v27 = (_anonymous_namespace_ *)v26;
                  do
                  {
                    if (v25)
                    {
                      v28 = v25;
                      while (1)
                      {
                        v28 = (_anonymous_namespace_ *)-[_anonymous_namespace_ parentNode](v28, "parentNode");
                        if (!v28)
                          break;
                        if (v27 == v28)
                        {
                          if ((_anonymous_namespace_ *)objc_msgSend(*(id *)this, "rootNode") != v27
                          {
                            *(_QWORD *)(v20 + 96) = v27;
                          }
                          goto LABEL_23;
                        }
                      }
                    }
                    v27 = (_anonymous_namespace_ *)-[_anonymous_namespace_ parentNode](v27, "parentNode");
                  }
                  while (v27);
                }
              }
            }
LABEL_23:
            v21 = (char *)*((_QWORD *)v19 + 1);
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = *(char **)v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (char *)*((_QWORD *)v19 + 2);
                v23 = *(_QWORD *)v22 == (_QWORD)v19;
                v19 = v22;
              }
              while (!v23);
            }
            v19 = v22;
          }
          while (v22 != v18);
        }
        ++v16;
      }
      while (v16 != v17);
      v30 = (Skeleton **)*((_QWORD *)this + 46);
      v31 = (Skeleton **)*((_QWORD *)this + 47);
      if (v30 != v31)
      {
        v32 = (uint64_t **)((char *)this + 96);
        do
        {
          v33 = *v30;
          NodeWithAnimation = 0;
          NodeWithAnimation = (_anonymous_namespace_ *)Skeleton::findNodeWithAnimation(v33);
          if (NodeWithAnimation)
            std::__tree<SCNNode *>::__emplace_unique_key_args<SCNNode *,SCNNode * const&>(v32, (unint64_t *)&NodeWithAnimation, (uint64_t *)&NodeWithAnimation);
          ++v30;
        }
        while (v30 != v31);
      }
    }
  }
}

uint64_t USDKitConverter::prepareBlendShapes(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*this, "rootNode", 0), "childNodes");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        USDKitConverter::prepareBlendShape((uint64_t **)this, *(SCNNode **)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t USDKitConverter::prepareAnimations(USDKitConverter *this, SCNNode *a2)
{
  NSUInteger v4;
  NSUInteger v5;
  uint64_t v6;
  id v7;
  NSArray *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (-[SCNNode animationKeys](a2, "animationKeys"))
  {
    if (-[NSArray count](-[SCNNode animationKeys](a2, "animationKeys"), "count"))
    {
      v4 = -[NSArray count](-[SCNNode animationKeys](a2, "animationKeys"), "count");
      if (v4)
      {
        v5 = v4;
        v6 = 0;
        while (1)
        {
          v7 = -[SCNNode animationPlayerForKey:](a2, "animationPlayerForKey:", -[NSArray objectAtIndexedSubscript:](-[SCNNode animationKeys](a2, "animationKeys"), "objectAtIndexedSubscript:", v6));
          if (v7)
            break;
          if (v5 == ++v6)
            goto LABEL_9;
        }
        USDKitConverter::prepareCAAnimation(this, (CAAnimationGroup *)objc_msgSend((id)objc_msgSend(v7, "animation"), "caAnimation"));
      }
    }
  }
LABEL_9:
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v8 = -[SCNNode childNodes](a2, "childNodes", 0);
  result = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v8);
        USDKitConverter::prepareAnimations(this, *(SCNNode **)(*((_QWORD *)&v13 + 1) + 8 * v12++));
      }
      while (v10 != v12);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      v10 = result;
    }
    while (result);
  }
  return result;
}

uint64_t USDKitConverter::calculateTimeCodes(uint64_t this)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v1 = *(double *)(this + 504);
  if (v1 == 0.0)
  {
    *(_QWORD *)(this + 504) = 0x3FA5555555555555;
    v1 = 0.0416666667;
  }
  v2 = *(double *)(this + 496);
  if (v2 >= 0.0)
  {
    v3 = 1.0 / v1 + 0.0;
    v4 = (double)(int)v3;
    if (vabdd_f64(v3, v4) >= 0.001)
    {
      if (1.0 - (v3 - v4) < 0.001)
        v3 = v4 + 1.0;
    }
    else
    {
      v3 = (double)(int)v3;
    }
    *(_DWORD *)(this + 480) = (int)(v3 + 0.5);
    v5 = *(double *)(this + 488) / v1 + 0.0;
    v6 = (double)(int)v5;
    if (vabdd_f64(v5, v6) >= 0.001)
    {
      if (1.0 - (v5 - v6) < 0.001)
        v5 = v6 + 1.0;
    }
    else
    {
      v5 = (double)(int)v5;
    }
    *(double *)(this + 464) = v5;
    v7 = v2 / v1 + 0.0;
    v8 = (double)(int)v7;
    if (vabdd_f64(v7, v8) >= 0.001)
    {
      if (1.0 - (v7 - v8) < 0.001)
        v7 = v8 + 1.0;
    }
    else
    {
      v7 = (double)(int)v7;
    }
    *(double *)(this + 472) = v7;
  }
  return this;
}

uint64_t USDKitConverter::processSCNNode(uint64_t this, SCNNode *a2, NSString *a3, SCNNode *a4, _BOOL4 a5)
{
  SCNNode *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *SkeletonByJoint;
  NSString *NodeName;
  NSString *v17;
  Skeleton **i;
  Skeleton *v19;
  _BOOL4 v20;
  uint64_t j;
  id UskSkeleton;
  char v23;
  id v24;
  unint64_t v25;
  SCNNode **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  double v34;
  uint64_t v35;
  SCNNode *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  NSArray *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  SCNNode **v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  SCNNode *v55;
  void **v56;
  _BYTE v57[128];
  uint64_t v58;

  v8 = a2;
  v9 = this;
  v58 = *MEMORY[0x1E0C80C00];
  v55 = a2;
  v10 = *(_QWORD **)(this + 256);
  if (!v10)
    goto LABEL_12;
  v11 = (_QWORD *)(this + 256);
  do
  {
    v12 = v10[4];
    v13 = v12 >= (unint64_t)a2;
    if (v12 >= (unint64_t)a2)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == (_QWORD *)(this + 256) || v11[4] > (unint64_t)a2)
  {
LABEL_12:
    SkeletonByJoint = Skinning::findSkeletonByJoint((Skinning *)(this + 344), a2);
    if (SkeletonByJoint && SkeletonByJoint[16])
      a3 = (NSString *)SkeletonByJoint[16];
    NodeName = (NSString *)USDKitConverter::makeNodeName((USDKitConverter *)v9, a3, v8);
    v17 = -[NSString stringByAppendingPathComponent:](a3, "stringByAppendingPathComponent:", NodeName);
    for (i = *(Skeleton ***)(v9 + 368); i != *(Skeleton ***)(v9 + 376); ++i)
    {
      v19 = *i;
      if (**(SCNNode ***)*i == v8)
        goto LABEL_20;
    }
    v19 = 0;
LABEL_20:
    v20 = ((unint64_t)a4 | (unint64_t)-[SCNNode skinner](v8, "skinner")) == 0;
    for (j = *(_QWORD *)(v9 + 368); j != *(_QWORD *)(v9 + 376); j += 8)
    {
      if (*(SCNNode **)(*(_QWORD *)j + 96) == v8)
      {
        UskSkeleton = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *(_QWORD *)(v9 + 56), +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v17), USKNodeTypeSkeletonRoot_weak);
        v23 = 0;
        LOBYTE(a5) = 1;
        if (!UskSkeleton)
          goto LABEL_65;
        goto LABEL_47;
      }
    }
    if (v19)
    {
      UskSkeleton = Skeleton::makeUskSkeleton((uint64_t)v19, *(_QWORD *)(v9 + 56), (uint64_t)v17);
      v23 = 1;
      a4 = (SCNNode *)v19;
      if (!UskSkeleton)
        goto LABEL_65;
      goto LABEL_47;
    }
    if (!-[SCNNode geometry](v8, "geometry"))
    {
      if (-[SCNNode camera](v8, "camera"))
        v24 = USDKitConverter::processCamera((USDKitConverter *)v9, v8, v17, -[SCNNode camera](v8, "camera"));
      else
        v24 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *(_QWORD *)(v9 + 56), +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v17), USKNodeTypeTransform_weak);
      UskSkeleton = v24;
LABEL_46:
      v23 = 0;
      if (!UskSkeleton)
        goto LABEL_65;
      goto LABEL_47;
    }
    if (v20)
    {
      UskSkeleton = USDKitConverter::processMesh((USDKitConverter *)v9, v8, v17, NodeName);
      a4 = 0;
      goto LABEL_46;
    }
    v26 = *(SCNNode ***)(v9 + 304);
    v25 = *(_QWORD *)(v9 + 312);
    if ((unint64_t)v26 >= v25)
    {
      v28 = *(_QWORD *)(v9 + 296);
      v29 = ((uint64_t)v26 - v28) >> 4;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60)
        abort();
      v31 = v25 - v28;
      if (v31 >> 3 > v30)
        v30 = v31 >> 3;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v32 = 0xFFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
        v33 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v9 + 312, v32);
      else
        v33 = 0;
      v47 = (SCNNode **)&v33[16 * v29];
      v48 = &v33[16 * v32];
      *v47 = v8;
      v47[1] = a4;
      v27 = v47 + 2;
      v50 = *(char **)(v9 + 296);
      v49 = *(char **)(v9 + 304);
      if (v49 != v50)
      {
        do
        {
          *((_OWORD *)v47 - 1) = *((_OWORD *)v49 - 1);
          v47 -= 2;
          v49 -= 16;
        }
        while (v49 != v50);
        v49 = *(char **)(v9 + 296);
      }
      *(_QWORD *)(v9 + 296) = v47;
      *(_QWORD *)(v9 + 304) = v27;
      *(_QWORD *)(v9 + 312) = v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *v26 = v8;
      v26[1] = a4;
      v27 = v26 + 2;
    }
    *(_QWORD *)(v9 + 304) = v27;
    if (a5)
    {
      UskSkeleton = USDKitConverter::processMesh((USDKitConverter *)v9, v8, v17, NodeName);
      v56 = (void **)&v55;
      v23 = 0;
      std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)(v9 + 320), (unint64_t *)&v55, (uint64_t)&std::piecewise_construct, (uint64_t **)&v56)[5] = (uint64_t)UskSkeleton;
      LOBYTE(a5) = 1;
      v8 = v55;
      if (UskSkeleton)
      {
LABEL_47:
        if (-[SCNNode isHidden](v8, "isHidden") || (-[SCNNode opacity](v55, "opacity"), v34 == 0.0))
          objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", UskSkeleton, CFSTR("visibility"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("invisible")));
        v35 = -[SCNNode animationKeys](v55, "animationKeys");
        v36 = v55;
        if (v35)
        {
          v37 = -[NSArray count](-[SCNNode animationKeys](v55, "animationKeys"), "count");
          v36 = v55;
          if (v37)
          {
            v38 = *(_QWORD **)(v9 + 104);
            if (!v38)
              goto LABEL_63;
            v39 = v9 + 104;
            do
            {
              v40 = v38[4];
              v41 = v40 >= (unint64_t)v55;
              if (v40 >= (unint64_t)v55)
                v42 = v38;
              else
                v42 = v38 + 1;
              if (v41)
                v39 = (uint64_t)v38;
              v38 = (_QWORD *)*v42;
            }
            while (*v42);
            if (v39 == v9 + 104 || (unint64_t)v55 < *(_QWORD *)(v39 + 32))
            {
LABEL_63:
              USDKitConverter::processAnimations(v9, (uint64_t)UskSkeleton, v55);
              v36 = v55;
            }
          }
        }
        USDKitConverter::processTransforms(v9, (uint64_t)UskSkeleton, v36, v23);
        v8 = v55;
      }
    }
LABEL_65:
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v43 = -[SCNNode childNodes](v8, "childNodes", 0);
    this = -[NSArray countByEnumeratingWithState:objects:count:](v43, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
    v44 = this;
    if (this)
    {
      v45 = *(_QWORD *)v52;
      do
      {
        v46 = 0;
        do
        {
          if (*(_QWORD *)v52 != v45)
            objc_enumerationMutation(v43);
          USDKitConverter::processSCNNode((USDKitConverter *)v9, *(SCNNode **)(*((_QWORD *)&v51 + 1) + 8 * v46++), v17, (Skeleton *)a4, a5);
        }
        while (v44 != v46);
        this = -[NSArray countByEnumeratingWithState:objects:count:](v43, "countByEnumeratingWithState:objects:count:", &v51, v57, 16);
        v44 = this;
      }
      while (this);
    }
  }
  return this;
}

uint64_t USDKitConverter::getGeomPath(USDKitConverter *this)
{
  uint64_t result;
  uint64_t v3;
  id v4;

  result = *((_QWORD *)this + 4);
  if (!result)
  {
    v3 = objc_msgSend(*((id *)this + 3), "stringByAppendingPathComponent:", CFSTR("Geom"));
    *((_QWORD *)this + 4) = v3;
    v4 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v3);
    +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v4, USKNodeTypeScope_weak);
    return *((_QWORD *)this + 4);
  }
  return result;
}

uint64_t USDKitConverter::processBlendShapeAnimations(id *this)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend((id)objc_msgSend(*this, "rootNode", 0), "childNodes");
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        USDKitConverter::processBlendShapeAnimations((USDKitConverter *)this, *(SCNNode **)(*((_QWORD *)&v7 + 1) + 8 * v6++));
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t *ShapeBlending::updateAnimationsWithBlendShapeList(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *this;
  v2 = this[1];
  if (*this != v2)
  {
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      if (v3)
        this = (uint64_t *)objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v3, CFSTR("blendShapes"), USKDataTypeTokenArray_weak, USKRoleTypeNone_weak), "setTokenArray:", *(_QWORD *)(*(_QWORD *)v1 + 24));
      v1 += 8;
    }
    while (v1 != v2);
  }
  return this;
}

void USDKitConverter::processSkinnedMeshes(USDKitConverter *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  SCNNode *v6;
  _QWORD *v7;
  uint64_t v8;
  NSString *GeomPath;
  NSString *NodeName;
  NSString *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  id v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  Skeleton **v23;
  Skeleton **v24;
  Skeleton *v25;
  id v26;
  uint64_t **v27;
  SCNNode *v28;
  SCNNode **v29;

  v2 = *((_QWORD *)this + 37);
  v3 = *((_QWORD *)this + 38);
  if (v2 != v3)
  {
    v27 = (uint64_t **)((char *)this + 272);
    v4 = (char *)this + 280;
    v5 = (char *)this + 328;
    do
    {
      v6 = *(SCNNode **)v2;
      v7 = *(_QWORD **)(v2 + 8);
      v28 = *(SCNNode **)v2;
      if (v7)
      {
        v8 = 0;
      }
      else
      {
        v18 = *(_QWORD **)v4;
        if (!*(_QWORD *)v4)
          goto LABEL_35;
        v19 = (char *)this + 280;
        do
        {
          v20 = v18[4];
          v21 = v20 >= (unint64_t)v6;
          if (v20 >= (unint64_t)v6)
            v22 = v18;
          else
            v22 = v18 + 1;
          if (v21)
            v19 = (char *)v18;
          v18 = (_QWORD *)*v22;
        }
        while (*v22);
        if (v19 == v4)
          goto LABEL_35;
        if ((unint64_t)v6 < *((_QWORD *)v19 + 4))
          goto LABEL_35;
        v29 = &v28;
        v8 = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(v27, (unint64_t *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)[5];
        v7 = *(_QWORD **)(v8 + 56);
        if (!v7)
          goto LABEL_35;
      }
      GeomPath = (NSString *)v7[16];
      if (!GeomPath)
        GeomPath = (NSString *)USDKitConverter::getGeomPath(this);
      NodeName = (NSString *)USDKitConverter::makeNodeName(this, GeomPath, v28);
      v11 = -[NSString stringByAppendingPathComponent:](GeomPath, "stringByAppendingPathComponent:", NodeName);
      v12 = (_QWORD *)*((_QWORD *)this + 41);
      if (!v12)
        goto LABEL_18;
      v13 = (char *)this + 328;
      do
      {
        v14 = v12[4];
        v15 = v14 >= (unint64_t)v28;
        if (v14 >= (unint64_t)v28)
          v16 = v12;
        else
          v16 = v12 + 1;
        if (v15)
          v13 = (char *)v12;
        v12 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 != v5 && (unint64_t)v28 >= *((_QWORD *)v13 + 4))
      {
        v29 = &v28;
        v17 = (id)std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 40, (unint64_t *)&v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)[5];
        if (v17)
        {
LABEL_19:
          if (v7[16])
            USDKitConverter::processMeshSkin((uint64_t)this, v28, (uint64_t)v17, v7, v8);
        }
      }
      else
      {
LABEL_18:
        v17 = USDKitConverter::processMesh(this, v28, v11, NodeName);
        if (v17)
          goto LABEL_19;
      }
LABEL_35:
      v2 += 16;
    }
    while (v2 != v3);
  }
  v23 = (Skeleton **)*((_QWORD *)this + 46);
  v24 = (Skeleton **)*((_QWORD *)this + 47);
  while (v23 != v24)
  {
    v25 = *v23;
    if (Skeleton::findNodeWithAnimation(*v23))
    {
      v26 = USDKitConverter::processSkeletonAnimations(this, v25);
      if (v26)
        Skeleton::setSkeletalAnimation((uint64_t)v25, (uint64_t)v26);
    }
    ++v23;
  }
}

uint64_t USDKitConverter::prepareSkinning(USDKitConverter *this, SCNNode *a2)
{
  SCNNode *v2;
  SCNSkinner *v4;
  uint64_t v5;
  Skin *v6;
  unint64_t v7;
  SCNNode *v8;
  id v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  NSArray *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  SCNNode *v27;
  simd_double4x4 v28;
  simd_double4x4 v29;
  _BYTE v30[128];
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  v27 = a2;
  if (-[SCNNode skinner](a2, "skinner"))
  {
    v4 = -[SCNNode skinner](v2, "skinner");
    v5 = -[SCNSkinner skeleton](v4, "skeleton");
    v6 = (Skin *)operator new();
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 5) = 0;
    *((_QWORD *)v6 + 4) = (char *)v6 + 40;
    *((_QWORD *)v6 + 10) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 8) = (char *)v6 + 72;
    if (-[NSArray count](-[SCNSkinner bones](v4, "bones"), "count"))
    {
      v7 = 0;
      do
      {
        v8 = -[NSArray objectAtIndexedSubscript:](-[SCNSkinner bones](v4, "bones"), "objectAtIndexedSubscript:", v7);
        v9 = -[NSArray objectAtIndexedSubscript:](-[SCNSkinner boneInverseBindTransforms](v4, "boneInverseBindTransforms"), "objectAtIndexedSubscript:", v7);
        if (v9)
        {
          objc_msgSend(v9, "SCNMatrix4Value");
          v11 = v23;
          v10 = v24;
          v13 = v25;
          v12 = v26;
        }
        else
        {
          v25 = 0u;
          v26 = 0u;
          v12 = 0uLL;
          v13 = 0uLL;
          v10 = 0uLL;
          v11 = 0uLL;
          v23 = 0u;
          v24 = 0u;
        }
        *(float64x2_t *)v29.columns[0].f64 = vcvtq_f64_f32(*(float32x2_t *)v11.f32);
        *(float64x2_t *)&v29.columns[0].f64[2] = vcvt_hight_f64_f32(v11);
        *(float64x2_t *)v29.columns[1].f64 = vcvtq_f64_f32(*(float32x2_t *)v10.f32);
        *(float64x2_t *)&v29.columns[1].f64[2] = vcvt_hight_f64_f32(v10);
        *(float64x2_t *)v29.columns[2].f64 = vcvtq_f64_f32(*(float32x2_t *)v13.f32);
        *(float64x2_t *)&v29.columns[2].f64[2] = vcvt_hight_f64_f32(v13);
        *(float64x2_t *)v29.columns[3].f64 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
        *(float64x2_t *)&v29.columns[3].f64[2] = vcvt_hight_f64_f32(v12);
        __invert_d4();
        v29 = v28;
        ++v7;
      }
      while (v7 < -[NSArray count](-[SCNSkinner bones](v4, "bones", Skin::setJoint(v6, v8, &v29).n128_f64[0]), "count"));
    }
    Skinning::addSkin((void **)this + 43, (uint64_t)v6);
    *(_QWORD *)&v29.columns[0].f64[0] = &v27;
    std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 34, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v29)[5] = (uint64_t)v6;
    v2 = v27;
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v14 = -[SCNNode childNodes](v2, "childNodes", 0);
  result = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v19, v30, 16);
  v16 = result;
  if (result)
  {
    v17 = *(_QWORD *)v20;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v20 != v17)
          objc_enumerationMutation(v14);
        USDKitConverter::prepareSkinning(this, *(SCNNode **)(*((_QWORD *)&v19 + 1) + 8 * v18++));
      }
      while (v16 != v18);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v19, v30, 16);
      v16 = result;
    }
    while (result);
  }
  return result;
}

void Skinning::createSkeletonsFromSkins(Skinning *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t **v4;
  uint64_t v5;
  SCNNode **v6;
  _QWORD *SkeletonByJoint;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD ***v11;
  _QWORD ***v12;
  char *v13;
  _QWORD **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;

  v1 = *(uint64_t **)this;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v2)
  {
    v4 = (uint64_t **)((char *)this + 48);
    v38 = (uint64_t *)*((_QWORD *)this + 1);
    do
    {
      v5 = *v1;
      v6 = *(SCNNode ***)(*v1 + 8);
      if (*(SCNNode ***)(*v1 + 16) != v6)
      {
        if (!*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = Skinning::_findRoot((uint64_t)this, (uint64_t *)(*v1 + 8));
          v6 = *(SCNNode ***)(v5 + 8);
        }
        SkeletonByJoint = Skinning::findSkeletonByJoint(this, *v6);
        if (!SkeletonByJoint)
          SkeletonByJoint = Skinning::createSkeleton(this, *(SCNNode **)v5);
        v8 = *(uint64_t **)(v5 + 8);
        v9 = *(uint64_t **)(v5 + 16);
        while (v8 != v9)
        {
          v39 = 0;
          v10 = *v8++;
          v39 = (char *)v10;
          std::__tree<SCNNode *>::__emplace_unique_key_args<SCNNode *,SCNNode * const&>(v4, (unint64_t *)&v39, (uint64_t *)&v39);
        }
        Skin::_setSkeleton((_QWORD *)v5, (uint64_t)SkeletonByJoint);
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v11 = (_QWORD ***)*((_QWORD *)this + 3);
        v12 = (_QWORD ***)*((_QWORD *)this + 4);
        if (v11 != v12)
        {
          v13 = 0;
          do
          {
            v14 = *v11;
            if (*v11 != SkeletonByJoint)
            {
              v15 = SkeletonByJoint[1];
              v16 = v15 - *SkeletonByJoint;
              if (v15 != *SkeletonByJoint)
              {
                v17 = 0;
                v18 = v16 >> 3;
                if (v18 <= 1)
                  v18 = 1;
                while (*(_QWORD *)(*SkeletonByJoint + 8 * v17) != **v14)
                {
                  if (v18 == ++v17)
                    goto LABEL_43;
                }
                if (v17 != -1)
                {
                  v19 = *(uint64_t **)this;
                  v20 = (uint64_t *)*((_QWORD *)this + 1);
                  if (*(uint64_t **)this != v20)
                  {
                    do
                    {
                      if (*(_QWORD ***)(*v19 + 56) == v14)
                        Skin::_setSkeleton((_QWORD *)*v19, (uint64_t)SkeletonByJoint);
                      ++v19;
                    }
                    while (v19 != v20);
                    v13 = v40;
                  }
                  if (v13 >= v41)
                  {
                    v21 = (v13 - v39) >> 3;
                    if ((unint64_t)(v21 + 1) >> 61)
                      abort();
                    v22 = (v41 - v39) >> 2;
                    if (v22 <= v21 + 1)
                      v22 = v21 + 1;
                    if ((unint64_t)(v41 - v39) >= 0x7FFFFFFFFFFFFFF8)
                      v23 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v23 = v22;
                    if (v23)
                      v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)&v41, v23);
                    else
                      v24 = 0;
                    v25 = &v24[8 * v21];
                    *(_QWORD *)v25 = v14;
                    v13 = v25 + 8;
                    v27 = (uint64_t)v39;
                    v26 = v40;
                    if (v40 != v39)
                    {
                      do
                      {
                        v28 = *((_QWORD *)v26 - 1);
                        v26 -= 8;
                        *((_QWORD *)v25 - 1) = v28;
                        v25 -= 8;
                      }
                      while (v26 != (char *)v27);
                      v26 = v39;
                    }
                    v39 = v25;
                    v40 = v13;
                    v41 = &v24[8 * v23];
                    if (v26)
                      operator delete(v26);
                  }
                  else
                  {
                    *(_QWORD *)v13 = v14;
                    v13 += 8;
                  }
                  v40 = v13;
                }
              }
            }
LABEL_43:
            ++v11;
          }
          while (v11 != v12);
          v29 = v39;
          if (v39 != v13)
          {
            do
            {
              v30 = *(_QWORD *)v29;
              v32 = *((_QWORD *)this + 3);
              v31 = *((_QWORD *)this + 4);
              if (v32 != v31)
              {
                v33 = v31 - (v32 + 8);
                if (v31 != v32 + 8)
                  memmove(*((void **)this + 3), (const void *)(v32 + 8), v31 - (v32 + 8));
                *((_QWORD *)this + 4) = v32 + v33;
              }
              if (v30)
              {
                std::__tree<char>::destroy(v30 + 72, *(_QWORD **)(v30 + 80));
                std::__tree<char>::destroy(v30 + 48, *(_QWORD **)(v30 + 56));
                std::__tree<char>::destroy(v30 + 24, *(_QWORD **)(v30 + 32));
                v34 = *(void **)v30;
                if (*(_QWORD *)v30)
                {
                  *(_QWORD *)(v30 + 8) = v34;
                  operator delete(v34);
                }
                MEMORY[0x1DF0D41C0](v30, 0x10A0C400C584343);
              }
              v29 += 8;
            }
            while (v29 != v13);
            v13 = v39;
          }
          v2 = v38;
          if (v13)
          {
            v40 = v13;
            operator delete(v13);
          }
        }
      }
      ++v1;
    }
    while (v1 != v2);
    v36 = *(uint64_t ***)this;
    v35 = (uint64_t **)*((_QWORD *)this + 1);
    while (v36 != v35)
    {
      v37 = *v36++;
      Skin::_prepareIndexRemapping(v37);
    }
  }
}

void sub_1DCEE303C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL `anonymous namespace'::isXform(_anonymous_namespace_ *this, SCNNode *a2)
{
  return !-[_anonymous_namespace_ geometry](this, "geometry")
      && !-[_anonymous_namespace_ skinner](this, "skinner")
      && !-[_anonymous_namespace_ camera](this, "camera")
      && -[_anonymous_namespace_ light](this, "light") == 0;
}

void *Skeleton::findNodeWithAnimation(Skeleton *this)
{
  void *v1;

  v1 = **(void ***)this;
  if (v1)
  {
    while (!objc_msgSend((id)objc_msgSend(v1, "animationKeys"), "count"))
    {
      v1 = (void *)objc_msgSend(v1, "parentNode");
      if (!v1)
        return (void *)Skeleton::_findJointWithAnimation(this);
    }
  }
  return v1;
}

__n128 Skin::setJoint(Skin *this, SCNNode *a2, const simd_double4x4 *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t **v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  SCNNode *v29;
  SCNNode **v30;

  v29 = a2;
  v8 = *((_QWORD *)this + 3);
  v6 = (char *)this + 24;
  v7 = v8;
  v9 = (_QWORD *)*((_QWORD *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 1);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v7 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)v6, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = a2;
    v10 = v17 + 8;
    v20 = (char *)*((_QWORD *)this + 1);
    v19 = (char *)*((_QWORD *)this + 2);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v21;
        v17 -= 8;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v17;
    *((_QWORD *)this + 2) = v10;
    *((_QWORD *)this + 3) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 2) = v10;
  v30 = &v29;
  v22 = std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>((uint64_t **)this + 4, (unint64_t *)&v29, (uint64_t)&std::piecewise_construct, &v30);
  v23 = *(_OWORD *)a3->columns[0].f64;
  v24 = *(_OWORD *)&a3->columns[0].f64[2];
  v25 = *(_OWORD *)&a3->columns[1].f64[2];
  *((_OWORD *)v22 + 5) = *(_OWORD *)a3->columns[1].f64;
  *((_OWORD *)v22 + 6) = v25;
  *((_OWORD *)v22 + 3) = v23;
  *((_OWORD *)v22 + 4) = v24;
  result = *(__n128 *)a3->columns[2].f64;
  v27 = *(_OWORD *)&a3->columns[2].f64[2];
  v28 = *(_OWORD *)&a3->columns[3].f64[2];
  *((_OWORD *)v22 + 9) = *(_OWORD *)a3->columns[3].f64;
  *((_OWORD *)v22 + 10) = v28;
  *((__n128 *)v22 + 7) = result;
  *((_OWORD *)v22 + 8) = v27;
  return result;
}

void Skinning::addSkin(void **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t **std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0xB0uLL);
    v11[4] = **a4;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *Skinning::_findRoot(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (!(v3 >> 3))
    return 0;
  if (v3 >> 3 == 1)
    return *(void **)v2;
  v4 = *(void **)v2;
  if ((unint64_t)v3 >= 9)
  {
    v6 = 1;
    do
    {
      if (v4)
      {
        v7 = *(void **)(v2 + 8 * v6);
        while (!v7)
        {
LABEL_13:
          v4 = (void *)objc_msgSend(v4, "parentNode");
          if (!v4)
            goto LABEL_14;
        }
        v8 = v7;
        while (v4 != v8)
        {
          v8 = (void *)objc_msgSend(v8, "parentNode");
          if (!v8)
            goto LABEL_13;
        }
      }
LABEL_14:
      ++v6;
      v2 = *a2;
    }
    while (v6 < (a2[1] - *a2) >> 3);
  }
  return v4;
}

uint64_t *Skinning::findSkeletonByJoint(Skinning *this, SCNNode *a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (uint64_t **)*((_QWORD *)this + 3);
  v3 = (uint64_t **)*((_QWORD *)this + 4);
  while (v2 != v3)
  {
    result = *v2;
    v5 = **v2;
    v6 = (*v2)[1];
    v7 = v6 - v5;
    if (v6 != v5)
    {
      v8 = 0;
      v9 = v7 >> 3;
      if (v9 <= 1)
        v9 = 1;
      while (*(SCNNode **)(v5 + 8 * v8) != a2)
      {
        if (v9 == ++v8)
          goto LABEL_10;
      }
      if (v8 != -1)
        return result;
    }
LABEL_10:
    ++v2;
  }
  return 0;
}

Skeleton *Skinning::createSkeleton(Skinning *this, SCNNode *a2)
{
  Skeleton *v4;
  unint64_t v5;
  Skeleton **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  Skeleton **v14;
  char *v15;
  char *v16;
  char *v17;
  Skeleton *v18;

  v4 = (Skeleton *)operator new();
  *((_QWORD *)v4 + 4) = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = (char *)v4 + 32;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 5) = 0;
  *((_QWORD *)v4 + 6) = (char *)v4 + 56;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 9) = (char *)v4 + 80;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 15) = 0;
  *((_QWORD *)v4 + 16) = 0;
  Skeleton::_collectJoints(v4, a2, &stru_1EA5A6480.isa);
  v5 = *((_QWORD *)this + 5);
  v6 = (Skeleton **)*((_QWORD *)this + 4);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *((_QWORD *)this + 3);
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)this + 40, v12);
    else
      v13 = 0;
    v14 = (Skeleton **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)*((_QWORD *)this + 3);
    v16 = (char *)*((_QWORD *)this + 4);
    if (v16 != v17)
    {
      do
      {
        v18 = (Skeleton *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 3) = v14;
    *((_QWORD *)this + 4) = v7;
    *((_QWORD *)this + 5) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 4) = v7;
  return v4;
}

__n128 Skin::_setSkeleton(_QWORD *a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t *v17;

  a1[7] = a2;
  v2 = (unint64_t *)a1[1];
  v3 = (unint64_t *)a1[2];
  if (v2 != v3)
  {
    v5 = (uint64_t **)(a1 + 4);
    do
    {
      v6 = *v2++;
      v16 = v6;
      v17 = &v16;
      v7 = std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>(v5, &v16, (uint64_t)&std::piecewise_construct, &v17);
      v8 = (uint64_t **)(a1[7] + 72);
      v17 = &v16;
      v9 = std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>(v8, &v16, (uint64_t)&std::piecewise_construct, &v17);
      v10 = *((_OWORD *)v7 + 3);
      v11 = *((_OWORD *)v7 + 4);
      v12 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v9 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v9 + 6) = v12;
      *((_OWORD *)v9 + 3) = v10;
      *((_OWORD *)v9 + 4) = v11;
      result = *((__n128 *)v7 + 7);
      v14 = *((_OWORD *)v7 + 8);
      v15 = *((_OWORD *)v7 + 10);
      *((_OWORD *)v9 + 9) = *((_OWORD *)v7 + 9);
      *((_OWORD *)v9 + 10) = v15;
      *((__n128 *)v9 + 7) = result;
      *((_OWORD *)v9 + 8) = v14;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *Skin::_prepareIndexRemapping(uint64_t *this)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v10 = 0;
  v1 = this[1];
  if (this[2] != v1)
  {
    v2 = this;
    v3 = 0;
    v4 = (uint64_t **)(this + 8);
    do
    {
      v5 = *(_QWORD *)v2[7];
      v6 = *(_QWORD *)(v2[7] + 8) - v5;
      if (v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v1 + 8 * v3);
        v9 = v6 >> 3;
        if ((unint64_t)(v6 >> 3) <= 1)
          v9 = 1;
        while (*(_QWORD *)(v5 + 8 * v7) != v8)
        {
          if (v9 == ++v7)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v7 = -1;
      }
      v11 = &v10;
      this = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(v4, &v10, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
      this[5] = v7;
      v3 = v10 + 1;
      v10 = v3;
      v1 = v2[1];
    }
    while (v3 < (v2[2] - v1) >> 3);
  }
  return this;
}

uint64_t Skeleton::_collectJoints(Skeleton *this, SCNNode *a2, NSString *a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  NSString *v22;
  NSString *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float64x2_t *v28;
  void *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  id v42;
  id *v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v42 = a2;
  v8 = *((_QWORD *)this + 2);
  v6 = (char *)this + 16;
  v7 = v8;
  v9 = (_QWORD *)*((_QWORD *)v6 - 1);
  if ((unint64_t)v9 >= v8)
  {
    v11 = ((uint64_t)v9 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v12 = v7 - *(_QWORD *)this;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)v6, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v10 = v16 + 8;
    v19 = *(char **)this;
    v18 = (char *)*((_QWORD *)this + 1);
    if (v18 != *(char **)this)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = *(char **)this;
    }
    *(_QWORD *)this = v16;
    *((_QWORD *)this + 1) = v10;
    *((_QWORD *)this + 2) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 1) = v10;
  v21 = (_anonymous_namespace_ *)objc_msgSend(v42, "name");
  v43 = &v42;
  std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 3, (unint64_t *)&v42, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43)[5] = (uint64_t)v23;
  objc_msgSend(v42, "simdTransform");
  v34 = v24;
  v35 = v25;
  v36 = v26;
  v37 = v27;
  v43 = &v42;
  v28 = (float64x2_t *)std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>((uint64_t **)this + 6, (unint64_t *)&v42, (uint64_t)&std::piecewise_construct, &v43);
  v28[3] = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
  v28[4] = vcvt_hight_f64_f32(v34);
  v28[5] = vcvtq_f64_f32(*(float32x2_t *)v36.f32);
  v28[6] = vcvt_hight_f64_f32(v36);
  v28[7] = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
  v28[8] = vcvt_hight_f64_f32(v35);
  v28[9] = vcvtq_f64_f32(*(float32x2_t *)v37.f32);
  v28[10] = vcvt_hight_f64_f32(v37);
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v29 = (void *)objc_msgSend(v42, "childNodes");
  result = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
  v31 = result;
  if (result)
  {
    v32 = *(_QWORD *)v39;
    do
    {
      v33 = 0;
      do
      {
        if (*(_QWORD *)v39 != v32)
          objc_enumerationMutation(v29);
        Skeleton::_collectJoints(this, *(SCNNode **)(*((_QWORD *)&v38 + 1) + 8 * v33++), v23);
      }
      while (v31 != v33);
      result = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
      v31 = result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__tree<SCNNode *>::__emplace_unique_key_args<SCNNode *,SCNNode * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t Skeleton::_findJointWithAnimation(Skeleton *this)
{
  uint64_t v1;
  unint64_t v3;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0;
  v3 = 0;
  while (!objc_msgSend((id)objc_msgSend(*(id *)(v1 + 8 * v3), "animationKeys"), "count"))
  {
    ++v3;
    v1 = *(_QWORD *)this;
    if (v3 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)this + 8 * v3);
}

uint64_t USDKitConverter::prepareBlendShape(uint64_t **this, SCNNode *a2)
{
  SCNNode *v2;
  uint64_t BlendShape;
  NSArray *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  SCNNode *v14;
  SCNNode **v15;
  _BYTE v16[128];
  uint64_t v17;

  v2 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  if (-[SCNNode geometry](a2, "geometry") && -[SCNNode morpher](v2, "morpher"))
  {
    BlendShape = ShapeBlending::createBlendShape((ShapeBlending *)(this + 55), -[NSArray count](-[SCNMorpher weights](-[SCNNode morpher](v2, "morpher"), "weights"), "count"));
    v15 = &v14;
    std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(this + 52, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, (uint64_t **)&v15)[5] = BlendShape;
    v2 = v14;
  }
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = -[SCNNode childNodes](v2, "childNodes", 0);
  result = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)v11;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v11 != v8)
          objc_enumerationMutation(v5);
        USDKitConverter::prepareBlendShape((USDKitConverter *)this, *(SCNNode **)(*((_QWORD *)&v10 + 1) + 8 * v9++));
      }
      while (v7 != v9);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

uint64_t ShapeBlending::createBlendShape(ShapeBlending *this, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = operator new();
  *(_DWORD *)v4 = a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *((_QWORD *)this + 2);
  v6 = (uint64_t *)*((_QWORD *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v5 - *(_QWORD *)this;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)this + 16, v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = *(char **)this;
    v15 = (char *)*((_QWORD *)this + 1);
    if (v15 != *(char **)this)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = *(char **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v7;
    *((_QWORD *)this + 2) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 1) = v7;
  return v4;
}

NSUInteger USDKitConverter::prepareCAAnimation(USDKitConverter *this, CAAnimationGroup *a2)
{
  NSUInteger result;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return USDKitConverter::prepareCAAnimationGroup(this, a2);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v5 = (void *)-[CAAnimationGroup keyTimes](a2, "keyTimes");
    result = objc_msgSend(v5, "count");
    if (result >= 2)
    {
      objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v5, "count") - 1), "doubleValue");
      v7 = v6;
      result = objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "doubleValue");
      v9 = v7 - v8;
      if (v9 >= 0.0001)
      {
        -[CAAnimationGroup duration](a2, "duration");
        v11 = v10 / v9;
        objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "doubleValue");
        v13 = v12;
        -[CAAnimationGroup beginTime](a2, "beginTime");
        v15 = v14 + v13 * v11;
        v16 = *((double *)this + 62);
        if (v16 >= 0.0)
        {
          v17 = *((double *)this + 61);
          if (v17 > v15)
            v17 = v15;
          *((double *)this + 61) = v17;
          if (v16 >= v15)
            v15 = v16;
        }
        else
        {
          *((double *)this + 61) = v15;
        }
        *((double *)this + 62) = v15;
        objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v5, "count") - 1), "doubleValue");
        v19 = v18;
        -[CAAnimationGroup beginTime](a2, "beginTime");
        v21 = v20 + v19 * v11;
        v22 = *((double *)this + 62);
        if (v22 >= 0.0)
        {
          v23 = *((double *)this + 61);
          if (v23 > v21)
            v23 = v21;
          *((double *)this + 61) = v23;
          if (v22 >= v21)
            v21 = v22;
        }
        else
        {
          *((double *)this + 61) = v21;
        }
        *((double *)this + 62) = v21;
        result = objc_msgSend(v5, "count");
        if (result >= 2)
        {
          objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", 1), "doubleValue");
          v25 = v24;
          result = objc_msgSend((id)objc_msgSend(v5, "objectAtIndexedSubscript:", 0), "doubleValue");
          v27 = v11 * (v25 - v26);
          if (v27 > 0.001)
          {
            v28 = *((double *)this + 63);
            if (v28 == 0.0 || v28 > v27)
              *((double *)this + 63) = v27;
          }
        }
      }
    }
  }
  return result;
}

NSUInteger USDKitConverter::prepareCAAnimationGroup(USDKitConverter *this, CAAnimationGroup *a2)
{
  NSUInteger result;
  unint64_t i;

  result = -[NSArray count](-[CAAnimationGroup animations](a2, "animations"), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      USDKitConverter::prepareCAAnimation(this, (CAAnimation *)-[NSArray objectAtIndex:](-[CAAnimationGroup animations](a2, "animations"), "objectAtIndex:", i));
      result = -[NSArray count](-[CAAnimationGroup animations](a2, "animations"), "count");
    }
  }
  return result;
}

void *USDKitConverter::makeNodeName(USDKitConverter *this, NSString *a2, SCNNode *a3)
{
  NSString *v6;
  NSString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *__p[2];
  char v14;

  v6 = -[SCNNode name](a3, "name");
  if (!v6
    && (!-[SCNNode geometry](a3, "geometry")
     || (v6 = -[SCNGeometry name](-[SCNNode geometry](a3, "geometry"), "name")) == 0)
    || !-[NSString length](v6, "length"))
  {
    v8 = (void *)MEMORY[0x1E0CB37E8];
    ++*((_QWORD *)this + 30);
    v6 = (NSString *)objc_msgSend(CFSTR("Node_"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(v8, "numberWithUnsignedLong:"), "stringValue"));
  }
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)-[NSString UTF8String](-[NSString stringByAppendingPathComponent:](a2, "stringByAppendingPathComponent:", v9), "UTF8String"));
  if ((USDKitConverter *)((char *)this + 72) != (USDKitConverter *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this + 64, (const void **)__p))
  {
    v10 = (void *)objc_msgSend(v9, "stringByAppendingString:", CFSTR("_"));
    v11 = (void *)MEMORY[0x1E0CB37E8];
    ++*((_QWORD *)this + 30);
    v9 = (void *)objc_msgSend(v10, "stringByAppendingString:", objc_msgSend((id)objc_msgSend(v11, "numberWithUnsignedLong:"), "stringValue"));
    MEMORY[0x1DF0D40B8](__p, -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](a2, "stringByAppendingPathComponent:", v9), "UTF8String"));
  }
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this + 8, (const void **)__p, (uint64_t)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  return v9;
}

void sub_1DCEE4164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id Skeleton::makeUskSkeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;
  id *v6;
  id *v7;
  _QWORD *v8;
  uint64_t **v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  float32x4_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float32x4_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float32x4_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float32x4_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t **v65;
  float64x2_t *v66;
  float64x2_t *v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  char *v74;
  char *v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  char *v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  id v103;
  uint64_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  void *v114;
  id v115;
  char *v116;
  float64x2_t *v117;
  float64x2_t *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t *v122[2];

  v3 = *(id *)(a1 + 104);
  if (!v3)
  {
    *(_QWORD *)(a1 + 128) = a3;
    v114 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v119 = 0;
    v120 = 0;
    v121 = 0;
    std::vector<simd_double4x4>::reserve((void **)&v119, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v105 = a2;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    std::vector<simd_double4x4>::reserve((void **)&v116, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v7 = *(id **)a1;
    v6 = *(id **)(a1 + 8);
    if (*(id **)a1 != v6)
    {
      v8 = (_QWORD *)(a1 + 80);
      while (1)
      {
        v115 = 0;
        v115 = *v7;
        if (v115)
          break;
LABEL_68:
        if (++v7 == v6)
          goto LABEL_69;
      }
      v122[0] = (uint64_t *)&v115;
      objc_msgSend(v114, "addObject:", std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)(a1 + 24), (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v122)[5]);
      v122[0] = (uint64_t *)&v115;
      v9 = std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>((uint64_t **)(a1 + 48), (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v122);
      v10 = (__int128 *)(v9 + 6);
      v11 = v120;
      if (v120 >= v121)
      {
        v19 = v119;
        v20 = (v120 - v119) >> 7;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 57)
          goto LABEL_79;
        v22 = v121 - v119;
        if ((v121 - v119) >> 6 > v21)
          v21 = v22 >> 6;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFF80)
          v23 = 0x1FFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double4x4>>((uint64_t)&v121, v23);
          v19 = v119;
          v11 = v120;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[128 * v20];
        v26 = *v10;
        v27 = v10[1];
        v28 = v10[3];
        *((_OWORD *)v25 + 2) = v10[2];
        *((_OWORD *)v25 + 3) = v28;
        *(_OWORD *)v25 = v26;
        *((_OWORD *)v25 + 1) = v27;
        v29 = v10[4];
        v30 = v10[5];
        v31 = v10[7];
        *((_OWORD *)v25 + 6) = v10[6];
        *((_OWORD *)v25 + 7) = v31;
        *((_OWORD *)v25 + 4) = v29;
        *((_OWORD *)v25 + 5) = v30;
        if (v11 == v19)
        {
          v39 = &v24[128 * v20];
        }
        else
        {
          v32 = &v24[128 * v20];
          do
          {
            v33 = *((_OWORD *)v11 - 8);
            v34 = *((_OWORD *)v11 - 7);
            v35 = *((_OWORD *)v11 - 5);
            *((_OWORD *)v32 - 6) = *((_OWORD *)v11 - 6);
            *((_OWORD *)v32 - 5) = v35;
            *((_OWORD *)v32 - 8) = v33;
            *((_OWORD *)v32 - 7) = v34;
            v36 = *((_OWORD *)v11 - 4);
            v37 = *((_OWORD *)v11 - 3);
            v38 = *((_OWORD *)v11 - 1);
            v39 = v32 - 128;
            *((_OWORD *)v32 - 2) = *((_OWORD *)v11 - 2);
            *((_OWORD *)v32 - 1) = v38;
            *((_OWORD *)v32 - 4) = v36;
            *((_OWORD *)v32 - 3) = v37;
            v11 -= 128;
            v32 -= 128;
          }
          while (v11 != v19);
        }
        v18 = v25 + 128;
        v119 = v39;
        v120 = v25 + 128;
        v121 = &v24[128 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v12 = *v10;
        v13 = *((_OWORD *)v9 + 4);
        v14 = *((_OWORD *)v9 + 6);
        *((_OWORD *)v120 + 2) = *((_OWORD *)v9 + 5);
        *((_OWORD *)v11 + 3) = v14;
        *(_OWORD *)v11 = v12;
        *((_OWORD *)v11 + 1) = v13;
        v15 = *((_OWORD *)v9 + 7);
        v16 = *((_OWORD *)v9 + 8);
        v17 = *((_OWORD *)v9 + 10);
        *((_OWORD *)v11 + 6) = *((_OWORD *)v9 + 9);
        *((_OWORD *)v11 + 7) = v17;
        *((_OWORD *)v11 + 4) = v15;
        *((_OWORD *)v11 + 5) = v16;
        v18 = v11 + 128;
      }
      v120 = v18;
      v40 = (_QWORD *)*v8;
      if (!*v8)
        goto LABEL_34;
      v41 = (_QWORD *)(a1 + 80);
      do
      {
        v42 = v40[4];
        v43 = v42 >= (unint64_t)v115;
        if (v42 >= (unint64_t)v115)
          v44 = v40;
        else
          v44 = v40 + 1;
        if (v43)
          v41 = v40;
        v40 = (_QWORD *)*v44;
      }
      while (*v44);
      if (v41 != v8 && (unint64_t)v115 >= v41[4])
      {
        v122[0] = (uint64_t *)&v115;
        v65 = std::__tree<std::__value_type<SCNNode *,simd_double4x4>,std::__map_value_compare<SCNNode *,std::__value_type<SCNNode *,simd_double4x4>,std::less<SCNNode *>,true>,std::allocator<std::__value_type<SCNNode *,simd_double4x4>>>::__emplace_unique_key_args<SCNNode *,std::piecewise_construct_t const&,std::tuple<SCNNode * const&>,std::tuple<>>((uint64_t **)(a1 + 72), (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v122);
        v66 = (float64x2_t *)(v65 + 6);
        v67 = v117;
        if (v117 < v118)
        {
          v68 = *v66;
          v69 = *((float64x2_t *)v65 + 4);
          v70 = *((float64x2_t *)v65 + 6);
          v117[2] = *((float64x2_t *)v65 + 5);
          v67[3] = v70;
          *v67 = v68;
          v67[1] = v69;
          v71 = *((float64x2_t *)v65 + 7);
          v72 = *((float64x2_t *)v65 + 8);
          v73 = *((float64x2_t *)v65 + 10);
          v67[6] = *((float64x2_t *)v65 + 9);
          v67[7] = v73;
          v67[4] = v71;
          v67[5] = v72;
          v58 = v67 + 8;
          goto LABEL_67;
        }
        v59 = (float64x2_t *)v116;
        v83 = ((char *)v117 - v116) >> 7;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 57)
LABEL_79:
          abort();
        v85 = (char *)v118 - v116;
        if (((char *)v118 - v116) >> 6 > v84)
          v84 = v85 >> 6;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFF80)
          v63 = 0x1FFFFFFFFFFFFFFLL;
        else
          v63 = v84;
        if (v63)
        {
          v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double4x4>>((uint64_t)&v118, v63);
          v59 = (float64x2_t *)v116;
          v67 = v117;
        }
        else
        {
          v64 = 0;
        }
        v74 = &v64[128 * v83];
        v86 = *v66;
        v87 = v66[1];
        v88 = v66[3];
        *((float64x2_t *)v74 + 2) = v66[2];
        *((float64x2_t *)v74 + 3) = v88;
        *(float64x2_t *)v74 = v86;
        *((float64x2_t *)v74 + 1) = v87;
        v89 = v66[4];
        v90 = v66[5];
        v91 = v66[7];
        *((float64x2_t *)v74 + 6) = v66[6];
        *((float64x2_t *)v74 + 7) = v91;
        *((float64x2_t *)v74 + 4) = v89;
        *((float64x2_t *)v74 + 5) = v90;
        if (v67 != v59)
        {
          v92 = &v64[128 * v83];
          do
          {
            v93 = v67[-8];
            v94 = v67[-7];
            v95 = v67[-5];
            *((float64x2_t *)v92 - 6) = v67[-6];
            *((float64x2_t *)v92 - 5) = v95;
            *((float64x2_t *)v92 - 8) = v93;
            *((float64x2_t *)v92 - 7) = v94;
            v96 = v67[-4];
            v97 = v67[-3];
            v98 = v67[-1];
            v82 = v92 - 128;
            *((float64x2_t *)v92 - 2) = v67[-2];
            *((float64x2_t *)v92 - 1) = v98;
            *((float64x2_t *)v92 - 4) = v96;
            *((float64x2_t *)v92 - 3) = v97;
            v67 -= 8;
            v92 -= 128;
          }
          while (v67 != v59);
LABEL_65:
          v58 = (float64x2_t *)(v74 + 128);
          v116 = v82;
          v117 = (float64x2_t *)(v74 + 128);
          v118 = (float64x2_t *)&v64[128 * v63];
          if (v59)
            operator delete(v59);
          goto LABEL_67;
        }
      }
      else
      {
LABEL_34:
        objc_msgSend(v115, "simdWorldTransform", v105);
        v46 = vcvt_hight_f64_f32(v45);
        v47 = vcvtq_f64_f32(*(float32x2_t *)v45.f32);
        v49 = vcvt_hight_f64_f32(v48);
        v50 = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
        v52 = vcvt_hight_f64_f32(v51);
        v53 = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
        v55 = vcvt_hight_f64_f32(v54);
        v56 = vcvtq_f64_f32(*(float32x2_t *)v54.f32);
        v57 = v117;
        if (v117 < v118)
        {
          *v117 = v47;
          v57[1] = v46;
          v57[2] = v50;
          v57[3] = v49;
          v57[4] = v53;
          v57[5] = v52;
          v58 = v57 + 8;
          v57[6] = v56;
          v57[7] = v55;
LABEL_67:
          v117 = v58;
          goto LABEL_68;
        }
        v106 = v47;
        v107 = v50;
        v108 = v53;
        v109 = v46;
        v110 = v49;
        v111 = v52;
        v112 = v56;
        v113 = v55;
        v59 = (float64x2_t *)v116;
        v60 = ((char *)v117 - v116) >> 7;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 57)
          abort();
        v62 = (char *)v118 - v116;
        if (((char *)v118 - v116) >> 6 > v61)
          v61 = v62 >> 6;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFF80)
          v63 = 0x1FFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double4x4>>((uint64_t)&v118, v63);
          v59 = (float64x2_t *)v116;
          v57 = v117;
        }
        else
        {
          v64 = 0;
        }
        v74 = &v64[128 * v60];
        *(float64x2_t *)v74 = v106;
        *((float64x2_t *)v74 + 1) = v109;
        *((float64x2_t *)v74 + 2) = v107;
        *((float64x2_t *)v74 + 3) = v110;
        *((float64x2_t *)v74 + 4) = v108;
        *((float64x2_t *)v74 + 5) = v111;
        *((float64x2_t *)v74 + 6) = v112;
        *((float64x2_t *)v74 + 7) = v113;
        if (v57 != v59)
        {
          v75 = &v64[128 * v60];
          do
          {
            v76 = v57[-8];
            v77 = v57[-7];
            v78 = v57[-5];
            *((float64x2_t *)v75 - 6) = v57[-6];
            *((float64x2_t *)v75 - 5) = v78;
            *((float64x2_t *)v75 - 8) = v76;
            *((float64x2_t *)v75 - 7) = v77;
            v79 = v57[-4];
            v80 = v57[-3];
            v81 = v57[-1];
            v82 = v75 - 128;
            *((float64x2_t *)v75 - 2) = v57[-2];
            *((float64x2_t *)v75 - 1) = v81;
            *((float64x2_t *)v75 - 4) = v79;
            *((float64x2_t *)v75 - 3) = v80;
            v57 -= 8;
            v75 -= 128;
          }
          while (v57 != v59);
          goto LABEL_65;
        }
      }
      v82 = v74;
      goto LABEL_65;
    }
LABEL_69:
    v99 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 96))
    {
      v100 = v105;
      v101 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v99);
      v3 = 0;
    }
    else
    {
      v102 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v99);
      v100 = v105;
      v3 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", v105, v102, USKNodeTypeSkeletonRoot_weak);
      v101 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(*(id *)(a1 + 128), "stringByAppendingPathComponent:", CFSTR("Skeleton")));
    }
    *(_QWORD *)(a1 + 112) = v101;
    v103 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", v100, v105);
    *(_QWORD *)(a1 + 104) = v103;
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v103, CFSTR("joints"), USKDataTypeStringArray_weak, USKRoleTypeNone_weak), "setStringArray:", v114);
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", *(_QWORD *)(a1 + 104), CFSTR("restTransforms"), USKDataTypeDouble4x4Array_weak, USKRoleTypeNone_weak), "setDouble4x4Array:count:");
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", *(_QWORD *)(a1 + 104), CFSTR("bindTransforms"), USKDataTypeDouble4x4Array_weak, USKRoleTypeNone_weak), "setDouble4x4Array:count:");
    if (!v3)
      v3 = *(id *)(a1 + 104);
    if (v116)
    {
      v117 = (float64x2_t *)v116;
      operator delete(v116);
    }
    if (v119)
    {
      v120 = v119;
      operator delete(v119);
    }
  }
  return v3;
}

void sub_1DCEE47D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(_QWORD *)(v1 - 120) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

id USDKitConverter::processMesh(USDKitConverter *this, SCNNode *a2, NSString *a3, NSString *a4)
{
  _QWORD *v6;
  uint64_t **v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  id v14;
  SCNNode *v16;
  SCNNode **v17;

  v16 = a2;
  v6 = (_QWORD *)*((_QWORD *)this + 53);
  if (v6)
  {
    v8 = (uint64_t **)((char *)this + 416);
    v9 = (_QWORD *)((char *)this + 424);
    do
    {
      v10 = v6[4];
      v11 = v10 >= (unint64_t)a2;
      if (v10 >= (unint64_t)a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != (_QWORD *)((char *)this + 424) && v9[4] <= (unint64_t)a2)
    {
      v17 = &v16;
      v13 = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(v8, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, (uint64_t **)&v17);
      BlendShape::makeUsdSkeleton(v13[5], *((_QWORD *)this + 7), a3);
      a3 = -[NSString stringByAppendingPathComponent:](a3, "stringByAppendingPathComponent:", a4);
      a2 = v16;
    }
  }
  if (!USDKitConverter::isMesh(this, a2))
    return 0;
  v14 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", a3), USKNodeTypeMesh_weak);
  USDKitConverter::processSCNGeometry(this, (uint64_t)v14, a3, -[SCNNode geometry](v16, "geometry"));
  if (-[SCNNode morpher](v16, "morpher"))
    USDKitConverter::processSCNMorpher(this, v14, a3, v16);
  return v14;
}

id USDKitConverter::processCamera(USDKitConverter *this, SCNNode *a2, NSString *a3, SCNCamera *a4)
{
  id v5;
  const __CFString *v6;
  double v7;
  long double v8;
  double v9;
  id v10;
  double v11;
  id v12;
  double v13;
  id v14;
  double v15;
  id v16;
  double v17;
  float64x2_t v18;
  float64_t v19;
  id v20;
  double v21;
  id v22;
  double v23;
  float64_t v25;

  v5 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", a3), USKNodeTypeCamera_weak);
  if (-[SCNCamera usesOrthographicProjection](a4, "usesOrthographicProjection"))
    v6 = CFSTR("orthographic");
  else
    v6 = CFSTR("perspective");
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("projection"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", v6));
  if (!-[SCNCamera usesOrthographicProjection](a4, "usesOrthographicProjection"))
  {
    -[SCNCamera fieldOfView](a4, "fieldOfView");
    v8 = tan(v7 / 180.0 * 3.14159265 * 0.5);
    -[SCNCamera focalLength](a4, "focalLength");
    *(float *)&v8 = v8 * v9 + v8 * v9;
    v10 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("horizontalAperture"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
    LODWORD(v11) = LODWORD(v8);
    objc_msgSend(v10, "setFloatValue:", v11);
    v12 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("verticalAperture"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
    LODWORD(v13) = LODWORD(v8);
    objc_msgSend(v12, "setFloatValue:", v13);
  }
  v14 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("focalLength"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
  -[SCNCamera focalLength](a4, "focalLength");
  *(float *)&v15 = v15;
  objc_msgSend(v14, "setFloatValue:", v15);
  v16 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("clippingRange"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak);
  -[SCNCamera zNear](a4, "zNear");
  v25 = v17;
  -[SCNCamera zFar](a4, "zFar");
  v18.f64[0] = v25;
  v18.f64[1] = v19;
  objc_msgSend(v16, "setFloat2Value:", COERCE_DOUBLE(vcvt_f32_f64(v18)));
  if (-[SCNCamera wantsDepthOfField](a4, "wantsDepthOfField"))
  {
    v20 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("fStop"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
    -[SCNCamera fStop](a4, "fStop");
    *(float *)&v21 = v21;
    objc_msgSend(v20, "setFloatValue:", v21);
    v22 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("focusDistance"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
    -[SCNCamera focusDistance](a4, "focusDistance");
    *(float *)&v23 = v23;
    objc_msgSend(v22, "setFloatValue:", v23);
  }
  return v5;
}

void *USDKitConverter::processAnimations(uint64_t a1, uint64_t a2, void *a3)
{
  void *result;
  void *v7;
  uint64_t v8;

  result = (void *)objc_msgSend((id)objc_msgSend(a3, "animationKeys"), "count");
  if (result)
  {
    v7 = result;
    v8 = 0;
    while (1)
    {
      result = (void *)objc_msgSend(a3, "animationPlayerForKey:", objc_msgSend((id)objc_msgSend(a3, "animationKeys"), "objectAtIndexedSubscript:", v8));
      if (result)
        break;
      if (v7 == (void *)++v8)
        return result;
    }
    return (void *)USDKitConverter::processAnimation(a1, a2, (void *)objc_msgSend((id)objc_msgSend(result, "animation"), "caAnimation"));
  }
  return result;
}

uint64_t USDKitConverter::processTransforms(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  id v12;
  unsigned int v13;
  unsigned int v14;
  float v15;
  __int128 v16;
  double v17;
  float v18;
  id v19;
  float v20;
  double v21;
  double v22;
  id v23;
  float v24;
  double v25;
  float v26;
  const __CFString *v27;
  id v28;
  float v29;
  double v30;
  const __CFString *v31;
  id v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unsigned int v37;
  unsigned int v38;
  double v39;
  id v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  __int128 v44;
  void *v45;
  uint64_t i;
  __CFString *v47;
  unsigned int v49;
  unsigned int v50;
  float64x2_t v51;
  unsigned int v52;
  unsigned int v53;
  float64x2_t v54;
  _OWORD v55[2];
  _OWORD v56[2];
  _OWORD v57[8];
  SCNVector3 v58;
  SCNVector3 v59;
  SCNVector3 v60;
  SCNVector3 v61;
  SCNVector4 v62;
  SCNVector4 v63;

  objc_msgSend(a3, "simdTransform");
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v8, *MEMORY[0x1E0C83FF0]), (int8x16_t)vceqq_f32(v9, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16))), vandq_s8((int8x16_t)vceqq_f32(v10, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32)), (int8x16_t)vceqq_f32(v11, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48))))) & 0x80000000) != 0)goto LABEL_30;
  if (objc_msgSend(*(id *)(a1 + 88), "count"))
  {
    if ((objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:transform")) & 1) == 0)
    {
      objc_msgSend(a3, "position");
      v60.x = 0.0;
      v60.y = 0.0;
      v60.z = 0.0;
      if (!SCNVector3EqualToVector3(v58, v60)
        && (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:translate")) & 1) == 0)
      {
        v12 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:translate"), USKDataTypeDouble3_weak, USKRoleTypeNone_weak);
        objc_msgSend(a3, "position");
        v50 = v13;
        objc_msgSend(a3, "position");
        v51 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v14, v50));
        objc_msgSend(a3, "position");
        *(double *)&v16 = v15;
        v56[1] = v16;
        v56[0] = v51;
        objc_msgSend(v12, "setDouble3Value:", v56);
        objc_msgSend(*(id *)(a1 + 88), "addObject:", CFSTR("xformOp:translate"));
      }
      objc_msgSend(a3, "orientation");
      v63.x = 0.0;
      v63.y = 0.0;
      v63.z = 0.0;
      v63.w = 1.0;
      if (SCNVector4EqualToVector4(v62, v63)
        || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:orient")) & 1) != 0
        || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateXYZ")) & 1) != 0)
      {
        goto LABEL_26;
      }
      if ((objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateX")) & 1) != 0
        || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateY")) & 1) != 0
        || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateZ")) & 1) != 0)
      {
        objc_msgSend(a3, "simdEulerAngles");
        if (v18 != 0.0 && (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateX")) & 1) == 0)
        {
          v19 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:rotateX"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
          objc_msgSend(a3, "simdEulerAngles");
          v21 = v20 / 3.14159265 * 180.0;
          *(float *)&v21 = v21;
          objc_msgSend(v19, "setFloatValue:", v21);
          objc_msgSend(*(id *)(a1 + 88), "addObject:", CFSTR("xformOp:rotateX"));
        }
        objc_msgSend(a3, "simdEulerAngles");
        LODWORD(v22) = HIDWORD(v22);
        if (*((float *)&v22 + 1) != 0.0
          && (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateY"), v22) & 1) == 0)
        {
          v23 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:rotateY"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
          objc_msgSend(a3, "simdEulerAngles");
          v25 = v24 / 3.14159265 * 180.0;
          *(float *)&v25 = v25;
          objc_msgSend(v23, "setFloatValue:", v25);
          objc_msgSend(*(id *)(a1 + 88), "addObject:", CFSTR("xformOp:rotateY"));
        }
        objc_msgSend(a3, "simdEulerAngles", v22);
        *(float *)&v17 = v26;
        if (v26 == 0.0 || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:rotateZ"), v17) & 1) != 0)
          goto LABEL_26;
        v27 = CFSTR("xformOp:rotateZ");
        v28 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:rotateZ"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
        objc_msgSend(a3, "simdEulerAngles");
        v30 = v29 / 3.14159265 * 180.0;
        *(float *)&v30 = v30;
        objc_msgSend(v28, "setFloatValue:", v30);
      }
      else
      {
        objc_msgSend(a3, "orientation");
        v52 = v37;
        objc_msgSend(a3, "orientation");
        v49 = v38;
        objc_msgSend(a3, "orientation");
        objc_msgSend(a3, "orientation");
        v39 = COERCE_DOUBLE(__PAIR64__(v49, v52));
        v27 = CFSTR("xformOp:orient");
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:orient"), USKDataTypeQuatf_weak, USKRoleTypeNone_weak), "setQuatfValue:", v39);
      }
      objc_msgSend(*(id *)(a1 + 88), "addObject:", v27);
LABEL_26:
      objc_msgSend(a3, "scale", v17);
      v61.x = 1.0;
      v61.y = 1.0;
      v61.z = 1.0;
      if (SCNVector3EqualToVector3(v59, v61)
        || (objc_msgSend(*(id *)(a1 + 88), "containsObject:", CFSTR("xformOp:scale")) & 1) != 0)
      {
        goto LABEL_30;
      }
      v31 = CFSTR("xformOp:scale");
      v40 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:scale"), USKDataTypeDouble3_weak, USKRoleTypeNone_weak);
      objc_msgSend(a3, "scale");
      v53 = v41;
      objc_msgSend(a3, "scale");
      v54 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v42, v53));
      objc_msgSend(a3, "scale");
      *(double *)&v44 = v43;
      v55[1] = v44;
      v55[0] = v54;
      objc_msgSend(v40, "setDouble3Value:", v55);
      goto LABEL_29;
    }
  }
  else if ((a4 & 1) == 0)
  {
    v31 = CFSTR("xformOp:transform");
    v32 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:transform"), USKDataTypeDouble4x4_weak, USKRoleTypeNone_weak);
    objc_msgSend(a3, "simdTransform");
    v57[0] = vcvtq_f64_f32(*(float32x2_t *)v33.f32);
    v57[1] = vcvt_hight_f64_f32(v33);
    v57[2] = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
    v57[3] = vcvt_hight_f64_f32(v34);
    v57[4] = vcvtq_f64_f32(*(float32x2_t *)v35.f32);
    v57[5] = vcvt_hight_f64_f32(v35);
    v57[6] = vcvtq_f64_f32(*(float32x2_t *)v36.f32);
    v57[7] = vcvt_hight_f64_f32(v36);
    objc_msgSend(v32, "setDouble4x4Value:", v57);
LABEL_29:
    objc_msgSend(*(id *)(a1 + 88), "addObject:", v31);
  }
LABEL_30:
  v45 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 8);
  for (i = 0; i != 8; ++i)
  {
    v47 = MDLBridgeAllTransforms[i];
    if (objc_msgSend(*(id *)(a1 + 88), "containsObject:", v47))
      objc_msgSend(v45, "addObject:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", v47));
  }
  if (objc_msgSend(v45, "count"))
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOpOrder"), USKDataTypeTokenArray_weak, USKRoleTypeNone_weak), "setTokenArray:", v45);
  return objc_msgSend(*(id *)(a1 + 88), "removeAllObjects");
}

void std::vector<simd_double4x4>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 7)
  {
    if (a2 >> 57)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double4x4>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    v9 = &v6[128 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 8);
        v14 = *((_OWORD *)v10 - 7);
        v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        v16 = *((_OWORD *)v10 - 4);
        v17 = *((_OWORD *)v10 - 3);
        v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double4x4>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(a2 << 7);
}

id BlendShape::makeUsdSkeleton(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  id v7;
  id v8;

  v6 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:");
  v7 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", a2, v6, USKNodeTypeSkeletonRoot_weak);
  v8 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(a3, "stringByAppendingPathComponent:", CFSTR("Skeleton")));
  *(_QWORD *)(a1 + 8) = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", a2, v8, USKNodeTypeSkeleton_weak);
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v7, CFSTR("skel:skeleton"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak), "setObjectPath:", v8);
  return v7;
}

SCNGeometryPrimitiveType USDKitConverter::isMesh(USDKitConverter *this, SCNNode *a2)
{
  SCNGeometry *v2;
  uint64_t v3;
  SCNGeometryElement *v4;
  SCNGeometryPrimitiveType result;

  v2 = -[SCNNode geometry](a2, "geometry");
  if (-[SCNGeometry geometryElementCount](v2, "geometryElementCount") < 1)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = -[SCNGeometry geometryElementAtIndex:](v2, "geometryElementAtIndex:", v3);
    if (-[SCNGeometryElement primitiveType](v4, "primitiveType") == SCNGeometryPrimitiveTypeTriangles
      || -[SCNGeometryElement primitiveType](v4, "primitiveType") == SCNGeometryPrimitiveTypePolygon)
    {
      break;
    }
    result = -[SCNGeometryElement primitiveType](v4, "primitiveType");
    if (result == SCNGeometryPrimitiveTypeTriangleStrip)
      return result;
    if (++v3 >= -[SCNGeometry geometryElementCount](v2, "geometryElementCount"))
      return 0;
  }
  return 1;
}

void USDKitConverter::processSCNGeometry(USDKitConverter *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::vector<int> *v16;
  uint64_t k;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void **p_begin;
  char **v29;
  char **v30;
  unint64_t j;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char *v44;
  char *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  int v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int v76;
  unint64_t m;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  uint64_t v92;
  id v93;
  int v94;
  int v95;
  unint64_t v96;
  void *v97;
  void *v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  int v103;
  void *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  float32x4_t v108;
  uint64_t n;
  uint64_t v110;
  _OWORD *f32;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  float32x4_t *v116;
  float32x4_t *v117;
  char *v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  const __CFString *v123;
  uint64_t v124;
  void *v125;
  void *v126;
  char v127;
  uint64_t *v128;
  char v129;
  char v130;
  int v131;
  id v132;
  NSString *const *v133;
  const __CFString *v134;
  id v135;
  void *v136;
  void *v137;
  void *v138;
  float32x4_t v139;
  uint64_t ii;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  __CFString *v151;
  int v152;
  id v153;
  NSString *const *v154;
  const __CFString *v155;
  id v156;
  void *v157;
  id v158;
  SCNMaterial *v159;
  id v160;
  int v161;
  unint64_t jj;
  id v163;
  void *v164;
  SCNMaterial *v165;
  SCNMaterial *v166;
  uint64_t v167;
  void *v168;
  id v169;
  id v170;
  uint64_t kk;
  int v172;
  char *v173;
  _DWORD *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  int v182;
  id v183;
  id v184;
  uint64_t v185;
  int *begin;
  uint64_t v187;
  id v188;
  const __CFString *v189;
  int v190;
  USDKitConverter *v191;
  unint64_t v192;
  uint64_t v193;
  id v194;
  __CFString *v195;
  const __CFString *v196;
  uint64_t v197;
  const __CFString *v198;
  uint64_t v199;
  uint64_t i;
  unint64_t v201;
  float32x4_t *v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  std::vector<int> *v206;
  uint64_t v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  char *v212;
  char *v213;
  uint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  _BYTE v217[128];
  uint64_t v218;

  v188 = a3;
  v191 = a1;
  v218 = *MEMORY[0x1E0C80C00];
  v193 = a2;
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("subdivisionScheme"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("none")));
  v194 = a4;
  if (objc_msgSend(a4, "geometrySourceChannels")
    && (unint64_t)objc_msgSend((id)objc_msgSend(a4, "geometrySourceChannels"), "count") >= 2)
  {
    v192 = objc_msgSend((id)objc_msgSend(a4, "geometrySourceChannels"), "count");
    v190 = 1;
  }
  else
  {
    v190 = 0;
    v192 = 1;
  }
  v5 = objc_msgSend(v194, "geometryElementCount");
  if (v5 < 1)
  {
    v7 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v194;
    do
    {
      v10 = (void *)objc_msgSend(v9, "geometryElementAtIndex:", v8);
      v11 = objc_msgSend(v10, "primitiveCount");
      if (objc_msgSend(v10, "primitiveType") == 1 && (unint64_t)objc_msgSend(v10, "indexCount") >= 3)
        v7 = v7 + 3 * objc_msgSend(v10, "indexCount") - 6;
      else
        v7 += objc_msgSend(v10, "indexCount");
      v6 += v11;
      ++v8;
      v9 = v194;
      v5 = objc_msgSend(v194, "geometryElementCount");
    }
    while (v8 < v5);
    v212 = 0;
    v213 = 0;
    v214 = 0;
    if (v6)
    {
      std::vector<float>::__vallocate[abi:nn180100](&v212, v6);
      v12 = v213;
      memset_pattern16(v213, &unk_1DD02AFA0, 4 * v6);
      v213 = &v12[4 * v6];
    }
  }
  v187 = (uint64_t)&v187;
  MEMORY[0x1E0C80A78](v5);
  v206 = (std::vector<int> *)((char *)&v187 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v14)
  {
    v15 = v192;
    v16 = v206;
    bzero(v206, 24 * ((24 * v192 - 24) / 0x18) + 24);
    do
    {
      std::vector<unsigned int>::reserve(v16++, v7);
      --v15;
    }
    while (v15);
  }
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  v195 = (__CFString *)objc_msgSend(v194, "geometryElements");
  k = -[__CFString countByEnumeratingWithState:objects:count:](v195, "countByEnumeratingWithState:objects:count:", &v208, v217, 16);
  if (k)
  {
    v196 = *(const __CFString **)v209;
    v197 = 0;
    do
    {
      v198 = 0;
      v201 = k;
      do
      {
        if (*(const __CFString **)v209 != v196)
          objc_enumerationMutation(v195);
        v18 = *(void **)(*((_QWORD *)&v208 + 1) + 8 * (_QWORD)v198);
        if (objc_msgSend(v18, "data"))
        {
          v205.i64[0] = objc_msgSend((id)objc_msgSend(v18, "data"), "bytes");
          if (objc_msgSend(v18, "primitiveType") == 4)
          {
            v19 = 0;
            v20 = 4 * v197;
            while (objc_msgSend(v18, "primitiveCount") > v19)
            {
              v21 = objc_msgSend(v18, "bytesPerIndex");
              switch(v21)
              {
                case 1:
                  v22 = *(unsigned __int8 *)v205.i64[0];
                  break;
                case 4:
                  v22 = *(_DWORD *)v205.i64[0];
                  break;
                case 2:
                  v22 = *(unsigned __int16 *)v205.i64[0];
                  break;
                default:
                  v22 = *(char *)v205.i64[0];
                  break;
              }
              *(_DWORD *)&v212[4 * v19 + v20] = v22;
              v23 = objc_msgSend(v18, "bytesPerIndex");
              ++v19;
              v205.i64[0] += v23;
            }
          }
          v199 = objc_msgSend(v18, "indicesChannelCount");
          if (objc_msgSend(v18, "hasInterleavedIndicesChannels"))
            v24 = v199;
          else
            v24 = 1;
          v203.i64[0] = v24;
          if (v199)
          {
            for (i = 0; i != v199; ++i)
            {
              v25 = objc_msgSend(v18, "hasInterleavedIndicesChannels");
              v204.i64[0] = i;
              if ((v25 & 1) == 0)
              {
                v26 = objc_msgSend(v18, "indexCount");
                v204.i64[0] = v26 * i;
              }
              v27 = objc_msgSend(v18, "primitiveType");
              p_begin = (void **)&v206[i].__begin_;
              v29 = (char **)(p_begin + 1);
              v30 = (char **)(p_begin + 2);
              if (v27 == 1)
              {
                for (j = 2; j < objc_msgSend(v18, "indexCount"); ++j)
                {
                  v32 = objc_msgSend(v18, "bytesPerIndex");
                  v33 = objc_msgSend(v18, "bytesPerIndex");
                  v34 = v32 * (v204.i64[0] + j * v203.i64[0]);
                  switch(v33)
                  {
                    case 1:
                      v35 = *(unsigned __int8 *)(v205.i64[0] + v34);
                      break;
                    case 4:
                      v35 = *(_DWORD *)(v205.i64[0] + v34);
                      break;
                    case 2:
                      v35 = *(unsigned __int16 *)(v205.i64[0] + v34);
                      break;
                    default:
                      v35 = *(char *)(v205.i64[0] + v34);
                      break;
                  }
                  LODWORD(v202) = v35;
                  v36 = objc_msgSend(v18, "bytesPerIndex");
                  v37 = objc_msgSend(v18, "bytesPerIndex");
                  v38 = v36 * (v204.i64[0] + (j - 1) * v203.i64[0]);
                  switch(v37)
                  {
                    case 1:
                      v39 = *(unsigned __int8 *)(v205.i64[0] + v38);
                      break;
                    case 4:
                      v39 = *(_DWORD *)(v205.i64[0] + v38);
                      break;
                    case 2:
                      v39 = *(unsigned __int16 *)(v205.i64[0] + v38);
                      break;
                    default:
                      v39 = *(char *)(v205.i64[0] + v38);
                      break;
                  }
                  v40 = objc_msgSend(v18, "bytesPerIndex");
                  v41 = objc_msgSend(v18, "bytesPerIndex");
                  v42 = v40 * (v204.i64[0] + (j - 2) * v203.i64[0]);
                  switch(v41)
                  {
                    case 1:
                      v43 = *(unsigned __int8 *)(v205.i64[0] + v42);
                      break;
                    case 4:
                      v43 = *(_DWORD *)(v205.i64[0] + v42);
                      break;
                    case 2:
                      v43 = *(unsigned __int16 *)(v205.i64[0] + v42);
                      break;
                    default:
                      v43 = *(char *)(v205.i64[0] + v42);
                      break;
                  }
                  v44 = *v29;
                  v45 = *v30;
                  if (*v29 >= *v30)
                  {
                    v48 = (char *)*p_begin;
                    v49 = (v44 - (_BYTE *)*p_begin) >> 2;
                    v50 = v49 + 1;
                    if ((unint64_t)(v49 + 1) >> 62)
                      goto LABEL_286;
                    v51 = v45 - v48;
                    if (v51 >> 1 > v50)
                      v50 = v51 >> 1;
                    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                      v52 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v52 = v50;
                    if (v52)
                    {
                      v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(p_begin + 2), v52);
                      v44 = *v29;
                      v48 = (char *)*p_begin;
                    }
                    else
                    {
                      v53 = 0;
                    }
                    v54 = &v53[4 * v49];
                    if ((j & 1) != 0)
                      v55 = v39;
                    else
                      v55 = v43;
                    *(_DWORD *)v54 = v55;
                    v47 = v54 + 4;
                    while (v44 != v48)
                    {
                      v56 = *((_DWORD *)v44 - 1);
                      v44 -= 4;
                      *((_DWORD *)v54 - 1) = v56;
                      v54 -= 4;
                    }
                    *p_begin = v54;
                    v45 = &v53[4 * v52];
                    *v29 = v47;
                    *v30 = v45;
                    if (v48)
                    {
                      operator delete(v48);
                      v45 = *v30;
                    }
                  }
                  else
                  {
                    if ((j & 1) != 0)
                      v46 = v39;
                    else
                      v46 = v43;
                    *(_DWORD *)v44 = v46;
                    v47 = v44 + 4;
                  }
                  *v29 = v47;
                  if (v47 >= v45)
                  {
                    v59 = (char *)*p_begin;
                    v60 = (v47 - (_BYTE *)*p_begin) >> 2;
                    v61 = v60 + 1;
                    if ((unint64_t)(v60 + 1) >> 62)
                      goto LABEL_286;
                    v62 = v45 - v59;
                    if (v62 >> 1 > v61)
                      v61 = v62 >> 1;
                    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                      v63 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v63 = v61;
                    if (v63)
                    {
                      v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(p_begin + 2), v63);
                      v47 = *v29;
                      v59 = (char *)*p_begin;
                    }
                    else
                    {
                      v64 = 0;
                    }
                    v65 = &v64[4 * v60];
                    if ((j & 1) != 0)
                      v66 = v43;
                    else
                      v66 = v39;
                    *(_DWORD *)v65 = v66;
                    v58 = v65 + 4;
                    if (v47 == v59)
                    {
                      k = v201;
                    }
                    else
                    {
                      k = v201;
                      do
                      {
                        v67 = *((_DWORD *)v47 - 1);
                        v47 -= 4;
                        *((_DWORD *)v65 - 1) = v67;
                        v65 -= 4;
                      }
                      while (v47 != v59);
                    }
                    *p_begin = v65;
                    v45 = &v64[4 * v63];
                    *v29 = v58;
                    *v30 = v45;
                    if (v59)
                    {
                      operator delete(v59);
                      v45 = *v30;
                    }
                  }
                  else
                  {
                    if ((j & 1) != 0)
                      v57 = v43;
                    else
                      v57 = v39;
                    *(_DWORD *)v47 = v57;
                    v58 = v47 + 4;
                    k = v201;
                  }
                  *v29 = v58;
                  if (v58 >= v45)
                  {
                    v69 = (char *)*p_begin;
                    v70 = (v58 - (_BYTE *)*p_begin) >> 2;
                    v71 = v70 + 1;
                    if ((unint64_t)(v70 + 1) >> 62)
LABEL_286:
                      abort();
                    v72 = v45 - v69;
                    if (v72 >> 1 > v71)
                      v71 = v72 >> 1;
                    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                      v73 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v73 = v71;
                    if (v73)
                    {
                      v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(p_begin + 2), v73);
                      v58 = *v29;
                      v69 = (char *)*p_begin;
                    }
                    else
                    {
                      v74 = 0;
                    }
                    v75 = &v74[4 * v70];
                    *(_DWORD *)v75 = (_DWORD)v202;
                    v68 = v75 + 4;
                    for (k = v201; v58 != v69; v75 -= 4)
                    {
                      v76 = *((_DWORD *)v58 - 1);
                      v58 -= 4;
                      *((_DWORD *)v75 - 1) = v76;
                    }
                    *p_begin = v75;
                    *v29 = v68;
                    *v30 = &v74[4 * v73];
                    if (v69)
                      operator delete(v69);
                  }
                  else
                  {
                    *(_DWORD *)v58 = (_DWORD)v202;
                    v68 = v58 + 4;
                  }
                  *v29 = v68;
                }
              }
              else
              {
                for (m = 0; m < objc_msgSend(v18, "indexCount"); ++m)
                {
                  v78 = objc_msgSend(v18, "bytesPerIndex");
                  v79 = objc_msgSend(v18, "bytesPerIndex");
                  v80 = v78 * (v204.i64[0] + m * v203.i64[0]);
                  switch(v79)
                  {
                    case 1:
                      v81 = *(unsigned __int8 *)(v205.i64[0] + v80);
                      break;
                    case 4:
                      v81 = *(_DWORD *)(v205.i64[0] + v80);
                      break;
                    case 2:
                      v81 = *(unsigned __int16 *)(v205.i64[0] + v80);
                      break;
                    default:
                      v81 = *(char *)(v205.i64[0] + v80);
                      break;
                  }
                  v82 = *v29;
                  if (*v29 >= *v30)
                  {
                    v84 = (char *)*p_begin;
                    v85 = (v82 - (_BYTE *)*p_begin) >> 2;
                    v86 = v85 + 1;
                    if ((unint64_t)(v85 + 1) >> 62)
                      abort();
                    v87 = *v30 - v84;
                    if (v87 >> 1 > v86)
                      v86 = v87 >> 1;
                    if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                      v88 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v88 = v86;
                    if (v88)
                    {
                      v89 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(p_begin + 2), v88);
                      v82 = *v29;
                      v84 = (char *)*p_begin;
                    }
                    else
                    {
                      v89 = 0;
                    }
                    v90 = &v89[4 * v85];
                    *(_DWORD *)v90 = v81;
                    v83 = v90 + 4;
                    while (v82 != v84)
                    {
                      v91 = *((_DWORD *)v82 - 1);
                      v82 -= 4;
                      *((_DWORD *)v90 - 1) = v91;
                      v90 -= 4;
                    }
                    *p_begin = v90;
                    *v29 = v83;
                    *v30 = &v89[4 * v88];
                    if (v84)
                      operator delete(v84);
                  }
                  else
                  {
                    *(_DWORD *)v82 = v81;
                    v83 = v82 + 4;
                  }
                  *v29 = v83;
                }
              }
            }
          }
          v92 = objc_msgSend(v18, "primitiveCount");
          v197 += v92;
        }
        v198 = (const __CFString *)((char *)v198 + 1);
      }
      while (v198 != (const __CFString *)k);
      k = -[__CFString countByEnumeratingWithState:objects:count:](v195, "countByEnumeratingWithState:objects:count:", &v208, v217, 16);
    }
    while (k);
  }
  else
  {
    v197 = 0;
  }
  v93 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, CFSTR("faceVertexCounts"), USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
  objc_msgSend(v93, "setIntArray:count:", v212, v197);
  v94 = 0;
  v95 = 0;
  v201 = 0;
  LODWORD(v197) = v190 ^ 1;
  v202 = &v216;
  v198 = CFSTR("kGeometrySourceSemanticVertex");
  v196 = CFSTR("kGeometrySourceSemanticNormal");
  v195 = CFSTR("kGeometrySourceSemanticColor");
  v189 = CFSTR("kGeometrySourceSemanticTexcoord");
  while (1)
  {
    v96 = objc_msgSend((id)objc_msgSend(v194, "geometrySources"), "count");
    if (v201 >= v96)
      break;
    v97 = (void *)objc_msgSend(v194, "geometrySources");
    v98 = (void *)objc_msgSend(v97, "objectAtIndexedSubscript:", v201);
    v99 = objc_msgSend(v98, "vectorCount");
    v100 = objc_msgSend((id)objc_msgSend(v98, "data"), "bytes");
    v101 = objc_msgSend(v98, "dataOffset");
    v102 = (void *)objc_msgSend(v98, "semantic");
    v103 = objc_msgSend(v102, "isEqualToString:", v198);
    LODWORD(i) = v103;
    if (((v103 | v197) & 1) == 0)
    {
      if (v201 >= v192)
      {
        LODWORD(i) = 0;
      }
      else
      {
        v104 = (void *)objc_msgSend(v194, "geometrySourceChannels");
        LODWORD(i) = objc_msgSend((id)objc_msgSend(v104, "objectAtIndexedSubscript:", v201), "intValue") != 0;
      }
    }
    LODWORD(v199) = v95;
    v105 = v100 + v101;
    if ((v103 & 1) != 0
      || (v106 = (void *)objc_msgSend(v98, "semantic"), (objc_msgSend(v106, "isEqualToString:", v196) & 1) != 0)
      || (v107 = (void *)objc_msgSend(v98, "semantic"), objc_msgSend(v107, "isEqualToString:", v195)))
    {
      v215 = 0uLL;
      v216.i64[0] = 0;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v215, v99);
      if (v99 >= 1)
      {
        for (n = 0; n != v99; ++n)
        {
          v108.i64[0] = *(_QWORD *)v105;
          v108.i32[2] = *(_DWORD *)(v105 + 8);
          v110 = v215.i64[1];
          if (v215.i64[1] >= (unint64_t)v216.i64[0])
          {
            v205 = v108;
            v112 = (v215.i64[1] - v215.i64[0]) >> 4;
            if ((unint64_t)(v112 + 1) >> 60)
              abort();
            v113 = (v216.i64[0] - v215.i64[0]) >> 3;
            if (v113 <= v112 + 1)
              v113 = v112 + 1;
            if (v216.i64[0] - v215.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
              v114 = 0xFFFFFFFFFFFFFFFLL;
            else
              v114 = v113;
            if (v114)
              v115 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v202, v114);
            else
              v115 = 0;
            v116 = (float32x4_t *)&v115[16 * v112];
            v108.i32[3] = v205.i32[3];
            *v116 = v205;
            f32 = (_OWORD *)v116[1].f32;
            v117 = (float32x4_t *)v215.i64[1];
            v118 = (char *)v215.i64[0];
            if (v215.i64[1] != v215.i64[0])
            {
              do
              {
                v119 = v117[-1];
                --v117;
                v108.i32[3] = v119.i32[3];
                v116[-1] = v119;
                --v116;
              }
              while (v117 != (float32x4_t *)v118);
              v117 = (float32x4_t *)v215.i64[0];
            }
            v215.i64[0] = (uint64_t)v116;
            v215.i64[1] = (uint64_t)f32;
            v216.i64[0] = (uint64_t)&v115[16 * v114];
            if (v117)
              operator delete(v117);
          }
          else
          {
            *(float32x4_t *)v215.i64[1] = v108;
            f32 = (_OWORD *)(v110 + 16);
          }
          v215.i64[1] = (uint64_t)f32;
          if (v103)
          {
            v108.i64[0] = *(_QWORD *)v105;
            v108.i32[2] = *(_DWORD *)(v105 + 8);
            if (v94)
            {
              v120 = v203;
              v120.i32[3] = 0;
              v108.i32[3] = 0;
              v121 = vminnmq_f32(v120, v108);
              v122 = v204;
              v122.i32[3] = 0;
              v203 = v121;
              v204 = vmaxnmq_f32(v122, v108);
            }
            else
            {
              v94 = 1;
              v203 = v108;
              v204 = v108;
            }
          }
          v105 += objc_msgSend(v98, "dataStride");
        }
      }
      v207 = objc_msgSend(v98, "semantic");
      v124 = USKDataTypeFloat3Array_weak;
      v125 = (void *)objc_msgSend(v98, "semantic");
      v95 = v199;
      v126 = v125;
      v127 = objc_msgSend(v125, "isEqualToString:", v198);
      v128 = &USKRoleTypePoint_weak;
      if ((v127 & 1) == 0)
      {
        v129 = objc_msgSend(v126, "isEqualToString:", v196);
        v128 = &USKRoleTypeNormal_weak;
        if ((v129 & 1) == 0)
        {
          v130 = objc_msgSend(v126, "isEqualToString:", v189);
          v128 = &USKRoleTypeTextureCoordinate_weak;
          if ((v130 & 1) == 0)
          {
            v131 = objc_msgSend(v126, "isEqualToString:", v195);
            v128 = &USKRoleTypeNone_weak;
            if (v131)
              v128 = &USKRoleTypeColor_weak;
          }
        }
      }
      v132 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, v123, v124, *v128);
      objc_msgSend(v132, "setFloat3Array:count:", v215.i64[0], v99);
      if ((_DWORD)i)
      {
        if ((v103 & 1) == 0)
          objc_msgSend(v132, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("faceVarying"))));
        v207 = objc_msgSend(v98, "semantic");
        v135 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, v134, USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
        if (v190)
        {
          v136 = (void *)objc_msgSend(v194, "geometrySourceChannels");
          objc_msgSend((id)objc_msgSend(v136, "objectAtIndexedSubscript:", v201), "intValue");
        }
        objc_msgSend(v135, "setIntArray:count:");
      }
      else
      {
        v137 = (void *)objc_msgSend(v98, "semantic");
        if (objc_msgSend(v137, "isEqualToString:", v195))
          objc_msgSend(v132, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("vertex"))));
      }
      if (v215.i64[0])
      {
        v215.i64[1] = v215.i64[0];
        operator delete((void *)v215.i64[0]);
      }
    }
    else
    {
      v138 = (void *)objc_msgSend(v98, "semantic");
      if (objc_msgSend(v138, "isEqualToString:", v189))
      {
        v215 = 0uLL;
        v216.i64[0] = 0;
        _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm((void **)&v215, v99);
        if (v99 >= 1)
        {
          for (ii = 0; ii != v99; ++ii)
          {
            v139.i32[0] = *(_DWORD *)v105;
            v139.f32[1] = 1.0 - *(float *)(v105 + 4);
            v141 = v215.i64[1];
            if (v215.i64[1] >= (unint64_t)v216.i64[0])
            {
              v205 = v139;
              v143 = (v215.i64[1] - v215.i64[0]) >> 3;
              if ((unint64_t)(v143 + 1) >> 61)
                abort();
              v144 = (v216.i64[0] - v215.i64[0]) >> 2;
              if (v144 <= v143 + 1)
                v144 = v143 + 1;
              if (v216.i64[0] - v215.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
                v146 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)v202, v145);
              else
                v146 = 0;
              v147 = &v146[8 * v143];
              *(_QWORD *)v147 = v205.i64[0];
              v142 = v147 + 8;
              v148 = (char *)v215.i64[1];
              v149 = (char *)v215.i64[0];
              if (v215.i64[1] != v215.i64[0])
              {
                do
                {
                  v150 = *((_QWORD *)v148 - 1);
                  v148 -= 8;
                  *((_QWORD *)v147 - 1) = v150;
                  v147 -= 8;
                }
                while (v148 != v149);
                v148 = (char *)v215.i64[0];
              }
              v215.i64[0] = (uint64_t)v147;
              v215.i64[1] = (uint64_t)v142;
              v216.i64[0] = (uint64_t)&v146[8 * v145];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_QWORD *)v215.i64[1] = v139.i64[0];
              v142 = (_QWORD *)(v141 + 8);
            }
            v215.i64[1] = (uint64_t)v142;
            v105 += objc_msgSend(v98, "dataStride");
          }
        }
        v207 = objc_msgSend(v98, "semantic");
        v152 = v199;
        if ((int)v199 >= 1)
          v151 = (__CFString *)-[__CFString stringByAppendingString:](v151, "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v199), "stringValue"));
        v153 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, v151, USKDataTypeFloat2Array_weak, USKRoleTypeTextureCoordinate_weak);
        objc_msgSend(v153, "setFloat2Array:count:", v215.i64[0], v99);
        if ((_DWORD)i)
        {
          objc_msgSend(v153, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("faceVarying"))));
          v207 = objc_msgSend(v98, "semantic");
          v156 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, v155, USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
          if (v190)
          {
            v157 = (void *)objc_msgSend(v194, "geometrySourceChannels");
            objc_msgSend((id)objc_msgSend(v157, "objectAtIndexedSubscript:", v201), "intValue");
          }
          objc_msgSend(v156, "setIntArray:count:");
        }
        else
        {
          objc_msgSend(v153, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("vertex"))));
        }
        if (v215.i64[0])
        {
          v215.i64[1] = v215.i64[0];
          operator delete((void *)v215.i64[0]);
        }
        v95 = v152 + 1;
      }
      else
      {
        v95 = v199;
      }
    }
    ++v201;
  }
  if (v94)
  {
    v158 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, CFSTR("extent"), USKDataTypeFloat3Array_weak, USKRoleTypeNone_weak);
    v215 = v203;
    v216 = v204;
    objc_msgSend(v158, "setFloat3Array:count:", &v215, 2);
  }
  if (objc_msgSend(v194, "geometryElementCount") > 1)
  {
    v215 = 0uLL;
    v216.i64[0] = 0;
    v205.i64[0] = objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", objc_msgSend(v194, "geometryElementCount"));
    v161 = 0;
    for (jj = 0; (uint64_t)jj < objc_msgSend(v194, "geometryElementCount"); ++jj)
    {
      v163 = v194;
      v164 = (void *)objc_msgSend(v194, "geometryElementAtIndex:", jj);
      if (jj >= objc_msgSend((id)objc_msgSend(v163, "materials"), "count"))
        v165 = (SCNMaterial *)objc_msgSend(v194, "firstMaterial");
      else
        v165 = (SCNMaterial *)objc_msgSend((id)objc_msgSend(v194, "materials"), "objectAtIndex:", jj);
      v166 = v165;
      if (v165)
      {
        v204.i64[0] = (uint64_t)USDKitConverter::processMaterial(v191, v165);
        v167 = objc_msgSend((id)objc_msgSend((id)v204.i64[0], "stringValue"), "lastPathComponent");
        v168 = (void *)objc_msgSend((id)objc_msgSend(v188, "stringByAppendingPathComponent:", v167), "stringByAppendingString:", CFSTR("_meshGroup"));
        if (objc_msgSend((id)v205.i64[0], "containsObject:", v168))
          v168 = (void *)objc_msgSend(v168, "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", jj), "stringValue"));
        objc_msgSend((id)v205.i64[0], "addObject:", v168);
        v169 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v168);
        v170 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)v191 + 7), v169, USKNodeTypeMeshGroup_weak);
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v170, CFSTR("elementType"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("face")));
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v170, CFSTR("familyName"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("materialBind")));
        std::vector<int>::resize((std::vector<unsigned int> *)&v215, 0);
        for (kk = 0; objc_msgSend(v164, "primitiveCount") > kk; ++kk)
        {
          v172 = v161 + kk;
          v173 = (char *)v215.i64[1];
          if (v215.i64[1] >= (unint64_t)v216.i64[0])
          {
            v175 = (char *)v215.i64[0];
            v176 = (v215.i64[1] - v215.i64[0]) >> 2;
            v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62)
              abort();
            v178 = v216.i64[0] - v215.i64[0];
            if ((v216.i64[0] - v215.i64[0]) >> 1 > v177)
              v177 = v178 >> 1;
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL)
              v179 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v179 = v177;
            if (v179)
            {
              v180 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v216, v179);
              v173 = (char *)v215.i64[1];
              v175 = (char *)v215.i64[0];
            }
            else
            {
              v180 = 0;
            }
            v181 = &v180[4 * v176];
            *(_DWORD *)v181 = v172;
            v174 = v181 + 4;
            while (v173 != v175)
            {
              v182 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v181 - 1) = v182;
              v181 -= 4;
            }
            v215.i64[0] = (uint64_t)v181;
            v215.i64[1] = (uint64_t)v174;
            v216.i64[0] = (uint64_t)&v180[4 * v179];
            if (v175)
              operator delete(v175);
          }
          else
          {
            *(_DWORD *)v215.i64[1] = v172;
            v174 = v173 + 4;
          }
          v215.i64[1] = (uint64_t)v174;
        }
        v183 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v170, CFSTR("indices"), USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
        objc_msgSend(v183, "setIntArray:count:", v215.i64[0], objc_msgSend(v164, "primitiveCount"));
        v184 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v170, CFSTR("material:binding"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak);
        objc_msgSend(v184, "setObjectPath:", v204.i64[0]);
        if (!jj && -[SCNMaterial isDoubleSided](v166, "isDoubleSided"))
          objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, CFSTR("doubleSided"), USKDataTypeBool_weak, USKRoleTypeNone_weak), "setBoolValue:", 1);
      }
      v161 += objc_msgSend(v164, "primitiveCount");
    }
    if (v215.i64[0])
    {
      v215.i64[1] = v215.i64[0];
      operator delete((void *)v215.i64[0]);
    }
  }
  else
  {
    v159 = (SCNMaterial *)objc_msgSend(v194, "firstMaterial");
    if (v159)
    {
      v160 = USDKitConverter::processMaterial(v191, v159);
      objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, CFSTR("material:binding"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak), "setObjectPath:", v160);
      if (-[SCNMaterial isDoubleSided](v159, "isDoubleSided"))
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v193, CFSTR("doubleSided"), USKDataTypeBool_weak, USKRoleTypeNone_weak), "setBoolValue:", 1);
    }
  }
  if (v192)
  {
    v185 = v192;
    do
    {
      begin = v206[v185 - 1].__begin_;
      if (begin)
      {
        v206[v185 - 1].__end_ = begin;
        operator delete(begin);
      }
      --v185;
    }
    while (v185 * 24);
  }
  if (v212)
  {
    v213 = v212;
    operator delete(v212);
  }
}

void sub_1DCEE6A58(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = v1[5];
  if (v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = v1[22] + v4;
      v6 = *(void **)(v5 - 24);
      if (v6)
      {
        *(_QWORD *)(v5 - 16) = v6;
        operator delete(v6);
      }
      v4 -= 24;
    }
    while (v4);
  }
  v7 = (void *)v1[33];
  if (v7)
  {
    v1[34] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

unint64_t USDKitConverter::processSCNMorpher(USDKitConverter *a1, void *a2, void *a3, void *a4)
{
  void *v5;
  void *v6;
  unint64_t result;
  unint64_t i;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSString *v14;
  id v15;
  const __CFString *v16;
  id v17;
  int64_t v18;
  int64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  int64_t v24;
  int32x4_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t *v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t *v47;
  int32x4_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  int32x4_t *v53;
  int32x4_t *v54;
  int32x4_t *v55;
  int32x4_t v56;
  int32x4_t *v57;
  int32x4_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  int32x4_t *v63;
  int32x4_t *v64;
  int32x4_t *v65;
  int32x4_t v66;
  std::vector<int>::pointer end;
  int *v68;
  std::vector<int>::pointer begin;
  int64_t v70;
  unint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  int *v75;
  int v76;
  void *v77;
  char v78;
  const __CFString *v79;
  void *v80;
  char v81;
  const __CFString *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  BOOL v86;
  _QWORD *v87;
  unint64_t v89;
  void *v91;
  void *v92;
  uint64_t v94;
  id v95;
  __int128 v96;
  int32x4_t v97;
  float v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  std::vector<int> v103;
  int32x4_t *v104;
  int32x4_t *v105;
  int32x4_t *v106;
  int32x4_t *v107;
  int32x4_t *v108;
  int32x4_t *v109;

  v5 = (void *)objc_msgSend(a4, "geometry");
  v89 = (unint64_t)a4;
  v6 = (void *)objc_msgSend(a4, "morpher");
  if (objc_msgSend(v6, "calculationMode"))
  {
    v96 = 0uLL;
  }
  else
  {
    result = objc_msgSend((id)objc_msgSend(v5, "geometrySources"), "count");
    if (result)
    {
      v96 = 0uLL;
      for (i = 0; i < result; ++i)
      {
        v9 = (void *)objc_msgSend((id)objc_msgSend(v5, "geometrySources"), "objectAtIndexedSubscript:", i);
        if ((objc_msgSend((id)objc_msgSend(v9, "semantic"), "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex")) & 1) != 0)
        {
          *(_QWORD *)&v96 = v9;
        }
        else
        {
          v10 = objc_msgSend((id)objc_msgSend(v9, "semantic"), "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal"));
          v11 = (void *)*((_QWORD *)&v96 + 1);
          if (v10)
            v11 = v9;
          *((_QWORD *)&v96 + 1) = v11;
        }
        result = objc_msgSend((id)objc_msgSend(v5, "geometrySources"), "count");
      }
    }
    else
    {
      v96 = 0uLL;
    }
    if (v96 == 0)
      return result;
  }
  v92 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend(v6, "targets"), "count"));
  v91 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend((id)objc_msgSend(v6, "targets"), "count"));
  if (objc_msgSend((id)objc_msgSend(v6, "targets"), "count"))
  {
    v12 = 0;
    while (1)
    {
      v13 = (void *)objc_msgSend((id)objc_msgSend(v6, "targets"), "objectAtIndexedSubscript:", v12);
      v14 = (NSString *)objc_msgSend(CFSTR("blendShape"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v12), "stringValue"));
      v15 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(a3, "stringByAppendingPathComponent:", v14));
      objc_msgSend(v92, "addObject:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", USDKitConverter::makeUniqueBlendShapeName(a1, v14, (NSString *)a3)));
      objc_msgSend(v91, "addObject:", v15);
      if (C3DSceneSourceGetSceneCount())
      {
        v16 = (const __CFString *)USKNodeTypeBlendShape_weak;
        v17 = v15;
      }
      else
      {
        v17 = v15;
        v16 = CFSTR("BlendShape");
      }
      v95 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)a1 + 7), v17, v16);
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v107 = 0;
      v108 = 0;
      v109 = 0;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      while (v22 < objc_msgSend((id)objc_msgSend(v13, "geometrySources"), "count"))
      {
        v23 = (void *)objc_msgSend((id)objc_msgSend(v13, "geometrySources"), "objectAtIndexedSubscript:", v22);
        if (objc_msgSend((id)objc_msgSend(v23, "semantic"), "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex")))
        {
          v19 = objc_msgSend(v23, "vectorCount");
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v107, v19);
          v20 = v23;
        }
        else if (objc_msgSend((id)objc_msgSend(v23, "semantic"), "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal")))
        {
          v18 = objc_msgSend(v23, "vectorCount");
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v104, v18);
          v21 = v23;
        }
        ++v22;
      }
      v24 = v19 <= v18 ? v18 : v19;
      memset(&v103, 0, sizeof(v103));
      std::vector<unsigned int>::reserve(&v103, v24);
      v26 = v20 && (objc_msgSend(v6, "calculationMode") | (unint64_t)v96) != 0;
      v94 = v12;
      v27 = v21 && (objc_msgSend(v6, "calculationMode") | *((_QWORD *)&v96 + 1)) != 0;
      if (v24 >= 1)
        break;
LABEL_100:
      if (v108 != v107)
      {
        v77 = (void *)objc_msgSend(v20, "semantic");
        v78 = objc_msgSend(v77, "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex"));
        v79 = CFSTR("offsets");
        if ((v78 & 1) == 0)
        {
          if (objc_msgSend(v77, "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal"), CFSTR("offsets")))v79 = CFSTR("normalOffsets");
          else
            v79 = &stru_1EA5A6480;
        }
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v95, v79, USKDataTypeFloat3Array_weak, USKRoleTypeVector_weak), "setFloat3Array:count:");
      }
      if (v105 != v104)
      {
        v80 = (void *)objc_msgSend(v21, "semantic");
        v81 = objc_msgSend(v80, "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex"));
        v82 = CFSTR("offsets");
        if ((v81 & 1) == 0)
        {
          if (objc_msgSend(v80, "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal"), CFSTR("offsets")))v82 = CFSTR("normalOffsets");
          else
            v82 = &stru_1EA5A6480;
        }
        objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v95, v82, USKDataTypeFloat3Array_weak, USKRoleTypeVector_weak), "setFloat3Array:count:");
      }
      objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v95, CFSTR("pointIndices"), USKDataTypeIntArray_weak, USKRoleTypeNone_weak), "setIntArray:count:");
      if (v103.__begin_)
      {
        v103.__end_ = v103.__begin_;
        operator delete(v103.__begin_);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      if (v107)
      {
        v108 = v107;
        operator delete(v107);
      }
      v12 = v94 + 1;
      if (v94 + 1 >= (unint64_t)objc_msgSend((id)objc_msgSend(v6, "targets"), "count"))
        goto LABEL_119;
    }
    v28 = 0;
    while (1)
    {
      v25.i64[0] = 0;
      v101 = v25;
      v97 = v25;
      v98 = 0.0;
      v25.i64[0] = 0;
      v99 = v25;
      if (v26
        && (v29 = objc_msgSend((id)objc_msgSend(v20, "data"), "bytes"),
            v30 = objc_msgSend(v20, "dataOffset"),
            v31 = v29 + v30 + objc_msgSend(v20, "dataStride") * v28,
            v32.i64[0] = *(_QWORD *)v31,
            v99 = v32,
            v98 = *(float *)(v31 + 8),
            !objc_msgSend(v6, "calculationMode")))
      {
        v42 = objc_msgSend((id)objc_msgSend((id)v96, "data"), "bytes");
        v43 = objc_msgSend((id)v96, "dataOffset");
        v44 = (float32x2_t *)(v42 + v43 + objc_msgSend((id)v96, "dataStride") * v28);
        v45.i64[1] = v99.i64[1];
        *(float32x2_t *)v45.i8 = vsub_f32(*(float32x2_t *)v99.i8, *v44);
        v99 = v45;
        v98 = v98 - v44[1].f32[0];
        if (v27)
        {
LABEL_40:
          v33 = objc_msgSend((id)objc_msgSend(v21, "data"), "bytes");
          v34 = objc_msgSend(v21, "dataOffset");
          v35 = v33 + v34 + objc_msgSend(v21, "dataStride") * v28;
          v36.i64[0] = *(_QWORD *)v35;
          v101 = v36;
          v36.i32[0] = *(_DWORD *)(v35 + 8);
          v97 = v36;
          if (!objc_msgSend(v6, "calculationMode"))
          {
            v37 = objc_msgSend((id)objc_msgSend(*((id *)&v96 + 1), "data"), "bytes");
            v38 = objc_msgSend(*((id *)&v96 + 1), "dataOffset");
            v39 = (float32x2_t *)(v37 + v38 + objc_msgSend(*((id *)&v96 + 1), "dataStride") * v28);
            v40.i64[1] = v101.i64[1];
            *(float32x2_t *)v40.i8 = vsub_f32(*(float32x2_t *)v101.i8, *v39);
            v101 = v40;
            v41 = v97;
            *(float *)v41.i32 = *(float *)v97.i32 - v39[1].f32[0];
            v97 = v41;
          }
        }
      }
      else if (v27)
      {
        goto LABEL_40;
      }
      *(int32x2_t *)v46.f32 = vrev64_s32(*(int32x2_t *)v99.i8);
      v46.i32[3] = vdup_lane_s32(*(int32x2_t *)&v101, 0).i32[1];
      v46.f32[2] = v98;
      v25 = (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v46));
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(v25)) & 1) != 0
        || (v25.i64[1] = v101.i64[1], *(float *)&v101.i32[1] != 0.0)
        || (v25.i64[1] = v97.i64[1], *(float *)v97.i32 != 0.0))
      {
        if (v26)
        {
          v25 = v99;
          *(float *)&v25.i32[2] = v98;
          v47 = v108;
          if (v108 >= v109)
          {
            v100 = v25;
            v49 = v108 - v107;
            if ((unint64_t)(v49 + 1) >> 60)
              abort();
            v50 = ((char *)v109 - (char *)v107) >> 3;
            if (v50 <= v49 + 1)
              v50 = v49 + 1;
            if ((unint64_t)((char *)v109 - (char *)v107) >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
              v52 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v109, v51);
            else
              v52 = 0;
            v53 = (int32x4_t *)&v52[16 * v49];
            v25.i64[1] = v100.i64[1];
            *v53 = v100;
            v48 = v53 + 1;
            v55 = v107;
            v54 = v108;
            if (v108 != v107)
            {
              do
              {
                v56 = v54[-1];
                --v54;
                v25.i64[1] = v56.i64[1];
                v53[-1] = v56;
                --v53;
              }
              while (v54 != v55);
              v54 = v107;
            }
            v107 = v53;
            v108 = v48;
            v109 = (int32x4_t *)&v52[16 * v51];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v108 = v25;
            v48 = v47 + 1;
          }
          v108 = v48;
        }
        if (v27)
        {
          v25 = v101;
          v25.i32[2] = v97.i32[0];
          v57 = v105;
          if (v105 >= v106)
          {
            v102 = v25;
            v59 = v105 - v104;
            if ((unint64_t)(v59 + 1) >> 60)
              abort();
            v60 = ((char *)v106 - (char *)v104) >> 3;
            if (v60 <= v59 + 1)
              v60 = v59 + 1;
            if ((unint64_t)((char *)v106 - (char *)v104) >= 0x7FFFFFFFFFFFFFF0)
              v61 = 0xFFFFFFFFFFFFFFFLL;
            else
              v61 = v60;
            if (v61)
              v62 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v106, v61);
            else
              v62 = 0;
            v63 = (int32x4_t *)&v62[16 * v59];
            v25.i64[1] = v102.i64[1];
            *v63 = v102;
            v58 = v63 + 1;
            v65 = v104;
            v64 = v105;
            if (v105 != v104)
            {
              do
              {
                v66 = v64[-1];
                --v64;
                v25.i64[1] = v66.i64[1];
                v63[-1] = v66;
                --v63;
              }
              while (v64 != v65);
              v64 = v104;
            }
            v104 = v63;
            v105 = v58;
            v106 = (int32x4_t *)&v62[16 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v105 = v25;
            v58 = v57 + 1;
          }
          v105 = v58;
        }
        end = v103.__end_;
        if (v103.__end_ >= v103.__end_cap_.__value_)
        {
          begin = v103.__begin_;
          v70 = v103.__end_ - v103.__begin_;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
            abort();
          v72 = (char *)v103.__end_cap_.__value_ - (char *)v103.__begin_;
          if (((char *)v103.__end_cap_.__value_ - (char *)v103.__begin_) >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v103.__end_cap_, v73);
            begin = v103.__begin_;
            end = v103.__end_;
          }
          else
          {
            v74 = 0;
          }
          v75 = (int *)&v74[4 * v70];
          *v75 = v28;
          v68 = v75 + 1;
          while (end != begin)
          {
            v76 = *--end;
            *--v75 = v76;
          }
          v103.__begin_ = v75;
          v103.__end_ = v68;
          v103.__end_cap_.__value_ = (int *)&v74[4 * v73];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v103.__end_ = v28;
          v68 = end + 1;
        }
        v103.__end_ = v68;
      }
      if (++v28 == v24)
        goto LABEL_100;
    }
  }
LABEL_119:
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("skel:blendShapes"), USKDataTypeTokenArray_weak, USKRoleTypeNone_weak), "setTokenArray:", v92);
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("skel:blendShapeTargets"), USKDataTypeObjectPathArray_weak, USKRoleTypeNone_weak), "setObjectPathArray:", v91);
  result = objc_msgSend(a2, "applyType:", USKSchemaTypeBindingAPI_weak);
  v83 = (_QWORD *)*((_QWORD *)a1 + 53);
  if (v83)
  {
    v84 = (_QWORD *)((char *)a1 + 424);
    do
    {
      v85 = v83[4];
      v86 = v85 >= v89;
      if (v85 >= v89)
        v87 = v83;
      else
        v87 = v83 + 1;
      if (v86)
        v84 = v83;
      v83 = (_QWORD *)*v87;
    }
    while (*v87);
    if (v84 != (_QWORD *)((char *)a1 + 424) && v84[4] <= v89)
      *(_QWORD *)(v84[5] + 24) = v92;
  }
  return result;
}

void sub_1DCEE7590(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 136);
  if (v4)
  {
    *(_QWORD *)(v1 - 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 112);
  if (v5)
  {
    *(_QWORD *)(v1 - 104) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

const __CFString *`anonymous namespace'::semanticToProperty(id *this, NSString *const *a2)
{
  int v2;
  const __CFString *v5;
  const __CFString *v6;
  BOOL v7;
  int v8;

  v2 = (int)a2;
  if ((objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex")) & 1) != 0)
    return CFSTR("points");
  if (objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal")))
  {
    v5 = CFSTR("normals");
    v6 = CFSTR("primvars:normals");
    v7 = v2 == 0;
  }
  else
  {
    if ((objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticTexcoord")) & 1) != 0)
      return CFSTR("primvars:st");
    v8 = objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticColor"));
    v5 = &stru_1EA5A6480;
    v6 = CFSTR("primvars:displayColor");
    v7 = v8 == 0;
  }
  if (v7)
    return v5;
  else
    return v6;
}

const __CFString *`anonymous namespace'::semanticToIndicesProperty(id *this, NSString *const *a2)
{
  if ((objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticVertex")) & 1) != 0)
    return CFSTR("faceVertexIndices");
  if ((objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticNormal")) & 1) != 0)
    return CFSTR("primvars:normals:indices");
  if ((objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticTexcoord")) & 1) != 0)
    return CFSTR("primvars:st:indices");
  if (objc_msgSend(*this, "isEqualToString:", CFSTR("kGeometrySourceSemanticColor")))
    return CFSTR("primvars:displayColor:indices");
  return &stru_1EA5A6480;
}

id USDKitConverter::processMaterial(USDKitConverter *this, SCNMaterial *a2)
{
  _QWORD *v3;
  uint64_t **v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSString *v9;
  _anonymous_namespace_ *v10;
  NSString *v11;
  void *v12;
  uint64_t **v13;
  char *v14;
  size_t size;
  std::string *p_str;
  std::string *p_p;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  int v22;
  size_t v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  _OWORD *v31;
  void *v32;
  id v33;
  id i;
  void *v35;
  double v36;
  float v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  double v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  double v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  unint64_t v57;
  unsigned __int16 *v58;
  id *v59;
  BOOL v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  std::string::size_type v64;
  char *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int16 *v70;
  std::string::size_type v71;
  std::string::size_type v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unsigned __int16 **v77;
  char *v78;
  std::string::size_type v79;
  unsigned __int16 *v80;
  void *v81;
  uint64_t *v82;
  uint64_t v83;
  id v84;
  uint64_t v86;
  void *v87;
  void *v88;
  USDKitConverter *v89;
  uint64_t **v90;
  id v91;
  _QWORD *v92;
  id v93;
  std::string __p;
  void *v95;
  char v96;
  id v97;
  std::string v98;
  std::string __str;
  _OWORD v100[2];
  uint64_t v101;
  _QWORD v102[5];

  v102[2] = *MEMORY[0x1E0C80C00];
  v97 = a2;
  v3 = (_QWORD *)*((_QWORD *)this + 16);
  v4 = (uint64_t **)((char *)this + 120);
  if (!v3)
    goto LABEL_12;
  v5 = (_QWORD *)((char *)this + 128);
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != (_QWORD *)((char *)this + 128) && v5[4] <= (unint64_t)a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    return (id)std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 15, (unint64_t *)&v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[5];
  }
  else
  {
LABEL_12:
    v9 = -[SCNMaterial name](a2, "name");
    if (!v9 || (v10 = (_anonymous_namespace_ *)v9, !-[NSString length](v9, "length")))
      v10 = (_anonymous_namespace_ *)objc_msgSend(CFSTR("Material_"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)this + 17)), "stringValue"));
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)objc_msgSend(v12, "UTF8String"));
    v13 = (uint64_t **)((char *)this + 144);
    v14 = (char *)this + 152;
    v89 = this;
    v90 = v4;
    if ((USDKitConverter *)((char *)this + 152) != (USDKitConverter *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this + 144, (const void **)&__p.__r_.__value_.__l.__data_))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      p_str = &__str;
      std::string::basic_string[abi:nn180100]((uint64_t)&__str, size + 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_str, p_p, size);
      }
      *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + size) = 95;
      std::to_string(&v98, *((_QWORD *)this + 20));
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v98;
      else
        v18 = (std::string *)v98.__r_.__value_.__r.__words[0];
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      else
        v19 = v98.__r_.__value_.__l.__size_;
      v20 = std::string::append(&__str, (const std::string::value_type *)v18, v19);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(_QWORD *)&v100[1] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
      v100[0] = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v14 != (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)this + 144, (const void **)v100))
      {
        v22 = 1;
        do
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v23 = __p.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:nn180100]((uint64_t)&__str, v23 + 4);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &__str;
          else
            v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v23)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &__p;
            else
              v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
            memmove(v24, v25, v23);
          }
          strcpy((char *)v24 + v23, "_un_");
          std::to_string(&v98, v22);
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = &v98;
          else
            v26 = (std::string *)v98.__r_.__value_.__r.__words[0];
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
          else
            v27 = v98.__r_.__value_.__l.__size_;
          v28 = std::string::append(&__str, (const std::string::value_type *)v26, v27);
          v29 = v28->__r_.__value_.__r.__words[0];
          v102[0] = v28->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
          v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v100[1]) < 0)
            operator delete(*(void **)&v100[0]);
          *(_QWORD *)&v100[0] = v29;
          *((_QWORD *)&v100[0] + 1) = v102[0];
          *(_QWORD *)((char *)v100 + 15) = *(_QWORD *)((char *)v102 + 7);
          BYTE7(v100[1]) = v30;
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          ++v22;
        }
        while (v14 != (char *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)v13, (const void **)v100));
      }
      if ((SBYTE7(v100[1]) & 0x80u) == 0)
        v31 = v100;
      else
        v31 = *(_OWORD **)&v100[0];
      v12 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v31);
      v4 = v90;
      if (SBYTE7(v100[1]) < 0)
        operator delete(*(void **)&v100[0]);
    }
    std::string::basic_string[abi:nn180100]<0>(v100, (char *)objc_msgSend(v12, "UTF8String"));
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v13, (const void **)v100, (uint64_t)v100);
    if (SBYTE7(v100[1]) < 0)
      operator delete(*(void **)&v100[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v32 = (void *)objc_msgSend((id)USDKitConverter::getMaterialsPath(this), "stringByAppendingPathComponent:", v12);
    v33 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v32);
    i = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v33, USKNodeTypeMaterial_weak);
    v91 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(v32, "stringByAppendingPathComponent:", CFSTR("surfaceShader")));
    v93 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v91, USKNodeTypeShader_weak);
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v93, CFSTR("info:id"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("UsdPreviewSurface")));
    +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v93, CFSTR("outputs:surface"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
    v35 = (void *)objc_msgSend(v97, "emission");
    if (objc_msgSend(v97, "selfIllumination"))
    {
      objc_msgSend((id)objc_msgSend(v97, "selfIllumination"), "contents");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (!objc_msgSend(v97, "emission")
          || (objc_msgSend((id)objc_msgSend(v97, "emission"), "contents"),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0)
          && (objc_msgSend((id)objc_msgSend(v97, "emission"), "contents"),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0))
        {
          v35 = (void *)objc_msgSend(v97, "selfIllumination");
        }
      }
    }
    objc_msgSend(v97, "transparency");
    v37 = v36;
    if (objc_msgSend(v97, "transparencyMode") == 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      v38 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v97, "transparent"), "color"), "scn_C3DColorIgnoringColorSpace:success:", 0, &__p);
      if (__p.__r_.__value_.__s.__data_[0])
      {
        v40 = v38;
        v41 = v39;
        objc_msgSend(v97, "transparency");
        v42 = *((float *)&v40 + 1) * 0.71516 + *(float *)&v40 * 0.212671 + v41 * 0.072169;
        v37 = 1.0 - v42 * v43;
      }
    }
    memset(v100, 0, 24);
    std::vector<MaterialMap>::reserve((char **)v100, 8uLL);
    v44 = (void *)objc_msgSend(v97, "normal");
    std::string::basic_string[abi:nn180100]<0>(&__str, "rgb");
    MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("normal"), v44, (std::string::size_type *)&USKRoleTypeNormal_weak, &__str, 0);
    std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v45 = *((_QWORD *)&v100[0] + 1);
    if (objc_msgSend((id)objc_msgSend(v97, "lightingModelName"), "isEqualToString:", CFSTR("SCNLightingModelPhysicallyBased")))
    {
      v46 = (void *)objc_msgSend(v97, "metalness");
      std::string::basic_string[abi:nn180100]<0>(&__str, "r");
      MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("metallic"), v46, (std::string::size_type *)&USKRoleTypeNone_weak, &__str, 0);
      std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
      if (v96 < 0)
        operator delete(v95);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v47 = (void *)objc_msgSend(v97, "roughness");
      std::string::basic_string[abi:nn180100]<0>(&__str, "r");
      MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("roughness"), v47, (std::string::size_type *)&USKRoleTypeNone_weak, &__str, 0);
      std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
      if (v96 < 0)
        operator delete(v95);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v48 = (void *)objc_msgSend(v97, "diffuse");
    std::string::basic_string[abi:nn180100]<0>(&__str, "rgb");
    MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("diffuseColor"), v48, (std::string::size_type *)&USKRoleTypeColor_weak, &__str, 0);
    std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:nn180100]<0>(&__str, "rgb");
    MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("emissiveColor"), v35, (std::string::size_type *)&USKRoleTypeColor_weak, &__str, 0);
    std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v49 = (void *)objc_msgSend(v97, "transparent");
    std::string::basic_string[abi:nn180100]<0>(&__str, "a");
    *(float *)&v50 = v37;
    MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("opacity"), v49, (std::string::size_type *)&USKRoleTypeNone_weak, &__str, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v50));
    std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v51 = (void *)objc_msgSend(v97, "ambientOcclusion");
    std::string::basic_string[abi:nn180100]<0>(&__str, "r");
    MaterialMap::MaterialMap(&__p, (std::string::size_type)CFSTR("occlusion"), v51, (std::string::size_type *)&USKRoleTypeNone_weak, &__str, 0);
    std::vector<MaterialMap>::push_back[abi:nn180100]((char **)v100, (__int128 *)&__p);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v53 = *((_QWORD *)&v100[0] + 1);
    v52 = *(_QWORD *)&v100[0];
    if (*(_QWORD *)&v100[0] != *((_QWORD *)&v100[0] + 1))
    {
      v92 = (_QWORD *)(v45 - 80);
      do
      {
        v54 = *(void **)(v52 + 8);
        if (v54 && objc_msgSend(v54, "contents"))
          *(_QWORD *)(v52 + 56) = USDKitConverter::textureFileWithMaterialProperty(this, *(SCNMaterialProperty **)(v52 + 8));
        v52 += 80;
      }
      while (v52 != v53);
      v55 = (unsigned __int16 *)*((_QWORD *)&v100[0] + 1);
      v56 = *(unsigned __int16 **)&v100[0];
      if (*((_QWORD *)&v100[0] + 1) != *(_QWORD *)&v100[0])
      {
        v86 = (uint64_t)i;
        v87 = v32;
        v88 = v33;
        v57 = 0;
        do
        {
          v58 = &v56[40 * v57];
          v59 = (id *)(v58 + 28);
          if (*((_QWORD *)v58 + 7))
            v60 = *((_QWORD *)v58 + 8) == 0;
          else
            v60 = 0;
          if (v60)
          {
            v61 = *(void **)v58;
            memset(&__p, 0, sizeof(__p));
            v62 = std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], 1uLL);
            *v62 = v58;
            v64 = (std::string::size_type)(v62 + 1);
            v65 = (char *)__p.__r_.__value_.__l.__size_;
            v66 = __p.__r_.__value_.__r.__words[0];
            v67 = (std::string::size_type)v62;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                v68 = *((_QWORD *)v65 - 1);
                v65 -= 8;
                *(_QWORD *)(v67 - 8) = v68;
                v67 -= 8;
              }
              while (v65 != (char *)v66);
              v65 = (char *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__r.__words[0] = v67;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v62 + 1);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v62[v63];
            if (v65)
              operator delete(v65);
            __p.__r_.__value_.__l.__size_ = v64;
            ++v57;
            v55 = (unsigned __int16 *)*((_QWORD *)&v100[0] + 1);
            v56 = *(unsigned __int16 **)&v100[0];
            v69 = v57;
            if (v57 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v100[0] + 1) - *(_QWORD *)&v100[0]) >> 4))
            {
              do
              {
                v70 = &v56[40 * v69];
                if (objc_msgSend(*v59, "isEqualToString:", *((_QWORD *)v70 + 7), v86, v87, v88))
                {
                  v61 = (void *)objc_msgSend((id)objc_msgSend(v61, "stringByAppendingString:", CFSTR("_")), "stringByAppendingString:", *(_QWORD *)v70);
                  v71 = __p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                  {
                    v73 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                    if ((unint64_t)(v73 + 1) >> 61)
                      abort();
                    v74 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
                    if (v74 <= v73 + 1)
                      v74 = v73 + 1;
                    if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                      v75 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v75 = v74;
                    if (v75)
                      v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v75);
                    else
                      v76 = 0;
                    v77 = (unsigned __int16 **)&v76[8 * v73];
                    *v77 = v70;
                    v72 = (std::string::size_type)(v77 + 1);
                    v78 = (char *)__p.__r_.__value_.__l.__size_;
                    v79 = __p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                    {
                      do
                      {
                        v80 = (unsigned __int16 *)*((_QWORD *)v78 - 1);
                        v78 -= 8;
                        *--v77 = v80;
                      }
                      while (v78 != (char *)v79);
                      v78 = (char *)__p.__r_.__value_.__r.__words[0];
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
                    __p.__r_.__value_.__l.__size_ = v72;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v76[8 * v75];
                    if (v78)
                      operator delete(v78);
                  }
                  else
                  {
                    *(_QWORD *)__p.__r_.__value_.__l.__size_ = v70;
                    v72 = v71 + 8;
                  }
                  __p.__r_.__value_.__l.__size_ = v72;
                }
                ++v69;
                v55 = (unsigned __int16 *)*((_QWORD *)&v100[0] + 1);
                v56 = *(unsigned __int16 **)&v100[0];
              }
              while (v69 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v100[0] + 1) - *(_QWORD *)&v100[0]) >> 4));
              v64 = __p.__r_.__value_.__l.__size_;
            }
            v81 = (void *)__p.__r_.__value_.__r.__words[0];
            v82 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] != v64)
            {
              do
              {
                v83 = *v82++;
                *(_QWORD *)(v83 + 64) = v61;
              }
              while (v82 != (uint64_t *)v64);
            }
            if (v81)
            {
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
              operator delete(v81);
              v55 = (unsigned __int16 *)*((_QWORD *)&v100[0] + 1);
              v56 = *(unsigned __int16 **)&v100[0];
            }
          }
          else
          {
            ++v57;
          }
        }
        while (v57 < 0xCCCCCCCCCCCCCCCDLL * (((char *)v55 - (char *)v56) >> 4));
        v4 = v90;
        v33 = v88;
        for (i = (id)v86; v56 != v55; v56 += 40)
          USDKitConverter::processTextureShader((uint64_t)v89, v56, v92, v87, (uint64_t)v93, v86, v88);
      }
    }
    v84 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", i, CFSTR("outputs:surface"), USKDataTypeToken_weak, USKRoleTypeNone_weak, v86, v87, v88);
    v101 = objc_msgSend(v91, "pathByAppendingPropertyComponent:", CFSTR("outputs:surface"));
    objc_msgSend(v84, "setConnectionWithTargetPaths:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v101, 1));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>(v4, (unint64_t *)&v97, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str)[5] = (uint64_t)v33;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
    std::vector<MaterialMap>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  }
  return v33;
}

void sub_1DCEE8430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a29 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  a18 = (void *)(v46 - 176);
  std::vector<MaterialMap>::__destroy_vector::operator()[abi:nn180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t USDKitConverter::getMaterialsPath(USDKitConverter *this)
{
  uint64_t result;
  uint64_t v3;
  id v4;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    v3 = objc_msgSend(*((id *)this + 3), "stringByAppendingPathComponent:", CFSTR("Materials"));
    *((_QWORD *)this + 5) = v3;
    v4 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v3);
    +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v4, USKNodeTypeScope_weak);
    return *((_QWORD *)this + 5);
  }
  return result;
}

uint64_t std::vector<MaterialMap>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64_t v19;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      abort();
    v5 = a1[1] - *a1;
    v19 = result;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MaterialMap>>(result, a2);
    v9 = *a1;
    v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      v14 = vdupq_n_s64(v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_OWORD *)(v8 - 80);
        *((_QWORD *)v10 - 8) = *(_QWORD *)(v8 - 64);
        *((_OWORD *)v10 - 5) = v11;
        v12 = *(_OWORD *)(v8 - 56);
        *((_QWORD *)v10 - 5) = *(_QWORD *)(v8 - 40);
        *(_OWORD *)(v10 - 56) = v12;
        *(_QWORD *)(v8 - 48) = 0;
        *(_QWORD *)(v8 - 40) = 0;
        *(_QWORD *)(v8 - 56) = 0;
        v13 = *(_OWORD *)(v8 - 16);
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v8 - 32);
        *((_OWORD *)v10 - 1) = v13;
        v10 -= 80;
        v8 -= 80;
      }
      while ((char *)v8 != v9);
      v14 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v17 = v14;
    v15 = a1[2];
    a1[2] = &v6[80 * v7];
    v18 = v15;
    v16 = v14.i64[0];
    return std::__split_buffer<MaterialMap>::~__split_buffer((uint64_t)&v16);
  }
  return result;
}

uint64_t std::vector<MaterialMap>::push_back[abi:nn180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    v32 = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<MaterialMap>>(result, v15);
    else
      v16 = 0;
    v17 = &v16[80 * v12];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[4];
    *((_OWORD *)v17 + 3) = a2[3];
    *((_OWORD *)v17 + 4) = v20;
    v22 = *a1;
    v21 = (unint64_t)a1[1];
    if ((char *)v21 == *a1)
    {
      v27 = vdupq_n_s64(v21);
      v23 = &v16[80 * v12];
    }
    else
    {
      v23 = &v16[80 * v12];
      do
      {
        v24 = *(_OWORD *)(v21 - 80);
        *((_QWORD *)v23 - 8) = *(_QWORD *)(v21 - 64);
        *((_OWORD *)v23 - 5) = v24;
        v25 = *(_OWORD *)(v21 - 56);
        *((_QWORD *)v23 - 5) = *(_QWORD *)(v21 - 40);
        *(_OWORD *)(v23 - 56) = v25;
        *(_QWORD *)(v21 - 48) = 0;
        *(_QWORD *)(v21 - 40) = 0;
        *(_QWORD *)(v21 - 56) = 0;
        v26 = *(_OWORD *)(v21 - 16);
        *((_OWORD *)v23 - 2) = *(_OWORD *)(v21 - 32);
        *((_OWORD *)v23 - 1) = v26;
        v23 -= 80;
        v21 -= 80;
      }
      while ((char *)v21 != v22);
      v27 = *(int64x2_t *)a1;
    }
    v11 = v17 + 80;
    *a1 = v23;
    a1[1] = v17 + 80;
    v30 = v27;
    v28 = a1[2];
    a1[2] = &v16[80 * v15];
    v31 = v28;
    v29 = v27.i64[0];
    result = std::__split_buffer<MaterialMap>::~__split_buffer((uint64_t)&v29);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[4];
    *(_OWORD *)(v7 + 48) = a2[3];
    *(_OWORD *)(v7 + 64) = v10;
    v11 = (char *)(v7 + 80);
  }
  a1[1] = v11;
  return result;
}

void *USDKitConverter::textureFileWithMaterialProperty(USDKitConverter *this, SCNMaterialProperty *a2)
{
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _anonymous_namespace_ *v10;
  objc_object *v11;
  _anonymous_namespace_ *File;
  _anonymous_namespace_ *v13;
  objc_object *v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  NSString *v17;
  NSString *v18;
  uint64_t updated;
  __CFString *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t **v29;
  _QWORD *v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  const __CFData *v35;
  CGImageSource *v36;
  uint64_t v37;
  const void *Data;
  CGImageRef v39;
  void *v41;
  uint64_t *v42;
  _QWORD *v43;
  _QWORD v45[5];
  _QWORD v46[5];
  _QWORD v47[2];
  void *(*v48)(uint64_t, uint64_t, uint64_t);
  void *v49;
  SCNMaterialProperty *v50;
  USDKitConverter *v51;
  unint64_t v52;
  id v53;
  id v54;
  BOOL v55[8];

  v4 = -[SCNMaterialProperty contents](a2, "contents");
  v5 = (_QWORD *)*((_QWORD *)this + 22);
  if (v5)
  {
    v6 = (_QWORD *)((char *)this + 176);
    do
    {
      v7 = v5[4];
      v8 = v7 >= (unint64_t)v4;
      if (v7 >= (unint64_t)v4)
        v9 = v5;
      else
        v9 = v5 + 1;
      if (v8)
        v6 = v5;
      v5 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (_QWORD *)((char *)this + 176) && (unint64_t)v4 >= v6[4])
    {
      v54 = -[SCNMaterialProperty contents](a2, "contents");
      *(_QWORD *)v55 = &v54;
      return (void *)std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)v55)[5];
    }
  }
  v54 = 0;
  -[SCNMaterialProperty contents](a2, "contents");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (-[SCNMaterialProperty contents](a2, "contents"), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v10 = -[SCNMaterialProperty __runtimeResolvedPath](a2, "__runtimeResolvedPath");
    if (File
      || (v13 = -[SCNMaterialProperty contents](a2, "contents"),
    {
      v15 = objc_msgSend((id)-[_anonymous_namespace_ pathExtension](File, "pathExtension"), "lowercaseString");
      v16 = (_anonymous_namespace_ *)objc_msgSend((id)-[_anonymous_namespace_ lastPathComponent](File, "lastPathComponent"), "stringByDeletingPathExtension");
      v55[0] = 0;
      updated = USDKitConverter::updateTexturePaths((uint64_t **)this, v18, (NSString *)File, v55);
      if ((int)updated < 1)
        v20 = CFSTR("textures");
      else
        v20 = (__CFString *)objc_msgSend(CFSTR("textures"), "stringByAppendingPathComponent:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", updated), "stringValue"));
      v21 = (void *)-[__CFString stringByAppendingPathComponent:](v20, "stringByAppendingPathComponent:", v18);
      if (v55[0])
      {
        v24 = objc_msgSend(*((id *)this + 2), "stringByAppendingPathComponent:", v21);
        v25 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        objc_msgSend(v25, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc_msgSend(*((id *)this + 2), "stringByAppendingPathComponent:", v20), 1, 0, &v54);
        objc_msgSend(v25, "copyItemAtPath:toPath:error:", File, v24, &v54);
      }
      return v21;
    }
  }
  else
  {
    -[SCNMaterialProperty contents](a2, "contents");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v21 = (void *)objc_msgSend(CFSTR("textures"), "stringByAppendingPathComponent:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("texgen_%lu.png"), *((_QWORD *)this + 23)));
      v22 = objc_msgSend(*((id *)this + 2), "stringByAppendingPathComponent:", v21);
      v53 = -[SCNMaterialProperty contents](a2, "contents");
      *(_QWORD *)v55 = &v53;
      std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 21, (unint64_t *)&v53, (uint64_t)&std::piecewise_construct, (uint64_t **)v55)[5] = (uint64_t)v21;
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", objc_msgSend(*((id *)this + 2), "stringByAppendingPathComponent:", CFSTR("textures")), 1, 0, &v54);
      v23 = -[SCNMaterialProperty contents](a2, "contents");
      objc_msgSend(v23, "writeToURL:", objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v22));
      return v21;
    }
  }
  v26 = -[SCNMaterialProperty getC3DImageRef](a2, "getC3DImageRef");
  v53 = v26;
  if (!v26)
    return 0;
  v27 = (unint64_t)v26;
  v28 = (_QWORD *)*((_QWORD *)this + 25);
  if (v28)
  {
    v29 = (uint64_t **)((char *)this + 192);
    v30 = (_QWORD *)((char *)this + 200);
    do
    {
      v31 = v28[4];
      v32 = v31 >= v27;
      if (v31 >= v27)
        v33 = v28;
      else
        v33 = v28 + 1;
      if (v32)
        v30 = v28;
      v28 = (_QWORD *)*v33;
    }
    while (*v33);
    if (v30 != (_QWORD *)((char *)this + 200) && v27 >= v30[4])
    {
      v41 = (void *)MEMORY[0x1E0CB3940];
      *(_QWORD *)v55 = &v53;
      v42 = std::__tree<std::__value_type<SKNode *,std::vector<UITouch *>>,std::__map_value_compare<SKNode *,std::__value_type<SKNode *,std::vector<UITouch *>>,std::less<SKNode *>,true>,std::allocator<std::__value_type<SKNode *,std::vector<UITouch *>>>>::__emplace_unique_key_args<SKNode *,std::piecewise_construct_t const&,std::tuple<SKNode * const&>,std::tuple<>>(v29, (unint64_t *)&v53, (uint64_t)&std::piecewise_construct, (uint64_t **)v55);
      v43 = v42 + 5;
      if (*((char *)v42 + 63) < 0)
        v43 = (_QWORD *)*v43;
      return (void *)objc_msgSend(v41, "stringWithUTF8String:", v43);
    }
  }
  v34 = MEMORY[0x1E0C809B0];
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 3221225472;
  v48 = ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke;
  v49 = &unk_1EA5A3590;
  v50 = a2;
  v51 = this;
  v52 = v27;
  v35 = (const __CFData *)C3DImageCopyUSDZEmbeddedData(v27, 0);
  if (!v35)
  {
    Data = (const void *)C3DImageGetData(v27);
    if (!Data)
      goto LABEL_41;
    v35 = (const __CFData *)CFRetain(Data);
    if (!v35)
      goto LABEL_41;
  }
  v36 = CGImageSourceCreateWithData(v35, 0);
  v37 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithIdentifier:", CGImageSourceGetType(v36)), "preferredFilenameExtension");
  v46[0] = v34;
  v46[1] = 3221225472;
  v46[2] = ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke_2;
  v46[3] = &__block_descriptor_40_e18_B16__0__NSString_8l;
  v46[4] = v35;
  v21 = ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke((uint64_t)v47, v37, (uint64_t)v46);
  CFRelease(v35);
  CFRelease(v36);
  if (!v21)
  {
LABEL_41:
    v39 = C3DImageCopyCGImage(v27);
    if (v39)
    {
      v45[0] = v34;
      v45[1] = 3221225472;
      v45[2] = ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke_3;
      v45[3] = &__block_descriptor_40_e18_B16__0__NSString_8l;
      v45[4] = v39;
      return v48((uint64_t)v47, (uint64_t)CFSTR("png"), (uint64_t)v45);
    }
    return 0;
  }
  return v21;
}

id USDKitConverter::processTextureShader(uint64_t a1, unsigned __int16 *a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  void *v8;
  id v15;
  id v16;
  uint64_t v17;
  char isKindOfClass;
  void *v19;
  double v20;
  double v21;
  unsigned __int8 ***v22;
  int v23;
  int v24;
  void *v25;
  id v26;
  __objc2_class **p_superclass;
  id v28;
  id v29;
  uint64_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x2_t v34;
  int8x16_t v35;
  int32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  uint64_t v52;
  float32x4_t v53;
  int32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int32x4_t v80;
  float v81;
  float32x4_t v82;
  uint32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  int8x16_t v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x2_t v92;
  unsigned __int16 *v93;
  int v94;
  float32x4_t v96;
  int32x4_t v97;
  int v98;
  id v99;
  double v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  float v105;
  int v106;
  int v107;
  id v109;
  unint64_t v110;
  id v111;
  float32_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  int8x16_t v118;
  float32x2_t v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  id v128;
  double v129;
  id v130;
  id v131;
  id v133;
  id v134;
  unint64_t v135;
  const __CFString *v136;
  id v137;
  unint64_t v138;
  const __CFString *v139;
  id v140;
  uint64_t v141;
  const __CFString *v142;
  const __CFString *v143;
  id v144;
  uint64_t v145;
  const __CFString *v146;
  const __CFString *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  const __CFString *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  float32x4_t v159;
  float v160;
  uint64_t v161;
  float32x4_t v162;
  id v163;
  double v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  int32x2_t v169;
  float v170;
  float v171;
  SCNMatrix4 m;
  SCNMatrix4 v173;
  double v174;
  SCNMatrix4 v175;
  SCNMatrix4 v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[3];

  v180[1] = *MEMORY[0x1E0C80C00];
  v8 = (void *)*((_QWORD *)a2 + 1);
  if (!v8 || !objc_msgSend(v8, "contents"))
    return 0;
  if (!*((_QWORD *)a2 + 7))
  {
    v17 = objc_msgSend(CFSTR("inputs:"), "stringByAppendingString:", *(_QWORD *)a2);
    objc_msgSend(*((id *)a2 + 1), "contents");
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v19 = (void *)objc_msgSend(*((id *)a2 + 1), "contents");
    if ((isKindOfClass & 1) != 0)
    {
      *(_QWORD *)&v176.m11 = 0;
      v174 = 0.0;
      *(_QWORD *)&v175.m11 = 0;
      *(_QWORD *)&v173.m11 = 0;
      objc_msgSend(v19, "getRed:green:blue:alpha:", &v176, &v175, &v173, &v174);
      *(float *)&v21 = *(double *)&v176.m11;
      v22 = (unsigned __int8 ***)(a2 + 12);
      v23 = *((unsigned __int8 *)a2 + 47);
      if ((v23 & 0x80) != 0)
      {
        if (*((_QWORD *)a2 + 4) == 1)
        {
          v98 = *(unsigned __int8 *)*v22;
          if (v98 == 103)
            goto LABEL_67;
          if (v98 == 114)
            goto LABEL_47;
        }
        if (*((_QWORD *)a2 + 4) == 1)
        {
          v24 = *(unsigned __int8 *)*v22;
          goto LABEL_50;
        }
      }
      else if (v23 == 1)
      {
        v24 = *(unsigned __int8 *)v22;
        if (v24 != 103)
        {
          if (v24 != 114)
          {
LABEL_50:
            if (v24 == 98)
            {
              v165 = *(double *)&v173.m11;
              v99 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat_weak, *((_QWORD *)a2 + 2), v174, v21);
              *(float *)&v100 = MaterialMap::getFloatScale((MaterialMap *)a2);
              v101 = v165;
              goto LABEL_68;
            }
            goto LABEL_52;
          }
LABEL_47:
          v170 = *(double *)&v176.m11;
          v99 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat_weak, *((_QWORD *)a2 + 2), v174);
          *(float *)&v100 = MaterialMap::getFloatScale((MaterialMap *)a2);
          v101 = v170;
LABEL_68:
          *(float *)&v100 = *(float *)&v100 * v101;
          goto LABEL_69;
        }
LABEL_67:
        v167 = *(double *)&v175.m11;
        *(float *)&v20 = *(double *)&v173.m11;
        v99 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat_weak, *((_QWORD *)a2 + 2), v174, v21, v20);
        *(float *)&v100 = MaterialMap::getFloatScale((MaterialMap *)a2);
        v101 = v167;
        goto LABEL_68;
      }
LABEL_52:
      if ((v23 & 0x80) != 0)
      {
        if (*((_QWORD *)a2 + 4) != 1)
        {
LABEL_59:
          v166 = *(double *)&v175.m11;
          v171 = *(double *)&v176.m11;
          v104 = *((_QWORD *)a2 + 2);
LABEL_71:
          v109 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat3_weak, v104, v174);
          v110 = __PAIR64__(LODWORD(v166), LODWORD(v171));
LABEL_72:
          objc_msgSend(v109, "setFloat3Value:", *(double *)&v110);
          return 0;
        }
        v22 = (unsigned __int8 ***)*v22;
      }
      else if (v23 != 1)
      {
        goto LABEL_59;
      }
      v104 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)v22 != 97)
      {
        v166 = *(double *)&v175.m11;
        v171 = *(double *)&v176.m11;
        goto LABEL_71;
      }
      v105 = v174;
      v99 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat_weak, v104);
      *(float *)&v100 = MaterialMap::getFloatScale((MaterialMap *)a2) * v105;
LABEL_69:
      objc_msgSend(v99, "setFloatValue:", v100);
      return 0;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      return 0;
    objc_msgSend((id)objc_msgSend(*((id *)a2 + 1), "contents"), "floatValue");
    v169 = v92;
    v93 = a2 + 12;
    v94 = *((char *)a2 + 47);
    if (v94 < 0)
    {
      if (*((_QWORD *)a2 + 4) != 3)
      {
LABEL_66:
        v99 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat_weak, *((_QWORD *)a2 + 2));
        *(float *)&v100 = *(float *)v169.i32 * MaterialMap::getFloatScale((MaterialMap *)a2);
        goto LABEL_69;
      }
      v93 = *(unsigned __int16 **)v93;
    }
    else if (v94 != 3)
    {
      goto LABEL_66;
    }
    v106 = *v93;
    v107 = *((unsigned __int8 *)v93 + 2);
    if (v106 == 26482 && v107 == 98)
    {
      v109 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, v17, USKDataTypeFloat3_weak, *((_QWORD *)a2 + 2));
      v110 = vdupq_lane_s32(v169, 0).u64[0];
      goto LABEL_72;
    }
    goto LABEL_66;
  }
  v168 = a1;
  v163 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(a4, "stringByAppendingPathComponent:", objc_msgSend(*((id *)a2 + 6), "stringByAppendingString:", CFSTR("_texCoordReader"))));
  v15 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *(_QWORD *)(a1 + 56));
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v15, CFSTR("info:id"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("UsdPrimvarReader_float2")));
  +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v15, CFSTR("outputs:result"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak);
  v16 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v15, CFSTR("inputs:varname"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
  if (objc_msgSend(*(id *)a2, "isEqualToString:", *a3))
  {
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a6, CFSTR("inputs:frame:stPrimvarName"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", *((_QWORD *)a2 + 6)));
    v180[0] = objc_msgSend(a7, "pathByAppendingPropertyComponent:", CFSTR("inputs:frame:stPrimvarName"));
    objc_msgSend(v16, "setConnectionWithTargetPaths:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v180, 1));
  }
  else if (!a3[7] || (objc_msgSend((id)a3[6], "isEqualToString:", *((_QWORD *)a2 + 6)) & 1) == 0)
  {
    objc_msgSend(v16, "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", *((_QWORD *)a2 + 6)));
  }
  memset(&v173, 0, sizeof(v173));
  v25 = (void *)*((_QWORD *)a2 + 1);
  if (v25)
    objc_msgSend(v25, "contentsTransform");
  m = v173;
  if (SCNMatrix4IsIdentity(&m))
  {
    v26 = v163;
    p_superclass = (__objc2_class **)(SCNSpriteKitSource + 8);
  }
  else
  {
    v26 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(a4, "stringByAppendingPathComponent:", objc_msgSend(*((id *)a2 + 8), "stringByAppendingString:", CFSTR("_transform2D"))));
    v28 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *(_QWORD *)(a1 + 56), v26, USKNodeTypeShader_weak);
    objc_msgSend(v28, "setDictionaryMetadataWithKey:dictionaryKey:value:", CFSTR("sdrMetadata"), CFSTR("role"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("math"))));
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("info:id"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("UsdTransform2d")));
    v29 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("inputs:in"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak);
    v179 = objc_msgSend(v163, "pathByAppendingPropertyComponent:", CFSTR("outputs:result"));
    objc_msgSend(v29, "setConnectionWithTargetPaths:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v179, 1));
    v30 = 0;
    v31 = *(float32x4_t *)&v173.m11;
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    *(float32x2_t *)v32.i8 = vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    v33 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v173.m21, *(float32x4_t *)&v173.m21);
    *(float32x2_t *)v33.i8 = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
    v34 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8)));
    v35 = (int8x16_t)vmulq_f32(*(float32x4_t *)&v173.m31, *(float32x4_t *)&v173.m31);
    v36 = (int32x2_t)vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
    *(float *)v36.i32 = sqrtf(vaddv_f32((float32x2_t)v36));
    v37 = (float32x4_t)vdupq_lane_s32(v34, 0);
    v38 = (float32x4_t)vdupq_lane_s32(v34, 1);
    *(int32x2_t *)v39.f32 = v34;
    v39.i64[1] = __PAIR64__(1.0, v36.u32[0]);
    v40 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
    v41 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
    __asm { FMOV            V6.4S, #1.0 }
    v46 = vdivq_f32(_Q6, v39);
    v47 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
    v48 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
    v49 = vdivq_f32(*(float32x4_t *)&v173.m21, v38);
    v50 = vdivq_f32(*(float32x4_t *)&v173.m31, (float32x4_t)vdupq_lane_s32(v36, 0));
    v51 = vzip1q_s32((int32x4_t)v49, (int32x4_t)v48);
    v175 = v173;
    do
    {
      *(float32x4_t *)((char *)&v176.m11 + v30) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)((char *)&v175.m11 + v30))), v41, *(float32x2_t *)((char *)&v175.m11 + v30), 1), v47, *(float32x4_t *)((char *)&v175.m11 + v30), 2), (float32x4_t)xmmword_1DD007890, *(float32x4_t *)((char *)&v175.m11 + v30), 3);
      v30 += 16;
    }
    while (v30 != 64);
    v52 = 0;
    v57.i64[0] = 0;
    v57.i32[2] = 0;
    v53 = vdivq_f32(v31, v37);
    v54 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v50);
    v55.i64[0] = 0;
    v55.i64[1] = v46.u32[2];
    v56.i32[0] = 0;
    v56.i64[1] = 0;
    v56.i32[1] = v46.i32[1];
    v57.i32[3] = v46.i32[3];
    v175 = v176;
    do
    {
      *(float32x4_t *)((char *)&v176.m11 + v52) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v46.u32[0], COERCE_FLOAT(*(_OWORD *)((char *)&v175.m11 + v52))), v56, *(float32x2_t *)((char *)&v175.m11 + v52), 1), v55, *(float32x4_t *)((char *)&v175.m11 + v52), 2), v57, *(float32x4_t *)((char *)&v175.m11 + v52), 3);
      v52 += 16;
    }
    while (v52 != 64);
    v58 = 0;
    v59 = (float32x4_t)vzip1q_s32(v54, v51);
    v60 = vzip2q_s32((int32x4_t)v49, (int32x4_t)v48);
    v61 = vzip2q_s32((int32x4_t)v53, (int32x4_t)v50);
    v62 = (float32x4_t)vzip1q_s32(v61, v60);
    v63 = (float32x4_t)vzip2q_s32(v54, v51);
    v64 = (float32x4_t)vzip2q_s32(v61, v60);
    v175 = v176;
    p_superclass = SCNSpriteKitSource.superclass;
    do
    {
      *(float32x4_t *)((char *)&v176.m11 + v58) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v59, COERCE_FLOAT(*(_OWORD *)((char *)&v175.m11 + v58))), v63, *(float32x2_t *)((char *)&v175.m11 + v58), 1), v62, *(float32x4_t *)((char *)&v175.m11 + v58), 2), v64, *(float32x4_t *)((char *)&v175.m11 + v58), 3);
      v58 += 16;
    }
    while (v58 != 64);
    v65 = 0;
    v175 = v176;
    do
    {
      *(float32x4_t *)((char *)&v176.m11 + v65) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)((char *)&v175.m11 + v65))), v41, *(float32x2_t *)((char *)&v175.m11 + v65), 1), v47, *(float32x4_t *)((char *)&v175.m11 + v65), 2), (float32x4_t)xmmword_1DD0078A0, *(float32x4_t *)((char *)&v175.m11 + v65), 3);
      v65 += 16;
    }
    while (v65 != 64);
    v68 = vmulq_f32(v37, v53);
    v66 = vmulq_f32(v38, v49);
    v67 = vmulq_n_f32(v50, *(float *)v36.i32);
    v69 = vnegq_f32(v68);
    v68.i32[1] = v69.i32[1];
    v69.f32[0] = -v66.f32[0];
    v70 = v66;
    v70.f32[0] = -v66.f32[0];
    v71 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL), vnegq_f32(v70)), v67, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), (int8x16_t)v70, 0xCuLL));
    v72 = vmulq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), v71, 0xCuLL));
    _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0] < 0.0;
    v73 = 1.0;
    if (_NF)
      v73 = -1.0;
    v74 = vmulq_f32(v68, v68);
    v75 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1)));
    v75.f32[0] = sqrtf(v75.f32[0]);
    v76 = vmulq_f32(v70, v70);
    v77 = vmulq_f32(v67, v67);
    v75.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]);
    v75.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), vaddq_f32(v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1))).f32[0]);
    v78 = vmulq_n_f32(v75, v73);
    v79 = (int8x16_t)vcltzq_f32(v78);
    v80 = (int32x4_t)vmvnq_s8(vorrq_s8(v79, (int8x16_t)vcgezq_f32(v78)));
    v80.i32[3] = v80.i32[2];
    v80.i32[0] = vmaxvq_u32((uint32x4_t)v80);
    v79.i32[0] = -1;
    v81 = 0.0;
    v82 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v80, (int32x4_t)v79), 0), (int8x16_t)v78, (int8x16_t)0);
    v83 = (uint32x4_t)vceqzq_f32(v82);
    v83.i32[3] = v83.i32[2];
    if ((vmaxvq_u32(v83) & 0x80000000) != 0)
    {
      v82.i64[0] = 0;
    }
    else
    {
      v69.i32[1] = v66.i32[1];
      v69.i32[2] = v66.i32[2];
      v84 = vdivq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 0));
      v85 = vdivq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1));
      v86 = v85.f32[1];
      v87 = (int8x16_t)vdivq_f32(v67, (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2));
      v88 = *(float *)&v87.i32[2] + (float)(v84.f32[0] + v85.f32[1]);
      if (v88 <= 0.0)
      {
        if (v84.f32[0] <= v85.f32[1] || v84.f32[0] <= *(float *)&v87.i32[2])
        {
          if (v85.f32[1] <= *(float *)&v87.i32[2])
          {
            v112 = (float)(*(float *)&v87.i32[2] + 1.0) - v84.f32[0];
            v113 = (float32x4_t)vzip2q_s32((int32x4_t)v84, vzip1q_s32((int32x4_t)v87, (int32x4_t)v84));
            v114 = (int8x16_t)vrev64q_s32((int32x4_t)v85);
            v115 = (float32x4_t)vextq_s8(v114, v114, 8uLL);
            v115.i32[0] = v87.i32[0];
            v90.i64[0] = vaddq_f32(v113, v115).u64[0];
            v113.f32[2] = v112;
            v85 = vsubq_f32(v113, v115);
            v90.i64[1] = v85.i64[1];
            v91.i32[0] = v85.i32[2];
          }
          else
          {
            v96 = v85;
            v96.i32[0] = v84.i32[1];
            v85.i32[1] = v87.i32[2];
            v85.i32[2] = v87.i32[1];
            v97 = (int32x4_t)vaddq_f32(v96, v85);
            v96.f32[1] = (float)(v86 + 1.0) - v84.f32[0];
            v96.i32[3] = v87.i32[0];
            v85.i32[3] = v84.i32[2];
            v85 = vsubq_f32(v96, v85);
            v90 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v97), (int32x4_t)v85);
            v91.i32[0] = v85.i32[1];
          }
        }
        else
        {
          v102 = v84;
          v102.f32[0] = (float)(v84.f32[0] + 1.0) - v85.f32[1];
          v102.i32[3] = v85.i32[2];
          v103 = (float32x4_t)vextq_s8(v87, v87, 8uLL);
          v91 = vsubq_f32(v102, v103);
          v103.i32[1] = v85.i32[0];
          v90 = vaddq_f32(v84, v103);
          v90.i32[0] = v91.i32[0];
          v90.i32[3] = v91.i32[3];
        }
      }
      else
      {
        v91 = (float32x4_t)vzip2q_s32((int32x4_t)v85, vuzp1q_s32((int32x4_t)v85, (int32x4_t)v87));
        v91.i32[2] = v84.i32[1];
        v89 = (float32x4_t)vtrn2q_s32((int32x4_t)v87, vzip2q_s32((int32x4_t)v87, (int32x4_t)v84));
        v89.i32[2] = v85.i32[0];
        v90 = vsubq_f32(v91, v89);
        v89.i32[3] = 1.0;
        v91.f32[3] = v88;
        v85 = vaddq_f32(v91, v89);
        v90.i32[3] = v85.i32[3];
        v91.i32[0] = v85.i32[3];
      }
      v85.i32[0] = 0;
      v116 = vmulq_n_f32(v90, 0.5 / sqrtf(v91.f32[0]));
      v117 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v116), (int8x16_t)vcgezq_f32(v116)));
      v117.i32[0] = vmaxvq_u32((uint32x4_t)v117);
      v48 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v85, v117), 0), (int8x16_t)v48, (int8x16_t)v116);
    }
    v162 = *(float32x4_t *)&v176.m41;
    v164 = *(double *)v82.i64;
    v118 = (int8x16_t)vmulq_f32(v48, v48);
    v119 = vadd_f32(*(float32x2_t *)v118.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
    v119.f32[0] = vaddv_f32(v119);
    if (v119.f32[0] != 0.0)
    {
      v120 = v48.f32[2];
      v121 = v48.f32[1];
      v122 = v48.f32[3];
      v123 = vmlas_n_f32(vmuls_lane_f32(-v48.f32[1], v48, 3), v48.f32[2], v48.f32[0]) / v119.f32[0];
      if (v123 <= 0.499)
      {
        if (v123 >= -0.499)
        {
          v124 = *(float *)&v118.i32[1];
          v125 = v118.i64[1];
          v159 = v48;
          v160 = *(float *)v118.i32;
          *(float *)&v126 = atan2f((float)((float)(v48.f32[2] * v48.f32[3]) + (float)(v48.f32[0] * v48.f32[1]))+ (float)((float)(v48.f32[2] * v48.f32[3]) + (float)(v48.f32[0] * v48.f32[1])), *(float *)&v118.i32[3]+ (float)((float)(*(float *)v118.i32 - *(float *)&v118.i32[1]) - *(float *)&v118.i32[2]));
          v161 = v126;
          atan2f((float)((float)(v159.f32[0] * v122) + (float)(v121 * v120))+ (float)((float)(v159.f32[0] * v122) + (float)(v121 * v120)), *((float *)&v125 + 1) + (float)(*(float *)&v125 + (float)((float)-v160 - v124)));
          asinf(v123 * -2.0);
          v119.i32[1] = HIDWORD(v161);
          v81 = *(float *)&v161;
        }
        else
        {
          atan2f(v48.f32[0], v48.f32[3]);
          v81 = 0.0;
        }
        *(double *)v82.i64 = v164;
      }
      else
      {
        atan2f(v48.f32[0], v48.f32[3]);
        *(double *)v82.i64 = v164;
        v81 = 0.0;
      }
    }
    v127 = v81;
    if (v81 != 0.0)
    {
      v128 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("inputs:rotation"), USKDataTypeFloat_weak, USKRoleTypeNone_weak);
      v129 = v127 / 3.14159265 * 180.0;
      *(float *)&v129 = v129;
      objc_msgSend(v128, "setFloatValue:", v129);
      *(double *)v82.i64 = v164;
    }
    if (v82.f32[0] != 0.0 || v82.f32[1] != 0.0)
      objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("inputs:scale"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak, *(_OWORD *)&v159), "setFloat2Value:", v164);
    if (v162.f32[0] != 0.0 || (v119.i32[0] = v162.i32[1], v162.f32[1] != 0.0))
      objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("inputs:translation"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak, *(_OWORD *)&v159), "setFloat2Value:", COERCE_DOUBLE(__PAIR64__(vnegq_f32(v162).u32[1], v162.u32[0])));
    +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v28, CFSTR("outputs:result"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak, *(double *)&v119, *(_OWORD *)&v159);
  }
  v111 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", objc_msgSend(a4, "stringByAppendingPathComponent:", objc_msgSend(*((id *)a2 + 8), "stringByAppendingString:", CFSTR("_texture"))));
  v130 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *(_QWORD *)(v168 + 56), v111, USKNodeTypeShader_weak);
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("info:id"), USKDataTypeToken_weak, USKRoleTypeNone_weak), "setTokenValue:", objc_msgSend(p_superclass + 74, "tokenWithString:", CFSTR("UsdUVTexture")));
  if (objc_msgSend(*(id *)a2, "isEqualToString:", *a3))
  {
    objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:scale"), USKDataTypeFloat4_weak, USKRoleTypeNone_weak), "setFloat4Value:", 2.00000048);
    v131 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:bias"), USKDataTypeFloat4_weak, USKRoleTypeNone_weak);
    __asm { FMOV            V0.4S, #-1.0 }
    objc_msgSend(v131, "setFloat4Value:", *(double *)&_Q0);
  }
  objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:file"), USKDataTypeResourcePath_weak, USKRoleTypeNone_weak), "setResourcePath:", *((_QWORD *)a2 + 7));
  if (v26)
  {
    v133 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:st"), USKDataTypeFloat2_weak, USKRoleTypeNone_weak);
    v178 = objc_msgSend(v26, "pathByAppendingPropertyComponent:", CFSTR("outputs:result"));
    objc_msgSend(v133, "setConnectionWithTargetPaths:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v178, 1));
  }
  v134 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:wrapS"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
  v135 = objc_msgSend(*((id *)a2 + 1), "wrapS") - 1;
  if (v135 > 3)
    v136 = CFSTR("repeat");
  else
    v136 = off_1EA5A3610[v135];
  objc_msgSend(v134, "setTokenValue:", objc_msgSend(p_superclass + 74, "tokenWithString:", v136));
  v137 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:wrapT"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
  v138 = objc_msgSend(*((id *)a2 + 1), "wrapT") - 1;
  if (v138 > 3)
    v139 = CFSTR("repeat");
  else
    v139 = off_1EA5A3610[v138];
  objc_msgSend(v137, "setTokenValue:", objc_msgSend(p_superclass + 74, "tokenWithString:", v139));
  if (objc_msgSend(*((id *)a2 + 1), "minificationFilter"))
  {
    v140 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:minFilter"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
    v141 = objc_msgSend(*((id *)a2 + 1), "minificationFilter");
    if (v141 == 1)
      v142 = CFSTR("nearest");
    else
      v142 = &stru_1EA5A6480;
    if (v141 == 2)
      v143 = CFSTR("linear");
    else
      v143 = v142;
    objc_msgSend(v140, "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", v143));
  }
  if (objc_msgSend(*((id *)a2 + 1), "magnificationFilter"))
  {
    v144 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, CFSTR("inputs:magFilter"), USKDataTypeToken_weak, USKRoleTypeNone_weak);
    v145 = objc_msgSend(*((id *)a2 + 1), "magnificationFilter");
    if (v145 == 1)
      v146 = CFSTR("nearest");
    else
      v146 = &stru_1EA5A6480;
    if (v145 == 2)
      v147 = CFSTR("linear");
    else
      v147 = v146;
    objc_msgSend(v144, "setTokenValue:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", v147));
  }
  if (*((char *)a2 + 47) >= 0)
    v148 = a2 + 12;
  else
    v148 = (_QWORD *)*((_QWORD *)a2 + 3);
  v149 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v148);
  v150 = *((unsigned __int8 *)a2 + 47);
  if ((v150 & 0x80u) != 0)
    v150 = *((_QWORD *)a2 + 4);
  if (v150 == 1)
    v151 = &USKDataTypeFloat_weak;
  else
    v151 = &USKDataTypeFloat3_weak;
  v152 = *v151;
  if (objc_msgSend(*((id *)a2 + 1), "textureComponents") == 8)
  {
    v153 = USKDataTypeFloat_weak;
    v154 = CFSTR("r");
  }
  else if (objc_msgSend(*((id *)a2 + 1), "textureComponents") == 4)
  {
    v153 = USKDataTypeFloat_weak;
    v154 = CFSTR("g");
  }
  else if (objc_msgSend(*((id *)a2 + 1), "textureComponents") == 2)
  {
    v153 = USKDataTypeFloat_weak;
    v154 = CFSTR("b");
  }
  else
  {
    v155 = objc_msgSend(*((id *)a2 + 1), "textureComponents");
    if (v155 == 1)
      v154 = CFSTR("a");
    else
      v154 = (const __CFString *)v149;
    if (v155 == 1)
      v153 = USKDataTypeFloat_weak;
    else
      v153 = v152;
  }
  v156 = objc_msgSend(CFSTR("outputs:"), "stringByAppendingString:", v154);
  +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v130, v156, v153, USKRoleTypeNone_weak);
  v157 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a5, objc_msgSend(CFSTR("inputs:"), "stringByAppendingString:", *(_QWORD *)a2), v153, *((_QWORD *)a2 + 2));
  v177 = objc_msgSend(v111, "pathByAppendingPropertyComponent:", v156);
  objc_msgSend(v157, "setConnectionWithTargetPaths:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v177, 1));
  return v111;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<MaterialMap>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a2);
}

uint64_t std::__split_buffer<MaterialMap>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<MaterialMap>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<MaterialMap>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 80;
      *(_QWORD *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *MaterialMap::MaterialMap(std::string *a1, std::string::size_type a2, void *a3, std::string::size_type *a4, std::string *__str, std::string::size_type a6)
{
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("st");
  a1->__r_.__value_.__r.__words[0] = a2;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  a1->__r_.__value_.__r.__words[2] = *a4;
  std::string::operator=(a1 + 1, __str);
  if (objc_msgSend(a3, "mappingChannel") >= 1)
    a1[2].__r_.__value_.__r.__words[0] = objc_msgSend(CFSTR("st"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(a3, "mappingChannel")), "stringValue"));
  a1[3].__r_.__value_.__r.__words[0] = a6;
  return a1;
}

void sub_1DCEEA260(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t USDKitConverter::updateTexturePaths(uint64_t **this, NSString *a2, NSString *a3, BOOL *a4)
{
  uint64_t **v7;
  std::__split_buffer<std::string>::pointer *v8;
  std::string *v9;
  std::string *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  void *size;
  void **v18;
  __int128 v19;
  std::vector<std::string> *v20;
  std::__split_buffer<std::string>::pointer v21;
  std::__split_buffer<std::string>::pointer v23;
  __int128 *v24;
  uint64_t v25;
  void *__p[2];
  int64_t v27;
  void *v28[2];
  char v29;
  void **v30;
  std::__split_buffer<std::string>::pointer *v31;

  *a4 = 1;
  std::string::basic_string[abi:nn180100]<0>(v28, (char *)-[NSString UTF8String](a2, "UTF8String"));
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)-[NSString UTF8String](a3, "UTF8String"));
  v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)(this + 27), (const void **)v28);
  v8 = (std::__split_buffer<std::string>::pointer *)v7;
  if (this + 28 == v7)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v24 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, (__int128 *)__p);
    v30 = v28;
    v20 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 27, (const void **)v28, (uint64_t)&std::piecewise_construct, (__int128 **)&v30)+ 7);
    if (v20 != (std::vector<std::string> *)&v23)
      std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(v20, v23, v24, 0xAAAAAAAAAAAAAAABLL * (((char *)v24 - (char *)v23) >> 3));
    v31 = &v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
    v11 = 0;
  }
  else
  {
    v10 = (std::string *)v7[7];
    v9 = (std::string *)v7[8];
    if (v9 != v10)
    {
      v11 = 0;
      if (v27 >= 0)
        v12 = (void *)HIBYTE(v27);
      else
        v12 = __p[1];
      if (v27 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((unint64_t)(v9 - v10) <= 1)
        v14 = 1;
      else
        v14 = v9 - v10;
      do
      {
        v15 = &v10[v11];
        v16 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
        if ((v16 & 0x80u) == 0)
          size = (void *)HIBYTE(v15->__r_.__value_.__r.__words[2]);
        else
          size = (void *)v15->__r_.__value_.__l.__size_;
        if (size == v12)
        {
          if ((v16 & 0x80) != 0)
          {
            if (!memcmp(v15->__r_.__value_.__l.__data_, v13, v15->__r_.__value_.__l.__size_))
            {
LABEL_29:
              *a4 = 0;
              goto LABEL_34;
            }
          }
          else
          {
            v18 = v13;
            if (!*((_BYTE *)&v15->__r_.__value_.__s + 23))
              goto LABEL_29;
            while (v15->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v18)
            {
              v15 = (std::string *)((char *)v15 + 1);
              v18 = (void **)((char *)v18 + 1);
              if (!--v16)
                goto LABEL_29;
            }
          }
        }
        ++v11;
      }
      while (v11 != v14);
    }
    if (v9 >= v8[9])
    {
      v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v8 + 7, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v27) < 0)
      {
        std::string::__init_copy_ctor_external(v9, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        v9->__r_.__value_.__r.__words[2] = v27;
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v19;
      }
      v21 = v9 + 1;
      v8[8] = v9 + 1;
    }
    v8[8] = v21;
    v11 = -1431655765 * ((unint64_t)((char *)v21 - (char *)v8[7]) >> 3) - 1;
  }
LABEL_34:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  return v11;
}

void sub_1DCEEA4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v26 + 64) = v27;
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeToFile:atomically:", a2, 1);
}

BOOL ___ZN15USDKitConverter31textureFileWithMaterialPropertyEP19SCNMaterialProperty_block_invoke_3(uint64_t a1, const __CFString *a2)
{
  const __CFURL *v3;
  CGImageDestination *v4;
  CGImageDestination *v5;

  v3 = CFURLCreateWithFileSystemPath(0, a2, kCFURLPOSIXPathStyle, 0);
  v4 = CGImageDestinationCreateWithURL(v3, (CFStringRef)objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier"), 1uLL, 0);
  CFRelease(v3);
  if (v4)
  {
    CGImageDestinationAddImage(v4, *(CGImageRef *)(a1 + 32), 0);
    CGImageDestinationFinalize(v4);
    CFRelease(*(CFTypeRef *)(a1 + 32));
    v5 = v4;
  }
  else
  {
    v5 = *(CGImageDestination **)(a1 + 32);
  }
  CFRelease(v5);
  return v4 != 0;
}

_anonymous_namespace_ *`anonymous namespace'::findFile(_anonymous_namespace_ *this, objc_object *a2)
{
  _anonymous_namespace_ *v2;
  void *v3;

  v2 = this;
  if (this)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      goto LABEL_4;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (!objc_msgSend((id)-[_anonymous_namespace_ query](v2, "query"), "length"))
      {
        v2 = (_anonymous_namespace_ *)-[_anonymous_namespace_ path](v2, "path");
        v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        if (v2)
        {
LABEL_4:
          if ((objc_msgSend(v3, "fileExistsAtPath:", v2) & 1) != 0)
            return v2;
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    }
    return 0;
  }
  return v2;
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__push_back_slow_path<std::string const&>(std::__split_buffer<std::string>::pointer *a1, __int128 *a2)
{
  std::__split_buffer<std::string>::pointer v2;
  unint64_t v3;
  unint64_t v4;
  std::allocator<std::string> *v7;
  std::__split_buffer<std::string>::pointer v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v13;
  std::__split_buffer<std::string>::pointer end;
  unint64_t v15;
  std::__split_buffer<std::string>::pointer v16;
  __int128 v17;
  int64x2_t v18;
  std::__split_buffer<std::string>::pointer v19;
  std::string *v20;
  std::__split_buffer<std::string> v22;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (std::allocator<std::string> *)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v22.__end_cap_.__value_ = v7;
  if (v10)
    v11 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v10);
  else
    v11 = 0;
  begin = v11 + v3;
  v22.__first_ = v11;
  v22.__begin_ = begin;
  v22.__end_ = begin;
  v22.__end_cap_.__value_ = &v11[v10];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(begin, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    begin = v22.__begin_;
    end = v22.__end_;
  }
  else
  {
    v13 = *a2;
    begin->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v13;
    end = v11 + v3;
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((std::__split_buffer<std::string>::pointer)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      begin[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 - 8);
      *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v17;
      --begin;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((std::__split_buffer<std::string>::pointer)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = end + 1;
  *a1 = begin;
  a1[1] = end + 1;
  *(int64x2_t *)&v22.__begin_ = v18;
  v20 = a1[2];
  a1[2] = v22.__end_cap_.__value_;
  v22.__end_cap_.__value_ = v20;
  v22.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v22);
  return v19;
}

void sub_1DCEEA958(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DCEEAA90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  v8 = (_DWORD)this + 16;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<CFRange>>::__vallocate[abi:nn180100](this, v11);
    v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v8, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1DCEEAC4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DCEEAC54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

float MaterialMap::getFloatScale(MaterialMap *this)
{
  float result;

  if (!*((_QWORD *)this + 9))
    return 1.0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 1.0;
  objc_msgSend(*((id *)this + 9), "floatValue");
  return result;
}

void std::vector<MaterialMap>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<MaterialMap>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<MaterialMap>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

NSString *USDKitConverter::makeUniqueBlendShapeName(USDKitConverter *this, NSString *a2, NSString *a3)
{
  NSString *v3;
  unint64_t v6;
  void *GeomPath;
  NSString *v8;

  v3 = a3;
  v6 = -[NSString length](a3, "length");
  if (v6 > objc_msgSend((id)USDKitConverter::getGeomPath(this), "length"))
  {
    GeomPath = (void *)USDKitConverter::getGeomPath(this);
    if (objc_msgSend(GeomPath, "isEqualToString:", -[NSString substringToIndex:](v3, "substringToIndex:", objc_msgSend((id)USDKitConverter::getGeomPath(this), "length"))))v3 = -[NSString substringFromIndex:](v3, "substringFromIndex:", objc_msgSend((id)USDKitConverter::getGeomPath(this), "length"));
  }
  v8 = -[NSString stringByAppendingString:](-[NSString stringByAppendingString:](v3, "stringByAppendingString:", CFSTR(":")), "stringByAppendingString:", a2);
  if (-[NSString characterAtIndex:](v8, "characterAtIndex:", 0) == 47)
    v8 = -[NSString substringFromIndex:](v8, "substringFromIndex:", 1);
  return -[NSString stringByReplacingOccurrencesOfString:withString:](v8, "stringByReplacingOccurrencesOfString:withString:", CFSTR("/"), CFSTR(":"));
}

unint64_t USDKitConverter::processAnimation(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t result;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const __CFString *v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  id v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  int v39;
  int v40;
  id v41;
  double v42;
  double v43;
  void *v44;
  const __CFString *v45;
  unint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unsigned int v51;
  unsigned int v52;
  id v53;
  double v54;
  double v55;
  unint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  unsigned int v61;
  unsigned int v62;
  id v63;
  double v64;
  double v65;
  unint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  float v71;
  float v72;
  id v73;
  double v74;
  double v75;
  double v76;
  unint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  unsigned int v82;
  unsigned int v83;
  id v84;
  double v85;
  double v86;
  unint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  int v93;
  id v94;
  double v95;
  double v96;
  unint64_t v97;
  double v98;
  double v99;
  double v100;
  double v101;
  unsigned int v102;
  unsigned int v103;
  id v104;
  double v105;
  double v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  float64x2_t v111;
  unsigned int v112;
  float64x2_t v113;
  float64x2_t v114;
  unsigned int v115;
  float64x2_t v116;
  unsigned int v117;
  float64x2_t v118;
  unsigned int v119;
  float64x2_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  _OWORD v125[8];
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return USDKitConverter::processAnimationGroup(a1, a2, a3);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v7 = (void *)objc_msgSend(a3, "keyTimes");
    result = objc_msgSend(v7, "count");
    if (result)
    {
      objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", objc_msgSend(v7, "count") - 1), "doubleValue");
      v9 = v8;
      result = objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", 0), "doubleValue");
      v11 = v9 - v10;
      if (v9 - v10 >= 0.0001)
      {
        objc_msgSend(a3, "duration");
        v13 = v12;
        v14 = (void *)objc_msgSend((id)objc_msgSend(a3, "keyPath"), "componentsSeparatedByString:", CFSTR("."));
        v15 = objc_msgSend(v14, "count") - 1;
        v16 = (void *)objc_msgSend(v14, "objectAtIndex:", v15);
        if ((unint64_t)objc_msgSend(v14, "count") < 2)
        {
          v17 = 0;
          goto LABEL_19;
        }
        if ((objc_msgSend(v16, "isEqualToString:", CFSTR("x")) & 1) != 0)
        {
          v17 = CFSTR("X");
        }
        else if ((objc_msgSend(v16, "isEqualToString:", CFSTR("y")) & 1) != 0)
        {
          v17 = CFSTR("Y");
        }
        else if ((objc_msgSend(v16, "isEqualToString:", CFSTR("z")) & 1) != 0)
        {
          v17 = CFSTR("Z");
        }
        else
        {
          if (!objc_msgSend(v16, "isEqualToString:", CFSTR("w")))
          {
            v17 = 0;
            if (!v15)
              goto LABEL_19;
            goto LABEL_17;
          }
          v17 = CFSTR("W");
        }
        v15 = objc_msgSend(v14, "count") - 2;
        v16 = (void *)objc_msgSend(v14, "objectAtIndex:", v15);
        if (!v15)
          goto LABEL_19;
LABEL_17:
        if (objc_msgSend(v16, "isEqualToString:", CFSTR("euler")))
          v16 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v14, "objectAtIndex:", v15 - 1), "stringByAppendingString:", CFSTR(".")), "stringByAppendingString:", v16);
LABEL_19:
        v18 = v13 / v11;
        if (objc_msgSend(v16, "isEqualToString:", CFSTR("transform")))
        {
          if (objc_msgSend(v7, "count"))
          {
            v19 = 0;
            do
            {
              objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v19), "doubleValue");
              v21 = v20;
              objc_msgSend(a3, "beginTime");
              v23 = v22;
              v24 = (void *)objc_msgSend(a3, "values");
              v128 = 0u;
              v129 = 0u;
              v126 = 0u;
              v127 = 0u;
              v25 = (void *)objc_msgSend(v24, "objectAtIndexedSubscript:", v19);
              if (v25)
              {
                objc_msgSend(v25, "SCNMatrix4Value");
                v27 = v126;
                v26 = v127;
                v29 = v128;
                v28 = v129;
              }
              else
              {
                v128 = 0u;
                v129 = 0u;
                v28 = 0uLL;
                v29 = 0uLL;
                v26 = 0uLL;
                v27 = 0uLL;
                v126 = 0u;
                v127 = 0u;
              }
              v118 = vcvtq_f64_f32(*(float32x2_t *)v26.f32);
              v120 = vcvtq_f64_f32(*(float32x2_t *)v27.f32);
              v111 = vcvt_hight_f64_f32(v26);
              v114 = vcvt_hight_f64_f32(v27);
              v30 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:transform"), USKDataTypeDouble4x4_weak, USKRoleTypeNone_weak, vcvt_hight_f64_f32(v28), vcvt_hight_f64_f32(v29), vcvtq_f64_f32(*(float32x2_t *)v29.f32), vcvtq_f64_f32(*(float32x2_t *)v28.f32));
              v125[0] = v120;
              v125[1] = v114;
              v125[2] = v118;
              v125[3] = v111;
              v125[4] = v109;
              v125[5] = v108;
              v125[6] = v110;
              v125[7] = v107;
              v31 = (v23 + v21 * v18) / *(double *)(a1 + 504) + 0.0;
              v32 = (double)(int)v31;
              if (vabdd_f64(v31, v32) >= 0.001)
              {
                if (1.0 - (v31 - v32) < 0.001)
                  v31 = v32 + 1.0;
              }
              else
              {
                v31 = (double)(int)v31;
              }
              objc_msgSend(v30, "setDouble4x4Value:atTime:", v125, v31);
              ++v19;
            }
            while (v19 < objc_msgSend(v7, "count"));
          }
          return objc_msgSend(*(id *)(a1 + 88), "addObject:", CFSTR("xformOp:transform"));
        }
        if (objc_msgSend(v16, "isEqualToString:", CFSTR("position")))
        {
          if (!v17)
          {
            if (objc_msgSend(v7, "count"))
            {
              v56 = 0;
              do
              {
                objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v56), "doubleValue");
                v58 = v57;
                objc_msgSend(a3, "beginTime");
                v60 = v59 + v58 * v18;
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v56), "SCNVector3Value");
                v122 = v61;
                v115 = v62;
                v63 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:translate"), USKDataTypeFloat3_weak, USKRoleTypeNone_weak);
                v64 = v60 / *(double *)(a1 + 504) + 0.0;
                v65 = (double)(int)v64;
                if (vabdd_f64(v64, v65) >= 0.001)
                {
                  if (1.0 - (v64 - v65) < 0.001)
                    v64 = v65 + 1.0;
                }
                else
                {
                  v64 = (double)(int)v64;
                }
                objc_msgSend(v63, "setFloat3Value:atTime:", COERCE_DOUBLE(__PAIR64__(v115, v122)), v64);
                ++v56;
              }
              while (v56 < objc_msgSend(v7, "count"));
            }
            v44 = *(void **)(a1 + 88);
            v45 = CFSTR("xformOp:translate");
            return objc_msgSend(v44, "addObject:", v45);
          }
          v33 = objc_msgSend(CFSTR("xformOp:translate"), "stringByAppendingString:", v17);
          if (objc_msgSend(v7, "count"))
          {
            v34 = 0;
            do
            {
              objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v34), "doubleValue");
              v36 = v35;
              objc_msgSend(a3, "beginTime");
              v38 = v37 + v36 * v18;
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v34), "floatValue");
              v40 = v39;
              v41 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, v33, USKDataTypeFloat_weak, USKRoleTypeNone_weak);
              v42 = v38 / *(double *)(a1 + 504) + 0.0;
              v43 = (double)(int)v42;
              if (vabdd_f64(v42, v43) >= 0.001)
              {
                if (1.0 - (v42 - v43) < 0.001)
                  v42 = v43 + 1.0;
              }
              else
              {
                v42 = (double)(int)v42;
              }
              LODWORD(v43) = v40;
              objc_msgSend(v41, "setFloatValue:atTime:", v43, v42);
              ++v34;
            }
            while (v34 < objc_msgSend(v7, "count"));
          }
        }
        else
        {
          if ((objc_msgSend(v16, "isEqualToString:", CFSTR("orientation")) & 1) != 0
            || objc_msgSend(v16, "isEqualToString:", CFSTR("quaternion")))
          {
            if (objc_msgSend(v7, "count"))
            {
              v46 = 0;
              do
              {
                objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v46), "doubleValue");
                v48 = v47;
                objc_msgSend(a3, "beginTime");
                v50 = v49 + v48 * v18;
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v46), "SCNVector4Value");
                v121 = v51;
                v112 = v52;
                v53 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:orient"), USKDataTypeQuatf_weak, USKRoleTypeNone_weak);
                v54 = v50 / *(double *)(a1 + 504) + 0.0;
                v55 = (double)(int)v54;
                if (vabdd_f64(v54, v55) >= 0.001)
                {
                  if (1.0 - (v54 - v55) < 0.001)
                    v54 = v55 + 1.0;
                }
                else
                {
                  v54 = (double)(int)v54;
                }
                objc_msgSend(v53, "setQuatfValue:atTime:", COERCE_DOUBLE(__PAIR64__(v112, v121)), v54);
                ++v46;
              }
              while (v46 < objc_msgSend(v7, "count"));
            }
            v44 = *(void **)(a1 + 88);
            v45 = CFSTR("xformOp:orient");
            return objc_msgSend(v44, "addObject:", v45);
          }
          if ((objc_msgSend(v16, "isEqualToString:", CFSTR("eulerAngles")) & 1) != 0
            || objc_msgSend(v16, "isEqualToString:", CFSTR("rotation.euler")))
          {
            if (!v17)
            {
              if (objc_msgSend(v7, "count"))
              {
                v77 = 0;
                v113 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
                v116 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
                do
                {
                  objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v77), "doubleValue");
                  v79 = v78;
                  objc_msgSend(a3, "beginTime");
                  v81 = v80 + v79 * v18;
                  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v77), "SCNVector3Value");
                  v123 = v82;
                  v119 = v83;
                  v84 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:rotateXYZ"), USKDataTypeFloat3_weak, USKRoleTypeNone_weak);
                  v85 = v81 / *(double *)(a1 + 504) + 0.0;
                  v86 = (double)(int)v85;
                  if (vabdd_f64(v85, v86) >= 0.001)
                  {
                    if (1.0 - (v85 - v86) < 0.001)
                      v85 = v86 + 1.0;
                  }
                  else
                  {
                    v85 = (double)(int)v85;
                  }
                  objc_msgSend(v84, "setFloat3Value:atTime:", COERCE_DOUBLE(vcvt_f32_f64(vmulq_f64(vdivq_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(v119, v123)), v116), v113))), v85);
                  ++v77;
                }
                while (v77 < objc_msgSend(v7, "count"));
              }
              v44 = *(void **)(a1 + 88);
              v45 = CFSTR("xformOp:rotateXYZ");
              return objc_msgSend(v44, "addObject:", v45);
            }
            v33 = objc_msgSend(CFSTR("xformOp:rotate"), "stringByAppendingString:", v17);
            if (objc_msgSend(v7, "count"))
            {
              v66 = 0;
              do
              {
                objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v66), "doubleValue");
                v68 = v67;
                objc_msgSend(a3, "beginTime");
                v70 = v69 + v68 * v18;
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v66), "floatValue");
                v72 = v71;
                v73 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, v33, USKDataTypeFloat_weak, USKRoleTypeNone_weak);
                v74 = v70 / *(double *)(a1 + 504) + 0.0;
                v75 = (double)(int)v74;
                if (vabdd_f64(v74, v75) >= 0.001)
                {
                  if (1.0 - (v74 - v75) < 0.001)
                    v74 = v75 + 1.0;
                }
                else
                {
                  v74 = (double)(int)v74;
                }
                v76 = v72 / 3.14159265 * 180.0;
                *(float *)&v76 = v76;
                objc_msgSend(v73, "setFloatValue:atTime:", v76, v74);
                ++v66;
              }
              while (v66 < objc_msgSend(v7, "count"));
            }
          }
          else
          {
            result = objc_msgSend(v16, "isEqualToString:", CFSTR("scale"));
            if (!(_DWORD)result)
              return result;
            if (!v17)
            {
              if (objc_msgSend(v7, "count"))
              {
                v97 = 0;
                do
                {
                  objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v97), "doubleValue");
                  v99 = v98;
                  objc_msgSend(a3, "beginTime");
                  v101 = v100 + v99 * v18;
                  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v97), "SCNVector3Value");
                  v124 = v102;
                  v117 = v103;
                  v104 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("xformOp:scale"), USKDataTypeFloat3_weak, USKRoleTypeNone_weak);
                  v105 = v101 / *(double *)(a1 + 504) + 0.0;
                  v106 = (double)(int)v105;
                  if (vabdd_f64(v105, v106) >= 0.001)
                  {
                    if (1.0 - (v105 - v106) < 0.001)
                      v105 = v106 + 1.0;
                  }
                  else
                  {
                    v105 = (double)(int)v105;
                  }
                  objc_msgSend(v104, "setFloat3Value:atTime:", COERCE_DOUBLE(__PAIR64__(v117, v124)), v105);
                  ++v97;
                }
                while (v97 < objc_msgSend(v7, "count"));
              }
              v44 = *(void **)(a1 + 88);
              v45 = CFSTR("xformOp:scale");
              return objc_msgSend(v44, "addObject:", v45);
            }
            v33 = objc_msgSend(CFSTR("xformOp:scale"), "stringByAppendingString:", v17);
            if (objc_msgSend(v7, "count"))
            {
              v87 = 0;
              do
              {
                objc_msgSend((id)objc_msgSend(v7, "objectAtIndexedSubscript:", v87), "doubleValue");
                v89 = v88;
                objc_msgSend(a3, "beginTime");
                v91 = v90 + v89 * v18;
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(a3, "values"), "objectAtIndexedSubscript:", v87), "floatValue");
                v93 = v92;
                v94 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, v33, USKDataTypeFloat_weak, USKRoleTypeNone_weak);
                v95 = v91 / *(double *)(a1 + 504) + 0.0;
                v96 = (double)(int)v95;
                if (vabdd_f64(v95, v96) >= 0.001)
                {
                  if (1.0 - (v95 - v96) < 0.001)
                    v95 = v96 + 1.0;
                }
                else
                {
                  v95 = (double)(int)v95;
                }
                LODWORD(v96) = v93;
                objc_msgSend(v94, "setFloatValue:atTime:", v96, v95);
                ++v87;
              }
              while (v87 < objc_msgSend(v7, "count"));
            }
          }
        }
        v44 = *(void **)(a1 + 88);
        v45 = (const __CFString *)v33;
        return objc_msgSend(v44, "addObject:", v45);
      }
    }
  }
  return result;
}

unint64_t USDKitConverter::processAnimationGroup(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t result;
  unint64_t i;

  result = objc_msgSend((id)objc_msgSend(a3, "animations"), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      USDKitConverter::processAnimation(a1, a2, objc_msgSend((id)objc_msgSend(a3, "animations"), "objectAtIndex:", i));
      result = objc_msgSend((id)objc_msgSend(a3, "animations"), "count");
    }
  }
  return result;
}

uint64_t USDKitConverter::processBlendShapeAnimations(USDKitConverter *this, SCNNode *a2)
{
  SCNNode *v2;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _anonymous_namespace_ *v9;
  void *AnimationsPath;
  NSString *v11;
  id v12;
  id v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  id v18;
  id v19;
  double *v20;
  unint64_t v21;
  double v22;
  uint64_t *v23;
  _DWORD *v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  NSArray *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p;
  void *v39;
  uint64_t v40;
  _QWORD v41[3];
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  SCNNode *v45;
  _BYTE v46[128];
  uint64_t v47;

  v2 = a2;
  v47 = *MEMORY[0x1E0C80C00];
  v45 = a2;
  v4 = (_QWORD *)*((_QWORD *)this + 53);
  if (v4)
  {
    v5 = (_QWORD *)((char *)this + 424);
    do
    {
      v6 = v4[4];
      v7 = v6 >= (unint64_t)a2;
      if (v6 >= (unint64_t)a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)((char *)this + 424)
      && v5[4] <= (unint64_t)a2
      && -[SCNNode animationKeys](a2, "animationKeys")
      && -[NSArray count](-[SCNNode animationKeys](v2, "animationKeys"), "count"))
    {
      v9 = -[NSArray objectAtIndexedSubscript:](-[SCNNode animationKeys](v2, "animationKeys"), "objectAtIndexedSubscript:", 0);
      AnimationsPath = (void *)USDKitConverter::getAnimationsPath(this);
      v13 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v12, USKNodeTypeSkeletalAnimation_weak);
      v42 = &v45;
      v14 = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)this + 52, (unint64_t *)&v45, (uint64_t)&std::piecewise_construct, (uint64_t **)&v42);
      BlendShape::setSkelAnimation(v14[5], (uint64_t)v12, (uint64_t)v13);
      v15 = -[NSArray count](-[SCNNode animationKeys](v45, "animationKeys"), "count");
      v42 = 0;
      v43 = 0;
      v44 = 0;
      memset(v41, 0, sizeof(v41));
      std::vector<std::vector<float>>::resize(v41, v15);
      if (v15)
      {
        for (i = 0; i != v15; ++i)
        {
          v17 = -[NSArray objectAtIndexedSubscript:](-[SCNNode animationKeys](v45, "animationKeys"), "objectAtIndexedSubscript:", i);
          v18 = -[SCNNode animationPlayerForKey:](v45, "animationPlayerForKey:", v17);
          if (v18)
            USDKitConverter::processBlendShapeAnimation((uint64_t)this, (uint64_t)v13, (void *)objc_msgSend((id)objc_msgSend(v18, "animation"), "caAnimation"), &v42, v41);
        }
      }
      v19 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v13, CFSTR("blendShapeWeights"), USKDataTypeFloatArray_weak, USKRoleTypeNone_weak);
      __p = 0;
      v39 = 0;
      v40 = 0;
      std::vector<float>::resize((uint64_t)&__p, v15);
      v20 = (double *)v42;
      if (v43 != v42)
      {
        v21 = 0;
        do
        {
          v22 = v20[v21];
          if (v15)
          {
            v23 = (uint64_t *)v41[0];
            v24 = __p;
            v25 = v15;
            do
            {
              v26 = *v23;
              v23 += 3;
              *v24++ = *(_DWORD *)(v26 + 4 * v21);
              --v25;
            }
            while (v25);
          }
          v27 = v22 / *((double *)this + 63) + 0.0;
          v28 = (double)(int)v27;
          if (vabdd_f64(v27, v28) >= 0.001)
          {
            if (1.0 - (v27 - v28) < 0.001)
              v27 = v28 + 1.0;
          }
          else
          {
            v27 = (double)(int)v27;
          }
          objc_msgSend(v19, "setFloatArray:count:atTime:", v27);
          ++v21;
          v20 = (double *)v42;
        }
        while (v21 < (v43 - (_BYTE *)v42) >> 3);
      }
      if (__p)
      {
        v39 = __p;
        operator delete(__p);
      }
      __p = v41;
      std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
      if (v42)
      {
        v43 = v42;
        operator delete(v42);
      }
      v2 = v45;
    }
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v29 = -[SCNNode childNodes](v2, "childNodes", 0);
  result = -[NSArray countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  v31 = result;
  if (result)
  {
    v32 = *(_QWORD *)v35;
    do
    {
      v33 = 0;
      do
      {
        if (*(_QWORD *)v35 != v32)
          objc_enumerationMutation(v29);
        USDKitConverter::processBlendShapeAnimations(this, *(SCNNode **)(*((_QWORD *)&v34 + 1) + 8 * v33++));
      }
      while (v31 != v33);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v29, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
      v31 = result;
    }
    while (result);
  }
  return result;
}

void sub_1DCEEBF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  __p = &a21;
  std::vector<std::vector<CFRange>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t USDKitConverter::getAnimationsPath(USDKitConverter *this)
{
  uint64_t result;
  uint64_t v3;
  id v4;

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    v3 = objc_msgSend(*((id *)this + 3), "stringByAppendingPathComponent:", CFSTR("Animations"));
    *((_QWORD *)this + 6) = v3;
    v4 = +[USKObjectPath_helper objectPathWithString:](USKObjectPath_helper, "objectPathWithString:", v3);
    +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v4, USKNodeTypeScope_weak);
    return *((_QWORD *)this + 6);
  }
  return result;
}

uint64_t BlendShape::setSkelAnimation(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)(result + 16))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      result = objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v5, CFSTR("skel:animationSource"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak), "setObjectPath:", a2);
      *(_QWORD *)(v4 + 16) = a3;
    }
  }
  return result;
}

void std::vector<std::vector<float>>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

unint64_t USDKitConverter::processBlendShapeAnimation(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t result;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return USDKitConverter::processBlendShapeAnimationGroup(a1, a2, a3, (uint64_t)a4, (uint64_t)a5);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v11 = (void *)objc_msgSend(a3, "keyTimes");
    result = objc_msgSend(v11, "count");
    if (result)
    {
      objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", objc_msgSend(v11, "count") - 1), "doubleValue");
      v13 = v12;
      result = objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", 0), "doubleValue");
      v15 = v13 - v14;
      if (v13 - v14 >= 0.0001)
      {
        objc_msgSend(a3, "duration");
        v17 = v16;
        v18 = (void *)objc_msgSend((id)objc_msgSend(a3, "keyPath"), "componentsSeparatedByString:", CFSTR("."));
        v19 = (void *)objc_msgSend(v18, "objectAtIndex:", objc_msgSend(v18, "count") - 1);
        result = objc_msgSend(v19, "length");
        if (result >= 9)
        {
          result = objc_msgSend((id)objc_msgSend(v19, "substringToIndex:", 7), "isEqualToString:", CFSTR("weights"));
          if ((_DWORD)result)
          {
            v20 = objc_msgSend((id)objc_msgSend(v19, "substringFromIndex:", 8), "intValue");
            std::vector<double>::resize((uint64_t)a4, objc_msgSend(v11, "count"));
            std::vector<float>::resize(*a5 + 24 * v20, objc_msgSend(v11, "count"));
            v21 = (void *)objc_msgSend(a3, "values");
            result = objc_msgSend(v11, "count");
            if (result)
            {
              v22 = 0;
              v23 = 24 * v20;
              v24 = v17 / v15;
              do
              {
                objc_msgSend((id)objc_msgSend(v11, "objectAtIndexedSubscript:", v22), "doubleValue");
                v26 = v25;
                objc_msgSend(a3, "beginTime");
                *(double *)(*a4 + 8 * v22) = v27 + v26 * v24;
                objc_msgSend((id)objc_msgSend(v21, "objectAtIndexedSubscript:", v22), "floatValue");
                *(_DWORD *)(*(_QWORD *)(*a5 + v23) + 4 * v22++) = v28;
                result = objc_msgSend(v11, "count");
              }
              while (v22 < result);
            }
          }
        }
      }
    }
  }
  return result;
}

void std::vector<std::vector<float>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DCEEC4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

unint64_t USDKitConverter::processBlendShapeAnimationGroup(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  unint64_t i;

  result = objc_msgSend((id)objc_msgSend(a3, "animations"), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      USDKitConverter::processBlendShapeAnimation(a1, a2, objc_msgSend((id)objc_msgSend(a3, "animations"), "objectAtIndex:", i), a4, a5);
      result = objc_msgSend((id)objc_msgSend(a3, "animations"), "count");
    }
  }
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      abort();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void USDKitConverter::processMeshSkin(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::vector<int>::size_type v20;
  unsigned int v21;
  int v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;

  if (!a5)
  {
    if (!a4)
      return;
    objc_msgSend(a2, "simdWorldTransform");
    v55 = vcvtq_f64_f32(*(float32x2_t *)v31.f32);
    v56 = vcvt_hight_f64_f32(v31);
    v57 = vcvtq_f64_f32(*(float32x2_t *)v32.f32);
    v58 = vcvt_hight_f64_f32(v32);
    v59 = vcvtq_f64_f32(*(float32x2_t *)v33.f32);
    v60 = vcvt_hight_f64_f32(v33);
    v61 = vcvtq_f64_f32(*(float32x2_t *)v34.f32);
    v62 = vcvt_hight_f64_f32(v34);
    v35 = a4;
    v36 = (uint64_t)a2;
    goto LABEL_17;
  }
  v9 = (void *)objc_msgSend(a2, "skinner");
  v10 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "boneWeights"), "data"), "bytes");
  v11 = objc_msgSend((id)objc_msgSend(v9, "boneWeights"), "dataOffset");
  v12 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "data"), "bytes");
  v13 = objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "dataOffset");
  if (!v10 || !v12)
  {
    v37 = objc_msgSend(v9, "skeleton");
    if (v37)
      v38 = v37;
    else
      v38 = (uint64_t)a2;
    if (v9)
    {
      objc_msgSend(v9, "baseGeometryBindTransform");
      v39 = vcvt_hight_f64_f32(v54);
      v40 = vcvt_hight_f64_f32(v53);
      v41 = vcvt_hight_f64_f32(v52);
      v42 = vcvt_hight_f64_f32(v51);
      v43 = vcvtq_f64_f32(*(float32x2_t *)v54.f32);
      v44 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
      v45 = vcvtq_f64_f32(*(float32x2_t *)v52.f32);
      v46 = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
    }
    else
    {
      v46 = 0uLL;
      v42 = 0uLL;
      v45 = 0uLL;
      v41 = 0uLL;
      v44 = 0uLL;
      v40 = 0uLL;
      v43 = 0uLL;
      v39 = 0uLL;
    }
    v55 = v46;
    v56 = v42;
    v57 = v45;
    v58 = v41;
    v59 = v44;
    v60 = v40;
    v61 = v43;
    v62 = v39;
    v35 = a4;
    v36 = v38;
LABEL_17:
    Skeleton::bindRigidDeformation(v35, v36, a3, &v55);
    return;
  }
  v14 = v10 + v11;
  v15 = v12 + v13;
  v16 = objc_msgSend((id)objc_msgSend(v9, "boneWeights"), "vectorCount");
  v17 = objc_msgSend((id)objc_msgSend(v9, "boneWeights"), "componentsPerVector") * v16;
  v18 = objc_msgSend((id)objc_msgSend(v9, "boneWeights"), "componentsPerVector");
  v19 = objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "vectorCount");
  v20 = objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "componentsPerVector") * v19;
  v21 = objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "componentsPerVector");
  v22 = objc_msgSend((id)objc_msgSend(v9, "boneIndices"), "bytesPerComponent");
  if (v9)
  {
    objc_msgSend(v9, "baseGeometryBindTransform");
    v23 = vcvt_hight_f64_f32(v50);
    v24 = vcvt_hight_f64_f32(v49);
    v25 = vcvt_hight_f64_f32(v48);
    v26 = vcvt_hight_f64_f32(v47);
    v27 = vcvtq_f64_f32(*(float32x2_t *)v50.f32);
    v28 = vcvtq_f64_f32(*(float32x2_t *)v49.f32);
    v29 = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
    v30 = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
  }
  else
  {
    v30 = 0uLL;
    v26 = 0uLL;
    v29 = 0uLL;
    v25 = 0uLL;
    v28 = 0uLL;
    v24 = 0uLL;
    v27 = 0uLL;
    v23 = 0uLL;
  }
  v55 = v30;
  v56 = v26;
  v57 = v29;
  v58 = v25;
  v59 = v28;
  v60 = v24;
  v61 = v27;
  v62 = v23;
  Skin::addMeshSkinData(a5, a3, v14, v17, v18, v15, v20, v21, v22, &v55);
}

id USDKitConverter::processSkeletonAnimations(USDKitConverter *this, Skeleton *a2)
{
  Skeleton *v2;
  id result;
  void *v4;
  void *v5;
  uint64_t v6;
  _anonymous_namespace_ *v13;
  void *v14;
  void *v15;
  id *v16;
  id *v17;
  id v18;
  _QWORD **v19;
  id v20;
  const __CFString *v21;
  _anonymous_namespace_ *v22;
  NSString *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  void *AnimationsPath;
  NSString *v29;
  id v30;
  double v31;
  int v32;
  unint64_t v33;
  double v34;
  std::string *v35;
  const void **v36;
  uint64_t *v37;
  id *v38;
  id *v39;
  id v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unint64_t v47;
  double v48;
  void *v49;
  void *v50;
  void *v51;
  float32x4_t v52;
  int8x16_t v53;
  __int32 v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x8_t v59;
  __int32 v60;
  __int32 v61;
  int8x16_t v62;
  __int32 v63;
  int8x16_t v64;
  unsigned int v65;
  unsigned int v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  uint32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  int8x16_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  void *v95;
  unint64_t v96;
  __int32 v97;
  float32x4_t v98;
  __int32 v99;
  float32_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  char *v106;
  char *i8;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  int8x16_t *v112;
  int8x16_t *v113;
  int8x16_t *v114;
  int8x16_t v115;
  int8x16_t *v116;
  int8x16_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  int8x16_t *v122;
  int8x16_t *v123;
  int8x16_t *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  float32x4_t *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  float32x4_t v134;
  double v135;
  double v136;
  id v137;
  unint64_t v138;
  id v139;
  Skeleton *v140;
  void *v141;
  __int128 v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  id v147;
  uint64_t v148;
  float32x4_t v150;
  std::string *v151;
  int32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  int8x16_t v155;
  void *__p;
  char *v157;
  char *v158;
  void *v159;
  int8x16_t *v160;
  int8x16_t *v161;
  void *v162;
  char *v163;
  char *v164;
  char *v165;
  std::string *v166;
  unint64_t v167;
  __int128 v168;
  __int128 v169;
  uint64_t *v170;
  _QWORD *v171[2];
  __int128 v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;

  v2 = a2;
  result = Skeleton::findNodeWithAnimation(a2);
  if (result)
  {
    v4 = result;
    v5 = (void *)objc_msgSend(result, "animationKeys");
    result = (id)objc_msgSend(v5, "count");
    if (result)
    {
      v143 = v4;
      v6 = 0;
      __asm { FMOV            V0.2D, #1.0 }
      v142 = _Q0;
      __asm { FMOV            V0.4S, #1.0 }
      v150 = (float32x4_t)_Q0;
      _Q0.i32[0] = -1;
      v152 = _Q0;
      v140 = v2;
      v141 = v5;
      while (2)
      {
        v144 = v6;
        v13 = (_anonymous_namespace_ *)objc_msgSend(v5, "objectAtIndex:");
        v14 = (void *)objc_msgSend((id)objc_msgSend(v143, "animationPlayerForKey:", v13), "animation");
        v168 = xmmword_1DD02AF90;
        v169 = v142;
        v171[0] = 0;
        v171[1] = 0;
        v170 = (uint64_t *)v171;
        AnimationData::processSkeletonAnimation((uint64_t **)&v168, (CAAnimationGroup *)objc_msgSend(v14, "caAnimation"));
        v15 = (void *)objc_opt_new();
        v165 = 0;
        v166 = 0;
        v167 = 0;
        v16 = *(id **)v2;
        v17 = (id *)*((_QWORD *)v2 + 1);
        while (v16 != v17)
        {
          v18 = *v16;
          std::string::basic_string[abi:nn180100]<0>(&v172, (char *)objc_msgSend((id)objc_msgSend(*v16, "name"), "UTF8String"));
          v19 = (_QWORD **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v170, (const void **)&v172);
          if (v171 == v19)
          {
            if (!objc_msgSend(v18, "identifier"))
              goto LABEL_20;
            MEMORY[0x1DF0D40B8](&v172, objc_msgSend((id)objc_msgSend(v18, "identifier"), "UTF8String"));
            v19 = (_QWORD **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)&v170, (const void **)&v172);
          }
          if (v19 != v171)
          {
            v20 = **(id **)v2;
            v21 = &stru_1EA5A6480;
            do
            {
              v22 = (_anonymous_namespace_ *)objc_msgSend(v18, "name");
              if (v18 == v20)
                break;
              v18 = (id)objc_msgSend(v18, "parentNode");
            }
            while (v18);
            objc_msgSend(v15, "addObject:", v21);
            v24 = v166;
            if ((unint64_t)v166 >= v167)
            {
              v26 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::__split_buffer<std::string>::pointer *)&v165, &v172);
            }
            else
            {
              if (v173.i8[7] < 0)
              {
                std::string::__init_copy_ctor_external(v166, (const std::string::value_type *)v172, *((std::string::size_type *)&v172 + 1));
              }
              else
              {
                v25 = v172;
                v166->__r_.__value_.__r.__words[2] = v173.i64[0];
                *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
              }
              v26 = v24 + 1;
            }
            v166 = v26;
          }
LABEL_20:
          if (v173.i8[7] < 0)
            operator delete((void *)v172);
          ++v16;
        }
        v27 = objc_msgSend(v15, "count");
        if (v27)
        {
          AnimationsPath = (void *)USDKitConverter::getAnimationsPath(this);
          v30 = +[USKHelper scene:nodeAtPath:type:](USKHelper, "scene:nodeAtPath:type:", *((_QWORD *)this + 7), v139, USKNodeTypeSkeletalAnimation_weak);
          objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v30, CFSTR("joints"), USKDataTypeStringArray_weak, USKRoleTypeNone_weak), "setStringArray:", v15);

          v162 = 0;
          v163 = 0;
          v164 = 0;
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&v162, 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - v165) >> 3));
          v159 = 0;
          v160 = 0;
          v161 = 0;
          std::vector<CFRange>::reserve(&v159, 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - v165) >> 3));
          __p = 0;
          v157 = 0;
          v158 = 0;
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - v165) >> 3));
          v31 = *((double *)&v168 + 1) - *(double *)&v168;
          v32 = (int)((*((double *)&v168 + 1) - *(double *)&v168) / *(double *)&v169 + 0.5);
          if ((v32 & 0x80000000) == 0)
          {
            v33 = 0;
            v146 = (double)v32;
            v145 = (v32 + 1);
            v147 = v30;
            v148 = v27;
            do
            {
              v34 = *(double *)&v168;
              _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v162, 0);
              _ZNSt3__16vectorI16C3DSubdivCPUDataIDv3_fENS_9allocatorIS3_EEE6resizeEm((uint64_t)&v159, 0);
              _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, 0);
              v36 = (const void **)v165;
              v35 = v166;
              v151 = v166;
              while (v36 != (const void **)v35)
              {
                *(_QWORD *)&v172 = v36;
                v37 = std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v170, v36, (uint64_t)&std::piecewise_construct, (__int128 **)&v172);
                v38 = (id *)v37[7];
                v39 = (id *)v37[8];
                if (v38 != v39)
                {
                  v155 = 0uLL;
                  v153 = v150;
                  v154 = (int8x16_t)xmmword_1DD007610;
                  while (1)
                  {
                    v40 = *v38;
                    v41 = (void *)objc_msgSend(*v38, "keyTimes");
                    if (objc_msgSend(v41, "count"))
                    {
                      v42 = (void *)objc_msgSend((id)objc_msgSend(v40, "keyPath"), "componentsSeparatedByString:", CFSTR("."));
                      objc_msgSend(v40, "duration");
                      v44 = v43;
                      objc_msgSend((id)objc_msgSend(v41, "objectAtIndexedSubscript:", objc_msgSend(v41, "count") - 1), "doubleValue");
                      v46 = v45;
                      objc_msgSend((id)objc_msgSend(v41, "objectAtIndexedSubscript:", 0), "doubleValue");
                      v47 = 0;
                      if (v46 - v48 >= 0.0001 && v44 >= 0.0001)
                      {
                        objc_msgSend(v40, "beginTime");
                        if (objc_msgSend(v41, "count") <= v33)
                        {
                          v47 = objc_msgSend(v41, "count") - 1;
                        }
                        else
                        {
                          objc_msgSend((id)objc_msgSend(v41, "objectAtIndexedSubscript:", v33), "doubleValue");
                          v47 = v33;
                        }
                      }
                      v49 = (void *)objc_msgSend(v42, "objectAtIndex:", 1);
                      if (objc_msgSend(v49, "isEqualToString:", CFSTR("transform")))
                      {
                        if (objc_msgSend((id)objc_msgSend(v40, "keyTimes"), "count"))
                        {
                          v50 = (void *)objc_msgSend(v40, "values");
                          v174 = 0u;
                          v175 = 0u;
                          v172 = 0u;
                          v173 = 0u;
                          v51 = (void *)objc_msgSend(v50, "objectAtIndexedSubscript:", v47);
                          if (v51)
                          {
                            objc_msgSend(v51, "SCNMatrix4Value");
                            v52 = (float32x4_t)v172;
                            v53 = v173;
                            v54 = HIDWORD(v172);
                            v56 = (float32x4_t)v174;
                            v55 = v175;
                            v57 = vextq_s8(v173, vextq_s8(v173, v174, 4uLL), 8uLL);
                            v57.i32[0] = v174.i32[2];
                            v58 = (int8x16_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL));
                            v58.i32[0] = v175.i32[1];
                            v59 = vext_s8(*(int8x8_t *)v52.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL), 4uLL);
                          }
                          else
                          {
                            v55 = 0uLL;
                            v59 = 0;
                            v54 = 0;
                            v56.i32[0] = 0;
                            v56.i32[3] = 0;
                            v53 = 0uLL;
                            v52.i32[0] = 0;
                            v52.i32[3] = 0;
                            v58 = 0uLL;
                            v57 = 0uLL;
                          }
                          *(int8x8_t *)&v52.i32[1] = v59;
                          v67 = v52;
                          v67.i32[3] = v54;
                          v68 = (float32x4_t)vextq_s8(v57, (int8x16_t)vrev64q_s32((int32x4_t)v57), 4uLL);
                          v68.i32[0] = v53.i32[0];
                          v69 = (float32x4_t)vextq_s8(v58, v57, 8uLL);
                          v69.i32[0] = v56.i32[0];
                          v69.i32[3] = v56.i32[3];
                          v70 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), (int8x16_t)v69, 0xCuLL), vnegq_f32(v68)), v69, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL));
                          v69.i32[3] = v58.i32[2];
                          v71 = vmulq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), v70, 0xCuLL));
                          v72 = vmulq_f32(v67, v67);
                          v75 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1)));
                          v73 = vmulq_f32(v68, v68);
                          v75.f32[0] = sqrtf(v75.f32[0]);
                          v74 = vmulq_f32(v69, v69);
                          v75.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).f32[0]);
                          v75.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).f32[0]);
                          v76 = 1.0;
                          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0] < 0.0)v76 = -1.0;
                          v77 = vmulq_n_f32(v75, v76);
                          v78 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v77), (int8x16_t)vcgezq_f32(v77)));
                          v78.i32[3] = v78.i32[2];
                          v78.i32[0] = vmaxvq_u32((uint32x4_t)v78);
                          v79 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(v78, v152), 0), (int8x16_t)v77, (int8x16_t)0);
                          v80 = (uint32x4_t)vceqzq_f32(v79);
                          v80.i32[3] = v80.i32[2];
                          if ((vmaxvq_u32(v80) & 0x80000000) != 0)
                          {
                            v153 = 0u;
                            v154 = *(int8x16_t *)(MEMORY[0x1E0C83FF0] + 48);
                          }
                          else
                          {
                            v81 = (float32x4_t)vextq_s8(v57, v53, 4uLL);
                            v81.i32[0] = v53.i32[0];
                            v56.i32[1] = v58.i32[3];
                            v56.i32[2] = v57.i32[0];
                            v82 = vdivq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 0));
                            v83 = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1));
                            v153 = v79;
                            v84 = v83.f32[1];
                            v85 = (int8x16_t)vdivq_f32(v56, (float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2));
                            v86 = *(float *)&v85.i32[2] + (float)(v82.f32[0] + v83.f32[1]);
                            if (v86 <= 0.0)
                            {
                              if (v82.f32[0] <= v83.f32[1] || v82.f32[0] <= *(float *)&v85.i32[2])
                              {
                                if (v83.f32[1] <= *(float *)&v85.i32[2])
                                {
                                  v100 = (float)(*(float *)&v85.i32[2] + 1.0) - v82.f32[0];
                                  v101 = (float32x4_t)vzip2q_s32((int32x4_t)v82, vzip1q_s32((int32x4_t)v85, (int32x4_t)v82));
                                  v102 = (int8x16_t)vrev64q_s32((int32x4_t)v83);
                                  v103 = (float32x4_t)vextq_s8(v102, v102, 8uLL);
                                  v103.i32[0] = v85.i32[0];
                                  v88.i64[0] = vaddq_f32(v101, v103).u64[0];
                                  v101.f32[2] = v100;
                                  v83 = vsubq_f32(v101, v103);
                                  v88.i64[1] = v83.i64[1];
                                  v89.i32[0] = v83.i32[2];
                                }
                                else
                                {
                                  v91 = v83;
                                  v91.i32[0] = v82.i32[1];
                                  v83.i32[1] = v85.i32[2];
                                  v83.i32[2] = v85.i32[1];
                                  v92 = (int32x4_t)vaddq_f32(v91, v83);
                                  v91.f32[1] = (float)(v84 + 1.0) - v82.f32[0];
                                  v91.i32[3] = v85.i32[0];
                                  v83.i32[3] = v82.i32[2];
                                  v83 = vsubq_f32(v91, v83);
                                  v88 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v92), (int32x4_t)v83);
                                  v89.i32[0] = v83.i32[1];
                                }
                              }
                              else
                              {
                                v93 = v82;
                                v93.f32[0] = (float)(v82.f32[0] + 1.0) - v83.f32[1];
                                v93.i32[3] = v83.i32[2];
                                v94 = (float32x4_t)vextq_s8(v85, v85, 8uLL);
                                v89 = vsubq_f32(v93, v94);
                                v94.i32[1] = v83.i32[0];
                                v88 = vaddq_f32(v82, v94);
                                v88.i32[0] = v89.i32[0];
                                v88.i32[3] = v89.i32[3];
                              }
                            }
                            else
                            {
                              v89 = (float32x4_t)vzip2q_s32((int32x4_t)v83, vuzp1q_s32((int32x4_t)v83, (int32x4_t)v85));
                              v89.i32[2] = v82.i32[1];
                              v87 = (float32x4_t)vtrn2q_s32((int32x4_t)v85, vzip2q_s32((int32x4_t)v85, (int32x4_t)v82));
                              v87.i32[2] = v83.i32[0];
                              v88 = vsubq_f32(v89, v87);
                              v87.i32[3] = 1.0;
                              v89.f32[3] = v86;
                              v83 = vaddq_f32(v89, v87);
                              v88.i32[3] = v83.i32[3];
                              v89.i32[0] = v83.i32[3];
                            }
                            v83.i32[0] = 0;
                            v104 = vmulq_n_f32(v88, 0.5 / sqrtf(v89.f32[0]));
                            v105 = (int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v104), (int8x16_t)vcgezq_f32(v104)));
                            v105.i32[0] = vmaxvq_u32((uint32x4_t)v105);
                            v154 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v83, v105), 0), *(int8x16_t *)(MEMORY[0x1E0C83FF0] + 48), (int8x16_t)v104);
                          }
                          v62 = vextq_s8(vextq_s8(v55, v55, 4uLL), v58, 0xCuLL);
                          goto LABEL_71;
                        }
                      }
                      else
                      {
                        if ((objc_msgSend(v49, "isEqualToString:", CFSTR("position")) & 1) == 0
                          && !objc_msgSend(v49, "isEqualToString:", CFSTR("translation")))
                        {
                          if ((objc_msgSend(v49, "isEqualToString:", CFSTR("orientation")) & 1) != 0
                            || objc_msgSend(v49, "isEqualToString:", CFSTR("quaternion")))
                          {
                            if (objc_msgSend((id)objc_msgSend(v40, "keyTimes"), "count"))
                            {
                              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "values"), "objectAtIndexedSubscript:", v47), "SCNVector4Value");
                              v64.i32[1] = v63;
                              v64.i64[1] = __PAIR64__(v66, v65);
                              v154 = v64;
                            }
                          }
                          else if (objc_msgSend(v49, "isEqualToString:", CFSTR("scale"))
                                 && objc_msgSend((id)objc_msgSend(v40, "keyTimes"), "count"))
                          {
                            v95 = (void *)objc_msgSend(v40, "values");
                            if (v47 >= objc_msgSend(v95, "count"))
                              v96 = 0;
                            else
                              v96 = v47;
                            objc_msgSend((id)objc_msgSend(v95, "objectAtIndexedSubscript:", v96), "SCNVector3Value");
                            v98.i32[1] = v97;
                            v98.i32[2] = v99;
                            v153 = v98;
                          }
                          goto LABEL_72;
                        }
                        if (objc_msgSend((id)objc_msgSend(v40, "keyTimes"), "count"))
                        {
                          objc_msgSend((id)objc_msgSend((id)objc_msgSend(v40, "values"), "objectAtIndexedSubscript:", v47), "SCNVector3Value");
                          v62.i32[1] = v60;
                          v62.i32[2] = v61;
LABEL_71:
                          v155 = v62;
                        }
                      }
                    }
LABEL_72:
                    if (++v38 == v39)
                      goto LABEL_75;
                  }
                }
                v155 = 0uLL;
                v153 = v150;
                v154 = (int8x16_t)xmmword_1DD007610;
LABEL_75:
                v106 = v163;
                if (v163 >= v164)
                {
                  v108 = (v163 - (_BYTE *)v162) >> 4;
                  if ((unint64_t)(v108 + 1) >> 60)
                    goto LABEL_141;
                  v109 = (v164 - (_BYTE *)v162) >> 3;
                  if (v109 <= v108 + 1)
                    v109 = v108 + 1;
                  if ((unint64_t)(v164 - (_BYTE *)v162) >= 0x7FFFFFFFFFFFFFF0)
                    v110 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v110 = v109;
                  if (v110)
                    v111 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v164, v110);
                  else
                    v111 = 0;
                  v112 = (int8x16_t *)&v111[16 * v108];
                  *v112 = v155;
                  i8 = v112[1].i8;
                  v114 = (int8x16_t *)v162;
                  v113 = (int8x16_t *)v163;
                  if (v163 != v162)
                  {
                    do
                    {
                      v115 = v113[-1];
                      --v113;
                      v112[-1] = v115;
                      --v112;
                    }
                    while (v113 != v114);
                    v113 = (int8x16_t *)v162;
                  }
                  v162 = v112;
                  v163 = i8;
                  v164 = &v111[16 * v110];
                  if (v113)
                    operator delete(v113);
                }
                else
                {
                  *(int8x16_t *)v163 = v155;
                  i8 = v106 + 16;
                }
                v163 = i8;
                v116 = v160;
                if (v160 >= v161)
                {
                  v118 = ((char *)v160 - (_BYTE *)v159) >> 4;
                  if ((unint64_t)(v118 + 1) >> 60)
                    goto LABEL_141;
                  v119 = ((char *)v161 - (_BYTE *)v159) >> 3;
                  if (v119 <= v118 + 1)
                    v119 = v118 + 1;
                  if ((unint64_t)((char *)v161 - (_BYTE *)v159) >= 0x7FFFFFFFFFFFFFF0)
                    v120 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v120 = v119;
                  if (v120)
                    v121 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v161, v120);
                  else
                    v121 = 0;
                  v122 = (int8x16_t *)&v121[16 * v118];
                  *v122 = v154;
                  v117 = v122 + 1;
                  v124 = (int8x16_t *)v159;
                  v123 = v160;
                  if (v160 != v159)
                  {
                    do
                    {
                      v122[-1] = v123[-1];
                      --v122;
                      --v123;
                    }
                    while (v123 != v124);
                    v123 = (int8x16_t *)v159;
                  }
                  v159 = v122;
                  v160 = v117;
                  v161 = (int8x16_t *)&v121[16 * v120];
                  if (v123)
                    operator delete(v123);
                }
                else
                {
                  *v160 = v154;
                  v117 = v116 + 1;
                }
                v160 = v117;
                v125 = v157;
                if (v157 >= v158)
                {
                  v127 = (v157 - (_BYTE *)__p) >> 4;
                  if ((unint64_t)(v127 + 1) >> 60)
LABEL_141:
                    abort();
                  v128 = (v158 - (_BYTE *)__p) >> 3;
                  if (v128 <= v127 + 1)
                    v128 = v127 + 1;
                  if ((unint64_t)(v158 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
                    v129 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v129 = v128;
                  if (v129)
                    v130 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v158, v129);
                  else
                    v130 = 0;
                  v131 = (float32x4_t *)&v130[16 * v127];
                  *v131 = v153;
                  v126 = (char *)&v131[1];
                  v133 = (float32x4_t *)__p;
                  v132 = (float32x4_t *)v157;
                  if (v157 != __p)
                  {
                    do
                    {
                      v134 = v132[-1];
                      --v132;
                      v131[-1] = v134;
                      --v131;
                    }
                    while (v132 != v133);
                    v132 = (float32x4_t *)__p;
                  }
                  __p = v131;
                  v157 = v126;
                  v158 = &v130[16 * v129];
                  if (v132)
                    operator delete(v132);
                }
                else
                {
                  *(float32x4_t *)v157 = v153;
                  v126 = v125 + 16;
                }
                v157 = v126;
                v36 += 3;
                v35 = v151;
              }
              v135 = (v31 * (double)(int)v33 / v146 + v34) / *((double *)this + 63) + 0.0;
              v136 = (double)(int)v135;
              if (vabdd_f64(v135, v136) >= 0.001)
              {
                v137 = v147;
                v27 = v148;
                if (1.0 - (v135 - v136) < 0.001)
                  v135 = v136 + 1.0;
              }
              else
              {
                v135 = (double)(int)v135;
                v137 = v147;
                v27 = v148;
              }
              objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v137, CFSTR("translations"), USKDataTypeFloat3Array_weak, USKRoleTypeNone_weak), "setFloat3Array:count:atTime:", v135);
              objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v137, CFSTR("rotations"), USKDataTypeQuatfArray_weak, USKRoleTypeNone_weak), "setQuatfArray:count:atTime:", v135);
              objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v137, CFSTR("scales"), USKDataTypeFloat3Array_weak, USKRoleTypeNone_weak), "setFloat3Array:count:atTime:", v135);
              ++v33;
            }
            while (v33 != v145);
          }
          if (__p)
          {
            v157 = (char *)__p;
            operator delete(__p);
          }
          v2 = v140;
          if (v159)
          {
            v160 = (int8x16_t *)v159;
            operator delete(v159);
          }
          if (v162)
          {
            v163 = (char *)v162;
            operator delete(v162);
          }
        }
        else
        {

        }
        *(_QWORD *)&v172 = &v165;
        std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v172);
        std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::destroy((uint64_t)&v170, v171[0]);
        if (!v27)
        {
          v5 = v141;
          v138 = objc_msgSend(v141, "count");
          v6 = v144 + 1;
          if (v144 + 1 >= v138)
            return 0;
          continue;
        }
        return v139;
      }
    }
  }
  return result;
}

void sub_1DCEED794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,_QWORD *a60)
{
  a49 = &a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&a49);
  std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::destroy(a34, a60);
  _Unwind_Resume(a1);
}

uint64_t Skeleton::setSkeletalAnimation(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*(_QWORD *)(result + 120))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 104);
    if (v3)
    {
      result = objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v3, CFSTR("skel:animationSource"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak), "setObjectPath:", a2);
      *(_QWORD *)(v2 + 120) = a2;
    }
  }
  return result;
}

_QWORD *Skeleton::bindRigidDeformation(_QWORD *result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  int v12;
  int v13;

  v4 = result[1] - *result;
  if (v4)
  {
    v7 = (uint64_t)result;
    v8 = 0;
    v9 = v4 >> 3;
    if (v9 <= 1)
      v9 = 1;
    while (*(_QWORD *)(*result + 8 * v8) != a2)
    {
      if (v9 == ++v8)
        return result;
    }
    if (v8 != -1)
    {
      v13 = 1065353216;
      v10 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a3, CFSTR("primvars:skel:jointWeights"), USKDataTypeFloatArray_weak, USKRoleTypeNone_weak);
      objc_msgSend(v10, "setFloatArray:count:", &v13, 1);
      objc_msgSend(v10, "setMetadataWithKey:value:", CFSTR("elementSize"), +[USKData_helper dataWithInt:](USKData_helper, "dataWithInt:", 1));
      objc_msgSend(v10, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("constant"))));
      v12 = v8;
      v11 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a3, CFSTR("primvars:skel:jointIndices"), USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
      objc_msgSend(v11, "setIntArray:count:", &v12, 1);
      objc_msgSend(v11, "setMetadataWithKey:value:", CFSTR("elementSize"), +[USKData_helper dataWithInt:](USKData_helper, "dataWithInt:", 1));
      objc_msgSend(v11, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("constant"))));
      return (_QWORD *)Skeleton::bindToUskMesh(v7, a3, a4);
    }
  }
  return result;
}

void Skin::addMeshSkinData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::vector<int>::size_type a7, unsigned int a8, int a9, _OWORD *a10)
{
  id v16;
  uint64_t v17;
  int v18;
  std::vector<int>::pointer end;
  int *v20;
  std::vector<int>::pointer begin;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  int *v27;
  int v28;
  uint64_t v29;
  int v30;
  std::vector<int>::pointer v31;
  int *v32;
  std::vector<int>::pointer v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  int *v39;
  int v40;
  id v41;
  uint64_t v43;
  std::vector<int> v45;
  unint64_t v46;
  unint64_t *v47;

  v16 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("primvars:skel:jointWeights"), USKDataTypeFloatArray_weak, USKRoleTypeNone_weak);
  objc_msgSend(v16, "setFloatArray:count:", a3, a4);
  objc_msgSend(v16, "setMetadataWithKey:value:", CFSTR("elementSize"), +[USKData_helper dataWithInt:](USKData_helper, "dataWithInt:", a5));
  objc_msgSend(v16, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("vertex"))));
  memset(&v45, 0, sizeof(v45));
  std::vector<unsigned int>::reserve(&v45, a7);
  v43 = a2;
  if (a9 == 2)
  {
    if (a7)
    {
      v17 = 0;
      do
      {
        v46 = *(unsigned __int16 *)(a6 + 2 * v17);
        v47 = &v46;
        v18 = *((_DWORD *)std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v46, (uint64_t)&std::piecewise_construct, (uint64_t **)&v47)+ 10);
        end = v45.__end_;
        if (v45.__end_ >= v45.__end_cap_.__value_)
        {
          begin = v45.__begin_;
          v22 = v45.__end_ - v45.__begin_;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            abort();
          v24 = (char *)v45.__end_cap_.__value_ - (char *)v45.__begin_;
          if (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v45.__end_cap_, v25);
            begin = v45.__begin_;
            end = v45.__end_;
          }
          else
          {
            v26 = 0;
          }
          v27 = (int *)&v26[4 * v22];
          *v27 = v18;
          v20 = v27 + 1;
          while (end != begin)
          {
            v28 = *--end;
            *--v27 = v28;
          }
          v45.__begin_ = v27;
          v45.__end_ = v20;
          v45.__end_cap_.__value_ = (int *)&v26[4 * v25];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v45.__end_ = v18;
          v20 = end + 1;
        }
        v45.__end_ = v20;
        ++v17;
      }
      while (v17 != a7);
    }
  }
  else if (a7)
  {
    v29 = 0;
    do
    {
      v46 = *(int *)(a6 + 4 * v29);
      v47 = &v46;
      v30 = *((_DWORD *)std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__emplace_unique_key_args<__C3DMesh *,std::piecewise_construct_t const&,std::tuple<__C3DMesh * const&>,std::tuple<>>((uint64_t **)(a1 + 64), &v46, (uint64_t)&std::piecewise_construct, (uint64_t **)&v47)+ 10);
      v31 = v45.__end_;
      if (v45.__end_ >= v45.__end_cap_.__value_)
      {
        v33 = v45.__begin_;
        v34 = v45.__end_ - v45.__begin_;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          abort();
        v36 = (char *)v45.__end_cap_.__value_ - (char *)v45.__begin_;
        if (((char *)v45.__end_cap_.__value_ - (char *)v45.__begin_) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v45.__end_cap_, v37);
          v33 = v45.__begin_;
          v31 = v45.__end_;
        }
        else
        {
          v38 = 0;
        }
        v39 = (int *)&v38[4 * v34];
        *v39 = v30;
        v32 = v39 + 1;
        while (v31 != v33)
        {
          v40 = *--v31;
          *--v39 = v40;
        }
        v45.__begin_ = v39;
        v45.__end_ = v32;
        v45.__end_cap_.__value_ = (int *)&v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *v45.__end_ = v30;
        v32 = v31 + 1;
      }
      v45.__end_ = v32;
      ++v29;
    }
    while (v29 != a7);
  }
  v41 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", v43, CFSTR("primvars:skel:jointIndices"), USKDataTypeIntArray_weak, USKRoleTypeNone_weak);
  objc_msgSend(v41, "setIntArray:count:", v45.__begin_, a7);
  objc_msgSend(v41, "setMetadataWithKey:value:", CFSTR("elementSize"), +[USKData_helper dataWithInt:](USKData_helper, "dataWithInt:", a8));
  objc_msgSend(v41, "setMetadataWithKey:value:", CFSTR("interpolation"), +[USKData_helper dataWithToken:](USKData_helper, "dataWithToken:", +[USKToken_helper tokenWithString:](USKToken_helper, "tokenWithString:", CFSTR("vertex"))));
  Skeleton::bindToUskMesh(*(_QWORD *)(a1 + 56), v43, a10);
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
}

void sub_1DCEEDE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Skeleton::bindToUskMesh(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[8];

  v6 = +[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("primvars:skel:geomBindTransform"), USKDataTypeDouble4x4_weak, USKRoleTypeNone_weak);
  v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  v10 = a3[3];
  v12[2] = a3[2];
  v12[3] = v10;
  objc_msgSend(v6, "setDouble4x4Value:", v12);
  return objc_msgSend(+[USKHelper node:propertyWithName:type:role:](USKHelper, "node:propertyWithName:type:role:", a2, CFSTR("skel:skeleton"), USKDataTypeObjectPath_weak, USKRoleTypeNone_weak), "setObjectPath:", *(_QWORD *)(a1 + 112));
}

void AnimationData::processSkeletonAnimation(uint64_t **this, CAAnimationGroup *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  CAAnimationGroup *v35;
  void **v36;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    AnimationData::processSkeletonAnimationGroup((AnimationData *)this, a2);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v35 = a2;
      v4 = (void *)-[CAAnimationGroup keyTimes](a2, "keyTimes");
      if (objc_msgSend(v4, "count"))
      {
        v5 = (void *)-[CAAnimationGroup keyPath](a2, "keyPath");
        if (objc_msgSend(v5, "length"))
        {
          v6 = (void *)objc_msgSend(v5, "componentsSeparatedByString:", CFSTR("."));
          if (objc_msgSend(v6, "count") == 2)
          {
            v7 = (void *)objc_msgSend(v6, "objectAtIndex:", 0);
            if (objc_msgSend(v7, "characterAtIndex:", 0) == 47)
            {
              std::string::basic_string[abi:nn180100]<0>(v33, (char *)objc_msgSend((id)objc_msgSend(v7, "substringFromIndex:", 1), "UTF8String"));
              v8 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>((uint64_t)(this + 4), (const void **)v33);
              if (this + 5 == (uint64_t **)v8)
              {
                __p = 0;
                v31 = 0;
                v32 = 0;
                std::vector<CAKeyframeAnimation *>::push_back[abi:nn180100](&__p, &v35);
                v36 = v33;
                v9 = (char *)(std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 4, (const void **)v33, (uint64_t)&std::piecewise_construct, (__int128 **)&v36)+ 7);
                if (v9 != (char *)&__p)
                  std::vector<CAKeyframeAnimation *>::__assign_with_size[abi:nn180100]<CAKeyframeAnimation **,CAKeyframeAnimation **>(v9, (char *)__p, (uint64_t)v31, (v31 - (_BYTE *)__p) >> 3);
                if (__p)
                {
                  v31 = __p;
                  operator delete(__p);
                }
              }
              else
              {
                std::vector<CAKeyframeAnimation *>::push_back[abi:nn180100](v8 + 7, &v35);
              }
              if ((unint64_t)objc_msgSend(v4, "count") >= 2)
              {
                objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", objc_msgSend(v4, "count") - 1), "doubleValue");
                v11 = v10;
                objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "doubleValue");
                v13 = v11 - v12;
                if (v13 >= 0.0001)
                {
                  -[CAAnimationGroup duration](v35, "duration");
                  *((double *)this + 3) = v14 / v13;
                  objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "doubleValue");
                  v16 = v15;
                  v17 = *((double *)this + 3);
                  -[CAAnimationGroup beginTime](v35, "beginTime");
                  v19 = v18;
                  objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", objc_msgSend(v4, "count") - 1), "doubleValue");
                  v21 = v20;
                  v22 = *((double *)this + 3);
                  -[CAAnimationGroup beginTime](v35, "beginTime");
                  v23 = v19 + v16 * v17;
                  v25 = v24 + v21 * v22;
                  if (*(double *)this > v23)
                    *(double *)this = v23;
                  if (*((double *)this + 1) < v25)
                    *((double *)this + 1) = v25;
                  objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 1), "doubleValue");
                  v27 = v26;
                  objc_msgSend((id)objc_msgSend(v4, "objectAtIndexedSubscript:", 0), "doubleValue");
                  v29 = (v27 - v28) * *((double *)this + 3);
                  if (v29 > 0.0001 && *((double *)this + 2) > 0.0001)
                    *((double *)this + 2) = v29;
                }
              }
              if (v34 < 0)
                operator delete(v33[0]);
            }
          }
        }
      }
    }
  }
}

void sub_1DCEEE23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSUInteger AnimationData::processSkeletonAnimationGroup(AnimationData *this, CAAnimationGroup *a2)
{
  NSUInteger result;
  unint64_t i;

  result = -[NSArray count](-[CAAnimationGroup animations](a2, "animations"), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      AnimationData::processSkeletonAnimation(this, (CAAnimation *)-[NSArray objectAtIndex:](-[CAAnimationGroup animations](a2, "animations"), "objectAtIndex:", i));
      result = -[NSArray count](-[CAAnimationGroup animations](a2, "animations"), "count");
    }
  }
  return result;
}

void std::vector<CAKeyframeAnimation *>::push_back[abi:nn180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<Statement *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

char *std::vector<CAKeyframeAnimation *>::__assign_with_size[abi:nn180100]<CAKeyframeAnimation **,CAKeyframeAnimation **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<Statement *>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>>>>::reset[abi:nn180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DCEEE5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>>>>::reset[abi:nn180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<CAKeyframeAnimation *>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<CAKeyframeAnimation *>>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<CAKeyframeAnimation *>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::vector<CAKeyframeAnimation *>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void USDKitConverter::~USDKitConverter(USDKitConverter *this)
{
  void *v2;

  ShapeBlending::~ShapeBlending((USDKitConverter *)((char *)this + 440));
  std::__tree<char>::destroy((uint64_t)this + 416, *((_QWORD **)this + 53));
  Skinning::~Skinning((uint64_t **)this + 43);
  std::__tree<char>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  std::__tree<char>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<char>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 216, *((_QWORD **)this + 28));
  std::__tree<std::__value_type<__C3DImage *,std::string>,std::__map_value_compare<__C3DImage *,std::__value_type<__C3DImage *,std::string>,std::less<__C3DImage *>,true>,std::allocator<std::__value_type<__C3DImage *,std::string>>>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<char>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  std::__tree<std::string>::destroy((uint64_t)this + 144, *((char **)this + 19));
  std::__tree<char>::destroy((uint64_t)this + 120, *((_QWORD **)this + 16));
  std::__tree<char>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  std::__tree<std::string>::destroy((uint64_t)this + 64, *((char **)this + 9));
}

uint64_t C3DMorphCreate()
{
  uint64_t result;

  if (C3DMorphGetTypeID_onceToken != -1)
    dispatch_once(&C3DMorphGetTypeID_onceToken, &__block_literal_global_101);
  result = C3DTypeCreateInstance_(C3DMorphGetTypeID_typeID, 0xC0uLL);
  *(_BYTE *)(result + 192) = 1;
  *(_QWORD *)(result + 184) = 0x13C23D70ALL;
  return result;
}

uint64_t __C3DMorphSetMorpher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 200) = a2;
  return result;
}

uint64_t C3DMorphSetCalculationMode(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 64) != a2)
  {
    *(_DWORD *)(result + 64) = a2;
    ++*(_DWORD *)(result + 188);
    result = *(_QWORD *)(result + 200);
    if (result)
      return C3DMorpherResetIncrementalCount(result);
  }
  return result;
}

float C3DMorphGetIncrementalThreshold(uint64_t a1)
{
  return *(float *)(a1 + 184);
}

__n128 C3DMorpherGetExtraTargetInfo@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 120);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 128);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 136);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 144);
  result = *(__n128 *)(a1 + 152);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

void C3DMorphSetTargetsWithExtraTargetInfo(uint64_t a1, CFTypeRef cf, size_t __n, const void **a4)
{
  char v5;
  int v7;
  CFTypeRef v8;
  CFTypeRef v10;
  int v11;
  int v12;
  int v13;
  size_t v14;
  void *v15;
  void *v16;
  int v17;
  size_t v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  size_t v23;
  int v24;
  int v25;
  int v26;
  size_t v27;
  void *v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  size_t v33;
  void *v34;
  void *v35;
  int v36;
  size_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  const void *v41;

  v5 = __n;
  v7 = *(_DWORD *)(a1 + 88);
  v8 = *(CFTypeRef *)(a1 + 72);
  if (v8 != cf)
  {
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      v10 = CFRetain(cf);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 72) = v10;
  }
  ++*(_DWORD *)(a1 + 188);
  *(_BYTE *)(a1 + 193) = v5;
  v11 = *(_DWORD *)a4;
  v12 = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)a4;
  if (v12)
  {
    v13 = *(_DWORD *)(a1 + 92);
    *(_DWORD *)(a1 + 92) = v12;
    v14 = (4 * v11);
    if (v11 != v7)
    {
      v15 = *(void **)(a1 + 96);
      if (v11)
      {
        v16 = malloc_type_realloc(v15, (4 * v11), 0x6299ADBFuLL);
      }
      else
      {
        free(v15);
        v16 = 0;
      }
      *(_QWORD *)(a1 + 96) = v16;
    }
    if (*(_DWORD *)a4)
      memcpy(*(void **)(a1 + 96), a4[1], v14);
    v17 = *((_DWORD *)a4 + 1);
    v18 = (4 * v17);
    if (v17 != v13)
    {
      v19 = *(void **)(a1 + 104);
      if (v17)
      {
        v20 = malloc_type_realloc(v19, (4 * v17), 0x37052877uLL);
      }
      else
      {
        free(v19);
        v20 = 0;
      }
      *(_QWORD *)(a1 + 104) = v20;
      v13 = *((_DWORD *)a4 + 1);
    }
    if (v13)
      memcpy(*(void **)(a1 + 104), a4[2], v18);
  }
  else
  {
    *(_DWORD *)(a1 + 92) = 0;
    free(*(void **)(a1 + 96));
    *(_QWORD *)(a1 + 96) = 0;
    free(*(void **)(a1 + 104));
    *(_QWORD *)(a1 + 104) = 0;
  }
  v21 = *(_DWORD *)(a1 + 112);
  v22 = *((_DWORD *)a4 + 6);
  *(_DWORD *)(a1 + 112) = v22;
  if (v22)
  {
    v23 = (4 * v22);
    v24 = v21;
    if (v22 != v21)
    {
      *(_QWORD *)(a1 + 120) = malloc_type_realloc(*(void **)(a1 + 120), (4 * v22), 0x212B70EBuLL);
      v24 = *((_DWORD *)a4 + 6);
    }
    if (v24)
      memcpy(*(void **)(a1 + 120), a4[4], v23);
    v25 = *(_DWORD *)(a1 + 128);
    v26 = *((_DWORD *)a4 + 10);
    *(_DWORD *)(a1 + 128) = v26;
    v27 = (4 * v26);
    if (v26 != v25)
    {
      v28 = *(void **)(a1 + 136);
      if (v26)
      {
        v29 = malloc_type_realloc(v28, (4 * v26), 0xF61FACC7uLL);
      }
      else
      {
        free(v28);
        v29 = 0;
      }
      *(_QWORD *)(a1 + 136) = v29;
      v25 = *((_DWORD *)a4 + 10);
    }
    if (v25)
      memcpy(*(void **)(a1 + 136), a4[6], v27);
    v30 = *((_DWORD *)a4 + 14);
    if (v30)
    {
      v31 = *(_DWORD *)(a1 + 144);
      *(_DWORD *)(a1 + 144) = v30;
      v32 = *((_DWORD *)a4 + 6);
      v33 = (4 * v32);
      if (v32 != v21)
      {
        v34 = *(void **)(a1 + 152);
        if (v32)
        {
          v35 = malloc_type_realloc(v34, (4 * v32), 0x1838578EuLL);
        }
        else
        {
          free(v34);
          v35 = 0;
        }
        *(_QWORD *)(a1 + 152) = v35;
      }
      if (*(_DWORD *)a4)
        memcpy(*(void **)(a1 + 152), a4[8], v33);
      v36 = *((_DWORD *)a4 + 14);
      v37 = (4 * v36);
      if (v36 != v31)
      {
        v38 = *(void **)(a1 + 160);
        if (*((_DWORD *)a4 + 1))
        {
          v39 = malloc_type_realloc(v38, v37, 0x3C8600C9uLL);
        }
        else
        {
          free(v38);
          v39 = 0;
        }
        *(_QWORD *)(a1 + 160) = v39;
        v31 = *((_DWORD *)a4 + 14);
      }
      if (v31)
        memcpy(*(void **)(a1 + 160), a4[9], v37);
    }
    else
    {
      *(_DWORD *)(a1 + 144) = 0;
      free(*(void **)(a1 + 152));
      *(_QWORD *)(a1 + 152) = 0;
      free(*(void **)(a1 + 160));
      *(_QWORD *)(a1 + 160) = 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 144) = 0;
    free(*(void **)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
    free(*(void **)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
    free(*(void **)(a1 + 152));
    *(_QWORD *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(_QWORD *)(a1 + 160) = 0;
    if (!v12)
    {
      free(*(void **)(a1 + 168));
      *(_QWORD *)(a1 + 168) = 0;
    }
  }
  v40 = *(_QWORD **)(a1 + 80);
  if (v40)
  {
    *(_QWORD *)(a1 + 80) = 0;
    _setupWeights(a1, v40);
    C3DGenericSourceSetListener((uint64_t)v40, 0);
    CFRelease(v40);
  }
  v41 = *(const void **)(a1 + 176);
  if (v41)
  {
    CFRelease(v41);
    *(_QWORD *)(a1 + 176) = 0;
  }
}

void _setupWeights(uint64_t a1, _QWORD *Accessor)
{
  uint64_t v2;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t i;
  int v8;
  const void *v9;
  const void *v10;

  v2 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v2)
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4 * v2);
    CFDataSetLength(Mutable, 4 * v2);
    if (Accessor)
      Accessor = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)Accessor);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    for (i = 0; i != v2; ++i)
    {
      v8 = 0;
      if (Accessor)
      {
        if (C3DSourceAccessorGetCount((uint64_t)Accessor) > i)
          v8 = *(_DWORD *)C3DSourceAccessorGetValuePtrAtIndex(Accessor, i);
      }
      *(_DWORD *)&MutableBytePtr[4 * i] = v8;
    }
    v9 = (const void *)C3DSourceAccessorCreate(1, 1, v2, 0, 0);
    v10 = (const void *)C3DGenericSourceCreateMutable(v9, 0);
    C3DGenericSourceSetData((uint64_t)v10, Mutable);
    C3DSourceAccessorSetSource((uint64_t)v9, (uint64_t)v10);
    CFRelease(v9);
    CFRelease(Mutable);
    C3DMorphSetWeightsSource(a1, v10);
    CFRelease(v10);
  }
}

void C3DMorphSetTargets(uint64_t a1, CFArrayRef theArray, size_t a3)
{
  int Count;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _DWORD v11[7];

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  memset(v11, 0, sizeof(v11));
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v7 = Count;
  C3DMorphSetTargetsWithExtraTargetInfo(a1, theArray, a3, (const void **)&v7);
}

float C3DMorphSetWeightsSource(uint64_t a1, const void *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef v5;
  float v6;
  float result;

  v3 = *(_QWORD *)(a1 + 80);
  if ((const void *)v3 != a2)
  {
    v4 = a2;
    if (v3)
    {
      C3DGenericSourceSetListener(v3, 0);
      v5 = *(CFTypeRef *)(a1 + 80);
      if (v5 != v4)
      {
        if (v5)
        {
          CFRelease(v5);
          *(_QWORD *)(a1 + 80) = 0;
        }
        if (!v4)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
    else if (a2)
    {
LABEL_10:
      v4 = CFRetain(v4);
LABEL_11:
      *(_QWORD *)(a1 + 80) = v4;
    }
    C3DGenericSourceSetListener((uint64_t)v4, a1);
    return __morphWeightsHaveChanged(a1, v6);
  }
  return result;
}

float __morphWeightsHaveChanged(uint64_t a1, float result)
{
  uint64_t v3;
  const UInt8 *Content;
  unsigned int v5;
  unsigned int v6;
  const UInt8 *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  float v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint8_t buf[4];
  unsigned int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 188);
  if (*(_QWORD *)(a1 + 168))
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (!v3)
    {
      if (*(_QWORD *)(a1 + 72))
      {
        _setupWeights(a1, 0);
        v3 = *(_QWORD *)(a1 + 80);
      }
      else
      {
        v3 = 0;
      }
    }
    Content = C3DGenericSourceGetContent(v3);
    v6 = v5;
    if (*(_DWORD *)(a1 + 88) == v5)
    {
      v7 = Content;
      v8 = *(_DWORD *)(a1 + 112);
      v9 = *(_DWORD *)(a1 + 92) + v8 + v5 + *(_DWORD *)(a1 + 144);
      v34 = 0;
      *(_DWORD *)buf = 0;
      if (v5)
      {
        v10 = 0;
        v11 = 4 * v5;
        do
        {
          if (*(_DWORD *)(a1 + 92))
            v12 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + v10);
          else
            v12 = 0;
          __evaluateRuntimeWeightsForInBetween(*(_QWORD *)(a1 + 168), buf, &v34, v12, *(_QWORD *)(a1 + 104), v9, *(float *)&v7[v10]);
          v10 += 4;
        }
        while (v11 != v10);
        v8 = *(_DWORD *)(a1 + 112);
      }
      v33 = 0;
      if (v8)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v13);
          if (v15)
          {
            v16 = 3.4028e38;
            v17 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v13);
            v18 = v14;
            do
            {
              v19 = *(unsigned int *)(*(_QWORD *)(a1 + 136) + 4 * v18++);
              v16 = fminf(v16, *(float *)&v7[4 * v19]);
              --v17;
            }
            while (v17);
            v14 += v15;
          }
          else
          {
            v16 = 3.4028e38;
          }
          if (*(_DWORD *)(a1 + 144))
            v20 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v13);
          else
            v20 = 0;
          __evaluateRuntimeWeightsForInBetween(*(_QWORD *)(a1 + 168), buf, &v33, v20, *(_QWORD *)(a1 + 160), v9, v16);
          ++v13;
        }
        while (v13 < *(unsigned int *)(a1 + 112));
      }
      if (*(_DWORD *)buf != v9)
      {
        v21 = scn_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
          __morphWeightsHaveChanged_cold_1(v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    else
    {
      v29 = scn_default_log();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v30 = *(_DWORD *)(a1 + 88);
        v31 = *(_DWORD *)(a1 + 92);
        v32 = *(_DWORD *)(a1 + 112);
        *(_DWORD *)buf = 67109888;
        v36 = v6;
        v37 = 1024;
        v38 = v30;
        v39 = 1024;
        v40 = v31;
        v41 = 1024;
        v42 = v32;
        _os_log_error_impl(&dword_1DCCB8000, v29, OS_LOG_TYPE_ERROR, "Error: Morpher has %d targets weights, but has %d main targets (note: there are %d in-betweens and %d correctives)", buf, 0x1Au);
      }
    }
  }
  return result;
}

uint64_t C3DMorphGetWeightsSource(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 80);
  if (!result)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      _setupWeights(a1, 0);
      return *(_QWORD *)(a1 + 80);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void C3DMorphUpdateCPUMeshIncrementally(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, int a5)
{
  uint64_t v6;
  _QWORD *Accessor;
  uint64_t Count;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *SourceWithSemanticAtIndex;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t Content;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _BOOL4 v30;
  const UInt8 *v31;
  float *v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  const void *v40;
  const void *v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  CFIndex v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  const void *ValueAtIndex;
  uint64_t Mesh;
  const void *v57;
  const void *v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  const void *ElementAtIndex;
  NSObject *v68;
  _QWORD *v69;
  __int128 v70;
  _QWORD *v71;
  int v72;
  float32x4_t *v73;
  unint64_t v74;
  double v75;
  float32x4_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  double v81;
  float32x4_t v82;
  __n128 v83;
  float32x4_t *v84;
  unint64_t v85;
  double v86;
  float32x4_t v87;
  float v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  _QWORD *v96;
  float *v97;
  uint64_t *v98;
  uint64_t *v99;
  _DWORD *v100;
  const UInt8 *ValuePtrAtIndex;
  _OWORD v102[3];
  uint64_t v103;
  uint8_t v104[4];
  int v105;
  _DWORD v106[2];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 80);
  if (!v6)
    return;
  Accessor = (_QWORD *)C3DGenericSourceGetAccessor(v6);
  Count = C3DSourceAccessorGetCount((uint64_t)Accessor);
  v13 = *(float *)(a1 + 184);
  ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(Accessor, 0);
  v94 = &v89;
  MEMORY[0x1E0C80A78](ValuePtrAtIndex);
  v100 = (_DWORD *)((char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v99 = &v89 - 2 * Count - 4;
  MEMORY[0x1E0C80A78](v16);
  v98 = &v89 - 2 * Count - 4;
  SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(a3, 0, 0, 1);
  v18 = C3DMeshGetSourceWithSemanticAtIndex(a3, 1, 0, 1);
  MEMORY[0x1E0C80A78](v18);
  v96 = (uint64_t *)((char *)&v89 - v19);
  v106[0] = 0;
  v20 = 0;
  v106[1] = C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
  v21 = 1.0;
  v22 = 1.0;
  v97 = a4;
  if (a5)
  {
    *v100 = -1082130432;
    Content = C3DMeshSourceGetContent((uint64_t)SourceWithSemanticAtIndex);
    v24 = v99;
    *v99 = Content;
    v24[1] = v25;
    if (v18)
    {
      v26 = C3DMeshSourceGetContent((uint64_t)v18);
    }
    else
    {
      v27 = 0;
      v26 = 0;
    }
    v28 = v98;
    *v98 = v26;
    v28[1] = v27;
    if (*(_BYTE *)(a1 + 193))
    {
      v29 = v96;
      *v96 = v106;
      v29[1] = 1;
      v29[2] = 0;
      *((_DWORD *)v29 + 6) = 67239936;
      *(_QWORD *)((char *)v29 + 36) = 0;
      *(_QWORD *)((char *)v29 + 28) = 0;
      *((_DWORD *)v29 + 11) = 0;
      v29[6] = 1;
    }
    if (Count < 1)
    {
      v30 = 0;
      v22 = 0.0;
      v20 = 1;
      goto LABEL_20;
    }
    bzero(a4, 4 * Count);
    v22 = 0.0;
    v20 = 1;
  }
  v30 = Count > 0;
  if (!*(_DWORD *)(a1 + 64) && Count >= 1)
  {
    v31 = ValuePtrAtIndex;
    v32 = v97;
    v33 = Count;
    do
    {
      v34 = *(float *)v31;
      v31 += 4;
      v35 = v34;
      v36 = *v32++;
      v37 = v36;
      v38 = vabds_f32(v35, v36);
      if (v38 <= v13)
        v37 = 0.0;
      v22 = v22 - v37;
      if (v38 <= v13)
        v35 = 0.0;
      v21 = v21 - v35;
      --v33;
    }
    while (v33);
  }
LABEL_20:
  v95 = a3;
  v91 = a2;
  v92 = (uint64_t)v18;
  v93 = (uint64_t)SourceWithSemanticAtIndex;
  if (vabds_f32(v21, v22) > 0.00000011921)
  {
    v39 = v21 - v22;
    v40 = C3DMeshGetSourceWithSemanticAtIndex(a2, 0, 0, 1);
    v41 = C3DMeshGetSourceWithSemanticAtIndex(a2, 1, 0, 1);
    *(float *)&v100[v20] = v39;
    v42 = &v99[2 * v20];
    *v42 = C3DMeshSourceGetContent((uint64_t)v40);
    v42[1] = v43;
    v44 = BYTE6(v43) == 1;
    v45 = &v98[2 * v20];
    if (v41)
    {
      v46 = C3DMeshSourceGetContent((uint64_t)v41);
      v45[1] = v47;
      v48 = BYTE6(v47) == 1;
    }
    else
    {
      v48 = 0;
      v46 = 0;
      v45[1] = 0;
    }
    *v45 = v46;
    if (*(_BYTE *)(a1 + 193))
    {
      v49 = &v96[7 * v20];
      *v49 = v106;
      v49[1] = 1;
      v49[2] = 0;
      *((_DWORD *)v49 + 6) = 67239936;
      *(_QWORD *)((char *)v49 + 36) = 0;
      *(_QWORD *)((char *)v49 + 28) = 0;
      *((_DWORD *)v49 + 11) = 0;
      v49[6] = 1;
    }
    ++v20;
    if (!v30)
      goto LABEL_43;
    goto LABEL_29;
  }
  v48 = 1;
  v44 = 1;
  if (v30)
  {
LABEL_29:
    v50 = 0;
    v90 = &v105;
    v51 = v97;
    do
    {
      v52 = *(float *)&ValuePtrAtIndex[4 * v50];
      v53 = v51[v50];
      if (vabds_f32(v52, v53) > v13)
      {
        v54 = v52 - v53;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v50);
        Mesh = C3DGeometryGetMesh((uint64_t)ValueAtIndex);
        v57 = C3DMeshGetSourceWithSemanticAtIndex(Mesh, 0, 0, 1);
        v58 = C3DMeshGetSourceWithSemanticAtIndex(Mesh, 1, 0, 1);
        *(float *)&v100[v20] = v54;
        v59 = &v99[2 * v20];
        *v59 = C3DMeshSourceGetContent((uint64_t)v57);
        v59[1] = v60;
        v61 = BYTE6(v60) == 1;
        v62 = &v98[2 * v20];
        if (v58)
        {
          v63 = C3DMeshSourceGetContent((uint64_t)v58);
          v62[1] = v64;
          v65 = BYTE6(v64);
        }
        else
        {
          v65 = 0;
          v63 = 0;
          v62[1] = 0;
        }
        *v62 = v63;
        v66 = v65 == 1;
        if (*(_BYTE *)(a1 + 193))
        {
          if ((uint64_t)C3DMeshGetElementsCount(Mesh) < 1)
          {
            v71 = &v96[7 * v20];
            *v71 = v106;
            v71[1] = 1;
            v71[2] = 0;
            *((_DWORD *)v71 + 6) = 67239936;
            *(_QWORD *)((char *)v71 + 36) = 0;
            *(_QWORD *)((char *)v71 + 28) = 0;
            *((_DWORD *)v71 + 11) = 0;
            v71[6] = 1;
          }
          else
          {
            ElementAtIndex = C3DMeshGetElementAtIndex(Mesh, 0, 1);
            if (!ElementAtIndex)
            {
              v68 = scn_default_log();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_FAULT))
                C3DMorphUpdateCPUMeshIncrementally_cold_1(v104, v90, v68);
            }
            v69 = &v96[7 * v20];
            C3DMeshElementGetContent((uint64_t)ElementAtIndex, 0, (uint64_t)v102);
            v70 = v102[1];
            *(_OWORD *)v69 = v102[0];
            *((_OWORD *)v69 + 1) = v70;
            *((_OWORD *)v69 + 2) = v102[2];
            v69[6] = v103;
          }
        }
        v44 &= v61;
        v48 &= v66;
        ++v20;
        v51 = v97;
      }
      ++v50;
    }
    while (Count != v50);
  }
LABEL_43:
  v72 = *(unsigned __int8 *)(a1 + 193);
  v73 = (float32x4_t *)C3DMeshSourceGetContent(v93);
  if (v72)
  {
    if ((((v74 & 0xFF000000000000) == 0x1000000000000) & v44) == 1)
      __blendsparse_dst_float_src_float((uint64_t)v73, v74, (uint64_t)v99, (uint64_t)v100, (uint64_t)v96, v20, v75, *(double *)v76.i64, v77);
    else
      __blendsparse_dst_float3_src_generic((uint64_t)v73, v74, (uint64_t)v99, (uint64_t)v100, (uint64_t)v96, v20, v75, v76, v77.n128_f32[0]);
    v78 = v95;
    if (*(_BYTE *)(a1 + 192) && v92 && (C3DMeshGetMorphableSourceMask(v91) & 2) != 0)
    {
      v79 = C3DMeshSourceGetContent(v92);
      if ((((v80 & 0xFF000000000000) == 0x1000000000000) & v48) == 1)
        __blendsparse_dst_float_src_float(v79, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)v96, v20, v81, *(double *)v82.i64, v83);
      else
        __blendsparse_dst_float3_src_generic(v79, v80, (uint64_t)v98, (uint64_t)v100, (uint64_t)v96, v20, v81, v82, v83.n128_f32[0]);
    }
  }
  else
  {
    if ((v44 & 1) != 0)
      __blend_dst_float_src_float(v73, v74, (uint64_t)v99, (uint64_t)v100, v20, v75);
    else
      __blend_dst_float3_src_generic((uint64_t)v73, v74, (uint64_t)v99, (uint64_t)v100, v20, v75, v76, v77.n128_f32[0]);
    v78 = v95;
    if (*(_BYTE *)(a1 + 192) && v92 && (C3DMeshGetMorphableSourceMask(v91) & 2) != 0)
    {
      v84 = (float32x4_t *)C3DMeshSourceGetContent(v92);
      if ((v48 & 1) != 0)
        __blend_dst_float_src_float(v84, v85, (uint64_t)v98, (uint64_t)v100, v20, v86);
      else
        __blend_dst_float3_src_generic((uint64_t)v84, v85, (uint64_t)v98, (uint64_t)v100, v20, v86, v87, v88);
    }
  }
  if (!*(_BYTE *)(a1 + 192))
    C3DMeshUnifyNormals(v78, v78, 0, 0);
  C3DMeshResetBoundingVolumes(v78);
}

void __blendsparse_dst_float_src_float(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, __n128 a9)
{
  unsigned __int8 v9;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  NSObject *v37;
  unsigned int v38;
  float *v39;
  float32x4_t *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int i;
  float v44;
  unsigned int v45;
  float32x4_t v46;
  unsigned int v47;
  int j;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  float v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  float *v67;
  float *v68;
  float *v69;
  uint64_t v70;
  float v71;
  NSObject *v72;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint8_t buf[4];
  int v89;
  uint64_t v90;

  v9 = BYTE5(a2);
  v90 = *MEMORY[0x1E0C80C00];
  v11 = HIBYTE(a2);
  if ((a2 & 0xFF000000000000) != 0x1000000000000)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      __blendsparse_dst_float_src_float_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = v9;
  if (v9 != 4 * v11)
  {
    if (a6 < 1)
      return;
    v50 = 0;
    if (v11 <= 1)
      v51 = 1;
    else
      v51 = v11;
    while (1)
    {
      v79 = v50;
      v52 = (uint64_t *)(a5 + 56 * v50);
      v53 = *((unsigned int *)v52 + 2);
      if ((_DWORD)v53)
        break;
LABEL_54:
      v50 = v79 + 1;
      if (v79 + 1 == a6)
        return;
    }
    v54 = 0;
    v55 = 0;
    v56 = (uint64_t *)(a3 + 16 * v50);
    v57 = *(float *)(a4 + 4 * v79);
    v87 = *v56;
    v58 = *v52;
    v59 = *((unsigned __int8 *)v52 + 27);
    v61 = v52[5];
    v60 = v52[6];
    v62 = *((unsigned __int8 *)v56 + 13);
    v83 = v61;
    v85 = *v52;
    v81 = v60;
    while (1)
    {
      switch(v59)
      {
        case 4:
          v63 = *(_DWORD *)(v58 + 4 * (v61 + 2 * v54 * v60));
          v64 = *(_DWORD *)(v58 + 4 * (v61 + ((2 * v54) | 1) * v60));
          break;
        case 2:
          v63 = *(unsigned __int16 *)(v58 + 2 * (v61 + 2 * v54 * v60));
          v64 = *(unsigned __int16 *)(v58 + 2 * (v61 + ((2 * v54) | 1) * v60));
          break;
        case 1:
          v63 = *(unsigned __int8 *)(v58 + v61 + 2 * v54 * v60);
          v64 = *(unsigned __int8 *)(v58 + v61 + ((2 * v54) | 1) * v60);
          break;
        default:
          v72 = scn_default_log();
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v89 = v59;
            _os_log_error_impl(&dword_1DCCB8000, v72, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
          }
          v61 = v83;
          v58 = v85;
          v60 = v81;
          goto LABEL_53;
      }
      if (v63 < v64)
      {
        v65 = v63;
        v66 = v20 * v63;
        v67 = (float *)(v87 + v62 * v55);
        do
        {
          if (v11)
          {
            v68 = (float *)(a1 + v66);
            v69 = v67;
            v70 = v51;
            do
            {
              v71 = *v69++;
              *v68 = *v68 + (float)(v71 * v57);
              ++v68;
              --v70;
            }
            while (v70);
          }
          ++v55;
          ++v65;
          v66 += v20;
          v67 = (float *)((char *)v67 + v62);
        }
        while (v64 != (_DWORD)v65);
      }
LABEL_53:
      if (++v54 == v53)
        goto LABEL_54;
    }
  }
  if (a6 >= 1)
  {
    v21 = 0;
    v22 = v9;
    do
    {
      v77 = v21;
      v23 = (uint64_t *)(a5 + 56 * v21);
      v24 = *((unsigned int *)v23 + 2);
      if ((_DWORD)v24)
      {
        v25 = 0;
        v26 = 0;
        v27 = (uint64_t *)(a3 + 16 * v21);
        a9.n128_u32[0] = *(_DWORD *)(a4 + 4 * v77);
        v28 = (float32x4_t)vdupq_lane_s32((int32x2_t)a9.n128_u64[0], 0);
        v29 = *v27;
        v30 = *v23;
        v31 = *((unsigned __int8 *)v23 + 27);
        v32 = v23[5];
        v33 = v23[6];
        v34 = *((unsigned __int8 *)v27 + 13);
        v84 = v28;
        v86 = a9;
        v80 = v33;
        v82 = v32;
        v78 = v34;
        do
        {
          switch(v31)
          {
            case 4:
              v35 = *(_DWORD *)(v30 + 4 * (v32 + 2 * v25 * v33));
              v36 = *(_DWORD *)(v30 + 4 * (v32 + ((2 * v25) | 1) * v33));
              break;
            case 2:
              v35 = *(unsigned __int16 *)(v30 + 2 * (v32 + 2 * v25 * v33));
              v36 = *(unsigned __int16 *)(v30 + 2 * (v32 + ((2 * v25) | 1) * v33));
              break;
            case 1:
              v35 = *(unsigned __int8 *)(v30 + v32 + 2 * v25 * v33);
              v36 = *(unsigned __int8 *)(v30 + v32 + ((2 * v25) | 1) * v33);
              break;
            default:
              v37 = scn_default_log();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                v89 = v31;
                _os_log_error_impl(&dword_1DCCB8000, v37, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
              }
              v36 = 0;
              v35 = 0;
              v28 = v84;
              a9 = v86;
              v33 = v80;
              v32 = v82;
              v34 = v78;
              break;
          }
          v38 = v36 - v35;
          v39 = (float *)(v29 + v26 * v34);
          v40 = (float32x4_t *)(a1 + (v35 * v22));
          v41 = (-v35 & 3) * v11;
          v42 = v38 * v11 - v41;
          if (v38 * v11 <= v41)
          {
            v47 = 0;
          }
          else
          {
            for (i = v41; i; --i)
            {
              v44 = *v39++;
              v40->f32[0] = v40->f32[0] + (float)(v44 * a9.n128_f32[0]);
              v40 = (float32x4_t *)((char *)v40 + 4);
            }
            if (v42 >= 4)
            {
              v45 = v42 >> 2;
              do
              {
                v46 = *(float32x4_t *)v39;
                v39 += 4;
                *v40 = vmlaq_f32(*v40, v28, v46);
                ++v40;
                --v45;
              }
              while (v45);
            }
            v47 = (v42 & 0xFFFFFFFC) + v41;
          }
          for (j = v38 * v11 - v47; j; --j)
          {
            v49 = *v39++;
            v40->f32[0] = v40->f32[0] + (float)(v49 * a9.n128_f32[0]);
            v40 = (float32x4_t *)((char *)v40 + 4);
          }
          v26 += v38;
          ++v25;
        }
        while (v25 != v24);
      }
      v21 = v77 + 1;
    }
    while (v77 + 1 != a6);
  }
}

void __blendsparse_dst_float3_src_generic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, float32x4_t a8, float a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  const float *v17;
  uint64_t v18;
  int v19;
  float32x4_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  float *v25;
  uint64_t v26;
  float32x4_t v27;
  NSObject *v28;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  uint8_t buf[4];
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a6 >= 1)
  {
    v10 = 0;
    v11 = BYTE5(a2);
    while (1)
    {
      v33 = v10;
      v12 = (uint64_t *)(a5 + 56 * v10);
      v38 = *((unsigned int *)v12 + 2);
      if ((_DWORD)v38)
        break;
LABEL_18:
      v10 = v33 + 1;
      if (v33 + 1 == a6)
        return;
    }
    v13 = 0;
    v14 = 0;
    v15 = (uint64_t *)(a3 + 16 * v10);
    v34 = *v15;
    v37 = *v12;
    v16 = *((unsigned __int8 *)v12 + 27);
    v35 = v12[6];
    v36 = v12[5];
    v17 = (const float *)(a4 + 4 * v33);
    v18 = *((unsigned __int8 *)v15 + 13);
    v19 = *((unsigned __int8 *)v15 + 12);
    v20 = vld1q_dup_f32(v17);
    v39 = v20;
    while (1)
    {
      switch(v16)
      {
        case 4:
          v21 = *(_DWORD *)(v37 + 4 * (v36 + 2 * v13 * v35));
          v22 = *(_DWORD *)(v37 + 4 * (v36 + ((2 * v13) | 1) * v35));
          break;
        case 2:
          v21 = *(unsigned __int16 *)(v37 + 2 * (v36 + 2 * v13 * v35));
          v22 = *(unsigned __int16 *)(v37 + 2 * (v36 + ((2 * v13) | 1) * v35));
          break;
        case 1:
          v21 = *(unsigned __int8 *)(v37 + v36 + 2 * v13 * v35);
          v22 = *(unsigned __int8 *)(v37 + v36 + ((2 * v13) | 1) * v35);
          break;
        default:
          v28 = scn_default_log();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v41 = v16;
            _os_log_error_impl(&dword_1DCCB8000, v28, OS_LOG_TYPE_ERROR, "Unreachable code: Invalid bytes per index (%d)", buf, 8u);
          }
          goto LABEL_17;
      }
      v23 = v22 - v21;
      if (v22 > v21)
      {
        v24 = v11 * (unint64_t)v21;
        v25 = (float *)(v34 + v18 * v14);
        do
        {
          ++v14;
          *(double *)v20.i64 = C3DConvertFloatingTypeToFloat4(v19, v25, v20, a8.f32[0], a9);
          v26 = a1 + v24;
          v27.i64[0] = *(_QWORD *)v26;
          v27.i64[1] = *(unsigned int *)(v26 + 8);
          a9 = v39.f32[0];
          a8 = vmlaq_f32(v27, v39, v20);
          *(_QWORD *)v26 = a8.i64[0];
          *(_DWORD *)(v26 + 8) = a8.i32[2];
          v24 += v11;
          v25 = (float *)((char *)v25 + v18);
          --v23;
        }
        while (v23);
      }
LABEL_17:
      if (++v13 == v38)
        goto LABEL_18;
    }
  }
}

void __blend_dst_float_src_float(float32x4_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  float32x4_t *v30;
  unint64_t v31;
  float32x4_t v32;
  float *f32;
  float *v34;
  unint64_t v35;
  float v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  float v48;
  uint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  float v54;

  v11 = HIBYTE(a2);
  if ((a2 & 0xFF000000000000) != 0x1000000000000)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      __blendsparse_dst_float_src_float_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (BYTE5(a2) == 4 * v11)
  {
    if (a5 >= 1)
    {
      v20 = 0;
      v21 = 3 * a2;
      v22 = (v21 >> 2) & 0xFFFFFFFFFFFFFFFLL;
      if (v11 <= 1)
        v23 = 1;
      else
        v23 = v11;
      if (v22 <= 1)
        v24 = 1;
      else
        v24 = ((3 * (unint64_t)a2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
      do
      {
        v25 = a3 + 16 * v20;
        v26 = *(float32x4_t **)v25;
        v27 = *(unsigned __int8 *)(v25 + 13);
        LODWORD(a6) = *(_DWORD *)(a4 + 4 * v20);
        if (v27 == 4 * *(unsigned __int8 *)(v25 + 15))
        {
          if (a2 >= 2uLL)
          {
            v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0);
            v29 = *(float32x4_t **)v25;
            v30 = a1;
            v31 = v24;
            do
            {
              v32 = *v29++;
              *v30 = vmlaq_f32(*v30, v28, v32);
              ++v30;
              --v31;
            }
            while (v31);
          }
          if (v21 > 4 * v22)
          {
            f32 = v26[(3 * (unint64_t)a2) >> 2].f32;
            v34 = a1[(3 * (unint64_t)a2) >> 2].f32;
            v35 = v21 - 4 * v22;
            do
            {
              v36 = *f32++;
              *v34 = *v34 + (float)(v36 * *(float *)&a6);
              ++v34;
              --v35;
            }
            while (v35);
          }
        }
        else if ((_DWORD)a2)
        {
          v37 = 0;
          v38 = (float *)a1;
          do
          {
            v39 = (float *)v26;
            v40 = v38;
            v41 = v23;
            if (v11)
            {
              do
              {
                v42 = *v39++;
                *v40 = *v40 + (float)(v42 * *(float *)&a6);
                ++v40;
                --v41;
              }
              while (v41);
            }
            ++v37;
            v38 = (float *)((char *)v38 + BYTE5(a2));
            v26 = (float32x4_t *)((char *)v26 + v27);
          }
          while (v37 != a2);
        }
        ++v20;
      }
      while (v20 != a5);
    }
  }
  else if (a5 >= 1)
  {
    v43 = 0;
    if (v11 <= 1)
      v44 = 1;
    else
      v44 = v11;
    do
    {
      if ((_DWORD)a2)
      {
        v45 = 0;
        v46 = a3 + 16 * v43;
        v47 = *(float **)v46;
        v48 = *(float *)(a4 + 4 * v43);
        v49 = *(unsigned __int8 *)(v46 + 13);
        v50 = (float *)a1;
        do
        {
          v51 = v47;
          v52 = v50;
          v53 = v44;
          if (v11)
          {
            do
            {
              v54 = *v51++;
              *v52 = *v52 + (float)(v54 * v48);
              ++v52;
              --v53;
            }
            while (v53);
          }
          ++v45;
          v50 = (float *)((char *)v50 + BYTE5(a2));
          v47 = (float *)((char *)v47 + v49);
        }
        while (v45 != a2);
      }
      ++v43;
    }
    while (v43 != a5);
  }
}

void __blend_dst_float3_src_generic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float32x4_t a7, float a8)
{
  uint64_t v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  const float *v23;
  uint64_t v24;
  float32x4_t v25;
  __int32 *v26;
  uint64_t v27;
  __int32 *v28;
  float32x4_t v29;
  __int32 *v30;
  float32x4_t v33;

  v9 = a2;
  if ((a2 & 0xFF000000000000) != 0x1000000000000)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      __blendsparse_dst_float_src_float_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (a5 >= 1)
  {
    v19 = 0;
    v20 = v9;
    v30 = (__int32 *)(a1 + 8);
    do
    {
      if (v20)
      {
        v21 = a3 + 16 * v19;
        v22 = *(float **)v21;
        v23 = (const float *)(a4 + 4 * v19);
        v24 = *(unsigned __int8 *)(v21 + 13);
        LODWORD(v9) = *(unsigned __int8 *)(v21 + 12);
        v25 = vld1q_dup_f32(v23);
        v33 = v25;
        v26 = v30;
        v27 = v20;
        v28 = v30;
        do
        {
          *(double *)v25.i64 = C3DConvertFloatingTypeToFloat4(v9, v22, v25, a7.f32[0], a8);
          v29.i64[0] = *((_QWORD *)v26 - 1);
          v29.i32[2] = *v28;
          v28 = (__int32 *)((char *)v28 + BYTE5(v9));
          v29.i64[1] = v29.u32[2];
          a8 = v33.f32[0];
          a7 = vmlaq_f32(v29, v33, v25);
          *((_QWORD *)v26 - 1) = a7.i64[0];
          *v26 = a7.i32[2];
          v22 = (float *)((char *)v22 + v24);
          v26 = v28;
          --v27;
        }
        while (v27);
      }
      ++v19;
    }
    while (v19 != a5);
  }
}

uint64_t C3DMorphGetCalculationMode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

__CFArray *C3DMorphCopyMainTargets(uint64_t a1)
{
  __CFArray *Mutable;
  unint64_t v3;
  uint64_t v4;
  const void *ValueAtIndex;
  unint64_t v6;
  const void *v7;
  const void *v8;

  if (*(_DWORD *)(a1 + 92))
  {
    Mutable = CFArrayCreateMutable(0, *(unsigned int *)(a1 + 88), MEMORY[0x1E0C9B378]);
    if (*(_DWORD *)(a1 + 88))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v4 += *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v3);
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4 - 1);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        ++v3;
      }
      while (v3 < *(unsigned int *)(a1 + 88));
    }
  }
  else if (*(_DWORD *)(a1 + 112))
  {
    Mutable = CFArrayCreateMutable(0, *(unsigned int *)(a1 + 88), MEMORY[0x1E0C9B378]);
    if (*(_DWORD *)(a1 + 88))
    {
      v6 = 0;
      do
      {
        v7 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
        CFArrayAppendValue(Mutable, v7);
        ++v6;
      }
      while (v6 < *(unsigned int *)(a1 + 88));
    }
  }
  else
  {
    v8 = *(const void **)(a1 + 72);
    if (v8)
      return (__CFArray *)CFRetain(v8);
    return 0;
  }
  return Mutable;
}

uint64_t C3DMorphGetWeightCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 80);
  if (!v10)
  {
    if (!*(_QWORD *)(a1 + 72) || (_setupWeights(a1, 0), (v10 = *(_QWORD *)(a1 + 80)) == 0))
    {
      v11 = scn_default_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
        C3DKeyframedAnimationCopy_cold_2(v11, v12, v13, v14, v15, v16, v17, v18);
      v10 = 0;
    }
  }
  result = C3DGenericSourceGetAccessor(v10);
  if (result)
    return C3DSourceAccessorGetCount(result);
  return result;
}

float C3DMorphGetWeightAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *Accessor;
  float v22;
  const UInt8 *ValuePtrAtIndex;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *(_QWORD *)(a1 + 80);
  if (!v12)
  {
    if (!*(_QWORD *)(a1 + 72) || (_setupWeights(a1, 0), (v12 = *(_QWORD *)(a1 + 80)) == 0))
    {
      v13 = scn_default_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
        C3DKeyframedAnimationCopy_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
      v12 = 0;
    }
  }
  Accessor = (_QWORD *)C3DGenericSourceGetAccessor(v12);
  v22 = 0.0;
  if (C3DSourceAccessorGetCount((uint64_t)Accessor) > a2)
  {
    ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(Accessor, a2);
    if (ValuePtrAtIndex)
      return *(float *)ValuePtrAtIndex;
  }
  return v22;
}

void C3DMorphSetWeightAtIndex(uint64_t a1, uint64_t a2, float a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Accessor;
  __CFData *MutableValuePtrAtIndex;
  float v25;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    if (!*(_QWORD *)(a1 + 72)
      || (_setupWeights(a1, 0), (v14 = *(_QWORD *)(a1 + 80)) == 0)
      && (!*(_QWORD *)(a1 + 72) || (_setupWeights(a1, 0), (v14 = *(_QWORD *)(a1 + 80)) == 0)))
    {
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        C3DKeyframedAnimationCopy_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
      v14 = 0;
    }
  }
  Accessor = (_QWORD *)C3DGenericSourceGetAccessor(v14);
  if (C3DSourceAccessorGetCount((uint64_t)Accessor) > a2)
  {
    MutableValuePtrAtIndex = C3DSourceAccessorGetMutableValuePtrAtIndex(Accessor, a2);
    if (MutableValuePtrAtIndex)
    {
      v25 = *(float *)MutableValuePtrAtIndex;
      if (*(float *)MutableValuePtrAtIndex != a3)
      {
        *(float *)MutableValuePtrAtIndex = a3;
        __morphWeightsHaveChanged(a1, v25);
      }
    }
  }
}

uint64_t C3DMorphCreateCopy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *DeepCopy;
  const __CFArray *v13;
  size_t v14;
  void *v15;
  size_t v16;
  void *v17;
  size_t v18;
  void *v19;
  size_t v20;
  void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  void *v25;
  size_t v26;
  void *v27;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = C3DMorphCreate();
  *(_DWORD *)(v10 + 64) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(a1 + 184);
  *(_WORD *)(v10 + 192) = *(_WORD *)(a1 + 192);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11)
  {
    DeepCopy = (const void *)C3DGenericSourceCreateDeepCopy(v11);
    C3DMorphSetWeightsSource(v10, DeepCopy);
    if (DeepCopy)
      CFRelease(DeepCopy);
  }
  v13 = *(const __CFArray **)(a1 + 72);
  if (v13)
    *(_QWORD *)(v10 + 72) = CFArrayCreateMutableCopy(0, 0, v13);
  *(_QWORD *)(v10 + 88) = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(v10 + 112) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(v10 + 128) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 96))
  {
    v14 = 4 * *(unsigned int *)(a1 + 88);
    v15 = malloc_type_malloc(v14, 0x5A7131C2uLL);
    *(_QWORD *)(v10 + 96) = v15;
    memcpy(v15, *(const void **)(a1 + 96), v14);
  }
  if (*(_QWORD *)(a1 + 104))
  {
    v16 = 4 * *(unsigned int *)(a1 + 92);
    v17 = malloc_type_malloc(v16, 0x1136DC0EuLL);
    *(_QWORD *)(v10 + 104) = v17;
    memcpy(v17, *(const void **)(a1 + 104), v16);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    v18 = 4 * *(unsigned int *)(a1 + 112);
    v19 = malloc_type_malloc(v18, 0x5B535A7BuLL);
    *(_QWORD *)(v10 + 120) = v19;
    memcpy(v19, *(const void **)(a1 + 120), v18);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v20 = 4 * *(unsigned int *)(a1 + 128);
    v21 = malloc_type_malloc(v20, 0xCC78535FuLL);
    *(_QWORD *)(v10 + 136) = v21;
    memcpy(v21, *(const void **)(a1 + 136), v20);
  }
  if (*(_QWORD *)(a1 + 152))
  {
    v22 = 4 * *(unsigned int *)(a1 + 112);
    v23 = malloc_type_malloc(v22, 0x93D34BD6uLL);
    *(_QWORD *)(v10 + 152) = v23;
    memcpy(v23, *(const void **)(a1 + 152), v22);
  }
  if (*(_QWORD *)(a1 + 160))
  {
    v24 = 4 * *(unsigned int *)(a1 + 144);
    v25 = malloc_type_malloc(v24, 0xE7D74659uLL);
    *(_QWORD *)(v10 + 160) = v25;
    memcpy(v25, *(const void **)(a1 + 160), v24);
  }
  if (*(_QWORD *)(a1 + 168))
  {
    v26 = 4
        * (*(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144) + *(_DWORD *)(a1 + 88));
    v27 = malloc_type_malloc(v26, 0xFE3A60CCuLL);
    *(_QWORD *)(v10 + 168) = v27;
    memcpy(v27, *(const void **)(a1 + 168), v26);
  }
  C3DEntityCopyTo(a1, (CFTypeRef *)v10);
  return v10;
}

uint64_t C3DMorphSetMorphNormals(uint64_t result, char a2)
{
  *(_BYTE *)(result + 192) = a2;
  return result;
}

uint64_t C3DMorphGetMorphNormals(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

void C3DMorphCreateTargetNormalsIfNeeded(uint64_t a1, __C3DGeometry *a2)
{
  uint64_t Mesh;
  uint64_t v5;
  _BOOL4 EffectiveDataKindForRendering;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  char v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a1 + 192))
  {
    if (!C3DGeometryUsesDeformerBasedDynamicMesh((uint64_t)a2))
    {
      Mesh = C3DGeometryGetMesh((uint64_t)a2);
      if (Mesh)
      {
        v5 = Mesh;
        EffectiveDataKindForRendering = C3DGeometryGetEffectiveDataKindForRendering(a2);
        if (C3DMeshHasSourcesWithSemantic(v5, 1, EffectiveDataKindForRendering, 0))
        {
          v7 = *(const __CFArray **)(a1 + 72);
          if (v7)
          {
            Count = CFArrayGetCount(v7);
            v9 = Count - 1;
            if (Count >= 1)
            {
              v10 = Count;
              v11 = 0;
              v12 = 0;
              do
              {
                while (1)
                {
                  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v11);
                  if (!ValueAtIndex)
                    break;
                  v14 = C3DGeometryGetMesh((uint64_t)ValueAtIndex);
                  if (!v14)
                    break;
                  v15 = v14;
                  if (C3DMeshGetNormalSource(v14, 1))
                    break;
                  v12 = 1;
                  C3DMeshUnifyNormals(v15, v5, 1, 1);
                  if (v9 == v11++)
                    goto LABEL_17;
                }
                ++v11;
              }
              while (v10 != v11);
              if ((v12 & 1) == 0)
                return;
LABEL_17:
              C3DMeshUnifyNormals(v5, v5, 1, 1);
            }
          }
        }
      }
    }
  }
}

uint64_t C3DMorphConvertToSparse(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t v10;
  const void *NormalSource;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  CFArrayRef v16;
  uint64_t i;
  uint64_t PackedCopy;
  const void *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const void *ElementAtIndex;
  const void *v24;
  uint64_t v25;
  NSObject *v26;
  const void **p_PositionSource;
  const void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t UnpackedCopy;
  const void *v33;
  const __CFAllocator *allocator;
  uint64_t Mesh;
  uint64_t v36;
  CFIndex Count;
  void *values;
  uint8_t v40[4];
  uint64_t v41;
  uint8_t v42[4];
  uint64_t v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  uint8_t v48[4];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *PositionSource;
  const void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(a1 + 193) == a3)
    return 0;
  v6 = a1;
  if (C3DGeometryUsesDeformerBasedDynamicMesh(a2))
    return 0;
  *(_BYTE *)(v6 + 193) = a3;
  if (a3)
    C3DMorphConvertToCalculationMode(v6, a2, 1, a4);
  Mesh = C3DGeometryGetMesh(a2);
  Count = CFArrayGetCount(*(CFArrayRef *)(v6 + 72));
  if (Count >= 1)
  {
    v8 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v36 = v6;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 72), v8);
      v10 = C3DGeometryGetMesh((uint64_t)ValueAtIndex);
      PositionSource = 0;
      v53 = 0;
      PositionSource = C3DMeshGetPositionSource(v10, 0);
      NormalSource = C3DMeshGetNormalSource(v10, 0);
      v53 = NormalSource;
      if (PositionSource)
      {
        ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(v10, 0, 0);
        NormalSource = v53;
      }
      else
      {
        ChannelForSourceWithSemanticAtIndex = -1;
      }
      v50 = ChannelForSourceWithSemanticAtIndex;
      if (NormalSource)
      {
        v13 = C3DMeshGetChannelForSourceWithSemanticAtIndex(v10, 1, 0);
        v51 = v13;
        if (v53)
          v14 = 2;
        else
          v14 = 1;
        if (v53)
        {
          if (v13 != ChannelForSourceWithSemanticAtIndex)
          {
            v15 = scn_default_log();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
              C3DMorphConvertToSparse_cold_3(v48, &v49, v15);
          }
        }
      }
      else
      {
        v51 = -1;
        v14 = 1;
      }
      if ((a3 & 1) != 0)
      {
        values = 0;
        values = (void *)C3DMeshElementCreateIntervalList((uint64_t)&PositionSource, v14, 1);
        if (values)
        {
          v16 = CFArrayCreate(allocator, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
          C3DMeshSetMeshElements(v10, v16);
          CFRelease(v16);
          CFRelease(values);
          for (i = 0; i != v14; ++i)
          {
            PackedCopy = C3DMeshSourceCreatePackedCopy((uint64_t)*(&PositionSource + i), (uint64_t)values, *(&v50 + i));
            if (PackedCopy)
            {
              v19 = (const void *)PackedCopy;
              if (a4)
                (*(void (**)(uint64_t, const void *, _QWORD, uint64_t))(a4 + 16))(a4, ValueAtIndex, *(&PositionSource + i), PackedCopy);
              C3DMeshSetSourceWithInputSet(v10, v19, 0, 255);
              CFRelease(v19);
            }
            else
            {
              v20 = scn_default_log();
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109376;
                v45 = i;
                v46 = 1024;
                v47 = v8;
                _os_log_error_impl(&dword_1DCCB8000, v20, OS_LOG_TYPE_ERROR, "Error: Failed to create packed source %d for sparse morph target %d", buf, 0xEu);
              }
            }
          }
        }
        else
        {
          v26 = scn_default_log();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            v45 = v8;
            _os_log_error_impl(&dword_1DCCB8000, v26, OS_LOG_TYPE_ERROR, "Error: Could not create intervals for sparse morph target %d (this morph target is useless)", buf, 8u);
          }
          C3DMeshSetMeshElements(v10, 0);
          p_PositionSource = &PositionSource;
          do
          {
            v28 = *p_PositionSource++;
            C3DMeshRemoveSource(v10, v28);
            --v14;
          }
          while (v14);
        }
      }
      else
      {
        if (C3DMeshGetElementsCount(v10) != (const __CFArray *)1)
        {
          v21 = scn_default_log();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
            C3DMorphConvertToSparse_cold_2(v42, &v43, v21);
        }
        if (*(_DWORD *)(v6 + 64) != 1)
        {
          v22 = scn_default_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
            C3DMorphConvertToSparse_cold_1(v40, &v41, v22);
        }
        ElementAtIndex = C3DMeshGetElementAtIndex(v10, 0, 0);
        v24 = C3DMeshGetPositionSource(Mesh, 0);
        if (v24)
          v25 = C3DMeshSourceGetCount((uint64_t)v24);
        else
          v25 = 0;
        v29 = &v50;
        v30 = (uint64_t *)&PositionSource;
        do
        {
          v31 = *v29++;
          UnpackedCopy = C3DMeshSourceCreateUnpackedCopy(*v30, (uint64_t)ElementAtIndex, v25, v31);
          if (UnpackedCopy)
          {
            v33 = (const void *)UnpackedCopy;
            if (a4)
              (*(void (**)(uint64_t, const void *, uint64_t, uint64_t))(a4 + 16))(a4, ValueAtIndex, *v30, UnpackedCopy);
            C3DMeshSetSourceWithInputSet(v10, v33, 0, 255);
            CFRelease(v33);
          }
          ++v30;
          --v14;
        }
        while (v14);
      }
      ++v8;
      v6 = v36;
    }
    while (v8 != Count);
  }
  return 1;
}

uint64_t C3DMorphConvertToCalculationMode(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t Mesh;
  const void *NormalSource;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  const void *v14;
  const void *v15;
  BOOL v16;
  int v17;
  const void *DeltaSource;
  uint64_t AbsoluteSource;
  const void *v20;
  int v21;
  CFIndex Count;
  const void *PositionSource;

  if (*(_DWORD *)(a1 + 64) == a3 || C3DGeometryUsesDeformerBasedDynamicMesh(a2))
    return 0;
  *(_DWORD *)(a1 + 64) = a3;
  Mesh = C3DGeometryGetMesh(a2);
  PositionSource = C3DMeshGetPositionSource(Mesh, 0);
  NormalSource = C3DMeshGetNormalSource(Mesh, 0);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count >= 1)
  {
    v21 = a3;
    for (i = 0; Count != i; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      v13 = C3DGeometryGetMesh((uint64_t)ValueAtIndex);
      v14 = C3DMeshGetPositionSource(v13, 0);
      v15 = C3DMeshGetNormalSource(v13, 0);
      if (v15)
        v16 = NormalSource == 0;
      else
        v16 = 1;
      v17 = !v16;
      if (v21 == 1)
      {
        DeltaSource = (const void *)C3DMeshSourceCreateDeltaSource((uint64_t)PositionSource, (uint64_t)v14);
        if (v17)
        {
          AbsoluteSource = C3DMeshSourceCreateDeltaSource((uint64_t)NormalSource, (uint64_t)v15);
          goto LABEL_17;
        }
      }
      else
      {
        DeltaSource = (const void *)C3DMeshSourceCreateAbsoluteSource((uint64_t)PositionSource, (uint64_t)v14);
        if (v17)
        {
          AbsoluteSource = C3DMeshSourceCreateAbsoluteSource((uint64_t)NormalSource, (uint64_t)v15);
LABEL_17:
          v20 = (const void *)AbsoluteSource;
          if (DeltaSource)
            goto LABEL_20;
          goto LABEL_23;
        }
      }
      v20 = 0;
      if (DeltaSource)
      {
LABEL_20:
        if (a4)
          (*(void (**)(uint64_t, const void *, const void *, const void *))(a4 + 16))(a4, ValueAtIndex, v14, DeltaSource);
        C3DMeshSetSourceWithInputSet(v13, DeltaSource, 0, 255);
        CFRelease(DeltaSource);
      }
LABEL_23:
      if (v20)
      {
        if (a4)
          (*(void (**)(uint64_t, const void *, const void *, const void *))(a4 + 16))(a4, ValueAtIndex, v15, v20);
        C3DMeshSetSourceWithInputSet(v13, v20, 0, 255);
        CFRelease(v20);
      }
    }
  }
  return 1;
}

uint64_t C3DMorphIsUsingSparseTargets(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 193);
}

uint64_t __C3DMorphGetState(uint64_t a1)
{
  return *(unsigned int *)(a1 + 188);
}

const UInt8 *C3DMorphGetRuntimeWeights(uint64_t a1, _DWORD *a2)
{
  const UInt8 *result;
  int v5;
  float v6;
  uint64_t v7;
  _QWORD *Accessor;

  result = *(const UInt8 **)(a1 + 168);
  if (result
    || (v5 = *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144)) != 0
    && (*(_QWORD *)(a1 + 168) = malloc_type_malloc(4 * (*(_DWORD *)(a1 + 88) + v5), 0x100004052888210uLL), __morphWeightsHaveChanged(a1, v6), (result = *(const UInt8 **)(a1 + 168)) != 0))
  {
    *a2 = *(_DWORD *)(a1 + 112) + *(_DWORD *)(a1 + 92) + *(_DWORD *)(a1 + 144) + *(_DWORD *)(a1 + 88);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (!v7)
    {
      if (*(_QWORD *)(a1 + 72))
      {
        _setupWeights(a1, 0);
        v7 = *(_QWORD *)(a1 + 80);
      }
      else
      {
        v7 = 0;
      }
    }
    Accessor = (_QWORD *)C3DGenericSourceGetAccessor(v7);
    *a2 = C3DSourceAccessorGetCount((uint64_t)Accessor);
    return C3DSourceAccessorGetValuePtrAtIndex(Accessor, 0);
  }
  return result;
}

uint64_t C3DMorphGetIndexOfTargetWithName(uint64_t a1, void *key)
{
  const __CFDictionary *v4;
  __CFArray *v5;
  const __CFArray *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  CFIndex Count;
  char *v10;
  char *i;
  const void *ValueAtIndex;
  const void *Name;
  NSObject *v14;
  void *value;
  uint8_t v17[4];
  _DWORD v18[7];

  *(_QWORD *)&v18[5] = *MEMORY[0x1E0C80C00];
  v4 = *(const __CFDictionary **)(a1 + 176);
  if (!v4)
  {
    v5 = C3DMorphCopyMainTargets(a1);
    if (!v5)
      return -1;
    v6 = v5;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
    Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      v10 = (char *)Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, (CFIndex)i);
        Name = (const void *)C3DGeometryGetName((uint64_t)ValueAtIndex);
        if (!Name)
        {
          v14 = scn_default_log();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
            C3DMorphGetIndexOfTargetWithName_cold_1(v17, v18, v14);
        }
        CFDictionaryAddValue(Mutable, Name, i);
      }
    }
    *(_QWORD *)(a1 + 176) = CFDictionaryCreateCopy(v7, Mutable);
    CFRelease(Mutable);
    CFRelease(v6);
    v4 = *(const __CFDictionary **)(a1 + 176);
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(v4, key, (const void **)&value))
    return (uint64_t)value;
  else
    return -1;
}

uint64_t C3DMorphGetClearCPUDataAfterUpload(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 194);
}

void C3DMorphSetClearCPUDataAfterUpload(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 194) = a2;
}

float C3DMorphGetWeightIncrementalThreshold(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(float *)(a1 + 184);
}

void C3DMorphSetWeightIncrementalThreshold(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 184) = a2;
}

id _C3DMorphCFFinalize(uint64_t a1)
{
  uint64_t SharedInstance;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;

  SharedInstance = C3DNotificationCenterGetSharedInstance();
  C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationMorphWillDie"), (const void *)a1, 0, 1u);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    C3DGenericSourceSetListener(v3, a1);
  v4 = *(const void **)(a1 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v5 = *(const void **)(a1 + 80);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v6 = *(const void **)(a1 + 176);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 176) = 0;
  }
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 120));
  free(*(void **)(a1 + 136));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 160));
  return C3DEntityCFFinalize(a1);
}

__CFString *_C3DMorphCFCopyDebugDescription(uint64_t a1)
{
  __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  __CFString *Mutable;
  uint64_t Name;
  CFIndex i;
  const void *ValueAtIndex;
  float WeightAtIndex;

  v2 = C3DMorphCopyMainTargets(a1);
  v3 = v2;
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Name = C3DEntityGetName(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DMorph %p \"%@\"\n"), a1, Name);
  CFStringAppendFormat(Mutable, 0, CFSTR("  calc:%d morphNrm:%d targets:%ld\n"), *(unsigned int *)(a1 + 64), *(unsigned __int8 *)(a1 + 192), Count);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
      WeightAtIndex = C3DMorphGetWeightAtIndex(a1, i);
      CFStringAppendFormat(Mutable, 0, CFSTR("[%ld] weight:%f %@\n"), i, WeightAtIndex, ValueAtIndex);
    }
  }
  CFStringAppend(Mutable, CFSTR(">"));
  if (v3)
    CFRelease(v3);
  return Mutable;
}

BOOL _C3DMorphInitWithPropertyList(uint64_t a1, const __CFDictionary *a2, uint64_t a3, CFErrorRef *a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFNumber *Value;
  int v16;
  NSObject *v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 valuePtr;

  if ((C3DEntityInitWithPropertyList(a1, a2) & 1) != 0)
  {
    if (!a1)
    {
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        C3DMorphGetWeightCount_cold_2(v7, v8, v9, v10, v11, v12, v13, v14);
    }
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("morphingType"));
    if (Value)
    {
      valuePtr = 0;
      if (CFNumberGetValue(Value, kCFNumberShortType, &valuePtr))
      {
        v16 = 0;
        *(_DWORD *)(a1 + 64) = valuePtr;
        return v16 == 0;
      }
      v33 = scn_default_log();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        _C3DMorphInitWithPropertyList_cold_2((uint64_t)a2, v33, v34, v35, v36, v37, v38, v39);
        if (a4)
        {
LABEL_15:
          if (!*a4)
            *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
        }
LABEL_17:
        v16 = 1;
        return v16 == 0;
      }
    }
    else
    {
      v26 = scn_default_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        _C3DMorphInitWithPropertyList_cold_1((uint64_t)a2, v26, v27, v28, v29, v30, v31, v32);
        if (a4)
          goto LABEL_15;
        goto LABEL_17;
      }
    }
    if (a4)
      goto LABEL_15;
    goto LABEL_17;
  }
  v17 = scn_default_log();
  result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (result)
  {
    _C3DMorphInitWithPropertyList_cold_4(v17, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  return result;
}

__CFDictionary *_C3DMorphCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFNumberRef v14;
  __CFArray *Mutable;
  CFIndex v16;
  const void *ValueAtIndex;
  const void *Mesh;
  CFNumberRef v19;
  CFNumberRef v20;
  void *OwnData;
  CFDictionaryRef *valuePtr;

  v5 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  valuePtr = C3DLibraryGetEntryID(a2, *(CFTypeRef *)(a1 + 80));
  v14 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFDictionarySetValue(v5, CFSTR("weightsID"), v14);
  CFRelease(v14);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 72)) >= 1)
  {
    v16 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v16);
      Mesh = (const void *)C3DGeometryGetMesh((uint64_t)ValueAtIndex);
      valuePtr = 0;
      valuePtr = C3DLibraryGetEntryID(a2, Mesh);
      v19 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
      CFArrayAppendValue(Mutable, v19);
      CFRelease(v19);
      ++v16;
    }
    while (v16 < CFArrayGetCount(*(CFArrayRef *)(a1 + 72)));
  }
  CFDictionarySetValue(v5, CFSTR("targetIDs"), Mutable);
  CFRelease(Mutable);
  LOWORD(valuePtr) = *(_DWORD *)(a1 + 64);
  v20 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  CFDictionarySetValue(v5, CFSTR("morphingType"), v20);
  CFRelease(v20);
  OwnData = C3DGenericSourceGetOwnData(*(_QWORD *)(a1 + 80));
  CFDictionarySetValue(v5, CFSTR("weightsData"), OwnData);
  return v5;
}

const __CFArray *_C3DMorphFinalizeDeserialization(uint64_t a1, uint64_t a2, const __CFDictionary *a3, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *result;
  const __CFArray *v17;
  CFIndex v18;
  const __CFNumber *ValueAtIndex;
  uint64_t v20;
  uint64_t TypeID;
  uint64_t RemappedID;
  const void *v23;
  void *v24;
  uint64_t *Entry;
  const void *v26;
  const __CFArray *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  void *v32;
  _QWORD *v33;
  const void *Value;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t valuePtr;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  *(_QWORD *)(a1 + 72) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  result = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("targetIDs"));
  if (result)
  {
    v17 = result;
    if (CFArrayGetCount(result) >= 1)
    {
      v18 = 0;
      do
      {
        valuePtr = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v17, v18);
        if (!CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr))
          return 0;
        v20 = valuePtr;
        TypeID = C3DMeshGetTypeID();
        RemappedID = C3DLibraryGetRemappedID(a2, v20, TypeID);
        if (!RemappedID)
        {
          v35 = scn_default_log();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            goto LABEL_20;
          _C3DMorphFinalizeDeserialization_cold_1((uint64_t)&valuePtr, v35, v36, v37, v38, v39, v40, v41);
          if (a4)
            goto LABEL_21;
          return 0;
        }
        v23 = (const void *)RemappedID;
        v24 = (void *)C3DMeshGetTypeID();
        Entry = C3DLibraryGetEntry(a2, v24, v23);
        v26 = (const void *)C3DGeometryCreate();
        C3DGeometrySetMesh((uint64_t)v26, Entry);
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), v26);
        CFRelease(v26);
      }
      while (++v18 < CFArrayGetCount(v17));
    }
    v27 = *(const __CFArray **)(a1 + 72);
    if (v27)
      LODWORD(v27) = CFArrayGetCount(v27);
    *(_DWORD *)(a1 + 88) = (_DWORD)v27;
    result = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("weightsID"));
    if (result)
    {
      valuePtr = 0;
      if (CFNumberGetValue(result, kCFNumberLongType, &valuePtr))
      {
        v28 = valuePtr;
        v29 = C3DGenericSourceGetTypeID();
        v30 = C3DLibraryGetRemappedID(a2, v28, v29);
        if (v30)
        {
          v31 = (const void *)v30;
          v32 = (void *)C3DGenericSourceGetTypeID();
          v33 = C3DLibraryGetEntry(a2, v32, v31);
          Value = CFDictionaryGetValue(a3, CFSTR("weightsData"));
          C3DGenericSourceSetData((uint64_t)v33, Value);
          C3DMorphSetWeightsSource(a1, v33);
          return (const __CFArray *)1;
        }
        v42 = scn_default_log();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          _C3DMorphFinalizeDeserialization_cold_2((uint64_t)&valuePtr, v42, v43, v44, v45, v46, v47, v48);
          if (a4)
          {
LABEL_21:
            if (!*a4)
              *a4 = C3DSceneSourceCreateMalformedDocumentError(0);
          }
        }
        else
        {
LABEL_20:
          if (a4)
            goto LABEL_21;
        }
      }
      return 0;
    }
  }
  return result;
}

CFIndex _C3DMorphFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v9;
  const void *v10;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      C3DLibraryAddEntry(a2, ValueAtIndex);
      v9 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      C3DFillLibraryForSerialization(v9, a2, a3);
      result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    }
  }
  v10 = *(const void **)(a1 + 80);
  if (v10)
  {
    C3DLibraryAddEntry(a2, v10);
    return (CFIndex)C3DFillLibraryForSerialization(*(const void **)(a1 + 80), a2, a3);
  }
  return result;
}

uint64_t _C3DMorphSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;
  const void *v6;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  v6 = *(const void **)(a1 + 80);
  if (!v6)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      _setupWeights(a1, 0);
      v6 = *(const void **)(a1 + 80);
    }
    else
    {
      v6 = 0;
    }
  }
  return C3DSearchByID(v6, (uint64_t)a2);
}

__CFArray *_C3DMorphCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFString *Name;
  CFStringRef v9;
  __CFDictionary *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  const void *v15;
  int v16;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(const __CFArray **)(a1 + 72);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        Name = (const __CFString *)C3DGeometryGetName((uint64_t)ValueAtIndex);
        if (Name)
        {
          v9 = Name;
          CFRetain(Name);
        }
        else
        {
          v9 = CFStringCreateWithFormat(0, 0, CFSTR("<unnamed %d>"), i);
        }
        v10 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v16 = 1;
        valuePtr = 5;
        v15 = ValueAtIndex;
        v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
        v12 = CFNumberCreate(0, kCFNumberSInt32Type, &v16);
        v13 = CFNumberCreate(0, kCFNumberLongType, &v15);
        CFDictionarySetValue(v10, CFSTR("name"), v9);
        CFDictionarySetValue(v10, CFSTR("type"), v11);
        CFDictionarySetValue(v10, CFSTR("address"), v13);
        CFDictionarySetValue(v10, CFSTR("semantic"), v12);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v12);
        CFRelease(v10);
        CFRelease(v13);
        CFRelease(v11);
        CFRelease(v9);
      }
    }
  }
  return Mutable;
}

void _C3DMorphEnumerateSubEntities(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 72) && (_setupWeights(a1, 0), *(_QWORD *)(a1 + 80)))
      (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
}

void __evaluateRuntimeWeightsForInBetween(uint64_t a1, _DWORD *a2, unsigned int *a3, unsigned int a4, uint64_t a5, unsigned int a6, float a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  float v17;
  int v18;
  NSObject *v19;

  v7 = *a2;
  v8 = *a3;
  if (a4 >= 2)
  {
    v10 = 0;
    v11 = 0;
    v12 = a6 - v7;
    if (a6 < v7)
      v12 = 0;
    v13 = a1 + 4 * v7;
    while (1)
    {
      if (v12 == (_DWORD)v10)
      {
        v19 = scn_default_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          __evaluateRuntimeWeightsForInBetween_cold_1(v7 + v10, a6, v19);
        return;
      }
      v14 = v10 - a4;
      if ((v11 & 1) != 0)
        break;
      if (a7 >= 1.0)
      {
        if (v14 == -1)
        {
          *(float *)(v13 + 4 * v10) = a7;
          goto LABEL_20;
        }
      }
      else
      {
        if (v14 == -1)
          v15 = 1.0;
        else
          v15 = *(float *)(a5 + 4 * v8);
        if (v15 >= a7)
        {
          if ((_DWORD)v10)
          {
            v16 = *(float *)(a5 + 4 * (v8 - 1));
            v17 = (float)(a7 - v16) / (float)(v15 - v16);
            *(float *)(a1 + 4 * (v7 - 1 + v10)) = 1.0 - v17;
          }
          else
          {
            v17 = a7 / v15;
          }
          *(float *)(v13 + 4 * v10) = v17;
          goto LABEL_20;
        }
      }
      v11 = 0;
      *(_DWORD *)(v13 + 4 * v10) = 0;
LABEL_21:
      if (v14 != -1)
        ++v8;
      if ((_DWORD)++v10 == a4)
      {
        v18 = v7 + v10;
        goto LABEL_26;
      }
    }
    *(_DWORD *)(v13 + 4 * v10) = 0;
LABEL_20:
    v11 = 1;
    goto LABEL_21;
  }
  v18 = v7 + 1;
  *(float *)(a1 + 4 * v7) = a7;
LABEL_26:
  *a2 = v18;
  *a3 = v8;
}

C3D::ConvertCubePass *C3D::ConvertCubePass::ConvertCubePass(C3D::ConvertCubePass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  C3D::RenderPass *v6;
  uint64_t RenderContext;
  BOOL v8;

  v6 = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)v6 = off_1EA5991C8;
  *((_WORD *)v6 + 120) = *(_WORD *)&a4->var0;
  snprintf((char *)v6 + 256, 0x40uLL, "ConvertCubePass-%sTo%s", off_1EA5A3650[a4->var0], off_1EA5A3650[a4->var1]);
  if (!*((_BYTE *)this + 241))
  {
    RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
    v8 = (-[SCNMTLRenderContext features](RenderContext) & 0x20) != 0;
    *((_BYTE *)this + 117) = v8;
    *((_BYTE *)this + 118) = v8;
    *((_WORD *)this + 19) = 6;
  }
  return this;
}

uint64_t C3D::ConvertCubePass::name(C3D::ConvertCubePass *this)
{
  return (uint64_t)this + 256;
}

void C3D::ConvertCubePass::setup(C3D::ConvertCubePass *this)
{
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
}

void C3D::ConvertCubePass::compile(C3D::ConvertCubePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::PassDescriptor *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  C3D::RenderGraphResourceManager *v9;
  uint64_t v10;
  _QWORD *v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __CFString *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
  v5 = (C3D::PassDescriptor *)C3D::Pass::descriptor(this);
  v6 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v5, 0) + 28);
  v7 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::ConvertCubePass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))));
  v8 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  v9 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v10 = C3D::RenderGraphResourceManager::get(v9, v8);
  *((_QWORD *)this + 31) = v10;
  if (!v10)
  {
    v11 = (_QWORD *)operator new();
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_1EA5991A8;
    *((_QWORD *)this + 31) = v11;
    C3D::RenderGraphResourceManager::set((uint64_t)v9, v8, (uint64_t)v11);
    v12 = (-[SCNMTLRenderContext features](RenderContext) & 0x400) != 0
        ? CFSTR("scn_draw_fullscreen_cube")
        : CFSTR("scn_draw_fullscreen_cube_no_base");
    v13 = (-[SCNMTLRenderContext features](RenderContext) & 0x20) != 0 ? CFSTR("scn_draw_fullscreen_cube_layered") : v12;
    v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("scn_convert_%s_from_%s_frag"), off_1EA5A3668[*((unsigned __int8 *)this + 241)], off_1EA5A3668[*((unsigned __int8 *)this + 240)]);
    v15 = *((_QWORD *)this + 31);
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0;
    v36 = 0u;
    v37 = 0;
    v21 = v4;
    v22 = v6;
    LOBYTE(v32) = 3;
    v34 = v13;
    v35 = (unint64_t)v14;
    v16 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v19);
    v17 = *(void **)(v15 + 16);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v15 + 16) = v18;
    }
  }
}

uint64_t C3D::ConvertCubePass::execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _BOOL4 IsArray;
  uint64_t ArrayElementType;
  uint64_t v9;
  uint64_t RenderContext;

  v4 = *(_QWORD *)a2;
  v5 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 248) + 16), "state");
  if (*(_QWORD *)(v4 + 3376) != v5)
  {
    *(_QWORD *)(v4 + 3376) = v5;
    objc_msgSend(*(id *)(v4 + 3392), "setRenderPipelineState:", v5);
  }
  v6 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  IsArray = SCNMTLTextureTypeIsArray(objc_msgSend(v6, "textureType"));
  ArrayElementType = SCNMTLTextureTypeGetArrayElementType(objc_msgSend(v6, "textureType"));
  if (*(_WORD *)(a2 + 18) || IsArray)
  {
    if (*(_BYTE *)(a1 + 240))
      v9 = 1;
    else
      v9 = 6;
    v6 = (void **)(id)objc_msgSend(v6, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v6, "pixelFormat"), ArrayElementType, *(unsigned __int16 *)(a2 + 18), 1, 0, v9);
  }
  SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v6, 0);
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  if ((-[SCNMTLRenderContext features](RenderContext) & 0x400) != 0)
  {
    if (*(_BYTE *)(a1 + 117) == 1 || !*(_WORD *)(a2 + 16))
      return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v4);
    else
      return SCNMTLRenderCommandEncoder::drawPrimitives((SCNMTLRenderCommandEncoder *)v4, MTLPrimitiveTypeTriangle, 0, 3, 1, *(unsigned __int16 *)(a2 + 16));
  }
  else
  {
    SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v4, (const void *)(a2 + 16), 2uLL, 0);
    SCNMTLRenderCommandEncoder::_bindPendingTextures((SCNMTLRenderCommandEncoder *)v4);
    SCNMTLRenderCommandEncoder::applyChangedStates((SCNMTLRenderCommandEncoder *)v4);
    return objc_msgSend(*(id *)(v4 + 3392), "drawPrimitives:vertexStart:vertexCount:", 3, 0, 3);
  }
}

void C3D::ConvertCubePass::Resource::~Resource(C3D::ConvertCubePass::Resource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA5991A8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA5991A8;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

const __CFArray *__allocateLastWeightsIfNeeded(uint64_t a1)
{
  const __CFArray *result;
  unsigned int v3;

  result = (const __CFArray *)C3DGeometryGetOverrideMaterial(*(_QWORD *)(a1 + 72));
  if (result)
  {
    result = (const __CFArray *)CFArrayGetCount(result);
    v3 = result;
  }
  else
  {
    v3 = 0;
  }
  if (v3 != *(_DWORD *)(a1 + 104))
  {
    free(*(void **)(a1 + 96));
    if (v3)
      result = (const __CFArray *)malloc_type_calloc(v3, 4uLL, 0x100004052888210uLL);
    else
      result = 0;
    *(_QWORD *)(a1 + 96) = result;
    *(_DWORD *)(a1 + 104) = v3;
    *(_DWORD *)(a1 + 88) = 0;
  }
  return result;
}

uint64_t C3DMorpherCreateWith(const void *a1)
{
  uint64_t Instance;

  if (C3DMorpherGetTypeID_onceToken != -1)
    dispatch_once(&C3DMorpherGetTypeID_onceToken, &__block_literal_global_102);
  Instance = C3DTypeCreateInstance_(C3DMorpherGetTypeID_typeID, 0x60uLL);
  C3DMorpherSetMorph(Instance, a1);
  return Instance;
}

void C3DMorpherSetMorph(uint64_t a1, const void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;
  uint64_t *v9;

  v4 = C3DGetSceneRef(a1);
  if (v4)
  {
    v5 = *(void **)(a1 + 72);
    if (v5)
      C3DRemoveSceneRef(v5, v4);
  }
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
  {
    if (!a2)
      goto LABEL_13;
    goto LABEL_11;
  }
  __C3DMorphSetMorpher(v6, 0);
  v7 = *(const void **)(a1 + 72);
  if (v7 == a2)
    goto LABEL_13;
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
  if (a2)
  {
LABEL_11:
    v8 = CFRetain(a2);
    goto LABEL_12;
  }
  v8 = 0;
LABEL_12:
  *(_QWORD *)(a1 + 72) = v8;
LABEL_13:
  free(*(void **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  if (a2)
  {
    __C3DMorphSetMorpher((uint64_t)a2, a1);
    __allocateLastWeightsIfNeeded(a1);
  }
  if (v4)
  {
    v9 = *(uint64_t **)(a1 + 72);
    if (v9)
      C3DAddSceneRef(v9, v4);
  }
}

CFTypeRef *C3DMorpherCreateCopy(uint64_t a1)
{
  const void *Copy;
  CFTypeRef *v3;

  Copy = (const void *)C3DMorphCreateCopy(*(_QWORD *)(a1 + 72));
  v3 = (CFTypeRef *)C3DMorpherCreateWith(Copy);
  CFRelease(Copy);
  C3DEntityCopyTo(a1, v3);
  return v3;
}

uint64_t C3DMorpherResetIncrementalCount(uint64_t result)
{
  *(_DWORD *)(result + 108) = 0;
  return result;
}

uint64_t C3DMorpherBeginIncrementalPass(uint64_t a1, int a2, _QWORD *a3, const UInt8 **a4, _DWORD *a5, float *a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int State;
  uint64_t v32;
  int v34;

  if (!a1)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  v20 = *(_QWORD *)(a1 + 72);
  if (!v20)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      C3DMorphGetWeightCount_cold_2(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  v29 = *(_DWORD *)(a1 + 108);
  State = __C3DMorphGetState(v20);
  if (v29 != a2 || v29 == 0)
  {
    v32 = 2;
LABEL_16:
    *(_DWORD *)(a1 + 88) = State;
    __allocateLastWeightsIfNeeded(a1);
    *a3 = *(_QWORD *)(a1 + 96);
    v34 = 0;
    *a4 = C3DMorphGetRuntimeWeights(v20, &v34);
    *a5 = v34;
    *a6 = C3DMorphGetIncrementalThreshold(v20);
    return v32;
  }
  if (*(_DWORD *)(a1 + 88) != State)
  {
    v32 = 1;
    goto LABEL_16;
  }
  return 0;
}

uint64_t C3DMorpherEndIncrementalPass(uint64_t a1)
{
  float *RuntimeWeights;
  float IncrementalThreshold;
  uint64_t v4;
  float *v5;
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  RuntimeWeights = (float *)C3DMorphGetRuntimeWeights(*(_QWORD *)(a1 + 72), &v7);
  IncrementalThreshold = C3DMorphGetIncrementalThreshold(*(_QWORD *)(a1 + 72));
  v4 = v7;
  if (v7)
  {
    v5 = *(float **)(a1 + 96);
    do
    {
      if (vabds_f32(*RuntimeWeights, *v5) > IncrementalThreshold)
        *v5 = *RuntimeWeights;
      ++RuntimeWeights;
      ++v5;
      --v4;
    }
    while (v4);
  }
  result = (*(_DWORD *)(a1 + 108) + 1);
  *(_DWORD *)(a1 + 108) = result;
  return result;
}

void _C3DMorpherPrepareMorphedMesh(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL4 EffectiveDataKindForRendering;
  const void *PositionSource;
  const void *NormalSource;
  NSObject *v11;
  const void *v12;
  int v13;
  const void *v14;
  const void *CopyWithBaseType;
  const void *v16;
  const void *v17;

  EffectiveDataKindForRendering = C3DGeometryGetEffectiveDataKindForRendering(*(__C3DGeometry **)(a1 + 64));
  PositionSource = C3DMeshGetPositionSource(a3, EffectiveDataKindForRendering);
  NormalSource = C3DMeshGetNormalSource(a3, EffectiveDataKindForRendering);
  if (!a4)
  {
    v12 = NormalSource;
    if (C3DMeshSourceGetMTLBuffer(PositionSource))
    {
      C3DMeshCopySources(a2, a3);
      PositionSource = C3DMeshGetPositionSource(a3, 1);
      v12 = C3DMeshGetNormalSource(a3, 1);
    }
    if (C3DMeshSourceIsMutable(PositionSource)
      && C3DMeshSourceGetValueType((uint64_t)PositionSource) == 9)
    {
      v13 = 0;
      if (!v12)
        goto LABEL_13;
    }
    else
    {
      v13 = 1;
      v14 = C3DMeshGetPositionSource(a2, 1);
      CopyWithBaseType = (const void *)C3DMeshSourceCreateCopyWithBaseType((uint64_t)v14, 9u, 1);
      __C3DMeshSetRenderableSourceWithInputSetAndPositionChannel(a3, CopyWithBaseType, 0);
      CFRelease(CopyWithBaseType);
      if (!v12)
        goto LABEL_13;
    }
    if (!C3DMeshSourceIsMutable(v12) || C3DMeshSourceGetValueType((uint64_t)v12) != 9)
    {
      v16 = C3DMeshGetNormalSource(a2, 1);
      v17 = (const void *)C3DMeshSourceCreateCopyWithBaseType((uint64_t)v16, 9u, 1);
      __C3DMeshSetRenderableSourceWithInputSetAndPositionChannel(a3, v17, 0);
      CFRelease(v17);
      goto LABEL_16;
    }
LABEL_13:
    if (!v13)
      return;
LABEL_16:
    *(_DWORD *)(a1 + 108) = 0;
    return;
  }
  v11 = scn_default_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    _C3DMorpherPrepareMorphedMesh_cold_1(v11);
}

void C3DMorpherUpdateIfNeeded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int State;
  uint64_t Mesh;
  uint64_t MorphedMeshLegacy;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (*(_QWORD *)(a1 + 72) && !C3DEngineContextIsClusteredShadingEnabled(a3))
  {
    State = __C3DMorphGetState(*(_QWORD *)(a1 + 72));
    if (*(_DWORD *)(a1 + 88) != State)
    {
      *(_DWORD *)(a1 + 88) = State;
      Mesh = C3DGeometryGetMesh(*(_QWORD *)(a1 + 64));
      MorphedMeshLegacy = C3DMorpherGetMorphedMeshLegacy(a1);
      _C3DMorpherPrepareMorphedMesh(a1, Mesh, MorphedMeshLegacy, 0);
      __allocateLastWeightsIfNeeded(a1);
      C3DMorphUpdateCPUMeshIncrementally(*(_QWORD *)(a1 + 72), Mesh, MorphedMeshLegacy, *(float **)(a1 + 96), *(_DWORD *)(a1 + 108) == 0);
      C3DMorpherEndIncrementalPass(a1);
      C3DMeshDidMutate(MorphedMeshLegacy);
      C3DNodeBoundingBoxDidUpdate(a2);
    }
  }
}

uint64_t C3DMorpherGetMorphedMeshLegacy(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t Mesh;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  result = *(_QWORD *)(a1 + 80);
  if (!result)
  {
    result = *(_QWORD *)(a1 + 64);
    if (result)
    {
      Mesh = C3DGeometryGetMesh(result);
      if (Mesh)
      {
        result = C3DMeshCreateCopy(Mesh);
        *(_QWORD *)(a1 + 80) = result;
      }
      else
      {
        return *(_QWORD *)(a1 + 80);
      }
    }
  }
  return result;
}

uint64_t C3DMorpherGetBaseGeometry(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

void C3DMorpherSetBaseGeometry(uint64_t a1, __C3DGeometry *a2)
{
  __C3DGeometry *v2;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __C3DGeometry *v8;
  CFTypeRef v9;
  const void *v10;

  v2 = *(__C3DGeometry **)(a1 + 64);
  if (v2 != a2)
  {
    v5 = C3DGetSceneRef(a1);
    v6 = v5;
    if (v2)
      v7 = v5 == 0;
    else
      v7 = 1;
    if (!v7)
      C3DRemoveSceneRef(v2, v5);
    v8 = *(__C3DGeometry **)(a1 + 64);
    if (v8 != a2)
    {
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(a1 + 64) = 0;
      }
      if (a2)
        v9 = CFRetain(a2);
      else
        v9 = 0;
      *(_QWORD *)(a1 + 64) = v9;
    }
    *(_DWORD *)(a1 + 88) = 0;
    if (a2 && v6)
      C3DAddSceneRef((uint64_t *)a2, v6);
    v10 = *(const void **)(a1 + 80);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (a2)
      C3DMorphCreateTargetNormalsIfNeeded(*(_QWORD *)(a1 + 72), a2);
  }
}

id _C3DMorpherCFFinalize(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    __C3DMorphSetMorpher(v2, 0);
    CFRelease(*(CFTypeRef *)(a1 + 72));
  }
  free(*(void **)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v3 = *(const void **)(a1 + 80);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v4 = *(const void **)(a1 + 64);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return C3DEntityCFFinalize(a1);
}

__CFString *_C3DMorpherCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DMorpher %p baseGeom:%p morphedMesh:%p state:%d\n"), a1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), *(unsigned int *)(a1 + 88));
  CFStringAppendFormat(Mutable, 0, CFSTR("  morph:%@\n"), *(_QWORD *)(a1 + 72));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

BOOL _C3DMorpherInitWithPropertyList(int a1, CFTypeRef cf)
{
  CFTypeID v2;

  v2 = CFGetTypeID(cf);
  return v2 == CFDictionaryGetTypeID();
}

__CFDictionary *_C3DMorpherCopyPropertyList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFDictionaryRef *valuePtr;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = C3DEntityCopyPropertyList((_QWORD *)a1, a2, a3);
  valuePtr = C3DLibraryGetEntryID(a2, *(CFTypeRef *)(a1 + 72));
  v15 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFDictionarySetValue(v14, CFSTR("morphID"), v15);
  CFRelease(v15);
  return v14;
}

uint64_t _C3DMorpherFinalizeDeserialization(uint64_t a1, uint64_t a2, CFDictionaryRef theDict, CFErrorRef *a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFNumber *Value;
  uint64_t TypeID;
  void *v18;
  const void *RemappedID;
  _QWORD *Entry;
  uint64_t result;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFErrorRef MalformedDocumentError;
  int valuePtr;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("morphID"));
  TypeID = C3DMorphGetTypeID();
  if (Value)
  {
    v18 = (void *)TypeID;
    valuePtr = 0;
    if (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
    {
      RemappedID = (const void *)C3DLibraryGetRemappedID(a2, valuePtr, (uint64_t)v18);
      Entry = C3DLibraryGetEntry(a2, v18, RemappedID);
      if (Entry)
      {
        C3DMorpherSetMorph(a1, Entry);
        return 1;
      }
    }
    else
    {
      v30 = scn_default_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        _C3DMorpherFinalizeDeserialization_cold_3(v30, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  else
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      _C3DMorpherFinalizeDeserialization_cold_2(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v38 = scn_default_log();
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    _C3DMorpherFinalizeDeserialization_cold_1(v38, v39, v40, v41, v42, v43, v44, v45);
    if (!a4)
      return 0;
  }
  else if (!a4)
  {
    return 0;
  }
  if (*a4)
    return 0;
  MalformedDocumentError = C3DSceneSourceCreateMalformedDocumentError(0);
  result = 0;
  *a4 = MalformedDocumentError;
  return result;
}

_QWORD *_C3DMorpherFillLibraryForSerialization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DMorpherBeginIncrementalPass_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  C3DLibraryAddEntry(a2, *(const void **)(a1 + 72));
  C3DLibraryAddEntry(a2, *(const void **)(a1 + 64));
  C3DFillLibraryForSerialization(*(const void **)(a1 + 72), a2, a3);
  return C3DFillLibraryForSerialization(*(const void **)(a1 + 64), a2, a3);
}

uint64_t _C3DMorpherSearchByID(uint64_t a1, const void *a2)
{
  const void *ID;

  ID = (const void *)C3DEntityGetID(a1);
  if (C3DEqual(ID, a2))
    return a1;
  else
    return C3DSearchByID(*(const void **)(a1 + 72), (uint64_t)a2);
}

uint64_t _C3DMorpherEnumerateSubEntities(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  v3 = result;
  if (*(_QWORD *)(result + 72))
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (*(_QWORD *)(v3 + 64))
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  return result;
}

__CFArray *_C3DMorpherCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t v8;
  int v9;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = 2;
  valuePtr = 5;
  v8 = a1 + 72;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v8);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("morph"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  return Mutable;
}

CFStringRef _C3DFXContextCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXContext>"));
}

CFStringRef _C3DFXContextCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DFXContext>"));
}

BOOL C3DFXContextSetPostProcessTechnique(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  CFTypeRef v25;
  uint64_t Scene;
  uint64_t FXContext;
  _BOOL8 result;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DFXContextSetPostProcessTechnique_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DEngineContextGetStats_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  *(_BYTE *)(a1 + 121) &= ~0x10u;
  v22 = *(void **)(a1 + 24);
  if (!v22)
  {
    if (!a2)
      goto LABEL_19;
LABEL_13:
    v25 = CFRetain(a2);
    goto LABEL_14;
  }
  v23 = C3DGetScene(*(_QWORD **)(a1 + 24));
  C3DRemoveSceneRef(v22, v23);
  v24 = *(_BYTE **)(a1 + 24);
  if (v24 == a2)
    goto LABEL_15;
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (a2)
    goto LABEL_13;
  v25 = 0;
LABEL_14:
  *(_QWORD *)(a1 + 24) = v25;
LABEL_15:
  if (a2)
  {
    Scene = C3DEngineContextGetScene(a3);
    if (Scene)
      C3DAddSceneRef((uint64_t *)a2, Scene);
    *(_BYTE *)(a1 + 121) = *(_BYTE *)(a1 + 121) & 0xEF | (2 * a2[88]) & 0x10;
  }
LABEL_19:
  FXContext = C3DEngineContextGetFXContext(a3);
  if (FXContext)
    *(_BYTE *)(FXContext + 121) &= ~1u;
  result = C3DFXContextTechniquesDidChange(a1, a3);
  *(_BYTE *)(a1 + 121) |= 2u;
  return result;
}

BOOL C3DFXContextTechniquesDidChange(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXContextSetPostProcessTechnique_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  ++*(_DWORD *)(a1 + 116);
  result = C3DEngineContextHasFeatures(a2, 4);
  if (!result)
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (v13 && C3DFXTechniqueConsumesMainDepth(v13)
      || C3DWasLinkedBeforeMajorOSYear2017()
      && (v14 = *(_QWORD *)(a1 + 48)) != 0
      && C3DFXTechniqueConsumesMainDepth(v14))
    {
      result = 1;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 96);
      if (v15 < 1)
      {
        result = 0;
      }
      else
      {
        for (i = 0; i < v15; ++i)
        {
          result = C3DFXTechniqueConsumesMainDepth(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * i));
          if (result)
            break;
        }
      }
    }
    v17 = *(_QWORD *)(a1 + 248);
    if (v17)
      *(_BYTE *)(v17 + 176) = result;
  }
  return result;
}

BOOL C3DFXContextIsMainPass(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      return *(_QWORD *)(a1 + 248) == a2;
  }
  else if (a2)
  {
    return *(_QWORD *)(a1 + 248) == a2;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXContextIsMainPass_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  return *(_QWORD *)(a1 + 248) == a2;
}

void C3DFXContextBumpTimestamp(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  ++*(_DWORD *)(a1 + 272);
  C3DFramebufferRegistryBumpTimestamp(*(_QWORD *)(a1 + 240));
}

uint64_t C3DFXContextGetCurrentPassInstance(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[22] >= a1[27])
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXContextGetCurrentPassInstance_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1[25] + 8 * a1[22]);
}

uint64_t C3DFXContextGetCurrentPassInstanceAncestor(_QWORD *a1)
{
  return *(_QWORD *)(C3DFXContextGetCurrentPassInstance(a1) + 16);
}

uint64_t C3DFXContextGetFirstPassInstanceWithName(uint64_t a1, CFTypeRef cf1)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  CFTypeRef v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 216);
  if (v3 < 1)
  {
LABEL_5:
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138412290;
      v8 = cf1;
      _os_log_impl(&dword_1DCCB8000, v5, OS_LOG_TYPE_DEFAULT, "Warning: C3DFXContextGetFirstPassInstanceWithGroupID: failed to find pass instance with name (%@)", (uint8_t *)&v7, 0xCu);
    }
    return 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 200);
    while (!CFEqual(cf1, *(CFTypeRef *)(**(_QWORD **)v4 + 16)))
    {
      v4 += 8;
      if (!--v3)
        goto LABEL_5;
    }
    return *(_QWORD *)v4;
  }
}

uint64_t C3DFXContextGetMainPassInstance(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * *(_QWORD *)(a1 + 184));
}

uint64_t C3DFXContextGetMirrorNode(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetScene_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(C3DFXContextGetCurrentPassInstance(a1) + 5104);
}

void C3DFXContextCleanup(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;

  a1[31] = 0;
  v3 = a1[30];
  if (v3)
    C3DFramebufferRegistryCleanup(v3, a2);
  v4 = (const void *)a1[33];
  if (v4)
  {
    CFRelease(v4);
    a1[33] = 0;
  }
}

void C3DFXContextSetup(_QWORD *a1, uint64_t a2)
{
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t FXContext;
  uint64_t v7;
  uint64_t Scene;
  uint64_t v9;
  int WantsHDR;
  _BOOL4 v11;
  uint64_t RenderContext;
  char v13;
  NSObject *v14;
  uint64_t Default;
  int v16;
  uint64_t RootNode;
  const __CFArray *Mutable;
  uint64_t v19;
  uint64_t v20;
  CFIndex Count;
  CFIndex v22;
  const void *ValueAtIndex;
  const void *Technique;
  const void *DepthOfField;
  const void *v26;
  CFTypeRef v27;
  uint64_t v28;
  const __CFSet *RegisteredNodeFilters;
  const __CFSet *v30;
  CFIndex v31;
  CFMutableDictionaryRef v32;
  const void *Authoring;
  const void *v34;
  CFTypeRef v35;
  _QWORD v36[5];
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  PointOfView = C3DEngineContextGetPointOfView(a2);
  if (PointOfView)
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
  else
    Camera = 0;
  FXContext = C3DEngineContextGetFXContext(a2);
  if (FXContext)
  {
    v7 = FXContext;
    __releaseBuiltinTechniques(a1);
    C3DEngineContextSetJitteringStep(a2, 0);
    *(_QWORD *)(v7 + 248) = 0;
    Scene = C3DEngineContextGetScene(a2);
    if (Scene)
    {
      v9 = Scene;
      if (Camera)
      {
        WantsHDR = C3DCameraGetWantsHDR((uint64_t)Camera);
        v11 = C3DCameraGetMotionBlurIntensity((uint64_t)Camera) > 0.0;
        RenderContext = C3DEngineContextGetRenderContext(a2);
        if (WantsHDR)
          v13 = 2;
        else
          v13 = 0;
      }
      else
      {
        RenderContext = C3DEngineContextGetRenderContext(a2);
        v11 = 0;
        WantsHDR = 0;
        v13 = 0;
      }
      *(_BYTE *)(v7 + 112) = *(_BYTE *)(v7 + 112) & 0xFD | v13;
      Default = *(_QWORD *)(v7 + 16);
      if (!Default)
      {
        if (RenderContext)
          v16 = v11;
        else
          v16 = 0;
        Default = C3DFXTechniqueCreateDefault(WantsHDR, v16);
        *(_QWORD *)(v7 + 16) = Default;
      }
      *(_QWORD *)(v7 + 248) = C3DFXTechniqueGetPassAtIndex(Default, 0);
      RootNode = C3DSceneGetRootNode(v9);
      Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = __C3DFXContextSetup_block_invoke;
      v36[3] = &__block_descriptor_40_e315_q16__0____C3DNode____C3DEntity____CFRuntimeBase_QAQ__v____CFString_____CFString_____CFDictionary_____C3DScene_q_____C3DNode_____C3DNode_____C3DNode_i____C3DMatrix4x4__16f__4_____4__________C3DMatrix4x4_BfQib1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b3b1______SS_I_________C3DGeometry_____C3DDeformerStack_f_____8l;
      v36[4] = Mutable;
      C3DNodeApplyHierarchySkippingHiddenNodes(RootNode, (uint64_t)v36);
      v19 = *(_QWORD *)(v7 + 96);
      if (v19)
      {
        if (v19 >= 1)
        {
          v20 = 0;
          do
            CFRelease(*(CFTypeRef *)(*(_QWORD *)(v7 + 80) + 8 * v20++));
          while (v20 < *(_QWORD *)(v7 + 96));
        }
        free(*(void **)(v7 + 80));
        *(_QWORD *)(v7 + 80) = 0;
      }
      Count = CFArrayGetCount(Mutable);
      *(_QWORD *)(v7 + 96) = Count;
      if (Count)
      {
        *(_QWORD *)(v7 + 80) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
        if (*(uint64_t *)(v7 + 96) >= 1)
        {
          v22 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v22);
            *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v22++) = CFRetain(ValueAtIndex);
          }
          while (v22 < *(_QWORD *)(v7 + 96));
        }
      }
      CFRelease(Mutable);
      if (Camera && C3DWasLinkedBeforeMajorOSYear2017())
      {
        Technique = (const void *)C3DCameraGetTechnique((uint64_t)Camera);
        if (Technique)
        {
          DepthOfField = Technique;
          CFRetain(Technique);
        }
        else if (C3DCameraHasDepthOfField((uint64_t)Camera))
        {
          DepthOfField = (const void *)C3DFXTechniqueCreateDepthOfField();
        }
        else
        {
          DepthOfField = 0;
        }
        v26 = *(const void **)(v7 + 48);
        if (v26 != DepthOfField)
        {
          if (v26)
          {
            CFRelease(v26);
            *(_QWORD *)(v7 + 48) = 0;
          }
          if (DepthOfField)
            v27 = CFRetain(DepthOfField);
          else
            v27 = 0;
          *(_QWORD *)(v7 + 48) = v27;
        }
        if (DepthOfField)
          CFRelease(DepthOfField);
      }
      v28 = C3DEngineContextGetScene(a2);
      C3DSceneClearRegisteredCIFilterTechniques(v28);
      RegisteredNodeFilters = (const __CFSet *)C3DSceneGetRegisteredNodeFilters(v9);
      if (RegisteredNodeFilters)
      {
        v30 = RegisteredNodeFilters;
        v31 = CFSetGetCount(RegisteredNodeFilters);
        v32 = CFDictionaryCreateMutable(0, v31, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        context[0] = v32;
        context[1] = a2;
        CFSetApplyFunction(v30, (CFSetApplierFunction)_addCIFilterSubPasses, context);
        CFRelease(v32);
      }
      C3DEngineContextSetJitteringEnabled(a2, 0);
      if (C3DEngineContextGetAuthoringEnvironment(a2, 0))
      {
        Authoring = (const void *)C3DFXTechniqueCreateAuthoring();
        v34 = *(const void **)(v7 + 88);
        if (v34 != Authoring)
        {
          if (v34)
          {
            CFRelease(v34);
            *(_QWORD *)(v7 + 88) = 0;
          }
          if (Authoring)
            v35 = CFRetain(Authoring);
          else
            v35 = 0;
          *(_QWORD *)(v7 + 88) = v35;
        }
        if (Authoring)
          CFRelease(Authoring);
      }
      C3DFXContextTechniquesDidChange(v7, a2);
    }
  }
  else
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      C3DFXContextSetup_cold_1();
  }
}

_QWORD *_addCIFilterSubPasses(void *a1, uint64_t a2)
{
  return _addCIFilterSubTechniquesForNode(a1, *(_QWORD *)(a2 + 8), *(const __CFDictionary **)a2);
}

uint64_t C3DFXContextGetFramebufferRegistry(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXContextSetPostProcessTechnique_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 240);
}

uint64_t C3DFXContextGetOutputColorTexture(uint64_t a1, __n128 *a2)
{
  uint64_t CurrentResolvedFramebuffer;
  uint64_t v4;
  uint64_t RendererContextGL;
  const void *RenderTarget;

  CurrentResolvedFramebuffer = _C3DFXContextGetCurrentResolvedFramebuffer(a1, a2, 1, 0);
  if (CurrentResolvedFramebuffer
    && (v4 = CurrentResolvedFramebuffer,
        RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a2),
        C3DRendererContextRestoreFramebuffer(RendererContextGL),
        (RenderTarget = C3DFramebufferGetRenderTarget(v4, 0)) != 0))
  {
    return C3DRenderTargetGetTexture((uint64_t)RenderTarget);
  }
  else
  {
    return 0;
  }
}

uint64_t _C3DFXContextGetCurrentResolvedFramebuffer(uint64_t a1, __n128 *a2, int a3, int a4)
{
  uint64_t FramebufferForPass;
  int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t RendererContextGL;
  __CFString *PassIdentifierForPass;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;

  FramebufferForPass = *(_QWORD *)(a1 + 152);
  if (!FramebufferForPass
    || (!a4 ? (v9 = 0) : (v9 = 2),
        ((v9 | a3) & ~(*(unsigned __int8 *)(a1 + 168) | (2 * *(unsigned __int8 *)(a1 + 169)))) != 0))
  {
    v10 = *(_QWORD *)(a1 + 144);
    v11 = *(_QWORD *)(a1 + 160);
    if (!v11 && (v12 = scn_default_log(), os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
    {
      C3DFXContextIsMainPass_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
      if (v10)
      {
LABEL_9:
        RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a2);
        if (C3DFramebufferGetSampleCount(v10) < 2)
        {
          FramebufferForPass = v10;
LABEL_22:
          *(_QWORD *)(a1 + 152) = FramebufferForPass;
LABEL_23:
          if (!a3)
            goto LABEL_25;
          goto LABEL_24;
        }
        if ((C3DFramebufferRegistryGetEnableRecycling() & 1) != 0)
        {
          PassIdentifierForPass = 0;
        }
        else
        {
          v22 = *(unsigned int *)(a1 + 288);
          *(_DWORD *)(a1 + 288) = v22 + 1;
          PassIdentifierForPass = _createPassIdentifierForPass(v11, RendererContextGL, 1, v22);
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 280), PassIdentifierForPass);
          CFRelease(PassIdentifierForPass);
        }
        FramebufferForPass = *(_QWORD *)(a1 + 152);
        if (!FramebufferForPass)
          FramebufferForPass = C3DFXContextGetFramebufferForPass(a1, v11, a2, 1, PassIdentifierForPass);
        v23 = C3DEngineContextGetRendererContextGL((uint64_t)a2);
        C3DRendererContextSetEnableWriteToDepth(v23, 1);
        if (a3)
        {
          v24 = *(_BYTE *)(a1 + 168) == 0;
          if (!a4)
          {
LABEL_18:
            v25 = 0;
            goto LABEL_21;
          }
        }
        else
        {
          v24 = 0;
          if (!a4)
            goto LABEL_18;
        }
        v25 = *(_BYTE *)(a1 + 169) == 0;
LABEL_21:
        C3DRendererContextResolveFramebuffer(RendererContextGL, FramebufferForPass, v10, v24, v25, 0);
        if (!FramebufferForPass)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    else if (v10)
    {
      goto LABEL_9;
    }
    FramebufferForPass = 0;
    if (!a3)
    {
LABEL_25:
      if (a4)
        *(_BYTE *)(a1 + 169) = 1;
      return FramebufferForPass;
    }
LABEL_24:
    *(_BYTE *)(a1 + 168) = 1;
    goto LABEL_25;
  }
  return FramebufferForPass;
}

uint64_t C3DFXContextGetOutputDepthTexture(uint64_t a1, __n128 *a2)
{
  uint64_t CurrentResolvedFramebuffer;
  uint64_t v4;
  uint64_t RendererContextGL;
  const void *RenderTarget;

  CurrentResolvedFramebuffer = _C3DFXContextGetCurrentResolvedFramebuffer(a1, a2, 0, 1);
  if (CurrentResolvedFramebuffer
    && (v4 = CurrentResolvedFramebuffer,
        RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a2),
        C3DRendererContextRestoreFramebuffer(RendererContextGL),
        (RenderTarget = C3DFramebufferGetRenderTarget(v4, 4)) != 0))
  {
    return C3DRenderTargetGetTexture((uint64_t)RenderTarget);
  }
  else
  {
    return 0;
  }
}

uint64_t C3DFXContextGetOutputFramebuffer(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXContextSetPostProcessTechnique_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 144);
}

void _C3DFXViewportDidChange(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *FXContext;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  FXContext = (_QWORD *)C3DEngineContextGetFXContext((uint64_t)a1);
  C3DFramebufferRegistryViewportDidResize(FXContext[30], (uint64_t)a1);
  v11 = FXContext[2];
  if (v11)
    _reshape(v11, a1);
  v12 = FXContext[5];
  if (v12)
    _reshape(v12, a1);
  v13 = FXContext[3];
  if (v13)
    _reshape(v13, a1);
  v14 = FXContext[7];
  if (v14)
    _reshape(v14, a1);
  v15 = FXContext[11];
  if (v15)
    _reshape(v15, a1);
  v16 = FXContext[6];
  if (v16)
    _reshape(v16, a1);
  v17 = FXContext[4];
  if (v17)
    _reshape(v17, a1);
  v18 = FXContext[9];
  if (v18)
    _reshape(v18, a1);
  if ((uint64_t)FXContext[12] >= 1)
  {
    v19 = 0;
    do
      _reshape(*(_QWORD *)(FXContext[10] + 8 * v19++), a1);
    while (v19 < FXContext[12]);
  }
}

void _reshape(uint64_t a1, __n128 *a2)
{
  uint64_t PassCount;
  uint64_t i;
  uint64_t PassAtIndex;
  uint64_t v7;
  _QWORD v8[11];

  PassCount = C3DFXTechniqueGetPassCount(a1);
  C3DEngineContextGetViewport(a2);
  if (PassCount >= 1)
  {
    for (i = 0; i != PassCount; ++i)
    {
      PassAtIndex = C3DFXTechniqueGetPassAtIndex(a1, i);
      if ((*(_BYTE *)(PassAtIndex + 187) & 8) != 0)
      {
        v8[0] = PassAtIndex;
        v8[1] = a1;
        v8[2] = 0;
        v8[3] = a2;
        v8[4] = 0;
        v8[5] = 0;
        v7 = *(_QWORD *)(PassAtIndex + 280);
        v8[6] = 0xBFF0000000000000;
        v8[7] = v7;
        memset(&v8[8], 0, 24);
        C3DFXPassReshape((uint64_t)v8);
      }
    }
  }
}

void C3DFXContextResolveNodeReferences(_QWORD *a1, uint64_t a2)
{
  uint64_t RootNode;
  uint64_t v4;
  uint64_t v5;
  const void *NodeWithName;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  RootNode = C3DSceneGetRootNode(a2);
  v4 = RootNode;
  v5 = a1[61];
  if (v5)
  {
    NodeWithName = (const void *)C3DNodeGetNodeWithName(RootNode, v5);
    C3DFXPassSetRootNode((uint64_t)a1, NodeWithName);
    v7 = (const void *)a1[61];
    if (v7)
    {
      CFRelease(v7);
      a1[61] = 0;
    }
  }
  v8 = a1[62];
  if (v8)
  {
    v9 = (const void *)C3DNodeGetNodeWithName(v4, v8);
    C3DFXPassSetMirrorNode((uint64_t)a1, v9);
    v10 = (const void *)a1[62];
    if (v10)
    {
      CFRelease(v10);
      a1[62] = 0;
    }
  }
  v11 = a1[63];
  if (v11)
  {
    v12 = C3DNodeGetNodeWithName(v4, v11);
    C3DFXPassSetPointOfView((uint64_t)a1, v12);
    v13 = (const void *)a1[63];
    if (v13)
    {
      CFRelease(v13);
      a1[63] = 0;
    }
  }
}

uint64_t C3DEngineContextRenderSubTechnique(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t i;
  uint64_t PassAtIndex;
  NSObject *v44;
  uint8_t v45[4];
  _DWORD v46[7];

  *(_QWORD *)&v46[5] = *MEMORY[0x1E0C80C00];
  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetStats_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a3)
      goto LABEL_6;
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DEngineContextRenderSubTechnique_cold_4(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  if (!a2)
  {
    v24 = scn_default_log();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  if ((*(_BYTE *)(a2 + 88) & 2) != 0)
  {
    v32 = scn_default_log();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderSubTechnique_cold_2(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  *(_BYTE *)(a2 + 88) |= 2u;
  result = C3DFXTechniqueGetPassCount(a2);
  if (result >= 1)
  {
    v41 = result;
    for (i = 0; i != v41; ++i)
    {
      PassAtIndex = C3DFXTechniqueGetPassAtIndex(a2, i);
      result = C3DFXPassIsTopLevel(PassAtIndex);
      if ((result & 1) == 0)
      {
        if (*(_DWORD *)(PassAtIndex + 24) == 3)
        {
          v44 = scn_default_log();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT))
            C3DEngineContextRenderSubTechnique_cold_1(v45, v46, v44);
        }
        result = __C3DEngineContextRenderPassInstance(a1, a3, PassAtIndex, a4, 0, 0, 0);
      }
    }
  }
  *(_BYTE *)(a2 + 88) &= ~2u;
  return result;
}

void __C3DEngineContextRenderPassInstance(__n128 *a1, uint64_t *a2, uint64_t a3, uint64_t Player, int a5, int a6, uint64_t a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t Node;
  unsigned int (*v39)(uint64_t, uint64_t);
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t FXContext;
  double SceneTime;
  int DrawInstruction;
  void *Program;
  uint64_t RendererContextGL;
  uint64_t RendererElementState;
  uint64_t ResourceManager;
  const char *CString;
  const char *v56;
  int v58;
  _QWORD *ProgramResident;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t UniformLocationOfSymbolNamed;
  uint64_t v70;
  _QWORD *v71;
  uint64_t UniformIndex;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __CFString *PassIdentifierForPass;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t FramebufferForPass;
  double Size;
  void *BoundFramebuffer;
  __n128 Viewport;
  NSObject *v93;
  int v94;
  GLbitfield v95;
  uint64_t MainClearColor;
  uint64_t Scene;
  uint64_t BackgroundEffectSlot;
  uint64_t *ColorIfApplicable;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t BlendStates;
  _BOOL4 v111;
  uint64_t RasterizerStates;
  uint64_t RenderCallbacks;
  void (*v114)(__n128 *);
  uint64_t v115;
  void *UserInfo;
  id AuthoringEnvironment;
  uint64_t CurrentResolvedFramebuffer;
  uint64_t v119;
  int v120;
  const void *RenderTarget;
  const void *v122;
  uint64_t v123;
  uint64_t i;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  const __CFString *v129;
  NSObject *v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  double v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  __n128 *v151;
  uint64_t *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t v159;

  if (!a1 && (v14 = scn_default_log(), os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetStats_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v22 = scn_default_log();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    C3DEngineContextRenderSubTechnique_cold_4(v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_6:
  if (a3 || (v30 = scn_default_log(), !os_log_type_enabled(v30, OS_LOG_TYPE_FAULT)))
  {
    if (!a6)
      goto LABEL_10;
    goto LABEL_9;
  }
  C3DFXContextIsMainPass_cold_1(v30, v31, v32, v33, v34, v35, v36, v37);
  if (a6)
LABEL_9:
    Player = C3DAnimationNodeGetPlayer(a3);
LABEL_10:
  if (Player)
    Node = C3DRendererElementGetNode(Player);
  else
    Node = 0;
  v39 = *(unsigned int (**)(uint64_t, uint64_t))(a3 + 232);
  if (v39 && !v39(a3, Node))
    return;
  v145 = *(_QWORD *)(a3 + 40);
  v146 = Node;
  if (!v145)
  {
    v40 = scn_default_log();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
      C3DFXTechniqueAppendPass_cold_3(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  v139 = a5;
  v143 = a7;
  v144 = a2;
  FXContext = C3DEngineContextGetFXContext((uint64_t)a1);
  SceneTime = C3DEngineContextGetSceneTime((uint64_t)a1);
  if (a6)
    *(_QWORD *)(FXContext + 160) = a3;
  DrawInstruction = C3DFXPassGetDrawInstruction(a3);
  Program = (void *)C3DFXPassGetProgram(a3);
  RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a1);
  RendererElementState = C3DEngineContextGetRendererElementState((uint64_t)a1);
  ResourceManager = C3DEngineContextGetResourceManager((uint64_t)a1);
  CString = SCNStringGetCString(*(const char **)(a3 + 16));
  if (CString)
    v56 = CString;
  else
    v56 = "NoName";
  C3DRendererContextPushGroupMarker(RendererContextGL, v56);
  C3DRendererElementStateSetActiveTextureUnit(RendererElementState, 0);
  v141 = DrawInstruction;
  v142 = *(_DWORD *)(a3 + 184);
  if (Program)
    _ZF = 0;
  else
    _ZF = DrawInstruction == 2;
  v58 = !_ZF;
  v147 = v58;
  if (_ZF)
  {
    C3DRendererElementStateBindProgramRendererElement(RendererElementState, Player, (uint64_t)a1, (_QWORD *)a3);
    Program = (void *)C3DRendererElementStateGetCurrentProgram(RendererElementState);
  }
  v148 = RendererElementState;
  if (Program)
  {
    ProgramResident = C3DResourceManagerMakeProgramResident(ResourceManager, Program, RendererContextGL);
    if (ProgramResident)
    {
      v60 = (uint64_t)ProgramResident;
      C3DRendererContextBindProgramObject(RendererContextGL, ProgramResident);
    }
    else
    {
      v61 = scn_default_log();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        __C3DEngineContextRenderPassInstance_cold_5(a3, v61, v62, v63, v64, v65, v66, v67);
      v60 = 0;
      RendererElementState = v148;
    }
  }
  else
  {
    v60 = 0;
  }
  v68 = *(_DWORD *)(a3 + 184);
  if ((v68 & 0x8000000) == 0)
  {
    *(_DWORD *)(a3 + 184) = v68 | 0x8000000;
    C3DEngineContextGetFXContext((uint64_t)a1);
    if (v60)
    {
      UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v60, CFSTR("u_inverseResolution"));
      if (UniformLocationOfSymbolNamed != -1)
      {
        v70 = UniformLocationOfSymbolNamed;
        v71 = C3DFXPassAddInputWithName(a3, CFSTR("u_inverseResolution"));
        UniformIndex = C3DFXGLSLProgramObjectGetUniformIndex(v60, v70);
        C3DFXPassInputSetUniformIndex((uint64_t)v71, UniformIndex);
        C3DFXPassInputSetSemantic((uint64_t)v71, 18);
      }
      v73 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v60, CFSTR("u_time"));
      if (v73 != -1)
      {
        v74 = v73;
        v75 = C3DFXPassAddInputWithName(a3, CFSTR("u_time"));
        v76 = C3DFXGLSLProgramObjectGetUniformIndex(v60, v74);
        C3DFXPassInputSetUniformIndex((uint64_t)v75, v76);
        C3DFXPassInputSetSemantic((uint64_t)v75, 19);
      }
    }
    v149.n128_u64[0] = a3;
    v149.n128_u64[1] = v145;
    v150 = v146;
    v151 = a1;
    v152 = 0;
    v153 = v60;
    v77 = *(_QWORD *)(a3 + 280);
    v154 = 0xBFF0000000000000;
    v155 = v77;
    v157 = 0;
    v156 = 0;
    v158 = 0;
    C3DFXPassSetup((uint64_t)&v149);
    C3DEngineContextGetViewport(a1);
    C3DFXPassReshape((uint64_t)&v149);
    RendererElementState = v148;
  }
  if ((C3DFramebufferRegistryGetEnableRecycling() & 1) != 0)
  {
    PassIdentifierForPass = 0;
  }
  else
  {
    v79 = *(unsigned int *)(FXContext + 288);
    *(_DWORD *)(FXContext + 288) = v79 + 1;
    PassIdentifierForPass = _createPassIdentifierForPass(a3, RendererContextGL, 0, v79);
    CFArrayAppendValue(*(CFMutableArrayRef *)(FXContext + 280), PassIdentifierForPass);
    CFRelease(PassIdentifierForPass);
  }
  if ((*(_BYTE *)(a3 + 185) & 0x10) == 0)
  {
    v80 = 0;
    v81 = v145;
    if (!a6)
      goto LABEL_82;
    goto LABEL_71;
  }
  v138 = a6;
  v82 = C3DFXPassRequireFBO(a3, a6, v139);
  v83 = C3DEngineContextGetRendererContextGL((uint64_t)a1);
  v84 = v83;
  if ((v82 & 1) != 0)
  {
    FramebufferForPass = C3DFXContextGetFramebufferForPass(FXContext, a3, a1, 0, PassIdentifierForPass);
    if (FramebufferForPass)
    {
      v80 = FramebufferForPass;
      C3DRendererContextBindFramebuffer(v84, FramebufferForPass);
      Size = C3DFramebufferGetSize(v80);
      goto LABEL_58;
    }
  }
  else
  {
    BoundFramebuffer = (void *)C3DRendererContextGetBoundFramebuffer(v83);
    if (BoundFramebuffer)
      C3DFramebufferRegistryTrackFBO(*(_QWORD *)(FXContext + 240), BoundFramebuffer, PassIdentifierForPass);
  }
  Viewport = C3DEngineContextGetViewport(a1);
  v80 = 0;
  __asm { FMOV            V1.2S, #1.0 }
  Size = COERCE_DOUBLE(vmaxnm_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL), _D1));
LABEL_58:
  v140 = Size;
  if (*(float *)&Size == 0.0 || *((float *)&Size + 1) == 0.0)
  {
    v93 = scn_default_log();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      __C3DEngineContextRenderPassInstance_cold_4();
  }
  v149 = C3DEngineContextGetViewport(a1);
  if (C3DFXPassGetHasCustomViewport(a3))
    v149 = C3DFXPassGetViewport((__n128 *)a3);
  C3DFXPassGetSubViewport((float32x4_t *)a3, (float32x4_t *)&v149);
  C3DRendererContextSetViewport(v149);
  C3DEngineContextSetDrawableSize((uint64_t)a1, v140);
  a6 = v138;
  RendererElementState = v148;
  if ((v82 & 1) != 0 || C3DEngineContextGetClearsOnDraw((uint64_t)a1))
  {
    v94 = *(_DWORD *)(a3 + 184);
    v95 = (v94 << 7) & 0x100 | ((v94 & 1) << 14);
    if ((v94 & 4) != 0 || (v94 & 0xA) == 0xA)
    {
      v95 |= 0x400u;
    }
    else if (!v95)
    {
      goto LABEL_69;
    }
    MainClearColor = C3DEngineContextGetMainClearColor((uint64_t)a1);
    if ((C3DWasLinkedBeforeMajorOSYear2016() & 1) == 0)
    {
      Scene = C3DEngineContextGetScene((uint64_t)a1);
      BackgroundEffectSlot = C3DSceneGetBackgroundEffectSlot(Scene, 0);
      if (BackgroundEffectSlot)
      {
        ColorIfApplicable = (uint64_t *)C3DEffectSlotGetColorIfApplicable(BackgroundEffectSlot);
        if (ColorIfApplicable)
          MainClearColor = *ColorIfApplicable;
      }
    }
    v159.i64[0] = C3DFXPassGetClearColor(a3, MainClearColor);
    v159.i64[1] = v100;
    v101 = C3DEngineContextGetRendererContextGL((uint64_t)a1);
    C3DRendererContextClear(v101, v95, &v159);
    a6 = v138;
    RendererElementState = v148;
    if ((v138 & 1) != 0)
      goto LABEL_70;
LABEL_78:
    v81 = v145;
    if (v80)
    {
      v102 = scn_default_log();
      if (os_log_type_enabled(v102, OS_LOG_TYPE_FAULT))
        __C3DEngineContextRenderPassInstance_cold_3(v102, v103, v104, v105, v106, v107, v108, v109);
      RendererElementState = v148;
    }
    goto LABEL_82;
  }
LABEL_69:
  if ((v138 & 1) == 0)
    goto LABEL_78;
LABEL_70:
  v81 = v145;
LABEL_71:
  *(_QWORD *)(FXContext + 144) = v80;
LABEL_82:
  v149.n128_u64[0] = a3;
  v149.n128_u64[1] = v81;
  v150 = v146;
  v151 = a1;
  v152 = v144 + 10;
  v153 = v60;
  v154 = *(_QWORD *)&SceneTime;
  v155 = *(_QWORD *)(a3 + 280);
  v156 = Player;
  v157 = v143;
  v158 = 0;
  C3DFXPassWillExecute((uint64_t *)&v149);
  if (v60)
    C3DGLSLProfileBindPassInputs((float32x4_t *)a1, v60, a3, v81, (v142 & 0x8000000) == 0);
  if (v147)
  {
    BlendStates = C3DFXPassGetBlendStates(a3);
    C3DRendererContextSetBlendStates(RendererContextGL, BlendStates);
    v111 = BlendStates != 0;
    if (BlendStates)
      C3DRendererContextPushBlendStatesOverride(RendererContextGL);
    RasterizerStates = C3DFXPassGetRasterizerStates(a3);
    C3DRendererContextSetRasterizerStates(RendererContextGL, RasterizerStates);
    RendererElementState = v148;
    switch(v141)
    {
      case 1:
        C3DFXPassExecute((uint64_t)&v149);
        break;
      case 2:
        goto LABEL_90;
      case 3:
      case 6:
        C3DEngineContextGetSystemTime((uint64_t)a1);
        _drawScene((uint64_t)a1, v144);
        break;
      case 4:
        if (v60)
        {
          C3DEngineContextDrawFullScreenQuad((uint64_t)a1);
        }
        else if ((__C3DEngineContextRenderPassInstance_done & 1) == 0)
        {
          __C3DEngineContextRenderPassInstance_done = 1;
          v131 = scn_default_log();
          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
            __C3DEngineContextRenderPassInstance_cold_2(a3, v131, v132, v133, v134, v135, v136, v137);
        }
        C3DRendererContextUnbindTextureUnits(RendererContextGL);
        break;
      default:
        v130 = scn_default_log();
        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
          __C3DEngineContextRenderPassInstance_cold_1();
        break;
    }
  }
  else
  {
    v111 = 0;
LABEL_90:
    C3DRendererElementStateDrawRendererElement(RendererElementState, Player, (float32x4_t *)a1, (_QWORD *)a3, v147);
  }
  if (v60)
    C3DRendererContextUnbindProgramObject(RendererContextGL);
  if (v111)
    C3DRendererContextPopBlendStatesOverride(RendererContextGL);
  if ((*(_BYTE *)(a3 + 186) & 2) != 0)
  {
    RenderCallbacks = C3DEngineContextGetRenderCallbacks((uint64_t)a1);
    v114 = *(void (**)(__n128 *))(RenderCallbacks + 16);
    if (v114)
    {
      if (RendererContextGL)
      {
        v115 = RenderCallbacks;
        C3DRendererContextResetToDefaultStates(RendererContextGL);
        v114 = *(void (**)(__n128 *))(v115 + 16);
      }
      v114(a1);
    }
    UserInfo = (void *)C3DEngineContextGetUserInfo((uint64_t)a1);
    if (UserInfo)
    {
      if (objc_msgSend(UserInfo, "showsStatistics"))
      {
        AuthoringEnvironment = C3DEngineContextGetAuthoringEnvironment((uint64_t)a1, 0);
        if (AuthoringEnvironment)
          C3DAuthoringEnvironmentDrawStats((uint64_t)AuthoringEnvironment);
      }
    }
  }
  if (a6)
  {
    CurrentResolvedFramebuffer = v80;
    if ((*(_BYTE *)(a3 + 184) & 0x10) != 0)
      CurrentResolvedFramebuffer = _C3DFXContextGetCurrentResolvedFramebuffer(FXContext, a1, 1, 1);
    if (v80)
    {
      v119 = C3DEngineContextGetRendererContextGL((uint64_t)a1);
      C3DRendererContextUnbindFramebuffer(v119);
      C3DFramebufferRegistryReleaseFramebuffer(*(_QWORD *)(FXContext + 240), v80);
      if (CurrentResolvedFramebuffer != v80)
        C3DFramebufferRegistryReleaseFramebuffer(*(_QWORD *)(FXContext + 240), CurrentResolvedFramebuffer);
    }
    if (CurrentResolvedFramebuffer)
    {
      v120 = *(_DWORD *)(a3 + 184);
      if ((v120 & 0x800000) != 0)
      {
        RenderTarget = C3DFramebufferGetRenderTarget(CurrentResolvedFramebuffer, 0);
        C3DFXContextSetCurrentColor(FXContext, (uint64_t)RenderTarget);
        v120 = *(_DWORD *)(a3 + 184);
      }
      if ((v120 & 0x1000000) != 0)
      {
        v122 = C3DFramebufferGetRenderTarget(CurrentResolvedFramebuffer, 4);
        C3DFXContextSetCurrentDepth(FXContext, (uint64_t)v122);
      }
    }
    *(_WORD *)(FXContext + 168) = 0;
    *(_QWORD *)(FXContext + 144) = 0;
    *(_QWORD *)(FXContext + 152) = 0;
  }
  C3DFXPassDidExecute((uint64_t)&v149);
  C3DRendererContextPopGroupMarker();
  v123 = *(_QWORD *)(a3 + 520);
  if (v123 >= 1)
  {
    for (i = 0; i < v123; ++i)
    {
      v125 = *(_QWORD *)(*(_QWORD *)(a3 + 512) + 8 * i);
      if (*(_DWORD *)(v125 + 16) == 1 && (*(_BYTE *)(v125 + 80) & 3) == 0)
      {
        C3DFramebufferRegistryReleaseTextureWithName(*(_QWORD *)(FXContext + 240), *(const __CFString **)(v125 + 56));
        v123 = *(_QWORD *)(a3 + 520);
      }
    }
  }
  v126 = *(unsigned int *)(a3 + 440);
  if ((_DWORD)v126)
  {
    v127 = 0;
    v128 = 8;
    do
    {
      v129 = *(const __CFString **)(*(_QWORD *)(a3 + 432) + v128);
      if (v129)
      {
        C3DFramebufferRegistryReleaseTextureWithName(*(_QWORD *)(FXContext + 240), v129);
        v126 = *(unsigned int *)(a3 + 440);
      }
      ++v127;
      v128 += 64;
    }
    while (v127 < v126);
  }
}

uint64_t C3DFXContextAppendTechnique(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __appendTechnique(a2, a1, a3, 0, 0, 0);
}

uint64_t __appendTechnique(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v8;
  uint64_t PassCount;
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t Node;
  uint64_t v18;
  uint64_t Scene;
  uint64_t v20;
  uint64_t (*v21)(_QWORD *, uint64_t);
  char *v22;
  uint64_t MirrorNode;
  uint64_t *v24;
  int PreferredRenderMode;
  char EyeCount;
  uint64_t v27;
  uint64_t PointOfView;
  const __CFDictionary *Light;
  uint64_t v30;
  unsigned int ShadowCascadeCount;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t EnginePipeline;
  uint64_t RendererElementStore;
  unsigned int ElementCount;
  const __CFArray *v40;
  CFIndex Count;
  CFIndex v42;
  CFIndex i;
  float32x4_t *ValueAtIndex;
  uint64_t LightingSystem;
  float v46;
  float v47;
  unsigned __int8 *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  unint64_t v55;
  NSObject *v56;
  uint64_t v57;
  unsigned int *ValuesPtr;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t Element;
  uint64_t v63;
  uint64_t v64;
  float32x2_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint8_t v80[4];
  uint64_t v81;
  uint8_t v82[4];
  uint64_t v83;
  uint8_t v84[4];
  _QWORD v85[3];

  v8 = a3;
  *(_QWORD *)((char *)&v85[1] + 4) = *MEMORY[0x1E0C80C00];
  PassCount = C3DFXTechniqueGetPassCount(a3);
  result = C3DEngineContextGetRenderContext(a1);
  v70 = result == 0;
  v13 = *(_BYTE *)(v8 + 88) | 2;
  *(_BYTE *)(v8 + 88) = v13;
  if (PassCount >= 1)
  {
    v14 = result;
    v15 = 0;
    v68 = a4;
    v69 = v8;
    v72 = a6;
    v73 = a1;
    v66 = result;
    v67 = PassCount;
    while (1)
    {
      result = C3DFXTechniqueGetPassAtIndex(v8, v15);
      v16 = (_QWORD *)result;
      if (a6 && *(_DWORD *)(result + 28) != a6)
        goto LABEL_85;
      if ((*(_BYTE *)(result + 187) & 8) == 0)
      {
        v79 = 0;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v74[0] = result;
        v74[1] = v8;
        if (a4)
          Node = C3DRendererElementGetNode(a4);
        else
          Node = 0;
        *(_QWORD *)&v75 = Node;
        *((_QWORD *)&v75 + 1) = a1;
        v76 = 0uLL;
        v18 = v16[35];
        *(_QWORD *)&v77 = 0xBFF0000000000000;
        *((_QWORD *)&v77 + 1) = v18;
        v78 = 0uLL;
        LOWORD(v79) = 0;
        C3DFXPassInitialize(v74, v70);
        Scene = C3DEngineContextGetScene(a1);
        C3DFXContextResolveNodeReferences(v16, Scene);
      }
      result = C3DFXPassIsTopLevel((uint64_t)v16);
      if (!(_DWORD)result)
        goto LABEL_85;
      v20 = a4 ? C3DRendererElementGetNode(a4) : 0;
      v21 = (uint64_t (*)(_QWORD *, uint64_t))v16[29];
      if (v21)
      {
        result = v21(v16, v20);
        if (!(_DWORD)result)
          goto LABEL_85;
      }
      v22 = C3DAllocatorNew(*(_QWORD *)(a2 + 208));
      bzero(v22, 0x1410uLL);
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = a5;
      *(_QWORD *)v22 = v16;
      MirrorNode = C3DFXPassGetMirrorNode((uint64_t)v16);
      *((_QWORD *)v22 + 638) = MirrorNode;
      *((_OWORD *)v22 + 320) = 0u;
      if (a5 && !MirrorNode)
        *((_QWORD *)v22 + 638) = *(_QWORD *)(a5 + 5104);
      *((_OWORD *)v22 + 2) = 0uLL;
      v24 = (uint64_t *)(v22 + 32);
      *((_OWORD *)v22 + 3) = 0uLL;
      *((_OWORD *)v22 + 4) = 0uLL;
      v22[24] = 1;
      v22[26] = 0;
      if (C3DFXPassIsViewDependant((uint64_t)v16))
      {
        PreferredRenderMode = C3DEngineContextGetPreferredRenderMode(a1);
        v22[27] = PreferredRenderMode;
        if (PreferredRenderMode)
          LOBYTE(PreferredRenderMode) = C3DEngineContextGetPreferredMultiVertexOutputStreamGenerator(a1);
        v22[28] = PreferredRenderMode;
        EyeCount = C3DEngineContextGetEyeCount(a1);
      }
      else
      {
        *(_WORD *)(v22 + 27) = 0;
        EyeCount = 1;
      }
      v22[24] = EyeCount;
      if (v14)
      {
        if (*(_QWORD **)(a2 + 248) == v16
          && objc_msgSend((id)-[SCNMTLRenderContext textureTarget](v14), "textureType") == 5)
        {
          v22[26] = 1;
          v22[24] = 6;
          if ((-[SCNMTLRenderContext features](v14) & 0x20) != 0)
          {
            v22[27] = 1;
            v22[28] = C3DEngineContextGetPreferredMultiVertexOutputStreamGenerator(a1);
          }
        }
        v27 = objc_msgSend((id)-[SCNMTLRenderContext textureTarget](v14), "textureType");
        if (SCNMTLTextureTypeIsArray(v27))
          v22[24] = objc_msgSend((id)-[SCNMTLRenderContext textureTarget](v14), "arrayLength");
        if (C3DFXPassGetDrawOnlyShadowCaster((uint64_t)v16))
        {
          PointOfView = C3DFXPassGetPointOfView((uint64_t)v16);
          if (PointOfView
            && (Light = C3DNodeGetLight(PointOfView)) != 0
            && (v30 = (uint64_t)Light, C3DLightSupportsShadowCascades((uint64_t)Light)))
          {
            ShadowCascadeCount = C3DLightGetShadowCascadeCount(v30);
            if (ShadowCascadeCount < 2)
              goto LABEL_39;
          }
          else
          {
            LOBYTE(ShadowCascadeCount) = 1;
          }
          v22[24] = ShadowCascadeCount;
        }
      }
LABEL_39:
      v32 = v22 + 4708;
      v33 = *(_QWORD *)v22;
      v34 = *(_DWORD *)(*(_QWORD *)v22 + 24);
      if (v34 == 6 || v34 == 3)
      {
        v36 = C3DEngineContextGetScene(v73);
        EnginePipeline = C3DSceneGetEnginePipeline(v36);
        RendererElementStore = C3DEnginePipelineGetRendererElementStore(EnginePipeline);
        ElementCount = C3DRendererElementStoreGetElementCount(RendererElementStore);
        C3DCullingContextInitialize((__n128 *)v22 + 5, v73, (uint64_t)v22, ElementCount);
        if (*(_DWORD *)(v33 + 24) == 6)
        {
          v40 = *(const __CFArray **)(v33 + 464);
          if (v40)
          {
            Count = CFArrayGetCount(v40);
            if (Count >= 1)
            {
              v42 = Count;
              for (i = 0; i != v42; ++i)
              {
                ValueAtIndex = (float32x4_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 464), i);
                if ((ValueAtIndex[13].i8[13] & 0x10) == 0)
                  C3DCullingContextPushRenderableElementsToVisible((float32x4_t *)v22 + 5, *(unsigned __int8 *)(a2 + 120), ValueAtIndex);
              }
            }
          }
        }
        else
        {
          C3DCullingContextCull((uint64_t)(v22 + 80));
        }
        if (C3DFXPassRequiresLighting(v33))
        {
          LightingSystem = C3DSceneGetLightingSystem(v36);
          if (C3DFXPassGetUpdatesMainFrameBuffer(v33) && !C3DFXPassGetMirrorNode(v33))
          {
            v46 = *((double *)v22 + 603);
            v47 = *((double *)v22 + 604);
            if (!C3DEngineContextGetPointOfCulling(v73) && (*(_BYTE *)(a2 + 121) & 0x20) != 0)
            {
              v48 = (unsigned __int8 *)(v22 + 4708);
              if ((*(_DWORD *)(a2 + 272) - *(_DWORD *)(a2 + 312)) <= 2)
              {
                v65 = vneg_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(a2 + 304)));
                if (v65.f32[0] > v46)
                  v46 = v65.f32[0];
                if (v65.f32[1] <= v47)
                  v47 = v65.f32[1];
              }
            }
            else
            {
              v48 = (unsigned __int8 *)(v22 + 4708);
            }
            C3DLightingSystemSetMainRenderingFrustums(LightingSystem, (_OWORD *)v22 + 6, v46, v47, *v48, (__int128 *)v22 + 42, (__int128 *)v22 + 174);
            C3DLightingSystemAppendForwardShadowingTechniques(LightingSystem, a2, v73);
          }
        }
        v32 = v22 + 4708;
        if (v22[24])
        {
          v49 = 0;
          v50 = (unsigned int *)(v22 + 5000);
          do
          {
            v51 = *v50;
            v50 += 4;
            C3DArraySetCount(*(_DWORD **)&v22[8 * v49++ + 32], v51);
          }
          while (v49 < v22[24]);
        }
      }
      v52 = *v24;
      if (*v24 && v32[380] && (*(_BYTE *)(a2 + 121) & 4) == 0)
      {
        v53 = C3DEngineContextGetScene(v73);
        if (!v53)
        {
          v54 = scn_default_log();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
            __appendTechnique_cold_3(v84, v85, v54);
        }
        v55 = C3DSceneGetEnginePipeline(v53);
        if (!v55)
        {
          v56 = scn_default_log();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_FAULT))
            __appendTechnique_cold_2(v82, &v83, v56);
        }
        v57 = C3DEnginePipelineGetRendererElementStore(v55);
        if (!v57)
        {
          v55 = scn_default_log();
          if (os_log_type_enabled((os_log_t)v55, OS_LOG_TYPE_FAULT))
            __appendTechnique_cold_1(v80, &v81, v55);
        }
        ValuesPtr = (unsigned int *)C3DArrayGetValuesPtr(v52);
        v59 = C3DArrayGetCount(v52);
        if (v59 >= 1)
        {
          v60 = v59;
          do
          {
            v61 = *ValuesPtr++;
            v55 = v55 & 0xFFFFFFFF00000000 | v61;
            Element = C3DRendererElementStoreGetElement(v57, v55);
            v63 = *(_QWORD *)(Element + 40);
            if (v63)
            {
              v64 = Element;
              if (v63 != C3DFXTechniqueGetNullTechnique() && (C3DFXTechniqueIsBeingRendered(v63) & 1) == 0)
                __appendTechnique(v73, a2, v63, v64, v22, v72);
            }
            --v60;
          }
          while (v60);
        }
      }
      *((_QWORD *)v22 + 1) = C3DFXContextAddPassInstance(a2, (uint64_t)v22);
      if (C3DFXContextIsMainPass(a2, (uint64_t)v16))
        *(_QWORD *)(a2 + 184) = *((_QWORD *)v22 + 1);
      a4 = v68;
      result = C3DAnimationNodeSetPlayer((uint64_t)v16, v68);
      v8 = v69;
      a6 = v72;
      a1 = v73;
      v14 = v66;
      PassCount = v67;
LABEL_85:
      if (++v15 == PassCount)
      {
        v13 = *(_BYTE *)(v8 + 88);
        break;
      }
    }
  }
  *(_BYTE *)(v8 + 88) = v13 & 0xFD;
  return result;
}

void C3DEngineContextRenderMainTechnique(__n128 *a1)
{
  uint64_t FXContext;
  uint64_t Stats;
  uint64_t RenderContext;
  uint64_t RendererContextGL;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int JitteringStep;
  char v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char UpdatesMainFrameBuffer;
  __n128 Viewport;
  float32x2_t v27;
  int8x8_t v28;
  char v29;
  char v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t Pass;
  unint64_t v41;
  uint64_t v42;
  double v43;
  CFDictionaryRef *FramebufferRegistry;
  char v45;
  uint64_t SharedInstance;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t v52[4];
  uint64_t v53;
  uint8_t v54[4];
  _DWORD v55[7];

  *(_QWORD *)&v55[5] = *MEMORY[0x1E0C80C00];
  FXContext = C3DEngineContextGetFXContext((uint64_t)a1);
  Stats = C3DEngineContextGetStats((uint64_t)a1);
  RenderContext = C3DEngineContextGetRenderContext((uint64_t)a1);
  RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a1);
  if (!(RenderContext | RendererContextGL))
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderMainTechnique_cold_3(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  *(_DWORD *)(FXContext + 288) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(FXContext + 280));
  if (C3DEngineContextIsJitteringEnabled((uint64_t)a1))
  {
    JitteringStep = C3DEngineContextGetJitteringStep((uint64_t)a1);
    if (JitteringStep)
    {
      v15 = JitteringStep;
      C3DFXPassSetEnabled(**(_QWORD **)(*(_QWORD *)(FXContext + 40) + 80), 0);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(FXContext + 40) + 80) + 8);
      if ((v15 & 1) != 0)
      {
        C3DFXPassSetEnabled(v16, 0);
        v19 = 1;
LABEL_16:
        C3DFXPassSetEnabled(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(FXContext + 40) + 80) + 16), v19);
        UpdatesMainFrameBuffer = C3DFXPassGetUpdatesMainFrameBuffer(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(FXContext + 40)
                                                                                          + 80)
                                                                              + 24));
        C3DFXPassSetEnabled(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(FXContext + 40) + 80) + 24), UpdatesMainFrameBuffer);
        if (!RendererContextGL)
          goto LABEL_20;
        goto LABEL_17;
      }
      v17 = 1;
    }
    else
    {
      C3DFXPassSetEnabled(**(_QWORD **)(*(_QWORD *)(FXContext + 40) + 80), 1);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(FXContext + 40) + 80) + 8);
      v17 = 0;
    }
    C3DFXPassSetEnabled(v16, v17);
    v19 = 0;
    goto LABEL_16;
  }
  if (*(_QWORD *)(FXContext + 40))
  {
    v18 = 4;
    do
    {
      C3DFXPassSetEnabled(**(_QWORD **)(*(_QWORD *)(FXContext + 40) + 80), 0);
      --v18;
    }
    while (v18);
  }
  if (!RendererContextGL)
  {
LABEL_20:
    v49 = (_BYTE *)(FXContext + 121);
    if ((*(_BYTE *)(FXContext + 121) & 1) != 0)
      goto LABEL_22;
LABEL_21:
    C3DFXContextSetup((_QWORD *)FXContext, (uint64_t)a1);
    v30 = 0;
    *(_BYTE *)(FXContext + 121) |= 1u;
    goto LABEL_23;
  }
LABEL_17:
  Viewport = C3DEngineContextGetViewport(a1);
  Viewport.n128_u64[0] = vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL).u64[0];
  __asm { FMOV            V1.2S, #1.0 }
  v27 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, (float32x2_t)Viewport.n128_u64[0]), (int8x8_t)_D1, (int8x8_t)Viewport.n128_u64[0]);
  v28 = vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)(FXContext + 104), v27));
  if (((v28.i32[0] | v28.i32[1]) & 1) == 0)
    goto LABEL_20;
  v29 = *(_BYTE *)(FXContext + 121);
  *(float32x2_t *)(FXContext + 104) = v27;
  v49 = (_BYTE *)(FXContext + 121);
  if ((v29 & 1) == 0)
    goto LABEL_21;
  _C3DFXViewportDidChange(a1);
LABEL_22:
  v30 = 1;
LABEL_23:
  v31 = CACurrentMediaTime();
  C3DFXContextBumpTimestamp(FXContext);
  if (RendererContextGL)
    C3DRendererContextBumpTimeStamp(RendererContextGL);
  C3DFXContextPreparePassesInstances((uint64_t)a1, FXContext);
  v50 = Stats;
  *(double *)(Stats + 152) = *(double *)(Stats + 152) + CACurrentMediaTime() - v31;
  v32 = *(_QWORD *)(FXContext + 216);
  if (v32)
  {
    v47 = v30;
    v48 = RendererContextGL;
    v51 = v32 - 1;
    if (v32 >= 1)
    {
      v33 = 0;
      v34 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(FXContext + 200) + 8 * v51) + 40);
      while (!C3DFXPassIsEnabled(**(_QWORD **)(*(_QWORD *)(FXContext + 200) + 8 * v33)))
      {
LABEL_40:
        if (++v33 == v32)
          goto LABEL_44;
      }
      v35 = **(_QWORD **)(*(_QWORD *)(FXContext + 200) + 8 * v33);
      v36 = *(_QWORD *)(v35 + 40);
      *(_DWORD *)(v35 + 184) = *(_DWORD *)(v35 + 184) & 0xFFFDFFFF | ((v33 == v51) << 17);
      v37 = *(_QWORD *)(*(_QWORD *)(FXContext + 200) + 8 * v33);
      if (!a1 && (v38 = scn_default_log(), os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)))
      {
        C3DEngineContextRenderMainTechnique_cold_2(v54, v55, v38);
        if (!v37)
        {
LABEL_32:
          v39 = scn_default_log();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
            C3DEngineContextRenderMainTechnique_cold_1(v52, &v53, v39);
        }
      }
      else if (!v37)
      {
        goto LABEL_32;
      }
      *(_QWORD *)(C3DEngineContextGetFXContext((uint64_t)a1) + 176) = *(_QWORD *)(v37 + 8);
      if (*(_BYTE *)(v37 + 27))
      {
        Pass = C3DFXPassInstanceGetPass(v37);
        __C3DEngineContextRenderPassInstance(a1, (uint64_t *)v37, Pass, 0, v36 == v34, 1, 0);
      }
      else if (*(_BYTE *)(v37 + 24))
      {
        v41 = 0;
        do
        {
          v42 = C3DFXPassInstanceGetPass(v37);
          __C3DEngineContextRenderPassInstance(a1, (uint64_t *)v37, v42, 0, v36 == v34, 1, v41++);
        }
        while (v41 < *(unsigned __int8 *)(v37 + 24));
      }
      *(_DWORD *)(v35 + 184) &= ~0x20000u;
      goto LABEL_40;
    }
LABEL_44:
    v43 = CACurrentMediaTime();
    C3DFXContextRemoveAllPassInstances((_QWORD *)FXContext);
    if (v48)
    {
      FramebufferRegistry = (CFDictionaryRef *)C3DFXContextGetFramebufferRegistry(FXContext);
      C3DFramebufferRegistryFinalizeFrame(FramebufferRegistry);
    }
    *(double *)(v50 + 152) = *(double *)(v50 + 152) + CACurrentMediaTime() - v43;
    v45 = v47;
    if ((*v49 & 2) != 0)
      v45 = 0;
    if ((v45 & 1) == 0)
    {
      *v49 &= ~2u;
      SharedInstance = C3DNotificationCenterGetSharedInstance();
      C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextPassesDidUpdate"), a1, 0, 1u);
    }
    if (v48)
      C3DFramebufferRegistryPurge(*(_QWORD *)(FXContext + 240), (uint64_t)a1);
    C3DFXContextSetCurrentColor(FXContext, 0);
    C3DFXContextSetCurrentDepth(FXContext, 0);
  }
}

uint64_t C3DFXContextPreparePassesInstances(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  *(_QWORD *)(a2 + 184) = 0;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
    __appendTechnique(a1, a2, v4, 0, 0, 0);
  v5 = *(_BYTE *)(a2 + 121);
  if ((v5 & 4) == 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    if (v6)
    {
      __appendTechnique(a1, a2, v6, 0, 0, 1u);
      v5 = *(_BYTE *)(a2 + 121);
    }
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
    v8 = (v5 & 0x14) == 16;
  else
    v8 = 1;
  if (!v8)
  {
    __appendTechnique(a1, a2, v7, 0, 0, 0);
    v5 = *(_BYTE *)(a2 + 121);
  }
  if ((v5 & 4) == 0)
  {
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      __appendTechnique(a1, a2, v9, 0, 0, 2u);
      v5 = *(_BYTE *)(a2 + 121);
    }
    if ((v5 & 0x10) == 0 && *(uint64_t *)(a2 + 96) >= 1)
    {
      v10 = 0;
      do
        __appendTechnique(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v10++), 0, 0, 0);
      while (v10 < *(_QWORD *)(a2 + 96));
    }
    v11 = *(_QWORD *)(a2 + 24);
    if (v11)
      __appendTechnique(a1, a2, v11, 0, 0, 3u);
    v12 = *(_QWORD *)(a2 + 72);
    if (v12)
      __appendTechnique(a1, a2, v12, 0, 0, 0);
    v13 = *(_QWORD *)(a2 + 48);
    if (v13)
      __appendTechnique(a1, a2, v13, 0, 0, 0);
    v14 = *(_QWORD *)(a2 + 24);
    if (v14)
      __appendTechnique(a1, a2, v14, 0, 0, 4u);
  }
  result = C3DEngineContextIsJitteringEnabled(a1);
  if ((_DWORD)result)
    return __appendTechnique(a1, a2, *(_QWORD *)(a2 + 40), 0, 0, 0);
  return result;
}

void C3DFXContextSetCurrentColor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 48))
    {
      C3DFramebufferRegistryReleaseRenderTarget(*(_QWORD *)(a1 + 240), v4);
    }
    else
    {
      if (!*(_DWORD *)(v4 + 76))
      {
        v5 = scn_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
          C3DFXContextSetCurrentColor_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      --*(_DWORD *)(*(_QWORD *)(a1 + 128) + 76);
    }
  }
  *(_QWORD *)(a1 + 128) = a2;
  if (a2)
    ++*(_DWORD *)(a2 + 76);
}

void C3DFXContextSetCurrentDepth(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 136);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 48))
    {
      C3DFramebufferRegistryReleaseRenderTarget(*(_QWORD *)(a1 + 240), v4);
    }
    else
    {
      if (!*(_DWORD *)(v4 + 76))
      {
        v5 = scn_default_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
          C3DFXContextSetCurrentDepth_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      --*(_DWORD *)(*(_QWORD *)(a1 + 136) + 76);
    }
  }
  *(_QWORD *)(a1 + 136) = a2;
  if (a2)
    ++*(_DWORD *)(a2 + 76);
}

void C3DFXContextReleaseCullingData(uint64_t a1, CFTypeRef cf)
{
  __CFArray *v3;

  if (cf)
  {
    v3 = *(__CFArray **)(a1 + 296);
    if (v3)
      CFArrayAppendValue(v3, cf);
    CFRelease(cf);
  }
}

uint64_t C3DFXContextAddPassInstance(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXContextSetPostProcessTechnique_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(_QWORD *)(a1 + 216);
  if (result == *(_QWORD *)(a1 + 232))
  {
    if (2 * result <= 4)
      v13 = 4;
    else
      v13 = 2 * result;
    v14 = malloc_type_realloc(*(void **)(a1 + 200), 8 * v13, 0x2004093837F09uLL);
    *(_QWORD *)(a1 + 200) = v14;
    *(_QWORD *)(a1 + 232) = v13;
    result = *(_QWORD *)(a1 + 216);
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 200);
  }
  v14[result] = a2;
  *(_QWORD *)(a1 + 216) = result + 1;
  return result;
}

uint64_t C3DFXContextCreateCullingData(uint64_t a1, unsigned int a2)
{
  CFIndex Count;
  CFIndex v5;
  _DWORD *ValueAtIndex;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 296));
  v5 = Count - 1;
  if (Count < 1)
    return C3DArrayCreate(4, a2);
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 296), v5);
  CFRetain(ValueAtIndex);
  C3DArraySetCount(ValueAtIndex, a2);
  C3DArraySetCount(ValueAtIndex, 0);
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 296), v5);
  return (uint64_t)ValueAtIndex;
}

void C3DFXContextSetEnableSampleDistributedRange(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  char v4;
  const void *Scene;
  uint64_t SharedInstance;

  v3 = *(_BYTE *)(a1 + 121);
  if (((((v3 & 0x20) == 0) ^ a3) & 1) == 0)
  {
    if (a3)
      v4 = 32;
    else
      v4 = 0;
    *(_BYTE *)(a1 + 121) = v3 & 0xDF | v4;
    Scene = (const void *)C3DEngineContextGetScene(a2);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), Scene, 0, 1u);
  }
}

id C3DFXContextCopyPassDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t i;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  const __CFString *v24;
  id v25;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;

  C3DFXContextPreparePassesInstances(a2, a1);
  v29 = (_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 216);
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v3);
  v27 = v4;
  objc_msgSend(v4, "setValue:forKey:", v5, CFSTR("passes"));

  v28 = v3;
  if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v30 = v6;
      v7 = **(_QWORD **)(v29[25] + 8 * v6);
      v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v8, "setValue:forKey:", C3DFXPassGetName(v7), CFSTR("name"));
      objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", (int)C3DFXPassGetDrawInstruction(v7)), CFSTR("type"));
      objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", C3DFXPassIsEnabled(v7)), CFSTR("enabled"));
      v9 = *(_QWORD *)(v7 + 520);
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v9);
      v31 = v8;
      objc_msgSend(v8, "setValue:forKey:", v10, CFSTR("inputs"));

      if (v9 >= 1)
      {
        for (i = 0; i != v9; ++i)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v7 + 512) + 8 * i);
          if (*(_QWORD *)(v12 + 56))
          {
            v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
            v14 = v13;
            v15 = *(_QWORD *)(v12 + 56);
            if (v15)
              objc_msgSend(v13, "setValue:forKey:", v15, CFSTR("name"));
            objc_msgSend(v14, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v12 + 16)), CFSTR("type"));
            v16 = v14;
            if (v16)
              objc_msgSend(v10, "addObject:", v16);
          }
        }
      }
      v17 = *(unsigned int *)(v7 + 440);
      v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v17);
      objc_msgSend(v31, "setValue:forKey:", v18, CFSTR("outputs"));

      if ((_DWORD)v17)
      {
        v19 = 0;
        v20 = v17 << 6;
        do
        {
          v21 = *(_QWORD *)(v7 + 432);
          v22 = objc_alloc_init(MEMORY[0x1E0C99E08]);
          v23 = v21 + v19;
          objc_msgSend(v22, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v23 + 16)), CFSTR("type"));
          v24 = *(const __CFString **)(v23 + 8);
          if (!v24)
          {
            if (*(_DWORD *)(v23 + 16))
              v24 = CFSTR("COLOR");
            else
              v24 = CFSTR("DEPTH");
          }
          objc_msgSend(v22, "setValue:forKey:", v24, CFSTR("name"));
          v25 = v22;
          if (v25)
            objc_msgSend(v18, "addObject:", v25);
          v19 += 64;
        }
        while (v20 != v19);
      }
      objc_msgSend(v5, "addObject:", v31);
      v6 = v30 + 1;
    }
    while (v30 + 1 != v28);
  }
  C3DFXContextRemoveAllPassInstances(v29);
  return v27;
}

_QWORD *_addCIFilterSubTechniquesForNode(void *a1, uint64_t a2, const __CFDictionary *a3)
{
  _QWORD *Value;
  uint64_t Scene;
  uint64_t Parent;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t EnginePipeline;
  uint64_t RendererElementStore;
  unint64_t RendererElementSpan;
  uint64_t ElementInSpanAtIndex;
  _QWORD *v16;
  CFTypeRef v17;

  Value = CFDictionaryGetValue(a3, a1);
  if (!Value)
  {
    Scene = C3DEngineContextGetScene(a2);
    Parent = C3DNodeGetParent((uint64_t)a1);
    if (Parent)
    {
      v9 = (const void *)Parent;
      do
      {
        v10 = CFDictionaryGetValue(a3, v9);
        if (!v10)
        {
          if (C3DNodeGetFilters((uint64_t)v9))
            v10 = (const void *)_addCIFilterSubTechniquesForNode(v9, a2, a3);
          else
            v10 = 0;
        }
        v11 = C3DNodeGetParent((uint64_t)v9);
        if (!v11)
          break;
        v9 = (const void *)v11;
      }
      while (!v10);
      Value = (_QWORD *)C3DFXTechniqueCreateCIFilter((uint64_t)a1, a2);
      if (v10)
        C3DFXTechniqueAddSubTechnique((uint64_t)v10, Value);
    }
    else
    {
      Value = (_QWORD *)C3DFXTechniqueCreateCIFilter((uint64_t)a1, a2);
    }
    C3DSceneRegisterCIFilterTechniqueForNode(Scene, a1, Value);
    EnginePipeline = C3DSceneGetEnginePipeline(Scene);
    RendererElementStore = C3DEnginePipelineGetRendererElementStore(EnginePipeline);
    RendererElementSpan = C3DNodeGetRendererElementSpan((uint64_t)a1);
    ElementInSpanAtIndex = C3DRendererElementStoreGetElementInSpanAtIndex(RendererElementStore, RendererElementSpan, (HIDWORD(RendererElementSpan) - 1));
    v16 = *(_QWORD **)(ElementInSpanAtIndex + 40);
    if (v16 != Value)
    {
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(ElementInSpanAtIndex + 40) = 0;
      }
      if (Value)
        v17 = CFRetain(Value);
      else
        v17 = 0;
      *(_QWORD *)(ElementInSpanAtIndex + 40) = v17;
    }
    CFRelease(Value);
    CFDictionarySetValue(a3, a1, Value);
  }
  return Value;
}

__CFString *_createPassIdentifierForPass(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __CFString *Mutable;
  uint64_t SampleCount;

  Mutable = CFStringCreateMutable(0, 0);
  SampleCount = *(unsigned __int8 *)(a1 + 176);
  if (!*(_BYTE *)(a1 + 176))
    SampleCount = C3DRendererContextGetSampleCount(a2);
  CFStringAppendFormat(Mutable, 0, CFSTR("%d - %@"), a4, *(_QWORD *)(a1 + 16));
  if (a3)
  {
    CFStringAppend(Mutable, CFSTR(" (resolve)"));
  }
  else if ((int)SampleCount >= 2)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(" (%dx)"), SampleCount);
  }
  return Mutable;
}

uint64_t C3DFXContextGetFramebufferForPass(uint64_t a1, uint64_t a2, __n128 *a3, int a4, void *a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t FramebufferDescription;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  unsigned int SampleCount;
  uint64_t RendererContextGL;
  char v42;
  CFIndex v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  const __CFString *v48;
  int v49;
  int v50;
  _OWORD v52[4];
  __int128 v53;
  uint64_t v54;

  if (!a1 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    C3DEngineContextGetScene_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    C3DFXContextIsMainPass_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
LABEL_6:
  if (!a3)
  {
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
      C3DEngineContextGetStats_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  FramebufferDescription = C3DFXPassGetFramebufferDescription(a2);
  v36 = *(_OWORD *)(FramebufferDescription + 48);
  v35 = *(_OWORD *)(FramebufferDescription + 64);
  v37 = *(_OWORD *)(FramebufferDescription + 32);
  v54 = *(_QWORD *)(FramebufferDescription + 80);
  v38 = *(_OWORD *)(FramebufferDescription + 16);
  v52[0] = *(_OWORD *)FramebufferDescription;
  v52[1] = v38;
  v52[3] = v36;
  v53 = v35;
  v52[2] = v37;
  if ((v54 & 8) != 0)
    *(float32x2_t *)&v52[0] = vrndp_f32(vcvt_f32_f64(vmulq_f64(*(float64x2_t *)(a2 + 376), vcvt_hight_f64_f32((float32x4_t)C3DEngineContextGetViewport(a3)))));
  v39 = *(_DWORD *)(a2 + 24);
  SampleCount = 1;
  if (v39 <= 6 && ((1 << v39) & 0x4C) != 0 && (a4 & 1) == 0)
  {
    SampleCount = *(unsigned __int8 *)(a2 + 176);
    if (!*(_BYTE *)(a2 + 176))
    {
      RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)a3);
      SampleCount = C3DRendererContextGetSampleCount(RendererContextGL);
    }
    if (SampleCount >= 2)
    {
      BYTE11(v52[0]) &= ~1u;
      BYTE11(v53) &= ~1u;
    }
  }
  C3DFramebufferDescriptionSetSampleCount((uint64_t)v52, SampleCount);
  v42 = v54;
  if ((v54 & 0x10) == 0 && (*(_BYTE *)(a2 + 186) & 2) != 0)
  {
    v42 = v54 | 0x10;
    LOBYTE(v54) = v54 | 0x10;
    BYTE8(v53) = 44;
  }
  if (a4)
  {
    v42 &= ~0x10u;
    LOBYTE(v54) = v42;
  }
  if ((v42 & 0x10) != 0)
    BYTE8(v53) = 44;
  if ((a4 & 1) != 0)
    v43 = 0;
  else
    v43 = *(unsigned int *)(a2 + 440);
  if ((v42 & 0x10) != 0)
    v44 = 0;
  else
    v44 = a4;
  C3DFramebufferRegistryPrepareFramebufferWithDescription(*(_QWORD *)(a1 + 240), (float32x2_t *)v52, *(_QWORD *)(a2 + 432), v43, v44, a5, (uint64_t)a3);
  if (*(_DWORD *)(a2 + 440))
  {
    v45 = 0;
    v46 = 0;
    do
    {
      v47 = *(_QWORD *)(a2 + 432);
      v48 = *(const __CFString **)(v47 + v45 + 8);
      if (v48)
      {
        v49 = *(_DWORD *)(v47 + v45 + 16);
        if (a4)
        {
          if (v49 != 5)
            C3DFramebufferRegistryReplaceTextureWithNameByTexture(*(_QWORD *)(a1 + 240), v49, v48);
        }
        else
        {
          v50 = *(_DWORD *)(v47 + v45 + 20);
          if (v50)
            C3DFramebufferRegistryRetainTextureWithName(*(_QWORD *)(a1 + 240), v49, v48, v50);
        }
      }
      ++v46;
      v45 += 64;
    }
    while (v46 < *(unsigned int *)(a2 + 440));
  }
  return C3DFramebufferRegistryFinalizeAndGetFramebuffer(*(_QWORD *)(a1 + 240));
}

uint64_t _drawScene(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Pass;
  uint64_t FXContext;
  const void *RootNode;
  uint64_t Scene;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t RenderCallbacks;
  uint64_t RendererElementState;
  uint64_t result;
  uint64_t (*v28)(uint64_t);

  if (!a2)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderSubTechnique_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  Pass = C3DFXPassInstanceGetPass((uint64_t)a2);
  FXContext = C3DEngineContextGetFXContext(a1);
  RootNode = (const void *)C3DFXPassGetRootNode(Pass);
  Scene = C3DEngineContextGetScene(a1);
  if (!RootNode)
  {
    v16 = Scene;
    if (!Scene)
    {
      v17 = scn_default_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        C3DSceneCreateHitTestResultsWithSegment_cold_2(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    RootNode = (const void *)C3DSceneGetRootNode(v16);
  }
  RenderCallbacks = C3DEngineContextGetRenderCallbacks(a1);
  if (C3DFXContextIsMainPass(FXContext, Pass) && RenderCallbacks && *(_QWORD *)RenderCallbacks)
    (*(void (**)(uint64_t))RenderCallbacks)(a1);
  C3DEngineContextRenderNodeTree(a1, a2, RootNode);
  RendererElementState = C3DEngineContextGetRendererElementState(a1);
  if (C3DEngineContextGetRendererContextGL(a1))
    C3DRendererElementStateBeginProcessing(RendererElementState, 0, a1);
  result = C3DFXContextIsMainPass(FXContext, Pass);
  if ((_DWORD)result && RenderCallbacks)
  {
    v28 = *(uint64_t (**)(uint64_t))(RenderCallbacks + 8);
    if (v28)
      return v28(a1);
  }
  return result;
}

void C3D::CustomPass::CustomPass(C3D::CustomPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, __C3DFXPass *a4)
{
  uint64_t v5;

  C3D::Pass::Pass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA598828;
  *(_QWORD *)(v5 + 112) = a4;
  *(_QWORD *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 32) = 1;
}

const char *C3D::CustomPass::name(C3D::CustomPass *this, uint64_t a2, uint64_t a3, void *a4)
{
  const char **v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (const char **)*((_QWORD *)this + 14);
  if (v5)
    return C3D::CachedFXPassName((void **)this + 15, v5, *(__C3DFXPass **)(*((_QWORD *)this + 3) + 16), a4);
  v6 = scn_default_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    C3D::CustomPass::name(v6, v7, v8, (uint64_t)a4, v9, v10, v11, v12);
  v5 = (const char **)*((_QWORD *)this + 14);
  if (v5)
    return C3D::CachedFXPassName((void **)this + 15, v5, *(__C3DFXPass **)(*((_QWORD *)this + 3) + 16), a4);
  else
    return "CustomPass";
}

void C3D::CustomPass::execute(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *);
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[11];

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    goto LABEL_5;
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    C3D::CustomPass::execute(v3, v4, v5, v6, v7, v8, v9, v10);
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
LABEL_5:
    v11 = *(void (**)(_QWORD *))(v2 + 248);
    if (v11)
    {
      v14[0] = v2;
      v14[1] = 0;
      v12 = *(_QWORD *)(a1 + 16);
      v14[2] = 0;
      v14[3] = v12;
      v14[4] = 0;
      v14[5] = 0;
      v13 = *(_QWORD *)(v2 + 280);
      v14[6] = 0xBFF0000000000000;
      v14[7] = v13;
      memset(&v14[8], 0, 24);
      v11(v14);
    }
  }
}

uint64_t __HandleProfileWillDieNotification(int a1, void *a2, CFTypeRef cf1, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!CFEqual(cf1, CFSTR("kC3DNotificationProfileWillDie")))
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __HandleProfileWillDieNotification_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return objc_msgSend(a2, "releaseProgramForResource:", a4);
}

BOOL CheckDefineUsageInModifiers(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  BOOL v7;
  const __CFDictionary *Defines;

  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    do
    {
      Defines = (const __CFDictionary *)C3DShaderModifierGetDefines(*(_QWORD *)(a1 + 8 * v6));
      if (Defines && CFDictionaryGetCountOfKey(Defines, a3))
        break;
      v7 = ++v6 < a2;
    }
    while (a2 != v6);
  }
  return v7;
}

uint64_t C3DFXGLSLProgramCreate()
{
  uint64_t Instance;
  uint64_t v1;

  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  Instance = C3DTypeCreateInstance_(C3DFXGLSLProgramGetTypeID_typeID, 0x68uLL);
  v1 = Instance;
  if (Instance)
  {
    C3DFXProgramInitialize(Instance);
    *(_DWORD *)(v1 + 64) = 1;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
  }
  return v1;
}

uint64_t C3DFXGLSLProgramGetDefaultProgram()
{
  if (C3DFXGLSLProgramGetDefaultProgram_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetDefaultProgram_onceToken, &__block_literal_global_1_0);
  return C3DFXGLSLProgramGetDefaultProgram_defaultProgram;
}

uint64_t C3DFXGLSLProgramCreateBuiltInProgramWithName(void *a1)
{
  return _C3DFXGLSLProgramCreateProgramWithName(a1, 0);
}

void C3DFXGLSLProgramSetUniformIndex(CFMutableDictionaryRef *cf, const void *a2, char *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeID v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!cf && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceManagerMakeProgramResident_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DFXGLSLProgramSetUniformIndex_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v22 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  cf[14] = (CFMutableDictionaryRef)(a3 + 1);
  __AllocUniformsNamesToIndexesIfNeeded(cf);
  CFDictionarySetValue(cf[13], a2, a3);
}

uint64_t C3DFXGLSLProgramCreateWithSources(const void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = C3DFXGLSLProgramCreate();
  v5 = C3DFXShaderCreate(0);
  C3DFXShaderSetSource(v5, a1);
  *(_QWORD *)(v4 + 80) = v5;
  v6 = C3DFXShaderCreate(1);
  C3DFXShaderSetSource(v6, a2);
  *(_QWORD *)(v4 + 88) = v6;
  return v4;
}

uint64_t _C3DFXGLSLProgramCreateProgramWithName(void *a1, int a2)
{
  void *v4;
  void *v5;
  const __CFString *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  const __CFString *v10;
  uint64_t v11;
  int v12;
  CFMutableStringRef MutableCopy;
  const void *v14;
  const __CFArray *v15;
  CFMutableStringRef v16;
  const void *v17;
  const __CFArray *v18;
  void *values;
  const __CFString *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_msgSend(a1, "stringByAppendingString:", CFSTR(".vsh"));
  v5 = (void *)objc_msgSend(a1, "stringByAppendingString:", CFSTR(".fsh"));
  v6 = (const __CFString *)C3DGetTextResourceWithNameAllowingHotReload(v4);
  v7 = (uint64_t)C3DGetTextResourceWithNameAllowingHotReload(v5);
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    v9 = a2 ^ 1;
  else
    v9 = 1;
  if ((v9 & 1) == 0)
  {
    v6 = (const __CFString *)C3DStringNamed(v4);
    v7 = C3DStringNamed(v5);
  }
  v10 = (const __CFString *)v7;
  v11 = 0;
  if (v6 && v7)
  {
    v12 = v9 ^ 1;
    MutableCopy = CFStringCreateMutableCopy(0, 0, v6);
    CFStringTrimWhitespace(MutableCopy);
    if (CFStringHasPrefix(MutableCopy, CFSTR("#extension")))
    {
      v14 = CFRetain(v6);
    }
    else
    {
      values = CFSTR("precision highp float;\n");
      v21 = v6;
      v15 = CFArrayCreate(0, (const void **)&values, 2, 0);
      v14 = CFStringCreateByCombiningStrings(0, v15, &stru_1EA5A6480);
      CFRelease(v15);
    }
    CFRelease(MutableCopy);
    v16 = CFStringCreateMutableCopy(0, 0, v10);
    CFStringTrimWhitespace(v16);
    if (CFStringHasPrefix(v16, CFSTR("#extension")))
    {
      v17 = CFRetain(v10);
    }
    else
    {
      values = CFSTR("precision highp float;\n");
      v21 = v10;
      v18 = CFArrayCreate(0, (const void **)&values, 2, 0);
      v17 = CFStringCreateByCombiningStrings(0, v18, &stru_1EA5A6480);
      CFRelease(v18);
    }
    CFRelease(v16);
    v11 = C3DFXGLSLProgramCreateWithSources(v14, v17);
    C3DFXProgramSetClientProgram(v11, v12);
    CFRelease(v14);
    CFRelease(v17);
  }
  return v11;
}

uint64_t C3DFXGLSLProgramCreateWithName(void *a1)
{
  return _C3DFXGLSLProgramCreateProgramWithName(a1, 1);
}

uint64_t C3DFXGLSLProgramGetShader(CFTypeRef cf, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!cf)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v12 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  return *((_QWORD *)cf + a2 + 10);
}

CFTypeRef C3DFXGLSLProgramSetShader(char *cf, CFTypeRef a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  CFTypeRef result;
  _QWORD *v31;
  CFTypeRef v32;

  if (!cf && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXShaderGetStage_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v20 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  v29 = &cf[8 * (int)C3DFXShaderGetStage((uint64_t)a2)];
  v32 = (CFTypeRef)*((_QWORD *)v29 + 10);
  v31 = v29 + 80;
  result = v32;
  if (v32 != a2)
  {
    if (result)
    {
      CFRelease(result);
      *v31 = 0;
    }
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *v31 = result;
  }
  return result;
}

uint64_t C3DFXGLSLProgramGetShaders(_QWORD *a1)
{
  CFTypeID v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = CFGetTypeID(a1);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v2 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return a1[10];
}

uint64_t C3DFXGLSLProgramGetShaderSources(_QWORD *a1)
{
  CFTypeID v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = CFGetTypeID(a1);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v2 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  result = C3DFXGLSLProgramGetShaders(a1);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

void C3DFXGLSLProgramSetAttributeIndex(CFMutableDictionaryRef *cf, const void *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeID v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!cf && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceManagerMakeProgramResident_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DFXGLSLProgramSetAttributeIndex_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  v22 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v22 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  __AllocAttributesNamesToIndexesIfNeeded(cf);
  CFDictionarySetValue(cf[12], a2, (const void *)a3);
}

void __AllocAttributesNamesToIndexesIfNeeded(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v10 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (!*((_QWORD *)cf + 12))
    *((_QWORD *)cf + 12) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
}

uint64_t C3DFXGLSLProgramGetAttributeIndex(CFDictionaryRef *cf, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!cf && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXGLSLProgramSetAttributeIndex_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v20 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  __AllocAttributesNamesToIndexesIfNeeded(cf);
  return (char)CFDictionaryGetValue(cf[12], a2);
}

CFTypeRef _C3DFXGLSLProgramSetUniformDictionary(CFTypeRef cf, CFTypeRef a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef result;

  if (!cf)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v12 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  result = (CFTypeRef)*((_QWORD *)cf + 13);
  if (result != a2)
  {
    if (result)
    {
      CFRelease(result);
      *((_QWORD *)cf + 13) = 0;
    }
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *((_QWORD *)cf + 13) = result;
  }
  return result;
}

CFTypeRef _C3DFXGLSLProgramSetAttributesDictionary(CFTypeRef cf, CFTypeRef a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef result;

  if (!cf)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v12 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  result = (CFTypeRef)*((_QWORD *)cf + 12);
  if (result != a2)
  {
    if (result)
    {
      CFRelease(result);
      *((_QWORD *)cf + 12) = 0;
    }
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *((_QWORD *)cf + 12) = result;
  }
  return result;
}

uint64_t C3DFXGLSLProgramGetNextUniformIndex(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v10 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return *((_QWORD *)cf + 14);
}

void __AllocUniformsNamesToIndexesIfNeeded(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v10 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  if (!*((_QWORD *)cf + 13))
    *((_QWORD *)cf + 13) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
}

uint64_t C3DFXGLSLProgramGetUniformIndex(CFDictionaryRef *cf, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeID v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!cf && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DResourceManagerMakeProgramResident_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXGLSLProgramSetUniformIndex_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v20 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v21 = scn_default_log();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  __AllocUniformsNamesToIndexesIfNeeded(cf);
  if (CFDictionaryContainsKey(cf[13], a2))
    return (uint64_t)CFDictionaryGetValue(cf[13], a2);
  else
    return -1;
}

CFArrayRef C3DFXGLSLProgramCopyAttributesNames(CFDictionaryRef *cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  CFIndex Count;
  const void **v21;
  CFArrayRef v22;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v10 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v19 = cf[12];
  if (!v19)
    return 0;
  Count = CFDictionaryGetCount(v19);
  v21 = (const void **)C3DMalloc(8 * Count);
  CFDictionaryGetKeysAndValues(cf[12], v21, 0);
  v22 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v21, Count, MEMORY[0x1E0C9B378]);
  if (v21)
    free(v21);
  return v22;
}

const __CFDictionary *_C3DFXGLSLProgramGetMaxUniformIndex(const __CFDictionary **cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *result;
  uint64_t context;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXGLSLProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXGLSLProgramGetTypeID_onceToken, &__block_literal_global_105);
  if (v10 != C3DFXGLSLProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXGLSLProgramSetUniformIndex_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  context = 0;
  result = cf[13];
  if (result)
  {
    CFDictionaryApplyFunction(result, (CFDictionaryApplierFunction)_findMax, &context);
    return (const __CFDictionary *)context;
  }
  return result;
}

void _findMax(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (*a3 < a2)
    *a3 = a2;
}

uint64_t C3DVertexAttribFromParameterSemantic(int a1, unsigned int a2)
{
  char v2;
  char v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = 0;
  switch(a1)
  {
    case 1:
      return v2;
    case 2:
      v2 = 1;
      break;
    case 3:
      v2 = 3;
      break;
    case 4:
      v3 = a2;
      if (a2 >= 8)
      {
        v4 = scn_default_log();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
          C3DVertexAttribFromParameterSemantic_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      v2 = v3 + 6;
      break;
    case 5:
      v2 = 2;
      break;
    default:
      v2 = 14;
      break;
  }
  return v2;
}

id _C3DFXGLSLProgramCFFinalize(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = 0;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = *(const void **)(a1 + 8 * v2 + 80);
    if (v5)
      CFRelease(v5);
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v6 = *(const void **)(a1 + 96);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 104);
  if (v7)
    CFRelease(v7);
  return C3DFXProgramCFFinalize(a1);
}

CFStringRef _C3DFXGLSLProgramCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXGLSLProgram %p>"), a1);
}

CFStringRef _C3DFXGLSLProgramCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXGLSLProgram %p>"), a1);
}

__CFArray *_C3DFXGLSLProgramCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  const CFDictionaryValueCallBacks *v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  uint64_t Attributes;
  int v27;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = 2;
  valuePtr = 5;
  Attributes = a1 + 80;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v27);
  v7 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("vertexShader"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v9 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v27 = 2;
  valuePtr = 5;
  Attributes = a1 + 88;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v27);
  v12 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("fragmentShader"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v8);
  v27 = 1;
  valuePtr = 5;
  Attributes = C3DEntityGetAttributes(a1);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v27);
  v16 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = 2;
  valuePtr = 5;
  Attributes = a1 + 96;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v27);
  v20 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("attributeNamesToIndexes"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = 2;
  valuePtr = 5;
  Attributes = a1 + 104;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v27);
  v24 = CFNumberCreate(0, kCFNumberLongType, &Attributes);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("uniformNamesToIndexes"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  return Mutable;
}

CFStringRef _C3DRendererDelegateCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRendererDelegate %p>"), a1);
}

CFStringRef _C3DRendererDelegateCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRendererDelegate %p>"), a1);
}

uint64_t C3DRendererDelegateCreate(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t Instance;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (C3DRendererDelegateGetTypeID_onceToken != -1)
    dispatch_once(&C3DRendererDelegateGetTypeID_onceToken, &__block_literal_global_106);
  Instance = C3DTypeCreateInstance_(C3DRendererDelegateGetTypeID_typeID, 0x18uLL);
  if (!a1)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DRendererDelegateCreate_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  *(_QWORD *)(Instance + 16) = a1;
  *(_QWORD *)(Instance + 32) = a3;
  *(_BYTE *)(Instance + 24) = a2;
  return Instance;
}

uint64_t C3DRendererDelegateFireWithNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DRendererDelegateFireWithNode_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a1 + 16))(a2, a3, *(_QWORD *)(a1 + 32), a4);
}

uint64_t SCNMTLTextureDescFromMTLTexture@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t result;
  char v6;
  char v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_WORD *)a2 = objc_msgSend(a1, "width");
  *(_WORD *)(a2 + 2) = objc_msgSend(a1, "height");
  *(_WORD *)(a2 + 4) = objc_msgSend(a1, "depth");
  *(_WORD *)(a2 + 6) = objc_msgSend(a1, "arrayLength");
  *(_BYTE *)(a2 + 8) = objc_msgSend(a1, "textureType");
  *(_BYTE *)(a2 + 9) = objc_msgSend(a1, "storageMode");
  *(_BYTE *)(a2 + 10) = objc_msgSend(a1, "usage");
  *(_BYTE *)(a2 + 11) = objc_msgSend(a1, "cpuCacheMode");
  *(_WORD *)(a2 + 12) = objc_msgSend(a1, "pixelFormat");
  v4 = objc_msgSend(a1, "mipmapLevelCount");
  *(_BYTE *)(a2 + 14) = v4;
  result = objc_msgSend(a1, "sampleCount");
  *(_DWORD *)(a2 + 16) = 0;
  if (result == 1)
    v6 = 0;
  else
    v6 = result;
  *(_BYTE *)(a2 + 15) = v6;
  if (v4 == 1)
    v7 = 0;
  else
    v7 = v4;
  *(_BYTE *)(a2 + 14) = v7;
  return result;
}

MTLTexture *SCNMTLTexturePool::allocateWithStagingBuffer(uint64_t a1, unsigned __int16 *a2, _QWORD *a3, int a4)
{
  char v8;
  MTLTexture *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  SCNMTLComputeCommandEncoder *v20;
  uint64_t v21;
  unint64_t v22;
  MTLBuffer *v23;
  _WORD v25[2];
  int v26;
  _QWORD v27[6];
  __int128 v28;
  int v29;

  if (a4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 2;
    *((_BYTE *)a2 + 10) |= 2u;
  }
  *((_BYTE *)a2 + 9) = v8;
  v29 = *((_DWORD *)a2 + 4);
  v28 = *(_OWORD *)a2;
  v9 = (MTLTexture *)SCNMTLTexturePool::allocate(a1, &v28, 0, a4);
  v10 = (unint64_t)SCNMTLPixelFormatGetBitSize() >> 3;
  v11 = v10 * *a2;
  v12 = v11 * a2[1];
  v13 = -[MTLTexture width](v9, "width");
  v14 = -[MTLTexture height](v9, "height");
  v15 = -[MTLTexture depth](v9, "depth");
  if (a4)
  {
    memset(v27, 0, 24);
    v27[3] = v13;
    v27[4] = v14;
    v27[5] = v15;
    -[MTLTexture replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:](v9, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v27, 0, 0, *a3, v11, v12);
    return v9;
  }
  v25[0] = v10;
  v25[1] = v11;
  v26 = v12;
  if (-[MTLTexture pixelFormat](v9, "pixelFormat") != 23
    && -[MTLTexture pixelFormat](v9, "pixelFormat") != 63
    && -[MTLTexture pixelFormat](v9, "pixelFormat") != 113)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      SCNMTLTexturePool::allocateWithStagingBuffer(v16, v17, v18);
  }
  v19 = objc_msgSend(*(id *)(a1 + 8), "computePipelineStateForKernel:", CFSTR("copy_texture_3D_from_buffer_ushort"));
  v20 = (SCNMTLComputeCommandEncoder *)-[SCNMTLRenderContext resourceComputeEncoder](*(_QWORD *)a1);
  v21 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v19);
  if (v20->_computePipelineState != (MTLComputePipelineState *)v21)
  {
    v20->_computePipelineState = (MTLComputePipelineState *)v21;
    -[MTLComputeCommandEncoder setComputePipelineState:](v20->_encoder, "setComputePipelineState:", v21);
  }
  v23 = (MTLBuffer *)a3[1];
  v22 = a3[2];
  if (v20->_buffers[0] != v23)
  {
    v20->_buffers[0] = v23;
LABEL_16:
    v20->_offsets[0] = v22;
    v20->_buffersToBind[0] |= 1uLL;
    goto LABEL_17;
  }
  if (v20->_offsets[0] != v22)
    goto LABEL_16;
LABEL_17:
  SCNMTLComputeCommandEncoder::setBytes(v20, v25, 8uLL, 1uLL);
  if (v20->_textures[0] != v9)
  {
    v20->_textures[0] = v9;
    v20->_texturesToBind[0] |= 1uLL;
  }
  SCNMTLComputeCommandEncoder::dispatchOnGrid3D(v20, -[MTLTexture width](v9, "width"), -[MTLTexture height](v9, "height"), -[MTLTexture depth](v9, "depth"));
  return v9;
}

uint64_t SCNMTLComputeCommandEncoder::dispatchOnGrid3D(SCNMTLComputeCommandEncoder *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  MTLComputeCommandEncoder *encoder;
  MTLComputeCommandEncoder *v18;
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];

  if (!this->_computePipelineState)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      SCNMTLComputeCommandEncoder::dispatchOnTextureCube(v8, v9, v10);
  }
  SCNMTLComputeCommandEncoder::_bindPendingTextures(this);
  SCNMTLComputeCommandEncoder::_bindPendingBuffers(this);
  v11 = -[MTLComputePipelineState threadExecutionWidth](this->_computePipelineState, "threadExecutionWidth");
  v12 = -[MTLComputePipelineState maxTotalThreadsPerThreadgroup](this->_computePipelineState, "maxTotalThreadsPerThreadgroup");
  if ((this->_features & 0x40) != 0)
  {
    encoder = this->_encoder;
    v22[0] = a2;
    v22[1] = a3;
    v22[2] = a4;
    v21[0] = v11;
    v21[1] = v12 / v11;
    v21[2] = 1;
    return -[MTLComputeCommandEncoder dispatchThreads:threadsPerThreadgroup:](encoder, "dispatchThreads:threadsPerThreadgroup:", v22, v21);
  }
  else
  {
    if (v11 >= a2)
      v13 = a2;
    else
      v13 = v11;
    if (v11 >= a3)
      v14 = a3;
    else
      v14 = v11;
    if (v11 >= a4)
      v15 = a4;
    else
      v15 = v11;
    while (v14 * v13 * v15 > v12)
    {
      if (v13 <= v14 || v13 <= v15)
      {
        if (v14 <= v15)
          v15 >>= 1;
        else
          v14 >>= 1;
      }
      else
      {
        v13 >>= 1;
      }
    }
    v18 = this->_encoder;
    v20[0] = (a2 + v13 - 1) / v13;
    v20[1] = (a3 + v14 - 1) / v14;
    v20[2] = (a4 + v15 - 1) / v15;
    v19[0] = v13;
    v19[1] = v14;
    v19[2] = v15;
    return -[MTLComputeCommandEncoder dispatchThreadgroups:threadsPerThreadgroup:](v18, "dispatchThreadgroups:threadsPerThreadgroup:", v20, v19);
  }
}

void __AddTextureProperty(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t DefineForPropertyAndSuffix;
  const void *v9;
  const void *v10;
  int v11;
  const void *v12;
  int v13;
  __CFDictionary *v14;
  const void *v15;
  uint64_t v16;

  DefineForPropertyAndSuffix = __GetDefineForPropertyAndSuffix(a3, 0);
  v9 = (const void *)__GetDefineForPropertyAndSuffix(a3, 1);
  v10 = (const void *)__GetDefineForPropertyAndSuffix(a3, 5);
  *(_BYTE *)(a1 + 56) = 0;
  if (a4 && C3DProgramHashCodeGetEffectPropertyIsEnabled(*(_QWORD *)(a1 + 48), a2))
  {
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)a1, v9))
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v9, CFSTR("1"));
    if (!C3DProgramHashCodeGetEffectPropertyHasTexture(*(_QWORD *)(a1 + 48), a2))
    {
      v13 = 2;
      goto LABEL_12;
    }
    if (C3DProgramHashCodeGetEffectPropertyTextureType(*(_QWORD *)(a1 + 48), a2) == 4)
      v11 = 7;
    else
      v11 = 6;
    v12 = (const void *)__GetDefineForPropertyAndSuffix(a3, v11);
    *(_BYTE *)(a1 + 56) = 1;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v12, &stru_1EA5A6480);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, v10, &stru_1EA5A6480);
    if ((C3DProgramHashCodeGetEffectPropertyHashCode(*(_QWORD *)(a1 + 48), a2) & 0x2000) != 0)
    {
      v13 = 3;
LABEL_12:
      v14 = *(__CFDictionary **)a1;
      v15 = (const void *)__GetDefineForPropertyAndSuffix(a3, v13);
      CFDictionaryAddValue(v14, v15, &stru_1EA5A6480);
    }
  }
  if (a3 != 7 && CFDictionaryGetCountOfKey(*(CFDictionaryRef *)a1, v9))
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 8), 0, CFSTR("  vec4 %@;\n"), DefineForPropertyAndSuffix);
  if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)a1, v10))
  {
    CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 8), 0, CFSTR("    vec2 %@Texcoord;\n"),
      DefineForPropertyAndSuffix);
    v16 = (C3DProgramHashCodeGetEffectPropertyHashCode(*(_QWORD *)(a1 + 48), a2) >> 18) & 0xF;
    if ((_DWORD)v16 != 15)
      CFStringAppendFormat(*(CFMutableStringRef *)(a1 + 40), 0, CFSTR("    _surface.%@Texcoord = v_texcoord%d;\n"),
        DefineForPropertyAndSuffix,
        v16);
  }
}

void __ReplaceCodeWithModifiers(uint64_t *a1, uint64_t a2, __CFString *a3, __CFString *a4, void *a5, void *a6, const __CFString *a7)
{
  CFMutableStringRef Mutable;
  uint64_t v14;
  const __CFString *Declaration;
  const __CFString *Code;
  NSObject *v17;
  const __CFDictionary *Defines;
  const __CFDictionary *StandardUniformsUsed;
  uint8_t v21;
  _BYTE v22[15];
  CFRange v23;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (a2 >= 1)
  {
    do
    {
      v14 = *a1;
      Declaration = (const __CFString *)C3DShaderModifierGetDeclaration(*a1);
      if (Declaration)
        CFStringAppend(a4, Declaration);
      Code = (const __CFString *)C3DShaderModifierGetCode(v14);
      if (Code)
      {
        CFStringAppend(Mutable, Code);
      }
      else
      {
        v17 = scn_default_log();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          __ReplaceCodeWithModifiers_cold_1(&v21, v22, v17);
      }
      Defines = (const __CFDictionary *)C3DShaderModifierGetDefines(v14);
      if (Defines)
        CFDictionaryApplyFunction(Defines, (CFDictionaryApplierFunction)__appendDictionary_0, a5);
      StandardUniformsUsed = (const __CFDictionary *)C3DShaderModifierGetStandardUniformsUsed(v14);
      if (StandardUniformsUsed)
        CFDictionaryApplyFunction(StandardUniformsUsed, (CFDictionaryApplierFunction)__appendDictionary_0, a6);
      ++a1;
      --a2;
    }
    while (a2);
  }
  v23 = CFStringFind(a3, a7, 0);
  CFStringReplace(a3, v23, Mutable);
  CFRelease(Mutable);
}

void __AppendUniformsDeclaration(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
  CFStringAppendFormat(theString, 0, CFSTR("uniform %@ %@;\n"), a2, a1);
}

uint64_t C3DFXTechniqueCreateDepthOfField()
{
  const void *v0;
  uint64_t v1;
  uint64_t PassNamed;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = (const void *)C3DDictionaryNamed(CFSTR("C3DFXDOFPass_deprecated.plist"));
  v1 = C3DFXTechniqueCreateWithDescription(v0, 0);
  PassNamed = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_downSample4x"));
  C3DFXPassSetWillExecuteCallback(PassNamed, (uint64_t)_willExecuteDof);
  v3 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_DOF_blurCoc_H"));
  C3DFXPassSetup2PassesBlurCallbacks(v3, 1);
  v4 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_DOF_blurCoc_V"));
  C3DFXPassSetup2PassesBlurCallbacks(v4, 0);
  v5 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_blurColor4x_H"));
  C3DFXPassSetup2PassesBlurCallbacks(v5, 1);
  v6 = C3DFXTechniqueGetPassNamed(v1, CFSTR("SceneKit_blurColor4x_V"));
  C3DFXPassSetup2PassesBlurCallbacks(v6, 0);
  return v1;
}

void _willExecuteDof(uint64_t a1)
{
  __n128 Viewport;
  uint64_t v8;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t v11;
  uint64_t FXContext;
  uint64_t MainPassInstance;
  double v14;
  double v15;
  float FocusDistance;
  float v17;
  float v18;
  double v19;
  uint64_t v20;
  float v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float v39;
  const __CFDictionary *v40;
  float v41;
  __int128 v42;
  __int128 v43;
  float32x2_t v44;
  uint64_t v45;
  float v46;

  v46 = 0.0;
  v45 = 0;
  Viewport = C3DEngineContextGetViewport((__n128 *)*(_QWORD *)(a1 + 24));
  __asm { FMOV            V1.2S, #1.0 }
  v44 = vdiv_f32(_D1, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL));
  v8 = *(_QWORD *)(a1 + 24);
  PointOfView = C3DEngineContextGetPointOfView(v8);
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    if (Camera)
    {
      v11 = (uint64_t)Camera;
      FXContext = C3DEngineContextGetFXContext(v8);
      MainPassInstance = C3DFXContextGetMainPassInstance(FXContext);
      v14 = *(double *)(MainPassInstance + 4824);
      v15 = *(double *)(MainPassInstance + 4832);
      FocusDistance = C3DCameraGetFocusDistance(v11);
      if (FocusDistance >= 1.0)
        v17 = 10.0 / FocusDistance;
      else
        v17 = 10.0;
      v18 = (float)(FocusDistance + 0.1) * (float)(C3DCameraGetAperture(v11) * v17);
      v19 = v14 * (float)(FocusDistance - (float)(FocusDistance + 0.1));
      *(float *)&v20 = (v15 - v14) * (float)(FocusDistance * v18) / (v15 * v19);
      v21 = (v14 - FocusDistance) * v18 / v19;
      *((float *)&v20 + 1) = v21;
      v46 = 1.0 - v21;
      v45 = v20;
    }
    else
    {
      v30 = scn_default_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        _willExecuteDof_cold_2(v30, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  else
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      _willExecuteDof_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v42 = xmmword_1DD02AFF0;
  v43 = xmmword_1DD02AFE0;
  v38 = C3DEngineContextGetPointOfView(*(_QWORD *)(a1 + 24));
  v39 = 0.0;
  if (v38)
  {
    v40 = C3DNodeGetCamera((uint64_t)v38);
    if (v40)
      v39 = C3DCameraGetDepthOfFieldIntensity((uint64_t)v40) * 0.25;
  }
  v41 = v39;
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-blur-radiusV"), &v41);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-blur-radiusH"), &v41);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-dof-lerpBias"), &v42);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-dof-lerpScale"), &v43);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-dof-cocScaleBias"), &v45);
  C3DFXTechniqueSetValueForSymbol(*(_QWORD *)(a1 + 8), CFSTR("C3D-dof-invertPixelSize"), &v44);
}

void *_C3DCreateProgressWithUnits(int a1)
{
  void *v2;

  if (!objc_msgSend(MEMORY[0x1E0CB38A8], "currentProgress"))
    return 0;
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB38A8], "progressWithTotalUnitCount:", a1);
  if (v2)
    objc_msgSend(v2, "addObserver:forKeyPath:options:context:", objc_opt_class(), CFSTR("fractionCompleted"), 1, 0);
  return v2;
}

uint64_t C3DExecuteProgressBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  double v17;
  NSObject *v18;
  char v19;
  uint64_t *v21;
  uint8_t v22[4];
  uint64_t v23;
  uint8_t v24[4];
  _DWORD v25[519];

  *(_QWORD *)&v25[517] = *MEMORY[0x1E0C80C00];
  v21 = &a9;
  if (a1)
  {
    v9 = 0;
    do
    {
      *(_QWORD *)&v25[2 * v9++ + 5] = a1;
      v10 = v21++;
      a1 = *v10;
    }
    while (*v10);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v11 = _C3DCreateProgressWithUnits(v9);
  if (!(_DWORD)v9)
    return 1;
  v12 = v11;
  v13 = 0;
  v14 = v9;
  do
  {
    objc_msgSend(v12, "becomeCurrentWithPendingUnitCount:", 1);
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)&v25[2 * v13 + 5] + 16))();
    if (v12)
    {
      if (v12 != (void *)objc_msgSend(MEMORY[0x1E0CB38A8], "currentProgress"))
      {
        v16 = scn_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          C3DExecuteProgressBlocks_cold_2(v24, v25, v16);
      }
    }
    objc_msgSend(v12, "resignCurrent");
    objc_msgSend(v12, "fractionCompleted");
    if (v17 > 1.0)
    {
      v18 = scn_default_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        C3DExecuteProgressBlocks_cold_1(v22, &v23, v18);
    }
    if (++v13 < v14)
      v19 = v15;
    else
      v19 = 0;
  }
  while ((v19 & 1) != 0);
  return v15;
}

uint64_t C3DExecuteIncrementalProgressBlock(int a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[6];
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v4 = _C3DCreateProgressWithUnits(a1);
  objc_msgSend(v4, "becomeCurrentWithPendingUnitCount:", 1);
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __C3DExecuteIncrementalProgressBlock_block_invoke;
  v24[3] = &unk_1EA5A3758;
  v24[4] = v4;
  v24[5] = &v26;
  v25 = a1;
  v5 = (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 16))(a2, v24);
  if (*((_DWORD *)v27 + 6) < a1)
  {
    if (v4)
    {
      if (v4 != (void *)objc_msgSend(MEMORY[0x1E0CB38A8], "currentProgress"))
      {
        v6 = scn_default_log();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
          C3DExecuteIncrementalProgressBlock_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }
    objc_msgSend(v4, "resignCurrent");
    objc_msgSend(v4, "fractionCompleted");
    if (v14 > 1.0)
    {
      v15 = scn_default_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      {
        C3DExecuteIncrementalProgressBlock_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
        if (!v4)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
  }
  if (v4)
LABEL_9:
    objc_msgSend(v4, "removeObserver:forKeyPath:context:", objc_opt_class(), CFSTR("fractionCompleted"), 0);
LABEL_10:
  _Block_object_dispose(&v26, 8);
  return v5;
}

void sub_1DCEFB560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::vector<SCNSemanticBinding>::push_back[abi:nn180100](void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      abort();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1DCEFBE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_3_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x18u);
}

uint64_t _C3DNotificationCenterCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
}

CFStringRef _C3DNotificationCenterCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DNotificationCenter %p>"), a1);
}

CFStringRef _C3DNotificationCenterCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DNotificationCenter %p>"), a1);
}

void *_createSCNGeometryArrayFromC3DGeometryArray(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id *v7;
  id *ObjCWrapper;
  SCNGeometry *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(a1);
        v7 = *(id **)(*((_QWORD *)&v11 + 1) + 8 * i);
        ObjCWrapper = C3DEntityGetObjCWrapper(v7);
        if (ObjCWrapper)
        {
          objc_msgSend(v2, "addObject:", ObjCWrapper);
        }
        else
        {
          v9 = -[SCNGeometry initWithGeometryRef:]([SCNGeometry alloc], "initWithGeometryRef:", v7);
          objc_msgSend(v2, "addObject:", v9);

        }
      }
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }
  return v2;
}

void *_createSCNGeometrySubArrayFromC3DGeometryArray(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id *v16;
  id *ObjCWrapper;
  SCNGeometry *v18;

  v3 = a3;
  v4 = a2;
  v6 = a2 + a3;
  if (a2 + a3 > objc_msgSend(a1, "count"))
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      _createSCNGeometrySubArrayFromC3DGeometryArray_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v3);
  if (v4 < v6)
  {
    do
    {
      v16 = (id *)objc_msgSend(a1, "objectAtIndexedSubscript:", v4);
      ObjCWrapper = C3DEntityGetObjCWrapper(v16);
      if (ObjCWrapper)
      {
        objc_msgSend(v15, "addObject:", ObjCWrapper);
      }
      else
      {
        v18 = -[SCNGeometry initWithGeometryRef:]([SCNGeometry alloc], "initWithGeometryRef:", v16);
        objc_msgSend(v15, "addObject:", v18);

      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return v15;
}

void *_createC3DGeometryArrayFromSCNGeometryArray(void *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(a1, "count"));
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(a1);
        objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "geometryRef"));
      }
      while (v4 != v6);
      v4 = objc_msgSend(a1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }
  return v2;
}

id *_block_invoke(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  id *result;

  result = C3DEntityGetObjCWrapper(a3);
  if (result)
    return (id *)-[SCNGeometrySource set_encodeDataAsHalf:](+[SCNGeometrySource geometrySourceWithMeshSourceRef:](SCNGeometrySource, "geometrySourceWithMeshSourceRef:", a4), "set_encodeDataAsHalf:", objc_msgSend(result, "_encodeDataAsHalf"));
  return result;
}

__CFString *_C3DProgramHashCodeCFCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  const __CFArray *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  CFStringRef v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  const __CFString *v28;
  unsigned int v29;
  uint64_t j;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  const __CFString *v35;
  uint64_t v36;
  const __CFAllocator *alloc;
  int data;
  _QWORD v40[5];
  int v41;
  CC_SHA256_CTX c;
  char cStr[65];
  unsigned __int8 md[32];
  uint64_t v45;
  int8x16x2_t v46;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DProgramHashCode %p : "), a1);
  v4 = (_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 16))
    CFStringAppend(Mutable, CFSTR("SM_Mat,"));
  if (*(_QWORD *)(a1 + 24))
    CFStringAppend(Mutable, CFSTR("SM_Geo,"));
  if (*v4 || *(_QWORD *)(a1 + 24))
  {
    alloc = v2;
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    v5 = 0;
    v6 = 1;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = 0;
      v9 = v6;
      v10 = (const __CFArray *)v4[v5];
      do
      {
        v40[0] = v7;
        v40[1] = 3221225472;
        v40[2] = ____createShaderModifierHashCode_block_invoke;
        v40[3] = &__block_descriptor_44_e13_v24__0q8r_v16l;
        v41 = v8;
        v40[4] = &c;
        C3DCFArrayApplyBlock(v10, (uint64_t)v40);
        ++v8;
      }
      while (v8 != 4);
      v6 = 0;
      v5 = 1;
    }
    while ((v9 & 1) != 0);
    for (i = 0; i != 64; i += 8)
    {
      v12 = *(_QWORD *)(a1 + 216 + i);
      if (v12)
        CFStringUpdateHash(v12);
    }
    data = 2;
    CC_SHA256_Update(&c, &data, 4u);
    CC_SHA256_Final(md, &c);
    v13 = 0;
    v14 = cStr;
    v15.i64[0] = 0xA0A0A0A0A0A0A0A0;
    v15.i64[1] = 0xA0A0A0A0A0A0A0A0;
    v16.i64[0] = 0x3737373737373737;
    v16.i64[1] = 0x3737373737373737;
    v17.i64[0] = 0x3030303030303030;
    v17.i64[1] = 0x3030303030303030;
    v18.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v18.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v19.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v19.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    do
    {
      v20 = *(int8x16_t *)&md[v13];
      v46.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v15, (uint8x16_t)v20), v17, v16), (uint8x16_t)v20, 4uLL);
      v21 = vandq_s8(v20, v18);
      v46.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v19, (uint8x16_t)v21), v17, v16), v21);
      vst2q_s8(v14, v46);
      v14 += 32;
      v13 += 16;
    }
    while (v13 != 32);
    cStr[64] = 0;
    v22 = CFStringCreateWithCString(alloc, cStr, 0x600u);
    CFStringAppendFormat(Mutable, 0, CFSTR("SM(%@),"), v22);
    CFRelease(v22);
  }
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 1) != 0)
  {
    CFStringAppend(Mutable, CFSTR("Aone,"));
    v23 = *(_WORD *)(a1 + 200);
    if ((v23 & 2) == 0)
    {
LABEL_20:
      if ((v23 & 4) == 0)
        goto LABEL_21;
      goto LABEL_46;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_20;
  }
  CFStringAppend(Mutable, CFSTR("Acst,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 4) == 0)
  {
LABEL_21:
    if ((v23 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  CFStringAppend(Mutable, CFSTR("opq,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x10) == 0)
  {
LABEL_22:
    if ((v23 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  CFStringAppend(Mutable, CFSTR("tgt,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x20) == 0)
  {
LABEL_23:
    if ((v23 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  CFStringAppend(Mutable, CFSTR("lgh,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x40) == 0)
  {
LABEL_24:
    if ((v23 & 0x400) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  CFStringAppend(Mutable, CFSTR("amb,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x400) == 0)
  {
LABEL_25:
    if ((v23 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  CFStringAppend(Mutable, CFSTR("prob,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x80) == 0)
  {
LABEL_26:
    if ((v23 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  CFStringAppend(Mutable, CFSTR("fog,"));
  v23 = *(_WORD *)(a1 + 200);
  if ((v23 & 0x100) == 0)
  {
LABEL_27:
    if ((v23 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_52:
  CFStringAppend(Mutable, CFSTR("dynB,"));
  if ((*(_WORD *)(a1 + 200) & 0x200) != 0)
LABEL_28:
    CFStringAppend(Mutable, CFSTR("pntR,"));
LABEL_29:
  CFStringAppendFormat(Mutable, 0, CFSTR("[%@:"), _C3DProgramHashCodeCFCopyDebugDescription_modelNames[*(_WORD *)(a1 + 120) & 0xF]);
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x10) != 0)
  {
    CFStringAppend(Mutable, CFSTR("PerPix|"));
    v24 = *(unsigned __int16 *)(a1 + 120);
    if ((v24 & 0x20) == 0)
    {
LABEL_31:
      if ((v24 & 0x40) == 0)
        goto LABEL_32;
      goto LABEL_56;
    }
  }
  else if ((v24 & 0x20) == 0)
  {
    goto LABEL_31;
  }
  CFStringAppend(Mutable, CFSTR("Double|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x40) == 0)
  {
LABEL_32:
    if ((v24 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_57;
  }
LABEL_56:
  CFStringAppend(Mutable, CFSTR("OverLght|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x80) == 0)
  {
LABEL_33:
    if ((v24 & 0x100) == 0)
      goto LABEL_34;
    goto LABEL_58;
  }
LABEL_57:
  CFStringAppend(Mutable, CFSTR("WrNrm|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x100) == 0)
  {
LABEL_34:
    if ((v24 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_59;
  }
LABEL_58:
  CFStringAppend(Mutable, CFSTR("Nrmliz|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x200) == 0)
  {
LABEL_35:
    if ((v24 & 0x400) == 0)
      goto LABEL_36;
LABEL_60:
    CFStringAppend(Mutable, CFSTR("LinDepth|"));
    v24 = *(unsigned __int16 *)(a1 + 120);
    if ((v24 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_61;
  }
LABEL_59:
  CFStringAppend(Mutable, CFSTR("WriteDepth|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
  if ((v24 & 0x400) != 0)
    goto LABEL_60;
LABEL_36:
  if ((v24 & 0x8000) == 0)
    goto LABEL_37;
LABEL_61:
  CFStringAppend(Mutable, CFSTR("LockAmb|"));
  v24 = *(unsigned __int16 *)(a1 + 120);
LABEL_37:
  v25 = (v24 >> 11) & 0xF;
  if (v25 <= 3)
    CFStringAppend(Mutable, off_1EA5A3990[v25]);
  CFStringAppend(Mutable, CFSTR("]"));
  CFStringAppend(Mutable, CFSTR("[Node:"));
  v26 = *(_DWORD *)(a1 + 124);
  if (v26 >> 28)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("skn(%d)|"), v26 >> 28);
    v26 = *(_DWORD *)(a1 + 124);
    if ((v26 & 1) == 0)
    {
LABEL_41:
      if ((v26 & 2) == 0)
        goto LABEL_42;
      goto LABEL_64;
    }
  }
  else if ((v26 & 1) == 0)
  {
    goto LABEL_41;
  }
  CFStringAppend(Mutable, CFSTR("LightMap|"));
  v26 = *(_DWORD *)(a1 + 124);
  if ((v26 & 2) == 0)
  {
LABEL_42:
    if ((v26 & 4) == 0)
      goto LABEL_76;
LABEL_65:
    CFStringAppend(Mutable, CFSTR("Tess|"));
    v27 = *(_DWORD *)(a1 + 124);
    if ((v27 & 8) != 0)
    {
      v28 = CFSTR("PNTriangles|");
    }
    else
    {
      if ((v27 & 0x10) == 0)
        goto LABEL_70;
      v28 = CFSTR("Phong|");
    }
    CFStringAppend(Mutable, v28);
LABEL_70:
    v26 = *(_DWORD *)(a1 + 124);
    if ((v26 & 0x20) != 0)
    {
      CFStringAppend(Mutable, CFSTR("OSD|"));
      v29 = *(_DWORD *)(a1 + 124);
      if ((v29 & 0x40) != 0)
      {
        CFStringAppend(Mutable, CFSTR("SingleCrease|"));
        v29 = *(_DWORD *)(a1 + 124);
      }
      if ((v29 & 0x80) != 0)
      {
        CFStringAppend(Mutable, CFSTR("ScreenSpace|"));
        v29 = *(_DWORD *)(a1 + 124);
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("PrimvarData=%d|"), (v29 >> 8) & 0x7FFFF);
      v26 = *(_DWORD *)(a1 + 124);
    }
    goto LABEL_76;
  }
LABEL_64:
  CFStringAppend(Mutable, CFSTR("VrtCol|"));
  v26 = *(_DWORD *)(a1 + 124);
  if ((v26 & 4) != 0)
    goto LABEL_65;
LABEL_76:
  if ((v26 & 0x8000000) != 0)
    CFStringAppend(Mutable, CFSTR("Bézier|"));
  CFStringAppend(Mutable, CFSTR("]"));
  for (j = 0; j != 21; ++j)
  {
    v31 = *(unsigned int *)(a1 + 36 + 4 * j);
    if ((v31 & 0x800) == 0)
      continue;
    CFStringAppendFormat(Mutable, 0, CFSTR("[%@:"), _C3DProgramHashCodeCFCopyDebugDescription_propertyNames[j]);
    if ((v31 & 1) != 0)
    {
      CFStringAppend(Mutable, CFSTR("Tex|"));
      if ((v31 & 2) == 0)
      {
LABEL_82:
        if ((v31 & 4) == 0)
          goto LABEL_83;
        goto LABEL_99;
      }
    }
    else if ((v31 & 2) == 0)
    {
      goto LABEL_82;
    }
    CFStringAppend(Mutable, CFSTR("rgb0|"));
    if ((v31 & 4) == 0)
    {
LABEL_83:
      if ((v31 & 8) == 0)
        goto LABEL_84;
      goto LABEL_100;
    }
LABEL_99:
    CFStringAppend(Mutable, CFSTR("rgb1|"));
    if ((v31 & 8) == 0)
    {
LABEL_84:
      if ((v31 & 0x10) == 0)
        goto LABEL_85;
      goto LABEL_101;
    }
LABEL_100:
    CFStringAppend(Mutable, CFSTR("a1|"));
    if ((v31 & 0x10) == 0)
    {
LABEL_85:
      if ((v31 & 0x20) != 0)
        goto LABEL_102;
      goto LABEL_86;
    }
LABEL_101:
    CFStringAppend(Mutable, CFSTR("flt0|"));
    if ((v31 & 0x20) != 0)
    {
LABEL_102:
      CFStringAppend(Mutable, CFSTR("texA|"));
      if ((v31 & 0x2000) == 0)
        goto LABEL_88;
LABEL_87:
      CFStringAppend(Mutable, CFSTR("int|"));
      goto LABEL_88;
    }
LABEL_86:
    if ((v31 & 0x2000) != 0)
      goto LABEL_87;
LABEL_88:
    if ((v31 & 0x1C000) != 0)
      CFStringAppend(Mutable, CFSTR("comp|"));
    if ((v31 & 0x1000) != 0)
      CFStringAppend(Mutable, CFSTR("mat|"));
    v32 = ((v31 >> 6) & 0xF) - 1;
    if (v32 <= 3)
      CFStringAppend(Mutable, off_1EA5A39B0[v32]);
    CFStringAppend(Mutable, CFSTR("]"));
  }
  if (*(_BYTE *)(a1 + 160))
  {
    CFStringAppend(Mutable, CFSTR("[Lighting:"));
    if (*(_BYTE *)(a1 + 160))
    {
      v33 = 0;
      while (2)
      {
        if (v33)
          CFStringAppend(Mutable, CFSTR(","));
        v34 = *(unsigned int *)(a1 + 128 + 4 * v33);
        if ((*(_DWORD *)(a1 + 128 + 4 * v33) & 7) == 7)
        {
          if ((v34 & 0x200) == 0)
            goto LABEL_111;
LABEL_120:
          CFStringAppend(Mutable, CFSTR("g"));
          if ((v34 & 0x400) == 0)
            goto LABEL_113;
LABEL_112:
          CFStringAppend(Mutable, CFSTR("s"));
          goto LABEL_113;
        }
        CFStringAppend(Mutable, off_1EA5A39D0[v34 & 7]);
        if ((v34 & 0x200) != 0)
          goto LABEL_120;
LABEL_111:
        if ((v34 & 0x400) != 0)
          goto LABEL_112;
LABEL_113:
        if ((WORD1(v34) & 0x1F) >= 2u)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("Soft(%d)"), WORD1(v34) & 0x1F);
          if ((v34 & 0x800) != 0)
            goto LABEL_123;
LABEL_115:
          if ((v34 & 0x1000) == 0)
          {
LABEL_117:
            v35 = CFSTR("(c)");
            switch((v34 >> 3) & 7)
            {
              case 0u:
                goto LABEL_129;
              case 1u:
                goto LABEL_128;
              case 2u:
                v35 = CFSTR("(l)");
                goto LABEL_128;
              case 3u:
                v35 = CFSTR("(q)");
                goto LABEL_128;
              case 4u:
                v35 = CFSTR("(e)");
                goto LABEL_128;
              default:
                v35 = CFSTR("(?)");
LABEL_128:
                CFStringAppend(Mutable, v35);
LABEL_129:
                v36 = ((v34 >> 6) & 7) - 1;
                if (v36 <= 3)
                  CFStringAppend(Mutable, off_1EA5A3A08[v36]);
                if (++v33 >= (unint64_t)*(unsigned __int8 *)(a1 + 160))
                  goto LABEL_132;
                continue;
            }
          }
        }
        else
        {
          if ((v34 & 0x800) == 0)
            goto LABEL_115;
LABEL_123:
          CFStringAppend(Mutable, CFSTR("c"));
          if ((v34 & 0x1000) == 0)
            goto LABEL_117;
        }
        break;
      }
      CFStringAppend(Mutable, CFSTR("m"));
      goto LABEL_117;
    }
LABEL_132:
    CFStringAppend(Mutable, CFSTR("]"));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t __UpdateHashCodeUVSetForEffectProperty(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v10;

  v4 = *(unsigned __int8 *)(a1 + 163);
  if ((a3 & 1) != 0)
  {
LABEL_7:
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 163);
LABEL_8:
    v7 = a1 + 2 * v4;
    *(_BYTE *)(v7 + 164) = a2;
    if (!a3)
      a4 = -1;
    *(_BYTE *)(v7 + 165) = a4;
    *(_BYTE *)(a1 + 163) = v4 + 1;
    return v5;
  }
  if (*(_BYTE *)(a1 + 163))
  {
    v5 = 0;
    v6 = (unsigned __int8 *)(a1 + 165);
    while (*(v6 - 1) != a2 || *v6 != 255)
    {
      v6 += 2;
      if (v4 == ++v5)
        goto LABEL_7;
    }
    v10 = *(unsigned __int8 *)(a1 + 163);
  }
  else
  {
    v10 = 0;
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v5 == v10)
    goto LABEL_8;
  return v5;
}

uint64_t C3DProgramHashCodeGetLightHashCode(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 128);
}

uint64_t C3DProgramHashCodeGetConstantsValues(uint64_t a1)
{
  return *(_QWORD *)(a1 + 288);
}

uint64_t C3DProgramHashCodeGetMultiVertexOutputStreamGenerator(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 199) >> 5) & 3;
}

const __CFString *C3DProgramHashCodeGetCustomSlotSortedName(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned __int8 *)(a1 + 162) > a2)
    return *(const __CFString **)(a1 + 8 * a2 + 216);
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    C3DProgramHashCodeGetCustomSlotSortedName_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  return CFSTR("unknown");
}

uint64_t C3DProgramHashCodeGetCustomSlotUVSet(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned __int8 *)(a1 + 162) > a2)
    return *(char *)(a1 + a2 + 203);
  v3 = scn_default_log();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    C3DProgramHashCodeGetCustomSlotSortedName_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  return -1;
}

uint64_t C3DProgramHashCodeGetShaderModifiers(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 8 * a2 + 16);
}

BOOL C3DProgramHashCodeMatchLightHashCodesAndLightingContext(uint64_t a1, unsigned __int16 *a2)
{
  __int16 v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = *(_WORD *)(a1 + 120);
  if ((v2 & 0xF) == 5)
  {
    v3 = *(unsigned __int16 *)(a1 + 200);
    v4 = *a2;
    if ((v3 & 0x400) != 0 && (((v4 >> 4) ^ (v3 >> 11)) & 7) != 0)
      return 0;
  }
  else
  {
    v4 = *a2;
    if ((v2 & 0xB) != 0)
    {
      v5 = *(unsigned __int16 *)(a1 + 200);
      if (((v4 ^ (v5 >> 5)) & 1) == 0 || (((v5 >> 6) ^ (v4 >> 1)) & 1) != 0)
        return 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + 160) != (v4 >> 7)
    || ((v4 >> 3) & 1) != ((*(unsigned __int8 *)(a1 + 202) >> 4) & 1))
  {
    return 0;
  }
  v6 = (v4 >> 7);
  if (!(_DWORD)v6)
    return 1;
  if (*(_DWORD *)(a1 + 128) != *((_DWORD *)a2 + 1))
    return 0;
  v7 = 0;
  do
  {
    v8 = v7;
    if (v6 - 1 == v7)
      break;
    v9 = *(_DWORD *)(a1 + 132 + 4 * v7);
    v10 = *(_DWORD *)&a2[2 * v7++ + 4];
  }
  while (v9 == v10);
  return v8 + 1 >= v6;
}

uint64_t ____createShaderModifierHashCode_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = C3DShaderModifierGetEntryPoint(a3);
  if ((_DWORD)result == *(_DWORD *)(a1 + 40))
    return C3DShaderModifierUpdateHashCode(a3, *(CC_SHA256_CTX **)(a1 + 32));
  return result;
}

const void *C3DResourceManagerRegistryGetResourceManagerForContext(const void *a1, int a2)
{
  const void *v4;
  const void *context;
  void *value;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  _C3DResourceManagerRegistryLock();
  v4 = CFDictionaryGetValue((CFDictionaryRef)_registry, a1);
  if (!v4)
  {
    context = a1;
    value = 0;
    CFDictionaryApplyFunction((CFDictionaryRef)_registry, (CFDictionaryApplierFunction)__findSharedContext, &context);
    v4 = value;
    if (value)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)_registry, a1, value);
    }
    else if (a2)
    {
      v4 = (const void *)C3DResourceManagerCreate();
      CFDictionarySetValue((CFMutableDictionaryRef)_registry, a1, v4);
      CFRelease(v4);
    }
    else
    {
      v4 = 0;
    }
  }
  pthread_mutex_unlock(&_registryLock);
  return v4;
}

CFMutableBagRef _C3DResourceManagerRegistryLock()
{
  CFMutableBagRef result;

  result = (CFMutableBagRef)pthread_mutex_lock(&_registryLock);
  if (!_registry)
  {
    _registry = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    result = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    _registryRetainCount = (uint64_t)result;
  }
  return result;
}

BOOL __findSharedContext(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  if (!*(_QWORD *)(a3 + 8))
  {
    result = C3DEAGLContextAreShared((void *)result, *(void **)a3);
    if (result)
      *(_QWORD *)(a3 + 8) = a2;
  }
  return result;
}

uint64_t C3DResourceManagerRegistryRetainContext(const void *a1)
{
  _C3DResourceManagerRegistryLock();
  CFBagAddValue((CFMutableBagRef)_registryRetainCount, a1);
  return pthread_mutex_unlock(&_registryLock);
}

uint64_t C3DResourceManagerRegistryReleaseContext(uint64_t a1, const void *a2)
{
  uint64_t v3;
  NSObject *v4;

  _C3DResourceManagerRegistryLock();
  CFBagRemoveValue((CFMutableBagRef)_registryRetainCount, a2);
  v3 = MEMORY[0x1DF0D3134](_registryRetainCount, a2);
  if (v3 < 0)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DResourceManagerRegistryReleaseContext_cold_1(v4);
  }
  else if (!v3)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)_registry, a2);
  }
  return pthread_mutex_unlock(&_registryLock);
}

void sub_1DCF01E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4017B78B93);
  _Unwind_Resume(a1);
}

void sub_1DCF020FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4017B78B93);
  _Unwind_Resume(a1);
}

void SCNCActionSequence::SCNCActionSequence(SCNCActionSequence *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA596948;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_BYTE *)(v3 + 81) = a2->var11;
  *(_BYTE *)(v3 + 80) = a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_BYTE *)(v3 + 32) = 1;
}

void SCNCActionSequence::~SCNCActionSequence(SCNCAction *this)
{
  SCNCActionSequence::~SCNCActionSequence(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  void **var0;

  this->var0 = (void **)&off_1EA596948;
  var0 = this[1].var0;
  *(_QWORD *)&this[1].var1 = var0;
  if (var0)
    operator delete(var0);
  SCNCAction::~SCNCAction(this);
}

void SCNCActionSequence::setBaseSpeed(SCNCAction *this, double a2)
{
  void **var0;
  double v4;
  uint64_t v5;

  SCNCAction::setBaseSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    v4 = this->var16 * this->var17;
    do
    {
      v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SCNCActionSequence::setSpeed(SCNCAction *this, double a2)
{
  void **var0;
  double v4;
  uint64_t v5;

  SCNCAction::setSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    v4 = this->var16 * this->var17;
    do
    {
      v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SCNCActionSequence::cpp_updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  unint64_t var3;
  void **var0;
  SCNCAction *v8;
  unint64_t v9;
  void **v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  unint64_t v15;
  void **v16;
  double v17;

  var3 = (unint64_t)this[1].var3;
  var0 = this[1].var0;
  if (var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
LABEL_18:
    abort();
  v8 = (SCNCAction *)var0[var3];
  if (C3DIsRunningInEditor() && *(double *)&this[1].var4 > a3 && this[1].var3)
  {
    do
    {
      if (v8->var5 <= a3)
        break;
      (*((void (**)(SCNCAction *, SCNNode *))v8->var0 + 16))(v8, a2);
      v9 = (unint64_t)this[1].var3 - 1;
      this[1].var3 = (id)v9;
      v10 = this[1].var0;
      if (v9 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v10) >> 3)
        goto LABEL_18;
      v8 = (SCNCAction *)v10[v9];
      *(_WORD *)&v8->var10 = 0;
    }
    while (v9);
  }
  *(double *)&this[1].var4 = a3;
  while (1)
  {
    v11 = SCNCAction::cpp_timeByApplyingTimingfunction(this, a3);
    SCNCAction::updateWithTargetForTime(v8, a2, v11);
    if (v8->var4)
    {
      if (!v8->var10)
        return;
    }
    else if (!objc_msgSend(v8->var3, "finished"))
    {
      return;
    }
    v12 = (unint64_t)this[1].var3 + 1;
    this[1].var3 = (id)v12;
    v13 = ((uint64_t)(*(_QWORD *)&this[1].var1 - (unint64_t)this[1].var0) >> 3) - 1;
    (*((void (**)(SCNCAction *))v8->var0 + 2))(v8);
    if (v12 > v13)
      break;
    v15 = (unint64_t)this[1].var3;
    v16 = this[1].var0;
    if (v15 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v16) >> 3)
      goto LABEL_18;
    v17 = fmin(v11, v14);
    v8 = (SCNCAction *)v16[v15];
    SCNCAction::wasAddedToTargetAtTime(v8, a2, v17);
    SCNCAction::willStartWithTargetAtTime(v8, a2, v17);
  }
  SCNCAction::didFinishWithTargetAtTime(this, a2, v14);
  this->var9 = (*((double (**)(SCNCAction *))v8->var0 + 2))(v8);
  this[1].var3 = (id)(((uint64_t)(*(_QWORD *)&this[1].var1 - (unint64_t)this[1].var0) >> 3) - 1);
}

uint64_t SCNCActionSequence::cpp_wasRemovedFromTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  unint64_t var3;
  void **var0;

  SCNCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  var3 = (unint64_t)this[1].var3;
  var0 = this[1].var0;
  if (var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
    abort();
  return SCNCAction::wasRemovedFromTargetAtTime((SCNCAction *)var0[var3], a2, a3);
}

uint64_t SCNCActionSequence::cpp_willStartWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction **var0;
  unint64_t var3;
  void **v8;

  SCNCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  this[1].var3 = 0;
  var0 = (SCNCAction **)this[1].var0;
  if (*(SCNCAction ***)&this[1].var1 == var0
    || (SCNCAction::wasAddedToTargetAtTime(*var0, a2, a3),
        var3 = (unint64_t)this[1].var3,
        v8 = this[1].var0,
        var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v8) >> 3))
  {
    abort();
  }
  return SCNCAction::willStartWithTargetAtTime((SCNCAction *)v8[var3], a2, a3);
}

uint64_t SCNCActionSequence::cpp_wasPausedWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  unint64_t var3;
  void **var0;

  SCNCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  var3 = (unint64_t)this[1].var3;
  var0 = this[1].var0;
  if (var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
    abort();
  return SCNCAction::wasPausedWithTargetAtTime((SCNCAction *)var0[var3], a2, a3);
}

uint64_t SCNCActionSequence::cpp_willResumeWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  unint64_t var3;
  void **var0;

  SCNCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  var3 = (unint64_t)this[1].var3;
  var0 = this[1].var0;
  if (var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
    abort();
  return SCNCAction::willResumeWithTargetAtTime((SCNCAction *)var0[var3], a2, a3);
}

uint64_t SCNCActionSequence::cpp_timeJumpWithTarget(SCNCAction *this, SCNNode *a2, double a3)
{
  unint64_t var3;
  void **var0;

  SCNCAction::cpp_timeJumpWithTarget(this, a2, a3);
  var3 = (unint64_t)this[1].var3;
  var0 = this[1].var0;
  if (var3 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
    abort();
  return SCNCAction::timeJumpWithTarget((SCNCAction *)var0[var3], a2, a3);
}

SCNCAction *SCNCActionSequence::cpp_reset(SCNCAction *this)
{
  SCNCAction *result;
  void **i;
  void *v4;

  result = SCNCAction::cpp_reset(this);
  *(_QWORD *)&this[1].var4 = 0;
  for (i = this[1].var0; i != *(void ***)&this[1].var1; ++i)
  {
    v4 = *i;
    result = (SCNCAction *)(*(uint64_t (**)(void *))(*(_QWORD *)v4 + 120))(v4);
  }
  return result;
}

C3D::RenderPass *C3D::BoxBlurPass::BoxBlurPass(C3D::BoxBlurPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  C3D::RenderPass *result;
  unsigned int v6;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA598928;
  *((_QWORD *)result + 30) = *(_QWORD *)&a4->var0;
  *((_WORD *)result + 20) = *(_WORD *)&a4->var2;
  v6 = *(unsigned __int16 *)&a4->var6 + *(unsigned __int16 *)&a4->var4;
  if (v6 <= 1)
    LOWORD(v6) = 1;
  *((_WORD *)result + 21) = v6;
  return result;
}

const char *C3D::BoxBlurPass::name(C3D::BoxBlurPass *this)
{
  return "BoxBlurPass";
}

void C3D::BoxBlurPass::setup(C3D::BoxBlurPass *this)
{
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
}

void C3D::BoxBlurPass::compile(C3D::BoxBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _OWORD v19[6];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[6];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary");
  v5 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::BoxBlurPass *))(*(_QWORD *)this + 64))(this) ^ ((unint64_t)*((unsigned __int8 *)this + 241) << 8) ^ *((unsigned __int8 *)this + 240) ^ 0x8D494F26B7A3D32ALL);
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 31) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1EA598908;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_QWORD *)this + 31) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = C3D::PassDescriptor::outputAtIndex((C3D::BoxBlurPass *)((char *)this + 32), 0);
    v11 = *((_QWORD *)this + 31);
    memset(v37, 0, sizeof(v37));
    v38 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0;
    v39 = v4;
    *(_QWORD *)&v40 = *(unsigned __int16 *)(v10 + 28);
    *((_QWORD *)&v51 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v52 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("box_blur_frag_%d"), *((unsigned __int16 *)this + 120));
    v12 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v37);
    v13 = *(void **)(v11 + 16);
    if (v13 != (void *)v12)
    {
      v14 = v12;
      if (v13)

      *(_QWORD *)(v11 + 16) = v14;
    }
    v15 = *((_QWORD *)this + 31);
    memset(v19, 0, sizeof(v19));
    v20 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0;
    v21 = v4;
    *(_QWORD *)&v22 = *(unsigned __int16 *)(v10 + 28);
    *((_QWORD *)&v33 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v34 = CFSTR("copy_frag");
    v16 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", v19);
    v17 = *(void **)(v15 + 24);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v15 + 24) = v18;
    }
  }
}

uint64_t C3D::BoxBlurPass::execute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  v6 = v5;
  if (*(_WORD *)(a2 + 18))
    v6 = (void **)(id)objc_msgSend(v5, "newTextureViewWithPixelFormat:textureType:levels:slices:", objc_msgSend(v5, "pixelFormat"), objc_msgSend(v5, "textureType"), *(unsigned __int16 *)(a2 + 18), 1, 0, 1);
  SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v6, 0);
  v7 = *(_QWORD *)(a1 + 248);
  if (*(unsigned __int16 *)(a1 + 244) + *(unsigned __int16 *)(a1 + 242) <= *(unsigned __int16 *)(a2 + 18))
    v8 = v7 + 16;
  else
    v8 = v7 + 24;
  v9 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(v8), "state");
  if (*(_QWORD *)(v4 + 3376) != v9)
  {
    *(_QWORD *)(v4 + 3376) = v9;
    objc_msgSend(*(id *)(v4 + 3392), "setRenderPipelineState:");
  }
  return SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v4);
}

void C3D::BoxBlurPass::Resource::~Resource(C3D::BoxBlurPass::Resource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA598908;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA598908;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

id SCNUIKitSourceNotifyViewWasRemoved(id result)
{
  if ((id)gCurrentSCNViewEvent == result)
    return SCNUIKitSourceSetCurrentViewEvent(0);
  return result;
}

BOOL SCNContainsUIKitViews()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&gSCNTextureUIKitSourceInstanceCount);
  return v0 != 0;
}

void sub_1DCF03EA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4026B71966);
  _Unwind_Resume(a1);
}

void sub_1DCF04198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4026B71966);
  _Unwind_Resume(a1);
}

void SCNCActionMove::SCNCActionMove(SCNCActionMove *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA5958E0;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SCNCActionMove::~SCNCActionMove(SCNCActionMove *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

SCNCAction *SCNCActionMove::cpp_updateWithTargetForTime(SCNCActionMove *this, SCNNode *a2, double a3)
{
  float v6;
  SCNCAction *result;
  double v8;
  double v9;
  float32x4_t v10;
  float v11;
  float v12;
  double v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;

  v6 = SCNCAction::cpp_ratioForTime((SCNCAction *)this, a3);
  v17 = v6;
  result = (SCNCAction *)-[SCNNode position](-[SCNNode presentationNode](a2, "presentationNode"), "position");
  v10.i32[1] = LODWORD(v8);
  v10.i32[2] = LODWORD(v9);
  if (BYTE1(this[1].var6))
  {
    v11 = v17 - this->var19;
    v15 = vmulq_n_f32(*(float32x4_t *)&this[1].var2, v11);
    v16 = vaddq_f32(v10, v15);
    result = (SCNCAction *)-[SCNNode setPosition:](a2, "setPosition:");
    HIDWORD(v8) = v15.i32[1];
    *(float32x4_t *)&this[1].var0 = vsubq_f32(*(float32x4_t *)&this[1].var0, v15);
LABEL_3:
    v12 = v17;
    goto LABEL_5;
  }
  v16 = v10;
  v12 = v17;
  if (!LOBYTE(this[1].var6))
  {
    v16 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)&this[1].var2, v17), *(float32x4_t *)&this[1].var0, 1.0 - v17);
    result = (SCNCAction *)-[SCNNode setPosition:](a2, "setPosition:");
    goto LABEL_3;
  }
LABEL_5:
  v13 = v12;
  this->var19 = v12;
  if ((COERCE_UNSIGNED_INT(v12 + -1.0) & 0x60000000) == 0)
  {
    if (BYTE1(this[1].var6))
    {
      v14 = vaddq_f32(v16, *(float32x4_t *)&this[1].var0);
      LODWORD(v9) = v14.i32[2];
      -[SCNNode setPosition:](a2, "setPosition:", *(double *)v14.i64, COERCE_DOUBLE(__PAIR64__(v16.u32[1], v14.u32[1])), v9);
      *(_OWORD *)&this[1].var0 = 0u;
    }
    else if (!LOBYTE(this[1].var6))
    {
      LODWORD(v13) = this[1].var2;
      LODWORD(v8) = HIDWORD(this[1].var2);
      LODWORD(v9) = this[1].var3;
      -[SCNNode setPosition:](a2, "setPosition:", v13, v8, v9);
    }
    return SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
  }
  return result;
}

SCNCAction *SCNCActionMove::cpp_willStartWithTargetAtTime(SCNCActionMove *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  __int128 v6;
  int v7;
  int v8;

  result = SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  this->var19 = 0.0;
  if (BYTE1(this[1].var6))
  {
    v6 = *(_OWORD *)&this[1].var2;
  }
  else
  {
    result = (SCNCAction *)-[SCNNode position](-[SCNNode presentationNode](a2, "presentationNode"), "position");
    DWORD1(v6) = v7;
    DWORD2(v6) = v8;
  }
  *(_OWORD *)&this[1].var0 = v6;
  return result;
}

uint64_t C3DParticleModifierCreate()
{
  uint64_t result;

  if (C3DParticleModifierGetTypeID_onceToken != -1)
    dispatch_once(&C3DParticleModifierGetTypeID_onceToken, &__block_literal_global_111);
  result = C3DTypeCreateInstance_(C3DParticleModifierGetTypeID_typeID, 0x48uLL);
  *(_BYTE *)(result + 80) = 1;
  return result;
}

uint64_t C3DParticleModifierGetStage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t C3DParticleModifierSetStage(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

CFTypeRef C3DParticleModifierSetProperties(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

void *C3DParticleModifierSetBlock(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void _C3DParticleModifierCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
    _Block_release(v3);
}

CFStringRef _C3DParticleModifierCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleModifierRef>"));
}

CFStringRef _C3DParticleModifierCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DParticleModifierRef>"));
}

id SCNEnclosingURLForSceneDecoder(void *a1)
{
  id result;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    return (id)objc_msgSend(a1, "documentEnclosingURL");
  result = objc_getAssociatedObject(a1, CFSTR("SCNSourceURLForCurrentlyUnarchivedScene"));
  if (result)
    return (id)objc_msgSend(result, "URLByDeletingLastPathComponent");
  return result;
}

CFStringRef _C3DTransactionCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTransaction>"));
}

CFStringRef _C3DTransactionCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTransaction>"));
}

void C3DTransactionCheckUncommitted()
{
  CFArrayRef *Stack;
  CFIndex Count;
  CFIndex v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Stack = (CFArrayRef *)C3DTransactionGetStack();
  Count = CFArrayGetCount(Stack[2]);
  v2 = Count;
  if (Count < 2)
  {
    if (Count == 1)
      return;
  }
  else
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      C3DTransactionCheckUncommitted_cold_3();
    if (*((double *)CFArrayGetValueAtIndex(Stack[2], v2 - 1) + 5) == 0.0)
    {
      v4 = scn_default_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        C3DTransactionCheckUncommitted_cold_2();
    }
  }
  v5 = scn_default_log();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    C3DTransactionCheckUncommitted_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
}

void C3DTransactionGetAtomicTime()
{
  if (*(double *)&gAtomicTime == 0.0)
    gAtomicTime = CACurrentMediaTime();
}

void C3DTransactionUpdateModelValueForKeypathIfNeeded(uint64_t a1, float32x4_t *a2, const __CFString *a3)
{
  const __CFString *v6;
  const __CFString *v7;

  if (a1)
  {
    if (!_canSafelySkipModelValueUpdate(a1, a2))
    {
      v6 = C3DCFTypeCopyModelInfoAtPath(a2, a3, 0);
      if (v6)
      {
        v7 = v6;
        if (v6->length)
          _C3DTransactionUpdateModelValueForTarget(a1, (uint64_t)v6);
        CFRelease(v7);
      }
    }
  }
}

BOOL _canSafelySkipModelValueUpdate(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t AnimationManager;
  _BOOL8 result;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  result = 0;
  if (v4 == C3DNodeGetTypeID())
  {
    AnimationManager = C3DSceneGetAnimationManager(a1);
    if (!C3DAnimationManagerContainsAnimationForObject(AnimationManager, cf)
      && !C3DNodeHasConstraints((uint64_t)cf))
    {
      return 1;
    }
  }
  return result;
}

void _C3DTransactionUpdateModelValueForTarget(uint64_t a1, uint64_t a2)
{
  const void *TargetAddress;
  uint64_t ModelValueStorage;
  const void *v6;
  const void *v7;
  void *Bytes;
  size_t Length;

  TargetAddress = (const void *)C3DModelTargetGetTargetAddress(a2);
  ModelValueStorage = C3DSceneGetModelValueStorage(a1);
  if (C3DModelValueStorageGetModelValueIfAny(ModelValueStorage, a2))
  {
    v6 = (const void *)C3DValueCreate(*(__int16 *)(a2 + 32), 1);
    v7 = *(const void **)(a2 + 16);
    Bytes = (void *)C3DValueGetBytes((uint64_t)v6);
    Length = C3DValueGetLength((uint64_t)v6);
    C3DGetValue(v7, TargetAddress, Bytes, Length, *(char *)(a2 + 34), *(unsigned __int8 *)(a2 + 35));
    C3DModelValueStorageUpdateModelValueWithValue(ModelValueStorage, a2, (uint64_t)v6);
    CFRelease(v6);
  }
}

void C3DTransactionUpdateModelValueForKeyAndSubscriptIndexIfNeeded(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;

  if (a1)
  {
    if (!_canSafelySkipModelValueUpdate(a1, a2))
    {
      v8 = C3DCFTypeCopyModelInfoForKeyAndSubscriptIndex(a2, a3, a4, 0);
      if (v8)
      {
        v9 = (const void *)v8;
        if (*(_QWORD *)(v8 + 24))
          _C3DTransactionUpdateModelValueForTarget(a1, v8);
        CFRelease(v9);
      }
    }
  }
}

void C3DTransactionUpdateModelValueForKeyAndSubscriptKeyIfNeeded(uint64_t a1, const void *a2, const __CFString *a3, void *a4)
{
  uint64_t v8;
  const void *v9;

  if (a1)
  {
    if (!_canSafelySkipModelValueUpdate(a1, a2))
    {
      v8 = C3DCFTypeCopyModelInfoForKeyAndSubscriptKey(a2, a3, a4, 0);
      if (v8)
      {
        v9 = (const void *)v8;
        if (*(_QWORD *)(v8 + 24))
          _C3DTransactionUpdateModelValueForTarget(a1, v8);
        CFRelease(v9);
      }
    }
  }
}

void C3DTransactionUpdateModelValueForKeyIfNeeded(uint64_t a1, float32x4_t *a2, const __CFString *a3)
{
  uint64_t AddressForKey;
  void *v7;
  uint64_t ModelValueStorage;

  if (!_canSafelySkipModelValueUpdate(a1, a2))
  {
    AddressForKey = C3DCFTypeGetAddressForKey(a2, a3);
    if (AddressForKey)
    {
      v7 = (void *)AddressForKey;
      ModelValueStorage = C3DSceneGetModelValueStorage(a1);
      if (C3DModelValueStorageGetModelValueForAddressIfAny(ModelValueStorage, v7))
        C3DTransactionUpdateModelValueForKeypathIfNeeded(a1, a2, a3);
    }
  }
}

void *C3DTransactionLock()
{
  void *result;
  _DWORD *v1;
  int v2;

  result = C3DTransactionGetStack();
  v1 = result;
  v2 = *((_DWORD *)result + 12);
  if (!v2)
  {
    result = (void *)pthread_rwlock_rdlock(&gCommandQueueFlushLock);
    v2 = v1[12];
  }
  v1[12] = v2 + 1;
  return result;
}

uint64_t C3DTransactionUnlock()
{
  uint64_t result;
  int v1;
  uint64_t v2;

  result = (uint64_t)C3DTransactionGetStack();
  v1 = *(_DWORD *)(result + 48) - 1;
  *(_DWORD *)(result + 48) = v1;
  if (!v1)
  {
    v2 = result;
    result = pthread_rwlock_unlock(&gCommandQueueFlushLock);
    if ((*(_BYTE *)(v2 + 52) & 2) != 0)
    {
      *(_BYTE *)(v2 + 52) &= ~2u;
      return C3DTransactionFlush();
    }
  }
  return result;
}

void C3DTransactionSetValue(const void *a1, const void *a2)
{
  const void *Current;
  __CFDictionary *Mutable;

  Current = C3DTransactionGetCurrent();
  Mutable = (__CFDictionary *)*((_QWORD *)Current + 2);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)Current + 2) = Mutable;
  }
  if (a2)
    CFDictionarySetValue(Mutable, a1, a2);
  else
    CFDictionaryRemoveValue(Mutable, a1);
}

const __CFDictionary *C3DTransactionGetValue(const void *a1)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)*((_QWORD *)C3DTransactionGetCurrent() + 2);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a1);
  return result;
}

void *C3DTransactionSetCompletionBlock(const void *a1)
{
  _QWORD *Current;
  const void *v3;
  void *result;

  Current = C3DTransactionGetCurrent();
  v3 = (const void *)Current[10];
  if (v3)
    _Block_release(v3);
  result = _Block_copy(a1);
  Current[10] = result;
  return result;
}

uint64_t C3DTransactionGetCompletionBlock()
{
  return *((_QWORD *)C3DTransactionGetCurrent() + 10);
}

_BYTE *C3DTransactionSetDisableActions(int a1)
{
  _BYTE *result;
  char v3;

  result = C3DTransactionGetCurrent();
  if (a1)
    v3 = 4;
  else
    v3 = 0;
  result[60] = result[60] & 0xFB | v3;
  return result;
}

CFTypeRef C3DTransactionSetTimingFunction(CFTypeRef a1)
{
  _QWORD *Current;
  CFTypeRef result;

  Current = C3DTransactionGetCurrent();
  result = (CFTypeRef)Current[3];
  if (result != a1)
  {
    if (result)
    {
      CFRelease(result);
      Current[3] = 0;
    }
    if (a1)
      result = CFRetain(a1);
    else
      result = 0;
    Current[3] = result;
  }
  return result;
}

uint64_t C3DTransactionGetTimingFunction()
{
  return *((_QWORD *)C3DTransactionGetCurrent() + 3);
}

double *C3DTransactionSetDuration(double a1)
{
  double *result;

  result = (double *)C3DTransactionGetCurrent();
  result[4] = a1;
  return result;
}

CFIndex C3DTransactionGetCurrentDepth()
{
  CFArrayRef *Stack;

  Stack = (CFArrayRef *)C3DTransactionGetStack();
  return CFArrayGetCount(Stack[2]) - 1;
}

_QWORD *C3DTransactionAddAnimationNode(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = gCurrentlyCommittedTransaction;
  if (gCurrentlyCommittedTransaction)
  {
    v2 = (uint64_t)result;
    C3DAnimationNodeSetCompletionItem((uint64_t)result, (CFTypeRef)gCurrentlyCommittedTransaction);
    result = (_QWORD *)C3DAnimationNodeGetCompletionCallbacks(v2);
    *result = C3DTransactionAnimationDidComplete;
    result[1] = C3DTransactionAnimationDidInterrupt;
    ++*(_DWORD *)(v1 + 56);
  }
  return result;
}

void C3DTransactionAnimationDidComplete(uint64_t a1)
{
  uint64_t CompletionItem;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *CompletionCallbacks;

  CompletionItem = C3DAnimationNodeGetCompletionItem(a1);
  if (!CompletionItem)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&gCommandQueueLock);
  if (!*(_DWORD *)(CompletionItem + 56))
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DTransactionAnimationDidComplete_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v19 = *(_DWORD *)(CompletionItem + 56) - 1;
  *(_DWORD *)(CompletionItem + 56) = v19;
  if (!v19)
    C3DTransactionTestForDidComplete(CompletionItem);
  C3DAnimationNodeSetCompletionItem(a1, 0);
  CompletionCallbacks = (_QWORD *)C3DAnimationNodeGetCompletionCallbacks(a1);
  *CompletionCallbacks = 0;
  CompletionCallbacks[1] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&gCommandQueueLock);
}

void C3DTransactionAnimationDidInterrupt(uint64_t a1)
{
  uint64_t CompletionItem;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *CompletionCallbacks;

  CompletionItem = C3DAnimationNodeGetCompletionItem(a1);
  if (!CompletionItem)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DTextureCreate_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  os_unfair_lock_lock((os_unfair_lock_t)&gCommandQueueLock);
  if (!*(_DWORD *)(CompletionItem + 56))
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DTransactionAnimationDidInterrupt_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  v19 = *(_DWORD *)(CompletionItem + 56) - 1;
  *(_DWORD *)(CompletionItem + 56) = v19;
  if (!v19)
    C3DTransactionTestForDidComplete(CompletionItem);
  C3DAnimationNodeSetCompletionItem(a1, 0);
  CompletionCallbacks = (_QWORD *)C3DAnimationNodeGetCompletionCallbacks(a1);
  *CompletionCallbacks = 0;
  CompletionCallbacks[1] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&gCommandQueueLock);
}

void C3DTransactionGetCurrentlyCommittedTimingFunction()
{
  if (gCurrentlyCommittedTransaction)
  {
    if (!*(_QWORD *)(gCurrentlyCommittedTransaction + 24))
      C3DTimingFunctionGetDefaultFunction();
  }
}

double C3DTransactionGetCurrentlyCommittedDuration()
{
  double result;

  result = 0.0;
  if (gCurrentlyCommittedTransaction)
  {
    if ((*(_BYTE *)(gCurrentlyCommittedTransaction + 60) & 4) == 0)
      return *(double *)(gCurrentlyCommittedTransaction + 32);
  }
  return result;
}

void C3DTransactionThreadDied(void *a1)
{
  _QWORD *v2;
  __CFRunLoopObserver *v3;

  if (!a1)
    goto LABEL_10;
  if (*((_QWORD *)a1 + 4))
    C3DTransactionFlush();
  os_unfair_lock_lock((os_unfair_lock_t)&gCommandQueueLock);
  v2 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (!*(_QWORD *)a1)
  {
    gTransactionStacks = *((_QWORD *)a1 + 1);
    if (!v2)
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8) = v2;
  v2 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (v2)
LABEL_6:
    *v2 = *(_QWORD *)a1;
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&gCommandQueueLock);
  v3 = (__CFRunLoopObserver *)*((_QWORD *)a1 + 3);
  if (v3)
  {
    CFRunLoopObserverInvalidate(v3);
    CFRelease(*((CFTypeRef *)a1 + 3));
  }
  CFRelease(*((CFTypeRef *)a1 + 2));
LABEL_10:
  free(a1);
}

id **CPP3DAudioContext::Init(id **this)
{
  id **v1;
  id *v2;
  id AVEngine;
  id *v4;
  void *v5;
  NSObject *v6;

  if (!this[2])
  {
    v1 = this;
    objc_msgSend((*this)[1], "lock");
    v2 = *v1;
    if (v1[2])
    {
      return (id **)objc_msgSend(v2[1], "unlock");
    }
    else
    {
      AVEngine = CPP3DAudioEngine::GetAVEngine(v2);
      if (objc_msgSend(AVEngine, "mainMixerNode"))
      {
        v4 = (id *)objc_alloc_init(MEMORY[0x1E0C89A90]);
        v1[2] = v4;
        objc_msgSend(AVEngine, "attachNode:", v4);
        v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C89AA8]), "initStandardFormatWithSampleRate:channels:", 2, 44100.0);
        objc_msgSend(AVEngine, "connect:to:format:", v1[2], objc_msgSend(AVEngine, "mainMixerNode"), v5);

      }
      else
      {
        v6 = scn_default_log();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
          CPP3DAudioContext::Init(v6);
      }
      return (id **)objc_msgSend((*v1)[1], "unlock");
    }
  }
  return this;
}

id CPP3DAudioEngine::GetAVEngine(id *this)
{
  NSObject *v2;
  id v4;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN16CPP3DAudioEngine11GetAVEngineEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (CPP3DAudioEngine::GetAVEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetAVEngine(void)::onceToken, block);
  objc_msgSend(this[1], "lock");
  if ((objc_msgSend(*this, "isRunning") & 1) == 0)
  {
    v4 = 0;
    if ((objc_msgSend(*this, "startAndReturnError:", &v4) & 1) == 0)
    {
      v2 = scn_default_log();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        CPP3DAudioEngine::GetAVEngine(&v4, v2);

      *this = 0;
    }
  }
  objc_msgSend(this[1], "unlock");
  return *this;
}

uint64_t CPP3DAudioContext::AddVoice(CPP3DAudioContext *this, void *a2)
{
  void *v4;
  id AVEngine;
  const void *v6;
  const void *v8;

  CPP3DAudioContext::Init((id **)this);
  v4 = (void *)objc_msgSend(a2, "audioPlayer");
  if ((objc_msgSend(a2, "customAudioNode") & 1) == 0)
  {
    AVEngine = CPP3DAudioEngine::GetAVEngine(*(id **)this);
    if ((id)objc_msgSend(v4, "engine") != AVEngine)
    {
      objc_msgSend((id)objc_msgSend(v4, "engine"), "detachNode:", v4);
      objc_msgSend(AVEngine, "attachNode:", v4);
    }
    objc_msgSend(AVEngine, "connect:to:format:", v4, *((_QWORD *)this + 2), objc_msgSend(a2, "audioBufferFormat"));
    if (v4)
      objc_msgSend(a2, "play");
  }
  v6 = (const void *)objc_msgSend(a2, "nodeRef");
  v8 = v6;
  objc_msgSend(*(id *)(*(_QWORD *)this + 8), "lock");
  if (v6)
    CFRetain(v6);
  std::__tree<SCNNode *>::__emplace_unique_key_args<SCNNode *,SCNNode * const&>((uint64_t **)this + 4, (unint64_t *)&v8, (uint64_t *)&v8);
  return objc_msgSend(*(id *)(*(_QWORD *)this + 8), "unlock");
}

uint64_t CPP3DAudioContext::RemoveVoice(id **this, void *a2)
{
  uint64_t result;
  CFTypeRef cf;

  cf = (CFTypeRef)objc_msgSend(a2, "nodeRef");
  result = objc_msgSend(CPP3DAudioEngine::GetAVEngine(*this), "detachNode:", objc_msgSend(a2, "audioNode"));
  if (cf)
  {
    objc_msgSend((*this)[1], "lock");
    std::__tree<__C3DNode *>::__erase_unique<__C3DNode *>((uint64_t)(this + 4), (unint64_t *)&cf);
    if (cf)
      CFRelease(cf);
    return objc_msgSend((*this)[1], "unlock");
  }
  return result;
}

uint64_t CPP3DAudioContext::UpdateVoices(uint64_t this)
{
  uint64_t *v1;
  float32x4_t *PointOfViewForCulling;
  float32x4_t *WorldMatrix;
  __n128 Translation;
  void *v5;
  double v6;
  double v7;
  float v8;
  __int32 v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  float32x2_t v14;
  float v15;
  uint64_t v16;
  __int32 v17;
  __n128 v18;

  if (*(_QWORD *)(this + 16))
  {
    v1 = (uint64_t *)this;
    v18.n128_u32[2] = 0;
    v18.n128_u64[0] = 0;
    PointOfViewForCulling = *(float32x4_t **)(this + 24);
    if (PointOfViewForCulling || (PointOfViewForCulling = C3DEngineContextGetPointOfViewForCulling(v1[1])) != 0)
    {
      WorldMatrix = C3DNodeGetWorldMatrix(PointOfViewForCulling);
      Translation = C3DMatrix4x4GetTranslation((__n128 *)WorldMatrix, &v18);
      v5 = (void *)v1[2];
      LODWORD(v6) = v18.n128_u32[1];
      Translation.n128_u32[0] = v18.n128_u32[0];
      LODWORD(v7) = v18.n128_u32[2];
      objc_msgSend(v5, "setListenerPosition:", Translation.n128_f64[0], v6, v7);
      v8 = -WorldMatrix[2].f32[2];
      v9 = WorldMatrix[1].i32[2];
      v14 = vneg_f32(*(float32x2_t *)WorldMatrix[2].f32);
      v15 = v8;
      v16 = WorldMatrix[1].i64[0];
      v17 = v9;
      objc_msgSend(v5, "setListenerVectorOrientation:", &v14);
    }
    objc_msgSend(*(id *)(*v1 + 8), "lock");
    v10 = (uint64_t *)v1[4];
    if (v10 != v1 + 5)
    {
      do
      {
        if (v10[4])
          C3DNodeUpdateAudioPlayers();
        v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v10[2];
            v13 = *v12 == (_QWORD)v10;
            v10 = v12;
          }
          while (!v13);
        }
        v10 = v12;
      }
      while (v12 != v1 + 5);
    }
    return objc_msgSend(*(id *)(*v1 + 8), "unlock");
  }
  return this;
}

void ___ZN16CPP3DAudioEngine11GetAVEngineEv_block_invoke(uint64_t a1)
{
  id *v1;
  id v2;

  v1 = *(id **)(a1 + 32);
  *v1 = objc_alloc_init(MEMORY[0x1E0C89A88]);
  v2 = objc_alloc_init(MEMORY[0x1E0C89AD8]);
  objc_msgSend(*v1, "attachNode:", v2);
  objc_msgSend(*v1, "connect:to:format:", v2, objc_msgSend(*v1, "mainMixerNode"), 0);

}

uint64_t CPP3DAudioEngine::AddVoice(CPP3DAudioEngine *this, void *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;

  objc_msgSend(a2, "audioPlayer");
  result = objc_msgSend(a2, "customAudioNode");
  if ((result & 1) == 0)
  {
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) == 0)
    {
      objc_msgSend(*((id *)this + 1), "lock");
      v11 = objc_msgSend(a2, "scene");
      v12 = &v11;
      v5 = std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::__emplace_unique_key_args<__C3DScene *,std::piecewise_construct_t const&,std::tuple<__C3DScene * const&>,std::tuple<>>((uint64_t **)this + 2, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
      v6 = (uint64_t *)v5[5];
      v7 = v5 + 6;
      if (v6 != v5 + 6)
      {
        do
        {
          CPP3DAudioContext::AddVoice((CPP3DAudioContext *)v6[5], a2);
          v8 = (uint64_t *)v6[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (uint64_t *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (uint64_t *)v6[2];
              v10 = *v9 == (_QWORD)v6;
              v6 = v9;
            }
            while (!v10);
          }
          v6 = v9;
        }
        while (v9 != v7);
      }
      return objc_msgSend(*((id *)this + 1), "unlock");
    }
  }
  return result;
}

uint64_t CPP3DAudioEngine::RemoveVoice(CPP3DAudioEngine *this, void *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  unint64_t v11;
  unint64_t *v12;

  result = objc_msgSend(a2, "customAudioNode");
  if ((result & 1) == 0)
  {
    objc_msgSend(*((id *)this + 1), "lock");
    v11 = objc_msgSend(a2, "scene");
    v12 = &v11;
    v5 = std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::__emplace_unique_key_args<__C3DScene *,std::piecewise_construct_t const&,std::tuple<__C3DScene * const&>,std::tuple<>>((uint64_t **)this + 2, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
    v6 = (uint64_t *)v5[5];
    v7 = v5 + 6;
    if (v6 != v5 + 6)
    {
      do
      {
        CPP3DAudioContext::RemoveVoice((id **)v6[5], a2);
        v8 = (uint64_t *)v6[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (uint64_t *)v6[2];
            v10 = *v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v7);
    }
    return objc_msgSend(*((id *)this + 1), "unlock");
  }
  return result;
}

uint64_t C3DAudioPlayerSetTransform(void *a1, __n128 *a2)
{
  void *v2;
  uint64_t result;
  double v4;
  double v5;
  double v6;
  __n128 v7;

  v7.n128_u32[2] = 0;
  v7.n128_u64[0] = 0;
  v2 = (void *)objc_msgSend(a1, "audioNode", C3DMatrix4x4GetTranslation(a2, &v7).n128_f64[0]);
  result = objc_msgSend(v2, "conformsToProtocol:", &unk_1F040F4A0);
  if ((_DWORD)result)
  {
    LODWORD(v5) = v7.n128_u32[1];
    LODWORD(v4) = v7.n128_u32[0];
    LODWORD(v6) = v7.n128_u32[2];
    return objc_msgSend(v2, "setPosition:", v4, v5, v6);
  }
  return result;
}

uint64_t C3DAudioPlayerPlay(void *a1)
{
  uint64_t result;
  void *v3;

  objc_msgSend(a1, "audioPlayer");
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v3 = (void *)objc_msgSend(a1, "audioPlayer");
    result = objc_msgSend(v3, "engine");
    if (result)
      return objc_msgSend(v3, "play");
  }
  return result;
}

uint64_t C3DAudioManagerAddVoice(void *a1)
{
  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  return CPP3DAudioEngine::AddVoice((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1);
}

uint64_t C3DAudioManagerRemoveVoice(void *a1)
{
  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  return CPP3DAudioEngine::RemoveVoice((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1);
}

_QWORD *C3DAudioManagerSetListener(__C3DEngineContext *a1, uint64_t a2)
{
  _QWORD *result;

  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  result = CPP3DAudioEngine::GetContext((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1);
  if (result)
    result[3] = a2;
  return result;
}

uint64_t C3DAudioManagerGetListener(__C3DEngineContext *a1)
{
  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  return CPP3DAudioEngine::GetContext((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1)[3];
}

_QWORD *C3DAudioManagerUpdateNodes(__C3DEngineContext *a1)
{
  _QWORD *result;

  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  result = CPP3DAudioEngine::GetContext((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1);
  if (result)
    return (_QWORD *)CPP3DAudioContext::UpdateVoices((uint64_t)result);
  return result;
}

id **C3DAudioManagerGetAudioEnvironmentNode(__C3DEngineContext *a1)
{
  id **result;
  id **v3;

  if (CPP3DAudioEngine::GetEngine(void)::onceToken != -1)
    dispatch_once(&CPP3DAudioEngine::GetEngine(void)::onceToken, &__block_literal_global_113);
  result = (id **)CPP3DAudioEngine::GetContext((CPP3DAudioEngine *)gCPP3DAudioEngineInstance, a1);
  if (result)
  {
    v3 = result;
    CPP3DAudioContext::Init(result);
    return (id **)v3[2];
  }
  return result;
}

uint64_t std::__tree<__C3DNode *>::__erase_unique<__C3DNode *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::destroy(a1, a2[1]);
    std::__tree<char>::destroy((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::__map_value_compare<__C3DScene *,std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>,std::less<__C3DScene *>,true>,std::allocator<std::__value_type<__C3DScene *,std::map<__C3DEngineContext *,CPP3DAudioContext *>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<__C3DMesh *,WireframeMesh *>,std::__map_value_compare<__C3DMesh *,std::__value_type<__C3DMesh *,WireframeMesh *>,std::less<__C3DMesh *>,true>,std::allocator<std::__value_type<__C3DMesh *,WireframeMesh *>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<char>::destroy(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t C3D::getBlueNoise32(void *a1, uint64_t a2, C3D::RenderGraphResourceManager *this)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  SCNMTLBlitCommandEncoder v13;

  v6 = (_QWORD *)C3D::RenderGraphResourceManager::get(this, 0xD877AC05CAC46D3ELL);
  if (!v6)
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1EA59A018;
    C3D::RenderGraphResourceManager::set((uint64_t)this, 0xD877AC05CAC46D3ELL, (uint64_t)v6);
    v7 = (void *)-[SCNMTLRenderContext resourceManager](a2);
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, 32, 32, 0);
    objc_msgSend(v8, "setStorageMode:", 2);
    objc_msgSend(v8, "setUsage:", 1);
    v9 = (void *)objc_msgSend(v7, "newTextureWithDescriptor:", v8);
    v10 = (id)objc_msgSend((id)-[SCNMTLRenderContext device](a2), "newBufferWithBytes:length:options:", &C3D::g_BlueNoise32, 4096, 0);
    v13._encoder = 0;
    v13._commandBuffer = 0;
    SCNMTLBlitCommandEncoder::beginEncoding(&v13, a1, 0);
    SCNMTLBlitCommandEncoder::copyBufferToTexture((void **)&v13._encoder, (uint64_t)v10, 0, v9, 0, 0);
    SCNMTLBlitCommandEncoder::endEncoding(&v13);
    v11 = (void *)v6[2];
    v6[2] = v9;
    if (v11)

  }
  return C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *((uint64_t)(v6 + 2));
}

uint64_t SCNMTLBlitCommandEncoder::copyBufferToTexture(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[3];
  _QWORD v21[3];

  objc_msgSend(a4, "pixelFormat");
  v12 = (unint64_t)SCNMTLPixelFormatGetBitSize() >> 3;
  v13 = objc_msgSend(a4, "width") * v12;
  v14 = objc_msgSend(a4, "height") * v13;
  v15 = objc_msgSend(a4, "width");
  v16 = objc_msgSend(a4, "height");
  v17 = objc_msgSend(a4, "depth");
  memset(v20, 0, sizeof(v20));
  v18 = *a1;
  v21[0] = v15;
  v21[1] = v16;
  v21[2] = v17;
  return objc_msgSend(v18, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", a2, a3, v13, v14, v21, a4, a5, a6, v20);
}

uint64_t C3D::getGrainNoise256(void *a1, uint64_t a2, C3D::RenderGraphResourceManager *this)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  MTLTexture *v9;
  void *v10;
  MTLComputePipelineState *v11;
  void *v12;
  SCNMTLComputeCommandEncoder v14;

  v6 = (_QWORD *)C3D::RenderGraphResourceManager::get(this, 0x2D6F9F4D8FCEC7B4);
  if (!v6)
  {
    v6 = (_QWORD *)operator new();
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1EA59A018;
    C3D::RenderGraphResourceManager::set((uint64_t)this, 0x2D6F9F4D8FCEC7B4, (uint64_t)v6);
    v7 = (void *)-[SCNMTLRenderContext resourceManager](a2);
    v8 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 72, 256, 256, 0);
    objc_msgSend(v8, "setUsage:", 3);
    v9 = (MTLTexture *)objc_msgSend(v7, "newTextureWithDescriptor:", v8);
    v14._encoder = 0;
    v14._bufferPool = 0;
    SCNMTLComputeCommandEncoder::beginEncoding(&v14, a1, 0, 0, 0);
    v10 = (void *)objc_msgSend((id)-[SCNMTLRenderContext resourceManager](a2), "newComputePipelineStateWithFunctionName:", CFSTR("scn_generate_grain"));
    v11 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v10);
    if (v14._computePipelineState != v11)
    {
      v14._computePipelineState = v11;
      -[MTLComputeCommandEncoder setComputePipelineState:](v14._encoder, "setComputePipelineState:", v11);
    }
    if (v14._textures[0] != v9)
    {
      v14._textures[0] = v9;
      v14._texturesToBind[0] |= 1uLL;
    }
    SCNMTLComputeCommandEncoder::dispatchOnGrid2D(&v14, -[MTLTexture width](v9, "width"), -[MTLTexture height](v9, "height"));
    SCNMTLComputeCommandEncoder::endEncoding(&v14);

    v12 = (void *)v6[2];
    v6[2] = v9;
    if (v12)

  }
  return C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *((uint64_t)(v6 + 2));
}

void C3D::SingleTextureResource::~SingleTextureResource(C3D::SingleTextureResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A018;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A018;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void C3DAuthoringEnvironmentAppendWireframeMesh(_QWORD *a1, __C3DMesh *a2, C3DColor4 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t RendererContextGL;
  uint64_t v10;
  uint64_t BuiltInProgramWithName;
  uint64_t Matrix4x4;
  float32x4_t *v13;
  WireframeMeshRenderer *v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x4_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned __int128 v23;

  v8 = a1[1];
  RendererContextGL = C3DEngineContextGetRendererContextGL(v8);
  v10 = a1[8];
  if (RendererContextGL)
  {
    if (v10)
      goto LABEL_7;
    BuiltInProgramWithName = C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3D-wireframe"));
  }
  else
  {
    if (v10)
      goto LABEL_7;
    BuiltInProgramWithName = C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("ManipulatorWireframe_vert"), CFSTR("ManipulatorWireframe_frag"));
  }
  a1[8] = BuiltInProgramWithName;
LABEL_7:
  v23 = 0uLL;
  if (a3)
    v23 = (unsigned __int128)*a3;
  else
    C3DColor4Make((float *)&v23, 1.0, 1.0, 1.0, 1.0);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  if (a4)
  {
    v17 = 0uLL;
    v18 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    Matrix4x4 = C3DEngineContextGetMatrix4x4(v8, 1);
    v13 = (float32x4_t *)C3DEngineContextGetMatrix4x4(v8, 0);
    C3DMatrix4x4Mult(Matrix4x4, v13, &v15);
    C3DMatrix4x4Mult(a4, &v15, &v19);
  }
  else
  {
    C3DMatrix4x4MakeIdentity((uint64_t)&v19);
  }
  v14 = (WireframeMeshRenderer *)a1[8224];
  v15 = v19;
  v16 = v20;
  v17 = v21;
  v18 = v22;
  C3DWireframeAddInstance(v14, a2, (C3DColor4)v23, &v15);
}

id C3DAuthoringEnvironmentCreate(uint64_t a1)
{
  return -[SCNAuthoringEnvironment _initWithEngineContext:]([SCNAuthoringEnvironment alloc], "_initWithEngineContext:", a1);
}

uint64_t C3DAuthoringEnvironmentCopySettings(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (_QWORD *)(a2 + 65688);
  v3 = a1 + 65688;
  *(_BYTE *)(a2 + 65696) = *(_BYTE *)(a2 + 65696) & 0xFE | *(_BYTE *)(a1 + 65696) & 1;
  *(_QWORD *)(a2 + 65784) = objc_msgSend(*(id *)(a1 + 65784), "mutableCopyWithZone:", 0);
  *v2 = *(_QWORD *)v3;
  v2[9] = objc_msgSend(*(id *)(v3 + 72), "copy");
  result = objc_msgSend(*(id *)(v3 + 64), "mutableCopy");
  v2[8] = result;
  return result;
}

uint64_t C3DAuthoringEnvironmentRegisterProcessedJoint(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a1 + 1616);
  if (!v4)
  {
    v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
    *(_QWORD *)(a1 + 1616) = v4;
  }
  return objc_msgSend(v4, "addObject:", a2);
}

uint64_t C3DAuthoringEnvironmentHasAlreadyProcessedJoint(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 1616), "containsObject:", a2);
}

uint64_t C3DAuthoringEnvironmentShouldDisplayConstraints(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 65689) >> 5) & 1;
}

uint64_t C3DAuthoringEnvironmentShouldDisplayLightInfluences(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 65689) >> 4) & 1;
}

uint64_t C3DAuthoringEnvironmentGetDisplayMask(void *a1)
{
  uint64_t v2;

  objc_sync_enter(a1);
  v2 = objc_msgSend(a1, "authoringDisplayMask");
  objc_sync_exit(a1);
  return v2;
}

void sub_1DCF099B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __appendVerticesAndIndices(uint64_t a1, uint64_t a2, unsigned int a3, __int16 *a4, unsigned int a5, uint64_t a6, int a7)
{
  uint64_t v13;
  const void *Volatile;
  NSObject *v15;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v21;
  const void *v22;
  _BOOL4 v23;
  const void *v24;
  const void *v25;
  uint64_t RendererContextGL;
  uint64_t ResourceManager;
  char v28;
  uint64_t v29;
  const void *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *SourceWithSemanticAtIndex;
  _QWORD *Accessor;
  uint64_t VolatileValuePtrAtIndex;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  int *v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t VolatileDataPtr;
  uint64_t v91;
  int v92;
  _WORD *v93;
  uint64_t v94;
  __int16 v95;
  _BOOL4 v96;
  uint64_t RenderContext;

  if (*(_DWORD *)(a6 + 12) + a3 <= *(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 8) + a5 <= *(_DWORD *)(a6 + 24))
    goto LABEL_6;
  if (a7)
  {
    if (*(_DWORD *)(a6 + 8))
      __flush(a1, a6);
LABEL_6:
    if (*(_QWORD *)(a6 + 56))
    {
LABEL_76:
      v70 = *(_QWORD *)(a6 + 72);
      v71 = *(_QWORD *)(a6 + 96);
      v73 = *(unsigned int *)(a6 + 12);
      v72 = *(_DWORD *)(a6 + 16);
      v74 = v70 * v73;
      if (v72 == 12)
      {
        if (a3)
        {
          v83 = a3;
          v84 = (int *)(a2 + 8);
          v85 = (_DWORD *)(v74 + v71 + 8);
          do
          {
            *(v85 - 2) = *(v84 - 2);
            *(v85 - 1) = *(v84 - 1);
            v86 = *v84;
            v84 += 3;
            *v85 = v86;
            v85 = (_DWORD *)((char *)v85 + v70);
            --v83;
          }
          while (v83);
        }
      }
      else
      {
        v75 = *(_QWORD *)(a6 + 80);
        v76 = (_DWORD *)(*(_QWORD *)(a6 + 104) + v75 * v73);
        if (v72 == 16)
        {
          if (a3)
          {
            v87 = a3;
            v88 = (_DWORD *)(a2 + 8);
            v89 = (_DWORD *)(v74 + v71 + 8);
            do
            {
              *(v89 - 2) = *(v88 - 2);
              *(v89 - 1) = *(v88 - 1);
              *v89 = *v88;
              *v76 = v88[1];
              v88 += 4;
              v89 = (_DWORD *)((char *)v89 + v70);
              v76 = (_DWORD *)((char *)v76 + v75);
              --v87;
            }
            while (v87);
          }
        }
        else if (v72 == 20 && a3)
        {
          v77 = *(_QWORD *)(a6 + 88);
          v78 = v77 * v73;
          v79 = a3;
          v80 = (_DWORD *)(v74 + v71 + 4);
          v81 = (_DWORD *)(a2 + 8);
          v82 = (_DWORD *)(v78 + *(_QWORD *)(a6 + 112) + 4);
          do
          {
            *(v80 - 1) = *(v81 - 2);
            *v80 = *(v81 - 1);
            *v76 = v81[2];
            *(v82 - 1) = *v81;
            v80 = (_DWORD *)((char *)v80 + v70);
            *v82 = v81[1];
            v76 = (_DWORD *)((char *)v76 + v75);
            v81 += 5;
            v82 = (_DWORD *)((char *)v82 + v77);
            --v79;
          }
          while (v79);
        }
      }
      VolatileDataPtr = C3DMeshElementGetVolatileDataPtr(*(_QWORD *)(a6 + 64));
      v91 = *(unsigned int *)(a6 + 8);
      if (VolatileDataPtr)
      {
        v92 = *(_DWORD *)(a6 + 12);
        if (a5)
        {
          v93 = (_WORD *)(VolatileDataPtr + 2 * v91);
          v94 = a5;
          do
          {
            v95 = *a4++;
            *v93++ = v95 + v92;
            --v94;
          }
          while (v94);
        }
      }
      else
      {
        v92 = *(_DWORD *)(a6 + 12);
      }
      *(_DWORD *)(a6 + 8) = v91 + a5;
      *(_DWORD *)(a6 + 12) = v92 + a3;
      return;
    }
    if (!*(_BYTE *)(a6 + 53))
      goto LABEL_73;
    v13 = *(_QWORD *)(a1 + 8);
    RenderContext = C3DEngineContextGetRenderContext(v13);
    if (objc_msgSend(*(id *)(a6 + 128), "count"))
    {
      Volatile = (const void *)objc_msgSend(*(id *)(a6 + 128), "anyObject");
      objc_msgSend(*(id *)(a6 + 120), "addObject:", Volatile);
      objc_msgSend(*(id *)(a6 + 128), "removeObject:", Volatile);
    }
    else
    {
      Volatile = (const void *)C3DMeshCreateVolatile();
      objc_msgSend(*(id *)(a6 + 120), "addObject:", Volatile);
      CFRelease(Volatile);
      v18 = a1 + 72 == a6 || a1 + 224 == a6 || a1 + 1136 == a6;
      v19 = 1;
      if (a1 + 376 != a6 && a1 + 528 != a6 && a1 + 832 != a6)
        v19 = a1 + 680 == a6 || a1 + 984 == a6;
      v96 = v18;
      if (v18)
        v21 = 2;
      else
        v21 = 3;
      v22 = (const void *)C3DMeshSourceCreateVolatile(0, v21, 1u);
      C3DMeshAddSource((uint64_t)Volatile, v22, 0, 0);
      if (v22)
        CFRelease(v22);
      v23 = v96;
      if (v19 || v96 || a1 + 1288 == a6)
      {
        v24 = (const void *)C3DMeshSourceCreateVolatile(2, 4, 0x15u);
        C3DMeshAddSource((uint64_t)Volatile, v24, 0, 0);
        v23 = v96;
        if (v24)
        {
          CFRelease(v24);
          v23 = v96;
        }
      }
      if (v23)
      {
        v25 = (const void *)C3DMeshSourceCreateVolatile(3, 2, 1u);
        C3DMeshAddSource((uint64_t)Volatile, v25, 0, 0);
        if (v25)
          CFRelease(v25);
      }
      *(_QWORD *)(a6 + 20) = 0x200000002000;
    }
    RendererContextGL = C3DEngineContextGetRendererContextGL(v13);
    if (RendererContextGL)
    {
      if (C3DMeshIsVolatile((uint64_t)Volatile))
      {
        ResourceManager = C3DEngineContextGetResourceManager(*(_QWORD *)(a1 + 8));
        if (!C3DRendererContextMapVolatileMesh(RendererContextGL, ResourceManager, Volatile, 0x2000, 1))
        {
LABEL_73:
          if (!*(_QWORD *)(a6 + 56))
          {
            v62 = scn_default_log();
            if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
              __appendVerticesAndIndices_cold_1(v62, v63, v64, v65, v66, v67, v68, v69);
          }
          goto LABEL_76;
        }
      }
    }
    if (*(_BYTE *)(a6 + 48) == 1)
    {
      v28 = 2;
      v29 = 4096;
      if (!RendererContextGL)
      {
LABEL_56:
        v39 = RenderContext;
        v30 = -[SCNMTLRenderContext createVolatileMeshElementOfType:primitiveCount:bytesPerIndex:](RenderContext, v28, v29, 2);
LABEL_59:
        *(_QWORD *)(a6 + 56) = Volatile;
        *(_QWORD *)(a6 + 64) = v30;
        if (v39)
          -[SCNMTLRenderContext mapVolatileMesh:verticesCount:](v39, (uint64_t)Volatile, 0x2000);
        if (*(_DWORD *)(a6 + 12))
        {
          v40 = scn_default_log();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT))
            __appendVerticesAndIndices_cold_3(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(*(_QWORD *)(a6 + 56), 0, 0, 1);
        Accessor = (_QWORD *)C3DMeshSourceGetAccessor(SourceWithSemanticAtIndex);
        *(_QWORD *)(a6 + 72) = C3DSceneSourceGetLibrary((uint64_t)Accessor);
        *(_QWORD *)(a6 + 96) = C3DSourceAccessorGetVolatileValuePtrAtIndex(Accessor, 0);
        VolatileValuePtrAtIndex = (uint64_t)C3DMeshGetSourceWithSemanticAtIndex(*(_QWORD *)(a6 + 56), 3, 0, 1);
        if (VolatileValuePtrAtIndex)
        {
          v51 = (_QWORD *)C3DMeshSourceGetAccessor(VolatileValuePtrAtIndex);
          *(_QWORD *)(a6 + 88) = C3DSceneSourceGetLibrary((uint64_t)v51);
          VolatileValuePtrAtIndex = C3DSourceAccessorGetVolatileValuePtrAtIndex(v51, 0);
        }
        else
        {
          *(_QWORD *)(a6 + 88) = 0;
        }
        *(_QWORD *)(a6 + 112) = VolatileValuePtrAtIndex;
        v52 = (uint64_t)C3DMeshGetSourceWithSemanticAtIndex(*(_QWORD *)(a6 + 56), 2, 0, 1);
        if (v52)
        {
          v53 = (_QWORD *)C3DMeshSourceGetAccessor(v52);
          *(_QWORD *)(a6 + 80) = C3DSceneSourceGetLibrary((uint64_t)v53);
          v52 = C3DSourceAccessorGetVolatileValuePtrAtIndex(v53, 0);
        }
        else
        {
          *(_QWORD *)(a6 + 80) = 0;
        }
        *(_QWORD *)(a6 + 104) = v52;
        if (*(_DWORD *)(a6 + 8))
        {
          v54 = scn_default_log();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_FAULT))
            __appendVerticesAndIndices_cold_2(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        goto LABEL_73;
      }
    }
    else if (*(_BYTE *)(a6 + 48))
    {
      v31 = scn_default_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        __appendVerticesAndIndices_cold_4(v31, v32, v33, v34, v35, v36, v37, v38);
      v28 = 0;
      v29 = 0x2000;
      if (!RendererContextGL)
        goto LABEL_56;
    }
    else
    {
      v28 = 0;
      v29 = 2730;
      if (!RendererContextGL)
        goto LABEL_56;
    }
    if (objc_msgSend(*(id *)(a6 + 144), "count"))
    {
      v30 = (const void *)objc_msgSend(*(id *)(a6 + 144), "anyObject");
      objc_msgSend(*(id *)(a6 + 136), "addObject:", v30);
      objc_msgSend(*(id *)(a6 + 144), "removeObject:", v30);
    }
    else
    {
      v30 = (const void *)C3DMeshElementCreateVolatile();
      objc_msgSend(*(id *)(a6 + 136), "addObject:", v30);
      C3DMeshElementSetType((uint64_t)v30, v28);
      C3DMeshElementSetPrimitives((uint64_t)v30, 0, 0, 2);
      C3DMeshAppendElement((uint64_t)Volatile, v30);
      CFRelease(v30);
    }
    C3DRendererContextMapVolatileMeshElement(RendererContextGL, v30, v29, 1);
    v39 = RenderContext;
    goto LABEL_59;
  }
  v15 = scn_default_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    __appendVerticesAndIndices_cold_5();
}

void __flush(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t RenderContext;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef *v9;
  unsigned int v10;
  __n128 *v11;
  uint64_t v12;
  double v13;
  uint64_t RendererContextGL;
  float32x2_t *v15;
  float ContentScaleFactor;
  __n128 Viewport;
  int8x16_t v18;
  uint64_t Matrix4x4;
  float32x4_t *v20;
  uint64_t ResourceManager;
  _QWORD *ProgramResident;
  uint64_t v23;
  uint64_t v24;
  uint64_t UniformLocationOfSymbolNamed;
  const void *Default;
  float32x2_t *ImageResident;
  float32x2_t *v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  float v42;
  uint64_t v43;
  __n128 v44[4];
  float32x2_t v45;
  int v46;
  __int32 v47;
  GLfloat value[4];
  __n128 v49;
  __n128 v50;
  __n128 v51;

  v4 = *(_QWORD *)(a1 + 8);
  RenderContext = C3DEngineContextGetRenderContext(v4);
  if (RenderContext)
  {
    v6 = RenderContext;
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
      -[SCNMTLRenderContext unmapVolatileMesh:modifiedVerticesCount:](RenderContext, v7, *(unsigned int *)(a2 + 12));
    v8 = *(_QWORD *)(a2 + 64);
    if (v8)
      -[SCNMTLRenderContext unmapVolatileMeshElement:](v6, v8);
  }
  v9 = (CFTypeRef *)(a2 + 56);
  if (*(_QWORD *)(a2 + 56))
  {
    if (!*(_BYTE *)(a2 + 53))
      goto LABEL_14;
    if (!*(_DWORD *)(a2 + 12))
      goto LABEL_50;
    if (*(_BYTE *)(a2 + 48) == 1)
    {
      v10 = *(_DWORD *)(a2 + 8) >> 1;
    }
    else
    {
      if (*(_BYTE *)(a2 + 48))
        goto LABEL_14;
      v10 = *(_DWORD *)(a2 + 8) / 3u;
    }
    C3DMeshElementSetPrimitiveRange(*(_QWORD *)(a2 + 64), 0, v10);
LABEL_14:
    v11 = *(__n128 **)(a1 + 8);
    v12 = C3DEngineContextGetRenderContext((uint64_t)v11);
    v13 = -[SCNMTLRenderContext contentScaleFactor](v12);
    RendererContextGL = C3DEngineContextGetRendererContextGL((uint64_t)v11);
    v15 = (float32x2_t *)RendererContextGL;
    if (RendererContextGL)
      ContentScaleFactor = C3DRendererContextGetContentScaleFactor(RendererContextGL);
    else
      ContentScaleFactor = v13;
    v50 = 0u;
    v51 = 0u;
    *(_OWORD *)value = 0u;
    v49 = 0u;
    if (*(_BYTE *)(a2 + 49))
    {
      v42 = ContentScaleFactor;
      v44[0] = (__n128)xmmword_1DD02C0C0;
      C3DMatrix4x4MakeTranslation((uint64_t)value, v44);
      Viewport = C3DEngineContextGetViewport(v11);
      v18 = vextq_s8((int8x16_t)Viewport, (int8x16_t)Viewport, 8uLL);
      v47 = v18.i32[3];
      v46 = 1065353216;
      v45 = vmul_n_f32(vdiv_f32((float32x2_t)0x4000000040000000, *(float32x2_t *)v18.i8), v42);
      C3DMatrix4x4Scale((float32x4_t *)value, &v45);
      if (!v15)
        goto LABEL_40;
    }
    else
    {
      Matrix4x4 = C3DEngineContextGetMatrix4x4((uint64_t)v11, 1);
      v20 = (float32x4_t *)C3DEngineContextGetMatrix4x4((uint64_t)v11, 0);
      C3DMatrix4x4Mult(Matrix4x4, v20, value);
      if (!v15)
      {
LABEL_40:
        if (v12)
        {
          v32 = *(void **)a2;
          if (*(_QWORD *)a2)
          {
            v33 = 1584;
            if (!*(_BYTE *)(a2 + 52))
              v33 = 1600;
            v34 = 1592;
            if (!*(_BYTE *)(a2 + 52))
              v34 = 1608;
            if (*(_BYTE *)(a2 + 51))
              v35 = v33;
            else
              v35 = v34;
            v36 = *(_QWORD *)(a1 + v35);
            v37 = *(_QWORD *)(a2 + 56);
            v38 = *(_QWORD *)(a2 + 64);
            v39 = C3DBlendStatesDefaultOver();
            v40 = *(_QWORD *)(a2 + 32);
            v44[0] = *(__n128 *)value;
            v44[1] = v49;
            v44[2] = v50;
            v44[3] = v51;
            -[SCNMTLRenderContext renderMesh:meshElement:withProgram:engineContext:transform:color:rasterizerStates:blendState:texture:depthBias:](v12, v37, v38, (uint64_t)v32, (uint64_t)v11, v44, 0, v36, v39, v40, 0);
          }
        }
        goto LABEL_50;
      }
    }
    glPushGroupMarkerEXT(0, "AuthEnvDraw");
    ResourceManager = C3DEngineContextGetResourceManager((uint64_t)v11);
    if (*(_BYTE *)(a2 + 50))
      C3DRendererContextClear((uint64_t)v15, 0x100u, 0);
    ProgramResident = C3DResourceManagerMakeProgramResident(ResourceManager, *(void **)a2, (uint64_t)v15);
    if (ProgramResident)
    {
      v23 = (uint64_t)ProgramResident;
      v43 = v12;
      C3DRendererContextBindProgramObject((uint64_t)v15, ProgramResident);
      v24 = C3DBlendStatesDefaultOver();
      C3DRendererContextSetBlendStates((uint64_t)v15, v24);
      C3DRendererContextSetEnableReadsFromDepth((uint64_t)v15, *(unsigned __int8 *)(a2 + 51));
      UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v23, CFSTR("u_modelViewProjectionTransform"));
      C3DRendererContextSetMatrix4x4UniformAtLocation((uint64_t)v15, UniformLocationOfSymbolNamed, value, 1);
      C3DRendererContextSetEnable((uint64_t)v15, 2, *(unsigned __int8 *)(a2 + 52));
      if (*(_QWORD *)(a2 + 32))
      {
        Default = (const void *)C3DTextureSamplerGetDefault();
        ImageResident = *(float32x2_t **)(a2 + 40);
        if (!ImageResident)
        {
          ImageResident = C3DResourceManagerMakeImageResident(ResourceManager, *(void **)(a2 + 32), Default, v15);
          v28 = *(float32x2_t **)(a2 + 40);
          if (v28 != ImageResident)
          {
            if (v28)
            {
              CFRelease(v28);
              *(_QWORD *)(a2 + 40) = 0;
            }
            if (ImageResident)
              ImageResident = (float32x2_t *)CFRetain(ImageResident);
            *(_QWORD *)(a2 + 40) = ImageResident;
          }
        }
        if (ImageResident && Default)
        {
          C3DRendererContextBindTexture((uint64_t)v15, ImageResident, (uint64_t)Default, 0, 0);
          v29 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(v23, CFSTR("u_sampler"));
          C3DRendererContextSetIntUniformAtLocation((uint64_t)v15, v29, 0);
          C3DFXGLSLProgramObjectSetUniformValueAtIndex(v23, 0, 0);
        }
      }
      v31 = *(void **)(a2 + 56);
      v30 = *(const void **)(a2 + 64);
      if (*(_BYTE *)(a2 + 53))
      {
        C3DRendererContextUnmapVolatileMesh((uint64_t)v15, *(_QWORD *)(a2 + 56));
        C3DRendererContextUnmapVolatileMeshElement((uint64_t)v15, (uint64_t)v30);
      }
      C3DRendererContextBindMesh((uint64_t)v15, ResourceManager, v31);
      C3DRendererContextBindMeshElement((uint64_t)v15, ResourceManager, v30);
      C3DRendererContextRenderResidentMeshElement((uint64_t)v15);
      C3DRendererContextUnbindProgramObject((uint64_t)v15);
      v12 = v43;
      if (*(_BYTE *)(a2 + 53))
      {
        *v9 = 0;
        *(_QWORD *)(a2 + 64) = 0;
      }
    }
    glPopGroupMarkerEXT();
    goto LABEL_40;
  }
LABEL_50:
  *(_QWORD *)(a2 + 8) = 0;
  if (C3DEngineContextGetRendererContextGL(v4))
  {
    v41 = *(const void **)(a2 + 64);
    if (v41)
    {
      CFRelease(v41);
      *(_QWORD *)(a2 + 64) = 0;
    }
    if (*v9)
      CFRelease(*v9);
  }
  *v9 = 0;
  *(_QWORD *)(a2 + 64) = 0;
}

uint64_t C3DAuthoringEnvironmentSceneDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t SharedInstance;
  const void *Scene;

  v4 = a1 + 65736;
  if (*(_BYTE *)(a1 + 65736) || C3DAuthoringEnvironmentHasSelectedNodes((void *)a1) || *(_BYTE *)(v4 + 32))
  {
    v5 = *(_QWORD *)(a1 + 8);
    SharedInstance = C3DNotificationCenterGetSharedInstance();
    Scene = (const void *)C3DEngineContextGetScene(v5);
    C3DNotificationCenterPostNotification(SharedInstance, CFSTR("kC3DNotificationEngineContextInvalidatePasses"), Scene, 0, 1u);
  }
  return objc_msgSend((id)a1, "sceneDidChange:", a2);
}

uint64_t C3DAuthoringEnvironmentBeginFrame(id *a1)
{
  id *v2;

  v2 = a1 + 8223;
  objc_sync_enter(a1);
  *((_DWORD *)v2 + 4) = 0;
  objc_msgSend(a1, "update");
  if (*v2)
    objc_msgSend(*v2, "removeAllObjects");
  else
    *v2 = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_msgSend(a1[202], "removeAllObjects");
  return objc_sync_exit(a1);
}

void sub_1DCF0A55C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void C3DAuthoringEnvironmentEndFrame(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 72;
  __flush(a1, a1 + 72);
  __flush(a1, a1 + 224);
  __flush(a1, a1 + 376);
  __flush(a1, a1 + 528);
  __flush(a1, a1 + 680);
  __flush(a1, a1 + 832);
  __flush(a1, a1 + 984);
  __flush(a1, a1 + 1136);
  __flush(a1, a1 + 1288);
  __recycleMeshes(a1, v2);
  __recycleMeshes(a1, a1 + 224);
  __recycleMeshes(a1, a1 + 376);
  __recycleMeshes(a1, a1 + 528);
  __recycleMeshes(a1, a1 + 680);
  __recycleMeshes(a1, a1 + 832);
  __recycleMeshes(a1, a1 + 984);
  __recycleMeshes(a1, a1 + 1136);
  __recycleMeshes(a1, a1 + 1288);
}

void __recycleMeshes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t RendererContextGL;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  const void *SourceWithSemanticAtIndex;
  _QWORD *Accessor;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t RenderContext;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 53))
  {
    v3 = *(_QWORD *)(a1 + 8);
    RendererContextGL = C3DEngineContextGetRendererContextGL(v3);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v5 = *(void **)(a2 + 120);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v29;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v29 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i);
          if (RendererContextGL)
          {
            SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(*(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * i), 0, 0, 1);
            Accessor = (_QWORD *)C3DMeshSourceGetAccessor(SourceWithSemanticAtIndex);
            if (C3DSourceAccessorGetVolatileValuePtrAtIndex(Accessor, 0))
              C3DRendererContextUnmapVolatileMesh(RendererContextGL, *(_QWORD *)(a2 + 56));
          }
          objc_msgSend(*(id *)(a2 + 128), "addObject:", v10);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
      }
      while (v7);
    }
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v13 = *(void **)(a2 + 136);
    v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    if (v14)
    {
      v15 = v14;
      v16 = *(_QWORD *)v25;
      do
      {
        for (j = 0; j != v15; ++j)
        {
          if (*(_QWORD *)v25 != v16)
            objc_enumerationMutation(v13);
          objc_msgSend(*(id *)(a2 + 144), "addObject:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * j));
        }
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
      }
      while (v15);
    }
    objc_msgSend(*(id *)(a2 + 120), "removeAllObjects");
    objc_msgSend(*(id *)(a2 + 136), "removeAllObjects");
    RenderContext = C3DEngineContextGetRenderContext(v3);
    if (RenderContext)
    {
      v19 = RenderContext;
      v20 = *(_QWORD *)(a2 + 56);
      if (v20)
        -[SCNMTLRenderContext unmapVolatileMesh:modifiedVerticesCount:](RenderContext, v20, *(unsigned int *)(a2 + 12));
      v21 = *(_QWORD *)(a2 + 64);
      if (v21)
        -[SCNMTLRenderContext unmapVolatileMeshElement:](v19, v21);
    }
    if (RendererContextGL)
    {
      v22 = *(const void **)(a2 + 64);
      if (v22)
      {
        CFRelease(v22);
        *(_QWORD *)(a2 + 64) = 0;
      }
      v23 = *(const void **)(a2 + 56);
      if (v23)
        CFRelease(v23);
    }
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
}

void C3DAuthoringEnvironmentDrawOrigin(uint64_t a1)
{
  uint64_t v2;
  int v3;
  float *v4;
  __n128 i;
  __n128 v6;

  if ((*(_BYTE *)(a1 + 65689) & 0x80) != 0)
  {
    v2 = a1 + 376;
    __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
    v3 = 0;
LABEL_6:
    v4 = (float *)&C3DAuthoringEnvironmentColorRed;
    for (i = (__n128)xmmword_1DD007970; ; i = v6)
    {
      while (1)
      {
        v6 = i;
        __appendSegment(a1, 0, v4, v4, v2, (float32x4_t)0, i);
        if (!++v3)
          goto LABEL_6;
        if (v3 != 1)
          break;
        v4 = (float *)&C3DAuthoringEnvironmentColorGreen;
        i = (__n128)xmmword_1DD007920;
      }
      if (v3 == 2)
        break;
      v4 = 0;
    }
    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorBlue, C3DAuthoringEnvironmentColorBlue, v2, (float32x4_t)0, (__n128)xmmword_1DD007600);
    __flush(a1, a1 + 680);
  }
}

void __createGLInfoIfNeeded(uint64_t *a1, uint64_t a2)
{
  BOOL v4;
  uint64_t *v5;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t RenderContext;
  uint64_t RendererContextGL;
  uint64_t BuiltInProgramWithName;
  int v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t ResourceManager;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t *v43;
  int v44;

  if (*(_QWORD *)a2)
    return;
  v4 = a1 + 9 == (uint64_t *)a2 || a1 + 28 == (uint64_t *)a2;
  v5 = a1 + 47;
  v7 = v4 || a1 + 142 == (uint64_t *)a2;
  v44 = v7;
  v8 = a1 + 66;
  v9 = a1 + 104;
  v10 = a1 + 123;
  v11 = a1 + 85;
  v16 = v5 == (uint64_t *)a2
     || v8 == (uint64_t *)a2
     || v9 == (uint64_t *)a2
     || v11 == (uint64_t *)a2
     || v10 == (uint64_t *)a2;
  if (!*(_QWORD *)(a2 + 120))
    *(_QWORD *)(a2 + 120) = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (!*(_QWORD *)(a2 + 128))
    *(_QWORD *)(a2 + 128) = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (!*(_QWORD *)(a2 + 136))
    *(_QWORD *)(a2 + 136) = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (!*(_QWORD *)(a2 + 144))
    *(_QWORD *)(a2 + 144) = (id)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v43 = a1 + 161;
  v17 = a1[1];
  RenderContext = C3DEngineContextGetRenderContext(v17);
  RendererContextGL = C3DEngineContextGetRendererContextGL(v17);
  if (RendererContextGL)
  {
    if (v44)
    {
      BuiltInProgramWithName = a1[6];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3DManipulatorColorAndTexture"));
LABEL_42:
        a1[6] = BuiltInProgramWithName;
        goto LABEL_43;
      }
      goto LABEL_43;
    }
    if (v16)
    {
      BuiltInProgramWithName = a1[5];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3DManipulatorColorOnly"));
LABEL_55:
        a1[5] = BuiltInProgramWithName;
        goto LABEL_58;
      }
      goto LABEL_58;
    }
    if (v43 == (uint64_t *)a2)
    {
      BuiltInProgramWithName = a1[7];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXGLSLProgramCreateBuiltInProgramWithName(CFSTR("C3DManipulatorLightProbe"));
        a1[7] = BuiltInProgramWithName;
      }
      goto LABEL_58;
    }
    v22 = scn_default_log();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      goto LABEL_60;
    goto LABEL_49;
  }
  if (RenderContext)
  {
    if (v44)
    {
      BuiltInProgramWithName = a1[6];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("ManipulatorColorAndTexture_vert"), CFSTR("ManipulatorColorAndTexture_frag"));
        goto LABEL_42;
      }
LABEL_43:
      v21 = 20;
LABEL_59:
      *(_DWORD *)(a2 + 16) = v21;
      *(_QWORD *)a2 = BuiltInProgramWithName;
      goto LABEL_60;
    }
    if (v16)
    {
      BuiltInProgramWithName = a1[5];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("ManipulatorColorOnly_vert"), CFSTR("ManipulatorColorOnly_frag"));
        goto LABEL_55;
      }
LABEL_58:
      v21 = 16;
      goto LABEL_59;
    }
    if (v43 == (uint64_t *)a2)
    {
      BuiltInProgramWithName = a1[7];
      if (!BuiltInProgramWithName)
      {
        BuiltInProgramWithName = C3DFXMetalProgramCreateFromDefaultLibrary(CFSTR("ManipulatorLightProbe_vert"), CFSTR("ManipulatorLightProbe_frag"));
        a1[7] = BuiltInProgramWithName;
      }
      v21 = 12;
      goto LABEL_59;
    }
    v41 = scn_default_log();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
LABEL_49:
      __createGLInfoIfNeeded_cold_2();
  }
  else
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      __createGLInfoIfNeeded_cold_3(v23, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_60:
  if (v5 == (uint64_t *)a2)
  {
    *(_WORD *)(a2 + 48) = 1;
  }
  else
  {
    if (v8 == (uint64_t *)a2)
    {
      *(_WORD *)(a2 + 48) = 1;
      *(_WORD *)(a2 + 51) = 0;
      goto LABEL_70;
    }
    if (v9 == (uint64_t *)a2)
    {
      v31 = 257;
      goto LABEL_72;
    }
    if (v10 == (uint64_t *)a2)
    {
LABEL_66:
      v31 = 256;
LABEL_72:
      *(_DWORD *)(a2 + 48) = v31;
      *(_WORD *)(a2 + 52) = 256;
      goto LABEL_73;
    }
    if (v11 != (uint64_t *)a2)
    {
      if (v44)
        goto LABEL_66;
      if (v43 != (uint64_t *)a2)
      {
        v42 = scn_default_log();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          __createGLInfoIfNeeded_cold_2();
        goto LABEL_73;
      }
    }
    *(_WORD *)(a2 + 48) = 0;
  }
  *(_WORD *)(a2 + 51) = 1;
LABEL_70:
  *(_BYTE *)(a2 + 53) = 1;
LABEL_73:
  if (RendererContextGL)
  {
    ResourceManager = C3DEngineContextGetResourceManager(a1[1]);
    C3DResourceManagerMakeProgramResident(ResourceManager, *(void **)a2, RendererContextGL);
  }
  if (!*(_QWORD *)a2)
  {
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      __createGLInfoIfNeeded_cold_1(v33, v34, v35, v36, v37, v38, v39, v40);
  }
}

void __appendSegment(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, float32x4_t a6, __n128 a7)
{
  float32x4_t v10;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  __n128 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  int v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v10 = a6;
  v34 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v13 = *(_OWORD *)(a2 + 16);
    v30 = *(float32x4_t *)a2;
    v31 = v13;
    v14 = *(_OWORD *)(a2 + 48);
    v32 = *(_OWORD *)(a2 + 32);
    v33 = v14;
    v28 = (float32x4_t)a7;
    *(double *)v15.i64 = C3DVector3MultMatrix4x4(&v30, a6);
    v27 = v15;
    v16 = *(_OWORD *)(a2 + 16);
    v30 = *(float32x4_t *)a2;
    v31 = v16;
    v17 = *(_OWORD *)(a2 + 48);
    v32 = *(_OWORD *)(a2 + 32);
    v33 = v17;
    v18.n128_f64[0] = C3DVector3MultMatrix4x4(&v30, v28);
    v10 = v27;
    a7 = v18;
  }
  v30.i64[0] = v10.i64[0];
  v30.i32[2] = v10.i32[2];
  v19 = (int)(float)(a3[3] * 255.0);
  v20 = (int)(float)(fminf(fmaxf(a3[2], 0.0), 1.0) * 255.0);
  v21 = (int)(float)(fminf(fmaxf(a3[1], 0.0), 1.0) * 255.0);
  v22 = (int)(float)(fminf(fmaxf(*a3, 0.0), 1.0) * 255.0);
  v23 = (int)(float)(a4[3] * 255.0);
  v24 = (int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0);
  v25 = *a4;
  v26 = fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0;
  DWORD2(v31) = a7.n128_u32[2];
  *(_QWORD *)&v31 = a7.n128_u64[0];
  v30.i32[3] = (v19 << 24) | (v20 << 16) | (v21 << 8) | v22;
  HIDWORD(v31) = (v23 << 24) | (v24 << 16) | ((int)v26 << 8) | (int)(float)(fminf(fmaxf(v25, 0.0), 1.0) * 255.0);
  v29 = 0x10000;
  __appendVerticesAndIndices(a1, (uint64_t)&v30, 2u, (__int16 *)&v29, 2u, a5, 1);
}

void C3DAuthoringEnvironmentDrawTarget(uint64_t a1)
{
  void *v2;
  float32x4_t v3;
  uint64_t Matrix4x4;
  float32x4_t *v5;
  float32x4_t v6;
  uint64_t RenderContext;
  double v8;
  uint64_t RendererContextGL;
  int32x2_t v10;
  __n128 Viewport;
  float v18;
  float v19;
  float v20;
  float v21;
  int32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  if (*(_BYTE *)(a1 + 65768))
  {
    if ((*(_BYTE *)(a1 + 65690) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 24))
      {
        v2 = *(void **)(a1 + 16);
        if ((unint64_t)(objc_msgSend((id)objc_msgSend(v2, "defaultCameraController"), "interactionMode") - 1) <= 3)
        {
          objc_msgSend((id)objc_msgSend(v2, "defaultCameraController"), "simdTarget");
          v23 = v3;
          Matrix4x4 = C3DEngineContextGetMatrix4x4(*(_QWORD *)(a1 + 8), 1);
          v5 = (float32x4_t *)C3DEngineContextGetMatrix4x4(*(_QWORD *)(a1 + 8), 0);
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          C3DMatrix4x4Mult(Matrix4x4, v5, &v26);
          v6 = vaddq_f32(v29, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v23.f32[0]), v27, *(float32x2_t *)v23.f32, 1), v28, v23, 2));
          if (v6.f32[3] > 0.001)
          {
            v24 = (float32x2_t)vdivq_f32(v6, (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 3)).u64[0];
            RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 8));
            v8 = -[SCNMTLRenderContext contentScaleFactor](RenderContext);
            RendererContextGL = C3DEngineContextGetRendererContextGL(*(_QWORD *)(a1 + 8));
            if (RendererContextGL)
              *(float *)v10.i32 = C3DRendererContextGetContentScaleFactor(RendererContextGL);
            else
              *(float *)v10.i32 = v8;
            v22 = v10;
            Viewport = C3DEngineContextGetViewport((__n128 *)*(_QWORD *)(a1 + 8));
            __asm
            {
              FMOV            V2.2D, #1.0
              FMOV            V1.2D, #0.5
            }
            Viewport.n128_u64[0] = (unint64_t)vdiv_f32(vrndm_f32(vcvt_f32_f64(vmulq_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(v24), _Q2), vcvt_hight_f64_f32((float32x4_t)Viewport)), _Q1))), (float32x2_t)vdup_lane_s32(v22, 0));
            v18 = Viewport.n128_f32[0] + -5.0;
            v19 = Viewport.n128_f32[0] + 5.0;
            Viewport.n128_u64[1] = Viewport.n128_u64[0];
            v25 = vaddq_f32((float32x4_t)Viewport, (float32x4_t)xmmword_1DD02C0D0);
            v20 = Viewport.n128_f32[1] + -1.0;
            v21 = Viewport.n128_f32[1] + 1.0;
            __createGLInfoIfNeeded((uint64_t *)a1, a1 + 984);
            __appendRect2D(a1, 0x3F8000003F800000, 0x3F8000003F800000, 0, a1 + 984, 1, v25.f32[0], v25.f32[1], v25.f32[2], v25.f32[3]);
            __appendRect2D(a1, 0x3F8000003F800000, 0x3F8000003F800000, 0, a1 + 984, 1, v18, v20, v19, v21);
            __appendRect2D(a1, 0, 0x3F80000000000000, 0, a1 + 984, 1, v25.f32[0] + 0.5, v25.f32[1] + 0.5, v25.f32[2] + -0.5, v25.f32[3] + -0.5);
            __appendRect2D(a1, 0, 0x3F80000000000000, 0, a1 + 984, 1, v18 + 0.5, v20 + 0.5, v19 + -0.5, v21 + -0.5);
            __flush(a1, a1 + 984);
          }
        }
      }
    }
  }
}

void __appendRect2D(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, int a6, float a7, float a8, float a9, float a10)
{
  uint64_t v19;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  int v42;
  int v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v19 = *(_QWORD *)(a5 + 32);
  if (a4)
  {
    if (!v19)
    {
      v21 = scn_default_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
        __appendRect2D_cold_2(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    v39 = a7;
    v40 = a8;
    v29 = a4[1];
    v41 = *a4;
    *(float *)&v42 = v29;
    v43 = ((int)(float)(*((float *)&a3 + 1) * 255.0) << 24) | ((int)(float)(fminf(fmaxf(*(float *)&a3, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*(float *)&a2, 0.0), 1.0) * 255.0);
    v44 = a9;
    v45 = a8;
    v30 = a4[3];
    v46 = a4[2];
    v47 = v29;
    v48 = *(float *)&v43;
    v49 = a9;
    v50 = a10;
    v51 = v46;
    v52 = v30;
    v53 = v43;
    v54 = a7;
    v55 = a10;
    v56 = v41;
    v57 = v30;
    v58 = v43;
  }
  else
  {
    if (v19)
    {
      v31 = scn_default_log();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
        __appendRect2D_cold_1(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    v39 = a7;
    v40 = a8;
    v41 = 0.0;
    v42 = ((int)(float)(*((float *)&a3 + 1) * 255.0) << 24) | ((int)(float)(fminf(fmaxf(*(float *)&a3, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*(float *)&a2, 0.0), 1.0) * 255.0);
    *(float *)&v43 = a9;
    v44 = a8;
    v45 = 0.0;
    v46 = *(float *)&v42;
    v47 = a9;
    v48 = a10;
    v49 = 0.0;
    v50 = *(float *)&v42;
    v51 = a7;
    v52 = a10;
    v53 = 0;
    v54 = *(float *)&v42;
  }
  __appendVerticesAndIndices(a1, (uint64_t)&v39, 4u, word_1DD02C300, 6u, a5, a6);
}

void C3DAuthoringEnvironmentDrawGrid(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  simd_float4 *Matrix4x4;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  float v7;
  float v8;
  float v9;
  float v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  float v16;
  uint64_t v17;
  int v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  _BYTE *v30;
  __int16 v31;
  unint64_t v32;
  int v33;
  __int16 *v34;
  uint64_t v35;
  __int16 *v36;
  int v37;
  float v38;
  float *v39;
  unint64_t v40;
  int v41;
  simd_float4x4 v42;
  __int16 v43[123];
  __int16 v44;
  _BYTE v45[3904];
  uint64_t v46;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v46 = *MEMORY[0x1E0C80C00];
  if (!C3DEngineContextGetRenderContext(*(_QWORD *)(v1 + 8)) && (*(_BYTE *)(v2 + 65689) & 1) != 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend((id)objc_msgSend(*(id *)(v2 + 16), "pointOfView"), "simdWorldPosition");
      objc_msgSend((id)objc_msgSend(*(id *)(v2 + 16), "pointOfView"), "simdWorldFront");
    }
    Matrix4x4 = (simd_float4 *)C3DEngineContextGetMatrix4x4(*(_QWORD *)(v2 + 8), 1);
    v4 = *Matrix4x4;
    v5 = Matrix4x4[1];
    v6 = Matrix4x4[3];
    v42.columns[2] = Matrix4x4[2];
    v42.columns[3] = v6;
    v42.columns[0] = v4;
    v42.columns[1] = v5;
    C3DMatrix4x4Invert(&v42, &v42);
    v7 = sqrtf((float)((float)((float)(0.0 - v42.columns[3].f32[1]) * (float)(0.0 - v42.columns[3].f32[1]))+ (float)((float)(0.0 - v42.columns[3].f32[0]) * (float)(0.0 - v42.columns[3].f32[0])))+ (float)((float)(0.0 - v42.columns[3].f32[2]) * (float)(0.0 - v42.columns[3].f32[2])));
    *(float *)(v2 + 65772) = v7;
    v8 = v7 / 0.001;
    v9 = log10f((float)(v8 + 1.0) + (float)(v8 + 1.0));
    v10 = fmaxf(floorf(v9), 1.0);
    v11 = __exp10(v10);
    v12 = 0;
    v13 = 0;
    *(float *)&v11 = v11;
    v14 = (uint64_t)*(float *)&v11;
    v15 = (double)(uint64_t)*(float *)&v11;
    *(double *)(v2 + 65776) = v15 * 0.001 / 10.0;
    v16 = v15 * 0.003;
    v17 = v14 / 10;
    v18 = vcvtmd_s64_f64(0.0 / ((double)(v14 / 10) * 0.001));
    v19 = (float)(v9 - v10);
    v20 = vcvtd_n_u64_f64(v19 * -0.5 + 1.0, 7uLL) << 24;
    v21 = vcvtd_n_u64_f64(1.0 - v19, 6uLL) << 24;
    v22 = -v16;
    v23 = (double)(v17 * v18);
    v24 = (float)-v16 + v23 * 0.001;
    v25 = v16 + v23 * 0.001;
    v26 = 1;
    v27 = v16 + v16;
    v28 = v18;
    do
    {
      v29 = v22 + (float)((float)((float)v28 / 60.0) * v27);
      v30 = &v45[v12];
      *(float *)v30 = v29;
      *((_DWORD *)v30 + 1) = 0;
      *((float *)v30 + 2) = v24;
      v31 = v13 | 1;
      *((float *)v30 + 4) = v29;
      *((_DWORD *)v30 + 5) = 0;
      HIDWORD(v32) = 429496728 - 858993459 * v28;
      LODWORD(v32) = HIDWORD(v32);
      if ((v32 >> 1) >= 0x19999999)
        v33 = v21;
      else
        v33 = v20;
      if (v28 == 30)
        v33 = -1442840576;
      *((_DWORD *)v30 + 3) = v33;
      *((_DWORD *)v30 + 7) = v33;
      v34 = &v43[v26];
      *(v34 - 1) = v13;
      v13 += 2;
      *((float *)v30 + 6) = v25;
      *v34 = v31;
      ++v28;
      v12 += 32;
      v26 += 2;
    }
    while (v13 != 122);
    v35 = 0;
    v36 = &v44;
    v37 = 122;
    do
    {
      v38 = v22 + (float)((float)((float)v18 / 60.0) * v27);
      v39 = (float *)&v45[v35];
      v39[488] = v24;
      v39[489] = 0.0;
      v39[490] = v38;
      v39[492] = v25;
      v39[493] = 0.0;
      v39[494] = v38;
      HIDWORD(v40) = 429496728 - 858993459 * v18;
      LODWORD(v40) = HIDWORD(v40);
      if ((v40 >> 1) >= 0x19999999)
        v41 = v21;
      else
        v41 = v20;
      if (v18 == 30)
        v41 = -1442840576;
      *((_DWORD *)v39 + 491) = v41;
      *((_DWORD *)v39 + 495) = v41;
      *(v36 - 1) = v37;
      *v36 = v37 | 1;
      v36 += 2;
      v37 += 2;
      ++v18;
      v35 += 32;
    }
    while ((_DWORD)v35 != 1952);
    __createGLInfoIfNeeded((uint64_t *)v2, v2 + 376);
    __appendVerticesAndIndices(v2, (uint64_t)v45, 0xF4u, v43, 0xF4u, v2 + 376, 1);
    __flush(v2, v2 + 376);
  }
}

double C3DAuthoringEnvironmentBeginTimedRecord(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (*(double *)(a1 + 1672) != 0.0)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAuthoringEnvironmentBeginTimedRecord_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = C3DEngineContextGetSystemTime(*(_QWORD *)(a1 + 8)) + a2;
  *(double *)(a1 + 1672) = result;
  return result;
}

uint64_t C3DAuthoringEnvironmentEndTimedRecord(uint64_t result)
{
  *(_QWORD *)(result + 1672) = 0;
  return result;
}

void __appendTimedRecord(uint64_t a1, int a2, void *__src, size_t __n)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD v17[2];
  __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)(a1 + 65680);
  v5 = (__n + 31) & 0xFFFFFFF0;
  v6 = *(unsigned int *)(a1 + 65684);
  v7 = v6 + v5;
  if ((v6 + v5) >> 9 >= 0x7D)
  {
    if (v7 == 64000)
    {
      v8 = 64000 - v6;
      v9 = *(_QWORD *)(a1 + 1672);
      v10 = a1 + v6;
      *(_DWORD *)(v10 + 1680) = -1;
      *(_DWORD *)(v10 + 1684) = v8;
      *(_QWORD *)(v10 + 1688) = v9;
    }
    LODWORD(v6) = 0;
    *(_DWORD *)(a1 + 65684) = 0;
    v7 = (__n + 31) & 0xFFFFFFF0;
  }
  if (v6 < *v4 && v7 > *v4)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *v4;
      v16 = v4[1];
      v17[0] = 67109376;
      v17[1] = v15;
      v18 = 1024;
      v19 = v16;
      _os_log_impl(&dword_1DCCB8000, v14, OS_LOG_TYPE_DEFAULT, "Warning: ring buffer is full [%d/%d]", (uint8_t *)v17, 0xEu);
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 1672);
    v13 = a1 + 1680 + v6;
    *(_DWORD *)v13 = a2;
    *(_DWORD *)(v13 + 4) = v5;
    *(_QWORD *)(v13 + 8) = v12;
    memcpy((void *)(a1 + 1680 + *(unsigned int *)(a1 + 65684) + 16), __src, __n);
    v4[1] = v7;
  }
}

void __displayRangeTimeRecord(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5, double a6)
{
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;

  v9 = a2;
  if (a2 == a3)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      __displayRangeTimeRecord_cold_1(v10, v11, v12, v13, v14, v15, v16, v17);
    goto LABEL_5;
  }
  if (a2 >> 4 > 0xF9E)
  {
LABEL_5:
    v18 = a3;
    goto LABEL_6;
  }
  v22 = a1 + 1680;
  v18 = a3;
  v23 = a2;
  do
  {
    v24 = v22 + v23;
    v25 = *(_DWORD *)(v24 + 4);
    if (!v25)
      break;
    if (*(double *)(v24 + 8) <= a6)
    {
      v23 += v25;
    }
    else
    {
      v26 = *(_DWORD *)v24;
      if (*(_DWORD *)v24 == 3)
      {
        C3DAuthoringEnvironmentAppendDebugBoundingSphere(a1, *(_QWORD *)(v24 + 16), *(_QWORD *)(v24 + 24), (float32x4_t *)(v24 + 32), (__int128 *)(v24 + 96));
      }
      else if (v26 == 1)
      {
        C3DAuthoringEnvironmentAppendDebugSegment(a1, 0, (float *)(v24 + 48), 0, *(float32x4_t *)(v24 + 16), *(float32x4_t *)(v24 + 32));
      }
      else if (!v26)
      {
        C3DAuthoringEnvironmentAppendDebugRay(a1, 0, (float *)(v24 + 48), *(float32x4_t *)(v24 + 16), *(float32x4_t *)(v24 + 32));
      }
      if (v18 >= v23)
        v18 = v23;
      v23 += *(_DWORD *)(v24 + 4);
      if (v9 <= v23)
        v9 = v23;
    }
  }
  while (v23 != a3 && v23 >> 4 < 0xF9F);
LABEL_6:
  *a4 = v18;
  if (v18 <= v9)
    v19 = v9;
  else
    v19 = v18;
  *a5 = v19;
}

double C3DAuthoringEnvironmentAppendDebugRay(uint64_t a1, uint64_t a2, float *a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  double result;
  float32x4_t __src;
  float32x4_t v16;
  __int128 v17;

  if (*(double *)(a1 + 1672) > 0.0)
  {
    __src = a4;
    v16 = a5;
    v17 = *(_OWORD *)a3;
    if (a2)
    {
      v8 = *(float32x4_t *)(a2 + 16);
      v9 = *(float32x4_t *)(a2 + 32);
      v10 = *(float32x4_t *)(a2 + 48);
      v11 = vaddq_f32(v10, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v8, *(float32x2_t *)a5.f32, 1), *(float32x4_t *)a2, a5.f32[0]), v9, a5, 2));
      __src = vaddq_f32(v10, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v8, *(float32x2_t *)a4.f32, 1), *(float32x4_t *)a2, a4.f32[0]), v9, a4, 2));
      v16 = v11;
    }
    __appendTimedRecord(a1, 0, &__src, 0x30uLL);
  }
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
  *(_QWORD *)&result = __appendRay(a1, a2, a3, a3, a1 + 376, a4, a5).n128_u64[0];
  return result;
}

void C3DAuthoringEnvironmentAppendDebugSegment(uint64_t a1, uint64_t a2, float *a3, int a4, float32x4_t a5, float32x4_t a6)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t __src;
  float32x4_t v19;
  __int128 v20;

  if (*(double *)(a1 + 1672) > 0.0)
  {
    __src = a5;
    v19 = a6;
    v20 = *(_OWORD *)a3;
    if (a2)
    {
      v10 = *(float32x4_t *)(a2 + 16);
      v11 = *(float32x4_t *)(a2 + 32);
      v12 = *(float32x4_t *)(a2 + 48);
      v13 = vaddq_f32(v12, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)a6.f32, 1), *(float32x4_t *)a2, a6.f32[0]), v11, a6, 2));
      __src = vaddq_f32(v12, vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)a5.f32, 1), *(float32x4_t *)a2, a5.f32[0]), v11, a5, 2));
      v19 = v13;
    }
    __appendTimedRecord(a1, 1, &__src, 0x30uLL);
  }
  v14 = 376;
  if (a4)
    v14 = 528;
  v15 = a1 + v14;
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + v14);
  __appendSegment(a1, a2, a3, a3, v15, a5, (__n128)a6);
}

void C3DAuthoringEnvironmentAppendDebugBoundingSphere(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, __int128 *a5)
{
  __int128 *Identity;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (*(double *)(a1 + 1672) > 0.0)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13[0] = a2;
    v13[1] = a3;
    Identity = (__int128 *)a4;
    if (!a4)
      Identity = (__int128 *)C3DMatrix4x4GetIdentity();
    v11 = Identity[1];
    v14 = *Identity;
    v15 = v11;
    v12 = Identity[3];
    v16 = Identity[2];
    v17 = v12;
    v18 = *a5;
    __appendTimedRecord(a1, 3, v13, 0x60uLL);
  }
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
  __appendSphereWithSubdivisionCount(a1, a2, a3, a4, (uint64_t)a5, a1 + 376, 3u);
}

void __displayTimeRecord(uint64_t a1, double a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v7;

  v2 = (_DWORD *)(a1 + 65680);
  v3 = *(_DWORD *)(a1 + 65680);
  v4 = *(_DWORD *)(a1 + 65684);
  if (v3 != v4)
  {
    v7 = 0;
    if (v3 < v4)
    {
      __displayRangeTimeRecord(a1, v3, v4, (unsigned int *)&v7 + 1, (unsigned int *)&v7, a2);
      *v2 = HIDWORD(v7);
LABEL_8:
      v2[1] = v7;
      return;
    }
    if (v3 >> 9 <= 0x7C)
    {
      __displayRangeTimeRecord(a1, v3, 0xFA00u, (unsigned int *)&v7 + 1, (unsigned int *)&v7, a2);
      *v2 = HIDWORD(v7);
      v4 = v2[1];
    }
    if (v4)
    {
      __displayRangeTimeRecord(a1, 0, v4, (unsigned int *)&v7 + 1, (unsigned int *)&v7, a2);
      goto LABEL_8;
    }
  }
}

void C3DAuthoringEnvironmentDrawZbufferDependant(uint64_t a1)
{
  uint64_t v2;
  uint64_t Scene;
  SCNPhysicsWorld *v4;
  SCNPhysicsWorld *v5;
  SCNPhysicsWorld *v6;
  void *v7;
  __n128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  float32x4_t *WorldMatrix;
  float32x4_t v15;
  float32x4_t v16;
  __n128 v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  void *v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  __n128 v28;
  __n128 v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  void *v34;
  uint64_t v35;
  uint64_t k;
  uint64_t v37;
  float32x4_t *v38;
  __n128 v39;
  float32x4_t v40;
  __n128 v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  double SystemTime;
  float32x4_t v47;
  float32x4_t v48;
  __n128 v49;
  __n128 v50;
  float32x4_t v51;
  __int32 v52;
  __n128 v53;
  __n128 v54;
  float32x4_t v55;
  float32x4_t v56;
  _OWORD v57[7];
  __int128 v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 65688;
  C3DAuthoringEnvironmentDrawGrid(a1);
  C3DAuthoringEnvironmentDrawOrigin(a1);
  if ((*(_BYTE *)v2 & 0x40) != 0)
  {
    Scene = C3DEngineContextGetScene(*(_QWORD *)(a1 + 8));
    if (Scene)
    {
      v4 = -[SCNScene physicsWorld](+[SCNScene sceneWithSceneRef:](SCNScene, "sceneWithSceneRef:", Scene), "physicsWorld");
      if (v4)
      {
        v5 = v4;
        v6 = v4;
        -[SCNPhysicsWorld _drawDebugInAuthoringEnvironment:](v5, "_drawDebugInAuthoringEnvironment:", a1);

      }
    }
  }
  C3DWireframeDrawInstances(*(WireframeMeshRenderer **)(v2 + 104), *(__C3DEngineContext **)(a1 + 8), *(__C3DFXProgram **)(a1 + 64));
  v7 = (void *)objc_msgSend((id)a1, "manipulator");
  if (objc_msgSend(v7, "isDragging"))
  {
    v9 = 0uLL;
    v58 = 0u;
    memset(&v57[4], 0, 48);
    if (v7)
    {
      objc_msgSend(v7, "transform");
      v9 = 0uLL;
      v8.n128_u64[0] = v58;
      v54 = v8;
      v8.n128_u32[0] = DWORD2(v58);
    }
    else
    {
      v8.n128_u64[0] = 0;
      v54 = v8;
    }
    v52 = v8.n128_u32[0];
    v57[2] = v9;
    v57[3] = v9;
    v57[0] = v9;
    v57[1] = v9;
    v10 = (void *)objc_msgSend(v7, "snapGuideIndexesOnAxis:", 1, C3DMatrix4x4MakeIdentity((uint64_t)v57).n128_f64[0]);
    v11 = objc_msgSend(v10, "firstIndex");
    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (i = v11; i != 0x7FFFFFFFFFFFFFFFLL; i = objc_msgSend(v10, "indexGreaterThanIndex:", i))
      {
        v13 = objc_msgSend(v7, "snapInfoAtIndex:axis:", i, 1, *(_OWORD *)&v47);
        v55 = 0u;
        v56 = 0u;
        WorldMatrix = C3DNodeGetWorldMatrix(*(float32x4_t **)(v13 + 8));
        C3DNodeGetLocalBoundingBox(*(_QWORD *)(v13 + 8), &v55);
        v15.f32[0] = *(float *)v13 - *(float *)(v13 + 16);
        v16 = v15;
        v16.i32[1] = WorldMatrix[3].i32[1];
        v16.i32[2] = WorldMatrix[3].i32[2];
        v15.i32[1] = v54.n128_i32[1];
        v17 = (__n128)v15;
        v17.n128_u32[2] = v16.u32[2];
        v15.i32[2] = v52;
        v47 = (float32x4_t)v17;
        v49 = (__n128)v15;
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v16, v17);
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v47, v49);
        v18 = (int8x16_t)vaddq_f32(v56, v56);
        v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3);
        v19.i32[0] = v18.i32[0];
        v59 = vsubq_f32(v55, v56);
        v60 = vaddq_f32(v59, v19);
        v61 = vaddq_f32(v59, (float32x4_t)vextq_s8(v18, (int8x16_t)vuzp2q_s32((int32x4_t)v18, (int32x4_t)v18), 0xCuLL));
        v62 = vaddq_f32(v19, v61);
        v20 = (int8x16_t)vzip2q_s32((int32x4_t)v18, (int32x4_t)v18);
        v21 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
        v63 = vaddq_f32(v59, v21);
        v64 = vaddq_f32(v21, v60);
        v65 = vaddq_f32(v21, v61);
        v66 = vaddq_f32(v21, v62);
        __appendAsymetricBox(a1, (uint64_t)&v59, WorldMatrix, C3DAuthoringEnvironmentColorCyan, a1 + 376);
      }
    }
    v22 = (void *)objc_msgSend(v7, "snapGuideIndexesOnAxis:", 2, *(_OWORD *)&v47);
    v23 = objc_msgSend(v22, "firstIndex");
    if (v23 != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (j = v23; j != 0x7FFFFFFFFFFFFFFFLL; j = objc_msgSend(v22, "indexGreaterThanIndex:", j))
      {
        v25 = objc_msgSend(v7, "snapInfoAtIndex:axis:", j, 2, *(_OWORD *)&v48);
        v55 = 0u;
        v56 = 0u;
        v26 = C3DNodeGetWorldMatrix(*(float32x4_t **)(v25 + 8));
        C3DNodeGetLocalBoundingBox(*(_QWORD *)(v25 + 8), &v55);
        v27.i32[0] = v26[3].i32[0];
        v27.f32[1] = *(float *)v25 - *(float *)(v25 + 16);
        v27.i32[2] = v26[3].i32[2];
        v28 = v54;
        v28.n128_f32[1] = v27.f32[1];
        v29 = v28;
        v29.n128_u32[2] = v27.u32[2];
        v28.n128_u32[2] = v52;
        v48 = (float32x4_t)v29;
        v50 = v28;
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v27, v29);
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v48, v50);
        v30 = (int8x16_t)vaddq_f32(v56, v56);
        v31 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3);
        v31.i32[0] = v30.i32[0];
        v59 = vsubq_f32(v55, v56);
        v60 = vaddq_f32(v59, v31);
        v61 = vaddq_f32(v59, (float32x4_t)vextq_s8(v30, (int8x16_t)vuzp2q_s32((int32x4_t)v30, (int32x4_t)v30), 0xCuLL));
        v62 = vaddq_f32(v31, v61);
        v32 = (int8x16_t)vzip2q_s32((int32x4_t)v30, (int32x4_t)v30);
        v33 = (float32x4_t)vextq_s8(v32, v32, 8uLL);
        v63 = vaddq_f32(v59, v33);
        v64 = vaddq_f32(v33, v60);
        v65 = vaddq_f32(v33, v61);
        v66 = vaddq_f32(v33, v62);
        __appendAsymetricBox(a1, (uint64_t)&v59, v26, C3DAuthoringEnvironmentColorCyan, a1 + 376);
      }
    }
    v34 = (void *)objc_msgSend(v7, "snapGuideIndexesOnAxis:", 4, *(_OWORD *)&v48);
    v35 = objc_msgSend(v34, "firstIndex");
    if (v35 != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (k = v35; k != 0x7FFFFFFFFFFFFFFFLL; k = objc_msgSend(v34, "indexGreaterThanIndex:", k))
      {
        v37 = objc_msgSend(v7, "snapInfoAtIndex:axis:", k, 4);
        v55 = 0u;
        v56 = 0u;
        v38 = C3DNodeGetWorldMatrix(*(float32x4_t **)(v37 + 8));
        C3DNodeGetLocalBoundingBox(*(_QWORD *)(v37 + 8), &v55);
        v39.n128_u32[0] = v38[3].u32[0];
        v40 = (float32x4_t)v39;
        v40.i32[1] = v38[3].i32[1];
        v40.f32[2] = *(float *)v37 - *(float *)(v37 + 16);
        v41 = v54;
        v39.n128_u32[1] = v54.n128_u32[1];
        v39.n128_f32[2] = v40.f32[2];
        v41.n128_f32[2] = v40.f32[2];
        v51 = (float32x4_t)v39;
        v53 = v41;
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v40, v39);
        __appendSegment(a1, (uint64_t)v57, C3DAuthoringEnvironmentColorCyan, C3DAuthoringEnvironmentColorCyan, a1 + 376, v51, v53);
        v42 = (int8x16_t)vaddq_f32(v56, v56);
        v43 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3);
        v43.i32[0] = v42.i32[0];
        v59 = vsubq_f32(v55, v56);
        v60 = vaddq_f32(v59, v43);
        v61 = vaddq_f32(v59, (float32x4_t)vextq_s8(v42, (int8x16_t)vuzp2q_s32((int32x4_t)v42, (int32x4_t)v42), 0xCuLL));
        v62 = vaddq_f32(v43, v61);
        v44 = (int8x16_t)vzip2q_s32((int32x4_t)v42, (int32x4_t)v42);
        v45 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
        v63 = vaddq_f32(v59, v45);
        v64 = vaddq_f32(v45, v60);
        v65 = vaddq_f32(v45, v61);
        v66 = vaddq_f32(v45, v62);
        __appendAsymetricBox(a1, (uint64_t)&v59, v38, C3DAuthoringEnvironmentColorCyan, a1 + 376);
      }
    }
    __flush(a1, a1 + 376);
  }
  SystemTime = C3DEngineContextGetSystemTime(*(_QWORD *)(a1 + 8));
  __displayTimeRecord(a1, SystemTime);
}

void C3DAuthoringEnvironmentDrawZbufferIndependant(uint64_t a1, __n128 a2)
{
  float32x4_t v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  float32x4_t v9;
  __n128 v10;
  float32x4_t v11;
  __n128 v12;
  float32x4_t v13;
  __n128 v14;

  if (*(_BYTE *)(a1 + 65736))
  {
    a2.n128_u64[0] = (unint64_t)vadd_f32(vrndx_f32(*(float32x2_t *)(a1 + 65720)), (float32x2_t)0x3F0000003F000000);
    v8 = a2;
    a2.n128_u64[0] = (unint64_t)vadd_f32(vrndx_f32(*(float32x2_t *)(a1 + 65728)), (float32x2_t)0x3F0000003F000000);
    v14 = a2;
    __createGLInfoIfNeeded((uint64_t *)a1, a1 + 984);
    __appendRect2D(a1, 0x3E00000000000000, 0x3E8000003E800000, 0, a1 + 984, 1, v8.n128_f32[0], v8.n128_f32[1], v14.n128_f32[0], v14.n128_f32[1]);
    __createGLInfoIfNeeded((uint64_t *)a1, a1 + 832);
    v3 = (float32x4_t)v8;
    v3.i32[2] = 0;
    v12 = (__n128)v3;
    v3.i32[1] = v8.n128_i32[1];
    v7 = (__n128)v3;
    v4 = v14;
    v4.n128_u32[2] = 0;
    v10 = v4;
    v4.n128_u32[1] = v8.n128_u32[1];
    v9 = (float32x4_t)v4;
    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorWhite, C3DAuthoringEnvironmentColorWhite, a1 + 832, v3, v4);
    v5 = v10;
    v5.n128_u32[1] = v14.n128_u32[1];
    v11 = (float32x4_t)v5;
    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorWhite, C3DAuthoringEnvironmentColorWhite, a1 + 832, v9, v5);
    v6 = v12;
    v6.n128_u32[1] = v14.n128_u32[1];
    v13 = (float32x4_t)v6;
    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorWhite, C3DAuthoringEnvironmentColorWhite, a1 + 832, v11, v6);
    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorWhite, C3DAuthoringEnvironmentColorWhite, a1 + 832, v13, v7);
  }
  C3DAuthoringEnvironmentDrawTarget(a1);
}

void C3DAuthoringEnvironmentDrawPending(uint64_t a1)
{
  __flush(a1, a1 + 1288);
  __flush(a1, a1 + 1136);
  __flush(a1, a1 + 376);
  __flush(a1, a1 + 528);
  __flush(a1, a1 + 680);
  __flush(a1, a1 + 984);
  __flush(a1, a1 + 832);
}

__n128 __appendRay(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v10;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  __n128 result;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v10 = a6;
  v34 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v26 = a7;
    v13 = *(_OWORD *)(a2 + 16);
    v30 = *(float32x4_t *)a2;
    v31 = v13;
    v14 = *(_OWORD *)(a2 + 48);
    v32 = *(_OWORD *)(a2 + 32);
    v33 = v14;
    *(double *)v15.i64 = C3DVector3MultMatrix4x4(&v30, a6);
    v24 = v15;
    v16 = *(_OWORD *)(a2 + 16);
    v30 = *(float32x4_t *)a2;
    v31 = v16;
    v17 = *(_OWORD *)(a2 + 48);
    v32 = *(_OWORD *)(a2 + 32);
    v33 = v17;
    *(double *)v18.i64 = C3DVector3MultMatrix4x4(&v30, v26);
    v10 = v24;
    a7 = v18;
  }
  v25 = v10;
  v27 = a7;
  v23 = vsubq_f32(a7, v10);
  v29.i32[2] = 0;
  v29.i64[0] = 0;
  v28.i32[2] = 0;
  v28.i64[0] = 0;
  C3DVectorGenerateOrthogonalBasis(&v29, &v28, v23);
  v29 = vmulq_f32(v29, (float32x4_t)vdupq_n_s32(0x3E4CCCCDu));
  v19 = vaddq_f32(v27, vmulq_f32(v23, (float32x4_t)vdupq_n_s32(0xBE99999A)));
  v20 = vaddq_f32(v19, v29);
  v21 = vsubq_f32(v19, v29);
  v30.i64[0] = v25.i64[0];
  v30.i32[2] = v25.i32[2];
  *(_QWORD *)&v31 = v27.i64[0];
  DWORD2(v31) = v27.i32[2];
  DWORD2(v32) = v20.i32[2];
  *(_QWORD *)&v32 = v20.i64[0];
  *(_QWORD *)&v33 = v21.i64[0];
  DWORD2(v33) = v21.i32[2];
  v30.i32[3] = ((int)(float)(a3[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a3[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a3[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a3, 0.0), 1.0) * 255.0);
  HIDWORD(v31) = ((int)(float)(a4[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a4, 0.0), 1.0) * 255.0);
  __appendVerticesAndIndices(a1, (uint64_t)&v30, 4u, word_1DD02C30C, 6u, a5, 1);
  return result;
}

void C3DAuthoringEnvironmentAppendDebugSegment2(uint64_t *a1, uint64_t a2, float *a3, float *a4, int a5, float32x4_t a6, __n128 a7)
{
  uint64_t v11;
  uint64_t v12;

  v11 = (uint64_t)(a1 + 47);
  if (a5)
    v12 = (uint64_t)(a1 + 66);
  else
    v12 = (uint64_t)(a1 + 47);
  __createGLInfoIfNeeded(a1, v12);
  __appendSegment((uint64_t)a1, a2, a3, a4, v11, a6, a7);
}

__n128 C3DAuthoringEnvironmentAppendDebugBoundingBox(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float *a4)
{
  float32x4_t v8;
  uint64_t Identity;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  __n128 result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(double *)(a1 + 1672) > 0.0)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v8 = a2[1];
    v19 = *a2;
    v20 = v8;
    Identity = (uint64_t)a3;
    if (!a3)
      Identity = C3DMatrix4x4GetIdentity();
    v10 = *(float32x4_t *)(Identity + 16);
    v21 = *(float32x4_t *)Identity;
    v22 = v10;
    v11 = *(float32x4_t *)(Identity + 48);
    v23 = *(float32x4_t *)(Identity + 32);
    v24 = v11;
    v25 = *(float32x4_t *)a4;
    __appendTimedRecord(a1, 4, &v19, 0x70uLL);
  }
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
  v12 = a2[1];
  v13 = vsubq_f32(*a2, v12);
  v14 = (int8x16_t)vaddq_f32(v12, v12);
  v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3);
  v15.i32[0] = v14.i32[0];
  v19 = v13;
  v20 = vaddq_f32(v13, v15);
  v21 = vaddq_f32(v13, (float32x4_t)vextq_s8(v14, (int8x16_t)vuzp2q_s32((int32x4_t)v14, (int32x4_t)v14), 0xCuLL));
  v22 = vaddq_f32(v15, v21);
  v16 = (int8x16_t)vzip2q_s32((int32x4_t)v14, (int32x4_t)v14);
  v17 = (float32x4_t)vextq_s8(v16, v16, 8uLL);
  v23 = vaddq_f32(v13, v17);
  v24 = vaddq_f32(v17, v20);
  v25 = vaddq_f32(v17, v21);
  v26 = vaddq_f32(v17, v22);
  __appendAsymetricBox(a1, (uint64_t)&v19, a3, a4, a1 + 376);
  return result;
}

__n128 __appendBox(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float *a4, uint64_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  __n128 result;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v6 = vsubq_f32(*a2, v5);
  v7 = (int8x16_t)vaddq_f32(v5, v5);
  v8 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 3);
  v8.i32[0] = v7.i32[0];
  v12 = v6;
  v13 = vaddq_f32(v6, v8);
  v14 = vaddq_f32(v6, (float32x4_t)vextq_s8(v7, (int8x16_t)vuzp2q_s32((int32x4_t)v7, (int32x4_t)v7), 0xCuLL));
  v15 = vaddq_f32(v8, v14);
  v9 = (int8x16_t)vzip2q_s32((int32x4_t)v7, (int32x4_t)v7);
  v10 = (float32x4_t)vextq_s8(v9, v9, 8uLL);
  v16 = vaddq_f32(v6, v10);
  v17 = vaddq_f32(v10, v13);
  v18 = vaddq_f32(v10, v14);
  v19 = vaddq_f32(v10, v15);
  __appendAsymetricBox(a1, (uint64_t)&v12, a3, a4, a5);
  return result;
}

double C3DAuthoringEnvironmentAppendDebugFrustum(uint64_t *a1, float32x4_t *a2, int32x4_t *a3, float *a4)
{
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  unint64_t i;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  double result;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v43;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  simd_float4x4 v60;
  simd_float4x4 v61;

  v59 = *MEMORY[0x1E0C80C00];
  v43 = (uint64_t)(a1 + 47);
  __createGLInfoIfNeeded(a1, (uint64_t)(a1 + 47));
  if (a3)
  {
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    v10 = a2[3];
    v53 = a2[2];
    v54 = v10;
    v11 = a2[5];
    v55 = a2[4];
    v56 = v11;
    v12 = vzip1q_s32(v6, v8);
    v13 = vzip2q_s32(v6, v8);
    v14 = vzip1q_s32(v7, v9);
    v15 = vzip2q_s32(v7, v9);
    v60.columns[0] = (simd_float4)vzip1q_s32(v12, v14);
    v60.columns[1] = (simd_float4)vzip2q_s32(v12, v14);
    v60.columns[2] = (simd_float4)vzip1q_s32(v13, v15);
    v60.columns[3] = (simd_float4)vzip2q_s32(v13, v15);
    v16 = a2[1];
    v51 = *a2;
    v52 = v16;
    v61 = __invert_f4(v60);
    for (i = 0; i != 96; i += 16)
      *(float32x4_t *)((char *)&v51 + i) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v61.columns[0], COERCE_FLOAT(*(_OWORD *)((char *)&v51 + i))), (float32x4_t)v61.columns[1], *(float32x2_t *)&v51.f32[i / 4], 1), (float32x4_t)v61.columns[2], *(float32x4_t *)((char *)&v51 + i), 2), (float32x4_t)v61.columns[3], *(float32x4_t *)((char *)&v51 + i), 3);
    v18 = v52;
    v19 = v53;
    v47 = v51;
    v49 = v54;
    v45 = v55;
    v20 = v56;
  }
  else
  {
    v18 = a2[1];
    v19 = a2[2];
    v47 = *a2;
    v49 = a2[3];
    v45 = a2[4];
    v20 = a2[5];
  }
  v38 = v20;
  v40 = v18;
  v41 = v19;
  v21 = v20;
  v22 = v19;
  v23 = v18;
  scn_plane_intersect_3_planes(v20.i64[0], v20.i64[1], v19.i64[0], v19.i64[1], v18.i64[0], v18.i64[1], &v51);
  scn_plane_intersect_3_planes(v21.i64[0], v21.i64[1], v47.i64[0], v47.i64[1], v22.i64[0], v22.i64[1], &v52);
  scn_plane_intersect_3_planes(v21.i64[0], v21.i64[1], v23.i64[0], v23.i64[1], v49.i64[0], v49.i64[1], &v53);
  scn_plane_intersect_3_planes(v21.i64[0], v21.i64[1], v49.i64[0], v49.i64[1], v47.i64[0], v47.i64[1], &v54);
  scn_plane_intersect_3_planes(v45.i64[0], v45.i64[1], v22.i64[0], v22.i64[1], v23.i64[0], v23.i64[1], &v55);
  scn_plane_intersect_3_planes(v45.i64[0], v45.i64[1], v47.i64[0], v47.i64[1], v22.i64[0], v22.i64[1], &v56);
  scn_plane_intersect_3_planes(v45.i64[0], v45.i64[1], v23.i64[0], v23.i64[1], v49.i64[0], v49.i64[1], &v57);
  scn_plane_intersect_3_planes(v45.i64[0], v45.i64[1], v49.i64[0], v49.i64[1], v47.i64[0], v47.i64[1], &v58);
  v24 = a4;
  __appendAsymetricBox((uint64_t)a1, (uint64_t)&v51, 0, a4, v43);
  v25 = vsubq_f32(v51, v58);
  v26 = vmulq_f32(v25, v25);
  v50 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0])* 0.05;
  v27.i64[0] = 0x3F0000003F000000;
  v27.i64[1] = 0x3F0000003F000000;
  v28 = vmulq_f32(vaddq_f32(v51, v54), v27);
  v36 = vmulq_f32(vaddq_f32(v58, v55), v27);
  __appendRay((uint64_t)a1, 0, v24, v24, v43, v28, vmlaq_n_f32(v28, v38, v50));
  __appendRay((uint64_t)a1, 0, v24, v24, v43, v36, vmlaq_n_f32(v36, v45, v50));
  v29.i64[0] = 0x3F0000003F000000;
  v29.i64[1] = 0x3F0000003F000000;
  v35 = vmulq_f32(vaddq_f32(v54, v58), v29);
  v37 = vmulq_f32(vaddq_f32(v53, v57), v29);
  v46 = vmulq_f32(vaddq_f32(v51, v55), v29);
  v39 = vmulq_f32(vaddq_f32(v52, v56), v29);
  v30 = vmulq_f32(vaddq_f32(v37, v46), v29);
  v34 = vmulq_f32(vaddq_f32(v35, v39), v29);
  __appendRay((uint64_t)a1, 0, v24, v24, v43, v30, vmlaq_n_f32(v30, v40, v50));
  __appendRay((uint64_t)a1, 0, v24, v24, v43, v34, vmlaq_n_f32(v34, v47, v50));
  v31.i64[0] = 0x3F0000003F000000;
  v31.i64[1] = 0x3F0000003F000000;
  v32 = vmulq_f32(vaddq_f32(v37, v35), v31);
  v48 = vmulq_f32(vaddq_f32(v46, v39), v31);
  __appendRay((uint64_t)a1, 0, v24, v24, v43, v32, vmlaq_n_f32(v32, v49, v50));
  *(_QWORD *)&result = __appendRay((uint64_t)a1, 0, v24, v24, v43, v48, vmlaq_n_f32(v48, v41, v50)).n128_u64[0];
  return result;
}

void C3DAuthoringEnvironmentAppendDebugAsymetricBox(uint64_t *a1, uint64_t a2, float32x4_t *a3, float *a4)
{
  uint64_t v8;

  v8 = (uint64_t)(a1 + 47);
  __createGLInfoIfNeeded(a1, (uint64_t)(a1 + 47));
  __appendAsymetricBox((uint64_t)a1, a2, a3, a4, v8);
}

void __appendAsymetricBox(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4, uint64_t a5)
{
  uint64_t i;
  uint64_t j;
  _BYTE *v7;
  int v8;
  int v9;
  uint64_t k;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    for (i = 0; i != 128; i += 16)
      *(float32x4_t *)(a2 + i) = vaddq_f32(a3[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a3[1], *(float32x2_t *)(a2 + i), 1), *a3, COERCE_FLOAT(*(_OWORD *)(a2 + i))), a3[2], *(float32x4_t *)(a2 + i), 2));
  }
  for (j = 0; j != 128; j += 16)
  {
    v7 = &v11[j];
    v8 = *(_DWORD *)(a2 + j + 8);
    *(_QWORD *)v7 = *(_QWORD *)(a2 + j);
    *((_DWORD *)v7 + 2) = v8;
  }
  v9 = ((int)(float)(a4[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a4, 0.0), 1.0) * 255.0);
  for (k = 12; k != 140; k += 16)
    *(_DWORD *)&v11[k] = v9;
  __appendVerticesAndIndices(a1, (uint64_t)v11, 8u, word_1DD02C318, 0x18u, a5, 1);
}

void C3DAuthoringEnvironmentAppendDebugPolyhedron(uint64_t *a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v8;
  uint64_t URL;
  uint64_t Library;
  int EdgeCount;
  uint64_t v12;
  int *v13;

  v8 = (uint64_t)(a1 + 47);
  __createGLInfoIfNeeded(a1, (uint64_t)(a1 + 47));
  if (C3DConvexPolyhedronGetVerticesCount(a2))
  {
    URL = C3DSceneSourceGetURL(a2);
    Library = C3DSceneSourceGetLibrary(a2);
    EdgeCount = C3DConvexPolyhedronGetEdgeCount(a2);
    if (EdgeCount >= 1)
    {
      v12 = EdgeCount;
      v13 = (int *)(Library + 4);
      do
      {
        __appendSegment((uint64_t)a1, a3, a4, a4, v8, *(float32x4_t *)(URL + 16 * *(v13 - 1)), *(__n128 *)(URL + 16 * *v13));
        v13 += 2;
        --v12;
      }
      while (v12);
    }
  }
}

void C3DAuthoringEnvironmentAppendDebugNode(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t Skinner;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  float32x4_t *v14;
  int IsAlwaysRendered;
  float32x4_t *WorldMatrix;
  float v17;
  uint64_t v18;
  int v19;
  float32x4_t *v20;
  float v21;
  float32x4_t *v22;
  uint64_t Geometry;
  __C3DMesh *Mesh;
  __int128 v25;
  __n128 WorldBoundingBox;
  __int128 v27;

  v6 = (uint64_t *)(a1 + 65688);
  if ((*(_BYTE *)(a1 + 65689) & 8) != 0)
  {
    Skinner = C3DNodeGetSkinner((uint64_t)a2);
    if (Skinner)
    {
      v8 = Skinner;
      C3DNodeGetWorldMatrix(a2);
      C3DSizeForScreenSpaceSizeAndTransform(*(__n128 **)(a1 + 8));
      C3DSkinnerAppendDebugBones(v8, a1, (uint64_t)a2, v9);
    }
  }
  v10 = *v6;
  if ((*v6 & 0x4000) != 0)
  {
    C3DAuthoringEnvironmentAppendDebugNodeGeometryCreases(a1, a2);
    v10 = *v6;
  }
  if ((v10 & 1) != 0)
  {
    v11 = C3DNodeGetSkinner((uint64_t)a2);
    if (v11)
      C3DSkinnerAppendDebugBoundingBoxes(v11, a1, (uint64_t)a2);
    if ((*(_WORD *)(a3 + 72) & 7) == 2)
    {
      WorldBoundingBox = C3DParticleSystemInstanceGetWorldBoundingBox(*(_QWORD *)(a3 + 48));
      v27 = v12;
      v25 = 0uLL;
      C3DColor4Make((float *)&v25, 1.0, 0.9, 0.9, 1.0);
      v13 = a1;
      v14 = 0;
    }
    else
    {
      IsAlwaysRendered = C3DNodeIsAlwaysRendered((uint64_t)a2);
      WorldBoundingBox = 0u;
      v27 = 0u;
      if (!C3DNodeComputeHierarchicalBoundingBox(a2, 1, (float32x4_t *)&WorldBoundingBox))
        goto LABEL_16;
      WorldMatrix = C3DNodeGetWorldMatrix(a2);
      v25 = 0uLL;
      v17 = 0.0;
      if (!IsAlwaysRendered)
        v17 = 1.0;
      C3DColor4Make((float *)&v25, 1.0, v17, 0.9, 1.0);
      v13 = a1;
      v14 = WorldMatrix;
    }
    C3DAuthoringEnvironmentAppendDebugBoundingBox(v13, (float32x4_t *)&WorldBoundingBox, v14, (float *)&v25);
  }
LABEL_16:
  v18 = *v6;
  if ((*v6 & 2) != 0)
  {
    v19 = C3DNodeIsAlwaysRendered((uint64_t)a2);
    WorldBoundingBox = 0uLL;
    if (C3DGetBoundingSphere(a2, 1, (uint64_t)&WorldBoundingBox))
    {
      v20 = C3DNodeGetWorldMatrix(a2);
      v25 = 0uLL;
      v21 = 0.0;
      if (!v19)
        v21 = 1.0;
      C3DColor4Make((float *)&v25, 1.0, v21, 0.9, 1.0);
      C3DAuthoringEnvironmentAppendDebugBoundingSphere(a1, WorldBoundingBox.n128_i64[0], WorldBoundingBox.n128_i64[1], v20, &v25);
    }
    v18 = *v6;
  }
  if ((v18 & 0x400) != 0)
  {
    v22 = C3DNodeGetWorldMatrix(a2);
    Geometry = C3DNodeGetGeometry((uint64_t)a2);
    if (Geometry)
    {
      Mesh = (__C3DMesh *)C3DGeometryGetMesh(Geometry);
      if (Mesh)
        C3DAuthoringEnvironmentAppendWireframeMesh((_QWORD *)a1, Mesh, 0, (uint64_t)v22);
    }
  }
}

void C3DAuthoringEnvironmentAppendDebugNodeGeometryCreases(uint64_t a1, float32x4_t *a2)
{
  uint64_t Geometry;
  uint64_t v5;
  uint64_t Mesh;
  uint64_t v7;
  float32x4_t *WorldMatrix;
  unsigned int v9;
  unsigned int v10;
  uint64_t ChannelForSourceWithSemanticAtIndex;
  const void *SourceWithSemanticAtIndex;
  uint64_t EdgeCreasesSource;
  uint64_t EdgeCreasesElement;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Accessor;
  uint64_t PrimitiveCount;
  const __CFArray *ElementsCount;
  const __CFArray *v27;
  CFIndex i;
  const void *ElementAtIndex;
  const void *v30;
  _QWORD *v31;
  uint64_t Count;
  uint64_t v33;
  uint64_t j;
  int8x16_t v35;
  const UInt8 *ValuePtrAtIndex;
  float v37;
  float v38;
  int8x16_t v39;
  _OWORD v40[3];
  uint64_t v41;
  _QWORD v42[11];
  __int128 v43;
  __int128 v44;
  __n128 v45;
  uint64_t v46;

  Geometry = C3DNodeGetGeometry((uint64_t)a2);
  if (Geometry)
  {
    v5 = Geometry;
    Mesh = C3DGeometryGetMesh(Geometry);
    if (Mesh)
    {
      v7 = Mesh;
      WorldMatrix = C3DNodeGetWorldMatrix(a2);
      C3DSizeForScreenSpaceSizeAndTransform(*(__n128 **)(a1 + 8));
      v10 = v9;
      ChannelForSourceWithSemanticAtIndex = C3DMeshGetChannelForSourceWithSemanticAtIndex(v7, 0, 0);
      SourceWithSemanticAtIndex = C3DMeshGetSourceWithSemanticAtIndex(v7, 0, 0, 0);
      EdgeCreasesSource = C3DGeometryOsdGetEdgeCreasesSource(v5);
      EdgeCreasesElement = C3DGeometryOsdGetEdgeCreasesElement(v5);
      if (EdgeCreasesSource)
      {
        v15 = EdgeCreasesElement;
        if (EdgeCreasesElement)
        {
          if (C3DMeshElementGetIndicesChannelCount(EdgeCreasesElement) != 1)
          {
            v16 = scn_default_log();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
              C3DAuthoringEnvironmentAppendDebugNodeGeometryCreases_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
          }
          Accessor = C3DMeshSourceGetAccessor(EdgeCreasesSource);
          PrimitiveCount = C3DMeshElementGetPrimitiveCount(v15);
          ElementsCount = C3DMeshGetElementsCount(v7);
          if ((uint64_t)ElementsCount >= 1)
          {
            v27 = ElementsCount;
            for (i = 0; (const __CFArray *)i != v27; ++i)
            {
              ElementAtIndex = C3DMeshGetElementAtIndex(v7, i, 0);
              v46 = 0;
              v44 = 0u;
              v45 = 0u;
              v43 = 0u;
              C3DMeshElementGetContent((uint64_t)ElementAtIndex, ChannelForSourceWithSemanticAtIndex, (uint64_t)&v43);
              v42[0] = MEMORY[0x1E0C809B0];
              v42[1] = 3221225472;
              v42[2] = __C3DAuthoringEnvironmentAppendDebugNodeGeometryCreases_block_invoke;
              v42[3] = &__block_descriptor_88_e19_v32__0I8_I12I20_B24l;
              v42[4] = PrimitiveCount;
              v42[5] = v15;
              v42[6] = 0;
              v42[7] = Accessor;
              v42[8] = SourceWithSemanticAtIndex;
              v42[9] = a1;
              v42[10] = WorldMatrix;
              v40[0] = v43;
              v40[1] = v44;
              v40[2] = v45;
              v41 = v46;
              C3DIndicesContentEnumeratePrimitives((uint64_t *)v40, (uint64_t)v42, v45);
            }
          }
        }
      }
      v30 = C3DMeshGetSourceWithSemanticAtIndex(v7, 7, 0, 0);
      if (v30)
      {
        v31 = (_QWORD *)C3DMeshSourceGetAccessor(v30);
        Count = C3DMeshSourceGetCount((uint64_t)SourceWithSemanticAtIndex);
        if (Count >= 1)
        {
          v33 = Count;
          for (j = 0; j != v33; ++j)
          {
            *(double *)v35.i64 = C3DMeshSourceGetValueAtIndexAsVector3((uint64_t)SourceWithSemanticAtIndex, j);
            v39 = v35;
            ValuePtrAtIndex = C3DSourceAccessorGetValuePtrAtIndex(v31, j);
            v37 = *(float *)ValuePtrAtIndex * 0.5;
            if (v37 > 1.0)
              v37 = 1.0;
            v38 = 2.0 - (float)(*(float *)ValuePtrAtIndex * 0.5);
            if (v38 > 1.0)
              v38 = 1.0;
            *(_QWORD *)&v43 = LODWORD(v37) | ((unint64_t)LODWORD(v38) << 32);
            *((_QWORD *)&v43 + 1) = 0x3F80000000000000;
            C3DAuthoringEnvironmentAppendDebugBoundingSphere(a1, v39.u32[0] | ((unint64_t)v39.u32[1] << 32), vextq_s8(v39, v39, 8uLL).u32[0] | ((unint64_t)v10 << 32), WorldMatrix, &v43);
          }
        }
      }
    }
  }
}

uint64_t C3DAuthoringEnvironmentAppendDebugNodeAttributes(uint64_t a1, float32x4_t *a2)
{
  SCNNode *v4;
  int v5;
  int v6;
  float32x4_t *WorldMatrix;
  float v8;
  float v9;
  __int128 v10;
  id *v11;
  void *v12;
  void *v13;
  int v14;
  float *v15;
  float *v16;
  double v17;
  int v18;
  __int128 v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  float32x4_t v24;
  unsigned int v25;
  float v26;
  __int32 v27;
  unsigned __int32 v28;
  __n128 v29;
  float32x4_t v30;
  unsigned __int32 v31;
  __n128 v32;
  float32x4_t v33;
  float v34;
  __int32 v35;
  unsigned int v36;
  unsigned int v37;
  __n128 v38;
  float32x4_t v39;
  float v40;
  unint64_t v41;
  unint64_t v42;
  __n128 v43;
  float32x4_t v44;
  unsigned __int32 v45;
  __n128 v46;
  unsigned __int32 v47;
  __int32 v48;
  float32x4_t v49;
  __int32 v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  double v54;
  double v55;
  float32x4_t v56;
  int8x16_t v57;
  __int32 v58;
  __int32 v59;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float v69;
  int v70;
  int32x4_t v71;
  int v72;
  int v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  double v80;
  double v81;
  __int32 v82;
  float32x4_t v83;
  __int32 v84;
  const __CFArray *ParticleSystems;
  double v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  float32x2_t v90;
  void *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  __int128 v100;
  char v101;
  SCNNode *v102;
  int v103;
  int32x4_t v104;
  float32x4_t v105;
  float v106;
  __int32 v107;
  float32x4_t v108;
  unsigned __int32 v109;
  float32x4_t v110;
  unsigned int v111;
  float v112;
  float32x4_t v113;
  float32x4_t v114[4];
  __n128 AxisAngleRotationBetweenVectors;
  __n128 v116;
  __n128 v117;
  float32x4_t v118[4];
  _OWORD v119[4];
  __int128 v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  __n128 v125;

  objc_sync_enter((id)a1);
  v4 = +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a2);
  v5 = objc_msgSend((id)objc_msgSend((id)a1, "selectedItems"), "containsObject:", +[SCNNodeManipulableItem nodeManipulatorItemWithNode:screenSize:](SCNNodeManipulableItem, "nodeManipulatorItemWithNode:screenSize:", v4, 0.0));
  if ((v5 & 1) != 0)
    v6 = -1;
  else
    v6 = *(_DWORD *)(a1 + 65688);
  WorldMatrix = C3DNodeGetWorldMatrix(a2);
  *(unint64_t *)((char *)v125.n128_u64 + 4) = 0;
  v125.n128_u32[0] = 0;
  C3DMatrix4x4GetTranslation((__n128 *)WorldMatrix, &v125);
  *(uint64_t *)((char *)v124.i64 + 4) = 0;
  v124.i32[0] = 0;
  C3DMatrix4x4GetScale(WorldMatrix, &v124);
  C3DSizeForScreenSpaceSizeAndTransform(*(__n128 **)(a1 + 8));
  v9 = v8;
  if (v8 > 0.0)
  {
    objc_msgSend(*(id *)(a1 + 65784), "addObject:", +[SCNNodeManipulableItem nodeManipulatorItemWithNode:screenSize:](SCNNodeManipulableItem, "nodeManipulatorItemWithNode:screenSize:", v4, 0.0));
    if (v6)
    {
      __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
      __createGLInfoIfNeeded((uint64_t *)a1, a1 + 832);
      __createGLInfoIfNeeded((uint64_t *)a1, a1 + 680);
      __createGLInfoIfNeeded((uint64_t *)a1, a1 + 1288);
      v102 = v4;
      v103 = v5;
      *(double *)&v10 = v9;
      v100 = v10;
      v101 = v6;
      if ((v6 & 0x80) != 0)
      {
        if (C3DNodeGetHasPhysicsField((uint64_t)a2))
        {
          v11 = (id *)C3DGetScene(a2);
          v12 = (void *)objc_msgSend((id)C3DSceneGetPhysicsWorld(v11, 0), "_findFieldAttachedToNode:", +[SCNNode nodeWithNodeRef:](SCNNode, "nodeWithNodeRef:", a2));
          v13 = v12;
          if (v12)
          {
            v14 = objc_msgSend(v12, "isActive");
            v15 = (float *)&C3DAuthoringEnvironmentColorPaleBlue;
            if (v5)
              v15 = (float *)&C3DAuthoringEnvironmentColorPink;
            if (v14)
              v16 = v15;
            else
              v16 = (float *)&C3DAuthoringEnvironmentColorGrayMedium;
            objc_msgSend(v13, "halfExtent", v100);
            if (*(float *)&v17 != 3.4028e38)
            {
              if (objc_msgSend(v13, "usesEllipsoidalExtent"))
              {
                v122 = 0u;
                v123 = 0u;
                v120 = 0u;
                v121 = 0u;
                objc_msgSend(v13, "halfExtent");
                DWORD1(v19) = v18;
                DWORD2(v19) = v20;
                v119[0] = v19;
                C3DMatrix4x4MakeScale(&v120, v119);
                C3DMatrix4x4Mult((uint64_t)&v120, WorldMatrix, &v120);
                if (v5)
                  v21 = 7;
                else
                  v21 = 3;
                __appendSphereWithSubdivisionCount(a1, 0, 0x3F80000000000000, (float32x4_t *)&v120, (uint64_t)v16, a1 + 376, v21);
              }
              else
              {
                objc_msgSend(v13, "halfExtent");
                v24.i64[0] = __PAIR64__(v23, v22);
                v24.i64[1] = v25;
                v120 = xmmword_1DD007610;
                v121 = v24;
                *(_QWORD *)&v17 = __appendBox(a1, (float32x4_t *)&v120, WorldMatrix, v16, a1 + 376).n128_u64[0];
              }
            }
            objc_msgSend(v13, "offset", v17);
            v112 = v26;
            v107 = v27;
            v109 = v28;
            if (objc_msgSend(v13, "supportsOffset"))
            {
              v30.f32[0] = v112 - (float)(v9 * 0.5);
              v29.n128_f32[0] = v112 + (float)(v9 * 0.5);
              v30.i32[1] = v107;
              v30.i64[1] = __PAIR64__(v111, v109);
              v29.n128_u32[1] = v107;
              v29.n128_u32[2] = v109;
              __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, v30, v29);
              objc_msgSend(v13, "offset");
              v32.n128_u32[0] = v31;
              v33 = (float32x4_t)v32;
              v33.f32[1] = v34 + (float)((float)-v9 * 0.5);
              v33.i32[2] = v35;
              v32.n128_f32[1] = v34 + (float)(v9 * 0.5);
              v32.n128_u32[2] = v35;
              __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, v33, v32);
              objc_msgSend(v13, "offset");
              v38.n128_u64[0] = __PAIR64__(v37, v36);
              v39 = (float32x4_t)v38;
              v39.f32[2] = v40 + (float)((float)-v9 * 0.5);
              v38.n128_f32[2] = v40 + (float)(v9 * 0.5);
              __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, v39, v38);
            }
            __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, (float32x4_t)COERCE_UNSIGNED_INT(0.0 - v9), (__n128)COERCE_UNSIGNED_INT(v9 + 0.0));
            LODWORD(v41) = 0;
            *((float *)&v41 + 1) = 0.0 - v9;
            LODWORD(v42) = 0;
            *((float *)&v42 + 1) = v9 + 0.0;
            __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, (float32x4_t)v41, (__n128)v42);
            v43.n128_u64[0] = 0;
            v43.n128_u32[3] = 0;
            v44.i64[0] = 0;
            v44.i32[3] = 0;
            v44.f32[2] = 0.0 - v9;
            v43.n128_f32[2] = v9 + 0.0;
            __appendSegment(a1, (uint64_t)WorldMatrix, v16, v16, a1 + 376, v44, v43);
            objc_msgSend(*(id *)(a1 + 65784), "addObject:", +[SCNNodeManipulableItem nodeManipulatorItemWithNode:screenSize:](SCNNodeManipulableItem, "nodeManipulatorItemWithNode:screenSize:", v4, *(double *)&v100));
            if (objc_msgSend(v13, "supportsDirection"))
            {
              v122 = 0u;
              v123 = 0u;
              v120 = 0u;
              v121 = 0u;
              memset(v119, 0, sizeof(v119));
              memset(v118, 0, sizeof(v118));
              objc_msgSend(v13, "offset");
              v46.n128_u32[1] = v45;
              v46.n128_u32[2] = v47;
              v117 = v46;
              v46.n128_u64[0] = 0x3F0000003F000000;
              v46.n128_u64[1] = 0x3F0000003F000000;
              v116 = v46;
              objc_msgSend(v13, "direction");
              v49.i32[1] = v48;
              v49.i32[2] = v50;
              v51 = (int32x4_t)vmulq_f32(v49, v49);
              v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
              v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
              v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
              AxisAngleRotationBetweenVectors = C3DVector4GetAxisAngleRotationBetweenVectors((float32x4_t)xmmword_1DD007960, (int32x4_t)vmulq_n_f32(v49, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]));
              C3DMatrix4x4MakeAxisAngleRotation(v118, (float32x4_t *)&AxisAngleRotationBetweenVectors, AxisAngleRotationBetweenVectors.n128_f32[3]);
              C3DMatrix4x4MakeScale(v119, &v116);
              C3DMatrix4x4MakeTranslation((uint64_t)&v120, &v117);
              memset(v114, 0, sizeof(v114));
              C3DMatrix4x4Mult((uint64_t)v118, WorldMatrix, v114);
              C3DMatrix4x4Mult((uint64_t)v119, v114, v114);
              C3DMatrix4x4Mult((uint64_t)v114, (float32x4_t *)&v120, v114);
              __createGLInfoIfNeeded((uint64_t *)a1, a1 + 376);
              __appendSegment(a1, (uint64_t)v114, v16, v16, a1 + 376, (float32x4_t)0, (__n128)xmmword_1DD007600);
            }
            if (objc_msgSend(v13, "isActive"))
            {
              +[SCNPhysicsField _displayScaleFactor](SCNPhysicsField, "_displayScaleFactor");
              v55 = v54;
              objc_msgSend(v13, "halfExtent");
              v57 = (int8x16_t)v56;
              v57.i32[1] = v58;
              v57.i32[2] = v59;
              __asm { FMOV            V3.4S, #10.0 }
              v65 = _Q3;
              v65.i32[1] = v58;
              v66.i32[0] = 2139095039;
              v65.i32[2] = v59;
              v67 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_f32(v56, v66), 0), v65, v57);
              if (v67.f32[1] == 3.4028e38)
              {
                v68.i64[0] = __PAIR64__(_Q3.u32[1], v67.u32[0]);
                v68.i64[1] = v67.i64[1];
                v67 = v68;
              }
              v69 = v55 * 0.1;
              v106 = v69;
              if (v67.f32[2] == 3.4028e38)
              {
                _Q3.i64[0] = v67.i64[0];
                _Q3.i32[3] = v67.i32[3];
                v67 = (float32x4_t)_Q3;
              }
              v70 = 0;
              v71 = vdupq_n_s32(0x3F7FF972u);
              v108 = (float32x4_t)v71;
              v105 = v67;
              do
              {
                v72 = 0;
                *(float *)v71.i32 = (float)((float)(2 * v70) / 9.0) + -1.0;
                v104 = v71;
                do
                {
                  v73 = 0;
                  v74 = (float32x4_t)v104;
                  v74.f32[1] = (float)((float)(2 * v72) / 9.0) + -1.0;
                  v74.i32[2] = v104.i32[2];
                  v110 = v74;
                  do
                  {
                    v75 = v110;
                    v75.f32[2] = (float)((float)v73 / 9.0) + -1.0;
                    v76 = *WorldMatrix;
                    v77 = WorldMatrix[1];
                    v78 = WorldMatrix[3];
                    v122 = WorldMatrix[2];
                    v123 = v78;
                    v120 = (__int128)v76;
                    v121 = v77;
                    *(double *)v79.i64 = C3DVector3MultMatrix4x4((float32x4_t *)&v120, vmulq_f32(vmulq_f32(v67, v75), v108));
                    LODWORD(v80) = v79.i32[1];
                    LODWORD(v81) = v79.i32[2];
                    v113 = v79;
                    objc_msgSend(v13, "evalAtLocation:", *(double *)v79.i64, v80, v81);
                    v83.i32[1] = v82;
                    v83.i32[2] = v84;
                    __appendSegment(a1, 0, C3DAuthoringEnvironmentColorPaleGreen, C3DAuthoringEnvironmentColorYellow, a1 + 376, v113, (__n128)vaddq_f32(v113, vmulq_n_f32(v83, v106)));
                    v73 += 2;
                    v67 = v105;
                  }
                  while (v73 != 20);
                  ++v72;
                }
                while (v72 != 10);
                ++v70;
              }
              while (v70 != 10);
            }
          }
        }
      }
      if ((v101 & 0x28) != 0)
      {
        ParticleSystems = C3DNodeGetParticleSystems((uint64_t)a2);
        if (ParticleSystems)
        {
          if (CFArrayGetCount(ParticleSystems) >= 1 && (v101 & 0x20) != 0)
          {
            objc_msgSend(*(id *)(a1 + 65784), "addObject:", +[SCNNodeManipulableItem nodeManipulatorItemWithNode:screenSize:](SCNNodeManipulableItem, "nodeManipulatorItemWithNode:screenSize:", v102, *(double *)&v100 * 0.75));
            v86 = (float)-v9;
            *(float *)&v87 = v86 * 0.03;
            v88 = v87;
            v89 = COERCE_UNSIGNED_INT(v9 * 0.2);
            v90 = vcvt_f32_f64(vmulq_n_f64((float64x2_t)xmmword_1DD02C0E0, *(double *)&v100));
            if (v103)
              v91 = &C3DAuthoringEnvironmentColorPink;
            else
              v91 = &C3DAuthoringEnvironmentColorGrayMedium;
            __appendSphereWithSubdivisionCount(a1, v88 | ((unint64_t)v90.u32[1] << 32), v90.u32[0] | ((unint64_t)v89 << 32), WorldMatrix, (uint64_t)v91, a1 + 376, 3u);
            v92 = v89 << 32;
            *(float *)&v93 = v86 * 0.2;
            *(float *)&v94 = v86 * 0.23;
            *(float *)&v95 = *(double *)&v100 * 0.37;
            v96 = v94;
            __appendSphereWithSubdivisionCount(a1, v93 | ((unint64_t)v94 << 32), v95 | (unint64_t)v92, WorldMatrix, (uint64_t)v91, a1 + 376, 3u);
            *(float *)&v97 = *(double *)&v100 * 0.3;
            *(float *)&v98 = v86 * 0.37;
            __appendSphereWithSubdivisionCount(a1, v97 | (unint64_t)(v96 << 32), v98 | (unint64_t)v92, WorldMatrix, (uint64_t)v91, a1 + 376, 3u);
          }
        }
      }
    }
  }
  return objc_sync_exit((id)a1);
}

void sub_1DCF0DFB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __appendSphereWithSubdivisionCount(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  __int16 *v21;
  int v22;
  int v23;
  int v24;
  float v25;
  int32x4_t v26;
  int v27;
  int v28;
  _BYTE *v29;
  float v30;
  uint64_t v31;
  __float2 v32;
  uint64_t v33;
  float v34;
  __float2 v35;
  float32x4_t v36;
  _BYTE *v37;
  float32x4_t v38;
  int v39;
  double v40;
  float v41;
  __float2 v42;
  uint64_t v43;
  float v44;
  __float2 v45;
  float32x4_t v46;
  _BYTE *v47;
  float32x4_t v48;
  uint64_t v49;
  _DWORD *v50;
  float32x4_t v51;
  float32x4_t v52;
  int v53;
  int v54;
  unsigned int v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  __int16 *v59;
  uint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  __int16 *v64;
  int8x16_t v65;
  int8x16_t v66;
  __int16 *v67;
  int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  __int16 *v73;
  BOOL v74;
  _BYTE v75[4];
  unsigned int v76;
  __int16 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83[4];
  uint64_t v84;
  int16x8x2_t v85;

  v84 = *MEMORY[0x1E0C80C00];
  v10 = 48 * a7;
  MEMORY[0x1E0C80A78](a1);
  v14 = *(unsigned __int8 *)(v13 + 48);
  if (*(_BYTE *)(v13 + 48))
    v15 = 96;
  else
    v15 = 144;
  v16 = (v15 * v12);
  MEMORY[0x1E0C80A78](v11);
  v21 = (__int16 *)&v75[-2 * v16];
  if (v22)
  {
    v77 = (__int16 *)&v75[-2 * v16];
    v78 = v17;
    v79 = a6;
    v23 = 0;
    v24 = ((int)(float)(v20[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(v20[2], 0.0), 1.0) * 255.0) << 16);
    v76 = 2 * a7;
    v25 = fminf(fmaxf(v20[1], 0.0), 1.0) * 255.0;
    v26.i64[0] = v18;
    v27 = (int)(float)(fminf(fmaxf(*v20, 0.0), 1.0) * 255.0);
    v26.i64[1] = v19;
    v81 = (float32x4_t)vdupq_laneq_s32(v26, 3);
    v82 = (float32x4_t)v26;
    v28 = v24 | ((int)v25 << 8) | v27;
    v29 = &v75[-16 * v10];
    do
    {
      v30 = (double)++v23 * 3.14159265 / (double)(a7 + 1);
      v32 = __sincosf_stret(v30);
      *(float *)&v31 = v32.__cosval;
      v80 = v31;
      v33 = 0;
      v34 = 0.0;
      do
      {
        v35 = __sincosf_stret(v34);
        v36.f32[0] = v32.__sinval * v35.__cosval;
        v36.i32[1] = v80;
        v36.f32[2] = v32.__sinval * v35.__sinval;
        v37 = &v29[v33];
        v38 = vmlaq_f32(v82, v36, v81);
        *(_QWORD *)v37 = v38.i64[0];
        *(_DWORD *)&v29[v33 + 8] = v38.i32[2];
        *((_DWORD *)v37 + 3) = v28;
        v34 = v34 + 0.2618;
        v33 += 16;
      }
      while (v33 != 384);
      v29 += 384;
    }
    while (v23 != a7);
    v39 = 0;
    v40 = 0.0;
    do
    {
      v41 = v40 * 3.14159265 / (double)a7;
      v42 = __sincosf_stret(v41);
      v43 = 0;
      v44 = 0.0;
      do
      {
        v45 = __sincosf_stret(v44);
        v46.f32[0] = v42.__cosval * v45.__cosval;
        v46.i32[1] = LODWORD(v45.__sinval);
        v46.f32[2] = v42.__sinval * v45.__cosval;
        v47 = &v29[v43];
        v48 = vmlaq_f32(v82, v46, v81);
        *(_QWORD *)v47 = v48.i64[0];
        *(_DWORD *)&v29[v43 + 8] = v48.i32[2];
        *((_DWORD *)v47 + 3) = v28;
        v44 = v44 + 0.2618;
        v43 += 16;
      }
      while (v43 != 384);
      v29 += 384;
      v40 = v40 + 1.0;
      ++v39;
    }
    while (v39 != a7);
    a6 = v79;
    if (a4)
    {
      if (v10 <= 1)
        v49 = 1;
      else
        v49 = v10;
      v50 = &v75[-16 * v10 + 8];
      do
      {
        v48.i64[0] = *((_QWORD *)v50 - 1);
        v48.i32[2] = *v50;
        v51 = a4[1];
        v83[0] = *a4;
        v83[1] = v51;
        v52 = a4[3];
        v83[2] = a4[2];
        v83[3] = v52;
        *((double *)v50 - 1) = C3DVector3MultMatrix4x4(v83, v48);
        *v50 = v48.i32[2];
        v50 += 4;
        --v49;
      }
      while (v49);
      v14 = *(unsigned __int8 *)(a6 + 48);
    }
    v53 = v76;
    if (v76 <= 1)
      v53 = 1;
    v54 = 0;
    v55 = 0;
    if (v14)
    {
      v56.i64[0] = 0x100000001;
      v56.i64[1] = 0x100000001;
      v57.i64[0] = 0x1800000018;
      v57.i64[1] = 0x1800000018;
      v58.i64[0] = 0x800000008;
      v58.i64[1] = 0x800000008;
      v21 = v77;
      v59 = v77;
      v17 = v78;
      do
      {
        v60 = 0;
        v61 = vdupq_n_s32(v55);
        v62 = (int32x4_t)xmmword_1DD029FB0;
        v63 = (int32x4_t)xmmword_1DD02AED0;
        do
        {
          v64 = &v59[v60];
          v85.val[0] = vuzp1q_s16((int16x8_t)vaddq_s32(v62, v61), (int16x8_t)vaddq_s32(v63, v61));
          v65 = (int8x16_t)vaddq_s32(v63, v56);
          v66 = (int8x16_t)vaddq_s32(v62, v56);
          v85.val[1] = vuzp1q_s16((int16x8_t)vaddq_s32((int32x4_t)vbicq_s8(v66, (int8x16_t)vceqq_s32((int32x4_t)v66, v57)), v61), (int16x8_t)vaddq_s32((int32x4_t)vbicq_s8(v65, (int8x16_t)vceqq_s32((int32x4_t)v65, v57)), v61));
          vst2q_s16(v64, v85);
          v62 = vaddq_s32(v62, v58);
          v63 = vaddq_s32(v63, v58);
          v60 += 16;
        }
        while (v60 != 48);
        v55 += 24;
        ++v54;
        v59 += 48;
      }
      while (v54 != v53);
    }
    else
    {
      v21 = v77;
      v67 = v77;
      v17 = v78;
      do
      {
        v68 = 0;
        do
        {
          v69 = v55 + v68;
          *v67 = v55 + v68;
          if (v68 == 23)
            v70 = 0;
          else
            v70 = v68 + 1;
          v71 = v68 + 1;
          v72 = v70 + v55;
          v73 = v67 + 3;
          v74 = v69 >= v10 || v72 >= v10;
          v67[1] = v72;
          v67[2] = (v69 + 24) % v10;
          if (v74)
            ++v55;
          v68 = v71;
          v67 += 3;
        }
        while (v71 != 24);
        v55 += 24;
        ++v54;
        v67 = v73;
      }
      while (v54 != v53);
    }
  }
  __appendVerticesAndIndices(v17, (uint64_t)&v75[-16 * v10], v10, v21, v16, a6, 1);
}

void C3DAuthoringEnvironmentAppendDebugCone(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, int a6, float a7, float a8)
{
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v15 = 47;
  if (a6)
    v15 = 66;
  v16 = (uint64_t)&a1[v15];
  __createGLInfoIfNeeded(a1, (uint64_t)&a1[v15]);
  *(float *)&v17 = a7;
  *(float *)&v18 = a8;
  __appendCone((uint64_t)a1, v17, v18, a2, a3, a4, a5, v16);
}

void __appendCone(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t a8)
{
  uint64_t v12;
  double v13;
  _OWORD *v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22;
  __int128 v23;
  __int128 v24;
  float32x4_t v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float v31;
  float v32;
  int v33;
  int v34;
  int v35;
  __float2 v36;
  __float2 v37;
  float32x4_t v38;
  _OWORD *v39;
  __int32 v40;
  __int32 v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  __int16 *v45;
  unsigned int v46;
  float32x4_t *i;
  __int16 v48;
  __int16 v49;
  __int16 *v50;
  int j;
  __int16 v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  *(double *)v54.i64 = a3;
  v62 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a8 + 48))
    v12 = 51;
  else
    v12 = 52;
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = (_OWORD *)&v53.f32[-4 * v12];
  v16 = *v15;
  v18 = *v17;
  v56 = vmlaq_n_f32(*v15, *v17, *(float *)&v13);
  if (v19)
  {
    v55 = v18;
    v20 = *(_OWORD *)(a6 + 16);
    v58 = *(float32x4_t *)a6;
    v59 = v20;
    v21 = *(_OWORD *)(a6 + 48);
    v60 = *(_OWORD *)(a6 + 32);
    v61 = v21;
    *(double *)v22.i64 = C3DVector3MultMatrix4x4(&v58, v16);
    v53 = v22;
    v23 = *(_OWORD *)(a6 + 16);
    v58 = *(float32x4_t *)a6;
    v59 = v23;
    v24 = *(_OWORD *)(a6 + 48);
    v60 = *(_OWORD *)(a6 + 32);
    v61 = v24;
    *(double *)v25.i64 = C3DVector3Rotate((float32x2_t *)&v58, v55);
    v55 = v25;
    v26 = *(_OWORD *)(a6 + 16);
    v58 = *(float32x4_t *)a6;
    v59 = v26;
    v27 = *(_OWORD *)(a6 + 48);
    v60 = *(_OWORD *)(a6 + 32);
    v61 = v27;
    *(double *)v28.i64 = C3DVector3MultMatrix4x4(&v58, v56);
    v18 = v55;
    v56 = v28;
  }
  else
  {
    v53 = v16;
  }
  v58.i32[2] = 0;
  v58.i64[0] = 0;
  v57.i32[2] = 0;
  v57.i64[0] = 0;
  C3DVectorGenerateOrthogonalBasis(&v58, (int8x16_t *)&v57, v18);
  v29 = 0;
  v30 = vmulq_n_f32(v58, v54.f32[0]);
  v31 = 0.0;
  v32 = *a7;
  v33 = (int)(float)(fminf(fmaxf(a7[1], 0.0), 1.0) * 255.0);
  v34 = ((int)(float)(a7[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a7[2], 0.0), 1.0) * 255.0) << 16);
  v54 = vmulq_n_f32(v57, v54.f32[0]);
  v55 = v30;
  v57 = v54;
  v58 = v30;
  v35 = v34 | (v33 << 8) | (int)(float)(fminf(fmaxf(v32, 0.0), 1.0) * 255.0);
  do
  {
    v37 = __sincosf_stret(v31);
    v38 = vmlaq_n_f32(vmlaq_n_f32(v56, v55, v37.__cosval), v54, v37.__sinval);
    v39 = &v14[v29];
    *(_QWORD *)v39 = v38.i64[0];
    DWORD2(v14[v29]) = v38.i32[2];
    *((_DWORD *)v39 + 3) = v35;
    v31 = v31 + 0.12566;
    ++v29;
  }
  while (v29 != 50);
  v40 = v53.i32[2];
  *((_QWORD *)v14 + 100) = v53.i64[0];
  *((_DWORD *)v14 + 202) = v40;
  *((_DWORD *)v14 + 203) = v35;
  if (!*(_BYTE *)(a8 + 48))
  {
    v41 = v56.i32[2];
    *((_QWORD *)v14 + 102) = v56.i64[0];
    *((_DWORD *)v14 + 206) = v41;
    *((_DWORD *)v14 + 207) = v35;
  }
  ((void (*)(_QWORD))MEMORY[0x1E0C80A78])(v36);
  v45 = (__int16 *)((char *)&v53 - v44);
  v46 = -49;
  for (i = (float32x4_t *)((char *)&v53 - v44); ; i = (float32x4_t *)v50)
  {
    v48 = v46 + 49;
    v49 = v46;
    if (v46 >= 0xFFFFFFCF)
      v49 = v46 + 50;
    if (!v43)
      break;
    v50 = &i->i16[2];
    i->i16[0] = v48;
    i->i16[1] = v49;
    if (!v46)
    {
      *(_OWORD *)v50 = xmmword_1DD02C0F0;
      goto LABEL_24;
    }
LABEL_18:
    ++v46;
  }
  v50 = &i->i16[3];
  i->i16[2] = v49;
  i->i16[0] = 51;
  i->i16[1] = v48;
  if (v46)
    goto LABEL_18;
  for (j = 1; j != 51; ++j)
  {
    *v50 = 50;
    v50[1] = j - 1;
    if (j == 50)
      v52 = 0;
    else
      v52 = j;
    v50[2] = v52;
    v50 += 3;
  }
LABEL_24:
  __appendVerticesAndIndices(a1, (uint64_t)(&v53 - v12), v12, v45, v42, a8, 1);
}

void C3DAuthoringEnvironmentAppendDebugPyramid(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, float *a5, int a6, float a7, float a8)
{
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  __int128 v22;
  __int128 v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  float32x4_t v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int32 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v14 = 47;
  if (a6)
    v14 = 66;
  v15 = (uint64_t)&a1[v14];
  __createGLInfoIfNeeded(a1, (uint64_t)&a1[v14]);
  v47.i32[2] = 0;
  v47.i64[0] = 0;
  v46.i32[2] = 0;
  v46.i64[0] = 0;
  C3DVectorGenerateOrthogonalBasis(&v47, (int8x16_t *)&v46, *a3);
  v16 = vmulq_n_f32(*a3, a7);
  v17 = vmlaq_n_f32(v16, vaddq_f32(v47, v46), a8 * 0.5);
  v18 = vmlaq_n_f32(v16, vsubq_f32(v47, v46), a8 * 0.5);
  v19 = vmlaq_n_f32(v16, vsubq_f32(vnegq_f32(v47), v46), a8 * 0.5);
  v20 = vmlaq_n_f32(v16, vsubq_f32(v46, v47), a8 * 0.5);
  v21 = *a2;
  if (a4)
  {
    v22 = *(_OWORD *)(a4 + 16);
    v48 = *(float32x4_t *)a4;
    v49 = v22;
    v23 = *(_OWORD *)(a4 + 48);
    v50 = *(_OWORD *)(a4 + 32);
    v51 = v23;
    v38 = v20;
    v39 = v18;
    v41 = v17;
    v44 = v19;
    *(double *)v24.i64 = C3DVector3MultMatrix4x4(&v48, v21);
    v37 = v24;
    v25 = *(_OWORD *)(a4 + 16);
    v48 = *(float32x4_t *)a4;
    v49 = v25;
    v26 = *(_OWORD *)(a4 + 48);
    v50 = *(_OWORD *)(a4 + 32);
    v51 = v26;
    *(double *)v27.i64 = C3DVector3MultMatrix4x4(&v48, v41);
    v42 = v27;
    v28 = *(_OWORD *)(a4 + 16);
    v48 = *(float32x4_t *)a4;
    v49 = v28;
    v29 = *(_OWORD *)(a4 + 48);
    v50 = *(_OWORD *)(a4 + 32);
    v51 = v29;
    *(double *)v30.i64 = C3DVector3MultMatrix4x4(&v48, v39);
    v40 = v30;
    v31 = *(_OWORD *)(a4 + 16);
    v48 = *(float32x4_t *)a4;
    v49 = v31;
    v32 = *(_OWORD *)(a4 + 48);
    v50 = *(_OWORD *)(a4 + 32);
    v51 = v32;
    *(double *)v33.i64 = C3DVector3MultMatrix4x4(&v48, v44);
    v45 = v33;
    v34 = *(_OWORD *)(a4 + 16);
    v48 = *(float32x4_t *)a4;
    v49 = v34;
    v35 = *(_OWORD *)(a4 + 48);
    v50 = *(_OWORD *)(a4 + 32);
    v51 = v35;
    *(double *)v36.i64 = C3DVector3MultMatrix4x4(&v48, v38);
    v21 = v37;
    v18 = v40;
    v17 = v42;
    v19 = v45;
    v20 = v36;
  }
  v48.i64[0] = v21.i64[0];
  v48.i32[2] = v21.i32[2];
  DWORD2(v49) = v17.i32[2];
  *(_QWORD *)&v49 = v17.i64[0];
  *(_QWORD *)&v50 = v18.i64[0];
  DWORD2(v50) = v18.i32[2];
  *(_QWORD *)&v51 = v19.i64[0];
  DWORD2(v51) = v19.i32[2];
  v53 = v20.i32[2];
  v52 = v20.i64[0];
  v54 = ((int)(float)(a5[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a5[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a5[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a5, 0.0), 1.0) * 255.0);
  HIDWORD(v51) = v54;
  HIDWORD(v50) = v54;
  HIDWORD(v49) = v54;
  v48.i32[3] = v54;
  __appendVerticesAndIndices((uint64_t)a1, (uint64_t)&v48, 5u, word_1DD02C348, 0x10u, v15, 1);
}

void C3DAuthoringEnvironmentAppendDebugString(uint64_t a1, const __CFString *a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t *v11;
  double v12;

  v8 = a1 + 1136;
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 1136);
  __createAlphabetTextureIfNeeded(a1, a1 + 1440, __statisticsFont, 0, 0);
  v9 = *(CFTypeRef *)(a1 + 1168);
  v10 = *(CFTypeRef *)(a1 + 1440);
  if (v9 != v10)
  {
    if (v9)
    {
      CFRelease(*(CFTypeRef *)(a1 + 1168));
      *(_QWORD *)(a1 + 1168) = 0;
      v10 = *(CFTypeRef *)(a1 + 1440);
    }
    if (v10)
      v10 = CFRetain(v10);
    *(_QWORD *)(a1 + 1168) = v10;
  }
  if (a3)
    v11 = a3;
  else
    v11 = (uint64_t *)C3DAuthoringEnvironmentColorWhite;
  v12 = a4;
  __appendText_(a1, &v12, v11, a2, v8, a1 + 1440, 1, 1);
}

void __createAlphabetTextureIfNeeded(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t RenderContext;
  double v11;
  uint64_t RendererContextGL;
  float ContentScaleFactor;
  int v14;
  void *v15;
  const __CTFont *v16;
  uint64_t Length;
  unint64_t v18;
  uint64_t v19;
  const CGGlyph *v20;
  _BOOL8 GlyphsForCharacters;
  CGSize *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  double width;
  double v27;
  double v28;
  CGFloat Descent;
  double Ascent;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  int v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;
  size_t v43;
  size_t v44;
  CGColorSpace *v45;
  CGContextRef v46;
  CGContext *v47;
  CGColorSpace *v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  CGImage *Image;
  NSObject *v53;
  __int128 v54;
  double v55[3];
  uint64_t v56;
  CGFloat components[2];
  __int128 v58;
  uint64_t v59;
  CFRange v60;
  CGRect BoundingBox;
  CGRect v62;

  v59 = *MEMORY[0x1E0C80C00];
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 8));
  v11 = -[SCNMTLRenderContext contentScaleFactor](RenderContext);
  RendererContextGL = C3DEngineContextGetRendererContextGL(*(_QWORD *)(a1 + 8));
  if (RendererContextGL)
    ContentScaleFactor = C3DRendererContextGetContentScaleFactor(RendererContextGL);
  else
    ContentScaleFactor = v11;
  v14 = ContentScaleFactor > 1.0;
  if (*(_QWORD *)a2)
  {
    if (*(unsigned __int8 *)(a2 + 24) == v14)
      return;
    CFRelease(*(CFTypeRef *)a2);
    *(_QWORD *)a2 = 0;
  }
  v56 = 0;
  v54 = *MEMORY[0x1E0C9D820];
  *(_OWORD *)v55 = v54;
  if (a4)
  {
    v15 = *(void **)(a2 + 64);
    if (v15)
      free(v15);
    (*(void (**)(uint64_t, uint64_t *, double *, uint64_t))(a4 + 16))(a4, &v56, v55, a2 + 64);
    if (!v56)
    {
      *(_QWORD *)(a2 + 64) = 0;
      *(_OWORD *)v55 = v54;
    }
  }
  v16 = (const __CTFont *)a3();
  MEMORY[0x1E0C80A78](Length);
  v18 = (2 * Length + 15) & 0xFFFFFFFFFFFFFFF0;
  v60.location = 0;
  v60.length = Length;
    v60,
    (UniChar *)((char *)&v55[-2] - v18));
  MEMORY[0x1E0C80A78](v19);
  v20 = (const CGGlyph *)((char *)&v55[-2] - v18);
  GlyphsForCharacters = CTFontGetGlyphsForCharacters(v16, (const UniChar *)((char *)&v55[-2] - v18), (CGGlyph *)((char *)&v55[-2] - v18), Length);
  MEMORY[0x1E0C80A78](GlyphsForCharacters);
  v22 = (CGSize *)&v55[-2 * Length - 2];
  CTFontGetAdvancesForGlyphs(v16, kCTFontOrientationHorizontal, (const CGGlyph *)((char *)&v55[-2] - v18), v22, Length);
  *(_QWORD *)(a2 + 48) = malloc_type_realloc(*(void **)(a2 + 48), 8 * Length, 0x100004000313F17uLL);
  *(_WORD *)(a2 + 40) = 0;
  BoundingBox = CTFontGetBoundingBox(v16);
  *(_WORD *)(a2 + 56) = vcvtpd_s64_f64(BoundingBox.size.height);
  if (Length >= 1)
  {
    v23 = *(_QWORD **)(a2 + 48);
    LOWORD(v24) = *(_WORD *)(a2 + 40);
    v25 = Length;
    do
    {
      *v23++ = *(_QWORD *)&v22->width;
      width = v22->width;
      ++v22;
      v27 = ceil(width);
      if (v27 <= (double)(__int16)v24)
        v27 = (double)(__int16)v24;
      v24 = (int)v27;
      --v25;
    }
    while (v25);
    *(_WORD *)(a2 + 40) = v24;
  }
  v28 = ContentScaleFactor;
  Descent = CTFontGetDescent(v16);
  Ascent = CTFontGetAscent(v16);
  v31 = Ascent + CTFontGetDescent(v16);
  *(double *)(a2 + 32) = v31 + CTFontGetLeading(v16);
  MEMORY[0x1E0C80A78](v32);
  v33 = *(__int16 *)(a2 + 40);
  if (Length >= 1)
  {
    v34 = 0;
    v35 = &v55[-2 * Length - 1];
    v36 = Length;
    do
    {
      *(v35 - 1) = (double)v34;
      *v35 = Descent;
      v35 += 2;
      v34 += v33;
      --v36;
    }
    while (v36);
  }
  v37 = *(__int16 *)(a2 + 56);
  v38 = ceil(v55[0]) + (double)(int)v33 + (double)(Length * v33);
  v39 = ceil(v55[1]);
  if (v39 <= (double)v37)
    v40 = (double)v37;
  else
    v40 = v39;
  *(double *)(a2 + 8) = v38;
  *(double *)(a2 + 16) = v40;
  *(_BYTE *)(a2 + 24) = v14;
  v41 = v38 * v28;
  v42 = v40 * v28;
  v43 = vcvtms_u32_f32(v41);
  v44 = vcvtd_n_u64_f64(floorf(v41), 2uLL);
  v45 = (CGColorSpace *)C3DColorSpaceLinearSRGB();
  v46 = CGBitmapContextCreate(0, v43, vcvtms_u32_f32(v42), 8uLL, v44, v45, 0x4001u);
  if (v46)
  {
    v47 = v46;
    v48 = (CGColorSpace *)C3DColorSpaceLinearSRGB();
    CGContextSetFillColorSpace(v47, v48);
    *(_OWORD *)components = xmmword_1DD02C368;
    v58 = unk_1DD02C378;
    CGContextSetFillColor(v47, components);
    CGContextTranslateCTM(v47, 0.0, floorf(v42));
    CGContextScaleCTM(v47, ContentScaleFactor, (float)-ContentScaleFactor);
    CTFontDrawGlyphs(v16, v20, (const CGPoint *)&v55[-2 * Length - 2], Length, v47);
    v62.size.width = (double)*(__int16 *)(a2 + 40);
    v62.origin.x = v38 - v62.size.width;
    v62.size.height = (double)*(__int16 *)(a2 + 56);
    v62.origin.y = 0.0;
    CGContextFillRect(v47, v62);
    if (a5)
    {
      v49 = v56;
      if (v56)
      {
        v50 = Length * *(__int16 *)(a2 + 40);
        if (v56 >= 1)
        {
          v51 = *(float **)(a2 + 64);
          do
          {
            *v51 = *v51 + (float)v50;
            v51 += 4;
            --v49;
          }
          while (v49);
        }
        CGContextTranslateCTM(v47, (double)v50, 0.0);
        UIGraphicsPushContext(v47);
        (*(void (**)(uint64_t, double, double))(a5 + 16))(a5, v38, v40);
        UIGraphicsPopContext();
      }
    }
    Image = CGBitmapContextCreateImage(v47);
    *(_QWORD *)a2 = C3DImageCreateWithCGImage(Image);
    CFRelease(Image);
    CFRelease(v47);
  }
  else
  {
    v53 = scn_default_log();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      __createAlphabetTextureIfNeeded_cold_1();
  }
}

uint64_t __statisticsFont()
{
  if (C3DSceneSourceGetSceneCount())
    return objc_msgSend(MEMORY[0x1E0CEA5E8], "monospacedSystemFontOfSize:weight:", 11.0, *MEMORY[0x1E0CEB5F0]);
  else
    return objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:", CFSTR("Menlo"), 12.0);
}

void __appendStatInfo(uint64_t a1, uint64_t *a2, const __CFString *a3, float64x2_t a4, float64_t a5, float a6)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float32x2_t v14;
  const __CFString *v15;
  float32x2_t v16;
  float32x2_t v17;
  __int128 v18;
  float32x2_t v19;

  a4.f64[1] = a5;
  v16 = vcvt_f32_f64(vaddq_f64(a4, (float64x2_t)xmmword_1DD02C100));
  C3DSceneSourcePerformConsistencyCheck(a1);
  v18 = xmmword_1DD02C1B0;
  __appendRect2D(a1, *a2, a2[1], (float *)&v18, a1 + 72, 1, v10, v11, v12, v13);
  v19 = v16;
  __appendText_(a1, &v19, (uint64_t *)C3DAuthoringEnvironmentColorWhite, a3, a1 + 72, a1 + 1440, 1, 1);
  if (a6 > 0.000001)
  {
    v14.i32[1] = v16.i32[1];
    v14.f32[0] = v16.f32[0] + 90.0;
    v17 = v14;
    v15 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%2.1fms"), (float)(a6 * 1000.0));
    v19 = v17;
    __appendText_(a1, &v19, (uint64_t *)C3DAuthoringEnvironmentColorWhite, v15, a1 + 72, a1 + 1440, 1, 1);
  }
}

void C3DAuthoringEnvironmentDrawStats(uint64_t a1)
{
  uint64_t RenderContext;
  uint64_t RendererContextGL;
  float ContentScaleFactor;
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef v8;
  CFTypeRef v9;
  const void *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float64x2_t v24;
  double v25;
  float v26;
  float v27;
  double v28;
  float64x2_t v29;
  float v30;
  double v31;
  float v32;
  float64x2_t v33;
  float v34;
  double v35;
  float v36;
  float64x2_t v37;
  float v38;
  double v39;
  float v40;
  float64x2_t v41;
  float v42;
  float v43;
  double v44;
  float v45;
  float64x2_t v46;
  float v47;
  double v48;
  float v49;
  float64x2_t v50;
  float v51;
  double v52;
  float64x2_t v53;
  float v54;
  double v55;
  float v56;
  float64x2_t v57;
  float v58;
  double v59;
  float v60;
  float64x2_t v61;
  float v62;
  double v63;
  float v64;
  double v65;
  const __CFString *v66;
  double v67;
  __CFString *v68;
  const __CFString *v69;
  unint64_t v70;
  int8x8_t v71;
  int8x8_t v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x2_t v82;
  const __CFString *v83;
  uint64_t *v84;
  float v85;
  float v86;
  double v87;
  unsigned int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float *v97;
  float v98;
  float v99;
  float v100;
  float v101;
  double v102;
  double v103;
  double v104;
  double v105;
  float v106;
  float v107;
  double v108;
  float v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  float v115;
  float v116;
  float v117;
  double v118;
  float v119;
  float v120;
  double v121;
  float v122;
  double v123;
  float v124;
  double v125;
  double v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  double v134;
  float v135;
  double v136;
  double v137;
  float v138;
  float v139;
  double v140;
  float v141;
  float v142;
  double v143;
  float v144;
  float v145;
  unsigned int v146;
  const __CFString *v147;
  const __CFString *v148;
  uint64_t v149;
  const __CFString *v150;
  float v151;
  double v152;
  double v153;
  float v154;
  float32x2_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  double v162;
  __n128 Viewport;
  double v164;
  float32x2_t v165;
  __n128 DrawableSafeAreaInsets;
  __int128 v167;
  __int128 v168;
  _QWORD v169[5];
  _QWORD v170[5];
  _QWORD v171[6];
  _QWORD v172[2];

  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 8));
  Viewport = C3DEngineContextGetViewport((__n128 *)*(_QWORD *)(a1 + 8));
  RendererContextGL = C3DEngineContextGetRendererContextGL(*(_QWORD *)(a1 + 8));
  if (RendererContextGL)
  {
    ContentScaleFactor = C3DRendererContextGetContentScaleFactor(RendererContextGL);
    glPushGroupMarkerEXT(0, "SceneKit - Draw Statistics");
  }
  else
  {
    ContentScaleFactor = -[SCNMTLRenderContext contentScaleFactor](RenderContext);
    -[SCNMTLRenderContext pushDebugGroup:](RenderContext, (uint64_t)CFSTR("SceneKit - Draw Statistics"));
  }
  DrawableSafeAreaInsets = C3DEngineContextGetDrawableSafeAreaInsets((__n128 *)*(_QWORD *)(a1 + 8));
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 72);
  __createGLInfoIfNeeded((uint64_t *)a1, a1 + 224);
  v171[0] = 0;
  v171[1] = v171;
  v171[2] = 0x3052000000;
  v171[3] = __Block_byref_object_copy__9;
  v171[4] = __Block_byref_object_dispose__9;
  v171[5] = 0;
  v169[4] = v171;
  v170[0] = MEMORY[0x1E0C809B0];
  v170[1] = 3221225472;
  v170[2] = __C3DAuthoringEnvironmentDrawStats_block_invoke;
  v170[3] = &unk_1EA5A3C50;
  v170[4] = v171;
  v169[0] = MEMORY[0x1E0C809B0];
  v169[1] = 3221225472;
  v169[2] = __C3DAuthoringEnvironmentDrawStats_block_invoke_2;
  v169[3] = &unk_1EA5A3C78;
  __createAlphabetTextureIfNeeded(a1, a1 + 1512, __statisticsBoldFont, (uint64_t)v170, (uint64_t)v169);
  __createAlphabetTextureIfNeeded(a1, a1 + 1440, __statisticsFont, 0, 0);
  v5 = *(CFTypeRef *)(a1 + 104);
  v6 = *(CFTypeRef *)(a1 + 1440);
  if (v5 != v6)
  {
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(a1 + 104));
      *(_QWORD *)(a1 + 104) = 0;
      v6 = *(CFTypeRef *)(a1 + 1440);
    }
    if (v6)
      v6 = CFRetain(v6);
    *(_QWORD *)(a1 + 104) = v6;
  }
  v7 = *(const void **)(a1 + 112);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v8 = *(CFTypeRef *)(a1 + 256);
  v9 = *(CFTypeRef *)(a1 + 1512);
  if (v8 != v9)
  {
    if (v8)
    {
      CFRelease(*(CFTypeRef *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = 0;
      v9 = *(CFTypeRef *)(a1 + 1512);
    }
    if (v9)
      v9 = CFRetain(v9);
    *(_QWORD *)(a1 + 256) = v9;
  }
  v10 = *(const void **)(a1 + 264);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 264) = 0;
  }
  if (*(_BYTE *)(a1 + 65809))
    v11 = *(double *)(a1 + 1472) * 7.0 + 14.0;
  else
    v11 = 0.0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = objc_msgSend(*(id *)(a1 + 16), "preferredFramesPerSecond");
    if (v12)
      v13 = v12;
    else
      v13 = 60;
  }
  else
  {
    v13 = 60;
  }
  v14 = *(unsigned __int8 *)(a1 + 65809);
  v15 = DrawableSafeAreaInsets.n128_f32[1] + v11;
  v16 = Viewport.n128_f32[2] / ContentScaleFactor;
  if (*(_BYTE *)(a1 + 65809))
  {
    v168 = xmmword_1DD02C1B0;
    if (v16 < 400.0)
      v17 = 225.0;
    else
      v17 = 280.0;
    v18 = *(double *)(a1 + 65992);
    v19 = *(double *)(a1 + 66080);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v20 = objc_msgSend(*(id *)(a1 + 16), "preferredFramesPerSecond");
      if (v20)
        v13 = v20;
      else
        v13 = 60;
    }
    v21 = v18 - v19;
    if ((float)(1.0 / (float)v13) <= v21)
      v22 = v18 - v19;
    else
      v22 = 1.0 / (float)v13;
    __appendRect2D(a1, 0x3E19999A3E19999ALL, 0x3F4000003E19999ALL, (float *)&v168, a1 + 72, 1, 0.0, 0.0, v16, v15);
    v159 = v11;
    v160 = v17;
    v157 = DrawableSafeAreaInsets.n128_f32[1] + v11;
    v23 = v16;
    v155 = vadd_f32((float32x2_t)DrawableSafeAreaInsets.n128_u64[0], (float32x2_t)vdup_n_s32(0x425C0000u));
    v24 = vcvtq_f64_f32(v155);
    v167 = xmmword_1DD02C190;
    v25 = v24.f64[1];
    v26 = 0.0;
    v164 = v24.f64[0];
    __appendChartArc(a1, (float *)&v167, a1 + 72, v24.f64[0], v24.f64[1], 0.0, 6.2832);
    v27 = DrawableSafeAreaInsets.n128_f32[0] + 110.0;
    v28 = *(double *)(a1 + 66024);
    if (v28 >= 0.0)
    {
      v26 = v28 * 6.28318531 / v22 + 0.0;
      v167 = xmmword_1DD02C110;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, 0.0, v26);
      v30 = v28;
      if (v23 < 400.0)
        v30 = 0.0;
      v29.f64[0] = v27;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Animations"), v29, (float)(DrawableSafeAreaInsets.n128_f32[1] + 80.0), v30);
    }
    v31 = *(double *)(a1 + 66008);
    if (v31 >= 0.0)
    {
      v32 = v31 * 6.28318531 / v22 + v26;
      v167 = xmmword_1DD02C120;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v26, v32);
      v34 = v31;
      if (v23 < 400.0)
        v34 = 0.0;
      v33.f64[0] = v27;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Physics"), v33, (float)(DrawableSafeAreaInsets.n128_f32[1] + 60.0), v34);
    }
    else
    {
      v32 = v26;
    }
    v35 = *(double *)(a1 + 66000);
    if (v35 >= 0.0)
    {
      v36 = v35 * 6.28318531 / v22 + v32;
      v167 = xmmword_1DD02C130;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v32, v36);
      v38 = v35;
      if (v23 < 400.0)
        v38 = 0.0;
      v37.f64[0] = v27;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Constraints"), v37, (float)(DrawableSafeAreaInsets.n128_f32[1] + 40.0), v38);
    }
    else
    {
      v36 = v32;
    }
    v39 = *(double *)(a1 + 66016);
    if (v39 >= 0.0)
    {
      v40 = v39 * 6.28318531 / v22 + v36;
      v167 = xmmword_1DD02C140;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v36, v40);
      v42 = v39;
      if (v23 < 400.0)
        v42 = 0.0;
      v41.f64[0] = v27;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Particles"), v41, (float)(DrawableSafeAreaInsets.n128_f32[1] + 20.0), v42);
    }
    else
    {
      v40 = v36;
    }
    v43 = v160 + DrawableSafeAreaInsets.n128_f32[0];
    v44 = *(double *)(a1 + 66064);
    if (v44 >= 0.0)
    {
      v45 = v44 * 6.28318531 / v22 + v40;
      v167 = xmmword_1DD02C150;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v40, v45);
      v47 = v44;
      if (v23 < 400.0)
        v47 = 0.0;
      v46.f64[0] = v43;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Delegate"), v46, (float)(DrawableSafeAreaInsets.n128_f32[1] + 80.0), v47);
    }
    else
    {
      v45 = v40;
    }
    v48 = *(double *)(a1 + 66048);
    if (v48 >= 0.0)
    {
      v49 = v48 * 6.28318531 / v22 + v45;
      v167 = xmmword_1DD02C160;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v45, v49);
      v51 = v48;
      if (v23 < 400.0)
        v51 = 0.0;
      v50.f64[0] = v43;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("Rendering"), v50, (float)(DrawableSafeAreaInsets.n128_f32[1] + 60.0), v51);
    }
    else
    {
      v49 = v45;
    }
    if (C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 8)))
    {
      v52 = *(double *)(a1 + 66096);
      if (v52 >= 0.0)
      {
        v53.f64[1] = 0.00781250185;
        v167 = xmmword_1DD02C170;
        v54 = v52;
        if (v23 < 400.0)
          v54 = 0.0;
        v53.f64[0] = v43;
        __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("GPU"), v53, (float)(DrawableSafeAreaInsets.n128_f32[1] + 40.0), v54);
      }
    }
    else
    {
      v55 = *(double *)(a1 + 66072);
      if (v55 >= 0.0)
      {
        v56 = v55 * 6.28318531 / v22 + v49;
        v167 = xmmword_1DD02C170;
        __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v49, v56);
        v58 = v55;
        if (v23 < 400.0)
          v58 = 0.0;
        v57.f64[0] = v43;
        __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("GL flush"), v57, (float)(DrawableSafeAreaInsets.n128_f32[1] + 40.0), v58);
        v49 = v55 * 6.28318531 / v22 + v49;
      }
    }
    v59 = *(double *)(a1 + 66056);
    if (v59 >= 0.0)
    {
      v60 = v59 * 6.28318531 / v22 + v49;
      v167 = xmmword_1DD02C180;
      __appendChartArc(a1, (float *)&v167, a1 + 72, v164, v25, v49, v60);
      v62 = v59;
      if (v23 < 400.0)
        v62 = 0.0;
      v61.f64[0] = v43;
      __appendStatInfo(a1, (uint64_t *)&v167, CFSTR("2D"), v61, (float)(DrawableSafeAreaInsets.n128_f32[1] + 20.0), v62);
    }
    v63 = *(double *)(a1 + 65992) - fmax(*(double *)(a1 + 66080), 0.0);
    if (v63 < 0.0 || v63 >= 100.0)
    {
      v68 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("--- ms"));
      v16 = v23;
      v15 = v157;
      v11 = v159;
    }
    else
    {
      v64 = v63;
      v65 = v64;
      if (v63 >= 0.1)
        v66 = CFSTR("%2.1f s");
      else
        v66 = CFSTR("%2.1f ms");
      if (v63 >= 0.1)
        v67 = v65;
      else
        v67 = v65 * 1000.0;
      v68 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v66, *(_QWORD *)&v67);
      v16 = v23;
      v15 = v157;
      v11 = v159;
    }
    v69 = v68;
    v70 = -[__CFString length](v68, "length");
    v71 = (int8x8_t)vadd_f32(v155, (float32x2_t)0xC0C00000C1C80000);
    v72.i32[1] = v71.i32[1];
    *(float *)v72.i32 = *(float *)v71.i32 + 5.0;
    v172[0] = vbsl_s8((int8x8_t)vcgtd_u64(7uLL, v70), v72, v71);
    __appendText_(a1, v172, (uint64_t *)C3DAuthoringEnvironmentColorWhite, v69, a1 + 224, a1 + 1512, 1, 1);
    v14 = *(unsigned __int8 *)(a1 + 65809);
  }
  v73 = *(double *)(a1 + 1472) + 6.0;
  if (v14)
    v74 = v15;
  else
    v74 = 0.0;
  if (v14)
    v75 = v15;
  else
    v75 = DrawableSafeAreaInsets.n128_f32[1];
  v76 = v75 + v73;
  v168 = xmmword_1DD02C1B0;
  __appendRect2D(a1, 0, 0x3F40000000000000, (float *)&v168, a1 + 224, 1, 0.0, v74, v16, v75 + v73);
  *(_QWORD *)&v167 = 0;
  __appendText_(0, &v167, 0, CFSTR("$1$"), 0, a1 + 1512, 0, 0);
  __asm { FMOV            V1.2S, #7.0 }
  _D1.f32[1] = v11 + 3.0;
  v82 = vadd_f32((float32x2_t)DrawableSafeAreaInsets.n128_u64[0], _D1);
  v161 = *(float *)&v167;
  v165 = v82;
  if (*(_BYTE *)(a1 + 65809))
    v83 = CFSTR("$1$");
  else
    v83 = CFSTR("$0$");
  if (*(_QWORD *)(a1 + 65824))
    v84 = (uint64_t *)C3DAuthoringEnvironmentColorWhite;
  else
    v84 = (uint64_t *)&unk_1DD02C1A0;
  *(float32x2_t *)&v167 = v82;
  __appendText_(a1, &v167, v84, v83, a1 + 224, a1 + 1512, 1, 1);
  v85 = *(float *)(a1 + 65816);
  if ((float)(*(float *)(a1 + 65812) / (float)v13) <= 1.0)
    v86 = *(float *)(a1 + 65812) / (float)v13;
  else
    v86 = 1.0;
  if (v85 * 60.0 <= 1.0)
    v87 = v85 * 60.0;
  else
    v87 = 1.0;
  *(float *)&v88 = v86 * 0.33;
  v89 = C3DColor4HSB2RGB(v88 | 0x3F80000000000000, 1065353216);
  v91 = v89;
  v92 = v90;
  v152 = v87;
  v93 = ceilf(v165.f32[0] + (float)(v161 + 5.0));
  v94 = 0x3F8000003F000000;
  v95 = 0x3F0000003F000000;
  v96 = (float)(v76 - v73) + (v73 + -10.0) * 0.5;
  v97 = *(float **)(a1 + 1576);
  v98 = v97[8];
  DWORD2(v167) = 0;
  *(_QWORD *)&v167 = 0;
  v99 = v97[10];
  v100 = v97[11] / *(double *)(a1 + 1528);
  *((float *)&v167 + 3) = v100;
  v158 = v98;
  v156 = v99;
  v162 = v93;
  v153 = v86;
  if (v86 >= 0.083333)
  {
    v113 = *(double *)(a1 + 1520);
    v114 = v98 / v113;
    *(float *)&v167 = v114;
    v110 = (v98 + v99 * 0.5) / v113;
    v101 = v93;
    v111 = v89;
    v112 = v92;
  }
  else
  {
    v101 = v93 + v86 * 60.0;
    v102 = v98;
    v103 = *(double *)(a1 + 1520);
    v104 = v99;
    v105 = v98 + (float)(v86 / 0.083333) * (v99 * 0.5);
    v106 = v98 / v103;
    *(float *)&v103 = v105 / v103;
    *(float *)&v167 = v106;
    DWORD2(v167) = LODWORD(v103);
    v107 = v93;
    __appendRect2D(a1, v89, v90, (float *)&v167, a1 + 224, 1, v93, v96, v101, v96 + 10.0);
    v108 = *(double *)(a1 + 1520);
    v109 = v105 / v108;
    *(float *)&v167 = v109;
    v110 = (v102 + v104 * 0.5) / v108;
    v111 = 0x3F0000003F000000;
    v112 = 0x3F8000003F000000;
    v93 = v107;
  }
  v151 = v93;
  v115 = v93 + 5.0;
  v116 = v110;
  *((float *)&v167 + 2) = v116;
  __appendRect2D(a1, v111, v112, (float *)&v167, a1 + 224, 1, v101, v96, v115, v96 + 10.0);
  LODWORD(v167) = 1065351538;
  DWORD2(v167) = 1065353216;
  if (v86 <= 0.083333 || v86 >= 0.91667)
  {
    if (v86 >= 0.91667)
    {
      v94 = v92;
      v95 = v91;
    }
    v117 = v115;
  }
  else
  {
    v117 = v162 + v153 * 60.0 + -5.0;
    __appendRect2D(a1, v91, v92, (float *)&v167, a1 + 224, 1, v115, v96, v117, v96 + 10.0);
  }
  v118 = v162 + 60.0;
  v119 = v162 + 60.0 + -5.0;
  v154 = v119;
  __appendRect2D(a1, v95, v94, (float *)&v167, a1 + 224, 1, v117, v96, v119, v96 + 10.0);
  if (v86 <= 0.91667)
  {
    v127 = v158;
    v120 = v154;
    v128 = v156;
    v125 = *(double *)(a1 + 1520);
    v126 = (v158 + v156 * 0.5) / v125;
  }
  else
  {
    v120 = v162 + v153 * 60.0;
    v121 = *(double *)(a1 + 1520);
    v122 = (v158 + v156 * 0.5) / v121;
    v123 = v158 + ((float)(v86 + -0.91667) / 0.0833333135 + 1.0) * v156 * 0.5;
    v124 = v123 / v121;
    *(float *)&v167 = v122;
    *((float *)&v167 + 2) = v124;
    __appendRect2D(a1, v91, v92, (float *)&v167, a1 + 224, 1, v154, v96, v120, v96 + 10.0);
    v125 = *(double *)(a1 + 1520);
    v126 = v123 / v125;
    v127 = v158;
    v128 = v156;
  }
  v129 = v118;
  v130 = v126;
  v131 = (float)(v127 + v128) / v125;
  *(float *)&v167 = v130;
  *((float *)&v167 + 2) = v131;
  __appendRect2D(a1, 0x3F0000003F000000, 0x3F8000003F000000, (float *)&v167, a1 + 224, 1, v120, v96, v129, v96 + 10.0);
  v132 = v152;
  *((float *)&v167 + 3) = *((float *)&v167 + 3) * 0.25;
  if (v132 >= 0.083333)
  {
    v137 = *(double *)(a1 + 1520);
    v138 = v158 / v137;
    *(float *)&v167 = v138;
    v136 = (v158 + v156 * 0.5) / v137;
    v133 = v115;
  }
  else
  {
    v133 = v162 + v132 * 60.0;
    v134 = *(double *)(a1 + 1520);
    v135 = v158 / v134;
    *(float *)&v167 = v135;
    v136 = (v158 + (float)(v132 / 0.083333) * (v156 * 0.5)) / v134;
  }
  v139 = v136;
  *((float *)&v167 + 2) = v139;
  __appendRect2D(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v167, a1 + 224, 1, v151, v96, v133, v96 + 2.5);
  if (v132 <= 0.083333 || v132 >= 0.91667)
  {
    v140 = v162 + 60.0;
    if (v132 <= 0.91667)
      goto LABEL_130;
  }
  else
  {
    v140 = v162 + v132 * 60.0;
  }
  v141 = v140 + -5.0;
  LODWORD(v167) = 1065351538;
  DWORD2(v167) = 1065353216;
  __appendRect2D(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v167, a1 + 224, 1, v115, v96, v141, v96 + 2.5);
LABEL_130:
  if (v132 > 0.91667)
  {
    v142 = v162 + v132 * 60.0;
    v143 = *(double *)(a1 + 1520);
    v144 = (v158 + v156 * 0.5) / v143;
    v145 = (v158 + ((float)(v132 + -0.91667) / 0.0833333135 + 1.0) * v156 * 0.5) / v143;
    *(float *)&v167 = v144;
    *((float *)&v167 + 2) = v145;
    __appendRect2D(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v167, a1 + 224, 1, v154, v96, v142, v96 + 2.5);
  }
  *(float *)&v146 = v118 + 7.0;
  v147 = *(const __CFString **)(a1 + 65832);
  v172[0] = __PAIR64__(v165.u32[1], v146);
  __appendText_(a1, v172, (uint64_t *)C3DAuthoringEnvironmentColorWhite, v147, a1 + 224, a1 + 1512, 1, 1);
  v148 = *(const __CFString **)(a1 + 65840);
  v172[0] = 0;
  __appendText_(0, v172, 0, v148, 0, a1 + 1512, 0, 0);
  HIDWORD(v149) = v165.i32[1];
  *(float *)&v149 = ceilf((float)(v16 + -7.0) - *(float *)v172) - DrawableSafeAreaInsets.n128_f32[2];
  v150 = *(const __CFString **)(a1 + 65840);
  v172[0] = v149;
  __appendText_(a1, v172, (uint64_t *)C3DAuthoringEnvironmentColorWhite, v150, a1 + 224, a1 + 1512, 1, 1);
  __flush(a1, a1 + 224);
  __flush(a1, a1 + 72);
  *(_BYTE *)(a1 + 65808) = 1;
  if (RenderContext)
    -[SCNMTLRenderContext popDebugGroup](RenderContext);
  else
    glPopGroupMarkerEXT();
  _Block_object_dispose(v171, 8);
}

void sub_1DCF1044C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t __statisticsBoldFont()
{
  if (C3DSceneSourceGetSceneCount())
    return objc_msgSend(MEMORY[0x1E0CEA5E8], "monospacedSystemFontOfSize:weight:", 11.0, *MEMORY[0x1E0CEB5D0]);
  else
    return objc_msgSend(MEMORY[0x1E0CEA5E8], "fontWithName:size:", CFSTR("Menlo-Bold"), 12.0);
}

void __appendChartArc(uint64_t a1, float *a2, uint64_t a3, double a4, double a5, float a6, float a7)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  char *v16;
  __int16 *v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  int v21;
  float v22;
  float v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  int32x2_t v28;
  __float2 v34;
  float v35;
  float v36;
  float v37;
  float v38;
  unsigned int v39;
  signed int v40;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *a2;
  v13 = a2[1];
  v14 = a7 - a6;
  v15 = (int)fmax((float)(a7 - a6) / 6.28318531 * 100.0, 1.0);
  v40 = 2 * v15 + 2;
  v16 = (char *)malloc_type_malloc(20 * v40, 0x1000040A86A77D5uLL);
  v39 = 6 * v15;
  v17 = (__int16 *)malloc_type_malloc(12 * v15, 0x1000040BDFB0063uLL);
  if ((v15 & 0x80000000) == 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = ((int)(float)(v11 * 255.0) << 24) | ((int)(float)(fminf(fmaxf(v10, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(v13, 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(v12, 0.0), 1.0) * 255.0);
    v22 = v14 / (float)v15;
    v23 = 1.57079633 - a6;
    v24 = v15 + 1;
    v25 = 6 * v15;
    v26 = 6 * v24;
    v27 = (float *)(v16 + 20);
    v28 = vdup_n_s32(0x3F7FBE77u);
    __asm { FMOV            V14.2S, #1.0 }
    do
    {
      v34 = __sincosf_stret(v23 - (float)((float)v19 * v22));
      v35 = a4 + (float)(v34.__cosval * 40.0);
      v36 = a5 + (float)(v34.__sinval * 40.0);
      v37 = a4 + (float)(v34.__cosval * 30.0);
      *(v27 - 5) = v35;
      *(v27 - 4) = v36;
      *((_DWORD *)v27 - 1) = v21;
      *(_QWORD *)(v27 - 3) = _D14;
      v38 = a5 + (float)(v34.__sinval * 30.0);
      *v27 = v37;
      v27[1] = v38;
      *((_DWORD *)v27 + 4) = v21;
      *((int32x2_t *)v27 + 1) = v28;
      if (v25 != v20)
      {
        v17[v20] = v18;
        v17[(v20 + 1)] = v18 + 2;
        v17[(v20 + 2)] = v18 + 1;
        v17[(v20 + 3)] = v18 + 1;
        v17[(v20 + 4)] = v18 + 2;
        v17[(v20 + 5)] = v18 + 3;
      }
      v20 += 6;
      ++v19;
      v18 += 2;
      v27 += 10;
    }
    while (v26 != v20);
  }
  __appendVerticesAndIndices(a1, (uint64_t)v16, v40, v17, v39, a3, 1);
  free(v17);
  free(v16);
}

char *C3DAuthoringEnvironmentUpdateLightingStats(char *result, const void *a2, unsigned int a3)
{
  if (a3 <= 9)
    return (char *)memcpy(result + 65856, a2, 4 * a3);
  return result;
}

void C3DAuthoringEnvironmentUpdateStats(uint64_t a1, double *__src, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  float v16;
  float v17;
  const __CFString *StringForCount;
  const __CFString *v19;
  const __CFString *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  const __CFAllocator *v25;
  uint64_t RenderContext;
  uint64_t v27;
  CFStringRef v28;

  if (a1)
  {
    v6 = a1 + 65696;
    v7 = *(const void **)(a1 + 65848);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 152) = 0;
    }
    v8 = *(const void **)(v6 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v6 + 144) = 0;
    }
    v9 = *(const void **)(v6 + 136);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v6 + 136) = 0;
    }
    if (*((_DWORD *)__src + 4))
    {
      memcpy((void *)(a1 + 65896), __src, 0x358uLL);
      if (a3)
      {
        v10 = *(_OWORD *)(a3 + 216);
        v11 = *(_OWORD *)(a3 + 248);
        *(_OWORD *)(a1 + 66128) = *(_OWORD *)(a3 + 232);
        *(_OWORD *)(a1 + 66144) = v11;
        *(_OWORD *)(a1 + 66112) = v10;
        v12 = *(_OWORD *)(a3 + 264);
        v13 = *(_OWORD *)(a3 + 280);
        v14 = *(_OWORD *)(a3 + 296);
        *(_QWORD *)(a1 + 66208) = *(_QWORD *)(a3 + 312);
        *(_OWORD *)(a1 + 66176) = v13;
        *(_OWORD *)(a1 + 66192) = v14;
        *(_OWORD *)(a1 + 66160) = v12;
      }
      v15 = __src[41];
      v16 = 0.0;
      if (v15 != 0.0)
        v16 = 1.0 / v15;
      v17 = __src[23];
      *(float *)(v6 + 116) = v16;
      *(float *)(v6 + 120) = v17;
      StringForCount = __createStringForCount(*((unsigned int *)__src + 2));
      v19 = __createStringForCount(*((unsigned int *)__src + 1));
      v20 = __createStringForCount(*(unsigned int *)__src);
      if (*(_DWORD *)(v6 + 160))
      {
        v21 = 1;
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = v22;
          if (v22 == 8)
            break;
        }
        while (!*(_DWORD *)(a1 + 65860 + 4 * v22++));
        v21 = v23 < 8;
      }
      *(_BYTE *)v6 = *(_BYTE *)v6 & 0xFE | v21;
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      *(_QWORD *)(v6 + 144) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("$3$%@ $4$%@"), StringForCount, v19);
      CFRelease(StringForCount);
      CFRelease(v19);
      CFRelease(v20);
      RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 8));
      LODWORD(v27) = llroundf(*(float *)(v6 + 116));
      if (RenderContext)
        v28 = CFStringCreateWithFormat(v25, 0, CFSTR("%dfps"), v27);
      else
        v28 = CFStringCreateWithFormat(v25, 0, CFSTR("GL %dfps"), v27);
      *(_QWORD *)(v6 + 136) = v28;
    }
  }
}

const __CFString *__createStringForCount(unint64_t a1)
{
  double v2;
  float v3;
  float v4;
  float v5;

  if (!a1)
    return CFSTR("0");
  if (a1 <= 0x3E7)
    return CFStringCreateWithFormat(0, 0, CFSTR("%zu"), a1);
  v2 = (double)a1;
  v3 = (double)a1 / 1000.0;
  if (v3 < 1000.0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%.3gK"), v3);
  v4 = v2 / 1000000.0;
  if (v4 < 1000.0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%.3gM"), v4);
  v5 = v2 / 1000000000.0;
  return CFStringCreateWithFormat(0, 0, CFSTR("%.3gG"), v5);
}

void sub_1DCF110AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL C3DAuthoringEnvironmentHasSelectedNodes(void *a1)
{
  _BOOL8 v2;

  objc_sync_enter(a1);
  v2 = objc_msgSend((id)objc_msgSend(a1, "selectedNodes"), "count") != 0;
  objc_sync_exit(a1);
  return v2;
}

void sub_1DCF11164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t C3DAuthoringEnvironmentGetSelectedNodes(void *a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_sync_enter(a1);
  v3 = (void *)objc_msgSend(a1, "selectedNodes");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __C3DAuthoringEnvironmentGetSelectedNodes_block_invoke;
  v5[3] = &unk_1EA59E670;
  v5[4] = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v5);
  objc_sync_exit(a1);
  return v2;
}

void sub_1DCF11200(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void __destroyGLInfo(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  uint64_t RendererContextGL;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  __recycleMeshes(a1, a2);
  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v5 = *(const void **)(a2 + 40);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a2 + 40) = 0;
  }

  RendererContextGL = C3DEngineContextGetRendererContextGL(*(_QWORD *)(a1 + 8));
  if (*(_BYTE *)(a2 + 53))
  {
    v7 = RendererContextGL;
    if (RendererContextGL)
    {
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v8 = *(void **)(a2 + 136);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v15;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v15 != v11)
              objc_enumerationMutation(v8);
            v13 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
            if (C3DMeshElementGetVolatileDataPtr(v13))
              C3DRendererContextUnmapVolatileMeshElement(v7, v13);
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        }
        while (v10);
      }
    }
  }

}

void __appendText_(uint64_t a1, _QWORD *a2, uint64_t *a3, CFStringRef theString, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t Length;
  uint64_t v17;
  UniChar *v18;
  __int128 v19;
  uint64_t v20;
  UniChar *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  char v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  float64x2_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  float v38;
  int v39;
  float64x2_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  _BYTE v45[12];
  int v46;
  __int128 v47;
  _BYTE *v48;
  float32x4_t v49;
  uint64_t v50;
  CFRange v51;

  v50 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    Length = CFStringGetLength(theString);
    v48 = v45;
    MEMORY[0x1E0C80A78](Length);
    v18 = (UniChar *)&v45[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v51.location = 0;
    v51.length = Length;
    CFStringGetCharacters(theString, v51, v18);
    if (Length >= 1)
    {
      v20 = 1;
      v21 = v18;
      v22 = Length;
      do
      {
        v23 = *v21++;
        if (v23 == 10)
          ++v20;
        --v22;
      }
      while (v22);
      *(_QWORD *)&v19 = *a2;
      v46 = a7;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = *((float *)&v19 + 1) + (double)(v20 - 1) * *(double *)(a6 + 32);
      while (1)
      {
        v29 = *v18++;
        v28 = v29;
        if (v29 == 32)
        {
          *(float *)&v19 = **(double **)(a6 + 48) + *(float *)&v19;
        }
        else if ((_DWORD)v28 == 10)
        {
          *(_QWORD *)&v19 = *a2;
          v27 = v27 - *(double *)(a6 + 32);
        }
        else if ((v26 & 1) != 0)
        {
          if ((_DWORD)v28 == 36)
          {
            v30 = *(float64x2_t *)(a6 + 8);
            if ((v25 & 1) == 0)
              goto LABEL_21;
            v49 = 0uLL;
            v31 = *(_QWORD *)(a6 + 64) + 16 * v24;
            v49 = *(float32x4_t *)v31;
            v32 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v49.f32), v30));
            v33 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)v49.f32, *(float32x2_t *)&v49.u32[2])), v30));
            *(float32x2_t *)v49.f32 = v32;
            *(float32x2_t *)&v49.u32[2] = v33;
            v34 = *(float *)(v31 + 8);
            if ((a8 & 1) != 0)
            {
              v35 = *(float *)&v19 + v34;
              __appendRect2D(a1, *a3, a3[1], v49.f32, a5, v46, roundf(*(float *)&v19), roundf(v27), roundf(*(float *)&v19 + v34), roundf(v27 + *(float *)(v31 + 12)));
              *(float *)&v19 = v35;
            }
            else
            {
              *(float *)&v19 = *(float *)&v19 + v34;
            }
            v26 = 0;
          }
          else
          {
            v24 = v28 + 10 * v24 - 48;
            v26 = 1;
          }
          v25 = 1;
        }
        else
        {
          if ((_DWORD)v28 != 36)
          {
            v30 = *(float64x2_t *)(a6 + 8);
LABEL_21:
            v36 = v28 - 32;
            v37 = (float)(v36 * *(__int16 *)(a6 + 40));
            v38 = (float)*(__int16 *)(a6 + 40);
            v39 = *(__int16 *)(a6 + 56);
            v40.f64[0] = (float)(v38 + v37);
            v40.f64[1] = (double)v39;
            v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v37), v30)), vdivq_f64(v40, v30));
            v41 = *(double *)(*(_QWORD *)(a6 + 48) + 8 * v36);
            if (a8)
            {
              v42 = *a3;
              v43 = a3[1];
              v47 = v19;
              __appendRect2D(a1, v42, v43, v49.f32, a5, v46, roundf(*(float *)&v19), roundf(v27), roundf(*(float *)&v19 + v38), roundf(v27 + (float)v39));
              v19 = v47;
            }
            v26 = 0;
            v44 = v41;
            *(float *)&v19 = *(float *)&v19 + v44;
            goto LABEL_27;
          }
          v25 = 0;
          v24 = 0;
          v26 = 1;
        }
LABEL_27:
        if (!--Length)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v19 = *a2;
LABEL_30:
    *(_DWORD *)a2 = v19;
  }
}

void sub_1DCF1528C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C401455A31BLL);
  _Unwind_Resume(a1);
}

void sub_1DCF1556C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C401455A31BLL);
  _Unwind_Resume(a1);
}

void SCNCActionRotate::SCNCActionRotate(SCNCActionRotate *this, SCNCAction *a2)
{
  uint64_t v4;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v4 = &off_1EA596390;
  *(double *)(v4 + 56) = a2->var7;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v4 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v4 + 64) = a2->var8;
  *(_QWORD *)(v4 + 104) = a2->var14;
  BYTE4(this[1].var15) = C3DWasLinkedBeforeMajorOSYear2015();
  this->var4 = 1;
}

void sub_1DCF15DB8(_Unwind_Exception *a1)
{
  SCNCAction *v1;

  SCNCAction::~SCNCAction(v1);
  _Unwind_Resume(a1);
}

void SCNCActionRotate::~SCNCActionRotate(SCNCActionRotate *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

void SCNCActionRotate::cpp_updateWithTargetForTime(SCNCActionRotate *this, SCNNode *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float32x4_t v11;
  float v14;
  float v20;
  __int32 v21;
  float32x4_t v22;
  __int32 v23;
  float32x4_t v24;
  double v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  _OWORD v39[4];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  float32x4_t v48[4];
  float32x4_t v49;

  v6 = SCNCAction::cpp_ratioForTime((SCNCAction *)this, a3);
  *(float *)&_D3 = v6;
  if (LOBYTE(this[1].var15))
  {
    if (BYTE2(this[1].var15))
    {
      _Q0 = *(float32x4_t *)&this[1].var6;
      v14 = -(float)((float)(_Q0.f32[3] * *(float *)&_D3) - *(float *)&this[1].var8);
      v37 = *(float *)&_D3;
      __asm { FMLA            S2, S3, V0.S[3] }
      _Q0.f32[3] = _S2;
      v49 = _Q0;
      if (BYTE4(this[1].var15))
        v20 = _S2;
      else
        v20 = v14;
      C3DMatrix4x4MakeAxisAngleRotation(v48, &v49, v20);
      if (a2)
      {
        -[SCNNode transform](a2, "transform");
      }
      else
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
      }
      v40 = v44;
      v41 = v45;
      v42 = v46;
      v43 = v47;
      C3DMatrix4x4FromSCNMatrix4(&v44, (uint64_t)&v40);
      C3DMatrix4x4Mult3x3((uint64_t)&v44, v48, (uint64_t)&v44);
      C3DMatrix4x4ToSCNMatrix4((uint64_t)&v44, &v40);
      v39[0] = v40;
      v39[1] = v41;
      v39[2] = v42;
      v39[3] = v43;
      -[SCNNode setTransform:](a2, "setTransform:", v39);
      *(float *)&this[1].var8 = *(float *)&this[1].var8 + v49.f32[3];
    }
    else
    {
      if (BYTE1(this[1].var15))
        goto LABEL_15;
      v26 = *(float32x4_t *)&this[1].var6;
      v27 = vsubq_f32(*(float32x4_t *)&this[1].var4, v26);
      v28 = vmlaq_n_f32(v26, v27, *(float *)&_D3);
      v27.i32[0] = v28.i32[1];
      LODWORD(v8) = v28.i32[2];
      v37 = *(float *)&_D3;
      LODWORD(_D3) = v28.i32[3];
      -[SCNNode setRotation:](a2, "setRotation:", *(double *)v28.i64, *(double *)v27.i64, v8, _D3);
    }
    goto LABEL_14;
  }
  if (BYTE2(this[1].var15))
  {
    v36 = vmlaq_n_f32(vnegq_f32(*(float32x4_t *)&this[1].var2), *(float32x4_t *)&this[1].var0, *(float *)&_D3);
    v38 = v6;
    -[SCNNode eulerAngles](a2, "eulerAngles");
    v22.i32[1] = v21;
    v22.i32[2] = v23;
    v24 = vaddq_f32(v36, v22);
    LODWORD(v25) = v24.i32[2];
    -[SCNNode setEulerAngles:](a2, "setEulerAngles:", *(double *)v24.i64, COERCE_DOUBLE(__PAIR64__(v36.u32[1], v24.u32[1])), v25);
    *(float *)&_D3 = v38;
    *(float32x4_t *)&this[1].var2 = vaddq_f32(v36, *(float32x4_t *)&this[1].var2);
    goto LABEL_15;
  }
  if (!BYTE1(this[1].var15))
  {
    v37 = v6;
    if (BYTE3(this[1].var15))
    {
      v48[0] = 0uLL;
      v29 = v6;
      v30 = C3DQuaternionSlerp((float32x4_t *)&this[1].var13, (float32x4_t *)&this[1].var10, v48, v29, v7, v8, _D3, v9, v10, v11);
      LODWORD(v31) = v48[0].i32[1];
      v30.i32[0] = v48[0].i32[0];
      LODWORD(v33) = v48[0].i32[3];
      LODWORD(v32) = v48[0].i32[2];
      -[SCNNode setOrientation:](a2, "setOrientation:", *(double *)v30.i64, v31, v32, v33);
    }
    else
    {
      v34 = *(float32x4_t *)&this[1].var0;
      v35 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)&this->var19, *(float *)&_D3), v34, 1.0 - *(float *)&_D3);
      LODWORD(v7) = v35.i32[1];
      v34.i32[0] = v35.i32[2];
      -[SCNNode setEulerAngles:](a2, "setEulerAngles:", *(double *)v35.i64, v7, *(double *)v34.i64);
    }
LABEL_14:
    *(float *)&_D3 = v37;
  }
LABEL_15:
  if ((COERCE_UNSIGNED_INT(*(float *)&_D3 + -1.0) & 0x60000000) == 0)
    SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
}

__n128 SCNCActionRotate::cpp_willStartWithTargetAtTime(SCNCActionRotate *this, SCNNode *a2, double a3)
{
  __n128 result;
  unsigned __int32 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int32 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int32 v12;
  unsigned __int32 v13;

  SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  if (!LOBYTE(this[1].var15))
  {
    LODWORD(this[1].var3) = 0;
    this[1].var2 = 0;
    if (BYTE2(this[1].var15))
    {
      result = *(__n128 *)&this->var19;
    }
    else
    {
      if (BYTE3(this[1].var15))
      {
        -[SCNNode orientation](a2, "orientation");
        result.n128_u32[1] = v9;
        result.n128_u64[1] = __PAIR64__(v11, v10);
        *(__n128 *)&this[1].var13 = result;
        return result;
      }
      -[SCNNode eulerAngles](a2, "eulerAngles");
      result.n128_u32[1] = v12;
      result.n128_u32[2] = v13;
    }
    *(__n128 *)&this[1].var0 = result;
    return result;
  }
  LODWORD(this[1].var8) = 0;
  if (BYTE2(this[1].var15))
  {
    result = *(__n128 *)&this[1].var4;
  }
  else
  {
    -[SCNNode rotation](a2, "rotation");
    result.n128_u32[1] = v6;
    result.n128_u64[1] = __PAIR64__(v8, v7);
  }
  *(__n128 *)&this[1].var6 = result;
  return result;
}

uint64_t __DefineForShaderModifierStandardUniformPerNode(void *a1)
{
  if (objc_msgSend(a1, "hasPrefix:", CFSTR("scn_node.")))
    return objc_msgSend(CFSTR("USE_"), "stringByAppendingString:", objc_msgSend((id)objc_msgSend(a1, "substringFromIndex:", objc_msgSend(CFSTR("scn_node."), "length")), "uppercaseString"));
  else
    return 0;
}

const void *SCNCopyCGImageFromImage(void *a1)
{
  const void *v2;
  const void *v3;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  v2 = (const void *)objc_msgSend(a1, "CGImage");
  v3 = v2;
  if (v2)
    CFRetain(v2);
  return v3;
}

const char *C3DIOCreateCFStringFromCString(const char *cStr)
{
  if (cStr)
    return (const char *)CFStringCreateWithCString(0, cStr, 0x8000100u);
  return cStr;
}

BOOL C3DFileMayExistAtURL(const __CFURL *a1)
{
  return _IsFileAvailableAtURL(a1, 1);
}

BOOL _IsFileAvailableAtURL(const __CFURL *a1, uint64_t a2)
{
  const __CFString *v4;
  const __CFString *v5;
  stat v7;
  UInt8 buffer[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = CFURLCopyScheme(a1);
  if (!v4)
    return 0;
  v5 = v4;
  if (CFStringCompare(v4, CFSTR("file"), 0) == kCFCompareEqualTo)
  {
    CFRelease(v5);
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      memset(&v7, 0, sizeof(v7));
      if (!stat((const char *)buffer, &v7) && (v7.st_mode & 0xF000) == 0x8000)
        return access((const char *)buffer, 4) == 0;
    }
    return 0;
  }
  CFStringCompare(v5, CFSTR("http"), 0);
  CFRelease(v5);
  return a2;
}

const __CFURL *C3DIOCopyURLForInitialURL(CFURLRef url, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, char a6)
{
  const __CFURL *v11;
  const __CFURL *v12;
  CFStringRef v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex i;
  const __CFURL *ValueAtIndex;
  const __CFURL *v18;
  const __CFString *PathComponent;
  const __CFString *v20;
  const __CFURL *v21;
  NSObject *v22;
  Boolean isAbsolute;
  uint8_t buf[4];
  _DWORD v26[7];

  *(_QWORD *)&v26[5] = *MEMORY[0x1E0C80C00];
  if ((a6 & 1) == 0)
  {
    v11 = __CopyAvailableFileURLOrWithPreferredExtensions(url, a3);
    if (v11)
    {
      v12 = v11;
      if ((_checkURLPermissions(url, a4, a5) & 1) != 0)
        return v12;
      CFRelease(v12);
    }
  }
  if (a2)
  {
    isAbsolute = 0;
    v13 = CFURLCopyStrictPath(url, &isAbsolute);
    if (v13)
      CFRelease(v13);
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v15 = Count;
      for (i = 0; v15 != i; ++i)
      {
        ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a2, i);
        v18 = ValueAtIndex;
        if (isAbsolute)
        {
          PathComponent = CFURLCopyLastPathComponent(url);
          if (PathComponent)
          {
            v20 = PathComponent;
            v21 = CFStringGetLength(PathComponent) < 1 ? 0 : CFURLCreateCopyAppendingPathComponent(0, v18, v20, 0);
            CFRelease(v20);
            if (v21)
            {
LABEL_19:
              v12 = __CopyAvailableFileURLOrWithPreferredExtensions(v21, a3);
              CFRelease(v21);
              if ((_checkURLPermissions(v12, a4, a5) & 1) != 0)
                return v12;
              if (v12)
                CFRelease(v12);
              continue;
            }
          }
        }
        else
        {
          v21 = _C3DURLCreateCopyByAppendingURL(ValueAtIndex, url, 0);
          if (v21)
            goto LABEL_19;
        }
        v22 = scn_default_log();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          C3DIOCopyURLForInitialURL_cold_1(buf, v26, v22);
      }
    }
  }
  return 0;
}

const __CFURL *__CopyAvailableFileURLOrWithPreferredExtensions(CFURLRef url, const __CFArray *a2)
{
  const __CFURL *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFAllocator *v8;
  const __CFString *ValueAtIndex;
  const __CFURL *v10;

  if (a2)
  {
    v4 = CFURLCreateCopyDeletingPathExtension(0, url);
    Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v7);
        v10 = CFURLCreateCopyAppendingPathExtension(v8, v4, ValueAtIndex);
        if (_IsFileAvailableAtURL(v10, 0))
          break;
        CFRelease(v10);
        if (v6 == ++v7)
          goto LABEL_6;
      }
      CFRelease(v4);
      return v10;
    }
LABEL_6:
    CFRelease(v4);
  }
  if (_IsFileAvailableAtURL(url, 1))
    return (const __CFURL *)CFRetain(url);
  return 0;
}

uint64_t _checkURLPermissions(const __CFURL *a1, CFArrayRef theArray, const __CFArray *a3)
{
  unsigned int v6;
  unsigned int v7;

  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    v6 = __FileURLHasPrefixInArray(a1, theArray);
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    v6 = 1;
    if (!a3)
    {
LABEL_8:
      v7 = 1;
      return v6 & v7;
    }
  }
  if (CFArrayGetCount(a3) < 1)
    goto LABEL_8;
  v7 = __FileURLHasPrefixInArray(a1, a3) ^ 1;
  return v6 & v7;
}

char *__FileURLHasPrefixInArray(const __CFURL *a1, const __CFArray *a2)
{
  char *result;
  CFIndex v4;
  const __CFURL *ValueAtIndex;
  size_t v6;
  UInt8 v7[1024];
  char __s1[1024];
  UInt8 buffer[1024];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (char *)CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024);
  if ((_DWORD)result)
  {
    result = realpath_DARWIN_EXTSN((const char *)buffer, __s1);
    if (result)
    {
      if (CFArrayGetCount(a2) < 1 || CFArrayGetCount(a2) < 1)
      {
        return 0;
      }
      else
      {
        v4 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a2, v4);
          if (CFURLGetFileSystemRepresentation(ValueAtIndex, 1u, v7, 1024))
          {
            v6 = strlen((const char *)v7);
            if (!strncmp(__s1, (const char *)v7, v6))
              break;
          }
          if (++v4 >= CFArrayGetCount(a2))
            return 0;
        }
        return (char *)1;
      }
    }
  }
  return result;
}

CFURLRef _C3DURLCreateCopyByAppendingURL(const __CFURL *a1, const __CFURL *a2, Boolean a3)
{
  CFURLRef v3;
  CFStringRef PathComponent;
  const __CFString *v7;
  CFURLRef v9;
  const __CFURL *v10;

  v3 = a1;
  if (a2)
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    if (!PathComponent)
      return (CFURLRef)CFRetain(v3);
    v7 = PathComponent;
    if (CFEqual(PathComponent, CFSTR(".")) || CFEqual(v7, CFSTR("..")))
    {
      CFRelease(v7);
      return (CFURLRef)CFRetain(v3);
    }
    v9 = CFURLCreateCopyDeletingLastPathComponent(0, a2);
    v10 = (const __CFURL *)_C3DURLCreateCopyByAppendingURL(v3, v9, 1);
    v3 = CFURLCreateCopyAppendingPathComponent(0, v10, v7, a3);
    CFRelease(v10);
    CFRelease(v7);
    if (v9)
      CFRelease(v9);
  }
  else
  {
    CFRetain(a1);
  }
  return v3;
}

void C3D::DOFBlurCoCYPass::DOFBlurCoCYPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA5992A8;
  v5[14] = a4;
}

const char *C3D::DOFBlurCoCYPass::name(C3D::DOFBlurCoCYPass *this)
{
  return "DOFBlurCoCYPass";
}

uint64_t C3D::DOFBlurCoCYPass::setup(float **this)
{
  float **v1;
  uint64_t v2;
  int v3;
  C3D::PassDescriptor *v4;
  int v5;
  int v6;
  uint64_t result;

  v1 = this;
  C3D::Pass::setInputCount((C3D::Pass *)this, 1u);
  C3D::Pass::setOutputCount((C3D::Pass *)v1, 1u);
  v2 = (*((uint64_t (**)(float **))*v1 + 11))(v1);
  v3 = (int)fmax(*(float *)(v2 + 8) * 0.5 / *v1[14] * 0.25, 1.0);
  v4 = (C3D::PassDescriptor *)(v1 + 4);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 16) = v3;
  v5 = (int)fmax(*(float *)(v2 + 12) * 0.5 / *v1[14] * 0.25, 1.0);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 18) = v5;
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 28) = 115;
  v6 = (int)fmax(*(float *)(v2 + 8) * 0.5 / *v1[14] * 0.25, 1.0);
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex((C3D::PassDescriptor *)(v1 + 4), 0) + 16) = v6;
  LODWORD(v1) = (int)fmax(*(float *)(v2 + 12) * 0.5 / *v1[14] * 0.25, 1.0);
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 18) = (_WORD)v1;
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 28) = 115;
  result = C3D::PassDescriptor::outputAtIndex(v4, 0);
  *(_QWORD *)(result + 8) = "DOFCoCBlurred";
  return result;
}

void C3D::DOFBlurCoCYPass::compile(C3D::DOFBlurCoCYPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::DOFBlurCoCYPass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 15) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A248;
    *((_QWORD *)this + 15) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, (uint64_t)v7);
    v8 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("dof_coc_blurH"));
    v9 = *((_QWORD *)this + 15);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;
    if (v10)

  }
}

uint64_t C3D::DOFBlurCoCYPass::execute(C3D::Pass *this, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  unint64_t v5;
  MTLBuffer *v6;
  void **v7;
  MTLTexture *v8;
  _QWORD *v9;
  uint64_t v10;
  MTLComputePipelineState *v11;

  v3 = *a2;
  v4 = *((_QWORD *)this + 14);
  v6 = *(MTLBuffer **)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  if ((*a2)->_buffers[0] == v6)
  {
    if (v3->_offsets[0] == v5)
      goto LABEL_5;
  }
  else
  {
    v3->_buffers[0] = v6;
  }
  v3->_offsets[0] = v5;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_5:
  v7 = C3D::Pass::inputTextureAtIndex(this, 0);
  if ((void **)v3->_textures[0] != v7)
  {
    v3->_textures[0] = (MTLTexture *)v7;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v8 = (MTLTexture *)C3D::Pass::outputTextureAtIndex(this, 0);
  if (v3->_textures[1] != v8)
  {
    v3->_textures[1] = v8;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v9 = C3D::Pass::outputTextureAtIndex(this, 0);
  v10 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)this + 15) + 16);
  v11 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v10);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v9, v11);
}

void C3D::DOFBlurCoCYPassResource::~DOFBlurCoCYPassResource(C3D::DOFBlurCoCYPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A248;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A248;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

CFStringRef _C3DAvoidOccluderConstraintDelegateCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAvoidOccluderConstraintDelegate %p>"), a1);
}

CFStringRef _C3DAvoidOccluderConstraintDelegateCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DAvoidOccluderConstraintDelegate %p>"), a1);
}

_QWORD *C3DAvoidOccluderConstraintDelegateCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DAvoidOccluderConstraintDelegateCreate_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (C3DAvoidOccluderConstraintDelegateGetTypeID_onceToken != -1)
    dispatch_once(&C3DAvoidOccluderConstraintDelegateGetTypeID_onceToken, &__block_literal_global_114);
  result = (_QWORD *)C3DTypeCreateInstance_(C3DAvoidOccluderConstraintDelegateGetTypeID_typeID, 0x18uLL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t C3DAvoidOccluderConstraintDelegateShouldAvoidOccluder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t);

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DAvoidOccluderConstraintDelegateShouldAvoidOccluder_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 24);
  if (v14)
    return v14(*(_QWORD *)(a1 + 16), a2, a3);
  else
    return 1;
}

void C3DAvoidOccluderConstraintDelegateDidAvoidOccluder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, uint64_t, uint64_t);

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DAvoidOccluderConstraintDelegateShouldAvoidOccluder_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 32);
  if (v14)
    v14(*(_QWORD *)(a1 + 16), a2, a3);
}

C3D::RenderPass *C3D::CompositePass::CompositePass(C3D::RenderPass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(a1, a2, a3);
  *(_QWORD *)result = off_1EA598DC8;
  *((_QWORD *)result + 30) = a4;
  return result;
}

const char *C3D::CompositePass::name(C3D::CompositePass *this)
{
  return "CompositePass";
}

void C3D::CompositePass::setup(C3D::CompositePass *this)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int v4;
  uint64_t v5;
  C3D::CompositePass *v6;
  C3D::Pass *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;

  C3D::Pass::setInputCount(this, *(unsigned __int8 *)(*((_QWORD *)this + 30) + 10)+ *(unsigned __int8 *)(*((_QWORD *)this + 30) + 12)+ *(unsigned __int8 *)(*((_QWORD *)this + 30) + 8)+ 1);
  *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), 0) + 8) = "COLOR";
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), 0);
  *(_WORD *)(v2 + 66) |= 4u;
  *((_BYTE *)this + 248) = 0;
  v3 = (_BYTE *)*((_QWORD *)this + 30);
  v4 = 1;
  if (v3[10])
  {
    *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), 1u) + 8) = "Bloom";
    *((_BYTE *)this + 249) = 1;
    v3 = (_BYTE *)*((_QWORD *)this + 30);
    v4 = 2;
  }
  if (v3[12])
  {
    *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), v4) + 8) = "DOF-Final";
    *((_BYTE *)this + 253) = v4++;
    v3 = (_BYTE *)*((_QWORD *)this + 30);
  }
  if (v3[8])
  {
    *(_BYTE *)C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), v4) = 1;
    *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::CompositePass *)((char *)this + 32), v4) + 8) = "AverageLuminance";
    *((_BYTE *)this + 252) = v4;
  }
  C3D::Pass::setOutputCount(this, 1u);
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0) + 8) = "COLOR";
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0) + 65) = 0;
  v5 = C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0);
  *(_WORD *)(v5 + 66) &= 0xFFFCu;
  v6 = this;
  do
  {
    v7 = v6;
    v6 = (C3D::CompositePass *)*((_QWORD *)v6 + 1);
  }
  while (v6);
  C3D::Pass::parentColorDesc(v7, (uint64_t)&v10);
  v8 = C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0);
  *(_OWORD *)(v8 + 16) = v10;
  *(_DWORD *)(v8 + 32) = v11;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v10);
  if (BYTE8(v10) == 5)
  {
    *((_WORD *)this + 19) = 6;
  }
  else if (C3DEngineContextGetEyeCount(*((_QWORD *)this + 2)) >= 2)
  {
    *((_WORD *)this + 19) = C3DEngineContextGetEyeCount(*((_QWORD *)this + 2));
    *((_BYTE *)this + 120) = 1;
    v9 = C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0);
    *(_WORD *)(v9 + 66) = *(_WORD *)(v9 + 66) & 0xFFFC | 1;
  }
}

void C3D::CompositePass::compile(C3D::CompositePass *this)
{
  uint64_t RenderContext;
  void *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  C3D::RenderGraphResourceManager *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (unsigned __int8 *)*((_QWORD *)this + 30);
  v5 = v4[10] | (2 * v4[20]) | (4 * v4[16]) | (8 * v4[17]) | (16 * v4[14]) | (32 * v4[15]) | ((unint64_t)v4[13] << 6) | ((unint64_t)v4[8] << 7) | ((unint64_t)v4[9] << 8) | ((unint64_t)v4[12] << 9);
  v6 = v5 | ((unint64_t)*(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0)+ 28) << 10) | ((unint64_t)v4[18] << 26) | ((unint64_t)v4[19] << 27) | ((unint64_t)v4[22] << 28);
  v7 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::CompositePass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))));
  v8 = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  v9 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v10 = C3D::RenderGraphResourceManager::get(v9, v8);
  *((_QWORD *)this + 32) = v10;
  if (!v10)
  {
    v11 = (_QWORD *)operator new();
    *v11 = &off_1EA599F28;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = 0;
    *((_QWORD *)this + 32) = v11;
    C3D::RenderGraphResourceManager::set((uint64_t)v9, v8, (uint64_t)v11);
    v26 = 0;
    v12 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v13 = *((_QWORD *)this + 32);
    v14 = *(void **)(v13 + 24);
    *(_QWORD *)(v13 + 24) = v12;
    if (v14)

    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 10, 53, CFSTR("enableBloom"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 16, 53, CFSTR("enableVignetting"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 17, 53, CFSTR("enableColorGrading"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 14, 53, CFSTR("enableSaturation"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 15, 53, CFSTR("enableContrast"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 13, 53, CFSTR("enableColorFringe"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", (char *)&v26 + 1, 53, CFSTR("enableDebug"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 8, 53, CFSTR("enableExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 8, 53, CFSTR("enableFrameLuminanceAutoExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", &v26, 53, CFSTR("enableHistogramAutoExposure"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 12, 53, CFSTR("enableDepthOfField"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 4, 29, CFSTR("DOFSampleCount"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 20, 53, CFSTR("enableVR"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 21, 53, CFSTR("enableAR"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 18, 53, CFSTR("enableGrain"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 19, 53, CFSTR("grainIsColored"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 30) + 22, 53, CFSTR("enableWhiteBalance"));
    v15 = *((_QWORD *)this + 32);
    *((_QWORD *)&v21 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v22 = *(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex((C3D::CompositePass *)((char *)this + 32), 0)+ 28);
    *((_QWORD *)&v23 + 1) = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 32) + 24);
    *((_QWORD *)&v24 + 1) = CFSTR("scn_draw_fullscreen_triangle_VR_uv_uvNorm_vertex");
    *(_QWORD *)&v25 = CFSTR("scn_postprocess");
    v16 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v20);
    v17 = *(void **)(v15 + 16);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v15 + 16) = v18;
    }
  }
  if (*(_BYTE *)(*((_QWORD *)this + 30) + 18))
  {
    v19 = (void *)objc_msgSend((id)-[SCNMTLRenderContext commandQueue](RenderContext), "commandBuffer");
    *((_QWORD *)this + 33) = C3D::getGrainNoise256(v19, RenderContext, v9);
    objc_msgSend(v19, "commit");
  }
}

void C3D::CompositePass::execute(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t RenderContext;
  void *v6;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t ColorGradingEffectSlot;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 ViewportAtIndex;
  int32x4_t v22;
  int32x4_t v23;
  void **v24;
  void **v25;
  uint64_t v26;
  void **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x2_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int32x4_t v39;

  v4 = *(_QWORD *)a2;
  RenderContext = C3DEngineContextGetRenderContext(a1[2]);
  v6 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  PointOfView = C3DEngineContextGetPointOfView(a1[2]);
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    if (Camera)
    {
      if (*(_BYTE *)(a1[30] + 17)
        && (ColorGradingEffectSlot = C3DCameraGetColorGradingEffectSlot((uint64_t)Camera, 0)) != 0
        && (v10 = ColorGradingEffectSlot, C3DEffectSlotHasImageOrTexture(ColorGradingEffectSlot)))
      {
        v11 = (void *)objc_msgSend(v6, "renderResourceForEffectSlot:withEngineContext:didFallbackToDefaultTexture:", v10, a1[2], 0);
      }
      else
      {
        v11 = 0;
      }
      v20 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(a1[32] + 16), "state");
      if (*(_QWORD *)(v4 + 3376) != v20)
      {
        *(_QWORD *)(v4 + 3376) = v20;
        objc_msgSend(*(id *)(v4 + 3392), "setRenderPipelineState:", v20);
      }
      v39 = (int32x4_t)xmmword_1DD009440;
      if (C3DEngineContextGetEyeCount(a1[2]) >= 2)
      {
        ViewportAtIndex = C3DEngineContextGetViewportAtIndex(a1[2], *(unsigned __int16 *)(a2 + 16));
        v38 = vextq_s8((int8x16_t)ViewportAtIndex, (int8x16_t)ViewportAtIndex, 8uLL);
        v22 = *(int32x4_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
        v36 = (int32x2_t)vextq_s8(v38, v38, 8uLL).u64[0];
        *(float32x2_t *)v22.i8 = vdiv_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v38.i8, v36), (float32x2_t)vdup_laneq_s32(v22, 2));
        v37 = v22;
        v23 = *(int32x4_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 88))(a1);
        *(float32x2_t *)v23.i8 = vdiv_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v38.i8, v36), (float32x2_t)vdup_laneq_s32(v23, 3));
        v39 = vzip1q_s32(v37, v23);
      }
      SCNMTLRenderCommandEncoder::setVertexBytes((SCNMTLRenderCommandEncoder *)v4, &v39, 0x10uLL, 0);
      SCNMTLRenderCommandEncoder::setFragmentBuffer(v4, *(_QWORD *)(a1[30] + 40), *(_QWORD *)(a1[30] + 48), 0);
      SCNMTLRenderCommandEncoder::setFragmentBuffer(v4, *(_QWORD *)(a1[30] + 56), 0, 1);
      v24 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, *((unsigned __int8 *)a1 + 248));
      SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v24, 0);
      if (*(_BYTE *)(a1[30] + 10))
      {
        v25 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, *((unsigned __int8 *)a1 + 249));
        SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v25, 1uLL);
      }
      SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v11, 2uLL);
      v26 = a1[30];
      if (*(_BYTE *)(v26 + 12))
      {
        v27 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, *((unsigned __int8 *)a1 + 253));
        SCNMTLRenderCommandEncoder::setFragmentTexture(v4, v27, 5uLL);
        v26 = a1[30];
      }
      if (*(_BYTE *)(v26 + 18))
        SCNMTLRenderCommandEncoder::setFragmentTexture(v4, (void *)a1[33], 6uLL);
      SCNMTLRenderCommandEncoder::drawFullScreenTriangle((SCNMTLRenderCommandEncoder *)v4);
    }
    else if ((C3D::CompositePass::execute(C3D::RenderArgs const&)::done & 1) == 0)
    {
      C3D::CompositePass::execute(C3D::RenderArgs const&)::done = 1;
      v28 = scn_default_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        C3D::SSAORaytracePass::execute(v28, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  else if ((C3D::CompositePass::execute(C3D::RenderArgs const&)::done & 1) == 0)
  {
    C3D::CompositePass::execute(C3D::RenderArgs const&)::done = 1;
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      C3D::SSAORaytracePass::execute(v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

void C3D::CompositePassResource::~CompositePassResource(C3D::CompositePassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599F28;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599F28;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t kSCNTextureSourceCallbackCleanup(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "cleanup:", a1);
}

uint64_t kSCNTextureSourceCallbackGetMetalTexture(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v7;

  v7 = INFINITY;
  v5 = objc_msgSend(a2, "metalTextureWithEngineContext:textureSampler:nextFrameTime:status:", a1, a3, &v7, a4);
  C3DEngineContextSetNextFrameTime(a1, v7);
  return v5;
}

void kSCNTextureSourceCallbackRender(uint64_t a1, void *a2, uint64_t a3)
{
  double v4;

  v4 = INFINITY;
  objc_msgSend(a2, "renderWithEngineContext:textureSampler:nextFrameTime:", a1, a3, &v4);
  C3DEngineContextSetNextFrameTime(a1, v4);
}

uint64_t kSCNImageSourceCallbackCreateTextureProxy(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  __int128 v8[2];

  v4 = objc_msgSend(a3, "textureSource");
  if (v4)
  {
    v5 = (const void *)v4;
    v8[0] = xmmword_1EA5A3E30;
    v8[1] = *(_OWORD *)off_1EA5A3E40;
    v6 = C3DTextureProxyCreate();
    C3DTextureProxySetCallbacks(v6, v8);
    C3DTextureProxySetSource(v6, v5);
  }
  else
  {
    C3DEngineContextSetNextFrameTimeToAsap(a1);
    return 0;
  }
  return v6;
}

uint64_t _removeSKRendererLinkToSource(uint64_t a1, void *a2)
{
  uint64_t result;

  __SKSceneClass();
  result = objc_opt_class();
  if (result)
  {
    __SKSceneClass();
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) != 0)
      return objc_msgSend(a2, "setScene:", 0);
  }
  return result;
}

void _removeSourceRendererForSource(int a1, CFMutableDictionaryRef theDict, void *key)
{
  CFDictionaryRemoveValue(theDict, key);
}

uint64_t kSCNTextureSourceCallbackGetOpenGLTexture(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  double v6;

  v6 = INFINITY;
  v4 = objc_msgSend(a2, "textureWithEngineContext:textureSampler:nextFrameTime:", a1, a3, &v6);
  C3DEngineContextSetNextFrameTime(a1, v6);
  return v4;
}

NSString *OUTLINED_FUNCTION_3_7(SEL aSelector)
{
  return NSStringFromSelector(aSelector);
}

void sub_1DCF1D32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1DCF1E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  uint64_t v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  if (__p)
    operator delete(__p);
  if (a39)
    operator delete(a39);
  vmesh::DisplacedSubdivisionMesh::~DisplacedSubdivisionMesh((vmesh::DisplacedSubdivisionMesh *)&a45);
  _Block_object_dispose(&STACK[0x330], 8);
  v47 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v47;
    operator delete(v47);
  }
  v48 = *(void **)(v45 - 248);
  if (v48)
  {
    *(_QWORD *)(v45 - 240) = v48;
    operator delete(v48);
  }
  v49 = *(void **)(v45 - 224);
  if (v49)
  {
    *(_QWORD *)(v45 - 216) = v49;
    operator delete(v49);
  }
  v50 = *(void **)(v45 - 200);
  if (v50)
  {
    *(_QWORD *)(v45 - 192) = v50;
    operator delete(v50);
  }
  _Unwind_Resume(a1);
}

uint64_t newUInt32BufferFromUInt16Buffer(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::vector<int>::pointer end;
  int v9;
  int *v10;
  std::vector<int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  uint64_t v19;
  std::vector<int> v21;

  v6 = objc_msgSend(a1, "contents");
  memset(&v21, 0, sizeof(v21));
  std::vector<unsigned int>::reserve(&v21, a2);
  if (a2)
  {
    v7 = 0;
    end = v21.__end_;
    do
    {
      v9 = *(unsigned __int16 *)(v6 + 2 * v7);
      if (end >= v21.__end_cap_.__value_)
      {
        begin = v21.__begin_;
        v12 = end - v21.__begin_;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        v14 = (char *)v21.__end_cap_.__value_ - (char *)v21.__begin_;
        if (((char *)v21.__end_cap_.__value_ - (char *)v21.__begin_) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v21.__end_cap_, v15);
          begin = v21.__begin_;
          end = v21.__end_;
        }
        else
        {
          v16 = 0;
        }
        v17 = (int *)&v16[4 * v12];
        *v17 = v9;
        v10 = v17 + 1;
        while (end != begin)
        {
          v18 = *--end;
          *--v17 = v18;
        }
        v21.__begin_ = v17;
        v21.__end_ = v10;
        v21.__end_cap_.__value_ = (int *)&v16[4 * v15];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v9;
        v10 = end + 1;
      }
      v21.__end_ = v10;
      ++v7;
      end = v10;
    }
    while (v7 != a2);
  }
  else
  {
    v10 = v21.__end_;
  }
  v19 = -[SCNMTLResourceManager newBufferWithBytes:length:options:](a3, (uint64_t)v21.__begin_, (char *)v10 - (char *)v21.__begin_, objc_msgSend(a1, "resourceOptions"));
  if (v21.__begin_)
  {
    v21.__end_ = v21.__begin_;
    operator delete(v21.__begin_);
  }
  return v19;
}

void sub_1DCF1E9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t getTotalTriangleCount(__C3DMesh *a1)
{
  uint64_t v2;
  CFIndex v3;
  const void *ElementAtIndex;

  if ((uint64_t)C3DMeshGetElementsCount((uint64_t)a1) < 1)
    return 0;
  LODWORD(v2) = 0;
  v3 = 0;
  do
  {
    ElementAtIndex = C3DMeshGetElementAtIndex((uint64_t)a1, v3, 1);
    v2 = v2 + C3DMeshElementGetPrimitiveCount((uint64_t)ElementAtIndex);
    ++v3;
  }
  while (v3 < (uint64_t)C3DMeshGetElementsCount((uint64_t)a1));
  return v2;
}

char *vmesh::DisplacedSubdivisionMesh::loadBaseMeshFromVectors(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, std::vector<unsigned int> *__x)
{
  char **v8;
  char *BaseMeshFromVectors;
  std::vector<unsigned int> v11;

  v8 = (char **)(a1 + 32);
  std::vector<unsigned int>::vector(&v11, __x);
  BaseMeshFromVectors = vmesh::TriangleMesh::loadBaseMeshFromVectors(v8, a2, a3, a4, (uint64_t *)&v11);
  if (v11.__begin_)
  {
    v11.__end_ = v11.__begin_;
    operator delete(v11.__begin_);
  }
  return BaseMeshFromVectors;
}

void sub_1DCF1EEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void vmesh::DisplacedSubdivisionMesh::~DisplacedSubdivisionMesh(vmesh::DisplacedSubdivisionMesh *this)
{
  void *v2;
  void *v3;

  vmesh::StaticAdjacencyInformation<Pair>::~StaticAdjacencyInformation((uint64_t)this + 392);
  v2 = (void *)*((_QWORD *)this + 46);
  if (v2)
  {
    *((_QWORD *)this + 47) = v2;
    operator delete(v2);
  }
  vmesh::TriangleMesh::~TriangleMesh((void **)this + 25);
  vmesh::TriangleMesh::~TriangleMesh((void **)this + 4);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void vmesh::TriangleMesh::~TriangleMesh(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  v6 = this[3];
  if (v6)
  {
    this[4] = v6;
    operator delete(v6);
  }
  v7 = *this;
  if (*this)
  {
    this[1] = v7;
    operator delete(v7);
  }
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  int64_t v5;
  std::vector<unsigned int>::pointer v6;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<float>::__vallocate[abi:nn180100](this, v5 >> 2);
    v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }
  return this;
}

void sub_1DCF1F8C4(_Unwind_Exception *a1)
{
  void **v1;

  btAlignedFreeInternal(v1);
  _Unwind_Resume(a1);
}

void _C3DGlyphCFFinalize(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 56);
    if (v2)
      CFRelease(v2);
    C3DShapeFinalize(a1);
  }
}

CFStringRef _C3DGlyphCFCopyDebugDescription(uint64_t a1)
{
  CGFont *v2;
  CFStringRef v3;
  CFStringRef v4;
  const __CFAllocator *v5;
  CFStringRef v6;

  v2 = CTFontCopyGraphicsFont(*(CTFontRef *)(a1 + 56), 0);
  v3 = CGFontCopyFullName(v2);
  v4 = CGFontCopyGlyphNameForGlyph(v2, *(_WORD *)(a1 + 64));
  v5 = CFGetAllocator((CFTypeRef)a1);
  v6 = CFStringCreateWithFormat(v5, 0, CFSTR("<C3DGlyph '%@' in '%@'>"), v4, v3);
  CFRelease(v4);
  CFRelease(v3);
  CGFontRelease(v2);
  return v6;
}

uint64_t C3DGlyphCreate(const __CTFont *a1, CGGlyph a2, uint64_t a3)
{
  uint64_t Instance;
  CGPathRef PathForGlyph;
  const CGPath *v8;
  __int128 v9;
  _OWORD v11[3];
  uint64_t v12;

  if (C3DGlyphGetTypeID_onceToken != -1)
    dispatch_once(&C3DGlyphGetTypeID_onceToken, &__block_literal_global_116);
  Instance = C3DTypeCreateInstance_(C3DGlyphGetTypeID_typeID, 0x38uLL);
  PathForGlyph = CTFontCreatePathForGlyph(a1, a2, 0);
  if (*(_QWORD *)(a3 + 24))
    C3DGlyphCreate_cold_1();
  v8 = PathForGlyph;
  *(_QWORD *)(a3 + 24) = PathForGlyph;
  v9 = *(_OWORD *)(a3 + 16);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v9;
  v11[2] = *(_OWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 48);
  C3DShapeInit(Instance, (uint64_t)v11);
  CGPathRelease(v8);
  *(_QWORD *)(Instance + 56) = CFRetain(a1);
  *(_WORD *)(Instance + 64) = a2;
  return Instance;
}

uint64_t C3DCreateProgram(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4, __CFString *a5)
{
  uint64_t Program;
  _BOOL4 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  GLchar *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  GLint v24;
  GLint params;
  GLuint v26;
  GLuint v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  Program = glCreateProgram();
  ++*(_DWORD *)(a1 + 400);
  v27 = 0;
  if (a2)
  {
    v10 = _create_compile_and_attach_shader(a1, a2, &v27, 0, Program, a5);
    v11 = v10;
    v26 = 0;
    if (!a3)
    {
      if (!v10)
        goto LABEL_10;
LABEL_9:
      glLinkProgram(Program);
      goto LABEL_10;
    }
  }
  else
  {
    v26 = 0;
    if (!a3)
      goto LABEL_9;
    v11 = 1;
  }
  if (_create_compile_and_attach_shader(a1, a3, &v26, 1u, Program, a5) && (v11 & 1) != 0)
    goto LABEL_9;
LABEL_10:
  params = 0;
  glGetProgramiv(Program, 0x8B82u, &params);
  if (!params)
  {
    v24 = 0;
    glGetProgramiv(Program, 0x8B84u, &v24);
    MEMORY[0x1E0C80A78](v12);
    v14 = (char *)&v23 - ((v13 + 15) & 0x1FFFFFFF0);
    *v14 = 0;
    glGetProgramInfoLog(Program, v24, 0, v14);
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      C3DCreateProgram_cold_1((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21);
      if (!a5)
        goto LABEL_14;
    }
    else if (!a5)
    {
LABEL_14:
      glDeleteProgram(Program);
      return 0;
    }
    CFStringAppendFormat(a5, 0, CFSTR("%s\n"), v14);
    goto LABEL_14;
  }
  return Program;
}

BOOL _create_compile_and_attach_shader(uint64_t a1, const __CFString *a2, GLuint *a3, unsigned int a4, GLuint a5, __CFString *a6)
{
  _BOOL8 v8;

  v8 = _create_and_compile_shader(a1, a2, a3, a4, a6);
  if (v8)
  {
    glAttachShader(a5, *a3);
    glDeleteShader(*a3);
  }
  return v8;
}

BOOL _create_and_compile_shader(uint64_t a1, const __CFString *a2, GLuint *a3, unsigned int a4, __CFString *a5)
{
  GLuint Shader;
  UInt8 *v10;
  GLchar *v11;
  _BOOL8 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *ArrayBySeparatingStrings;
  __int128 v21;
  CFIndex v22;
  NSObject *v23;
  const void *v24;
  const void *ValueAtIndex;
  uint64_t v26;
  uint64_t v27;
  GLchar *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  GLint params;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  const void *v42;
  GLchar *string[3];

  string[2] = *(GLchar **)MEMORY[0x1E0C80C00];
  Shader = glCreateShader(*(_DWORD *)(a1 + 4 * a4 + 1152));
  *a3 = Shader;
  if (!Shader)
    return 0;
  v10 = C3DCreateCStringFromString(a2);
  if (v10)
  {
    v11 = (GLchar *)v10;
    string[1] = 0;
    C3DRendererContextGetProfile(a1);
    string[0] = v11;
    params = 0;
    glShaderSource(*a3, 1, (const GLchar *const *)string, 0);
    glCompileShader(*a3);
    glGetShaderiv(*a3, 0x8B81u, &params);
    v12 = params != 0;
    if (params)
    {
      free(v11);
      return v12;
    }
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, a2, CFSTR("\n"));
    if (CFArrayGetCount(ArrayBySeparatingStrings) >= 1)
    {
      v22 = 0;
      *(_QWORD *)&v21 = 67109378;
      v37 = v21;
      while (1)
      {
        v23 = scn_default_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          break;
        if (a5)
          goto LABEL_13;
LABEL_14:
        if (++v22 >= CFArrayGetCount(ArrayBySeparatingStrings))
          goto LABEL_18;
      }
      ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v22);
      *(_DWORD *)buf = v37;
      v40 = v22 + 1;
      v41 = 2112;
      v42 = ValueAtIndex;
      _os_log_error_impl(&dword_1DCCB8000, v23, OS_LOG_TYPE_ERROR, "Error: %3d: %@", buf, 0x12u);
      if (!a5)
        goto LABEL_14;
LABEL_13:
      v24 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v22);
      CFStringAppendFormat(a5, 0, CFSTR("%@\n"), v24);
      goto LABEL_14;
    }
LABEL_18:
    CFRelease(ArrayBySeparatingStrings);
    *(_DWORD *)buf = 0;
    glGetShaderiv(*a3, 0x8B84u, (GLint *)buf);
    MEMORY[0x1E0C80A78](v26);
    v28 = (char *)&v37 - ((v27 + 15) & 0x1FFFFFFF0);
    *v28 = 0;
    glGetShaderInfoLog(*a3, *(GLsizei *)buf, 0, v28);
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      _create_and_compile_shader_cold_2((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35);
      if (!a5)
        goto LABEL_21;
    }
    else if (!a5)
    {
LABEL_21:
      glDeleteShader(*a3);
      *a3 = 0;
      free(v11);
      return v12;
    }
    CFStringAppendFormat(a5, 0, CFSTR("%s\n"), v28);
    goto LABEL_21;
  }
  v13 = scn_default_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    _create_and_compile_shader_cold_1((uint64_t)a2, v13, v14, v15, v16, v17, v18, v19);
  glDeleteShader(*a3);
  v12 = 0;
  *a3 = 0;
  return v12;
}

CFMutableDictionaryRef C3DTextFrameRebuildSharedGlyphs(uint64_t a1)
{
  const void *v2;
  CFMutableDictionaryRef result;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

const void *C3DTextFrameGetCachedGlyph(uint64_t a1, unsigned int a2, void *key, uint64_t a4)
{
  void *Value;
  const void *v9;
  __int128 v10;
  _OWORD v12[3];
  uint64_t v13;

  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
    CFRelease(Value);
  }
  v9 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
  if (!v9)
  {
    v10 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v10;
    v12[2] = *(_OWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a4 + 48);
    v9 = (const void *)C3DGlyphCreate((const __CTFont *)key, a2, (uint64_t)v12);
    CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v9);
    CFRelease(v9);
  }
  return v9;
}

void _C3DTextFrameCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    CFRelease(*(CFTypeRef *)(a1 + 24));
  }
}

CFStringRef _C3DTextFrameCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextFrame>"));
}

CFStringRef _C3DTextFrameCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextFrame>"));
}

uint64_t C3DTextFrameCreate(const void *a1, uint64_t a2)
{
  uint64_t Instance;
  CFTypeRef v5;
  const __CFArray *Lines;
  CFIndex v7;
  const void *ValueAtIndex;
  __int128 v9;
  __CFDictionary *v10;
  _OWORD v12[3];
  uint64_t v13;

  if (C3DTextFrameGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextFrameGetTypeID_onceToken, &__block_literal_global_117);
  Instance = C3DTypeCreateInstance_(C3DTextFrameGetTypeID_typeID, 0x18uLL);
  *(_QWORD *)(Instance + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v5 = CFRetain(a1);
    *(_QWORD *)(Instance + 16) = v5;
    if (v5)
    {
      C3DTextFrameRebuildSharedGlyphs(Instance);
      Lines = CTFrameGetLines((CTFrameRef)a1);
      if (CFArrayGetCount(Lines) >= 1)
      {
        v7 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Lines, v7);
          v9 = *(_OWORD *)(a2 + 16);
          v12[0] = *(_OWORD *)a2;
          v12[1] = v9;
          v12[2] = *(_OWORD *)(a2 + 32);
          v13 = *(_QWORD *)(a2 + 48);
          v10 = C3DTextLineCreateWithTextFrame(ValueAtIndex, (uint64_t)v12, Instance);
          CFArrayAppendValue(*(CFMutableArrayRef *)(Instance + 24), v10);
          CFRelease(v10);
          ++v7;
        }
        while (v7 < CFArrayGetCount(Lines));
      }
    }
  }
  else
  {
    *(_QWORD *)(Instance + 16) = 0;
  }
  return Instance;
}

void C3D::HDRAverageLuminancePass::HDRAverageLuminancePass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA59A268;
  v5[15] = a4;
}

const char *C3D::HDRAverageLuminancePass::name(C3D::HDRAverageLuminancePass *this)
{
  return "HDRAverageLuminancePass";
}

uint64_t C3D::HDRAverageLuminancePass::setup(C3D::HDRAverageLuminancePass *this)
{
  C3D::PassDescriptor *v2;
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)(*((_QWORD *)this + 15) + 9))
  {
    C3D::Pass::setInputCount(this, 1u);
    *(_QWORD *)(C3D::PassDescriptor::inputAtIndex((C3D::HDRAverageLuminancePass *)((char *)this + 32), 0) + 8) = "FrameLuminance";
  }
  C3D::Pass::setOutputCount(this, 1u);
  v2 = (C3D::HDRAverageLuminancePass *)((char *)this + 32);
  *(_QWORD *)(C3D::PassDescriptor::outputAtIndex(v2, 0) + 8) = "AverageLuminance";
  v3 = C3D::PassDescriptor::outputAtIndex(v2, 0);
  *(_WORD *)(v3 + 66) |= 0x100u;
  *(_BYTE *)(C3D::PassDescriptor::outputAtIndex(v2, 0) + 24) = 0;
  *(_WORD *)(C3D::PassDescriptor::outputAtIndex(v2, 0) + 16) = 240;
  result = C3D::PassDescriptor::outputAtIndex(v2, 0);
  *(_WORD *)(result + 28) = 25;
  return result;
}

void C3D::HDRAverageLuminancePass::compile(C3D::HDRAverageLuminancePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  C3D::PassResource *v26;
  uint64_t v27;
  uint64_t v28;
  C3D::RefCountedResource *PersistentResource;
  _DWORD v30[2];
  _QWORD v31[3];
  __int128 v32;
  uint64_t v33;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::HDRAverageLuminancePass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 14) = v6;
  if (!v6)
  {
    v7 = operator new();
    *(_QWORD *)v7 = &off_1EA59A568;
    *(_QWORD *)(v7 + 8) = 0;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_QWORD *)(v7 + 48) = 0;
    *((_QWORD *)this + 14) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, v7);
    v8 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("fixed_lum"));
    v9 = *((_QWORD *)this + 14);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;
    if (v10)

    v11 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("sliding_lum"));
    v12 = *((_QWORD *)this + 14);
    v13 = *(void **)(v12 + 24);
    *(_QWORD *)(v12 + 24) = v11;
    if (v13)

    v14 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("adaptative_lum"));
    v15 = *((_QWORD *)this + 14);
    v16 = *(void **)(v15 + 32);
    *(_QWORD *)(v15 + 32) = v14;
    if (v16)

    v17 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    objc_msgSend(v17, "setTextureType:", 0);
    objc_msgSend(v17, "setWidth:", 240);
    objc_msgSend(v17, "setPixelFormat:", 25);
    objc_msgSend(v17, "setUsage:", 7);
    objc_msgSend(v17, "setStorageMode:", 0);
    v18 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newTextureWithDescriptor:", v17);
    v19 = *((_QWORD *)this + 14);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;
    if (v20)

    v21 = malloc_type_calloc(0xF0uLL, 2uLL, 0x1000040BDFB0063uLL);
    v22 = (void *)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 40);
    memset(v31, 0, sizeof(v31));
    v32 = xmmword_1DD02C440;
    v33 = 1;
    objc_msgSend(v22, "replaceRegion:mipmapLevel:withBytes:bytesPerRow:", v31, 0, v21, 480);
    free(v21);
    v30[0] = 1065353216;
    v30[1] = *(_DWORD *)(*((_QWORD *)this + 15) + 64);
    v23 = objc_msgSend((id)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator]((uint64_t)v3), "newBufferWithBytes:length:options:", v30, 8, 0);
    v24 = *((_QWORD *)this + 14);
    v25 = *(void **)(v24 + 48);
    *(_QWORD *)(v24 + 48) = v23;
    if (v25)

  }
  v26 = (C3D::PassResource *)C3D::Pass::resource(this);
  v27 = *((_QWORD *)this + 3);
  v28 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 40);
  PersistentResource = (C3D::RefCountedResource *)C3D::RenderGraph::createPersistentResource(v27, v28);
  C3D::PassResource::setOutputAtIndex(v26, PersistentResource, 0);
}

uint64_t C3D::HDRAverageLuminancePass::execute(C3D::Pass *a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  MTLBuffer *v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  MTLComputePipelineState *v12;
  uint64_t v13;
  uint64_t v14;
  MTLComputePipelineState *v15;

  v3 = *a2;
  v4 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 14) + 48);
  v5 = *((_QWORD *)a1 + 15);
  *(_QWORD *)(v5 + 56) = v4;
  v6 = *(unsigned __int8 *)(v5 + 9);
  v8 = *(MTLBuffer **)(v5 + 40);
  v7 = *(_QWORD *)(v5 + 48);
  if (!v6)
  {
    if (v3->_buffers[0] == v8)
    {
      if (v3->_offsets[0] == v7)
        goto LABEL_19;
    }
    else
    {
      v3->_buffers[0] = v8;
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 15) + 56);
    }
    v3->_offsets[0] = v7;
    v3->_buffersToBind[0] |= 1uLL;
LABEL_19:
    if (v3->_buffers[1] == (MTLBuffer *)v4)
    {
      if (!v3->_offsets[1])
      {
LABEL_23:
        v13 = *((_QWORD *)a1 + 14) + 16;
        goto LABEL_24;
      }
    }
    else
    {
      v3->_buffers[1] = (MTLBuffer *)v4;
    }
    v3->_offsets[1] = 0;
    v3->_buffersToBind[0] |= 2uLL;
    goto LABEL_23;
  }
  if (v3->_buffers[0] == v8)
  {
    if (v3->_offsets[0] == v7)
      goto LABEL_8;
  }
  else
  {
    v3->_buffers[0] = v8;
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 15) + 56);
  }
  v3->_offsets[0] = v7;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_8:
  if (v3->_buffers[1] != (MTLBuffer *)v4)
  {
    v3->_buffers[1] = (MTLBuffer *)v4;
LABEL_11:
    v3->_offsets[1] = 0;
    v3->_buffersToBind[0] |= 2uLL;
    goto LABEL_12;
  }
  if (v3->_offsets[1])
    goto LABEL_11;
LABEL_12:
  v9 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)a1 + 14) + 40);
  if (v3->_textures[0] != (MTLTexture *)v9)
  {
    v3->_textures[0] = (MTLTexture *)v9;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v10 = C3D::Pass::inputTextureAtIndex(a1, 0);
  if ((void **)v3->_textures[1] != v10)
  {
    v3->_textures[1] = (MTLTexture *)v10;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v11 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)a1 + 14) + 24);
  v12 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v11);
  SCNMTLComputeCommandEncoder::dispatchOne(v3, v12);
  v13 = *((_QWORD *)a1 + 14) + 32;
LABEL_24:
  v14 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(v13);
  v15 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v14);
  return SCNMTLComputeCommandEncoder::dispatchOne(v3, v15);
}

void C3D::HDRAverageLuminancePassResource::~HDRAverageLuminancePassResource(C3D::HDRAverageLuminancePassResource *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1EA59A568;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)

  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)

}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1EA59A568;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)

  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)

  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)

  JUMPOUT(0x1DF0D41C0);
}

void C3D::SSAOBlurPass::SSAOBlurPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4, char a5)
{
  uint64_t v7;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *(_QWORD *)v7 = off_1EA598CC8;
  *(_BYTE *)(v7 + 108) = a5;
  *(_QWORD *)(v7 + 120) = a4;
}

const char *C3D::SSAOBlurPass::name(C3D::SSAOBlurPass *this)
{
  if (*((_BYTE *)this + 108))
    return "SSAOBlurPass-Y";
  else
    return "SSAOBlurPass-X";
}

uint64_t C3D::SSAOBlurPass::setup(C3D::SSAOBlurPass *this)
{
  C3D::PassDescriptor *v2;
  unint64_t v3;
  C3D::PassDescriptor *v4;
  unint64_t v5;
  uint64_t v6;
  C3D::PassDescriptor *v7;
  C3D::PassDescriptor *v8;
  uint64_t result;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSAOBlurPass *)((char *)this + 32), 0) + 28) = 115;
  v2 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 15));
  v3 = (unint64_t)*(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v2, 0) + 16)
     / *(_QWORD *)(*((_QWORD *)this + 15) + 16);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSAOBlurPass *)((char *)this + 32), 0) + 16) = v3;
  v4 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 15));
  v5 = (unint64_t)*(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v4, 0) + 18)
     / *(_QWORD *)(*((_QWORD *)this + 15) + 16);
  *(_WORD *)(C3D::PassDescriptor::inputAtIndex((C3D::SSAOBlurPass *)((char *)this + 32), 0) + 18) = v5;
  v6 = C3D::PassDescriptor::outputAtIndex((C3D::SSAOBlurPass *)((char *)this + 32), 0);
  *(_WORD *)(v6 + 28) = 115;
  v7 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 15));
  *(_WORD *)(v6 + 16) = (unint64_t)*(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v7, 0) + 16)
                      / *(_QWORD *)(*((_QWORD *)this + 15) + 16);
  v8 = (C3D::PassDescriptor *)C3D::Pass::descriptor(**((C3D::Pass ***)this + 15));
  *(_WORD *)(v6 + 18) = (unint64_t)*(unsigned __int16 *)(C3D::PassDescriptor::outputAtIndex(v8, 0) + 18)
                      / *(_QWORD *)(*((_QWORD *)this + 15) + 16);
  if (*(_BYTE *)(v6 + 24) == 5)
    result = 6;
  else
    result = C3DEngineContextGetEyeCount(*((_QWORD *)this + 2));
  *((_WORD *)this + 19) = result;
  return result;
}

void C3D::SSAOBlurPass::compile(C3D::SSAOBlurPass *this)
{
  uint64_t RenderContext;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  C3D::RenderGraphResourceManager *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 15) + 24) | (2 * *(unsigned __int8 *)(*((_QWORD *)this + 15) + 25)) | (4 * *(_QWORD *)(*((_QWORD *)this + 15) + 16)) | (*(_QWORD *)(*((_QWORD *)this + 15) + 8) << 6) | ((unint64_t)*((unsigned __int8 *)this + 108) << 10);
  v5 = 0xC6A4A7935BD1E995
     * ((*(uint64_t (**)(C3D::SSAOBlurPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))));
  v6 = (0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v5 ^ (v5 >> 47))) >> 47);
  v7 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v8 = C3D::RenderGraphResourceManager::get(v7, v6);
  *((_QWORD *)this + 14) = v8;
  if (!v8)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1EA599D38;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    *((_QWORD *)this + 14) = v9;
    C3D::RenderGraphResourceManager::set((uint64_t)v7, v6, (uint64_t)v9);
    v10 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v11 = *((_QWORD *)this + 14);
    v12 = *(void **)(v11 + 24);
    *(_QWORD *)(v11 + 24) = v10;
    if (v12)

    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 8, 29, CFSTR("SSAOSampleCount"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 16, 29, CFSTR("SSAODownSample"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 24, 53, CFSTR("SSAOCameraOrtho"));
    objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24), "setConstantValue:type:withName:", *((_QWORD *)this + 15) + 25, 53, CFSTR("SSAOVRRendering"));
    v13 = *((unsigned __int8 *)this + 108);
    v14 = C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*((_QWORD *)this + 14) + 24);
    if (v13)
      v15 = CFSTR("scn_ssao_blur_y");
    else
      v15 = CFSTR("scn_ssao_blur_x");
    v16 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:constantValues:", v15, v14);
    v17 = *((_QWORD *)this + 14);
    v18 = *(void **)(v17 + 16);
    *(_QWORD *)(v17 + 16) = v16;
    if (v18)

  }
}

void C3D::SSAOBlurPass::execute(uint64_t a1, uint64_t a2)
{
  SCNMTLComputeCommandEncoder *v4;
  float32x4_t *PointOfView;
  const __CFDictionary *Camera;
  uint64_t v7;
  float SuperSamplingFactor;
  int32x2_t v9;
  int8x16_t v10;
  float v11;
  float v12;
  NSUInteger v13;
  NSUInteger v14;
  void **v15;
  MTLTexture *v16;
  uint64_t v17;
  MTLComputePipelineState *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 ViewportAtIndex;
  float32x4_t v36;
  MTLSize v37;
  MTLSize v38;
  _BYTE v39[16];
  int8x16_t v40;
  int v41;
  float v42;
  float v43;
  float v44;

  v4 = *(SCNMTLComputeCommandEncoder **)a2;
  PointOfView = C3DEngineContextGetPointOfView(*(_QWORD *)(a1 + 16));
  if (PointOfView)
  {
    Camera = C3DNodeGetCamera((uint64_t)PointOfView);
    if (Camera)
    {
      v7 = (uint64_t)Camera;
      ViewportAtIndex = C3DEngineContextGetViewportAtIndex(*(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a2 + 8));
      SuperSamplingFactor = C3DEngineContextGetSuperSamplingFactor(*(_QWORD *)(a1 + 16));
      v9.i32[1] = ViewportAtIndex.n128_i32[1];
      *(float *)v9.i32 = (float)*(unint64_t *)(*(_QWORD *)(a1 + 120) + 16);
      v36 = vdivq_f32(vmulq_n_f32((float32x4_t)ViewportAtIndex, SuperSamplingFactor), (float32x4_t)vdupq_lane_s32(v9, 0));
      v43 = fmaxf(C3DCameraGetScreenSpaceAmbientOcclusionDepthThreshold(v7), 0.0);
      v44 = fmaxf(C3DCameraGetScreenSpaceAmbientOcclusionNormalThreshold(v7), 0.0);
      v42 = fmaxf(C3DCameraGetScreenSpaceAmbientOcclusionBias(v7), 0.0);
      v41 = 1140457472;
      v10 = (int8x16_t)v36;
      v10.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v36.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL));
      v40 = v10;
      if (*(_BYTE *)(a1 + 108))
        v11 = (float)((float)(v36.f32[3] + 256.0) + -1.0) * 0.0039062;
      else
        v11 = v36.f32[3];
      if (*(_BYTE *)(a1 + 108))
        v12 = v36.f32[2];
      else
        v12 = (float)((float)(v36.f32[2] + 256.0) + -1.0) * 0.0039062;
      if (*(_BYTE *)(a1 + 108))
        v13 = 1;
      else
        v13 = 256;
      if (*(_BYTE *)(a1 + 108))
        v14 = 256;
      else
        v14 = 1;
      v15 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
      if ((void **)v4->_textures[0] != v15)
      {
        v4->_textures[0] = (MTLTexture *)v15;
        v4->_texturesToBind[0] |= 1uLL;
      }
      v16 = (MTLTexture *)C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
      if (v4->_textures[1] != v16)
      {
        v4->_textures[1] = v16;
        v4->_texturesToBind[0] |= 2uLL;
      }
      SCNMTLComputeCommandEncoder::setBytes(v4, v39, 0x40uLL, 0);
      v17 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*(_QWORD *)(a1 + 112) + 16);
      v18 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v17);
      v38.width = (unint64_t)v12;
      v38.height = (unint64_t)v11;
      v38.depth = 1;
      v37.width = v13;
      v37.height = v14;
      v37.depth = 1;
      SCNMTLComputeCommandEncoder::dispatch(v4, v18, &v38, &v37);
    }
    else if ((C3D::SSAOBlurPass::execute(C3D::ComputeArgs const&)::done & 1) == 0)
    {
      C3D::SSAOBlurPass::execute(C3D::ComputeArgs const&)::done = 1;
      v27 = scn_default_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        C3D::SSAORaytracePass::execute(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  else if ((C3D::SSAOBlurPass::execute(C3D::ComputeArgs const&)::done & 1) == 0)
  {
    C3D::SSAOBlurPass::execute(C3D::ComputeArgs const&)::done = 1;
    v19 = scn_default_log();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      C3D::SSAORaytracePass::execute(v19, v20, v21, v22, v23, v24, v25, v26);
  }
}

void C3D::SSAOBlurPassResource::~SSAOBlurPassResource(C3D::SSAOBlurPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599D38;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA599D38;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

CFStringRef _C3DRasterizerStatesCFCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator((CFTypeRef)a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRasterizerStates %p> ZRead:%d ZWrite:%d ZFunc:%d cull:%d fill:%d"), a1, *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

uint64_t C3DRasterizerStatesDefault()
{
  uint64_t result;
  _OWORD v1[2];

  result = kDefaultStates;
  if (!kDefaultStates)
  {
    v1[0] = kDefaultRasterizerStatesDesc;
    *(_OWORD *)((char *)v1 + 12) = *(__int128 *)((char *)&kDefaultRasterizerStatesDesc + 12);
    result = C3DRasterizerStatesCreate((uint64_t)v1);
    kDefaultStates = result;
  }
  return result;
}

void sub_1DCF2313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t C3DShapeBoundariesSort(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  BOOL v15;
  _QWORD v16[2];
  uint64_t (*v17)(uint64_t, uint64_t, int, int);
  void *v18;
  void *v19;
  void *v20;

  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v17 = __C3DShapeBoundariesSort_block_invoke_3;
  v18 = &unk_1EA5A4010;
  v19 = &__block_literal_global_119;
  v20 = &__block_literal_global_3_6;
  v2 = a2 - 2;
  if (a2 >= 2)
  {
    v3 = result;
    v4 = a2 - 1;
    v5 = (a2 >> 1) + 1;
    do
    {
      result = v17((uint64_t)v16, v3, v5 - 2, v4);
      --v5;
    }
    while (v5 > 1);
    if ((int)v4 >= 1)
    {
      v6 = 56 * v4;
      do
      {
        v7 = v3 + v6;
        v8 = *(_QWORD *)(v3 + 48);
        v10 = *(_OWORD *)(v3 + 16);
        v9 = *(_OWORD *)(v3 + 32);
        v11 = *(_OWORD *)v3;
        v13 = *(_OWORD *)(v3 + v6 + 16);
        v12 = *(_OWORD *)(v3 + v6 + 32);
        v14 = *(_OWORD *)(v3 + v6);
        *(_QWORD *)(v3 + 48) = *(_QWORD *)(v3 + v6 + 48);
        *(_OWORD *)(v3 + 16) = v13;
        *(_OWORD *)(v3 + 32) = v12;
        *(_OWORD *)v3 = v14;
        *(_OWORD *)v7 = v11;
        *(_OWORD *)(v7 + 16) = v10;
        *(_OWORD *)(v7 + 32) = v9;
        *(_QWORD *)(v7 + 48) = v8;
        result = v17((uint64_t)v16, v3, 0, v2);
        v6 -= 56;
        v15 = (int)v2 <= 0;
        v2 = (v2 - 1);
      }
      while (!v15);
    }
  }
  return result;
}

uint64_t C3DShapeBoundarySelfIntersects(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  unsigned int v14;
  double *v15;
  double v16;
  double v17;
  int v18;
  unint64_t v19;
  double v20;
  double v21;
  double *v23;
  double v24;

  v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2)
    return 0;
  v3 = 0;
  v4 = *a1;
  v5 = *a1 + 8;
  v6 = 2;
  while (2)
  {
    v7 = 0;
    v8 = v3;
    v9 = v6;
    v10 = (double *)(v5 + 80 * v6);
    v11 = (double *)(v4 + 80 * v3);
    v12 = *v11;
    v13 = v11[1];
    v14 = ++v3;
    if (v3 == v1)
      v14 = 0;
    v15 = (double *)(v4 + 80 * v14);
    v16 = *v15;
    v17 = v15[1];
    if (v8)
      v18 = -1;
    else
      v18 = -2;
    v19 = (v18 + v1);
    while (v9 + v7 <= v19)
    {
      v20 = *(v10 - 1);
      v21 = *v10;
      if (v16 != v20 || v17 != v21)
      {
        v23 = (double *)(v4 + 80 * (((int)v8 + (int)v7 + 3) % v1));
        v24 = v23[1];
        if (*v23 != v12 || v24 != v13)
        {
          v10 += 10;
          ++v7;
          if (!C3DSegmentIntersectsSegment(v12, v13, v16, v17, v20, v21, *v23, v24))
            continue;
        }
      }
      return 1;
    }
    result = 0;
    v6 = v9 + 1;
    if (v3 != v1)
      continue;
    break;
  }
  return result;
}

uint64_t C3DSegmentIntersectsSegment(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1) <= 0.0 != (a3 - a1) * (a8 - a2) - (a4 - a2) * (a7 - a1) > 0.0)
    return 0;
  else
    return ((a7 - a5) * (a2 - a6) - (a8 - a6) * (a1 - a5) > 0.0) ^ ((a7 - a5) * (a4 - a6)
                                                                                - (a8 - a6) * (a3 - a5) > 0.0);
}

uint64_t C3DShapeBoundaryGetOrientation(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;

  v1 = a1[12];
  if (!(_DWORD)v1)
  {
    v2 = a1[2];
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (double *)(*(_QWORD *)a1 + 8);
      v5 = 0.0;
      do
      {
        if (v2 - 1 == v3)
          v6 = 0;
        else
          v6 = v3 + 1;
        v5 = v5 + *(v4 - 1) * *(double *)(*(_QWORD *)a1 + 80 * v6 + 8) - *(double *)(*(_QWORD *)a1 + 80 * v6) * *v4;
        v4 += 10;
        ++v3;
      }
      while (v2 != v3);
      if (v5 < 0.0)
        v1 = 1;
      else
        v1 = 2;
    }
    else
    {
      v1 = 2;
    }
    a1[12] = v1;
  }
  return v1;
}

_DWORD *C3DShapeBoundaryReverse(_DWORD *result)
{
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  LODWORD(v1) = result[2];
  if ((_DWORD)v1)
  {
    v2 = (_BYTE *)(*(_QWORD *)result + 72);
    v3 = result[2];
    do
    {
      v4 = *(float64x2_t *)(v2 - 56);
      v5 = v4;
      if (*v2)
        v5 = *(float64x2_t *)(v2 - 40);
      *(float64x2_t *)(v2 - 56) = vnegq_f64(v5);
      *(float64x2_t *)(v2 - 40) = vnegq_f64(v4);
      v2 += 80;
      --v3;
    }
    while (v3);
    if (v1 >= 2)
    {
      v6 = 0;
      v7 = 0;
      v8 = -1;
      do
      {
        v9 = (__int128 *)(*(_QWORD *)result + v6);
        v19 = v9[2];
        v20 = v9[3];
        v21 = v9[4];
        v17 = *v9;
        v18 = v9[1];
        v10 = (__int128 *)(*(_QWORD *)result + 80 * (v1 + v8));
        *v9 = *v10;
        v11 = v10[4];
        v13 = v10[1];
        v12 = v10[2];
        v9[3] = v10[3];
        v9[4] = v11;
        v9[1] = v13;
        v9[2] = v12;
        v14 = (_OWORD *)(*(_QWORD *)result + 80 * (v8 + result[2]));
        v14[2] = v19;
        v14[3] = v20;
        v14[4] = v21;
        *v14 = v17;
        v14[1] = v18;
        ++v7;
        v1 = result[2];
        --v8;
        v6 += 80;
      }
      while (v7 < v1 >> 1);
    }
  }
  v15 = result[12];
  if (v15 == 1)
  {
    v16 = 2;
  }
  else
  {
    if (v15 != 2)
      return result;
    v16 = 1;
  }
  result[12] = v16;
  return result;
}

BOOL C3DIsPathSuperpathOfPath(double *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  uint64_t v9;
  double *i;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v3 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(double **)a2;
      v7 = a1[2] + -100.0;
      v8 = *a1;
      v9 = *(_QWORD *)a1 + 8;
      for (i = *(double **)a2; ; i = &v6[10 * v5])
      {
        v11 = 0;
        v12 = 0;
        v13 = *i;
        v14 = i[1];
        v15 = v7 - *i;
        v16 = (double *)v9;
        do
        {
          v17 = *(v16 - 1);
          v18 = *v16;
          if (v3 - 1 == v11)
            v19 = 0;
          else
            v19 = v11 + 1;
          v20 = (double *)(*(_QWORD *)&v8 + 80 * v19);
          v21 = v20[1];
          if ((*v20 - v17) * (v14 - v18) - (v21 - v18) * (v13 - v17) < 0.0 == (*v20 - v17) * (v14 - v18)
                                                                             - (v21 - v18) * (v7 - v17) >= 0.0)
            v12 += ((v17 - v13) * -(v14 - v14) + v15 * (v18 - v14) >= 0.0) ^ ((*v20 - v13) * -(v14 - v14)
                                                                            + v15 * (v21 - v14) >= 0.0);
          ++v11;
          v16 += 10;
        }
        while (v3 != v11);
        if ((v12 & 1) == 0)
          break;
        v4 = ++v5 >= v2;
        if (v5 == v2)
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t C3DShapeResolveSelfIntersectingBoundaries(uint64_t result, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  LODWORD(v2) = *a2;
  if (*a2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = C3DShapeBoundarySelfIntersects((uint64_t *)(v4 + 56 * v5));
      if ((_DWORD)result)
      {
        LODWORD(v2) = v2 - 1;
        if (v5 < v2)
        {
          v6 = v5;
          v7 = v4 + 56 * v5;
          do
          {
            ++v6;
            v8 = *(_OWORD *)(v7 + 72);
            *(_OWORD *)v7 = *(_OWORD *)(v7 + 56);
            *(_OWORD *)(v7 + 16) = v8;
            *(_OWORD *)(v7 + 32) = *(_OWORD *)(v7 + 88);
            *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 104);
            v7 += 56;
            v2 = (*a2 - 1);
          }
          while (v6 < v2);
        }
        *a2 = v2;
      }
      else
      {
        ++v5;
      }
    }
    while (v5 < v2);
  }
  return result;
}

void C3DShapeBuildConnectedComponents(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  NSObject *v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  _DWORD *v33;
  size_t v34;
  unsigned int i;
  _DWORD *v36;
  uint64_t *v37;
  _DWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int Orientation;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  double *v55;
  uint64_t v57;
  unint64_t v58;
  __int128 *v59;
  double v60;
  __int128 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t **v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  size_t v75;
  _QWORD *v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  void **v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int *v94;
  _OWORD v95[3];
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *v100;
  unsigned int v101;
  uint8_t buf[4];
  _QWORD v103[3];

  v2 = a2;
  *(_QWORD *)((char *)&v103[1] + 4) = *MEMORY[0x1E0C80C00];
  v101 = 0;
  v4 = (void **)C3DShapeBoundaryMakeWithCGPath(*(const CGPath **)(a2 + 24), &v101, *(float *)(a2 + 4), *(float *)(a2 + 20));
  C3DShapeResolveSelfIntersectingBoundaries((uint64_t)v4, &v101);
  v5 = v101;
  if (v101)
  {
    v6 = 0;
    do
    {
      if (LODWORD(v4[7 * v6 + 1]) > 1)
      {
        ++v6;
      }
      else
      {
        free(v4[7 * v6]);
        v7 = v101;
        v8 = v101 - 1;
        if (v6 < v8)
        {
          v9 = &v4[7 * v6];
          v10 = v8 - v6;
          do
          {
            v11 = *(_OWORD *)(v9 + 9);
            *(_OWORD *)v9 = *(_OWORD *)(v9 + 7);
            *((_OWORD *)v9 + 1) = v11;
            *((_OWORD *)v9 + 2) = *(_OWORD *)(v9 + 11);
            v9[6] = v9[13];
            v9 += 7;
            --v10;
          }
          while (v10);
        }
        if (v7 <= 1)
        {
          v12 = scn_default_log();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
            C3DShapeBuildConnectedComponents_cold_1(buf, v103, v12);
        }
        v4 = (void **)malloc_type_realloc(v4, 56 * --v101, 0x10200403357C6A3uLL);
        v5 = v101;
      }
    }
    while (v6 < v5);
  }
  C3DShapeBoundariesSort((uint64_t)v4, v5);
  if (!v101)
  {
    v13 = 0;
LABEL_36:
    *(_DWORD *)(a1 + 48) = 0;
    v33 = (_DWORD *)(a1 + 48);
LABEL_37:
    *(_QWORD *)(a1 + 40) = 0;
    v37 = (uint64_t *)(a1 + 40);
    goto LABEL_38;
  }
  v13 = (unsigned int *)malloc_type_calloc(v101, 0x10uLL, 0x1020040D5A9D86FuLL);
  v14 = v101;
  if (!v101)
    goto LABEL_36;
  v15 = 0;
  v16 = 2;
  do
  {
    *(_QWORD *)&v13[v16] = malloc_type_calloc(v14, 0x40uLL, 0x1020040D485E09BuLL);
    ++v15;
    v14 = v101;
    v16 += 4;
  }
  while (v15 < v101);
  if (!v101)
    goto LABEL_36;
  v17 = 0;
  v94 = v13;
  do
  {
    v100 = 0;
    v98 = 0u;
    v99 = 0u;
    v97 = 0u;
    v18 = &v4[7 * v17];
    v19 = *(_OWORD *)v18;
    v20 = *((_OWORD *)v18 + 1);
    v21 = *((_OWORD *)v18 + 2);
    v100 = v18[6];
    v98 = v20;
    v99 = v21;
    v97 = v19;
    v22 = v14 - 2;
    if ((int)(v14 - 2) < 0)
    {
LABEL_26:
      v28 = *((_QWORD *)v13 + 1);
      v29 = *v13;
      *v13 = v29 + 1;
      v30 = v28 + (v29 << 6);
      *(_OWORD *)(v30 + 8) = v97;
      *(_OWORD *)(v30 + 24) = v98;
      *(_OWORD *)(v30 + 40) = v99;
      *(_QWORD *)(v30 + 56) = v100;
    }
    else
    {
      while (1)
      {
        v23 = v13[4 * v22];
        if ((_DWORD)v23)
          break;
LABEL_24:
        v27 = v22-- <= 0;
        v13 = v94;
        if (v27)
          goto LABEL_26;
      }
      v24 = 0;
      v25 = *(_QWORD *)&v94[4 * v22 + 2];
      while (1)
      {
        v26 = *(_OWORD *)(v25 + 24);
        v95[0] = *(_OWORD *)(v25 + 8);
        v95[1] = v26;
        v95[2] = *(_OWORD *)(v25 + 40);
        v96 = *(_QWORD *)(v25 + 56);
        if (C3DIsPathSuperpathOfPath((double *)v95, (uint64_t)&v97))
          break;
        ++v24;
        v25 += 64;
        if (v24 >= v23)
          goto LABEL_24;
      }
      v13 = v94;
      v31 = (unsigned int *)((char *)v94 + (((v22 << 32) + 0x100000000) >> 28));
      v32 = *((_QWORD *)v31 + 1) + ((unint64_t)*v31 << 6);
      *(_QWORD *)v32 = v25;
      *(_OWORD *)(v32 + 8) = v97;
      *(_OWORD *)(v32 + 24) = v98;
      *(_OWORD *)(v32 + 40) = v99;
      *(_QWORD *)(v32 + 56) = v100;
      ++*v31;
    }
    ++v17;
    v14 = v101;
  }
  while (v17 < v101);
  *(_DWORD *)(a1 + 48) = 0;
  v33 = (_DWORD *)(a1 + 48);
  if (!v14)
    goto LABEL_37;
  LODWORD(v34) = 0;
  for (i = 0; i < v14; i += 2)
    v34 = v34 + v13[4 * i];
  *v33 = v34;
  if ((_DWORD)v34)
  {
    v36 = malloc_type_calloc(v34, 0x20uLL, 0x10300409C64945DuLL);
    v14 = v101;
    *(_QWORD *)(a1 + 40) = v36;
    v37 = (uint64_t *)(a1 + 40);
    if (!v14)
      goto LABEL_38;
    v38 = v36;
    v90 = v33;
    v91 = v4;
    v92 = v2;
  }
  else
  {
    v90 = (_DWORD *)(a1 + 48);
    v91 = v4;
    v92 = v2;
    v38 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v37 = (uint64_t *)(a1 + 40);
  }
  v62 = 0;
  do
  {
    v63 = v62;
    v64 = &v13[4 * v62];
    v93 = v62;
    if (*v64)
    {
      v65 = 0;
      v66 = v62 | 1;
      v67 = &v13[4 * (v62 | 1)];
      v68 = v13;
      v69 = (uint64_t **)(v67 + 2);
      v70 = &v68[4 * v63 + 2];
      do
      {
        if (v66 < v14 && (v71 = *v67, (_DWORD)v71))
        {
          v72 = 0;
          v73 = *v69;
          do
          {
            v74 = *v73;
            v73 += 8;
            if (v74 == *(_QWORD *)v70 + (v65 << 6))
              ++v72;
            --v71;
          }
          while (v71);
        }
        else
        {
          v72 = 0;
        }
        v75 = v72 + 1;
        v38[2] = v75;
        v76 = malloc_type_calloc(v75, 0x38uLL, 0x10200403357C6A3uLL);
        *(_QWORD *)v38 = v76;
        v77 = *(_QWORD *)v70 + (v65 << 6);
        v78 = *(_OWORD *)(v77 + 40);
        v79 = *(_OWORD *)(v77 + 24);
        v80 = *(_OWORD *)(v77 + 8);
        v76[6] = *(_QWORD *)(v77 + 56);
        *(_OWORD *)v76 = v80;
        *((_OWORD *)v76 + 1) = v79;
        *((_OWORD *)v76 + 2) = v78;
        v14 = v101;
        if (v66 < v101 && *v67)
        {
          v81 = 0;
          v82 = 0;
          do
          {
            if ((*v69)[v81] == *(_QWORD *)v70 + (v65 << 6))
            {
              v83 = *(_QWORD *)v38 + 56 * v72--;
              v84 = &(*v69)[v81];
              v85 = *(_OWORD *)(v84 + 1);
              v86 = *(_OWORD *)(v84 + 3);
              v87 = *(_OWORD *)(v84 + 5);
              *(_QWORD *)(v83 + 48) = v84[7];
              *(_OWORD *)(v83 + 16) = v86;
              *(_OWORD *)(v83 + 32) = v87;
              *(_OWORD *)v83 = v85;
            }
            ++v82;
            v81 += 8;
          }
          while (v82 < *v67);
        }
        v38 += 8;
        ++v65;
      }
      while (v65 < *v64);
    }
    v13 = v94;
    v62 = v93 + 2;
  }
  while (v93 + 2 < v14);
  if (v14)
  {
    v88 = 0;
    v89 = 2;
    v4 = v91;
    v2 = v92;
    v33 = v90;
    do
    {
      free(*(void **)&v94[v89]);
      ++v88;
      v89 += 4;
    }
    while (v88 < v101);
  }
  else
  {
    v4 = v91;
    v2 = v92;
    v33 = v90;
  }
LABEL_38:
  free(v13);
  free(v4);
  v39 = *v33;
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = *v37;
    do
    {
      if (*(_DWORD *)(v41 + 32 * v40 + 8))
      {
        v42 = 0;
        v43 = 0;
        do
        {
          Orientation = C3DShapeBoundaryGetOrientation((unsigned int *)(*(_QWORD *)(v41 + 32 * v40) + v42));
          if (v43)
            v45 = 2;
          else
            v45 = 1;
          if (Orientation != v45)
            C3DShapeBoundaryReverse((_DWORD *)(*(_QWORD *)(*v37 + 32 * v40) + v42));
          ++v43;
          v41 = *v37;
          v42 += 56;
        }
        while (v43 < *(unsigned int *)(*v37 + 32 * v40 + 8));
        v39 = *v33;
      }
      ++v40;
    }
    while (v40 < v39);
    if (v39)
    {
      v46 = 0;
      v47 = *v37;
      do
      {
        v48 = *(unsigned int *)(v47 + 32 * v46 + 8);
        if ((_DWORD)v48)
        {
          v49 = 0;
          v50 = *(_QWORD *)(v47 + 32 * v46);
          do
          {
            v51 = *(unsigned int *)(v50 + 56 * v49 + 8);
            if ((_DWORD)v51)
            {
              v52 = (_QWORD *)(v50 + 56 * v49);
              v54 = *v52;
              v53 = (_DWORD *)v52 + 3;
              v55 = (double *)(v54 + 72);
              do
              {
                if (*(_BYTE *)v55)
                {
                  if (*(v55 - 7) == *(v55 - 5) && *(v55 - 6) == *(v55 - 4))
                  {
                    *(_BYTE *)v55 = 0;
                    --*v53;
                  }
                }
                v55 += 10;
                --v51;
              }
              while (v51);
            }
            ++v49;
          }
          while (v49 != v48);
        }
        ++v46;
      }
      while (v46 != v39);
      v57 = 0;
      v58 = 0;
      do
      {
        v59 = (__int128 *)(*v37 + v57);
        v60 = *(float *)(v2 + 12);
        v61 = v59[1];
        v97 = *v59;
        v98 = v61;
        C3DShapeConnectedComponentSkeletonize(&v97, v60);
        ++v58;
        v57 += 32;
      }
      while (v58 < *v33);
    }
  }
}

void *C3DShapeBoundaryMakeWithCGPath(const CGPath *a1, _DWORD *a2, double a3, double a4)
{
  void *v8;
  _QWORD info[5];

  *a2 = 0;
  CGPathApply(a1, a2, (CGPathApplierFunction)C3DSubpathsCounterFunc);
  v8 = malloc_type_calloc(*a2, 0x38uLL, 0x10200403357C6A3uLL);
  info[3] = 0;
  info[4] = 0;
  *(double *)info = a3;
  *(double *)&info[1] = a4;
  info[2] = v8;
  CGPathApply(a1, info, (CGPathApplierFunction)C3DDiscretizerFunc);
  return v8;
}

void C3DShapeBuildDelaunayTriangulation(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  void **v9;
  uint64_t *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _OWORD v17[2];
  unsigned int v18;

  if (*(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    while (1)
    {
      v18 = 0;
      v3 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 32 * v2);
      v4 = v3[1];
      v17[0] = *v3;
      v17[1] = v4;
      v5 = (uint64_t *)C3DShapeConnectedComponentTriangulate((uint64_t)v17, &v18);
      v6 = v5;
      if (v18)
        break;
      if (v5)
        goto LABEL_8;
LABEL_9:
      if (++v2 >= (unint64_t)*(unsigned int *)(a1 + 48))
        return;
    }
    v7 = 0;
    v8 = (unsigned int *)v3 + 6;
    v9 = (void **)(v3 + 1);
    v10 = v5 + 2;
    do
    {
      v11 = *v8 + 1;
      *v8 = v11;
      v12 = malloc_type_realloc(*v9, 4 * v11, 0x100004052888210uLL);
      *v9 = v12;
      *((_DWORD *)v12 + *v8 - 1) = *(_DWORD *)(a1 + 24);
      v13 = *(_DWORD *)(a1 + 24) + 3;
      *(_DWORD *)(a1 + 24) = v13;
      v14 = malloc_type_realloc(*(void **)(a1 + 32), 8 * v13, 0x2004093837F09uLL);
      *(_QWORD *)(a1 + 32) = v14;
      v15 = *(_DWORD *)(a1 + 24);
      v14[v15 - 3] = *(v10 - 2);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v15 - 2)) = *(v10 - 1);
      v16 = *v10;
      v10 += 7;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v15 - 1)) = v16;
      ++v7;
    }
    while (v7 < v18);
LABEL_8:
    free(v6);
    goto LABEL_9;
  }
}

void C3DAppendPointToPath(uint64_t a1, int a2, double a3, double a4, long double a5, long double a6)
{
  int v10;
  double *v11;
  unsigned int v12;
  double v13;
  double v14;
  char *v15;
  int v16;
  double *v17;
  int v18;
  char *v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  double v24;
  double *v25;
  long double *v26;
  long double v27;
  long double v28;
  double *v29;
  long double v30;
  long double v31;
  long double v32;
  long double v33;
  long double v34;
  char *v35;
  long double v36;
  long double v37;
  long double v38;
  int v39;
  int v40;
  double *v41;
  long double v42;

  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(double **)a1;
  if (!v10
    || (v12 = v10 - 1,
        v13 = hypot(v11[10 * v12] - a3, v11[10 * v12 + 1] - a4),
        v14 = hypot(*v11 - a3, v11[1] - a4),
        v13 >= 0.01)
    && v14 >= 0.01)
  {
    v15 = (char *)malloc_type_realloc(v11, 80 * (v10 + 1), 0x1000040392EC4B1uLL);
    *(_QWORD *)a1 = v15;
    v16 = *(_DWORD *)(a1 + 8);
    v17 = (double *)&v15[80 * v16];
    v17[6] = a3;
    v17[7] = a4;
    *(_OWORD *)v17 = *((_OWORD *)v17 + 3);
    *((_DWORD *)v17 + 19) = a2;
    *((_BYTE *)v17 + 72) = a2 != 3;
    v17[8] = 0.0;
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = v15;
      v20 = *(double *)(a1 + 16);
      if (a3 < v20)
        v20 = a3;
      *(double *)(a1 + 16) = v20;
      v21.f64[1] = *(float64_t *)(a1 + 32);
      v21.f64[0] = a3;
      v22.f64[0] = *(float64_t *)(a1 + 24);
      v22.f64[1] = a4;
      v23 = (int8x16_t)vcgtq_f64(v21, v22);
      v22.f64[0] = a3;
      *(int8x16_t *)(a1 + 24) = vbslq_s8(v23, (int8x16_t)v22, *(int8x16_t *)(a1 + 24));
      v24 = *(double *)(a1 + 40);
      if (a4 > v24)
        v24 = a4;
      *(double *)(a1 + 40) = v24;
      v25 = *(double **)a1;
      if (a2)
      {
        if (a2 == 1)
          C3DAppendPointToPath_cold_1();
        v26 = (long double *)&v15[80 * v16];
        v27 = hypot(a5, a6);
        v26[2] = a5 / v27;
        v26[3] = a6 / v27;
        if (a2 == 3)
          goto LABEL_19;
      }
      else
      {
        v29 = &v25[10 * (v18 - 1)];
        v30 = v29[1] - a4;
        v31 = a3 - *v29;
        v32 = hypot(v30, v31);
        v33 = v30 / v32;
        v34 = v31 / v32;
        v29[4] = v33;
        v29[5] = v34;
        v35 = &v19[80 * v16];
        *((long double *)v35 + 2) = v33;
        *((long double *)v35 + 3) = v34;
      }
      v36 = a4 - v25[1];
      v37 = *v25 - a3;
      v38 = hypot(v36, v37);
      v25[2] = v36 / v38;
      v25[3] = v37 / v38;
      *(_OWORD *)&v19[80 * v16 + 32] = *((_OWORD *)v25 + 1);
      v18 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *(double *)(a1 + 16) = a3;
      *(double *)(a1 + 24) = a3;
      *(double *)(a1 + 32) = a4;
      *(double *)(a1 + 40) = a4;
    }
LABEL_19:
    if (a2 == 3)
      v39 = 1;
    else
      v39 = 2;
    v40 = v39 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v18 + 1;
    *(_DWORD *)(a1 + 12) = v40;
    return;
  }
  if (a2 == 1)
  {
    v41 = &v11[10 * v12];
    v42 = hypot(a5, a6);
    v41[4] = a5 / v42;
    v41[5] = a6 / v42;
  }
  else if (a2 == 2)
  {
    v28 = hypot(a5, a6);
    v11[2] = a5 / v28;
    v11[3] = a6 / v28;
  }
}

void C3DAppendSegmentToPath(uint64_t a1, int a2, double a3, double a4, double a5)
{
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  _BOOL4 v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  long double v21;
  long double v22;
  unsigned int v23;
  double v24;

  v7 = *(double **)a1;
  v8 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v9 = *v8;
  v10 = v8[1];
  if (a2)
  {
    v12 = *v7;
    v11 = v7[1];
    v13 = 1;
  }
  else
  {
    v11 = a4;
    v12 = a3;
    v14 = v7[1];
    v15 = a3 == *v7;
    v13 = v11 == v14 && v15;
  }
  v16 = v11 - v10;
  v17 = hypot(v12 - v9, v11 - v10);
  if (v17 <= a5)
  {
    if ((v13 & 1) == 0)
      C3DAppendPointToPath(a1, 0, v12, v11, *MEMORY[0x1E0C9D538], *(long double *)(MEMORY[0x1E0C9D538] + 8));
  }
  else
  {
    v18 = vcvtpd_u64_f64(v17 / a5);
    v19 = v18 - v13;
    if (v19)
    {
      v20 = (v12 - v9) / (double)v18;
      v21 = *MEMORY[0x1E0C9D538];
      v22 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      v23 = 1;
      v24 = v16 / (double)v18;
      do
      {
        C3DAppendPointToPath(a1, 0, v9 + (double)v23 * v20, v10 + (double)v23 * v24, v21, v22);
        ++v23;
      }
      while (v23 <= v19);
    }
  }
}

void C3DAppendCubicBezierCurveToPath(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  unsigned int v30;
  double v31;
  double v32;
  int v33;
  BOOL v34;
  int v35;
  double v36;
  double v37;
  double v38;
  double i;
  long double v40;
  long double v41;
  double v42;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  v9 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v10 = *v9;
  v11 = v9[1];
  v12 = a2 - *v9;
  v13 = a4 - a2 - v12;
  v42 = a6 - a4;
  v14 = a6 - a4 - (a4 - a2);
  v15 = v14 - v13;
  v16 = a5 - a3 - (a3 - v11);
  v17 = a7 - a5 - (a5 - a3);
  v18 = v17 - v16;
  v19 = v17 * v17 + v14 * v14;
  if (v16 * v16 + v13 * v13 > v19)
    v19 = v16 * v16 + v13 * v13;
  v20 = v15 * 6.0;
  v21 = (v13 + v15) * 6.0;
  v22 = v15 + (v12 + v13) * 3.0;
  v23 = v18 * 6.0;
  v24 = (v16 + v18) * 6.0;
  v25 = v18 + (a3 - v11 + v16) * 3.0;
  v26 = (a6 + v10 - a2 - a4) * 3.0;
  v27 = v11 - a3;
  v28 = (a7 + v11 - a3 - a5) * 3.0;
  v29 = v19 * 9.0 * 0.0625;
  if (v29 <= a8 * a8)
  {
    v35 = 0;
    v48 = v18 * 6.0;
    v49 = v15 * 6.0;
    v46 = v18 * 6.0;
    v47 = v15 * 6.0;
  }
  else
  {
    v30 = 1;
    v31 = v18 * 6.0;
    v32 = v15 * 6.0;
    do
    {
      v20 = v20 * 0.125;
      v21 = v21 * 0.25 - v20;
      v22 = v22 * 0.5 - v21 * 0.5;
      v23 = v23 * 0.125;
      v24 = v24 * 0.25 - v23;
      v25 = v25 * 0.5 - v24 * 0.5;
      v32 = v32 * 0.25;
      v26 = v26 * 0.5 - v32 * 0.5;
      v31 = v31 * 0.25;
      v28 = v28 * 0.5 - v31 * 0.5;
      v33 = 2 * v30;
      v29 = v29 * 0.0625;
      if (v29 <= a8 * a8)
        break;
      v34 = v30 > 0x8000;
      v30 *= 2;
    }
    while (!v34);
    v46 = v31;
    v47 = v32;
    v48 = v23;
    v49 = v20;
    v35 = v33 - 1;
  }
  v50 = v12 * 3.0;
  v51 = v27 * 3.0;
  C3DAppendPointToPath(a1, 1, v10, v11, v27 * 3.0, v12 * 3.0);
  v37 = v48;
  v36 = v49;
  v38 = v46;
  for (i = v47; v35; --v35)
  {
    v10 = v22 + v10;
    v40 = v51 - v28;
    v28 = v38 + v28;
    v22 = v21 + v22;
    v21 = v36 + v21;
    v11 = v25 + v11;
    v41 = v26 + v50;
    v26 = i + v26;
    v25 = v25 + v24;
    v24 = v37 + v24;
    v50 = v41;
    v51 = v40;
    C3DAppendPointToPath(a1, 3, v10, v11, v40, v41);
    v38 = v46;
    i = v47;
    v37 = v48;
    v36 = v49;
  }
  C3DAppendPointToPath(a1, 2, a6, a7, (a5 - a7) * 3.0, v42 * 3.0);
}

void C3DAppendQuadBezierCurveToPath(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  double v19;
  double v20;
  int v21;
  BOOL v22;
  int v23;
  double v24;
  double v25;
  double i;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v38;
  double v39;

  v7 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v9 = *v7;
  v8 = v7[1];
  v10 = v8 - a3;
  v11 = ((a5 + v8 - a3 - a3) * (a5 + v8 - a3 - a3) + (a4 + *v7 - a2 - a2) * (a4 + *v7 - a2 - a2)) * 27.0 * 0.015625;
  v12 = a6 * a6;
  v13 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
  v14 = a4 - *v7;
  v15 = a5 + v8 + a3 * -2.0;
  v16 = v15 + v15;
  v17 = a5 - v8;
  if (v11 <= v12)
  {
    v23 = 0;
    v32 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    v33 = v32;
    v19 = v15 + v15;
  }
  else
  {
    v18 = 1;
    v19 = v15 + v15;
    v20 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    do
    {
      v13 = v13 * 0.25;
      v14 = v14 * 0.5 - v13 * 0.5;
      v16 = v16 * 0.25;
      v17 = v17 * 0.5 - v16 * 0.5;
      v20 = v20 * 0.5;
      v19 = v19 * 0.5;
      v11 = v11 * 0.03125;
      v21 = 2 * v18;
      if (v11 <= v12)
        break;
      v22 = v18 > 0x8000;
      v18 *= 2;
    }
    while (!v22);
    v32 = v20;
    v33 = v13;
    v23 = v21 - 1;
  }
  v24 = v10 + v10;
  v25 = a2 - v9 + a2 - v9;
  C3DAppendPointToPath(a1, 1, v9, v8, v10 + v10, v25);
  v27 = v32;
  for (i = v33; v23; --v23)
  {
    v9 = v14 + v9;
    v24 = v24 - v19;
    v8 = v17 + v8;
    v25 = v27 + v25;
    v38 = i + v14;
    v39 = v16 + v17;
    v28 = v16;
    v29 = v19;
    v30 = i;
    v31 = v27;
    C3DAppendPointToPath(a1, 3, v9, v8, v24, v25);
    v27 = v31;
    i = v30;
    v19 = v29;
    v16 = v28;
    v14 = v38;
    v17 = v39;
  }
  C3DAppendPointToPath(a1, 2, a4, a5, a3 - a5 + a3 - a5, a4 - a2 + a4 - a2);
}

_DWORD *C3DSubpathsCounterFunc(_DWORD *result, _DWORD *a2)
{
  if (!*a2)
    ++*result;
  return result;
}

void C3DDiscretizerFunc(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  double *v5;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = *(_QWORD *)(a1 + 16);
      v3 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = v3 + 1;
      v4 = v2 + 56 * v3;
      *(_QWORD *)(a1 + 24) = v4;
      C3DAppendPointToPath(v4, 0, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *MEMORY[0x1E0C9D538], *(long double *)(MEMORY[0x1E0C9D538] + 8));
      break;
    case 1:
      C3DAppendSegmentToPath(*(_QWORD *)(a1 + 24), 0, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(double *)(a1 + 8));
      break;
    case 2:
      C3DAppendQuadBezierCurveToPath(*(_QWORD *)(a1 + 24), **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(double *)(*(_QWORD *)(a2 + 8) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 24), *(double *)a1);
      break;
    case 3:
      v5 = *(double **)(a2 + 8);
      C3DAppendCubicBezierCurveToPath(*(_QWORD *)(a1 + 24), *v5, v5[1], v5[2], v5[3], v5[4], v5[5], *(double *)a1);
      break;
    case 4:
      C3DAppendSegmentToPath(*(_QWORD *)(a1 + 24), 1, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), *(double *)(a1 + 8));
      break;
    default:
      return;
  }
}

void C3DShapeBoundaryDestroy(void **a1)
{
  void *v1;

  v1 = *a1;
  if (v1)
    free(v1);
}

void C3DParticleModifier_PhysicsField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Aether;
  uint64_t v8;
  float *v9;
  float *v10;
  float ParticleMass;
  uint64_t v12;
  uint64_t CategoryBitMask;
  NSObject *v14;
  int v15;
  float *v16;
  int v17;
  __int128 v18;
  float *p_ParticleCharge;
  float32x4_t v20;
  float32x4_t v21;
  float *v22;
  int v23;
  float *v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float ParticleCharge;

  if (!a4)
    a4 = *(_QWORD *)(a1 + 1056);
  Aether = C3DPhysicsWorldGetAether(a4);
  if (Aether)
  {
    v8 = Aether;
    v20 = *(float32x4_t *)(a1 + 256);
    v9 = *(float **)(a1 + 304);
    v10 = *(float **)(a1 + 352);
    ParticleMass = C3DParticleSystemGetParticleMass(*(_QWORD *)(a1 + 1040));
    ParticleCharge = C3DParticleSystemGetParticleCharge(*(_QWORD *)(a1 + 1040));
    v31 = 1.0 / ParticleMass;
    v12 = *(_QWORD *)(a1 + 1072);
    if (v12)
      CategoryBitMask = C3DNodeGetCategoryBitMask(v12);
    else
      CategoryBitMask = -1;
    v15 = *(_DWORD *)(a1 + 1028);
    v16 = &v31;
    v17 = *(_DWORD *)(a1 + 1036);
    if (v9)
      v16 = v9;
    v18 = *(_OWORD *)(a1 + 1104);
    p_ParticleCharge = &ParticleCharge;
    if (v10)
      p_ParticleCharge = v10;
    v29 = *(_OWORD *)(a1 + 1088);
    v30 = v18;
    v21 = v20;
    v22 = v16;
    v23 = 4 * (v9 != 0);
    v24 = p_ParticleCharge;
    v25 = 4 * (v10 != 0);
    v26 = CategoryBitMask;
    v27 = v15;
    v28 = v17;
    c3dAether::evalForcesBatch(v8, &v21, a2, a3);
  }
  else if ((C3DParticleModifier_PhysicsField::done & 1) == 0)
  {
    C3DParticleModifier_PhysicsField::done = 1;
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      C3DParticleModifier_PhysicsField_cold_1(v14);
  }
}

CFMutableDictionaryRef C3DTextLineRebuildSharedGlyphs(CFMutableDictionaryRef result)
{
  CFMutableDictionaryRef v1;
  const void *v2;

  if (!*((_QWORD *)result + 2))
  {
    v1 = result;
    v2 = (const void *)*((_QWORD *)result + 4);
    if (v2)
      CFRelease(v2);
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)v1 + 4) = result;
  }
  return result;
}

const void *C3DTextLineGetCachedGlyph(uint64_t a1, unsigned int a2, void *key, __int128 *a4)
{
  uint64_t v8;
  __int128 v9;
  const void *v10;
  void *Value;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = a4[1];
    v14 = *a4;
    v15 = v9;
    v16 = a4[2];
    v17 = *((_QWORD *)a4 + 6);
    return C3DTextFrameGetCachedGlyph(v8, a2, key, (uint64_t)&v14);
  }
  else
  {
    Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
    if (!Value)
    {
      Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
      CFRelease(Value);
    }
    v10 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
    if (!v10)
    {
      v12 = a4[1];
      v14 = *a4;
      v15 = v12;
      v16 = a4[2];
      v17 = *((_QWORD *)a4 + 6);
      v10 = (const void *)C3DGlyphCreate((const __CTFont *)key, a2, (uint64_t)&v14);
      CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v10);
      CFRelease(v10);
    }
  }
  return v10;
}

CFIndex C3DTextLineBuildGlyphs(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFIndex result;
  const __CFArray *GlyphRuns;
  CFIndex v7;
  const void *v8;
  const __CTRun *ValueAtIndex;
  CFIndex GlyphCount;
  const __CFDictionary *Attributes;
  void *Value;
  void *v13;
  CFIndex i;
  __int128 v15;
  const void *CachedGlyph;
  __int128 v17[3];
  uint64_t v18;
  CGGlyph buffer;
  CFRange v20;

  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 40) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    GlyphRuns = CTLineGetGlyphRuns((CTLineRef)result);
    result = CFArrayGetCount(GlyphRuns);
    if (result >= 1)
    {
      v7 = 0;
      v8 = (const void *)*MEMORY[0x1E0CA8188];
      do
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v7);
        GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
        Attributes = CTRunGetAttributes(ValueAtIndex);
        Value = (void *)CFDictionaryGetValue(Attributes, v8);
        if (GlyphCount >= 1)
        {
          v13 = Value;
          for (i = 0; i != GlyphCount; ++i)
          {
            buffer = 0;
            v20.location = i;
            v20.length = 1;
            CTRunGetGlyphs(ValueAtIndex, v20, &buffer);
            v15 = *(_OWORD *)(a2 + 16);
            v17[0] = *(_OWORD *)a2;
            v17[1] = v15;
            v17[2] = *(_OWORD *)(a2 + 32);
            v18 = *(_QWORD *)(a2 + 48);
            CachedGlyph = C3DTextLineGetCachedGlyph(a1, buffer, v13, v17);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), CachedGlyph);
          }
        }
        ++v7;
        result = CFArrayGetCount(GlyphRuns);
      }
      while (v7 < result);
    }
  }
  return result;
}

double C3DTextLineGetAdvances(uint64_t a1, uint64_t a2, unsigned int a3, double result)
{
  const __CFArray *GlyphRuns;
  CFIndex Count;
  CFIndex v8;
  unsigned int v9;
  CFIndex i;
  const __CTRun *ValueAtIndex;
  unsigned int GlyphCount;
  unsigned int v13;
  unsigned int v14;
  CFRange v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;

  if (a1)
  {
    GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)(a1 + 24));
    Count = CFArrayGetCount(GlyphRuns);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
        GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
        v13 = GlyphCount;
        v14 = a3 - v9;
        if (a3 > v9)
        {
          if (v14 >= GlyphCount)
            v15.length = GlyphCount;
          else
            v15.length = v14;
          v15.location = 0;
          CTRunGetAdvances(ValueAtIndex, v15, (CGSize *)(a2 + 16 * v9));
        }
        v9 += v13;
      }
    }
    if (a3)
    {
      v16 = a3;
      v17 = (double *)(a2 + 8);
      result = 0.0;
      do
      {
        v18 = *(v17 - 1);
        v19 = -*v17;
        *(v17 - 1) = result;
        *v17 = v19;
        result = result + v18;
        v17 += 2;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

CFIndex C3DTextLineGetGlyphCount(CFIndex result)
{
  if (result)
    return CFArrayGetCount(*(CFArrayRef *)(result + 40));
  return result;
}

CFArrayRef *C3DTextLineGetGlyphAtIndex(CFArrayRef *result, CFIndex idx)
{
  if (result)
    return (CFArrayRef *)CFArrayGetValueAtIndex(result[5], idx);
  return result;
}

void _C3DTextLineCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[4];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[5];
    if (v4)
      CFRelease(v4);
  }
}

CFStringRef _C3DTextLineCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextLine>"));
}

CFStringRef _C3DTextLineCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DTextLine>"));
}

__CFDictionary *C3DTextLineCreateWithTextFrame(const void *a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *Instance;
  CFTypeRef v7;
  __int128 v8;
  _OWORD v10[3];
  uint64_t v11;

  if (C3DTextLineGetTypeID_onceToken != -1)
    dispatch_once(&C3DTextLineGetTypeID_onceToken, &__block_literal_global_120);
  Instance = (__CFDictionary *)C3DTypeCreateInstance_(C3DTextLineGetTypeID_typeID, 0x20uLL);
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  *((_QWORD *)Instance + 4) = 0;
  *((_QWORD *)Instance + 5) = 0;
  *((_QWORD *)Instance + 2) = a3;
  *((_QWORD *)Instance + 3) = v7;
  C3DTextLineRebuildSharedGlyphs(Instance);
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  C3DTextLineBuildGlyphs((uint64_t)Instance, (uint64_t)v10);
  return Instance;
}

void C3D::GenerateMipmapPass::GenerateMipmapPass(C3D::GenerateMipmapPass *this, C3D::RenderGraph *a2, C3D::Pass *a3, Parameters a4)
{
  unsigned __int8 var0;
  uint64_t v5;

  var0 = a4.var0;
  C3D::BlitPass::BlitPass(this, a2, a3);
  *(_QWORD *)v5 = off_1EA599A48;
  *(_BYTE *)(v5 + 108) = var0;
}

const char *C3D::GenerateMipmapPass::name(C3D::GenerateMipmapPass *this)
{
  return "GenerateMipmapPass";
}

void C3D::GenerateMipmapPass::setup(C3D::GenerateMipmapPass *this)
{
  C3D::PassDescriptor *v2;
  uint64_t v3;
  uint64_t v4;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  if (!*((_BYTE *)this + 108))
  {
    v2 = (C3D::GenerateMipmapPass *)((char *)this + 32);
    v3 = C3D::PassDescriptor::inputAtIndex(v2, 0);
    *(_WORD *)(v3 + 66) |= 4u;
    v4 = C3D::PassDescriptor::inputAtIndex(v2, 0);
    *(_WORD *)(v4 + 66) |= 0x80u;
  }
}

unint64_t C3D::GenerateMipmapPass::execute(C3D::Pass *a1, void ***a2)
{
  void **v3;
  _QWORD *v4;
  void **v5;

  v3 = *a2;
  v4 = C3D::Pass::outputTextureAtIndex(a1, 0);
  if (*((_BYTE *)a1 + 108))
  {
    v5 = C3D::Pass::inputTextureAtIndex(a1, 0);
    SCNMTLBlitCommandEncoder::copyTextureToTexture(v3, v5, v4);
  }
  return SCNMTLBlitCommandEncoder::generateMipmapsForTexture(v3, v4);
}

uint64_t _MTLPixelFormatForASTCBlockSize(int a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  result = 0;
  switch(a1)
  {
    case 4:
      v5 = 204;
      if (a3)
        v5 = 186;
      if (a2 == 4)
        return v5;
      else
        return 0;
    case 5:
      v6 = 205;
      if (a3)
        v6 = 187;
      v7 = 206;
      if (a3)
        v7 = 188;
      if (a2 != 5)
        v7 = 0;
      v8 = a2 == 4;
      goto LABEL_41;
    case 6:
      v6 = 207;
      if (a3)
        v6 = 189;
      v7 = 208;
      if (a3)
        v7 = 190;
      if (a2 != 6)
        v7 = 0;
      goto LABEL_31;
    case 8:
      v6 = 210;
      if (a3)
        v6 = 192;
      v7 = 211;
      if (a3)
        v7 = 193;
      v9 = 212;
      if (a3)
        v9 = 194;
      if (a2 != 8)
        v9 = 0;
      if (a2 != 6)
        v7 = v9;
LABEL_31:
      v8 = a2 == 5;
      goto LABEL_41;
    case 10:
      result = 0;
      switch(a2)
      {
        case 5:
          v10 = a3 == 0;
          v11 = 213;
          v12 = 195;
          goto LABEL_47;
        case 6:
          v10 = a3 == 0;
          v11 = 214;
          v12 = 196;
          goto LABEL_47;
        case 8:
          v10 = a3 == 0;
          v11 = 215;
          v12 = 197;
          goto LABEL_47;
        case 10:
          v10 = a3 == 0;
          v11 = 216;
          v12 = 198;
LABEL_47:
          if (v10)
            result = v11;
          else
            result = v12;
          break;
        default:
          return result;
      }
      return result;
    case 12:
      v6 = 217;
      if (a3)
        v6 = 199;
      v7 = 218;
      if (a3)
        v7 = 200;
      if (a2 != 12)
        v7 = 0;
      v8 = a2 == 10;
LABEL_41:
      if (v8)
        result = v6;
      else
        result = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _loadASTC(uint64_t a1)
{
  NSObject *v2;
  const __CFData *Data;
  const __CFData *v4;
  const UInt8 *BytePtr;
  const UInt8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  double v10;
  uint64_t TextureRawData;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  CFDataRef v15;
  uint64_t v16;
  uint64_t URL;

  kdebug_trace();
  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _loadKTX_cold_3(v2);
  }
  Data = (const __CFData *)C3DImageGetData(a1);
  if (Data)
  {
    v4 = Data;
    CFRetain(Data);
  }
  else
  {
    URL = C3DImageGetURL(a1);
    if (!URL || (v4 = (const __CFData *)C3DCreateDataWithContentOfURL(URL, 0)) == 0)
    {
      v16 = 0;
      goto LABEL_14;
    }
  }
  if (CFDataGetLength(v4) >= 16 && (BytePtr = CFDataGetBytePtr(v4), *(_DWORD *)BytePtr == 1554098963))
  {
    v6 = BytePtr;
    _C3DImageDeleteTextureRawDataIfNeeded(a1);
    v7 = (v6[9] << 16) | (v6[8] << 8) | v6[7];
    v8 = (v6[12] << 16) | (v6[11] << 8) | v6[10];
    v9 = (v6[15] << 16) | (v6[14] << 8) | v6[13];
    *(float *)&v10 = (float)v7;
    *((float *)&v10 + 1) = (float)v8;
    _C3DImageCreateTextureRawData(a1, 2, 0, v10);
    TextureRawData = C3DImageGetTextureRawData(a1);
    v12 = v6[4];
    *(_BYTE *)(TextureRawData + 7) = v12;
    v13 = v6[5];
    *(_BYTE *)(TextureRawData + 8) = v13;
    v14 = v6[6];
    *(_BYTE *)(TextureRawData + 9) = v14;
    *(_BYTE *)(TextureRawData + 4) = 0x80;
    *(_DWORD *)(TextureRawData + 36) = _MTLPixelFormatForASTCBlockSize(v12, v13, 0);
    v15 = CFDataCreate(0, v6 + 16, 16 * (v7 + v12 - 1) / v12 * ((v8 + v13 - 1) / v13) * ((v9 + v14 - 1) / v14));
    CFArrayAppendValue(*(CFMutableArrayRef *)(TextureRawData + 40), v15);
    CFRelease(v15);
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  CFRelease(v4);
LABEL_14:
  kdebug_trace();
  return v16;
}

void sub_1DCF25728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C406BA9478ALL);
  _Unwind_Resume(a1);
}

void sub_1DCF25914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C406BA9478ALL);
  _Unwind_Resume(a1);
}

void SCNCActionScale::SCNCActionScale(SCNCActionScale *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA595D90;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SCNCActionScale::~SCNCActionScale(SCNCActionScale *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

void SCNCActionScale::cpp_updateWithTargetForTime(SCNCActionScale *this, SCNNode *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  float v9;
  __int32 v10;
  float32x4_t v11;
  __int32 v12;
  float *p_var22;
  float32x4_t v14;
  float32x4_t v15;
  double v16;
  float v17;

  v6 = SCNCAction::cpp_ratioForTime((SCNCAction *)this, a3);
  v9 = v6;
  if (this->var25)
  {
    -[SCNNode scale](a2, "scale");
    v11.i32[1] = v10;
    v11.i32[2] = v12;
    v17 = (float)(this->var23 * v9) + 1.0;
    p_var22 = &this->var22;
    v14 = vld1q_dup_f32(p_var22);
    v15 = vdivq_f32(vmulq_n_f32(v11, v17), v14);
    v14.i32[0] = v15.i32[1];
    LODWORD(v16) = v15.i32[2];
    -[SCNNode setScale:](a2, "setScale:", *(double *)v15.i64, *(double *)v14.i64, v16);
    this->var22 = v17;
  }
  else if (!this->var24)
  {
    *(float *)&v6 = (float)(this->var19 * v9) + (float)(this->var23 * (float)(1.0 - v9));
    *(float *)&v7 = *(float *)&v6;
    *(float *)&v8 = *(float *)&v6;
    -[SCNNode setScale:](a2, "setScale:", v6, v7, v8);
  }
  this->var21 = v9;
  if ((COERCE_UNSIGNED_INT(v9 + -1.0) & 0x60000000) == 0)
    SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, a3);
}

SCNCAction *SCNCActionScale::cpp_willStartWithTargetAtTime(SCNCActionScale *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  float v6;

  result = SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  this->var21 = 0.0;
  if (this->var25)
  {
    this->var22 = 1.0;
    v6 = this->var19 + -1.0;
  }
  else
  {
    result = (SCNCAction *)-[SCNNode scale](a2, "scale");
  }
  this->var23 = v6;
  return result;
}

void sub_1DCF25F94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C408B87FB4ALL);
  _Unwind_Resume(a1);
}

void sub_1DCF2619C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C408B87FB4ALL);
  _Unwind_Resume(a1);
}

void sub_1DCF2651C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C408B87FB4ALL);
  _Unwind_Resume(a1);
}

void SCNCActionGroup::SCNCActionGroup(SCNCActionGroup *this, SCNCAction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v4 = &off_1EA595CF8;
  v5 = v4 + 144;
  *(_QWORD *)(v4 + 144) = v4 + 144;
  *(_QWORD *)(v4 + 152) = v4 + 144;
  *(_QWORD *)(v4 + 160) = 0;
  *(double *)(v4 + 56) = a2->var7;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v4 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v4 + 64) = a2->var8;
  *(_QWORD *)(v4 + 104) = a2->var14;
  v11 = (uint64_t)&v11;
  v12 = &v11;
  v13 = 0;
  std::__list_imp<SCNCAction *>::clear((_QWORD *)(v4 + 144));
  v6 = v13;
  if (v13)
  {
    v8 = v11;
    v7 = v12;
    v9 = *v12;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v11 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = *((_QWORD *)this + 18);
    *(_QWORD *)(v10 + 8) = v7;
    *v7 = v10;
    *((_QWORD *)this + 18) = v8;
    *(_QWORD *)(v8 + 8) = v5;
    *((_QWORD *)this + 20) += v6;
    v13 = 0;
  }
  std::__list_imp<SCNCAction *>::clear(&v11);
  *((_BYTE *)this + 32) = 1;
}

void SCNCActionGroup::~SCNCActionGroup(SCNCAction *this)
{
  SCNCActionGroup::~SCNCActionGroup(this);
  JUMPOUT(0x1DF0D41C0);
}

{
  SCNCAction *v2;

  this->var0 = (void **)&off_1EA595CF8;
  v2 = this + 1;
  std::__list_imp<SCNCAction *>::clear(&this[1].var0);
  std::__list_imp<SCNCAction *>::clear(v2);
  SCNCAction::~SCNCAction(this);
}

void SCNCActionGroup::setBaseSpeed(SCNCAction *this, double a2)
{
  double var1;
  double v4;

  SCNCAction::setBaseSpeed(this, a2);
  var1 = this[1].var1;
  if (*(SCNCAction **)&var1 != &this[1])
  {
    v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)&var1 + 16) + 40))(*(_QWORD *)(*(_QWORD *)&var1 + 16), v4);
      var1 = *(double *)(*(_QWORD *)&var1 + 8);
    }
    while (*(SCNCAction **)&var1 != &this[1]);
  }
}

void SCNCActionGroup::setSpeed(SCNCAction *this, double a2)
{
  double var1;
  double v4;

  SCNCAction::setSpeed(this, a2);
  var1 = this[1].var1;
  if (*(SCNCAction **)&var1 != &this[1])
  {
    v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(_QWORD, double))(**(_QWORD **)(*(_QWORD *)&var1 + 16) + 40))(*(_QWORD *)(*(_QWORD *)&var1 + 16), v4);
      var1 = *(double *)(*(_QWORD *)&var1 + 8);
    }
    while (*(SCNCAction **)&var1 != &this[1]);
  }
}

uint64_t SCNCActionGroup::cpp_updateWithTargetForTime(SCNCAction *this, SCNNode *a2, double a3)
{
  double v6;
  double var1;
  double v8;
  int v9;
  SCNCAction *v10;
  uint64_t result;

  v6 = SCNCAction::cpp_timeByApplyingTimingfunction(this, a3);
  var1 = this[1].var1;
  if (*(SCNCAction **)&var1 == &this[1])
    return (uint64_t)SCNCAction::didFinishWithTargetAtTime(this, a2, a3);
  v8 = v6;
  v9 = 1;
  do
  {
    v10 = *(SCNCAction **)(*(_QWORD *)&var1 + 16);
    if ((C3DIsRunningInEditor() & 1) != 0)
    {
LABEL_4:
      SCNCAction::updateWithTargetForTime(v10, a2, v8);
      goto LABEL_9;
    }
    if (v10->var4)
    {
      if (!v10->var10)
        goto LABEL_4;
    }
    else if ((objc_msgSend(v10->var3, "finished") & 1) == 0)
    {
      goto LABEL_4;
    }
LABEL_9:
    if (v10->var4)
      result = v10->var10;
    else
      result = objc_msgSend(v10->var3, "finished");
    v9 &= result;
    var1 = *(double *)(*(_QWORD *)&var1 + 8);
  }
  while (*(SCNCAction **)&var1 != &this[1]);
  if (v9)
    return (uint64_t)SCNCAction::didFinishWithTargetAtTime(this, a2, a3);
  return result;
}

SCNCAction *SCNCActionGroup::cpp_wasAddedToTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  char *v7;
  double i;

  result = SCNCAction::cpp_wasAddedToTargetAtTime(this, a2, a3);
  v7 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v7; i = *(double *)(*(_QWORD *)&i + 8))
    result = (SCNCAction *)SCNCAction::wasAddedToTargetAtTime(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
  return result;
}

SCNCAction *SCNCActionGroup::cpp_wasRemovedFromTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  char *v7;
  double i;

  result = SCNCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  v7 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v7; i = *(double *)(*(_QWORD *)&i + 8))
    result = (SCNCAction *)SCNCAction::wasRemovedFromTargetAtTime(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
  return result;
}

SCNCAction *SCNCActionGroup::cpp_willStartWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  char *v7;
  double i;

  result = SCNCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  v7 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v7; i = *(double *)(*(_QWORD *)&i + 8))
    result = (SCNCAction *)SCNCAction::willStartWithTargetAtTime(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
  return result;
}

SCNCAction *SCNCActionGroup::cpp_wasPausedWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  SCNCAction *result;
  char *v7;
  double i;

  result = SCNCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  v7 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v7; i = *(double *)(*(_QWORD *)&i + 8))
    result = (SCNCAction *)SCNCAction::wasPausedWithTargetAtTime(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
  return result;
}

void SCNCActionGroup::cpp_willResumeWithTargetAtTime(SCNCAction *this, SCNNode *a2, double a3)
{
  char *v6;
  double i;

  SCNCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  v6 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v6; i = *(double *)(*(_QWORD *)&i + 8))
    SCNCAction::willResumeWithTargetAtTime(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
}

void SCNCActionGroup::cpp_timeJumpWithTarget(SCNCAction *this, SCNNode *a2, double a3)
{
  char *v6;
  double i;

  SCNCAction::cpp_timeJumpWithTarget(this, a2, a3);
  v6 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v6; i = *(double *)(*(_QWORD *)&i + 8))
    SCNCAction::timeJumpWithTarget(*(SCNCAction **)(*(_QWORD *)&i + 16), a2, a3);
}

SCNCAction *SCNCActionGroup::cpp_reset(SCNCAction *this)
{
  SCNCAction *result;
  char *v3;
  double i;

  result = SCNCAction::cpp_reset(this);
  v3 = (char *)&this[1];
  for (i = this[1].var1; *(char **)&i != v3; i = *(double *)(*(_QWORD *)&i + 8))
    result = (SCNCAction *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&i + 16) + 120))(*(_QWORD *)(*(_QWORD *)&i + 16));
  return result;
}

_QWORD *std::__list_imp<SCNCAction *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void **C3DShapeTriangulationListInsert(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == *((_DWORD *)result + 1))
  {
    v7 = 2 * v6;
    *((_DWORD *)result + 1) = v7;
    result[1] = malloc_type_realloc(result[1], 8 * v7, 0x2004093837F09uLL);
    result = (void **)malloc_type_realloc(v5[2], 8 * *((unsigned int *)v5 + 1), 0x2004093837F09uLL);
    v5[2] = result;
    v6 = *(_DWORD *)v5;
  }
  *((_QWORD *)v5[1] + v6) = a2;
  *((_QWORD *)v5[2] + v6) = a3;
  *(_DWORD *)v5 = v6 + 1;
  return result;
}

_QWORD *C3DShapeTriangulationStackPush(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *result;

  v4 = *a1;
  v5 = a1[1];
  if (v5 == *a1)
  {
    a1[1] = 2 * v5;
    result = malloc_type_realloc(*((void **)a1 + 1), 8 * (2 * v5), 0x2004093837F09uLL);
    *((_QWORD *)a1 + 1) = result;
    v4 = *a1;
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

uint64_t C3DShapeTriangulationGetNewTriangle(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;

  if (*(_DWORD *)(a1 + 32) >= *(_DWORD *)(a1 + 36))
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShapeTriangulationGetNewTriangle_cold_1(v2);
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = v4 + 1;
  result = v3 + 56 * v4;
  *(_BYTE *)(result + 51) = 0;
  return result;
}

uint64_t C3DShapeTriangulationTriangleContainingVertex(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 32);
  v3 = v2 - 1;
  if (v2 - 1 < 0)
    return 2;
  v4 = *(_QWORD *)(a2 + 16);
  for (i = (_QWORD *)(v4 + 56 * v3); ; i -= 7)
  {
    if (v4)
    {
      v6 = v4 + 56 * v3;
      if (*i == a1 || i[1] == a1)
        return v6;
      if (i[2] == a1)
        break;
    }
    --v3;
    if (--v2 <= 0)
      return 2;
  }
  return (uint64_t)i;
}

uint64_t C3DShapeTriangulationTriangleContainingPoint(float64x2_t *a1, double **i, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  float64x2_t v7;
  uint64_t v8;
  int8x16_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  float64_t v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v3 = *(unsigned int *)(a3 + 32);
  v4 = *(_DWORD *)(a3 + 32);
  while (v4)
  {
    if (!i)
      C3DShapeTriangulationTriangleContainingPoint_cold_1();
    v5 = 0;
    v6 = 0;
    --v4;
    v7 = *a1;
    do
    {
      if (v5 == 2)
        v8 = 0;
      else
        v8 = v5 + 1;
      v9 = (int8x16_t)vsubq_f64(*(float64x2_t *)i[v5], v7);
      v10 = vmulq_f64(vsubq_f64(*(float64x2_t *)i[v8], v7), (float64x2_t)vextq_s8(v9, v9, 8uLL));
      if ((vmovn_s64(vcgtq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1))).u8[0] & 1) != 0)
      {
        i = (double **)i[v5 + 3];
        if (!i)
          C3DShapeTriangulationTriangleContainingPoint_cold_2();
        v6 = 1;
      }
      ++v5;
    }
    while (v5 != 3);
    if ((v6 & 1) == 0)
      return (uint64_t)i;
  }
  if (!(_DWORD)v3)
    return 2;
  for (i = *(double ***)(a3 + 16); ; i += 7)
  {
    v14 = i[1];
    v15 = i[2];
    v16 = **i;
    v17 = (*i)[1];
    v18 = v14[1];
    v19 = v15[1];
    v11 = a1->f64[0];
    v12 = a1->f64[1];
    v13 = -a1->f64[0];
    if (vabdd_f64(fabs(*v14 * v19 + v16 * v18 + *v15 * v17 - v16 * v19 - *v15 * v18 - *v14 * v17) * 0.5- fabs(v17 * *v15 + v11 * v19 + v16 * v12 + v13 * v17 - v16 * v19 - *v15 * v12) * 0.5- fabs(*v14 * v19 + v11 * v18 + *v15 * v12 + v13 * v19 - *v15 * v18 - *v14 * v12) * 0.5, fabs(v16 * v18 + v11 * v17 + *v14 * v12 + v13 * v18 - *v14 * v17 - v16 * v12) * 0.5) < 0.001)break;
    if (!--v3)
      return 2;
  }
  return (uint64_t)i;
}

uint64_t C3DEdgeCrossingSegment(uint64_t a1, double *a2, double *a3, double ***a4)
{
  double *v8;
  double *v9;
  BOOL v10;
  double ***v11;
  double **v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t result;

  v8 = *(double **)a1;
  if (*(double **)a1 == a3 || (v9 = *(double **)(a1 + 8), v9 == a3) || *(double **)(a1 + 16) == a3)
  {
    v12 = *(double ***)(a1 + 24);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
    v12 = *(double ***)(a1 + 32);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
    v12 = *(double ***)(a1 + 40);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
  }
  else
  {
    v10 = v8 == a2 || v9 == a2;
    if (!v10 && C3DSegmentIntersectsSegment(*a2, a2[1], *a3, a3[1], *v8, v8[1], *v9, v9[1]))
    {
      v11 = (double ***)(a1 + 24);
LABEL_40:
      v12 = *v11;
LABEL_41:
      *a4 = v12;
      return 1;
    }
    v13 = *(double **)(a1 + 8);
    if (v13 != a2)
    {
      v14 = *(double **)(a1 + 16);
      if (v14 != a2)
      {
        if (C3DSegmentIntersectsSegment(*a2, a2[1], *a3, a3[1], *v13, v13[1], *v14, v14[1]))
        {
          v11 = (double ***)(a1 + 32);
          goto LABEL_40;
        }
      }
    }
    v15 = *(double **)(a1 + 16);
    if (v15 != a2 && *(double **)a1 != a2)
    {
      result = C3DSegmentIntersectsSegment(*a2, a2[1], *a3, a3[1], *v15, v15[1], **(double **)a1, *(double *)(*(_QWORD *)a1 + 8));
      if (!(_DWORD)result)
        return result;
      v11 = (double ***)(a1 + 40);
      goto LABEL_40;
    }
  }
  return 0;
}

BOOL C3DCircumcircleContainsPoint(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v4 = a1[1];
  v5 = a2[1];
  v6 = a3[1];
  v7 = v4 * v4 + *a1 * *a1;
  v8 = v5 * v5 + *a2 * *a2;
  v9 = v6 * v6 + *a3 * *a3;
  v10 = v5 - v6;
  v11 = *a2 * (v6 - v4) + *a1 * (v5 - v6);
  v12 = v4 - v5;
  v13 = v11 + *a3 * v12 + v11 + *a3 * v12;
  v14 = (v8 * (v6 - v4) + v7 * v10 + v9 * v12) / v13;
  v15 = *a2 - *a3;
  v16 = *a1 - *a2;
  v17 = -(v8 * (*a3 - *a1) + v7 * v15 + v9 * v16) / v13;
  v18 = sqrt(((v4 - v6) * (v4 - v6) + (*a1 - *a3) * (*a1 - *a3)) * ((v12 * v12 + v16 * v16) * (v10 * v10 + v15 * v15)));
  v19 = fabs(v13);
  return (v17 - a4[1]) * (v17 - a4[1]) + (v14 - *a4) * (v14 - *a4) < v18 / v19 * (v18 / v19);
}

uint64_t C3DPointFallsOnTriangleEdgeAndLinks(uint64_t a1, double *a2, _DWORD *a3, _DWORD *a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;

  v4 = *(double **)(a1 + 8);
  v5 = **(double **)a1;
  v6 = *(double *)(*(_QWORD *)a1 + 8);
  v7 = v4[1];
  v8 = *a2;
  v9 = a2[1];
  if ((*v4 - v5) * (v9 - v6) - (v7 - v6) * (*a2 - v5) == 0.0)
  {
    v10 = 0;
    *a3 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24 + 8 * v10) != a1)
    {
      if (++v10 == 3)
        C3DPointFallsOnTriangleEdgeAndLinks_cold_1(a1, (uint64_t)a2, (uint64_t)a3);
    }
  }
  else
  {
    v11 = *(double **)(a1 + 16);
    v12 = v11[1];
    if ((*v11 - *v4) * (v9 - v7) - (v12 - v7) * (v8 - *v4) == 0.0)
    {
      v10 = 0;
      *a3 = 1;
      while (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24 + 8 * v10) != a1)
      {
        if (++v10 == 3)
          C3DPointFallsOnTriangleEdgeAndLinks_cold_1(a1, (uint64_t)a2, (uint64_t)a3);
      }
    }
    else
    {
      if ((v5 - *v11) * (v9 - v12) - (v6 - v12) * (v8 - *v11) != 0.0)
        return 0;
      v10 = 0;
      *a3 = 2;
      while (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 + 8 * v10) != a1)
      {
        if (++v10 == 3)
          C3DPointFallsOnTriangleEdgeAndLinks_cold_1(a1, (uint64_t)a2, (uint64_t)a3);
      }
    }
  }
  *a4 = v10;
  return 1;
}

uint64_t C3DVertexNotSharedByTriangles(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  unsigned int v4;

  if (!a1)
    C3DVertexNotSharedByTriangles_cold_1();
  if (!a2)
    C3DVertexNotSharedByTriangles_cold_2();
  v2 = (_QWORD *)(a1 + 24);
  v3 = 1;
  while (*v2 != a2)
  {
    --v3;
    ++v2;
    if (v3 == -2)
      C3DVertexNotSharedByTriangles_cold_3();
  }
  if (v3 == 1)
    v4 = 2;
  else
    v4 = -v3;
  return *(_QWORD *)(a1 + 8 * v4);
}

uint64_t C3DShapeConnectedComponentTriangulatePseudopolygon(int *a1, double *a2, double *a3, unsigned int *a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  double **v10;
  double *v11;
  int v12;
  uint64_t v13;
  double *v14;
  double *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  double **v24;
  double *v25;
  double *v26;
  unsigned int v27;
  double *v28;
  double *v29;
  unsigned int v30;
  double *v31;
  double *v32;
  double *v34;
  double *v36;
  BOOL v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  double *v43;
  BOOL v44;
  double *v45;
  BOOL v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  double **v51;
  uint64_t v52;
  double *v53;
  double *v54;
  uint64_t v55;
  double **v56;
  double *v57;
  double *v58;
  double *v60;
  int v62;
  unsigned int v64;
  double *v65;
  double *v66;
  unsigned int v67;
  double *v68;
  double *v70;
  int v72;
  unsigned int v74;
  uint64_t v75;
  double *v76;
  double *v78;
  double *v80;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  double *v89;
  double *v91;
  int v93;
  unsigned int v95;
  double *v96;
  double *v98;
  int v100;
  unsigned int v102;
  double *v103;
  double *v105;
  int v107;
  unsigned int v109;
  double *v110;
  double *v112;
  int v114;
  unsigned int v116;
  NSObject *v117;
  unsigned int v119;
  unsigned int *v120;
  int v121;

  v5 = *a1;
  v6 = (*a1 - 1);
  if (*a1 <= 1)
    C3DShapeConnectedComponentTriangulatePseudopolygon_cold_1();
  v10 = (double **)*((_QWORD *)a1 + 1);
  v11 = *v10;
  if (v6 <= 1)
  {
    v12 = 0;
    v16 = (uint64_t **)(a1 + 4);
    v17 = (uint64_t *)*((_QWORD *)a1 + 2);
    v18 = *v17;
    v19 = *a4;
  }
  else
  {
    v119 = *a1;
    v120 = a4;
    v121 = a5;
    v12 = 0;
    v13 = 1;
    v14 = *v10;
    do
    {
      v15 = v10[v13];
      if (C3DCircumcircleContainsPoint(a2, a3, v14, v15))
      {
        v12 = v13;
        v14 = v15;
      }
      ++v13;
    }
    while (v6 != v13);
    v16 = (uint64_t **)(a1 + 4);
    v17 = (uint64_t *)*((_QWORD *)a1 + 2);
    v18 = *v17;
    a4 = v120;
    v19 = *v120;
    if (v12 >= 1)
    {
      v20 = 1;
      a5 = v121;
      while (1)
      {
        v21 = *(_QWORD *)(*((_QWORD *)v120 + 1) + 8 * --v19);
        if (v121)
        {
          v22 = v10[v20];
          *(_QWORD *)v21 = v22;
          v23 = 1;
        }
        else
        {
          *(_QWORD *)v21 = v11;
          v22 = v11;
          v11 = *(double **)(*((_QWORD *)a1 + 1) + v20 * 8);
          v23 = v18;
          v18 = 1;
        }
        *(_QWORD *)(v21 + 8) = v11;
        *(_QWORD *)(v21 + 16) = a2;
        v24 = (double **)(*v16)[v20];
        *(_QWORD *)(v21 + 24) = v24;
        *(_QWORD *)(v21 + 32) = v18;
        *(_QWORD *)(v21 + 40) = v23;
        if (v121)
        {
          if (v18)
          {
            v25 = *(double **)v18;
            v26 = *(double **)(v18 + 8);
            if (*(double **)v18 == a2 && v26 == v11)
            {
              v27 = 0;
            }
            else
            {
              v31 = *(double **)(v18 + 16);
              if (v26 == a2 && v31 == v11)
              {
                v27 = 1;
              }
              else if (v31 == a2 && v25 == v11)
              {
                v27 = 2;
              }
              else
              {
                v27 = -1;
              }
            }
          }
          else
          {
            v27 = -1;
          }
          if (!v24)
            goto LABEL_192;
          v34 = v24[1];
          if (*v24 == v11 && v34 == v22)
          {
            v40 = 0;
          }
          else
          {
            v36 = v24[2];
            v37 = v36 == v11 && *v24 == v22;
            v38 = v37 ? 2 : -1;
            v39 = v34 == v11 && v36 == v22;
            v40 = v39 ? 1 : v38;
          }
          if (v27 == -1 || v40 == -1)
            goto LABEL_192;
          v24[v40 + 3] = (double *)v21;
          *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8 * v27 + 24) = v21;
          v41 = *(_QWORD *)(v21 + 24);
          *(_BYTE *)(v21 + 49) = *(_BYTE *)(*(_QWORD *)(v21 + 32) + v27 + 48);
          *(_BYTE *)(v21 + 48) = *(_BYTE *)(v41 + v40 + 48);
          *(_BYTE *)(v21 + 50) = 0;
        }
        else
        {
          if (v23)
          {
            v29 = *(double **)v23;
            v28 = *(double **)(v23 + 8);
            if (*(double **)v23 == v22 && v28 == a2)
            {
              v30 = 0;
            }
            else
            {
              v32 = *(double **)(v23 + 16);
              if (v28 == v22 && v32 == a2)
              {
                v30 = 1;
              }
              else if (v32 == v22 && v29 == a2)
              {
                v30 = 2;
              }
              else
              {
                v30 = -1;
              }
            }
          }
          else
          {
            v30 = -1;
          }
          if (!v24
            || ((v43 = v24[1], *v24 == v11) ? (v44 = v43 == v22) : (v44 = 0),
                v44
              ? (v48 = 0)
              : ((v45 = v24[2], v43 == v11) ? (v46 = v45 == v22) : (v46 = 0),
                 v46 ? (v48 = 1) : (v45 == v11 ? (v47 = *v24 == v22) : (v47 = 0), !v47 ? (v48 = -1) : (v48 = 2))),
                v30 == -1 || v48 == -1))
          {
LABEL_192:
            *a4 = v19;
            return 2;
          }
          v24[v48 + 3] = (double *)v21;
          *(_QWORD *)(*(_QWORD *)(v21 + 40) + 8 * v30 + 24) = v21;
          *(_BYTE *)(v21 + 50) = *(_BYTE *)(*(_QWORD *)(v21 + 40) + v30 + 48);
          *(_WORD *)(v21 + 48) = *(unsigned __int8 *)(*(_QWORD *)(v21 + 24) + v48 + 48);
        }
        v10 = (double **)*((_QWORD *)a1 + 1);
        v11 = v10[v20++];
        v18 = v21;
        if (v12 + 1 == v20)
        {
          *v120 = v19;
          v17 = *v16;
          v11 = v14;
          v18 = v21;
          goto LABEL_86;
        }
      }
    }
    v11 = v14;
    a5 = v121;
LABEL_86:
    v5 = v119;
  }
  v49 = v17[v6];
  if ((int)(v5 - 3) >= v12)
  {
    v51 = &v10[v5 - 2];
    v52 = (int)(v5 - 3);
    while (1)
    {
      v53 = *v51;
      v50 = *(_QWORD *)(*((_QWORD *)a4 + 1) + 8 * --v19);
      *(_QWORD *)v50 = a3;
      if ((a5 & 1) != 0)
      {
        *(_QWORD *)(v50 + 8) = v53;
        v54 = v53;
        v53 = *(double **)(*((_QWORD *)a1 + 1) + 8 * v52);
        v55 = 1;
      }
      else
      {
        v54 = *(double **)(*((_QWORD *)a1 + 1) + 8 * v52);
        *(_QWORD *)(v50 + 8) = v54;
        v55 = v49;
        v49 = 1;
      }
      *(_QWORD *)(v50 + 16) = v53;
      *(_QWORD *)(v50 + 24) = v49;
      v56 = (double **)(*v16)[v52 + 1];
      *(_QWORD *)(v50 + 32) = v56;
      *(_QWORD *)(v50 + 40) = v55;
      if (a5)
      {
        if (v49)
        {
          v58 = *(double **)v49;
          v57 = *(double **)(v49 + 8);
          if (*(double **)v49 == v54 && v57 == a3)
          {
            v64 = 0;
            if (!v56)
              goto LABEL_192;
          }
          else
          {
            v60 = *(double **)(v49 + 16);
            if (v60 == v54 && v58 == a3)
              v62 = 2;
            else
              v62 = -1;
            if (v57 == v54 && v60 == a3)
              v64 = 1;
            else
              v64 = v62;
            if (!v56)
              goto LABEL_192;
          }
        }
        else
        {
          v64 = -1;
          if (!v56)
            goto LABEL_192;
        }
        v68 = v56[1];
        if (*v56 == v53 && v68 == v54)
        {
          v74 = 0;
        }
        else
        {
          v70 = v56[2];
          if (v70 == v53 && *v56 == v54)
            v72 = 2;
          else
            v72 = -1;
          if (v68 == v53 && v70 == v54)
            v74 = 1;
          else
            v74 = v72;
        }
        if (v64 == -1 || v74 == -1)
          goto LABEL_192;
        v56[v74 + 3] = (double *)v50;
        *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v64 + 24) = v50;
        v75 = *(_QWORD *)(v50 + 32);
        *(_BYTE *)(v50 + 48) = *(_BYTE *)(*(_QWORD *)(v50 + 24) + v64 + 48);
        *(_WORD *)(v50 + 49) = *(unsigned __int8 *)(v75 + v74 + 48);
      }
      else
      {
        if (v55)
        {
          v65 = *(double **)v55;
          v66 = *(double **)(v55 + 8);
          if (*(double **)v55 == a3 && v66 == v53)
          {
            v67 = 0;
          }
          else
          {
            v76 = *(double **)(v55 + 16);
            if (v66 == a3 && v76 == v53)
            {
              v67 = 1;
            }
            else if (v76 == a3 && v65 == v53)
            {
              v67 = 2;
            }
            else
            {
              v67 = -1;
            }
          }
        }
        else
        {
          v67 = -1;
        }
        if (!v56)
          goto LABEL_192;
        v78 = v56[1];
        if (*v56 == v53 && v78 == v54)
        {
          v83 = 0;
        }
        else
        {
          v80 = v56[2];
          if (v78 == v53 && v80 == v54)
          {
            v83 = 1;
          }
          else
          {
            v82 = v80 == v53 && *v56 == v54;
            v83 = v82 ? 2 : -1;
          }
        }
        if (v67 == -1 || v83 == -1)
          goto LABEL_192;
        v56[v83 + 3] = (double *)v50;
        *(_QWORD *)(*(_QWORD *)(v50 + 40) + 8 * v67 + 24) = v50;
        v84 = *(_QWORD *)(v50 + 32);
        *(_BYTE *)(v50 + 50) = *(_BYTE *)(*(_QWORD *)(v50 + 40) + v67 + 48);
        *(_BYTE *)(v50 + 49) = *(_BYTE *)(v84 + v83 + 48);
        *(_BYTE *)(v50 + 48) = 0;
      }
      v51 = (double **)(*((_QWORD *)a1 + 1) + 8 * v52);
      v49 = v50;
      if (v52-- <= v12)
        goto LABEL_172;
    }
  }
  v50 = v17[v6];
LABEL_172:
  v86 = *((_QWORD *)a4 + 1);
  v87 = v19 - 1;
  *a4 = v87;
  v88 = *(_QWORD *)(v86 + 8 * v87);
  *(_QWORD *)v88 = a2;
  if (a5)
  {
    *(_QWORD *)(v88 + 8) = a3;
    *(_QWORD *)(v88 + 16) = v11;
    if (v18)
    {
      v89 = *(double **)(v18 + 8);
      if (*(double **)v18 == a2 && v89 == v11)
      {
        v95 = 0;
        if (!v50)
          goto LABEL_254;
      }
      else
      {
        v91 = *(double **)(v18 + 16);
        if (v91 == a2 && *(_QWORD *)v18 == (_QWORD)v11)
          v93 = 2;
        else
          v93 = -1;
        if (v89 == a2 && v91 == v11)
          v95 = 1;
        else
          v95 = v93;
        if (!v50)
          goto LABEL_254;
      }
    }
    else
    {
      v95 = -1;
      if (!v50)
        goto LABEL_254;
    }
    v103 = *(double **)(v50 + 8);
    if (*(double **)v50 == v11 && v103 == a3)
    {
      v109 = 0;
    }
    else
    {
      v105 = *(double **)(v50 + 16);
      if (v105 == v11 && *(_QWORD *)v50 == (_QWORD)a3)
        v107 = 2;
      else
        v107 = -1;
      if (v103 == v11 && v105 == a3)
        v109 = 1;
      else
        v109 = v107;
    }
    if (v95 != -1 && v109 != -1)
    {
      *(_QWORD *)(v18 + 8 * v95 + 24) = v88;
      *(_QWORD *)(v50 + 8 * v109 + 24) = v88;
      *(_QWORD *)(v88 + 24) = 1;
      *(_QWORD *)(v88 + 32) = v50;
      *(_QWORD *)(v88 + 40) = v18;
      *(_BYTE *)(v88 + 48) = 1;
      *(_BYTE *)(v88 + 49) = *(_BYTE *)(v50 + v109 + 48);
      *(_BYTE *)(v88 + 50) = *(_BYTE *)(v18 + v95 + 48);
      return v88;
    }
LABEL_254:
    *(_QWORD *)(v88 + 24) = 1;
    *(_QWORD *)(v88 + 32) = 1;
    *(_QWORD *)(v88 + 40) = 1;
    return v88;
  }
  *(_QWORD *)(v88 + 8) = v11;
  *(_QWORD *)(v88 + 16) = a3;
  if (!v18)
  {
    v102 = -1;
    if (!v50)
      goto LABEL_259;
LABEL_234:
    v110 = *(double **)(v50 + 8);
    if (*(double **)v50 == a3 && v110 == v11)
    {
      v116 = 0;
    }
    else
    {
      v112 = *(double **)(v50 + 16);
      if (v112 == a3 && *(_QWORD *)v50 == (_QWORD)v11)
        v114 = 2;
      else
        v114 = -1;
      if (v110 == a3 && v112 == v11)
        v116 = 1;
      else
        v116 = v114;
    }
    if (v102 <= 2 && v116 < 3)
    {
      *(_QWORD *)(v18 + 8 * v102 + 24) = v88;
      *(_QWORD *)(v50 + 8 * v116 + 24) = v88;
      *(_QWORD *)(v88 + 24) = v18;
      *(_QWORD *)(v88 + 32) = v50;
      *(_QWORD *)(v88 + 40) = 1;
      *(_BYTE *)(v88 + 48) = *(_BYTE *)(v18 + v102 + 48);
      *(_BYTE *)(v88 + 49) = *(_BYTE *)(v50 + v116 + 48);
      *(_BYTE *)(v88 + 50) = 1;
      return v88;
    }
    goto LABEL_259;
  }
  v96 = *(double **)(v18 + 8);
  if (*(double **)v18 == v11 && v96 == a2)
  {
    v102 = 0;
    if (!v50)
      goto LABEL_259;
    goto LABEL_234;
  }
  v98 = *(double **)(v18 + 16);
  if (v98 == v11 && *(_QWORD *)v18 == (_QWORD)a2)
    v100 = 2;
  else
    v100 = -1;
  if (v96 == v11 && v98 == a2)
    v102 = 1;
  else
    v102 = v100;
  if (v50)
    goto LABEL_234;
LABEL_259:
  v117 = scn_default_log();
  if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
    C3DShapeConnectedComponentTriangulatePseudopolygon_cold_2(v117);
  return v88;
}

void C3DShapeTriangulationAddEdge(uint64_t a1, double *a2, double *a3)
{
  double *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  int v26;
  double *v27;
  double *v28;
  _QWORD **v29;
  double v30;
  _QWORD *v31;
  double *v32;
  double v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  double *v39;
  unsigned int v40;
  double *v41;
  double *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  unsigned int v58;
  double v59;
  void *ptr;
  double *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  double **v70;

  v3 = a3;
  v4 = a1;
  if (*a2 > *a3 || *a2 == *a3 && a2[1] < a3[1])
  {
    v5 = a2;
  }
  else
  {
    v5 = a3;
    v3 = a2;
  }
  v6 = C3DShapeTriangulationTriangleContainingVertex((uint64_t)v3, a1);
  if (v6 == 2)
  {
    v16 = 6;
    goto LABEL_42;
  }
  v7 = v6;
  v8 = *(_DWORD *)(v4 + 32);
  v70 = 0;
  if ((C3DEdgeCrossingSegment(v6, v3, v5, &v70) & 1) != 0)
  {
LABEL_17:
    if (v7 && (*(double **)v7 == v5 || *(double **)(v7 + 8) == v5 || *(double **)(v7 + 16) == v5))
    {
      v17 = 0;
      while (*(double ***)(v7 + 8 * v17 + 24) != v70)
      {
        if (++v17 == 3)
        {
          LODWORD(v17) = -1;
          break;
        }
      }
      v18 = 0;
      while (v70[v18 + 3] != (double *)v7)
      {
        if (++v18 == 3)
        {
          LODWORD(v18) = -1;
          break;
        }
      }
      *((_BYTE *)v70 + v18 + 48) = 1;
      *(_BYTE *)(v7 + v17 + 48) = 1;
      return;
    }
    v68 = 0x1000000000;
    v69 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
    v65 = 0x400000000;
    v66 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v67 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v62 = 0x400000000;
    v63 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v10 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v64 = v10;
    do
    {
      v14 = *(double **)(v7 + v11);
      if (v14 != v3)
      {
        if ((*v5 - *v3) * (v14[1] - v3[1]) - (v5[1] - v3[1]) * (*v14 - *v3) <= 0.0)
          v12 = *(_QWORD *)(v7 + v11);
        else
          v13 = *(_QWORD *)(v7 + v11);
      }
      v11 += 8;
    }
    while (v11 != 24);
    if (*(_QWORD *)v7 == v12)
    {
      v19 = (uint64_t *)(v7 + 32);
    }
    else if (*(_QWORD *)(v7 + 8) == v12)
    {
      v19 = (uint64_t *)(v7 + 40);
    }
    else
    {
      if (*(_QWORD *)(v7 + 16) != v12)
      {
        v15 = 0;
        goto LABEL_47;
      }
      v19 = (uint64_t *)(v7 + 24);
    }
    v15 = *v19;
LABEL_47:
    C3DShapeTriangulationListInsert((void **)&v65, v13, v15);
    if (*(_QWORD *)v7 == v13)
    {
      v21 = (uint64_t *)(v7 + 32);
    }
    else if (*(_QWORD *)(v7 + 8) == v13)
    {
      v21 = (uint64_t *)(v7 + 40);
    }
    else
    {
      if (*(_QWORD *)(v7 + 16) != v13)
      {
        v20 = 0;
LABEL_55:
        C3DShapeTriangulationListInsert((void **)&v62, v12, v20);
        v22 = 0;
        v23 = v68;
        if ((double *)v13 != v5 && (double *)v12 != v5)
        {
          v24 = v12;
          v56 = 0;
          v57 = 0;
          v55 = v4;
          v58 = HIDWORD(v68);
          v25 = v69;
          v26 = *(_DWORD *)(v4 + 32) - 1;
          v27 = v3;
          while (1)
          {
            if (!v26)
            {
              v45 = 3;
LABEL_106:
              v4 = v55;
LABEL_124:
              *(_DWORD *)(v4 + 40) = v45;
              goto LABEL_125;
            }
            v28 = *(double **)(v7 + 8);
            if (*(double **)v7 == v27)
            {
              v30 = *(double *)(v7 + 16);
              v29 = (_QWORD **)(v7 + 32);
            }
            else if (v28 == v27)
            {
              v29 = (_QWORD **)(v7 + 40);
              v30 = *(double *)v7;
              v28 = *(double **)(v7 + 16);
            }
            else
            {
              if (*(double **)(v7 + 16) != v27)
                goto LABEL_104;
              v29 = (_QWORD **)(v7 + 24);
              v30 = *(double *)(v7 + 8);
              v28 = *(double **)v7;
            }
            v31 = *v29;
            if (!*v29)
            {
LABEL_104:
              v45 = 4;
              goto LABEL_106;
            }
            v59 = v30;
            ptr = v25;
            v61 = (double *)v24;
            v32 = (double *)C3DVertexNotSharedByTriangles((uint64_t)v31, v7);
            v33 = (*v5 - *v3) * (v32[1] - v3[1]) - (v5[1] - v3[1]) * (*v32 - *v3);
            v34 = (double *)*v31;
            if (v33 <= 0.0)
            {
              if (v34 == (double *)v13)
              {
                v38 = v31 + 4;
              }
              else if (v31[1] == v13)
              {
                v38 = v31 + 5;
              }
              else
              {
                if (v31[2] != v13)
                {
                  v36 = 0;
LABEL_84:
                  C3DShapeTriangulationListInsert((void **)&v62, (uint64_t)v32, v36);
                  v39 = (double *)v13;
                  v56 = v61;
                  goto LABEL_85;
                }
                v38 = v31 + 3;
              }
              v36 = *v38;
              goto LABEL_84;
            }
            if (v34 == v61)
              break;
            if ((double *)v31[1] == v61)
            {
              v37 = v31 + 5;
              goto LABEL_80;
            }
            if ((double *)v31[2] == v61)
            {
              v37 = v31 + 3;
              goto LABEL_80;
            }
            v35 = 0;
LABEL_81:
            C3DShapeTriangulationListInsert((void **)&v65, (uint64_t)v32, v35);
            v39 = v32;
            v57 = v13;
            v32 = v61;
LABEL_85:
            if (v23 == v58)
            {
              v58 *= 2;
              v25 = malloc_type_realloc(ptr, 8 * v58, 0x2004093837F09uLL);
              v69 = v25;
            }
            else
            {
              v25 = ptr;
            }
            v40 = v23 + 1;
            *((_QWORD *)v25 + v23) = v7;
            if (v33 > 0.0 != (*v5 - *v3) * (v28[1] - v3[1]) - (v5[1] - v3[1]) * (*v28 - *v3) > 0.0)
              v27 = *(double **)&v59;
            else
              v27 = v28;
            if (v39 != v5)
            {
              --v26;
              v24 = (uint64_t)v32;
              v13 = (uint64_t)v39;
              v7 = (uint64_t)v31;
              ++v23;
              if (v32 != v5)
                continue;
            }
            v22 = v57;
            HIDWORD(v68) = v58;
            v4 = v55;
            v41 = v56;
            goto LABEL_95;
          }
          v37 = v31 + 4;
LABEL_80:
          v35 = *v37;
          goto LABEL_81;
        }
        v40 = v68;
        v31 = (_QWORD *)v7;
        v39 = (double *)v13;
        v41 = 0;
LABEL_95:
        v42 = (double *)*v31;
        if (v39 != v5)
        {
          if (v42 == v41)
          {
            v43 = v40;
            v46 = v31 + 4;
          }
          else if ((double *)v31[1] == v41)
          {
            v43 = v40;
            v46 = v31 + 5;
          }
          else
          {
            v43 = v40;
            if ((double *)v31[2] != v41)
            {
              v44 = 0;
LABEL_112:
              v48 = &v65;
              goto LABEL_117;
            }
            v46 = v31 + 3;
          }
          v44 = *v46;
          goto LABEL_112;
        }
        if (v42 == (double *)v22)
        {
          v43 = v40;
          v47 = v31 + 4;
        }
        else if (v31[1] == v22)
        {
          v43 = v40;
          v47 = v31 + 5;
        }
        else
        {
          v43 = v40;
          if (v31[2] != v22)
          {
            v44 = 0;
LABEL_116:
            v48 = &v62;
LABEL_117:
            C3DShapeTriangulationListInsert((void **)v48, (uint64_t)v5, v44);
            if (HIDWORD(v68) == v43)
            {
              HIDWORD(v68) = 2 * v43;
              v49 = malloc_type_realloc(v69, 16 * v43, 0x2004093837F09uLL);
              v69 = v49;
            }
            else
            {
              v49 = v69;
            }
            LODWORD(v68) = v43 + 1;
            *((_QWORD *)v49 + v43) = v31;
            v45 = 1;
            v50 = C3DShapeConnectedComponentTriangulatePseudopolygon((int *)&v65, v3, v5, (unsigned int *)&v68, 1);
            if (v50 == 2)
              goto LABEL_124;
            v51 = v50;
            v52 = C3DShapeConnectedComponentTriangulatePseudopolygon((int *)&v62, v3, v5, (unsigned int *)&v68, 0);
            if (v52 == 2)
              goto LABEL_124;
            *(_QWORD *)(v51 + 24) = v52;
            *(_QWORD *)(v52 + 40) = v51;
            if ((_DWORD)v68)
              C3DShapeTriangulationAddEdge_cold_1();
LABEL_125:
            free(v69);
            v53 = v67;
            free(v66);
            free(v53);
            v54 = v64;
            free(v63);
            free(v54);
            return;
          }
          v47 = v31 + 3;
        }
        v44 = *v47;
        goto LABEL_116;
      }
      v21 = (uint64_t *)(v7 + 24);
    }
    v20 = *v21;
    goto LABEL_55;
  }
  while (--v8)
  {
    if (*(double **)v7 == v3)
    {
      v9 = (uint64_t *)(v7 + 24);
      goto LABEL_15;
    }
    if (*(double **)(v7 + 8) == v3)
    {
      v9 = (uint64_t *)(v7 + 32);
      goto LABEL_15;
    }
    if (*(double **)(v7 + 16) == v3)
    {
      v9 = (uint64_t *)(v7 + 40);
LABEL_15:
      v7 = *v9;
    }
    if (C3DEdgeCrossingSegment(v7, v3, v5, &v70))
      goto LABEL_17;
  }
  v16 = 2;
LABEL_42:
  *(_DWORD *)(v4 + 40) = v16;
}

_QWORD *C3DShapeTriangulationResolveSwaps(_QWORD *result, double *a2)
{
  unsigned int v2;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;

  v2 = *(_DWORD *)result;
  if (!*(_DWORD *)result)
    return result;
  v4 = result;
  while (2)
  {
    if (v2 > *((_DWORD *)v4 + 8))
    {
      v13 = 9;
LABEL_38:
      *((_DWORD *)v4 + 10) = v13;
      return result;
    }
    v5 = v4[1];
    v6 = v2 - 1;
    *(_DWORD *)v4 = v6;
    v7 = *(_QWORD *)(v5 + 8 * v6);
    v8 = *(_QWORD *)(v7 + 32);
    if (!v8)
    {
      v13 = 10;
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 24;
    while (*(_QWORD *)(v8 + v10) != v7)
    {
      ++v9;
      v10 += 8;
      if (v9 == 3)
        goto LABEL_37;
    }
    if (v9 > 1)
      v11 = -2;
    else
      v11 = 1;
    if ((_DWORD)v9)
      v12 = (v9 - 1);
    else
      v12 = 2;
    v13 = 5;
    if (~v11 == (_DWORD)v9 || (_DWORD)v12 == -1)
      goto LABEL_38;
    if (!*(_BYTE *)(v7 + 49))
    {
      v14 = v11 + v9;
      v15 = *(double **)(v8 + v10 - 24);
      v16 = *(double **)(v8 + 8 * v12);
      result = (_QWORD *)C3DCircumcircleContainsPoint(v15, *(double **)(v8 + 8 * (v11 + v9)), v16, a2);
      if ((_DWORD)result)
      {
        v17 = *(_QWORD *)(v8 + 24 + 8 * v14);
        v18 = *(_QWORD *)(v8 + 24 + 8 * v12);
        v19 = *(_BYTE *)(v8 + 48 + v14);
        v20 = *(_QWORD *)(v7 + 40);
        v21 = *(_BYTE *)(v8 + 48 + v12);
        v22 = *(_BYTE *)(v7 + 50);
        *(_WORD *)(v7 + 49) = v19;
        *(_BYTE *)(v8 + 48) = 0;
        *(_BYTE *)(v8 + 49) = v21;
        *(_BYTE *)(v8 + 50) = v22;
        *(_QWORD *)(v7 + 16) = v16;
        *(_QWORD *)(v7 + 32) = v17;
        *(_QWORD *)(v7 + 40) = v8;
        *(_QWORD *)v8 = a2;
        *(_QWORD *)(v8 + 8) = v16;
        *(_QWORD *)(v8 + 16) = v15;
        *(_QWORD *)(v8 + 24) = v7;
        *(_QWORD *)(v8 + 32) = v18;
        *(_QWORD *)(v8 + 40) = v20;
        if (v17)
        {
          v23 = 0;
          while (*(_QWORD *)(v17 + 24 + v23) != v8)
          {
            v23 += 8;
            if (v23 == 24)
              goto LABEL_37;
          }
          v24 = (uint64_t *)(v17 + v23 + 24);
          if (v24 == (uint64_t *)3)
            goto LABEL_37;
          *v24 = v7;
          result = C3DShapeTriangulationStackPush((int *)v4, v7);
        }
        if (v18)
          result = C3DShapeTriangulationStackPush((int *)v4, v8);
        if (v20)
        {
          v25 = 0;
          while (*(_QWORD *)(v20 + 24 + v25) != v7)
          {
            v25 += 8;
            if (v25 == 24)
              goto LABEL_37;
          }
          v26 = (uint64_t *)(v20 + v25 + 24);
          if (v26 != (uint64_t *)3)
          {
            *v26 = v8;
            goto LABEL_35;
          }
LABEL_37:
          v13 = 5;
          goto LABEL_38;
        }
      }
    }
LABEL_35:
    v2 = *(_DWORD *)v4;
    if (*(_DWORD *)v4)
      continue;
    return result;
  }
}

_QWORD *C3DShapeTriangulationTriangleSplitInside(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t NewTriangle;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  NewTriangle = C3DShapeTriangulationGetNewTriangle((uint64_t)a1);
  result = (_QWORD *)C3DShapeTriangulationGetNewTriangle((uint64_t)a1);
  v13 = (uint64_t)result;
  *(_QWORD *)(a2 + 24) = NewTriangle;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = result;
  *(_QWORD *)NewTriangle = a3;
  *(_QWORD *)(NewTriangle + 8) = v9;
  *(_QWORD *)(NewTriangle + 16) = v7;
  *(_QWORD *)(NewTriangle + 24) = result;
  *(_QWORD *)(NewTriangle + 32) = v6;
  *(_QWORD *)(NewTriangle + 40) = a2;
  *result = a3;
  result[1] = v8;
  result[2] = v9;
  result[3] = a2;
  result[4] = v18;
  result[5] = NewTriangle;
  *(_BYTE *)(NewTriangle + 48) = 0;
  *(_BYTE *)(NewTriangle + 49) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(NewTriangle + 50) = 0;
  *((_BYTE *)result + 48) = 0;
  *((_BYTE *)result + 49) = *(_BYTE *)(a2 + 49);
  *((_BYTE *)result + 50) = 0;
  *(_BYTE *)(a2 + 49) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 50) = 0;
  if (v10)
    result = C3DShapeTriangulationStackPush(a1, a2);
  if (v18)
  {
    v14 = 0;
    v15 = 3;
    while (*(_QWORD *)(v18 + 24 + v14) != a2)
    {
      v14 += 8;
      if (v14 == 24)
        goto LABEL_9;
    }
    v15 = v18 + v14 + 24;
LABEL_9:
    *(_QWORD *)v15 = v13;
    result = C3DShapeTriangulationStackPush(a1, v13);
  }
  if (v6)
  {
    v16 = 0;
    v17 = 3;
    while (*(_QWORD *)(v6 + 24 + v16) != a2)
    {
      v16 += 8;
      if (v16 == 24)
        goto LABEL_17;
    }
    v17 = v6 + v16 + 24;
LABEL_17:
    *(_QWORD *)v17 = NewTriangle;
    return C3DShapeTriangulationStackPush(a1, NewTriangle);
  }
  return result;
}

_QWORD *C3DShapeTriangulationTriangleSplitOnEdge(int *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t NewTriangle;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v8 = *(_QWORD *)(a2 + 24 + 8 * a4);
  v9 = (a5 + 1) % 3;
  v33 = *(_QWORD *)(v8 + 24 + 8 * v9);
  v10 = (a5 + 2) % 3;
  v31 = *(_QWORD *)(v8 + 24 + 8 * v10);
  v11 = (a4 + 1) % 3;
  v12 = *(_QWORD *)(a2 + 24 + 8 * v11);
  v13 = (a4 + 2) % 3;
  v30 = *(_QWORD *)(a2 + 24 + 8 * v13);
  v32 = *(_BYTE *)(v8 + 48 + v9);
  v28 = *(_BYTE *)(v8 + 48 + v10);
  v25 = *(_BYTE *)(a2 + 48 + v11);
  v29 = *(_BYTE *)(a2 + 48 + v13);
  v14 = *(_BYTE *)(v8 + 48 + a5);
  v27 = *(_QWORD *)(a2 + 8 * a4);
  v15 = *(_QWORD *)(v8 + 8 * a5);
  v16 = *(_QWORD *)(a2 + 8 * v13);
  v17 = *(_QWORD *)(v8 + 8 * v10);
  NewTriangle = C3DShapeTriangulationGetNewTriangle((uint64_t)a1);
  result = (_QWORD *)C3DShapeTriangulationGetNewTriangle((uint64_t)a1);
  v20 = (uint64_t)result;
  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = NewTriangle;
  *(_BYTE *)(a2 + 48) = v14;
  *(_BYTE *)(a2 + 49) = v25;
  *(_BYTE *)(a2 + 50) = 0;
  *(_QWORD *)v8 = a3;
  *(_QWORD *)(v8 + 8) = v17;
  *(_QWORD *)(v8 + 16) = v15;
  *(_QWORD *)(v8 + 24) = result;
  *(_QWORD *)(v8 + 32) = v31;
  *(_QWORD *)(v8 + 40) = a2;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 49) = v28;
  *(_BYTE *)(v8 + 50) = v14;
  *(_QWORD *)NewTriangle = a3;
  *(_QWORD *)(NewTriangle + 8) = v16;
  *(_QWORD *)(NewTriangle + 16) = v27;
  *(_QWORD *)(NewTriangle + 24) = a2;
  *(_QWORD *)(NewTriangle + 32) = v30;
  *(_QWORD *)(NewTriangle + 40) = result;
  *(_BYTE *)(NewTriangle + 48) = 0;
  *(_BYTE *)(NewTriangle + 49) = v29;
  *(_BYTE *)(NewTriangle + 50) = v14;
  *result = a3;
  result[1] = v27;
  result[2] = v17;
  result[3] = NewTriangle;
  result[4] = v33;
  result[5] = v8;
  *((_BYTE *)result + 48) = v14;
  *((_BYTE *)result + 49) = v32;
  *((_BYTE *)result + 50) = 0;
  if (v31)
    result = C3DShapeTriangulationStackPush(a1, v8);
  if (v12)
    result = C3DShapeTriangulationStackPush(a1, a2);
  if (v30)
  {
    v21 = 0;
    v22 = 3;
    while (*(_QWORD *)(v30 + 24 + v21) != a2)
    {
      v21 += 8;
      if (v21 == 24)
        goto LABEL_11;
    }
    v22 = v30 + v21 + 24;
LABEL_11:
    *(_QWORD *)v22 = NewTriangle;
    result = C3DShapeTriangulationStackPush(a1, NewTriangle);
  }
  if (v33)
  {
    v23 = 0;
    v24 = 3;
    while (*(_QWORD *)(v33 + 24 + v23) != v8)
    {
      v23 += 8;
      if (v23 == 24)
        goto LABEL_19;
    }
    v24 = v33 + v23 + 24;
LABEL_19:
    *(_QWORD *)v24 = v20;
    return C3DShapeTriangulationStackPush(a1, v20);
  }
  return result;
}

_QWORD *C3DShapeTriangulationAddPoint(uint64_t a1, float64x2_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  result = (_QWORD *)C3DShapeTriangulationTriangleContainingPoint(a2, (double **)(*(_QWORD *)(a1 + 16) + 56 * (*(_DWORD *)(a1 + 32) - 1)), a1);
  if (result == (_QWORD *)2)
  {
    *(_DWORD *)(a1 + 40) = 8;
  }
  else
  {
    v5 = (uint64_t)result;
    v6 = 0;
    if (C3DPointFallsOnTriangleEdgeAndLinks((uint64_t)result, a2->f64, (_DWORD *)&v6 + 1, &v6))
      C3DShapeTriangulationTriangleSplitOnEdge((int *)a1, v5, (uint64_t)a2, HIDWORD(v6), v6);
    else
      C3DShapeTriangulationTriangleSplitInside((int *)a1, v5, (uint64_t)a2);
    return C3DShapeTriangulationResolveSwaps((_QWORD *)a1, a2->f64);
  }
  return result;
}

__n128 C3DShapeTriangulationInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t NewTriangle;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __n128 result;

  NewTriangle = C3DShapeTriangulationGetNewTriangle(a1);
  *(_QWORD *)(a1 + 24) = NewTriangle;
  v11 = *(double *)(*(_QWORD *)a2 + 16);
  v12 = *(double *)(*(_QWORD *)a2 + 24);
  v13 = *(double *)(*(_QWORD *)a2 + 32);
  v14 = *(double *)(*(_QWORD *)a2 + 40);
  v15 = v12 - v11;
  v16 = v14 - v13;
  if (vabdd_f64(v12, v11) < 0.00001 || vabdd_f64(v14, v13) < 0.00001)
    *(_DWORD *)(a1 + 40) = 7;
  v17 = v13 + v16 * -100.0;
  *(_QWORD *)(NewTriangle + 24) = 0;
  *(_QWORD *)(NewTriangle + 32) = 0;
  *(_DWORD *)(NewTriangle + 47) = 0;
  *(_QWORD *)(NewTriangle + 40) = 0;
  *(double *)a3 = v11 + v15 * -100.0;
  *(double *)(a3 + 8) = v17;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)a3;
  *(double *)a4 = v11 + v15 * 100.0;
  *(double *)(a4 + 8) = v17;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)a4;
  *(double *)a5 = v11 + v15 * 0.0;
  *(double *)(a5 + 8) = v13 + v16 * 100.0;
  result = *(__n128 *)a5;
  *(_OWORD *)(a5 + 48) = *(_OWORD *)a5;
  *(_QWORD *)NewTriangle = a3;
  *(_QWORD *)(NewTriangle + 8) = a4;
  *(_QWORD *)(NewTriangle + 16) = a5;
  return result;
}

uint64_t C3DShapeTriangulationTriangleMark(uint64_t a1, int a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;

  *(_BYTE *)(a1 + 51) = 1;
  *(_BYTE *)(a1 + 52) = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && !*(_BYTE *)(v6 + 51))
    C3DShapeTriangulationTriangleMark();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 && !*(_BYTE *)(v7 + 51))
    C3DShapeTriangulationTriangleMark();
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (!*(_BYTE *)(result + 51))
      result = C3DShapeTriangulationTriangleMark();
  }
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (*(_QWORD *)(a1 + 40))
        return result;
      v9 = (unsigned __int8 *)(a1 + 50);
    }
    else
    {
      v9 = (unsigned __int8 *)(a1 + 49);
    }
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + 48);
  }
  *a3 = *v9 != a2;
  return result;
}

void *C3DShapeTriangulationClean(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *result;
  BOOL v10;

  v10 = 0;
  C3DShapeTriangulationTriangleMark(*(_QWORD *)(a1 + 16), 1, &v10);
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  if (!(_DWORD)v2)
    goto LABEL_12;
  v3 = 0;
  v4 = v10;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 56 * v3 + 52) == v4)
    {
      LODWORD(v2) = v2 - 1;
      *(_DWORD *)(a1 + 32) = v2;
      if (v3 < v2)
      {
        v5 = v3;
        v6 = 56 * v3;
        do
        {
          v7 = *(_QWORD *)(a1 + 16) + v6;
          ++v5;
          v8 = *(_OWORD *)(v7 + 72);
          *(_OWORD *)v7 = *(_OWORD *)(v7 + 56);
          *(_OWORD *)(v7 + 16) = v8;
          *(_OWORD *)(v7 + 32) = *(_OWORD *)(v7 + 88);
          *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 104);
          v2 = *(unsigned int *)(a1 + 32);
          v6 += 56;
        }
        while (v5 < v2);
      }
    }
    else
    {
      ++v3;
    }
  }
  while (v3 < v2);
  if ((_DWORD)v2)
  {
    result = malloc_type_realloc(*(void **)(a1 + 16), 56 * v2, 0x1020040F7381AC9uLL);
  }
  else
  {
LABEL_12:
    free(*(void **)(a1 + 16));
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void *C3DShapeConnectedComponentTriangulate(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  unsigned int v8;
  __int128 v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float64x2_t *v19;
  double *f64;
  float64x2_t v21;
  float64x2_t v22;
  int32x2_t v23;
  int64x2_t v25;
  _OWORD v26[2];
  _OWORD v27[5];
  _OWORD v28[5];
  _OWORD v29[5];
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)a1 + 8);
    do
    {
      v7 = *v6;
      v6 += 14;
      v5 += v7;
      --v4;
    }
    while (v4);
    v8 = 2 * v5 + 2;
  }
  else
  {
    v8 = 2;
  }
  v33 = 0;
  v30 = 0x1000000000;
  v31 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  v32 = malloc_type_malloc(56 * v8, 0x1020040F7381AC9uLL);
  v34 = 0;
  v35 = v8;
  v36 = 0;
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  v9 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v9;
  memset(v27, 0, sizeof(v27));
  C3DShapeTriangulationInit((uint64_t)&v30, (uint64_t)v26, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27);
  if (!(_DWORD)v36)
  {
    v11 = *(_DWORD *)(a1 + 8) - 1;
    if (v11 < 0)
    {
LABEL_23:
      C3DShapeTriangulationClean((uint64_t)&v30);
      free(v31);
      *a2 = v34;
      return v32;
    }
    v25 = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    while (1)
    {
      v12 = *(_QWORD *)a1 + 56 * v11;
      v13 = *(unsigned int *)(v12 + 8);
      if (v13 >= 3)
        break;
LABEL_21:
      if (v11-- <= 0)
        goto LABEL_23;
    }
    v14 = *(float64x2_t **)v12;
    C3DShapeTriangulationAddPoint((uint64_t)&v30, *(float64x2_t **)v12);
    v15 = (float64x2_t)v25;
    if (!(_DWORD)v36)
    {
      v16 = 80;
      v17 = 1;
      while (1)
      {
        v18 = 0;
        v19 = &v14[5 * v17];
        v21 = *v19;
        f64 = v19[-5].f64;
        v22 = v21;
        while (1)
        {
          v23 = vmovn_s64(vcgeq_f64(v15, vabdq_f64(v22, v14[v18 / 0x10])));
          if ((v23.i32[0] & v23.i32[1] & 1) != 0)
            break;
          v18 += 80;
          if (v16 == v18)
          {
            C3DShapeTriangulationAddPoint((uint64_t)&v30, &v14[5 * v17]);
            if ((_DWORD)v36)
              goto LABEL_7;
            break;
          }
        }
        C3DShapeTriangulationAddEdge((uint64_t)&v30, f64, v14[5 * v17].f64);
        v15 = (float64x2_t)v25;
        if ((_DWORD)v36)
          break;
        ++v17;
        v16 += 80;
        if (v17 == v13)
        {
          C3DShapeTriangulationAddEdge((uint64_t)&v30, v14[5 * (v13 - 1)].f64, v14->f64);
          if ((_DWORD)v36)
            break;
          goto LABEL_21;
        }
      }
    }
  }
LABEL_7:
  free(v31);
  *a2 = 0;
  free(v32);
  return 0;
}

void OUTLINED_FUNCTION_0_8(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 351, a4);
}

void C3DFaceDestroy(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (*a1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v4 + v2))
        free(*(void **)(v4 + v2 + 8));
      v5 = v4 + v2;
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)v5 = 0;
      ++v3;
      v6 = *a1;
      v2 += 16;
    }
    while (v3 < v6);
    if ((_DWORD)v6)
      free(*((void **)a1 + 1));
  }
  *((_QWORD *)a1 + 1) = 0;
  *a1 = 0;
}

float angle(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  float v12;
  float v13;

  v6 = a5 - a3;
  v7 = a6 - a4;
  v8 = a1 - a3;
  v9 = a2 - a4;
  v10 = hypot(a5 - a3, a6 - a4);
  v11 = hypot(v8, v9);
  if (v10 == 0.0)
    return 0.0;
  v12 = v11;
  if (v12 == 0.0)
    return 0.0;
  v13 = (v9 * v7 + v6 * v8) / (float)(v10 * v12);
  if (v13 > 1.0)
    v13 = 1.0;
  if (v13 < -1.0)
    v13 = -1.0;
  return acosf(v13);
}

__n128 C3DSpokeListInsert(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 88 * v5, 0x1020040662E9E32uLL);
    *((_QWORD *)a1 + 1) = v6;
    v4 = *a1;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  v7 = &v6[88 * v4];
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  result = *(__n128 *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v7 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v7 + 3) = v10;
  *((_OWORD *)v7 + 4) = v11;
  *((__n128 *)v7 + 2) = result;
  return result;
}

void C3DSpokeListListDestroy(unsigned int a1, void ***a2)
{
  uint64_t v3;
  void ***v4;
  void **v5;

  v3 = a1;
  if (a1)
  {
    v4 = a2;
    do
    {
      v5 = *v4++;
      free(v5[1]);
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(a2);
}

_QWORD *C3DSpokeListListInsert(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _QWORD *result;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    result = malloc_type_realloc(*((void **)a1 + 1), 8 * v5, 0x2004093837F09uLL);
    *((_QWORD *)a1 + 1) = result;
    v4 = *a1;
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

void C3DSpokeCreate(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  double v18;
  double v19;
  long double v20;
  double v21;
  long double v22;
  long double v23;
  long double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  float v32;
  double v34;
  double v35;

  if (a5 == a7 && a6 == a8)
    C3DSpokeCreate_cold_1();
  if (a5 == a9 && a6 == a10)
    C3DSpokeCreate_cold_2();
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(_QWORD *)(a4 + 16) = a1;
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_QWORD *)(a4 + 40) = a2;
  *(_DWORD *)(a4 + 48) = a3;
  *(_QWORD *)(a4 + 52) = -1;
  v18 = a5 - a7;
  v19 = a6 - a8;
  v20 = hypot(a5 - a7, a6 - a8);
  v21 = v18 / v20;
  v34 = a9;
  v35 = a10;
  v22 = a10 - a6;
  v23 = v19 / v20;
  v24 = hypot(a9 - a5, v22);
  v25 = (a9 - a5) / v24;
  v26 = v22 / v24;
  v27 = v23 + v26;
  v28 = hypot(v21 + v25, v27);
  if (v28 == 0.0)
  {
    v29 = *MEMORY[0x1E0C9D538];
    v30 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  else
  {
    v29 = (v21 + v25) / v28;
    v30 = v27 / v28;
  }
  if (hypot(v29, v30) >= 0.00001)
  {
    *(_BYTE *)(a4 + 84) = v34 * a6 - a5 * v35 - v34 * a8 + a7 * v35 + a5 * a8 - a7 * a6 > 0.0;
    *(double *)(a4 + 64) = -v30;
    *(double *)(a4 + 72) = v29;
    v31 = angle(a7, a8, a5, a6, v34, v35);
    v32 = sin(v31 * 0.5);
    if (fabsf(v32) >= 0.00001)
      *(float *)(a4 + 80) = 1.0 / v32;
  }
  else
  {
    *(double *)(a4 + 64) = v25;
    *(double *)(a4 + 72) = v26;
  }
}

void intersectionForSpokeAndSpoke(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long double v6;
  long double v7;
  long double v8;
  long double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  double v20;
  float v21;

  v6 = *(double *)(a1 + 64);
  v7 = *(double *)(a1 + 72);
  if (fabs(hypot(v6, v7) + -1.0) >= 0.00001)
    intersectionForSpokeAndSpoke_cold_1();
  v8 = *(double *)(a2 + 64);
  v9 = *(double *)(a2 + 72);
  if (fabs(hypot(v8, v9) + -1.0) >= 0.00001)
    intersectionForSpokeAndSpoke_cold_2();
  v10 = v6 * v9 - v7 * v8;
  if (v10 == 0.0
    || (v11 = *(double *)(a1 + 8),
        v12 = v11 - *(double *)(a2 + 8),
        v13 = *(double *)a1 - *(double *)a2,
        v14 = v10,
        v15 = (v8 * v12 - v9 * v13) / v10,
        v15 < 0.0)
    || (v16 = (v13 * -v7 + v6 * v12) / v14, v16 < 0.0))
  {
    *(_OWORD *)a3 = C3DOffsetEventNone;
    *(_OWORD *)(a3 + 16) = unk_1DD02C4E0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    v17 = v15 / *(float *)(a1 + 80);
    v18 = v16 / *(float *)(a2 + 80);
    v19 = (float)(1.0 - v15);
    v20 = v15;
    *(long double *)(a3 + 8) = (v6 + *(double *)a1) * v20 + v19 * *(double *)a1;
    *(long double *)(a3 + 16) = (v7 + v11) * v20 + v19 * v11;
    if (v17 <= v18)
      v21 = v18;
    else
      v21 = v17;
    *(float *)(a3 + 4) = v21;
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 24) = a1;
    *(_QWORD *)(a3 + 32) = a2;
  }
}

void intersectionForSpokeAndEdge(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  long double v15;
  long double v16;
  long double v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double v33;
  float v34;
  double v35;
  double v36;
  float v37;
  float v38;

  if (a1 == a2)
    intersectionForSpokeAndEdge_cold_1();
  if (a1 == a3)
    intersectionForSpokeAndEdge_cold_2();
  v9 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  v13 = *(double *)a3;
  v12 = *(double *)(a3 + 8);
  v14 = *(double *)a3 - *(double *)a2;
  v15 = hypot(v14, v12 - v11);
  v16 = v14 / v15;
  v17 = (v12 - v11) / v15;
  v18 = v9 - v10;
  v19 = v8 - v11;
  v20 = *(float *)(a2 + 80);
  v21 = *(float *)(a1 + 80);
  v22 = *(double *)(a1 + 64);
  v23 = *(double *)(a1 + 72);
  v24 = *(double *)(a2 + 64) * v20 - v22 * v21;
  v25 = *(double *)(a2 + 72) * v20 - v23 * v21;
  v26 = v16;
  v27 = v17;
  v28 = fabsf(v26);
  if (v28 <= 0.00001)
  {
    if (fabsf(v27) <= 0.00001)
      goto LABEL_16;
    v32 = (float)(v26 * v25) / v27;
    if (vabds_f32(v24, v32) <= 0.00001)
      goto LABEL_16;
    v30 = (float)(v18 - (float)((float)(v19 * v26) / v27)) / (float)(v24 - v32);
    v31 = (float)(v19 - (float)(v25 * v30)) / v27;
  }
  else
  {
    v29 = (float)(v27 * v24) / v26;
    if (vabds_f32(v25, v29) <= 0.00001)
      goto LABEL_16;
    v30 = (float)(v19 - (float)((float)(v18 * v27) / v26)) / (float)(v25 - v29);
    v31 = (float)(v18 - (float)(v24 * v30)) / v26;
  }
  if (v30 < 0.0 || v31 < 0.0)
    goto LABEL_16;
  v33 = *(float *)(a3 + 80);
  if (v28 > 0.00001)
  {
    v34 = -v26;
    v35 = *(double *)(a3 + 64) * v33 - v22 * v21;
    v36 = v9 - v13;
    goto LABEL_15;
  }
  if (fabsf(v27) <= 0.00001)
  {
LABEL_16:
    *(_OWORD *)a4 = C3DOffsetEventNone;
    *(_OWORD *)(a4 + 16) = unk_1DD02C4E0;
    *(_QWORD *)(a4 + 32) = 0;
    return;
  }
  v34 = -v27;
  v35 = *(double *)(a3 + 72) * v33 - v23 * v21;
  v36 = v8 - v12;
LABEL_15:
  v37 = v36;
  v38 = v35;
  if ((float)((float)(v37 - (float)(v38 * v30)) / v34) < 0.0)
    goto LABEL_16;
  *(_DWORD *)a4 = 2;
  *(float *)(a4 + 4) = v30;
  *(double *)(a4 + 8) = v9 + v22 * v21 * v30;
  *(double *)(a4 + 16) = v8 + v23 * v21 * v30;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = a2;
}

float boundaryArea(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  float v4;
  uint64_t v5;

  if (!a1)
    return 0.0;
  v2 = 0;
  v3 = (double *)(a2 + 8);
  v4 = 0.0;
  do
  {
    if (a1 - 1 == v2)
      v5 = 0;
    else
      v5 = v2 + 1;
    v4 = *(v3 - 1) * *(double *)(a2 + 24 * v5 + 8) - *v3 * *(double *)(a2 + 24 * v5) + v4;
    v3 += 3;
    ++v2;
  }
  while (a1 != v2);
  return v4 * 0.5;
}

void C3DOffsetInitSpokes(int *a1, unsigned int a2, uint64_t a3)
{
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a2 >= 3 && fabsf(boundaryArea(a2, a3)) >= 0.0001)
  {
    v6 = (int *)malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    *(_QWORD *)v6 = 0x400000000;
    v7 = malloc_type_malloc(0x160uLL, 0x1020040662E9E32uLL);
    v8 = 0;
    *((_QWORD *)v6 + 1) = v7;
    v9 = a3 + 8;
    do
    {
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      v11 = v8 + 1;
      if (a2 - 1 == v8)
        v12 = 0;
      else
        v12 = v8 + 1;
      v10 = (double *)(a3 + 24 * ((a2 - 1 + v8) % a2));
      C3DSpokeCreate(*(_QWORD *)(v9 + 8), (uint64_t)v6, v8, (uint64_t)&v15, *(double *)(v9 - 8), *(double *)v9, *v10, v10[1], *(double *)(a3 + 24 * v12), *(double *)(a3 + 24 * v12 + 8));
      v13[2] = v17;
      v13[3] = v18;
      v13[4] = v19;
      v14 = v20;
      v13[0] = v15;
      v13[1] = v16;
      C3DSpokeListInsert(v6, (uint64_t)v13);
      v9 += 24;
      v8 = v11;
    }
    while (a2 != v11);
    C3DSpokeListListInsert(a1, (uint64_t)v6);
  }
}

void C3DOffsetCreate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  void *v6;
  void *v7;
  uint64_t *v9;

  *(_QWORD *)(a3 + 48) = 0;
  *(float *)(a3 + 52) = a4;
  v6 = malloc_type_malloc(0xE0uLL, 0x10A0040E17462F8uLL);
  *(_QWORD *)(a3 + 16) = 0x400000000;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = a1;
  *(_QWORD *)(a3 + 40) = a2;
  v7 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
  *(_QWORD *)a3 = 0x400000000;
  *(_QWORD *)(a3 + 8) = v7;
  a1 = a1;
  if ((_DWORD)a1)
  {
    v9 = (uint64_t *)(a2 + 8);
    do
    {
      C3DOffsetInitSpokes((int *)a3, *(v9 - 1), *v9);
      v9 += 2;
      --a1;
    }
    while (a1);
  }
}

void C3DOffsetDestroy(uint64_t a1)
{
  C3DOffsetListDestroy(*(_QWORD *)(a1 + 16), *(_OWORD **)(a1 + 24));
  C3DSpokeListListDestroy(*(_QWORD *)a1, *(void ****)(a1 + 8));
  C3DFaceDestroy((unsigned int *)(a1 + 32));
}

void C3DOffsetListDestroy(unsigned int a1, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  _OWORD v6[3];
  uint64_t v7;

  v3 = a1;
  if (a1)
  {
    v4 = a2;
    do
    {
      v5 = v4[1];
      v6[0] = *v4;
      v6[1] = v5;
      v6[2] = v4[2];
      v7 = *((_QWORD *)v4 + 6);
      C3DOffsetDestroy(v6);
      v4 = (_OWORD *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
  }
  free(a2);
}

__n128 C3DOffsetListInsert(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 56 * v5, 0x10A0040E17462F8uLL);
    *((_QWORD *)a1 + 1) = v6;
    v4 = *a1;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  v7 = &v6[56 * v4];
  result = *(__n128 *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(__n128 *)v7 = result;
  return result;
}

float nextEventsForOffsetAndSpoke(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  float v9;
  unint64_t v10;
  unint64_t i;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v21;
  __int128 v22;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *(_DWORD *)a4 = 0;
  intersectionForSpokeAndSpoke(a2, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 88 * ((*(_DWORD *)(a2 + 48) + 1) % **(_DWORD **)(a2 + 40)), (uint64_t)&v25);
  v8 = v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 32) = v27;
  if (*(_DWORD *)a3)
    v9 = *(float *)(a3 + 4);
  else
    v9 = 3.4028e38;
  if (*(_BYTE *)(a2 + 84))
  {
    v10 = *a1;
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = *(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * i);
        v13 = *v12;
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = 1;
          do
          {
            v16 = *((_QWORD *)v12 + 1);
            v17 = v16 + v14;
            if (v15 == v13)
              v18 = 0;
            else
              v18 = v15;
            v19 = v16 + 88 * v18;
            if (v17 != a2 && v19 != a2)
            {
              v27 = 0;
              v25 = 0u;
              v26 = 0u;
              intersectionForSpokeAndEdge(a2, v17, v19, (uint64_t)&v25);
              if ((_DWORD)v25)
              {
                v21 = *((float *)&v25 + 1);
                if (v9 + -0.00001 > *((float *)&v25 + 1))
                {
                  *(_DWORD *)a3 = 0;
                  v22 = v26;
                  *(_OWORD *)a4 = v25;
                  *(_OWORD *)(a4 + 16) = v22;
                  *(_QWORD *)(a4 + 32) = v27;
                  v9 = v21;
                }
              }
              v13 = *v12;
            }
            v14 += 88;
          }
          while (v15++ < v13);
          v10 = *a1;
        }
      }
    }
  }
  return v9;
}

uint64_t boundaryAtBoundaryEnd(unsigned int *a1, int a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v7;
  unsigned int v8;
  double *v9;
  double v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double *v17;
  unsigned int v18;
  double **v19;
  int v20;
  double *v21;

  LODWORD(v4) = *a1;
  if (*a1)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a4;
    for (i = 80; ; i += 88)
    {
      v12 = *((_QWORD *)a1 + 1);
      v13 = v12 + i;
      v14 = (float)(*(float *)(v12 + i) * a3);
      v15 = *(double *)(v12 + i - 80) + v14 * *(double *)(v12 + i - 16);
      v16 = *(double *)(v12 + i - 72) + v14 * *(double *)(v12 + i - 8);
      v17 = *(double **)(v12 + i - 64);
      if (v17)
      {
        v17[6] = v15;
        v17[7] = v16;
        v17[8] = v10;
      }
      *(double *)(v13 - 56) = v15;
      *(double *)(v13 - 48) = v16;
      *(_DWORD *)(v13 - 28) = a2;
      if (!v8)
        break;
      v18 = v8 - 1;
      if (hypot(v9[3 * v18] - v15, v9[3 * v18 + 1] - v16) >= 1.0)
      {
        if (v7 != (_DWORD)v4 - 1 || hypot(*v9 - v15, v9[1] - v16) >= 1.0)
        {
          v20 = v8 + 1;
          v9 = (double *)malloc_type_realloc(v9, 24 * (v8 + 1), 0x10200403ED2C137uLL);
          v21 = &v9[3 * v8];
          *v21 = v15;
          v21[1] = v16;
          v19 = (double **)(v21 + 2);
          goto LABEL_12;
        }
        v18 = 0;
      }
LABEL_13:
      *(_DWORD *)(v12 + i - 24) = v18;
      ++v7;
      v4 = *a1;
      if (v7 >= v4)
        return v8;
    }
    v9 = (double *)malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *v9 = v15;
    v9[1] = v16;
    v19 = (double **)(v9 + 2);
    v20 = 1;
LABEL_12:
    *v19 = v17;
    v18 = v8;
    v8 = v20;
    goto LABEL_13;
  }
  return 0;
}

uint64_t newFaceAtEnd(unsigned int *a1, float a2)
{
  unint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = boundaryAtBoundaryEnd(*(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * v4), v4, a2, *((float *)a1 + 13) + a2);
      v9 = v7;
      v10 = (uint64_t)v8;
      if (v7 < 3)
      {
        if ((_DWORD)v7)
          free(v8);
      }
      else
      {
        v5 = (char *)malloc_type_realloc(v5, 16 * (v6 + 1), 0x1020040D5A9D86FuLL);
        v11 = (uint64_t *)&v5[16 * v6];
        *v11 = v9;
        v11[1] = v10;
        ++v6;
      }
      ++v4;
    }
    while (v4 < *a1);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t splitJoinFace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  int v44;
  char *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  char *v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  _DWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  char *v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  uint64_t v91;
  _DWORD *v93;
  unint64_t v94;
  uint64_t v95;
  _DWORD *v96;

  if (*(_DWORD *)a4 != 2)
    splitJoinFace_cold_5();
  v8 = *(_QWORD *)(a4 + 24);
  v9 = *(_DWORD *)(v8 + 52);
  if (v9 == -1)
    splitJoinFace_cold_1();
  v10 = *(_QWORD *)(a4 + 32);
  if (*(_DWORD *)(v10 + 52) == -1)
    splitJoinFace_cold_2();
  *a5 = v9;
  *a6 = *(_DWORD *)(v10 + 52);
  v11 = *(_DWORD *)(v8 + 56);
  if (v11 == -1)
    splitJoinFace_cold_3();
  v12 = *(_DWORD *)(v10 + 56);
  if (v12 == -1)
    splitJoinFace_cold_4();
  v15 = *(unsigned int *)(v8 + 52);
  v16 = *(unsigned int *)(v10 + 52);
  v17 = *(_DWORD *)(a3 + 16 * v15);
  v94 = *(unsigned int *)(a3 + 16 * v16);
  v18 = (v12 + 1) % v94;
  *a8 = 0;
  *a7 = 0;
  v19 = (v11 + 1) % v17;
  *((_QWORD *)a8 + 1) = 0;
  *((_QWORD *)a7 + 1) = 0;
  if ((_DWORD)v15 != (_DWORD)v16)
  {
    v91 = v15;
    v93 = (_DWORD *)(a3 + 16 * v16);
    v96 = (_DWORD *)(a3 + 16 * v15);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v21 = (void **)(v93 + 2);
    do
    {
      v47 = (uint64_t *)((char *)*v21 + 24 * v46);
      v48 = v47[2];
      v49 = *v47;
      v50 = v47[1];
      v45 = (char *)malloc_type_realloc(v45, 24 * (v44 + 1), 0x10200403ED2C137uLL);
      *((_QWORD *)a7 + 1) = v45;
      v51 = *a7;
      v52 = &v45[24 * *a7];
      *(_QWORD *)v52 = v49;
      *((_QWORD *)v52 + 1) = v50;
      *((_QWORD *)v52 + 2) = v48;
      v44 = v51 + 1;
      *a7 = v51 + 1;
      ++v46;
    }
    while (v46 <= v12);
    v53 = a3 + 16 * v91;
    v55 = *(_QWORD *)(v53 + 8);
    v54 = (void **)(v53 + 8);
    v56 = (uint64_t *)(v55 + 24 * v11);
    v57 = *v56;
    v58 = v56[1];
    v59 = (char *)malloc_type_realloc(v45, 24 * (v51 + 2), 0x10200403ED2C137uLL);
    *((_QWORD *)a7 + 1) = v59;
    v60 = *a7;
    v61 = &v59[24 * *a7];
    *(_QWORD *)v61 = v57;
    *((_QWORD *)v61 + 1) = v58;
    *((_QWORD *)v61 + 2) = 0;
    v62 = v60 + 1;
    *a7 = v62;
    if (v19 == v11)
    {
      v63 = v94;
    }
    else
    {
      v63 = v94;
      do
      {
        v71 = (uint64_t *)((char *)*v54 + 24 * v19);
        v72 = v71[2];
        v73 = *v71;
        v74 = v71[1];
        v59 = (char *)malloc_type_realloc(v59, 24 * (v62 + 1), 0x10200403ED2C137uLL);
        *((_QWORD *)a7 + 1) = v59;
        v75 = *a7;
        v76 = &v59[24 * *a7];
        *(_QWORD *)v76 = v73;
        *((_QWORD *)v76 + 1) = v74;
        *((_QWORD *)v76 + 2) = v72;
        v62 = v75 + 1;
        *a7 = v62;
        if (v19 + 1 == v17)
          v19 = 0;
        else
          ++v19;
      }
      while (v19 != v11);
    }
    v77 = (uint64_t *)((char *)*v54 + 24 * v11);
    v78 = *v77;
    v79 = v77[1];
    v80 = (char *)malloc_type_realloc(v59, 24 * (v62 + 1), 0x10200403ED2C137uLL);
    *((_QWORD *)a7 + 1) = v80;
    v81 = *a7;
    v82 = &v80[24 * *a7];
    *(_QWORD *)v82 = v78;
    *((_QWORD *)v82 + 1) = v79;
    *((_QWORD *)v82 + 2) = 0;
    v83 = v81 + 1;
    *a7 = v83;
    if ((_DWORD)v18)
    {
      do
      {
        v84 = (uint64_t *)((char *)*v21 + 24 * v18);
        v85 = v84[2];
        v86 = *v84;
        v87 = v84[1];
        v80 = (char *)malloc_type_realloc(v80, 24 * (v83 + 1), 0x10200403ED2C137uLL);
        *((_QWORD *)a7 + 1) = v80;
        v88 = *a7;
        v89 = &v80[24 * *a7];
        *(_QWORD *)v89 = v86;
        *((_QWORD *)v89 + 1) = v87;
        *((_QWORD *)v89 + 2) = v85;
        v83 = v88 + 1;
        *a7 = v83;
        ++v18;
      }
      while (v18 < v63);
    }
    if (*v96)
      free(*v54);
    *v54 = 0;
    *v96 = 0;
    v70 = v93;
    v20 = 2;
    if (!*v93)
      goto LABEL_33;
LABEL_32:
    free(*v21);
LABEL_33:
    *v21 = 0;
    *v70 = 0;
    return v20;
  }
  v20 = 3;
  if (v11 != v12 && v11 != (_DWORD)v18)
  {
    v95 = a3 + 16 * v15;
    v21 = (void **)(v95 + 8);
    v22 = (uint64_t *)(*(_QWORD *)(v95 + 8) + 24 * v11);
    v23 = *v22;
    v24 = v22[1];
    *a7 = 1;
    v25 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *((_QWORD *)a7 + 1) = v25;
    *v25 = v23;
    v25[1] = v24;
    v25[2] = 0;
    v26 = *a7;
    do
    {
      v27 = (uint64_t *)((char *)*v21 + 24 * v18);
      v28 = v27[2];
      v29 = *v27;
      v30 = v27[1];
      v25 = malloc_type_realloc(v25, 24 * (v26 + 1), 0x10200403ED2C137uLL);
      *((_QWORD *)a7 + 1) = v25;
      v31 = *a7;
      v32 = &v25[3 * *a7];
      *v32 = v29;
      v32[1] = v30;
      v32[2] = v28;
      v26 = v31 + 1;
      *a7 = v26;
      LODWORD(v18) = ((int)v18 + 1) % v17;
    }
    while ((_DWORD)v18 != v11);
    v33 = (uint64_t *)((char *)*v21 + 24 * v11);
    v34 = *v33;
    v35 = v33[1];
    *a8 = 1;
    v36 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *((_QWORD *)a8 + 1) = v36;
    *v36 = v34;
    v36[1] = v35;
    v36[2] = 0;
    v37 = *a8;
    while (v19 != v12)
    {
      v38 = (uint64_t *)((char *)*v21 + 24 * v19);
      v39 = v38[2];
      v40 = *v38;
      v41 = v38[1];
      v36 = malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
      *((_QWORD *)a8 + 1) = v36;
      v42 = *a8;
      v43 = &v36[3 * *a8];
      *v43 = v40;
      v43[1] = v41;
      v43[2] = v39;
      v37 = v42 + 1;
      *a8 = v37;
      if (v19 + 1 == v17)
        v19 = 0;
      else
        ++v19;
    }
    v64 = (uint64_t *)((char *)*v21 + 24 * v12);
    v65 = *v64;
    v66 = v64[1];
    v67 = (char *)malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
    *((_QWORD *)a8 + 1) = v67;
    v68 = *a8;
    v69 = &v67[24 * *a8];
    *(_QWORD *)v69 = v65;
    *((_QWORD *)v69 + 1) = v66;
    *((_QWORD *)v69 + 2) = 0;
    *a8 = v68 + 1;
    v70 = (_DWORD *)v95;
    v20 = 1;
    if (!*(_DWORD *)v95)
      goto LABEL_33;
    goto LABEL_32;
  }
  return v20;
}

void C3DOffsetBuild(unsigned int *a1, float a2)
{
  unint64_t v4;
  unint64_t v5;
  void *v6;
  __int128 *v7;
  int v8;
  unsigned int v9;
  float v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float EventsForOffsetAndSpoke;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  NSObject *v34;
  __int128 v35;
  __int128 v36;
  int v37;
  unint64_t v38;
  char *v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  _BYTE v48[56];
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  _QWORD v54[2];
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v4 = *a1;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 3.4028e38;
    do
    {
      v11 = *(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * v5);
      if (*v11)
      {
        v47 = v5;
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *((_QWORD *)v11 + 1) + v12;
          v62 = 0;
          v60 = 0u;
          v61 = 0u;
          v59 = 0;
          v57 = 0u;
          v58 = 0u;
          EventsForOffsetAndSpoke = nextEventsForOffsetAndSpoke(a1, v14, (uint64_t)&v60, (uint64_t)&v57);
          if (v10 + -0.00001 > EventsForOffsetAndSpoke)
          {
            if (v6)
              free(v6);
            if (v7)
            {
              free(v7);
              v9 = 0;
              v8 = 0;
              v7 = 0;
            }
            else
            {
              v9 = 0;
              v8 = 0;
            }
            v6 = 0;
            v10 = EventsForOffsetAndSpoke;
          }
          if (vabds_f32(EventsForOffsetAndSpoke, v10) < 0.00001)
          {
            if ((_DWORD)v60)
            {
              v16 = (char *)malloc_type_realloc(v6, 40 * (v8 + 1), 0x1020040BD065CB0uLL);
              v17 = &v16[40 * v8];
              v6 = v16;
              v18 = v61;
              *(_OWORD *)v17 = v60;
              *((_OWORD *)v17 + 1) = v18;
              *((_QWORD *)v17 + 4) = v62;
              ++v8;
            }
            if ((_DWORD)v57)
            {
              v7 = (__int128 *)malloc_type_realloc(v7, 40 * (v9 + 1), 0x1020040BD065CB0uLL);
              v19 = (char *)v7 + 40 * v9;
              v20 = v58;
              *(_OWORD *)v19 = v57;
              *((_OWORD *)v19 + 1) = v20;
              *((_QWORD *)v19 + 4) = v59;
              ++v9;
            }
          }
          ++v13;
          v12 += 88;
        }
        while (v13 < *v11);
        v4 = *a1;
        v5 = v47;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v10 = 3.4028e38;
  }
  if (fabsf(v10) >= 0.00001)
  {
    *((float *)a1 + 12) = v10;
    v56 = 0;
    v54[1] = 0;
    v55 = 0uLL;
    v54[0] = 0;
    v53 = 0uLL;
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    if (v10 <= a2)
    {
      v25 = newFaceAtEnd(a1, v10);
      v24 = v25;
      v23 = v26;
      *(_QWORD *)&v55 = v25;
      *((_QWORD *)&v55 + 1) = v26;
      if (!v6 || v7)
      {
        if ((_DWORD)v25)
        {
          if (!v7)
          {
            v34 = scn_default_log();
            v25 = os_log_type_enabled(v34, OS_LOG_TYPE_FAULT);
            if ((_DWORD)v25)
              C3DOffsetBuild_cold_2(v34);
          }
          if (*(_DWORD *)(*((_QWORD *)v7 + 3) + 52) < v24
            && *(_DWORD *)(*((_QWORD *)v7 + 4) + 52) < v24)
          {
            v35 = *v7;
            v36 = v7[1];
            v62 = *((_QWORD *)v7 + 4);
            v60 = v35;
            v61 = v36;
            v37 = splitJoinFace(v25, v24, v23, (uint64_t)&v60, (_DWORD *)&v56 + 1, &v56, (unsigned int *)&v51, (unsigned int *)&v49);
            if (v37 == 2 || v37 == 1)
            {
              if ((_DWORD)v51)
                free(v52);
              v52 = 0;
              LODWORD(v51) = 0;
              if ((_DWORD)v49)
                free(v50);
              v50 = 0;
              LODWORD(v49) = 0;
              v33 = (unsigned int *)&v55;
              goto LABEL_36;
            }
          }
LABEL_28:
          v27 = *((float *)a1 + 12);
          v28 = v27 + *((float *)a1 + 13);
          v29 = a2 - v27;
          v30.n128_u64[1] = *((_QWORD *)&v55 + 1);
          v53 = v55;
          v30.n128_f64[0] = v29;
          if (v29 > 0.00001)
          {
            if ((_DWORD)v53)
            {
              C3DOffsetCreate(v53, *((uint64_t *)&v53 + 1), (uint64_t)v48, v28);
              C3DOffsetListInsert((int *)a1 + 4, (uint64_t)v48);
            }
            if (a1[4])
            {
              v31 = 0;
              v32 = 0;
              do
              {
                C3DOffsetBuild(*((_QWORD *)a1 + 3) + v31, v29, v30);
                ++v32;
                v31 += 56;
              }
              while (v32 < a1[4]);
            }
            goto LABEL_51;
          }
          C3DFaceDestroy((unsigned int *)&v53);
          v33 = (unsigned int *)v54;
LABEL_36:
          C3DFaceDestroy(v33);
          goto LABEL_51;
        }
        goto LABEL_50;
      }
    }
    else
    {
      *((float *)a1 + 12) = a2;
      v21 = newFaceAtEnd(a1, a2);
      v23 = v22;
      *(_QWORD *)&v55 = v21;
      *((_QWORD *)&v55 + 1) = v22;
      LODWORD(v24) = v21;
    }
    if ((_DWORD)v24)
      goto LABEL_28;
LABEL_50:
    if (v23)
      C3DOffsetBuild_cold_1();
  }
LABEL_51:
  if (v6)
    free(v6);
  if (v7)
    free(v7);
  if (outputArcs == 1 && *a1)
  {
    v38 = 0;
    v39 = (char *)arcs;
    do
    {
      v40 = *(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * v38);
      v39 = (char *)malloc_type_realloc(v39, 32 * (*v40 + arcCount), 0x1000040E0EAB150uLL);
      arcs = (uint64_t)v39;
      v41 = *v40;
      if ((_DWORD)v41)
      {
        v42 = arcCount;
        v43 = (_OWORD *)*((_QWORD *)v40 + 1);
        do
        {
          v44 = v42++;
          v45 = *(_OWORD *)((char *)v43 + 24);
          v46 = &v39[32 * v44];
          *(_OWORD *)v46 = *v43;
          *((_OWORD *)v46 + 1) = v45;
          v43 = (_OWORD *)((char *)v43 + 88);
          --v41;
        }
        while (v41);
        arcCount = v42;
      }
      ++v38;
    }
    while (v38 < *a1);
  }
}

void __C3DShapeConnectedComponentSkeletonize(uint64_t *a1, float a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = *((unsigned int *)a1 + 2);
  v5 = malloc_type_malloc(16 * v4, 0x1020040D5A9D86FuLL);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = malloc_type_malloc(24 * *(unsigned int *)(v7 + 56 * v6 + 8), 0x10200403ED2C137uLL);
      v9 = (char *)&v5[4 * v6];
      *((_QWORD *)v9 + 1) = v8;
      v10 = v9 + 8;
      v7 = *a1;
      LODWORD(v11) = *(_DWORD *)(*a1 + 56 * v6 + 8);
      v5[4 * v6] = v11;
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = -1;
        do
        {
          v15 = (_OWORD *)(*(_QWORD *)(v7 + 56 * v6) + 80 * (v11 + v14));
          v16 = *v10 + v12;
          *(_QWORD *)(v16 + 16) = v15;
          *(_OWORD *)v16 = *v15;
          ++v13;
          v7 = *a1;
          v11 = *(unsigned int *)(*a1 + 56 * v6 + 8);
          --v14;
          v12 += 24;
        }
        while (v13 < v11);
      }
      ++v6;
    }
    while (v6 != v4);
  }
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  C3DOffsetCreate(v4, (uint64_t)v5, (uint64_t)&v19, 0.0);
  C3DOffsetBuild((unsigned int *)&v19, a2);
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  v18 = v22;
  C3DOffsetDestroy((uint64_t)v17);
}

float C3DShapeConnectedComponentSkeletonize(_OWORD *a1, double a2)
{
  float v2;
  __int128 v3;
  float result;
  _OWORD v5[2];

  outputArcs = 0;
  v2 = a2;
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  __C3DShapeConnectedComponentSkeletonize((uint64_t *)v5, v2);
  return result;
}

uint64_t C3DCreateDataWithContentOfURL(uint64_t a1, uint64_t a2)
{
  if (!_decryptionCallbacks)
    return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:options:error:", a1, 0, a2);
  if (!_decryptionCallbacks(a1, _userInfo) || off_1F03C6440 == 0)
    return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:options:error:", a1, 0, a2);
  else
    return off_1F03C6440(a1, _userInfo);
}

CGImageSourceRef C3DCreateImageSourceWithURL(const __CFURL *a1)
{
  BOOL v2;
  const __CFData *v4;
  const __CFData *v5;
  CGImageSourceRef v6;

  if (!_decryptionCallbacks
    || (_decryptionCallbacks(a1, _userInfo) ? (v2 = off_1F03C6440 == 0) : (v2 = 1), v2))
  {
    if (C3DFileMayExistAtURL(a1))
      return CGImageSourceCreateWithURL(a1, 0);
  }
  else
  {
    v4 = (const __CFData *)off_1F03C6440(a1, _userInfo);
    if (v4)
    {
      v5 = v4;
      v6 = CGImageSourceCreateWithData(v4, 0);
      CFRelease(v5);
      return v6;
    }
  }
  return 0;
}

_OWORD *C3DSetFileDecryptionCallbacks(_OWORD *result, uint64_t a2)
{
  _userInfo = a2;
  if (result)
    *(_OWORD *)&_decryptionCallbacks = *result;
  else
    _decryptionCallbacks = 0;
  return result;
}

uint64_t *C3DGetFileDecryptionCallbacks()
{
  return &_decryptionCallbacks;
}

BOOL __addJSValueExtension(NSString *a1, const char *a2, int a3)
{
  objc_class *MetaClass;
  const char *v7;
  objc_class *v8;
  objc_method *InstanceMethod;
  void (*Implementation)(void);
  objc_method *ClassMethod;

  MetaClass = NSClassFromString(CFSTR("JSValue"));
  v7 = NSSelectorFromString(a1);
  v8 = (objc_class *)objc_opt_class();
  if (a3)
  {
    InstanceMethod = class_getInstanceMethod(v8, v7);
    Implementation = method_getImplementation(InstanceMethod);
  }
  else
  {
    ClassMethod = class_getClassMethod(v8, v7);
    Implementation = method_getImplementation(ClassMethod);
    MetaClass = objc_getMetaClass("JSValue");
  }
  return class_addMethod(MetaClass, v7, Implementation, a2);
}

Class _addJSValueExtension()
{
  Class result;
  char v1[72];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  result = NSClassFromString(CFSTR("JSValue"));
  if (result)
  {
    if ((_addJSValueExtension_done & 1) == 0)
    {
      _addJSValueExtension_done = 1;
      strcpy(v1, "{SCNVector4=ffff}");
      __strcat_chk();
      __addJSValueExtension(CFSTR("toVector4"), v1, 1);
      strcpy(v1, "{SCNVector3=fff}");
      __strcat_chk();
      __addJSValueExtension(CFSTR("toVector3"), v1, 1);
      strcpy(v1, "{SCNMatrix4=ffffffffffffffff}");
      __strcat_chk();
      __addJSValueExtension(CFSTR("toTransform3D"), v1, 1);
      strcpy(v1, "@@:");
      __strcat_chk();
      __strcat_chk();
      __addJSValueExtension(CFSTR("valueWithVector3:inContext:"), v1, 0);
      strcpy(v1, "@@:");
      __strcat_chk();
      __strcat_chk();
      __addJSValueExtension(CFSTR("valueWithVector4:inContext:"), v1, 0);
      strcpy(v1, "@@:");
      __strcat_chk();
      __strcat_chk();
      return (Class)__addJSValueExtension(CFSTR("valueWithTransform3D:inContext:"), v1, 0);
    }
  }
  return result;
}

void SCNExportJavaScriptModule(JSContext *context)
{
  JSValue *v2;
  objc_class *v3;
  objc_class *v4;
  objc_class *v5;
  objc_class *v6;
  objc_class *v7;
  objc_class *v8;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;
  objc_class *v23;
  objc_class *v24;
  objc_class *v25;
  objc_class *v26;
  objc_class *v27;
  objc_class *v28;
  objc_class *v29;
  objc_class *v30;
  objc_class *v31;
  objc_class *v32;
  objc_class *v33;
  objc_class *v34;
  objc_class *v35;
  objc_class *v36;
  objc_class *v37;
  objc_class *v38;
  objc_class *v39;
  objc_class *v40;
  objc_class *v41;
  objc_class *v42;
  objc_class *v43;
  objc_class *v44;
  objc_class *v45;
  objc_class *v46;
  objc_class *v47;
  objc_class *v48;
  objc_class *v49;
  objc_class *v50;
  objc_class *v51;
  objc_class *v52;
  objc_class *v53;
  objc_class *v54;
  objc_class *v55;
  objc_class *v56;
  objc_class *v57;
  objc_class *v58;
  objc_class *v59;
  objc_class *v60;
  objc_class *v61;
  objc_class *v62;
  JSValue *v63;
  JSValue *v64;
  JSValue *v65;
  JSValue *v66;
  JSValue *v67;
  JSValue *v68;
  JSValue *v69;
  JSValue *v70;
  JSValue *v71;
  JSValue *v72;
  JSValue *v73;
  JSValue *v74;
  JSValue *v75;
  JSValue *v76;
  JSValue *v77;
  JSValue *v78;
  JSValue *v79;
  JSValue *v80;
  JSValue *v81;
  JSValue *v82;
  JSValue *v83;
  JSValue *v84;
  JSValue *v85;
  JSValue *v86;
  JSValue *v87;
  JSValue *v88;
  JSValue *v89;
  JSValue *v90;
  JSValue *v91;
  JSValue *v92;
  JSValue *v93;
  JSValue *v94;
  JSValue *v95;
  JSValue *v96;
  JSValue *v97;
  JSValue *v98;
  JSValue *v99;
  JSValue *v100;
  JSValue *v101;
  JSValue *v102;
  JSValue *v103;
  JSValue *v104;
  JSValue *v105;
  JSValue *v106;
  JSValue *v107;
  JSValue *v108;
  JSValue *v109;
  JSValue *v110;
  JSValue *v111;
  JSValue *v112;
  JSValue *v113;
  JSValue *v114;
  JSValue *v115;
  JSValue *v116;
  JSValue *v117;
  JSValue *v118;
  JSValue *v119;
  JSValue *v120;
  JSValue *v121;
  JSValue *v122;
  JSValue *v123;
  JSValue *v124;
  JSValue *v125;
  JSValue *v126;
  JSValue *v127;
  JSValue *v128;
  JSValue *v129;
  JSValue *v130;
  JSValue *v131;
  JSValue *v132;
  JSValue *v133;
  JSValue *v134;
  JSValue *v135;
  JSValue *v136;
  JSValue *v137;
  JSValue *v138;
  JSValue *v139;
  JSValue *v140;
  JSValue *v141;
  JSValue *v142;
  JSValue *v143;
  JSValue *v144;
  JSValue *v145;
  JSValue *v146;
  JSValue *v147;
  JSValue *v148;
  JSValue *v149;
  JSValue *v150;
  JSValue *v151;
  JSValue *v152;
  JSValue *v153;
  JSValue *v154;
  JSValue *v155;
  JSValue *v156;
  JSValue *v157;
  JSValue *v158;
  JSValue *v159;
  JSValue *v160;
  JSValue *v161;
  JSValue *v162;
  JSValue *v163;
  JSValue *v164;
  JSValue *v165;
  JSValue *v166;
  JSValue *v167;
  JSValue *v168;
  JSValue *v169;
  JSValue *v170;
  JSValue *v171;
  JSValue *v172;
  JSValue *v173;
  JSValue *v174;
  JSValue *v175;
  JSValue *v176;
  JSValue *v177;
  JSValue *v178;
  JSValue *v179;
  JSValue *v180;
  JSValue *v181;
  JSValue *v182;
  JSValue *v183;
  JSValue *v184;
  JSValue *v185;
  JSValue *v186;
  JSValue *v187;
  JSValue *v188;
  JSValue *v189;
  JSValue *v190;
  JSValue *v191;
  JSValue *v192;
  JSValue *v193;
  JSValue *v194;
  JSValue *v195;
  JSValue *v196;
  JSValue *v197;
  JSValue *v198;
  JSValue *v199;
  JSValue *v200;
  JSValue *v201;
  JSValue *v202;
  JSValue *v203;
  JSValue *v204;
  JSValue *v205;
  JSValue *v206;
  JSValue *v207;
  JSValue *v208;
  JSValue *v209;
  JSValue *v210;
  JSValue *v211;
  JSValue *v212;
  JSValue *v213;
  JSValue *v214;
  JSValue *v215;
  JSValue *v216;
  JSValue *v217;
  JSValue *v218;
  JSValue *v219;
  JSValue *v220;
  JSValue *v221;
  JSValue *v222;
  JSValue *v223;
  JSValue *v224;
  JSValue *v225;
  JSValue *v226;
  JSValue *v227;
  JSValue *v228;
  JSValue *v229;

  v2 = -[JSContext objectForKeyedSubscript:](context, "objectForKeyedSubscript:", CFSTR("_SceneKitIsLoaded"));
  if (!v2 || !-[JSValue toBool](v2, "toBool"))
  {
    if (SCNExportJavaScriptModule_onceToken != -1)
      dispatch_once(&SCNExportJavaScriptModule_onceToken, &__block_literal_global_121);
    v3 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNMaterialProperty"), v3);
    v4 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNBoundingBox"), v4);
    v5 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNBoundingSphere"), v5);
    v6 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNTransaction"), v6);
    v7 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNColor"), v7);
    v8 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("CAMediaTimingFunction"), v8);
    v9 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("CABasicAnimation"), v9);
    v10 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("CAAnimationGroup"), v10);
    v11 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("CAKeyframeAnimation"), v11);
    v12 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("CALayer"), v12);
    v13 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNImage"), v13);
    v14 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNValue"), v14);
    v15 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNView"), v15);
    v16 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNNode"), v16);
    v17 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNGeometry"), v17);
    v18 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsWorld"), v18);
    v19 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNMaterialProperty"), v19);
    v20 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsBody"), v20);
    v21 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNTransformConstraint"), v21);
    v22 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNLookAtConstraint"), v22);
    v23 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNLight"), v23);
    v24 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNCylinder"), v24);
    v25 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNGeometryElement"), v25);
    v26 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNIKConstraint"), v26);
    v27 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNRenderer"), v27);
    v28 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNTube"), v28);
    v29 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNParticleSystem"), v29);
    v30 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNMorpher"), v30);
    v31 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNBox"), v31);
    v32 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNCamera"), v32);
    v33 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNLevelOfDetail"), v33);
    v34 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNMaterial"), v34);
    v35 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNProgram"), v35);
    v36 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNParticlePropertyController"), v36);
    v37 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNConstraint"), v37);
    v38 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPlane"), v38);
    v39 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNCone"), v39);
    v40 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsBehavior"), v40);
    v41 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsHingeJoint"), v41);
    v42 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsField"), v42);
    v43 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNGeometrySource"), v43);
    v44 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNTorus"), v44);
    v45 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNScene"), v45);
    v46 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsShape"), v46);
    v47 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNCapsule"), v47);
    v48 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNFloor"), v48);
    v49 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNShape"), v49);
    v50 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNText"), v50);
    v51 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNTechnique"), v51);
    v52 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPyramid"), v52);
    v53 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNSceneSource"), v53);
    v54 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNSphere"), v54);
    v55 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsBallSocketJoint"), v55);
    v56 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsSliderJoint"), v56);
    v57 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsContact"), v57);
    v58 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNHitTestResult"), v58);
    v59 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNAnimationEvent"), v59);
    v60 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsVehicle"), v60);
    v61 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNPhysicsVehicleWheel"), v61);
    v62 = (objc_class *)objc_opt_class();
    _exposeClass(context, CFSTR("SCNAction"), v62);
    v63 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v63, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNActionTimingModeLinear"));
    v64 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v64, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNActionTimingModeEaseIn"));
    v65 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v65, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNActionTimingModeEaseOut"));
    v66 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v66, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNActionTimingModeEaseInEaseOut"));
    v67 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v67, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNEditingLocalSpace"));
    v68 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v68, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNEditingParentSpace"));
    v69 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v69, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNEditingWorldSpace"));
    v70 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v70, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNEditingScreenSpace"));
    v71 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v71, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNManipulatorPositionCenter"));
    v72 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v72, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNManipulatorPositionMin"));
    v73 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v73, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNManipulatorPositionMax"));
    v74 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v74, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNAuthoringDisplayBoundingBoxes"));
    v75 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v75, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNAuthoringDisplayBoundingSpheres"));
    v76 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v76, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNAuthoringDisplayCameraFrustum"));
    v77 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v77, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 8), CFSTR("SCNAuthoringDisplayLightExtents"));
    v78 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v78, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 16), CFSTR("SCNAuthoringDisplayCameraPosition"));
    v79 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v79, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 32), CFSTR("SCNAuthoringDisplayLightPosition"));
    v80 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v80, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 64), CFSTR("SCNAuthoringDisplayPhysics"));
    v81 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v81, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 128), CFSTR("SCNAuthoringDisplayPhysicsFields"));
    v82 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v82, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 256), CFSTR("SCNAuthoringDisplayGrid"));
    v83 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v83, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 512), CFSTR("SCNAuthoringDisplayLightProbes"));
    v84 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v84, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1024), CFSTR("SCNAuthoringDisplayWireframe"));
    v85 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v85, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2048), CFSTR("SCNAuthoringDisplaySkeletons"));
    v86 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v86, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0x2000), CFSTR("SCNAuthoringDisplayConstraints"));
    v87 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v87, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0x4000), CFSTR("SCNAuthoringDisplayCreases"));
    v88 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v88, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4096), CFSTR("SCNAuthoringDisplayLightInfluence"));
    v89 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v89, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNAuthoringCameraPerspective"));
    v90 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v90, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNAuthoringCameraTop"));
    v91 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v91, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNAuthoringCameraBottom"));
    v92 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v92, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNAuthoringCameraLeft"));
    v93 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v93, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNAuthoringCameraRight"));
    v94 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v94, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 5), CFSTR("SCNAuthoringCameraFront"));
    v95 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v95, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 6), CFSTR("SCNAuthoringCameraBack"));
    v96 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v96, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCameraProjectionDirectionVertical"));
    v97 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v97, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCameraProjectionDirectionHorizontal"));
    v98 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v98, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNInteractionModeFly"));
    v99 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v99, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNInteractionModeOrbitTurntable"));
    v100 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v100, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNInteractionModeOrbitAngleMapping"));
    v101 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v101, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNInteractionModeOrbitCenteredArcball"));
    v102 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v102, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNInteractionModeOrbitArcball"));
    v103 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v103, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 5), CFSTR("SCNInteractionModePan"));
    v104 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v104, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 6), CFSTR("SCNInteractionModeTruck"));
    v105 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v105, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCameraFieldOfViewOrientationVertical"));
    v106 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v106, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCameraFieldOfViewOrientationHorizontal"));
    v107 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v107, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCameraExposureAdaptationModeFrameLuminance"));
    v108 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v108, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCameraExposureAdaptationModeHistogramLuminance"));
    v109 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v109, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCameraFillModeFill"));
    v110 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v110, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCameraFillModeLetterbox"));
    v111 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v111, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNGeometryPrimitiveTypeTriangles"));
    v112 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v112, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNGeometryPrimitiveTypeTriangleStrip"));
    v113 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v113, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNGeometryPrimitiveTypeLine"));
    v114 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v114, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNGeometryPrimitiveTypePoint"));
    v115 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v115, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNGeometryPrimitiveTypePolygon"));
    v116 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v116, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNTessellationSmoothingModeNone"));
    v117 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v117, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNTessellationSmoothingModePNTriangles"));
    v118 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v118, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNTessellationSmoothingModePhong"));
    v119 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v119, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNSubdivisionBoundaryInterpolationRuleNone"));
    v120 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v120, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNSubdivisionBoundaryInterpolationRuleEdgeOnly"));
    v121 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v121, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNSubdivisionBoundaryInterpolationRuleEdgeAndCorner"));
    v122 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v122, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearNone"));
    v123 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v123, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly"));
    v124 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v124, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1"));
    v125 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v125, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2"));
    v126 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v126, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearBoundaries"));
    v127 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v127, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 5), CFSTR("SCNSubdivisionFaceVaryingInterpolationRuleLinearAll"));
    v128 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v128, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNSubdivisionNormalSmoothingModeCrossTriangle"));
    v129 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v129, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNSubdivisionNormalSmoothingModeCrossQuad"));
    v130 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v130, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNSubdivisionNormalSmoothingModeLimit"));
    v131 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v131, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNHitTestSearchModeClosest"));
    v132 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v132, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNHitTestSearchModeAll"));
    v133 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v133, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNHitTestSearchModeAny"));
    v134 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v134, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNLevelOfDetailThresholdModeWorldSpaceDistance"));
    v135 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v135, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNLevelOfDetailThresholdModeScreenSpaceRadius"));
    v136 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v136, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNShadowModeForward"));
    v137 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v137, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNShadowModeDeferred"));
    v138 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v138, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNShadowModeModulated"));
    v139 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v139, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNMorpherCalculationModeNormalized"));
    v140 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v140, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNMorpherCalculationModeAdditive"));
    v141 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v141, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNMovabilityHintFixed"));
    v142 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v142, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNMovabilityHintMovable"));
    v143 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v143, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNChamferModeBoth"));
    v144 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v144, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNChamferModeFront"));
    v145 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v145, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNChamferModeBack"));
    v146 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v146, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleSortingModeNone"));
    v147 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v147, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleSortingModeProjectedDepth"));
    v148 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v148, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleSortingModeDistance"));
    v149 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v149, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNParticleSortingModeOldestFirst"));
    v150 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v150, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNParticleSortingModeYoungestFirst"));
    v151 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v151, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleBlendModeAdditive"));
    v152 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v152, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleBlendModeSubtract"));
    v153 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v153, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleBlendModeMultiply"));
    v154 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v154, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNParticleBlendModeScreen"));
    v155 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v155, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNParticleBlendModeAlpha"));
    v156 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v156, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 5), CFSTR("SCNParticleBlendModeReplace"));
    v157 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v157, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleOrientationModeBillboardScreenAligned"));
    v158 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v158, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleOrientationModeBillboardViewAligned"));
    v159 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v159, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleOrientationModeFree"));
    v160 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v160, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNParticleOrientationModeBillboardYAligned"));
    v161 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v161, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleBirthLocationSurface"));
    v162 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v162, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleBirthLocationVolume"));
    v163 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v163, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleBirthLocationVertex"));
    v164 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v164, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleBirthDirectionConstant"));
    v165 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v165, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleBirthDirectionSurfaceNormal"));
    v166 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v166, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleBirthDirectionRandom"));
    v167 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v167, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleImageSequenceAnimationModeRepeat"));
    v168 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v168, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleImageSequenceAnimationModeClamp"));
    v169 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v169, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleImageSequenceAnimationModeAutoReverse"));
    v170 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v170, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleInputModeOverLife"));
    v171 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v171, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleInputModeOverDistance"));
    v172 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v172, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleInputModeOverOtherProperty"));
    v173 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v173, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleModifierStagePreDynamics"));
    v174 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v174, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleModifierStagePostDynamics"));
    v175 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v175, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleModifierStagePreCollision"));
    v176 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v176, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNParticleModifierStagePostCollision"));
    v177 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v177, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleEventBirth"));
    v178 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v178, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleEventDeath"));
    v179 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v179, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleEventCollision"));
    v180 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v180, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNParticleRenderingModeSprite"));
    v181 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v181, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNParticleRenderingModePointSprite"));
    v182 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v182, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNParticleRenderingModeTrail"));
    v183 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v183, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNParticleRenderingModeBeam"));
    v184 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v184, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNParticleRenderingModeGeometry"));
    v185 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v185, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNReferenceLoadingPolicyImmediate"));
    v186 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v186, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNReferenceLoadingPolicyOnDemand"));
    v187 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v187, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNAntialiasingModeNone"));
    v188 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v188, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNAntialiasingModeMultisampling2X"));
    v189 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v189, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNAntialiasingModeMultisampling4X"));
    v190 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v190, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNRenderingAPIMetal"));
    v191 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v191, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNRenderingAPIOpenGLES2"));
    v192 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v192, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNSceneSourceStatusParsing"));
    v193 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v193, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 8), CFSTR("SCNSceneSourceStatusValidating"));
    v194 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v194, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 12), CFSTR("SCNSceneSourceStatusProcessing"));
    v195 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v195, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 16), CFSTR("SCNSceneSourceStatusComplete"));
    v196 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v196, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0xFFFFFFFFLL), CFSTR("SCNSceneSourceStatusError"));
    v197 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v197, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCullBack"));
    v198 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v198, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCullFront"));
    v199 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v199, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNBufferFrequencyPerFrame"));
    v200 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v200, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNBufferFrequencyPerNode"));
    v201 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v201, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNBufferFrequencyPerShadable"));
    v202 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v202, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNFillModeFill"));
    v203 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v203, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNFillModeLines"));
    v204 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v204, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNCullModeBack"));
    v205 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v205, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNCullModeFront"));
    v206 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v206, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNTransparencyModeAOne"));
    v207 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v207, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNTransparencyModeRGBZero"));
    v208 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v208, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNTransparencyModeSingleLayer"));
    v209 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v209, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNTransparencyModeDualLayer"));
    v210 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v210, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNTransparencyModeDefault"));
    v211 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v211, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNBlendModeAlpha"));
    v212 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v212, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNBlendModeAdd"));
    v213 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v213, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNBlendModeSubtract"));
    v214 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v214, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 3), CFSTR("SCNBlendModeMultiply"));
    v215 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v215, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNBlendModeScreen"));
    v216 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v216, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 5), CFSTR("SCNBlendModeReplace"));
    v217 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v217, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 6), CFSTR("SCNBlendModeMax"));
    v218 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v218, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNFilterModeNone"));
    v219 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v219, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNFilterModeNearest"));
    v220 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v220, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNFilterModeLinear"));
    v221 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v221, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNWrapModeClamp"));
    v222 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v222, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNWrapModeRepeat"));
    v223 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v223, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 4), CFSTR("SCNWrapModeMirror"));
    v224 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v224, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNPhysicsBodyTypeStatic"));
    v225 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v225, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNPhysicsBodyTypeDynamic"));
    v226 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v226, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2), CFSTR("SCNPhysicsBodyTypeKinematic"));
    v227 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v227, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0), CFSTR("SCNPhysicsFieldScopeInsideExtent"));
    v228 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v228, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("SCNPhysicsFieldScopeOutsideExtent"));
    v229 = -[JSContext globalObject](context, "globalObject");
    -[JSValue setValue:forProperty:](v229, "setValue:forProperty:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 1), CFSTR("_SceneKitIsLoaded"));
  }
}

uint64_t _exposeClass(void *a1, void *a2, objc_class *a3)
{
  uint64_t result;
  objc_class *Superclass;
  objc_class *v8;
  NSString *v9;
  void *v10;
  Protocol *Protocol;

  result = objc_opt_class();
  if ((objc_class *)result != a3)
  {
    Superclass = class_getSuperclass(a3);
    if (Superclass)
    {
      v8 = Superclass;
      v9 = NSStringFromClass(Superclass);
      _exposeClass(a1, v9, v8);
    }
    result = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "globalObject"), "valueForProperty:", a2), "isUndefined");
    if ((_DWORD)result)
    {
      if (objc_msgSend(a2, "hasPrefix:", CFSTR("CA")))
      {
        v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SCNJS%@JSExport"), objc_msgSend(a2, "substringFromIndex:", 2));
      }
      else if (objc_msgSend(a2, "hasPrefix:", CFSTR("NS")))
      {
        v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("SCN%@JSExport"), objc_msgSend(a2, "substringFromIndex:", 2));
      }
      else
      {
        v10 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@JSExport"), a2);
      }
      Protocol = objc_getProtocol((const char *)objc_msgSend(v10, "UTF8String"));
      if (Protocol
        || (result = objc_opt_respondsToSelector(), (result & 1) != 0)
        && (result = -[objc_class SCNJSExportProtocol](a3, "SCNJSExportProtocol"), (Protocol = (Protocol *)result) != 0))
      {
        class_addProtocol(a3, Protocol);
        return objc_msgSend((id)objc_msgSend(a1, "globalObject"), "setValue:forProperty:", a3, a2);
      }
    }
  }
  return result;
}

uint64_t C3DRenderBufferGetSlotForOutputBufferType(int a1, unint64_t a2)
{
  NSObject *v3;

  switch(a1)
  {
    case 0:
      goto LABEL_5;
    case 5:
      LOBYTE(a2) = 5;
      return (char)a2;
    case 1:
      if (a2 >= 4)
LABEL_5:
        LOBYTE(a2) = 4;
      break;
    default:
      v3 = scn_default_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        C3DRenderBufferGetSlotForOutputBufferType_cold_1(a1, v3);
      LOBYTE(a2) = 7;
      break;
  }
  return (char)a2;
}

uint64_t C3DRenderTargetDescriptionMake(unsigned int a1, int a2)
{
  uint64_t v2;

  v2 = 256;
  if (a2)
    v2 = 16777472;
  return v2 | a1;
}

void _C3DRenderTargetCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(const void **)(a1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 56) = 0;
  }
}

CFStringRef _C3DRenderTargetCFCopyFormatDescription(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator((CFTypeRef)a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRenderTarget %p - texture:%@ rbo:%d>"), a1, *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

CFStringRef _C3DRenderTargetCFCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator((CFTypeRef)a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRenderTarget %p - texture:%@ rbo:%d>"), a1, *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 32));
}

uint64_t C3DRenderTargetCreate()
{
  if (C3DRenderTargetGetTypeID_onceToken != -1)
    dispatch_once(&C3DRenderTargetGetTypeID_onceToken, &__block_literal_global_122);
  return C3DTypeCreateInstance_(C3DRenderTargetGetTypeID_typeID, 0x48uLL);
}

uint64_t C3DRenderTargetGetDescription(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

void C3DRenderTargetSetDescription(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 16) = a2;
}

uint64_t C3DRenderTargetGetTexture(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 24);
}

CFTypeRef C3DRenderTargetSetTexture(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

void C3DRenderTargetSetRenderBuffer(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 32) = a2;
}

uint64_t C3DRenderTargetGetRenderBuffer(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationManagerApplyAnimationsForTarget_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 32);
}

uint64_t C3DRenderTargetGetCIImage(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

CFTypeRef C3DRenderTargetSetCIImage(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 56);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

uint64_t C3DRenderTargetSetNameIndex(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

void _C3DShaderModifierCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }
  v7 = (const void *)a1[4];
  if (v7)
  {
    CFRelease(v7);
    a1[4] = 0;
  }
  v8 = (const void *)a1[5];
  if (v8)
  {
    CFRelease(v8);
    a1[5] = 0;
  }
  v9 = (const void *)a1[6];
  if (v9)
  {
    CFRelease(v9);
    a1[6] = 0;
  }
}

__CFString *_C3DShaderModifierCFCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;
  __CFString *v3;
  const char *v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = Mutable;
  if (*(_DWORD *)(a1 + 100))
    v4 = "GLSL";
  else
    v4 = "Metal";
  CFStringAppendFormat(Mutable, 0, CFSTR("<C3DShaderModifier %p language:%s, entryPoint:\"%d\" flags:%x\n"), a1, v4, *(unsigned int *)(a1 + 88), *(__int16 *)(a1 + 92));
  if (*(_QWORD *)(a1 + 16))
    CFStringAppendFormat(v3, 0, CFSTR("  declaration : %@\n"), *(_QWORD *)(a1 + 16));
  if (*(_QWORD *)(a1 + 56))
    CFStringAppendFormat(v3, 0, CFSTR("  arguments : %@\n"), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)(a1 + 72))
    CFStringAppendFormat(v3, 0, CFSTR("  varyings : %@\n"), *(_QWORD *)(a1 + 72));
  if (*(_QWORD *)(a1 + 24))
    CFStringAppendFormat(v3, 0, CFSTR("  code : %@\n"), *(_QWORD *)(a1 + 24));
  CFStringAppend(v3, CFSTR(">"));
  return v3;
}

uint64_t C3DShaderModifierGetArgumentsDefaultValues(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShaderModifierGetDeclaration_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

void C3DShaderModifierEnumeratePossibleDefinesUsingBlock(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];
  _QWORD v4[5];
  _QWORD v5[5];
  _QWORD v6[5];

  if (C3DGetSurfacePropertiesToDefines_onceToken != -1)
    dispatch_once(&C3DGetSurfacePropertiesToDefines_onceToken, &__block_literal_global_3_7);
  v2 = MEMORY[0x1E0C809B0];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __C3DShaderModifierEnumeratePossibleDefinesUsingBlock_block_invoke;
  v6[3] = &unk_1EA5A49A0;
  v6[4] = a1;
  C3DCFDictionaryApplyBlock((const __CFDictionary *)C3DGetSurfacePropertiesToDefines_s_dic, (uint64_t)v6);
  if (C3DGetTexturePropertiesToDefines_onceToken != -1)
    dispatch_once(&C3DGetTexturePropertiesToDefines_onceToken, &__block_literal_global_70_0);
  v5[0] = v2;
  v5[1] = 0x40000000;
  v5[2] = __C3DShaderModifierEnumeratePossibleDefinesUsingBlock_block_invoke_2;
  v5[3] = &unk_1EA5A49C8;
  v5[4] = a1;
  C3DCFDictionaryApplyBlock((const __CFDictionary *)C3DGetTexturePropertiesToDefines_s_dic, (uint64_t)v5);
  if (C3DGetGeometryPropertiesToDefines_onceToken != -1)
    dispatch_once(&C3DGetGeometryPropertiesToDefines_onceToken, &__block_literal_global_77);
  v4[0] = v2;
  v4[1] = 0x40000000;
  v4[2] = __C3DShaderModifierEnumeratePossibleDefinesUsingBlock_block_invoke_3;
  v4[3] = &unk_1EA5A49F0;
  v4[4] = a1;
  C3DCFDictionaryApplyBlock((const __CFDictionary *)C3DGetGeometryPropertiesToDefines_s_dic, (uint64_t)v4);
  if (C3DGetFramebufferPropertiesToDefines_onceToken != -1)
    dispatch_once(&C3DGetFramebufferPropertiesToDefines_onceToken, &__block_literal_global_107);
  v3[0] = v2;
  v3[1] = 0x40000000;
  v3[2] = __C3DShaderModifierEnumeratePossibleDefinesUsingBlock_block_invoke_4;
  v3[3] = &unk_1EA5A4A18;
  v3[4] = a1;
  C3DCFDictionaryApplyBlock((const __CFDictionary *)C3DGetFramebufferPropertiesToDefines_s_dic, (uint64_t)v3);
}

uint64_t C3DShaderModifierGetEffectPropertyMaskForTexcoordsUse(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShaderModifierGetDeclaration_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int16 *)(a1 + 94);
}

uint64_t C3DShaderModifierGetMappingChannelyMaskForTexcoordsUse(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DShaderModifierGetDeclaration_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int16 *)(a1 + 96);
}

uint64_t C3DShaderModifierBindUniforms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t RendererElementState;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;

  RendererElementState = C3DEngineContextGetRendererElementState(a2);
  if (!a1)
  {
    v9 = scn_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      C3DShaderModifierGetDeclaration_cold_1(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  if (!*(_QWORD *)(a1 + 48))
    return 0;
  v18[0] = C3DEngineContextGetRendererContextGL(a2);
  v18[1] = C3DEngineContextGetResourceManager(a2);
  v18[2] = C3DRendererElementStateGetCurrentProgramObject(RendererElementState);
  v18[3] = a3;
  v18[4] = a4;
  v19 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 48), (CFDictionaryApplierFunction)__bindUniform, v18);
  return v19;
}

void __bindUniform(void *key, __int16 a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t UniformLocationOfSymbolNamed;
  uint64_t v8;
  const __CFDictionary *ValueForKey;
  uint64_t v10;
  CFTypeID v11;
  __CFString *v12;
  uint64_t v13;
  _DWORD *Default;
  const void *v15;
  float32x2_t *ImageResident;
  int v17;

  v6 = *(_QWORD *)(a3 + 24);
  UniformLocationOfSymbolNamed = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(*(_QWORD *)(a3 + 16), key);
  if (UniformLocationOfSymbolNamed != -1)
  {
    v8 = UniformLocationOfSymbolNamed;
    if (v6 && (ValueForKey = C3DEntityGetValueForKey(v6, key)) != 0)
    {
      v10 = (uint64_t)ValueForKey;
      v11 = CFGetTypeID(ValueForKey);
      if (v11 == C3DEffectSlotGetTypeID())
      {
        if (C3DKeyframeControllerHasInterpolationModesPerKey(v10))
        {
          v12 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("u_%@TextureMatrix"), key);
          v13 = C3DFXGLSLProgramObjectGetUniformLocationOfSymbolNamed(*(_QWORD *)(a3 + 16), v12);
          CFRelease(v12);
        }
        else
        {
          v13 = -1;
        }
        if (C3DRendererContextBindEffectSlot(*(float32x2_t **)a3, *(_QWORD *)(a3 + 8), v10, v8, *(_DWORD *)(a3 + 40) + *(_DWORD *)(a3 + 32), v13))goto LABEL_15;
      }
      else if (C3DValueGetTypeID() == v11)
      {
        C3DRendererContextSetValueUniformAtLocation(*(_QWORD *)a3, v8, v10, a2, 1);
      }
    }
    else if (a2 == 5)
    {
      Default = C3DImageGetDefault();
      v15 = (const void *)C3DTextureSamplerGetDefault();
      ImageResident = C3DResourceManagerMakeImageResident(*(_QWORD *)(a3 + 8), Default, v15, *(float32x2_t **)a3);
      if (v15)
      {
        if (ImageResident)
        {
          v17 = *(_DWORD *)(a3 + 40) + *(_DWORD *)(a3 + 32);
          C3DRendererContextBindTexture(*(_QWORD *)a3, ImageResident, (uint64_t)v15, 0, v17);
          C3DRendererContextSetIntUniformAtLocation(*(_QWORD *)a3, v8, v17);
LABEL_15:
          ++*(_QWORD *)(a3 + 40);
        }
      }
    }
  }
}

uint64_t SCNNSValueFromTypedBytes(float32x2_t *a1, int a2, double a3, double a4, double a5, double a6)
{
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  result = 0;
  switch(a2)
  {
    case 1:
    case 7:
      LODWORD(a3) = a1->i32[0];
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a3);
      break;
    case 2:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1->i32[0]);
      break;
    case 3:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1->u8[0]);
      break;
    case 4:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", a1->i8[0]);
      break;
    case 5:
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithPointer:", *a1);
      break;
    case 6:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1);
      break;
    case 8:
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", vcvtq_f64_f32(*a1));
      break;
    case 9:
      LODWORD(a3) = a1->i32[0];
      LODWORD(a4) = a1->i32[1];
      LODWORD(a5) = a1[1].i32[0];
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:", a3, a4, a5);
      break;
    case 10:
      LODWORD(a3) = a1->i32[0];
      LODWORD(a4) = a1->i32[1];
      LODWORD(a5) = a1[1].i32[0];
      LODWORD(a6) = a1[1].i32[1];
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector4:", a3, a4, a5, a6);
      break;
    case 11:
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      C3DMatrix4x4ToSCNMatrix4((uint64_t)a1, &v9);
      v8[0] = v9;
      v8[1] = v10;
      v8[2] = v11;
      v8[3] = v12;
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", v8);
      break;
    case 13:
      result = objc_msgSend(MEMORY[0x1E0CEA478], "scn_colorWithC3DColor:", a1);
      break;
    case 16:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", a1->u8[0]);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SCNDefaultValueWithBaseType(int a1, double a2, double a3, double a4, double a5)
{
  uint64_t result;
  NSObject *v7;
  SCNMatrix4 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 1:
    case 7:
    case 15:
      LODWORD(a2) = 0;
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", a2);
      break;
    case 2:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 0);
      break;
    case 3:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 0);
      break;
    case 4:
    case 16:
    case 21:
    case 22:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", 0);
      break;
    case 5:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", 0);
      break;
    case 6:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 0.0);
      break;
    case 8:
    case 18:
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", 0.0, 0.0);
      break;
    case 9:
    case 19:
      LODWORD(a2) = 0;
      LODWORD(a3) = 0;
      LODWORD(a4) = 0;
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:", a2, a3, a4);
      break;
    case 10:
    case 13:
    case 20:
      LODWORD(a2) = 0;
      LODWORD(a3) = 0;
      LODWORD(a4) = 0;
      LODWORD(a5) = 0;
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector4:", a2, a3, a4, a5);
      break;
    case 11:
    case 12:
      v8 = SCNMatrix4Identity;
      result = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v8);
      break;
    case 14:
    case 17:
      result = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedShort:", 0);
      break;
    default:
      v7 = scn_default_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8.m11 = 1.5047e-36;
        LODWORD(v8.m12) = a1;
        _os_log_impl(&dword_1DCCB8000, v7, OS_LOG_TYPE_DEFAULT, "Warning: SCNDefaultValueWithBaseType - unknwon base type %d", (uint8_t *)&v8, 8u);
      }
      result = 0;
      break;
  }
  return result;
}

uint64_t SCNFloat_setter(void *a1, SEL aSelector, float a3)
{
  NSString *v5;
  uint64_t v6;
  double v7;

  v5 = NSStringFromSelector(aSelector);
  v6 = propertyNameForSetter(v5);
  *(float *)&v7 = a3;
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7), v6);
}

uint64_t SCNInteger_setter(void *a1, SEL aSelector, uint64_t a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3), propertyNameForSetter(v5));
}

uint64_t SCNBoolean_setter(void *a1, SEL aSelector, uint64_t a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3), propertyNameForSetter(v5));
}

uint64_t SCNChar_setter(void *a1, SEL aSelector, uint64_t a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithChar:", a3), propertyNameForSetter(v5));
}

uint64_t SCNDouble_setter(void *a1, SEL aSelector, double a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3), propertyNameForSetter(v5));
}

uint64_t SCNC3DFloat_setter(void *a1, SEL aSelector, float a3)
{
  NSString *v5;
  uint64_t v6;
  double v7;

  v5 = NSStringFromSelector(aSelector);
  v6 = propertyNameForSetter(v5);
  *(float *)&v7 = a3;
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v7), v6);
}

uint64_t SCNVector2_setter(void *a1, SEL aSelector, double a3, double a4)
{
  NSString *v7;

  v7 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithCGPoint:", a3, a4), propertyNameForSetter(v7));
}

uint64_t SCNVector3_setter(void *a1, SEL aSelector, float a3, float a4, float a5)
{
  NSString *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;

  v9 = NSStringFromSelector(aSelector);
  v10 = propertyNameForSetter(v9);
  *(float *)&v11 = a3;
  *(float *)&v12 = a4;
  *(float *)&v13 = a5;
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:", v11, v12, v13), v10);
}

uint64_t SCNVector4_setter(void *a1, SEL aSelector, float a3, float a4, float a5, float a6)
{
  NSString *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;

  v11 = NSStringFromSelector(aSelector);
  v12 = propertyNameForSetter(v11);
  *(float *)&v13 = a3;
  *(float *)&v14 = a4;
  *(float *)&v15 = a5;
  *(float *)&v16 = a6;
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector4:", v13, v14, v15, v16), v12);
}

uint64_t SCNMatrix4x4_setter(void *a1, SEL aSelector, _OWORD *a3)
{
  NSString *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[4];

  v5 = NSStringFromSelector(aSelector);
  v6 = propertyNameForSetter(v5);
  v7 = a3[1];
  v10[0] = *a3;
  v10[1] = v7;
  v8 = a3[3];
  v10[2] = a3[2];
  v10[3] = v8;
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", v10), v6);
}

uint64_t SCNShort_setter(void *a1, SEL aSelector, uint64_t a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", a3), propertyNameForSetter(v5));
}

uint64_t SCNPointer_setter(void *a1, SEL aSelector, uint64_t a3)
{
  NSString *v5;

  v5 = NSStringFromSelector(aSelector);
  return objc_msgSend(a1, "setValue:forUndefinedKey:", a3, propertyNameForSetter(v5));
}

uint64_t SCNFloat_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "floatValue");
}

uint64_t SCNInteger_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "intValue");
}

uint64_t SCNBoolean_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "BOOLValue");
}

uint64_t SCNChar_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "charValue");
}

uint64_t SCNDouble_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "doubleValue");
}

uint64_t SCNC3DFloat_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "floatValue");
}

uint64_t SCNVector2_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "CGPointValue");
}

uint64_t SCNVector3_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "SCNVector3Value");
}

uint64_t SCNVector4_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "SCNVector4Value");
}

double SCNMatrix4x4_getter@<D0>(SEL aSelector@<X1>, void *a2@<X0>, _OWORD *a3@<X8>)
{
  void *v4;
  double result;

  v4 = (void *)objc_msgSend(a2, "valueForUndefinedKey:", NSStringFromSelector(aSelector));
  if (v4)
  {
    objc_msgSend(v4, "SCNMatrix4Value");
  }
  else
  {
    result = 0.0;
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t SCNShort_getter(void *a1, SEL aSelector)
{
  return objc_msgSend((id)objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector)), "shortValue");
}

uint64_t SCNPointer_getter(void *a1, SEL aSelector)
{
  objc_msgSend(a1, "valueForUndefinedKey:", NSStringFromSelector(aSelector));
  return objc_opt_self();
}

void __analyseUniformDeclaration(const __CFString *a1, uint64_t a2, char a3)
{
  CFIndex Length;
  CFIndex v6;
  NSObject *v7;
  int v8;
  CFIndex v9;
  const __CFString *v10;
  const __CFString *v11;
  int v12;
  CFIndex v13;
  CFStringRef v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  CFIndex v19;
  CFIndex CurrentTokenRange;
  CFIndex v21;
  char v22;
  CFIndex v23;
  int v24;
  const __CFAllocator *alloc;
  _OWORD v27[16];
  CFRange v28;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;

  memset(v27, 0, 240);
  Length = CFStringGetLength(a1);
  C3DStringTokenizerInit((uint64_t)v27, a1, 0, Length, 1);
  C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
  if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v27))
    C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
  v28.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v27);
  v28.length = v6;
  if (CFStringCompareWithOptions(a1, CFSTR("uniform"), v28, 0))
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      __analyseUniformDeclaration_cold_1((uint64_t)a1, v7);
    return;
  }
  if ((a3 & 1) == 0)
    CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, CFSTR("%@\n"), a1);
  if (C3DStringTokenizerAdvanceToNextToken((uint64_t)v27))
  {
    v24 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v8 = v24;
      if ((_WORD)v24)
        goto LABEL_51;
      if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v27))
        C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
      v29.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v27);
      v29.length = v9;
      v10 = CFStringCreateWithSubstring(alloc, a1, v29);
      v11 = v10;
      v12 = *(_DWORD *)(a2 + 76) ? C3DBaseTypeFromGLSLString(v10) : C3DBaseTypeFromMetalString(v10);
      v8 = v12;
      CFRelease(v11);
      C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
      if (v8)
      {
LABEL_51:
        if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v27))
          C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
        v30.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v27);
        v30.length = v13;
        v14 = CFStringCreateWithSubstring(alloc, a1, v30);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 24), v14, (const void *)(__int16)v8);
        CFRelease(v14);
      }
      if (C3DStringTokenizerAdvanceToNextToken((uint64_t)v27))
        break;
LABEL_46:
      if ((C3DStringTokenizerAdvanceToNextToken((uint64_t)v27) & 1) == 0)
        return;
    }
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      CurrentTokenRange = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v27);
      v21 = v19;
      if ((v17 & 1) != 0)
      {
        v31.location = CurrentTokenRange;
        v31.length = v19;
        if (CFStringCompareWithOptions(a1, CFSTR("/"), v31, 0) == kCFCompareEqualTo)
        {
          v22 = 0;
          v16 = !v15;
          goto LABEL_39;
        }
        v32.location = CurrentTokenRange;
        v32.length = v21;
        v22 = 0;
        v15 = CFStringCompareWithOptions(a1, CFSTR("*"), v32, 0) == kCFCompareEqualTo;
        v16 = 1;
      }
      else
      {
        v33.location = CurrentTokenRange;
        v33.length = v19;
        if (CFStringCompareWithOptions(a1, CFSTR(";"), v33, 0) == kCFCompareEqualTo)
        {
          C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
          if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v27))
            C3DStringTokenizerAdvanceToNextToken((uint64_t)v27);
          v39.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v27);
          v39.length = v23;
          if (CFStringCompareWithOptions(a1, CFSTR("uniform"), v39, 0) == kCFCompareEqualTo)
          {
            v24 = 0;
            goto LABEL_46;
          }
          return;
        }
        v34.location = CurrentTokenRange;
        v34.length = v21;
        if (CFStringCompareWithOptions(a1, CFSTR("/"), v34, 0) == kCFCompareEqualTo)
        {
          if ((v16 & 1) != 0)
            return;
          v16 = 0;
          v15 = 0;
          v22 = 1;
          goto LABEL_40;
        }
        v35.location = CurrentTokenRange;
        v35.length = v21;
        if (CFStringCompareWithOptions(a1, CFSTR("*"), v35, 0))
        {
          v36.location = CurrentTokenRange;
          v36.length = v21;
          if (CFStringCompareWithOptions(a1, CFSTR("("), v36, 0))
          {
            v37.location = CurrentTokenRange;
            v37.length = v21;
            if (CFStringCompareWithOptions(a1, CFSTR(")"), v37, 0) == kCFCompareEqualTo)
            {
              v18 = 0;
LABEL_38:
              v16 = 0;
              v22 = 0;
LABEL_39:
              v15 = 0;
              goto LABEL_40;
            }
            v38.location = CurrentTokenRange;
            v38.length = v21;
            if (CFStringCompareWithOptions(a1, CFSTR(","), v38, 0))
              goto LABEL_38;
            if ((v18 & 1) == 0)
            {
              v24 = v8;
              goto LABEL_46;
            }
          }
          v16 = 0;
          v22 = 0;
          v15 = 0;
          v18 = 1;
        }
        else
        {
          v22 = 0;
          v15 = 1;
        }
      }
LABEL_40:
      v17 = v16;
      v16 = v22;
      if ((C3DStringTokenizerAdvanceToNextToken((uint64_t)v27) & 1) == 0)
        goto LABEL_46;
    }
  }
}

void __analyseVaryingDeclaration(const __CFString *a1, uint64_t a2)
{
  CFIndex Length;
  CFIndex v5;
  const __CFAllocator *v6;
  CFStringRef v7;
  CFIndex v8;
  CFStringRef v9;
  _OWORD v10[15];
  CFRange v11;
  CFRange v12;

  memset(v10, 0, sizeof(v10));
  Length = CFStringGetLength(a1);
  C3DStringTokenizerInit((uint64_t)v10, a1, 0, Length, 1);
  C3DStringTokenizerAdvanceToNextToken((uint64_t)v10);
  if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v10))
    C3DStringTokenizerAdvanceToNextToken((uint64_t)v10);
  v11.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v10);
  v11.length = v5;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v11);
  C3DStringTokenizerAdvanceToNextToken((uint64_t)v10);
  if (C3DStringTokenizerIsCurrentIsTokenWhiteSpaceOnly((uint64_t)v10))
    C3DStringTokenizerAdvanceToNextToken((uint64_t)v10);
  v12.location = C3DStringTokenizerGetCurrentTokenRange((uint64_t)v10);
  v12.length = v8;
  v9 = CFStringCreateWithSubstring(v6, a1, v12);
  if (CFStringGetLength(v9) >= 1 && CFStringGetLength(v7) >= 1)
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 48), v9, v7);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
}

void _C3DBezierCurveCFFinalize(uint64_t a1)
{
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
}

CFStringRef _C3DBezierCurveCFCopyDebugDescription(unsigned int *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DBezierCurve:%p (curve segments: %d linear, %d quadratic, %d cubic)>"), a1, a1[4], a1[5], a1[6]);
}

float32x2_t *C3DBezierCurveCreateWithCGPath(const CGPath *a1)
{
  float32x2_t *Instance;
  uint64_t v3;
  uint64_t v4;
  CGFloat x;
  float64_t y;
  CGFloat width;
  CGFloat height;
  CGFloat MinY;
  float64x2_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat MaxY;
  float64x2_t v15;
  CGFloat MinX;
  CGFloat MaxX;
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[3];
  __int16 v23;
  _QWORD block[7];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int16 v32;
  CGRect BoundingBox;
  CGRect v34;
  CGRect v35;

  if (C3DBezierCurveGetTypeID_onceToken != -1)
    dispatch_once(&C3DBezierCurveGetTypeID_onceToken, &__block_literal_global_124);
  Instance = (float32x2_t *)C3DTypeCreateInstance_(C3DBezierCurveGetTypeID_typeID, 0x30uLL);
  v29 = 0;
  v30 = &v29;
  v31 = 0x2020000000;
  v32 = 0;
  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v3 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __C3DBezierCurveCreateWithCGPath_block_invoke;
  block[3] = &unk_1EA5A4DB0;
  block[4] = &v29;
  block[5] = &v25;
  block[6] = Instance;
  CGPathApplyWithBlock(a1, block);
  v4 = *((unsigned __int16 *)v26 + 12);
  Instance[3].i32[1] = v4;
  Instance[4] = (float32x2_t)malloc_type_malloc(8 * v4, 0x100004000313F17uLL);
  Instance[5] = (float32x2_t)malloc_type_malloc(2 * *((unsigned __int16 *)v30 + 12), 0x1000040BDFB0063uLL);
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v23 = 0;
  v21[0] = v3;
  v21[1] = 3221225472;
  v21[2] = __C3DBezierCurveCreateWithCGPath_block_invoke_2;
  v21[3] = &unk_1EA5A4DD8;
  v21[4] = v22;
  v21[5] = Instance;
  _C3DBezierCurveEnumerateCGPathCurveSegmentsOfType(a1, 1, (uint64_t)v21);
  v20[0] = v3;
  v20[1] = 3221225472;
  v20[2] = __C3DBezierCurveCreateWithCGPath_block_invoke_3;
  v20[3] = &unk_1EA5A4DD8;
  v20[4] = v22;
  v20[5] = Instance;
  _C3DBezierCurveEnumerateCGPathCurveSegmentsOfType(a1, 2, (uint64_t)v20);
  v19[0] = v3;
  v19[1] = 3221225472;
  v19[2] = __C3DBezierCurveCreateWithCGPath_block_invoke_4;
  v19[3] = &unk_1EA5A4DD8;
  v19[4] = v22;
  v19[5] = Instance;
  _C3DBezierCurveEnumerateCGPathCurveSegmentsOfType(a1, 3, (uint64_t)v19);
  BoundingBox = CGPathGetBoundingBox(a1);
  x = BoundingBox.origin.x;
  y = BoundingBox.origin.y;
  width = BoundingBox.size.width;
  height = BoundingBox.size.height;
  MinX = CGRectGetMinX(BoundingBox);
  v34.origin.x = x;
  v34.origin.y = y;
  v34.size.width = width;
  v34.size.height = height;
  MinY = CGRectGetMinY(v34);
  v10.f64[0] = MinX;
  v10.f64[1] = MinY;
  Instance[6] = vcvt_f32_f64(v10);
  v11 = x;
  v10.f64[0] = y;
  v12 = width;
  v13 = height;
  MaxX = CGRectGetMaxX(*(CGRect *)((char *)&v10 - 8));
  v35.origin.x = x;
  v35.origin.y = y;
  v35.size.width = width;
  v35.size.height = height;
  MaxY = CGRectGetMaxY(v35);
  v15.f64[0] = MaxX;
  v15.f64[1] = MaxY;
  Instance[7] = vcvt_f32_f64(v15);
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(&v25, 8);
  _Block_object_dispose(&v29, 8);
  return Instance;
}

void sub_1DCF30144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Block_object_dispose((const void *)(v30 - 112), 8);
  _Unwind_Resume(a1);
}

void _C3DBezierCurveEnumerateCGPathCurveSegmentsOfType(const CGPath *a1, int a2, uint64_t a3)
{
  _QWORD v3[9];
  int v4;
  _QWORD v5[3];
  __int16 v6;
  _QWORD v7[4];
  _QWORD v8[3];
  __int16 v9;
  _QWORD v10[4];

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2020000000;
  v10[3] = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v9 = -1;
  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2020000000;
  v7[3] = 0;
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x2020000000;
  v6 = -1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___C3DBezierCurveEnumerateCGPathCurveSegmentsOfType_block_invoke;
  v3[3] = &unk_1EA5A4E00;
  v3[6] = v8;
  v3[7] = v7;
  v3[8] = v5;
  v4 = a2;
  v3[4] = a3;
  v3[5] = v10;
  CGPathApplyWithBlock(a1, v3);
  _Block_object_dispose(v5, 8);
  _Block_object_dispose(v7, 8);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
}

void sub_1DCF3034C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

unint64_t C3DBezierCurveGetCurveInfo(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32);
}

uint64_t C3DBezierCurveGetCurveSegmentsControlPointIndices(uint64_t a1, _WORD *a2)
{
  if (a2)
    *a2 = 3 * *(_WORD *)(a1 + 20) + *(_WORD *)(a1 + 16) + 4 * *(_DWORD *)(a1 + 24);
  return *(_QWORD *)(a1 + 40);
}

double C3DBezierCurveGetBoundingBox(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  *a2 = *(_QWORD *)(a1 + 48);
  result = *(double *)(a1 + 56);
  *a3 = result;
  return result;
}

uint64_t C3DBezierCurveCreateControlPointsPositionSource(uint64_t a1)
{
  CFDataRef v2;
  uint64_t v3;

  v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)(a1 + 32), 8 * *(unsigned int *)(a1 + 28));
  v3 = C3DMeshSourceCreate(v2, 0, *(unsigned int *)(a1 + 28), 2, 1);
  CFRelease(v2);
  return v3;
}

uint64_t C3DConstraintControllerInitializeConstraint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  if (!a2)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DConstraintControllerInitializeConstraint_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 80);
  if (v14)
    return v14(a2, a1, a3);
  else
    return 1;
}

uint64_t C3DConstraintApply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!a2 && (v10 = scn_default_log(), os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApply_cold_2(v10, v11, v12, v13, v14, v15, v16, v17);
    if (a4)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a5);
  }
  else if (a4)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a5);
  }
  v18 = scn_default_log();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a5);
}

uint64_t C3DConstraintGetTargetModelPath(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DConstraintControllerInitializeConstraint_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
}

uint64_t C3DConstraintGetName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DConstraintControllerInitializeConstraint_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 64);
}

CFStringRef C3DConstraintSetName(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFStringRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstraintControllerInitializeConstraint_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFStringRef *)(a1 + 64);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (theString)
      result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t C3DConstraintSetEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 76) = a2;
  return result;
}

uint64_t C3DConstraintSetIncremental(uint64_t result, char a2)
{
  *(_BYTE *)(result + 77) = a2;
  return result;
}

uint64_t C3DConstraintGetIncremental(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t C3DConstraintSetInfluenceFactor(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  return result;
}

uint64_t C3DContraintAppendAuthoringInfo(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 112);
  if (v1)
    return v1();
  return result;
}

void _C3DConstraintControllerCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  free(*(void **)(a1 + 56));
}

CFStringRef _C3DConstraintControllerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintController>"));
}

CFStringRef _C3DConstraintControllerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintController>"));
}

_QWORD *C3DConstraintControllerCreate(const void *a1, const void *a2, const void *a3)
{
  _QWORD *Instance;
  CFTypeRef v7;

  if (C3DConstraintControllerGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintControllerGetTypeID_onceToken, &__block_literal_global_125);
  Instance = (_QWORD *)C3DTypeCreateInstance_(C3DConstraintControllerGetTypeID_typeID, 0x30uLL);
  v7 = CFRetain(a1);
  Instance[2] = v7;
  C3DConstraintControllerInitializeConstraint((uint64_t)Instance, (uint64_t)v7, (uint64_t)a2);
  Instance[4] = CFRetain(a3);
  Instance[3] = CFRetain(a2);
  return Instance;
}

void _C3DConstraintCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

uint64_t C3DConstraintInit(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_BYTE *)(a1 + 76) = 1;
  result = C3DWasLinkedBeforeMajorOSYear2017();
  *(_BYTE *)(a1 + 77) = result ^ 1;
  return result;
}

uint64_t C3DConstraintCreateLookAt(const void *a1)
{
  uint64_t Instance;
  CFTypeRef v3;

  if (C3DConstraintLookAtGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintLookAtGetTypeID_onceToken, &__block_literal_global_8_2);
  Instance = C3DTypeCreateInstance_(C3DConstraintLookAtGetTypeID_typeID, 0xC0uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  if (a1)
    v3 = CFRetain(a1);
  else
    v3 = 0;
  *(_QWORD *)(Instance + 136) = v3;
  *(_BYTE *)(Instance + 144) = 0;
  *(_OWORD *)(Instance + 176) = xmmword_1DD007610;
  *(_OWORD *)(Instance + 192) = xmmword_1DD007960;
  *(_OWORD *)(Instance + 160) = xmmword_1DD007920;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyLookAt;
  *(_QWORD *)(Instance + 96) = C3DConstraintLookAtCopyTargetPath;
  return Instance;
}

uint64_t C3DConstraintApplyLookAt(float a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  float32x4_t *Parent;
  float32x4_t *WorldMatrix;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  simd_float4x4 *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float v88;
  __float2 v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  simd_float4x4 *v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float v120;
  float32x4_t v122;
  float32x4_t v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  const void *Target;
  void *TargetAddress;
  size_t v133;
  float v134;
  simd_float4x4 v135;
  float v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float v149;
  float32x4_t v150;
  simd_float4 v151;
  simd_float4 v152;
  simd_float4 v153;
  float32x4_t v154;
  simd_float4x4 v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;

  if (!a3)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DConstraintApply_cold_2(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(_QWORD *)(a3 + 16);
  result = *(_QWORD *)(v16 + 136);
  if (result)
  {
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    if (C3DNodeGetHasPivot(result))
    {
      memset(&v155, 0, sizeof(v155));
      C3DNodeGetLocalNoPivotMatrix(*(_QWORD *)(v16 + 136), (uint64_t)&v155);
      Parent = (float32x4_t *)C3DNodeGetParent(*(_QWORD *)(v16 + 136));
      if (Parent)
      {
        WorldMatrix = C3DNodeGetWorldMatrix(Parent);
        C3DMatrix4x4Mult((uint64_t)WorldMatrix, (float32x4_t *)&v155, &v156);
      }
      else
      {
        v156 = (float32x4_t)v155.columns[0];
        v157 = (float32x4_t)v155.columns[1];
        v158 = (float32x4_t)v155.columns[2];
        v159 = (float32x4_t)v155.columns[3];
      }
    }
    else
    {
      v20 = C3DNodeGetWorldMatrix(*(float32x4_t **)(v16 + 136));
      v21 = v20[3];
      v23 = *v20;
      v22 = v20[1];
      v158 = v20[2];
      v159 = v21;
      v156 = v23;
      v157 = v22;
    }
    v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v156, COERCE_FLOAT(*(_OWORD *)(v16 + 176))), v157, *(float32x2_t *)(v16 + 176), 1), v158, *(float32x4_t *)(v16 + 176), 2), v159, *(float32x4_t *)(v16 + 176), 3);
    v25 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
    v154 = v25;
    v139 = v24;
    if (*(_BYTE *)(v16 + 144))
    {
      v143 = v25;
      result = C3DNodeGetParent((uint64_t)a4);
      if (!result)
        return result;
      v26 = (simd_float4x4 *)C3DNodeGetWorldMatrix((float32x4_t *)result);
      memset(&v155, 0, sizeof(v155));
      C3DMatrix4x4Invert(v26, &v155);
      v150 = (float32x4_t)v155.columns[0];
      v151 = v155.columns[1];
      v152 = v155.columns[2];
      v153 = v155.columns[3];
      *(double *)v27.i64 = C3DVector3MultMatrix4x4(&v150, v139);
      v140 = v27;
      v135 = v155;
      v137 = *(float32x4_t *)(v16 + 160);
      *(double *)v28.i64 = C3DNodeGetPosition(a4);
      v29 = (uint32x4_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3727C5ACu), vabdq_f32(v140, v28));
      v29.i32[3] = v29.i32[2];
      if ((vminvq_u32(v29) & 0x80000000) != 0)
      {
        v94 = v143;
      }
      else
      {
        v30 = vsubq_f32(v140, v28);
        v31 = (int32x4_t)vmulq_f32(v30, v30);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        v34 = vmulq_n_f32(v30, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
        v35 = *(float32x4_t *)(v16 + 192);
        v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v35)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL));
        v37 = vmulq_f32(v34, v35);
        v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), v36, 0xCuLL);
        *(float *)v36.i32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
        v39 = vmulq_f32(v35, v35);
        v40 = vmulq_f32(v34, v34);
        v41 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0];
        v38.f32[3] = *(float *)v36.i32
                   + sqrtf(vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0], v41));
        v42 = (int8x16_t)vmulq_f32(v38, v38);
        *(float32x2_t *)v42.i8 = vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
        v43 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1)), 0);
        v44 = vrsqrteq_f32(v43);
        v45 = vmulq_f32(v44, vrsqrtsq_f32(v43, vmulq_f32(v44, v44)));
        v46 = (int8x16_t)vmulq_f32(v45, vrsqrtsq_f32(v43, vmulq_f32(v45, v45)));
        v47 = (int8x16_t)vceqzq_f32(v43);
        __asm { FMOV            V0.4S, #1.0 }
        v53 = vmulq_f32(v38, (float32x4_t)vbslq_s8(v47, _Q0, v46));
        v54 = (float32x4_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53);
        v55 = v143;
        if (v41 > 0.000000001)
        {
          v56 = (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v53, 0xCuLL);
          v57 = vnegq_f32(v53);
          v58 = (float32x4_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57);
          v58.i32[0] = v57.i32[1];
          v59 = (float32x4_t)vzip1q_s32((int32x4_t)v57, (int32x4_t)v57);
          v59.i32[0] = v57.i32[2];
          v141 = v54;
          v57.i32[3] = v53.i32[3];
          v134 = v41;
          v60 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v57, 3), (int8x16_t)v57, 4uLL), (float32x4_t)xmmword_1DD007920), (float32x4_t)xmmword_1DD007D20), (float32x4_t)0, v57), (float32x4_t)xmmword_1DD007D20, vmulq_f32(v59, (float32x4_t)xmmword_1DD007880)), (float32x4_t)xmmword_1DD02A890, v58);
          v61 = (float32x4_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60);
          v61.i32[0] = v60.i32[1];
          v62 = (float32x4_t)vzip1q_s32((int32x4_t)v60, (int32x4_t)v60);
          v62.i32[0] = v60.i32[2];
          v63 = v53;
          v63.i32[3] = v53.i32[0];
          v64 = vmlsq_f32(vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v63, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v60, 3), (int8x16_t)v60, 4uLL)), (float32x4_t)xmmword_1DD007D20), v60, v53, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v53, (int8x16_t)v53, 0xCuLL), (int8x16_t)v53, 8uLL), v62)), v61, v56);
          v65 = vmulq_f32(v34, v64);
          v66 = vmlsq_lane_f32(v64, v34, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))), 0);
          v67 = vmulq_f32(v66, v66);
          v67.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).u64[0];
          v68 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v67.f32[0] != 0.0)), 0x1FuLL));
          v68.i32[3] = 0;
          v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 0);
          v70 = vrsqrteq_f32(v69);
          v71 = vmulq_f32(v70, vrsqrtsq_f32(v69, vmulq_f32(v70, v70)));
          v72 = vmulq_f32(v66, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v68), (int8x16_t)vmulq_f32(v71, vrsqrtsq_f32(v69, vmulq_f32(v71, v71))), _Q0));
          v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v135.columns[0], v137.f32[0]), (float32x4_t)v135.columns[1], *(float32x2_t *)v137.f32, 1), (float32x4_t)v135.columns[2], v137, 2), (float32x4_t)v135.columns[3], v137, 3);
          v74 = (int32x4_t)vmulq_f32(v73, v73);
          v74.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v74, 2), vadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1))).u32[0];
          *(float32x2_t *)v66.f32 = vrsqrte_f32((float32x2_t)v74.u32[0]);
          *(float32x2_t *)v66.f32 = vmul_f32(*(float32x2_t *)v66.f32, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32)));
          v75 = vmulq_n_f32(v73, vmul_f32(*(float32x2_t *)v66.f32, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(*(float32x2_t *)v66.f32, *(float32x2_t *)v66.f32))).f32[0]);
          v76 = vmulq_f32(v34, v75);
          v77 = vmlsq_lane_f32(v75, v34, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))), 0);
          v78 = vmulq_f32(v77, v77);
          v78.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u64[0];
          v79 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v78.f32[0] != 0.0)), 0x1FuLL));
          v79.i32[3] = 0;
          v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 0);
          v81 = vrsqrteq_f32(v80);
          v82 = vmulq_f32(v81, vrsqrtsq_f32(v80, vmulq_f32(v81, v81)));
          v83 = vmulq_f32(v77, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v79), (int8x16_t)vmulq_f32(v82, vrsqrtsq_f32(v80, vmulq_f32(v82, v82))), _Q0));
          v84 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), vnegq_f32(v72)), v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
          v85 = vmulq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), v84, 0xCuLL));
          LODWORD(v136) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).u32[0];
          v138 = v34;
          v86 = vmulq_f32(v72, v83);
          v87 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0];
          if (v87 >= 1.0)
            v87 = 1.0;
          if (v87 <= -1.0)
            v87 = -1.0;
          v144 = v53;
          v88 = acosf(v87);
          if (v136 <= 0.0)
            v88 = -v88;
          v89 = __sincosf_stret(v88 * 0.5);
          v54 = v141;
          v53 = v144;
          v90 = vrsqrte_f32((float32x2_t)LODWORD(v134));
          v91 = vmul_f32(v90, vrsqrts_f32((float32x2_t)LODWORD(v134), vmul_f32(v90, v90)));
          v55 = vmulq_n_f32(vmulq_n_f32(v138, vmul_f32(v91, vrsqrts_f32((float32x2_t)LODWORD(v134), vmul_f32(v91, v91))).f32[0]), v89.__sinval);
          v55.i32[3] = LODWORD(v89.__cosval);
        }
        v92 = v55;
        v92.i32[3] = v55.i32[0];
        v93 = (float32x4_t)vzip1q_s32((int32x4_t)v53, (int32x4_t)v53);
        v93.i32[0] = v53.i32[2];
        v54.i32[0] = v53.i32[1];
        v154 = vmlsq_f32(vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v53, 3), (int8x16_t)v53, 4uLL), v92), (float32x4_t)xmmword_1DD007D20), v53, v55, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32(v93, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL))), v54, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL));
        v94 = v154;
      }
    }
    else
    {
      v95 = (simd_float4x4 *)C3DNodeGetWorldMatrix((float32x4_t *)a4);
      memset(&v155, 0, sizeof(v155));
      C3DMatrix4x4Invert(v95, &v155);
      v150 = (float32x4_t)v155.columns[0];
      v151 = v155.columns[1];
      v152 = v155.columns[2];
      v153 = v155.columns[3];
      *(double *)v96.i64 = C3DVector3MultMatrix4x4(&v150, v139);
      v97 = (int32x4_t)vmulq_f32(v96, v96);
      v97.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))).u32[0];
      v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
      v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
      v100 = vmulq_n_f32(v96, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
      v101 = *(float32x4_t *)(v16 + 192);
      v102 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL), vnegq_f32(v101)), v100, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL));
      v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), v102, 0xCuLL);
      v104 = vmulq_f32(v101, v100);
      v103.f32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]+ 1.0;
      v105 = (int8x16_t)vmulq_f32(v103, v103);
      *(float32x2_t *)v105.i8 = vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v105, v105, 8uLL));
      v106 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1)), 0);
      v107 = vrsqrteq_f32(v106);
      v108 = vmulq_f32(v107, vrsqrtsq_f32(v106, vmulq_f32(v107, v107)));
      __asm { FMOV            V3.4S, #1.0 }
      v145 = vmulq_f32(v103, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v106), _Q3, (int8x16_t)vmulq_f32(v108, vrsqrtsq_f32(v106, vmulq_f32(v108, v108)))));
      C3DNodeGetQuaternion((uint64_t)a4);
      v111 = v110;
      v111.i32[3] = v110.i32[0];
      v112 = (int32x4_t)v145;
      v113 = (float32x4_t)vzip1q_s32(v112, v112);
      v113.i32[0] = v145.i32[2];
      v114 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v111, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v145, 3), (int8x16_t)v145, 4uLL)), (float32x4_t)xmmword_1DD007D20), v145, v110, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v110, (int8x16_t)v110, 0xCuLL), (int8x16_t)v110, 8uLL), v113));
      v115 = (float32x4_t)vuzp1q_s32(v112, v112);
      v115.i32[0] = v145.i32[1];
      v94 = vmlsq_f32(v114, v115, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL));
      v154 = v94;
    }
    if (a1 != 1.0)
    {
      v146 = v94;
      C3DNodeGetQuaternion((uint64_t)a4);
      _Q4 = v116;
      _Q0 = vmulq_f32(v116, v146);
      _S1 = v146.i32[2];
      __asm { FMLA            S0, S1, V4.S[2] }
      _S2 = v146.i32[3];
      v120 = -(float)(_Q0.f32[0] + (float)(_Q4.f32[3] * v146.f32[3]));
      __asm { FMLA            S0, S2, V4.S[3] }
      v122.i32[0] = 0;
      v123 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v122, _Q0), 0), (int8x16_t)vnegq_f32(v146), (int8x16_t)v146);
      if (_Q0.f32[0] < 0.0)
        _Q0.f32[0] = v120;
      if (1.0 - _Q0.f32[0] <= 0.00100000005)
      {
        v129 = 1.0 - a1;
        v130 = a1;
      }
      else
      {
        v142 = v123;
        v147 = _Q4;
        v124 = acosf(_Q0.f32[0]);
        v125 = sinf(v124);
        v126 = sinf((float)(1.0 - a1) * v124);
        v127 = v124 * a1;
        v149 = v126 / v125;
        v128 = sinf(v127);
        _Q4 = v147;
        v129 = v149;
        v123 = v142;
        v130 = v128 / v125;
      }
      v154 = vmlaq_n_f32(vmulq_n_f32(v123, v130), _Q4, v129);
    }
    Target = (const void *)C3DModelTargetGetTarget(a5);
    TargetAddress = (void *)C3DModelTargetGetTargetAddress(a5);
    v133 = C3DSizeOfBaseType(10);
    C3DSetValue(Target, TargetAddress, &v154, v133, 3, 0);
    return 1;
  }
  return result;
}

const __CFString *C3DConstraintLookAtCopyTargetPath()
{
  return CFSTR("transform");
}

void C3DConstraintLookAtSetGimbalLockEnabled(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 144) = a2;
}

__n128 C3DConstraintLookAtSetTargetOffset(__n128 *a1, __n128 result)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = result;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    result = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      result = v12;
    }
  }
  result.n128_u32[3] = a1[11].n128_u32[3];
  a1[11] = result;
  return result;
}

__n128 C3DConstraintLookAtSetUpVector(__n128 *a1, __n128 result)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = result;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    result = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      result = v12;
    }
  }
  result.n128_u32[3] = a1[10].n128_u32[3];
  a1[10] = result;
  return result;
}

void C3DConstraintLookAtSetLocalFront(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[12] = a2;
}

uint64_t C3DConstraintCreateBillboard()
{
  uint64_t Instance;

  if (C3DConstraintBillboardGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintBillboardGetTypeID_onceToken, &__block_literal_global_11_0);
  Instance = C3DTypeCreateInstance_(C3DConstraintBillboardGetTypeID_typeID, 0x80uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyBillboard;
  *(_QWORD *)(Instance + 96) = C3DConstraintBillboardCopyTargetPath;
  *(_BYTE *)(Instance + 140) = C3DWasLinkedBeforeMajorOSYear2018() ^ 1;
  *(_DWORD *)(Instance + 136) = 7;
  return Instance;
}

BOOL C3DConstraintApplyBillboard(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *PointOfView;
  uint64_t v19;
  const void *Target;
  void *TargetAddress;
  size_t v22;
  float32x4_t v24[4];

  if (!a2)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  PointOfView = C3DEngineContextGetPointOfView(a1);
  if (PointOfView)
  {
    v19 = *(_QWORD *)(a2 + 16);
    if (*(_DWORD *)(v19 + 136))
    {
      memset(v24, 0, sizeof(v24));
      C3DConstraintBillboardMatrixForNode(a1, v19, a3, v24, a5);
      Target = (const void *)C3DModelTargetGetTarget(a4);
      TargetAddress = (void *)C3DModelTargetGetTargetAddress(a4);
      v22 = C3DSizeOfBaseType(11);
      C3DSetValue(Target, TargetAddress, v24, v22, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35));
    }
  }
  return PointOfView != 0;
}

const __CFString *C3DConstraintBillboardCopyTargetPath()
{
  return CFSTR("transform");
}

BOOL C3DConstraintBillboardMatrixForNode(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float a5)
{
  float32x4_t *PointOfView;
  float32x4_t *WorldMatrix;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  char v15;
  float32x4_t *v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  __int128 v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  __int128 v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  __int128 v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t *Parent;
  simd_float4x4 *v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121[4];
  float32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  simd_float4x4 v126;

  PointOfView = C3DEngineContextGetPointOfView(a1);
  if (PointOfView)
  {
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    C3DNodeGetLocalNoPivotMatrix((uint64_t)a3, (uint64_t)&v117);
    WorldMatrix = C3DNodeGetWorldMatrix(a3);
    v11 = WorldMatrix[3];
    v13 = *WorldMatrix;
    v12 = WorldMatrix[1];
    v115 = WorldMatrix[2];
    v116 = v11;
    v113 = v13;
    v114 = v12;
    v112.i32[2] = 0;
    v112.i64[0] = 0;
    v14 = C3DWasLinkedBeforeMajorOSYear2017();
    v15 = v14;
    if (v14)
    {
      v113 = v117;
      v114 = v118;
      v115 = v119;
      v116 = v120;
    }
    else if (*(_BYTE *)(a2 + 140))
    {
      C3DMatrix4x4GetAffineTransforms((uint64_t)&v117, 0, 0, &v112);
    }
    v16 = C3DNodeGetWorldMatrix(PointOfView);
    v17 = *v16;
    v18 = (int32x4_t)v16[2];
    v109 = (int32x4_t)v16[1];
    v110 = v18;
    v108 = v17;
    v111 = 0uLL;
    v19 = &v117;
    switch(*(_DWORD *)(a2 + 136))
    {
      case 0:
        goto LABEL_25;
      case 1:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v20.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007920);
        v105 = v20;
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v21.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007970);
        v22 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL), vnegq_f32(v21)), v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
        v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL);
        v24 = (int32x4_t)vmulq_f32(v22, v22);
        v24.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), *(float32x2_t *)v24.i8)).u32[0];
        v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
        v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
        v27 = vmulq_n_f32(v23, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]);
        v28 = (int8x16_t)vmulq_f32(v27, (float32x4_t)xmmword_1DD02C5E0);
        v29 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), v28, 0xCuLL), (float32x4_t)xmmword_1DD007920, v27);
        v30 = (int32x4_t)vmulq_f32(v29, v29);
        v30.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), *(float32x2_t *)v30.i8)).u32[0];
        v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
        *(float32x2_t *)v29.f32 = vrsqrte_f32((float32x2_t)v30.u32[0]);
        *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)));
        v32 = vmulq_n_f32(v31, vmul_f32(*(float32x2_t *)v29.f32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32))).f32[0]);
        v33 = (int8x16_t)vmulq_f32(v32, (float32x4_t)xmmword_1DD02C5E0);
        v34 = (int8x16_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL), (float32x4_t)xmmword_1DD007920, v32);
        v35 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), v34, 0xCuLL);
        v36 = xmmword_1DD007970;
        HIDWORD(v36) = *(_DWORD *)((unint64_t)&v108 | 0xC);
        v32.i32[3] = v109.i32[3];
        v108 = (float32x4_t)v36;
        v109 = (int32x4_t)v32;
        goto LABEL_9;
      case 2:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v37.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007970);
        v106 = v37;
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v38.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007920);
        v39 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), vnegq_f32(v106)), (float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), (int8x16_t)v106, 0xCuLL));
        v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL);
        v41 = (int32x4_t)vmulq_f32(v39, v39);
        v41.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), *(float32x2_t *)v41.i8)).u32[0];
        *(float32x2_t *)v39.f32 = vrsqrte_f32((float32x2_t)v41.u32[0]);
        *(float32x2_t *)v39.f32 = vmul_f32(*(float32x2_t *)v39.f32, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32)));
        v42 = vmulq_n_f32(v40, vmul_f32(*(float32x2_t *)v39.f32, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32))).f32[0]);
        v43 = (int8x16_t)vmulq_f32(v42, (float32x4_t)xmmword_1DD02C5D0);
        v44 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), v43, 0xCuLL), (float32x4_t)xmmword_1DD007600, v42);
        v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL);
        v46 = (int32x4_t)vmulq_f32(v44, v44);
        v46.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), *(float32x2_t *)v46.i8)).u32[0];
        *(float32x2_t *)v39.f32 = vrsqrte_f32((float32x2_t)v46.u32[0]);
        *(float32x2_t *)v39.f32 = vmul_f32(*(float32x2_t *)v39.f32, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32)));
        v47 = vmulq_n_f32(v45, vmul_f32(*(float32x2_t *)v39.f32, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v39.f32))).f32[0]);
        v48 = xmmword_1DD007920;
        v49 = (int8x16_t)vmlaq_f32(vmulq_f32(v47, (float32x4_t)xmmword_1DD02C5E0), (float32x4_t)xmmword_1DD007920, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
        v35 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
        v47.i32[3] = *(_DWORD *)((unint64_t)&v108 | 0xC);
        HIDWORD(v48) = v109.i32[3];
        v108 = v47;
        v109 = (int32x4_t)v48;
LABEL_9:
        v35.i32[3] = v110.i32[3];
        v110 = (int32x4_t)v35;
        goto LABEL_14;
      case 3:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, v108);
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007920);
        v50 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL);
        v51 = vmlaq_f32(vmulq_f32(v50, (float32x4_t)xmmword_1DD02C5F0), (float32x4_t)xmmword_1DD007600, (float32x4_t)v110);
        v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v53 = (int32x4_t)vmulq_f32(v51, v51);
        v53.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), *(float32x2_t *)v53.i8)).u32[0];
        v54 = vrsqrte_f32((float32x2_t)v53.u32[0]);
        v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v54, v54)));
        v56 = vmulq_n_f32(v52, vmul_f32(v55, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v55, v55))).f32[0]);
        v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL), vnegq_f32((float32x4_t)v110)), v56, v50);
        v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL);
        v59 = (int32x4_t)vmulq_f32(v57, v57);
        v59.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2), *(float32x2_t *)v59.i8)).u32[0];
        *(float32x2_t *)v52.f32 = vrsqrte_f32((float32x2_t)v59.u32[0]);
        *(float32x2_t *)v52.f32 = vmul_f32(*(float32x2_t *)v52.f32, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32)));
        v60 = vmulq_n_f32(v58, vmul_f32(*(float32x2_t *)v52.f32, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v52.f32))).f32[0]);
        v56.i32[3] = v108.i32[3];
        v60.i32[3] = v109.i32[3];
        v108 = v56;
        v109 = (int32x4_t)v60;
        goto LABEL_14;
      case 4:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v61.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007970);
        v107 = v61;
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        *(double *)v62.i64 = C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007600);
        v63 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL), vnegq_f32(v107)), (float32x4_t)v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL));
        v64 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL);
        v65 = (int32x4_t)vmulq_f32(v63, v63);
        v65.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), *(float32x2_t *)v65.i8)).u32[0];
        *(float32x2_t *)v63.f32 = vrsqrte_f32((float32x2_t)v65.u32[0]);
        *(float32x2_t *)v63.f32 = vmul_f32(*(float32x2_t *)v63.f32, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32)));
        v66 = vmulq_n_f32(v64, vmul_f32(*(float32x2_t *)v63.f32, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v63.f32))).f32[0]);
        v67 = xmmword_1DD007600;
        v68 = vmlaq_f32(vmulq_f32(v66, (float32x4_t)xmmword_1DD02C5D0), (float32x4_t)xmmword_1DD007600, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), (int8x16_t)v66, 0xCuLL));
        v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL);
        v70 = (int32x4_t)vmulq_f32(v68, v68);
        v70.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), *(float32x2_t *)v70.i8)).u32[0];
        v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        v73 = vmulq_n_f32(v69, vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).f32[0]);
        v74 = (int8x16_t)vmulq_f32(v73, (float32x4_t)xmmword_1DD02C5F0);
        v75 = (int8x16_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL), (float32x4_t)xmmword_1DD007970, v73);
        v76 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL);
        v73.i32[3] = *(_DWORD *)((unint64_t)&v108 | 0xC);
        v76.i32[3] = v109.i32[3];
        v108 = v73;
        v109 = (int32x4_t)v76;
        HIDWORD(v67) = v110.i32[3];
        v110 = (int32x4_t)v67;
        goto LABEL_14;
      case 5:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, v108);
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007600);
        v77 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL);
        v78 = vmlaq_f32(vmulq_f32((float32x4_t)v109, (float32x4_t)xmmword_1DD02C5D0), (float32x4_t)xmmword_1DD007600, v77);
        v79 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
        v80 = (int32x4_t)vmulq_f32(v78, v78);
        v80.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), *(float32x2_t *)v80.i8)).u32[0];
        v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
        v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
        v83 = vmulq_n_f32(v79, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]);
        v84 = vmlaq_f32(vmulq_f32(v77, vnegq_f32(v83)), (float32x4_t)v109, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
        v85 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL);
        v86 = (int32x4_t)vmulq_f32(v84, v84);
        v86.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v86, 2), *(float32x2_t *)v86.i8)).u32[0];
        *(float32x2_t *)v79.f32 = vrsqrte_f32((float32x2_t)v86.u32[0]);
        *(float32x2_t *)v79.f32 = vmul_f32(*(float32x2_t *)v79.f32, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32)));
        v87 = vmulq_n_f32(v85, vmul_f32(*(float32x2_t *)v79.f32, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(*(float32x2_t *)v79.f32, *(float32x2_t *)v79.f32))).f32[0]);
        v83.i32[3] = v108.i32[3];
        v87.i32[3] = v110.i32[3];
        v108 = v83;
        v110 = (int32x4_t)v87;
        goto LABEL_14;
      case 6:
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, (float32x4_t)v109);
        v122 = v108;
        v123 = v109;
        v124 = v110;
        v125 = v111;
        C3DVector3MultMatrix4x4(&v122, (float32x4_t)xmmword_1DD007970);
        v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL);
        v89 = vmlaq_f32(vmulq_f32(v88, (float32x4_t)xmmword_1DD02C5D0), (float32x4_t)xmmword_1DD007920, (float32x4_t)v110);
        v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL);
        v91 = (int32x4_t)vmulq_f32(v89, v89);
        v91.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v91, 2), *(float32x2_t *)v91.i8)).u32[0];
        v92 = vrsqrte_f32((float32x2_t)v91.u32[0]);
        v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v92, v92)));
        v94 = vmulq_n_f32(v90, vmul_f32(v93, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v93, v93))).f32[0]);
        v95 = vmlaq_f32(vmulq_f32(v88, vnegq_f32(v94)), (float32x4_t)v110, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL));
        v96 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL);
        v97 = (int32x4_t)vmulq_f32(v95, v95);
        v97.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), *(float32x2_t *)v97.i8)).u32[0];
        *(float32x2_t *)v90.f32 = vrsqrte_f32((float32x2_t)v97.u32[0]);
        *(float32x2_t *)v90.f32 = vmul_f32(*(float32x2_t *)v90.f32, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32)));
        v98 = vmulq_n_f32(v96, vmul_f32(*(float32x2_t *)v90.f32, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32))).f32[0]);
        v98.i32[3] = *(_DWORD *)((unint64_t)&v108 | 0xC);
        v94.i32[3] = v109.i32[3];
        v108 = v98;
        v109 = (int32x4_t)v94;
        goto LABEL_14;
      default:
LABEL_14:
        v111 = v116;
        if (a5 != 1.0)
          C3DMatrix4x4Interpolate(&v113, &v108, &v108, a5);
        v113 = v108;
        v114 = (float32x4_t)v109;
        v115 = (float32x4_t)v110;
        v116 = v111;
        if ((v15 & 1) != 0)
          goto LABEL_24;
        Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a3);
        v100 = Parent ? (simd_float4x4 *)C3DNodeGetWorldMatrix(Parent) : (simd_float4x4 *)MEMORY[0x1E0C83FF0];
        v126 = __invert_f4(*v100);
        v101 = 0;
        v121[0] = v113;
        v121[1] = v114;
        v121[2] = v115;
        v121[3] = v116;
        v122 = 0u;
        v123 = 0u;
        v124 = 0u;
        v125 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v122 + v101 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v126.columns[0], COERCE_FLOAT(*(_OWORD *)&v121[v101])), (float32x4_t)v126.columns[1], *(float32x2_t *)v121[v101].f32, 1), (float32x4_t)v126.columns[2], v121[v101], 2), (float32x4_t)v126.columns[3], v121[v101], 3);
          ++v101;
        }
        while (v101 != 4);
        v113 = v122;
        v114 = (float32x4_t)v123;
        v115 = (float32x4_t)v124;
        v116 = v120;
        if (!*(_BYTE *)(a2 + 140))
        {
LABEL_24:
          v19 = &v113;
        }
        else
        {
          *(uint64_t *)((char *)v122.i64 + 4) = 0;
          v122.i32[0] = 0;
          v121[0] = 0uLL;
          v19 = &v113;
          C3DMatrix4x4GetAffineTransforms((uint64_t)&v113, &v122, (int8x16_t *)v121, 0);
          C3DMatrix4x4MakeAffine(&v113, &v122, v121, (float32x2_t *)&v112);
        }
LABEL_25:
        v102 = v19[1];
        *a4 = *v19;
        a4[1] = v102;
        v103 = v19[3];
        a4[2] = v19[2];
        a4[3] = v103;
        break;
    }
  }
  return PointOfView != 0;
}

uint64_t C3DConstraintBillboardSetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t C3DConstraintBillboardSetPreserveScale(uint64_t result, char a2)
{
  *(_BYTE *)(result + 140) = a2;
  return result;
}

uint64_t C3DConstraintBillboardGetPreserveScale(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

void _C3DConstraintConstantScaleCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintConstantScaleCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintConstantScale>"));
}

CFStringRef _C3DConstraintConstantScaleCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintConstantScale>"));
}

uint64_t C3DConstraintCreateConstantScale()
{
  uint64_t Instance;

  if (C3DConstraintConstantScaleGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintConstantScaleGetTypeID_onceToken, &__block_literal_global_15_1);
  Instance = C3DTypeCreateInstance_(C3DConstraintConstantScaleGetTypeID_typeID, 0x80uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyConstantScale;
  *(_QWORD *)(Instance + 96) = C3DConstraintConstantScaleCopyTargetPath;
  *(_DWORD *)(Instance + 136) = 1065353216;
  return Instance;
}

uint64_t C3DConstraintApplyConstantScale(__n128 *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float a5)
{
  uint64_t v9;
  uint64_t result;
  float32x4_t *v11;
  _BYTE *v12;
  simd_float4x4 *WorldMatrix;
  float32x4_t v14;
  double EffectiveFov;
  float v16;
  __n128 Viewport;
  char v18;
  float32x4_t *Parent;
  float32x4_t *v20;
  float32x4_t *v21;
  __int128 v22;
  simd_float4x4 *v23;
  __int128 v24;
  float32x2_t *v25;
  const void *Target;
  void *TargetAddress;
  size_t v28;
  float v29;
  __n128 v30;
  simd_float4x4 v31;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35[4];
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  v9 = *(_QWORD *)(a2 + 16);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  C3DNodeGetMatrix((uint64_t)a3, (uint64_t)&v36);
  v35[0] = v36;
  v35[1] = v37;
  v35[2] = v38;
  v35[3] = v39;
  if (*(_BYTE *)(v9 + 140))
  {
    result = (uint64_t)C3DEngineContextGetPointOfView((uint64_t)a1);
    if (!result)
      return result;
    v11 = (float32x4_t *)result;
    result = (uint64_t)C3DNodeGetCamera(result);
    if (!result)
      return result;
    result = C3DCameraGetProjectionInfosPtr(result);
    if (!result)
      return result;
    v12 = (_BYTE *)result;
    if ((*(_BYTE *)result & 1) != 0)
    {
      Viewport.n128_u64[0] = *(_QWORD *)(result + 48);
      Viewport.n128_f32[0] = Viewport.n128_f64[0];
    }
    else
    {
      WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(v11);
      memset(&v31, 0, sizeof(v31));
      C3DMatrix4x4Invert(WorldMatrix, &v31);
      v34.i32[2] = 0;
      v34.i64[0] = 0;
      C3DNodeGetWorldPosition(a3, (__n128 *)&v34);
      v14 = vmulq_f32(vaddq_f32((float32x4_t)v31.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v31.columns[0], v34.f32[0]), (float32x4_t)v31.columns[1], *(float32x2_t *)v34.f32, 1), (float32x4_t)v31.columns[2], v34, 2)), (float32x4_t)xmmword_1DD007960);
      v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0];
      EffectiveFov = C3DProjectionInfosGetEffectiveFov((uint64_t)v12);
      v16 = 1.0 / (tan(EffectiveFov * 3.14159265 / 180.0 * 0.5) + v29);
      Viewport = C3DEngineContextGetViewport(a1);
      v18 = 2;
      if ((*v12 & 0x20) == 0)
        v18 = 3;
      v30 = Viewport;
      Viewport.n128_f32[0] = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) * v16;
    }
    if (Viewport.n128_f32[0] == 0.0)
      return 0;
    Viewport.n128_f32[0] = *(float *)(v9 + 136) / Viewport.n128_f32[0];
    v31.columns[0] = (simd_float4)vdupq_lane_s32((int32x2_t)Viewport.n128_u64[0], 0);
    v34.i32[2] = 0;
    v34.i64[0] = 0;
    v33 = 0uLL;
    C3DMatrix4x4GetAffineTransforms((uint64_t)v35, &v34, (int8x16_t *)&v33, 0);
    v25 = (float32x2_t *)&v31;
    goto LABEL_16;
  }
  Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a3);
  if (!Parent)
  {
    v34.i32[2] = 0;
    v34.i64[0] = 0;
    v33 = 0uLL;
    C3DMatrix4x4GetAffineTransforms((uint64_t)v35, &v34, (int8x16_t *)&v33, 0);
    *(double *)&v24 = C3DNodeGetScale((__n128 *)a3);
    v32 = v24;
    v25 = (float32x2_t *)&v32;
LABEL_16:
    C3DMatrix4x4MakeAffine(v35, &v34, &v33, v25);
    goto LABEL_17;
  }
  v20 = Parent;
  v21 = C3DNodeGetWorldMatrix(Parent);
  C3DMatrix4x4Mult((uint64_t)v35, v21, v35);
  v34.i32[2] = 0;
  v34.i64[0] = 0;
  v33 = 0uLL;
  C3DMatrix4x4GetAffineTransforms((uint64_t)v35, &v34, (int8x16_t *)&v33, 0);
  *(double *)&v22 = C3DNodeGetScale((__n128 *)a3);
  v32 = v22;
  C3DMatrix4x4MakeAffine(v35, &v34, &v33, (float32x2_t *)&v32);
  memset(&v31, 0, sizeof(v31));
  v23 = (simd_float4x4 *)C3DNodeGetWorldMatrix(v20);
  C3DMatrix4x4Invert(v23, &v31);
  C3DMatrix4x4Mult((uint64_t)v35, (float32x4_t *)&v31, v35);
LABEL_17:
  if (a5 != 1.0)
    C3DMatrix4x4Interpolate(&v36, v35, v35, a5);
  Target = (const void *)C3DModelTargetGetTarget(a4);
  TargetAddress = (void *)C3DModelTargetGetTargetAddress(a4);
  v28 = C3DSizeOfBaseType(11);
  C3DSetValue(Target, TargetAddress, v35, v28, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35));
  return 1;
}

const __CFString *C3DConstraintConstantScaleCopyTargetPath()
{
  return CFSTR("transform");
}

uint64_t C3DConstraintConstantScaleSetScale(uint64_t result, float a2)
{
  *(float *)(result + 136) = a2;
  return result;
}

void _C3DConstraintProceduralCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  _Block_release(*(const void **)(a1 + 136));
  v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintProceduralCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintProcedural>"));
}

CFStringRef _C3DConstraintProceduralCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintProcedural>"));
}

uint64_t C3DConstraintCreateProcedural(const void *a1, const void *a2)
{
  uint64_t Instance;

  if (C3DConstraintProceduralGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintProceduralGetTypeID_onceToken, &__block_literal_global_18);
  Instance = C3DTypeCreateInstance_(C3DConstraintProceduralGetTypeID_typeID, 0x88uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_QWORD *)(Instance + 136) = _Block_copy(a1);
  *(_QWORD *)(Instance + 144) = CFRetain(a2);
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyProcedural;
  *(_QWORD *)(Instance + 96) = C3DConstraintProceduralCopyTargetPath;
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  return Instance;
}

uint64_t C3DConstraintApplyProcedural(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 136) + 16))();
  return 1;
}

uint64_t C3DConstraintProceduralCopyTargetPath(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

_QWORD *C3DConstraintProceduralCreateCopy(uint64_t a1)
{
  _QWORD *Instance;

  if (C3DConstraintProceduralGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintProceduralGetTypeID_onceToken, &__block_literal_global_18);
  Instance = (_QWORD *)C3DTypeCreateInstance_(C3DConstraintProceduralGetTypeID_typeID, 0x88uLL);
  Instance[17] = _Block_copy(*(const void **)(a1 + 136));
  Instance[18] = CFRetain(*(CFTypeRef *)(a1 + 144));
  Instance[11] = C3DConstraintApplyProcedural;
  Instance[12] = C3DConstraintProceduralCopyTargetPath;
  return Instance;
}

uint64_t C3DConstraintCreateIK()
{
  uint64_t Instance;

  if (C3DConstraintIKGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintIKGetTypeID_onceToken, &__block_literal_global_20_1);
  Instance = C3DTypeCreateInstance_(C3DConstraintIKGetTypeID_typeID, 0xB0uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyIK;
  *(_QWORD *)(Instance + 96) = C3DConstraintIKCopyTargetPath;
  return Instance;
}

BOOL C3DConstraintApplyIK(float a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  __n128 *v4;
  _QWORD *v5;
  __n128 **v7;
  uint64_t v8;
  uint64_t ModelValueStorage;
  uint64_t v10;
  char v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 **v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v29;
  float32x4_t *v30;
  __n128 *v31;
  float32x4_t *v32;
  __n128 v33;
  float32x4_t *Parent;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float v40;
  int32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float32x4_t v55;
  float v56;
  double v57;
  double v58;
  double v59;
  double v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  _BOOL8 result;
  float32x4_t *v67;
  float32x4_t *v68;
  float32x4_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  float32x4_t v75;
  const void *v76;
  size_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  const __CFDictionary *v83;
  const void *Value;
  __int128 v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  __n128 v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114[2];

  v4 = *(__n128 **)(a3 + 16);
  v5 = (_QWORD *)v4[8].n128_u64[1];
  if (!v5)
    return 0;
  v7 = (__n128 **)v4[10].n128_u64[0];
  if (v7)
  {
LABEL_3:
    v102 = v4[10].n128_i64[1];
    v8 = C3DGetScene(v5);
    if (v8 && (ModelValueStorage = C3DSceneGetModelValueStorage(v8)) != 0)
    {
      v10 = ModelValueStorage;
      v11 = 0;
    }
    else
    {
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
        C3DConstraintApplyIK_cold_3(v12, v13, v14, v15, v16, v17, v18, v19);
      v10 = 0;
      v11 = 1;
    }
    if (a1 != 1.0 && v102 >= 1)
    {
      v20 = v102;
      v21 = v7;
      do
      {
        C3DModelValueStorageUpdateNodePresentationValueInNeeded(v10, (uint64_t)*v21);
        C3DNodeGetQuaternion((uint64_t)*v21);
        *((_OWORD *)v21 + 2) = v22;
        v21 += 6;
        --v20;
      }
      while (v20);
    }
    v23 = 0;
    v24 = v102 - 1;
    __asm { FMOV            V0.4S, #1.0 }
    v103 = _Q0;
    v104 = 0u;
    v107 = 0u;
    do
    {
      v29 = v102 - 1;
      v30 = (float32x4_t *)(v7 + 8);
      if (v102 >= 2)
      {
        do
        {
          v31 = *v7;
          v32 = (float32x4_t *)v30[-1].i64[0];
          if (!v23)
            C3DModelValueStorageUpdateNodePresentationValueInNeeded(v10, v30[-1].i64[0]);
          v33.n128_f64[0] = C3DNodeGetPosition(v31);
          v108 = v33;
          Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)v31);
          *(double *)v35.i64 = convertPositionToNode(Parent, v32, v108);
          v107 = v35;
          *(double *)v36.i64 = convertPositionToNode(0, v32, v4[9]);
          v37 = (int32x4_t)vmulq_f32(v107, v107);
          v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
          v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
          v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
          LODWORD(v40) = vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).u32[0];
          v41 = (int32x4_t)vmulq_f32(v36, v36);
          v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
          *(float32x2_t *)v41.i8 = vrsqrte_f32((float32x2_t)v37.u32[0]);
          *(float32x2_t *)v41.i8 = vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)));
          v104 = v36;
          v105 = vmulq_n_f32(v36, vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8))).f32[0]);
          v106 = vmulq_n_f32(v107, v40);
          v42 = vmulq_f32(v106, v105);
          v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
          if (v43 > 1.0)
            v43 = 1.0;
          if (v43 < -1.0)
            v43 = -1.0;
          v44 = acosf(v43);
          if (v4[11].n128_u8[8] || v44 > 0.00001)
          {
            v45 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL), vnegq_f32(v106)), v105, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), (int8x16_t)v106, 0xCuLL));
            v46 = vmulq_f32(v45, v45);
            v46.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), v46)).u64[0];
            v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 0);
            v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
            v49 = vrsqrteq_f32(v47);
            v50 = vmulq_f32(v49, vrsqrtsq_f32(v47, vmulq_f32(v49, v49)));
            v51 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v46.f32[0] != 0.0)), 0x1FuLL));
            v51.i32[3] = 0;
            v52 = vmulq_f32(v48, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)vmulq_f32(v50, vrsqrtsq_f32(v47, vmulq_f32(v50, v50))), v103));
            v52.f32[3] = v44;
            v113 = v52;
            v114[0] = 0u;
            C3DQuaternionMakeAxisAngle(v114, &v113);
            v112 = 0u;
            C3DNodeGetQuaternion((uint64_t)v32);
            v112 = v53;
            v111 = 0u;
            C3DQuaternionMult(&v112, (int32x4_t *)v114, &v111);
            C3DQuaternionNormalize(&v111);
            v54 = v30[-1].f32[2];
            if (v54 < 3.14159265)
            {
              v110 = 0uLL;
              *(double *)v55.i64 = C3DQuaternionGetRotationBetweenQuaternions(*v30, v111);
              v110 = v55;
              C3DQuaternionNormalize(&v110);
              v56 = acosf(v110.f32[3]);
              v62 = fabsf(v56 + v56);
              if (v62 > v54)
              {
                v109 = v111;
                C3DQuaternionSlerp(v30, &v109, &v111, v54 / v62, *(double *)v111.i64, v57, v58, v59, v60, v61);
                C3DQuaternionNormalize(&v111);
              }
            }
            C3DNodeSetQuaternion(v32, (__n128)v111);
          }
          if ((v11 & 1) == 0)
            C3DModelValueStorageUpdateTimestampOfNode(v10, (uint64_t)v32);
          v30 += 3;
          --v29;
        }
        while (v29);
      }
      v63 = vsubq_f32(v107, v104);
      v64 = vmulq_f32(v63, v63);
      ++v23;
    }
    while (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0]) >= 0.9&& v23 != 10);
    result = 1;
    if (a1 != 1.0 && v102 >= 2)
    {
      v67 = (float32x4_t *)(v7 + 10);
      do
      {
        v68 = (float32x4_t *)v67[-2].i64[0];
        v114[0] = 0uLL;
        C3DNodeGetQuaternion((uint64_t)v68);
        v114[0] = v69;
        C3DQuaternionSlerp(v67, v114, v114, a1, v70, v71, v72, v73, v74, v75);
        C3DQuaternionNormalize(v114);
        C3DNodeSetQuaternion(v68, (__n128)v114[0]);
        v67 += 3;
        --v24;
      }
      while (v24);
      return 1;
    }
    return result;
  }
  v76 = a4;
  if (v5 == a4)
  {
    if ((_C3DConstraintIKSetupJoints_done_55 & 1) == 0)
    {
      _C3DConstraintIKSetupJoints_done_55 = 1;
      v86 = scn_default_log();
      result = os_log_type_enabled(v86, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      C3DConstraintApplyIK_cold_1(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    return 0;
  }
  v77 = 0;
  v78 = 0;
  v79 = (uint64_t)a4;
  while (v79)
  {
    ++v78;
    v79 = C3DNodeGetParent(v79);
    v77 += 48;
    if ((_QWORD *)v79 == v5)
    {
      v80 = malloc_type_malloc(v77, 0x102004031CE6520uLL);
      v81 = 0;
      v4[10].n128_u64[0] = (unint64_t)v80;
      v4[10].n128_u64[1] = v78;
      do
      {
        v82 = v4[10].n128_u64[0];
        *(_DWORD *)(v82 + v81 + 8) = 1078530011;
        v83 = (const __CFDictionary *)v4[11].n128_u64[0];
        if (v83)
        {
          Value = CFDictionaryGetValue(v83, v76);
          v82 = v4[10].n128_u64[0];
          if (Value)
            *(_DWORD *)(v82 + v81 + 8) = (_DWORD)Value;
        }
        *(_QWORD *)(v82 + v81) = v76;
        C3DNodeGetQuaternion((uint64_t)v76);
        *(_OWORD *)(v4[10].n128_u64[0] + v81 + 16) = v85;
        v76 = (const void *)C3DNodeGetParent((uint64_t)v76);
        v81 += 48;
        --v78;
      }
      while (v78);
      v7 = (__n128 **)v4[10].n128_u64[0];
      goto LABEL_3;
    }
  }
  if ((_C3DConstraintIKSetupJoints_done & 1) != 0)
    return 0;
  _C3DConstraintIKSetupJoints_done = 1;
  v94 = scn_default_log();
  result = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
  if (result)
  {
    C3DConstraintApplyIK_cold_2(v94, v95, v96, v97, v98, v99, v100, v101);
    return 0;
  }
  return result;
}

const __CFString *C3DConstraintIKCopyTargetPath()
{
  return CFSTR("transform");
}

void C3DConstraintIKSetChainRoot(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 136) = a2;
  v12 = *(void **)(a1 + 160);
  if (v12)
  {
    free(v12);
    *(_QWORD *)(a1 + 160) = 0;
  }
}

void C3DConstraintIKSetTarget(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[9] = a2;
}

void C3DConstraintIKSetMaxRotationForNode(uint64_t a1, void *key, float a3)
{
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  float *v9;

  Mutable = *(__CFDictionary **)(a1 + 176);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    *(_QWORD *)(a1 + 176) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, (const void *)LODWORD(a3));
  *(_BYTE *)(a1 + 184) = 1;
  v7 = *(_QWORD *)(a1 + 160);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 168);
    if (v8 >= 1)
    {
      v9 = (float *)(v7 + 8);
      do
      {
        *v9 = a3;
        v9 += 12;
        --v8;
      }
      while (v8);
    }
  }
}

double convertPositionToNode(float32x4_t *a1, float32x4_t *a2, __n128 a3)
{
  float32x4_t *WorldMatrix;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  __int128 *Identity;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float32x4_t v14[3];
  __int128 v15;
  _OWORD v16[4];
  simd_float4x4 v17;
  _OWORD v18[4];
  __n128 v19;

  v19 = a3;
  if (a1 != a2)
  {
    memset(v18, 0, sizeof(v18));
    C3DMatrix4x4MakeTranslation((uint64_t)v18, &v19);
    WorldMatrix = C3DNodeGetWorldMatrix(a2);
    v6 = (simd_float4)WorldMatrix[3];
    v8 = *(simd_float4 *)WorldMatrix;
    v7 = (simd_float4)WorldMatrix[1];
    v17.columns[2] = (simd_float4)WorldMatrix[2];
    v17.columns[3] = v6;
    v17.columns[0] = v8;
    v17.columns[1] = v7;
    C3DMatrix4x4Invert(&v17, &v17);
    if (a1)
      Identity = (__int128 *)C3DNodeGetWorldMatrix(a1);
    else
      Identity = (__int128 *)C3DMatrix4x4GetIdentity();
    v10 = *Identity;
    v11 = Identity[1];
    v12 = Identity[3];
    v16[2] = Identity[2];
    v16[3] = v12;
    v16[0] = v10;
    v16[1] = v11;
    v15 = 0u;
    memset(v14, 0, sizeof(v14));
    C3DMatrix4x4Mult((uint64_t)v16, (float32x4_t *)&v17, v14);
    C3DMatrix4x4Mult((uint64_t)v18, v14, v14);
    a3.n128_u64[0] = v15;
  }
  return a3.n128_f64[0];
}

void C3DConstraintDistanceSetTargetDirection(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[11] = a2;
}

void C3DConstraintDistanceSetKeepTargetDirection(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 152) = a2;
}

void C3DConstraintDistanceSetMinimumDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 144) = a2;
}

void C3DConstraintDistanceSetMaximumDistance(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 148) = a2;
}

BOOL C3DConstraintApplyDistance(float a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32_t v22;
  float32x4_t v23;
  uint32_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v66;
  float v68;
  float32x4_t v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t *Parent;
  simd_float4x4 *WorldMatrix;
  const void *Target;
  void *TargetAddress;
  size_t v102;
  float v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  simd_float4x4 v120;

  if (!a3)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(float32x4_t **)(v16 + 136);
  if (v17)
  {
    v119.i32[2] = 0;
    v119.i64[0] = 0;
    v118.i32[2] = 0;
    v118.i64[0] = 0;
    C3DNodeGetWorldPosition(v17, (__n128 *)&v119);
    C3DNodeGetWorldPosition(a4, (__n128 *)&v118);
    v18 = vsubq_f32(v118, v119);
    v19 = vmulq_f32(v18, v18);
    v20 = vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1));
    v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), v20);
    v21.f32[0] = sqrtf(v21.f32[0]);
    v114 = v21;
    if (v21.f32[0] == 0.0)
    {
      v22 = arc4random();
      *(float32x2_t *)v23.f32 = vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random(), v22));
      v111 = v23;
      v24 = arc4random();
      v25 = v111;
      v25.f32[2] = (float)v24;
      v26 = (int32x4_t)vmulq_f32(v25, v25);
      v27 = v25;
      v28 = (float32x4_t)vdupq_laneq_s32(v26, 2);
      v26.i32[0] = vadd_f32(*(float32x2_t *)v28.f32, vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
      *(float32x2_t *)v28.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
      *(float32x2_t *)v28.f32 = vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32)));
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32);
      v29 = vmulq_n_f32(v27, vmul_f32(*(float32x2_t *)v28.f32, vrsqrts_f32((float32x2_t)v26.u32[0], *(float32x2_t *)v20.f32)).f32[0]);
    }
    else
    {
      v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
      v29 = vdivq_f32(v18, v28);
    }
    if (*(_BYTE *)(v16 + 152))
    {
      v117 = 0uLL;
      v112 = v29;
      C3DNodeGetWorldOrientation(*(float32x4_t **)(v16 + 136), &v117);
      v30 = v117;
      v31 = (int32x4_t)vnegq_f32(v117);
      v32 = (float32x4_t)v31;
      v32.i32[3] = v117.i32[3];
      v33 = (int8x16_t)vmulq_f32(v32, v32);
      *(float32x2_t *)v33.i8 = vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      v34 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1)), 0);
      v35 = vrsqrteq_f32(v34);
      v36 = vmulq_f32(v35, vrsqrtsq_f32(v34, vmulq_f32(v35, v35)));
      v37 = (int8x16_t)vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36)));
      v38 = (int8x16_t)vceqzq_f32(v34);
      __asm { FMOV            V0.4S, #1.0 }
      v44 = vmulq_f32(v32, (float32x4_t)vbslq_s8(v38, _Q0, v37));
      v45 = vnegq_f32(v112);
      v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL);
      v47 = vnegq_f32(v44);
      v48 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), v47), v46, v112);
      v49 = (int8x16_t)vaddq_f32(v48, v48);
      v50 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
      v51 = vmlaq_laneq_f32(v45, v50, v44, 3);
      v52 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), v47), v50, v46);
      v53 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL));
      v54 = *(float32x4_t *)(v16 + 176);
      v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
      v56 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v53)), v54, v55);
      _Q2 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), v56, 0xCuLL);
      v58 = vmulq_f32(v53, v54);
      v59 = vmulq_f32(v53, v53);
      v60 = vmulq_f32(v54, v54);
      _Q2.f32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0]+ sqrtf(vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).f32[0]));
      v61 = (int8x16_t)vmulq_f32(_Q2, _Q2);
      *(float32x2_t *)v61.i8 = vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
      v62 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1)), 0);
      v63 = vrsqrteq_f32(v62);
      v64 = vmulq_f32(v63, vrsqrtsq_f32(v62, vmulq_f32(v63, v63)));
      _Q3 = vmulq_f32(v64, vrsqrtsq_f32(v62, vmulq_f32(v64, v64)));
      v66 = vmulq_f32(_Q2, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v62), _Q0, (int8x16_t)_Q3));
      _Q5 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
      _Q1 = vmulq_f32(_Q5, v66);
      _Q2.i32[0] = v66.i32[2];
      __asm { FMLA            S1, S2, V5.S[2] }
      _Q3.i32[0] = v66.i32[3];
      v68 = -(float)(_Q1.f32[0] + (float)(_Q5.f32[3] * v66.f32[3]));
      __asm { FMLA            S1, S3, V5.S[3] }
      _Q3.i32[0] = 0;
      v70 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q3, _Q1), 0), (int8x16_t)vnegq_f32(v66), (int8x16_t)v66);
      if (_Q1.f32[0] >= 0.0)
        v71 = _Q1.f32[0];
      else
        v71 = v68;
      if (1.0 - v71 <= 0.00100000005)
      {
        v75 = 1.0 - a1;
        v76 = a1;
      }
      else
      {
        v110 = v31;
        v113 = v117;
        v108 = v55;
        v109 = v32;
        v106 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
        v107 = v53;
        v105 = v70;
        v72 = acosf(v71);
        v73 = sinf(v72);
        v104 = sinf((float)(1.0 - a1) * v72) / v73;
        v74 = sinf(v72 * a1);
        v75 = v104;
        v70 = v105;
        _Q5 = v106;
        v53 = v107;
        v55 = v108;
        v32 = v109;
        v31 = v110;
        v30 = v113;
        v76 = v74 / v73;
      }
      v77 = vmlaq_n_f32(vmulq_n_f32(v70, v76), _Q5, v75);
      v78 = vnegq_f32(v77);
      v79 = (float32x4_t)vzip1q_s32((int32x4_t)v78, (int32x4_t)v78);
      v79.i32[0] = v78.i32[2];
      v80 = (float32x4_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78);
      v80.i32[0] = v78.i32[1];
      v78.i32[3] = v77.i32[3];
      v81 = v53;
      v81.i32[3] = v53.i32[0];
      v82 = vmlaq_f32(vmlaq_f32(vmulq_f32(vmulq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v78, 3), (int8x16_t)v78, 4uLL)), (float32x4_t)xmmword_1DD007D20), (float32x4_t)0, v78), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v53, (int8x16_t)v53, 0xCuLL), (int8x16_t)v53, 8uLL), v79));
      v83 = v77;
      v83.i32[3] = v77.i32[0];
      v84 = vmlsq_f32(v82, v80, v55);
      v85 = (float32x4_t)vzip1q_s32((int32x4_t)v84, (int32x4_t)v84);
      v85.i32[0] = v84.i32[2];
      v86 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v84, 3), (int8x16_t)v84, 4uLL)), (float32x4_t)xmmword_1DD007D20), v84, v77, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), (int8x16_t)v77, 8uLL), v85));
      v87 = (float32x4_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84);
      v87.i32[0] = v84.i32[1];
      v88 = vnegq_f32(vmlsq_f32(v86, v87, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL)));
      v89 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v88, (int8x16_t)v88, 0xCuLL), (int8x16_t)v88, 8uLL);
      v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
      v88.i32[3] = v88.i32[0];
      v91 = (float32x4_t)vzip1q_s32(v31, v31);
      v91.i32[0] = v31.i32[2];
      v92 = vmlaq_f32(vmlaq_f32(vmulq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v32, 3), (int8x16_t)v32, 4uLL), v88), (float32x4_t)xmmword_1DD007D20), (float32x4_t)0, v32), (float32x4_t)xmmword_1DD007D20, vmulq_f32(v91, v89));
      v93 = (float32x4_t)vuzp1q_s32(v31, v31);
      v93.i32[0] = v31.i32[1];
      v94 = vmlsq_f32(v92, v93, v90);
      v95 = v30;
      v95.i32[3] = v30.i32[0];
      v96 = (float32x4_t)vzip1q_s32((int32x4_t)v94, (int32x4_t)v94);
      v96.i32[0] = v94.i32[2];
      v97 = vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v95, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v94, 3), (int8x16_t)v94, 4uLL)), (float32x4_t)xmmword_1DD007D20), v94, v30, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL), v96));
      v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
      v20 = (float32x4_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94);
      v20.i32[0] = v94.i32[1];
      v29 = vmlsq_f32(v97, v20, v28);
    }
    v28.i32[0] = *(_DWORD *)(v16 + 144);
    v20.i32[0] = *(_DWORD *)(v16 + 148);
    v116 = vmlaq_n_f32(v118, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v28, v114), 0), (int8x16_t)vmlaq_n_f32(v119, v29, v28.f32[0]), vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v114, v20), 0), (int8x16_t)vmlaq_n_f32(v119, v29, v20.f32[0]), (int8x16_t)vmlaq_n_f32(v119, v29, v114.f32[0]))), v118), a1);
    Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a4);
    if (Parent)
      WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(Parent);
    else
      WorldMatrix = (simd_float4x4 *)MEMORY[0x1E0C83FF0];
    v120 = __invert_f4(*WorldMatrix);
    v117 = vaddq_f32((float32x4_t)v120.columns[3], vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)v120.columns[1], *(float32x2_t *)v116.f32, 1), (float32x4_t)v120.columns[0], v116.f32[0]), (float32x4_t)v120.columns[2], v116, 2));
    Target = (const void *)C3DModelTargetGetTarget(a5);
    TargetAddress = (void *)C3DModelTargetGetTargetAddress(a5);
    v102 = C3DSizeOfBaseType(9);
    C3DSetValue(Target, TargetAddress, &v117, v102, 6, 0);
  }
  return v17 != 0;
}

const __CFString *C3DConstraintDistanceCopyTargetPath()
{
  return CFSTR("transform");
}

uint64_t C3DConstraintCreateDistance()
{
  uint64_t Instance;

  if (C3DConstraintDistanceGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintDistanceGetTypeID_onceToken, &__block_literal_global_23_0);
  Instance = C3DTypeCreateInstance_(C3DConstraintDistanceGetTypeID_typeID, 0xB0uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_QWORD *)(Instance + 136) = 0;
  *(_QWORD *)(Instance + 144) = 0x7F7FFFFF00000000;
  *(_BYTE *)(Instance + 152) = 0;
  *(_OWORD *)(Instance + 176) = xmmword_1DD007960;
  *(int32x2_t *)(Instance + 156) = vdup_n_s32(0x43B40000u);
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyDistance;
  *(_QWORD *)(Instance + 96) = C3DConstraintDistanceCopyTargetPath;
  return Instance;
}

void C3DConstraintAccelerationSetMaximumPositionVelocity(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 136) = a2;
}

void C3DConstraintAccelerationSetMaximumPositionAcceleration(uint64_t a1, float a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(float *)(a1 + 140) = a2;
}

uint64_t C3DConstraintAccelerationInit(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v15;
  __n128 v16;

  if (!a1)
  {
    v5 = scn_default_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      C3DConstraintControllerInitializeConstraint_cold_1(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v13 = malloc_type_calloc(1uLL, 0x60uLL, 0x100004084AB7CDAuLL);
  *(_QWORD *)(a2 + 56) = v13;
  v16.n128_u32[2] = 0;
  v16.n128_u64[0] = 0;
  C3DNodeGetWorldPosition(a3, &v16);
  *v13 = v16;
  v13[1] = 0u;
  v15 = 0uLL;
  C3DNodeGetWorldOrientation(a3, &v15);
  v13[2] = v15;
  v13[3] = 0u;
  return 1;
}

uint64_t C3DConstraintApplyAcceleration(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, float a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double SystemTime;
  float32x4_t *Parent;
  simd_float4x4 *WorldMatrix;
  float *v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float32x4_t v55;
  const void *Target;
  void *TargetAddress;
  size_t v58;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x2_t v64;
  float32x4_t v66;
  float32x4_t v67;
  simd_float4x4 v68;

  if (!a2)
  {
    v9 = scn_default_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  v17 = *(_QWORD *)(a2 + 56);
  SystemTime = C3DEngineContextGetSystemTime(a1);
  if (SystemTime != *(double *)(v17 + 72))
  {
    Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a3);
    if (Parent)
      WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(Parent);
    else
      WorldMatrix = (simd_float4x4 *)MEMORY[0x1E0C83FF0];
    v68 = __invert_f4(*WorldMatrix);
    v60 = (float32x4_t)v68.columns[0];
    v61 = (float32x4_t)v68.columns[1];
    v62 = (float32x4_t)v68.columns[3];
    v63 = (float32x4_t)v68.columns[2];
    if (*(_BYTE *)(v17 + 80))
    {
      *(double *)v68.columns[0].i64 = SystemTime - *(double *)(v17 + 72);
      v68.columns[0].f32[0] = *(double *)v68.columns[0].i64;
    }
    else
    {
      v68.columns[0].i32[0] = 1015580809;
    }
    v64 = *(int32x2_t *)v68.columns[0].f32;
    v21 = *(float **)(a2 + 16);
    *(uint64_t *)((char *)v67.i64 + 4) = 0;
    v67.i32[0] = 0;
    C3DNodeGetWorldPosition(a3, (__n128 *)&v67);
    if (!*(_BYTE *)(v17 + 80))
    {
      *(float32x4_t *)v17 = v67;
      *(_BYTE *)(v17 + 80) = 1;
    }
    *(double *)(v17 + 72) = C3DEngineContextGetSystemTime(a1);
    v22 = v21[34];
    v23 = v21[35];
    v24 = v67;
    v25 = *(float32x4_t *)v17;
    v26 = *(float32x4_t *)(v17 + 16);
    v27 = vsubq_f32(v67, *(float32x4_t *)v17);
    v28 = (float32x4_t)vdupq_lane_s32(v64, 0);
    v29 = vdivq_f32(v27, v28);
    v30 = vdivq_f32(vsubq_f32(v29, v26), v28);
    v31 = vmulq_f32(v30, v30);
    LODWORD(v32) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).u32[0];
    if (sqrtf(v32) > v23)
    {
      v33 = v32;
      v34 = vrsqrte_f32((float32x2_t)LODWORD(v32));
      v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)LODWORD(v33), vmul_f32(v34, v34)));
      v29 = vmlaq_f32(v26, v28, vmulq_n_f32(vmulq_n_f32(v30, vmul_f32(v35, vrsqrts_f32((float32x2_t)LODWORD(v33), vmul_f32(v35, v35))).f32[0]), v23));
    }
    v36 = vmulq_f32(v29, v29);
    LODWORD(v37) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).u32[0];
    if (sqrtf(v37) > v22)
    {
      v38 = v37;
      v39 = vrsqrte_f32((float32x2_t)LODWORD(v37));
      v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)LODWORD(v38), vmul_f32(v39, v39)));
      v29 = vmulq_n_f32(vmulq_n_f32(v29, vmul_f32(v40, vrsqrts_f32((float32x2_t)LODWORD(v38), vmul_f32(v40, v40))).f32[0]), v22);
    }
    v41 = v21[36];
    v42 = vmulq_n_f32(v29, 1.0 - v21[37]);
    if (v41 != 0.0)
    {
      v43 = vmulq_f32(v27, v27);
      v44 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]);
      v45 = vmulq_f32(v42, v42);
      LODWORD(v46) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u32[0];
      v47 = sqrtf(v46);
      if (v44 >= v41)
      {
        *(float *)(v17 + 64) = v47;
      }
      else
      {
        v48 = v44 / v41;
        if (v48 >= 1.0)
          v49 = 1.0;
        else
          v49 = v48 * v48;
        v50 = v49 * *(float *)(v17 + 64);
        if (v47 > v50)
        {
          v51 = v46;
          v52 = vrsqrte_f32((float32x2_t)LODWORD(v46));
          v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)LODWORD(v51), vmul_f32(v52, v52)));
          v42 = vmulq_n_f32(vmulq_n_f32(v42, vmul_f32(v53, vrsqrts_f32((float32x2_t)LODWORD(v51), vmul_f32(v53, v53))).f32[0]), v50);
        }
      }
    }
    v54 = vmlaq_f32(v25, v28, v42);
    if (a5 != 0.0)
    {
      v55 = vmlaq_n_f32(v24, vsubq_f32(v54, v24), a5);
      v42 = vdivq_f32(vsubq_f32(v55, v25), v28);
      v54 = v55;
    }
    *(float32x4_t *)v17 = v54;
    *(float32x4_t *)(v17 + 16) = v42;
    v66 = vaddq_f32(v62, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, v54.f32[0]), v61, *(float32x2_t *)v54.f32, 1), v63, v54, 2));
    Target = (const void *)C3DModelTargetGetTarget(a4);
    TargetAddress = (void *)C3DModelTargetGetTargetAddress(a4);
    v58 = C3DSizeOfBaseType(9);
    C3DSetValue(Target, TargetAddress, &v66, v58, 6, 0);
  }
  return 1;
}

const __CFString *C3DConstraintAccelerationCopyTargetPath()
{
  return CFSTR("transform");
}

uint64_t C3DConstraintCreateAcceleration()
{
  uint64_t Instance;

  if (C3DConstraintAccelerationGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintAccelerationGetTypeID_onceToken, &__block_literal_global_25_1);
  Instance = C3DTypeCreateInstance_(C3DConstraintAccelerationGetTypeID_typeID, 0x88uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_OWORD *)(Instance + 136) = xmmword_1DD02C600;
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyAcceleration;
  *(_QWORD *)(Instance + 96) = C3DConstraintAccelerationCopyTargetPath;
  *(_QWORD *)(Instance + 80) = C3DConstraintAccelerationInit;
  return Instance;
}

void C3DConstraintReplicatorSetPositionEnabled(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFE | a2;
}

void C3DConstraintReplicatorSetOrientationEnabled(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 2;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFD | v12;
}

void C3DConstraintReplicatorSetScaleEnabled(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DConstaintSliderSetCategoryBitMask_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 4;
  else
    v12 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFB | v12;
}

void C3DConstraintReplicatorSetPositionOffset(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      C3DConstaintSliderSetCategoryBitMask_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[10] = a2;
}

float32x4_t *C3DConstraintApplyReplicator(float a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *Parent;
  float32x4_t *result;
  float32x4_t *v19;
  float32x4_t *v20;
  simd_float4x4 *WorldMatrix;
  char v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32_t v69;
  float32x4_t v70;
  float32_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t *v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x2_t v113;
  float32x2_t v114;
  float32x4_t v115;
  float v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v132;
  float v137;
  float32x4_t v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  uint64_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float v160;
  float32x2_t v161;
  float32x2_t v162;
  float32x4_t v163;
  const void *Target;
  void *TargetAddress;
  size_t v166;
  float v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  __n128 v179[4];
  float32x4_t v180;
  simd_float4x4 v181;

  if (!a3)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(_QWORD *)(a3 + 16);
  if (!*(_QWORD *)(v16 + 136))
    return 0;
  Parent = (float32x4_t *)C3DNodeGetParent((uint64_t)a4);
  result = C3DNodeGetWorldMatrix(a4);
  if (!result)
    return result;
  v19 = result;
  v20 = (float32x4_t *)MEMORY[0x1E0C83FF0];
  if (Parent)
    WorldMatrix = (simd_float4x4 *)C3DNodeGetWorldMatrix(Parent);
  else
    WorldMatrix = (simd_float4x4 *)MEMORY[0x1E0C83FF0];
  v181 = __invert_f4(*WorldMatrix);
  v22 = *(_BYTE *)(v16 + 144);
  v176 = (float32x4_t)v181.columns[1];
  v177 = (float32x4_t)v181.columns[0];
  v174 = (float32x4_t)v181.columns[3];
  v175 = (float32x4_t)v181.columns[2];
  if ((v22 & 1) != 0)
  {
    v180.i32[2] = 0;
    v180.i64[0] = 0;
    C3DNodeGetWorldPosition(*(float32x4_t **)(v16 + 136), (__n128 *)&v180);
    v179[0].n128_u32[2] = 0;
    v179[0].n128_u64[0] = 0;
    C3DNodeGetWorldPosition(a4, v179);
    v23 = vmlaq_n_f32((float32x4_t)v179[0], vsubq_f32(vaddq_f32(v180, *(float32x4_t *)(v16 + 160)), (float32x4_t)v179[0]), a1);
    v22 = *(_BYTE *)(v16 + 144);
  }
  else
  {
    v23 = v19[3];
  }
  v173 = v23;
  if ((v22 & 2) != 0)
  {
    v42 = C3DNodeGetWorldMatrix(*(float32x4_t **)(v16 + 136));
    v43 = v42[1];
    v44 = (int32x4_t)vmulq_f32(*v42, *v42);
    v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
    v45 = v42[2];
    v46 = vrsqrte_f32((float32x2_t)v44.u32[0]);
    v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46)));
    v48 = vmulq_n_f32(*v42, vmul_f32(v47, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v47, v47))).f32[0]);
    v49 = (int32x4_t)vmulq_f32(v43, v43);
    v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1))).u32[0];
    v50 = vrsqrte_f32((float32x2_t)v49.u32[0]);
    v51 = vmul_f32(v50, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v50, v50)));
    v52 = vmulq_n_f32(v43, vmul_f32(v51, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v51, v51))).f32[0]);
    v53 = (int32x4_t)vmulq_f32(v45, v45);
    v53.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1))).u32[0];
    v54 = vrsqrte_f32((float32x2_t)v53.u32[0]);
    v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v54, v54)));
    v56 = vmulq_n_f32(v45, vmul_f32(v55, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v55, v55))).f32[0]);
    v57 = (float)(v48.f32[0] + v52.f32[1]) + v56.f32[2];
    if (v57 <= 0.0)
    {
      if (v48.f32[0] <= v52.f32[1] || v48.f32[0] <= v56.f32[2])
      {
        if (v52.f32[1] <= v56.f32[2])
        {
          v100.i64[0] = v56.i64[0];
          v100.f32[2] = (float)(v56.f32[2] + 1.0) - v48.f32[0];
          v100.i32[3] = v48.i32[1];
          v60 = (float32x4_t)vrev64q_s32((int32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v52, (int32x4_t)v48), (int8x16_t)v52, 8uLL));
          v59.i64[0] = vaddq_f32(v56, v60).u64[0];
          v59.i64[1] = vsubq_f32(v100, v60).i64[1];
          v60.i32[0] = v59.i32[2];
        }
        else
        {
          v66 = v52;
          v66.f32[1] = (float)(v52.f32[1] + 1.0) - v48.f32[0];
          v66.i32[3] = v56.i32[0];
          v67 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v48, (int32x4_t)v56), vtrn1q_s32((int32x4_t)v56, (int32x4_t)v48));
          v68 = (int32x4_t)vaddq_f32(v52, v67);
          v60 = vsubq_f32(v66, v67);
          v59 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v68), (int32x4_t)v60);
          v60.i32[0] = v60.i32[1];
        }
      }
      else
      {
        v71 = (float)(v48.f32[0] + 1.0) - v52.f32[1];
        v72 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)vtrn1q_s32((int32x4_t)v52, (int32x4_t)v56), 0xCuLL);
        v59 = vaddq_f32(v72, v48);
        v72.f32[0] = v71;
        v48.i32[0] = v56.i32[2];
        v48.i32[3] = v56.i32[1];
        v60 = vsubq_f32(v72, v48);
        v59.i32[0] = v60.i32[0];
        v59.i32[3] = v60.i32[3];
      }
    }
    else
    {
      v58 = (float32x4_t)vzip2q_s32((int32x4_t)v52, vuzp1q_s32((int32x4_t)v52, (int32x4_t)v56));
      v58.i32[2] = v48.i32[1];
      v60 = (float32x4_t)vtrn2q_s32((int32x4_t)v56, vzip2q_s32((int32x4_t)v56, (int32x4_t)v48));
      v60.i32[2] = v52.i32[0];
      v59 = vsubq_f32(v58, v60);
      v60.i32[3] = 1.0;
      v58.f32[3] = v57;
      v59.i32[3] = vaddq_f32(v58, v60).i32[3];
      v60.i32[0] = v59.i32[3];
    }
    v171 = vmulq_n_f32(v59, 0.5 / sqrtf(v60.f32[0]));
    v101 = C3DNodeGetWorldMatrix(a4);
    v102 = v101[1];
    v103 = (int32x4_t)vmulq_f32(*v101, *v101);
    v103.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))).u32[0];
    v104 = v101[2];
    v105 = vrsqrte_f32((float32x2_t)v103.u32[0]);
    v106 = vmul_f32(v105, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(v105, v105)));
    v107 = vmulq_n_f32(*v101, vmul_f32(v106, vrsqrts_f32((float32x2_t)v103.u32[0], vmul_f32(v106, v106))).f32[0]);
    v108 = (int32x4_t)vmulq_f32(v102, v102);
    v108.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v108, 2), vadd_f32(*(float32x2_t *)v108.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1))).u32[0];
    v109 = vrsqrte_f32((float32x2_t)v108.u32[0]);
    v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v109, v109)));
    v111 = vmulq_n_f32(v102, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v110, v110))).f32[0]);
    v112 = (int32x4_t)vmulq_f32(v104, v104);
    v112.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v112, 2), vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1))).u32[0];
    v113 = vrsqrte_f32((float32x2_t)v112.u32[0]);
    v114 = vmul_f32(v113, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v113, v113)));
    v115 = vmulq_n_f32(v104, vmul_f32(v114, vrsqrts_f32((float32x2_t)v112.u32[0], vmul_f32(v114, v114))).f32[0]);
    v116 = (float)(v107.f32[0] + v111.f32[1]) + v115.f32[2];
    if (v116 <= 0.0)
    {
      if (v107.f32[0] <= v111.f32[1] || v107.f32[0] <= v115.f32[2])
      {
        if (v111.f32[1] <= v115.f32[2])
        {
          v126.i64[0] = v115.i64[0];
          v126.f32[2] = (float)(v115.f32[2] + 1.0) - v107.f32[0];
          v126.i32[3] = v107.i32[1];
          v119 = (float32x4_t)vrev64q_s32((int32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v111, (int32x4_t)v107), (int8x16_t)v111, 8uLL));
          v118.i64[0] = vaddq_f32(v115, v119).u64[0];
          v118.i64[1] = vsubq_f32(v126, v119).i64[1];
          v119.i32[0] = v118.i32[2];
        }
        else
        {
          v121 = v111;
          v121.f32[1] = (float)(v111.f32[1] + 1.0) - v107.f32[0];
          v121.i32[3] = v115.i32[0];
          v122 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v107, (int32x4_t)v115), vtrn1q_s32((int32x4_t)v115, (int32x4_t)v107));
          v123 = (int32x4_t)vaddq_f32(v111, v122);
          v119 = vsubq_f32(v121, v122);
          v118 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v123), (int32x4_t)v119);
          v119.i32[0] = v119.i32[1];
        }
      }
      else
      {
        v124 = (float)(v107.f32[0] + 1.0) - v111.f32[1];
        v125 = (float32x4_t)vextq_s8((int8x16_t)v111, (int8x16_t)vtrn1q_s32((int32x4_t)v111, (int32x4_t)v115), 0xCuLL);
        v118 = vaddq_f32(v125, v107);
        v125.f32[0] = v124;
        v107.i32[0] = v115.i32[2];
        v107.i32[3] = v115.i32[1];
        v119 = vsubq_f32(v125, v107);
        v118.i32[0] = v119.i32[0];
        v118.i32[3] = v119.i32[3];
      }
    }
    else
    {
      v117 = (float32x4_t)vzip2q_s32((int32x4_t)v111, vuzp1q_s32((int32x4_t)v111, (int32x4_t)v115));
      v117.i32[2] = v107.i32[1];
      v119 = (float32x4_t)vtrn2q_s32((int32x4_t)v115, vzip2q_s32((int32x4_t)v115, (int32x4_t)v107));
      v119.i32[2] = v111.i32[0];
      v118 = vsubq_f32(v117, v119);
      v119.i32[3] = 1.0;
      v117.f32[3] = v116;
      v118.i32[3] = vaddq_f32(v117, v119).i32[3];
      v119.i32[0] = v118.i32[3];
    }
    _Q6 = vmulq_n_f32(v118, 0.5 / sqrtf(v119.f32[0]));
    v128 = *(float32x4_t *)(v16 + 192);
    v129 = v171;
    v129.i32[3] = v171.i32[0];
    v130 = (float32x4_t)vzip1q_s32((int32x4_t)v128, (int32x4_t)v128);
    v130.i32[0] = *(_QWORD *)(v16 + 200);
    _Q3 = (float32x4_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128);
    _Q3.i32[0] = HIDWORD(*(_QWORD *)(v16 + 192));
    v132 = vmlsq_f32(vmlaq_f32(vmlaq_laneq_f32(vmulq_f32(vmulq_f32(v129, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32((int32x4_t)v128, 3), (int8x16_t)v128, 4uLL)), (float32x4_t)xmmword_1DD007D20), v128, v171, 3), (float32x4_t)xmmword_1DD007D20, vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v171, (int8x16_t)v171, 0xCuLL), (int8x16_t)v171, 8uLL), v130)), _Q3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v171, (int32x4_t)v171), (int8x16_t)v171, 0xCuLL));
    _Q0 = vmulq_f32(_Q6, v132);
    _S2 = v132.i32[2];
    __asm { FMLA            S0, S2, V6.S[2] }
    _Q3.i32[0] = v132.i32[3];
    v137 = -(float)(_Q0.f32[0] + (float)(_Q6.f32[3] * v132.f32[3]));
    __asm { FMLA            S0, S3, V6.S[3] }
    _Q3.i32[0] = 0;
    v139 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q3, _Q0), 0), (int8x16_t)vnegq_f32(v132), (int8x16_t)v132);
    if (_Q0.f32[0] < 0.0)
      _Q0.f32[0] = v137;
    if (1.0 - _Q0.f32[0] <= 0.00100000005)
    {
      v143 = 1.0 - a1;
      v144 = a1;
    }
    else
    {
      v169 = v139;
      v172 = _Q6;
      v140 = acosf(_Q0.f32[0]);
      v141 = sinf(v140);
      v167 = sinf((float)(1.0 - a1) * v140) / v141;
      v142 = sinf(v140 * a1);
      v143 = v167;
      v139 = v169;
      _Q6 = v172;
      v144 = v142 / v141;
    }
    v23 = v173;
    v74 = vmlaq_n_f32(vmulq_n_f32(v139, v144), _Q6, v143);
    if ((*(_BYTE *)(v16 + 144) & 4) != 0)
      goto LABEL_34;
LABEL_58:
    v145 = v19[1];
    v146 = v19[2];
    v147 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v146, (int32x4_t)v146), (int8x16_t)v146, 0xCuLL), vnegq_f32(v145)), v146, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL));
    v148 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), v147, 0xCuLL), *v19);
    _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v148, 2), vaddq_f32(v148, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1))).f32[0] < 0.0;
    v149 = 1.0;
    if (_NF)
      v149 = -1.0;
    v150 = vmulq_f32(*v19, *v19);
    v151 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v150, 2), vaddq_f32(v150, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.f32, 1)));
    v151.f32[0] = sqrtf(v151.f32[0]);
    v152 = vmulq_f32(v145, v145);
    v153 = vmulq_f32(v146, v146);
    v151.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0]);
    v151.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v153, 2), vaddq_f32(v153, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v153.f32, 1))).f32[0]);
    v99 = vmulq_n_f32(v151, v149);
    goto LABEL_61;
  }
  v24 = v19[1];
  v25 = (int32x4_t)vmulq_f32(*v19, *v19);
  v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
  v26 = v19[2];
  v27 = vrsqrte_f32((float32x2_t)v25.u32[0]);
  v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27)));
  v29 = vmulq_n_f32(*v19, vmul_f32(v28, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v28, v28))).f32[0]);
  v30 = (int32x4_t)vmulq_f32(v24, v24);
  v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
  v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
  v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
  v33 = vmulq_n_f32(v24, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]);
  v34 = (int32x4_t)vmulq_f32(v26, v26);
  v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
  v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
  v37 = vmulq_n_f32(v26, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
  v38 = (float)(v29.f32[0] + v33.f32[1]) + v37.f32[2];
  if (v38 <= 0.0)
  {
    if (v29.f32[0] <= v33.f32[1] || v29.f32[0] <= v37.f32[2])
    {
      if (v33.f32[1] <= v37.f32[2])
      {
        v73.i64[0] = v37.i64[0];
        v73.f32[2] = (float)(v37.f32[2] + 1.0) - v29.f32[0];
        v73.i32[3] = v29.i32[1];
        v41 = (float32x4_t)vrev64q_s32((int32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v33, (int32x4_t)v29), (int8x16_t)v33, 8uLL));
        v40.i64[0] = vaddq_f32(v37, v41).u64[0];
        v40.i64[1] = vsubq_f32(v73, v41).i64[1];
        v41.i32[0] = v40.i32[2];
      }
      else
      {
        v62 = v33;
        v62.f32[1] = (float)(v33.f32[1] + 1.0) - v29.f32[0];
        v62.i32[3] = v37.i32[0];
        v63 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v29, (int32x4_t)v37), vtrn1q_s32((int32x4_t)v37, (int32x4_t)v29));
        v64 = (int32x4_t)vaddq_f32(v33, v63);
        v41 = vsubq_f32(v62, v63);
        v40 = (float32x4_t)vtrn2q_s32(vrev64q_s32(v64), (int32x4_t)v41);
        v41.i32[0] = v41.i32[1];
      }
    }
    else
    {
      v69 = (float)(v29.f32[0] + 1.0) - v33.f32[1];
      v70 = (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)vtrn1q_s32((int32x4_t)v33, (int32x4_t)v37), 0xCuLL);
      v40 = vaddq_f32(v70, v29);
      v70.f32[0] = v69;
      v29.i32[0] = v37.i32[2];
      v29.i32[3] = v37.i32[1];
      v41 = vsubq_f32(v70, v29);
      v40.i32[0] = v41.i32[0];
      v40.i32[3] = v41.i32[3];
    }
  }
  else
  {
    v39 = (float32x4_t)vzip2q_s32((int32x4_t)v33, vuzp1q_s32((int32x4_t)v33, (int32x4_t)v37));
    v39.i32[2] = v29.i32[1];
    v41 = (float32x4_t)vtrn2q_s32((int32x4_t)v37, vzip2q_s32((int32x4_t)v37, (int32x4_t)v29));
    v41.i32[2] = v33.i32[0];
    v40 = vsubq_f32(v39, v41);
    v41.i32[3] = 1.0;
    v39.f32[3] = v38;
    v40.i32[3] = vaddq_f32(v39, v41).i32[3];
    v41.i32[0] = v40.i32[3];
  }
  v74 = vmulq_n_f32(v40, 0.5 / sqrtf(v41.f32[0]));
  if ((v22 & 4) == 0)
    goto LABEL_58;
LABEL_34:
  v170 = v74;
  v75 = C3DNodeGetWorldMatrix(*(float32x4_t **)(v16 + 136));
  v76 = v75[1];
  v77 = v75[2];
  v78 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL), vnegq_f32(v76)), v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL));
  v79 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), v78, 0xCuLL), *v75);
  _NF = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0] < 0.0;
  v81 = vmulq_f32(*v75, *v75);
  v82 = vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1));
  v83 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2);
  if (_NF)
    v84 = -1.0;
  else
    v84 = 1.0;
  v85 = vaddq_f32(v83, v82);
  v85.f32[0] = sqrtf(v85.f32[0]);
  v86 = vmulq_f32(v76, v76);
  v87 = vmulq_f32(v77, v77);
  v85.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).f32[0]);
  v85.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0]);
  v168 = vmulq_n_f32(v85, v84);
  v88 = C3DNodeGetWorldMatrix(a4);
  v74 = v170;
  v23 = v173;
  v89 = v88[1];
  v90 = v88[2];
  v91 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL), vnegq_f32(v89)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL));
  v92 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), v91, 0xCuLL), *v88);
  v93 = vmulq_f32(*v88, *v88);
  v96 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1)));
  v94 = vmulq_f32(v89, v89);
  v96.f32[0] = sqrtf(v96.f32[0]);
  v95 = vmulq_f32(v90, v90);
  v96.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).f32[0]);
  v96.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2), vaddq_f32(v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.f32, 1))).f32[0]);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0] >= 0.0)v97 = 1.0;
  else
    v97 = -1.0;
  v98 = vmulq_n_f32(v96, v97);
  v99 = vmlaq_n_f32(v98, vsubq_f32(vmulq_f32(*(float32x4_t *)(v16 + 176), v168), v98), a1);
LABEL_61:
  v154 = 0;
  v155 = *v20;
  v156 = v20[1];
  v157 = vmulq_f32(v74, v74);
  v158 = vaddq_f32(v157, v157);
  v159 = vmulq_laneq_f32(v74, v74, 3);
  v160 = vmulq_lane_f32(v74, *(float32x2_t *)v74.f32, 1).f32[0];
  v155.f32[0] = (float)(1.0 - v158.f32[1]) - v158.f32[2];
  v155.f32[1] = (float)(v160 + v159.f32[2]) + (float)(v160 + v159.f32[2]);
  v156.f32[0] = (float)(v160 - v159.f32[2]) + (float)(v160 - v159.f32[2]);
  v158.f32[0] = 1.0 - v158.f32[0];
  v156.f32[1] = v158.f32[0] - v158.f32[2];
  v161 = vmul_laneq_f32(*(float32x2_t *)v74.f32, v74, 2);
  v155.f32[2] = (float)(v161.f32[0] - v159.f32[1]) + (float)(v161.f32[0] - v159.f32[1]);
  v156.f32[2] = (float)(v161.f32[1] + v159.f32[0]) + (float)(v161.f32[1] + v159.f32[0]);
  *(int32x2_t *)v159.f32 = vrev64_s32(*(int32x2_t *)v159.f32);
  v162.i32[0] = vadd_f32(v161, *(float32x2_t *)v159.f32).u32[0];
  v162.i32[1] = vsub_f32(v161, *(float32x2_t *)&v159).i32[1];
  *(float32x2_t *)v159.f32 = vadd_f32(v162, v162);
  v159.i32[3] = HIDWORD(v20[2].i64[1]);
  v159.f32[2] = v158.f32[0] - v158.f32[1];
  v163 = vaddq_f32(v23, v20[3]);
  v163.i32[3] = HIDWORD(*(_OWORD *)&v20[3]);
  v179[0] = (__n128)vmulq_n_f32(v155, v99.f32[0]);
  v179[1] = (__n128)vmulq_lane_f32(v156, *(float32x2_t *)v99.f32, 1);
  v179[2] = (__n128)vmulq_laneq_f32(v159, v99, 2);
  v179[3] = (__n128)v163;
  memset(&v180, 0, 64);
  do
  {
    *(float32x4_t *)((char *)&v180 + v154 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v177, COERCE_FLOAT(*(_OWORD *)&v179[v154])), v176, (float32x2_t)v179[v154].n128_u64[0], 1), v175, (float32x4_t)v179[v154], 2), v174, (float32x4_t)v179[v154], 3);
    ++v154;
  }
  while (v154 != 4);
  Target = (const void *)C3DModelTargetGetTarget(a5);
  TargetAddress = (void *)C3DModelTargetGetTargetAddress(a5);
  v166 = C3DSizeOfBaseType(11);
  C3DSetValue(Target, TargetAddress, &v180, v166, *(char *)(a5 + 34), *(unsigned __int8 *)(a5 + 35));
  return (float32x4_t *)1;
}

const __CFString *C3DConstraintReplicatorCopyTargetPath()
{
  return CFSTR("transform");
}

uint64_t C3DConstraintCreateReplicator()
{
  uint64_t Instance;

  if (C3DConstraintReplicatorGetTypeID_onceToken != -1)
    dispatch_once(&C3DConstraintReplicatorGetTypeID_onceToken, &__block_literal_global_27_0);
  Instance = C3DTypeCreateInstance_(C3DConstraintReplicatorGetTypeID_typeID, 0xC0uLL);
  *(_DWORD *)(Instance + 72) = 1065353216;
  *(_BYTE *)(Instance + 76) = 1;
  *(_BYTE *)(Instance + 77) = C3DWasLinkedBeforeMajorOSYear2017() ^ 1;
  *(_BYTE *)(Instance + 144) = 7;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 176) = _Q1;
  *(_OWORD *)(Instance + 192) = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *(_QWORD *)(Instance + 88) = C3DConstraintApplyReplicator;
  *(_QWORD *)(Instance + 96) = C3DConstraintReplicatorCopyTargetPath;
  return Instance;
}

CFStringRef _C3DConstraintCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraint %@ %p>"), a1[8], a1);
}

CFStringRef _C3DConstraintCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraint %@ %p>"), a1[8], a1);
}

void _C3DConstraintLookAtCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintLookAtCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintLookAt %p>"), a1);
}

CFStringRef _C3DConstraintLookAtCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintLookAt %p>"), a1);
}

void _C3DConstraintBillboardCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintBillboardCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintBillboard %p>"), a1);
}

CFStringRef _C3DConstraintBillboardCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintBillboard %p>"), a1);
}

void _C3DConstraintIKCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintIKCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintIK %p>"), a1);
}

CFStringRef _C3DConstraintIKCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DConstraintIK %p>"), a1);
}

void _C3DConstraintDistanceCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintDistanceCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintDistance>"));
}

CFStringRef _C3DConstraintDistanceCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintDistance>"));
}

void _C3DConstraintAccelerationCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintAccelerationCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintAcceleration>"));
}

CFStringRef _C3DConstraintAccelerationCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintAcceleration>"));
}

void _C3DConstraintReplicatorCFFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef _C3DConstraintReplicatorCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintReplicator>"));
}

CFStringRef _C3DConstraintReplicatorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintReplicator>"));
}

C3D::DrawNodesPass *C3D::ManipulatorPass::ManipulatorPass(C3D::ManipulatorPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::DrawNodesPass *result;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v5 = 0;
  v7 = 0u;
  v8 = 0x20000;
  memset(v4, 0, sizeof(v4));
  v6 = -1;
  BYTE8(v7) = 1;
  result = C3D::DrawNodesPass::DrawNodesPass(this, a2, a3, (const Parameters *)v4);
  *(_QWORD *)result = off_1EA5993F8;
  return result;
}

const char *C3D::ManipulatorPass::name(C3D::ManipulatorPass *this)
{
  return "ManipulatorPass";
}

const char *C3D::ManipulatorPass::programHashCodeStoreName(C3D::ManipulatorPass *this)
{
  return "ManipulatorPass";
}

void C3D::ManipulatorPass::setup(C3D::ManipulatorPass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int128 v6;
  int v7;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 2u);
  v2 = C3D::PassDescriptor::inputAtIndex((C3D::ManipulatorPass *)((char *)this + 32), 0);
  *(_QWORD *)(v2 + 8) = "COLOR";
  C3D::Pass::parentColorDesc(this, (uint64_t)&v6);
  *(_OWORD *)(v2 + 16) = v6;
  *(_DWORD *)(v2 + 32) = v7;
  *(_WORD *)(v2 + 66) = *(_WORD *)(v2 + 66) & 0xFF78 | 0x85;
  v3 = C3D::PassDescriptor::outputAtIndex((C3D::ManipulatorPass *)((char *)this + 32), 0);
  *(_QWORD *)(v3 + 8) = "COLOR";
  *(_BYTE *)(v3 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v6);
  *(_OWORD *)(v3 + 16) = v6;
  *(_DWORD *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 66) = *(_WORD *)(v3 + 66) & 0xFFFC | 1;
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::ManipulatorPass *)((char *)this + 32), 1u);
  *(_QWORD *)(v4 + 8) = "DEPTH";
  C3D::Pass::parentDepthDesc(this, (uint64_t)&v6);
  *(_OWORD *)(v4 + 16) = v6;
  *(_DWORD *)(v4 + 32) = v7;
  v5 = *(_WORD *)(v4 + 66) & 0xFFFC;
  *(_BYTE *)(v4 + 64) = 2;
  *(_WORD *)(v4 + 66) = v5 | 0xA;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 31) = C3DEngineContextGetPointOfView(*((_QWORD *)this + 2));
  *(_WORD *)((char *)this + 303) = 256;
  *((_BYTE *)this + 119) = 1;
  *((_BYTE *)this + 5368) = 0;
  *((_DWORD *)this + 11) = 4;
  C3D::DrawNodesPass::setup(this);
}

void C3D::ManipulatorPass::compile(C3D::ManipulatorPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  C3D::PassResource *v6;
  unsigned __int16 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  C3D::RenderGraphResourceManager *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = C3D::PassDescriptor::outputAtIndex((C3D::ManipulatorPass *)((char *)this + 32), 0);
  v5 = *(unsigned __int16 *)(v4 + 28);
  v6 = (C3D::PassResource *)C3D::Pass::resource(this);
  v7 = objc_msgSend(*(id *)C3D::PassResource::outputAtIndex(v6, 1u), "pixelFormat");
  v8 = -[SCNMTLRenderContext reverseZ](RenderContext) | (2 * *(unsigned __int8 *)(v4 + 31));
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v5)));
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = v7;
  v12 = (0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v7)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v7)))) >> 47);
  v13 = 0xC6A4A7935BD1E995
      * ((*(uint64_t (**)(C3D::ManipulatorPass *))(*(_QWORD *)this + 64))(this) ^ 0x35253C9ADE8F4CA8 ^ (0xC6A4A7935BD1E995 * ((0xF05FE8936EBFFF1DLL * v12) ^ ((0xF05FE8936EBFFF1DLL * v12) >> 47))));
  v14 = (0xC6A4A7935BD1E995 * (v13 ^ (v13 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v13 ^ (v13 >> 47))) >> 47);
  v15 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v16 = C3D::RenderGraphResourceManager::get(v15, v14);
  *((_QWORD *)this + 670) = v16;
  if (!v16)
  {
    v17 = (_QWORD *)operator new();
    *v17 = &off_1EA59A2F8;
    v17[1] = 0;
    v17[2] = 0;
    v17[3] = 0;
    *((_QWORD *)this + 670) = v17;
    C3D::RenderGraphResourceManager::set((uint64_t)v15, v14, (uint64_t)v17);
    v18 = *((_QWORD *)this + 670);
    *((_QWORD *)&v27 + 1) = objc_msgSend((id)-[SCNMTLResourceManager libraryManager]((uint64_t)v3), "frameworkLibrary", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v28 = v5;
    *(_QWORD *)&v29 = v11;
    LOBYTE(v30) = *(_BYTE *)(v4 + 31);
    *((_QWORD *)&v31 + 1) = CFSTR("scn_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v32 = CFSTR("scn_draw_fullscreen_fragment");
    v19 = objc_msgSend(v3, "newRenderPipelineStateWithDesc:", &v26);
    v20 = *(void **)(v18 + 24);
    if (v20 != (void *)v19)
    {
      v21 = v19;
      if (v20)

      *(_QWORD *)(v18 + 24) = v21;
    }
    v22 = (void *)objc_opt_new();
    objc_msgSend(v22, "setDepthCompareFunction:", 7);
    objc_msgSend(v22, "setDepthWriteEnabled:", 0);
    v23 = objc_msgSend((id)-[SCNMTLRenderContext device](RenderContext), "newDepthStencilStateWithDescriptor:", v22);

    v24 = *((_QWORD *)this + 670);
    v25 = *(void **)(v24 + 16);
    *(_QWORD *)(v24 + 16) = v23;
    if (v25)

  }
  C3D::DrawNodesPass::compile(this);
}

void C3D::ManipulatorPass::execute(uint64_t a1, SCNMTLRenderCommandEncoder **a2)
{
  SCNMTLRenderCommandEncoder *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t RenderContext;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (*(_BYTE *)(a1 + 5368))
  {
    objc_msgSend((id)(*a2)->var24[1], "setDepthStencilState:", C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5360) + 16));
    v4 = *a2;
    v5 = objc_msgSend((id)C3D::SmartPtr<SCNMTLRenderPipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLRenderPipeline *(*(_QWORD *)(a1 + 5360) + 24), "state");
    if (v4->var23 != (SCNMTLBufferPool *)v5)
    {
      v4->var23 = (SCNMTLBufferPool *)v5;
      objc_msgSend((id)v4->var24[1], "setRenderPipelineState:", v5);
    }
    v6 = (uint64_t)*a2;
    v7 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
    SCNMTLRenderCommandEncoder::setFragmentTexture(v6, v7, 0);
    SCNMTLRenderCommandEncoder::drawFullScreenTriangle(*a2);
  }
  RenderContext = C3DEngineContextGetRenderContext(*(_QWORD *)(a1 + 16));
  v9 = C3DRasterizerStatesDefault();
  v10 = -[SCNMTLRenderContext resourceManager](RenderContext);
  v11 = -[SCNMTLRenderContext reverseZ](RenderContext);
  objc_msgSend((id)(*a2)->var24[1], "setDepthStencilState:", -[SCNMTLResourceManager renderResourceForRasterizerState:reverseZ:](v10, v9, v11));
  -[SCNMTLRenderContext setRasterizerStates:](RenderContext, v9);
  C3D::DrawNodesPass::execute((uint64_t *)a1, (uint64_t)a2);
}

uint64_t C3D::ManipulatorPass::setColorInput(C3D::ManipulatorPass *this, const C3D::PassIODescriptor *a2)
{
  C3D::PassDescriptor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t RenderContext;
  uint64_t result;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = (C3D::ManipulatorPass *)((char *)this + 32);
  v5 = C3D::PassDescriptor::inputAtIndex((C3D::ManipulatorPass *)((char *)this + 32), 0);
  v6 = C3D::PassDescriptor::outputAtIndex(v4, 0);
  v7 = C3D::PassDescriptor::outputAtIndex(v4, 1u);
  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  result = -[SCNMTLRenderContext sampleCount](RenderContext);
  if (result < 2)
  {
    *(_BYTE *)(v6 + 31) = 0;
    *(_BYTE *)(v6 + 24) = 2;
    *(_BYTE *)(v7 + 31) = 0;
    *(_BYTE *)(v7 + 24) = 2;
  }
  else
  {
    v10 = *((unsigned __int8 *)a2 + 31);
    *(_BYTE *)(v6 + 31) = -[SCNMTLRenderContext sampleCount](RenderContext);
    *(_BYTE *)(v6 + 24) = 4;
    result = -[SCNMTLRenderContext sampleCount](RenderContext);
    *(_BYTE *)(v7 + 31) = result;
    *(_BYTE *)(v7 + 24) = 4;
    if (v10 <= 1)
    {
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_OWORD *)a2 + 2);
      v13 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(v5 + 64) = *((_OWORD *)a2 + 4);
      v14 = *(_OWORD *)a2;
      *(_OWORD *)(v5 + 32) = v12;
      *(_OWORD *)(v5 + 48) = v13;
      *(_OWORD *)v5 = v14;
      *(_OWORD *)(v5 + 16) = v11;
      *(_WORD *)(v5 + 66) &= ~0x80u;
      *(_WORD *)(v6 + 66) &= 0xFFFCu;
      *((_BYTE *)this + 5368) = 1;
    }
  }
  if ((*(_WORD *)(v5 + 66) & 0x80) != 0)
  {
    *(_BYTE *)(v5 + 31) = *(_BYTE *)(v6 + 31);
    *(_BYTE *)(v5 + 24) = *(_BYTE *)(v6 + 24);
  }
  return result;
}

double C3D::ManipulatorPass::_willSetupCullingFrustumPlanes(C3D::ManipulatorPass *this)
{
  return C3D::AdaptCullingContextForAuthoring(*((C3D **)this + 2), (__n128 **)this + 30, (const Parameters *)this + 32, (__C3DCullingContext *)2);
}

void C3D::ManipulatorPassResource::~ManipulatorPassResource(C3D::ManipulatorPassResource *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A2F8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1EA59A2F8;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)

  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)

  JUMPOUT(0x1DF0D41C0);
}

void sub_1DCF35FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10A1C401F1F0AC3);
  _Unwind_Resume(a1);
}

void _C3DConstraintManagerCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef _C3DConstraintManagerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintManagerRef>"));
}

CFStringRef _C3DConstraintManagerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DConstraintManagerRef>"));
}

void C3DConstraintManagerSetConstraintsForKey(uint64_t a1, const __CFArray *a2, float32x4_t *a3, const char *a4)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  SCNOrderedDictionary *v31;
  uint64_t Value;
  const __CFArray *v33;
  double CurrentlyCommittedDuration;
  double v35;
  uint64_t Count;
  __CFSet *Mutable;
  CFIndex v38;
  float v39;
  const void *ValueAtIndex;
  const void *v41;
  _OWORD *TargetAddress;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  simd_float4 v46;
  simd_float4 v47;
  simd_float4 v48;
  const void *v49;
  uint64_t v50;
  const void *Identity;
  const void *v52;
  CFTypeRef v53;
  const void *v54;
  NSObject *v55;
  __int32 BaseType;
  const __CFArray *v57;
  const __CFArray *v58;
  CFIndex v59;
  uint64_t v60;
  uint64_t v61;
  CFIndex i;
  _QWORD *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __CFArray *v73;
  uint64_t v74;
  uint64_t v75;
  CFIndex j;
  const void *v77;
  const __CFString *TargetModelPath;
  NSObject *v79;
  const __CFString *v80;
  _QWORD *v81;
  double v82;
  double v83;
  uint64_t v84;
  const void *v85;
  _WORD *v86;
  float v87;
  CFTypeRef v88;
  const void *v89;
  const void *v90;
  uint64_t ModelValueStorage;
  const char *v92;
  uint64_t AnimationManager;
  uint64_t v94;
  simd_float4x4 v96;
  float32x4_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  simd_float4x4 buf;
  uint64_t v102;

  v6 = a1;
  v102 = *MEMORY[0x1E0C80C00];
  if (!a1 && (v7 = scn_default_log(), os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)))
  {
    _C3DAnimationManagerAddAnimationNode_cold_4(v7, v8, v9, v10, v11, v12, v13, v14);
    if (a4)
      goto LABEL_6;
  }
  else if (a4)
  {
    goto LABEL_6;
  }
  v15 = scn_default_log();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerAddAnimationPlayerForKey_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
LABEL_6:
  if (!v6)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  v31 = *(SCNOrderedDictionary **)(v6 + 16);
  if (!v31)
  {
    v31 = C3DOrderedDictionaryCreate();
    *(_QWORD *)(v6 + 16) = v31;
  }
  Value = C3DOrderedDictionaryGetValue(v31, a4);
  v94 = v6;
  v92 = a4;
  if (Value)
  {
    v33 = (const __CFArray *)Value;
    CurrentlyCommittedDuration = C3DTransactionGetCurrentlyCommittedDuration();
    if (CurrentlyCommittedDuration > 0.0)
    {
      v35 = CurrentlyCommittedDuration;
      Count = CFArrayGetCount(v33);
      ModelValueStorage = C3DSceneGetModelValueStorage(*(_QWORD *)(v6 + 24));
      Mutable = CFSetCreateMutable(0, Count, 0);
      if (Count >= 1)
      {
        v38 = 0;
        v39 = v35;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v33, v38);
          v41 = (const void *)*((_QWORD *)ValueAtIndex + 4);
          TargetAddress = (_OWORD *)C3DModelTargetGetTargetAddress((uint64_t)v41);
          if (!CFSetContainsValue(Mutable, TargetAddress))
          {
            if (C3DModelTargetGetBaseType((uint64_t)v41) == 11)
            {
              CFSetAddValue(Mutable, TargetAddress);
              AnimationManager = C3DSceneGetAnimationManager(*(_QWORD *)(v6 + 24));
              memset(&buf, 0, sizeof(buf));
              v99 = 0u;
              v100 = 0u;
              v97 = 0u;
              v98 = 0u;
              v43 = *(float32x4_t *)TargetAddress;
              v44 = TargetAddress[1];
              v45 = TargetAddress[3];
              v99 = TargetAddress[2];
              v100 = v45;
              v97 = v43;
              v98 = v44;
              C3DModelValueStorageUpdatePresentationValueFromModelValue(ModelValueStorage, *((_QWORD *)ValueAtIndex + 5));
              C3DAnimationManagerApplyAnimationsForTarget(AnimationManager, (uint64_t)v41);
              memset(&v96.columns[2], 0, 32);
              memset(&v96, 0, 32);
              v46 = *(simd_float4 *)TargetAddress;
              v47 = *((simd_float4 *)TargetAddress + 1);
              v48 = *((simd_float4 *)TargetAddress + 3);
              v96.columns[2] = (simd_float4)TargetAddress[2];
              v96.columns[3] = v48;
              v96.columns[0] = v46;
              v96.columns[1] = v47;
              C3DMatrix4x4Invert(&v96, &buf);
              C3DMatrix4x4Mult((uint64_t)&buf, &v97, &buf);
              v49 = (const void *)C3DValueCreate(11, 1);
              v50 = C3DValueCreate(11, 1);
              C3DValueInitFrom((uint64_t)v49, &buf);
              Identity = (const void *)C3DMatrix4x4GetIdentity();
              C3DValueInitFrom(v50, Identity);
              v52 = (const void *)C3DSimpleAnimationCreate();
              C3DAnimationSetAdditive((uint64_t)v52, 1);
              C3DAnimationSetRemoveOnCompletion((uint64_t)v52, 1);
              C3DAnimationSetDuration((uint64_t)v52, v39);
              C3DTransactionGetCurrentlyCommittedTimingFunction();
              C3DAnimationSetTimingFunction((uint64_t)v52, v53);
              C3DSimpleAnimationSetStartValue((uint64_t)v52, (uint64_t)v49);
              C3DSimpleAnimationSetEndValue((uint64_t)v52, v50);
              CFRelease(v49);
              v54 = (const void *)v50;
              v6 = v94;
              CFRelease(v54);
              C3DAnimationManagerAddAnimationForKey(AnimationManager, v52, v41, *((void **)ValueAtIndex + 3), CFSTR("__controller"));
              CFRelease(v52);
            }
            else
            {
              v55 = scn_default_log();
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                BaseType = C3DModelTargetGetBaseType((uint64_t)v41);
                buf.columns[0].i32[0] = 67109120;
                buf.columns[0].i32[1] = BaseType;
                _os_log_impl(&dword_1DCCB8000, v55, OS_LOG_TYPE_DEFAULT, "Warning: unsupported ease out for contraint applied on base type %d", (uint8_t *)&buf, 8u);
              }
            }
          }
          ++v38;
        }
        while (Count != v38);
      }
      CFRelease(Mutable);
      a4 = v92;
    }
    v57 = (const __CFArray *)C3DOrderedDictionaryGetValue(*(void **)(v6 + 16), a4);
    if (v57)
    {
      v58 = v57;
      v59 = CFArrayGetCount(v57);
      v60 = C3DSceneGetModelValueStorage(*(_QWORD *)(v6 + 24));
      if (v59 >= 1)
      {
        v61 = v60;
        for (i = 0; i != v59; ++i)
        {
          v63 = CFArrayGetValueAtIndex(v58, i);
          C3DModelValueStorageUpdatePresentationValueFromModelValue(v61, v63[5]);
          C3DModelValueStorageReleaseModelValue(v61, v63[5]);
        }
      }
      v6 = v94;
      C3DOrderedDictionaryRemoveValue(*(void **)(v94 + 16), a4);
    }
  }
  if (a2)
  {
    if (!a3)
    {
      v64 = scn_default_log();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_FAULT))
        C3DAnimationManagerApplyAnimationsForTarget_cold_1(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    v72 = CFArrayGetCount(a2);
    v73 = CFArrayCreateMutable(0, v72, MEMORY[0x1E0C9B378]);
    v74 = C3DSceneGetModelValueStorage(*(_QWORD *)(v6 + 24));
    if (v72 >= 1)
    {
      v75 = v74;
      for (j = 0; j != v72; ++j)
      {
        v77 = CFArrayGetValueAtIndex(a2, j);
        TargetModelPath = (const __CFString *)C3DConstraintGetTargetModelPath((uint64_t)v77);
        if (!TargetModelPath)
        {
          v79 = scn_default_log();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_FAULT))
            C3DConstraintManagerSetConstraintsForKey_cold_1((uint8_t *)&buf, (uint64_t *)((char *)buf.columns[0].i64 + 4), v79);
        }
        v80 = C3DCFTypeCopyModelInfoAtPath(a3, TargetModelPath, 0);
        v81 = C3DConstraintControllerCreate(v77, a3, v80);
        v81[5] = C3DModelValueStorageAddAndRetainModelValue(v75, v80);
        CFArrayAppendValue(v73, v81);
        CFRelease(v81);
        CFRelease(v80);
        if ((C3DTransactionGetDisableActions() & 1) != 0
          || (v82 = C3DTransactionGetCurrentlyCommittedDuration(), v82 <= 0.0))
        {
          *((_DWORD *)v81 + 12) = 1065353216;
        }
        else
        {
          v83 = v82;
          v84 = C3DSceneGetAnimationManager(*(_QWORD *)(v6 + 24));
          v97.i32[0] = 1065353216;
          v85 = (const void *)C3DValueCreate(1, 1);
          C3DValueInitFrom((uint64_t)v85, &v97);
          v86 = (_WORD *)C3DSimpleAnimationCreate();
          C3DAnimationSetCommitWhenDone(v86, 1);
          v87 = v83;
          C3DAnimationSetDuration((uint64_t)v86, v87);
          C3DTransactionGetCurrentlyCommittedTimingFunction();
          C3DAnimationSetTimingFunction((uint64_t)v86, v88);
          C3DSimpleAnimationSetEndValue((uint64_t)v86, (uint64_t)v85);
          CFRelease(v85);
          v89 = (const void *)C3DModelTargetCreate(v81, (uint64_t)(v81 + 6), 1, 0);
          C3DAnimationManagerAddAnimationForKey(v84, v86, v89, v81, CFSTR("__controller"));
          CFRelease(v86);
          v90 = v89;
          v6 = v94;
          CFRelease(v90);
        }
      }
    }
    C3DOrderedDictionarySetValue(*(void **)(v6 + 16), v92, (uint64_t)v73);
    CFRelease(v73);
  }
}

BOOL C3DConstraintManagerApply(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
    C3DOrderedDictionaryApplyFunction(*(void **)(a1 + 16), (const char *)_C3DConstraintManagerApplyFunc, a1);
  return v10 != 0;
}

void _C3DConstraintManagerApplyFunc(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t ModelValueStorage;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  float *ValueAtIndex;
  uint64_t v10;
  float v11;
  int Incremental;

  v4 = *(_QWORD *)(a3 + 32);
  ModelValueStorage = C3DSceneGetModelValueStorage(*(_QWORD *)(a3 + 24));
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = (float *)CFArrayGetValueAtIndex(a2, v8);
      v10 = *((_QWORD *)ValueAtIndex + 2);
      if (!*(_BYTE *)(v10 + 76))
        goto LABEL_14;
      v11 = ValueAtIndex[12] * *(float *)(v10 + 72);
      if (v11 <= 0.0)
        goto LABEL_14;
      Incremental = C3DConstraintGetIncremental(v10);
      if ((Incremental & 1) != 0)
        break;
      if (!C3DNodeGetHasPhysicsBody(*((_QWORD *)ValueAtIndex + 3))
        || !C3DNodePhysicsBodyIsDynamic(*((_QWORD *)ValueAtIndex + 3)))
      {
        C3DModelValueStorageUpdatePresentationValueInNeeded(ModelValueStorage, *((_QWORD *)ValueAtIndex + 5));
LABEL_12:
        if ((Incremental & C3DConstraintApply(v4, (uint64_t)ValueAtIndex, *((_QWORD *)ValueAtIndex + 3), *((_QWORD *)ValueAtIndex + 4), v11)) == 1)C3DModelValueStorageUpdateModelValueFromPresentationValue(ModelValueStorage, *((_QWORD *)ValueAtIndex + 5));
        goto LABEL_14;
      }
      if (!C3DNodePhysicsBodyIsAtRest(*((_QWORD *)ValueAtIndex + 3)))
        break;
LABEL_14:
      if (v7 == ++v8)
        return;
    }
    C3DModelValueStorageUpdateTimestamp(ModelValueStorage, *((_QWORD *)ValueAtIndex + 5));
    goto LABEL_12;
  }
}

CFIndex __C3DConstraintManagerAppendAuthoringInfo(int a1, CFArrayRef theArray)
{
  CFIndex result;
  CFIndex v4;
  CFIndex i;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v4 = result;
    for (i = 0; i != v4; ++i)
    {
      result = *((_QWORD *)CFArrayGetValueAtIndex(theArray, i) + 2);
      if (*(_BYTE *)(result + 76))
      {
        if (*(float *)(result + 72) > 0.0)
          result = C3DContraintAppendAuthoringInfo(result);
      }
    }
  }
  return result;
}

void *C3DConstraintManagerAppendAuthoringInfo(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  _QWORD v13[2];

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationNode_cold_4(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(void **)(a1 + 16);
  if (result)
  {
    v13[0] = a2;
    v13[1] = a1;
    return (void *)C3DOrderedDictionaryApplyFunction(result, (const char *)__C3DConstraintManagerAppendAuthoringInfo, (uint64_t)v13);
  }
  return result;
}

C3D::MainPassCustomPostProcessPass *C3D::RenderGraph::createPass<C3D::MainPassCustomPostProcessPass,C3D::MainPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::MainPassCustomPostProcessPass *Aligned;

  Aligned = (C3D::MainPassCustomPostProcessPass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 288, 16, 0);
  C3D::MainPassCustomPostProcessPass::MainPassCustomPostProcessPass(Aligned, (C3D::RenderGraph *)a1, *a2);
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::MainPassCustomPostProcessPass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

C3D::ComputePass *C3D::RenderGraph::createPass<C3D::TemporalAAPass,C3D::MainPass *>(uint64_t a1, C3D::Pass **a2)
{
  C3D::ComputePass *Aligned;
  _QWORD *v5;

  Aligned = (C3D::ComputePass *)C3DScratchAllocatorAllocateAligned(*(_QWORD *)(a1 + 16), 128, 8, 0);
  C3D::ComputePass::ComputePass(Aligned, (C3D::RenderGraph *)a1, *a2);
  *v5 = &unk_1EA5990C8;
  C3D::RenderGraph::addPass((C3D::RenderGraph *)a1, Aligned);
  if (*(_BYTE *)(a1 + 209))
    (*(void (**)(C3D::ComputePass *))(*(_QWORD *)Aligned + 8))(Aligned);
  return Aligned;
}

void _C3DModelPathResolveMatrix(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v8;
  signed int v9;
  char v10;
  uint64_t v11;
  NSObject *v12;

  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 11;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    v8 = _pathComponentForString(ValueAtIndex);
    *(_WORD *)(a5 + 32) = 7;
    v9 = v8 - 22;
    if (v8 - 22 >= 0x10)
    {
      v12 = scn_default_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        _C3DModelPathResolveMatrix_cold_1();
    }
    else
    {
      v10 = byte_1DD02C720[v9];
      v11 = qword_1DD02C698[v9];
      *(_BYTE *)(a5 + 35) = v10;
      *(_QWORD *)(a5 + 24) = a1 + 4 * v11;
    }
  }
}

void _C3DModelPathResolveTransform(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5, int a6)
{
  void *ValueAtIndex;
  unsigned int v13;
  uint64_t v14;
  const __CFArray *v15;
  int v16;
  const __CFArray *v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;

  *(_BYTE *)(a5 + 34) = 8;
  *(_BYTE *)(a5 + 37) = 1;
  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 11;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    v13 = _pathComponentForString(ValueAtIndex);
    if (v13 - 22 >= 0x10)
    {
      switch(v13)
      {
        case 5u:
          v16 = a3 + 1;
          v14 = a1;
          v15 = theArray;
          goto LABEL_4;
        case 6u:
          v21 = 0;
          v20 = 0;
          _C3DModelPathResolveVector3((uint64_t)&v20, theArray, a3 + 1, a4, a5);
          *(_BYTE *)(a5 + 34) = 6;
          goto LABEL_5;
        case 7u:
          v18 = a3 + 1;
          v17 = theArray;
          goto LABEL_13;
        case 8u:
          *(_BYTE *)(a5 + 34) = 7;
          *(_WORD *)(a5 + 32) = 9;
          *(_BYTE *)(a5 + 35) = _C3DModelPathResolveVectorComponentIndex(theArray, a3 + 1, a4, a5);
          goto LABEL_5;
        case 0xCu:
        case 0xDu:
          v17 = theArray;
          v18 = a3;
LABEL_13:
          _C3DModelPathResolveRotation(v17, v18, a4, a5);
          goto LABEL_5;
        default:
          if (a6)
          {
            v19 = scn_default_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              _C3DModelPathResolveTransform_cold_1();
          }
          return;
      }
    }
    v14 = a1;
    v15 = theArray;
    v16 = a3;
LABEL_4:
    _C3DModelPathResolveMatrix(v14, v15, v16, a4, a5);
LABEL_5:
    *(_QWORD *)(a5 + 24) = a1;
  }
}

const void *_C3DModelPathResolverRegistryResolvePath(const void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  CFTypeID v12;

  if (result)
  {
    v11 = result;
    v12 = CFGetTypeID(result);
    return (const void *)_C3DModelPathResolverRegistryResolvePathWithClassName(v11, v12, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t C3DCFTypeCopyModelInfoForKeyAndSubscriptIndex(const void *a1, const __CFString *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  CFTypeID v9;

  if (!a1)
    return 0;
  v8 = C3DModelTargetCreate(0, 0, 0, 0);
  v9 = CFGetTypeID(a1);
  _C3DModelPathResolverRegistryResolveKeyAndSubscriptIndexWithClassName((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(_QWORD *)(v8 + 24))
    *(_BYTE *)(v8 + 36) = C3DSizeOfBaseType(*(__int16 *)(v8 + 32));
  return v8;
}

uint64_t C3DCFTypeCopyModelInfoForKeyAndSubscriptKey(const void *a1, const __CFString *a2, void *a3, int a4)
{
  uint64_t v8;
  CFTypeID v9;

  if (!a1)
    return 0;
  v8 = C3DModelTargetCreate(0, 0, 0, 0);
  v9 = CFGetTypeID(a1);
  _C3DModelPathResolverRegistryResolveKeyAndSubscriptKeyWithClassName((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(_QWORD *)(v8 + 24))
    *(_BYTE *)(v8 + 36) = C3DSizeOfBaseType(*(__int16 *)(v8 + 32));
  return v8;
}

uint64_t _C3DModelPathResolverRegistryResolveSubPath(CFArrayRef theArray, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  void *ValueAtIndex;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;

  result = 0;
  switch(*(_WORD *)(a4 + 32))
  {
    case 9:
      _C3DModelPathResolveVector3(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_15;
    case 0xA:
      if (a2 >= a3)
      {
        *(_WORD *)(a4 + 32) = 10;
      }
      else
      {
        v7 = *(_QWORD *)(a4 + 24);
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a2);
        v9 = _pathComponentForString(ValueAtIndex);
        *(_WORD *)(a4 + 32) = 7;
        switch(v9)
        {
          case 0xEu:
            *(_QWORD *)(a4 + 24) = v7;
            goto LABEL_15;
          case 0xFu:
            v11 = v7 + 4;
            goto LABEL_14;
          case 0x10u:
            v11 = v7 + 8;
            goto LABEL_14;
          case 0x11u:
            v11 = v7 + 12;
LABEL_14:
            *(_QWORD *)(a4 + 24) = v11;
            break;
          default:
            v10 = scn_default_log();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
              _C3DModelPathResolverRegistryResolveSubPath_cold_1();
            break;
        }
      }
      goto LABEL_15;
    case 0xB:
      _C3DModelPathResolveMatrix(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_15;
    case 0xD:
      _C3DModelPathResolveColor4(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
LABEL_15:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void _C3DModelPathResolveVector3(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v8;
  char v9;
  NSObject *v10;

  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 9;
    return;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  v8 = _pathComponentForString(ValueAtIndex);
  *(_WORD *)(a5 + 32) = 7;
  switch(v8)
  {
    case 0xEu:
      *(_QWORD *)(a5 + 24) = a1;
      return;
    case 0xFu:
      *(_QWORD *)(a5 + 24) = a1 + 4;
      v9 = 1;
      goto LABEL_9;
    case 0x10u:
      *(_QWORD *)(a5 + 24) = a1 + 8;
      v9 = 2;
LABEL_9:
      *(_BYTE *)(a5 + 35) = v9;
      return;
  }
  v10 = scn_default_log();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    _C3DModelPathResolveVector3_cold_1();
}

BOOL _C3DModelPathResolveMorph(_BOOL8 result, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  const void *v11;
  __CFString *ValueAtIndex;
  unsigned int v13;
  CFRange v14;
  int v15;
  NSObject *v16;
  const void *WeightsSource;
  CFRange v18;
  CFRange v19;
  __CFString *v20;
  uint64_t IndexOfTargetWithName;
  uint64_t v22;
  _QWORD *Accessor;
  CFRange v24;

  if (!result)
    return result;
  v11 = (const void *)result;
  if ((_C3DModelPathResolveEntity((_QWORD *)result, a2, a3, a4, a5) & 1) != 0)
    return 1;
  C3DModelTargetSetTarget(a5, v11);
  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a2, a3);
  v13 = _pathComponentForString(ValueAtIndex);
  v14 = CFStringFind(ValueAtIndex, CFSTR("weights"), 0);
  if (v14.length <= 0)
    v15 = 0;
  else
    v15 = -1;
  if (v14.length > 0 || v13 == 87)
  {
    WeightsSource = (const void *)C3DMorphGetWeightsSource((uint64_t)v11);
    v18 = CFStringFind(ValueAtIndex, CFSTR("[\""), 0);
    if (v18.length >= 1)
    {
      v19 = CFStringFind(ValueAtIndex, CFSTR("\"]"), 0);
      if (v19.length >= 1 && v19.location > v18.location + 2)
      {
        v24.location = v18.location + 2;
        v24.length = v19.location - (v18.location + 2);
        v20 = (__CFString *)CFStringCreateWithSubstring(0, ValueAtIndex, v24);
        IndexOfTargetWithName = C3DMorphGetIndexOfTargetWithName((uint64_t)v11, v20);
        if (IndexOfTargetWithName != -1)
        {
          v22 = IndexOfTargetWithName;
          C3DModelTargetSetTarget(a5, WeightsSource);
          Accessor = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)WeightsSource);
          *(_QWORD *)(a5 + 24) = C3DSourceAccessorGetMutableValuePtrAtIndex(Accessor, v22);
          *(_WORD *)(a5 + 32) = C3DSourceAccessorGetComponentsValueType((uint64_t)Accessor);
          if (v20)
            CFRelease(v20);
          return 1;
        }
        if (v20)
          CFRelease(v20);
      }
    }
    if (WeightsSource)
      _C3DModelPathResolveGenericSource(WeightsSource, a2, a3 + v15 + 1, a4, a5);
    return 1;
  }
  if (a6)
  {
    v16 = scn_default_log();
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    _C3DModelPathResolveMorph_cold_1();
  }
  return 0;
}

uint64_t _C3DModelPathResolveGeometry(CFTypeRef cf, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  void *ValueAtIndex;
  const __CFArray *MaterialAtIndex;
  uint64_t v14;
  const __CFArray *MaterialsCount;
  const __CFArray *v17;
  SInt32 v18;
  CFTypeRef cfa;

  if (!cf)
    return 0;
  C3DModelTargetSetTarget(a5, cf);
  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, a3);
  if (_pathComponentForString(ValueAtIndex) == 40)
  {
    if ((uint64_t)C3DGeometryGetMaterialsCount((uint64_t)cf) >= 1)
    {
      MaterialAtIndex = C3DGeometryGetMaterialAtIndex((uint64_t)cf, 0);
      _C3DModelPathResolveMaterial((uint64_t)MaterialAtIndex, a2, a3 + 1, a4, a5, a6);
    }
    return 1;
  }
  cfa = 0;
  v18 = 0;
  v14 = 0;
  if (_C3DModelPathResolveArray(a2, a3, a4, &v18, (CFStringRef *)&cfa))
  {
    if (_pathComponentForString((void *)cfa) == 41
      && (MaterialsCount = C3DGeometryGetMaterialsCount((uint64_t)cf), (uint64_t)MaterialsCount > v18))
    {
      v17 = C3DGeometryGetMaterialAtIndex((uint64_t)cf, v18);
      v14 = _C3DModelPathResolveMaterial((uint64_t)v17, a2, a3 + 1, a4, a5, a6);
    }
    else
    {
      v14 = 0;
    }
    if (cfa)
      CFRelease(cfa);
  }
  return v14;
}

uint64_t _C3DModelPathResolveGenericSource(CFTypeRef cf, const __CFArray *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *Accessor;
  SInt32 v13;

  C3DModelTargetSetTarget(a5, cf);
  if (!cf)
    return 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_WORD *)(a5 + 32) = 0;
  v13 = 0;
  v10 = _C3DModelPathResolveArray(a2, a3, a4, &v13, 0);
  if ((_DWORD)v10)
  {
    Accessor = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)cf);
    *(_QWORD *)(a5 + 24) = C3DSourceAccessorGetMutableValuePtrAtIndex(Accessor, v13);
    *(_WORD *)(a5 + 32) = C3DSourceAccessorGetComponentsValueType((uint64_t)Accessor);
  }
  return v10;
}

BOOL _C3DModelPathResolveTechnique(const void *a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  uint64_t ValueAnimatableAddressForSymbol;

  if (a3 >= a4)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  C3DModelTargetSetTarget(a5, a1);
  ValueAnimatableAddressForSymbol = C3DFXTechniqueGetValueAnimatableAddressForSymbol((uint64_t)a1, ValueAtIndex, (_WORD *)(a5 + 32));
  *(_QWORD *)(a5 + 24) = ValueAnimatableAddressForSymbol;
  return ValueAnimatableAddressForSymbol != 0;
}

uint64_t _C3DModelPathResolverRegistryResolveKeyAndSubscriptIndexWithClassName(uint64_t a1, CFTypeID a2, const __CFString *a3, uint64_t a4, uint64_t a5, int a6)
{
  const void *OverrideMaterial;
  CFStringRef v13;
  NSObject *v14;

  if (C3DMorpherGetTypeID() == a2)
  {
    OverrideMaterial = (const void *)C3DGeometryGetOverrideMaterial(a1);
LABEL_5:
    _C3DModelPathResolveMorphKeyAndSubscriptIndex(OverrideMaterial, a3, a4, a5, a6);
    return 0;
  }
  if (C3DMorphGetTypeID() == a2)
  {
    OverrideMaterial = (const void *)a1;
    goto LABEL_5;
  }
  v13 = CFCopyTypeIDDescription(a2);
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    _C3DModelPathResolverRegistryResolveKeyAndSubscriptIndexWithClassName_cold_1();
  CFRelease(v13);
  return 0;
}

void _C3DModelPathResolveMorphKeyAndSubscriptIndex(CFTypeRef cf, const __CFString *a2, uint64_t a3, uint64_t a4, int a5)
{
  NSObject *v10;
  const void *WeightsSource;
  _QWORD *Accessor;

  if (cf)
  {
    C3DModelTargetSetTarget(a4, cf);
    if (CFStringCompare(a2, CFSTR("weights"), 0))
    {
      if (a5)
      {
        v10 = scn_default_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          _C3DModelPathResolveMorphKeyAndSubscriptIndex_cold_1();
      }
    }
    else
    {
      WeightsSource = (const void *)C3DMorphGetWeightsSource((uint64_t)cf);
      C3DModelTargetSetTarget(a4, WeightsSource);
      Accessor = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)WeightsSource);
      *(_QWORD *)(a4 + 24) = C3DSourceAccessorGetMutableValuePtrAtIndex(Accessor, a3);
      *(_WORD *)(a4 + 32) = C3DSourceAccessorGetComponentsValueType((uint64_t)Accessor);
    }
  }
}

uint64_t _C3DModelPathResolverRegistryResolveKeyAndSubscriptKeyWithClassName(uint64_t a1, CFTypeID a2, const __CFString *a3, void *a4, uint64_t a5, int a6)
{
  const void *OverrideMaterial;
  CFStringRef v13;
  NSObject *v14;

  if (C3DMorpherGetTypeID() == a2)
  {
    OverrideMaterial = (const void *)C3DGeometryGetOverrideMaterial(a1);
LABEL_5:
    _C3DModelPathResolveMorphKeyAndSubscriptKey(OverrideMaterial, a3, a4, a5, a6);
    return 0;
  }
  if (C3DMorphGetTypeID() == a2)
  {
    OverrideMaterial = (const void *)a1;
    goto LABEL_5;
  }
  v13 = CFCopyTypeIDDescription(a2);
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    _C3DModelPathResolverRegistryResolveKeyAndSubscriptIndexWithClassName_cold_1();
  CFRelease(v13);
  return 0;
}

void _C3DModelPathResolveMorphKeyAndSubscriptKey(CFTypeRef cf, const __CFString *a2, void *a3, uint64_t a4, int a5)
{
  NSObject *v10;
  const void *WeightsSource;
  uint64_t IndexOfTargetWithName;
  uint64_t v13;
  _QWORD *Accessor;

  if (cf)
  {
    C3DModelTargetSetTarget(a4, cf);
    if (CFStringCompare(a2, CFSTR("weights"), 0))
    {
      if (!a5)
        return;
LABEL_4:
      v10 = scn_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        _C3DModelPathResolveMorphKeyAndSubscriptKey_cold_1();
      return;
    }
    WeightsSource = (const void *)C3DMorphGetWeightsSource((uint64_t)cf);
    C3DModelTargetSetTarget(a4, WeightsSource);
    IndexOfTargetWithName = C3DMorphGetIndexOfTargetWithName((uint64_t)cf, a3);
    if (IndexOfTargetWithName != -1)
    {
      v13 = IndexOfTargetWithName;
      Accessor = (_QWORD *)C3DGenericSourceGetAccessor((uint64_t)WeightsSource);
      *(_QWORD *)(a4 + 24) = C3DSourceAccessorGetMutableValuePtrAtIndex(Accessor, v13);
      *(_WORD *)(a4 + 32) = C3DSourceAccessorGetComponentsValueType((uint64_t)Accessor);
      return;
    }
    if ((a5 & 1) != 0)
      goto LABEL_4;
  }
}

uint64_t C3DCFTypeGetAddressForKey(float32x4_t *a1, const void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  __CFArray *v6;
  void *v7;
  int v8;
  uint64_t v9;

  if (C3DCFTypeGetAddressForKey_onceToken != -1)
    dispatch_once(&C3DCFTypeGetAddressForKey_onceToken, &__block_literal_global_127);
  v4 = pthread_getspecific(C3DCFTypeGetAddressForKey_addressForKeyLocalStorage);
  if (!v4)
  {
    v4 = malloc_type_calloc(0x10uLL, 1uLL, 0xB9A5D7AAuLL);
    *v4 = C3DModelTargetCreate(0, 0, 0, 0);
    v4[1] = CFArrayCreateMutable(0, 1, 0);
    pthread_setspecific(C3DCFTypeGetAddressForKey_addressForKeyLocalStorage, v4);
  }
  v5 = *v4;
  v6 = (__CFArray *)v4[1];
  *(_QWORD *)(v5 + 24) = 0;
  CFArraySetValueAtIndex(v6, 0, a2);
  v7 = (void *)CFGetTypeID(a1);
  v8 = _C3DModelPathResolverRegistryResolvePathWithClassName(a1, v7, v6, 0, 1, v5, 0);
  v9 = 0;
  if (v8)
    v9 = *(_QWORD *)(v5 + 24);
  C3DModelTargetSetTarget(v5, 0);
  return v9;
}

void __threadDied(CFTypeRef *a1)
{
  if (a1)
  {
    CFRelease(*a1);
    CFRelease(a1[1]);
  }
  free(a1);
}

void _C3DModelPathResolveRotation(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  void *ValueAtIndex;
  NSObject *v9;
  char v10;
  int v11;

  *(_BYTE *)(a4 + 34) = 4;
  if (a2 >= a3)
  {
    *(_QWORD *)(a4 + 24) = 0;
    *(_WORD *)(a4 + 32) = 10;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
    switch(_pathComponentForString(ValueAtIndex))
    {
      case 7u:
        *(_WORD *)(a4 + 32) = 10;
        *(_BYTE *)(a4 + 35) = _C3DModelPathResolveVectorComponentIndex(a1, a2 + 1, a3, a4);
        goto LABEL_10;
      case 0xCu:
        *(_WORD *)(a4 + 32) = 9;
        *(_BYTE *)(a4 + 35) = _C3DModelPathResolveVectorComponentIndex(a1, a2 + 1, a3, a4);
        v10 = 5;
        goto LABEL_11;
      case 0xDu:
        *(_WORD *)(a4 + 32) = 10;
        *(_BYTE *)(a4 + 35) = _C3DModelPathResolveVectorComponentIndex(a1, a2 + 1, a3, a4);
        v10 = 3;
        goto LABEL_11;
      case 0xEu:
        *(_WORD *)(a4 + 32) = 7;
LABEL_10:
        v10 = 4;
LABEL_11:
        *(_BYTE *)(a4 + 34) = v10;
        return;
      case 0xFu:
        v11 = 17039367;
        goto LABEL_15;
      case 0x10u:
        v11 = 33816583;
        goto LABEL_15;
      case 0x11u:
        v11 = 50593799;
LABEL_15:
        *(_DWORD *)(a4 + 32) = v11;
        break;
      default:
        v9 = scn_default_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          _C3DModelPathResolveRotation_cold_1();
        break;
    }
  }
}

uint64_t _C3DModelPathResolveVectorComponentIndex(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  void *ValueAtIndex;
  unsigned int v6;

  if (a2 >= a3)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
  v6 = _pathComponentForString(ValueAtIndex);
  *(_WORD *)(a4 + 32) = 7;
  if (v6 - 15 >= 3)
    return 0;
  else
    return v6 - 14;
}

void _C3DModelPathResolveNodeTransform(char *cf, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  void *ValueAtIndex;

  C3DModelTargetSetTarget(a5, cf);
  *(_BYTE *)(a5 + 34) = 8;
  *(_BYTE *)(a5 + 37) = 1;
  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = cf + 96;
    *(_WORD *)(a5 + 32) = 11;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, a3);
    _pathComponentForString(ValueAtIndex);
    _C3DModelPathResolveTransform((uint64_t)(cf + 96), a2, a3, a4, a5, a6);
  }
}

void _C3DModelPathResolveDynamicParameter(const void *a1, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  __CFArray *Mutable;
  __CFString *v13;
  uint64_t ParamDescription;
  uint64_t v15;
  NSObject *v16;
  CFRange v17;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v17.location = a3;
  v17.length = a4 - a3;
  CFArrayAppendArray(Mutable, a2, v17);
  v13 = (__CFString *)CFStringCreateByCombiningStrings(0, Mutable, CFSTR("."));
  ParamDescription = C3DAnimatableParamControllerGetParamDescription((uint64_t)a1, v13);
  if (ParamDescription)
  {
    v15 = ParamDescription;
    C3DModelTargetSetTarget(a5, a1);
    *(_WORD *)(a5 + 32) = *(_WORD *)(v15 + 32);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(v15 + 24);
    *(_BYTE *)(a5 + 34) = *(_BYTE *)(v15 + 34);
    CFRelease(Mutable);
    CFRelease(v13);
  }
  else
  {
    if (a6)
    {
      v16 = scn_default_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        _C3DModelPathResolveDynamicParameter_cold_1();
    }
    CFRelease(v13);
  }
}

uint64_t _C3DModelPathResolveArray(const __CFArray *a1, int a2, int a3, SInt32 *a4, CFStringRef *a5)
{
  const __CFString *ValueAtIndex;
  CFRange v8;
  CFRange v9;
  CFStringRef v10;
  const __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFRange v29;
  CFRange v30;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;

  if (a2 >= a3)
    return 0;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2);
  v8 = CFStringFind(ValueAtIndex, CFSTR("["), 0);
  if (v8.length < 1)
    goto LABEL_14;
  v9 = CFStringFind(ValueAtIndex, CFSTR("]"), 0);
  if (v9.length < 1 || v9.location <= v8.location)
    goto LABEL_14;
  v32.location = 0;
  v32.length = v8.location;
  v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v32);
  v33.location = v8.location + 1;
  v33.length = v9.location - (v8.location + 1);
  v11 = CFStringCreateWithSubstring(0, ValueAtIndex, v33);
  if (v10 || (v12 = scn_default_log(), !os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
  {
    if (!v11)
      goto LABEL_8;
LABEL_18:
    if (CFStringGetLength(v11) && CFStringGetCharacterAtIndex(v11, 0) - 48 < 0xA)
    {
      *a4 = CFStringGetIntValue(v11);
      if (a5)
      {
        *a5 = v10;
      }
      else if (v10)
      {
        CFRelease(v10);
      }
      v28 = 1;
      v10 = v11;
      goto LABEL_29;
    }
    CFRelease(v11);
LABEL_24:
    v28 = 0;
    if (!v10)
      return v28;
    goto LABEL_29;
  }
  _C3DModelPathResolveArray_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  if (v11)
    goto LABEL_18;
LABEL_8:
  v20 = scn_default_log();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
  {
    _C3DModelPathResolveArray_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);
    if (v10)
      goto LABEL_10;
  }
  else if (v10)
  {
LABEL_10:
    v28 = 0;
LABEL_29:
    CFRelease(v10);
    return v28;
  }
LABEL_14:
  v29 = CFStringFind(ValueAtIndex, CFSTR("("), 0);
  if (v29.length < 1)
    return 0;
  v30 = CFStringFind(ValueAtIndex, CFSTR(")"), 0);
  v28 = 0;
  if (v30.length >= 1 && v30.location > v29.location)
  {
    v34.location = 0;
    v34.length = v29.location;
    v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v34);
    v35.location = v29.location + 1;
    v35.length = v30.location - (v29.location + 1);
    v11 = CFStringCreateWithSubstring(0, ValueAtIndex, v35);
    if (!v11)
      goto LABEL_24;
    goto LABEL_18;
  }
  return v28;
}

CFStringRef _C3DModelTargetCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DModelTarget>"));
}

CFStringRef _C3DModelTargetCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DModelTarget>"));
}

uint64_t C3DModelTargetCreateCopy(uint64_t a1)
{
  uint64_t Instance;

  if (C3DModelTargetGetTypeID_onceToken != -1)
    dispatch_once(&C3DModelTargetGetTypeID_onceToken, &__block_literal_global_128);
  Instance = C3DTypeCreateInstance_(C3DModelTargetGetTypeID_typeID, 0x28uLL);
  C3DModelTargetSetTarget(Instance, *(CFTypeRef *)(a1 + 16));
  *(_QWORD *)(Instance + 24) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(Instance + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(Instance + 34) = *(_DWORD *)(a1 + 34);
  *(_OWORD *)(Instance + 40) = *(_OWORD *)(a1 + 40);
  return Instance;
}

uint64_t C3DModelTargetGetTarget(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

void *C3DModelTargetGetValue(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  size_t v22;
  uint64_t TypeSemantic;
  uint64_t ComponentIndex;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelTargetGetValue_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(const void **)(a1 + 16);
  v21 = *(const void **)(a1 + 24);
  v22 = *(unsigned __int8 *)(a1 + 36);
  TypeSemantic = C3DModelTargetGetTypeSemantic(a1);
  ComponentIndex = C3DModelTargetGetComponentIndex(a1);
  return C3DGetValue(v20, v21, a2, v22, TypeSemantic, ComponentIndex);
}

uint64_t C3DModelTargetGetTypeSemantic(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(char *)(a1 + 34);
}

uint64_t C3DModelTargetGetComponentIndex(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      _C3DAnimationManagerAddAnimationForKey_cold_4(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 35);
}

void SCNVideoTextureSourceDiscardVideoData(uint64_t a1)
{
  const void *v2;
  __IOSurface *v3;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = (__IOSurface *)objc_msgSend(*(id *)(a1 + 16), "iosurface");
  if (v3)
    IOSurfaceDecrementUseCount(v3);

  *(_QWORD *)(a1 + 16) = 0;
}

void SCNVideoTextureSourceRelease(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  SCNVideoTextureSourceDiscardVideoData(a1);
}

void SCNVideoTextureSourceCreateMetalTexture(uint64_t a1, uint64_t a2, __CVMetalTextureCache *a3)
{
  __CVBuffer *v6;
  int v7;
  int v8;
  signed int PixelFormatType;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  MTLPixelFormat v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t Width;
  size_t Height;
  const void *v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  __CVMetalTextureCache *v43;
  CGColorSpaceRef ColorSpaceFromAttachments;
  CGColorSpaceRef v45;
  CGColorSpaceRef v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id Texture;
  __IOSurface *v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CVMetalTextureRef image;

  v6 = *(__CVBuffer **)(a1 + 8);
  v7 = -[SCNMTLRenderContext disableLinearRendering](a2);
  v8 = -[SCNMTLRenderContext wantsWideGamut](a2);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v6);
  if (PixelFormatType > 875836533)
  {
    if (PixelFormatType <= 1380401728)
    {
      if (PixelFormatType == 875836534)
        goto LABEL_38;
      if (PixelFormatType == 1111970369)
      {
        v19 = v7 == 0;
        if (!v8)
        {
          v12 = 80;
          if (v19)
            v73 = 81;
          else
            v73 = 80;
          v76 = v73;
          v37 = C3DColorSpaceSRGB();
          v14 = MTLPixelFormatBGRA8Unorm;
          goto LABEL_68;
        }
        v12 = 552;
        if (v19)
          v20 = 553;
        else
          v20 = 552;
        v76 = v20;
        v14 = MTLPixelFormatBGRA8Unorm;
        goto LABEL_52;
      }
    }
    else
    {
      switch(PixelFormatType)
      {
        case 1380401729:
          v24 = v7 == 0;
          if (!v8)
          {
            v12 = 70;
            if (v24)
              v74 = 71;
            else
              v74 = 70;
            v76 = v74;
            v37 = C3DColorSpaceSRGB();
            v14 = MTLPixelFormatRGBA8Unorm;
            goto LABEL_68;
          }
          v12 = 552;
          if (v24)
            v25 = 553;
          else
            v25 = 552;
          v76 = v25;
          v14 = MTLPixelFormatRGBA8Unorm;
          goto LABEL_52;
        case 1380410945:
          if (v8)
          {
            if ((v7 & 1) != 0)
            {
              v12 = 125;
              v27 = C3DColorSpaceExtendedSRGB();
            }
            else
            {
              v12 = 125;
              v27 = C3DColorSpaceExtendedLinearSRGB();
            }
          }
          else if ((v7 & 1) != 0)
          {
            v12 = 125;
            v27 = C3DColorSpaceSRGB();
          }
          else
          {
            v12 = 125;
            v27 = C3DColorSpaceLinearSRGB();
          }
          v37 = v27;
          v76 = 125;
          v14 = MTLPixelFormatRGBA32Float;
          goto LABEL_68;
        case 1380411457:
          if (v8)
          {
            if ((v7 & 1) != 0)
            {
              v12 = 115;
              v15 = C3DColorSpaceExtendedSRGB();
            }
            else
            {
              v12 = 115;
              v15 = C3DColorSpaceExtendedLinearSRGB();
            }
          }
          else if ((v7 & 1) != 0)
          {
            v12 = 115;
            v15 = C3DColorSpaceSRGB();
          }
          else
          {
            v12 = 115;
            v15 = C3DColorSpaceLinearSRGB();
          }
          v37 = v15;
          v76 = 115;
          v14 = MTLPixelFormatRGBA16Float;
          goto LABEL_68;
      }
    }
    goto LABEL_60;
  }
  if (PixelFormatType <= 875704933)
  {
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
    {
      v17 = v7 == 0;
      if (v8)
      {
        v12 = 552;
        if (v17)
          v18 = 553;
        else
          v18 = 552;
        v76 = v18;
        v14 = MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422;
        goto LABEL_52;
      }
      v12 = 70;
      if (v17)
        v28 = 71;
      else
        v28 = 70;
      v76 = v28;
      v14 = MTLPixelFormatDepth32Float_Stencil8|MTLPixelFormatGBGR422;
      goto LABEL_66;
    }
LABEL_60:
    LOBYTE(image) = HIBYTE(PixelFormatType);
    BYTE1(image) = BYTE2(PixelFormatType);
    BYTE2(image) = BYTE1(PixelFormatType);
    *(_WORD *)((char *)&image + 3) = PixelFormatType;
    v29 = scn_default_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      SCNVideoTextureSourceCreateMetalTexture_cold_1((uint64_t)&image, v29, v30, v31, v32, v33, v34, v35);
    return;
  }
  if (PixelFormatType == 875704934 || PixelFormatType == 875704950)
  {
    v11 = v7 == 0;
    if (v8)
    {
      v12 = 552;
      if (v11)
        v13 = 553;
      else
        v13 = 552;
      v76 = v13;
      v14 = MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422;
      goto LABEL_52;
    }
    v12 = 70;
    if (v11)
      v23 = 71;
    else
      v23 = 70;
    v76 = v23;
    v14 = MTLPixelFormatX24_Stencil8|MTLPixelFormatGBGR422;
LABEL_66:
    v26 = C3DColorSpaceSRGB();
    goto LABEL_67;
  }
  if (PixelFormatType != 875836518)
    goto LABEL_60;
LABEL_38:
  v21 = v7 == 0;
  if (!v8)
  {
    v12 = 70;
    if (v21)
      v36 = 71;
    else
      v36 = 70;
    v76 = v36;
    v14 = MTLPixelFormatX24_Stencil8|MTLPixelFormatBGRG422;
    goto LABEL_66;
  }
  v12 = 552;
  if (v21)
    v22 = 553;
  else
    v22 = 552;
  v76 = v22;
  v14 = MTLPixelFormatX24_Stencil8|MTLPixelFormatBGRG422;
LABEL_52:
  v26 = C3DColorSpaceExtendedSRGB();
LABEL_67:
  v37 = v26;
LABEL_68:
  v75 = v12;
  Width = CVPixelBufferGetWidth(v6);
  Height = CVPixelBufferGetHeight(v6);
  v40 = *(const void **)(a1 + 40);
  if (v40)
  {
    CFRelease(v40);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v41 = CVBufferCopyAttachments(v6, kCVAttachmentMode_ShouldPropagate);
  if (v41)
  {
    v42 = v41;
    v43 = a3;
    ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v41);
    if (ColorSpaceFromAttachments)
    {
      v45 = ColorSpaceFromAttachments;
      v46 = *(CGColorSpaceRef *)(a1 + 40);
      if (v46 != v45)
      {
        if (v46)
        {
          CFRelease(v46);
          *(_QWORD *)(a1 + 40) = 0;
        }
        *(_QWORD *)(a1 + 40) = CFRetain(v45);
      }
      CFRelease(v45);
    }
    CFRelease(v42);
    a3 = v43;
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_81;
  if ((CGColorSpaceEqualToColorSpaceIgnoringRange() & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 40))
    {
LABEL_83:
      image = 0;
      v47 = CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, v6, 0, v14, Width, Height, 0, &image);
      if ((_DWORD)v47)
      {
        v48 = v47;
        v49 = scn_default_log();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          SCNVideoTextureSourceCreateMetalTexture_cold_2(v48, v49, v50, v51, v52, v53, v54, v55);
        return;
      }
      Texture = CVMetalTextureGetTexture(image);
      v66 = (__IOSurface *)objc_msgSend(Texture, "iosurface");
      if (v66)
        IOSurfaceIncrementUseCount(v66);
      *(_QWORD *)(a1 + 16) = Texture;

      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
LABEL_103:
      CFRelease(image);
      return;
    }
LABEL_81:
    if ((-[SCNMTLRenderContext disableLinearRendering](a2) & 1) == 0)
      v14 = SCNMTLPixelFormatSRGBVariant(v14);
    goto LABEL_83;
  }
  image = 0;
  v56 = CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, v6, 0, v14, Width, Height, 0, &image);
  if (!(_DWORD)v56)
  {
    v67 = CVMetalTextureGetTexture(image);
    v68 = *(void **)(a1 + 24);
    v69 = *(void **)(a1 + 32);
    if (!v68
      || objc_msgSend(*(id *)(a1 + 24), "pixelFormat") != v76
      || objc_msgSend(v68, "width") != Width
      || objc_msgSend(v68, "height") != Height)
    {

      v70 = (void *)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v76, Width, Height, 0);
      objc_msgSend(v70, "setStorageMode:", 2);
      objc_msgSend(v70, "setUsage:", 3);
      if (v76 != v75)
        objc_msgSend(v70, "setUsage:", objc_msgSend(v70, "usage") | 0x10);
      v71 = (void *)objc_msgSend((id)-[SCNMTLRenderContext device](a2), "newTextureWithDescriptor:", v70);
      v68 = v71;
      *(_QWORD *)(a1 + 24) = v71;
      if (v76 == v75)
        v72 = v71;
      else
        v72 = (id)objc_msgSend(v71, "newTextureViewWithPixelFormat:", v75);
      v69 = v72;
      *(_QWORD *)(a1 + 32) = v72;
    }
    objc_msgSend((id)-[SCNMTLRenderContext resourceManager](a2), "colorMatchSourceTexture:sourceColorSpace:destinationColorSpace:destinationTexture:renderContext:", v67, *(_QWORD *)(a1 + 40), v37, v69, a2);
    *(_QWORD *)(a1 + 16) = v68;
    goto LABEL_103;
  }
  v57 = v56;
  v58 = scn_default_log();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    SCNVideoTextureSourceCreateMetalTexture_cold_2(v57, v58, v59, v60, v61, v62, v63, v64);
}

uint64_t kSCNGenericVideoSourceCallbackCreateTextureProxy(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  __int128 v6[2];

  if (!a3)
    return 0;
  v6[0] = xmmword_1EA5A5070;
  v6[1] = *(_OWORD *)&off_1EA5A5080;
  v4 = C3DTextureProxyCreate();
  C3DTextureProxySetCallbacks(v4, v6);
  C3DTextureProxySetSource(v4, a3);
  return v4;
}

BOOL kSCNAVPlayerVideoSourceCallbackIsOpaque(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "player"), "currentItem"), "asset");
  return objc_msgSend((id)objc_msgSend(v1, "tracksWithMediaCharacteristic:", *MEMORY[0x1E0C8A700]), "count") == 0;
}

uint64_t kSCNGenericVideoSourceCallbackIsPremultiplied()
{
  return 1;
}

uint64_t kSCNGenericVideoSourceCallbackIsOpaque()
{
  return 0;
}

uint64_t kSCNCaptureDeviceSourceCallbackGetCaptureDeviceInfo(uint64_t result, _BYTE *a2, _QWORD *a3, _QWORD *a4)
{
  *a2 = *(_BYTE *)(result + 104);
  *a3 = *(_QWORD *)(result + 112);
  *a4 = *(_QWORD *)(result + 120);
  return result;
}

void sub_1DCF39524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCF39624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t kSCNCaptureDeviceOutputConsumerSourceCallbackIsOpaque(void *a1)
{
  return objc_msgSend(a1, "containsAlpha") ^ 1;
}

uint64_t kSCNCaptureDeviceOutputConsumerSourceCallbackGetCaptureDeviceInfo(uint64_t result, _BYTE *a2, _QWORD *a3, _QWORD *a4)
{
  *a2 = *(_BYTE *)(result + 88);
  *a3 = *(_QWORD *)(result + 96);
  *a4 = *(_QWORD *)(result + 104);
  return result;
}

void sub_1DCF3991C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCF39A9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1DCF39BCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _C3DModelValueStorageItemCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFStringRef _C3DModelValueStorageItemCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DModelValueStorageItem %p>"), a1);
}

CFStringRef _C3DModelValueStorageItemCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DModelValueStorageItem %p>"), a1);
}

uint64_t C3DModelValueStorageCreateItem(const void *a1)
{
  uint64_t Instance;
  int BaseType;

  if (C3DModelValueStorageItemGetTypeID_onceToken != -1)
    dispatch_once(&C3DModelValueStorageItemGetTypeID_onceToken, &__block_literal_global_130);
  Instance = C3DTypeCreateInstance_(C3DModelValueStorageItemGetTypeID_typeID, 0x90uLL);
  if (Instance)
  {
    *(_QWORD *)(Instance + 24) = CFRetain(a1);
    *(_WORD *)(Instance + 16) = 1;
    BaseType = C3DModelTargetGetBaseType((uint64_t)a1);
    *(_WORD *)(Instance + 128) = BaseType;
    *(_WORD *)(Instance + 130) = C3DSizeOfBaseType(BaseType);
  }
  return Instance;
}

uint64_t C3DModelValueStorageItemRelease(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DModelValueStorageItemRelease_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_WORD *)(a1 + 16) - 1;
  *(_WORD *)(a1 + 16) = v10;
  return v10;
}

void _C3DModelValueStorageCFFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef _C3DModelValueStorageCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DModelValueStorage>"));
}

CFStringRef _C3DModelValueStorageCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DModelValueStorage>"));
}

uint64_t C3DModelValueStorageAddAndRetainModelValue(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *TargetAddress;
  const void *v21;
  uint64_t Item;
  const void *Target;
  void *(*v24)(int, void *, void *, size_t);
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  TargetAddress = (const void *)C3DModelTargetGetTargetAddress((uint64_t)a2);
  v21 = TargetAddress;
  if (*(const void **)(a1 + 24) == TargetAddress)
  {
    Item = *(_QWORD *)(a1 + 32);
    if (Item)
      goto LABEL_8;
LABEL_10:
    Item = C3DModelValueStorageCreateItem(a2);
    Target = (const void *)C3DModelTargetGetTarget((uint64_t)a2);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), v21, (const void *)Item);
    *(_QWORD *)(Item + 136) = C3DGetValueGetter(Target);
    v24 = C3DGetValueSetter(Target);
    *(_QWORD *)(Item + 144) = v24;
    if (*(_QWORD *)(Item + 136))
    {
      if (v24)
      {
LABEL_18:
        C3DModelValueStorageUpdateModelValueFromPresentationValue(a1, Item);
        CFRelease((CFTypeRef)Item);
        *(_QWORD *)(a1 + 24) = v21;
        *(_QWORD *)(a1 + 32) = Item;
        return Item;
      }
    }
    else
    {
      v25 = scn_default_log();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
        C3DModelValueStorageAddAndRetainModelValue_cold_2(v25, v26, v27, v28, v29, v30, v31, v32);
      if (*(_QWORD *)(Item + 144))
        goto LABEL_18;
    }
    v33 = scn_default_log();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
      C3DModelValueStorageAddAndRetainModelValue_cold_1(v33, v34, v35, v36, v37, v38, v39, v40);
    goto LABEL_18;
  }
  *(_QWORD *)(a1 + 24) = TargetAddress;
  Item = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), TargetAddress);
  *(_QWORD *)(a1 + 32) = Item;
  if (!Item)
    goto LABEL_10;
LABEL_8:
  ++*(_WORD *)(Item + 16);
  return Item;
}

void C3DModelValueStorageUpdateModelValueFromPresentationValue(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeID v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *Transform;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t Target;
  uint64_t TargetAddress;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!a1 && (v3 = scn_default_log(), os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v3, v4, v5, v6, v7, v8, v9, v10);
    if (a2)
    {
LABEL_4:
      v11 = *(_QWORD *)(a2 + 24);
      if (*(_BYTE *)(v11 + 37))
      {
        v12 = CFGetTypeID(*(CFTypeRef *)(v11 + 16));
        if (v12 != C3DNodeGetTypeID())
        {
          v13 = scn_default_log();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
            C3DModelValueStorageUpdateModelValueFromPresentationValue_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
        }
        Transform = (_OWORD *)C3DNodeGetTransform(*(_QWORD *)(v11 + 16));
        v22 = Transform[1];
        *(_OWORD *)(a2 + 32) = *Transform;
        *(_OWORD *)(a2 + 48) = v22;
        v23 = Transform[5];
        v25 = Transform[2];
        v24 = Transform[3];
        *(_OWORD *)(a2 + 96) = Transform[4];
        *(_OWORD *)(a2 + 112) = v23;
        *(_OWORD *)(a2 + 64) = v25;
        *(_OWORD *)(a2 + 80) = v24;
      }
      else
      {
        v26 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 136);
        Target = C3DModelTargetGetTarget(*(_QWORD *)(a2 + 24));
        TargetAddress = C3DModelTargetGetTargetAddress(v11);
        v26(Target, TargetAddress, a2 + 32, *(__int16 *)(a2 + 130), *(char *)(v11 + 34), *(unsigned __int8 *)(v11 + 35));
      }
      return;
    }
  }
  else if (a2)
  {
    goto LABEL_4;
  }
  v29 = scn_default_log();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageItemRelease_cold_1(v29, v30, v31, v32, v33, v34, v35, v36);
}

void C3DModelValueStorageReleaseModelValueAndRestorePresentationValueIfNeeded(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageItemRelease_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (*(_WORD *)(a2 + 16) == 1)
    C3DModelValueStorageUpdatePresentationValueFromModelValue(a1, a2);
  C3DModelValueStorageReleaseModelValue(a1, a2);
}

uint64_t C3DModelValueStorageUpdatePresentationValueFromModelValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TargetAddress;
  uint64_t v21;
  int v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t Target;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageItemRelease_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  TargetAddress = C3DModelTargetGetTargetAddress(*(_QWORD *)(a2 + 24));
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a2 + 24);
  v22 = *(unsigned __int8 *)(v21 + 37);
  v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 144);
  Target = C3DModelTargetGetTarget(v21);
  if (v22)
  {
    v25 = TargetAddress;
    v26 = 96;
    v27 = 8;
    v28 = 0;
  }
  else
  {
    v26 = *(__int16 *)(a2 + 130);
    v29 = *(_QWORD *)(a2 + 24);
    v27 = *(char *)(v29 + 34);
    v28 = *(unsigned __int8 *)(v29 + 35);
    v25 = TargetAddress;
  }
  return v23(Target, v25, a2 + 32, v26, v27, v28);
}

void C3DModelValueStorageReleaseModelValue(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *TargetAddress;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageItemRelease_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  TargetAddress = (const void *)C3DModelTargetGetTargetAddress(*(_QWORD *)(a2 + 24));
  if (!C3DModelValueStorageItemRelease(a2))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), TargetAddress);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

const void *C3DModelValueStorageGetModelValueForAddressIfAny(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageGetModelValueForAddressIfAny_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  if (*(void **)(a1 + 24) == key)
    return *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = key;
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void C3DModelValueStorageUpdateItemModelValueWithValue(__n128 *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 *Bytes;
  unint64_t v32;
  __n128 v33;

  if (!a1 && (v6 = scn_default_log(), os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    C3DModelValueStorageItemRelease_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v14 = scn_default_log();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    C3DAnimationManagerApplyAnimationsForTarget_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_6:
  if (!a3)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
      C3DModelValueStorageUpdateItemModelValueWithValue_cold_1(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  v30 = *(unsigned __int8 *)(a1[1].n128_u64[1] + 37);
  Bytes = (__int128 *)C3DValueGetBytes(a3);
  if (v30)
  {
    v32 = C3DSizeOfBaseType(*(__int16 *)(a2 + 32));
    C3DTransformSetValue(a1 + 2, Bytes, v32, *(char *)(a2 + 34), *(unsigned __int8 *)(a2 + 35), v33);
  }
  else
  {
    memcpy(&a1[2], Bytes, a1[8].n128_i16[1]);
  }
}

uint64_t C3DModelValueStorageUpdateTimestamp(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(result + 40);
  return result;
}

_QWORD *C3DModelValueStorageUpdateTimestampOfNode(uint64_t a1, uint64_t a2)
{
  const void *Transform;
  _QWORD *result;

  Transform = (const void *)C3DNodeGetTransform(a2);
  if (*(const void **)(a1 + 24) == Transform)
  {
    result = *(_QWORD **)(a1 + 32);
    if (!result)
      return result;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = Transform;
    result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), Transform);
    *(_QWORD *)(a1 + 32) = result;
    if (!result)
      return result;
  }
  result[19] = *(_QWORD *)(a1 + 40);
  return result;
}

void C3DModelValueStorageUpdateNodePresentationValueInNeeded(uint64_t a1, uint64_t a2)
{
  const void *Transform;
  const void *Value;

  Transform = (const void *)C3DNodeGetTransform(a2);
  if (*(const void **)(a1 + 24) != Transform)
  {
    *(_QWORD *)(a1 + 24) = Transform;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), Transform);
    *(_QWORD *)(a1 + 32) = Value;
    if (!Value)
      return;
    goto LABEL_3;
  }
  Value = *(const void **)(a1 + 32);
  if (Value)
LABEL_3:
    C3DModelValueStorageUpdatePresentationValueInNeeded(a1, (uint64_t)Value);
}

void C3DModelValueStorageUpdatePresentationValueInNeeded(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TargetAddress;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t Target;
  void (*v25)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v26;
  _OWORD v27[4];

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DConstraintApplyIK_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DModelValueStorageItemRelease_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a2 + 152) != v20)
  {
    *(_QWORD *)(a2 + 152) = v20;
    TargetAddress = C3DModelTargetGetTargetAddress(*(_QWORD *)(a2 + 24));
    v22 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v22 + 37))
    {
      memset(v27, 0, sizeof(v27));
      C3DTransformGetMatrix(a2 + 32, (uint64_t)v27);
      v23 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(a2 + 144);
      Target = C3DModelTargetGetTarget(*(_QWORD *)(a2 + 24));
      v23(Target, TargetAddress, v27, 64, 8, 0);
    }
    else
    {
      v25 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 144);
      v26 = C3DModelTargetGetTarget(v22);
      v25(v26, TargetAddress, a2 + 32, *(__int16 *)(a2 + 130), *(char *)(*(_QWORD *)(a2 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 35));
    }
  }
}

uint64_t C3DModelValueStorageUpdatePresentationValueWithBytes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t TargetAddress;
  uint64_t Target;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  TargetAddress = C3DModelTargetGetTargetAddress(a2[3]);
  a2[19] = *(_QWORD *)(a1 + 40);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2[18];
  Target = C3DModelTargetGetTarget(a2[3]);
  return v15(Target, TargetAddress, a5, a6, a3, a4);
}

uint64_t C3DModelValueStorageUpdatePresentationValueWithTransform(uint64_t a1, uint64_t *a2, __n128 *a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t Target;
  char v10;
  uint64_t (*v11)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v14;
  __n128 v15;
  uint64_t (*v16)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v17;
  __n128 v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  __n128 Position;

  result = a2[3];
  v8 = *(_QWORD *)(result + 24);
  a2[19] = *(_QWORD *)(a1 + 40);
  if (a4 == 7)
  {
    v23 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
    Target = C3DModelTargetGetTarget(result);
    return v23(Target, v8, a3, 96, 8, 0);
  }
  v10 = a4;
  if ((a4 & 1) != 0)
  {
    Position = C3DTransformGetPosition(a3);
    v11 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
    v12 = C3DModelTargetGetTarget(a2[3]);
    result = v11(v12, v8, &Position, 16, 6, 0);
    if ((v10 & 4) == 0)
    {
LABEL_5:
      if ((v10 & 2) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((a4 & 4) == 0)
  {
    goto LABEL_5;
  }
  Position = C3DTransformGetScale(a3);
  v13 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
  v14 = C3DModelTargetGetTarget(a2[3]);
  result = v13(v14, v8, &Position, 16, 7, 0);
  if ((v10 & 2) == 0)
    return result;
LABEL_9:
  result = C3DTransformGetRotationType((uint64_t)a3);
  switch((_DWORD)result)
  {
    case 2:
      C3DTransformGetAxisAngle((float32x4_t *)a3);
      Position = v18;
      v19 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v20 = C3DModelTargetGetTarget(a2[3]);
      return v19(v20, v8, &Position, 16, 4, 0);
    case 1:
      Position = C3DTransformGetEuler((float32x4_t *)a3);
      v21 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v22 = C3DModelTargetGetTarget(a2[3]);
      return v21(v22, v8, &Position, 16, 5, 0);
    case 0:
      C3DTransformGetQuaternion((uint64_t)a3);
      Position = v15;
      v16 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v17 = C3DModelTargetGetTarget(a2[3]);
      return v16(v17, v8, &Position, 16, 3, 0);
  }
  return result;
}

void C3DModelValueStoragePrepareNextFrame(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DConstraintApplyIK_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  ++*(_QWORD *)(a1 + 40);
}

uint64_t __C3DAvoidOccluderConstraintDelegateShouldAvoidOccluderCallback(void *a1, id *a2, id *a3)
{
  void *v6;
  id *ObjCWrapper;
  id *v8;

  v6 = (void *)objc_msgSend(a1, "delegate");
  ObjCWrapper = C3DEntityGetObjCWrapper(a2);
  v8 = C3DEntityGetObjCWrapper(a3);
  if (ObjCWrapper && v8)
    return objc_msgSend(v6, "avoidOccluderConstraint:shouldAvoidOccluder:forNode:", a1, ObjCWrapper, v8);
  else
    return 1;
}

CFStringRef _C3DTransformTreeCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v3;

  v3 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<C3DTransformTree %p>"), a1);
}

CFStringRef _C3DTransformTreeCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DTransformTree %p>"), a1);
}

uint64_t ___Z25C3DTransformTreeGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  C3DTransformTreeGetTypeID(void)::typeID = result;
  return result;
}

void C3DTransformTreeRemoveNode(__C3DTransformTree *this, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!this)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DTransformTreeAddNode_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  __C3DTransformTree::remove(this, a2);
}

void __C3DTransformTree::remove(__C3DTransformTree *this, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  int64_t FirstChildInRange;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t LastChildInRange;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  signed int v44;
  int *v45;
  int *v46;
  int v47;
  int v48;
  int32x2_t *v49;
  int32x2_t *v50;
  int32x2_t v51;
  int32x2_t v52;
  int v53;
  int v54;
  __int32 v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  NSObject *v73;
  int v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  NSObject *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  int v86;
  int v87;
  _DWORD *v88;
  uint64_t v89;
  int *v90;
  uint64_t *v91;
  os_unfair_lock_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int *v96;
  char *v97;
  char *v98;
  uint8_t v99[4];
  int v100;
  uint8_t v101[4];
  int v102;
  uint8_t v103[4];
  int v104;
  uint8_t v105[4];
  int v106;
  uint8_t v107[4];
  int v108;
  uint8_t v109[4];
  int v110;
  uint8_t v111[4];
  _QWORD v112[3];

  *(_QWORD *)((char *)&v112[1] + 4) = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == -1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::remove();
  }
  v5 = *((_QWORD *)this + 3);
  v6 = (unsigned int *)(v5 + 8 * (int)a2);
  v7 = *v6;
  v8 = v6[1];
  ++*((_DWORD *)this + 18);
  if ((_DWORD)v8 == -1)
  {
    *v6 = -1;
    *(_DWORD *)(v5 + 8 * (int)a2 + 4) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = a2;
    return;
  }
  v93 = (int)a2;
  v94 = a2;
  v92 = (os_unfair_lock_t)((char *)this + 76);
  os_unfair_lock_lock((os_unfair_lock_t)this + 19);
  v91 = &v89;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v89 - ((v10 + 15) & 0x7FFFFFFF0);
  v12 = *((unsigned int *)this + 16);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v89 - v14;
  if ((int)v12 >= 1)
  {
    memset_pattern16(v11, &unk_1DD02C740, 4 * v12);
    memset_pattern16(v15, &unk_1DD02C750, 4 * v12);
  }
  *(_DWORD *)&v11[4 * v7] = v8;
  v97 = v11;
  v98 = v15;
  *(_DWORD *)&v15[4 * v7] = v8;
  v16 = v7 + 1;
  LODWORD(v17) = v12;
  if ((int)(v7 + 1) < (int)v12)
  {
    v90 = &v110;
    v95 = &v106;
    v96 = &v108;
    LODWORD(FirstChildInRange) = v7;
    v19 = v8;
    v20 = v7;
    v21 = v98;
    while (1)
    {
      v22 = FirstChildInRange | (v8 << 32);
      v23 = v20 | (v19 << 32);
      FirstChildInRange = __C3DTransformTree::_findFirstChildInRange((uint64_t)this, v22, v23);
      v8 = HIDWORD(FirstChildInRange);
      LastChildInRange = __C3DTransformTree::_findLastChildInRange((uint64_t)this, v22, v23);
      v19 = HIDWORD(LastChildInRange);
      if (HIDWORD(FirstChildInRange) == -1 && HIDWORD(LastChildInRange) == -1)
        break;
      v20 = LastChildInRange;
      if (HIDWORD(FirstChildInRange) == -1)
      {
        v26 = scn_default_log();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
          __C3DTransformTree::remove(v111, v112, v26);
      }
      if ((_DWORD)v19 == -1)
      {
        v27 = scn_default_log();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
          __C3DTransformTree::remove(v109, v90, v27);
      }
      if (v20 != (_DWORD)FirstChildInRange)
      {
        v28 = scn_default_log();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
          __C3DTransformTree::remove(v107, v96, v28);
      }
      if ((int)v19 < SHIDWORD(FirstChildInRange))
      {
        v29 = scn_default_log();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
          __C3DTransformTree::remove(v105, v95, v29);
      }
      v11 = v97;
      v30 = *(int *)&v97[4 * (int)FirstChildInRange];
      if ((int)v30 >= SHIDWORD(FirstChildInRange))
        v31 = HIDWORD(FirstChildInRange);
      else
        v31 = *(_DWORD *)&v97[4 * (int)FirstChildInRange];
      *(_DWORD *)&v97[4 * (int)FirstChildInRange] = v31;
      v32 = *(_DWORD *)&v21[4 * v20];
      if (v32 <= (int)v19)
        v32 = v19;
      *(_DWORD *)&v21[4 * v20] = v32;
      v33 = *(_DWORD *)&v21[4 * (int)FirstChildInRange];
      if (v31 <= v33)
      {
        v34 = *((_QWORD *)this + 3);
        if (v30 >= FirstChildInRange >> 32)
          v30 = FirstChildInRange >> 32;
        v35 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 7) + 80 * (int)FirstChildInRange + 40) + 8 * v30);
        v36 = v33 - v31 + 1;
        do
        {
          v37 = *v35++;
          *(_QWORD *)(v34 + 8 * *(int *)(v37 + 88)) = -1;
          --v36;
        }
        while (v36);
      }
      ++v16;
      LODWORD(v17) = *((_DWORD *)this + 16);
      if (v16 >= (int)v17)
        goto LABEL_39;
    }
    LODWORD(v17) = *((_DWORD *)this + 16);
    v11 = v97;
  }
LABEL_39:
  if ((int)v17 < 1)
    goto LABEL_97;
  v38 = 0;
  v90 = &v104;
  v95 = &v100;
  v96 = &v102;
  do
  {
    v39 = v38;
    v40 = *((_QWORD *)this + 7);
    v41 = v98;
    v42 = *(_DWORD *)&v98[4 * v38];
    v43 = *(int *)&v11[4 * v39];
    if (v42 >= (int)v43)
    {
      v46 = (int *)(v40 + 80 * v39);
      v44 = v42 - v43 + 1;
      C3DTransformLevel::moveData((C3DTransformLevel *)v46, v42 + 1, ~(v42 - v43));
      v47 = v46[18];
      v45 = v46 + 18;
      v48 = v47 - v44;
      *v45 = v47 - v44;
      if (v42 - (_DWORD)v43 == -1)
      {
        v44 = 0;
        v41 = v98;
      }
      else
      {
        v49 = (int32x2_t *)(v40 + 80 * v39);
        v51 = v49[8];
        v50 = v49 + 8;
        v52 = v51;
        v53 = v51.i32[0];
        v54 = v51.i32[1];
        if (v51.i32[0] <= v51.i32[1])
        {
          v41 = v98;
          if ((int)v43 <= v53)
          {
            *v50 = vmax_s32(vsub_s32(v52, vdup_n_s32(v44)), 0);
          }
          else if (v42 <= v54)
          {
            v55 = v48 - 1;
            if (v54 < v55)
              v55 = v54;
            v50->i32[1] = v55;
          }
        }
        else
        {
          v41 = v98;
        }
      }
    }
    else
    {
      v44 = 0;
      v45 = (int *)(v40 + 80 * v39 + 72);
    }
    v38 = v39 + 1;
    if (v39 + 1 < *((int *)this + 16))
    {
      v56 = *(_DWORD *)&v41[4 * v38];
      v57 = *(_DWORD *)&v11[4 * v38];
      if (v56 >= v57 && *v45 >= 1)
      {
        v58 = 0;
        v59 = *(_QWORD *)(v40 + 80 * v39 + 32);
        v60 = *((_QWORD *)this + 7) + 80 * v38;
        v61 = (_DWORD *)(v60 + 72);
        v62 = (_QWORD *)(v60 + 24);
        v63 = v56 + 1;
        while (1)
        {
          v64 = *(_DWORD *)(v59 + 4 * v58);
          if (v64 > v56)
            break;
          if (v64 >= v57)
          {
            if ((int)v63 >= *v61 || (v65 = v57, v58 != *(_DWORD *)(*v62 + 4 * v63)))
              v65 = -1;
            goto LABEL_63;
          }
LABEL_64:
          if (++v58 >= *v45)
            goto LABEL_65;
        }
        v65 = v57 + ~v56 + v64;
LABEL_63:
        *(_DWORD *)(v59 + 4 * v58) = v65;
        goto LABEL_64;
      }
    }
LABEL_65:
    if (v39)
    {
      v66 = *(_DWORD *)&v41[4 * (v39 - 1)];
      v67 = *(_DWORD *)&v11[4 * (v39 - 1)];
      if (v66 >= v67)
      {
        LODWORD(v68) = (_DWORD)v43 == 0x7FFFFFFF ? 0 : v43;
        v69 = *v45;
        if ((int)v68 < *v45)
        {
          v70 = v67 + ~v66;
          v71 = *(_QWORD *)(v40 + 80 * v39 + 24);
          v68 = (int)v68;
          do
          {
            v72 = *(_DWORD *)(v71 + 4 * v68);
            if (v72 >= v67)
            {
              *(_DWORD *)(v71 + 4 * v68) = v70 + v72;
              v69 = *v45;
            }
            ++v68;
          }
          while (v68 < v69);
        }
      }
    }
    if (v44 >= 1)
    {
      if ((_DWORD)v43 == 0x7FFFFFFF)
      {
        v73 = scn_default_log();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_FAULT))
          __C3DTransformTree::remove(v103, v90, v73);
      }
      v74 = *v45;
      if ((int)v43 < *v45)
      {
        v75 = (_QWORD *)(v40 + 80 * v39 + 40);
        v76 = *((_QWORD *)this + 3);
        v77 = v43;
        do
        {
          v78 = *(_QWORD *)(*v75 + 8 * v77);
          v79 = *(int *)(v78 + 88);
          if (*(_QWORD *)(v76 + 8 * v79) != -1)
          {
            if (v39 != *(_DWORD *)(v76 + 8 * v79))
            {
              v80 = scn_default_log();
              if (os_log_type_enabled(v80, OS_LOG_TYPE_FAULT))
                __C3DTransformTree::remove(v101, v96, v80);
            }
            if (*(_DWORD *)(*((_QWORD *)this + 3) + 8 * *(int *)(v78 + 88) + 4) < (int)v43)
            {
              v81 = scn_default_log();
              if (os_log_type_enabled(v81, OS_LOG_TYPE_FAULT))
                __C3DTransformTree::remove(v99, v95, v81);
            }
            v76 = *((_QWORD *)this + 3);
            v82 = v76 + 8 * *(int *)(v78 + 88);
            *(_DWORD *)(v82 + 4) -= v44;
            v74 = *v45;
          }
          ++v77;
        }
        while (v77 < v74);
      }
    }
    v17 = *((int *)this + 16);
    v11 = v97;
  }
  while (v38 < v17);
  if ((int)v17 < 1)
  {
LABEL_97:
    v83 = 0;
    v86 = v94;
    goto LABEL_98;
  }
  v83 = 0;
  v84 = *((unsigned int *)this + 16);
  v85 = (int *)(*((_QWORD *)this + 7) + 72);
  v86 = v94;
  do
  {
    v87 = *v85;
    v85 += 20;
    if (v87)
      ++v83;
    --v84;
  }
  while (v84);
LABEL_98:
  if (v83 < (int)v17)
    __C3DTransformTree::_setLevelCount(this, v83);
  v88 = (_DWORD *)(*((_QWORD *)this + 3) + 8 * v93);
  *v88 = -1;
  v88[1] = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = v86;
  os_unfair_lock_unlock(v92);
}

void C3DTransformTreeUpdateNodeTransform(__C3DTransformTree *this, int a2, simd_float4x4 *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!this)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DTransformTreeAddNode_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  __C3DTransformTree::update(this, a2, a3);
}

void __C3DTransformTree::update(__C3DTransformTree *this, int a2, const simd_float4x4 *a3)
{
  NSObject *v6;
  int *v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;

  if (a2 == -1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::remove();
  }
  v7 = (int *)(*((_QWORD *)this + 3) + 8 * a2);
  v8 = v7[1];
  if (v8 != -1)
  {
    v9 = *v7;
    os_unfair_lock_lock((os_unfair_lock_t)this + 19);
    *((_BYTE *)this + 68) = 1;
    if (v9 >= *((_DWORD *)this + 16))
    {
      v10 = scn_default_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        __C3DTransformTree::update(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    v18 = *((_QWORD *)this + 7);
    v19 = a3->columns[1];
    v20 = a3->columns[2];
    v21 = a3->columns[3];
    v22 = v18 + 80 * v9;
    v23 = *(_QWORD *)(v22 + 16) + ((uint64_t)v8 << 6);
    *(simd_float4 *)v23 = a3->columns[0];
    *(simd_float4 *)(v23 + 16) = v19;
    *(simd_float4 *)(v23 + 32) = v20;
    *(simd_float4 *)(v23 + 48) = v21;
    v25 = *(_DWORD *)(v22 + 64);
    v24 = (_DWORD *)(v22 + 64);
    if (v8 < v25)
      *v24 = v8;
    v26 = v18 + 80 * v9;
    v28 = *(_DWORD *)(v26 + 68);
    v27 = (_DWORD *)(v26 + 68);
    if (v8 > v28)
      *v27 = v8;
    os_unfair_lock_unlock((os_unfair_lock_t)this + 19);
  }
}

void C3DTransformTreeNextFrame(__C3DTransformTree *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!this)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DTransformTreeAddNode_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  __C3DTransformTree::nextFrame(this);
}

void __C3DTransformTree::nextFrame(__C3DTransformTree *this)
{
  uint64_t v2;
  uint64_t v3;

  __C3DTransformTree::updateWorldTransforms(this);
  if (*((int *)this + 16) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      memcpy(*(void **)(*((_QWORD *)this + 7) + v2 + 8), *(const void **)(*((_QWORD *)this + 7) + v2), (uint64_t)*(int *)(*((_QWORD *)this + 7) + v2 + 72) << 6);
      ++v3;
      v2 += 80;
    }
    while (v3 < *((int *)this + 16));
  }
}

void __C3DTransformTree::updateWorldTransforms(__C3DTransformTree *this)
{
  uint64_t v2;
  uint64_t CullingSystem;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int v26;
  float32x4_t *v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t FirstChildInRange;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unint64_t LastChildInRange;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  os_unfair_lock_s *lock;

  lock = (os_unfair_lock_s *)((char *)this + 76);
  os_unfair_lock_lock((os_unfair_lock_t)this + 19);
  *((_BYTE *)this + 68) = 0;
  if (*((_DWORD *)this + 16))
  {
    v2 = C3DGetScene(**(_QWORD ***)(*((_QWORD *)this + 7) + 40));
    if (v2)
    {
      CullingSystem = C3DSceneGetCullingSystem(v2);
      v4 = *((_DWORD *)this + 16);
      if (v4 >= 1)
      {
        v5 = CullingSystem;
        v6 = 0;
        v7 = (uint64_t *)*((_QWORD *)this + 7);
        while (1)
        {
          v8 = *((_QWORD *)this + 7);
          v9 = v8 + 80 * v6;
          v11 = (_DWORD *)(v9 + 68);
          v10 = *(_DWORD *)(v9 + 68);
          v13 = (_DWORD *)(v9 + 64);
          v12 = *(int *)(v9 + 64);
          if (v10 >= (int)v12)
            break;
LABEL_23:
          ++v6;
          v7 = (uint64_t *)v9;
          if (v6 >= v4)
            goto LABEL_27;
        }
        if (v6)
        {
          v14 = v8 + 80 * v6;
          v15 = *v7;
          v17 = *(_QWORD *)(v14 + 16);
          v16 = *(_QWORD *)(v14 + 24);
          v18 = v10 + 1;
          v19 = *(_QWORD *)v9 + (v12 << 6);
          v20 = v17 + (v12 << 6);
          v21 = 0uLL;
          v22 = -1;
          v23 = 0uLL;
          v24 = 0uLL;
          v25 = 0uLL;
          do
          {
            v26 = *(_DWORD *)(v16 + 4 * v12);
            if (v22 != v26)
            {
              v27 = (float32x4_t *)(v15 + ((uint64_t)v26 << 6));
              v21 = *v27;
              v23 = v27[1];
              v24 = v27[2];
              v25 = v27[3];
              v22 = *(_DWORD *)(v16 + 4 * v12);
            }
            for (i = 0; i != 64; i += 16)
              *(float32x4_t *)(v19 + i) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v23, *(float32x2_t *)(v20 + i), 1), v21, COERCE_FLOAT(*(_OWORD *)(v20 + i))), v24, *(float32x4_t *)(v20 + i), 2), v25, *(float32x4_t *)(v20 + i), 3);
            ++v12;
            v19 += 64;
            v20 += 64;
          }
          while (v18 != (_DWORD)v12);
          if (!v5)
            goto LABEL_15;
        }
        else
        {
          memcpy((void *)(*(_QWORD *)v9 + (v12 << 6)), (const void *)(*(_QWORD *)(v8 + 16) + (v12 << 6)), (uint64_t)(v10 - (int)v12 + 1) << 6);
          if (!v5)
            goto LABEL_15;
        }
        C3DCullingSystemUpdateWorldTransforms(v5, (int *)(*(_QWORD *)(v8 + 80 * v6 + 56) + 4 * *v13), (float32x4_t *)(*(_QWORD *)v9 + ((unint64_t)*v13 << 6)), *v11 - *v13 + 1);
LABEL_15:
        if (v6 != *((_DWORD *)this + 16) - 1)
        {
          v29 = *((_QWORD *)this + 7);
          v30 = v6 + 1;
          v31 = v6 | ((unint64_t)*v13 << 32);
          v32 = v6 | ((unint64_t)*v11 << 32);
          FirstChildInRange = __C3DTransformTree::_findFirstChildInRange((uint64_t)this, v31, v32);
          if (HIDWORD(FirstChildInRange) != -1)
          {
            v34 = v29 + 80 * v30;
            v36 = *(_DWORD *)(v34 + 64);
            v35 = (_DWORD *)(v34 + 64);
            if (v36 > SHIDWORD(FirstChildInRange))
              *v35 = HIDWORD(FirstChildInRange);
          }
          LastChildInRange = __C3DTransformTree::_findLastChildInRange((uint64_t)this, v31, v32);
          if (HIDWORD(LastChildInRange) != -1)
          {
            v38 = v29 + 80 * v30;
            v40 = *(_DWORD *)(v38 + 68);
            v39 = (_DWORD *)(v38 + 68);
            if (v40 < SHIDWORD(LastChildInRange))
              *v39 = HIDWORD(LastChildInRange);
          }
        }
        *(_QWORD *)v13 = 0x800000007FFFFFFFLL;
        v4 = *((_DWORD *)this + 16);
        goto LABEL_23;
      }
    }
  }
LABEL_27:
  os_unfair_lock_unlock(lock);
}

void __C3DTransformTree::~__C3DTransformTree(__C3DTransformTree *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*((int *)this + 16) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      C3DTransformLevel::deallocateData((void **)(*((_QWORD *)this + 7) + v2));
      ++v3;
      v2 += 80;
    }
    while (v3 < *((int *)this + 16));
  }
  free(*((void **)this + 7));
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

void C3DTransformLevel::deallocateData(void **this)
{
  free(*this);
  free(this[1]);
  free(this[2]);
  free(this[3]);
  free(this[4]);
  free(this[5]);
  free(this[6]);
  free(this[7]);
}

void __C3DTransformTree::_offset(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;

  v6 = a2;
  v8 = HIDWORD(a2);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = a2;
  v11 = (int *)(v9 + 80 * (int)a2);
  v12 = v11[18];
  if ((int)v12 > SHIDWORD(a2))
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = (int *)(*(_QWORD *)(v9 + 80 * (int)a2 + 48) + 4 * (a2 >> 32));
    v15 = v12 - (a2 >> 32);
    do
    {
      v16 = *v14++;
      v17 = v13 + 8 * v16;
      LODWORD(v16) = *(_DWORD *)(v17 + 4);
      v18 = (_DWORD *)(v17 + 4);
      v19 = v16;
      if ((int)v16 >= SHIDWORD(a2))
        *v18 = v19 + a4;
      --v15;
    }
    while (v15);
  }
  C3DTransformLevel::moveData((C3DTransformLevel *)v11, SHIDWORD(a2), a4);
  v20 = v9 + 80 * v10;
  v23 = *(_DWORD *)(v20 + 68);
  v21 = (_DWORD *)(v20 + 68);
  v22 = v23;
  if (v23 >= (int)v8)
  {
    v24 = v9 + 80 * v10;
    v27 = *(_DWORD *)(v24 + 64);
    v25 = (_DWORD *)(v24 + 64);
    v26 = v27;
    if (v27 > (int)v8)
      *v25 = v26 + a4;
    *v21 = v22 + a4;
  }
  if ((_DWORD)a3 != -1)
    C3DTransformLevel::offsetChildIndices((C3DTransformLevel *)(*(_QWORD *)(a1 + 56) + 80 * (int)a3), SHIDWORD(a3), v8, a4);
  v28 = v6 + 1;
  if ((int)v28 < *(_DWORD *)(a1 + 64))
  {
    v29 = v8;
    while ((int)v29 >= 2)
    {
      v30 = *(_QWORD *)(v9 + 80 * v10 + 32) + 4 * v29--;
      LODWORD(v30) = *(_DWORD *)(v30 - 4);
      if ((_DWORD)v30 != -1)
        goto LABEL_18;
    }
    LODWORD(v30) = 0;
LABEL_18:
    v31 = *(_QWORD *)(a1 + 56);
    v32 = v31 + 80 * v28;
    v35 = *(_DWORD *)(v32 + 72);
    v33 = (int *)(v32 + 72);
    v34 = v35;
    if ((int)v30 < v35)
    {
      v36 = *(_QWORD *)(v31 + 80 * v28 + 24);
      v30 = (int)v30;
      do
      {
        v37 = *(_DWORD *)(v36 + 4 * v30);
        if (v37 >= (int)v8)
        {
          *(_DWORD *)(v36 + 4 * v30) = v37 + a4;
          v34 = *v33;
        }
        ++v30;
      }
      while (v30 < v34);
    }
  }
}

void C3DTransformLevel::moveData(C3DTransformLevel *this, int a2, int a3)
{
  int v3;
  unsigned int v4;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((_DWORD *)this + 18);
  v4 = v3 - a2;
  if (v3 - a2 < 0)
  {
    v23 = scn_default_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT))
      C3DTransformLevel::moveData(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  else if (v3 != a2)
  {
    if (v3 + a3 > *((_DWORD *)this + 19))
    {
      v8 = scn_default_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        C3DTransformLevel::moveData(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    v16 = (char *)(*((_QWORD *)this + 3) + 4 * a2);
    memmove(&v16[4 * a3], v16, 4 * v4);
    v17 = (char *)(*((_QWORD *)this + 4) + 4 * a2);
    memmove(&v17[4 * a3], v17, 4 * v4);
    v18 = (char *)(*((_QWORD *)this + 5) + 8 * a2);
    memmove(&v18[8 * a3], v18, 8 * v4);
    v19 = (char *)(*((_QWORD *)this + 6) + 4 * a2);
    memmove(&v19[4 * a3], v19, 4 * v4);
    v20 = (char *)(*((_QWORD *)this + 7) + 4 * a2);
    memmove(&v20[4 * a3], v20, 4 * v4);
    memmove((void *)(*(_QWORD *)this + ((uint64_t)a2 << 6) + ((uint64_t)a3 << 6)), (const void *)(*(_QWORD *)this + ((uint64_t)a2 << 6)), (unint64_t)v4 << 6);
    v21 = (char *)(*((_QWORD *)this + 1) + ((uint64_t)a2 << 6));
    memmove(&v21[64 * (uint64_t)a3], v21, (unint64_t)v4 << 6);
    v22 = (char *)(*((_QWORD *)this + 2) + ((uint64_t)a2 << 6));
    memmove(&v22[64 * (uint64_t)a3], v22, (unint64_t)v4 << 6);
  }
}

void C3DTransformLevel::offsetChildIndices(C3DTransformLevel *this, int a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  if (*((_DWORD *)this + 18) <= a2)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DTransformLevel::offsetChildIndices(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *((_DWORD *)this + 18);
  if (v16 > a2)
  {
    v17 = *((_QWORD *)this + 4);
    v18 = a2;
    do
    {
      v19 = *(_DWORD *)(v17 + 4 * v18);
      if (v19 >= a3)
      {
        *(_DWORD *)(v17 + 4 * v18) = v19 + a4;
        v16 = *((_DWORD *)this + 18);
      }
      ++v18;
    }
    while (v18 < v16);
  }
}

unint64_t __C3DTransformTree::_findFirstChildInRange(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;

  v5 = HIDWORD(a2);
  v6 = HIDWORD(a3);
  if ((_DWORD)a2 != (_DWORD)a3)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::_findFirstChildInRange(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if ((int)v5 > (int)v6)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::_findFirstChildInRange(v15, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_11;
  }
  v23 = a2 + 1;
  if ((_DWORD)a2 + 1 == *(_DWORD *)(a1 + 64))
  {
LABEL_11:
    v23 = -1;
    v26 = 0xFFFFFFFFLL;
    return v23 | (unint64_t)(v26 << 32);
  }
  v24 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80 * (int)a2 + 32) + 4 * (a2 >> 32));
  v25 = v6 - HIDWORD(a2) + 1;
  while (1)
  {
    v27 = *v24++;
    v26 = v27;
    if (v27 != -1)
      return v23 | (unint64_t)(v26 << 32);
    if (!--v25)
      goto LABEL_11;
  }
}

unint64_t __C3DTransformTree::_findLastChildInRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t Sibling;
  unint64_t v30;
  int v31;

  v6 = HIDWORD(a2);
  v7 = HIDWORD(a3);
  if ((_DWORD)a2 != (_DWORD)a3)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::_findFirstChildInRange(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if ((int)v6 > (int)v7)
  {
    v16 = scn_default_log();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
      __C3DTransformTree::_findFirstChildInRange(v16, v17, v18, v19, v20, v21, v22, v23);
    goto LABEL_8;
  }
  if ((_DWORD)a2 + 1 == *(_DWORD *)(a1 + 64))
  {
LABEL_8:
    v24 = 0xFFFFFFFFLL;
    LODWORD(v25) = -1;
    return v25 | (unint64_t)(v24 << 32);
  }
  v25 = (a3 + 1);
  v27 = a3 >> 32;
  while (1)
  {
    v24 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 80 * (int)a2 + 32) + 4 * v27);
    if ((_DWORD)v24 != -1)
      break;
    if (v27-- <= a2 >> 32)
    {
      v24 = 0xFFFFFFFFLL;
      LODWORD(v25) = -1;
      return v25 | (unint64_t)(v24 << 32);
    }
  }
  Sibling = __C3DTransformTree::_nextSibling(a1, v25 | (v24 << 32));
  v30 = HIDWORD(Sibling);
  if (HIDWORD(Sibling) != -1)
  {
    do
    {
      v31 = Sibling;
      v24 = v30;
      Sibling = __C3DTransformTree::_nextSibling(a1, Sibling);
      v30 = HIDWORD(Sibling);
    }
    while (HIDWORD(Sibling) != -1);
    LODWORD(v25) = v31;
  }
  return v25 | (unint64_t)(v24 << 32);
}

unint64_t __C3DTransformTree::_nextSibling(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = HIDWORD(a2) + 1;
  if (HIDWORD(a2) + 1 < *(_DWORD *)(v2 + 80 * (int)a2 + 72)
    && (v4 = *(_QWORD *)(v2 + 80 * (int)a2 + 24), *(_DWORD *)(v4 + 4 * v3) == *(_DWORD *)(v4 + 4 * (a2 >> 32))))
  {
    return a2 | ((unint64_t)v3 << 32);
  }
  else
  {
    return -1;
  }
}

unint64_t C3D::RenderPass::programHashCodeStoreKey(C3D::RenderPass *this)
{
  const char *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (const char *)(*(uint64_t (**)(C3D::RenderPass *))(*(_QWORD *)this + 72))(this);
  v3 = strlen(v2);
  v4 = (0xC6A4A7935BD1E995 * v3) ^ *((unsigned __int8 *)this + 117);
  if (v3 >= 8)
  {
    v5 = v3 >> 3;
    v6 = (unsigned __int8 *)&v2[8 * v5];
    v7 = 8 * v5;
    do
    {
      v8 = *(_QWORD *)v2;
      v2 += 8;
      v4 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v8) ^ ((0xC6A4A7935BD1E995 * v8) >> 47))) ^ v4);
      v7 -= 8;
    }
    while (v7);
    v2 = (const char *)v6;
  }
  switch(v3 & 7)
  {
    case 1u:
      goto LABEL_12;
    case 2u:
      goto LABEL_11;
    case 3u:
      goto LABEL_10;
    case 4u:
      goto LABEL_9;
    case 5u:
      goto LABEL_8;
    case 6u:
      goto LABEL_7;
    case 7u:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 6) << 48;
LABEL_7:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 5) << 40;
LABEL_8:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 4) << 32;
LABEL_9:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 3) << 24;
LABEL_10:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 2) << 16;
LABEL_11:
      v4 ^= (unint64_t)*((unsigned __int8 *)v2 + 1) << 8;
LABEL_12:
      v4 = 0xC6A4A7935BD1E995 * (v4 ^ *(unsigned __int8 *)v2);
      break;
    default:
      return (0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) >> 47);
  }
  return (0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v4 ^ (v4 >> 47))) >> 47);
}

double skipSpaceAndLineEnd(std::string *__str, uint64_t a2, int a3)
{
  std::string::size_type size;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  int v9;
  BOOL v10;
  std::string *v12;
  double result;
  std::string v14;
  char v15;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v6 = (char)size;
  v7 = 0;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v8 = __str;
    while (1)
    {
      v9 = v8->__r_.__value_.__s.__data_[v7];
      v10 = v9 == 10 || v9 == 13;
      if (!v10 && (char)v9 > 32)
        break;
      if (size == ++v7)
      {
LABEL_21:
        v7 = size;
        goto LABEL_22;
      }
    }
  }
  if (v7 < size && a3 != 0)
  {
    v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v12 = __str;
    while (v12->__r_.__value_.__s.__data_[v7] == 44)
    {
      if (size == ++v7)
        goto LABEL_21;
    }
  }
LABEL_22:
  std::string::basic_string(&v14, __str, v7, size - v7, (std::allocator<char> *)&v15);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v14.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v14;
  return result;
}

double getLineContent(std::string *a1, std::string *a2, std::string *a3, char a4, int a5)
{
  uint64_t size;
  std::string *v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  char v16;
  char v17;
  std::string::size_type v18;

  skipSpaceAndLineEnd(a1, (uint64_t)a2, 0);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v11 = a1;
  else
    v11 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v12 = (unint64_t)v11 + size;
  v13 = v11;
  if (size >= 1)
  {
    do
    {
      v14 = v13->__r_.__value_.__s.__data_[0];
      if (v14 == 10 || v14 == 13)
        break;
      v16 = (char)v14 < 33 ? a4 : 0;
      v17 = v14 == 44 ? a5 : 0;
      if ((v16 & 1) != 0)
        break;
      if ((v17 & 1) != 0)
        break;
      v13 = (std::string *)((char *)v13 + 1);
    }
    while ((unint64_t)v13 < v12);
  }
  std::string::assign(a3, a1, 0, (char *)v13 - (char *)v11);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = (std::string::size_type)a1;
  else
    v18 = a1->__r_.__value_.__r.__words[0];
  std::string::assign(a2, a1, (std::string::size_type)v13 - v18, v12 - (_QWORD)v13);
  return skipSpaceAndLineEnd(a2, (uint64_t)a2, a5);
}

float getFloat(std::string *a1, std::string *a2, float *a3, char a4, int a5)
{
  std::string::size_type size;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float result;
  void *v16;
  float v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  getLineContent(a1, a2, &v18, a4, a5);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (!size)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      getFloat(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v16 = (void *)v18.__r_.__value_.__r.__words[0];
    v17 = atof(v18.__r_.__value_.__l.__data_);
    *a3 = v17;
    operator delete(v16);
  }
  else
  {
    result = atof((const char *)&v18);
    *a3 = result;
  }
  return result;
}

void sub_1DCF41EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void getInt(std::string *a1, std::string *a2, int *a3, char a4, int a5)
{
  std::string::size_type size;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  getLineContent(a1, a2, &v16, a4, a5);
  size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v16.__r_.__value_.__l.__size_;
  if (!size)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      getFloat(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v15 = (void *)v16.__r_.__value_.__r.__words[0];
    *a3 = atoi(v16.__r_.__value_.__l.__data_);
    operator delete(v15);
  }
  else
  {
    *a3 = atoi((const char *)&v16);
  }
}

void sub_1DCF41FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t C3DIESInfoLoadFromString(_BYTE *__src, size_t __len, _OWORD *a3, int a4)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v16;
  int v17;
  size_t v18;
  std::string *p_p;
  int v20;
  size_t v22;
  std::string *v23;
  int v24;
  size_t v25;
  std::string *v26;
  int v27;
  size_t v28;
  std::string *v29;
  int v30;
  int v31;
  size_t v32;
  std::string *v33;
  int v34;
  size_t v35;
  std::string *v36;
  int v37;
  int v39;
  char *v40;
  int v41;
  char *v42;
  uint64_t v43;
  float v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  int data;
  float *v51;
  float v52;
  int v53;
  int v54;
  float v55;
  uint64_t v56;
  float v57;
  std::string::size_type v58;
  std::string::size_type v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string __p;
  __int128 v64;
  __int128 v65;
  size_t v66[2];
  size_t count[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  std::string v71;
  std::string __str;
  void *__dst;
  char v74;

  if (__len < 5)
    return 0;
  if (a4)
  {
    if (*(_DWORD *)__src != 1314080073 || __src[4] != 65)
      return 0;
  }
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v7 = (std::string *)std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  memset(&__str, 0, sizeof(__str));
  memset(&v71, 0, sizeof(v71));
  getLineContent(v7, &__str, &v71, 0, 0);
  if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    size = v71.__r_.__value_.__l.__size_;
    if (!v71.__r_.__value_.__l.__size_)
      goto LABEL_147;
    v9 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if (v71.__r_.__value_.__l.__size_ == 7)
    {
      if (*(_DWORD *)v71.__r_.__value_.__l.__data_ == 1314080073
        && *(_DWORD *)(v71.__r_.__value_.__r.__words[0] + 3) == 825835854)
      {
LABEL_49:
        v9 = (std::string *)"IESNA91";
        goto LABEL_51;
      }
      size = v71.__r_.__value_.__l.__size_;
      v9 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    else if (v71.__r_.__value_.__l.__size_ == 16
           && *(_QWORD *)v71.__r_.__value_.__l.__data_ == 0x4D4C3A414E534549
           && *(_QWORD *)(v71.__r_.__value_.__r.__words[0] + 8) == 0x353939312D33362DLL)
    {
LABEL_50:
      v9 = (std::string *)"IESNA:LM-63-1995";
      goto LABEL_51;
    }
    if (size == 16
      && v9->__r_.__value_.__r.__words[0] == 0x4D4C3A414E534549
      && v9->__r_.__value_.__l.__size_ == 0x323030322D33362DLL)
    {
LABEL_48:
      v9 = (std::string *)"IESNA:LM-63-2002";
    }
LABEL_51:
    *(_QWORD *)&v69 = v9;
    while (1)
    {
      v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = __str.__r_.__value_.__l.__size_;
      if (!v16)
        break;
      memset(&__p, 0, sizeof(__p));
      getLineContent(&__str, &__str, &__p, 0, 0);
      v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_ >= 9)
          v18 = 9;
        else
          v18 = __p.__r_.__value_.__l.__size_;
      }
      else
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) >= 9u)
          v18 = 9;
        else
          v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
      }
      v20 = memcmp(p_p, "TILT=NONE", v18);
      if (v18 >= 9 && v20 == 0)
        goto LABEL_97;
      if (v17 < 0)
      {
        v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v22 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
      }
      else
      {
        v22 = v17 >= 0xAu ? 10 : v17;
        v23 = &__p;
      }
      v24 = memcmp(v23, "TILT= NONE", v22);
      if (v22 >= 0xA && !v24)
        goto LABEL_97;
      if (v17 < 0)
      {
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v25 = __p.__r_.__value_.__l.__size_ >= 0xA ? 10 : __p.__r_.__value_.__l.__size_;
      }
      else
      {
        v25 = v17 >= 0xAu ? 10 : v17;
        v26 = &__p;
      }
      if (((v27 = memcmp(v26, "TILT =NONE", v25), v25 < 0xA) || v27)
        && (v17 < 0
          ? (std::string *)((v29 = (std::string *)__p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_ >= 0xB)
                          ? (v28 = 11)
                          : (v28 = __p.__r_.__value_.__l.__size_))
          : (v17 >= 0xBu ? (v28 = 11) : (v28 = v17), v29 = &__p),
            (v30 = memcmp(v29, "TILT = NONE", v28), v28 < 0xB) || v30))
      {
        if (v17 < 0)
        {
          v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ >= 5)
            v32 = 5;
          else
            v32 = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          if (v17 >= 5u)
            v32 = 5;
          else
            v32 = v17;
          v33 = &__p;
        }
        v34 = memcmp(v33, "TILT=", v32);
        if (v32 < 5 || v34)
        {
          if (v17 < 0)
          {
            v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ >= 5)
              v35 = 5;
            else
              v35 = __p.__r_.__value_.__l.__size_;
          }
          else
          {
            if (v17 >= 5u)
              v35 = 5;
            else
              v35 = v17;
            v36 = &__p;
          }
          v37 = memcmp(v36, "TILT =", v35);
          v31 = v35 > 4 && v37 == 0;
        }
        else
        {
          v31 = 1;
        }
      }
      else
      {
LABEL_97:
        v31 = 3;
      }
      if (v17 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v31)
        {
LABEL_128:
          if (v31 != 3)
            goto LABEL_147;
          break;
        }
      }
      else if (v31)
      {
        goto LABEL_128;
      }
    }
    getFloat(&__str, &__str, (float *)&v64, 1, 0);
    v6 = 0;
    if (*(float *)&v64 < 0.0 || *(float *)&v64 > 32767.0)
      goto LABEL_148;
    getFloat(&__str, &__str, (float *)&v64 + 1, 1, 0);
    if (*((float *)&v64 + 1) < 0.0)
      goto LABEL_147;
    getFloat(&__str, &__str, (float *)&v64 + 2, 1, 0);
    if (*((float *)&v64 + 2) < 0.0)
      goto LABEL_147;
    getInt(&__str, &__str, (int *)&count[1], 1, 0);
    if (LODWORD(count[1]) >> 15)
      goto LABEL_147;
    getInt(&__str, &__str, (int *)&v66[1], 1, 0);
    if (LODWORD(v66[1]) >> 15)
      goto LABEL_147;
    getInt(&__str, &__str, (int *)&v65 + 2, 1, 0);
    getInt(&__str, &__str, (int *)&v65 + 3, 1, 0);
    getFloat(&__str, &__str, (float *)&v69 + 2, 1, 0);
    getFloat(&__str, &__str, (float *)&v69 + 3, 1, 0);
    getFloat(&__str, &__str, (float *)&v70, 1, 0);
    getFloat(&__str, &__str, (float *)&v70 + 1, 1, 0);
    getFloat(&__str, &__str, (float *)&v70 + 2, 1, 0);
    getFloat(&__str, &__str, (float *)&v70 + 3, 1, 0);
    v39 = count[1];
    v40 = (char *)malloc_type_calloc(SLODWORD(count[1]), 4uLL, 0x100004052888210uLL);
    count[0] = (size_t)v40;
    v41 = v66[1];
    v42 = (char *)malloc_type_calloc(SLODWORD(v66[1]), 4uLL, 0x100004052888210uLL);
    v66[0] = (size_t)v42;
    if (v39 < 1)
    {
      v45 = -8388609;
LABEL_141:
      v46 = v41;
      if (v41 < 1)
      {
        data = -8388609;
LABEL_156:
        LODWORD(v65) = data;
        DWORD2(v68) = v46 * v39;
        v51 = (float *)malloc_type_calloc((int)v46 * v39, 4uLL, 0x100004052888210uLL);
        *(_QWORD *)&v68 = v51;
        v52 = *((float *)&v64 + 2);
        if ((int)v46 < 1)
        {
          v55 = 0.0;
        }
        else
        {
          v53 = 0;
          v54 = 0;
          v55 = 0.0;
          do
          {
            v56 = v39;
            if (v39 >= 1)
            {
              do
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = 0;
                getFloat(&__str, &__str, (float *)&__p, 1, 1);
                v57 = *(float *)&__p.__r_.__value_.__l.__data_;
                v51[v54++] = *(float *)&__p.__r_.__value_.__l.__data_ * v52;
                if (v57 >= v55)
                  v55 = v57;
                --v56;
              }
              while (v56);
            }
            ++v53;
          }
          while (v53 != (_DWORD)v46);
        }
        *((float *)&v64 + 3) = v55 * v52;
        DWORD1(v65) = v45;
        skipSpaceAndLineEnd(&__str, (uint64_t)&__str, 0);
        v58 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v58 = __str.__r_.__value_.__l.__size_;
        if (v58)
        {
          memset(&__p, 0, sizeof(__p));
          getLineContent(&__str, &__str, &__p, 1, 0);
          if (std::operator==[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "END"))
            skipSpaceAndLineEnd(&__str, (uint64_t)&__str, 0);
          v59 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v59 = __str.__r_.__value_.__l.__size_;
          if (v59)
          {
            free(v40);
            free(v42);
            free(v51);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_147;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v60 = v69;
        a3[4] = v68;
        a3[5] = v60;
        a3[6] = v70;
        v61 = v65;
        *a3 = v64;
        a3[1] = v61;
        v62 = *(_OWORD *)count;
        a3[2] = *(_OWORD *)v66;
        a3[3] = v62;
        v6 = 1;
LABEL_148:
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        goto LABEL_150;
      }
      v47 = 0;
      v48 = -3.4028e38;
      while (1)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        getFloat(&__str, &__str, (float *)&__p, 1, 1);
        data = (int)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ < v48)
          break;
        *(_DWORD *)&v42[v47] = __p.__r_.__value_.__l.__data_;
        v47 += 4;
        v48 = *(float *)&data;
        if (4 * v46 == v47)
          goto LABEL_156;
      }
    }
    else
    {
      v43 = 0;
      v44 = -3.4028e38;
      while (1)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        getFloat(&__str, &__str, (float *)&__p, 1, 1);
        v45 = (int)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ < v44)
          break;
        *(_DWORD *)&v40[v43] = __p.__r_.__value_.__l.__data_;
        v43 += 4;
        v44 = *(float *)&v45;
        if (4 * v39 == v43)
          goto LABEL_141;
      }
    }
    free(v40);
    free(v42);
LABEL_147:
    v6 = 0;
    goto LABEL_148;
  }
  if (HIBYTE(v71.__r_.__value_.__r.__words[2]) == 16)
  {
    if (v71.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
      || v71.__r_.__value_.__l.__size_ != 0x353939312D33362DLL)
    {
      if (v71.__r_.__value_.__r.__words[0] != 0x4D4C3A414E534549
        || v71.__r_.__value_.__l.__size_ != 0x323030322D33362DLL)
      {
        goto LABEL_41;
      }
      goto LABEL_48;
    }
    goto LABEL_50;
  }
  if (HIBYTE(v71.__r_.__value_.__r.__words[2]) == 7)
  {
    if (LODWORD(v71.__r_.__value_.__l.__data_) != 1314080073
      || *(_DWORD *)((char *)v71.__r_.__value_.__r.__words + 3) != 825835854)
    {
      goto LABEL_41;
    }
    goto LABEL_49;
  }
  if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
  {
LABEL_41:
    v9 = &v71;
    goto LABEL_51;
  }
  v6 = 0;
LABEL_150:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v74 < 0)
    operator delete(__dst);
  return v6;
}

void sub_1DCF428E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a15 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v41 - 121) < 0)
    operator delete(*(void **)(v41 - 144));
  _Unwind_Resume(exception_object);
}

void *C3DIESInfoLoad(void *a1, _OWORD *a2)
{
  void *result;

  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  result = (void *)objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", a1);
  if (result)
    return (void *)C3DIESInfoLoadFromString((_BYTE *)objc_msgSend(result, "bytes"), objc_msgSend(result, "length"), a2, objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "path"), "pathExtension"), "lowercaseString"), "isEqualToString:", CFSTR("ies")) ^ 1);
  return result;
}

void computeFilterPos(float a1, float *a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint8_t v20[4];
  uint64_t v21;
  uint8_t v22[4];
  _DWORD v23[7];

  *(_QWORD *)&v23[5] = *MEMORY[0x1E0C80C00];
  if (a3 <= 0)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      computeFilterPos(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (*a2 <= a1)
  {
    v14 = a3 - 1;
    if (a2[v14] >= a1)
    {
      v15 = 0;
      if (a3 != 1)
      {
        do
        {
          v16 = (v15 + v14 + 1) >> 1;
          if (a2[v16] <= a1)
          {
            if (v15 == v16)
            {
              v19 = scn_default_log();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
                computeFilterPos(v22, v23, v19);
            }
            else
            {
              v15 = (v15 + v14 + 1) >> 1;
            }
          }
          else
          {
            v17 = v16 - 1;
            if (v14 == v17)
            {
              v18 = scn_default_log();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
                computeFilterPos(v20, &v21, v18);
            }
            else
            {
              v14 = v17;
            }
          }
        }
        while (v15 < v14);
      }
    }
  }
}

float getCandelaValue(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_DWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 56);
  v6 = v4 - 1;
  if (v4 - 1 >= a2)
    v6 = a2;
  v7 = v6 & ~(v6 >> 31);
  v8 = v5 - 1;
  if (v5 - 1 >= a3)
    v8 = a3;
  v9 = v8 & ~(v8 >> 31);
  if (v7 >= v4)
  {
    v10 = scn_default_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      getCandelaValue(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  if (v9 >= v5)
  {
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      getCandelaValue(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  return *(float *)(*(_QWORD *)(a1 + 64) + 4 * (v9 + v7 * v5));
}

float interpolateBicubic(uint64_t a1, float a2, float a3)
{
  int v4;
  int v5;
  float v6;
  float v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v22;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float32x4_t v40;
  float v41;
  float v42;
  float32x4_t v43;
  float CandelaValue;
  float32x4_t v45;

  v4 = vcvtms_s32_f32(a2);
  v5 = vcvtms_s32_f32(a3);
  v6 = a2 - (float)(int)floorf(a2);
  v36 = a3 - (float)(int)floorf(a3);
  CandelaValue = getCandelaValue(a1, v4 - 1, v5 - 1);
  v41 = getCandelaValue(a1, v4, v5 - 1);
  v37 = getCandelaValue(a1, v4 + 1, v5 - 1);
  v7 = getCandelaValue(a1, v4 + 2, v5 - 1);
  v8.i64[0] = __PAIR64__(LODWORD(v41), LODWORD(CandelaValue));
  v8.i64[1] = __PAIR64__(LODWORD(v7), LODWORD(v37));
  v45 = v8;
  v42 = getCandelaValue(a1, v4 - 1, v5);
  v38 = getCandelaValue(a1, v4, v5);
  v33 = getCandelaValue(a1, v4 + 1, v5);
  v9 = getCandelaValue(a1, v4 + 2, v5);
  v10.i64[0] = __PAIR64__(LODWORD(v38), LODWORD(v42));
  v10.i64[1] = __PAIR64__(LODWORD(v9), LODWORD(v33));
  v43 = v10;
  v39 = getCandelaValue(a1, v4 - 1, v5 + 1);
  v34 = getCandelaValue(a1, v4, v5 + 1);
  v31 = getCandelaValue(a1, v4 + 1, v5 + 1);
  v11 = getCandelaValue(a1, v4 + 2, v5 + 1);
  v12.i64[0] = __PAIR64__(LODWORD(v34), LODWORD(v39));
  v12.i64[1] = __PAIR64__(LODWORD(v11), LODWORD(v31));
  v40 = v12;
  v5 += 2;
  v35 = getCandelaValue(a1, v4 - 1, v5);
  v32 = getCandelaValue(a1, v4, v5);
  v30 = getCandelaValue(a1, v4 + 1, v5);
  v13 = getCandelaValue(a1, v4 + 2, v5);
  v14.i64[0] = __PAIR64__(LODWORD(v32), LODWORD(v35));
  v14.i64[1] = __PAIR64__(LODWORD(v13), LODWORD(v30));
  _Q5 = v14;
  __asm { FMOV            V0.4S, #3.0 }
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V2.4S, #-3.0 }
  v22 = vmlaq_f32(vmlaq_f32(vmlsq_f32(vmulq_f32(vmulq_f32(v43, _Q0), v14), v14, v45), v14, vmulq_f32(v40, _Q2)), v14, _Q5);
  __asm { FMOV            V2.4S, #5.0 }
  _Q6 = vmlaq_n_f32(v43, vmlaq_n_f32(vmulq_f32(vsubq_f32(v40, v45), v14), vmlaq_n_f32(vaddq_f32(v40, vaddq_f32(v40, vmlsq_f32(v45, v14, vmlaq_f32(_Q5, _Q2, v43)))), v22, v36), v36), v36);
  _S4 = 3.0;
  __asm { FMLA            S3, S4, V6.S[1] }
  _S4 = -3.0;
  __asm { FMLA            S3, S4, V6.S[2] }
  _Q5.i32[0] = 5.0;
  __asm { FMLA            S2, S5, V6.S[1] }
  return _Q6.f32[1]
       + (float)((float)((float)((float)(_Q6.f32[2] - _Q6.f32[0]) * 0.5)
                       + (float)((float)((float)(_Q6.f32[2]
                                               + (float)(_Q6.f32[2] + (float)(_Q6.f32[0] - (float)(_Q2.f32[0] * 0.5))))
                                       + (float)((float)((float)(_Q6.f32[3] + _S3) * 0.5) * v6))
                               * v6))
               * v6);
}

uint64_t C3DIESInfoGenerateTexture2D(_BOOL8 a1, int32x4_t *a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6)
{
  int32x4_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  float v56;
  int v57;
  uint64_t v58;
  _BOOL4 v59;
  int32x4_t *v65;
  float v66;
  uint64_t v67;
  float *v68;
  float v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  __int16 v75;
  __int16 v76;
  int v77;
  int16x4_t *v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t *v83;
  char v84;
  _BYTE v86[4];
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int32x4_t v91;
  int16x4_t *v92;
  uint64_t v93;

  v10 = a2;
  v11 = a1;
  v93 = *MEMORY[0x1E0C80C00];
  if (!a2 && (v12 = scn_default_log(), a1 = os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)))
  {
    C3DIESInfoGenerateTexture2D_cold_4(v12, v13, v14, v15, v16, v17, v18, v19);
    if ((_DWORD)a3)
    {
LABEL_4:
      if (a4)
        goto LABEL_7;
    }
  }
  else if ((_DWORD)a3)
  {
    goto LABEL_4;
  }
  v20 = scn_default_log();
  a1 = os_log_type_enabled(v20, OS_LOG_TYPE_FAULT);
  if (a1)
    C3DIESInfoGenerateTexture2D_cold_3(v20, v21, v22, v23, v24, v25, v26, v27);
LABEL_7:
  if (a5 != 1 && a5 != 4)
  {
    v28 = scn_default_log();
    a1 = os_log_type_enabled(v28, OS_LOG_TYPE_FAULT);
    if (a1)
      C3DIESInfoGenerateTexture2D_cold_2(v28, v29, v30, v31, v32, v33, v34, v35);
  }
  if (a6 > 4 || ((1 << a6) & 0x16) == 0)
  {
    v36 = scn_default_log();
    a1 = os_log_type_enabled(v36, OS_LOG_TYPE_FAULT);
    if (a1)
      C3DIESInfoGenerateTexture2D_cold_1(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  v44 = *(float *)(v11 + 12);
  v46 = MEMORY[0x1E0C80A78](a1);
  v48 = (float *)&v86[-v47];
  if ((_DWORD)a3)
  {
    v49 = 0;
    v50 = *(float *)&v46 / 180.0;
    do
    {
      v51 = acosf((float)((float)((float)v49 * -2.0) * (float)(1.0 / (float)a3)) + 1.0)
          / 3.14159265
          * 180.0;
      computeFilterPos(v50 * v51, *(float **)(v11 + 48), *(_DWORD *)(v11 + 56));
      v48[v49++] = v52;
    }
    while (a3 != v49);
  }
  v89 = a3;
  MEMORY[0x1E0C80A78](v45);
  v54 = &v86[-v53];
  if (a4)
  {
    v55 = 0;
    v56 = 1.0 / v44;
    do
    {
      computeFilterPos((float)((float)(1.0 / (float)a4) * (float)v55) * 180.0, *(float **)(v11 + 32), *(_DWORD *)(v11 + 40));
      *(_DWORD *)&v54[4 * v55++] = v57;
    }
    while (a4 != v55);
    v58 = 0;
    v59 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    v91 = _Q0;
    v65 = v10;
    v92 = (int16x4_t *)v10;
    v88 = a3;
    do
    {
      v90 = v58;
      if ((_DWORD)a3)
      {
        v87 = v59;
        v66 = *(float *)&v54[4 * v58];
        v67 = v89;
        v68 = v48;
        do
        {
          v69 = v56 * interpolateBicubic(v11, v66, *v68);
          switch(a6)
          {
            case 1u:
              v70 = (int)(float)((float)(v69 * 255.0) + 0.5);
              if (a5 == 4)
              {
                v10->i8[0] = v70;
                v10->i8[1] = v70;
                v10->i8[2] = v70;
                v10->i8[3] = -1;
                v10 = (int32x4_t *)((char *)v10 + 4);
              }
              else
              {
                if (a5 != 1)
                  goto LABEL_49;
                v10->i8[0] = v70;
                v10 = (int32x4_t *)((char *)v10 + 1);
              }
              break;
            case 2u:
              v71 = HIWORD(LODWORD(v69)) & 0x8000;
              v72 = (LODWORD(v69) >> 23);
              v73 = v72 - 112;
              v74 = v72 - 113;
              v75 = v71 | 0x7BFF;
              if (v72 == 255)
                v75 = v71 | ((LODWORD(v69) & 0x7FFFFF) != 0) | 0x7C00;
              if (v72 >= 0x71)
                v76 = v75;
              else
                v76 = HIWORD(v69) & 0x8000;
              v77 = HIWORD(LODWORD(v69)) & 0x8000 | (LODWORD(v69) >> 13) & 0x3FF | (v73 << 10);
              if (v74 > 0x1D)
                LOWORD(v77) = v76;
              if (a5 == 4)
              {
                v81 = (int16x4_t)-1;
                v81.i16[0] = v77;
                v82 = vzip1_s16(v81, v81);
                v82.i16[2] = v77;
                v83 = v92;
                *v92 = v82;
                v92 = v83 + 1;
              }
              else
              {
                if (a5 != 1)
                {
LABEL_49:
                  v84 = v87;
                  return v84 & 1;
                }
                v78 = v92;
                v92->i16[0] = v77;
                v92 = (int16x4_t *)((char *)v78 + 2);
              }
              break;
            case 4u:
              if (a5 == 4)
              {
                v79 = v91;
                *(float *)v79.i32 = v69;
                v80 = vzip1q_s32(v79, v79);
                *(float *)&v80.i32[2] = v69;
                *v65++ = v80;
              }
              else
              {
                if (a5 != 1)
                  goto LABEL_49;
                *(float *)v65->i32 = v69;
                v65 = (int32x4_t *)((char *)v65 + 4);
              }
              break;
            default:
              goto LABEL_49;
          }
          ++v68;
          --v67;
        }
        while (v67);
      }
      v58 = v90 + 1;
      v59 = v90 + 1 >= (unint64_t)a4;
      LODWORD(a3) = v88;
    }
    while (v90 + 1 != a4);
  }
  v84 = 1;
  return v84 & 1;
}

void C3DIESInfoDestroy(void **a1)
{
  free(a1[4]);
  a1[4] = 0;
  free(a1[6]);
  a1[6] = 0;
  free(a1[8]);
  a1[8] = 0;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void _C3DAnimationEventsCFFinalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(const void **)(*(_QWORD *)(a1 + 16) + v4);
      if (v5)
      {
        _Block_release(v5);
        v2 = *(_QWORD *)(a1 + 32);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < v2);
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
    free(v6);
}

CFStringRef _C3DAnimationEventsCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAnimationEvents>"));
}

CFStringRef _C3DAnimationEventsCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAnimationEvents>"));
}

uint64_t C3DAnimationEventsCreateWithEventCount(size_t a1)
{
  uint64_t Instance;

  if (C3DAnimationEventsGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimationEventsGetTypeID_onceToken, &__block_literal_global_133);
  Instance = C3DTypeCreateInstance_(C3DAnimationEventsGetTypeID_typeID, 0x18uLL);
  *(_QWORD *)(Instance + 16) = malloc_type_calloc(0x10uLL, a1, 0x79FFEB7DuLL);
  *(_QWORD *)(Instance + 24) = a1;
  return Instance;
}

void *C3DAnimationEventsAddEvent(_QWORD *a1, void *aBlock, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *result;
  uint64_t v23;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (a1[4] >= a1[3])
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  *(double *)(a1[2] + 16 * a1[4]) = a3;
  result = _Block_copy(aBlock);
  v23 = a1[4];
  *(_QWORD *)(a1[2] + 16 * v23 + 8) = result;
  a1[4] = v23 + 1;
  return result;
}

void C3DAnimationEventsTriggerEventsWithTimeChanges(_QWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, double a6, double a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  int v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  double v30;
  int v31;

  if (!a2)
  {
    v14 = scn_default_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  if (a3 == a4)
  {
    if (!a4)
    {
      if (a7 >= a6)
      {
        v28 = a1;
        v29 = a2;
        v30 = a6;
        goto LABEL_17;
      }
      v25 = 1.0;
      v23 = a1;
      v24 = a2;
      v22 = a6;
      v26 = 0;
LABEL_13:
      _C3DAnimationEventsTriggerEventsWithTimeChanges(v23, v24, v26, a5, v22, v25);
      v30 = 0.0;
      v28 = a1;
      v29 = a2;
LABEL_17:
      v27 = a7;
      goto LABEL_18;
    }
    if (a6 < a7)
    {
      _C3DAnimationEventsTriggerEventsWithTimeChanges(a1, a2, 0, a5, 0.0, a6);
      v27 = 1.0;
      v28 = a1;
      v29 = a2;
      v30 = a7;
LABEL_18:
      v31 = 0;
      goto LABEL_19;
    }
    v28 = a1;
    v29 = a2;
    v30 = a7;
    v27 = a6;
  }
  else
  {
    if ((a3 & 1) != 0)
    {
      v22 = 0.0;
      v23 = a1;
      v24 = a2;
      v25 = a6;
      v26 = 1;
      goto LABEL_13;
    }
    _C3DAnimationEventsTriggerEventsWithTimeChanges(a1, a2, 0, a5, a6, 1.0);
    v27 = 1.0;
    v28 = a1;
    v29 = a2;
    v30 = a7;
  }
  v31 = 1;
LABEL_19:
  _C3DAnimationEventsTriggerEventsWithTimeChanges(v28, v29, v31, a5, v30, v27);
}

void _C3DAnimationEventsTriggerEventsWithTimeChanges(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t EventIndexForTime;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t v34[4];
  _DWORD v35[7];

  *(_QWORD *)&v35[5] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v12 = scn_default_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  if (a5 > a6)
  {
    v20 = scn_default_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
      _C3DAnimationEventsTriggerEventsWithTimeChanges_cold_2(v20, v21, v22, v23, v24, v25, v26, v27);
  }
  if (a5 != a6)
  {
    EventIndexForTime = _C3DAnimationEventGetEventIndexForTime(a2, a3, a5);
    v29 = _C3DAnimationEventGetEventIndexForTime(a2, a3, a6);
    v30 = EventIndexForTime & ~(EventIndexForTime >> 63);
    v31 = v29 >= *(_QWORD *)(a2 + 32) ? *(_QWORD *)(a2 + 32) : v29;
    if (v30 < v31)
    {
      v32 = (16 * v30) | 8;
      do
      {
        if (*(_QWORD *)(a2 + 32) <= v30)
        {
          v33 = scn_default_log();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
            _C3DAnimationEventsTriggerEventsWithTimeChanges_cold_1(v34, v35, v33);
        }
        C3DAnimationManagerPushEvent(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v32), a4, a3);
        ++v30;
        v32 += 16;
      }
      while (v31 != v30);
    }
  }
}

uint64_t C3DAnimationEventsGetCount(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 32);
}

uint64_t C3DAnimationEventsGetEventBlockAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * a2 + 8);
}

double C3DAnimationEventsGetEventTimeAtIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return *(double *)(*(_QWORD *)(a1 + 16) + 16 * a2);
}

uint64_t _C3DAnimationEventGetEventIndexForTime(uint64_t a1, int a2, double a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  double v18;
  _BOOL4 v19;

  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DAnimationEventsAddEvent_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 < 2)
  {
    v16 = 0;
    result = 1;
  }
  else
  {
    v16 = 0;
    do
    {
      if (*(double *)(v15 + 16 * (uint64_t)((double)v16 + (double)(v14 - v16) * 0.5)) > a3)
        v14 = (uint64_t)((double)v16 + (double)(v14 - v16) * 0.5);
      else
        v16 = (uint64_t)((double)v16 + (double)(v14 - v16) * 0.5);
      result = v16 + 1;
    }
    while (v14 > v16 + 1);
  }
  v18 = *(double *)(v15 + 16 * v16);
  if (v18 >= a3)
  {
    v19 = a3 != 1.0;
    if (v18 != a3)
      v19 = 1;
    if (v19 | a2)
      return v16;
  }
  return result;
}

uint64_t C3DParticleEmitStandard(uint64_t a1, float *a2, double a3, float a4)
{
  uint64_t System;
  float BirthRate;
  float BirthRateVariation;
  unsigned int v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  float *v21;
  unint64_t v22;
  unint64_t i;
  void (*v24)(int *, uint64_t, _QWORD);
  uint64_t v25;
  CFArrayRef theArray;
  _OWORD v27[16];
  _BYTE v28[256];
  int __dst[260];
  int v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  float *v37;
  float *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  System = C3DParticleSystemInstanceGetSystem(a1);
  BirthRate = C3DParticleSystemGetBirthRate(System);
  BirthRateVariation = C3DParticleSystemGetBirthRateVariation(System);
  if (BirthRateVariation != 0.0)
  {
    v11 = 214013 * *(_DWORD *)(a1 + 1116) + 2531011;
    *(_DWORD *)(a1 + 1116) = v11;
    BirthRate = BirthRate + (float)((float)((float)((float)HIWORD(v11) * 0.000015259) + -0.5) * BirthRateVariation);
  }
  if (*a2 > 0.0)
    BirthRate = BirthRate * (float)(a4 / *a2);
  v12 = BirthRate + a2[3];
  if (v12 < 0.0)
    v12 = 0.0;
  v13 = v12;
  a2[3] = v12 - (float)v12;
  v14 = *(unsigned int *)(a1 + 1104);
  result = C3DParticleSystemInstanceCheckParticlesCount(a1, (int)v14 + (int)v13);
  if ((_DWORD)result)
    v16 = (_DWORD)v13 == 0;
  else
    v16 = 1;
  if (!v16)
  {
    memcpy(__dst, (const void *)(a1 + 80), 0x404uLL);
    v17 = *(_QWORD *)(a1 + 48);
    v33 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 64);
    v32 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)v30 = v17;
    v34 = *(_OWORD *)(a1 + 1152);
    v35 = *(_OWORD *)(a1 + 1168);
    v31 = v18;
    v19 = *(_DWORD *)(a1 + 1116);
    v36 = v19;
    *(float *)&__dst[257] = a4;
    *(float *)&v20 = a3 - *(double *)(a1 + 72);
    __dst[259] = v20;
    if ((C3DParticleSystemGetIsLocal(v17) & 1) != 0)
    {
      v21 = 0;
    }
    else
    {
      v21 = a2 + 8;
      v38 = a2 + 24;
    }
    v37 = v21;
    v22 = *(unsigned int *)(a1 + 1056);
    if ((_DWORD)v22)
    {
      for (i = 0; i < v22; ++i)
      {
        v24 = *(void (**)(int *, uint64_t, _QWORD))(a1 + 800 + 8 * i);
        if (v24)
        {
          v24(__dst, v14, (v14 + v13));
          v22 = *(unsigned int *)(a1 + 1056);
        }
      }
      v19 = v36;
      v17 = *(_QWORD *)v30;
    }
    *(_DWORD *)(a1 + 1116) = v19;
    theArray = 0;
    result = C3DParticleSystemGetEventBlock(v17, 0, &theArray);
    if (result)
    {
      v25 = result;
      memset(v28, 0, sizeof(v28));
      memset(v27, 0, sizeof(v27));
      C3DParticleSystemInstanceFillUserData(*(unint64_t *)v30, (uint64_t)__dst, theArray, (uint64_t)v28, (uint64_t)v27, v14);
      result = (*(uint64_t (**)(uint64_t, _BYTE *, _OWORD *, _QWORD, uint64_t))(v25 + 16))(v25, v28, v27, 0, v13);
    }
    *(_DWORD *)(a1 + 1104) = v14 + v13;
  }
  return result;
}

void C3DParticleEmitTrail(uint64_t a1, float32x4_t *a2, double a3, float a4)
{
  uint64_t System;
  float32x4_t v9;
  float32x4_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float ParticleLifeSpan;
  float ParticleLifeSpanVariation;
  unsigned int v20;
  uint64_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;

  System = C3DParticleSystemInstanceGetSystem(a1);
  v34 = a2[4];
  v35 = a2[5];
  C3DParticleSystemGetIsLocal(System);
  v9 = vsubq_f32(a2[9], v35);
  v10 = vmulq_f32(v9, v9);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0] >= 0.0001)
  {
    v11 = *(_DWORD *)(a1 + 1104);
    v12 = (v11 + 1);
    if (C3DParticleSystemInstanceCheckParticlesCount(a1, v11 + 1))
    {
      v14 = *(_QWORD *)(a1 + 336);
      v13 = *(_QWORD *)(a1 + 344);
      v16 = *(_QWORD *)(a1 + 352);
      v15 = *(_QWORD *)(a1 + 360);
      v17 = *(_QWORD *)(a1 + 368);
      ParticleLifeSpan = C3DParticleSystemGetParticleLifeSpan(System);
      ParticleLifeSpanVariation = C3DParticleSystemGetParticleLifeSpanVariation(System);
      if (ParticleLifeSpanVariation != 0.0)
      {
        v20 = 214013 * *(_DWORD *)(a1 + 1116) + 2531011;
        *(_DWORD *)(a1 + 1116) = v20;
        ParticleLifeSpan = ParticleLifeSpan
                         + (float)((float)((float)((float)HIWORD(v20) * 0.000015259) + -0.5) * ParticleLifeSpanVariation);
      }
      v21 = *(unsigned int *)(a1 + 1104);
      v22 = v35;
      if (v21 < v12)
      {
        v23 = (int32x4_t)vmulq_f32(v34, v34);
        v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
        v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
        v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
        v26 = vmulq_n_f32(v34, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
        v22.i32[3] = 0;
        v26.i32[3] = 0;
        v27 = a3 - *(double *)(a1 + 72);
        v28 = (float32x4_t *)(v14 + 16 * v21);
        v29 = (float32x4_t *)(v13 + 16 * v21);
        v30 = (float *)(v15 + 4 * v21);
        v31 = (float *)(v16 + 4 * v21);
        v32 = (float *)(v17 + 4 * v21);
        v33 = v12 - v21;
        do
        {
          *v28 = v22;
          *v29 = v26;
          if (v15)
            *v30 = 1.0 / ParticleLifeSpan;
          *v31 = ParticleLifeSpan;
          if (v17)
          {
            *v32 = v27;
            v27 = v27 + a4;
          }
          ++v28;
          ++v29;
          ++v30;
          ++v31;
          ++v32;
          --v33;
        }
        while (v33);
      }
      *(_DWORD *)(a1 + 1104) = v12;
    }
  }
}

void _C3DRendererElementStoreCFFinalize(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  _QWORD v6[6];

  v2 = a1[2];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __C3DRendererElementStoreApplyForAllRendererElements_block_invoke;
  v6[3] = &__block_descriptor_tmp_11_2;
  v6[4] = __FinalizeRendererElement;
  v6[5] = a1;
  C3DSpanAllocatorEnumerate(v2, (uint64_t)v6);
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
}

CFStringRef _C3DRendererElementStoreCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRendererElementStore %p>"), a1);
}

CFStringRef _C3DRendererElementStoreCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DRendererElementStore %p>"), a1);
}

uint64_t __C3DRendererElementStoreDeallocateSpan(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t URL;
  uint64_t ElementInSpanAtIndex;
  uint64_t v17;
  _QWORD v19[4];
  int v20;
  int v21;

  v6 = HIDWORD(a2);
  if (!HIDWORD(a2))
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      __C3DRendererElementStoreDeallocateSpan_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  URL = C3DSceneSourceGetURL(a3);
  if (URL)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ____C3DRendererElementStoreDeallocateSpan_block_invoke;
    v19[3] = &__block_descriptor_tmp_5_4;
    v20 = a2;
    v21 = v6;
    C3DSceneEnumerateEngineContexts(URL, (uint64_t)v19);
  }
  ElementInSpanAtIndex = C3DSpanAllocatorGetElementInSpanAtIndex(*(_QWORD *)(a1 + 16), a2, 0);
  if ((_DWORD)v6)
  {
    v17 = ElementInSpanAtIndex;
    do
    {
      __FinalizeRendererElement(v17, a1);
      v17 += 80;
      --v6;
    }
    while (v6);
  }
  return C3DSpanAllocatorDeallocateSpan(*(_QWORD *)(a1 + 16), a2);
}

void __AllocateSpansAndInitializeRendererElementsForNodeGeometryLOD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t Geometry;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *LOD;
  CFIndex Count;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex i;
  const void *ValueAtIndex;
  __C3DGeometry *v29;
  __C3DGeometry *v30;
  uint64_t v31;
  unint64_t Span;

  Geometry = C3DNodeGetGeometry(a3);
  if (!Geometry)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3DGeometryGetName_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  LOD = (const __CFArray *)C3DGeometryGetLOD(Geometry);
  Count = CFArrayGetCount(LOD);
  if (Count != **(unsigned __int16 **)(a3 + 232))
  {
    v18 = scn_default_log();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      __AllocateSpansAndInitializeRendererElementsForNodeGeometryLOD_cold_1(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  if (Count >= 1)
  {
    v26 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(LOD, i);
      v29 = (__C3DGeometry *)C3DLODGetEntity((uint64_t)ValueAtIndex);
      if (v29)
      {
        v30 = v29;
        v31 = __SpanCountForGeometryAttribute(a1, a3, v29);
        Span = C3DSpanAllocatorAllocateSpan(*(_QWORD *)(a2 + 16), v31);
        *(_QWORD *)(*(_QWORD *)(a3 + 232) + v26 + 12) = Span;
        v3 = v3 & 0xFFFFFFFF00000000 | Span;
        __InitializeRendererElementsForGeometryAttribute(a2, v3, 0, v30, a3, 0);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a3 + 232) + v26 + 12) = 0xFFFFFFFFLL;
      }
      v26 += 12;
    }
  }
}

void __FinalizeRendererElement(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 72) & 0x20) != 0)
  {
    C3DIndexStoreRemoveIndexForKey(*(_QWORD *)(a2 + 24), (void *)*(int *)(a1 + 64));
    C3DIndexStoreRemoveIndexForKey(*(_QWORD *)(a2 + 32), *(void **)(a1 + 32));
  }
  *(_QWORD *)(a1 + 8) = 0;
  _C3DRendererElementFinalize(a1);
}

void C3DRendererElementStoreDeallocateSpanForNode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t RendererElementStore;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Geometry;
  const __CFArray *LOD;
  CFIndex Count;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DEngineContextRenderScene_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  RendererElementStore = C3DEnginePipelineGetRendererElementStore(a1);
  if (!RendererElementStore)
  {
    v13 = scn_default_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
      C3DRendererElementStoreDeallocateSpanForNode_cold_2(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  if (*(_DWORD *)(a2 + 228))
  {
    __C3DRendererElementStoreDeallocateSpan(RendererElementStore, *(_QWORD *)(a2 + 224), a1);
    *(_QWORD *)(a2 + 224) = 0xFFFFFFFFLL;
  }
  if (C3DNodeHasGeometryLOD(a2))
  {
    Geometry = C3DNodeGetGeometry(a2);
    if (Geometry)
    {
      LOD = (const __CFArray *)C3DGeometryGetLOD(Geometry);
      Count = CFArrayGetCount(LOD);
      if (Count != **(unsigned __int16 **)(a2 + 232))
      {
        v24 = scn_default_log();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
          C3DRendererElementStoreDeallocateSpanForNode_cold_1(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      if (Count >= 1)
      {
        v32 = 0;
        v33 = *(_QWORD *)(a2 + 232);
        do
        {
          if (*(_DWORD *)(v33 + v32 + 16))
          {
            __C3DRendererElementStoreDeallocateSpan(RendererElementStore, *(_QWORD *)(v33 + v32 + 12), a1);
            v33 = *(_QWORD *)(a2 + 232);
          }
          *(_QWORD *)(v33 + v32 + 12) = 0xFFFFFFFFLL;
          v32 += 12;
          --Count;
        }
        while (Count);
      }
    }
  }
}

uint64_t C3DRendererElementStoreApplyForAllRendererElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v3 = *(_QWORD *)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __C3DRendererElementStoreApplyForAllRendererElements_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_2;
  v5[4] = a2;
  v5[5] = a3;
  return C3DSpanAllocatorEnumerate(v3, (uint64_t)v5);
}

CFStringRef _C3DIndexStoreCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DIndexStore>"));
}

CFStringRef _C3DIndexStoreCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DIndexStore>"));
}

uint64_t _sortKeys(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;

  if (*a1 < *a2)
    v2 = -1;
  else
    v2 = 1;
  if (*a1 == *a2)
    return 0;
  else
    return v2;
}

CFStringRef _C3DAllocatorCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAllocator>"));
}

CFStringRef _C3DAllocatorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAllocator>"));
}

void OUTLINED_FUNCTION_6_5(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

C3D::RenderPass *C3D::MainPassCustomPostProcessPass::MainPassCustomPostProcessPass(C3D::MainPassCustomPostProcessPass *this, C3D::RenderGraph *a2, C3D::Pass *a3)
{
  C3D::RenderPass *result;

  result = C3D::RenderPass::RenderPass(this, a2, a3);
  *(_QWORD *)result = off_1EA594D40;
  return result;
}

const char *C3D::MainPassCustomPostProcessPass::name(C3D::MainPassCustomPostProcessPass *this)
{
  return "MainPassCustomPostProcessPass";
}

const char *C3D::MainPassCustomPostProcessPass::programHashCodeStoreName(C3D::MainPassCustomPostProcessPass *this)
{
  return "MainPassCustomPostProcessPass";
}

double C3D::MainPassCustomPostProcessPass::setup(C3D::MainPassCustomPostProcessPass *this)
{
  uint64_t RenderCallbacks;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  __int128 v9;
  int v10;
  unsigned int v11;

  RenderCallbacks = C3DEngineContextGetRenderCallbacks(*((_QWORD *)this + 2));
  v11 = 0;
  *((_BYTE *)this + 240) = (*(uint64_t (**)(_QWORD, unsigned int *))(RenderCallbacks + 48))(*((_QWORD *)this + 2), &v11);
  *((_QWORD *)this + 31) = v11;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_BYTE *)this + 272) = (*(uint64_t (**)(_QWORD, char *))(RenderCallbacks + 56))(*((_QWORD *)this + 2), (char *)this + 256);
  if (*((_BYTE *)this + 240))
    v3 = 2;
  else
    v3 = 1;
  C3D::Pass::setInputCount(this, v3);
  v4 = C3D::PassDescriptor::inputAtIndex((C3D::MainPassCustomPostProcessPass *)((char *)this + 32), 0);
  *(_QWORD *)(v4 + 8) = "COLOR";
  *(_BYTE *)(v4 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v9);
  *(_OWORD *)(v4 + 16) = v9;
  *(_DWORD *)(v4 + 32) = v10;
  *(_BYTE *)(v4 + 26) = 1;
  *(_WORD *)(v4 + 66) = *(_WORD *)(v4 + 66) & 0xFFFC | 1;
  if (*((_BYTE *)this + 240))
  {
    v5 = C3D::PassDescriptor::inputAtIndex((C3D::MainPassCustomPostProcessPass *)((char *)this + 32), 1u);
    *(_QWORD *)(v5 + 8) = "COLOR1";
    *(_BYTE *)(v5 + 65) = 1;
    C3D::Pass::parentColorDesc(this, (uint64_t)&v9);
    *(_OWORD *)(v5 + 16) = v9;
    *(_DWORD *)(v5 + 32) = v10;
    *(_BYTE *)(v5 + 26) = 1;
    *(_WORD *)(v5 + 66) = *(_WORD *)(v5 + 66) & 0xFFFC | 1;
    v6 = *((_QWORD *)this + 31);
    if (v6)
      *(_WORD *)(v5 + 28) = v6;
  }
  C3D::Pass::setOutputCount(this, 1u);
  v7 = C3D::PassDescriptor::outputAtIndex((C3D::MainPassCustomPostProcessPass *)((char *)this + 32), 0);
  *(_QWORD *)(v7 + 8) = "COLOR";
  *(_BYTE *)(v7 + 65) = 0;
  C3D::Pass::parentColorDesc(this, (uint64_t)&v9);
  result = *(double *)&v9;
  *(_OWORD *)(v7 + 16) = v9;
  *(_DWORD *)(v7 + 32) = v10;
  *(_BYTE *)(v7 + 26) = 6;
  *(_WORD *)(v7 + 66) &= 0xFFFCu;
  *((_BYTE *)this + 119) = 1;
  return result;
}

void C3D::MainPassCustomPostProcessPass::compile(C3D::MainPassCustomPostProcessPass *this)
{
  uint64_t v2;
  C3D::RenderGraphResourceManager *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;

  v2 = (*(uint64_t (**)(C3D::MainPassCustomPostProcessPass *))(*(_QWORD *)this + 64))(this);
  v3 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v4 = C3D::RenderGraphResourceManager::get(v3, v2);
  *((_QWORD *)this + 35) = v4;
  if (!v4)
  {
    v5 = (_QWORD *)operator new();
    v5[1] = 0;
    v5[2] = 0;
    *v5 = &off_1EA594DB0;
    *((_QWORD *)this + 35) = v5;
    C3D::RenderGraphResourceManager::set((uint64_t)v3, v2, (uint64_t)v5);
    v6 = -[SCNMTLRenderContextSceneRendererMainPassCustomPostProcessHelper initWithEngineContext:]([SCNMTLRenderContextSceneRendererMainPassCustomPostProcessHelper alloc], *(_QWORD *)(*((_QWORD *)this + 3) + 8));
    v7 = *((_QWORD *)this + 35);
    v8 = *(void **)(v7 + 16);
    *(_QWORD *)(v7 + 16) = v6;
    if (v8)

  }
}

uint64_t C3D::MainPassCustomPostProcessPass::execute(uint64_t a1)
{
  void *v2;
  uint64_t RenderCallbacks;

  v2 = *(void **)(*(_QWORD *)(a1 + 280) + 16);
  objc_msgSend(v2, "setCurrrentPass:", a1);
  RenderCallbacks = C3DEngineContextGetRenderCallbacks(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, void *))(RenderCallbacks + 64))(*(_QWORD *)(a1 + 16), v2);
  return objc_msgSend(v2, "setCurrrentPass:", 0);
}

void C3D::MainPassCustomPostProcessPassResource::~MainPassCustomPostProcessPassResource(C3D::MainPassCustomPostProcessPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA594DB0;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA594DB0;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

void __writeIndexInBuffer(unsigned __int8 *a1, int a2, int a3, unint64_t a4, unint64_t a5)
{
  NSObject *v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 + 1) * a4 <= a5)
  {
    switch(a4)
    {
      case 4uLL:
        *(_DWORD *)&a1[4 * a2] = a3;
        break;
      case 2uLL:
        *(_WORD *)&a1[2 * a2] = a3;
        break;
      case 1uLL:
        a1[a2] = a3;
        break;
      default:
        v9 = scn_default_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
          __writeIndexInBuffer();
        break;
    }
  }
  else
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10[0] = 67109376;
      v10[1] = a2;
      v11 = 2048;
      v12 = a5 / a4;
      _os_log_error_impl(&dword_1DCCB8000, v8, OS_LOG_TYPE_ERROR, "Error: __writeIndexInBuffer - index (%u) out of bounds (%lu)", (uint8_t *)v10, 0x12u);
    }
  }
}

void ___ZL40__C3DMeshCopyDeindexedElementsForChannelP9__C3DMeshh_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t i;

  if (a4)
  {
    for (i = 0; i != a4; ++i)
      __writeIndexInBuffer(*(unsigned __int8 **)(a1 + 40), i + *(_DWORD *)(a1 + 64) + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), *(_DWORD *)(a3 + 4 * i), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += a4;
}

_OWORD *std::__tree<std::__value_type<__C3DMeshDeindexerKey,unsigned int>,std::__map_value_compare<__C3DMeshDeindexerKey,std::__value_type<__C3DMeshDeindexerKey,unsigned int>,__C3DMeshDeindexerKeyComparator,true>,std::allocator<std::__value_type<__C3DMeshDeindexerKey,unsigned int>>>::__emplace_unique_key_args<__C3DMeshDeindexerKey,std::pair<__C3DMeshDeindexerKey,unsigned int>>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<__C3DMeshDeindexerKey,unsigned int>,std::__map_value_compare<__C3DMeshDeindexerKey,std::__value_type<__C3DMeshDeindexerKey,unsigned int>,__C3DMeshDeindexerKeyComparator,true>,std::allocator<std::__value_type<__C3DMeshDeindexerKey,unsigned int>>>::__find_equal<__C3DMeshDeindexerKey>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<__C3DMeshDeindexerKey,unsigned int>,std::__map_value_compare<__C3DMeshDeindexerKey,std::__value_type<__C3DMeshDeindexerKey,unsigned int>,__C3DMeshDeindexerKeyComparator,true>,std::allocator<std::__value_type<__C3DMeshDeindexerKey,unsigned int>>>::__find_equal<__C3DMeshDeindexerKey>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!__C3DMeshDeindexerKeyComparator::operator()(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!__C3DMeshDeindexerKeyComparator::operator()(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL __C3DMeshDeindexerKeyComparator::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned int IndicesChannelCount;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Index;
  uint64_t v17;
  _BOOL8 result;

  IndicesChannelCount = C3DMeshElementGetIndicesChannelCount(*a2);
  if (IndicesChannelCount == C3DMeshElementGetIndicesChannelCount(*a3)
    || (v6 = scn_default_log(), !os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)))
  {
    if (IndicesChannelCount)
      goto LABEL_4;
    return 0;
  }
  __C3DMeshDeindexerKeyComparator::operator()(v6, v7, v8, v9, v10, v11, v12, v13);
  if (!IndicesChannelCount)
    return 0;
LABEL_4:
  v14 = 0;
  v15 = IndicesChannelCount - 1;
  do
  {
    Index = C3DMeshElementGetIndex(*a2, a2[1], a2[2], v14);
    v17 = C3DMeshElementGetIndex(*a3, a3[1], a3[2], v14);
    result = Index < v17;
  }
  while (Index >= v17 && Index <= v17 && v15 != v14++);
  return result;
}

uint64_t __readIndexInBuffer(const unsigned __int8 *a1, int a2, unint64_t a3, unint64_t a4)
{
  NSObject *v7;
  uint64_t result;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a2 + 1) * a3 <= a4)
  {
    switch(a3)
    {
      case 4uLL:
        return *(unsigned int *)&a1[4 * a2];
      case 2uLL:
        return *(unsigned __int16 *)&a1[2 * a2];
      case 1uLL:
        return a1[a2];
      default:
        v9 = scn_default_log();
        result = os_log_type_enabled(v9, OS_LOG_TYPE_FAULT);
        if ((_DWORD)result)
        {
          __readIndexInBuffer();
          return 0;
        }
        break;
    }
  }
  else
  {
    v7 = scn_default_log();
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      v10[0] = 67109376;
      v10[1] = a2;
      v11 = 2048;
      v12 = a4 / a3;
      _os_log_error_impl(&dword_1DCCB8000, v7, OS_LOG_TYPE_ERROR, "Error: __readIndexInBuffer - index (%u) out of bounds (%lu)", (uint8_t *)v10, 0x12u);
      return 0;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_3_8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_6_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

C3D::ConvertCubeComputePass *C3D::ConvertCubeComputePass::ConvertCubeComputePass(C3D::ConvertCubeComputePass *this, C3D::RenderGraph *a2, C3D::Pass *a3, const Parameters *a4)
{
  uint64_t v6;

  C3D::ComputePass::ComputePass(this, a2, a3);
  *(_QWORD *)v6 = off_1EA59A058;
  *(_WORD *)(v6 + 108) = *(_WORD *)&a4->var0;
  snprintf((char *)(v6 + 120), 0x40uLL, "ConvertCubeComputePass-%sTo%s", off_1EA5A5310[a4->var0], off_1EA5A5310[a4->var1]);
  return this;
}

uint64_t C3D::ConvertCubeComputePass::name(C3D::ConvertCubeComputePass *this)
{
  return (uint64_t)this + 120;
}

void C3D::ConvertCubeComputePass::setup(C3D::ConvertCubeComputePass *this)
{
  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
}

void C3D::ConvertCubeComputePass::compile(C3D::ConvertCubeComputePass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL HasFeatures;
  int v9;
  int v10;
  const __CFString *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::ConvertCubeComputePass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 14) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A038;
    *((_QWORD *)this + 14) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, (uint64_t)v7);
    HasFeatures = C3DEngineContextHasFeatures(*((_QWORD *)this + 2), 512);
    v9 = *((unsigned __int8 *)this + 109);
    if (v9 == 2)
    {
      if (*((_BYTE *)this + 108))
      {
        if (*((_BYTE *)this + 108) != 1)
          goto LABEL_18;
        v11 = CFSTR("compute_dual_from_equi");
      }
      else
      {
        v11 = CFSTR("compute_dual_from_cube");
      }
    }
    else if (v9 == 1)
    {
      if (*((_BYTE *)this + 108))
      {
        if (*((_BYTE *)this + 108) != 2)
          goto LABEL_18;
        v11 = CFSTR("compute_equi_from_dual");
      }
      else
      {
        v11 = CFSTR("compute_equi_from_cube");
      }
    }
    else
    {
      if (*((_BYTE *)this + 109))
        goto LABEL_18;
      v10 = *((unsigned __int8 *)this + 108);
      if (HasFeatures)
      {
        if (v10 != 1)
        {
          if (v10 == 2)
          {
            v11 = CFSTR("compute_cube_from_dual");
            goto LABEL_21;
          }
LABEL_18:
          v12 = scn_default_log();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
            C3D::ConvertCubeComputePass::compile(v12, v13, v14);
          v11 = 0;
          goto LABEL_21;
        }
        v11 = CFSTR("compute_cube_from_equi");
      }
      else if (v10 == 1)
      {
        v11 = CFSTR("compute_cube_from_equi_views");
      }
      else
      {
        if (v10 != 2)
          goto LABEL_18;
        v11 = CFSTR("compute_cube_from_dual_views");
      }
    }
LABEL_21:
    v15 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", v11);
    v16 = *((_QWORD *)this + 14);
    v17 = *(void **)(v16 + 16);
    *(_QWORD *)(v16 + 16) = v15;
    if (v17)

  }
}

uint64_t C3D::ConvertCubeComputePass::execute(uint64_t a1, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  _BOOL8 IsArray;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  MTLTexture **v20;
  MTLTexture *v22;
  _BOOL8 v23;
  _BOOL8 v24;
  uint64_t v25;
  MTLTexture *v26;
  unint64_t v27;
  MTLTexture *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ArrayElementType;
  unint64_t v38;

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16);
  v5 = C3D::Pass::inputTextureAtIndex((C3D::Pass *)a1, 0);
  v6 = C3D::Pass::outputTextureAtIndex((C3D::Pass *)a1, 0);
  IsArray = SCNMTLTextureTypeIsArray(objc_msgSend(v5, "textureType"));
  ArrayElementType = SCNMTLTextureTypeGetArrayElementType(objc_msgSend(v5, "textureType"));
  v8 = objc_msgSend(v5, "pixelFormat");
  if (*(_BYTE *)(a1 + 108))
    v9 = 1;
  else
    v9 = 6;
  v35 = v9;
  v36 = v8;
  v34 = SCNMTLTextureTypeIsArray(objc_msgSend(v6, "textureType"));
  v32 = SCNMTLTextureTypeGetArrayElementType(objc_msgSend(v6, "textureType"));
  v10 = objc_msgSend(v6, "pixelFormat");
  v11 = 0;
  if (*(_BYTE *)(a1 + 109))
    v12 = 1;
  else
    v12 = 6;
  v30 = v12;
  if (!*(_BYTE *)(a1 + 109))
    v11 = !C3DEngineContextHasFeatures(*(_QWORD *)(a1 + 16), 512);
  v13 = objc_msgSend(v5, "mipmapLevelCount", v30);
  v14 = objc_msgSend(v6, "mipmapLevelCount");
  if (v13 >= v14)
    v15 = v14;
  else
    v15 = v13;
  v38 = v15;
  v16 = -[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v4);
  if (v3->_computePipelineState != (MTLComputePipelineState *)v16)
  {
    v3->_computePipelineState = (MTLComputePipelineState *)v16;
    -[MTLComputeCommandEncoder setComputePipelineState:](v3->_encoder, "setComputePipelineState:", v16);
  }
  result = C3D::Pass::descriptor((C3D::Pass *)a1);
  if (v38)
  {
    v18 = 0;
    v19 = *(unsigned __int16 *)(result + 4);
    v20 = &v3->_textures[1];
    v33 = v5;
    while (v18 || IsArray)
    {
      v22 = (MTLTexture *)(id)objc_msgSend(v5, "newTextureViewWithPixelFormat:textureType:levels:slices:", v36, ArrayElementType, v18, 1, 0, v35);
      if (v3->_textures[0] != v22)
        goto LABEL_23;
LABEL_24:
      if (v11)
      {
        v23 = v11;
        v24 = IsArray;
        v25 = 0;
        do
        {
          v26 = (MTLTexture *)(id)objc_msgSend(v6, "newTextureViewWithPixelFormat:textureType:levels:slices:", v10, 2, v18, 1, v19 + v25, 1);
          v27 = v25 + 1;
          if (v20[v25] != v26)
          {
            v20[v25] = v26;
            v3->_texturesToBind[v27 >> 6] |= (2 << v25);
          }
          ++v25;
        }
        while (v27 != 6);
        v28 = (MTLTexture *)v6;
        IsArray = v24;
        v11 = v23;
        v5 = v33;
        goto LABEL_38;
      }
      if (v18)
        v29 = 1;
      else
        v29 = v34;
      if (v29 == 1)
      {
        v28 = (MTLTexture *)(id)objc_msgSend(v6, "newTextureViewWithPixelFormat:textureType:levels:slices:", v10, v32, v18, 1, v19, v31);
        if (v3->_textures[1] == v28)
          goto LABEL_38;
LABEL_37:
        v3->_textures[1] = v28;
        v3->_texturesToBind[0] |= 2uLL;
        goto LABEL_38;
      }
      v28 = (MTLTexture *)v6;
      if ((_QWORD *)v3->_textures[1] != v6)
        goto LABEL_37;
LABEL_38:
      result = SCNMTLComputeCommandEncoder::dispatchOnTextureCube(v3, v28);
      if (++v18 == v38)
        return result;
    }
    v22 = (MTLTexture *)v5;
    if ((void **)v3->_textures[0] == v5)
      goto LABEL_24;
LABEL_23:
    v3->_textures[0] = v22;
    v3->_texturesToBind[0] |= 1uLL;
    goto LABEL_24;
  }
  return result;
}

void C3D::ConvertCubeComputePass::Resource::~Resource(C3D::ConvertCubeComputePass::Resource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A038;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A038;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t C3DAnimatableParamControllerCreate(const void *a1, __int128 *a2)
{
  uint64_t Instance;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  __int128 v8;

  if (C3DAnimatableParamControllerGetTypeID_onceToken != -1)
    dispatch_once(&C3DAnimatableParamControllerGetTypeID_onceToken, &__block_literal_global_137);
  Instance = C3DTypeCreateInstance_(C3DAnimatableParamControllerGetTypeID_typeID, 0x30uLL);
  v5 = Instance;
  if (Instance)
  {
    v6 = *(const void **)(Instance + 16);
    if (v6 != a1)
    {
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v5 + 16) = 0;
      }
      if (a1)
        v7 = CFRetain(a1);
      else
        v7 = 0;
      *(_QWORD *)(v5 + 16) = v7;
    }
    v8 = *a2;
    *(_QWORD *)(v5 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v5 + 24) = v8;
  }
  return v5;
}

uint64_t C3DAnimatableParamControllerGetParamDescription(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFDictionary *v20;
  _QWORD *Value;
  int v22;
  int v23;
  CFIndex Count;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  CFTypeRef v36;
  __CFDictionary *v37;
  const void *TargetAddress;
  CFTypeRef v40;
  CFTypeRef cf;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DKeyframeControllerSetKeyframeAtIndex_cold_3(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      goto LABEL_6;
  }
  else if (key)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEntityGetAttribute_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(const __CFDictionary **)(a1 + 48);
  if (!v20)
  {
    *(_QWORD *)(a1 + 48) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(a1 + 56) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    v20 = *(const __CFDictionary **)(a1 + 48);
  }
  Value = CFDictionaryGetValue(v20, key);
  if (Value)
    return *Value;
  v40 = 0;
  cf = 0;
  v22 = (*(uint64_t (**)(_QWORD, void *, CFTypeRef *, CFTypeRef *))(a1 + 24))(*(_QWORD *)(a1 + 16), key, &cf, &v40);
  if (v22)
  {
    v23 = v22;
    Value = malloc_type_calloc(0x18uLL, 1uLL, 0x56769E95uLL);
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56));
    v25 = a1 + Count;
    if (Count >= 64)
    {
      v26 = scn_default_log();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT))
        C3DAnimatableParamControllerGetParamDescription_cold_1(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    v34 = C3DModelTargetCreate((const void *)a1, v25, v23, 0);
    *Value = v34;
    v35 = cf;
    if (!cf)
    {
      v35 = *(CFTypeRef *)(a1 + 16);
      if (v35)
        v35 = CFRetain(v35);
    }
    Value[1] = v35;
    v36 = v40;
    if (!v40)
      v36 = CFRetain(key);
    Value[2] = v36;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), key, Value);
    v37 = *(__CFDictionary **)(a1 + 56);
    TargetAddress = (const void *)C3DModelTargetGetTargetAddress(v34);
    CFDictionaryAddValue(v37, TargetAddress, key);
    return *Value;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v40)
    CFRelease(v40);
  return 0;
}

void _C3DAnimatableParamControllerCFFinalize(_QWORD *a1)
{
  const __CFDictionary *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const __CFDictionary *)a1[6];
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)_releaseItems, 0);
    v3 = (const void *)a1[6];
    if (v3)
    {
      CFRelease(v3);
      a1[6] = 0;
    }
  }
  v4 = (const void *)a1[2];
  if (v4)
  {
    CFRelease(v4);
    a1[2] = 0;
  }
  v5 = (const void *)a1[7];
  if (v5)
  {
    CFRelease(v5);
    a1[7] = 0;
  }
}

CFStringRef _C3DAnimatableParamControllerCFCopyFormatDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAnimatableParamController>"));
}

CFStringRef _C3DAnimatableParamControllerCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DAnimatableParamController>"));
}

void _releaseItems(int a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  if (*a2)
    CFRelease(*a2);
  v3 = a2[1];
  if (v3)
    CFRelease(v3);
  v4 = a2[2];
  if (v4)
    CFRelease(v4);
  free(a2);
}

uint64_t _C3DAnimatableParamControllerSetValue(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *Value;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (!Value)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DAnimatableParamControllerSetValue_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), Value);
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 40))(v14[1], v14[2], a3, *(__int16 *)(*v14 + 32));
}

uint64_t _C3DAnimatableParamControllerGetValue(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *Value;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (!Value)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      _C3DAnimatableParamControllerSetValue_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), Value);
  if (!v14)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3DModelValueStorageItemRelease_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 32))(v14[1], v14[2], a3, *(__int16 *)(*v14 + 32));
}

void sub_1DCF46CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4015FE5694);
  _Unwind_Resume(a1);
}

void sub_1DCF46E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0D41C0](v1, 0x10E1C4015FE5694);
  _Unwind_Resume(a1);
}

void SCNCActionRepeat::SCNCActionRepeat(SCNCActionRepeat *this, SCNCAction *a2)
{
  uint64_t v3;

  SCNCAction::SCNCAction((SCNCAction *)this);
  *(_QWORD *)v3 = &off_1EA5962F8;
  *(double *)(v3 + 56) = a2->var7;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var5;
  *(_WORD *)(v3 + 80) = *(_WORD *)&a2->var10;
  *(double *)(v3 + 64) = a2->var8;
  *(_QWORD *)(v3 + 104) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SCNCActionRepeat::~SCNCActionRepeat(SCNCActionRepeat *this)
{
  SCNCAction::~SCNCAction((SCNCAction *)this);
  JUMPOUT(0x1DF0D41C0);
}

SCNCAction *SCNCActionRepeat::setBaseSpeed(SCNCActionRepeat *this, double a2)
{
  SCNCAction *result;

  SCNCAction::setBaseSpeed((SCNCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SCNCAction *)(*((uint64_t (**)(SCNCAction *, double))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

SCNCAction *SCNCActionRepeat::setSpeed(SCNCActionRepeat *this, double a2)
{
  SCNCAction *result;

  SCNCAction::setSpeed((SCNCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SCNCAction *)(*((uint64_t (**)(SCNCAction *, double))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

SCNCAction *SCNCActionRepeat::cpp_updateWithTargetForTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  double var22;
  double v7;
  double var5;
  unint64_t v9;
  unint64_t v10;
  SCNCAction *var19;
  SCNCAction *v12;
  SCNCAction *result;
  SCNCAction *v14;
  unint64_t var21;
  unint64_t v16;
  SCNCAction *v17;
  double v18;
  double v19;

  if (C3DIsRunningInEditor() && vabdd_f64(a3, this->var22) > 3600.0)
    this->var22 = a3;
  if (C3DIsRunningInEditor())
  {
    var22 = this->var22;
    if (var22 > a3)
    {
      v7 = this->var19->var1 / this->var19->var18;
      if (v7 == 0.0)
      {
        v10 = 0;
      }
      else
      {
        var5 = this->var5;
        v9 = (unint64_t)((var22 - var5) / v7);
        v10 = (unint64_t)((a3 - var5) / v7);
        while (v9 > v10)
        {
          --v9;
          if (this->var23 || v9 < this->var21 - 1)
          {
            var19 = this->var19;
            var19->var10 = 0;
            SCNCAction::updateWithTargetForTime(var19, a2, var19->var5);
            SCNCAction::willStartWithTargetAtTime(this->var19, a2, this->var19->var5 - v7);
          }
        }
      }
      this->var20 = v10;
    }
  }
  v12 = this->var19;
  if (!v12->var4)
    goto LABEL_16;
  for (result = (SCNCAction *)(*((uint64_t (**)(SCNCAction *, SCNNode *, double))v12->var0 + 7))(v12, a2, a3);
        ;
        result = (SCNCAction *)SCNCAction::updateWithTargetForTime(v12, a2, a3))
  {
    v14 = this->var19;
    if (!v14->var4)
      break;
    if (!v14->var10)
      goto LABEL_25;
LABEL_19:
    var21 = this->var21;
    v16 = this->var20 + 1;
    this->var20 = v16;
    if (v16 >= var21 && !this->var23)
      goto LABEL_26;
    v17 = this->var19;
    v17->var10 = 0;
    v18 = (*((double (**)(SCNCAction *))v17->var0 + 2))(v17);
    if (v18 >= a3)
      v18 = a3;
    SCNCAction::willStartWithTargetAtTime(this->var19, a2, v18);
    v12 = this->var19;
LABEL_16:
    ;
  }
  result = (SCNCAction *)objc_msgSend(v14->var3, "finished");
  if ((_DWORD)result)
    goto LABEL_19;
LABEL_25:
  if (this->var23)
    goto LABEL_28;
LABEL_26:
  if (this->var20 >= this->var21)
  {
    v19 = (*((double (**)(SCNCAction *))this->var19->var0 + 2))(this->var19);
    result = SCNCAction::didFinishWithTargetAtTime((SCNCAction *)this, a2, v19);
  }
LABEL_28:
  this->var22 = a3;
  return result;
}

uint64_t SCNCActionRepeat::cpp_wasAddedToTargetAtTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  SCNCAction::cpp_wasAddedToTargetAtTime((SCNCAction *)this, a2, a3);
  return SCNCAction::wasAddedToTargetAtTime(this->var19, a2, a3);
}

uint64_t SCNCActionRepeat::cpp_wasRemovedFromTargetAtTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  SCNCAction::cpp_wasRemovedFromTargetAtTime((SCNCAction *)this, a2, a3);
  return SCNCAction::wasRemovedFromTargetAtTime(this->var19, a2, a3);
}

uint64_t SCNCActionRepeat::cpp_willStartWithTargetAtTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  this->var20 = 0;
  SCNCAction::cpp_willStartWithTargetAtTime((SCNCAction *)this, a2, a3);
  return SCNCAction::willStartWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SCNCActionRepeat::cpp_wasPausedWithTargetAtTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  SCNCAction::cpp_wasPausedWithTargetAtTime((SCNCAction *)this, a2, a3);
  return SCNCAction::wasPausedWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SCNCActionRepeat::cpp_willResumeWithTargetAtTime(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  SCNCAction::cpp_willResumeWithTargetAtTime((SCNCAction *)this, a2, a3);
  return SCNCAction::willResumeWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SCNCActionRepeat::cpp_timeJumpWithTarget(SCNCActionRepeat *this, SCNNode *a2, double a3)
{
  SCNCAction::cpp_timeJumpWithTarget((SCNCAction *)this, a2, a3);
  return SCNCAction::timeJumpWithTarget(this->var19, a2, a3);
}

SCNCAction *SCNCActionRepeat::cpp_reset(SCNCActionRepeat *this)
{
  SCNCAction *result;

  result = SCNCAction::cpp_reset((SCNCAction *)this);
  this->var20 = 0;
  this->var22 = 0.0;
  return result;
}

CFStringRef _C3DStackAllocatorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DStackAllocator>"));
}

CFStringRef _C3DStackAllocatorCFCopyDebugDescription(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<C3DStackAllocator>"));
}

uint64_t ___Z26C3DStackAllocatorGetTypeIDv_block_invoke()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  C3DStackAllocatorGetTypeID(void)::typeID = result;
  return result;
}

void *C3DStackAllocatorAllocate(uint64_t a1, size_t a2)
{
  return C3DStackAllocatorAllocateAligned(a1, a2, 8, 0);
}

void *C3DStackAllocatorAllocateZero(uint64_t a1, size_t a2)
{
  return C3DStackAllocatorAllocateAligned(a1, a2, 8, 1);
}

void *C3DStackAllocatorResizeLast(uint64_t a1, size_t a2)
{
  const void *v2;
  uint64_t v3;
  unsigned int v4;
  size_t v5;
  void *Aligned;
  void *v7;
  BOOL v8;

  v2 = *(const void **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_DWORD)v2 + a2 - *(_QWORD *)v3;
  if (*(_DWORD *)(v3 + 8) <= v4)
  {
    v5 = *(_QWORD *)v3 + *(_DWORD *)(v3 + 12) - v2;
    Aligned = C3DStackAllocatorAllocateAligned(a1, a2, 32, 0);
    v7 = Aligned;
    if (v2)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8)
      memcpy(Aligned, v2, v5);
    return v7;
  }
  else
  {
    *(_DWORD *)(v3 + 12) = v4;
  }
  return (void *)v2;
}

void *C3DStackAllocatorReallocate(uint64_t a1, unint64_t a2, size_t a3, size_t a4, uint64_t a5)
{
  void *Aligned;
  void *v8;

  if (*(_QWORD *)(a1 + 48) == a2 && ((a5 - 1) & a2) == 0)
    return C3DStackAllocatorResizeLast(a1, a4);
  Aligned = C3DStackAllocatorAllocateAligned(a1, a4, a5, 0);
  v8 = Aligned;
  if (a2)
  {
    if (a3)
      memcpy(Aligned, (const void *)a2, a3);
  }
  return v8;
}

void C3DHandlesSequenceAppend(uint64_t a1, __int16 a2, __int16 a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _WORD *v18;

  if ((*(_DWORD *)(a1 + 8) + a4) > *(_DWORD *)(a1 + 12))
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      C3D::ScenePass::_shouldPushNodeToVisible(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = *(unsigned int *)(a1 + 8);
  if (a4)
  {
    v17 = 0;
    v18 = (_WORD *)(*(_QWORD *)a1 + 4 * v16);
    do
    {
      *v18 = a2;
      v18[1] = v17++ + a3;
      v18 += 2;
    }
    while (a4 != v17);
  }
  *(_DWORD *)(a1 + 8) = v16 + a4;
}

uint64_t __shouldPushRenderableElementsToVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  const __CFDictionary *RegisteredCIFilterTechniqueForNode;
  uint64_t ParentTechnique;
  __int16 v12;
  __int16 v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = (_BYTE *)(a1 + 4688);
  v7 = *(_DWORD *)(a3 + 220);
  if ((v7 & 0x1000) != 0)
  {
    *(_BYTE *)(a1 + 5008) = 1;
    if (*v6 || *(_QWORD *)(a1 + 4680))
      return 0;
    v7 = *(_DWORD *)(a3 + 220);
    if ((v7 & 0x80) == 0)
      return 1;
  }
  else if ((v7 & 0x80) == 0)
  {
    return 1;
  }
  if ((v7 & 0x4000) == 0)
    return 0;
  result = 1;
  v6[320] = 1;
  if (*(_QWORD *)(a1 + 4672) != a3)
  {
    if (C3DFXPassGetMaterial(*(_QWORD *)(a1 + 4656)))
      return 1;
    v9 = C3DGetScene((_QWORD *)a3);
    RegisteredCIFilterTechniqueForNode = C3DSceneGetRegisteredCIFilterTechniqueForNode(v9, (void *)a3);
    if (RegisteredCIFilterTechniqueForNode)
    {
      ParentTechnique = C3DFXTechniqueGetParentTechnique((uint64_t)RegisteredCIFilterTechniqueForNode);
      v12 = *(_WORD *)(a3 + 224);
      v13 = *(_WORD *)(a3 + 226);
      v14 = *(_DWORD *)(a3 + 228);
      if (!ParentTechnique || (result = C3DFXTechniqueIsBeingRendered(ParentTechnique), (_DWORD)result))
      {
        v15 = a1 + 16 * a2;
        v16 = (_QWORD *)(v15 + 4912);
        v17 = (_DWORD *)(v15 + 4920);
        if ((*(_DWORD *)(v15 + 4920) + 1) > *(_DWORD *)(v15 + 4924))
        {
          v18 = scn_default_log();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
            C3D::ScenePass::_shouldPushNodeToVisible(v18, v19, v20, v21, v22, v23, v24, v25);
        }
        result = 0;
        v26 = *v17;
        v27 = (_WORD *)(*v16 + 4 * v26);
        *v27 = v12;
        v27[1] = v13 + v14 - 1;
        *v17 = v26 + 1;
      }
    }
    else
    {
      if ((__shouldPushRenderableElementsToVisible_done & 1) != 0)
        return 0;
      __shouldPushRenderableElementsToVisible_done = 1;
      v28 = scn_default_log();
      result = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        __shouldPushRenderableElementsToVisible_cold_1(v28, v29, v30, v31, v32, v33, v34, v35);
        return 0;
      }
    }
  }
  return result;
}

uint64_t __Cull(float32x4_t *a1, uint64_t a2, float32x4_t *a3)
{
  int v6;
  uint64_t result;
  float32x4_t *j;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t i;
  float32x4_t v14[6];
  float32x4_t v15;
  float32x4_t v16;

  if ((C3DNodeIsAlwaysRendered((uint64_t)a3) & 1) != 0)
  {
    v6 = 2;
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
    result = C3DNodeComputeHierarchicalBoundingBox(a3, 0, &v15);
    if ((result & 1) == 0)
      return result;
    v9 = &a1[6 * a2];
    v10 = v9[4];
    v14[2] = v9[3];
    v14[3] = v10;
    v11 = v9[6];
    v14[4] = v9[5];
    v14[5] = v11;
    v12 = v9[2];
    v14[0] = v9[1];
    v14[1] = v12;
    result = scn_frustum_classify_aabb(v14, v15, v16);
    v6 = result;
    if ((_DWORD)result == 1)
      return result;
  }
  result = C3DCullingContextPushRenderableElementsToVisible(a1, a2, a3);
  if (!result)
  {
    if (v6 == 2)
    {
      result = C3DNodeHasChildren((uint64_t)a3);
      if ((_DWORD)result)
      {
        for (i = a3[4].i64[1]; i; i = *(_QWORD *)(i + 80))
          result = __Cull(a1, a2, i);
      }
    }
    else if (!v6)
    {
      result = C3DNodeHasChildren((uint64_t)a3);
      if ((_DWORD)result)
      {
        for (j = (float32x4_t *)a3[4].i64[1]; j; j = (float32x4_t *)j[5].i64[0])
          result = __CullInside(a1, a2, j);
      }
    }
  }
  return result;
}

double C3DCullingContextSetupViewAndViewProjMatricesForCubemapRendering(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  simd_float4x4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  simd_float4x4 v23;

  v2 = 0;
  v3 = (_OWORD *)(a1 + 3472);
  do
  {
    if (v2)
    {
      v4 = (_OWORD *)(a1 + (v2 << 6));
      v5 = v3[1];
      v4[217] = *v3;
      v4[218] = v5;
      v6 = v3[3];
      v4[219] = v3[2];
      v4[220] = v6;
    }
    v7 = a1 + (v2 << 6);
    v23 = __invert_f4(*(simd_float4x4 *)(v7 + 2704));
    v8 = 0;
    *(simd_float4x4 *)(v7 + 3088) = v23;
    v9 = *(float32x4_t *)(v7 + 3472);
    v10 = *(float32x4_t *)(v7 + 3488);
    v11 = *(float32x4_t *)(v7 + 3504);
    v12 = *(float32x4_t *)(v7 + 3520);
    v18 = v23;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    do
    {
      *(__int128 *)((char *)&v19 + v8 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)&v18.columns[v8])), v10, *(float32x2_t *)v18.columns[v8].f32, 1), v11, (float32x4_t)v18.columns[v8], 2), v12, (float32x4_t)v18.columns[v8], 3);
      ++v8;
    }
    while (v8 != 4);
    v13 = (_OWORD *)(a1 + (v2 << 6));
    result = *(double *)&v19;
    v15 = v20;
    v16 = v21;
    v17 = v22;
    v13[241] = v19;
    v13[242] = v15;
    v13[243] = v16;
    v13[244] = v17;
    ++v2;
  }
  while (v2 != 6);
  return result;
}

void __setupCubeMapRendering(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  char CoordinatesSystemOptions;
  double v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  __int128 v12;
  __n128 v13;
  __int128 v14;
  double v15;
  unsigned int v16;
  __int128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  double v30;
  float v31;
  float v32;
  unint64_t v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  __n128 v38;
  _OWORD v39[14];
  _OWORD v40[4];
  __n128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions(a2);
  memset(v39, 0, sizeof(v39));
  if (C3DNodeGetProjectionInfos((uint64_t)a3, (uint64_t)v39))
  {
    if ((CoordinatesSystemOptions & 1) != 0)
    {
      if ((CoordinatesSystemOptions & 8) != 0)
      {
        v26 = *((double *)v39 + 1);
        if (*(double *)&v39[1] > *((double *)v39 + 1))
          v27 = *(double *)&v39[1];
        else
          v27 = *((double *)v39 + 1) + 1.0;
        v28 = __tanpi(0.25);
        v29 = 0;
        if (v28 == 0.0)
          v30 = 1.0;
        else
          v30 = 1.0 / v28;
        v31 = v30;
        v32 = v31;
        LODWORD(v33) = 0;
        *((float *)&v33 + 1) = v31;
        *(_QWORD *)&v34 = 0;
        *(float *)&v35 = v27 / (v26 - v27);
        *((_QWORD *)&v34 + 1) = __PAIR64__(-1.0, v35);
        *(float *)&v36 = v26 * v27 / (v26 - v27);
        *(_QWORD *)&v37 = 0;
        *((_QWORD *)&v37 + 1) = v36;
        v40[0] = LODWORD(v32);
        v40[1] = v33;
        v40[2] = v34;
        v40[3] = v37;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v41 + v29 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1DD007970, COERCE_FLOAT(v40[v29])), (float32x4_t)xmmword_1DD007920, *(float32x2_t *)&v40[v29], 1), (float32x4_t)xmmword_1DD007960, (float32x4_t)v40[v29], 2), (float32x4_t)xmmword_1DD007E00, (float32x4_t)v40[v29], 3);
          ++v29;
        }
        while (v29 != 4);
        v13 = v41;
        v14 = v42;
        v17 = v43;
        v12 = v44;
        goto LABEL_28;
      }
      v19 = *((double *)v39 + 1);
      if (*(double *)&v39[1] > *((double *)v39 + 1))
        v20 = *(double *)&v39[1];
      else
        v20 = *((double *)v39 + 1) + 1.0;
      v21 = __tanpi(0.25);
      if (v21 == 0.0)
        v22 = 1.0;
      else
        v22 = 1.0 / v21;
      *(float *)&v23 = v22;
      v13 = (__n128)v23;
      LODWORD(v14) = 0;
      *((_QWORD *)&v14 + 1) = 0;
      DWORD1(v14) = v23;
      *(_QWORD *)&v12 = 0;
      HIDWORD(v12) = 0;
      v15 = v19 - v20;
      *(_QWORD *)&v17 = 0;
      *(float *)&v24 = v20 / (v19 - v20);
      *((_QWORD *)&v17 + 1) = __PAIR64__(-1.0, v24);
      v18 = v19 * v20;
    }
    else
    {
      v7 = *((double *)v39 + 1);
      if (*(double *)&v39[1] > *((double *)v39 + 1))
        v8 = *(double *)&v39[1];
      else
        v8 = *((double *)v39 + 1) + 1.0;
      v9 = __tanpi(0.25);
      if (v9 == 0.0)
        v10 = 1.0;
      else
        v10 = 1.0 / v9;
      *(float *)&v11 = v10;
      *(_QWORD *)&v12 = 0;
      HIDWORD(v12) = 0;
      v13 = (__n128)v11;
      LODWORD(v14) = 0;
      *((_QWORD *)&v14 + 1) = 0;
      DWORD1(v14) = v11;
      v15 = v7 - v8;
      *(float *)&v16 = (v7 + v8) / (v7 - v8);
      *(_QWORD *)&v17 = 0;
      *((_QWORD *)&v17 + 1) = __PAIR64__(-1.0, v16);
      v18 = (v7 + v7) * v8;
    }
    v25 = v18 / v15;
    *((float *)&v12 + 2) = v25;
LABEL_28:
    *(__n128 *)(a1 + 3472) = v13;
    *(_OWORD *)(a1 + 3488) = v14;
    *(_OWORD *)(a1 + 3504) = v17;
    *(_OWORD *)(a1 + 3520) = v12;
    *(unint64_t *)((char *)v41.n128_u64 + 4) = 0;
    v41.n128_u32[0] = 0;
    C3DNodeGetWorldPosition(a3, &v41);
    v38 = v41;
    *(_OWORD *)(a1 + 2704) = xmmword_1DD007600;
    *(_OWORD *)(a1 + 2720) = xmmword_1DD007920;
    *(_OWORD *)(a1 + 2736) = xmmword_1DD02C5D0;
    v38.n128_u32[3] = 1.0;
    *(__n128 *)(a1 + 2752) = v38;
    *(_OWORD *)(a1 + 2768) = xmmword_1DD02C5E0;
    *(_OWORD *)(a1 + 2784) = xmmword_1DD007920;
    *(_OWORD *)(a1 + 2800) = xmmword_1DD007970;
    *(__n128 *)(a1 + 2816) = v38;
    *(_OWORD *)(a1 + 2832) = xmmword_1DD007970;
    *(_OWORD *)(a1 + 2848) = xmmword_1DD007600;
    *(_OWORD *)(a1 + 2864) = xmmword_1DD02C5F0;
    *(__n128 *)(a1 + 2880) = v38;
    *(_OWORD *)(a1 + 2896) = xmmword_1DD007970;
    *(_OWORD *)(a1 + 2912) = xmmword_1DD02C5E0;
    *(_OWORD *)(a1 + 2928) = xmmword_1DD007920;
    *(__n128 *)(a1 + 2944) = v38;
    *(_OWORD *)(a1 + 2960) = xmmword_1DD007970;
    *(_OWORD *)(a1 + 2976) = xmmword_1DD007920;
    *(_OWORD *)(a1 + 2992) = xmmword_1DD007600;
    *(__n128 *)(a1 + 3008) = v38;
    *(_OWORD *)(a1 + 3024) = xmmword_1DD02C5D0;
    *(_OWORD *)(a1 + 3040) = xmmword_1DD007920;
    *(_OWORD *)(a1 + 3056) = xmmword_1DD02C5E0;
    *(__n128 *)(a1 + 3072) = v38;
    *(__n128 *)(a1 + 4640) = C3DEngineContextGetViewportAtIndex(a2, 0);
    *(_OWORD *)(a1 + 4744) = *(_OWORD *)((char *)v39 + 8);
    C3DCullingContextSetupViewAndViewProjMatricesForCubemapRendering(a1);
  }
}

void C3DCullingContextSetupMatricesToIdentity(uint64_t a1)
{
  uint64_t i;

  for (i = 0; i != 384; i += 64)
  {
    C3DMatrix4x4MakeIdentity(a1 + i + 592);
    C3DMatrix4x4MakeIdentity(a1 + i + 976);
    C3DMatrix4x4MakeIdentity(a1 + i + 1360);
    C3DMatrix4x4MakeIdentity(a1 + i + 1744);
    C3DMatrix4x4MakeIdentity(a1 + i + 2704);
    C3DMatrix4x4MakeIdentity(a1 + i + 3088);
    C3DMatrix4x4MakeIdentity(a1 + i + 3472);
    C3DMatrix4x4MakeIdentity(a1 + i + 3856);
  }
}

float32x4_t scn_frustum_extract_from_twos_viewProjs(uint64_t a1, char a2, int a3, float32x4_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  int32x4_t v37;
  _OWORD *v38;
  float v39;
  int32x4_t v40;
  unsigned __int32 v41;
  unsigned __int32 v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x4_t result;

  v11 = a7.n128_f32[3] - a7.n128_f32[0];
  v12 = a11.n128_f32[3];
  v13 = a8.n128_f32[3];
  v14 = a9.n128_f32[3];
  v15 = a10.n128_f32[3];
  if ((float)(a7.n128_f32[3] - a7.n128_f32[0]) >= (float)(a11.n128_f32[3] - a11.n128_f32[0]))
  {
    v16 = a10.n128_f32[0];
    v17 = a10.n128_f32[3];
    v18 = a9.n128_f32[0];
    v19 = a9.n128_f32[3];
    v20 = a8.n128_f32[0];
    v21 = a8.n128_f32[3];
    a10.n128_u32[0] = a6.n128_u32[0];
    v15 = a6.n128_f32[3];
    a9.n128_u32[0] = a5.n128_u32[0];
    v14 = a5.n128_f32[3];
    a8.n128_u32[0] = a4.i32[0];
    v13 = a4.f32[3];
  }
  else
  {
    v11 = a11.n128_f32[3] - a11.n128_f32[0];
    a11.n128_u32[0] = a7.n128_u32[0];
    v12 = a7.n128_f32[3];
    v16 = a6.n128_f32[0];
    v17 = a6.n128_f32[3];
    v18 = a5.n128_f32[0];
    v19 = a5.n128_f32[3];
    v20 = a4.f32[0];
    v21 = a4.f32[3];
  }
  v22.f32[0] = v13 - a8.n128_f32[0];
  v22.f32[1] = v14 - a9.n128_f32[0];
  v22.f32[2] = v15 - a10.n128_f32[0];
  v22.f32[3] = v11;
  v23 = vmulq_f32(v22, v22);
  v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v23, 2), vadd_f32(*(float32x2_t *)v23.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.f32, 1))).u32[0];
  v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
  v26 = vmulq_n_f32(v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
  v23.f32[0] = v21 + v20;
  v23.f32[1] = v19 + v18;
  v23.f32[2] = v17 + v16;
  v23.f32[3] = v12 + a11.n128_f32[0];
  v27 = (int32x4_t)vmulq_f32(v23, v23);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
  *(float32x4_t *)a1 = v26;
  *(float32x4_t *)(a1 + 16) = vmulq_n_f32(v23, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
  v26.f32[0] = a4.f32[3] + a4.f32[1];
  v26.f32[1] = a5.n128_f32[3] + a5.n128_f32[1];
  v26.f32[2] = a6.n128_f32[3] + a6.n128_f32[1];
  v26.f32[3] = a7.n128_f32[3] + a7.n128_f32[1];
  v30 = vmulq_f32(v26, v26);
  v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v30, 2), vadd_f32(*(float32x2_t *)v30.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.f32, 1))).u32[0];
  v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
  v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
  v33 = vmulq_n_f32(v26, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]);
  v30.f32[0] = a4.f32[3] - a4.f32[1];
  v30.f32[1] = a5.n128_f32[3] - a5.n128_f32[1];
  v30.f32[2] = a6.n128_f32[3] - a6.n128_f32[1];
  v30.f32[3] = a7.n128_f32[3] - a7.n128_f32[1];
  v34 = (int32x4_t)vmulq_f32(v30, v30);
  v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
  v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
  *(float32x4_t *)(a1 + 32) = v33;
  *(float32x4_t *)(a1 + 48) = vmulq_n_f32(v30, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
  a4.i32[0] = a4.i32[2];
  v33.f32[0] = a4.f32[3] - a4.f32[2];
  a5.n128_u32[0] = a5.n128_u32[2];
  a6.n128_u32[0] = a6.n128_u32[2];
  v33.f32[1] = a5.n128_f32[3] - a5.n128_f32[2];
  v33.f32[2] = a6.n128_f32[3] - a6.n128_f32[2];
  v33.f32[3] = a7.n128_f32[3] - a7.n128_f32[2];
  v37 = (int32x4_t)vmulq_f32(v33, v33);
  v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
  *(float32x2_t *)v34.i8 = vrsqrte_f32((float32x2_t)v37.u32[0]);
  *(float32x2_t *)v34.i8 = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)));
  *(float32x4_t *)(a1 + 64) = vmulq_n_f32(v33, vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8))).f32[0]);
  v38 = (_OWORD *)(a1 + 64);
  if ((a2 & 1) == 0)
  {
    a4.f32[0] = a4.f32[3] + a4.f32[2];
    a5.n128_f32[0] = a5.n128_f32[3] + a5.n128_f32[2];
    a6.n128_f32[0] = a6.n128_f32[3] + a6.n128_f32[2];
  }
  a4.i32[1] = a5.n128_u32[0];
  if ((a2 & 1) != 0)
    v39 = a7.n128_f32[2];
  else
    v39 = a7.n128_f32[3] + a7.n128_f32[2];
  a4.i64[1] = __PAIR64__(LODWORD(v39), a6.n128_u32[0]);
  if (a3)
  {
    v40 = (int32x4_t)vmulq_f32(a4, a4);
    *(_OWORD *)(a1 + 80) = *v38;
    v41 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v41);
    *(float32x2_t *)v40.i8 = vmul_f32(*(float32x2_t *)v40.i8, vrsqrts_f32((float32x2_t)v41, vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)));
    v42 = vmul_f32(*(float32x2_t *)v40.i8, vrsqrts_f32((float32x2_t)v41, vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8))).u32[0];
  }
  else
  {
    v43 = (int32x4_t)vmulq_f32(a4, a4);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    v42 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).u32[0];
    v38 = (_OWORD *)(a1 + 80);
  }
  result = vmulq_n_f32(a4, *(float *)&v42);
  *v38 = result;
  return result;
}

void C3DCullingContextSetupMirrorMatrices(uint64_t a1, float32x4_t *a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  float32x4_t v6[4];

  v3 = (unsigned __int8 *)(a1 + 4628);
  memset(v6, 0, sizeof(v6));
  C3DComputeMirrorMatrix(*(__n128 **)(a1 + 4728), a2, (uint64_t)v6);
  if (*v3)
  {
    v4 = 0;
    v5 = a1 + 2704;
    do
    {
      C3DMatrix4x4Mult(v5, v6, (_OWORD *)v5);
      C3DMatrix4x4Mult(v5 - 2112, v6, (_OWORD *)(v5 - 2112));
      if (v3[68])
        *(simd_float4x4 *)(v5 + 384) = __invert_f4(*(simd_float4x4 *)v5);
      ++v4;
      v5 += 64;
    }
    while (v4 < *v3);
  }
}

void C3DCullingContextSetupMirrorFrustumPlanes(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  __n128 v5;
  __n128 *v6;
  __n128 v7;
  __n128 v8;

  v8.n128_u32[2] = 0;
  v8.n128_u64[0] = 0;
  C3DSceneGetUpAxis(*(__n128 **)(a1 + 4728), &v8);
  v7 = 0uLL;
  C3DComputeMirrorPlane(a2, (float32x4_t *)&v8, &v7);
  v4 = *(unsigned __int8 *)(a1 + 4628);
  if (*(_BYTE *)(a1 + 4628))
  {
    v5 = v7;
    v6 = (__n128 *)(a1 + 96);
    do
    {
      *v6 = v5;
      v6 += 6;
      --v4;
    }
    while (v4);
  }
}

double C3DCullingContextInitialize(__n128 *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned __int8 *v8;
  uint64_t EnginePipeline;
  uint64_t FXContext;
  __n128 *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  NSObject *v16;
  uint64_t CullingData;
  unsigned __int8 v18;
  uint64_t RootNode;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 Viewport;
  float32x4_t *PointOfView;
  float32x4_t *v32;
  float32x4_t *v33;
  int ForceJitteringOff;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFDictionary *Light;
  uint64_t LightingSystem;
  char CoordinatesSystemOptions;
  uint64_t Floor;
  const __CFDictionary *v47;
  uint64_t Scene;
  uint64_t v50;
  __n128 *v51;
  uint8_t v52[4];
  _DWORD v53[7];

  *(_QWORD *)&v53[5] = *MEMORY[0x1E0C80C00];
  v8 = &a1[289].n128_u8[4];
  Scene = C3DEngineContextGetScene(a2);
  EnginePipeline = C3DSceneGetEnginePipeline(Scene);
  FXContext = C3DEngineContextGetFXContext(a2);
  v50 = *(_QWORD *)(a3 + 5104);
  v11 = *(__n128 **)a3;
  a1[296].n128_u64[0] = a2;
  v8[64] = C3DEngineContextIsWarmUp(a2);
  a1->n128_u64[0] = EnginePipeline;
  v51 = (__n128 *)a2;
  a1[295].n128_u64[1] = C3DEngineContextGetScene(a2);
  v12 = *(unsigned __int8 *)(a3 + 24);
  *v8 = v12;
  v8[3] = *(_BYTE *)(a3 + 27);
  v8[66] = 0;
  if (v12)
  {
    v13 = 0;
    v14 = a3 + 32;
    v15 = &a1[307].n128_u32[3];
    do
    {
      if (*(_QWORD *)(v14 + 8 * v13))
      {
        v16 = scn_default_log();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          C3DCullingContextInitialize_cold_3(v52, v53, v16);
      }
      CullingData = C3DFXContextCreateCullingData(FXContext, a4);
      *(_QWORD *)(v14 + 8 * v13) = CullingData;
      *(_QWORD *)(v15 - 3) = C3DArrayGetValuesPtr(CullingData);
      *(v15 - 1) = 0;
      *v15 = a4;
      ++v13;
      v15 += 4;
    }
    while (v13 < *v8);
  }
  v8[4] = *(_BYTE *)(a3 + 26);
  a1[291].n128_u64[0] = (unint64_t)v11;
  if (v11)
    v18 = C3DFXPassRequiresLighting((uint64_t)v11);
  else
    v18 = 0;
  v8[65] = v18;
  v8[380] = 0;
  v8[2] = v11[30].n128_u8[0];
  *((_WORD *)v8 + 34) = 512;
  RootNode = C3DFXPassGetRootNode((uint64_t)v11);
  a1[292].n128_u64[0] = RootNode;
  if (!RootNode)
  {
    v20 = Scene;
    if (!Scene)
    {
      v21 = scn_default_log();
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_FAULT);
      v20 = 0;
      if (v22)
      {
        C3DSceneCreateHitTestResultsWithSegment_cold_2(v21, v23, v24, v25, v26, v27, v28, v29);
        v20 = 0;
      }
    }
    a1[292].n128_u64[0] = C3DSceneGetRootNode(v20);
  }
  a1[292].n128_u64[1] = v50;
  if (C3DFXPassGetHasCustomViewport((uint64_t)v11))
    Viewport = C3DFXPassGetViewport(v11);
  else
    Viewport = C3DEngineContextGetViewport(v51);
  a1[290] = Viewport;
  PointOfView = (float32x4_t *)C3DFXPassGetPointOfView((uint64_t)v11);
  v32 = PointOfView;
  if (!PointOfView)
  {
    PointOfView = C3DEngineContextGetPointOfViewForCulling((uint64_t)v51);
    v32 = C3DEngineContextGetPointOfView((uint64_t)v51);
  }
  v8[61] = C3DFXPassGetDrawOnlyShadowCaster((uint64_t)v11);
  v33 = (float32x4_t *)a1[292].n128_u64[1];
  ForceJitteringOff = C3DFXPassGetForceJitteringOff(*(_QWORD *)a3);
  if (!a1[295].n128_u64[1])
  {
    v35 = scn_default_log();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
    {
      C3DCullingContextInitialize_cold_1(v35, v36, v37, v38, v39, v40, v41, v42);
      if (v32)
        goto LABEL_23;
LABEL_34:
      C3DCullingContextSetupMatricesToIdentity((uint64_t)a1);
      goto LABEL_35;
    }
  }
  if (!v32)
    goto LABEL_34;
LABEL_23:
  if (v8[4])
  {
    __setupCubeMapRendering((uint64_t)a1, (uint64_t)v51, v32);
  }
  else
  {
    Light = C3DNodeGetLight((uint64_t)v32);
    if (Light && C3DLightGetCastsShadow((uint64_t)Light) && v8[61])
    {
      LightingSystem = C3DSceneGetLightingSystem(a1[295].n128_i64[1]);
      CoordinatesSystemOptions = C3DEngineContextGetCoordinatesSystemOptions((uint64_t)v51);
      C3DLightingSystemComputeShadowMatrices(LightingSystem, v32, (uint64_t)&a1[169], (uint64_t)&a1[217], 0, 0, 0, CoordinatesSystemOptions);
    }
    else
    {
      C3DCullingContextSetupPointOfViewMatrices((uint64_t)a1, (uint64_t)v51, v32, PointOfView);
    }
  }
  if (v33)
  {
    C3DCullingContextSetupMirrorMatrices((uint64_t)a1, v33);
    C3DCullingContextSetupCullingMatricesAndPlanes((uint64_t)a1, (float32x2_t *)v51, (uint64_t)v32, (uint64_t)PointOfView, ForceJitteringOff ^ 1);
    C3DCullingContextSetupMirrorFrustumPlanes((uint64_t)a1, v33);
  }
  else
  {
    C3DCullingContextSetupCullingMatricesAndPlanes((uint64_t)a1, (float32x2_t *)v51, (uint64_t)v32, (uint64_t)PointOfView, ForceJitteringOff ^ 1);
  }
LABEL_35:
  a1[295].n128_u64[0] = (unint64_t)C3DEngineContextGetAuthoringEnvironment((uint64_t)v51, 0);
  v8[60] = C3DFXPassGetIgnoreInifiniteFloor((uint64_t)v11);
  a1[294].n128_u64[0] = C3DFXPassGetIncludeCategoryMask((uint64_t)v11);
  if (v50)
  {
    Floor = C3DNodeGetFloor(v50);
    if (Floor)
      a1[294].n128_u64[0] &= C3DFloorGetReflectionCategoryBitMask(Floor);
  }
  a1[294].n128_u64[0] &= C3DGetPovCategoryMask((uint64_t)PointOfView);
  a1[294].n128_u64[1] = C3DFXPassGetExcludeCategoryMask((uint64_t)v11);
  *((_WORD *)v8 + 31) = 0;
  a1[313].n128_u64[1] = (unint64_t)__shouldPushRenderableElementsToVisible;
  if (v32)
  {
    v47 = C3DNodeGetLight((uint64_t)v32);
    if (v47)
    {
      if (C3DLightGetType((uint64_t)v47) == 4)
        *((_WORD *)v8 + 31) = 256;
    }
  }
  return C3DCullingContextSetupLOD((uint64_t)a1, v51);
}

void C3D::DOFBlurCoCXPass::DOFBlurCoCXPass(C3D::ComputePass *a1, C3D::RenderGraph *a2, C3D::Pass *a3, uint64_t a4)
{
  _QWORD *v5;

  C3D::ComputePass::ComputePass(a1, a2, a3);
  *v5 = off_1EA599238;
  v5[14] = a4;
}

const char *C3D::DOFBlurCoCXPass::name(C3D::DOFBlurCoCXPass *this)
{
  return "DOFBlurCoCXPass";
}

double C3D::DOFBlurCoCXPass::setup(C3D::DOFBlurCoCXPass *this)
{
  uint64_t v2;
  _WORD *v3;
  _WORD *v4;
  double result;

  C3D::Pass::setInputCount(this, 1u);
  C3D::Pass::setOutputCount(this, 1u);
  v2 = (*(uint64_t (**)(C3D::DOFBlurCoCXPass *))(*(_QWORD *)this + 88))(this);
  v3 = (_WORD *)C3D::PassDescriptor::inputAtIndex((C3D::DOFBlurCoCXPass *)((char *)this + 32), 0);
  v3[8] = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  v3[9] = (int)fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  v3[14] = 115;
  v4 = (_WORD *)C3D::PassDescriptor::outputAtIndex((C3D::DOFBlurCoCXPass *)((char *)this + 32), 0);
  v4[8] = (int)fmax(*(float *)(v2 + 8) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  result = fmax(*(float *)(v2 + 12) * 0.5 / **((float **)this + 14) * 0.25, 1.0);
  v4[9] = (int)result;
  v4[14] = 115;
  return result;
}

void C3D::DOFBlurCoCXPass::compile(C3D::DOFBlurCoCXPass *this)
{
  uint64_t RenderContext;
  void *v3;
  uint64_t v4;
  C3D::RenderGraphResourceManager *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  RenderContext = C3DEngineContextGetRenderContext(*((_QWORD *)this + 2));
  v3 = (void *)-[SCNMTLRenderContext resourceManager](RenderContext);
  v4 = (*(uint64_t (**)(C3D::DOFBlurCoCXPass *))(*(_QWORD *)this + 64))(this);
  v5 = *(C3D::RenderGraphResourceManager **)(*((_QWORD *)this + 3) + 128);
  v6 = C3D::RenderGraphResourceManager::get(v5, v4);
  *((_QWORD *)this + 15) = v6;
  if (!v6)
  {
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1EA59A228;
    *((_QWORD *)this + 15) = v7;
    C3D::RenderGraphResourceManager::set((uint64_t)v5, v4, (uint64_t)v7);
    v8 = objc_msgSend(v3, "newComputePipelineStateWithFunctionName:", CFSTR("dof_coc_blurV"));
    v9 = *((_QWORD *)this + 15);
    v10 = *(void **)(v9 + 16);
    *(_QWORD *)(v9 + 16) = v8;
    if (v10)

  }
}

uint64_t C3D::DOFBlurCoCXPass::execute(C3D::Pass *this, SCNMTLComputeCommandEncoder **a2)
{
  SCNMTLComputeCommandEncoder *v3;
  uint64_t v4;
  unint64_t v5;
  MTLBuffer *v6;
  void **v7;
  MTLTexture *v8;
  _QWORD *v9;
  uint64_t v10;
  MTLComputePipelineState *v11;

  v3 = *a2;
  v4 = *((_QWORD *)this + 14);
  v6 = *(MTLBuffer **)(v4 + 40);
  v5 = *(_QWORD *)(v4 + 48);
  if ((*a2)->_buffers[0] == v6)
  {
    if (v3->_offsets[0] == v5)
      goto LABEL_5;
  }
  else
  {
    v3->_buffers[0] = v6;
  }
  v3->_offsets[0] = v5;
  v3->_buffersToBind[0] |= 1uLL;
LABEL_5:
  v7 = C3D::Pass::inputTextureAtIndex(this, 0);
  if ((void **)v3->_textures[0] != v7)
  {
    v3->_textures[0] = (MTLTexture *)v7;
    v3->_texturesToBind[0] |= 1uLL;
  }
  v8 = (MTLTexture *)C3D::Pass::outputTextureAtIndex(this, 0);
  if (v3->_textures[1] != v8)
  {
    v3->_textures[1] = v8;
    v3->_texturesToBind[0] |= 2uLL;
  }
  v9 = C3D::Pass::outputTextureAtIndex(this, 0);
  v10 = C3D::SmartPtr<SCNMTLComputePipeline *,C3D::detail::NSRetainFct,C3D::detail::NSReleaseFct>::operator SCNMTLComputePipeline *(*((_QWORD *)this + 15) + 16);
  v11 = (MTLComputePipelineState *)-[SCNMTLOpenSubdivComputeEvaluator computeEvaluator](v10);
  return SCNMTLComputeCommandEncoder::dispatchOnTexture2D(v3, v9, v11);
}

void C3D::DOFBlurCoCXPassResource::~DOFBlurCoCXPassResource(C3D::DOFBlurCoCXPassResource *this)
{
  void *v1;

  *(_QWORD *)this = &off_1EA59A228;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1EA59A228;
  v1 = (void *)*((_QWORD *)this + 2);
  if (v1)

  JUMPOUT(0x1DF0D41C0);
}

uint64_t C3DFXMetalProgramCreateFromLibrary(const void *a1, const void *a2, int a3, const void *a4, const void *a5)
{
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;

  v10 = C3DFXMetalProgramCreate();
  v11 = *(const void **)(v10 + 80);
  if (v11 != a1)
  {
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v10 + 80) = 0;
    }
    if (a1)
      v12 = CFRetain(a1);
    else
      v12 = 0;
    *(_QWORD *)(v10 + 80) = v12;
  }
  v13 = *(const void **)(v10 + 88);
  if (v13 != a2)
  {
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v10 + 88) = 0;
    }
    if (a2)
      v14 = CFRetain(a2);
    else
      v14 = 0;
    *(_QWORD *)(v10 + 88) = v14;
  }
  v15 = *(const void **)(v10 + 96);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(v10 + 96) = 0;
  }
  v16 = *(const void **)(v10 + 104);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(v10 + 104) = 0;
  }
  v17 = *(const void **)(v10 + 112);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(v10 + 112) = 0;
  }
  v18 = *(const void **)(v10 + 120);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(v10 + 120) = 0;
  }
  *(_DWORD *)(v10 + 144) = a3;
  *(_QWORD *)(v10 + 152) = _Block_copy(a4);
  *(_QWORD *)(v10 + 160) = _Block_copy(a5);
  _C3DFXMetalProgramUpdateHashWithLibrary((_QWORD *)v10);
  return v10;
}

void _C3DFXMetalProgramUpdateHashWithSource(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const __CFDictionary *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v9 = 0;
  v10 = &v9;
  v11 = 0x4800000000;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v12 = a1;
  v2 = (const void *)a1[10];
  if (v2)
    v2 = (const void *)CFHash(v2);
  *(_QWORD *)&v13 = v2;
  v3 = (const void *)a1[11];
  if (v3)
    v3 = (const void *)CFHash(v3);
  *((_QWORD *)&v13 + 1) = v3;
  v4 = (const void *)a1[12];
  if (v4)
    v4 = (const void *)CFHash(v4);
  v15 = 0;
  v14 = (unint64_t)v4;
  v5 = (const __CFDictionary *)a1[14];
  if (v5)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = ___C3DFXMetalProgramUpdateHashWithSource_block_invoke;
    v8[3] = &unk_1EA5A53D0;
    v8[4] = &v9;
    C3DCFDictionaryApplyBlockBySortingStringKeys(v5, (uint64_t)v8);
  }
  v6 = 0;
  v7 = 0x3EDF6BA1375BCBF0;
  do
  {
    v7 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v10[v6 + 3]) ^ ((0xC6A4A7935BD1E995 * v10[v6 + 3]) >> 47))) ^ v7);
    ++v6;
  }
  while (v6 != 6);
  a1[21] = (0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v7 ^ (v7 >> 47))) >> 47);
  _Block_object_dispose(&v9, 8);
}

uint64_t C3DFXMetalProgramCreateFromLibraryWithConstants(const void *a1, const void *a2, int a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t v12;
  const void *v13;
  CFTypeRef v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  CFTypeRef v22;

  v12 = C3DFXMetalProgramCreate();
  v13 = *(const void **)(v12 + 80);
  if (v13 != a1)
  {
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v12 + 80) = 0;
    }
    if (a1)
      v14 = CFRetain(a1);
    else
      v14 = 0;
    *(_QWORD *)(v12 + 80) = v14;
  }
  v15 = *(const void **)(v12 + 88);
  if (v15 != a2)
  {
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v12 + 88) = 0;
    }
    if (a2)
      v16 = CFRetain(a2);
    else
      v16 = 0;
    *(_QWORD *)(v12 + 88) = v16;
  }
  v17 = *(const void **)(v12 + 96);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(v12 + 96) = 0;
  }
  v18 = *(const void **)(v12 + 104);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(v12 + 104) = 0;
  }
  v19 = *(const void **)(v12 + 112);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(v12 + 112) = 0;
  }
  v20 = *(const void **)(v12 + 120);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(v12 + 120) = 0;
  }
  v21 = *(const void **)(v12 + 128);
  if (v21 != a4)
  {
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v12 + 128) = 0;
    }
    if (a4)
      v22 = CFRetain(a4);
    else
      v22 = 0;
    *(_QWORD *)(v12 + 128) = v22;
  }
  *(_DWORD *)(v12 + 144) = a3;
  *(_QWORD *)(v12 + 152) = _Block_copy(a5);
  *(_QWORD *)(v12 + 160) = _Block_copy(a6);
  _C3DFXMetalProgramUpdateHashWithLibrary((_QWORD *)v12);
  return v12;
}

uint64_t C3DFXMetalProgramCreateFromSourceWithConstants(const void *a1, const void *a2, int a3, const void *a4, const void *a5, const void *a6, const void *a7, int a8)
{
  uint64_t v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  const void *v24;
  CFTypeRef v25;
  const void *v26;
  CFTypeRef v27;
  const void *v28;
  CFTypeRef v29;
  const void *v30;
  const void *v31;

  v16 = C3DFXMetalProgramCreate();
  v17 = *(const void **)(v16 + 80);
  if (v17 != a1)
  {
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v16 + 80) = 0;
    }
    if (a1)
      v18 = CFRetain(a1);
    else
      v18 = 0;
    *(_QWORD *)(v16 + 80) = v18;
  }
  v19 = *(const void **)(v16 + 88);
  if (v19 != a2)
  {
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v16 + 88) = 0;
    }
    if (a2)
      v20 = CFRetain(a2);
    else
      v20 = 0;
    *(_QWORD *)(v16 + 88) = v20;
  }
  v21 = *(const void **)(v16 + 96);
  if (v21 != a4)
  {
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v16 + 96) = 0;
    }
    if (a4)
      v22 = CFRetain(a4);
    else
      v22 = 0;
    *(_QWORD *)(v16 + 96) = v22;
  }
  v23 = *(const void **)(v16 + 104);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(v16 + 104) = 0;
  }
  v24 = *(const void **)(v16 + 112);
  if (v24 != a5)
  {
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(v16 + 112) = 0;
    }
    if (a5)
      v25 = CFRetain(a5);
    else
      v25 = 0;
    *(_QWORD *)(v16 + 112) = v25;
  }
  v26 = *(const void **)(v16 + 120);
  if (v26 != a6)
  {
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(v16 + 120) = 0;
    }
    if (a6)
      v27 = CFRetain(a6);
    else
      v27 = 0;
    *(_QWORD *)(v16 + 120) = v27;
  }
  v28 = *(const void **)(v16 + 128);
  if (v28 != a7)
  {
    if (v28)
    {
      CFRelease(v28);
      *(_QWORD *)(v16 + 128) = 0;
    }
    if (a7)
      v29 = CFRetain(a7);
    else
      v29 = 0;
    *(_QWORD *)(v16 + 128) = v29;
  }
  *(_DWORD *)(v16 + 144) = a3;
  v30 = *(const void **)(v16 + 152);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(v16 + 152) = 0;
  }
  v31 = *(const void **)(v16 + 160);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(v16 + 160) = 0;
  }
  if (a8)
    _C3DFXMetalProgramUpdateHashWithSource((_QWORD *)v16);
  return v16;
}

CFHashCode C3DFXMetalProgramReplaceSourceCodeWithLibrary(_QWORD *cf, const void *a2, const void *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if (!cf)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = CFGetTypeID(cf);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v14 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = (const void *)cf[12];
  if (v23)
  {
    CFRelease(v23);
    cf[12] = 0;
  }
  v24 = (const void *)cf[19];
  if (v24)
  {
    CFRelease(v24);
    cf[19] = 0;
  }
  v25 = (const void *)cf[20];
  if (v25)
  {
    CFRelease(v25);
    cf[20] = 0;
  }
  cf[19] = _Block_copy(a2);
  cf[20] = _Block_copy(a3);
  return _C3DFXMetalProgramUpdateHashWithLibrary(cf);
}

CFTypeRef C3DFXMetalProgramSetFunctionName(char *cf, int a2, CFTypeRef a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  CFTypeRef result;
  _QWORD *v25;
  CFTypeRef v26;

  if (!cf)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = CFGetTypeID(cf);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v14 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v15 = scn_default_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = &cf[8 * a2];
  v26 = (CFTypeRef)*((_QWORD *)v23 + 10);
  v25 = v23 + 80;
  result = v26;
  if (v26 != a3)
  {
    if (result)
    {
      CFRelease(result);
      *v25 = 0;
    }
    if (a3)
      result = CFRetain(a3);
    else
      result = 0;
    *v25 = result;
  }
  return result;
}

uint64_t C3DFXMetalProgramGetSourceCodeForShaderCollection(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v10 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return *((_QWORD *)cf + 13);
}

uint64_t C3DFXMetalProgramGetPreprocessorAllPossibleMacros(CFTypeRef cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v10 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return *((_QWORD *)cf + 15);
}

void C3DFXMetalProgramSetBufferBinding(_QWORD *a1, const void *a2, const void *a3)
{
  CFTypeID v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFDictionary *Mutable;

  v6 = CFGetTypeID(a1);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v6 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v7 = scn_default_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  Mutable = (__CFDictionary *)a1[17];
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    a1[17] = Mutable;
  }
  if (a3)
    CFDictionarySetValue(Mutable, a2, a3);
  else
    CFDictionaryRemoveValue(Mutable, a2);
}

uint64_t C3DFXMetalProgramGetLinkedFunctionsFamilies(unsigned int *cf)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeID v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!cf)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DResourceManagerMakeProgramResident_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = CFGetTypeID(cf);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v10 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return cf[36];
}

uint64_t C3DFXMetalProgramGetLibraryProviderBlock(_QWORD *a1)
{
  CFTypeID v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = CFGetTypeID(a1);
  if (C3DFXMetalProgramGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXMetalProgramGetTypeID_onceToken, &__block_literal_global_139);
  if (v2 != C3DFXMetalProgramGetTypeID_typeID)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      C3DFXMetalProgramGetHash_cold_1(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return a1[20];
}

CFStringRef _C3DFXMetalProgramCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
}

CFMutableArrayRef _C3DFXMetalProgramCopyInstanceVariables()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
}

uint64_t C3DFXPassInputCreate()
{
  uint64_t result;

  if (C3DFXPassInputGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXPassInputGetTypeID_onceToken, &__block_literal_global_140);
  result = C3DTypeCreateInstance_(C3DFXPassInputGetTypeID_typeID, 0x60uLL);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = -1;
  *(_QWORD *)(result + 24) = 1;
  return result;
}

void C3DFXPassInputSetSemantic(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 32) = a2;
}

void C3DFXPassInputSetChannelIndex(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 104) = a2;
}

uint64_t C3DFXPassInputGetSymbolName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 56);
}

CFTypeRef C3DFXPassInputSetSymbolName(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 56);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

CFTypeRef C3DFXPassInputSetSampler(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

void C3DFXPassInputSetUniformIndex(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DGeometryCreateCopy_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 40) = a2;
}

void *C3DFXPassInputSetBindingBlock(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;
  int v6;

  v4 = *(const void **)(a1 + 96);
  if (v4)
    _Block_release(v4);
  if (aBlock)
  {
    result = _Block_copy(aBlock);
    v6 = 3;
  }
  else
  {
    result = 0;
    v6 = 2;
  }
  *(_QWORD *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 16) = v6;
  return result;
}

void __updateRequireLighting(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t CommonProfileIfNoTechnique;
  unsigned int v16;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_DWORD *)(a1 + 24);
  v11 = v10 > 6;
  v12 = (1 << v10) & 0x4C;
  v13 = v11 || v12 == 0;
  if (v13
    || (v14 = *(_QWORD *)(a1 + 96)) != 0
    && ((CommonProfileIfNoTechnique = C3DMaterialGetCommonProfileIfNoTechnique(v14)) == 0
     || C3DEffectCommonProfileGetLightingModel(CommonProfileIfNoTechnique) == 4))
  {
    v16 = *(_DWORD *)(a1 + 184) & 0xFFFF7FFF;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 184) | 0x8000;
  }
  *(_DWORD *)(a1 + 184) = v16;
}

uint64_t C3DFXPassCreate()
{
  uint64_t Instance;
  int v1;

  if (C3DFXPassGetTypeID_onceToken != -1)
    dispatch_once(&C3DFXPassGetTypeID_onceToken, &__block_literal_global_3_8);
  Instance = C3DTypeCreateInstance_(C3DFXPassGetTypeID_typeID, 0x230uLL);
  *(_QWORD *)(Instance + 536) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v1 = *(_DWORD *)(Instance + 184);
  *(_QWORD *)(Instance + 376) = 0x3FF0000000000000;
  *(_QWORD *)(Instance + 384) = 0x3FF0000000000000;
  *(_BYTE *)(Instance + 368) = *(_BYTE *)(Instance + 368) & 0xF8 | 1;
  *(_BYTE *)(Instance + 480) = 1;
  *(_BYTE *)(Instance + 32) = 1;
  *(_DWORD *)(Instance + 180) = 1;
  *(_DWORD *)(Instance + 184) = v1 | 0x310B;
  return Instance;
}

uint64_t C3DFXPassSetEnabled(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

uint64_t C3DFXPassIsEnabled(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

CFTypeRef C3DFXPassSetProgramName(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 48);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

CFTypeRef C3DFXPassSetMetalVertexShaderFunction(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 56);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

CFTypeRef C3DFXPassSetMetalFragmentShaderFunction(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

CFTypeRef C3DFXPassSetMetalLibraryName(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

void C3DFXPassSetClientProgram(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 80) = a2;
}

CFTypeRef C3DFXPassSetProgram(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 88);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 88) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 88) = result;
  }
  return result;
}

uint64_t C3DFXPassGetProgram(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 88);
}

BOOL C3DFXPassGetProgramIsOpaque(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_DWORD *)(a1 + 180) != 0;
}

void C3DFXPassSetDrawInstruction(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_DWORD *)(a1 + 24) = a2;
  __updateRequireLighting(a1);
}

uint64_t C3DFXPassGetDrawInstruction(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned int *)(a1 + 24);
}

void C3DFXPassSetMaterial(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  CFTypeRef v21;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (cf)
      goto LABEL_6;
  }
  else if (cf)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DGeometryAppendMaterial_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(CFTypeRef *)(a1 + 96);
  if (v20 != cf)
  {
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
      v21 = CFRetain(cf);
    else
      v21 = 0;
    *(_QWORD *)(a1 + 96) = v21;
  }
  __updateRequireLighting(a1);
}

uint64_t C3DFXPassGetMaterial(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 96);
}

void C3DFXPassSetClearBehavior(uint64_t a1, int a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  if (!a1)
  {
    v8 = scn_default_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (a3)
    v16 = 2;
  else
    v16 = 0;
  if (a4)
    v17 = 4;
  else
    v17 = 0;
  *(_DWORD *)(a1 + 184) = v16 | a2 | v17 | *(_DWORD *)(a1 + 184) & 0xFFFFFFF8;
}

uint64_t C3DFXPassGetClearColor(uint64_t a1, uint64_t a2)
{
  if ((C3DFXPassGetUsesSceneBackgroundColor(a1) & 1) == 0)
    return *(_QWORD *)(a1 + 128);
  return a2;
}

uint64_t C3DFXPassGetUsesSceneBackgroundColor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 185) >> 1) & 1;
}

CFStringRef C3DFXPassSetName(uint64_t a1, CFStringRef theString)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFStringRef result;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (theString)
      goto LABEL_6;
  }
  else if (theString)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DEntityGetAttribute_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  result = *(CFStringRef *)(a1 + 16);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (theString)
      result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t C3DFXPassGetName(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 16);
}

uint64_t C3DFXPassGetFramebufferDescription(uint64_t a1)
{
  return a1 + 288;
}

uint64_t C3DFXPassIsTopLevel(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 186) >> 5) & 1;
}

void C3DFXPassSetPointOfView(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_QWORD *)(a1 + 448) = a2;
}

uint64_t C3DFXPassGetPointOfView(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 448);
}

void C3DFXPassSetViewport(__n128 *a1, __n128 a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;

  if (!a1)
  {
    v12 = a2;
    v3 = scn_default_log();
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    a2 = v12;
    if (v4)
    {
      __updateRequireLighting_cold_1(v3, v5, v6, v7, v8, v9, v10, v11);
      a2 = v12;
    }
  }
  a1[11].n128_u32[2] |= 0x40000u;
  a1[9] = a2;
}

uint64_t C3DFXPassGetSubViewport(float32x4_t *a1, float32x4_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int32 v12;
  float32x4_t v13;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = a1[11].u32[2];
  if ((v12 & 0x80000) != 0)
  {
    v13.i64[0] = a2->i64[1];
    v13.i64[1] = v13.i64[0];
    *a2 = vrndaq_f32(vmulq_f32(v13, a1[10]));
  }
  return (v12 >> 19) & 1;
}

uint64_t C3DFXPassGetHasCustomViewport(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 186) >> 2) & 1;
}

__n128 C3DFXPassGetViewport(__n128 *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return a1[9];
}

CFTypeRef C3DFXPassSetRootNode(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 456);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 456) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 456) = result;
  }
  return result;
}

uint64_t C3DFXPassGetRootNode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 456);
}

uint64_t C3DFXPassGetNodes(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 464);
}

uint64_t C3DFXPassGetLayerMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 480);
}

CFTypeRef C3DFXPassSetMirrorNode(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 472);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 472) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 472) = result;
  }
  return result;
}

uint64_t C3DFXPassGetMirrorNode(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 472);
}

void C3DFXPassSetInstallViewport(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 4096;
  else
    v12 = 0;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 184) & 0xFFFFEFFF | v12;
}

uint64_t C3DFXPassGetIgnoreInifiniteFloor(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 184) >> 5) & 1;
}

uint64_t C3DFXPassGetDrawOnlyShadowCaster(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(unsigned __int8 *)(a1 + 185) >> 2) & 1;
}

uint64_t C3DFXPassHasConstantAlpha(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_BYTE *)(a1 + 185) & 1;
}

uint64_t C3DFXPassGetIncludeCategoryMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 200);
}

uint64_t C3DFXPassGetExcludeCategoryMask(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 208);
}

uint64_t C3DFXPassRequiresLighting(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 185) >> 7;
}

uint64_t C3DFXPassGetForceJitteringOff(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(unsigned __int8 *)(a1 + 184) >> 7;
}

BOOL C3DFXPassGetUpdatesMainFrameBuffer(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return (*(_BYTE *)(a1 + 184) & 0x40) == 0;
}

void C3DFXPassSetUpdatesMainFrameBuffer(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  if (a2)
    v12 = 0;
  else
    v12 = 64;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 184) & 0xFFFFFFBF | v12;
}

uint64_t C3DFXPassGetStorage(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 && (v11 = *(_QWORD *)(v10 + 96)) != 0)
    return *(_QWORD *)v11;
  else
    return 0;
}

double C3DFXPassSetupWithPropertyList(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  __int128 v30;
  int v31;
  void *v32;
  _BOOL4 v33;
  void *v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  void *v51;
  BOOL v52;
  void *v53;
  int v54;
  void *v55;
  int v56;
  void *v57;
  void *v58;
  const void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  void *v79;
  const void *v80;
  const void *Name;
  const __CFDictionary *Value;
  const void *v83;
  double result;
  const void *v85;
  const __CFDictionary *v86;
  const __CFDictionary *v87;
  const __CFDictionary *v88;
  unsigned int DrawInstruction;
  char v95;
  uint64_t v96;
  char v97;
  _BYTE *v98;
  char v99;
  char v100;
  NSObject *v101;
  NSObject *v102;
  BOOL v103;
  uint64_t v104;
  const __CFDictionary *v105;
  _OWORD v106[2];
  uint64_t v107;
  _BYTE context[32];
  _OWORD v109[2];
  _BYTE v110[24];
  uint64_t v111;
  uint64_t v112;

  v5 = a1;
  v112 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v14 = (void *)objc_msgSend((id)objc_msgSend(a2, "valueForKey:", CFSTR("draw")), "lowercaseString");
  if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_scene")) & 1) != 0
    || (objc_msgSend(v14, "isEqualToString:", CFSTR("draw_node")) & 1) != 0)
  {
    v15 = 3;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_main_scene")) & 1) != 0)
  {
    v15 = 8;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_nodes")) & 1) != 0)
  {
    v15 = 6;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_geometry")) & 1) != 0)
  {
    v15 = 2;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_quad")) & 1) != 0)
  {
    v15 = 4;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("metal_custom")) & 1) != 0)
  {
    v15 = 7;
  }
  else if ((objc_msgSend(v14, "isEqualToString:", CFSTR("draw_none")) & 1) != 0
         || (objc_msgSend(v14, "isEqualToString:", CFSTR("none")) & 1) != 0)
  {
    v15 = 1;
  }
  else
  {
    v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("custom"));
  }
  C3DFXPassSetDrawInstruction(v5, v15);
  v16 = (void *)objc_msgSend((id)objc_msgSend(a2, "valueForKey:", CFSTR("stage")), "lowercaseString");
  if ((objc_msgSend(v16, "isEqualToString:", CFSTR("preDraw")) & 1) != 0)
  {
    v17 = 1;
  }
  else if ((objc_msgSend(v16, "isEqualToString:", CFSTR("preFX")) & 1) != 0)
  {
    v17 = 2;
  }
  else if ((objc_msgSend(v16, "isEqualToString:", CFSTR("preToneMap")) & 1) != 0)
  {
    v17 = 3;
  }
  else
  {
    objc_msgSend(v16, "isEqualToString:", CFSTR("postFX"));
    v17 = 4;
  }
  *(_DWORD *)(v5 + 28) = v17;
  v18 = objc_msgSend(a2, "objectForKey:", CFSTR("ignoreFloors"));
  if (v18)
    LOBYTE(v18) = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("ignoreFloors")), "BOOLValue");
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFFDF | (32 * (v18 & 1));
  v19 = objc_msgSend(a2, "objectForKey:", CFSTR("onlyShadowCasters"));
  if (v19)
    LOBYTE(v19) = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("onlyShadowCasters")), "BOOLValue");
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFBFF | ((v19 & 1) << 10);
  v20 = objc_msgSend(a2, "objectForKey:", CFSTR("onlyMovableNodes"));
  if (v20)
    LOBYTE(v20) = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("onlyMovableNodes")), "BOOLValue");
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFF7FF | ((v20 & 1) << 11);
  if (objc_msgSend(a2, "objectForKey:", CFSTR("hasConstantAlpha")))
    v21 = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("hasConstantAlpha")), "BOOLValue");
  else
    v21 = 1;
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFEFF | ((v21 & 1) << 8);
  if (objc_msgSend(a2, "objectForKey:", CFSTR("installViewport")))
    v22 = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("installViewport")), "BOOLValue");
  else
    v22 = 1;
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFEFFF | ((v22 & 1) << 12);
  if (objc_msgSend(a2, "objectForKey:", CFSTR("isViewDependant")))
    v23 = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("isViewDependant")), "BOOLValue");
  else
    v23 = 1;
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFDFFF | ((v23 & 1) << 13);
  if (objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("overridesCustomProgram")), "BOOLValue"))
    v24 = 0x100000;
  else
    v24 = 0;
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFEFFFFF | v24;
  v25 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("layerMask"));
  if (v25)
    *(_BYTE *)(v5 + 480) = _maskValue(v25);
  v26 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("includeCategoryMask"));
  if (v26)
    v27 = _maskValue(v26);
  else
    v27 = -1;
  *(_QWORD *)(v5 + 200) = v27;
  v28 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("excludeCategoryMask"));
  if (v28)
    v28 = (void *)_maskValue(v28);
  *(_QWORD *)(v5 + 208) = v28;
  v29 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("viewport"));
  if (v29)
  {
    *(_DWORD *)(v5 + 184) |= 0x40000u;
    *(_DWORD *)context = 0;
    LODWORD(v106[0]) = 0;
    v107 = 0;
    sscanf((const char *)objc_msgSend(v29, "UTF8String"), "%f %f %f %f", context, v106, (char *)&v107 + 4, &v107);
    *(_QWORD *)&v30 = __PAIR64__(v106[0], *(unsigned int *)context);
    *((_QWORD *)&v30 + 1) = __PAIR64__(v107, HIDWORD(v107));
    *(_OWORD *)(v5 + 144) = v30;
  }
  v31 = objc_msgSend((id)objc_msgSend(a2, "objectForKey:", CFSTR("samples")), "intValue");
  if (!v31)
    LOBYTE(v31) = (*(_DWORD *)(v5 + 24) & 0xFFFFFFFB) == 0;
  *(_BYTE *)(v5 + 176) = v31;
  memset(v106, 0, 28);
  v32 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("cullMode"), C3DRasterizerStatesDescGetDefault(v106));
  v33 = v32 != 0;
  if (v32)
  {
    v34 = v32;
    if ((objc_msgSend(v32, "isEqualToString:", CFSTR("cullFront")) & 1) != 0
      || (objc_msgSend(v34, "isEqualToString:", CFSTR("front")) & 1) != 0)
    {
      v35 = 1;
    }
    else if ((objc_msgSend(v34, "isEqualToString:", CFSTR("cullNone")) & 1) != 0
           || (objc_msgSend(v34, "isEqualToString:", CFSTR("none")) & 1) != 0)
    {
      v35 = 2;
    }
    else
    {
      if ((objc_msgSend(v34, "isEqualToString:", CFSTR("cullBack")) & 1) == 0
        && (objc_msgSend(v34, "isEqualToString:", CFSTR("back")) & 1) == 0)
      {
        v102 = scn_default_log();
        if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          C3DFXPassSetupWithPropertyList_cold_2();
      }
      v35 = 0;
    }
    LODWORD(v106[0]) = v35;
  }
  v36 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("colorStates"));
  if (v36)
  {
    v37 = v36;
    v38 = (void *)objc_msgSend(v36, "objectForKey:", CFSTR("clearColor"));
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, "isEqualToString:", CFSTR("sceneBackground"));
      v41 = *(_DWORD *)(v5 + 184);
      if (v40)
      {
        v42 = v41 | 0x200;
      }
      else
      {
        *(_DWORD *)(v5 + 184) = v41 & 0xFFFFFDFF;
        sscanf((const char *)objc_msgSend(v39, "UTF8String"), "%f %f %f %f", v5 + 128, v5 + 132, v5 + 136, v5 + 140);
        v42 = *(_DWORD *)(v5 + 184);
      }
      *(_DWORD *)(v5 + 184) = v42 | 1;
    }
    v43 = (void *)objc_msgSend(v37, "objectForKey:", CFSTR("clear"));
    if (v43)
      *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFFFE | objc_msgSend(v43, "BOOLValue");
  }
  v44 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("depthStates"));
  if (!v44)
    goto LABEL_73;
  v45 = v44;
  v46 = (void *)objc_msgSend(v44, "objectForKey:", CFSTR("enableWrite"));
  if (v46)
  {
    BYTE9(v106[0]) = objc_msgSend(v46, "BOOLValue");
    v33 = 1;
  }
  v47 = (void *)objc_msgSend(v45, "objectForKey:", CFSTR("enableRead"));
  if (v47)
  {
    BYTE8(v106[0]) = objc_msgSend(v47, "BOOLValue");
    v33 = 1;
  }
  v48 = (void *)objc_msgSend(v45, "objectForKey:", CFSTR("clear"));
  if (v48)
  {
    if (objc_msgSend(v48, "BOOLValue"))
      v49 = 2;
    else
      v49 = 0;
    *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFFFD | v49;
  }
  v50 = (void *)objc_msgSend(v45, "objectForKey:", CFSTR("func"));
  if (!v50)
  {
LABEL_73:
    v51 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("stencilStates"));
    if (!v51)
    {
      v52 = 0;
      if (!v33)
        goto LABEL_88;
      goto LABEL_87;
    }
    goto LABEL_74;
  }
  BYTE10(v106[0]) = _depthFuncNameToDepthFunc(v50);
  v51 = (void *)objc_msgSend(a2, "objectForKey:", CFSTR("stencilStates"));
  if (v51)
  {
LABEL_74:
    v53 = (void *)objc_msgSend(v51, "objectForKey:", CFSTR("enable"));
    if (v53)
      v54 = objc_msgSend(v53, "BOOLValue");
    else
      v54 = 1;
    BYTE11(v106[0]) = v54;
    v52 = v54 != 0;
    v55 = (void *)objc_msgSend(v51, "objectForKey:", CFSTR("clear"));
    if (v55)
    {
      if (objc_msgSend(v55, "BOOLValue"))
        v56 = 4;
      else
        v56 = 0;
      *(_DWORD *)(v5 + 184) = *(_DWORD *)(v5 + 184) & 0xFFFFFFF3 | v56;
    }
    v57 = (void *)objc_msgSend(v51, "objectForKey:", CFSTR("behavior"));
    if (v57)
      _stencilActionDescrToStencilAction(v57, (_BYTE *)v106 + 13);
    v58 = (void *)objc_msgSend(v51, "objectForKey:", CFSTR("backFaceBehavior"));
    if (v58)
    {
      BYTE12(v106[0]) = 1;
      _stencilActionDescrToStencilAction(v58, (_BYTE *)&v106[1] + 4);
    }
    goto LABEL_87;
  }
  v52 = 0;
LABEL_87:
  *(_OWORD *)context = v106[0];
  *(_OWORD *)&context[12] = *(_OWORD *)((char *)v106 + 12);
  v59 = (const void *)C3DRasterizerStatesCreate((uint64_t)context);
  C3DFXPassSetRasterizerStates(v5, v59);
  C3DRasterizerStatesRelease(v59);
LABEL_88:
  v60 = objc_msgSend(a2, "objectForKey:", CFSTR("blendStates"));
  if (!v60)
    goto LABEL_119;
  v61 = (void *)v60;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    v61 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v61);
  v105 = a3;
  v62 = objc_msgSend(v61, "count");
  if (v62 >= 5)
  {
    v63 = scn_default_log();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      C3DFXPassSetupWithPropertyList_cold_1(v63);
    v64 = 4;
    goto LABEL_96;
  }
  v64 = v62;
  if (v62 >= 1)
  {
LABEL_96:
    v103 = v52;
    v104 = v5;
    v65 = 0;
    v66 = &context[3];
    do
    {
      v67 = (void *)objc_msgSend(v61, "objectAtIndex:", v65);
      v68 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("enable"));
      if (v68)
        v69 = objc_msgSend(v68, "BOOLValue");
      else
        v69 = 1;
      *(v66 - 3) = v69;
      v70 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("colorSrc"));
      if (v70)
        v71 = _blendFactorFromString(v70);
      else
        v71 = 1;
      *(v66 - 1) = v71;
      v72 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("colorDst"));
      if (v72)
        v73 = _blendFactorFromString(v72);
      else
        v73 = 5;
      *v66 = v73;
      *(v66 - 2) = 0;
      v74 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("alphaSrc"));
      if (v74)
      {
        v75 = _blendFactorFromString(v74);
        *(v66 - 2) = 1;
      }
      else
      {
        v75 = 1;
      }
      v66[2] = v75;
      v76 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("alphaDst"));
      if (v76)
      {
        v77 = _blendFactorFromString(v76);
        *(v66 - 2) = 1;
      }
      else
      {
        v77 = 5;
      }
      v66[3] = v77;
      v78 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("colorOp"));
      if (v78)
        LOBYTE(v78) = _blendOpFromString(v78);
      v66[1] = (char)v78;
      v79 = (void *)objc_msgSend(v67, "objectForKey:", CFSTR("alphaOp"));
      if (v79)
      {
        LOBYTE(v79) = _blendOpFromString(v79);
        *(v66 - 2) = 1;
      }
      v66[4] = (char)v79;
      ++v65;
      v66 += 8;
    }
    while (v64 != v65);
    v5 = v104;
    v52 = v103;
  }
  v80 = (const void *)C3DBlendStatesCreate((uint64_t)context, v64);
  C3DFXPassSetBlendStates(v5, v80);
  CFRelease(v80);
  a3 = v105;
LABEL_119:
  Name = (const void *)C3DFXPassGetName(v5);
  Value = (const __CFDictionary *)CFDictionaryGetValue(a3, CFSTR("passes"));
  v83 = CFDictionaryGetValue(a3, CFSTR("targets"));
  if (Value)
  {
    v85 = v83;
    v86 = (const __CFDictionary *)CFDictionaryGetValue(Value, Name);
    if (v86)
    {
      v87 = (const __CFDictionary *)CFDictionaryGetValue(v86, CFSTR("outputs"));
      if (v87)
      {
        v88 = v87;
        memset(v110, 0, sizeof(v110));
        *(_OWORD *)&context[16] = 0u;
        memset(v109, 0, sizeof(v109));
        *(_QWORD *)&context[8] = v85;
        *(_QWORD *)context = 0x1003F800000;
        memset_pattern16(v109, &xmmword_1DD009A00, 0x20uLL);
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v110[12] = _D0;
        v111 = 0;
        v110[22] = v52;
        DrawInstruction = C3DFXPassGetDrawInstruction(v5);
        v95 = 0;
        if (DrawInstruction <= 6 && ((1 << DrawInstruction) & 0x4C) != 0)
        {
          context[4] = 1;
          v95 = 41;
        }
        *(_QWORD *)&context[24] = 0;
        v110[8] = v95;
        CFDictionaryApplyFunction(v88, (CFDictionaryApplierFunction)_parseTargets, context);
        v96 = 0;
        *(_BYTE *)(v5 + 363) = (*(_BYTE *)(v5 + 363) & 0xFC | context[4] | (2 * v110[21])) ^ 1;
        *(_BYTE *)(v5 + 360) = v110[8];
        *(_DWORD *)(v5 + 424) = *(_DWORD *)&v110[12];
        v97 = v111;
        v98 = (_BYTE *)(v5 + 299);
        v99 = context[5] | (2 * v110[20]);
        do
        {
          if (context[v96 + 24])
          {
            v100 = *v98 & 0xEC | v99;
            *(v98 - 3) = context[v96 + 24];
            *v98 = (v100 | (16 * v110[v96])) ^ 1;
            *(_DWORD *)(v5 + 4 * v96 + 392) = *(_DWORD *)&context[4 * v96 + 32];
            *(v98 - 1) = v97;
            *(_BYTE *)(v5 + 368) = *(_BYTE *)(v5 + 368) & 0xF8 | (v96 + 1) & 7;
          }
          ++v96;
          v98 += 8;
        }
        while (v96 != 8);
        if (*(float *)&context[16] == 0.0 || *(float *)&context[20] == 0.0)
        {
          C3DFramebufferDescriptionSetViewportDependant(v5 + 288, 1);
        }
        else
        {
          C3DFramebufferDescriptionSetViewportDependant(v5 + 288, 0);
          *(_QWORD *)(v5 + 288) = *(_QWORD *)&context[16];
        }
        result = *(float *)context;
        *(double *)(v5 + 376) = *(float *)context;
        *(double *)(v5 + 384) = result;
      }
      else
      {
        *(_BYTE *)(v5 + 360) = 0;
        *(_BYTE *)(v5 + 296) = 0;
      }
    }
    else
    {
      v101 = scn_default_log();
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)context = 138412546;
        *(_QWORD *)&context[4] = v5;
        *(_WORD *)&context[12] = 2112;
        *(_QWORD *)&context[14] = Name;
        _os_log_impl(&dword_1DCCB8000, v101, OS_LOG_TYPE_DEFAULT, "Warning: can't create a fbo description for pass %@ - can't find pass description with name %@", context, 0x16u);
      }
    }
  }
  return result;
}

uint64_t _maskValue(void *a1)
{
  uint64_t v3;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend(a1, "unsignedIntegerValue");
  if (!objc_msgSend(a1, "hasPrefix:", CFSTR("0x")))
    return objc_msgSend(a1, "integerValue");
  v3 = 0;
  sscanf((const char *)objc_msgSend(a1, "cStringUsingEncoding:", 4), "%lu", &v3);
  return v3;
}

uint64_t _depthFuncNameToDepthFunc(void *a1)
{
  NSObject *v3;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("never")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("always")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("equal")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("notEqual")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("less")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("lessEqual")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("greater")) & 1) == 0)
  {
    if ((objc_msgSend(a1, "isEqualToString:", CFSTR("greaterEqual")) & 1) != 0)
      return 7;
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      _depthFuncNameToDepthFunc_cold_1();
  }
  return 6;
}

void *_stencilActionDescrToStencilAction(void *a1, _BYTE *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *result;

  v4 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("depthFail"));
  if (v4)
    a2[5] = _stencilOpNameToOp(v4);
  v5 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("fail"));
  if (v5)
    a2[6] = _stencilOpNameToOp(v5);
  v6 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("pass"));
  if (v6)
    a2[4] = _stencilOpNameToOp(v6);
  v7 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("function"));
  if (v7)
    *a2 = _depthFuncNameToDepthFunc(v7);
  v8 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("readMask"));
  if (v8)
    a2[1] = objc_msgSend(v8, "unsignedCharValue");
  v9 = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("writeMask"));
  if (v9)
    a2[2] = objc_msgSend(v9, "unsignedCharValue");
  result = (void *)objc_msgSend(a1, "valueForKey:", CFSTR("referenceValue"));
  if (result)
  {
    result = (void *)objc_msgSend(result, "unsignedCharValue");
    a2[3] = (_BYTE)result;
  }
  return result;
}

CFTypeRef C3DFXPassSetRasterizerStates(uint64_t a1, CFTypeRef a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 112);
  if (result != a2)
  {
    C3DRasterizerStatesRelease(result);
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *(_QWORD *)(a1 + 112) = result;
  }
  return result;
}

CFTypeRef C3DFXPassSetBlendStates(uint64_t a1, CFTypeRef cf)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = *(CFTypeRef *)(a1 + 104);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 104) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 104) = result;
  }
  return result;
}

void _parseTargets(const void *a1, const void *a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  const __CFNumber *v13;
  const __CFNumber *v14;
  const char *v15;
  const char *CString;
  const void *v17;
  const __CFArray *v18;
  const void *v19;
  const void *v20;
  int v21;
  NSObject *v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  char v25;
  NSObject *v26;
  unsigned int v27;
  uint8_t buf[4];
  const void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(const __CFDictionary **)(a3 + 8);
  if (v5)
    Value = (const __CFDictionary *)CFDictionaryGetValue(v5, a2);
  else
    Value = 0;
  if (CFEqual(a1, CFSTR("color")) || CFEqual(a1, CFSTR("color0")))
  {
    v7 = 1;
LABEL_7:
    *(_BYTE *)(a3 + 5) = 0;
    if (Value)
    {
      v8 = CFDictionaryGetValue(Value, CFSTR("format"));
      if (v8)
      {
        v9 = v8;
        v10 = C3DRenderBufferFormatFromString();
        if (v10)
        {
LABEL_13:
          v12 = (v7 - 1);
          *(_BYTE *)(a3 + v12 + 24) = v10;
          *(_BYTE *)(a3 + v12 + 64) = objc_msgSend((id)-[__CFDictionary objectForKeyedSubscript:](Value, "objectForKeyedSubscript:", CFSTR("mipmapped")), "BOOLValue");
          if (!Value)
            return;
          v13 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
          if (v13)
            CFNumberGetValue(v13, kCFNumberFloatType, (void *)(a3 + 4 * v12 + 32));
          goto LABEL_16;
        }
        v11 = scn_default_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v29 = v9;
          _os_log_impl(&dword_1DCCB8000, v11, OS_LOG_TYPE_DEFAULT, "Warning: unknown texture format : %@", buf, 0xCu);
        }
      }
    }
    LOBYTE(v10) = 1;
    goto LABEL_13;
  }
  if (CFEqual(a1, CFSTR("color1")))
  {
    v7 = 2;
    goto LABEL_7;
  }
  if (CFEqual(a1, CFSTR("color2")))
  {
    v7 = 3;
    goto LABEL_7;
  }
  if (CFEqual(a1, CFSTR("color3")))
  {
    v7 = 4;
    goto LABEL_7;
  }
  if (!CFEqual(a1, CFSTR("depth")))
  {
    if (CFEqual(a1, CFSTR("stencil")))
    {
      *(_BYTE *)(a3 + 4) = 0;
      *(_BYTE *)(a3 + 72) = 44;
      if (!Value)
        return;
      v24 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
      if (v24)
        CFNumberGetValue(v24, kCFNumberFloatType, (void *)(a3 + 80));
      v7 = 5;
      goto LABEL_16;
    }
    v26 = scn_default_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      _parseTargets_cold_1();
  }
  *(_BYTE *)(a3 + 4) = 0;
  if (!Value)
  {
    if (*(_BYTE *)(a3 + 86))
      v25 = 44;
    else
      v25 = 41;
    *(_BYTE *)(a3 + 72) = v25;
    return;
  }
  v19 = CFDictionaryGetValue(Value, CFSTR("format"));
  if (!v19)
    goto LABEL_40;
  v20 = v19;
  v21 = C3DRenderBufferFormatFromString();
  if (!v21)
  {
    v22 = scn_default_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v20;
      _os_log_impl(&dword_1DCCB8000, v22, OS_LOG_TYPE_DEFAULT, "Warning: unknown depth texture format : %@", buf, 0xCu);
    }
LABEL_40:
    if (*(_BYTE *)(a3 + 86))
      LOBYTE(v21) = 44;
    else
      LOBYTE(v21) = 41;
  }
  *(_BYTE *)(a3 + 72) = v21;
  v23 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
  if (v23)
    CFNumberGetValue(v23, kCFNumberFloatType, (void *)(a3 + 76));
  v7 = 0;
LABEL_16:
  v14 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
  if (v14)
    CFNumberGetValue(v14, kCFNumberFloatType, (void *)a3);
  v15 = (const char *)CFDictionaryGetValue(Value, CFSTR("size"));
  if (v15)
  {
    v27 = 0;
    *(_DWORD *)buf = 0;
    CString = SCNStringGetCString(v15);
    sscanf(CString, "%fx%f", buf, &v27);
    *(_QWORD *)(a3 + 16) = __PAIR64__(v27, *(unsigned int *)buf);
  }
  v17 = CFDictionaryGetValue(Value, CFSTR("target"));
  if (v17 && CFEqual(v17, CFSTR("texture_rectangle")))
  {
    if (v7 == 1)
      *(_BYTE *)(a3 + 84) = 1;
    else
      *(_BYTE *)(a3 + 85) = 1;
  }
  v18 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("usage"));
  if (v18)
    *(_QWORD *)(a3 + 88) = SCNTextureUsageFromStrings(v18);
}

void C3DFXPassBindInputWithSymbol(uint64_t a1, const void *a2, void *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t ValueOffsetForSymbol;
  CFTypeID v9;
  uint64_t UniformIndex;
  char *NextUniformIndex;
  __int16 v12;

  v6 = C3DFXPassAddInputWithName(a1, a2);
  C3DFXPassInputSetSymbolName((uint64_t)v6, a3);
  v7 = *(_QWORD *)(a1 + 40);
  v12 = 0;
  ValueOffsetForSymbol = C3DFXTechniqueGetValueOffsetForSymbol(v7, a3, &v12, 0);
  *((_DWORD *)v6 + 4) = 2;
  *((_WORD *)v6 + 10) = v12;
  v6[3] = 1;
  v6[11] = ValueOffsetForSymbol;
  v9 = CFGetTypeID(*(CFTypeRef *)(a1 + 88));
  if (v9 == C3DFXGLSLProgramGetTypeID())
  {
    UniformIndex = C3DFXGLSLProgramGetUniformIndex(*(CFDictionaryRef **)(a1 + 88), a2);
    if (UniformIndex == -1)
    {
      NextUniformIndex = (char *)C3DFXGLSLProgramGetNextUniformIndex(*(CFTypeRef *)(a1 + 88));
      v6[5] = NextUniformIndex;
      C3DFXGLSLProgramSetUniformIndex(*(CFMutableDictionaryRef **)(a1 + 88), a2, NextUniformIndex);
    }
    else
    {
      v6[5] = UniformIndex;
    }
  }
}

_QWORD *C3DFXPassAddInputWithName(uint64_t a1, const void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DFXContextIsMainPass_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXPassAddInputWithName_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
LABEL_6:
  v20 = *(_QWORD *)(a1 + 520);
  if (v20 == *(_QWORD *)(a1 + 528))
  {
    v21 = 2 * v20;
    if (v21 <= 1)
      v21 = 1;
    *(_QWORD *)(a1 + 528) = v21;
    *(_QWORD *)(a1 + 512) = malloc_type_realloc(*(void **)(a1 + 512), 8 * v21, 0x2004093837F09uLL);
  }
  v22 = (_QWORD *)C3DFXPassInputCreate();
  v23 = *(_QWORD *)(a1 + 512);
  v24 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v24 + 1;
  *(_QWORD *)(v23 + 8 * v24) = v22;
  v22[6] = CFRetain(a2);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 536), a2, v22);
  return v22;
}

void C3DFXPassBindInputWithSemantic(uint64_t a1, const void *a2, int a3)
{
  _QWORD *v6;
  const void *v7;
  CFTypeID v8;
  uint64_t UniformIndex;
  char *NextUniformIndex;

  v6 = C3DFXPassAddInputWithName(a1, a2);
  C3DFXPassInputSetSymbolName((uint64_t)v6, a2);
  *((_DWORD *)v6 + 8) = a3;
  if ((a3 - 20) <= 8)
    *((_DWORD *)v6 + 4) = 1;
  v7 = *(const void **)(a1 + 88);
  if (v7)
  {
    v8 = CFGetTypeID(v7);
    if (v8 == C3DFXGLSLProgramGetTypeID())
    {
      UniformIndex = C3DFXGLSLProgramGetUniformIndex(*(CFDictionaryRef **)(a1 + 88), a2);
      if (UniformIndex == -1)
      {
        NextUniformIndex = (char *)C3DFXGLSLProgramGetNextUniformIndex(*(CFTypeRef *)(a1 + 88));
        v6[5] = NextUniformIndex;
        C3DFXGLSLProgramSetUniformIndex(*(CFMutableDictionaryRef **)(a1 + 88), a2, NextUniformIndex);
      }
      else
      {
        v6[5] = UniformIndex;
      }
    }
  }
}

const void *C3DFXPassGetInputWithName(uint64_t a1, void *key)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1 && (v4 = scn_default_log(), os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)))
  {
    C3DFXContextIsMainPass_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
    if (key)
      return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
  }
  else if (key)
  {
    return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
  }
  v12 = scn_default_log();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    C3DFXPassAddInputWithName_cold_1(v12, v13, v14, v15, v16, v17, v18, v19);
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
}

void C3DFXPassInitialize(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BOOL4 v14;
  uint64_t Program;
  uint64_t Material;
  uint64_t Technique;
  uint64_t v18;
  uint64_t PassAtIndex;
  const void *v20;
  NSObject *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  CFHashCode v28;
  const void *v29;
  const void *v30;
  uint64_t RenderContext;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  uint32_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  size_t v72;
  void *v73;
  uint64_t v74;
  uint64_t i;
  const void *v76;
  char IsOpaque;
  NSObject *v78;
  uint64_t v79;
  void (*v80)(uint64_t *, uint64_t);
  CFMutableDictionaryRef *v81;
  CFMutableDictionaryRef *v82;
  uint64_t v83;
  CFTypeID v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t UniformIndex;
  NSObject *v88;
  int v89;
  char *NextUniformIndex;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD v99[5];
  _QWORD v100[5];
  uint8_t buf[4];
  uint64_t v102;
  __int16 v103;
  void *v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*a1 + 187) & 8) != 0)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      C3DFXPassInitialize_cold_7(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = *a1;
  v13 = *(void **)(*a1 + 48);
  if ((_DWORD)a2 == 1 && v13 || !(_DWORD)a2 && *(_QWORD *)(v12 + 56))
  {
    v14 = C3DFXPassGetDrawInstruction(v12) == 3 || C3DFXPassGetDrawInstruction(*a1) == 6;
    Program = C3DFXPassGetProgram(*a1);
    if (!Program && v14)
    {
      Material = C3DFXPassGetMaterial(*a1);
      if (!Material)
        goto LABEL_19;
      Technique = C3DMaterialGetTechnique(Material);
      if (!Technique)
        goto LABEL_19;
      v18 = Technique;
      if (C3DFXTechniqueGetPassCount(Technique) != 1)
        goto LABEL_19;
      PassAtIndex = C3DFXTechniqueGetPassAtIndex(v18, 0);
      Program = C3DFXPassGetProgram(PassAtIndex);
    }
    if (Program)
      goto LABEL_76;
LABEL_19:
    if ((_DWORD)a2)
    {
      if (!v13 || (v20 = (const void *)C3DFXGLSLProgramCreateWithName(v13)) == 0)
      {
        v21 = scn_default_log();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          C3DFXPassInitialize_cold_4();
        goto LABEL_76;
      }
      goto LABEL_59;
    }
    v22 = *(_QWORD **)(*a1 + 40);
    if (!v22)
      goto LABEL_55;
    v23 = (id)v22[17];
    if (v23)
      goto LABEL_26;
    if (v22[18] || v22[19])
    {
      RenderContext = C3DEngineContextGetRenderContext(a1[3]);
      if (RenderContext)
      {
        v32 = RenderContext;
        if (v22[18])
          v33 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:");
        else
          v33 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v46 = v33;
        v47 = v22[19];
        if (v47)
        {
          v48 = objc_msgSend(v33, "URLForResource:withExtension:", v47, CFSTR("metallib"));
          if (!v48)
          {
            v50 = scn_default_log();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              v51 = v22[19];
              *(_DWORD *)buf = 138412546;
              v102 = v51;
              v103 = 2112;
              v104 = v46;
              v38 = "Warning: Unable to find metal library named %@ in bundle %@";
              v41 = v50;
              goto LABEL_42;
            }
            goto LABEL_55;
          }
          v49 = (void *)objc_msgSend((id)-[SCNMTLRenderContext device](v32), "newLibraryWithURL:error:", v48, 0);
        }
        else
        {
          v49 = (void *)objc_msgSend((id)-[SCNMTLRenderContext device](v32), "newDefaultLibraryWithBundle:error:", v33, 0);
        }
        v23 = v49;
        if (v23)
        {
LABEL_26:
          v24 = (void *)objc_msgSend(v23, "functionNames");
          v25 = objc_msgSend(v24, "containsObject:", *(_QWORD *)(*a1 + 56));
          v26 = objc_msgSend(v24, "containsObject:", *(_QWORD *)(*a1 + 64));
          v27 = v26;
          if (v25 && (v26 & 1) != 0)
          {
            v28 = CFHash(v23);
            v30 = *(const void **)(*a1 + 56);
            v29 = *(const void **)(*a1 + 64);
            v99[4] = v23;
            v100[0] = MEMORY[0x1E0C809B0];
            v100[1] = 3221225472;
            v100[2] = __C3DFXPassInitialize_block_invoke;
            v100[3] = &__block_descriptor_40_e5_Q8__0l;
            v100[4] = v28;
            v99[0] = MEMORY[0x1E0C809B0];
            v99[1] = 3221225472;
            v99[2] = __C3DFXPassInitialize_block_invoke_2;
            v99[3] = &unk_1EA5A5400;
            v20 = (const void *)C3DFXMetalProgramCreateFromLibrary(v30, v29, 0, v100, v99);
            if (v20)
              goto LABEL_59;
            goto LABEL_55;
          }
          v34 = scn_default_log();
          v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
          if (v25)
          {
            if (!v35)
              goto LABEL_55;
            v36 = *(_QWORD *)(*a1 + 16);
            v37 = *(void **)(*a1 + 64);
            *(_DWORD *)buf = 138412546;
            v102 = v36;
            v103 = 2112;
            v104 = v37;
            v38 = "Warning: Technique for pass \"%@\" has a custom Metal library, but the \"%@\" fragment function is missing";
          }
          else
          {
            if (!v27)
            {
              if (!v35)
                goto LABEL_55;
              v43 = *(_QWORD *)(*a1 + 16);
              v45 = *(void **)(*a1 + 56);
              v44 = *(_QWORD *)(*a1 + 64);
              *(_DWORD *)buf = 138412802;
              v102 = v43;
              v103 = 2112;
              v104 = v45;
              v105 = 2112;
              v106 = v44;
              v38 = "Warning: Technique for pass \"%@\" has a custom Metal library, but the \"%@\" and \"%@\" vertex and "
                    "fragment functions are missing";
              v41 = v34;
              v42 = 32;
              goto LABEL_45;
            }
            if (!v35)
              goto LABEL_55;
            v39 = *(_QWORD *)(*a1 + 16);
            v40 = *(void **)(*a1 + 56);
            *(_DWORD *)buf = 138412546;
            v102 = v39;
            v103 = 2112;
            v104 = v40;
            v38 = "Warning: Technique for pass \"%@\" has a custom Metal library, but the \"%@\" vertex function is missing";
          }
          v41 = v34;
LABEL_42:
          v42 = 22;
LABEL_45:
          _os_log_impl(&dword_1DCCB8000, v41, OS_LOG_TYPE_DEFAULT, v38, buf, v42);
        }
      }
    }
LABEL_55:
    v52 = *a1;
    v53 = *(void **)(*a1 + 72);
    if (v53)
    {
      v54 = C3DGetTextResourceWithNameAllowingHotReload(v53);
      v52 = *a1;
    }
    else
    {
      v54 = 0;
    }
    v55 = *(const void **)(v52 + 56);
    v56 = *(const void **)(v52 + 64);
    v57 = SCNMetalLanguageVersion();
    v20 = (const void *)C3DFXMetalProgramCreateFromSource(v55, v56, 0, v54, 0, 0, 0, v57, 1);
    C3DFXProgramSetClientProgram((uint64_t)v20, *(unsigned __int8 *)(*a1 + 80));
    if (!v20)
    {
      v78 = scn_default_log();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        C3DFXPassInitialize_cold_6((uint64_t)a1, v78);
      goto LABEL_76;
    }
LABEL_59:
    if (v14)
    {
      v58 = (const void *)C3DMaterialCreate();
      C3DMaterialSetDoubleSided((uint64_t)v58, 1);
      C3DFXProgramSetOpaque((uint64_t)v20, 1);
      C3DMaterialSetupSinglePassTechniqueWithProgram((uint64_t)v58, v20);
      v59 = C3DMaterialGetTechnique((uint64_t)v58);
      if (C3DFXTechniqueGetPassCount(v59) != 1)
      {
        v60 = scn_default_log();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_FAULT))
          C3DFXPassInitialize_cold_5(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      v68 = (_QWORD *)C3DFXTechniqueGetPassAtIndex(v59, 0);
      v69 = C3DEngineContextGetRenderContext(a1[3]);
      v70 = (_QWORD *)*a1;
      if (v69)
      {
        v71 = v70[65];
        v68[66] = v71;
        v68[65] = v71;
        v72 = 8 * v71;
        v73 = malloc_type_malloc(8 * v71, 0xD7D6F67EuLL);
        v68[64] = v73;
        memcpy(v73, *(const void **)(*a1 + 512), v72);
        v74 = v68[65];
        if (v74 >= 1)
        {
          for (i = 0; i < v74; ++i)
          {
            v76 = *(const void **)(v68[64] + 8 * i);
            if (v76)
            {
              CFRetain(v76);
              v74 = v68[65];
            }
          }
        }
      }
      else
      {
        *(_OWORD *)(v68 + 65) = *(_OWORD *)(v70 + 65);
        v68[64] = v70[64];
        v70[66] = 0;
        *((_OWORD *)v70 + 32) = 0u;
      }
      C3DFXTechniqueSetParentTechnique(v59, a1[1]);
      C3DFXPassSetMaterial(*a1, v58);
      CFRelease(v58);
    }
    else
    {
      C3DFXPassSetProgram(*a1, v20);
      IsOpaque = C3DFXPassGetProgramIsOpaque(*a1);
      C3DFXProgramSetOpaque((uint64_t)v20, IsOpaque);
    }
    CFRelease(v20);
  }
LABEL_76:
  v79 = *a1;
  v80 = *(void (**)(uint64_t *, uint64_t))(*a1 + 216);
  if (v80)
  {
    v80(a1, a2);
    v79 = *a1;
  }
  v81 = (CFMutableDictionaryRef *)C3DFXPassGetProgram(v79);
  if ((_DWORD)a2 == 1)
  {
    v82 = v81;
    if (v81)
    {
      v83 = *a1;
      v84 = CFGetTypeID(v81);
      if (v84 == C3DFXGLSLProgramGetTypeID())
      {
        if (*(uint64_t *)(v83 + 520) >= 1)
        {
          v85 = 0;
          do
          {
            v86 = *(_QWORD *)(*(_QWORD *)(v83 + 512) + 8 * v85);
            if ((*(_BYTE *)(v86 + 80) & 4) != 0)
            {
              if (!*(_DWORD *)(v86 + 32))
              {
                v88 = scn_default_log();
                if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
                  C3DFXPassInitialize_cold_1(buf, &v102, v88);
              }
              v89 = C3DVertexAttribFromParameterSemantic(*(_DWORD *)(v86 + 32), *(_DWORD *)(v86 + 104));
              if (v89 != 14)
                C3DFXGLSLProgramSetAttributeIndex(v82, *(const void **)(v86 + 48), v89);
            }
            else
            {
              UniformIndex = C3DFXGLSLProgramGetUniformIndex(v82, *(const void **)(v86 + 48));
              if (UniformIndex == -1)
              {
                NextUniformIndex = (char *)C3DFXGLSLProgramGetNextUniformIndex(v82);
                *(_QWORD *)(v86 + 40) = NextUniformIndex;
                C3DFXGLSLProgramSetUniformIndex(v82, *(const void **)(v86 + 48), NextUniformIndex);
              }
              else
              {
                *(_QWORD *)(v86 + 40) = UniformIndex;
              }
            }
            ++v85;
          }
          while (v85 < *(_QWORD *)(v83 + 520));
        }
      }
      else
      {
        v91 = scn_default_log();
        if (os_log_type_enabled(v91, OS_LOG_TYPE_FAULT))
          C3DFXPassInitialize_cold_2(v91, v92, v93, v94, v95, v96, v97, v98);
      }
    }
  }
}

uint64_t C3DFXPassSetInitializeCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 216) = a2;
  return result;
}

uint64_t C3DFXPassSetup(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 224);
  if (v1)
    return v1();
  return result;
}

uint64_t C3DFXPassSetSetupCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 224) = a2;
  return result;
}

uint64_t C3DFXPassSetShouldExecuteCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 232) = a2;
  return result;
}

uint64_t C3DFXPassWillExecute(uint64_t *a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t *);

  result = C3DEngineContextGetFXContext(a1[3]);
  *(_BYTE *)(result + 120) = a1[9];
  v3 = *(uint64_t (**)(uint64_t *))(*a1 + 240);
  if (v3)
    return v3(a1);
  return result;
}

uint64_t C3DFXPassSetWillExecuteCallback(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 240) = a2;
  return result;
}

uint64_t C3DFXPassExecute(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 248);
  if (v1)
    return v1();
  return result;
}

uint64_t C3DFXPassDidExecute(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 256);
  if (v1)
    return v1();
  return result;
}

uint64_t C3DFXPassReshape(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 264);
  if (v1)
    return v1();
  return result;
}

uint64_t C3DFXPassSetUserInfo(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 280) = a2;
  return result;
}

void C3DFXPassAddInputsWithDescription(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex Count;
  CFIndex v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      __updateRequireLighting_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
      if (theDict)
        goto LABEL_4;
LABEL_11:
      *(_QWORD *)(a1 + 520) = 0;
      return;
    }
  }
  if (!theDict)
    goto LABEL_11;
LABEL_4:
  Count = CFDictionaryGetCount(theDict);
  v15 = Count;
  *(_QWORD *)(a1 + 520) = 0;
  if (Count < 1)
  {
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 512) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    context[0] = a1;
    context[1] = a3;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_convertInputsDescriptionToInputs, context);
    v16 = *(_QWORD *)(a1 + 520);
  }
  if (v16 != v15)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      C3DFXPassAddInputsWithDescription_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

void _convertInputsDescriptionToInputs(const void *a1, void *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  CFTypeID v8;
  void *Value;
  const __CFDictionary *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  const __CFDictionary *Description;
  const __CFDictionary *v22;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  void *v25;
  const __CFString *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v5 = a3[1];
  v7 = C3DFXPassAddInputWithName(*a3, a1);
  v8 = CFGetTypeID(a2);
  if (v8 == CFDictionaryGetTypeID())
  {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("target"));
    v10 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("sampler"));
    if (!v10)
      v10 = (const __CFDictionary *)a2;
    v7[9] = C3DTextureSamplerCreateWithPropertyList(v10);
    a2 = Value;
  }
  if (!a2)
  {
    v11 = scn_default_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      _convertInputsDescriptionToInputs_cold_1(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  C3DFXPassInputSetSymbolName((uint64_t)v7, a2);
  if (CFEqual(a2, CFSTR("COLOR")))
  {
    v19 = 0;
    *((_BYTE *)v7 + 80) |= 1u;
    v20 = *(_DWORD *)(v6 + 184) | 0x2000000;
LABEL_12:
    *(_DWORD *)(v6 + 184) = v20;
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("DEPTH")))
  {
    v19 = 0;
    *((_BYTE *)v7 + 80) |= 2u;
    v20 = *(_DWORD *)(v6 + 184) | 0x4000000;
    goto LABEL_12;
  }
  Description = (const __CFDictionary *)C3DFXTechniqueGetDescription(v5);
  if (!Description)
    goto LABEL_22;
  v22 = Description;
  v23 = (const __CFDictionary *)CFDictionaryGetValue(Description, CFSTR("targets"));
  if (!v23 || (v19 = (void *)CFDictionaryGetValue(v23, a2)) == 0)
  {
    v24 = (const __CFDictionary *)CFDictionaryGetValue(v22, CFSTR("symbols"));
    if (v24)
    {
      v25 = (void *)CFDictionaryGetValue(v24, a2);
LABEL_21:
      v19 = v25;
      goto LABEL_13;
    }
    if (_convertSemanticStringToSemantic(a2))
    {
      v26 = CFSTR("semantic");
      v27[0] = a2;
      v25 = (void *)objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
      goto LABEL_21;
    }
LABEL_22:
    v19 = 0;
  }
LABEL_13:
  _setupInput(v6, (uint64_t)v7, (uint64_t)a1, v5, v19);
}

void C3DFXPassAddOutputsWithDescription(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
    {
      __updateRequireLighting_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
      if (theDict)
        goto LABEL_4;
LABEL_11:
      *(_DWORD *)(a1 + 440) = 0;
      return;
    }
  }
  if (!theDict)
    goto LABEL_11;
LABEL_4:
  Count = CFDictionaryGetCount(theDict);
  v15 = Count;
  *(_DWORD *)(a1 + 440) = 0;
  if (Count < 1)
  {
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 432) = malloc_type_malloc(Count << 6, 0x1060040C031C1FFuLL);
    v25[1] = a3;
    v25[2] = 0;
    v25[0] = a1;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)_convertOutputsDescriptionToOutputs, v25);
    v16 = *(unsigned int *)(a1 + 440);
  }
  if (v15 < v16)
  {
    v17 = scn_default_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
      C3DFXPassAddOutputsWithDescription_cold_1(v17, v18, v19, v20, v21, v22, v23, v24);
  }
}

void _convertOutputsDescriptionToOutputs(const void *a1, CFTypeRef cf1, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _DWORD *v13;
  const __CFBoolean *v14;
  const __CFBoolean *v15;
  void *v16;
  int v17;
  uint64_t v18;
  CFTypeRef v19;
  const __CFDictionary *Description;
  const __CFDictionary *v21;
  const __CFDictionary *Value;
  const __CFDictionary *v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint8_t buf[4];
  CFTypeRef v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v5 = a3[1];
  if (!CFEqual(cf1, CFSTR("COLOR")))
  {
    if (CFEqual(cf1, CFSTR("DEPTH")))
      goto LABEL_5;
    Description = (const __CFDictionary *)C3DFXTechniqueGetDescription(v5);
    if (Description)
    {
      v21 = Description;
      Value = (const __CFDictionary *)CFDictionaryGetValue(Description, CFSTR("targets"));
      if (Value)
      {
        v23 = (const __CFDictionary *)CFDictionaryGetValue(Value, cf1);
        if (v23)
        {
          v7 = v23;
LABEL_34:
          v8 = 0;
          goto LABEL_7;
        }
      }
      v24 = (const __CFDictionary *)CFDictionaryGetValue(v21, CFSTR("symbols"));
      if (v24)
      {
        v25 = (const __CFDictionary *)CFDictionaryGetValue(v24, cf1);
        if (v25)
        {
          v7 = v25;
          v26 = scn_default_log();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v30 = cf1;
            _os_log_impl(&dword_1DCCB8000, v26, OS_LOG_TYPE_DEFAULT, "Warning: symbol named %@ should be in \"targets\" not \"symbols\"", buf, 0xCu);
          }
          goto LABEL_34;
        }
      }
    }
    v27 = scn_default_log();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v30 = cf1;
      _os_log_impl(&dword_1DCCB8000, v27, OS_LOG_TYPE_DEFAULT, "Warning: _convertOutputsDescriptionToOutputs - can't find output named %@", buf, 0xCu);
    }
    return;
  }
  *(_DWORD *)(v6 + 184) |= 0xA00000u;
  if (CFEqual(cf1, CFSTR("DEPTH")))
  {
LABEL_5:
    v7 = 0;
    *(_DWORD *)(v6 + 184) |= 0x1200000u;
    goto LABEL_6;
  }
  v7 = 0;
LABEL_6:
  v8 = 1;
LABEL_7:
  v9 = *(_QWORD *)(v6 + 432);
  v10 = *(unsigned int *)(v6 + 440);
  v11 = v9 + (v10 << 6);
  *(_BYTE *)(v11 + 48) = 0;
  v12 = (_BYTE *)(v11 + 48);
  *(_DWORD *)(v11 + 20) = 0;
  v13 = (_DWORD *)(v11 + 20);
  *(_DWORD *)(v9 + (v10 << 6)) = 1065353216;
  if (v7)
  {
    v14 = (const __CFBoolean *)CFDictionaryGetValue(v7, CFSTR("global"));
    if (v14 && CFBooleanGetValue(v14))
      *v13 = 2147483646;
    v15 = (const __CFBoolean *)CFDictionaryGetValue(v7, CFSTR("persistent"));
    if (v15 && CFBooleanGetValue(v15))
      *v13 = 0x7FFFFFFF;
    v16 = (void *)CFDictionaryGetValue(v7, CFSTR("clearColor"));
    if (v16)
    {
      sscanf((const char *)objc_msgSend(v16, "UTF8String"), "%f %f %f %f", v9 + (v10 << 6) + 32, v9 + (v10 << 6) + 36, v9 + (v10 << 6) + 40, v9 + (v10 << 6) + 44);
      *v12 = 1;
    }
  }
  if (CFEqual(a1, CFSTR("color")) || CFEqual(a1, CFSTR("color0")))
  {
    v17 = 1;
LABEL_19:
    v18 = v9 + (v10 << 6);
    *(_DWORD *)(v18 + 16) = v17;
    *(_DWORD *)(v6 + 184) |= 0x200000u;
    if ((v8 & 1) != 0)
      v19 = 0;
    else
      v19 = CFRetain(cf1);
    *(_QWORD *)(v18 + 8) = v19;
    ++*(_DWORD *)(v6 + 440);
    return;
  }
  if (CFEqual(a1, CFSTR("color1")))
  {
    v17 = 2;
    goto LABEL_19;
  }
  if (CFEqual(a1, CFSTR("color2")))
  {
    v17 = 3;
    goto LABEL_19;
  }
  if (CFEqual(a1, CFSTR("color3")))
  {
    v17 = 4;
    goto LABEL_19;
  }
  if (CFEqual(a1, CFSTR("depth")))
  {
    v17 = 0;
    goto LABEL_19;
  }
  if (CFEqual(a1, CFSTR("stencil")))
  {
    v17 = 5;
    goto LABEL_19;
  }
  v28 = scn_default_log();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    _convertOutputsDescriptionToOutputs_cold_1();
}

uint64_t C3DFXPassRequireFBO(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;

  if (!a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x400000) != 0)
    v4 = 1;
  else
    v4 = (a3 ^ 1) & (v3 >> 21);
  if (*(_DWORD *)(a1 + 24))
    return v4;
  else
    return 0;
}

BOOL C3DFXPassIsOverridingPrograms(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      C3DFXContextIsMainPass_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 96) != 0;
}

const void *C3DFXPassGetOverridingProgramHashCode(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  const __CFDictionary *v6;
  __int128 v7;
  __CFNotificationCenter *LocalCenter;
  const void *Value;
  uint64_t Material;
  uint64_t v11;
  uint64_t Node;
  uint64_t RenderContext;
  unsigned int v14;
  __int16 *v15;
  int v16;
  int CommonProfileConditioners;
  int v19;
  unsigned int v20;
  int v21;
  char PreferredRenderMode;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t Geometry;
  __int16 v27;
  unsigned int v28;
  uint64_t CommonProfile;
  uint64_t EffectSlot;
  BOOL HasImageOrTexture;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  _QWORD *v36;
  __C3DGeometry *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t Mesh;
  const void *MeshElement;
  __CFDictionary *v44;
  CFDictionaryValueCallBacks v45;

  if (!C3DFXPassIsOverridingPrograms((uint64_t)a2))
    return 0;
  v6 = (const __CFDictionary *)a2[70];
  if (!v6)
  {
    v7 = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 16);
    *(_OWORD *)&v45.version = *MEMORY[0x1E0C9B3A0];
    *(_OWORD *)&v45.release = v7;
    v45.equal = *(CFDictionaryEqualCallBack *)(MEMORY[0x1E0C9B3A0] + 32);
    v45.release = (CFDictionaryReleaseCallBack)C3DProgramHashCodeReleaseCallBack;
    a2[70] = CFDictionaryCreateMutable(0, 0, 0, &v45);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, a2, (CFNotificationCallback)__RendererElementWillDie, CFSTR("kC3DNotificationRendererElementWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v6 = (const __CFDictionary *)a2[70];
  }
  Value = CFDictionaryGetValue(v6, a3);
  if (!Value)
  {
    Material = C3DFXPassGetMaterial((uint64_t)a2);
    if (Material)
    {
      v11 = Material;
      if (C3DMaterialGetCommonProfileIfNoTechnique(Material))
      {
        Node = C3DRendererElementGetNode((uint64_t)a3);
        if (a1)
        {
          RenderContext = C3DEngineContextGetRenderContext(a1);
          v15 = (__int16 *)(a3 + 36);
          v14 = a3[36];
          if (RenderContext)
          {
            if (-[SCNMTLRenderContext reverseZ](RenderContext))
              v16 = -128;
            else
              v16 = 0;
          }
          else
          {
            v16 = 0;
          }
          v21 = (v14 >> 11) & 7;
          CommonProfileConditioners = C3DEngineContextGetCommonProfileConditioners(a1);
          PreferredRenderMode = C3DEngineContextGetPreferredRenderMode(a1);
          v23 = 8 * (PreferredRenderMode & 3);
          if ((PreferredRenderMode & 3) != 0)
            v24 = 32 * (C3DEngineContextGetPreferredMultiVertexOutputStreamGenerator(a1) & 3);
          else
            v24 = 0;
          v19 = v16 | v21 | v23 | v24;
          v20 = C3DEngineContextGetEyeCount(a1) << 16;
        }
        else
        {
          CommonProfileConditioners = 0;
          v15 = (__int16 *)(a3 + 36);
          v19 = (a3[36] >> 11) & 7;
          v20 = 0x10000;
        }
        v25 = C3DRendererElementGetMaterial((uint64_t)a3);
        Geometry = C3DRendererElementGetGeometry((uint64_t)a3);
        if ((!C3DRendererElementIsOpaque((uint64_t)a3) || (v19 & 0x18) != 0)
          && (C3DFXPassGetDrawOnlyShadowCaster((uint64_t)a2) & 1) != 0
          || v25 && (C3DEntityHasShaderModifiers(v25, 0) & 1) != 0)
        {
          v27 = *v15;
LABEL_35:
          a3[36] = v27 | 0x400;
          v40 = CommonProfileConditioners | (v19 << 24);
          v41 = C3DRendererElementGetGeometry((uint64_t)a3);
          Mesh = C3DRendererElementGetMesh((uint64_t)a3);
          MeshElement = C3DRendererElementGetMeshElement((uint64_t)a3);
          v39 = C3DRendererElementGetMaterial((uint64_t)a3);
          v35 = v40 | v20 | 0x20;
          v36 = (_QWORD *)Node;
          v37 = (__C3DGeometry *)v41;
          v38 = Mesh;
          v34 = MeshElement;
LABEL_36:
          Value = (const void *)C3DProgramHashCodeCreate(v36, v37, v38, (uint64_t)v34, 0, v39, v35);
          v44 = (__CFDictionary *)a2[70];
          if (Value)
          {
            CFDictionarySetValue(v44, a3, Value);
            CFRelease(Value);
          }
          else
          {
            CFDictionaryRemoveValue(v44, a3);
          }
          return Value;
        }
        if (Geometry)
          v28 = C3DEntityHasShaderModifiers(Geometry, 0) ^ 1;
        else
          v28 = 1;
        if (v25
          && v28
          && (CommonProfile = C3DMaterialGetCommonProfile(v25),
              (EffectSlot = C3DEffectCommonProfileGetEffectSlot(CommonProfile, 15, 0)) != 0))
        {
          HasImageOrTexture = C3DEffectSlotHasImageOrTexture(EffectSlot);
          v27 = *v15;
          if (HasImageOrTexture)
            goto LABEL_35;
        }
        else
        {
          v27 = *v15;
          if (!v28)
            goto LABEL_35;
        }
        a3[36] = v27 & 0xFBFF;
        v32 = C3DRendererElementGetGeometry((uint64_t)a3);
        v33 = C3DRendererElementGetMesh((uint64_t)a3);
        v34 = C3DRendererElementGetMeshElement((uint64_t)a3);
        v35 = CommonProfileConditioners | (v19 << 24) | v20;
        v36 = (_QWORD *)Node;
        v37 = (__C3DGeometry *)v32;
        v38 = v33;
        v39 = v11;
        goto LABEL_36;
      }
    }
    return 0;
  }
  return Value;
}

void C3DProgramHashCodeReleaseCallBack(uint64_t a1, uint64_t a2)
{
  C3DProgramHashCodeRelease(a2);
}

void __RendererElementWillDie(int a1, uint64_t a2, int a3, void *key)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(a2 + 560))
  {
    v6 = scn_default_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      __RendererElementWillDie_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 560), key);
}

const char *C3DFXPassGetCStringName(uint64_t a1)
{
  const char *result;

  result = CFStringGetCStringPtr(*(CFStringRef *)(a1 + 16), 0x8000100u);
  if (!result)
  {
    if (CFStringGetCString(*(CFStringRef *)(a1 + 16), C3DFXPassGetCStringName_cstr, 99, 0x8000100u))
      return C3DFXPassGetCStringName_cstr;
    else
      return 0;
  }
  return result;
}

uint64_t C3DFXPassGetBlendStates(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 104);
}

uint64_t C3DFXPassGetRasterizerStates(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
  {
    v2 = scn_default_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return *(_QWORD *)(a1 + 112);
}

uint64_t C3DFXPassIsViewDependant(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 185) >> 5) & 1;
}

void *C3DFXPassSetInitializeBlock(uint64_t a1, void *aBlock)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 544) = result;
  return result;
}

uint64_t C3DFXPassGetInitializeBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 544);
}

void *C3DFXPassSetExecuteBlock(uint64_t a1, void *aBlock)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;

  if (!a1)
  {
    v4 = scn_default_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __updateRequireLighting_cold_1(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = _Block_copy(aBlock);
  *(_QWORD *)(a1 + 552) = result;
  return result;
}

uint64_t C3DFXPassGetExecuteBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 552);
}

void _C3DFXPassInputCFFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  v4 = (const void *)a1[8];
  if (v4)
  {
    CFRelease(v4);
    a1[8] = 0;
  }
  v5 = (const void *)a1[12];
  if (v5)
    _Block_release(v5);
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
}

CFStringRef _C3DFXPassInputCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXPassInput %@>"), a1[7]);
}

CFStringRef _C3DFXPassInputCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXPassInput %@>"), a1[7]);
}

__CFArray *_C3DFXPassInputCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v16;
  int v17;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 72;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("sampler"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 56;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("symbolName"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 48;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v14 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("uniformName"));
  CFDictionarySetValue(v11, CFSTR("type"), v12);
  CFDictionarySetValue(v11, CFSTR("address"), v14);
  CFDictionarySetValue(v11, CFSTR("semantic"), v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  return Mutable;
}

void _C3DFXPassCFFinalize(uint64_t a1)
{
  void (*v2)(uint64_t *);
  uint64_t v3;
  __CFNotificationCenter *LocalCenter;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  __CFNotificationCenter *v17;
  const void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(void (**)(uint64_t *))(a1 + 272);
  if (v2)
  {
    v27 = a1;
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
    v31 = 0xBFF0000000000000;
    v3 = *(_QWORD *)(a1 + 280);
    v34 = 0;
    v32 = v3;
    v33 = 0;
    v35 = 0;
    v2(&v27);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kC3DNotificationPassWillDie"), (const void *)a1, 0, 1u);
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v6 = *(const void **)(a1 + 536);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 536) = 0;
  }
  v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v11 = *(const void **)(a1 + 88);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v12 = *(const void **)(a1 + 96);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v13 = *(const void **)(a1 + 104);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 104) = 0;
  }
  C3DRasterizerStatesRelease(*(CFTypeRef *)(a1 + 112));
  v14 = *(const void **)(a1 + 456);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 456) = 0;
  }
  v15 = *(const void **)(a1 + 472);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 472) = 0;
  }
  v16 = *(const void **)(a1 + 464);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 464) = 0;
  }
  if (*(_QWORD *)(a1 + 560))
  {
    v17 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(v17, (const void *)a1, CFSTR("kC3DNotificationRendererElementWillDie"), 0);
    v18 = *(const void **)(a1 + 560);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 560) = 0;
    }
  }
  if (*(uint64_t *)(a1 + 520) >= 1)
  {
    v19 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 512) + 8 * v19++));
    while (*(_QWORD *)(a1 + 520) > v19);
  }
  v20 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 432);
    v23 = 8;
    do
    {
      v24 = *(const void **)(v22 + v23);
      if (v24)
      {
        CFRelease(v24);
        v22 = *(_QWORD *)(a1 + 432);
        *(_QWORD *)(v22 + v23) = 0;
        v20 = *(unsigned int *)(a1 + 440);
      }
      ++v21;
      v23 += 64;
    }
    while (v21 < v20);
  }
  free(*(void **)(a1 + 512));
  free(*(void **)(a1 + 432));
  v25 = *(const void **)(a1 + 544);
  if (v25)
    _Block_release(v25);
  v26 = *(const void **)(a1 + 552);
  if (v26)
    _Block_release(v26);
}

CFStringRef _C3DFXPassCFCopyFormatDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXPass %@>"), a1[2]);
}

CFStringRef _C3DFXPassCFCopyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<C3DFXPass %@>"), a1[2]);
}

__CFArray *_C3DFXPassCopyInstanceVariables(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  uint64_t v38;
  int v39;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 16;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 88;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("program"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 24;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("draw"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 448;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("pointOfView"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 456;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("rootNode"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 472;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("mirrorNode"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 96;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("material"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 536;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v36 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("nameToInput"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  return Mutable;
}

uint64_t _stencilOpNameToOp(void *a1)
{
  uint64_t result;
  NSObject *v3;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("keep")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("zero")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("replace")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("increment")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("decrement")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("invert")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("incrementWrap")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("decrementWrap")) & 1) != 0)
    return 7;
  v3 = scn_default_log();
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    _depthFuncNameToDepthFunc_cold_1();
    return 0;
  }
  return result;
}

uint64_t _blendFactorFromString(void *a1)
{
  NSObject *v3;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("zero")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("one")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("srcColor")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusSrcColor")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("srcAlpha")) & 1) != 0)
    return 4;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusSrcAlpha")) & 1) != 0)
    return 5;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("dstColor")) & 1) != 0)
    return 6;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusDstColor")) & 1) != 0)
    return 7;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("dstAlpha")) & 1) != 0)
    return 8;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusDstAlpha")) & 1) != 0)
    return 9;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("constantColor")) & 1) != 0)
    return 10;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusConstantColor")) & 1) != 0)
    return 11;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("constantAlpha")) & 1) != 0)
    return 12;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("oneMinusConstantAlpha")) & 1) != 0)
    return 13;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("alphaSaturate")) & 1) == 0)
  {
    v3 = scn_default_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      _blendFactorFromString_cold_1();
    return 1;
  }
  return 14;
}

uint64_t _blendOpFromString(void *a1)
{
  uint64_t result;
  NSObject *v3;

  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("add")) & 1) != 0)
    return 0;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("substract")) & 1) != 0)
    return 1;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("reverseSubstract")) & 1) != 0)
    return 2;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("min")) & 1) != 0)
    return 3;
  if ((objc_msgSend(a1, "isEqualToString:", CFSTR("max")) & 1) != 0)
    return 4;
  v3 = scn_default_log();
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    _blendOpFromString_cold_1();
    return 0;
  }
  return result;
}

void _setupInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  int v25;
  int v26;
  unsigned int v27;
  const __CFString *Value;
  const __CFString *v29;
  uint64_t ValueOffsetForSymbol;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFString *v40;
  CFURLRef v41;
  CFURLRef v42;
  const void *v43;
  NSObject *v44;
  NSObject *v45;
  unsigned __int16 v46;

  if (!a1 && (v8 = scn_default_log(), os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)))
  {
    C3DFXContextIsMainPass_cold_1(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_6;
  }
  else if (a2)
  {
    goto LABEL_6;
  }
  v16 = scn_default_log();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
    C3DGeometryCreateCopy_cold_1(v16, v17, v18, v19, v20, v21, v22, v23);
LABEL_6:
  *(_DWORD *)(a2 + 16) = 0;
  v24 = (void *)objc_msgSend(a5, "valueForKey:", CFSTR("semantic"));
  if (v24)
  {
    v25 = _convertSemanticStringToSemantic(v24);
    if (v25)
    {
      v26 = v25;
      *(_DWORD *)(a2 + 32) = v25;
      v27 = objc_msgSend((id)objc_msgSend(a5, "valueForKey:", CFSTR("channel")), "intValue");
      *(_DWORD *)(a2 + 104) = v27;
      if (C3DVertexAttribFromParameterSemantic(v26, v27) != 14)
        *(_BYTE *)(a2 + 80) |= 4u;
    }
    return;
  }
  if ((*(_BYTE *)(a2 + 80) & 3) != 0)
  {
LABEL_11:
    *(_DWORD *)(a2 + 16) = 1;
    return;
  }
  if (a5)
  {
    Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("type"));
    if (Value)
    {
      v29 = Value;
      if (CFEqual(Value, CFSTR("color")) || CFEqual(v29, CFSTR("depth")) || CFEqual(v29, CFSTR("stencil")))
        goto LABEL_11;
      *(_DWORD *)(a2 + 16) = 2;
      *(_QWORD *)(a2 + 24) = C3DBaseTypeArraySizeFromString(v29);
      *(_WORD *)(a2 + 20) = C3DBaseTypeFromMetalOrGLSLString(v29);
      v46 = 0;
      ValueOffsetForSymbol = C3DFXTechniqueGetValueOffsetForSymbol(a4, *(void **)(a2 + 56), &v46, 0);
      *(_QWORD *)(a2 + 88) = ValueOffsetForSymbol;
      if (ValueOffsetForSymbol == -1)
      {
        *(_DWORD *)(a2 + 16) = 0;
      }
      else
      {
        v31 = v46;
        if (v46 != *(unsigned __int16 *)(a2 + 20))
        {
          v32 = scn_default_log();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
            _setupInput_cold_3(v32, v33, v34, v35, v36, v37, v38, v39);
          v31 = *(unsigned __int16 *)(a2 + 20);
        }
        if (v31 == 5)
        {
          v40 = (__CFString *)objc_msgSend(a5, "valueForKey:", CFSTR("image"));
          if (v40)
          {
            v41 = C3DImageCreateWithName(v40);
            if (v41)
            {
              v42 = v41;
              v43 = (const void *)C3DFXSamplerCreate();
              C3DFXSamplerSetImage((uint64_t)v43, v42);
              CFRelease(v42);
              C3DFXTechniqueSetValueForSymbol(a4, *(void **)(a2 + 56), v43);
              CFRelease(v43);
            }
          }
        }
      }
    }
    else
    {
      v45 = scn_default_log();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        _setupInput_cold_2();
    }
  }
  else
  {
    v44 = scn_default_log();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      _setupInput_cold_1();
  }
}

